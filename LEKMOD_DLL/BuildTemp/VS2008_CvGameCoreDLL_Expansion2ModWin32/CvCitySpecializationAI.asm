; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Desktop\Lekmod Files\Lekmod DLL versions\v29\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvCitySpecializationAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
CONST	SEGMENT
$SG225338 DB	'SubType', 00H
$SG225340 DB	'YieldType', 00H
	ORG $+2
$SG225344 DB	'CitySpecializationType', 00H
	ORG $+1
$SG225345 DB	'CitySpecialization_Flavors', 00H
	ORG $+1
$SG225346 DB	'CitySpecializationType', 00H
	ORG $+1
$SG225347 DB	'CitySpecialization_TargetYields', 00H
$SG225348 DB	'IsWonder', 00H
	ORG $+3
$SG225349 DB	'IsDefault', 00H
	ORG $+2
$SG225350 DB	'MustBeCoastal', 00H
	ORG $+2
$SG225351 DB	'IsOperationUnitProvider', 00H
$SG225698 DB	'FLAVOR_EXPANSION', 00H
	ORG $+3
$SG225701 DB	'FLAVOR_WONDER', 00H
	ORG $+2
$SG225704 DB	'FLAVOR_GOLD', 00H
$SG225707 DB	'FLAVOR_SCIENCE', 00H
	ORG $+1
$SG225710 DB	'FLAVOR_SPACESHIP', 00H
	ORG $+3
$SG225718 DB	'ECONOMICAISTRATEGY_EARLY_EXPANSION', 00H
	ORG $+1
$SG225749 DB	'FLAVOR_OFFENSE', 00H
	ORG $+1
$SG225753 DB	'AICITYSTRATEGY_CAPITAL_UNDER_THREAT', 00H
$SG225758 DB	'MILITARYAISTRATEGY_WAR_MOBILIZATION', 00H
$SG225761 DB	'MILITARYAISTRATEGY_EMPIRE_DEFENSE', 00H
	ORG $+2
$SG225764 DB	'MILITARYAISTRATEGY_EMPIRE_DEFENSE_CRITICAL', 00H
	ORG $+1
$SG225767 DB	'MILITARYAISTRATEGY_ENOUGH_MILITARY_UNITS', 00H
	ORG $+3
$SG225770 DB	'MILITARYAISTRATEGY_NEED_NAVAL_UNITS', 00H
$SG225773 DB	'MILITARYAISTRATEGY_NEED_NAVAL_UNITS_CRITICAL', 00H
	ORG $+3
$SG225776 DB	'MILITARYAISTRATEGY_ENOUGH_NAVAL_UNITS', 00H
	ORG $+2
$SG225800 DB	'FLAVOR_OFFENSE', 00H
	ORG $+1
$SG225804 DB	'FLAVOR_SPACESHIP', 00H
	ORG $+3
$SG226936 DB	'%03d, ', 00H
	ORG $+1
$SG226938 DB	', Empire-wide specialization weight, ', 00H
	ORG $+2
$SG226944 DB	'General Economy', 00H
$SG226949 DB	'%d', 00H
	ORG $+1
$SG226953 DB	', ', 00H
	ORG $+1
$SG226958 DB	'Production Specialization: %d', 00H
	ORG $+2
$SG226959 DB	'%d', 00H
	ORG $+1
$SG226963 DB	', ', 00H
	ORG $+1
$SG226978 DB	'%03d, ', 00H
	ORG $+1
$SG226980 DB	', ', 00H
	ORG $+1
$SG226983 DB	'New Specialization Type: %d', 00H
$SG226987 DB	', ', 00H
	ORG $+1
$SG226989 DB	', WonderCity', 00H
	ORG $+3
$SG227001 DB	'%03d, ', 00H
	ORG $+1
$SG227003 DB	', ', 00H
	ORG $+1
$SG227011 DB	'Update: New grand strategy: %s', 00H
	ORG $+1
$SG227013 DB	'Update: New war', 00H
$SG227015 DB	'Update: City founded', 00H
	ORG $+3
$SG227017 DB	'Update: My city captured', 00H
	ORG $+3
$SG227019 DB	'Update: Enemy city captured', 00H
$SG227021 DB	'Update: War strategy turned on', 00H
	ORG $+1
$SG227023 DB	'Update: War strategy turned off', 00H
$SG227025 DB	'Update: Tech research complete', 00H
	ORG $+1
$SG227027 DB	'Update: wonder built by rival, WONDER', 00H
	ORG $+2
$SG227041 DB	'%03d, ', 00H
	ORG $+1
$SG227043 DB	', ', 00H
	ORG $+1
$SG227045 DB	'Next Specialization: %d', 00H
$SG227058 DB	'%03d, ', 00H
	ORG $+1
$SG227060 DB	', ', 00H
	ORG $+1
$SG227068 DB	', Best site value: %d', 00H
	ORG $+2
$SG227086 DB	'%03d, ', 00H
	ORG $+1
$SG227090 DB	', ', 00H
	ORG $+1
$SG227091 DB	', ', 00H
	ORG $+1
$SG227099 DB	', Value: %d', 00H
$SG227111 DB	'.csv', 00H
	ORG $+3
$SG227112 DB	'CitySpecializationLog_', 00H
	ORG $+1
$SG227114 DB	'CitySpecializationLog.csv', 00H
CONST	ENDS
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	?wrapCoordDifference@@YAHHI_N@Z			; wrapCoordDifference
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?wrapCoordDifference@@YAHHI_N@Z
_TEXT	SEGMENT
_iDiff$ = 8						; size = 4
_uiRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?wrapCoordDifference@@YAHHI_N@Z PROC			; wrapCoordDifference, COMDAT

; 57   : 	if(bWrap)

	cmp	BYTE PTR _bWrap$[esp-4], 0
	mov	eax, DWORD PTR _iDiff$[esp-4]
	je	SHORT $LN5@wrapCoordD

; 58   : 	{
; 59   : 		if(iDiff > (int)(uiRange >> 1))		// Using an unsigned int so we can safely assume that value >> 1 == value / 2

	mov	edx, DWORD PTR _uiRange$[esp-4]
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN3@wrapCoordD

; 60   : 		{
; 61   : 			return (iDiff - (int)uiRange);

	sub	eax, edx

; 66   : 		}
; 67   : 	}
; 68   : 
; 69   : 	return iDiff;
; 70   : }

	ret	0
$LN3@wrapCoordD:

; 62   : 		}
; 63   : 		else if(iDiff < -(int)(uiRange >> 1))

	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN5@wrapCoordD

; 64   : 		{
; 65   : 			return (iDiff + (int)uiRange);

	add	eax, edx
$LN5@wrapCoordD:

; 66   : 		}
; 67   : 	}
; 68   : 
; 69   : 	return iDiff;
; 70   : }

	ret	0
?wrapCoordDifference@@YAHHI_N@Z ENDP			; wrapCoordDifference
_TEXT	ENDS
PUBLIC	?xToHexspaceX@@YAHHH@Z				; xToHexspaceX
; Function compile flags: /Ogtpy
;	COMDAT ?xToHexspaceX@@YAHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?xToHexspaceX@@YAHHH@Z PROC				; xToHexspaceX, COMDAT

; 86   : 	return iX - ((iY >= 0) ? (iY>>1) : ((iY - 1)/2));

	mov	ecx, DWORD PTR _iY$[esp-4]
	test	ecx, ecx
	jge	SHORT $LN5@xToHexspac
	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
	mov	ecx, eax
$LN5@xToHexspac:
	mov	eax, DWORD PTR _iX$[esp-4]
	sar	ecx, 1
	sub	eax, ecx

; 87   : }

	ret	0
?xToHexspaceX@@YAHHH@Z ENDP				; xToHexspaceX
_TEXT	ENDS
PUBLIC	?GetFlavorValue@CvCitySpecializationXMLEntry@@QBEHH@Z ; CvCitySpecializationXMLEntry::GetFlavorValue
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
;	COMDAT ?GetFlavorValue@CvCitySpecializationXMLEntry@@QBEHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?GetFlavorValue@CvCitySpecializationXMLEntry@@QBEHH@Z PROC ; CvCitySpecializationXMLEntry::GetFlavorValue, COMDAT
; _this$ = ecx

; 78   : 	FAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 79   : 	FAssertMsg(i > -1, "Index out of bounds");
; 80   : 	return m_piFlavorValue ? m_piFlavorValue[i] : -1;

	mov	eax, DWORD PTR [ecx+260]
	test	eax, eax
	je	SHORT $LN3@GetFlavorV
	mov	ecx, DWORD PTR _i$[esp-4]
	mov	eax, DWORD PTR [eax+ecx*4]

; 81   : }

	ret	4
$LN3@GetFlavorV:

; 78   : 	FAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 79   : 	FAssertMsg(i > -1, "Index out of bounds");
; 80   : 	return m_piFlavorValue ? m_piFlavorValue[i] : -1;

	or	eax, -1

; 81   : }

	ret	4
?GetFlavorValue@CvCitySpecializationXMLEntry@@QBEHH@Z ENDP ; CvCitySpecializationXMLEntry::GetFlavorValue
_TEXT	ENDS
PUBLIC	?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ; CvCitySpecializationXMLEntry::GetYieldType
; Function compile flags: /Ogtpy
;	COMDAT ?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ
_TEXT	SEGMENT
?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ PROC ; CvCitySpecializationXMLEntry::GetYieldType, COMDAT
; _this$ = ecx

; 86   : 	return m_eYieldType;

	mov	eax, DWORD PTR [ecx+264]

; 87   : }

	ret	0
?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ENDP ; CvCitySpecializationXMLEntry::GetYieldType
_TEXT	ENDS
PUBLIC	?GetYieldTargetTimes100@CvCitySpecializationXMLEntry@@QBEHW4YieldTypes@@@Z ; CvCitySpecializationXMLEntry::GetYieldTargetTimes100
; Function compile flags: /Ogtpy
;	COMDAT ?GetYieldTargetTimes100@CvCitySpecializationXMLEntry@@QBEHW4YieldTypes@@@Z
_TEXT	SEGMENT
_eYield$ = 8						; size = 4
?GetYieldTargetTimes100@CvCitySpecializationXMLEntry@@QBEHW4YieldTypes@@@Z PROC ; CvCitySpecializationXMLEntry::GetYieldTargetTimes100, COMDAT
; _this$ = ecx

; 91   : 	return m_piYieldTargetTimes100[eYield];

	mov	eax, DWORD PTR [ecx+276]
	mov	ecx, DWORD PTR _eYield$[esp-4]
	mov	eax, DWORD PTR [eax+ecx*4]

; 92   : }

	ret	4
?GetYieldTargetTimes100@CvCitySpecializationXMLEntry@@QBEHW4YieldTypes@@@Z ENDP ; CvCitySpecializationXMLEntry::GetYieldTargetTimes100
_TEXT	ENDS
PUBLIC	?GetSubtype@CvCitySpecializationXMLEntry@@QBEHXZ ; CvCitySpecializationXMLEntry::GetSubtype
; Function compile flags: /Ogtpy
;	COMDAT ?GetSubtype@CvCitySpecializationXMLEntry@@QBEHXZ
_TEXT	SEGMENT
?GetSubtype@CvCitySpecializationXMLEntry@@QBEHXZ PROC	; CvCitySpecializationXMLEntry::GetSubtype, COMDAT
; _this$ = ecx

; 98   : 	return m_iSubtype;

	mov	eax, DWORD PTR [ecx+268]

; 99   : }

	ret	0
?GetSubtype@CvCitySpecializationXMLEntry@@QBEHXZ ENDP	; CvCitySpecializationXMLEntry::GetSubtype
_TEXT	ENDS
PUBLIC	?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ	; CvCitySpecializationXMLEntry::IsWonder
; Function compile flags: /Ogtpy
;	COMDAT ?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ
_TEXT	SEGMENT
?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ PROC	; CvCitySpecializationXMLEntry::IsWonder, COMDAT
; _this$ = ecx

; 104  : 	return m_bWonder;

	mov	al, BYTE PTR [ecx+272]

; 105  : }

	ret	0
?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ ENDP	; CvCitySpecializationXMLEntry::IsWonder
_TEXT	ENDS
PUBLIC	?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsDefault
; Function compile flags: /Ogtpy
;	COMDAT ?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ
_TEXT	SEGMENT
?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ PROC	; CvCitySpecializationXMLEntry::IsDefault, COMDAT
; _this$ = ecx

; 110  : 	return m_bDefault;

	mov	al, BYTE PTR [ecx+273]

; 111  : }

	ret	0
?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ ENDP	; CvCitySpecializationXMLEntry::IsDefault
_TEXT	ENDS
PUBLIC	?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsMustBeCoastal
; Function compile flags: /Ogtpy
;	COMDAT ?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ
_TEXT	SEGMENT
?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ PROC ; CvCitySpecializationXMLEntry::IsMustBeCoastal, COMDAT
; _this$ = ecx

; 116  : 	return m_bMustBeCoastal;

	mov	al, BYTE PTR [ecx+274]

; 117  : }

	ret	0
?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ ENDP ; CvCitySpecializationXMLEntry::IsMustBeCoastal
_TEXT	ENDS
PUBLIC	?IsOperationUnitProvider@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsOperationUnitProvider
; Function compile flags: /Ogtpy
;	COMDAT ?IsOperationUnitProvider@CvCitySpecializationXMLEntry@@QBE_NXZ
_TEXT	SEGMENT
?IsOperationUnitProvider@CvCitySpecializationXMLEntry@@QBE_NXZ PROC ; CvCitySpecializationXMLEntry::IsOperationUnitProvider, COMDAT
; _this$ = ecx

; 122  : 	return m_bOperationUnitProvider;

	mov	al, BYTE PTR [ecx+275]

; 123  : }

	ret	0
?IsOperationUnitProvider@CvCitySpecializationXMLEntry@@QBE_NXZ ENDP ; CvCitySpecializationXMLEntry::IsOperationUnitProvider
_TEXT	ENDS
PUBLIC	?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries
; Function compile flags: /Ogtpy
;	COMDAT ?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ PROC ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries, COMDAT
; _this$ = ecx

; 145  : {

	mov	eax, ecx

; 146  : 	return m_paCitySpecializationEntries;
; 147  : }

	ret	0
?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ENDP ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries
_TEXT	ENDS
PUBLIC	?Uninit@CvCitySpecializationAI@@QAEXXZ		; CvCitySpecializationAI::Uninit
; Function compile flags: /Ogtpy
;	COMDAT ?Uninit@CvCitySpecializationAI@@QAEXXZ
_TEXT	SEGMENT
?Uninit@CvCitySpecializationAI@@QAEXXZ PROC		; CvCitySpecializationAI::Uninit, COMDAT
; _this$ = ecx

; 260  : }

	ret	0
?Uninit@CvCitySpecializationAI@@QAEXXZ ENDP		; CvCitySpecializationAI::Uninit
_TEXT	ENDS
PUBLIC	?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ; CvCitySpecializationAI::GetPlayer
; Function compile flags: /Ogtpy
;	COMDAT ?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ
_TEXT	SEGMENT
?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ PROC ; CvCitySpecializationAI::GetPlayer, COMDAT
; _this$ = ecx

; 320  : 	return m_pPlayer;

	mov	eax, DWORD PTR [ecx]

; 321  : }

	ret	0
?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ENDP ; CvCitySpecializationAI::GetPlayer
_TEXT	ENDS
PUBLIC	?GetCitySpecializations@CvCitySpecializationAI@@QAEPAVCvCitySpecializationXMLEntries@@XZ ; CvCitySpecializationAI::GetCitySpecializations
; Function compile flags: /Ogtpy
;	COMDAT ?GetCitySpecializations@CvCitySpecializationAI@@QAEPAVCvCitySpecializationXMLEntries@@XZ
_TEXT	SEGMENT
?GetCitySpecializations@CvCitySpecializationAI@@QAEPAVCvCitySpecializationXMLEntries@@XZ PROC ; CvCitySpecializationAI::GetCitySpecializations, COMDAT
; _this$ = ecx

; 326  : 	return m_pSpecializations;

	mov	eax, DWORD PTR [ecx+4]

; 327  : }

	ret	0
?GetCitySpecializations@CvCitySpecializationAI@@QAEPAVCvCitySpecializationXMLEntries@@XZ ENDP ; CvCitySpecializationAI::GetCitySpecializations
_TEXT	ENDS
PUBLIC	?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ ; CvCitySpecializationAI::GetWonderBuildCity
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Ogtpy
;	COMDAT ?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ PROC ; CvCitySpecializationAI::GetWonderBuildCity, COMDAT
; _this$ = ecx

; 415  : 	CvCity* pRtnValue = NULL;
; 416  : 	if(m_iWonderCityID != -1)

	mov	edx, DWORD PTR [ecx+200]
	xor	eax, eax
	cmp	edx, -1
	je	SHORT $LN1@GetWonderB

; 417  : 	{
; 418  : 		pRtnValue = m_pPlayer->getCity(m_iWonderCityID);

	mov	ecx, DWORD PTR [ecx]
	push	edx
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
$LN1@GetWonderB:

; 419  : 	}
; 420  : 	return pRtnValue;
; 421  : }

	ret	0
?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ ENDP ; CvCitySpecializationAI::GetWonderBuildCity
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	esi
	lea	eax, DWORD PTR __Message$[esp]
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	eax, DWORD PTR __Message$[esp+16]
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[esp+32], 0
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 27   : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 31   : 		}

	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar@2
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar@2:
	mov	eax, esi
	pop	esi
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	mov	eax, DWORD PTR __Message$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 110  : 		}

	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN8@scalar@3
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN8@scalar@3:
	mov	eax, esi
	pop	esi
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z ; CvCitySpecializationAI::AdjustValueBasedOnBuildings
EXTRN	?getMaxFoodKeptPercent@CvCity@@QBEHXZ:PROC	; CvCity::getMaxFoodKeptPercent
EXTRN	?getDomainFreeExperience@CvCity@@QBEHW4DomainTypes@@@Z:PROC ; CvCity::getDomainFreeExperience
EXTRN	?GetBaseYieldRateFromBuildings@CvCity@@QBEHW4YieldTypes@@@Z:PROC ; CvCity::GetBaseYieldRateFromBuildings
EXTRN	?GetNumReligionsWithFollowers@CvCityReligions@@QAEHXZ:PROC ; CvCityReligions::GetNumReligionsWithFollowers
EXTRN	?GetCityReligions@CvCity@@QBEPAVCvCityReligions@@XZ:PROC ; CvCity::GetCityReligions
EXTRN	?GetYieldPerReligionTimes100@CvCity@@QBEHW4YieldTypes@@@Z:PROC ; CvCity::GetYieldPerReligionTimes100
EXTRN	?GetYieldPerPopTimes100@CvCity@@QBEHW4YieldTypes@@@Z:PROC ; CvCity::GetYieldPerPopTimes100
EXTRN	?getYieldRateModifier@CvCity@@QBEHW4YieldTypes@@@Z:PROC ; CvCity::getYieldRateModifier
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
;	COMDAT ?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z
_TEXT	SEGMENT
_pCity$ = 8						; size = 4
_iYieldPerReligion$ = 12				; size = 4
_eYield$ = 12						; size = 4
_iInitialValue$ = 16					; size = 4
?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z PROC ; CvCitySpecializationAI::AdjustValueBasedOnBuildings, COMDAT
; _this$ = ecx

; 1383 : {

	push	ebx
	push	ebp

; 1384 : 	int iRtnValue;
; 1385 : 
; 1386 : 	// Everything looks at yield modifier
; 1387 : 	iRtnValue = iInitialValue * (100 + pCity->getYieldRateModifier(eYield)) / 100;

	mov	ebp, DWORD PTR _eYield$[esp+4]
	push	esi
	push	edi
	mov	edi, DWORD PTR _pCity$[esp+12]
	push	ebp
	mov	ecx, edi
	call	?getYieldRateModifier@CvCity@@QBEHW4YieldTypes@@@Z ; CvCity::getYieldRateModifier
	mov	ecx, eax
	add	ecx, 100				; 00000064H
	imul	ecx, DWORD PTR _iInitialValue$[esp+12]
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	esi, edx
	shr	esi, 31					; 0000001fH

; 1388 : 
; 1389 : 	// ... and yield per pop
; 1390 : 	int iYieldPerPop = pCity->GetYieldPerPopTimes100(eYield);

	push	ebp
	mov	ecx, edi
	add	esi, edx
	call	?GetYieldPerPopTimes100@CvCity@@QBEHW4YieldTypes@@@Z ; CvCity::GetYieldPerPopTimes100
	mov	ebx, eax

; 1391 : 	if(iYieldPerPop > 0)

	test	ebx, ebx
	jle	SHORT $LN11@AdjustValu

; 1392 : 	{
; 1393 : 		iRtnValue = iRtnValue * (100 + iYieldPerPop) / 100;

	lea	ecx, DWORD PTR [ebx+100]
	imul	ecx, esi
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	esi, eax
$LN11@AdjustValu:

; 1394 : 	}
; 1395 : 
; 1396 : 	// ... and yield per pop
; 1397 : 	int iYieldPerReligion = pCity->GetYieldPerReligionTimes100(eYield);

	push	ebp
	mov	ecx, edi
	call	?GetYieldPerReligionTimes100@CvCity@@QBEHW4YieldTypes@@@Z ; CvCity::GetYieldPerReligionTimes100
	mov	DWORD PTR _iYieldPerReligion$[esp+12], eax

; 1398 : 	if(iYieldPerPop > 0)

	test	ebx, ebx
	jle	SHORT $LN16@AdjustValu

; 1399 : 	{
; 1400 : 		iRtnValue = iRtnValue * (100 + (iYieldPerReligion * pCity->GetCityReligions()->GetNumReligionsWithFollowers())) / 100;

	mov	ecx, edi
	call	?GetCityReligions@CvCity@@QBEPAVCvCityReligions@@XZ ; CvCity::GetCityReligions
	mov	ecx, eax
	call	?GetNumReligionsWithFollowers@CvCityReligions@@QAEHXZ ; CvCityReligions::GetNumReligionsWithFollowers
	mov	ecx, eax
	imul	ecx, DWORD PTR _iYieldPerReligion$[esp+12]
	add	ecx, 100				; 00000064H
	imul	ecx, esi
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	mov	esi, ecx
$LN16@AdjustValu:

; 1401 : 	}
; 1402 : 
; 1403 : 	// ... and yield changes
; 1404 : 	int iYieldChanges = pCity->GetBaseYieldRateFromBuildings(eYield);

	push	ebp
	mov	ecx, edi
	call	?GetBaseYieldRateFromBuildings@CvCity@@QBEHW4YieldTypes@@@Z ; CvCity::GetBaseYieldRateFromBuildings

; 1405 : 	if(iYieldChanges > 0)

	test	eax, eax
	jle	SHORT $LN9@AdjustValu

; 1406 : 	{
; 1407 : 		// +20% per point of yield change
; 1408 : 		iRtnValue = iRtnValue * (100 + (iYieldChanges * 20)) / 100;

	add	eax, 5
	imul	eax, esi
	lea	ecx, DWORD PTR [eax+eax*4]
	add	ecx, ecx
	add	ecx, ecx
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	esi, eax
$LN9@AdjustValu:

; 1409 : 	}
; 1410 : 
; 1411 : 	// Other modifiers (unique by yield type)
; 1412 : 	switch(eYield)

	sub	ebp, 0
	je	SHORT $LN6@AdjustValu
	sub	ebp, 1
	jne	SHORT $LN15@AdjustValu

; 1422 : 	}
; 1423 : 	break;
; 1424 : 
; 1425 : 	case YIELD_PRODUCTION:
; 1426 : 		// Double production if any military training facilities present
; 1427 : 		if(pCity->getDomainFreeExperience(DOMAIN_LAND) > 0)

	push	2
	mov	ecx, edi
	call	?getDomainFreeExperience@CvCity@@QBEHW4DomainTypes@@@Z ; CvCity::getDomainFreeExperience
	test	eax, eax
	jle	SHORT $LN15@AdjustValu
	pop	edi

; 1428 : 		{
; 1429 : 			iRtnValue *= 2;

	lea	eax, DWORD PTR [esi+esi]
	pop	esi
	pop	ebp
	pop	ebx

; 1441 : }

	ret	12					; 0000000cH
$LN6@AdjustValu:

; 1413 : 	{
; 1414 : 	case YIELD_FOOD:
; 1415 : 	{
; 1416 : 		int iMaxFoodKeptPercent = pCity->getMaxFoodKeptPercent();

	mov	ecx, edi
	call	?getMaxFoodKeptPercent@CvCity@@QBEHXZ	; CvCity::getMaxFoodKeptPercent

; 1417 : 		if(iMaxFoodKeptPercent >= 100)

	cmp	eax, 100				; 00000064H
	jl	SHORT $LN5@AdjustValu

; 1418 : 		{
; 1419 : 			iMaxFoodKeptPercent = 99;

	mov	eax, 99					; 00000063H
$LN5@AdjustValu:

; 1420 : 		}
; 1421 : 		iRtnValue *= 100 / (100 - iMaxFoodKeptPercent);

	mov	ecx, 100				; 00000064H
	sub	ecx, eax
	mov	eax, 100				; 00000064H
	cdq
	idiv	ecx
	pop	edi
	imul	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 1441 : }

	ret	12					; 0000000cH
$LN15@AdjustValu:
	pop	edi

; 1430 : 		}
; 1431 : 		break;
; 1432 : 
; 1433 : 	case YIELD_GOLD:
; 1434 : 		break;
; 1435 : 
; 1436 : 	case YIELD_SCIENCE:
; 1437 : 		break;
; 1438 : 	}
; 1439 : 
; 1440 : 	return iRtnValue;

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 1441 : }

	ret	12					; 0000000cH
?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z ENDP ; CvCitySpecializationAI::AdjustValueBasedOnBuildings
_TEXT	ENDS
PUBLIC	?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ ; CvCitySpecializationAI::CanBuildSpaceshipParts
EXTRN	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z:PROC ; CvCity::canTrain
EXTRN	?GetSpaceshipProject@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetSpaceshipProject
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
EXTRN	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ:PROC	; CvUnitXMLEntries::GetNumUnits
EXTRN	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ:PROC ; CvGlobals::GetGameUnits
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::firstCity
; Function compile flags: /Ogtpy
;	COMDAT ?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ
_TEXT	SEGMENT
_iLoop$ = -4						; size = 4
?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ PROC ; CvCitySpecializationAI::CanBuildSpaceshipParts, COMDAT
; _this$ = ecx

; 1445 : {

	push	ecx

; 1446 : 	int iLoop;
; 1447 : 
; 1448 : 	// Find a city to test with
; 1449 : 	CvCity* pCity = m_pPlayer->firstCity(&iLoop);

	mov	ecx, DWORD PTR [ecx]
	push	esi
	push	edi
	push	0
	lea	eax, DWORD PTR _iLoop$[esp+16]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity

; 1450 : 
; 1451 : 	// Loop through adding the available units
; 1452 : #ifdef AUI_WARNING_FIXES
; 1453 : 	for (uint iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)
; 1454 : #else
; 1455 : 	for(int iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	edi, eax
	xor	esi, esi
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	test	eax, eax
	jle	SHORT $LN4@CanBuildSp
	npad	6
$LL6@CanBuildSp:

; 1456 : #endif
; 1457 : 	{
; 1458 : 		const UnitTypes eUnit = static_cast<UnitTypes>(iUnitLoop);
; 1459 : 		CvUnitEntry* pkUnitEntry = GC.getUnitInfo(eUnit);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo

; 1460 : 		if(pkUnitEntry)

	test	eax, eax
	je	SHORT $LN5@CanBuildSp

; 1461 : 		{
; 1462 : 			if(pkUnitEntry->GetSpaceshipProject() != NO_PROJECT)

	mov	ecx, eax
	call	?GetSpaceshipProject@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetSpaceshipProject
	cmp	eax, -1
	je	SHORT $LN5@CanBuildSp

; 1463 : 			{
; 1464 : 				// See if this unit can be built now
; 1465 : 				if(pCity->canTrain((UnitTypes)iUnitLoop))

	push	0
	push	0
	push	0
	push	0
	push	0
	push	esi
	mov	ecx, edi
	call	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z ; CvCity::canTrain
	test	al, al
	jne	SHORT $LN10@CanBuildSp
$LN5@CanBuildSp:

; 1450 : 
; 1451 : 	// Loop through adding the available units
; 1452 : #ifdef AUI_WARNING_FIXES
; 1453 : 	for (uint iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)
; 1454 : #else
; 1455 : 	for(int iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	cmp	esi, eax
	jl	SHORT $LL6@CanBuildSp
$LN4@CanBuildSp:
	pop	edi

; 1468 : 				}
; 1469 : 			}
; 1470 : 		}
; 1471 : 	}
; 1472 : 	return false;

	xor	al, al
	pop	esi

; 1473 : }

	pop	ecx
	ret	0
$LN10@CanBuildSp:
	pop	edi

; 1466 : 				{
; 1467 : 					return true;

	mov	al, 1
	pop	esi

; 1473 : }

	pop	ecx
	ret	0
?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ ENDP ; CvCitySpecializationAI::CanBuildSpaceshipParts
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEIXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEIXZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 727  : 		}

	ret	0
?size@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEIXZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAPAVCvCitySpecializationXMLEntry@@I@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAPAVCvCitySpecializationXMLEntry@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAPAVCvCitySpecializationXMLEntry@@I@Z PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator[], COMDAT
; _this$ = ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 786  : 		}

	ret	4
??A?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAPAVCvCitySpecializationXMLEntry@@I@Z ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEIXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?size@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEIXZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::size, COMDAT
; _this$ = ecx

; 620  : 		return (_Mysize);

	mov	eax, DWORD PTR [ecx+8]

; 621  : 		}

	ret	0
?size@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEIXZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::size
_TEXT	ENDS
PUBLIC	?empty@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::empty
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NXZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::empty, COMDAT
; _this$ = ecx

; 630  : 		return (_Mysize == 0);

	xor	eax, eax
	cmp	DWORD PTR [ecx+8], eax
	sete	al

; 631  : 		}

	ret	0
?empty@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NXZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::empty
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax*8]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ PROC ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ ENDP ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >::~_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >::~_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >::~_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAE@XZ ; std::allocator<CvCitySpecializationXMLEntry *>::allocator<CvCitySpecializationXMLEntry *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAE@XZ PROC ; std::allocator<CvCitySpecializationXMLEntry *>::allocator<CvCitySpecializationXMLEntry *>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAE@XZ ENDP ; std::allocator<CvCitySpecializationXMLEntry *>::allocator<CvCitySpecializationXMLEntry *>
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

	mov	eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

	ret	0
?_Nextnode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 4

; 121  : 		}

	ret	0
?_Prevnode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Prevnode
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >::~_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >::~_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >::~_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	??0?$allocator@W4CitySpecializationTypes@@@std@@QAE@XZ ; std::allocator<enum CitySpecializationTypes>::allocator<enum CitySpecializationTypes>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@W4CitySpecializationTypes@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@W4CitySpecializationTypes@@@std@@QAE@XZ PROC ; std::allocator<enum CitySpecializationTypes>::allocator<enum CitySpecializationTypes>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@W4CitySpecializationTypes@@@std@@QAE@XZ ENDP ; std::allocator<enum CitySpecializationTypes>::allocator<enum CitySpecializationTypes>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@XZ ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@XZ PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@XZ ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@XZ ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@XZ PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax*8]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@XZ ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ PROC ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ENDP ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@XZ ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@XZ PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@XZ ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@XZ ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@XZ PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax*8]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@XZ ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEABQAVCvCitySpecializationXMLEntry@@XZ ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEABQAVCvCitySpecializationXMLEntry@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEABQAVCvCitySpecializationXMLEntry@@XZ PROC ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator*, COMDAT
; _this$ = ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());
; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR [ecx]

; 107  : 		}

	ret	0
??D?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEABQAVCvCitySpecializationXMLEntry@@XZ ENDP ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

	mov	eax, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

	add	DWORD PTR [eax], 4

; 126  : 		return (*this);
; 127  : 		}

	ret	0
??E?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator==, COMDAT
; _this$ = ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator==
_TEXT	ENDS
PUBLIC	?_Nextnode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Nextnode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Nextnode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Nextnode, COMDAT

; 115  : 		return ((_Nodepref)(*_Pnode)._Next);

	mov	eax, DWORD PTR __Pnode$[esp-4]

; 116  : 		}

	ret	0
?_Nextnode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Nextnode
_TEXT	ENDS
PUBLIC	?_Prevnode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Prevnode
; Function compile flags: /Ogtpy
;	COMDAT ?_Prevnode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Prevnode, COMDAT

; 120  : 		return ((_Nodepref)(*_Pnode)._Prev);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 4

; 121  : 		}

	ret	0
?_Prevnode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Prevnode
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >::~_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >::~_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >::~_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	??0?$allocator@VCitySpecializationData@@@std@@QAE@XZ ; std::allocator<CitySpecializationData>::allocator<CitySpecializationData>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VCitySpecializationData@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VCitySpecializationData@@@std@@QAE@XZ PROC ; std::allocator<CitySpecializationData>::allocator<CitySpecializationData>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@VCitySpecializationData@@@std@@QAE@XZ ENDP ; std::allocator<CitySpecializationData>::allocator<CitySpecializationData>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Const_iterator<0>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Const_iterator<0>, COMDAT
; _this$ = ecx

; 163  : 			{	// construct with null node pointer

	mov	eax, ecx
	mov	DWORD PTR [eax], 0

; 164  : 			}

	ret	0
??0?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Const_iterator<0>
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEAAV012@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

	mov	eax, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());
; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);
; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 251  : 			return (*this);
; 252  : 			}

	ret	0
??E?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator++
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV012@H@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV012@H@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator++, COMDAT
; _this$ = ecx

; 256  : 			_Myt_iter _Tmp = *this;

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 257  : 			++*this;

	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx

; 258  : 			return (_Tmp);
; 259  : 			}

	ret	8
??E?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator++
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE_NABV012@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator==, COMDAT
; _this$ = ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 299  : 			}

	ret	4
??8?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@3@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@3@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

	mov	eax, DWORD PTR [ecx]

; 309  : 			}

	ret	0
?_Mynode@?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@3@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Mynode
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Const_iterator<0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Const_iterator<0>, COMDAT
; _this$ = ecx

; 163  : 			{	// construct with null node pointer

	mov	eax, ecx
	mov	DWORD PTR [eax], 0

; 164  : 			}

	ret	0
??0?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Const_iterator<0>
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEAAV012@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator++, COMDAT
; _this$ = ecx

; 235  : 			{	// preincrement

	mov	eax, ecx

; 236  : 
; 237  :  #if _HAS_ITERATOR_DEBUGGING
; 238  : 			if (this->_Mycont == 0
; 239  : 				|| _Ptr == 0
; 240  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 241  : 				{
; 242  : 				_DEBUG_ERROR("list iterator not incrementable");
; 243  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 244  : 				}
; 245  :  #else
; 246  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());
; 247  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);
; 248  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 249  : 
; 250  : 			_Ptr = _Nextnode(_Ptr);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 251  : 			return (*this);
; 252  : 			}

	ret	0
??E?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator++
_TEXT	ENDS
PUBLIC	??E?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV012@H@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV012@H@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator++, COMDAT
; _this$ = ecx

; 256  : 			_Myt_iter _Tmp = *this;

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 257  : 			++*this;

	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx

; 258  : 			return (_Tmp);
; 259  : 			}

	ret	8
??E?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV012@H@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator++
_TEXT	ENDS
PUBLIC	??8?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator==, COMDAT
; _this$ = ecx

; 291  : 
; 292  :  #if _HAS_ITERATOR_DEBUGGING
; 293  : 			_Compat(_Right);
; 294  :  #else
; 295  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 296  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 297  : 
; 298  : 			return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 299  : 			}

	ret	4
??8?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@3@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@3@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Mynode, COMDAT
; _this$ = ecx

; 308  : 			return (_Ptr);

	mov	eax, DWORD PTR [ecx]

; 309  : 			}

	ret	0
?_Mynode@?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@3@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Mynode
_TEXT	ENDS
PUBLIC	??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@ DB 'c:\users\eno'
	DB	'rmousapplepie\desktop\lekmod files\lekmod dll versions\v29\le'
	DB	'kmod_dll\fireplace\include\fireworks\FFastVector.h', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 4
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 4
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T230293 = -80						; size = 28
$T230292 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T230293[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T230292[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T230293[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T230292[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T230292[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T230292[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T230292[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN13@Xlen:
$LN12@Xlen:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T230293[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T230292[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Xlen
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@V?$allocator@PAVCvCitySpecializationXMLEntry@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@V?$allocator@PAVCvCitySpecializationXMLEntry@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@V?$allocator@PAVCvCitySpecializationXMLEntry@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@V?$allocator@PAVCvCitySpecializationXMLEntry@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >::_Container_base_aux_alloc_empty<std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAE@ABV01@@Z ; std::allocator<CvCitySpecializationXMLEntry *>::allocator<CvCitySpecializationXMLEntry *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CvCitySpecializationXMLEntry *>::allocator<CvCitySpecializationXMLEntry *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CvCitySpecializationXMLEntry *>::allocator<CvCitySpecializationXMLEntry *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAEXPAPAVCvCitySpecializationXMLEntry@@I@Z ; std::allocator<CvCitySpecializationXMLEntry *>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAEXPAPAVCvCitySpecializationXMLEntry@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAEXPAPAVCvCitySpecializationXMLEntry@@I@Z PROC ; std::allocator<CvCitySpecializationXMLEntry *>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAEXPAPAVCvCitySpecializationXMLEntry@@I@Z ENDP ; std::allocator<CvCitySpecializationXMLEntry *>::deallocate
_TEXT	ENDS
PUBLIC	?_Myval@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAW4CitySpecializationTypes@@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Myval
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Myval@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAW4CitySpecializationTypes@@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAW4CitySpecializationTypes@@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 8

; 126  : 		}

	ret	0
?_Myval@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@KAAAW4CitySpecializationTypes@@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@W4CitySpecializationTypes@@@std@@QAE@ABV01@@Z ; std::allocator<enum CitySpecializationTypes>::allocator<enum CitySpecializationTypes>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@W4CitySpecializationTypes@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@W4CitySpecializationTypes@@@std@@QAE@ABV01@@Z PROC ; std::allocator<enum CitySpecializationTypes>::allocator<enum CitySpecializationTypes>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@W4CitySpecializationTypes@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<enum CitySpecializationTypes>::allocator<enum CitySpecializationTypes>
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::Alloc
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 5
	jbe	SHORT $LN2@Alloc@2

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@2:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 5
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@ABU01@@Z ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::Alloc
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 4
	jbe	SHORT $LN2@Alloc@3

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@3:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 4
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@ABU01@@Z ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@PAPAVCvCitySpecializationXMLEntry@@@Z ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@PAPAVCvCitySpecializationXMLEntry@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@PAPAVCvCitySpecializationXMLEntry@@@Z PROC ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx

; 84   : 	explicit _Vector_const_iterator(_Tptr _Ptr)

	mov	eax, ecx

; 85   : 		{	// construct with pointer _Ptr
; 86   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 87   : 		}

	ret	4
??0?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@PAPAVCvCitySpecializationXMLEntry@@@Z ENDP ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	?_Myval@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAVCitySpecializationData@@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Myval
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Myval@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAVCitySpecializationData@@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAVCitySpecializationData@@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Myval, COMDAT

; 125  : 		return ((_Vref)(*_Pnode)._Myval);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 8

; 126  : 		}

	ret	0
?_Myval@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@KAAAVCitySpecializationData@@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@VCitySpecializationData@@@std@@QAE@ABV01@@Z ; std::allocator<CitySpecializationData>::allocator<CitySpecializationData>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@VCitySpecializationData@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@VCitySpecializationData@@@std@@QAE@ABV01@@Z PROC ; std::allocator<CitySpecializationData>::allocator<CitySpecializationData>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@VCitySpecializationData@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CitySpecializationData>::allocator<CitySpecializationData>
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Const_iterator<0>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Const_iterator<0>, COMDAT
; _this$ = ecx

; 184  : 			{	// construct with node pointer _Pnode

	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [eax], ecx

; 185  : 			}

	ret	4
??0?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::_Const_iterator<0>
_TEXT	ENDS
PUBLIC	??0?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Const_iterator<0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Const_iterator<0>, COMDAT
; _this$ = ecx

; 184  : 			{	// construct with node pointer _Pnode

	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [eax], ecx

; 185  : 			}

	ret	4
??0?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::_Const_iterator<0>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QBEIXZ ; std::allocator<CvCitySpecializationXMLEntry *>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QBEIXZ PROC ; std::allocator<CvCitySpecializationXMLEntry *>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 1073741823				; 3fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QBEIXZ ENDP ; std::allocator<CvCitySpecializationXMLEntry *>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >::_Container_base_aux_alloc_empty<std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@W4CitySpecializationTypes@@@std@@QBEIXZ ; std::allocator<enum CitySpecializationTypes>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@W4CitySpecializationTypes@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@W4CitySpecializationTypes@@@std@@QBEIXZ PROC ; std::allocator<enum CitySpecializationTypes>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 1073741823				; 3fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@W4CitySpecializationTypes@@@std@@QBEIXZ ENDP ; std::allocator<enum CitySpecializationTypes>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >::_Container_base_aux_alloc_empty<std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@VCitySpecializationData@@@std@@QBEIXZ ; std::allocator<CitySpecializationData>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@VCitySpecializationData@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VCitySpecializationData@@@std@@QBEIXZ PROC ; std::allocator<CitySpecializationData>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 178956970				; 0aaaaaaaH

; 167  : 		}

	ret	0
?max_size@?$allocator@VCitySpecializationData@@@std@@QBEIXZ ENDP ; std::allocator<CitySpecializationData>::max_size
_TEXT	ENDS
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 3384 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN4@max
	mov	eax, ecx
$LN4@max:

; 3385 : 	}

	ret	0
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
PUBLIC	??$SAFE_DELETE_ARRAY@H@@YAXAAPAH@Z		; SAFE_DELETE_ARRAY<int>
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffiretypes.h
;	COMDAT ??$SAFE_DELETE_ARRAY@H@@YAXAAPAH@Z
_TEXT	SEGMENT
_pkInstanceArray$ = 8					; size = 4
??$SAFE_DELETE_ARRAY@H@@YAXAAPAH@Z PROC			; SAFE_DELETE_ARRAY<int>, COMDAT

; 311  : {

	push	esi

; 312  : 	delete[] pkInstanceArray;

	mov	esi, DWORD PTR _pkInstanceArray$[esp]
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 313  : 	pkInstanceArray = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 314  : };

	ret	0
??$SAFE_DELETE_ARRAY@H@@YAXAAPAH@Z ENDP			; SAFE_DELETE_ARRAY<int>
_TEXT	ENDS
PUBLIC	??$SAFE_DELETE@VCvCitySpecializationXMLEntry@@@@YAXAAPAVCvCitySpecializationXMLEntry@@@Z ; SAFE_DELETE<CvCitySpecializationXMLEntry>
; Function compile flags: /Ogtpy
;	COMDAT ??$SAFE_DELETE@VCvCitySpecializationXMLEntry@@@@YAXAAPAVCvCitySpecializationXMLEntry@@@Z
_TEXT	SEGMENT
_pkInstance$ = 8					; size = 4
??$SAFE_DELETE@VCvCitySpecializationXMLEntry@@@@YAXAAPAVCvCitySpecializationXMLEntry@@@Z PROC ; SAFE_DELETE<CvCitySpecializationXMLEntry>, COMDAT

; 305  : {

	push	esi

; 306  : 	delete pkInstance;

	mov	esi, DWORD PTR _pkInstance$[esp]
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN5@SAFE_DELET
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+16]
	push	1
	call	edx
$LN5@SAFE_DELET:

; 307  : 	pkInstance = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 308  : };

	ret	0
??$SAFE_DELETE@VCvCitySpecializationXMLEntry@@@@YAXAAPAVCvCitySpecializationXMLEntry@@@Z ENDP ; SAFE_DELETE<CvCitySpecializationXMLEntry>
_TEXT	ENDS
PUBLIC	??$min@H@std@@YAABHABH0@Z			; std::min<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$min@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YAABHABH0@Z PROC				; std::min<int>, COMDAT

; 3399 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Left$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN4@min
	mov	eax, ecx
$LN4@min:

; 3400 : 	}

	ret	0
??$min@H@std@@YAABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z ; std::_Allocate<CvCitySpecializationXMLEntry *>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z
_TEXT	SEGMENT
$T230432 = -12						; size = 12
$T230436 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z PROC ; std::_Allocate<CvCitySpecializationXMLEntry *>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx*4]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 4
	jae	SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T230436[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T230432[esp+16]
	mov	DWORD PTR $T230436[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T230432[esp+16]
	push	ecx
	mov	DWORD PTR $T230432[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate:
$LN8@Allocate:
	int	3
??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z ENDP ; std::_Allocate<CvCitySpecializationXMLEntry *>
_TEXT	ENDS
PUBLIC	??$?0W4CitySpecializationTypes@@@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAE@ABV?$allocator@W4CitySpecializationTypes@@@1@@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *><enum CitySpecializationTypes>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0W4CitySpecializationTypes@@@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAE@ABV?$allocator@W4CitySpecializationTypes@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0W4CitySpecializationTypes@@@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAE@ABV?$allocator@W4CitySpecializationTypes@@@1@@Z PROC ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *><enum CitySpecializationTypes>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	mov	eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	ret	4
??$?0W4CitySpecializationTypes@@@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAE@ABV?$allocator@W4CitySpecializationTypes@@@1@@Z ENDP ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *><enum CitySpecializationTypes>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T230445 = -12						; size = 12
$T230449 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx+ecx*2]
	add	edx, edx
	add	edx, edx
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 12					; 0000000cH
	jae	SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T230449[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T230445[esp+16]
	mov	DWORD PTR $T230449[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T230445[esp+16]
	push	ecx
	mov	DWORD PTR $T230445[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate@2:
$LN8@Allocate@2:
	int	3
??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *,std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *,std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct:

; 53   : 	}

	ret	0
??$_Construct@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *,std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0VCitySpecializationData@@@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAE@ABV?$allocator@VCitySpecializationData@@@1@@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *><CitySpecializationData>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0VCitySpecializationData@@@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAE@ABV?$allocator@VCitySpecializationData@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0VCitySpecializationData@@@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAE@ABV?$allocator@VCitySpecializationData@@@1@@Z PROC ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *><CitySpecializationData>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	mov	eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	ret	4
??$?0VCitySpecializationData@@@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAE@ABV?$allocator@VCitySpecializationData@@@1@@Z ENDP ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *><CitySpecializationData>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T230470 = -12						; size = 12
$T230474 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	shl	ecx, 5
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 32					; 00000020H
	jae	SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T230474[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T230470[esp+16]
	mov	DWORD PTR $T230474[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T230470[esp+16]
	push	ecx
	mov	DWORD PTR $T230470[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate@3:
$LN8@Allocate@3:
	int	3
??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *,std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@ABQAU120@@Z PROC ; std::_Construct<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *,std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN3@Construct@2
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct@2:

; 53   : 	}

	ret	0
??$_Construct@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *,std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@@Z ; std::_Destroy<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@@Z PROC ; std::_Destroy<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@@Z ENDP ; std::_Destroy<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0W4CitySpecializationTypes@@@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAE@ABV?$allocator@W4CitySpecializationTypes@@@1@@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node><enum CitySpecializationTypes>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0W4CitySpecializationTypes@@@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAE@ABV?$allocator@W4CitySpecializationTypes@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0W4CitySpecializationTypes@@@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAE@ABV?$allocator@W4CitySpecializationTypes@@@1@@Z PROC ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node><enum CitySpecializationTypes>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	mov	eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	ret	4
??$?0W4CitySpecializationTypes@@@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAE@ABV?$allocator@W4CitySpecializationTypes@@@1@@Z ENDP ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node><enum CitySpecializationTypes>
_TEXT	ENDS
PUBLIC	??$_Construct@W4CitySpecializationTypes@@W41@@std@@YAXPAW4CitySpecializationTypes@@ABW41@@Z ; std::_Construct<enum CitySpecializationTypes,enum CitySpecializationTypes>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@W4CitySpecializationTypes@@W41@@std@@YAXPAW4CitySpecializationTypes@@ABW41@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@W4CitySpecializationTypes@@W41@@std@@YAXPAW4CitySpecializationTypes@@ABW41@@Z PROC ; std::_Construct<enum CitySpecializationTypes,enum CitySpecializationTypes>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN3@Construct@3
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct@3:

; 53   : 	}

	ret	0
??$_Construct@W4CitySpecializationTypes@@W41@@std@@YAXPAW4CitySpecializationTypes@@ABW41@@Z ENDP ; std::_Construct<enum CitySpecializationTypes,enum CitySpecializationTypes>
_TEXT	ENDS
PUBLIC	??$?0VCitySpecializationData@@@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAE@ABV?$allocator@VCitySpecializationData@@@1@@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node><CitySpecializationData>
; Function compile flags: /Ogtpy
;	COMDAT ??$?0VCitySpecializationData@@@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAE@ABV?$allocator@VCitySpecializationData@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0VCitySpecializationData@@@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAE@ABV?$allocator@VCitySpecializationData@@@1@@Z PROC ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node><CitySpecializationData>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	mov	eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	ret	4
??$?0VCitySpecializationData@@@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAE@ABV?$allocator@VCitySpecializationData@@@1@@Z ENDP ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node><CitySpecializationData>
_TEXT	ENDS
PUBLIC	??$_Construct@VCitySpecializationData@@V1@@std@@YAXPAVCitySpecializationData@@ABV1@@Z ; std::_Construct<CitySpecializationData,CitySpecializationData>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@VCitySpecializationData@@V1@@std@@YAXPAVCitySpecializationData@@ABV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@VCitySpecializationData@@V1@@std@@YAXPAVCitySpecializationData@@ABV1@@Z PROC ; std::_Construct<CitySpecializationData,CitySpecializationData>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN3@Construct@4
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
$LN3@Construct@4:

; 53   : 	}

	ret	0
??$_Construct@VCitySpecializationData@@V1@@std@@YAXPAVCitySpecializationData@@ABV1@@Z ENDP ; std::_Construct<CitySpecializationData,CitySpecializationData>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCitySpecializationXMLEntry@@0@Z ; std::_Iter_random<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCitySpecializationXMLEntry@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCitySpecializationXMLEntry@@0@Z PROC ; std::_Iter_random<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCitySpecializationXMLEntry@@0@Z ENDP ; std::_Iter_random<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCvCitySpecializationXMLEntry@@0@Z ; std::_Ptr_cat<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCvCitySpecializationXMLEntry@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCvCitySpecializationXMLEntry@@0@Z PROC ; std::_Ptr_cat<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCvCitySpecializationXMLEntry@@0@Z ENDP ; std::_Ptr_cat<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *,std::random_access_iterator_tag>
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *,std::random_access_iterator_tag>, COMDAT

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]

; 2505 : 	if (_Off > 0)

	test	eax, eax
	jle	SHORT $LN4@Copy_opt

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN4@Copy_opt:
	pop	edi

; 2507 : 	return _Result;

	mov	eax, esi
	pop	esi

; 2508 : 	}

	ret	0
??$_Copy_opt@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@YAXPAPAVCvCitySpecializationXMLEntry@@0AAV?$allocator@PAVCvCitySpecializationXMLEntry@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@YAXPAPAVCvCitySpecializationXMLEntry@@0AAV?$allocator@PAVCvCitySpecializationXMLEntry@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@YAXPAPAVCvCitySpecializationXMLEntry@@0AAV?$allocator@PAVCvCitySpecializationXMLEntry@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT

; 242  : 	}

	ret	0
??$_Destroy_range@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@YAXPAPAVCvCitySpecializationXMLEntry@@0AAV?$allocator@PAVCvCitySpecializationXMLEntry@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@H$03$00@@QBE_NABU01@@Z ; CvWeightedVector<int,4,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??MWeightedElement@?$CvWeightedVector@H$03$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@H$03$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<int,4,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@H$03$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<int,4,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBE_NABU01@@Z ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
;	COMDAT ??MWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<enum YieldTypes,5,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBE_NABU01@@Z ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
;	COMDAT ??MWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::pair<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>::pair<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::pair<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>::pair<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::pair<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>::pair<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::pair<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>::pair<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::pair<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>::pair<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::pair<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>::pair<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; std::_Dist_type<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$03$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$03$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ; std::_Dist_type<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ; std::_Dist_type<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::swap<CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::swap<CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::swap<CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::swap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::swap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap@2

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap@2:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::swap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::swap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::swap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap@3

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap@3:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::swap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap
	npad	1
$LL3@Push_heap:
	cmp	DWORD PTR [esi+eax*8+4], ebx
	jle	SHORT $LN1@Push_heap

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	edx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [esi+ecx*8+4], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap
$LN1@Push_heap:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	pop	edi
	mov	DWORD PTR [esi+ecx*8+4], ebx
	mov	DWORD PTR [esi+ecx*8], eax
	pop	esi
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Iter_random<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw
	push	esi
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw
	pop	esi
$LN1@Copy_backw:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap@2
	npad	1
$LL3@Push_heap@2:
	cmp	DWORD PTR [esi+eax*8+4], ebx
	jle	SHORT $LN1@Push_heap@2

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	edx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [esi+ecx*8+4], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap@2
$LN1@Push_heap@2:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	pop	edi
	mov	DWORD PTR [esi+ecx*8+4], ebx
	mov	DWORD PTR [esi+ecx*8], eax
	pop	esi
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Iter_random<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw@2
	push	esi
$LL2@Copy_backw@2:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw@2
	pop	esi
$LN1@Copy_backw@2:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap@3
	npad	1
$LL3@Push_heap@3:
	cmp	DWORD PTR [esi+eax*8+4], ebx
	jle	SHORT $LN1@Push_heap@3

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	edx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [esi+ecx*8+4], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap@3
$LN1@Push_heap@3:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	pop	edi
	mov	DWORD PTR [esi+ecx*8+4], ebx
	mov	DWORD PTR [esi+ecx*8], eax
	pop	esi
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Iter_random<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw@3
	push	esi
$LL2@Copy_backw@3:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw@3
	pop	esi
$LN1@Copy_backw@3:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+20]
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	add	edi, 12					; 0000000cH
	push	edi
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[esp+36], 0
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
; Function compile flags: /Ogtpy
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??BCvString@@QBEPBDXZ				; CvString::operator char const *
; Function compile flags: /Ogtpy
;	COMDAT ??BCvString@@QBEPBDXZ
_TEXT	SEGMENT
??BCvString@@QBEPBDXZ PROC				; CvString::operator char const *, COMDAT
; _this$ = ecx

; 31   : 	operator const char*() const 	{ return c_str(); }												

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
??BCvString@@QBEPBDXZ ENDP				; CvString::operator char const *
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@PBD@Z			; CvString::operator=
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@PBD@Z PROC				; CvString::operator=, COMDAT
; _this$ = ecx

; 37   : 	CvString& operator=( const char* s) { if (s) assign(s); else clear();	return *this; }	

	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, ecx
	test	eax, eax
	je	SHORT $LN2@operator
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
$LN2@operator:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@PBD@Z ENDP				; CvString::operator=
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CvString::operator=, COMDAT
; _this$ = ecx

; 38   : 	CvString& operator=( const std::string& s) { assign(s.c_str());	return *this; }	

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _s$[esp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CvString::operator=
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
_buf$ = -2048						; size = 2048
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	sub	esp, 2048				; 00000800H
	push	ebx
	push	ebp

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	mov	ebp, DWORD PTR _args$[esp+2052]
	push	esi
	push	edi
	lea	edi, DWORD PTR _buf$[esp+2064]
	mov	esi, 2047				; 000007ffH
	npad	6
$LL10@formatv:

; 194  : 	int len = 0;
; 195  : 	int attempts = 0;
; 196  : 	bool success = false;
; 197  : 	const int kMaxAttempts = 40;
; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;
; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	eax, DWORD PTR _fmt$[esp+2060]
	push	ebp
	push	eax
	push	esi
	push	edi
	mov	ebx, esi
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H

; 203  : 		attempts++;

	add	esi, 2048				; 00000800H

; 204  : 		success = (len>=0 && len<=maxlen);

	test	eax, eax
	jl	SHORT $LN13@formatv
	cmp	eax, ebx
	jle	SHORT $LN18@formatv
$LN13@formatv:

; 205  : 		if (!success)
; 206  : 		{
; 207  : 			if (pbuf!=buf)

	lea	ecx, DWORD PTR _buf$[esp+2064]
	xor	bl, bl
	cmp	edi, ecx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	lea	edx, DWORD PTR [esi+1]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	cmp	esi, 83967				; 000147ffH
	mov	edi, eax
	jl	SHORT $LL10@formatv

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@formatv:
	mov	ecx, DWORD PTR _out$[esp+2064]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 223  : 
; 224  : 	if (pbuf!=buf)

	lea	eax, DWORD PTR _buf$[esp+2064]
	cmp	edi, eax
	je	SHORT $LN20@formatv

; 225  : 		delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN20@formatv:
	pop	edi
	pop	esi
	pop	ebp

; 226  : 
; 227  : 	return success;

	mov	al, bl
	pop	ebx

; 228  : }

	add	esp, 2048				; 00000800H
	ret	0
$LN18@formatv:

; 204  : 		success = (len>=0 && len<=maxlen);

	mov	bl, 1

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)
; 220  : 		out = pbuf;

	push	edi

; 221  : 	else

	jmp	SHORT $LN21@formatv
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);
; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _lpszFormat$[esp+36]
	lea	eax, DWORD PTR _lpszFormat$[esp+40]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _result$[esp+48]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+60], 0
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);
; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR _this$[esp+36]
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	lea	ecx, DWORD PTR _result$[esp+40]
	mov	DWORD PTR __$EHRec$[esp+48], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	?GetDescription@CvBaseInfo@@QBEPBDXZ		; CvBaseInfo::GetDescription
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
;	COMDAT ?GetDescription@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
?GetDescription@CvBaseInfo@@QBEPBDXZ PROC		; CvBaseInfo::GetDescription, COMDAT
; _this$ = ecx

; 64   : 		return m_strDescription.c_str();

	add	ecx, 36					; 00000024H
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetDescription@CvBaseInfo@@QBEPBDXZ ENDP		; CvBaseInfo::GetDescription
_TEXT	ENDS
PUBLIC	?GetType@CvBaseInfo@@QBEPBDXZ			; CvBaseInfo::GetType
; Function compile flags: /Ogtpy
;	COMDAT ?GetType@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
?GetType@CvBaseInfo@@QBEPBDXZ PROC			; CvBaseInfo::GetType, COMDAT
; _this$ = ecx

; 92   : 		return m_strType.c_str();

	add	ecx, 176				; 000000b0H
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetType@CvBaseInfo@@QBEPBDXZ ENDP			; CvBaseInfo::GetType
_TEXT	ENDS
PUBLIC	?getMap@CvGlobals@@QAEAAVCvMap@@XZ		; CvGlobals::getMap
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getMap@CvGlobals@@QAEAAVCvMap@@XZ
_TEXT	SEGMENT
?getMap@CvGlobals@@QAEAAVCvMap@@XZ PROC			; CvGlobals::getMap, COMDAT
; _this$ = ecx

; 175  : 		return *m_map;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+52]

; 176  : 	}

	ret	0
?getMap@CvGlobals@@QAEAAVCvMap@@XZ ENDP			; CvGlobals::getMap
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_EARLIEST_TURN@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_EARLIEST_TURN
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_EARLIEST_TURN@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_EARLIEST_TURN@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_EARLIEST_TURN, COMDAT
; _this$ = ecx

; 1273 : 		return m_iAI_CITY_SPECIALIZATION_EARLIEST_TURN;

	mov	eax, DWORD PTR [ecx+2208]

; 1274 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_EARLIEST_TURN@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_EARLIEST_TURN
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL, COMDAT
; _this$ = ecx

; 1277 : 		return m_iAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL;

	mov	eax, DWORD PTR [ecx+2212]

; 1278 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT, COMDAT
; _this$ = ecx

; 1281 : 		return m_iAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT;

	mov	eax, DWORD PTR [ecx+2216]

; 1282 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION, COMDAT
; _this$ = ecx

; 1285 : 		return m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION;

	mov	eax, DWORD PTR [ecx+2220]

; 1286 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED, COMDAT
; _this$ = ecx

; 1289 : 		return m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED;

	mov	eax, DWORD PTR [ecx+2224]

; 1290 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES, COMDAT
; _this$ = ecx

; 1293 : 		return m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES;

	mov	eax, DWORD PTR [ecx+2228]

; 1294 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS, COMDAT
; _this$ = ecx

; 1297 : 		return m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS;

	mov	eax, DWORD PTR [ecx+2232]

; 1298 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION, COMDAT
; _this$ = ecx

; 1301 : 		return m_iAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION;

	mov	eax, DWORD PTR [ecx+2236]

; 1302 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED, COMDAT
; _this$ = ecx

; 1305 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED;

	mov	eax, DWORD PTR [ecx+2240]

; 1306 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH, COMDAT
; _this$ = ecx

; 1309 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH;

	mov	eax, DWORD PTR [ecx+2244]

; 1310 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION, COMDAT
; _this$ = ecx

; 1313 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION;

	mov	eax, DWORD PTR [ecx+2248]

; 1314 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE, COMDAT
; _this$ = ecx

; 1317 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE;

	mov	eax, DWORD PTR [ecx+2252]

; 1318 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL, COMDAT
; _this$ = ecx

; 1321 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL;

	mov	eax, DWORD PTR [ecx+2256]

; 1322 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT, COMDAT
; _this$ = ecx

; 1325 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT;

	mov	eax, DWORD PTR [ecx+2260]

; 1326 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS, COMDAT
; _this$ = ecx

; 1329 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS;

	mov	eax, DWORD PTR [ecx+2264]

; 1330 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL, COMDAT
; _this$ = ecx

; 1333 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL;

	mov	eax, DWORD PTR [ecx+2268]

; 1334 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER, COMDAT
; _this$ = ecx

; 1337 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER;

	mov	eax, DWORD PTR [ecx+2272]

; 1338 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP, COMDAT
; _this$ = ecx

; 1341 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP;

	mov	eax, DWORD PTR [ecx+2276]

; 1342 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE, COMDAT
; _this$ = ecx

; 1345 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE;

	mov	eax, DWORD PTR [ecx+2280]

; 1346 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY, COMDAT
; _this$ = ecx

; 1349 : 		return m_iAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY;

	mov	eax, DWORD PTR [ecx+2284]

; 1350 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD, COMDAT
; _this$ = ecx

; 1353 : 		return m_iAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD;

	mov	eax, DWORD PTR [ecx+2288]

; 1354 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE, COMDAT
; _this$ = ecx

; 1357 : 		return m_iAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE;

	mov	eax, DWORD PTR [ecx+2292]

; 1358 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE, COMDAT
; _this$ = ecx

; 1361 : 		return m_iAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE;

	mov	eax, DWORD PTR [ecx+2296]

; 1362 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP, COMDAT
; _this$ = ecx

; 1365 : 		return m_iAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP;

	mov	eax, DWORD PTR [ecx+2300]

; 1366 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING, COMDAT
; _this$ = ecx

; 1369 : 		return m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING;

	mov	eax, DWORD PTR [ecx+2304]

; 1370 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING, COMDAT
; _this$ = ecx

; 1373 : 		return m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING;

	mov	eax, DWORD PTR [ecx+2308]

; 1374 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING, COMDAT
; _this$ = ecx

; 1377 : 		return m_iAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING;

	mov	eax, DWORD PTR [ecx+2312]

; 1378 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED@CvGlobals@@QAEHXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED@CvGlobals@@QAEHXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED, COMDAT
; _this$ = ecx

; 1381 : 		return m_iAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED;

	mov	eax, DWORD PTR [ecx+2316]

; 1382 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED
_TEXT	ENDS
PUBLIC	?getSETTLER_EVALUATION_DISTANCE@CvGlobals@@QAEHXZ ; CvGlobals::getSETTLER_EVALUATION_DISTANCE
; Function compile flags: /Ogtpy
;	COMDAT ?getSETTLER_EVALUATION_DISTANCE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getSETTLER_EVALUATION_DISTANCE@CvGlobals@@QAEHXZ PROC	; CvGlobals::getSETTLER_EVALUATION_DISTANCE, COMDAT
; _this$ = ecx

; 6381 : 		return m_iSETTLER_EVALUATION_DISTANCE;

	mov	eax, DWORD PTR [ecx+7252]

; 6382 : 	}

	ret	0
?getSETTLER_EVALUATION_DISTANCE@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getSETTLER_EVALUATION_DISTANCE
_TEXT	ENDS
PUBLIC	?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER@CvGlobals@@QAEMXZ ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER@CvGlobals@@QAEMXZ PROC ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER, COMDAT
; _this$ = ecx

; 7056 : 		return m_fAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER;

	fld	DWORD PTR [ecx+8044]

; 7057 : 	}

	ret	0
?getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER@CvGlobals@@QAEMXZ ENDP ; CvGlobals::getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV0@@Z			; CvString::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CvString@@QAEAAV0@ABV0@@Z PROC			; CvString::operator=, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV0@@Z ENDP			; CvString::operator=
_TEXT	ENDS
PUBLIC	?getX@CvPlot@@QBEHXZ				; CvPlot::getX
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?getX@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getX@CvPlot@@QBEHXZ PROC				; CvPlot::getX, COMDAT
; _this$ = ecx

; 307  : 		return m_iX;

	movsx	eax, WORD PTR [ecx]

; 308  : 	}

	ret	0
?getX@CvPlot@@QBEHXZ ENDP				; CvPlot::getX
_TEXT	ENDS
PUBLIC	?getY@CvPlot@@QBEHXZ				; CvPlot::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getY@CvPlot@@QBEHXZ PROC				; CvPlot::getY, COMDAT
; _this$ = ecx

; 312  : 		return m_iY;

	movsx	eax, WORD PTR [ecx+2]

; 313  : 	}

	ret	0
?getY@CvPlot@@QBEHXZ ENDP				; CvPlot::getY
_TEXT	ENDS
PUBLIC	?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ	; CvPlot::getOwner
; Function compile flags: /Ogtpy
;	COMDAT ?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ PROC		; CvPlot::getOwner, COMDAT
; _this$ = ecx

; 387  : 		return (PlayerTypes)m_eOwner;

	movsx	eax, BYTE PTR [ecx+4]

; 388  : 	}

	ret	0
?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ ENDP		; CvPlot::getOwner
_TEXT	ENDS
PUBLIC	?isHills@CvPlot@@QBE_NXZ			; CvPlot::isHills
; Function compile flags: /Ogtpy
;	COMDAT ?isHills@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isHills@CvPlot@@QBE_NXZ PROC				; CvPlot::isHills, COMDAT
; _this$ = ecx

; 413  : 		return (PlotTypes)m_ePlotType == PLOT_HILLS;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], 1
	sete	al

; 414  : 	};

	ret	0
?isHills@CvPlot@@QBE_NXZ ENDP				; CvPlot::isHills
_TEXT	ENDS
PUBLIC	?numPlots@CvMap@@QBEHXZ				; CvMap::numPlots
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?numPlots@CvMap@@QBEHXZ
_TEXT	SEGMENT
?numPlots@CvMap@@QBEHXZ PROC				; CvMap::numPlots, COMDAT
; _this$ = ecx

; 170  : 		return m_iGridSize;

	mov	eax, DWORD PTR [ecx+4028]

; 171  : 	}

	ret	0
?numPlots@CvMap@@QBEHXZ ENDP				; CvMap::numPlots
_TEXT	ENDS
PUBLIC	?getGridWidth@CvMap@@QBEHXZ			; CvMap::getGridWidth
; Function compile flags: /Ogtpy
;	COMDAT ?getGridWidth@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridWidth@CvMap@@QBEHXZ PROC			; CvMap::getGridWidth, COMDAT
; _this$ = ecx

; 198  : 		return m_iGridWidth;

	mov	eax, DWORD PTR [ecx+4020]

; 199  : 	}

	ret	0
?getGridWidth@CvMap@@QBEHXZ ENDP			; CvMap::getGridWidth
_TEXT	ENDS
PUBLIC	?getGridHeight@CvMap@@QBEHXZ			; CvMap::getGridHeight
; Function compile flags: /Ogtpy
;	COMDAT ?getGridHeight@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridHeight@CvMap@@QBEHXZ PROC			; CvMap::getGridHeight, COMDAT
; _this$ = ecx

; 206  : 		return m_iGridHeight;

	mov	eax, DWORD PTR [ecx+4024]

; 207  : 	}

	ret	0
?getGridHeight@CvMap@@QBEHXZ ENDP			; CvMap::getGridHeight
_TEXT	ENDS
PUBLIC	?isWrapX@CvMap@@QBE_NXZ				; CvMap::isWrapX
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapX@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapX@CvMap@@QBE_NXZ PROC				; CvMap::isWrapX, COMDAT
; _this$ = ecx

; 228  : 		return m_bWrapX;

	mov	al, BYTE PTR [ecx+4056]

; 229  : 	}

	ret	0
?isWrapX@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapX
_TEXT	ENDS
PUBLIC	?isWrapY@CvMap@@QBE_NXZ				; CvMap::isWrapY
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapY@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapY@CvMap@@QBE_NXZ PROC				; CvMap::isWrapY, COMDAT
; _this$ = ecx

; 233  : 		return m_bWrapY;

	mov	al, BYTE PTR [ecx+4057]

; 234  : 	}

	ret	0
?isWrapY@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapY
_TEXT	ENDS
PUBLIC	?plotByIndexUnchecked@CvMap@@QBEPAVCvPlot@@H@Z	; CvMap::plotByIndexUnchecked
; Function compile flags: /Ogtpy
;	COMDAT ?plotByIndexUnchecked@CvMap@@QBEPAVCvPlot@@H@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?plotByIndexUnchecked@CvMap@@QBEPAVCvPlot@@H@Z PROC	; CvMap::plotByIndexUnchecked, COMDAT
; _this$ = ecx

; 268  : 		return &m_pMapPlots[iIndex];

	mov	eax, DWORD PTR _iIndex$[esp-4]
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]

; 269  : 	}

	ret	4
?plotByIndexUnchecked@CvMap@@QBEPAVCvPlot@@H@Z ENDP	; CvMap::plotByIndexUnchecked
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@ABV0@@Z			; CvString::CvString
; Function compile flags: /Ogtpy
;	COMDAT ??0CvString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CvString@@QAE@ABV0@@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@ABV0@@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	?GetSpecialization@CvCityStrategyAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCityStrategyAI::GetSpecialization
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcitystrategyai.h
;	COMDAT ?GetSpecialization@CvCityStrategyAI@@QBE?AW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
?GetSpecialization@CvCityStrategyAI@@QBE?AW4CitySpecializationTypes@@XZ PROC ; CvCityStrategyAI::GetSpecialization, COMDAT
; _this$ = ecx

; 162  : 		return m_eSpecialization;

	mov	eax, DWORD PTR [ecx+20]

; 163  : 	};

	ret	0
?GetSpecialization@CvCityStrategyAI@@QBE?AW4CitySpecializationTypes@@XZ ENDP ; CvCityStrategyAI::GetSpecialization
_TEXT	ENDS
PUBLIC	?GetDefaultSpecialization@CvCityStrategyAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCityStrategyAI::GetDefaultSpecialization
; Function compile flags: /Ogtpy
;	COMDAT ?GetDefaultSpecialization@CvCityStrategyAI@@QBE?AW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
?GetDefaultSpecialization@CvCityStrategyAI@@QBE?AW4CitySpecializationTypes@@XZ PROC ; CvCityStrategyAI::GetDefaultSpecialization, COMDAT
; _this$ = ecx

; 167  : 		return m_eDefaultSpecialization;

	mov	eax, DWORD PTR [ecx+24]

; 168  : 	};

	ret	0
?GetDefaultSpecialization@CvCityStrategyAI@@QBE?AW4CitySpecializationTypes@@XZ ENDP ; CvCityStrategyAI::GetDefaultSpecialization
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??$?6H@FDataStream@@QAEAAV0@ABH@Z		; FDataStream::operator<<<int>
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?6H@FDataStream@@QAEAAV0@ABH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6H@FDataStream@@QAEAAV0@ABH@Z PROC			; FDataStream::operator<<<int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6H@FDataStream@@QAEAAV0@ABH@Z ENDP			; FDataStream::operator<<<int>
_TEXT	ENDS
PUBLIC	??$?5H@FDataStream@@QAEAAV0@AAH@Z		; FDataStream::operator>><int>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5H@FDataStream@@QAEAAV0@AAH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5H@FDataStream@@QAEAAV0@AAH@Z PROC			; FDataStream::operator>><int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5H@FDataStream@@QAEAAV0@AAH@Z ENDP			; FDataStream::operator>><int>
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ		; FAutoVariable<int,CvCity>::operator int const &
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ
_TEXT	SEGMENT
??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ PROC		; FAutoVariable<int,CvCity>::operator int const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ ENDP		; FAutoVariable<int,CvCity>::operator int const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ		; FAutoVariable<char,CvPlot>::operator char const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ
_TEXT	SEGMENT
??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ PROC		; FAutoVariable<char,CvPlot>::operator char const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ ENDP		; FAutoVariable<char,CvPlot>::operator char const &
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$?5_N@FDataStream@@QAEAAV0@AA_N@Z		; FDataStream::operator>><bool>
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5_N@FDataStream@@QAEAAV0@AA_N@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5_N@FDataStream@@QAEAAV0@AA_N@Z PROC		; FDataStream::operator>><bool>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5_N@FDataStream@@QAEAAV0@AA_N@Z ENDP		; FDataStream::operator>><bool>
_TEXT	ENDS
PUBLIC	??$?6_N@FDataStream@@QAEAAV0@AB_N@Z		; FDataStream::operator<<<bool>
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6_N@FDataStream@@QAEAAV0@AB_N@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6_N@FDataStream@@QAEAAV0@AB_N@Z PROC		; FDataStream::operator<<<bool>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6_N@FDataStream@@QAEAAV0@AB_N@Z ENDP		; FDataStream::operator<<<bool>
_TEXT	ENDS
PUBLIC	??$?5I@FDataStream@@QAEAAV0@AAI@Z		; FDataStream::operator>><unsigned int>
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5I@FDataStream@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5I@FDataStream@@QAEAAV0@AAI@Z PROC			; FDataStream::operator>><unsigned int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5I@FDataStream@@QAEAAV0@AAI@Z ENDP			; FDataStream::operator>><unsigned int>
_TEXT	ENDS
PUBLIC	??$?6I@FDataStream@@QAEAAV0@ABI@Z		; FDataStream::operator<<<unsigned int>
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6I@FDataStream@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6I@FDataStream@@QAEAAV0@ABI@Z PROC			; FDataStream::operator<<<unsigned int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6I@FDataStream@@QAEAAV0@ABI@Z ENDP			; FDataStream::operator<<<unsigned int>
_TEXT	ENDS
PUBLIC	?dxWrap@@YAHH@Z					; dxWrap
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?dxWrap@@YAHH@Z
_TEXT	SEGMENT
_iDX$ = 8						; size = 4
?dxWrap@@YAHH@Z PROC					; dxWrap, COMDAT

; 74   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

	mov	edx, DWORD PTR [eax+4020]
	cmp	BYTE PTR [eax+4056], 0
	mov	eax, DWORD PTR _iDX$[esp-4]
	je	SHORT $LN13@dxWrap
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN11@dxWrap
	sub	eax, edx

; 76   : }

	ret	0

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

$LN11@dxWrap:
	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN13@dxWrap
	add	eax, edx
$LN13@dxWrap:

; 76   : }

	ret	0
?dxWrap@@YAHH@Z ENDP					; dxWrap
_TEXT	ENDS
PUBLIC	?dyWrap@@YAHH@Z					; dyWrap
; Function compile flags: /Ogtpy
;	COMDAT ?dyWrap@@YAHH@Z
_TEXT	SEGMENT
_iDY$ = 8						; size = 4
?dyWrap@@YAHH@Z PROC					; dyWrap, COMDAT

; 80   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

	mov	edx, DWORD PTR [eax+4024]
	cmp	BYTE PTR [eax+4057], 0
	mov	eax, DWORD PTR _iDY$[esp-4]
	je	SHORT $LN13@dyWrap
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN11@dyWrap
	sub	eax, edx

; 82   : }

	ret	0

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

$LN11@dyWrap:
	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN13@dyWrap
	add	eax, edx
$LN13@dyWrap:

; 82   : }

	ret	0
?dyWrap@@YAHH@Z ENDP					; dyWrap
_TEXT	ENDS
PUBLIC	?plotDistance@@YAHHHHH@Z			; plotDistance
; Function compile flags: /Ogtpy
;	COMDAT ?plotDistance@@YAHHHHH@Z
_TEXT	SEGMENT
_iDX$ = 8						; size = 4
_iX1$ = 8						; size = 4
_iY1$ = 12						; size = 4
_iDY$ = 16						; size = 4
_iX2$ = 16						; size = 4
_iY2$ = 20						; size = 4
?plotDistance@@YAHHHHH@Z PROC				; plotDistance, COMDAT

; 145  : 	int iDX;
; 146  : 	int iWrappedDX = dxWrap(iX2 - iX1);

	mov	eax, DWORD PTR _iX2$[esp-4]
	sub	eax, DWORD PTR _iX1$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebx+4056], 0
	mov	edx, DWORD PTR [ebx+4020]
	push	ebp
	push	esi
	je	SHORT $LN13@plotDistan
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN15@plotDistan
	sub	eax, edx
	jmp	SHORT $LN13@plotDistan
$LN15@plotDistan:
	neg	ecx
	cmp	eax, ecx
	lea	ecx, DWORD PTR [edx+eax]
	jl	SHORT $LN17@plotDistan
$LN13@plotDistan:
	mov	ecx, eax
$LN17@plotDistan:

; 147  : 	int iWrappedDY = dyWrap(iY2 - iY1);

	mov	eax, DWORD PTR _iY2$[esp+8]
	mov	esi, DWORD PTR [ebx+4024]
	push	edi
	mov	edi, DWORD PTR _iY1$[esp+12]
	sub	eax, edi
	cmp	BYTE PTR [ebx+4057], 0
	je	SHORT $LN27@plotDistan
	mov	edx, esi
	shr	edx, 1
	cmp	eax, edx
	jle	SHORT $LN29@plotDistan
	sub	eax, esi
	jmp	SHORT $LN27@plotDistan
$LN29@plotDistan:
	neg	edx
	cmp	eax, edx
	lea	ebp, DWORD PTR [esi+eax]
	jl	SHORT $LN31@plotDistan
$LN27@plotDistan:
	mov	ebp, eax
$LN31@plotDistan:

; 148  : 	int iDY = abs(iWrappedDY);

	mov	eax, ebp
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDY$[esp+12], eax

; 149  : 
; 150  : 	// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 151  : 	int iHX1 = xToHexspaceX(iX1, iY1);

	test	edi, edi
	jl	SHORT $LN35@plotDistan
	mov	eax, edi
	jmp	SHORT $LN59@plotDistan
$LN35@plotDistan:
	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
$LN59@plotDistan:
	mov	esi, DWORD PTR _iX1$[esp+12]
	sar	eax, 1
	sub	esi, eax

; 152  : 	int iHX2 = xToHexspaceX(iX1 + iWrappedDX, iY1 + iWrappedDY);

	lea	eax, DWORD PTR [edi+ebp]
	pop	edi
	test	eax, eax
	jge	SHORT $LN60@plotDistan
	dec	eax
	cdq
	sub	eax, edx
$LN60@plotDistan:

; 153  : 
; 154  : 	iDX = abs(dxWrap(iHX2 - iHX1));

	mov	edx, DWORD PTR [ebx+4020]
	sar	eax, 1
	sub	ecx, eax
	add	ecx, DWORD PTR _iX1$[esp+8]
	sub	ecx, esi
	cmp	BYTE PTR [ebx+4056], 0
	je	SHORT $LN49@plotDistan
	mov	eax, edx
	shr	eax, 1
	cmp	ecx, eax
	jle	SHORT $LN51@plotDistan
	mov	eax, ecx
	sub	eax, edx
	jmp	SHORT $LN53@plotDistan
$LN51@plotDistan:
	neg	eax
	cmp	ecx, eax
	lea	eax, DWORD PTR [edx+ecx]
	jl	SHORT $LN53@plotDistan
$LN49@plotDistan:
	mov	eax, ecx
$LN53@plotDistan:
	cdq
	xor	eax, edx
	sub	eax, edx

; 155  : 
; 156  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 157  : 	if (((iHX2 - iHX1) ^ (iWrappedDY)) >= 0)  // the signs match
; 158  : #else
; 159  : 	if((iHX2 - iHX1 >= 0) == (iWrappedDY >= 0))  // the signs match

	xor	edx, edx
	test	ecx, ecx
	setge	dl
	xor	ecx, ecx
	test	ebp, ebp
	setge	cl
	pop	esi
	pop	ebp
	mov	DWORD PTR _iDX$[esp], eax
	pop	ebx
	cmp	edx, ecx
	jne	SHORT $LN2@plotDistan

; 160  : #endif
; 161  : 	{
; 162  : 		return iDX + iDY;

	mov	edx, DWORD PTR _iDY$[esp-4]
	add	eax, edx

; 170  : #endif
; 171  : 	}
; 172  : }

	ret	0
$LN2@plotDistan:

; 163  : 	}
; 164  : 	else
; 165  : 	{
; 166  : #ifdef NQM_FAST_COMP
; 167  : 		return (MAX(iDX, iDY));
; 168  : #else
; 169  : 		return (std::max(iDX, iDY));

	cmp	eax, DWORD PTR _iDY$[esp-4]
	lea	eax, DWORD PTR _iDY$[esp-4]
	jl	SHORT $LN58@plotDistan
	lea	eax, DWORD PTR _iDX$[esp-4]
$LN58@plotDistan:
	mov	eax, DWORD PTR [eax]

; 170  : #endif
; 171  : 	}
; 172  : }

	ret	0
?plotDistance@@YAHHHHH@Z ENDP				; plotDistance
_TEXT	ENDS
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	lea	ecx, DWORD PTR [esi+232]
	mov	DWORD PTR __$EHRec$[esp+28], 7
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+204]
	mov	BYTE PTR __$EHRec$[esp+28], 6
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+176]
	mov	BYTE PTR __$EHRec$[esp+28], 5
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+148]
	mov	BYTE PTR __$EHRec$[esp+28], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+120]
	mov	BYTE PTR __$EHRec$[esp+28], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+92]
	mov	BYTE PTR __$EHRec$[esp+28], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+64]
	mov	BYTE PTR __$EHRec$[esp+28], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+36]
	mov	BYTE PTR __$EHRec$[esp+28], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR __$EHRec$[esp+28], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??_7CvCitySpecializationXMLEntry@@6B@		; CvCitySpecializationXMLEntry::`vftable'
PUBLIC	??1CvCitySpecializationXMLEntry@@UAE@XZ		; CvCitySpecializationXMLEntry::~CvCitySpecializationXMLEntry
PUBLIC	??_R4CvCitySpecializationXMLEntry@@6B@		; CvCitySpecializationXMLEntry::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCvCitySpecializationXMLEntry@@@8	; CvCitySpecializationXMLEntry `RTTI Type Descriptor'
PUBLIC	??_R3CvCitySpecializationXMLEntry@@8		; CvCitySpecializationXMLEntry::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CvCitySpecializationXMLEntry@@8		; CvCitySpecializationXMLEntry::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CvCitySpecializationXMLEntry@@8	; CvCitySpecializationXMLEntry::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CvBaseInfo@@8			; CvBaseInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCvBaseInfo@@@8				; CvBaseInfo `RTTI Type Descriptor'
PUBLIC	??_R3CvBaseInfo@@8				; CvBaseInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CvBaseInfo@@8				; CvBaseInfo::`RTTI Base Class Array'
PUBLIC	?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCitySpecializationXMLEntry::CacheResults
EXTRN	??8CvBaseInfo@@UBE_NABV0@@Z:PROC		; CvBaseInfo::operator==
EXTRN	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::readFrom
EXTRN	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::writeTo
EXTRN	??_ECvCitySpecializationXMLEntry@@UAEPAXI@Z:PROC ; CvCitySpecializationXMLEntry::`vector deleting destructor'
;	COMDAT ??_R2CvBaseInfo@@8
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffiretypes.h
rdata$r	SEGMENT
??_R2CvBaseInfo@@8 DD FLAT:??_R1A@?0A@EA@CvBaseInfo@@8	; CvBaseInfo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CvBaseInfo@@8
rdata$r	SEGMENT
??_R3CvBaseInfo@@8 DD 00H				; CvBaseInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CvBaseInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCvBaseInfo@@@8
_DATA	SEGMENT
??_R0?AVCvBaseInfo@@@8 DD FLAT:??_7type_info@@6B@	; CvBaseInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCvBaseInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CvBaseInfo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CvBaseInfo@@8 DD FLAT:??_R0?AVCvBaseInfo@@@8 ; CvBaseInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CvBaseInfo@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CvCitySpecializationXMLEntry@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CvCitySpecializationXMLEntry@@8 DD FLAT:??_R0?AVCvCitySpecializationXMLEntry@@@8 ; CvCitySpecializationXMLEntry::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CvCitySpecializationXMLEntry@@8
rdata$r	ENDS
;	COMDAT ??_R2CvCitySpecializationXMLEntry@@8
rdata$r	SEGMENT
??_R2CvCitySpecializationXMLEntry@@8 DD FLAT:??_R1A@?0A@EA@CvCitySpecializationXMLEntry@@8 ; CvCitySpecializationXMLEntry::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CvBaseInfo@@8
rdata$r	ENDS
;	COMDAT ??_R3CvCitySpecializationXMLEntry@@8
rdata$r	SEGMENT
??_R3CvCitySpecializationXMLEntry@@8 DD 00H		; CvCitySpecializationXMLEntry::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CvCitySpecializationXMLEntry@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCvCitySpecializationXMLEntry@@@8
_DATA	SEGMENT
??_R0?AVCvCitySpecializationXMLEntry@@@8 DD FLAT:??_7type_info@@6B@ ; CvCitySpecializationXMLEntry `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCvCitySpecializationXMLEntry@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CvCitySpecializationXMLEntry@@6B@
rdata$r	SEGMENT
??_R4CvCitySpecializationXMLEntry@@6B@ DD 00H		; CvCitySpecializationXMLEntry::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCvCitySpecializationXMLEntry@@@8
	DD	FLAT:??_R3CvCitySpecializationXMLEntry@@8
rdata$r	ENDS
;	COMDAT ??_7CvCitySpecializationXMLEntry@@6B@
CONST	SEGMENT
??_7CvCitySpecializationXMLEntry@@6B@ DD FLAT:??_R4CvCitySpecializationXMLEntry@@6B@ ; CvCitySpecializationXMLEntry::`vftable'
	DD	FLAT:?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvCitySpecializationXMLEntry@@UAEPAXI@Z
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
CONST	ENDS
;	COMDAT ??1CvCitySpecializationXMLEntry@@UAE@XZ
_TEXT	SEGMENT
??1CvCitySpecializationXMLEntry@@UAE@XZ PROC		; CvCitySpecializationXMLEntry::~CvCitySpecializationXMLEntry, COMDAT
; _this$ = ecx

; 41   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CvCitySpecializationXMLEntry@@6B@

; 42   : 	SAFE_DELETE_ARRAY(m_piFlavorValue);

	mov	eax, DWORD PTR [esi+260]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	DWORD PTR [esi+260], 0

; 43   : 	SAFE_DELETE_ARRAY(m_piYieldTargetTimes100);

	mov	ecx, DWORD PTR [esi+276]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 8
	mov	DWORD PTR [esi+276], 0

; 44   : }

	mov	ecx, esi
	pop	esi
	jmp	??1CvBaseInfo@@QAE@XZ
??1CvCitySpecializationXMLEntry@@UAE@XZ ENDP		; CvCitySpecializationXMLEntry::~CvCitySpecializationXMLEntry
_TEXT	ENDS
EXTRN	__imp_?GetBool@Results@Database@@QAE_NPBD@Z:PROC
EXTRN	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z:PROC ; CvDatabaseUtility::SetYields
EXTRN	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z:PROC ; CvDatabaseUtility::SetFlavors
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
EXTRN	__imp_?GetText@Results@Database@@QAEPBDPBD@Z:PROC
EXTRN	__imp_?GetInt@Results@Database@@QAEHPBD@Z:PROC
EXTRN	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:PROC ; CvBaseInfo::CacheResults
; Function compile flags: /Ogtpy
;	COMDAT ?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvCitySpecializationXMLEntry::CacheResults, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp

; 48   : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	ebp, DWORD PTR _kUtility$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _kResults$[esp+8]
	push	ebp
	push	edi
	mov	esi, ecx
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	test	al, al
	jne	SHORT $LN2@CacheResul
	pop	edi
	pop	esi
	pop	ebp

; 73   : }

	ret	8
$LN2@CacheResul:

; 49   : 		return false;
; 50   : 
; 51   : 	//Basic Properties
; 52   : 	m_iSubtype = kResults.GetInt("SubType");

	push	OFFSET $SG225338
	mov	ecx, edi
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z

; 53   : 
; 54   : 	//References
; 55   : 	const char* szYieldType = kResults.GetText("YieldType");

	push	OFFSET $SG225340
	mov	ecx, edi
	mov	DWORD PTR [esi+268], eax
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z

; 56   : 	if(szYieldType != NULL)

	test	eax, eax
	je	SHORT $LN1@CacheResul

; 57   : 	{
; 58   : 		m_eYieldType = (YieldTypes)GC.getInfoTypeForString(szYieldType);

	push	0
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR [esi+264], eax
$LN1@CacheResul:
	push	ebx

; 59   : 	}
; 60   : 
; 61   : 	//Arrays
; 62   : 	const char* szType = GetType();

	lea	ecx, DWORD PTR [esi+176]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 63   : 	kUtility.SetFlavors(m_piFlavorValue, "CitySpecialization_Flavors", "CitySpecializationType", szType);

	push	0
	mov	ebx, eax
	push	ebx
	push	OFFSET $SG225344
	push	OFFSET $SG225345
	lea	eax, DWORD PTR [esi+260]
	push	eax
	mov	ecx, ebp
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 64   : 	kUtility.SetYields(m_piYieldTargetTimes100, "CitySpecialization_TargetYields", "CitySpecializationType", szType);

	push	ebx
	push	OFFSET $SG225346
	push	OFFSET $SG225347
	lea	ecx, DWORD PTR [esi+276]
	push	ecx
	mov	ecx, ebp
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 65   : 
; 66   : 	//Booleans
; 67   : 	m_bWonder = kResults.GetBool("IsWonder");

	mov	ebx, DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	push	OFFSET $SG225348
	mov	ecx, edi
	call	ebx

; 68   : 	m_bDefault = kResults.GetBool("IsDefault");

	push	OFFSET $SG225349
	mov	ecx, edi
	mov	BYTE PTR [esi+272], al
	call	ebx

; 69   : 	m_bMustBeCoastal = kResults.GetBool("MustBeCoastal");

	push	OFFSET $SG225350
	mov	ecx, edi
	mov	BYTE PTR [esi+273], al
	call	ebx

; 70   : 	m_bOperationUnitProvider = kResults.GetBool("IsOperationUnitProvider");

	push	OFFSET $SG225351
	mov	ecx, edi
	mov	BYTE PTR [esi+274], al
	call	ebx
	pop	ebx
	pop	edi
	mov	BYTE PTR [esi+275], al
	pop	esi

; 71   : 
; 72   : 	return true;

	mov	al, 1
	pop	ebp

; 73   : }

	ret	8
?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvCitySpecializationXMLEntry::CacheResults
_TEXT	ENDS
PUBLIC	?GetNumCitySpecializations@CvCitySpecializationXMLEntries@@QAEHXZ ; CvCitySpecializationXMLEntries::GetNumCitySpecializations
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumCitySpecializations@CvCitySpecializationXMLEntries@@QAEHXZ
_TEXT	SEGMENT
?GetNumCitySpecializations@CvCitySpecializationXMLEntries@@QAEHXZ PROC ; CvCitySpecializationXMLEntries::GetNumCitySpecializations, COMDAT
; _this$ = ecx

; 152  : 	return m_paCitySpecializationEntries.size();

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 153  : }

	ret	0
?GetNumCitySpecializations@CvCitySpecializationXMLEntries@@QAEHXZ ENDP ; CvCitySpecializationXMLEntries::GetNumCitySpecializations
_TEXT	ENDS
PUBLIC	?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z ; CvCitySpecializationXMLEntries::GetEntry
; Function compile flags: /Ogtpy
;	COMDAT ?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z PROC ; CvCitySpecializationXMLEntries::GetEntry, COMDAT
; _this$ = ecx

; 158  : 	return m_paCitySpecializationEntries[index];

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _index$[esp-4]
	mov	eax, DWORD PTR [eax+ecx*4]

; 159  : }

	ret	4
?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z ENDP ; CvCitySpecializationXMLEntries::GetEntry
_TEXT	ENDS
PUBLIC	?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield
; Function compile flags: /Ogtpy
;	COMDAT ?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z
_TEXT	SEGMENT
_eYield$ = 8						; size = 4
?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z PROC ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield, COMDAT
; _this$ = ecx

; 164  : 	m_CurrentYield = eYield;
; 165  : 	for(m_CurrentIndex = 0; m_CurrentIndex < (int)m_paCitySpecializationEntries.size(); m_CurrentIndex++)

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [ecx+8]
	push	esi
	mov	esi, DWORD PTR _eYield$[esp]
	sub	eax, edx
	push	edi
	mov	DWORD PTR [ecx+20], esi
	mov	DWORD PTR [ecx+16], 0
	test	eax, -4					; fffffffcH
	jle	SHORT $LN2@GetFirstSp
	npad	1
$LL4@GetFirstSp:

; 166  : 	{
; 167  : 		if(m_paCitySpecializationEntries[m_CurrentIndex]->GetYieldType() == m_CurrentYield)

	mov	eax, DWORD PTR [ecx+16]
	mov	edi, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [edi+264], esi
	je	SHORT $LN5@GetFirstSp
	inc	eax
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, edx
	sar	eax, 2
	cmp	DWORD PTR [ecx+16], eax
	jl	SHORT $LL4@GetFirstSp
$LN2@GetFirstSp:

; 168  : 		{
; 169  : 			return (CitySpecializationTypes)m_CurrentIndex;
; 170  : 		}
; 171  : 	}
; 172  : 	return NO_CITY_SPECIALIZATION;

	or	eax, -1
$LN5@GetFirstSp:
	pop	edi
	pop	esi

; 173  : }

	ret	4
?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z ENDP ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield
_TEXT	ENDS
PUBLIC	?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationXMLEntries::GetNextSpecializationForYield
; Function compile flags: /Ogtpy
;	COMDAT ?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ PROC ; CvCitySpecializationXMLEntries::GetNextSpecializationForYield, COMDAT
; _this$ = ecx

; 178  : #ifdef AUI_WARNING_FIXES
; 179  : 	for (m_CurrentIndex = m_CurrentIndex + 1; m_CurrentIndex < (int)m_paCitySpecializationEntries.size(); m_CurrentIndex++)
; 180  : #else
; 181  : 	for(m_CurrentIndex = m_CurrentIndex++; m_CurrentIndex < (int)m_paCitySpecializationEntries.size(); m_CurrentIndex++)

	mov	edx, DWORD PTR [ecx+4]
	inc	DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [ecx+16]
	push	esi
	mov	esi, DWORD PTR [ecx+8]
	sub	esi, edx
	sar	esi, 2
	cmp	eax, esi
	push	edi
	jge	SHORT $LN2@GetNextSpe
	mov	esi, DWORD PTR [ecx+20]
	npad	6
$LL4@GetNextSpe:

; 182  : #endif
; 183  : 	{
; 184  : 		if(m_paCitySpecializationEntries[m_CurrentIndex]->GetYieldType() == m_CurrentYield)

	mov	edi, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [edi+264], esi
	je	SHORT $LN5@GetNextSpe
	inc	eax
	mov	DWORD PTR [ecx+16], eax
	mov	edi, DWORD PTR [ecx+8]
	sub	edi, edx
	sar	edi, 2
	cmp	eax, edi
	jl	SHORT $LL4@GetNextSpe
$LN2@GetNextSpe:

; 185  : 		{
; 186  : 			return (CitySpecializationTypes)m_CurrentIndex;
; 187  : 		}
; 188  : 	}
; 189  : 	return NO_CITY_SPECIALIZATION;

	or	eax, -1
$LN5@GetNextSpe:
	pop	edi
	pop	esi

; 190  : }

	ret	0
?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ ENDP ; CvCitySpecializationXMLEntries::GetNextSpecializationForYield
_TEXT	ENDS
PUBLIC	?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z ; CvCitySpecializationXMLEntries::GetNumSpecializationsForYield
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z
_TEXT	SEGMENT
_eYield$ = 8						; size = 4
?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z PROC ; CvCitySpecializationXMLEntries::GetNumSpecializationsForYield, COMDAT
; _this$ = ecx

; 195  : 	int iRtnValue = 0;
; 196  : 	for(int iI = 0; iI < (int)m_paCitySpecializationEntries.size(); iI++)

	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	sub	ecx, edx
	sar	ecx, 2
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN2@GetNumSpec
	push	esi
	mov	esi, DWORD PTR _eYield$[esp]
	push	edi
	npad	9
$LL4@GetNumSpec:

; 197  : 	{
; 198  : 		if(m_paCitySpecializationEntries[iI]->GetYieldType() == eYield)

	mov	edi, DWORD PTR [edx]
	cmp	DWORD PTR [edi+264], esi
	jne	SHORT $LN3@GetNumSpec

; 199  : 		{
; 200  : 			iRtnValue++;

	inc	eax
$LN3@GetNumSpec:

; 195  : 	int iRtnValue = 0;
; 196  : 	for(int iI = 0; iI < (int)m_paCitySpecializationEntries.size(); iI++)

	add	edx, 4
	sub	ecx, 1
	jne	SHORT $LL4@GetNumSpec
	pop	edi
	pop	esi
$LN2@GetNumSpec:

; 201  : 		}
; 202  : 	}
; 203  : 
; 204  : 	return iRtnValue;
; 205  : }

	ret	4
?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z ENDP ; CvCitySpecializationXMLEntries::GetNumSpecializationsForYield
_TEXT	ENDS
PUBLIC	?Read@CvCitySpecializationAI@@QAEXAAVFDataStream@@@Z ; CvCitySpecializationAI::Read
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4CitySpecializationTypes@@@Z:PROC ; operator>>
; Function compile flags: /Ogtpy
;	COMDAT ?Read@CvCitySpecializationAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_uiVersion$ = 8						; size = 4
_kStream$ = 8						; size = 4
?Read@CvCitySpecializationAI@@QAEXAAVFDataStream@@@Z PROC ; CvCitySpecializationAI::Read, COMDAT
; _this$ = ecx

; 278  : {

	push	ebx
	push	esi
	push	edi

; 279  : 	// Version number to maintain backwards compatibility
; 280  : 	uint uiVersion;
; 281  : 	kStream >> uiVersion;

	mov	edi, DWORD PTR _kStream$[esp+8]
	lea	eax, DWORD PTR _uiVersion$[esp+8]
	mov	esi, ecx
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 282  : 
; 283  : 	kStream >> m_bSpecializationsDirty;

	lea	ebx, DWORD PTR [esi+8]
	push	ebx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 284  : 	kStream >> m_bInterruptWonders;

	lea	ecx, DWORD PTR [esi+192]
	push	ecx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 285  : 	kStream >> m_eNextSpecializationDesired;

	lea	edx, DWORD PTR [esi+12]
	push	edx
	push	edi
	call	??5@YAAAVFDataStream@@AAV0@AAW4CitySpecializationTypes@@@Z ; operator>>
	add	esp, 8

; 286  : 	kStream >> (int&)m_eNextWonderDesired;

	lea	eax, DWORD PTR [esi+196]
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 287  : 	kStream >> m_iWonderCityID;

	lea	ecx, DWORD PTR [esi+200]
	push	ecx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 288  : 	kStream >> m_iNextWonderWeight;

	lea	edx, DWORD PTR [esi+204]
	push	edx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 289  : 
; 290  : 	if (uiVersion >= 2)

	cmp	DWORD PTR _uiVersion$[esp+8], 2
	jb	SHORT $LN2@Read

; 291  : 	{
; 292  : 		kStream >> m_iLastTurnEvaluated;

	add	esi, 188				; 000000bcH
	push	esi
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	pop	edi
	pop	esi
	pop	ebx

; 298  : 	}
; 299  : }

	ret	4
$LN2@Read:
	pop	edi

; 293  : 	}
; 294  : 	else
; 295  : 	{
; 296  : 		m_iLastTurnEvaluated = 0;

	mov	DWORD PTR [esi+188], 0
	pop	esi

; 297  : 		m_bSpecializationsDirty = true;

	mov	BYTE PTR [ebx], 1
	pop	ebx

; 298  : 	}
; 299  : }

	ret	4
?Read@CvCitySpecializationAI@@QAEXAAVFDataStream@@@Z ENDP ; CvCitySpecializationAI::Read
_TEXT	ENDS
PUBLIC	?Write@CvCitySpecializationAI@@QBEXAAVFDataStream@@@Z ; CvCitySpecializationAI::Write
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4BuildingTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4CitySpecializationTypes@@@Z:PROC ; operator<<
; Function compile flags: /Ogtpy
;	COMDAT ?Write@CvCitySpecializationAI@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvCitySpecializationAI@@QBEXAAVFDataStream@@@Z PROC ; CvCitySpecializationAI::Write, COMDAT
; _this$ = ecx

; 303  : {

	push	ecx
	push	esi
	push	edi

; 304  : 	// Current version number
; 305  : 	uint uiVersion = 2;
; 306  : 	kStream << uiVersion;

	mov	edi, DWORD PTR _kStream$[esp+8]
	lea	eax, DWORD PTR _uiVersion$[esp+12]
	mov	esi, ecx
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _uiVersion$[esp+16], 2
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 307  : 
; 308  : 	kStream << m_bSpecializationsDirty;

	lea	ecx, DWORD PTR [esi+8]
	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 309  : 	kStream << m_bInterruptWonders;

	lea	edx, DWORD PTR [esi+192]
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 310  : 	kStream << m_eNextSpecializationDesired;

	lea	eax, DWORD PTR [esi+12]
	push	eax
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4CitySpecializationTypes@@@Z ; operator<<

; 311  : 	kStream << m_eNextWonderDesired;

	lea	ecx, DWORD PTR [esi+196]
	push	ecx
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4BuildingTypes@@@Z ; operator<<
	add	esp, 16					; 00000010H

; 312  : 	kStream << m_iWonderCityID;

	lea	edx, DWORD PTR [esi+200]
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 313  : 	kStream << m_iNextWonderWeight;

	lea	eax, DWORD PTR [esi+204]
	push	eax
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 314  : 	kStream << m_iLastTurnEvaluated;

	add	esi, 188				; 000000bcH
	push	esi
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	pop	edi
	pop	esi

; 315  : }

	pop	ecx
	ret	4
?Write@CvCitySpecializationAI@@QBEXAAVFDataStream@@@Z ENDP ; CvCitySpecializationAI::Write
_TEXT	ENDS
PUBLIC	?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetWonderSpecialization
EXTRN	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ:PROC ; CvGlobals::GetGameCitySpecializations
EXTRN	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumCitySpecializationInfos
; Function compile flags: /Ogtpy
;	COMDAT ?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ PROC ; CvCitySpecializationAI::GetWonderSpecialization, COMDAT
; _this$ = ecx

; 1078 : {

	push	esi

; 1079 : 	CvCitySpecializationXMLEntry* pEntry;
; 1080 : 
; 1081 : #ifdef AUI_WARNING_FIXES
; 1082 : 	for (uint iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)
; 1083 : #else
; 1084 : 	for(int iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	test	eax, eax
	jle	SHORT $LN2@GetWonderS
$LL4@GetWonderS:

; 1085 : #endif
; 1086 : 	{
; 1087 : 		pEntry = GC.GetGameCitySpecializations()->GetEntry(iI);

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations

; 1088 : 		if(pEntry->IsWonder())

	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+esi*4]
	cmp	BYTE PTR [ecx+272], 0
	jne	SHORT $LN14@GetWonderS
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	esi, eax
	jl	SHORT $LL4@GetWonderS
$LN2@GetWonderS:

; 1091 : 		}
; 1092 : 	}
; 1093 : 
; 1094 : 	return (CitySpecializationTypes)-1;

	or	eax, -1
	pop	esi

; 1095 : }

	ret	0
$LN14@GetWonderS:

; 1089 : 		{
; 1090 : 			return (CitySpecializationTypes)iI;

	mov	eax, esi
	pop	esi

; 1095 : }

	ret	0
?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ENDP ; CvCitySpecializationAI::GetWonderSpecialization
_TEXT	ENDS
PUBLIC	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
; Function compile flags: /Ogtpy
;	COMDAT ?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ PROC ; CvCitySpecializationAI::GetEconomicDefaultSpecialization, COMDAT
; _this$ = ecx

; 1099 : {

	push	esi

; 1100 : 	CvCitySpecializationXMLEntry* pEntry;
; 1101 : 
; 1102 : #ifdef AUI_WARNING_FIXES
; 1103 : 	for (uint iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)
; 1104 : #else
; 1105 : 	for(int iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	test	eax, eax
	jle	SHORT $LN2@GetEconomi
$LL4@GetEconomi:

; 1106 : #endif
; 1107 : 	{
; 1108 : 		pEntry = GC.GetGameCitySpecializations()->GetEntry(iI);

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations

; 1109 : 		if(pEntry->IsDefault())

	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+esi*4]
	cmp	BYTE PTR [ecx+273], 0
	jne	SHORT $LN14@GetEconomi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	esi, eax
	jl	SHORT $LL4@GetEconomi
$LN2@GetEconomi:

; 1112 : 		}
; 1113 : 	}
; 1114 : 
; 1115 : 	return (CitySpecializationTypes)-1;

	or	eax, -1
	pop	esi

; 1116 : }

	ret	0
$LN14@GetEconomi:

; 1110 : 		{
; 1111 : 			return (CitySpecializationTypes)iI;

	mov	eax, esi
	pop	esi

; 1116 : }

	ret	0
?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ENDP ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
_TEXT	ENDS
PUBLIC	?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ; CvCitySpecializationAI::GetWonderSubtype
; Function compile flags: /Ogtpy
;	COMDAT ?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ
_TEXT	SEGMENT
?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ PROC	; CvCitySpecializationAI::GetWonderSubtype, COMDAT
; _this$ = ecx

; 1120 : {

	push	ebx
	push	esi

; 1121 : 	CvCitySpecializationXMLEntry* pEntry;
; 1122 : 	int iSubType = -1;
; 1123 : 
; 1124 : #ifdef AUI_WARNING_FIXES
; 1125 : 	for (uint iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)
; 1126 : #else
; 1127 : 	for(int iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	or	ebx, -1
	xor	esi, esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	test	eax, eax
	jle	SHORT $LN3@GetWonderS@2
$LL5@GetWonderS@2:

; 1128 : #endif
; 1129 : 	{
; 1130 : 		pEntry = GC.GetGameCitySpecializations()->GetEntry(iI);

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	eax, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+esi*4]

; 1131 : 		if(pEntry->GetYieldType() == YIELD_PRODUCTION)

	cmp	DWORD PTR [eax+264], 1
	jne	SHORT $LN2@GetWonderS@2

; 1132 : 		{
; 1133 : 			iSubType++;

	inc	ebx
$LN2@GetWonderS@2:

; 1134 : 		}
; 1135 : 		if(pEntry->IsWonder())

	cmp	BYTE PTR [eax+272], 0
	jne	SHORT $LN3@GetWonderS@2
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	esi, eax
	jl	SHORT $LL5@GetWonderS@2
$LN3@GetWonderS@2:
	pop	esi

; 1136 : 		{
; 1137 : 			return iSubType;
; 1138 : 		}
; 1139 : 	}
; 1140 : 
; 1141 : 	return iSubType;

	mov	eax, ebx
	pop	ebx

; 1142 : }

	ret	0
?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ENDP	; CvCitySpecializationAI::GetWonderSubtype
_TEXT	ENDS
PUBLIC	?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ ; CvCitySpecializationAI::FindBestWonderCity
EXTRN	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::nextCity
EXTRN	?GetWonderProductionModifier@CvCity@@QBEHXZ:PROC ; CvCity::GetWonderProductionModifier
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
EXTRN	?getCurrentProductionDifference@CvCity@@QBEH_N0@Z:PROC ; CvCity::getCurrentProductionDifference
EXTRN	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z:PROC ; CvCity::canConstruct
EXTRN	?IsPuppet@CvCity@@QBE_NXZ:PROC			; CvCity::IsPuppet
; Function compile flags: /Ogtpy
;	COMDAT ?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ
_TEXT	SEGMENT
_iBestProduction$ = -12					; size = 4
_pBestCity$ = -8					; size = 4
_iLoop$ = -4						; size = 4
?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ PROC ; CvCitySpecializationAI::FindBestWonderCity, COMDAT
; _this$ = ecx

; 1146 : {

	sub	esp, 12					; 0000000cH
	push	ebp
	push	edi

; 1147 : 	CvCity* pBestCity = NULL;

	xor	edi, edi
	mov	ebp, ecx

; 1148 : 	CvCity* pLoopCity;
; 1149 : 	int iLoop;
; 1150 : 	int iBestProduction = 0;
; 1151 : 	int iProduction;
; 1152 : 
; 1153 : 	// First, see if we already have a wonder underway somewhere.  If so that's our wonder city
; 1154 : 	pLoopCity = NULL;//GetWonderBuildCity();
; 1155 : 
; 1156 : 	CvBuildingEntry* pkProductionBuildingInfo = NULL;
; 1157 : 	if(pLoopCity != NULL && pLoopCity->getProductionBuilding() != NO_BUILDING)
; 1158 : 	{
; 1159 : 		pkProductionBuildingInfo = GC.getBuildingInfo(pLoopCity->getProductionBuilding());
; 1160 : 	}
; 1161 : 
; 1162 : 	if(pkProductionBuildingInfo && m_pPlayer->GetWonderProductionAI()->IsWonder(*pkProductionBuildingInfo))
; 1163 : 	{
; 1164 : 		if(!pLoopCity->IsPuppet())
; 1165 : 		{
; 1166 : 			return pLoopCity;
; 1167 : 		}
; 1168 : 	}
; 1169 : 	else if(m_eNextWonderDesired != NO_BUILDING)

	cmp	DWORD PTR [ebp+196], -1
	mov	DWORD PTR _pBestCity$[esp+20], edi
	mov	DWORD PTR _iBestProduction$[esp+20], edi
	je	$LN20@FindBestWo

; 1170 : 	{
; 1171 : 		for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	mov	ecx, DWORD PTR [ebp]
	push	esi
	push	edi
	lea	eax, DWORD PTR _iLoop$[esp+28]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	esi, eax
	test	esi, esi
	je	$LN19@FindBestWo
	push	ebx
$LL7@FindBestWo:

; 1172 : 		{
; 1173 : 			if(!pLoopCity->IsPuppet())

	mov	ecx, esi
	call	?IsPuppet@CvCity@@QBE_NXZ		; CvCity::IsPuppet
	test	al, al
	jne	SHORT $LN6@FindBestWo

; 1174 : 			{
; 1175 : 				if(pLoopCity->canConstruct(m_eNextWonderDesired))

	mov	ecx, DWORD PTR [ebp+196]
	push	0
	push	0
	push	0
	push	0
	push	ecx
	mov	ecx, esi
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	test	al, al
	je	SHORT $LN6@FindBestWo

; 1176 : 				{
; 1177 : 					iProduction = pLoopCity->getCurrentProductionDifference(true, false);

	push	0
	push	1
	mov	ecx, esi
	call	?getCurrentProductionDifference@CvCity@@QBEH_N0@Z ; CvCity::getCurrentProductionDifference

; 1178 : 					if(pLoopCity->GetCityStrategyAI()->GetDefaultSpecialization() == GetWonderSpecialization())

	mov	ecx, esi
	mov	edi, eax
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ebx, DWORD PTR [eax+24]
	mov	ecx, ebp
	call	?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetWonderSpecialization
	cmp	ebx, eax
	jne	SHORT $LN2@FindBestWo

; 1179 : 					{
; 1180 : 						iProduction = (iProduction * 3) / 2;

	lea	eax, DWORD PTR [edi+edi*2]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edi, eax
$LN2@FindBestWo:

; 1181 : 					}
; 1182 : 
; 1183 : 					// factor in Marble, etc.
; 1184 : 					iProduction = (iProduction * (100 + pLoopCity->GetWonderProductionModifier())) / 100;

	mov	ecx, esi
	call	?GetWonderProductionModifier@CvCity@@QBEHXZ ; CvCity::GetWonderProductionModifier
	mov	ecx, eax
	add	ecx, 100				; 00000064H
	imul	ecx, edi
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1185 : 
; 1186 : 					if(iProduction > iBestProduction)

	cmp	eax, DWORD PTR _iBestProduction$[esp+28]
	jle	SHORT $LN6@FindBestWo

; 1187 : 					{
; 1188 : 						pBestCity = pLoopCity;

	mov	DWORD PTR _pBestCity$[esp+28], esi

; 1189 : 						iBestProduction = iProduction;

	mov	DWORD PTR _iBestProduction$[esp+28], eax
$LN6@FindBestWo:
	mov	ecx, DWORD PTR [ebp]
	push	0
	lea	edx, DWORD PTR _iLoop$[esp+32]
	push	edx
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	esi, eax
	test	esi, esi
	jne	$LL7@FindBestWo

; 1190 : 					}
; 1191 : 				}
; 1192 : 			}
; 1193 : 		}
; 1194 : 	}
; 1195 : 
; 1196 : 	return pBestCity;

	mov	eax, DWORD PTR _pBestCity$[esp+28]
	pop	ebx
	pop	esi
	pop	edi
	pop	ebp

; 1197 : }

	add	esp, 12					; 0000000cH
	ret	0
$LN19@FindBestWo:
	pop	esi

; 1190 : 					}
; 1191 : 				}
; 1192 : 			}
; 1193 : 		}
; 1194 : 	}
; 1195 : 
; 1196 : 	return pBestCity;

	mov	eax, edi
	pop	edi
	pop	ebp

; 1197 : }

	add	esp, 12					; 0000000cH
	ret	0
$LN20@FindBestWo:

; 1190 : 					}
; 1191 : 				}
; 1192 : 			}
; 1193 : 		}
; 1194 : 	}
; 1195 : 
; 1196 : 	return pBestCity;

	mov	eax, edi
	pop	edi
	pop	ebp

; 1197 : }

	add	esp, 12					; 0000000cH
	ret	0
?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ ENDP ; CvCitySpecializationAI::FindBestWonderCity
_TEXT	ENDS
PUBLIC	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:PROC
EXTRN	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ:PROC ; CvGlobals::getPlayerAndCityAILogSplit
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$2
__ehfuncinfo$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z
_TEXT	SEGMENT
$T231336 = -72						; size = 4
$T231334 = -68						; size = 28
$T231333 = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_playerName$ = 12					; size = 4
?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z PROC ; CvCitySpecializationAI::GetLogFileName, COMDAT
; _this$ = ecx

; 1721 : {

	push	-1
	push	__ehhandler$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 60					; 0000003cH
	push	ebx
	xor	ebx, ebx
	push	esi
	mov	DWORD PTR $T231336[esp+80], ebx

; 1722 : 	CvString strLogName;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+76]
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+88], ebx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1732 : 	}
; 1733 : 
; 1734 : 	return strLogName;

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR __$EHRec$[esp+88], ebx
	mov	DWORD PTR $T231336[esp+80], 1
	call	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ ; CvGlobals::getPlayerAndCityAILogSplit
	test	al, al
	je	SHORT $LN2@GetLogFile
	mov	eax, DWORD PTR _playerName$[esp+76]
	push	eax
	lea	ecx, DWORD PTR $T231333[esp+84]
	push	OFFSET $SG227112
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	push	OFFSET $SG227111
	push	eax
	lea	edx, DWORD PTR $T231334[esp+100]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+112], 1
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 24					; 00000018H
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+88], 2
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T231334[esp+80]
	mov	BYTE PTR __$EHRec$[esp+88], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T231333[esp+80]
	mov	BYTE PTR __$EHRec$[esp+88], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	pop	ebx

; 1735 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+72]
	mov	DWORD PTR fs:0, ecx
	add	esp, 72					; 00000048H
	ret	8
$LN2@GetLogFile:

; 1723 : 
; 1724 : 	// Open the log file
; 1725 : 	if(GC.getPlayerAndCityAILogSplit())
; 1726 : 	{
; 1727 : 		strLogName = "CitySpecializationLog_" + playerName + ".csv";
; 1728 : 	}
; 1729 : 	else
; 1730 : 	{
; 1731 : 		strLogName = "CitySpecializationLog.csv";

	push	OFFSET $SG227114
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 1735 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 72					; 00000048H
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$0:
	mov	eax, DWORD PTR $T231336[ebp]
	and	eax, 1
	je	$LN6@GetLogFile
	and	DWORD PTR $T231336[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLogFile:
	ret	0
__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$1:
	lea	ecx, DWORD PTR $T231333[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$2:
	lea	ecx, DWORD PTR $T231334[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z:
	mov	eax, OFFSET __ehfuncinfo$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ENDP ; CvCitySpecializationAI::GetLogFileName
PUBLIC	?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z ; CvWeightedVector<int,4,1>::GetElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z PROC	; CvWeightedVector<int,4,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z ENDP	; CvWeightedVector<int,4,1>::GetElement
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@H$03$00@@QAEHXZ	; CvWeightedVector<int,4,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@H$03$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@H$03$00@@QAEHXZ PROC		; CvWeightedVector<int,4,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@H$03$00@@QAEHXZ ENDP		; CvWeightedVector<int,4,1>::size
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBEABW4YieldTypes@@I@Z ; CvWeightedVector<enum YieldTypes,5,1>::GetElement
; Function compile flags: /Ogtpy
;	COMDAT ?GetElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBEABW4YieldTypes@@I@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBEABW4YieldTypes@@I@Z PROC ; CvWeightedVector<enum YieldTypes,5,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBEABW4YieldTypes@@I@Z ENDP ; CvWeightedVector<enum YieldTypes,5,1>::GetElement
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBEHI@Z ; CvWeightedVector<enum YieldTypes,5,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -8						; size = 8
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBEHI@Z PROC ; CvWeightedVector<enum YieldTypes,5,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 8

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$[esp+8], edx

; 75   : 	}

	add	esp, 8
	ret	4
?GetWeight@?$CvWeightedVector@W4YieldTypes@@$04$00@@QBEHI@Z ENDP ; CvWeightedVector<enum YieldTypes,5,1>::GetWeight
_TEXT	ENDS
PUBLIC	?SetWeight@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXIH@Z ; CvWeightedVector<enum YieldTypes,5,1>::SetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?SetWeight@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?SetWeight@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXIH@Z PROC ; CvWeightedVector<enum YieldTypes,5,1>::SetWeight, COMDAT
; _this$ = ecx

; 83   : 		m_pItems[iIndex].m_iWeight = iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iWeight$[esp-4]
	mov	edx, DWORD PTR _iIndex$[esp-4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 84   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 85   : 	}

	ret	8
?SetWeight@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXIH@Z ENDP ; CvWeightedVector<enum YieldTypes,5,1>::SetWeight
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBEABW4ProductionSpecializationSubtypes@@I@Z ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::GetElement
; Function compile flags: /Ogtpy
;	COMDAT ?GetElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBEABW4ProductionSpecializationSubtypes@@I@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBEABW4ProductionSpecializationSubtypes@@I@Z PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBEABW4ProductionSpecializationSubtypes@@I@Z ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::GetElement
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBEHI@Z ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -8						; size = 8
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBEHI@Z PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 8

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$[esp+8], edx

; 75   : 	}

	add	esp, 8
	ret	4
?GetWeight@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QBEHI@Z ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::GetWeight
_TEXT	ENDS
PUBLIC	?SetWeight@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXIH@Z ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::SetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?SetWeight@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?SetWeight@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXIH@Z PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::SetWeight, COMDAT
; _this$ = ecx

; 83   : 		m_pItems[iIndex].m_iWeight = iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iWeight$[esp-4]
	mov	edx, DWORD PTR _iIndex$[esp-4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 84   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 85   : 	}

	ret	8
?SetWeight@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXIH@Z ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::SetWeight
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEAAPAVCvCitySpecializationXMLEntry@@XZ ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEAAPAVCvCitySpecializationXMLEntry@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEAAPAVCvCitySpecializationXMLEntry@@XZ PROC ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator*, COMDAT
; _this$ = ecx

; 339  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [ecx]

; 340  : 		}

	ret	0
??D?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEAAPAVCvCitySpecializationXMLEntry@@XZ ENDP ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator++, COMDAT
; _this$ = ecx

; 348  : 		{	// preincrement

	mov	eax, ecx

; 349  : 		++(*(_Mybase *)this);

	add	DWORD PTR [eax], 4

; 350  : 		return (*this);
; 351  : 		}

	ret	0
??E?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator!=, COMDAT
; _this$ = ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::_Iterator<0>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::_Iterator<0>, COMDAT
; _this$ = ecx

; 348  : 		_Iterator()

	mov	eax, ecx
	mov	DWORD PTR [eax], 0

; 349  : 			{	// construct with null node
; 350  : 			}

	ret	0
??0?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::_Iterator<0>
_TEXT	ENDS
PUBLIC	??E?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEAAV012@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::operator++, COMDAT
; _this$ = ecx

; 403  : 			{	// preincrement

	mov	eax, ecx

; 404  : 			++(*(_Mybase_iter *)this);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 405  : 			return (*this);
; 406  : 			}

	ret	0
??E?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::operator++
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE_NABV012@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator!=, COMDAT
; _this$ = ecx

; 303  : 			return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 304  : 			}

	ret	4
??9?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::_Iterator<0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::_Iterator<0>, COMDAT
; _this$ = ecx

; 348  : 		_Iterator()

	mov	eax, ecx
	mov	DWORD PTR [eax], 0

; 349  : 			{	// construct with null node
; 350  : 			}

	ret	0
??0?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::_Iterator<0>
_TEXT	ENDS
PUBLIC	??E?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEAAV012@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??E?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEAAV012@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator++, COMDAT
; _this$ = ecx

; 403  : 			{	// preincrement

	mov	eax, ecx

; 404  : 			++(*(_Mybase_iter *)this);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 405  : 			return (*this);
; 406  : 			}

	ret	0
??E?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEAAV012@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator++
_TEXT	ENDS
PUBLIC	??9?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NABV012@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NABV012@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator!=, COMDAT
; _this$ = ecx

; 303  : 			return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 304  : 			}

	ret	4
??9?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator!=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	??1?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@V?$allocator@PAVCvCitySpecializationXMLEntry@@@1@@Z ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@V?$allocator@PAVCvCitySpecializationXMLEntry@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@V?$allocator@PAVCvCitySpecializationXMLEntry@@@1@@Z PROC ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	mov	eax, ecx

; 426  : 		}

	ret	4
??0?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE@V?$allocator@PAVCvCitySpecializationXMLEntry@@@1@@Z ENDP ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	4
?destroy@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 5
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@PAPAVCvCitySpecializationXMLEntry@@@Z ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@PAPAVCvCitySpecializationXMLEntry@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@PAPAVCvCitySpecializationXMLEntry@@@Z PROC ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx

; 333  : 		{	// construct with pointer _Ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 334  : 		}

	ret	4
??0?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@PAPAVCvCitySpecializationXMLEntry@@@Z ENDP ; std::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Vector_iterator<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	4
?destroy@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::_Iterator<0>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::_Iterator<0>, COMDAT
; _this$ = ecx

; 367  : 			{	// construct with node pointer _Pnode

	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [eax], ecx

; 368  : 			}

	ret	4
??0?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::_Iterator<0>
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEABW4CitySpecializationTypes@@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEABW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
??D?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEABW4CitySpecializationTypes@@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator*, COMDAT
; _this$ = ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());
; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);
; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

	mov	eax, DWORD PTR [ecx]
	add	eax, 8

; 227  : 			}

	ret	0
??D?$_Const_iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEABW4CitySpecializationTypes@@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Const_iterator<0>::operator*
_TEXT	ENDS
PUBLIC	??0?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::_Iterator<0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::_Iterator<0>, COMDAT
; _this$ = ecx

; 367  : 			{	// construct with node pointer _Pnode

	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [eax], ecx

; 368  : 			}

	ret	4
??0?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::_Iterator<0>
_TEXT	ENDS
PUBLIC	??D?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEABVCitySpecializationData@@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEABVCitySpecializationData@@XZ
_TEXT	SEGMENT
??D?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEABVCitySpecializationData@@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator*, COMDAT
; _this$ = ecx

; 212  : 
; 213  :  #if _HAS_ITERATOR_DEBUGGING
; 214  : 			if (this->_Mycont == 0
; 215  : 				|| _Ptr == 0
; 216  : 				|| _Ptr == ((_Myt *)this->_Mycont)->_Myhead)
; 217  : 				{
; 218  : 				_DEBUG_ERROR("list iterator not dereferencable");
; 219  : 				_SCL_SECURE_TRAITS_OUT_OF_RANGE;
; 220  : 				}
; 221  :  #else
; 222  : 			_SCL_SECURE_TRAITS_VALIDATE(this->_Has_container());
; 223  : 			_SCL_SECURE_TRAITS_VALIDATE_RANGE(_Ptr != ((_Myt *)(this->_Getmycont()))->_Myhead);
; 224  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 225  : 
; 226  : 			return (_Myval(_Ptr));

	mov	eax, DWORD PTR [ecx]
	add	eax, 8

; 227  : 			}

	ret	0
??D?$_Const_iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEABVCitySpecializationData@@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Const_iterator<0>::operator*
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@@Z PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Make_iter, COMDAT
; _this$ = ecx

; 687  : 		return (iterator(_Where._Myptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 688  : 		}

	ret	8
?_Make_iter@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@@Z ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEIXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEIXZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 732  : 		}

	ret	0
?max_size@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QBEIXZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAEPAPAVCvCitySpecializationXMLEntry@@I@Z ; std::allocator<CvCitySpecializationXMLEntry *>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAEPAPAVCvCitySpecializationXMLEntry@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAEPAPAVCvCitySpecializationXMLEntry@@I@Z PROC ; std::allocator<CvCitySpecializationXMLEntry *>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z ; std::_Allocate<CvCitySpecializationXMLEntry *>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@QAEPAPAVCvCitySpecializationXMLEntry@@I@Z ENDP ; std::allocator<CvCitySpecializationXMLEntry *>::allocate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocate
; Function compile flags: /Ogtpy
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN5@construct
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct:

; 156  : 		}

	ret	8
?construct@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	4
?destroy@?$allocator@PAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::Free
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@2

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@2:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::Free
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@3

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@3:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::Free
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@ABQAU342@@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@ABQAU342@@Z PROC ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN5@construct@2
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct@2:

; 156  : 		}

	ret	8
?construct@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z PROC ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	4
?destroy@?$allocator@PAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEXPAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@@Z ENDP ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEIXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEIXZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 626  : 		}

	ret	0
?max_size@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEIXZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z ; std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z PROC ; std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

	mov	eax, ecx

; 48   : 		}

	ret	4
??0?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z ENDP ; std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@W4CitySpecializationTypes@@@std@@QAEXPAW4CitySpecializationTypes@@ABW43@@Z ; std::allocator<enum CitySpecializationTypes>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@W4CitySpecializationTypes@@@std@@QAEXPAW4CitySpecializationTypes@@ABW43@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@W4CitySpecializationTypes@@@std@@QAEXPAW4CitySpecializationTypes@@ABW43@@Z PROC ; std::allocator<enum CitySpecializationTypes>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN5@construct@3
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct@3:

; 156  : 		}

	ret	8
?construct@?$allocator@W4CitySpecializationTypes@@@std@@QAEXPAW4CitySpecializationTypes@@ABW43@@Z ENDP ; std::allocator<enum CitySpecializationTypes>::construct
_TEXT	ENDS
PUBLIC	?max_size@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEIXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?max_size@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEIXZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::max_size, COMDAT
; _this$ = ecx

; 625  : 		return (this->_Alval.max_size());

	mov	eax, 178956970				; 0aaaaaaaH

; 626  : 		}

	ret	0
?max_size@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEIXZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z ; std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z PROC ; std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct allocator from _Al

	mov	eax, ecx

; 48   : 		}

	ret	4
??0?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z ENDP ; std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@VCitySpecializationData@@@std@@QAEXPAVCitySpecializationData@@ABV3@@Z ; std::allocator<CitySpecializationData>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@VCitySpecializationData@@@std@@QAEXPAVCitySpecializationData@@ABV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@VCitySpecializationData@@@std@@QAEXPAVCitySpecializationData@@ABV3@@Z PROC ; std::allocator<CitySpecializationData>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN5@construct@4
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
$LN5@construct@4:

; 156  : 		}

	ret	8
?construct@?$allocator@VCitySpecializationData@@@std@@QAEXPAVCitySpecializationData@@ABV3@@Z ENDP ; std::allocator<CitySpecializationData>::construct
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>, COMDAT

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jle	SHORT $LN10@unchecked_
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN10@unchecked_:
	pop	edi
	mov	eax, esi
	pop	esi

; 3607 : 	}

	ret	0
??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@YAXPAPAVCvCitySpecializationXMLEntry@@0AAV?$allocator@PAVCvCitySpecializationXMLEntry@@@0@@Z ; std::_Destroy_range<std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@YAXPAPAVCvCitySpecializationXMLEntry@@0AAV?$allocator@PAVCvCitySpecializationXMLEntry@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@YAXPAPAVCvCitySpecializationXMLEntry@@0AAV?$allocator@PAVCvCitySpecializationXMLEntry@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@YAXPAPAVCvCitySpecializationXMLEntry@@0AAV?$allocator@PAVCvCitySpecializationXMLEntry@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::iter_swap<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::iter_swap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap@2
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap@2:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::iter_swap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap@3
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap@3:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	jle	SHORT $LN10@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN10@Med3:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+4]
	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [eax+4]
	jle	SHORT $LN19@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3
	mov	edi, DWORD PTR [edx]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	pop	ebx
$LN19@Med3:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN28@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN28@Med3:
	pop	edi
	pop	esi

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	edx, DWORD PTR __Hole$[esp-4]

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp+4]
	lea	eax, DWORD PTR [edx+edx+2]
	cmp	eax, esi
	push	edi
	mov	edi, edx
	jge	SHORT $LN14@Adjust_hea
	npad	7
$LL5@Adjust_hea:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [ecx+eax*8+4]
	cmp	ebx, DWORD PTR [ecx+eax*8-4]
	jle	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [ecx+edx*8], ebx
	mov	ebx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], ebx
	mov	edx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea
$LN14@Adjust_hea:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	edx, DWORD PTR [esi-1]
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	esi, DWORD PTR __Val$[esp+8]
	sub	esp, 8
	mov	eax, esp
	push	edi
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Val$[esp+24]
	push	edx
	push	ecx
	mov	DWORD PTR [eax+4], esi
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_@2
	push	esi
$LL8@unchecked_@2:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_@2
	pop	esi
$LN7@unchecked_@2:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z PROC ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	jle	SHORT $LN10@Med3@2

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3@2
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN10@Med3@2:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+4]
	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [eax+4]
	jle	SHORT $LN19@Med3@2

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3@2
	mov	edi, DWORD PTR [edx]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	pop	ebx
$LN19@Med3@2:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN28@Med3@2

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3@2
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN28@Med3@2:
	pop	edi
	pop	esi

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	edx, DWORD PTR __Hole$[esp-4]

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp+4]
	lea	eax, DWORD PTR [edx+edx+2]
	cmp	eax, esi
	push	edi
	mov	edi, edx
	jge	SHORT $LN14@Adjust_hea@2
	npad	7
$LL5@Adjust_hea@2:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [ecx+eax*8+4]
	cmp	ebx, DWORD PTR [ecx+eax*8-4]
	jle	SHORT $LN2@Adjust_hea@2

; 2062 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea@2:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [ecx+edx*8], ebx
	mov	ebx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], ebx
	mov	edx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea@2
$LN14@Adjust_hea@2:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea@2

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	edx, DWORD PTR [esi-1]
$LN1@Adjust_hea@2:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	esi, DWORD PTR __Val$[esp+8]
	sub	esp, 8
	mov	eax, esp
	push	edi
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Val$[esp+24]
	push	edx
	push	ecx
	mov	DWORD PTR [eax+4], esi
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_@3
	push	esi
$LL8@unchecked_@3:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_@3
	pop	esi
$LN7@unchecked_@3:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z PROC ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	jle	SHORT $LN10@Med3@3

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3@3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN10@Med3@3:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+4]
	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [eax+4]
	jle	SHORT $LN19@Med3@3

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3@3
	mov	edi, DWORD PTR [edx]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	pop	ebx
$LN19@Med3@3:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN28@Med3@3

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3@3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN28@Med3@3:
	pop	edi
	pop	esi

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	edx, DWORD PTR __Hole$[esp-4]

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp+4]
	lea	eax, DWORD PTR [edx+edx+2]
	cmp	eax, esi
	push	edi
	mov	edi, edx
	jge	SHORT $LN14@Adjust_hea@3
	npad	7
$LL5@Adjust_hea@3:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [ecx+eax*8+4]
	cmp	ebx, DWORD PTR [ecx+eax*8-4]
	jle	SHORT $LN2@Adjust_hea@3

; 2062 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea@3:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [ecx+edx*8], ebx
	mov	ebx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], ebx
	mov	edx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea@3
$LN14@Adjust_hea@3:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea@3

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	edx, DWORD PTR [esi-1]
$LN1@Adjust_hea@3:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	esi, DWORD PTR __Val$[esp+8]
	sub	esp, 8
	mov	eax, esp
	push	edi
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Val$[esp+24]
	push	edx
	push	ecx
	mov	DWORD PTR [eax+4], esi
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_@4
	push	esi
$LL8@unchecked_@4:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_@4
	pop	esi
$LN7@unchecked_@4:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 8
___formal$ = 28						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR __Last$[esp+4]
	sub	ecx, eax
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 8
___formal$ = 28						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR __Last$[esp+4]
	sub	ecx, eax
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 8
___formal$ = 28						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR __Last$[esp+4]
	sub	ecx, eax
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	?GetID@CvCity@@QBEHXZ				; CvCity::GetID
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
;	COMDAT ?GetID@CvCity@@QBEHXZ
_TEXT	SEGMENT
?GetID@CvCity@@QBEHXZ PROC				; CvCity::GetID, COMDAT
; _this$ = ecx

; 331  : 		return m_iID;

	mov	eax, DWORD PTR [ecx+120]

; 332  : 	}

	ret	0
?GetID@CvCity@@QBEHXZ ENDP				; CvCity::GetID
_TEXT	ENDS
PUBLIC	?getX@CvCity@@QBEHXZ				; CvCity::getX
; Function compile flags: /Ogtpy
;	COMDAT ?getX@CvCity@@QBEHXZ
_TEXT	SEGMENT
?getX@CvCity@@QBEHXZ PROC				; CvCity::getX, COMDAT
; _this$ = ecx

; 340  : 		return m_iX;

	mov	eax, DWORD PTR [ecx+96]

; 341  : 	}

	ret	0
?getX@CvCity@@QBEHXZ ENDP				; CvCity::getX
_TEXT	ENDS
PUBLIC	?getY@CvCity@@QBEHXZ				; CvCity::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvCity@@QBEHXZ
_TEXT	SEGMENT
?getY@CvCity@@QBEHXZ PROC				; CvCity::getY, COMDAT
; _this$ = ecx

; 345  : 		return m_iY;

	mov	eax, DWORD PTR [ecx+108]

; 346  : 	}

	ret	0
?getY@CvCity@@QBEHXZ ENDP				; CvCity::getY
_TEXT	ENDS
PUBLIC	?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ		; CvPlayer::GetID
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
;	COMDAT ?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ PROC		; CvPlayer::GetID, COMDAT
; _this$ = ecx

; 1168 : 		return m_eID;

	mov	eax, DWORD PTR [ecx+44]

; 1169 : 	}

	ret	0
?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ ENDP		; CvPlayer::GetID
_TEXT	ENDS
PUBLIC	?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ	; CvPlot::getFeatureType
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ
_TEXT	SEGMENT
?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ PROC	; CvPlot::getFeatureType, COMDAT
; _this$ = ecx

; 435  : #ifdef AUI_WARNING_FIXES
; 436  : 		int f = m_eFeatureType;
; 437  : #else
; 438  : 		char f = m_eFeatureType;
; 439  : #endif
; 440  : 		return (FeatureTypes)f;

	movsx	eax, BYTE PTR [ecx+432]

; 441  : 	}

	ret	0
?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ ENDP	; CvPlot::getFeatureType
_TEXT	ENDS
PUBLIC	??0CvCitySpecializationXMLEntry@@QAE@XZ		; CvCitySpecializationXMLEntry::CvCitySpecializationXMLEntry
EXTRN	??0CvBaseInfo@@QAE@XZ:PROC			; CvBaseInfo::CvBaseInfo
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
;	COMDAT ??0CvCitySpecializationXMLEntry@@QAE@XZ
_TEXT	SEGMENT
??0CvCitySpecializationXMLEntry@@QAE@XZ PROC		; CvCitySpecializationXMLEntry::CvCitySpecializationXMLEntry, COMDAT
; _this$ = ecx

; 37   : {

	push	esi
	mov	esi, ecx
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	xor	eax, eax
	mov	DWORD PTR [esi+260], eax
	mov	DWORD PTR [esi+268], eax
	mov	BYTE PTR [esi+272], al
	mov	BYTE PTR [esi+273], al
	mov	BYTE PTR [esi+274], al
	mov	BYTE PTR [esi+275], al
	mov	DWORD PTR [esi+276], eax
	mov	DWORD PTR [esi], OFFSET ??_7CvCitySpecializationXMLEntry@@6B@
	mov	DWORD PTR [esi+264], -1

; 38   : }

	mov	eax, esi
	pop	esi
	ret	0
??0CvCitySpecializationXMLEntry@@QAE@XZ ENDP		; CvCitySpecializationXMLEntry::CvCitySpecializationXMLEntry
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GCvCitySpecializationXMLEntry@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCvCitySpecializationXMLEntry@@UAEPAXI@Z PROC	; CvCitySpecializationXMLEntry::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CvCitySpecializationXMLEntry@@6B@
	mov	eax, DWORD PTR [esi+260]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	DWORD PTR [esi+260], 0
	mov	ecx, DWORD PTR [esi+276]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 8
	mov	ecx, esi
	mov	DWORD PTR [esi+276], 0
	call	??1CvBaseInfo@@QAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN11@scalar@4
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN11@scalar@4:
	mov	eax, esi
	pop	esi
	ret	4
??_GCvCitySpecializationXMLEntry@@UAEPAXI@Z ENDP	; CvCitySpecializationXMLEntry::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z ; CvCitySpecializationAI::PlotValueForSpecificYield
EXTRN	?isOwned@CvPlot@@QBE_NXZ:PROC			; CvPlot::isOwned
EXTRN	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z:PROC	; CvPlot::getYield
EXTRN	?plotCity@@YAPAVCvPlot@@HHH@Z:PROC		; plotCity
; Function compile flags: /Ogtpy
;	COMDAT ?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z
_TEXT	SEGMENT
_iMultiplier$ = -24					; size = 4
_iTotalPotentialYield$ = -20				; size = 4
_this$ = -16						; size = 4
_iFirstRingMultiplier$ = -12				; size = 4
_iSecondRingMultiplier$ = -8				; size = 4
_iThirdRingMultiplier$ = -4				; size = 4
_pPlot$ = 8						; size = 4
_eYield$ = 12						; size = 4
?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z PROC ; CvCitySpecializationAI::PlotValueForSpecificYield, COMDAT
; _this$ = ecx

; 1261 : {

	sub	esp, 24					; 00000018H

; 1262 : 	int iTotalPotentialYield = 0;
; 1263 : 	int iMultiplier = 0;
; 1264 : 	int iPotentialYield = 0;
; 1265 : 	int iFirstRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING();
; 1266 : 	int iSecondRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2308
	mov	DWORD PTR _this$[esp+24], ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2304
	push	ebp
	xor	ebp, ebp
	xor	eax, eax

; 1267 : 	int iThirdRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING();
; 1268 : 
; 1269 : 	// Evaluate potential from plots not currently being worked
; 1270 : 	for(int iI = 0; iI < GC.getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED(); iI++)

	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+2316, ebp
	mov	DWORD PTR _iFirstRingMultiplier$[esp+28], ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2312
	mov	DWORD PTR _iTotalPotentialYield$[esp+28], eax
	mov	DWORD PTR _iMultiplier$[esp+28], ebp
	mov	DWORD PTR _iSecondRingMultiplier$[esp+28], edx
	mov	DWORD PTR _iThirdRingMultiplier$[esp+28], ecx
	jle	$LN10@PlotValueF
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _pPlot$[esp+36]
$LL47@PlotValueF:

; 1271 : 	{
; 1272 : 		if(iI != CITY_HOME_PLOT)

	test	ebp, ebp
	je	$LN11@PlotValueF

; 1273 : 		{
; 1274 : 			CvPlot* pLoopPlot = plotCity(pPlot->getX(), pPlot->getY(), iI);

	movsx	eax, WORD PTR [edi+2]
	movsx	ecx, WORD PTR [edi]
	push	ebp
	push	eax
	push	ecx
	call	?plotCity@@YAPAVCvPlot@@HHH@Z		; plotCity
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 1275 : 			if(pLoopPlot != NULL)

	test	esi, esi
	je	$LN11@PlotValueF

; 1276 : 			{
; 1277 : 				iPotentialYield = pLoopPlot->getYield(eYield);

	mov	edx, DWORD PTR _eYield$[esp+36]
	push	edx
	mov	ecx, esi
	call	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z	; CvPlot::getYield

; 1278 : 
; 1279 : 				// If owned by someone else, not worth anything
; 1280 : 				if(pLoopPlot->isOwned() && pLoopPlot->getOwner() != m_pPlayer->GetID())

	mov	ecx, esi
	mov	ebx, eax
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	test	al, al
	je	SHORT $LN7@PlotValueF
	movsx	eax, BYTE PTR [esi+4]
	mov	ecx, DWORD PTR _this$[esp+40]
	mov	edx, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+44]
	je	SHORT $LN7@PlotValueF

; 1281 : 				{
; 1282 : 					iMultiplier = 0;

	mov	DWORD PTR _iMultiplier$[esp+40], 0

; 1283 : 				}
; 1284 : 				else

	jmp	SHORT $LN45@PlotValueF
$LN7@PlotValueF:

; 1285 : 				{
; 1286 : 					int iDistance = plotDistance(pLoopPlot->getX(), pLoopPlot->getY(), pPlot->getX(), pPlot->getY());

	movsx	eax, WORD PTR [edi+2]
	movsx	ecx, WORD PTR [edi]
	movsx	edx, WORD PTR [esi+2]
	push	eax
	movsx	eax, WORD PTR [esi]
	push	ecx
	push	edx
	push	eax
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H

; 1287 : 					if(iDistance == 1)

	cmp	eax, 1
	jne	SHORT $LN5@PlotValueF

; 1288 : 					{
; 1289 : 						iMultiplier = iFirstRingMultiplier;

	mov	ecx, DWORD PTR _iFirstRingMultiplier$[esp+40]
	mov	DWORD PTR _iMultiplier$[esp+40], ecx
	jmp	SHORT $LN45@PlotValueF
$LN5@PlotValueF:

; 1290 : 					}
; 1291 : 					else if(iDistance == 2)

	cmp	eax, 2
	jne	SHORT $LN3@PlotValueF

; 1292 : 					{
; 1293 : 						iMultiplier = iSecondRingMultiplier;

	mov	edx, DWORD PTR _iSecondRingMultiplier$[esp+40]
	mov	DWORD PTR _iMultiplier$[esp+40], edx
	jmp	SHORT $LN45@PlotValueF
$LN3@PlotValueF:

; 1294 : 					}
; 1295 : 					else if(iDistance == 3)

	cmp	eax, 3
	jne	SHORT $LN45@PlotValueF

; 1296 : 					{
; 1297 : 						iMultiplier = iThirdRingMultiplier;

	mov	eax, DWORD PTR _iThirdRingMultiplier$[esp+40]
	mov	DWORD PTR _iMultiplier$[esp+40], eax
$LN45@PlotValueF:

; 1298 : 					}
; 1299 : 				}
; 1300 : 				iTotalPotentialYield += iPotentialYield * iMultiplier;

	imul	ebx, DWORD PTR _iMultiplier$[esp+40]
	add	DWORD PTR _iTotalPotentialYield$[esp+40], ebx
$LN11@PlotValueF:
	inc	ebp
	cmp	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2316
	jl	$LL47@PlotValueF

; 1301 : 			}
; 1302 : 		}
; 1303 : 	}
; 1304 : 
; 1305 : 	return iTotalPotentialYield;

	mov	eax, DWORD PTR _iTotalPotentialYield$[esp+40]
	pop	edi
	pop	esi
	pop	ebx
$LN10@PlotValueF:
	pop	ebp

; 1306 : }

	add	esp, 24					; 00000018H
	ret	8
?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z ENDP ; CvCitySpecializationAI::PlotValueForSpecificYield
_TEXT	ENDS
PUBLIC	?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z ; CvCitySpecializationAI::PlotValueForScience
EXTRN	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ:PROC ; CvPlot::getImprovementType
EXTRN	?getResourceType@CvPlot@@QBE?AW4ResourceTypes@@W4TeamTypes@@@Z:PROC ; CvPlot::getResourceType
; Function compile flags: /Ogtpy
;	COMDAT ?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z
_TEXT	SEGMENT
_iI$226864 = -28					; size = 4
_iTotalClearTileWeight$ = -24				; size = 4
_iTotalFoodYield$ = -20					; size = 4
_this$ = -16						; size = 4
_iFirstRingMultiplier$ = -12				; size = 4
_iSecondRingMultiplier$ = -8				; size = 4
_iThirdRingMultiplier$ = -4				; size = 4
_bIsClear$226868 = 8					; size = 1
_pPlot$ = 8						; size = 4
?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z PROC ; CvCitySpecializationAI::PlotValueForScience, COMDAT
; _this$ = ecx

; 1310 : {

	sub	esp, 28					; 0000001cH

; 1311 : 	// Roughly half of weight comes from food yield
; 1312 : 	// The other half will be are there open tiles we can easily build schools on
; 1313 : 	int iTotalFoodYield = 0;
; 1314 : 	int iTotalClearTileWeight = 0;
; 1315 : 	int iMultiplier = 0;
; 1316 : 	int iPotentialYield = 0;
; 1317 : 	int iFirstRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2304
	mov	DWORD PTR _iFirstRingMultiplier$[esp+28], edx

; 1318 : 	int iSecondRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2308
	push	ebp
	xor	eax, eax
	push	edi
	mov	DWORD PTR _this$[esp+36], ecx
	xor	ecx, ecx
	mov	DWORD PTR _iSecondRingMultiplier$[esp+36], edx

; 1319 : 	int iThirdRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2312

; 1320 : 
; 1321 : 	// Evaluate potential from plots not currently being worked
; 1322 : 	for(int iI = 0; iI < GC.getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED(); iI++)

	xor	edi, edi
	xor	ebp, ebp
	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+2316, eax
	mov	DWORD PTR _iTotalFoodYield$[esp+36], ecx
	mov	DWORD PTR _iTotalClearTileWeight$[esp+36], eax
	mov	DWORD PTR _iThirdRingMultiplier$[esp+36], edx
	mov	DWORD PTR _iI$226864[esp+36], edi
	jle	$LN54@PlotValueF@2
	push	ebx
	mov	ebx, DWORD PTR _pPlot$[esp+36]
	push	esi
	npad	3
$LL59@PlotValueF@2:

; 1323 : 	{
; 1324 : 		bool bIsClear = false;

	mov	BYTE PTR _bIsClear$226868[esp+40], 0

; 1325 : 
; 1326 : 		if(iI != CITY_HOME_PLOT)

	test	edi, edi
	je	$LN16@PlotValueF@2

; 1327 : 		{
; 1328 : 			CvPlot* pLoopPlot = plotCity(pPlot->getX(), pPlot->getY(), iI);

	movsx	eax, WORD PTR [ebx+2]
	movsx	ecx, WORD PTR [ebx]
	push	edi
	push	eax
	push	ecx
	call	?plotCity@@YAPAVCvPlot@@HHH@Z		; plotCity
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 1329 : 			if(pLoopPlot != NULL)

	test	esi, esi
	je	$LN16@PlotValueF@2

; 1330 : 			{
; 1331 : 				if(pLoopPlot->getResourceType() == NO_RESOURCE)

	push	-1
	mov	ecx, esi
	call	?getResourceType@CvPlot@@QBE?AW4ResourceTypes@@W4TeamTypes@@@Z ; CvPlot::getResourceType
	cmp	eax, -1
	jne	SHORT $LN9@PlotValueF@2

; 1332 : 				{
; 1333 : 					if(pLoopPlot->getFeatureType() == NO_FEATURE)

	cmp	BYTE PTR [esi+432], al
	jne	SHORT $LN9@PlotValueF@2

; 1334 : 					{
; 1335 : 						if(!pLoopPlot->isHills())

	cmp	BYTE PTR [esi+5], 1
	je	SHORT $LN9@PlotValueF@2

; 1336 : 						{
; 1337 : 							if(pLoopPlot->getImprovementType() == NO_IMPROVEMENT)

	mov	ecx, esi
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, -1
	jne	SHORT $LN9@PlotValueF@2

; 1338 : 							{
; 1339 : 								bIsClear = true;

	mov	BYTE PTR _bIsClear$226868[esp+40], 1
$LN9@PlotValueF@2:

; 1340 : 							}
; 1341 : 						}
; 1342 : 					}
; 1343 : 				}
; 1344 : 
; 1345 : 				iPotentialYield = pLoopPlot->getYield(YIELD_FOOD) + pLoopPlot->getYield(YIELD_SCIENCE);

	push	3
	mov	ecx, esi
	call	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z	; CvPlot::getYield
	push	0
	mov	ecx, esi
	mov	edi, eax
	call	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z	; CvPlot::getYield

; 1346 : 
; 1347 : 				// If owned by someone else, not worth anything
; 1348 : 				if(pLoopPlot->isOwned() && pLoopPlot->getOwner() != m_pPlayer->GetID())

	mov	ecx, esi
	add	edi, eax
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	test	al, al
	je	SHORT $LN8@PlotValueF@2
	movsx	eax, BYTE PTR [esi+4]
	mov	ecx, DWORD PTR _this$[esp+44]
	mov	edx, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+44]
	je	SHORT $LN8@PlotValueF@2

; 1349 : 				{
; 1350 : 					iMultiplier = 0;

	xor	ebp, ebp

; 1351 : 				}
; 1352 : 				else

	jmp	SHORT $LN2@PlotValueF@2
$LN8@PlotValueF@2:

; 1353 : 				{
; 1354 : 					int iDistance = plotDistance(pLoopPlot->getX(), pLoopPlot->getY(), pPlot->getX(), pPlot->getY());

	movsx	eax, WORD PTR [ebx+2]
	movsx	ecx, WORD PTR [ebx]
	movsx	edx, WORD PTR [esi+2]
	push	eax
	movsx	eax, WORD PTR [esi]
	push	ecx
	push	edx
	push	eax
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H

; 1355 : 					if(iDistance == 1)

	cmp	eax, 1
	jne	SHORT $LN6@PlotValueF@2

; 1356 : 					{
; 1357 : 						iMultiplier = iFirstRingMultiplier;

	mov	ebp, DWORD PTR _iFirstRingMultiplier$[esp+44]
	jmp	SHORT $LN2@PlotValueF@2
$LN6@PlotValueF@2:

; 1358 : 					}
; 1359 : 					else if(iDistance == 2)

	cmp	eax, 2
	jne	SHORT $LN4@PlotValueF@2

; 1360 : 					{
; 1361 : 						iMultiplier = iSecondRingMultiplier;

	mov	ebp, DWORD PTR _iSecondRingMultiplier$[esp+44]
	jmp	SHORT $LN2@PlotValueF@2
$LN4@PlotValueF@2:

; 1362 : 					}
; 1363 : 					else if(iDistance == 3)

	cmp	eax, 3
	jne	SHORT $LN2@PlotValueF@2

; 1364 : 					{
; 1365 : 						iMultiplier = iThirdRingMultiplier;

	mov	ebp, DWORD PTR _iThirdRingMultiplier$[esp+44]
$LN2@PlotValueF@2:

; 1366 : 					}
; 1367 : 				}
; 1368 : 
; 1369 : 				iTotalFoodYield += iPotentialYield * iMultiplier;

	imul	edi, ebp
	add	DWORD PTR _iTotalFoodYield$[esp+44], edi

; 1370 : 				if(bIsClear)

	cmp	BYTE PTR _bIsClear$226868[esp+40], 0

; 1371 : 				{
; 1372 : 					iTotalClearTileWeight += iMultiplier;

	mov	edi, DWORD PTR _iI$226864[esp+44]
	je	SHORT $LN16@PlotValueF@2
	add	DWORD PTR _iTotalClearTileWeight$[esp+44], ebp
$LN16@PlotValueF@2:

; 1320 : 
; 1321 : 	// Evaluate potential from plots not currently being worked
; 1322 : 	for(int iI = 0; iI < GC.getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED(); iI++)

	inc	edi
	cmp	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2316
	mov	DWORD PTR _iI$226864[esp+44], edi
	jl	$LL59@PlotValueF@2

; 1373 : 				}
; 1374 : 			}
; 1375 : 		}
; 1376 : 	}
; 1377 : 
; 1378 : 	return iTotalFoodYield + iTotalClearTileWeight;

	mov	ecx, DWORD PTR _iTotalClearTileWeight$[esp+44]
	mov	edx, DWORD PTR _iTotalFoodYield$[esp+44]
	pop	esi
	pop	ebx
	pop	edi
	lea	eax, DWORD PTR [ecx+edx]
	pop	ebp

; 1379 : }

	add	esp, 28					; 0000001cH
	ret	4
$LN54@PlotValueF@2:
	pop	edi

; 1373 : 				}
; 1374 : 			}
; 1375 : 		}
; 1376 : 	}
; 1377 : 
; 1378 : 	return iTotalFoodYield + iTotalClearTileWeight;

	add	eax, ecx
	pop	ebp

; 1379 : }

	add	esp, 28					; 0000001cH
	ret	4
?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z ENDP ; CvCitySpecializationAI::PlotValueForScience
_TEXT	ENDS
PUBLIC	?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::LogSpecializationWeights
EXTRN	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z:PROC ; CvGlobals::getYieldInfo
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$6
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$9
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$12
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_strYieldString$226931 = -272				; size = 28
_elem$232555 = -244					; size = 8
_elem$232533 = -244					; size = 8
_strBaseString$226930 = -236				; size = 28
_strPlayerName$226929 = -208				; size = 28
_strWeightString$226932 = -180				; size = 28
_strOutBuf$226933 = -152				; size = 28
$T232438 = -124						; size = 28
$T232437 = -124						; size = 28
$T232434 = -124						; size = 28
$T232440 = -96						; size = 28
$T232435 = -96						; size = 28
$T232439 = -68						; size = 28
$T232436 = -68						; size = 28
$T232433 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ PROC ; CvCitySpecializationAI::LogSpecializationWeights, COMDAT
; _this$ = ecx

; 1477 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 260				; 00000104H
	push	ebx
	mov	ebx, ecx

; 1478 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN10@LogSpecial
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN10@LogSpecial

; 1479 : 	{
; 1480 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226929[esp+276]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1481 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226930[esp+276]
	mov	DWORD PTR __$EHRec$[esp+284], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1482 : 		CvString strYieldString;

	lea	ecx, DWORD PTR _strYieldString$226931[esp+276]
	mov	BYTE PTR __$EHRec$[esp+284], 1
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1483 : 		CvString strWeightString;

	lea	ecx, DWORD PTR _strWeightString$226932[esp+276]
	mov	BYTE PTR __$EHRec$[esp+284], 2
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1484 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226933[esp+276]
	mov	BYTE PTR __$EHRec$[esp+284], 3
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1485 : 		FILogFile* pLog;
; 1486 : 
; 1487 : 		// Find the name of this civ
; 1488 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR [ebx]
	mov	BYTE PTR __$EHRec$[esp+284], 4
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	lea	ecx, DWORD PTR _strPlayerName$226929[esp+276]
	test	eax, eax
	je	SHORT $LN44@LogSpecial
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN43@LogSpecial
$LN44@LogSpecial:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN43@LogSpecial:
	push	ebp
	push	esi
	push	edi

; 1489 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	esi, eax
	lea	eax, DWORD PTR _strPlayerName$226929[esp+288]
	push	eax
	lea	ecx, DWORD PTR $T232433[esp+292]
	push	ecx
	mov	ecx, ebx
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+296], 5
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR $T232433[esp+288]
	mov	edi, eax
	mov	BYTE PTR __$EHRec$[esp+296], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1490 : 
; 1491 : 		// Get the leading info for this line
; 1492 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226930[esp+292]
	push	OFFSET $SG226936
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1493 : 		strBaseString += strPlayerName + ", Empire-wide specialization weight, ";

	push	OFFSET $SG226938
	lea	edx, DWORD PTR _strPlayerName$226929[esp+304]
	push	edx
	lea	eax, DWORD PTR $T232434[esp+308]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226930[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 6
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T232434[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1494 : 
; 1495 : 		for(int iI = 0; iI < NUM_SPECIALIZATION_YIELDS; iI++)

	mov	ebp, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	xor	esi, esi
$LL9@LogSpecial:

; 1496 : 		{
; 1497 : 			if(iI > YIELD_SCIENCE)

	cmp	esi, 3
	jle	SHORT $LN6@LogSpecial

; 1498 : 			{
; 1499 : 				strYieldString = "General Economy";

	push	OFFSET $SG226944
	lea	ecx, DWORD PTR _strYieldString$226931[esp+292]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 1500 : 			}
; 1501 : 			else

	jmp	SHORT $LN64@LogSpecial
$LN6@LogSpecial:

; 1494 : 
; 1495 : 		for(int iI = 0; iI < NUM_SPECIALIZATION_YIELDS; iI++)

	mov	ecx, DWORD PTR [ebx+44]

; 1502 : 			{
; 1503 : 				CvYieldInfo* pYieldInfo = GC.getYieldInfo((YieldTypes)m_YieldWeights.GetElement(iI));

	mov	edx, DWORD PTR [ecx+esi*8]
	lea	eax, DWORD PTR [ecx+esi*8]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z ; CvGlobals::getYieldInfo

; 1504 : 				if(pYieldInfo != NULL)

	test	eax, eax
	je	SHORT $LN64@LogSpecial

; 1505 : 				{
; 1506 : 					strYieldString = pYieldInfo->GetDescription();

	lea	ecx, DWORD PTR [eax+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	lea	ecx, DWORD PTR _strYieldString$226931[esp+288]
	test	eax, eax
	je	SHORT $LN65@LogSpecial
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN64@LogSpecial
$LN65@LogSpecial:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN64@LogSpecial:

; 1507 : 				}
; 1508 : 			}
; 1509 : 			strWeightString.Format("%d", m_YieldWeights.GetWeight(iI));

	mov	eax, DWORD PTR [ebx+44]
	mov	ecx, DWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR [eax+esi*8+4]
	push	eax
	lea	edx, DWORD PTR _strWeightString$226932[esp+292]
	push	OFFSET $SG226949
	push	edx
	mov	DWORD PTR _elem$232533[esp+300], ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1510 : 			strOutBuf = strBaseString + strYieldString + ", " + strWeightString;

	lea	eax, DWORD PTR _strYieldString$226931[esp+300]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226930[esp+304]
	push	ecx
	lea	edx, DWORD PTR $T232435[esp+308]
	push	edx
	call	ebp
	push	OFFSET $SG226953
	push	eax
	lea	eax, DWORD PTR $T232436[esp+320]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+332], 7
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	lea	ecx, DWORD PTR _strWeightString$226932[esp+324]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T232437[esp+332]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+344], 8
	call	ebp
	add	esp, 48					; 00000030H
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+296], 9
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226933[esp+292]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T232437[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 8
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232436[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 7
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232435[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1511 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226933[esp+288]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edi
	call	edx
	inc	esi
	add	esp, 8
	cmp	esi, 5
	jl	$LL9@LogSpecial

; 1512 : 		}
; 1513 : 
; 1514 : 		for(int iI = 0; iI < NUM_PRODUCTION_SPECIALIZATION_SUBTYPES; iI++)

	xor	esi, esi
$LL3@LogSpecial:

; 1515 : 		{
; 1516 : 			strYieldString.Format("Production Specialization: %d", iI);

	push	esi
	lea	eax, DWORD PTR _strYieldString$226931[esp+292]
	push	OFFSET $SG226958
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1517 : 			strWeightString.Format("%d", m_ProductionSubtypeWeights.GetWeight(iI));

	mov	eax, DWORD PTR [ebx+120]
	mov	ecx, DWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR [eax+esi*8+4]
	push	eax
	lea	edx, DWORD PTR _strWeightString$226932[esp+304]
	push	OFFSET $SG226959
	push	edx
	mov	DWORD PTR _elem$232555[esp+312], ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1518 : 			strOutBuf = strBaseString + strYieldString + ", " + strWeightString;

	lea	eax, DWORD PTR _strYieldString$226931[esp+312]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226930[esp+316]
	push	ecx
	lea	edx, DWORD PTR $T232438[esp+320]
	push	edx
	call	ebp
	push	OFFSET $SG226963
	push	eax
	lea	eax, DWORD PTR $T232439[esp+332]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+344], 10		; 0000000aH
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	lea	ecx, DWORD PTR _strWeightString$226932[esp+336]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T232440[esp+344]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+356], 11		; 0000000bH
	call	ebp
	add	esp, 60					; 0000003cH
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+296], 12		; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226933[esp+292]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T232440[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 11		; 0000000bH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232439[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 10		; 0000000aH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232438[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1519 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226933[esp+288]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edi
	call	edx
	inc	esi
	add	esp, 8
	cmp	esi, 5
	jl	$LL3@LogSpecial

; 1520 : 		}
; 1521 : 	}

	lea	ecx, DWORD PTR _strOutBuf$226933[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strWeightString$226932[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strYieldString$226931[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBaseString$226930[esp+288]
	mov	BYTE PTR __$EHRec$[esp+296], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strPlayerName$226929[esp+288]
	mov	DWORD PTR __$EHRec$[esp+296], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebp
$LN10@LogSpecial:

; 1522 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+276]
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 272				; 00000110H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$0:
	lea	ecx, DWORD PTR _strPlayerName$226929[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$1:
	lea	ecx, DWORD PTR _strBaseString$226930[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$2:
	lea	ecx, DWORD PTR _strYieldString$226931[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$3:
	lea	ecx, DWORD PTR _strWeightString$226932[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$4:
	lea	ecx, DWORD PTR _strOutBuf$226933[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$5:
	lea	ecx, DWORD PTR $T232433[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$6:
	lea	ecx, DWORD PTR $T232434[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$7:
	lea	ecx, DWORD PTR $T232435[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$8:
	lea	ecx, DWORD PTR $T232436[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$9:
	lea	ecx, DWORD PTR $T232437[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$10:
	lea	ecx, DWORD PTR $T232438[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$11:
	lea	ecx, DWORD PTR $T232439[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$12:
	lea	ecx, DWORD PTR $T232440[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ ENDP ; CvCitySpecializationAI::LogSpecializationWeights
PUBLIC	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$10
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z
_TEXT	SEGMENT
_strPlayerName$226973 = -264				; size = 28
$T232602 = -236						; size = 28
$T232599 = -236						; size = 28
$T232598 = -236						; size = 28
_strBaseString$226972 = -208				; size = 28
_strOutBuf$226971 = -180				; size = 28
_strCityName$226974 = -152				; size = 28
_strSpecialization$226975 = -124			; size = 28
$T232601 = -96						; size = 28
$T232597 = -68						; size = 28
$T232600 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
_eType$ = 12						; size = 4
_bWonderCity$ = 16					; size = 1
?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z PROC ; CvCitySpecializationAI::LogSpecializationAssignment, COMDAT
; _this$ = ecx

; 1526 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 252				; 000000fcH
	push	edi
	mov	edi, ecx

; 1527 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN2@LogSpecial@2
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN2@LogSpecial@2
	push	ebx
	push	ebp
	push	esi

; 1528 : 	{
; 1529 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226971[esp+280]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1530 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226972[esp+280]
	mov	DWORD PTR __$EHRec$[esp+288], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1531 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226973[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 1
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1532 : 		CvString strCityName;

	lea	ecx, DWORD PTR _strCityName$226974[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 2
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1533 : 		CvString strSpecialization;

	lea	ecx, DWORD PTR _strSpecialization$226975[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 3
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1534 : 		FILogFile* pLog;
; 1535 : 
; 1536 : 		// Find the name of this civ
; 1537 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR [edi]
	mov	bl, 4
	mov	BYTE PTR __$EHRec$[esp+288], bl
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	lea	ecx, DWORD PTR _strPlayerName$226973[esp+280]
	test	eax, eax
	je	SHORT $LN34@LogSpecial@2
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN33@LogSpecial@2
$LN34@LogSpecial@2:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN33@LogSpecial@2:

; 1538 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	esi, eax
	lea	eax, DWORD PTR _strPlayerName$226973[esp+280]
	push	eax
	lea	ecx, DWORD PTR $T232597[esp+284]
	push	ecx
	mov	ecx, edi
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+288], 5
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR $T232597[esp+280]
	mov	ebp, eax
	mov	BYTE PTR __$EHRec$[esp+288], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1539 : 
; 1540 : 		// Get the leading info for this line
; 1541 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226972[esp+284]
	push	OFFSET $SG226978
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1542 : 		strBaseString += strPlayerName + ", ";

	mov	esi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	push	OFFSET $SG226980
	lea	edx, DWORD PTR _strPlayerName$226973[esp+296]
	push	edx
	lea	eax, DWORD PTR $T232598[esp+300]
	push	eax
	call	esi
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226972[esp+284]
	mov	BYTE PTR __$EHRec$[esp+292], 6
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T232598[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1543 : 
; 1544 : 		strCityName = pCity->getName();

	lea	ecx, DWORD PTR $T232599[esp+280]
	push	ecx
	mov	ecx, DWORD PTR _pCity$[esp+280]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	push	eax
	lea	ecx, DWORD PTR _strCityName$226974[esp+284]
	mov	BYTE PTR __$EHRec$[esp+292], 7
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T232599[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1545 : 		strSpecialization.Format("New Specialization Type: %d", (int)eType);

	mov	edx, DWORD PTR _eType$[esp+276]
	push	edx
	lea	eax, DWORD PTR _strSpecialization$226975[esp+284]
	push	OFFSET $SG226983
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1546 : 
; 1547 : 		strOutBuf = strBaseString + strCityName + ", " + strSpecialization;

	mov	edi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	lea	ecx, DWORD PTR _strCityName$226974[esp+292]
	push	ecx
	lea	edx, DWORD PTR _strBaseString$226972[esp+296]
	push	edx
	lea	eax, DWORD PTR $T232600[esp+300]
	push	eax
	call	edi
	push	OFFSET $SG226987
	push	eax
	lea	ecx, DWORD PTR $T232601[esp+312]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+324], 8
	call	esi
	mov	BYTE PTR __$EHRec$[esp+324], 9
	lea	edx, DWORD PTR _strSpecialization$226975[esp+316]
	push	edx
	push	eax
	lea	eax, DWORD PTR $T232602[esp+324]
	push	eax
	call	edi
	add	esp, 48					; 00000030H
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+288], 10		; 0000000aH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226971[esp+284]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T232602[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 9
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232601[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 8
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232600[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1548 : 		if(bWonderCity)

	cmp	BYTE PTR _bWonderCity$[esp+276], 0
	je	SHORT $LN1@LogSpecial@2

; 1549 : 		{
; 1550 : 			strOutBuf += ", WonderCity";

	push	OFFSET $SG226989
	lea	ecx, DWORD PTR _strOutBuf$226971[esp+284]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@LogSpecial@2:

; 1551 : 		}
; 1552 : 
; 1553 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226971[esp+280]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	ebp
	call	edx
	add	esp, 8

; 1554 : 	}

	lea	ecx, DWORD PTR _strSpecialization$226975[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strCityName$226974[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strPlayerName$226973[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBaseString$226972[esp+280]
	mov	BYTE PTR __$EHRec$[esp+288], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$226971[esp+280]
	mov	DWORD PTR __$EHRec$[esp+288], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	esi
	pop	ebp
	pop	ebx
$LN2@LogSpecial@2:

; 1555 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+268]
	pop	edi
	mov	DWORD PTR fs:0, ecx
	add	esp, 264				; 00000108H
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$226971[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$1:
	lea	ecx, DWORD PTR _strBaseString$226972[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$2:
	lea	ecx, DWORD PTR _strPlayerName$226973[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$3:
	lea	ecx, DWORD PTR _strCityName$226974[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$4:
	lea	ecx, DWORD PTR _strSpecialization$226975[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$5:
	lea	ecx, DWORD PTR $T232597[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$6:
	lea	ecx, DWORD PTR $T232598[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$7:
	lea	ecx, DWORD PTR $T232599[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$8:
	lea	ecx, DWORD PTR $T232600[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$9:
	lea	ecx, DWORD PTR $T232601[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$10:
	lea	ecx, DWORD PTR $T232602[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ENDP ; CvCitySpecializationAI::LogSpecializationAssignment
PUBLIC	?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z ; CvCitySpecializationAI::LogSpecializationUpdate
EXTRN	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z:PROC ; CvGlobals::getAIGrandStrategyInfo
EXTRN	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ:PROC ; CvGrandStrategyAI::GetActiveGrandStrategy
EXTRN	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ:PROC ; CvPlayer::GetGrandStrategyAI
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$6
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z
_TEXT	SEGMENT
_strTypeString$226998 = -180				; size = 28
_strPlayerName$226997 = -152				; size = 28
_strBaseString$226996 = -124				; size = 28
$T232704 = -96						; size = 28
$T232703 = -96						; size = 28
_strOutBuf$226995 = -68					; size = 28
$T232702 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_eUpdate$ = 8						; size = 4
?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z PROC ; CvCitySpecializationAI::LogSpecializationUpdate, COMDAT
; _this$ = ecx

; 1559 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 168				; 000000a8H
	push	edi
	mov	edi, ecx

; 1560 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN13@LogSpecial@3
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN13@LogSpecial@3
	push	ebx
	push	esi

; 1561 : 	{
; 1562 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226995[esp+192]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1563 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226996[esp+192]
	mov	DWORD PTR __$EHRec$[esp+200], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1564 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226997[esp+192]
	mov	BYTE PTR __$EHRec$[esp+200], 1
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1565 : 		CvString strTypeString;

	lea	ecx, DWORD PTR _strTypeString$226998[esp+192]
	mov	BYTE PTR __$EHRec$[esp+200], 2
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1566 : 		FILogFile* pLog;
; 1567 : 
; 1568 : 		// Find the name of this civ
; 1569 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR [edi]
	mov	bl, 3
	mov	BYTE PTR __$EHRec$[esp+200], bl
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	lea	ecx, DWORD PTR _strPlayerName$226997[esp+192]
	test	eax, eax
	je	SHORT $LN38@LogSpecial@3
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN37@LogSpecial@3
$LN38@LogSpecial@3:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN37@LogSpecial@3:

; 1570 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	esi, eax
	lea	eax, DWORD PTR _strPlayerName$226997[esp+192]
	push	eax
	lea	ecx, DWORD PTR $T232702[esp+196]
	push	ecx
	mov	ecx, edi
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+200], 4
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR $T232702[esp+192]
	mov	esi, eax
	mov	BYTE PTR __$EHRec$[esp+200], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1571 : 
; 1572 : 		// Get the leading info for this line
; 1573 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226996[esp+196]
	push	OFFSET $SG227001
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1574 : 		strBaseString += strPlayerName + ", ";

	push	OFFSET $SG227003
	lea	edx, DWORD PTR _strPlayerName$226997[esp+208]
	push	edx
	lea	eax, DWORD PTR $T232703[esp+212]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226996[esp+196]
	mov	BYTE PTR __$EHRec$[esp+204], 5
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T232703[esp+192]
	mov	BYTE PTR __$EHRec$[esp+200], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1575 : 
; 1576 : 		switch(eUpdate)

	mov	eax, DWORD PTR _eUpdate$[esp+188]
	cmp	eax, 8
	ja	$LN11@LogSpecial@3
	jmp	DWORD PTR $LN68@LogSpecial@3[eax*4]
$LN10@LogSpecial@3:

; 1577 : 		{
; 1578 : 		case SPECIALIZATION_UPDATE_NEW_GRAND_STRATEGY:
; 1579 : 		{
; 1580 : 			CvAIGrandStrategyXMLEntry* pGrandStrategyInfo = GC.getAIGrandStrategyInfo(m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy());

	mov	ecx, DWORD PTR [edi]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo

; 1581 : 			if(NULL != pGrandStrategyInfo)

	test	eax, eax
	je	SHORT $LN11@LogSpecial@3

; 1582 : 			{
; 1583 : 				strTypeString.Format("Update: New grand strategy: %s", pGrandStrategyInfo->GetType());

	lea	ecx, DWORD PTR [eax+176]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strTypeString$226998[esp+196]
	push	OFFSET $SG227011
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1584 : 			}
; 1585 : 		}
; 1586 : 		break;

	jmp	SHORT $LN11@LogSpecial@3
$LN8@LogSpecial@3:

; 1587 : 		case SPECIALIZATION_UPDATE_NOW_AT_WAR:
; 1588 : 			strTypeString = "Update: New war";

	push	OFFSET $SG227013

; 1589 : 			break;

	jmp	SHORT $LN67@LogSpecial@3
$LN7@LogSpecial@3:

; 1590 : 		case SPECIALIZATION_UPDATE_CITY_FOUNDED:
; 1591 : 			strTypeString = "Update: City founded";

	push	OFFSET $SG227015

; 1592 : 			break;

	jmp	SHORT $LN67@LogSpecial@3
$LN6@LogSpecial@3:

; 1593 : 		case SPECIALIZATION_UPDATE_MY_CITY_CAPTURED:
; 1594 : 			strTypeString = "Update: My city captured";

	push	OFFSET $SG227017

; 1595 : 			break;

	jmp	SHORT $LN67@LogSpecial@3
$LN5@LogSpecial@3:

; 1596 : 		case SPECIALIZATION_UPDATE_ENEMY_CITY_CAPTURED:
; 1597 : 			strTypeString = "Update: Enemy city captured";

	push	OFFSET $SG227019

; 1598 : 			break;

	jmp	SHORT $LN67@LogSpecial@3
$LN4@LogSpecial@3:

; 1599 : 		case SPECIALIZATION_UPDATE_STRATEGY_NOW_ON:
; 1600 : 			strTypeString = "Update: War strategy turned on";

	push	OFFSET $SG227021

; 1601 : 			break;

	jmp	SHORT $LN67@LogSpecial@3
$LN3@LogSpecial@3:

; 1602 : 		case SPECIALIZATION_UPDATE_STRATEGY_NOW_OFF:
; 1603 : 			strTypeString = "Update: War strategy turned off";

	push	OFFSET $SG227023

; 1604 : 			break;

	jmp	SHORT $LN67@LogSpecial@3
$LN2@LogSpecial@3:

; 1605 : 		case SPECIALIZATION_UPDATE_RESEARCH_COMPLETE:
; 1606 : 			strTypeString = "Update: Tech research complete";

	push	OFFSET $SG227025

; 1607 : 			break;

	jmp	SHORT $LN67@LogSpecial@3
$LN1@LogSpecial@3:

; 1608 : 		case SPECIALIZATION_UPDATE_WONDER_BUILT_BY_RIVAL:
; 1609 : 			strTypeString = "Update: wonder built by rival, WONDER";

	push	OFFSET $SG227027
$LN67@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226998[esp+196]
	call	??4CvString@@QAEAAV0@PBD@Z		; CvString::operator=
$LN11@LogSpecial@3:

; 1610 : 		}
; 1611 : 		strOutBuf = strBaseString + strTypeString;

	lea	edx, DWORD PTR _strTypeString$226998[esp+192]
	push	edx
	lea	eax, DWORD PTR _strBaseString$226996[esp+196]
	push	eax
	lea	ecx, DWORD PTR $T232704[esp+200]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+200], 6
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226995[esp+196]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T232704[esp+192]
	mov	BYTE PTR __$EHRec$[esp+200], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1612 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226995[esp+192]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	esi
	call	eax
	add	esp, 8

; 1613 : 	}

	lea	ecx, DWORD PTR _strTypeString$226998[esp+192]
	mov	BYTE PTR __$EHRec$[esp+200], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strPlayerName$226997[esp+192]
	mov	BYTE PTR __$EHRec$[esp+200], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBaseString$226996[esp+192]
	mov	BYTE PTR __$EHRec$[esp+200], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$226995[esp+192]
	mov	DWORD PTR __$EHRec$[esp+200], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	esi
	pop	ebx
$LN13@LogSpecial@3:

; 1614 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+184]
	pop	edi
	mov	DWORD PTR fs:0, ecx
	add	esp, 180				; 000000b4H
	ret	4
	npad	3
$LN68@LogSpecial@3:
	DD	$LN10@LogSpecial@3
	DD	$LN8@LogSpecial@3
	DD	$LN7@LogSpecial@3
	DD	$LN6@LogSpecial@3
	DD	$LN5@LogSpecial@3
	DD	$LN4@LogSpecial@3
	DD	$LN3@LogSpecial@3
	DD	$LN2@LogSpecial@3
	DD	$LN1@LogSpecial@3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$226995[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$226996[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$2:
	lea	ecx, DWORD PTR _strPlayerName$226997[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$3:
	lea	ecx, DWORD PTR _strTypeString$226998[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$4:
	lea	ecx, DWORD PTR $T232702[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$5:
	lea	ecx, DWORD PTR $T232703[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$6:
	lea	ecx, DWORD PTR $T232704[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z ENDP ; CvCitySpecializationAI::LogSpecializationUpdate
PUBLIC	?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ; CvCitySpecializationAI::LogNextSpecialization
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$7
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
_strPlayerName$227036 = -208				; size = 28
_strBaseString$227035 = -180				; size = 28
_strOutBuf$227034 = -152				; size = 28
$T232791 = -124						; size = 28
$T232790 = -124						; size = 28
_strTypeString$227037 = -96				; size = 28
$T232789 = -68						; size = 28
_strYieldString$227038 = -40				; size = 28
__$EHRec$ = -12						; size = 12
_eType$ = 8						; size = 4
?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z PROC ; CvCitySpecializationAI::LogNextSpecialization, COMDAT
; _this$ = ecx

; 1618 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 196				; 000000c4H
	push	edi
	mov	edi, ecx

; 1619 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN1@LogNextSpe
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN1@LogNextSpe
	push	ebx
	push	esi

; 1620 : 	{
; 1621 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$227034[esp+220]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1622 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$227035[esp+220]
	mov	DWORD PTR __$EHRec$[esp+228], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1623 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$227036[esp+220]
	mov	BYTE PTR __$EHRec$[esp+228], 1
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1624 : 		CvString strTypeString;

	lea	ecx, DWORD PTR _strTypeString$227037[esp+220]
	mov	BYTE PTR __$EHRec$[esp+228], 2
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1625 : 		CvString strYieldString;

	lea	ecx, DWORD PTR _strYieldString$227038[esp+220]
	mov	BYTE PTR __$EHRec$[esp+228], 3
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1626 : 		FILogFile* pLog;
; 1627 : 
; 1628 : 		// Find the name of this civ
; 1629 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR [edi]
	mov	bl, 4
	mov	BYTE PTR __$EHRec$[esp+228], bl
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	lea	ecx, DWORD PTR _strPlayerName$227036[esp+220]
	test	eax, eax
	je	SHORT $LN30@LogNextSpe
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN29@LogNextSpe
$LN30@LogNextSpe:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN29@LogNextSpe:

; 1630 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	esi, eax
	lea	eax, DWORD PTR _strPlayerName$227036[esp+220]
	push	eax
	lea	ecx, DWORD PTR $T232789[esp+224]
	push	ecx
	mov	ecx, edi
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+228], 5
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR $T232789[esp+220]
	mov	esi, eax
	mov	BYTE PTR __$EHRec$[esp+228], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1631 : 
; 1632 : 		// Get the leading info for this line
; 1633 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$227035[esp+224]
	push	OFFSET $SG227041
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1634 : 		strBaseString += strPlayerName + ", ";

	push	OFFSET $SG227043
	lea	edx, DWORD PTR _strPlayerName$227036[esp+236]
	push	edx
	lea	eax, DWORD PTR $T232790[esp+240]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$227035[esp+224]
	mov	BYTE PTR __$EHRec$[esp+232], 6
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T232790[esp+220]
	mov	BYTE PTR __$EHRec$[esp+228], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1635 : 
; 1636 : 		strTypeString.Format("Next Specialization: %d", (int)eType);

	mov	ecx, DWORD PTR _eType$[esp+216]
	push	ecx
	lea	edx, DWORD PTR _strTypeString$227037[esp+224]
	push	OFFSET $SG227045
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1637 : 
; 1638 : 		strOutBuf = strBaseString + strTypeString;

	lea	eax, DWORD PTR _strTypeString$227037[esp+232]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$227035[esp+236]
	push	ecx
	lea	edx, DWORD PTR $T232791[esp+240]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 24					; 00000018H
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+228], 7
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$227034[esp+224]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T232791[esp+220]
	mov	BYTE PTR __$EHRec$[esp+228], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1639 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$227034[esp+220]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	esi
	call	edx
	add	esp, 8

; 1640 : 	}

	lea	ecx, DWORD PTR _strYieldString$227038[esp+220]
	mov	BYTE PTR __$EHRec$[esp+228], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[esp+228], 2
	lea	ecx, DWORD PTR _strTypeString$227037[esp+220]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strPlayerName$227036[esp+220]
	mov	BYTE PTR __$EHRec$[esp+228], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBaseString$227035[esp+220]
	mov	BYTE PTR __$EHRec$[esp+228], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$227034[esp+220]
	mov	DWORD PTR __$EHRec$[esp+228], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	esi
	pop	ebx
$LN1@LogNextSpe:

; 1641 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+212]
	pop	edi
	mov	DWORD PTR fs:0, ecx
	add	esp, 208				; 000000d0H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$227034[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$227035[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$2:
	lea	ecx, DWORD PTR _strPlayerName$227036[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$3:
	lea	ecx, DWORD PTR _strTypeString$227037[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$4:
	lea	ecx, DWORD PTR _strYieldString$227038[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$5:
	lea	ecx, DWORD PTR $T232789[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$6:
	lea	ecx, DWORD PTR $T232790[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$7:
	lea	ecx, DWORD PTR $T232791[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ENDP ; CvCitySpecializationAI::LogNextSpecialization
PUBLIC	?LogBestSites@CvCitySpecializationAI@@AAEXXZ	; CvCitySpecializationAI::LogBestSites
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogBestSites@CvCitySpecializationAI@@AAEXXZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?LogBestSites@CvCitySpecializationAI@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogBestSites@CvCitySpecializationAI@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$6
	DD	04H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$8
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogBestSites@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_strPlayerName$227053 = -236				; size = 28
_strYieldString$227054 = -208				; size = 28
_strBaseString$227052 = -180				; size = 28
_strWeightString$227055 = -152				; size = 28
$T232883 = -124						; size = 28
$T232881 = -124						; size = 28
_strOutBuf$227051 = -96					; size = 28
$T232880 = -68						; size = 28
$T232882 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?LogBestSites@CvCitySpecializationAI@@AAEXXZ PROC	; CvCitySpecializationAI::LogBestSites, COMDAT
; _this$ = ecx

; 1644 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogBestSites@CvCitySpecializationAI@@AAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 224				; 000000e0H
	push	edi
	mov	edi, ecx

; 1645 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN5@LogBestSit
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN5@LogBestSit

; 1646 : 	{
; 1647 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$227051[esp+240]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1648 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$227052[esp+240]
	mov	DWORD PTR __$EHRec$[esp+248], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1649 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$227053[esp+240]
	mov	BYTE PTR __$EHRec$[esp+248], 1
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1650 : 		CvString strYieldString;

	lea	ecx, DWORD PTR _strYieldString$227054[esp+240]
	mov	BYTE PTR __$EHRec$[esp+248], 2
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1651 : 		CvString strWeightString;

	lea	ecx, DWORD PTR _strWeightString$227055[esp+240]
	mov	BYTE PTR __$EHRec$[esp+248], 3
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1652 : 		FILogFile* pLog;
; 1653 : 
; 1654 : 		// Find the name of this civ
; 1655 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR [edi]
	mov	BYTE PTR __$EHRec$[esp+248], 4
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	lea	ecx, DWORD PTR _strPlayerName$227053[esp+240]
	test	eax, eax
	je	SHORT $LN35@LogBestSit
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN34@LogBestSit
$LN35@LogBestSit:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN34@LogBestSit:
	push	ebx
	push	ebp
	push	esi

; 1656 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	esi, eax
	lea	eax, DWORD PTR _strPlayerName$227053[esp+252]
	push	eax
	lea	ecx, DWORD PTR $T232880[esp+256]
	push	ecx
	mov	ecx, edi
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+260], 5
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR $T232880[esp+252]
	mov	ebp, eax
	mov	BYTE PTR __$EHRec$[esp+260], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1657 : 
; 1658 : 		// Get the leading info for this line
; 1659 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$227052[esp+256]
	push	OFFSET $SG227058
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1660 : 		strBaseString += strPlayerName + ", ";

	push	OFFSET $SG227060
	lea	edx, DWORD PTR _strPlayerName$227053[esp+268]
	push	edx
	lea	eax, DWORD PTR $T232881[esp+272]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$227052[esp+256]
	mov	BYTE PTR __$EHRec$[esp+264], 6
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T232881[esp+252]
	mov	BYTE PTR __$EHRec$[esp+260], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ebx, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z

; 1661 : 
; 1662 : 		// Loop through each yield type
; 1663 : 		for(int iI = 0; iI <= YIELD_SCIENCE; iI++)

	xor	esi, esi
	add	edi, 28					; 0000001cH
	npad	4
$LL4@LogBestSit:

; 1664 : 		{
; 1665 : 			CvYieldInfo* pYieldInfo = GC.getYieldInfo((YieldTypes)iI);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z ; CvGlobals::getYieldInfo

; 1666 : 			if(pYieldInfo != NULL)

	test	eax, eax
	je	SHORT $LN47@LogBestSit

; 1667 : 			{
; 1668 : 				strYieldString = pYieldInfo->GetDescription();

	lea	ecx, DWORD PTR [eax+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	lea	ecx, DWORD PTR _strYieldString$227054[esp+252]
	test	eax, eax
	je	SHORT $LN48@LogBestSit
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN47@LogBestSit
$LN48@LogBestSit:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN47@LogBestSit:

; 1669 : 			}
; 1670 : 
; 1671 : 			strWeightString.Format(", Best site value: %d", m_iBestValue[iI]);

	mov	ecx, DWORD PTR [edi]
	push	ecx
	lea	edx, DWORD PTR _strWeightString$227055[esp+256]
	push	OFFSET $SG227068
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1672 : 			strOutBuf = strBaseString + strYieldString + strWeightString;

	lea	eax, DWORD PTR _strYieldString$227054[esp+264]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$227052[esp+268]
	push	ecx
	lea	edx, DWORD PTR $T232882[esp+272]
	push	edx
	call	ebx
	lea	ecx, DWORD PTR _strWeightString$227055[esp+276]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T232883[esp+284]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+296], 7
	call	ebx
	add	esp, 36					; 00000024H
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+260], 8
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$227051[esp+256]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T232883[esp+252]
	mov	BYTE PTR __$EHRec$[esp+260], 7
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232882[esp+252]
	mov	BYTE PTR __$EHRec$[esp+260], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1673 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$227051[esp+252]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	ebp
	call	edx
	inc	esi
	add	esp, 8
	add	edi, 4
	cmp	esi, 3
	jle	$LL4@LogBestSit

; 1674 : 		}
; 1675 : 	}

	lea	ecx, DWORD PTR _strWeightString$227055[esp+252]
	mov	BYTE PTR __$EHRec$[esp+260], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strYieldString$227054[esp+252]
	mov	BYTE PTR __$EHRec$[esp+260], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strPlayerName$227053[esp+252]
	mov	BYTE PTR __$EHRec$[esp+260], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBaseString$227052[esp+252]
	mov	BYTE PTR __$EHRec$[esp+260], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$227051[esp+252]
	mov	DWORD PTR __$EHRec$[esp+260], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	esi
	pop	ebp
	pop	ebx
$LN5@LogBestSit:

; 1676 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+240]
	pop	edi
	mov	DWORD PTR fs:0, ecx
	add	esp, 236				; 000000ecH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$0:
	lea	ecx, DWORD PTR _strOutBuf$227051[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$1:
	lea	ecx, DWORD PTR _strBaseString$227052[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$2:
	lea	ecx, DWORD PTR _strPlayerName$227053[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$3:
	lea	ecx, DWORD PTR _strYieldString$227054[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$4:
	lea	ecx, DWORD PTR _strWeightString$227055[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$5:
	lea	ecx, DWORD PTR $T232880[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$6:
	lea	ecx, DWORD PTR $T232881[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$7:
	lea	ecx, DWORD PTR $T232882[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$8:
	lea	ecx, DWORD PTR $T232883[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogBestSites@CvCitySpecializationAI@@AAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?LogBestSites@CvCitySpecializationAI@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogBestSites@CvCitySpecializationAI@@AAEXXZ ENDP	; CvCitySpecializationAI::LogBestSites
PUBLIC	?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z ; CvCitySpecializationAI::LogCity
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$10
	DD	05H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$12
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z
_TEXT	SEGMENT
_strPlayerName$227079 = -292				; size = 28
_strYieldString$227081 = -264				; size = 28
_strBaseString$227078 = -236				; size = 28
_strCityName$227080 = -208				; size = 28
_strWeightString$227082 = -180				; size = 28
$T232990 = -152						; size = 28
$T232986 = -152						; size = 28
$T232988 = -124						; size = 28
$T232985 = -124						; size = 28
_strOutBuf$227077 = -96					; size = 28
$T232989 = -68						; size = 28
$T232987 = -68						; size = 28
$T232984 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
_data$ = 12						; size = 24
?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z PROC ; CvCitySpecializationAI::LogCity, COMDAT
; _this$ = ecx

; 1683 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 280				; 00000118H
	push	edi
	mov	edi, ecx

; 1684 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN5@LogCity
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN5@LogCity
	push	ebx
	push	ebp
	push	esi

; 1685 : 	{
; 1686 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$227077[esp+308]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1687 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$227078[esp+308]
	mov	DWORD PTR __$EHRec$[esp+316], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1688 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$227079[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 1
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1689 : 		CvString strCityName;

	lea	ecx, DWORD PTR _strCityName$227080[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 2
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1690 : 		CvString strYieldString;

	lea	ecx, DWORD PTR _strYieldString$227081[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 3
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1691 : 		CvString strWeightString;

	lea	ecx, DWORD PTR _strWeightString$227082[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1692 : 		FILogFile* pLog;
; 1693 : 
; 1694 : 		// Find the name of this civ
; 1695 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR [edi]
	mov	bl, 5
	mov	BYTE PTR __$EHRec$[esp+316], bl
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	lea	ecx, DWORD PTR _strPlayerName$227079[esp+308]
	test	eax, eax
	je	SHORT $LN42@LogCity
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN41@LogCity
$LN42@LogCity:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN41@LogCity:

; 1696 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	esi, eax
	lea	eax, DWORD PTR _strPlayerName$227079[esp+308]
	push	eax
	lea	ecx, DWORD PTR $T232984[esp+312]
	push	ecx
	mov	ecx, edi
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+316], 6
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR $T232984[esp+308]
	mov	edi, eax
	mov	BYTE PTR __$EHRec$[esp+316], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1697 : 		strCityName = pCity->getName();

	lea	ecx, DWORD PTR $T232985[esp+308]
	push	ecx
	mov	ecx, DWORD PTR _pCity$[esp+308]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	push	eax
	lea	ecx, DWORD PTR _strCityName$227080[esp+312]
	mov	BYTE PTR __$EHRec$[esp+320], 7
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T232985[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1698 : 
; 1699 : 		// Get the leading info for this line
; 1700 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	edx, DWORD PTR _strBaseString$227078[esp+312]
	push	OFFSET $SG227086
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1701 : 		strBaseString += strPlayerName + ", " + strCityName + ", ";

	mov	esi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	push	OFFSET $SG227091
	lea	eax, DWORD PTR _strPlayerName$227079[esp+324]
	push	eax
	lea	ecx, DWORD PTR $T232986[esp+328]
	push	ecx
	call	esi
	mov	ebp, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	lea	edx, DWORD PTR _strCityName$227080[esp+332]
	push	edx
	push	eax
	lea	eax, DWORD PTR $T232987[esp+340]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+352], 8
	call	ebp
	push	OFFSET $SG227090
	push	eax
	lea	ecx, DWORD PTR $T232988[esp+352]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+364], 9
	call	esi
	add	esp, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$227078[esp+312]
	mov	BYTE PTR __$EHRec$[esp+320], 10		; 0000000aH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T232988[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 9
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232987[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 8
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232986[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1702 : 
; 1703 : 		// Loop through each yield type
; 1704 : 		for(int iI = 0; iI <= YIELD_SCIENCE; iI++)

	xor	esi, esi
$LL4@LogCity:

; 1705 : 		{
; 1706 : 			CvYieldInfo* pYieldInfo = GC.getYieldInfo((YieldTypes)iI);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z ; CvGlobals::getYieldInfo

; 1707 : 			if(pYieldInfo != NULL)

	test	eax, eax
	je	SHORT $LN59@LogCity

; 1708 : 			{
; 1709 : 				strYieldString = pYieldInfo->GetDescription();

	lea	ecx, DWORD PTR [eax+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	lea	ecx, DWORD PTR _strYieldString$227081[esp+308]
	test	eax, eax
	je	SHORT $LN60@LogCity
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN59@LogCity
$LN60@LogCity:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN59@LogCity:

; 1710 : 			}
; 1711 : 
; 1712 : 			strWeightString.Format(", Value: %d", data.m_iWeight[iI]);

	mov	edx, DWORD PTR _data$[esp+esi*4+308]
	push	edx
	lea	eax, DWORD PTR _strWeightString$227082[esp+312]
	push	OFFSET $SG227099
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1713 : 			strOutBuf = strBaseString + strYieldString + strWeightString;

	lea	ecx, DWORD PTR _strYieldString$227081[esp+320]
	push	ecx
	lea	edx, DWORD PTR _strBaseString$227078[esp+324]
	push	edx
	lea	eax, DWORD PTR $T232989[esp+328]
	push	eax
	call	ebp
	lea	ecx, DWORD PTR _strWeightString$227082[esp+332]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T232990[esp+340]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+352], 11		; 0000000bH
	call	ebp
	add	esp, 36					; 00000024H
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+316], 12		; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$227077[esp+312]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T232990[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 11		; 0000000bH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T232989[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1714 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$227077[esp+308]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edi
	call	edx
	inc	esi
	add	esp, 8
	cmp	esi, 3
	jle	$LL4@LogCity

; 1715 : 		}
; 1716 : 	}

	lea	ecx, DWORD PTR _strWeightString$227082[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strYieldString$227081[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strCityName$227080[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strPlayerName$227079[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBaseString$227078[esp+308]
	mov	BYTE PTR __$EHRec$[esp+316], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$227077[esp+308]
	mov	DWORD PTR __$EHRec$[esp+316], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	esi
	pop	ebp
	pop	ebx
$LN5@LogCity:

; 1717 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+296]
	pop	edi
	mov	DWORD PTR fs:0, ecx
	add	esp, 292				; 00000124H
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$227077[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$227078[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$2:
	lea	ecx, DWORD PTR _strPlayerName$227079[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$3:
	lea	ecx, DWORD PTR _strCityName$227080[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$4:
	lea	ecx, DWORD PTR _strYieldString$227081[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$5:
	lea	ecx, DWORD PTR _strWeightString$227082[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$6:
	lea	ecx, DWORD PTR $T232984[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$7:
	lea	ecx, DWORD PTR $T232985[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$8:
	lea	ecx, DWORD PTR $T232986[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$9:
	lea	ecx, DWORD PTR $T232987[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$10:
	lea	ecx, DWORD PTR $T232988[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$11:
	lea	ecx, DWORD PTR $T232989[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$12:
	lea	ecx, DWORD PTR $T232990[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z ENDP ; CvCitySpecializationAI::LogCity
PUBLIC	?begin@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@XZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@XZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::begin, COMDAT
; _this$ = ecx

; 667  : 		return (iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 668  : 		}

	ret	4
?begin@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@XZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@XZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@XZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::end, COMDAT
; _this$ = ecx

; 677  : 		return (iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 678  : 		}

	ret	4
?end@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@XZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::end
_TEXT	ENDS
PUBLIC	?begin@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::begin, COMDAT
; _this$ = ecx

; 560  : 		return (iterator(_Nextnode(_Myhead)));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 561  : 		}

	ret	4
?begin@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::end, COMDAT
; _this$ = ecx

; 570  : 		return (iterator(_Myhead));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 571  : 		}

	ret	4
?end@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::end
_TEXT	ENDS
PUBLIC	?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

	push	esi
	mov	esi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ecx]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

	mov	DWORD PTR [ecx], ecx

; 834  : 		_Prevnode(_Myhead) = _Myhead;

	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ecx

; 835  : 		_Mysize = 0;

	mov	DWORD PTR [esi+8], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN1@clear
	push	edi
	npad	3
$LL3@clear:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

	mov	edi, DWORD PTR [eax]

; 840  : 			this->_Alnod.destroy(_Pnode);
; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, edi
	cmp	edi, DWORD PTR [esi+4]
	jne	SHORT $LL3@clear
	pop	edi
$LN1@clear:
	pop	esi

; 842  : 			}
; 843  : 		}

	ret	0
?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXXZ ; CvWeightedVector<enum YieldTypes,5,1>::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?clear@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXXZ PROC ; CvWeightedVector<enum YieldTypes,5,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXXZ ENDP ; CvWeightedVector<enum YieldTypes,5,1>::clear
_TEXT	ENDS
PUBLIC	?clear@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXXZ ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXXZ PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXXZ ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::clear
_TEXT	ENDS
PUBLIC	?begin@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?begin@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::begin, COMDAT
; _this$ = ecx

; 560  : 		return (iterator(_Nextnode(_Myhead)));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 561  : 		}

	ret	4
?begin@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::begin
_TEXT	ENDS
PUBLIC	?end@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::end, COMDAT
; _this$ = ecx

; 570  : 		return (iterator(_Myhead));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 571  : 		}

	ret	4
?end@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::end
_TEXT	ENDS
PUBLIC	?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

	push	esi
	mov	esi, ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ecx]

; 833  : 		_Nextnode(_Myhead) = _Myhead;

	mov	DWORD PTR [ecx], ecx

; 834  : 		_Prevnode(_Myhead) = _Myhead;

	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ecx

; 835  : 		_Mysize = 0;

	mov	DWORD PTR [esi+8], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN1@clear@2
	push	edi
	npad	3
$LL3@clear@2:

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

	mov	edi, DWORD PTR [eax]

; 840  : 			this->_Alnod.destroy(_Pnode);
; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, edi
	cmp	edi, DWORD PTR [esi+4]
	jne	SHORT $LL3@clear@2
	pop	edi
$LN1@clear@2:
	pop	esi

; 842  : 			}
; 843  : 		}

	ret	0
?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear
_TEXT	ENDS
PUBLIC	??D?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEAAW4CitySpecializationTypes@@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEAAW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
??D?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEAAW4CitySpecializationTypes@@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::operator*, COMDAT
; _this$ = ecx

; 394  : 			return ((reference)**(_Mybase_iter *)this);

	mov	eax, DWORD PTR [ecx]
	add	eax, 8

; 395  : 			}

	ret	0
??D?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBEAAW4CitySpecializationTypes@@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>::operator*
_TEXT	ENDS
PUBLIC	??D?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEAAVCitySpecializationData@@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEAAVCitySpecializationData@@XZ
_TEXT	SEGMENT
??D?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEAAVCitySpecializationData@@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator*, COMDAT
; _this$ = ecx

; 394  : 			return ((reference)**(_Mybase_iter *)this);

	mov	eax, DWORD PTR [ecx]
	add	eax, 8

; 395  : 			}

	ret	0
??D?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEAAVCitySpecializationData@@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator*
_TEXT	ENDS
PUBLIC	??C?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEPAVCitySpecializationData@@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator->
; Function compile flags: /Ogtpy
;	COMDAT ??C?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEPAVCitySpecializationData@@XZ
_TEXT	SEGMENT
??C?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEPAVCitySpecializationData@@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator->, COMDAT
; _this$ = ecx

; 399  : 			return (&**this);

	mov	eax, DWORD PTR [ecx]
	add	eax, 8

; 400  : 			}

	ret	0
??C?$_Iterator@$0A@@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBEPAVCitySpecializationData@@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Iterator<0>::operator->
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_List_ptr@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	??1?$_List_ptr@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_ptr@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_ptr@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_List_ptr@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1104 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy
	pop	edi

; 1105 : 			return (false);

	xor	al, al
	pop	esi

; 1115 : 		}

	ret	4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	cmp	edi, 1073741823				; 3fffffffH
	jbe	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Xlen
$LN16@Buy:
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z ; std::_Allocate<CvCitySpecializationXMLEntry *>
	mov	DWORD PTR [esi+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	DWORD PTR [esi+8], eax
	add	esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [esi+12], eax
	pop	edi

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
	pop	esi

; 1115 : 		}

	ret	4
$LN15@Buy:
?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Buy
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Make_iter, COMDAT
; _this$ = ecx

; 580  : 		return (iterator(_Where._Ptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 581  : 		}

	ret	8
?_Make_iter@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QBE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

	test	eax, eax
	je	SHORT $LN26@Buynode
	mov	DWORD PTR [eax], eax
$LN26@Buynode:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

	lea	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN36@Buynode
	mov	DWORD PTR [ecx], eax
$LN36@Buynode:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

	ret	0
?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXXZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1213 : 		clear();

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], ecx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ecx
	mov	DWORD PTR [esi+8], 0
	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN3@Tidy
	push	edi
	npad	3
$LL5@Tidy:
	mov	edi, DWORD PTR [eax]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, edi
	cmp	edi, DWORD PTR [esi+4]
	jne	SHORT $LL5@Tidy
	pop	edi
$LN3@Tidy:

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1217 : 		_Myhead = 0;

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 1218 : 		}

	ret	0
?_Tidy@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXXZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@2:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@3:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	?_Make_iter@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Make_iter, COMDAT
; _this$ = ecx

; 580  : 		return (iterator(_Where._Ptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 581  : 		}

	ret	8
?_Make_iter@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QBE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode, COMDAT
; _this$ = ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 1173 : 		int _Linkcnt = 0;
; 1174 : 
; 1175 : 		_TRY_BEGIN
; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

	test	eax, eax
	je	SHORT $LN26@Buynode@2
	mov	DWORD PTR [eax], eax
$LN26@Buynode@2:

; 1177 : 		++_Linkcnt;
; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

	lea	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN36@Buynode@2
	mov	DWORD PTR [ecx], eax
$LN36@Buynode@2:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1183 : 		_RERAISE;
; 1184 : 		_CATCH_END
; 1185 : 		return (_Pnode);
; 1186 : 		}

	ret	0
?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1213 : 		clear();

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], ecx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ecx
	mov	DWORD PTR [esi+8], 0
	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN3@Tidy@2
	push	edi
	npad	3
$LL5@Tidy@2:
	mov	edi, DWORD PTR [eax]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, edi
	cmp	edi, DWORD PTR [esi+4]
	jne	SHORT $LL5@Tidy@2
	pop	edi
$LN3@Tidy@2:

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));
; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1217 : 		_Myhead = 0;

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 1218 : 		}

	ret	0
?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN34@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 4
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize
$LN16@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 4
$LN15@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+44], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXPAPAVCvCitySpecializationXMLEntry@@0@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXPAPAVCvCitySpecializationXMLEntry@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXPAPAVCvCitySpecializationXMLEntry@@0@Z PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

	ret	8
?_Destroy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXPAPAVCvCitySpecializationXMLEntry@@0@Z ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode, COMDAT
; _this$ = ecx

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN
; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

	test	eax, eax
	je	SHORT $LN27@Buynode@3
	mov	ecx, DWORD PTR __Next$[esp-4]
	mov	DWORD PTR [eax], ecx
$LN27@Buynode@3:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

	lea	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN37@Buynode@3
	mov	edx, DWORD PTR __Prev$[esp-4]
	mov	DWORD PTR [ecx], edx
$LN37@Buynode@3:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

	lea	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN47@Buynode@3
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], edx
$LN47@Buynode@3:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1206 : 		_RERAISE;
; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);
; 1209 : 		}

	ret	12					; 0000000cH
?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
_TEXT	ENDS
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T233960 = -80						; size = 28
$T233959 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

	mov	eax, DWORD PTR fs:0

; 1240 : 		if (max_size() - _Mysize < _Count)

	mov	edx, DWORD PTR __Count$[esp-4]
	push	-1
	push	__ehhandler$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	mov	eax, DWORD PTR [ecx+8]
	sub	esp, 68					; 00000044H
	push	esi
	mov	esi, 1073741823				; 3fffffffH
	sub	esi, eax
	cmp	esi, edx
	pop	esi
	jae	SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233960[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T233959[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T233960[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T233959[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T233959[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233959[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T233959[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN20@Incsize:
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

	add	eax, edx
	mov	DWORD PTR [ecx+8], eax

; 1243 : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	DWORD PTR fs:0, ecx
	add	esp, 80					; 00000050H
	ret	4
$LN19@Incsize:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z$0:
	lea	ecx, DWORD PTR $T233960[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z$2:
	lea	ecx, DWORD PTR $T233959[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize
PUBLIC	??0?$_List_ptr@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z ; std::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_ptr@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z PROC ; std::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

	mov	eax, ecx

; 68   : 		}

	ret	4
??0?$_List_ptr@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z ENDP ; std::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_ptr<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize@2
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@2
	npad	6
$LL8@GrowSize@2:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize@2

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@2

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@2
$LN34@GrowSize@2:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@2:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 5
	jbe	SHORT $LN16@GrowSize@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize@2
$LN16@GrowSize@2:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 5
$LN15@GrowSize@2:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize@2:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+52], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize@3
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize@3:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@3
	npad	6
$LL8@GrowSize@3:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize@3

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@3

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@3
$LN34@GrowSize@3:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@3:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 4
	jbe	SHORT $LN16@GrowSize@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize@3
$LN16@GrowSize@3:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 4
$LN15@GrowSize@3:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize@3:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+44], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode, COMDAT
; _this$ = ecx

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 1192 : 		int _Linkcnt = 0;
; 1193 : 
; 1194 : 		_TRY_BEGIN
; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

	test	eax, eax
	je	SHORT $LN27@Buynode@4
	mov	ecx, DWORD PTR __Next$[esp-4]
	mov	DWORD PTR [eax], ecx
$LN27@Buynode@4:

; 1196 : 		++_Linkcnt;
; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

	lea	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN37@Buynode@4
	mov	edx, DWORD PTR __Prev$[esp-4]
	mov	DWORD PTR [ecx], edx
$LN37@Buynode@4:

; 1198 : 		++_Linkcnt;
; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

	lea	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN47@Buynode@4
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], esi
	mov	esi, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], esi
	mov	esi, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], esi
	mov	esi, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], esi
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], edx
	pop	esi
$LN47@Buynode@4:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);
; 1206 : 		_RERAISE;
; 1207 : 		_CATCH_END
; 1208 : 		return (_Pnode);
; 1209 : 		}

	ret	12					; 0000000cH
?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
$T234267 = -80						; size = 28
$T234266 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

	mov	eax, DWORD PTR fs:0

; 1240 : 		if (max_size() - _Mysize < _Count)

	mov	edx, DWORD PTR __Count$[esp-4]
	push	-1
	push	__ehhandler$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	mov	eax, DWORD PTR [ecx+8]
	sub	esp, 68					; 00000044H
	push	esi
	mov	esi, 178956970				; 0aaaaaaaH
	sub	esi, eax
	cmp	esi, edx
	pop	esi
	jae	SHORT $LN1@Incsize@2

; 1241 : 			_THROW(length_error, "list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T234267[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T234266[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T234267[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T234266[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T234266[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T234266[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T234266[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN20@Incsize@2:
$LN1@Incsize@2:

; 1242 : 		_Mysize += _Count;

	add	eax, edx
	mov	DWORD PTR [ecx+8], eax

; 1243 : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	mov	DWORD PTR fs:0, ecx
	add	esp, 80					; 00000050H
	ret	4
$LN19@Incsize@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z$0:
	lea	ecx, DWORD PTR $T234267[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z$2:
	lea	ecx, DWORD PTR $T234266[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize
PUBLIC	??0?$_List_ptr@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z ; std::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_ptr@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_ptr@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z PROC ; std::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 67   : 		{	// construct base, and allocator from _Al

	mov	eax, ecx

; 68   : 		}

	ret	4
??0?$_List_ptr@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAE@V?$allocator@VCitySpecializationData@@@1@@Z ENDP ; std::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_ptr<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z PROC ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>, COMDAT

; 38   : 	_DEBUG_RANGE(_First, _Last);
; 39   : 	for (; _First != _Last; ++_First)

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	cmp	ecx, eax
	je	SHORT $LN27@Find
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [edx]
$LL9@Find:

; 40   : 		if (*_First == _Val)

	cmp	DWORD PTR [ecx+8], edx
	je	SHORT $LN27@Find
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR __First$[esp-4], ecx
	cmp	ecx, eax
	jne	SHORT $LL9@Find
$LN27@Find:

; 41   : 			break;
; 42   : 	return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 43   : 	}

	ret	0
??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ENDP ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	edi, 4
	lea	ebx, DWORD PTR [eax*8]
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	sub	ebx, edi
	sar	ebx, 3

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap
	npad	3
$LL2@Make_heap:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [edi+esi*8-8]
	sub	esp, 8
	mov	eax, esp
	dec	esi
	push	ebx
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+esi*8+4]
	push	esi
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
	test	esi, esi
	jg	SHORT $LL2@Make_heap
$LN1@Make_heap:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp

; 2968 : 	if (_First != _Last)

	mov	ebp, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	cmp	edi, ebp
	je	SHORT $LN6@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+8]
	cmp	edx, ebp
	je	SHORT $LN6@Insertion_
	push	ebx
	push	esi
$LL7@Insertion_:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+4]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edx]
	mov	ecx, edx
	jle	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, edx
	cmp	edi, edx
	je	SHORT $LN21@Insertion_
	npad	7
$LL22@Insertion_:
	mov	ecx, DWORD PTR [eax-8]
	sub	eax, 8
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+12], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_
$LN21@Insertion_:

; 2977 : 				*_First = _Val;

	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-8]
	jle	SHORT $LN1@Insertion_
$LL3@Insertion_:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ecx, eax
	sub	eax, 8
	cmp	esi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Last$[esp+12]
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], esi
$LN4@Insertion_:
	add	edx, 8
	cmp	edx, ebp
	jne	SHORT $LL7@Insertion_
	pop	esi
	pop	ebx
$LN6@Insertion_:
	pop	edi
	pop	ebp

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Median<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z PROC ; std::_Median<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median@2

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	edi, 4
	lea	ebx, DWORD PTR [eax*8]
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median@2:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ENDP ; std::_Median<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	sub	ebx, edi
	sar	ebx, 3

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap@2
	npad	3
$LL2@Make_heap@2:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [edi+esi*8-8]
	sub	esp, 8
	mov	eax, esp
	dec	esi
	push	ebx
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+esi*8+4]
	push	esi
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 20					; 00000014H
	test	esi, esi
	jg	SHORT $LL2@Make_heap@2
$LN1@Make_heap@2:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp

; 2968 : 	if (_First != _Last)

	mov	ebp, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	cmp	edi, ebp
	je	SHORT $LN6@Insertion_@2

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+8]
	cmp	edx, ebp
	je	SHORT $LN6@Insertion_@2
	push	ebx
	push	esi
$LL7@Insertion_@2:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+4]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edx]
	mov	ecx, edx
	jle	SHORT $LN5@Insertion_@2

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, edx
	cmp	edi, edx
	je	SHORT $LN21@Insertion_@2
	npad	7
$LL22@Insertion_@2:
	mov	ecx, DWORD PTR [eax-8]
	sub	eax, 8
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+12], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_@2
$LN21@Insertion_@2:

; 2977 : 				*_First = _Val;

	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@2
$LN5@Insertion_@2:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-8]
	jle	SHORT $LN1@Insertion_@2
$LL3@Insertion_@2:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ecx, eax
	sub	eax, 8
	cmp	esi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_@2

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Last$[esp+12]
$LN1@Insertion_@2:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], esi
$LN4@Insertion_@2:
	add	edx, 8
	cmp	edx, ebp
	jne	SHORT $LL7@Insertion_@2
	pop	esi
	pop	ebx
$LN6@Insertion_@2:
	pop	edi
	pop	ebp

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Median<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z PROC ; std::_Median<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median@3

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	edi, 4
	lea	ebx, DWORD PTR [eax*8]
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median@3:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ENDP ; std::_Median<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	sub	ebx, edi
	sar	ebx, 3

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap@3
	npad	3
$LL2@Make_heap@3:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [edi+esi*8-8]
	sub	esp, 8
	mov	eax, esp
	dec	esi
	push	ebx
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+esi*8+4]
	push	esi
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
	test	esi, esi
	jg	SHORT $LL2@Make_heap@3
$LN1@Make_heap@3:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp

; 2968 : 	if (_First != _Last)

	mov	ebp, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	cmp	edi, ebp
	je	SHORT $LN6@Insertion_@3

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+8]
	cmp	edx, ebp
	je	SHORT $LN6@Insertion_@3
	push	ebx
	push	esi
$LL7@Insertion_@3:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+4]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edx]
	mov	ecx, edx
	jle	SHORT $LN5@Insertion_@3

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, edx
	cmp	edi, edx
	je	SHORT $LN21@Insertion_@3
	npad	7
$LL22@Insertion_@3:
	mov	ecx, DWORD PTR [eax-8]
	sub	eax, 8
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+12], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_@3
$LN21@Insertion_@3:

; 2977 : 				*_First = _Val;

	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@3
$LN5@Insertion_@3:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-8]
	jle	SHORT $LN1@Insertion_@3
$LL3@Insertion_@3:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ecx, eax
	sub	eax, 8
	cmp	esi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_@3

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Last$[esp+12]
$LN1@Insertion_@3:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], esi
$LN4@Insertion_@3:
	add	edx, 8
	cmp	edx, ebp
	jne	SHORT $LL7@Insertion_@3
	pop	esi
	pop	ebx
$LN6@Insertion_@3:
	pop	edi
	pop	ebp

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax-8]
	push	edi
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 8
	mov	edx, esp
	sub	eax, 8
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	pop	edi
	pop	esi
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax-8]
	push	edi
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 8
	mov	edx, esp
	sub	eax, 8
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	pop	edi
	pop	esi
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax-8]
	push	edi
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 8
	mov	edx, esp
	sub	eax, 8
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	pop	edi
	pop	esi
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	?Reset@CvCitySpecializationAI@@QAEXXZ		; CvCitySpecializationAI::Reset
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
;	COMDAT ?Reset@CvCitySpecializationAI@@QAEXXZ
_TEXT	SEGMENT
?Reset@CvCitySpecializationAI@@QAEXXZ PROC		; CvCitySpecializationAI::Reset, COMDAT
; _this$ = ecx

; 265  : 	m_bSpecializationsDirty = false;

	xor	eax, eax

; 266  : 	m_bInterruptWonders = false;
; 267  : 	m_eNextSpecializationDesired = NO_CITY_SPECIALIZATION;

	or	edx, -1
	mov	BYTE PTR [ecx+8], al
	mov	BYTE PTR [ecx+192], al
	mov	DWORD PTR [ecx+12], edx

; 268  : 	m_eNextWonderDesired = NO_BUILDING;

	mov	DWORD PTR [ecx+196], edx

; 269  : 	m_iWonderCityID = -1;

	mov	DWORD PTR [ecx+200], edx

; 270  : 	m_iNextWonderWeight = 0;

	mov	DWORD PTR [ecx+204], eax

; 271  : 	m_YieldWeights.clear();

	mov	DWORD PTR [ecx+48], eax

; 272  : 	m_ProductionSubtypeWeights.clear();

	mov	DWORD PTR [ecx+124], eax

; 273  : 	m_iLastTurnEvaluated = 0;

	mov	DWORD PTR [ecx+188], eax

; 274  : }

	ret	0
?Reset@CvCitySpecializationAI@@QAEXXZ ENDP		; CvCitySpecializationAI::Reset
_TEXT	ENDS
PUBLIC	?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z ; CvCitySpecializationAI::SetSpecializationsDirty
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
; Function compile flags: /Ogtpy
;	COMDAT ?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z
_TEXT	SEGMENT
_eUpdateType$ = 8					; size = 4
?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z PROC ; CvCitySpecializationAI::SetSpecializationsDirty, COMDAT
; _this$ = ecx

; 389  : {

	push	esi
	mov	esi, ecx

; 390  : 	// No city specializations for minor civs
; 391  : 	if(!m_pPlayer->isMinorCiv())

	mov	ecx, DWORD PTR [esi]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	jne	SHORT $LN3@SetSpecial
	push	edi

; 392  : 	{
; 393  : 		m_bSpecializationsDirty = true;
; 394  : 		LogSpecializationUpdate(eUpdateType);

	mov	edi, DWORD PTR _eUpdateType$[esp+4]
	push	edi
	mov	ecx, esi
	mov	BYTE PTR [esi+8], 1
	call	?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z ; CvCitySpecializationAI::LogSpecializationUpdate

; 395  : 
; 396  : 		switch(eUpdateType)

	mov	eax, edi
	sub	eax, 1
	pop	edi
	je	SHORT $LN2@SetSpecial
	sub	eax, 2
	jne	SHORT $LN3@SetSpecial
$LN2@SetSpecial:

; 397  : 		{
; 398  : 		case SPECIALIZATION_UPDATE_NOW_AT_WAR:
; 399  : 		case SPECIALIZATION_UPDATE_MY_CITY_CAPTURED:
; 400  : 			m_bInterruptWonders = true;

	mov	BYTE PTR [esi+192], 1
$LN3@SetSpecial:
	pop	esi

; 401  : 			break;
; 402  : 		default:
; 403  : 			// Don't set it to false for these other cases!
; 404  : 			// We shouldn't set it to false until after the next time we've picked specializations.
; 405  : 			break;
; 406  : 		}
; 407  : 	}
; 408  : 
; 409  : 	return;
; 410  : }

	ret	4
?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z ENDP ; CvCitySpecializationAI::SetSpecializationsDirty
_TEXT	ENDS
PUBLIC	?FindBestSites@CvCitySpecializationAI@@AAEXXZ	; CvCitySpecializationAI::FindBestSites
EXTRN	?findCity@CvMap@@QAEPAVCvCity@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PBV2@@Z:PROC ; CvMap::findCity
EXTRN	?GetSettlerSiteEvaluator@CvGame@@QAEPAVCvSiteEvaluatorForSettler@@XZ:PROC ; CvGame::GetSettlerSiteEvaluator
; Function compile flags: /Ogtpy
;	COMDAT ?FindBestSites@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_iPlotLoop$ = -12					; size = 4
_iEvalDistance$ = -8					; size = 4
_pSiteEval$ = -4					; size = 4
?FindBestSites@CvCitySpecializationAI@@AAEXXZ PROC	; CvCitySpecializationAI::FindBestSites, COMDAT
; _this$ = ecx

; 1201 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp

; 1202 : 	CvPlot* pPlot;
; 1203 : 	int iPlotValue;
; 1204 : #ifdef AUI_WARNING_FIXES
; 1205 : 	uint iPlotLoop;
; 1206 : #else
; 1207 : 	int iPlotLoop;
; 1208 : #endif
; 1209 : 	CvCity* pNearestCity;
; 1210 : 
; 1211 : 	// Clear output
; 1212 : 	for(int iI = 0; iI <= YIELD_SCIENCE; iI++)
; 1213 : 	{
; 1214 : 		m_iBestValue[iI] = 0;

	xor	ebp, ebp
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi+28], ebp
	mov	DWORD PTR [edi+32], ebp
	mov	DWORD PTR [edi+36], ebp
	mov	DWORD PTR [edi+40], ebp

; 1215 : 	}
; 1216 : 
; 1217 : 	// Found value drops off based on distance, so safe to only look halfway out
; 1218 : 	int iEvalDistance = GC.getSETTLER_EVALUATION_DISTANCE() / 2;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7252

; 1219 : 
; 1220 : 	CvSiteEvaluatorForSettler* pSiteEval = GC.getGame().GetSettlerSiteEvaluator();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iEvalDistance$[esp+24], eax
	call	?GetSettlerSiteEvaluator@CvGame@@QAEPAVCvSiteEvaluatorForSettler@@XZ ; CvGame::GetSettlerSiteEvaluator
	mov	ebx, eax

; 1221 : 	for(iPlotLoop = 0; iPlotLoop < GC.getMap().numPlots(); iPlotLoop++)

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	DWORD PTR [eax+4028], ebp
	mov	DWORD PTR _pSiteEval$[esp+24], ebx
	mov	DWORD PTR _iPlotLoop$[esp+24], ebp
	jle	$LN10@FindBestSi
	push	esi
	npad	5
$LL12@FindBestSi:

; 1222 : 	{
; 1223 : 		pPlot = GC.getMap().plotByIndexUnchecked(iPlotLoop);

	mov	esi, DWORD PTR [eax+4068]

; 1224 : 
; 1225 : 		if(pSiteEval->CanFound(pPlot, m_pPlayer, true))

	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+8]
	push	1
	push	ecx
	add	esi, ebp
	push	esi
	mov	ecx, ebx
	call	edx
	test	al, al
	je	SHORT $LN11@FindBestSi

; 1226 : 		{
; 1227 : 			// Check if within range of any of our cities
; 1228 : 			pNearestCity = GC.getMap().findCity(pPlot->getX(), pPlot->getY(), m_pPlayer->GetID(), NO_TEAM, true /* bSameArea */);

	mov	eax, DWORD PTR [edi]
	movsx	ecx, WORD PTR [esi+2]
	mov	eax, DWORD PTR [eax+44]
	movsx	edx, WORD PTR [esi]
	push	0
	push	-1
	push	-1
	push	0
	push	1
	push	-1
	push	eax
	push	ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	edx
	call	?findCity@CvMap@@QAEPAVCvCity@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PBV2@@Z ; CvMap::findCity

; 1229 : 			if(pNearestCity != NULL)

	test	eax, eax
	je	SHORT $LN11@FindBestSi

; 1230 : 			{
; 1231 : 				if(plotDistance(pPlot->getX(), pPlot->getY(), pNearestCity->getX(), pNearestCity->getY()) <= iEvalDistance)

	mov	ecx, DWORD PTR [eax+108]
	mov	edx, DWORD PTR [eax+96]
	movsx	eax, WORD PTR [esi+2]
	push	ecx
	movsx	ecx, WORD PTR [esi]
	push	edx
	push	eax
	push	ecx
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _iEvalDistance$[esp+28]
	jg	SHORT $LN11@FindBestSi

; 1232 : 				{
; 1233 : 					for(int iI = 0; iI <= YIELD_SCIENCE; iI++)

	xor	ebx, ebx
$LL6@FindBestSi:

; 1234 : 					{
; 1235 : 						if(iI != YIELD_SCIENCE)
; 1236 : 						{
; 1237 : 							iPlotValue = PlotValueForSpecificYield(pPlot, (YieldTypes)iI);

	mov	ecx, edi
	cmp	ebx, 3
	je	SHORT $LN3@FindBestSi
	push	ebx
	push	esi
	call	?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z ; CvCitySpecializationAI::PlotValueForSpecificYield

; 1238 : 						}
; 1239 : 						else

	jmp	SHORT $LN2@FindBestSi
$LN3@FindBestSi:

; 1240 : 						{
; 1241 : 							iPlotValue = PlotValueForScience(pPlot);

	push	esi
	call	?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z ; CvCitySpecializationAI::PlotValueForScience
$LN2@FindBestSi:

; 1242 : 						}
; 1243 : 
; 1244 : 						if(iPlotValue > m_iBestValue[iI])

	cmp	eax, DWORD PTR [edi+ebx*4+28]
	jle	SHORT $LN5@FindBestSi

; 1245 : 						{
; 1246 : 							m_iBestValue[iI] = iPlotValue;

	mov	DWORD PTR [edi+ebx*4+28], eax
$LN5@FindBestSi:

; 1232 : 				{
; 1233 : 					for(int iI = 0; iI <= YIELD_SCIENCE; iI++)

	inc	ebx
	cmp	ebx, 3
	jle	SHORT $LL6@FindBestSi
	mov	ebx, DWORD PTR _pSiteEval$[esp+28]
$LN11@FindBestSi:

; 1221 : 	for(iPlotLoop = 0; iPlotLoop < GC.getMap().numPlots(); iPlotLoop++)

	mov	ecx, DWORD PTR _iPlotLoop$[esp+28]
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	inc	ecx
	add	ebp, 484				; 000001e4H
	cmp	ecx, DWORD PTR [eax+4028]
	mov	DWORD PTR _iPlotLoop$[esp+28], ecx
	jl	$LL12@FindBestSi
	pop	esi
$LN10@FindBestSi:

; 1247 : 						}
; 1248 : 					}
; 1249 : 				}
; 1250 : 			}
; 1251 : 		}
; 1252 : 	}
; 1253 : 
; 1254 : 	LogBestSites();

	mov	ecx, edi
	pop	edi
	pop	ebp
	pop	ebx

; 1255 : 
; 1256 : 	return;
; 1257 : }

	add	esp, 12					; 0000000cH

; 1247 : 						}
; 1248 : 					}
; 1249 : 				}
; 1250 : 			}
; 1251 : 		}
; 1252 : 	}
; 1253 : 
; 1254 : 	LogBestSites();

	jmp	?LogBestSites@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::LogBestSites
?FindBestSites@CvCitySpecializationAI@@AAEXXZ ENDP	; CvCitySpecializationAI::FindBestSites
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted:
	ret	0
??1?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
_TEXT	ENDS
PUBLIC	??0?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	mov	eax, ecx

; 471  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 472  : 		}

	ret	0
??0?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase, COMDAT
; _this$ = ecx

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	mov	eax, DWORD PTR __Where$[esp-4]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Where$[esp], ecx

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN32@erase

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]

; 802  : 			this->_Alnod.destroy(_Pnode);
; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

	push	eax
	mov	DWORD PTR [ecx+4], edx
	call	??3@YAXPAX@Z				; operator delete

; 804  : 			--_Mysize;
; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

	mov	ecx, DWORD PTR __Where$[esp+4]
	add	esp, 4
	dec	DWORD PTR [esi+8]
$LN32@erase:
	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [eax], ecx
	pop	esi

; 807  : 		}

	ret	8
?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ; CvWeightedVector<enum YieldTypes,5,1>::CvWeightedVector<enum YieldTypes,5,1>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ PROC	; CvWeightedVector<enum YieldTypes,5,1>::CvWeightedVector<enum YieldTypes,5,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 5
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ENDP	; CvWeightedVector<enum YieldTypes,5,1>::CvWeightedVector<enum YieldTypes,5,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ PROC	; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted@2:
	ret	0
??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ENDP	; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::~CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::~CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted@3:
	ret	0
??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::~CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>
_TEXT	ENDS
PUBLIC	?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::erase, COMDAT
; _this$ = ecx

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	mov	eax, DWORD PTR __Where$[esp-4]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Where$[esp], ecx

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

	cmp	eax, DWORD PTR [esi+4]
	je	SHORT $LN32@erase@2

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]

; 802  : 			this->_Alnod.destroy(_Pnode);
; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

	push	eax
	mov	DWORD PTR [ecx+4], edx
	call	??3@YAXPAX@Z				; operator delete

; 804  : 			--_Mysize;
; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

	mov	ecx, DWORD PTR __Where$[esp+4]
	add	esp, 4
	dec	DWORD PTR [esi+8]
$LN32@erase@2:
	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [eax], ecx
	pop	esi

; 807  : 		}

	ret	8
?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::erase
_TEXT	ENDS
PUBLIC	??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::erase, COMDAT
; _this$ = ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	edx, DWORD PTR __First_arg$[esp-4]
	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp]
	push	esi

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);
; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	esi, DWORD PTR __Last_arg$[esp+4]
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [ebp], edx
	cmp	edx, esi
	je	SHORT $LN29@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR [edi+8]
	sub	eax, esi
	sar	eax, 2
	lea	ecx, DWORD PTR [eax*4]
	push	ebx
	lea	ebx, DWORD PTR [ecx+edx]
	test	eax, eax
	jle	SHORT $LN26@erase@3
	push	ecx
	push	esi
	push	ecx
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN26@erase@3:

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);
; 1049 : 			_Mylast = _Ptr;

	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN29@erase@3:
	pop	edi
	pop	esi

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, ebp
	pop	ebp

; 1055 : #endif
; 1056 : 		}

	ret	12					; 0000000cH
?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 1135 : 		}

	ret	0
?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

	mov	eax, DWORD PTR __Where$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR __Val$[esp+8]
	lea	ebx, DWORD PTR [eax+4]
	push	ecx
	push	edx
	push	eax
	mov	ecx, edi
	call	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode

; 719  : 		_Incsize(1);

	push	1
	mov	ecx, edi
	mov	esi, eax
	call	?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

	mov	DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

	mov	eax, DWORD PTR [esi+4]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebx

; 722  : 		}

	ret	8
?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Insert
_TEXT	ENDS
PUBLIC	??0?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z PROC ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

	mov	eax, ecx

; 86   : 		}

	ret	4
??0?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@V?$allocator@W4CitySpecializationTypes@@@1@@Z ENDP ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+52], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
$LN1@push_back@2:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back@2
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back@2:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@3

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN1@push_back@3:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back@3
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back@3:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Insert, COMDAT
; _this$ = ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();
; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

	mov	eax, DWORD PTR __Where$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR __Val$[esp+8]
	lea	ebx, DWORD PTR [eax+4]
	push	ecx
	push	edx
	push	eax
	mov	ecx, edi
	call	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode

; 719  : 		_Incsize(1);

	push	1
	mov	ecx, edi
	mov	esi, eax
	call	?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

	mov	DWORD PTR [ebx], esi

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

	mov	eax, DWORD PTR [esi+4]
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebx

; 722  : 		}

	ret	8
?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Insert
_TEXT	ENDS
PUBLIC	??0?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@V?$allocator@VCitySpecializationData@@@1@@Z ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@V?$allocator@VCitySpecializationData@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@V?$allocator@VCitySpecializationData@@@1@@Z PROC ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 85   : 		{	// construct base, and allocator from _Al

	mov	eax, ecx

; 86   : 		}

	ret	4
??0?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@V?$allocator@VCitySpecializationData@@@1@@Z ENDP ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	??$find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ; std::find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z PROC ; std::find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>, COMDAT

; 74   : 	_ASSIGN_FROM_BASE(_First,

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	cmp	ecx, eax
	je	SHORT $LN29@find
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [edx]
$LL11@find:
	cmp	DWORD PTR [ecx+8], edx
	je	SHORT $LN29@find
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, eax
	jne	SHORT $LL11@find
$LN29@find:

; 75   : 		_Find(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val));
; 76   : 	return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 77   : 	}

	ret	0
??$find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ENDP ; std::find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Tmp$235728 = -24					; size = 8
__Tmp$235657 = -16					; size = 8
__Tmp$235683 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 24					; 00000018H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+24]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+28]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	push	edi
	sar	eax, 1
	lea	edi, DWORD PTR [ebx+eax*8]

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-8]
	push	eax
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+8]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_
$LL27@Unguarded_:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	jl	SHORT $LN99@Unguarded_
	jg	SHORT $LN99@Unguarded_

; 3033 : 		--_Pfirst;

	sub	ecx, 8
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_
$LN99@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR [ecx+4]
	npad	1
$LL25@Unguarded_:
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_
	jg	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	add	esi, 8
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	ebx, ecx
$LL23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+36]
	jae	SHORT $LN103@Unguarded_
	npad	6
$LL21@Unguarded_:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+4]
	cmp	edx, edi
	jl	SHORT $LN20@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 8
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_
	mov	ebp, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$235657[esp+44], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	edx, DWORD PTR __Tmp$235657[esp+44]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
$LN20@Unguarded_:
	add	eax, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jb	SHORT $LL21@Unguarded_
$LN103@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	ebx, DWORD PTR __First$[esp+36]
	jbe	SHORT $LN115@Unguarded_
	lea	edx, DWORD PTR [ebx-8]
$LL14@Unguarded_:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [ecx+4]
	cmp	ebp, edi
	jl	SHORT $LN13@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 8
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_
	mov	ebp, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$235683[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$235683[esp+44]
	mov	DWORD PTR [edx+4], edi
$LN13@Unguarded_:
	sub	ebx, 8
	sub	edx, 8
	cmp	DWORD PTR __First$[esp+36], ebx
	jb	SHORT $LL14@Unguarded_
$LN111@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebx, DWORD PTR __First$[esp+36]
$LN115@Unguarded_:
	jne	SHORT $LN6@Unguarded_
	cmp	eax, DWORD PTR __Last$[esp+36]
	je	$LN105@Unguarded_

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi
$LN64@Unguarded_:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	edi, ecx
	add	esi, 8
	add	ecx, 8
	add	eax, 8
	cmp	edi, edx
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR __Tmp$235728[esp+40], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$235728[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	edi, DWORD PTR __Tmp$235728[esp+40]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$235728[esp+44]
	mov	DWORD PTR [edx+4], edi
	jmp	$LL23@Unguarded_
$LN6@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	ebx, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN3@Unguarded_
	sub	ecx, 8
	cmp	ebx, ecx
	je	SHORT $LN78@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edi
$LN78@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 8
	cmp	ecx, esi
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebx
	je	SHORT $LN92@Unguarded_
	mov	ebp, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edi
$LN92@Unguarded_:
	add	eax, 8

; 3076 : 		}

	jmp	$LL23@Unguarded_
$LN105@Unguarded_:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+36]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::make_heap<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::make_heap<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -8					; fffffff8H
	cmp	edx, 8
	jle	SHORT $LN1@make_heap

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__Tmp$235937 = -24					; size = 8
__Tmp$235865 = -16					; size = 8
__Tmp$235891 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 24					; 00000018H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+24]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+28]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	push	edi
	sar	eax, 1
	lea	edi, DWORD PTR [ebx+eax*8]

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-8]
	push	eax
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Median<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+8]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_@2
$LL27@Unguarded_@2:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	jl	SHORT $LN99@Unguarded_@2
	jg	SHORT $LN99@Unguarded_@2

; 3033 : 		--_Pfirst;

	sub	ecx, 8
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_@2
$LN99@Unguarded_@2:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_@2
	mov	edx, DWORD PTR [ecx+4]
	npad	1
$LL25@Unguarded_@2:
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_@2
	jg	SHORT $LN24@Unguarded_@2

; 3037 : 		++_Plast;

	add	esi, 8
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_@2
$LN24@Unguarded_@2:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	ebx, ecx
$LL23@Unguarded_@2:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+36]
	jae	SHORT $LN103@Unguarded_@2
	npad	6
$LL21@Unguarded_@2:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+4]
	cmp	edx, edi
	jl	SHORT $LN20@Unguarded_@2

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_@2

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 8
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_@2
	mov	ebp, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$235865[esp+44], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	edx, DWORD PTR __Tmp$235865[esp+44]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
$LN20@Unguarded_@2:
	add	eax, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jb	SHORT $LL21@Unguarded_@2
$LN103@Unguarded_@2:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	ebx, DWORD PTR __First$[esp+36]
	jbe	SHORT $LN115@Unguarded_@2
	lea	edx, DWORD PTR [ebx-8]
$LL14@Unguarded_@2:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [ecx+4]
	cmp	ebp, edi
	jl	SHORT $LN13@Unguarded_@2

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_@2

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 8
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_@2
	mov	ebp, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$235891[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$235891[esp+44]
	mov	DWORD PTR [edx+4], edi
$LN13@Unguarded_@2:
	sub	ebx, 8
	sub	edx, 8
	cmp	DWORD PTR __First$[esp+36], ebx
	jb	SHORT $LL14@Unguarded_@2
$LN111@Unguarded_@2:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebx, DWORD PTR __First$[esp+36]
$LN115@Unguarded_@2:
	jne	SHORT $LN6@Unguarded_@2
	cmp	eax, DWORD PTR __Last$[esp+36]
	je	$LN105@Unguarded_@2

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_@2

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_@2
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi
$LN64@Unguarded_@2:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	edi, ecx
	add	esi, 8
	add	ecx, 8
	add	eax, 8
	cmp	edi, edx
	je	$LL23@Unguarded_@2
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR __Tmp$235937[esp+40], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$235937[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	edi, DWORD PTR __Tmp$235937[esp+40]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$235937[esp+44]
	mov	DWORD PTR [edx+4], edi
	jmp	$LL23@Unguarded_@2
$LN6@Unguarded_@2:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	ebx, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN3@Unguarded_@2
	sub	ecx, 8
	cmp	ebx, ecx
	je	SHORT $LN78@Unguarded_@2

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edi
$LN78@Unguarded_@2:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 8
	cmp	ecx, esi
	je	$LL23@Unguarded_@2
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_@2
$LN3@Unguarded_@2:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebx
	je	SHORT $LN92@Unguarded_@2
	mov	ebp, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edi
$LN92@Unguarded_@2:
	add	eax, 8

; 3076 : 		}

	jmp	$LL23@Unguarded_@2
$LN105@Unguarded_@2:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+36]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -8					; fffffff8H
	cmp	edx, 8
	jle	SHORT $LN1@make_heap@2

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap@2:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__Tmp$236145 = -24					; size = 8
__Tmp$236074 = -16					; size = 8
__Tmp$236100 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 24					; 00000018H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+24]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+28]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	push	edi
	sar	eax, 1
	lea	edi, DWORD PTR [ebx+eax*8]

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-8]
	push	eax
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Median<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+8]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_@3
$LL27@Unguarded_@3:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	jl	SHORT $LN99@Unguarded_@3
	jg	SHORT $LN99@Unguarded_@3

; 3033 : 		--_Pfirst;

	sub	ecx, 8
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_@3
$LN99@Unguarded_@3:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_@3
	mov	edx, DWORD PTR [ecx+4]
	npad	1
$LL25@Unguarded_@3:
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_@3
	jg	SHORT $LN24@Unguarded_@3

; 3037 : 		++_Plast;

	add	esi, 8
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_@3
$LN24@Unguarded_@3:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	ebx, ecx
$LL23@Unguarded_@3:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+36]
	jae	SHORT $LN103@Unguarded_@3
	npad	6
$LL21@Unguarded_@3:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+4]
	cmp	edx, edi
	jl	SHORT $LN20@Unguarded_@3

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_@3

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 8
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_@3
	mov	ebp, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$236074[esp+44], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	edx, DWORD PTR __Tmp$236074[esp+44]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
$LN20@Unguarded_@3:
	add	eax, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jb	SHORT $LL21@Unguarded_@3
$LN103@Unguarded_@3:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	ebx, DWORD PTR __First$[esp+36]
	jbe	SHORT $LN115@Unguarded_@3
	lea	edx, DWORD PTR [ebx-8]
$LL14@Unguarded_@3:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [ecx+4]
	cmp	ebp, edi
	jl	SHORT $LN13@Unguarded_@3

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_@3

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 8
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_@3
	mov	ebp, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$236100[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$236100[esp+44]
	mov	DWORD PTR [edx+4], edi
$LN13@Unguarded_@3:
	sub	ebx, 8
	sub	edx, 8
	cmp	DWORD PTR __First$[esp+36], ebx
	jb	SHORT $LL14@Unguarded_@3
$LN111@Unguarded_@3:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebx, DWORD PTR __First$[esp+36]
$LN115@Unguarded_@3:
	jne	SHORT $LN6@Unguarded_@3
	cmp	eax, DWORD PTR __Last$[esp+36]
	je	$LN105@Unguarded_@3

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_@3

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_@3
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi
$LN64@Unguarded_@3:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	edi, ecx
	add	esi, 8
	add	ecx, 8
	add	eax, 8
	cmp	edi, edx
	je	$LL23@Unguarded_@3
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR __Tmp$236145[esp+40], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$236145[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	edi, DWORD PTR __Tmp$236145[esp+40]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$236145[esp+44]
	mov	DWORD PTR [edx+4], edi
	jmp	$LL23@Unguarded_@3
$LN6@Unguarded_@3:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	ebx, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN3@Unguarded_@3
	sub	ecx, 8
	cmp	ebx, ecx
	je	SHORT $LN78@Unguarded_@3

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edi
$LN78@Unguarded_@3:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 8
	cmp	ecx, esi
	je	$LL23@Unguarded_@3
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_@3
$LN3@Unguarded_@3:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebx
	je	SHORT $LN92@Unguarded_@3
	mov	ebp, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edi
$LN92@Unguarded_@3:
	add	eax, 8

; 3076 : 		}

	jmp	$LL23@Unguarded_@3
$LN105@Unguarded_@3:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+36]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -8					; fffffff8H
	cmp	edx, 8
	jle	SHORT $LN1@make_heap@3

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap@3:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::pop_heap<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	edx, eax
	push	esi
	sub	edx, ecx
	mov	esi, edx
	and	esi, -8					; fffffff8H
	cmp	esi, 8
	push	edi
	jle	SHORT $LN12@pop_heap

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax-8]
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], ebx
	mov	ebx, DWORD PTR [ecx+4]
	sub	esp, 8
	mov	DWORD PTR [eax-4], ebx
	mov	eax, esp
	add	edx, -8					; fffffff8H
	sar	edx, 3
	push	edx
	push	0
	push	ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN12@pop_heap:

; 2099 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::pop_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	edx, eax
	push	esi
	sub	edx, ecx
	mov	esi, edx
	and	esi, -8					; fffffff8H
	cmp	esi, 8
	push	edi
	jle	SHORT $LN12@pop_heap@2

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax-8]
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], ebx
	mov	ebx, DWORD PTR [ecx+4]
	sub	esp, 8
	mov	DWORD PTR [eax-4], ebx
	mov	eax, esp
	add	edx, -8					; fffffff8H
	sar	edx, 3
	push	edx
	push	0
	push	ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN12@pop_heap@2:

; 2099 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::pop_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	edx, eax
	push	esi
	sub	edx, ecx
	mov	esi, edx
	and	esi, -8					; fffffff8H
	cmp	esi, 8
	push	edi
	jle	SHORT $LN12@pop_heap@3

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax-8]
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], ebx
	mov	ebx, DWORD PTR [ecx+4]
	sub	esp, 8
	mov	DWORD PTR [eax-4], ebx
	mov	eax, esp
	add	edx, -8					; fffffff8H
	sar	edx, 3
	push	edx
	push	0
	push	ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN12@pop_heap@3:

; 2099 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?Init@CvCitySpecializationAI@@QAEXPAVCvCitySpecializationXMLEntries@@PAVCvPlayer@@@Z ; CvCitySpecializationAI::Init
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
;	COMDAT ?Init@CvCitySpecializationAI@@QAEXPAVCvCitySpecializationXMLEntries@@PAVCvPlayer@@@Z
_TEXT	SEGMENT
_pSpecializations$ = 8					; size = 4
_pPlayer$ = 12						; size = 4
?Init@CvCitySpecializationAI@@QAEXPAVCvCitySpecializationXMLEntries@@PAVCvPlayer@@@Z PROC ; CvCitySpecializationAI::Init, COMDAT
; _this$ = ecx

; 251  : 	m_pSpecializations = pSpecializations;

	mov	eax, DWORD PTR _pSpecializations$[esp-4]

; 252  : 	m_pPlayer = pPlayer;

	mov	edx, DWORD PTR _pPlayer$[esp-4]
	mov	DWORD PTR [ecx+4], eax

; 253  : 
; 254  : 	Reset();

	xor	eax, eax
	mov	DWORD PTR [ecx], edx
	or	edx, -1
	mov	BYTE PTR [ecx+8], al
	mov	BYTE PTR [ecx+192], al
	mov	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [ecx+196], edx
	mov	DWORD PTR [ecx+200], edx
	mov	DWORD PTR [ecx+204], eax
	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [ecx+124], eax
	mov	DWORD PTR [ecx+188], eax

; 255  : }

	ret	8
?Init@CvCitySpecializationAI@@QAEXPAVCvCitySpecializationXMLEntries@@PAVCvPlayer@@@Z ENDP ; CvCitySpecializationAI::Init
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z ; CvWeightedVector<int,4,1>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z PROC	; CvWeightedVector<int,4,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@4
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN5@push_back@4:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@4
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@4:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z ENDP	; CvWeightedVector<int,4,1>::push_back
_TEXT	ENDS
PUBLIC	??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN6@vector
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@vector:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 560  : 		}

	ret	0
??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEXXZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	esi
	push	edi
	mov	edi, ecx

; 1060 : 		erase(begin(), end());

	mov	ecx, DWORD PTR [edi+8]
	mov	esi, DWORD PTR [edi+4]
	cmp	esi, ecx
	je	SHORT $LN15@clear@3
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	lea	edx, DWORD PTR [eax*4]
	push	ebx
	lea	ebx, DWORD PTR [edx+esi]
	test	eax, eax
	jle	SHORT $LN40@clear@3
	push	edx
	push	ecx
	push	edx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN40@clear@3:
	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN15@clear@3:
	pop	edi
	pop	esi

; 1061 : 		}

	ret	0
?clear@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAEXXZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::clear
_TEXT	ENDS
PUBLIC	??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

	push	esi
	mov	esi, ecx
	call	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], 0

; 437  : 		}

	mov	eax, esi
	pop	esi
	ret	0
??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 521  : 		_Tidy();

	jmp	?_Tidy@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Tidy
??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
_TEXT	ENDS
PUBLIC	?push_back@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXABW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXABW4CitySpecializationTypes@@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [edi+4]
	push	eax
	push	ecx
	push	edi
	mov	ecx, esi
	call	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
	push	1
	mov	ecx, esi
	mov	ebx, eax
	call	?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize
	mov	DWORD PTR [edi+4], ebx
	mov	edx, DWORD PTR [ebx+4]
	pop	edi
	pop	esi
	mov	DWORD PTR [edx], ebx
	pop	ebx

; 671  : 		}

	ret	4
?push_back@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXABW4CitySpecializationTypes@@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEIABW4YieldTypes@@H@Z ; CvWeightedVector<enum YieldTypes,5,1>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?push_back@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEIABW4YieldTypes@@H@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEIABW4YieldTypes@@H@Z PROC ; CvWeightedVector<enum YieldTypes,5,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+52], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@5
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
$LN5@push_back@5:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@5
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@5:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEIABW4YieldTypes@@H@Z ENDP ; CvWeightedVector<enum YieldTypes,5,1>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEIABW4ProductionSpecializationSubtypes@@H@Z ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEIABW4ProductionSpecializationSubtypes@@H@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEIABW4ProductionSpecializationSubtypes@@H@Z PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@6
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN5@push_back@6:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@6
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@6:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEIABW4ProductionSpecializationSubtypes@@H@Z ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::push_back
_TEXT	ENDS
PUBLIC	??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::list<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::list<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

	push	esi
	mov	esi, ecx
	call	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], 0

; 437  : 		}

	mov	eax, esi
	pop	esi
	ret	0
??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::list<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::~list<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::~list<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 521  : 		_Tidy();

	jmp	?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy
??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::~list<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	?push_back@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXABVCitySpecializationData@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXABVCitySpecializationData@@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::push_back, COMDAT
; _this$ = ecx

; 670  : 		_Insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [edi+4]
	push	eax
	push	ecx
	push	edi
	mov	ecx, esi
	call	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
	push	1
	mov	ecx, esi
	mov	ebx, eax
	call	?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize
	mov	DWORD PTR [edi+4], ebx
	mov	edx, DWORD PTR [ebx+4]
	pop	edi
	pop	esi
	mov	DWORD PTR [edx], ebx
	pop	ebx

; 671  : 		}

	ret	4
?push_back@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXABVCitySpecializationData@@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::push_back
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	mov	eax, ecx
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap
	mov	ebx, 8
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	lea	esi, DWORD PTR [ecx-8]
	jle	SHORT $LN2@Sort_heap
$LN24@Sort_heap:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 8
	mov	DWORD PTR [esi+4], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [ebx+esi-8]
	sar	ecx, 3
	push	ecx
	push	0
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN2@Sort_heap:
	sub	esi, 8
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 3
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap
$LN1@Sort_heap:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Sort_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	mov	eax, ecx
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap@2
	mov	ebx, 8
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	lea	esi, DWORD PTR [ecx-8]
	jle	SHORT $LN2@Sort_heap@2
$LN24@Sort_heap@2:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 8
	mov	DWORD PTR [esi+4], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [ebx+esi-8]
	sar	ecx, 3
	push	ecx
	push	0
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN2@Sort_heap@2:
	sub	esi, 8
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 3
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap@2
$LN1@Sort_heap@2:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	mov	eax, ecx
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap@3
	mov	ebx, 8
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	lea	esi, DWORD PTR [ecx-8]
	jle	SHORT $LN2@Sort_heap@3
$LN24@Sort_heap@3:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 8
	mov	DWORD PTR [esi+4], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [ebx+esi-8]
	sar	ecx, 3
	push	ecx
	push	0
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN2@Sort_heap@3:
	sub	esi, 8
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 3
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap@3
$LN1@Sort_heap@3:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??0CvCitySpecializationXMLEntries@@QAE@XZ	; CvCitySpecializationXMLEntries::CvCitySpecializationXMLEntries
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
;	COMDAT ??0CvCitySpecializationXMLEntries@@QAE@XZ
_TEXT	SEGMENT
??0CvCitySpecializationXMLEntries@@QAE@XZ PROC		; CvCitySpecializationXMLEntries::CvCitySpecializationXMLEntries, COMDAT
; _this$ = ecx

; 130  : {

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 131  : #ifdef AUI_WARNING_FIXES
; 132  : 	m_CurrentIndex = 0;
; 133  : 	m_CurrentYield = NO_YIELD;
; 134  : #endif
; 135  : }

	ret	0
??0CvCitySpecializationXMLEntries@@QAE@XZ ENDP		; CvCitySpecializationXMLEntries::CvCitySpecializationXMLEntries
_TEXT	ENDS
PUBLIC	?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ ; CvCitySpecializationXMLEntries::DeleteArray
; Function compile flags: /Ogtpy
;	COMDAT ?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ
_TEXT	SEGMENT
?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ PROC ; CvCitySpecializationXMLEntries::DeleteArray, COMDAT
; _this$ = ecx

; 209  : {

	push	esi
	push	edi
	mov	edi, ecx

; 210  : 	for(std::vector<CvCitySpecializationXMLEntry*>::iterator it = m_paCitySpecializationEntries.begin(); it != m_paCitySpecializationEntries.end(); ++it)

	mov	esi, DWORD PTR [edi+4]
	cmp	esi, DWORD PTR [edi+8]
	je	SHORT $LN1@DeleteArra
	npad	4
$LL14@DeleteArra:

; 211  : 	{
; 212  : 		SAFE_DELETE(*it);

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN32@DeleteArra
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+16]
	push	1
	call	edx
$LN32@DeleteArra:
	mov	DWORD PTR [esi], 0
	add	esi, 4
	cmp	esi, DWORD PTR [edi+8]
	jne	SHORT $LL14@DeleteArra
$LN1@DeleteArra:

; 213  : 	}
; 214  : 
; 215  : 	m_paCitySpecializationEntries.clear();

	mov	ecx, DWORD PTR [edi+8]
	mov	esi, DWORD PTR [edi+4]
	cmp	esi, ecx
	je	SHORT $LN48@DeleteArra
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	lea	edx, DWORD PTR [eax*4]
	push	ebx
	lea	ebx, DWORD PTR [edx+esi]
	test	eax, eax
	jle	SHORT $LN73@DeleteArra
	push	edx
	push	ecx
	push	edx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN73@DeleteArra:
	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN48@DeleteArra:
	pop	edi
	pop	esi

; 216  : }

	ret	0
?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ ENDP ; CvCitySpecializationXMLEntries::DeleteArray
_TEXT	ENDS
PUBLIC	??0CvCitySpecializationAI@@QAE@XZ		; CvCitySpecializationAI::CvCitySpecializationAI
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0CvCitySpecializationAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvCitySpecializationAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvCitySpecializationAI@@QAE@XZ$1
__ehfuncinfo$??0CvCitySpecializationAI@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvCitySpecializationAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ??0CvCitySpecializationAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvCitySpecializationAI@@QAE@XZ PROC			; CvCitySpecializationAI::CvCitySpecializationAI, COMDAT
; _this$ = ecx

; 239  : {

	push	-1
	push	__ehhandler$??0CvCitySpecializationAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	xor	ebx, ebx
	lea	edi, DWORD PTR [esi+16]
	mov	ecx, edi
	mov	BYTE PTR [esi+8], bl
	mov	DWORD PTR [esi+12], -1
	call	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], ebx
	lea	eax, DWORD PTR [esi+56]
	mov	DWORD PTR [esi+48], ebx
	mov	DWORD PTR [esi+52], 5
	mov	DWORD PTR [esi+44], eax

; 240  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR [esi+124], ebx
	mov	DWORD PTR [esi+128], 4
	lea	eax, DWORD PTR [esi+132]
	mov	DWORD PTR [esi+120], eax
	mov	DWORD PTR [esi+188], ebx
	mov	BYTE PTR [esi+192], bl
	mov	DWORD PTR [esi+204], ebx
	pop	edi
	mov	DWORD PTR [esi+196], -1
	mov	DWORD PTR [esi+200], -1
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvCitySpecializationAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
__unwindfunclet$??0CvCitySpecializationAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>
__ehhandler$??0CvCitySpecializationAI@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0CvCitySpecializationAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvCitySpecializationAI@@QAE@XZ ENDP			; CvCitySpecializationAI::CvCitySpecializationAI
PUBLIC	??1CvCitySpecializationAI@@QAE@XZ		; CvCitySpecializationAI::~CvCitySpecializationAI
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	SEGMENT
__unwindtable$??1CvCitySpecializationAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$1
__ehfuncinfo$??1CvCitySpecializationAI@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvCitySpecializationAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ??1CvCitySpecializationAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvCitySpecializationAI@@QAE@XZ PROC			; CvCitySpecializationAI::~CvCitySpecializationAI, COMDAT
; _this$ = ecx

; 244  : {

	push	-1
	push	__ehhandler$??1CvCitySpecializationAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi

; 245  : 	Uninit();
; 246  : }

	mov	eax, DWORD PTR [esi+120]
	lea	ecx, DWORD PTR [esi+132]
	mov	DWORD PTR __$EHRec$[esp+28], 1
	cmp	eax, ecx
	je	SHORT $LN13@CvCitySpec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN13@CvCitySpec:
	mov	eax, DWORD PTR [esi+44]
	lea	edx, DWORD PTR [esi+56]
	mov	BYTE PTR __$EHRec$[esp+28], 0
	cmp	eax, edx
	je	SHORT $LN30@CvCitySpec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN30@CvCitySpec:
	lea	ecx, DWORD PTR [esi+16]
	call	?_Tidy@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Tidy
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>
__ehhandler$??1CvCitySpecializationAI@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvCitySpecializationAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvCitySpecializationAI@@QAE@XZ ENDP			; CvCitySpecializationAI::~CvCitySpecializationAI
PUBLIC	?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z ; CvCitySpecializationAI::WeightProductionSubtypes
EXTRN	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z:PROC ; CvAIGrandStrategyXMLEntry::GetFlavorValue
EXTRN	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z:PROC ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
EXTRN	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumAIGrandStrategyInfos
EXTRN	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z:PROC ; CvMilitaryAI::IsUsingStrategy
EXTRN	?IsUsingCityStrategy@CvCityStrategyAI@@QAE_NW4AICityStrategyTypes@@@Z:PROC ; CvCityStrategyAI::IsUsingCityStrategy
EXTRN	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ:PROC	; CvPlayer::getCapitalCity
EXTRN	?GetNumberCivsAtWarWith@CvMilitaryAI@@QBEHXZ:PROC ; CvMilitaryAI::GetNumberCivsAtWarWith
EXTRN	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ:PROC ; CvPlayer::GetMilitaryAI
EXTRN	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z:PROC ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
EXTRN	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z:PROC ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
EXTRN	__ftol2_sse_excpt:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z
_TEXT	SEGMENT
_bCriticalDefenseOn$ = -21				; size = 1
_iEmergencyUnitWeight$ = -20				; size = 4
$T237975 = -16						; size = 4
_iMilitaryTrainingWeight$ = -16				; size = 4
_iSeaWeight$ = -12					; size = 4
$T237962 = -8						; size = 4
_iWonderFlavorWeight$ = -8				; size = 4
_iWeightOfWonders$ = 8					; size = 4
_iWonderWeight$ = 8					; size = 4
_iFlavorWonder$ = 8					; size = 4
_iFlavorSpaceship$ = 12					; size = 4
?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z PROC ; CvCitySpecializationAI::WeightProductionSubtypes, COMDAT
; _this$ = ecx

; 534  : {

	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	push	edi

; 535  : 	bool bCriticalDefenseOn = false;
; 536  : 
; 537  : 	int iMilitaryTrainingWeight = 0;
; 538  : 	int iEmergencyUnitWeight = 0;
; 539  : 	int iSeaWeight = 0;

	xor	eax, eax

; 540  : 	int iWonderWeight = 0;
; 541  : 	int iSpaceshipWeight = 0;
; 542  : 
; 543  : 	int iFlavorOffense = 0;
; 544  : 	iFlavorOffense = m_pPlayer->GetGrandStrategyAI()->GetPersonalityAndGrandStrategy((FlavorTypes)GC.getInfoTypeForString("FLAVOR_OFFENSE"));

	push	eax
	mov	esi, ecx
	push	OFFSET $SG225749
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR _bCriticalDefenseOn$[esp+48], 0
	mov	DWORD PTR _iSeaWeight$[esp+48], eax
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy

; 545  : 
; 546  : 	int iUnitsRequested = m_pPlayer->GetNumUnitsNeededToBeBuilt();

	mov	ecx, DWORD PTR [esi]
	mov	ebp, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+88]
	call	edx

; 547  : 
; 548  : 	// LONG-TERM MILITARY BUILD-UP
; 549  : 	iMilitaryTrainingWeight += (iFlavorOffense * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE()) /* 10 */;
; 550  : 	iMilitaryTrainingWeight += (m_pPlayer->GetDiplomacyAI()->GetPersonalityMajorCivApproachBias(MAJOR_CIV_APPROACH_WAR) * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY() /* 10 */);

	mov	ecx, DWORD PTR [esi]
	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2280
	mov	ebx, eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2284
	push	0
	mov	DWORD PTR $T237975[esp+44], eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
	imul	eax, DWORD PTR $T237975[esp+40]
	imul	edi, ebp

; 551  : 
; 552  : 	// EMERGENCY UNITS
; 553  : 	iEmergencyUnitWeight += iUnitsRequested * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED() /* 10 */;
; 554  : 	iEmergencyUnitWeight += m_pPlayer->GetMilitaryAI()->GetNumberCivsAtWarWith() * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH() /* 100 */;

	mov	ecx, DWORD PTR [esi]
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2244
	add	eax, edi
	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2240
	mov	DWORD PTR _iMilitaryTrainingWeight$[esp+40], eax
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?GetNumberCivsAtWarWith@CvMilitaryAI@@QBEHXZ ; CvMilitaryAI::GetNumberCivsAtWarWith
	imul	eax, ebp
	imul	edi, ebx

; 555  : 
; 556  : 	// Is our capital under threat?
; 557  : 	AICityStrategyTypes eCityStrategy = (AICityStrategyTypes) GC.getInfoTypeForString("AICITYSTRATEGY_CAPITAL_UNDER_THREAT");

	xor	ebp, ebp
	push	ebp
	add	eax, edi
	push	OFFSET $SG225753
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _iEmergencyUnitWeight$[esp+48], eax
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 558  : 	CvCity* pCapital;
; 559  : 	pCapital = m_pPlayer->getCapitalCity();

	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity

; 560  : 	if(pCapital && eCityStrategy != NO_AICITYSTRATEGY && pCapital->GetCityStrategyAI()->IsUsingCityStrategy(eCityStrategy))

	cmp	eax, ebp
	je	SHORT $LN138@WeightProd
	cmp	edi, -1
	je	SHORT $LN138@WeightProd
	push	edi
	mov	ecx, eax
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?IsUsingCityStrategy@CvCityStrategyAI@@QAE_NW4AICityStrategyTypes@@@Z ; CvCityStrategyAI::IsUsingCityStrategy
	test	al, al
	je	SHORT $LN138@WeightProd

; 561  : 	{
; 562  : 		iEmergencyUnitWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT() /* 50 */;

	mov	edi, DWORD PTR _iEmergencyUnitWeight$[esp+40]
	add	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2260
	mov	DWORD PTR _iEmergencyUnitWeight$[esp+40], edi
	jmp	SHORT $LN19@WeightProd
$LN138@WeightProd:
	mov	edi, DWORD PTR _iEmergencyUnitWeight$[esp+40]
$LN19@WeightProd:

; 563  : 	}
; 564  : 
; 565  : 	// Add in weights depending on what the military AI is up to
; 566  : 	MilitaryAIStrategyTypes eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_WAR_MOBILIZATION");

	push	ebp
	push	OFFSET $SG225758
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 567  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	eax, -1
	je	SHORT $LN128@WeightProd
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	test	al, al
	je	SHORT $LN128@WeightProd

; 568  : 	{
; 569  : 		iMilitaryTrainingWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION() /* 150 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2248
	add	DWORD PTR _iMilitaryTrainingWeight$[esp+40], ecx
$LN128@WeightProd:

; 570  : 	}
; 571  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_EMPIRE_DEFENSE");

	push	ebp
	push	OFFSET $SG225761
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 572  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	eax, -1
	je	SHORT $LN17@WeightProd
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	test	al, al
	je	SHORT $LN17@WeightProd

; 573  : 	{
; 574  : 		iEmergencyUnitWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE() /* 150 */;

	add	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2252
	mov	DWORD PTR _iEmergencyUnitWeight$[esp+40], edi
$LN17@WeightProd:

; 575  : 	}
; 576  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_EMPIRE_DEFENSE_CRITICAL");

	push	ebp
	push	OFFSET $SG225764
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 577  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	eax, -1
	je	SHORT $LN129@WeightProd
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	test	al, al
	je	SHORT $LN129@WeightProd

; 578  : 	{
; 579  : 		bCriticalDefenseOn = true;
; 580  : 		iEmergencyUnitWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL() /* 1000 */;

	add	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2256
	mov	bl, 1
	mov	DWORD PTR _iEmergencyUnitWeight$[esp+40], edi
	jmp	SHORT $LN16@WeightProd
$LN129@WeightProd:
	mov	bl, BYTE PTR _bCriticalDefenseOn$[esp+40]
$LN16@WeightProd:

; 581  : 	}
; 582  : 
; 583  : 	// Override all this if have too many units!
; 584  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_ENOUGH_MILITARY_UNITS");

	push	ebp
	push	OFFSET $SG225767
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 585  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	eax, -1
	je	SHORT $LN15@WeightProd
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	test	al, al
	je	SHORT $LN15@WeightProd

; 586  : 	{
; 587  : 		iMilitaryTrainingWeight = 0;

	mov	DWORD PTR _iMilitaryTrainingWeight$[esp+40], ebp

; 588  : 		iEmergencyUnitWeight = 0;

	mov	DWORD PTR _iEmergencyUnitWeight$[esp+40], ebp
$LN15@WeightProd:

; 589  : 	}
; 590  : 
; 591  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_NEED_NAVAL_UNITS");

	push	ebp
	push	OFFSET $SG225770
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 592  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	eax, -1
	je	SHORT $LN130@WeightProd
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	test	al, al
	je	SHORT $LN130@WeightProd

; 593  : 	{
; 594  : 		iSeaWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS() /* 50 */;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2264
	mov	DWORD PTR _iSeaWeight$[esp+40], edx
$LN130@WeightProd:

; 595  : 	}
; 596  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_NEED_NAVAL_UNITS_CRITICAL");

	push	ebp
	push	OFFSET $SG225773
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 597  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	eax, -1
	je	SHORT $LN13@WeightProd
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	test	al, al
	je	SHORT $LN13@WeightProd

; 598  : 	{
; 599  : 		iSeaWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL() /* 250 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2268
	add	DWORD PTR _iSeaWeight$[esp+40], eax
$LN13@WeightProd:

; 600  : 	}
; 601  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_ENOUGH_NAVAL_UNITS");

	push	ebp
	push	OFFSET $SG225776
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 602  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	eax, -1
	je	SHORT $LN12@WeightProd
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	test	al, al
	je	SHORT $LN12@WeightProd

; 603  : 	{
; 604  : 		iSeaWeight = 0;

	mov	DWORD PTR _iSeaWeight$[esp+40], ebp
$LN12@WeightProd:

; 605  : 	}
; 606  : 
; 607  : 	// Wonder is MIN between weight of wonders available to build and value from flavors (but not less than zero)
; 608  : 	int iWonderFlavorWeight = iFlavorWonder * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER() /* 200 */;

	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2272

; 609  : 	int iWeightOfWonders = (int)(m_iNextWonderWeight * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER()); /* 0.2 */

	fild	DWORD PTR [esi+204]
	imul	edi, DWORD PTR _iFlavorWonder$[esp+36]
	fmul	DWORD PTR ?gGlobals@@3VCvGlobals@@A+8044
	mov	DWORD PTR _iWonderFlavorWeight$[esp+40], edi
	call	__ftol2_sse_excpt
	mov	DWORD PTR _iWeightOfWonders$[esp+36], eax

; 610  : 	iWonderWeight = min(iWonderFlavorWeight, iWeightOfWonders);

	cmp	eax, edi
	lea	eax, DWORD PTR _iWeightOfWonders$[esp+36]
	jl	SHORT $LN49@WeightProd
	lea	eax, DWORD PTR _iWonderFlavorWeight$[esp+40]
$LN49@WeightProd:
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _iWonderWeight$[esp+36], eax

; 611  : 	iWonderWeight = max(iWonderWeight, 0);

	cmp	eax, ebp
	mov	DWORD PTR $T237962[esp+40], ebp
	lea	eax, DWORD PTR $T237962[esp+40]
	jl	SHORT $LN53@WeightProd
	lea	eax, DWORD PTR _iWonderWeight$[esp+36]
$LN53@WeightProd:
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR _iWonderWeight$[esp+36], edi

; 612  : 
; 613  : 	// One-half of normal weight if critical defense is on
; 614  : 	if(bCriticalDefenseOn)

	test	bl, bl
	je	SHORT $LN11@WeightProd

; 615  : 	{
; 616  : 		iWonderWeight /= 2;

	mov	eax, edi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iWonderWeight$[esp+36], eax
	mov	edi, eax
$LN11@WeightProd:

; 617  : 	}
; 618  : 
; 619  : 	if(CanBuildSpaceshipParts())

	mov	ecx, esi
	call	?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ ; CvCitySpecializationAI::CanBuildSpaceshipParts
	test	al, al
	je	SHORT $LN131@WeightProd

; 620  : 	{
; 621  : 		iSpaceshipWeight += iFlavorSpaceship * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP() /* 5 */;

	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2276
	imul	ebx, DWORD PTR _iFlavorSpaceship$[esp+36]
	jmp	SHORT $LN10@WeightProd
$LN131@WeightProd:
	mov	ebx, ebp
$LN10@WeightProd:

; 622  : 	}
; 623  : 
; 624  : #ifdef AUI_WARNING_FIXES
; 625  : 	for (uint iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)
; 626  : #else
; 627  : 	for(int iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	test	eax, eax
	jle	$LN134@WeightProd
$LL9@WeightProd:

; 628  : #endif
; 629  : 	{
; 630  : 		CvAIGrandStrategyXMLEntry* grandStrategy = GC.getAIGrandStrategyInfo((AIGrandStrategyTypes)iGrandStrategyLoop);

	push	ebp
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo
	mov	edi, eax

; 631  : 		if(grandStrategy)

	test	edi, edi
	je	SHORT $LN8@WeightProd

; 632  : 		{
; 633  : #ifdef AUI_WARNING_FIXES
; 634  : 			if (iGrandStrategyLoop == (uint)m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy())
; 635  : #else
; 636  : 			if(iGrandStrategyLoop == m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy())

	mov	ecx, DWORD PTR [esi]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	ebp, eax
	jne	SHORT $LN8@WeightProd

; 637  : #endif
; 638  : 			{
; 639  : 				if(grandStrategy->GetSpecializationBoost(YIELD_PRODUCTION) > 0)

	push	1
	mov	ecx, edi
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	test	eax, eax
	jle	SHORT $LN8@WeightProd

; 640  : 				{
; 641  : 					if(grandStrategy->GetFlavorValue((FlavorTypes)GC.getInfoTypeForString("FLAVOR_OFFENSE")) > 0)

	push	0
	push	OFFSET $SG225800
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, edi
	call	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorValue
	test	eax, eax
	jle	SHORT $LN3@WeightProd

; 642  : 					{
; 643  : 						iMilitaryTrainingWeight += grandStrategy->GetSpecializationBoost(YIELD_PRODUCTION);

	push	1
	mov	ecx, edi
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	DWORD PTR _iMilitaryTrainingWeight$[esp+40], eax
	jmp	SHORT $LN8@WeightProd
$LN3@WeightProd:

; 644  : 					}
; 645  : 					else if(grandStrategy->GetFlavorValue((FlavorTypes)GC.getInfoTypeForString("FLAVOR_SPACESHIP")) > 0)

	push	0
	push	OFFSET $SG225804
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, edi
	call	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorValue
	test	eax, eax
	jle	SHORT $LN8@WeightProd

; 646  : 					{
; 647  : 						iSpaceshipWeight += grandStrategy->GetSpecializationBoost(YIELD_PRODUCTION);

	push	1
	mov	ecx, edi
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	ebx, eax
$LN8@WeightProd:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	ebp
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	cmp	ebp, eax
	jl	$LL9@WeightProd

; 622  : 	}
; 623  : 
; 624  : #ifdef AUI_WARNING_FIXES
; 625  : 	for (uint iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)
; 626  : #else
; 627  : 	for(int iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)

	mov	edi, DWORD PTR _iWonderWeight$[esp+36]
$LN134@WeightProd:

; 648  : 					}
; 649  : 				}
; 650  : 			}
; 651  : 		}
; 652  : 	}
; 653  : 
; 654  : 	// Add weights to our weighted vector
; 655  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_MILITARY_TRAINING, iMilitaryTrainingWeight);

	mov	eax, DWORD PTR [esi+128]
	add	esi, 120				; 00000078H
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN60@WeightProd
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN60@WeightProd:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN135@WeightProd
	mov	ecx, DWORD PTR _iMilitaryTrainingWeight$[esp+40]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], ecx
$LN135@WeightProd:
	mov	ebp, 1
	add	DWORD PTR [esi+4], ebp

; 656  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_EMERGENCY_UNITS, iEmergencyUnitWeight);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN74@WeightProd
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN74@WeightProd:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN136@WeightProd
	mov	ecx, DWORD PTR _iEmergencyUnitWeight$[esp+40]
	mov	DWORD PTR [eax], ebp
	mov	DWORD PTR [eax+4], ecx
$LN136@WeightProd:
	add	DWORD PTR [esi+4], ebp

; 657  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_MILITARY_NAVAL, iSeaWeight);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN88@WeightProd
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN88@WeightProd:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN137@WeightProd
	mov	ecx, DWORD PTR _iSeaWeight$[esp+40]
	mov	DWORD PTR [eax], 2
	mov	DWORD PTR [eax+4], ecx
$LN137@WeightProd:
	add	DWORD PTR [esi+4], ebp

; 658  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_WONDER, iWonderWeight);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN102@WeightProd
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN102@WeightProd:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN105@WeightProd
	mov	DWORD PTR [eax], 3
	mov	DWORD PTR [eax+4], edi
$LN105@WeightProd:
	add	DWORD PTR [esi+4], ebp

; 659  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_SPACESHIP, iSpaceshipWeight);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN116@WeightProd
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN116@WeightProd:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN119@WeightProd
	mov	DWORD PTR [eax], 4
	mov	DWORD PTR [eax+4], ebx
$LN119@WeightProd:
	add	DWORD PTR [esi+4], ebp

; 660  : 
; 661  : 	return iMilitaryTrainingWeight + iEmergencyUnitWeight + iSeaWeight + iWonderWeight + iSpaceshipWeight;

	lea	eax, DWORD PTR [ebx+edi]
	add	eax, DWORD PTR _iSeaWeight$[esp+40]
	pop	edi
	add	eax, DWORD PTR _iEmergencyUnitWeight$[esp+36]
	pop	esi
	add	eax, DWORD PTR _iMilitaryTrainingWeight$[esp+32]
	pop	ebp
	pop	ebx

; 662  : }

	add	esp, 24					; 00000018H
	ret	8
?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z ENDP ; CvCitySpecializationAI::WeightProductionSubtypes
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::sort_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Sort_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::sort_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??1CvCitySpecializationXMLEntries@@QAE@XZ	; CvCitySpecializationXMLEntries::~CvCitySpecializationXMLEntries
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??1CvCitySpecializationXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationXMLEntries@@QAE@XZ$0
__ehfuncinfo$??1CvCitySpecializationXMLEntries@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvCitySpecializationXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ??1CvCitySpecializationXMLEntries@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvCitySpecializationXMLEntries@@QAE@XZ PROC		; CvCitySpecializationXMLEntries::~CvCitySpecializationXMLEntries, COMDAT
; _this$ = ecx

; 139  : {

	push	-1
	push	__ehhandler$??1CvCitySpecializationXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+24], esi
	xor	edi, edi
	mov	DWORD PTR __$EHRec$[esp+32], edi

; 140  : 	DeleteArray();

	call	?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ ; CvCitySpecializationXMLEntries::DeleteArray

; 141  : }

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, edi
	je	SHORT $LN9@CvCitySpec@2
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@CvCitySpec@2:
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], edi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvCitySpecializationXMLEntries@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
__ehhandler$??1CvCitySpecializationXMLEntries@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvCitySpecializationXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvCitySpecializationXMLEntries@@QAE@XZ ENDP		; CvCitySpecializationXMLEntries::~CvCitySpecializationXMLEntries
PUBLIC	?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::WeightSpecializations
EXTRN	?GetTotalLandDisputeLevel@CvDiplomacyAI@@QAEHXZ:PROC ; CvDiplomacyAI::GetTotalLandDisputeLevel
EXTRN	?getNumTiles@CvArea@@QBEHXZ:PROC		; CvArea::getNumTiles
EXTRN	?IsUsingStrategy@CvEconomicAI@@QAE_NW4EconomicAIStrategyTypes@@@Z:PROC ; CvEconomicAI::IsUsingStrategy
EXTRN	?GetEconomicAI@CvPlayer@@QBEPAVCvEconomicAI@@XZ:PROC ; CvPlayer::GetEconomicAI
EXTRN	?GetNumUnitsWithUnitAI@CvPlayer@@QAEHW4UnitAITypes@@_N1@Z:PROC ; CvPlayer::GetNumUnitsWithUnitAI
EXTRN	?getNumCities@CvPlayer@@QBEHXZ:PROC		; CvPlayer::getNumCities
EXTRN	?getNumUnownedTiles@CvArea@@QBEHXZ:PROC		; CvArea::getNumUnownedTiles
EXTRN	?getArea@CvMap@@QAEPAVCvArea@@H@Z:PROC		; CvMap::getArea
EXTRN	?getArea@CvCity@@QBEHXZ:PROC			; CvCity::getArea
EXTRN	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z:PROC ; CvFlavorManager::GetIndividualFlavor
EXTRN	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ:PROC ; CvPlayer::GetFlavorManager
; Function compile flags: /Ogtpy
;	COMDAT ?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_iFoodYieldWeight$ = -36				; size = 4
_iGrandStrategyLoop$225723 = -32			; size = 4
_iFlavorSpaceship$225696 = -32				; size = 4
_iFlavorExpansion$225692 = -28				; size = 4
_iFlavorWonder$225693 = -24				; size = 4
_iFlavorGold$225694 = -20				; size = 4
_iFlavorScience$225695 = -16				; size = 4
_iNumUnownedTiles$225713 = -12				; size = 4
$T238399 = -8						; size = 4
_iGeneralEconomicWeight$ = -8				; size = 4
_iNumSettlers$225715 = -4				; size = 4
_iProductionYieldWeight$ = -4				; size = 4
?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ PROC ; CvCitySpecializationAI::WeightSpecializations, COMDAT
; _this$ = ecx

; 427  : {

	sub	esp, 36					; 00000024H
	push	ebx
	mov	ebx, ecx
	push	esi

; 428  : 	int iFoodYieldWeight = 0;

	xor	esi, esi

; 429  : 	int iProductionYieldWeight = 0;
; 430  : 	int iGoldYieldWeight = 0;
; 431  : 	int iScienceYieldWeight = 0;
; 432  : 	int iGeneralEconomicWeight = 0;
; 433  : 
; 434  : 	// Clear old weights
; 435  : 	m_YieldWeights.clear();

	mov	DWORD PTR [ebx+48], esi

; 436  : 	m_ProductionSubtypeWeights.clear();

	mov	DWORD PTR [ebx+124], esi

; 437  : 
; 438  : 	// Must have a capital to do any specialization
; 439  : 	if(m_pPlayer->getCapitalCity() != NULL)

	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _iFoodYieldWeight$[esp+44], esi
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	test	eax, eax
	je	$LN14@WeightSpec

; 440  : 	{
; 441  : 		int iFlavorExpansion = 0;
; 442  : 		int iFlavorWonder = 0;
; 443  : 		int iFlavorGold = 0;
; 444  : 		int iFlavorScience = 0;
; 445  : 		int iFlavorSpaceship = 0;
; 446  : 
; 447  : 		iFlavorExpansion = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_EXPANSION"));

	push	esi
	push	OFFSET $SG225698
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR [ebx]
	push	eax
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor

; 448  : 		if(iFlavorExpansion < 0) iFlavorExpansion = 0;

	cmp	eax, esi
	mov	DWORD PTR _iFlavorExpansion$225692[esp+44], eax
	jge	SHORT $LN13@WeightSpec
	mov	DWORD PTR _iFlavorExpansion$225692[esp+44], esi
$LN13@WeightSpec:

; 449  : 		iFlavorWonder = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_WONDER"));

	push	esi
	push	OFFSET $SG225701
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR [ebx]
	push	eax
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor

; 450  : 		if(iFlavorWonder < 0) iFlavorWonder = 0;

	cmp	eax, esi
	mov	DWORD PTR _iFlavorWonder$225693[esp+44], eax
	jge	SHORT $LN12@WeightSpec
	mov	DWORD PTR _iFlavorWonder$225693[esp+44], esi
$LN12@WeightSpec:

; 451  : 		iFlavorGold = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_GOLD"));

	push	esi
	push	OFFSET $SG225704
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR [ebx]
	push	eax
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor

; 452  : 		if(iFlavorGold < 0) iFlavorGold = 0;

	cmp	eax, esi
	mov	DWORD PTR _iFlavorGold$225694[esp+44], eax
	jge	SHORT $LN11@WeightSpec
	mov	DWORD PTR _iFlavorGold$225694[esp+44], esi
$LN11@WeightSpec:

; 453  : 		iFlavorScience = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_SCIENCE"));

	push	esi
	push	OFFSET $SG225707
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR [ebx]
	push	eax
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor

; 454  : 		if(iFlavorScience < 0) iFlavorScience = 0;

	cmp	eax, esi
	mov	DWORD PTR _iFlavorScience$225695[esp+44], eax
	jge	SHORT $LN10@WeightSpec
	mov	DWORD PTR _iFlavorScience$225695[esp+44], esi
$LN10@WeightSpec:

; 455  : 		iFlavorSpaceship = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_SPACESHIP"));

	push	esi
	push	OFFSET $SG225710
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR [ebx]
	push	eax
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor

; 456  : 		if(iFlavorSpaceship < 0) iFlavorSpaceship = 0;

	cmp	eax, esi
	mov	DWORD PTR _iFlavorSpaceship$225696[esp+44], eax
	jge	SHORT $LN9@WeightSpec
	mov	DWORD PTR _iFlavorSpaceship$225696[esp+44], esi
$LN9@WeightSpec:

; 457  : 
; 458  : 		// COMPUTE NEW WEIGHTS
; 459  : 
; 460  : 		//   Food
; 461  : 		CvArea* pArea = GC.getMap().getArea(m_pPlayer->getCapitalCity()->getArea());

	mov	ecx, DWORD PTR [ebx]
	push	ebp
	push	edi
	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	ecx, eax
	call	?getArea@CvCity@@QBEHXZ			; CvCity::getArea
	push	eax
	mov	ecx, edi
	call	?getArea@CvMap@@QAEPAVCvArea@@H@Z	; CvMap::getArea
	mov	edi, eax

; 462  : 		int iNumUnownedTiles = pArea->getNumUnownedTiles();

	mov	ecx, edi
	call	?getNumUnownedTiles@CvArea@@QBEHXZ	; CvArea::getNumUnownedTiles

; 463  : 		int iNumCities = m_pPlayer->getNumCities();

	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _iNumUnownedTiles$225713[esp+52], eax
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities

; 464  : 		int iNumSettlers = m_pPlayer->GetNumUnitsWithUnitAI(UNITAI_SETTLE, true);

	mov	ecx, DWORD PTR [ebx]
	push	1
	push	1
	push	1
	mov	ebp, eax
	call	?GetNumUnitsWithUnitAI@CvPlayer@@QAEHW4UnitAITypes@@_N1@Z ; CvPlayer::GetNumUnitsWithUnitAI

; 465  : 		EconomicAIStrategyTypes eStrategy = (EconomicAIStrategyTypes) GC.getInfoTypeForString("ECONOMICAISTRATEGY_EARLY_EXPANSION");

	push	esi
	push	OFFSET $SG225718
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _iNumSettlers$225715[esp+60], eax
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString

; 466  : 		if(eStrategy != NO_ECONOMICAISTRATEGY && m_pPlayer->GetEconomicAI()->IsUsingStrategy(eStrategy))

	cmp	eax, -1
	je	SHORT $LN8@WeightSpec
	mov	ecx, DWORD PTR [ebx]
	push	eax
	call	?GetEconomicAI@CvPlayer@@QBEPAVCvEconomicAI@@XZ ; CvPlayer::GetEconomicAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvEconomicAI@@QAE_NW4EconomicAIStrategyTypes@@@Z ; CvEconomicAI::IsUsingStrategy
	test	al, al
	je	SHORT $LN8@WeightSpec

; 467  : 		{
; 468  : 			iFoodYieldWeight += GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION() /* 500 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2236
	mov	DWORD PTR _iFoodYieldWeight$[esp+52], eax
$LN8@WeightSpec:

; 469  : 		}
; 470  : 		iFoodYieldWeight += iFlavorExpansion * GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION() /* 5 */;
; 471  : 		iFoodYieldWeight += (iNumUnownedTiles * 100) / pArea->getNumTiles() * GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED() /* 5 */;;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2224
	mov	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2220
	mov	DWORD PTR $T238399[esp+52], ecx
	mov	ecx, edi
	call	?getNumTiles@CvArea@@QBEHXZ		; CvArea::getNumTiles
	imul	esi, DWORD PTR _iFlavorExpansion$225692[esp+52]
	mov	ecx, eax
	mov	eax, DWORD PTR _iNumUnownedTiles$225713[esp+52]
	imul	eax, 100				; 00000064H
	cdq
	idiv	ecx
	add	esi, DWORD PTR _iFoodYieldWeight$[esp+52]

; 472  : 		iFoodYieldWeight += iNumCities * GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES() /* -50 */;
; 473  : 		iFoodYieldWeight += iNumSettlers * GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS() /* -40 */;

	mov	ecx, DWORD PTR _iNumSettlers$225715[esp+52]
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2232
	imul	edx, ecx

; 474  : 		if((iNumCities + iNumSettlers) == 1)

	add	ecx, ebp
	imul	eax, DWORD PTR $T238399[esp+52]
	add	esi, eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2228
	imul	eax, ebp
	add	eax, esi
	add	eax, edx
	mov	DWORD PTR _iFoodYieldWeight$[esp+52], eax
	cmp	ecx, 1
	jne	SHORT $LN7@WeightSpec

; 475  : 		{
; 476  : 			iFoodYieldWeight *= 3;   // Really want to get up over 1 city

	lea	ecx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR _iFoodYieldWeight$[esp+52], ecx
	mov	eax, ecx
$LN7@WeightSpec:

; 477  : 		}
; 478  : 		if(iFoodYieldWeight < 0) iFoodYieldWeight = 0;

	test	eax, eax
	jge	SHORT $LN6@WeightSpec
	mov	DWORD PTR _iFoodYieldWeight$[esp+52], 0
$LN6@WeightSpec:

; 479  : 
; 480  : 		//   Production
; 481  : 		iProductionYieldWeight = WeightProductionSubtypes(iFlavorWonder, iFlavorSpaceship);

	mov	edx, DWORD PTR _iFlavorSpaceship$225696[esp+52]
	mov	eax, DWORD PTR _iFlavorWonder$225693[esp+52]
	push	edx
	push	eax
	mov	ecx, ebx
	call	?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z ; CvCitySpecializationAI::WeightProductionSubtypes

; 482  : 
; 483  : 		//   Trade
; 484  : 		int iLandDisputeLevel = m_pPlayer->GetDiplomacyAI()->GetTotalLandDisputeLevel();

	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _iProductionYieldWeight$[esp+52], eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetTotalLandDisputeLevel@CvDiplomacyAI@@QAEHXZ ; CvDiplomacyAI::GetTotalLandDisputeLevel

; 485  : 		iGoldYieldWeight += iFlavorGold * GC.getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD() /* 20 */;
; 486  : 		iGoldYieldWeight += iLandDisputeLevel * GC.getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE() /* 10 */;

	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2292
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2288
	imul	edi, eax
	imul	ecx, DWORD PTR _iFlavorGold$225694[esp+52]

; 487  : 
; 488  : 		//   Science
; 489  : 		iScienceYieldWeight += iFlavorScience * GC.getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE() /* 20 */;
; 490  : 		iScienceYieldWeight += iFlavorSpaceship * GC.getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP() /* 10 */;

	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2300
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2296
	imul	ebp, DWORD PTR _iFlavorSpaceship$225696[esp+52]
	imul	edx, DWORD PTR _iFlavorScience$225695[esp+52]

; 491  : 
; 492  : 		//   General Economics
; 493  : 		iGeneralEconomicWeight = GC.getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT() /* 200 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2216
	add	edi, ecx

; 494  : 
; 495  : 		//   Add in any contribution from the current grand strategy
; 496  : #ifdef AUI_WARNING_FIXES
; 497  : 		for (uint iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)
; 498  : #else
; 499  : 		for(int iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	add	ebp, edx
	mov	DWORD PTR _iGeneralEconomicWeight$[esp+52], eax
	mov	DWORD PTR _iGrandStrategyLoop$225723[esp+52], 0
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	test	eax, eax
	jle	SHORT $LN3@WeightSpec
	npad	5
$LL131@WeightSpec:

; 500  : #endif
; 501  : 		{
; 502  : 			CvAIGrandStrategyXMLEntry* grandStrategy = GC.getAIGrandStrategyInfo((AIGrandStrategyTypes)iGrandStrategyLoop);

	mov	ecx, DWORD PTR _iGrandStrategyLoop$225723[esp+52]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo
	mov	esi, eax

; 503  : 			if(grandStrategy)

	test	esi, esi
	je	SHORT $LN4@WeightSpec

; 504  : 			{
; 505  : #ifdef AUI_WARNING_FIXES
; 506  : 				if(iGrandStrategyLoop == (uint)m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy())
; 507  : #else
; 508  : 				if(iGrandStrategyLoop == m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy())

	mov	ecx, DWORD PTR [ebx]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	DWORD PTR _iGrandStrategyLoop$225723[esp+52], eax
	jne	SHORT $LN4@WeightSpec

; 509  : #endif
; 510  : 				{
; 511  : 					iFoodYieldWeight +=	grandStrategy->GetSpecializationBoost(YIELD_FOOD);

	push	0
	mov	ecx, esi
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	DWORD PTR _iFoodYieldWeight$[esp+52], eax

; 512  : 					iGoldYieldWeight += grandStrategy->GetSpecializationBoost(YIELD_GOLD);

	push	2
	mov	ecx, esi
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost

; 513  : 					iScienceYieldWeight += grandStrategy->GetSpecializationBoost(YIELD_SCIENCE);

	push	3
	mov	ecx, esi
	add	edi, eax
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	ebp, eax
$LN4@WeightSpec:
	inc	DWORD PTR _iGrandStrategyLoop$225723[esp+52]
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	cmp	DWORD PTR _iGrandStrategyLoop$225723[esp+52], eax
	jl	SHORT $LL131@WeightSpec
$LN3@WeightSpec:

; 514  : 				}
; 515  : 			}
; 516  : 		}
; 517  : 
; 518  : 		// Add weights to our weighted vector
; 519  : 		m_YieldWeights.push_back(YIELD_FOOD, iFoodYieldWeight);

	mov	eax, DWORD PTR [ebx+52]
	lea	esi, DWORD PTR [ebx+44]
	mov	BYTE PTR [esi+52], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN63@WeightSpec
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
$LN63@WeightSpec:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN66@WeightSpec
	mov	ecx, DWORD PTR _iFoodYieldWeight$[esp+52]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], ecx
$LN66@WeightSpec:
	inc	DWORD PTR [esi+4]

; 520  : 		m_YieldWeights.push_back(YIELD_PRODUCTION, iProductionYieldWeight);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+52], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN77@WeightSpec
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
$LN77@WeightSpec:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN133@WeightSpec
	mov	ecx, DWORD PTR _iProductionYieldWeight$[esp+52]
	mov	DWORD PTR [eax], 1
	mov	DWORD PTR [eax+4], ecx
$LN133@WeightSpec:
	inc	DWORD PTR [esi+4]

; 521  : 		m_YieldWeights.push_back(YIELD_GOLD, iGoldYieldWeight);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+52], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN91@WeightSpec
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
$LN91@WeightSpec:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN94@WeightSpec
	mov	DWORD PTR [eax], 2
	mov	DWORD PTR [eax+4], edi
$LN94@WeightSpec:
	inc	DWORD PTR [esi+4]

; 522  : 		m_YieldWeights.push_back(YIELD_SCIENCE, iScienceYieldWeight);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+52], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN105@WeightSpec
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
$LN105@WeightSpec:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN108@WeightSpec
	mov	DWORD PTR [eax], 3
	mov	DWORD PTR [eax+4], ebp
$LN108@WeightSpec:
	inc	DWORD PTR [esi+4]

; 523  : 		m_YieldWeights.push_back(NO_YIELD, iGeneralEconomicWeight);

	mov	eax, DWORD PTR [esi+8]
	pop	edi
	mov	BYTE PTR [esi+52], 0
	pop	ebp
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN119@WeightSpec
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
$LN119@WeightSpec:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN122@WeightSpec
	mov	edx, DWORD PTR _iGeneralEconomicWeight$[esp+44]
	mov	DWORD PTR [eax], -1
	mov	DWORD PTR [eax+4], edx
$LN122@WeightSpec:
	inc	DWORD PTR [esi+4]
	pop	esi

; 524  : 
; 525  : 		// Log results
; 526  : 		LogSpecializationWeights();

	mov	ecx, ebx
	pop	ebx

; 527  : 	}
; 528  : 
; 529  : 	return;
; 530  : }

	add	esp, 36					; 00000024H

; 524  : 
; 525  : 		// Log results
; 526  : 		LogSpecializationWeights();

	jmp	?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::LogSpecializationWeights
$LN14@WeightSpec:
	pop	esi
	pop	ebx

; 527  : 	}
; 528  : 
; 529  : 	return;
; 530  : }

	add	esp, 36					; 00000024H
	ret	0
?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ ENDP ; CvCitySpecializationAI::WeightSpecializations
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z
_TEXT	SEGMENT
__Mid$228160 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort:
	test	esi, esi
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$228160[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$228160[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$228160[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -8					; fffffff8H
	and	edx, -8					; fffffff8H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$228160[esp+36]
$LN26@Sort:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort
$LN25@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -8					; fffffff8H
	cmp	eax, 8
	jle	SHORT $LN10@Sort
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z
_TEXT	SEGMENT
__Mid$228231 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@2
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort@2:
	test	esi, esi
	jle	SHORT $LN6@Sort@2

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$228231[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$228231[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$228231[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -8					; fffffff8H
	and	edx, -8					; fffffff8H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort@2
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort@2
$LN5@Sort@2:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$228231[esp+36]
$LN26@Sort@2:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort@2
$LN25@Sort@2:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort@2

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort@2:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort@2:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@2

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -8					; fffffff8H
	cmp	eax, 8
	jle	SHORT $LN10@Sort@2
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort@2:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Sort_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z
_TEXT	SEGMENT
__Mid$228302 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@3
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort@3:
	test	esi, esi
	jle	SHORT $LN6@Sort@3

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$228302[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$228302[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$228302[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -8					; fffffff8H
	and	edx, -8					; fffffff8H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort@3
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort@3
$LN5@Sort@3:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$228302[esp+36]
$LN26@Sort@3:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort@3
$LN25@Sort@3:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort@3

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort@3:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@3

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -8					; fffffff8H
	cmp	eax, 8
	jle	SHORT $LN10@Sort@3
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort@3:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::sort<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::sort<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 3
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::sort<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 3
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 3
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ	; CvWeightedVector<int,4,1>::SortItems
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ PROC	; CvWeightedVector<int,4,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ ENDP	; CvWeightedVector<int,4,1>::SortItems
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXXZ ; CvWeightedVector<enum YieldTypes,5,1>::SortItems
; Function compile flags: /Ogtpy
;	COMDAT ?SortItems@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXXZ PROC ; CvWeightedVector<enum YieldTypes,5,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@W4YieldTypes@@$04$00@@QAEXXZ ENDP ; CvWeightedVector<enum YieldTypes,5,1>::SortItems
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXXZ ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::SortItems
; Function compile flags: /Ogtpy
;	COMDAT ?SortItems@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXXZ PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAEXXZ ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::SortItems
_TEXT	ENDS
PUBLIC	?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z ; CvCitySpecializationAI::SelectProductionSpecialization
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
;	COMDAT ?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z
_TEXT	SEGMENT
tv252 = -12						; size = 4
_elem$238879 = -8					; size = 8
_elem$238901 = -8					; size = 8
_iReductionAmount$ = 8					; size = 4
?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z PROC ; CvCitySpecializationAI::SelectProductionSpecialization, COMDAT
; _this$ = ecx

; 1027 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 1028 : 	CitySpecializationTypes eSpecialization;
; 1029 : 
; 1030 : 	// Find highest weighted subtype
; 1031 : 	m_ProductionSubtypeWeights.SortItems();

	mov	eax, DWORD PTR [esi+120]
	mov	ecx, DWORD PTR [esi+124]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	push	edi
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>

; 1032 : 
; 1033 : 	ProductionSpecializationSubtypes eSubtype = m_ProductionSubtypeWeights.GetElement(0);

	mov	eax, DWORD PTR [esi+120]
	mov	ebx, DWORD PTR [eax]
	add	esp, 12					; 0000000cH

; 1034 : 
; 1035 : 	int iNumSubTypes = 0;
; 1036 : 	eSpecialization = GC.GetGameCitySpecializations()->GetFirstSpecializationForYield(YIELD_PRODUCTION);

	push	1
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	ebp, ebp
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, eax
	call	?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield
	mov	edi, eax

; 1037 : 	while(iNumSubTypes != (int)eSubtype)

	test	ebx, ebx
	je	SHORT $LN5@SelectProd
	mov	DWORD PTR tv252[esp+28], ebx
	mov	ebp, ebx
	npad	6
$LL6@SelectProd:

; 1038 : 	{
; 1039 : 		eSpecialization = GC.GetGameCitySpecializations()->GetNextSpecializationForYield();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+8]
	inc	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR [eax+16]
	sub	edi, edx
	sar	edi, 2
	cmp	ecx, edi
	jge	SHORT $LN22@SelectProd
	mov	edi, DWORD PTR [eax+20]
$LL24@SelectProd:
	mov	ebx, DWORD PTR [edx+ecx*4]
	cmp	DWORD PTR [ebx+264], edi
	je	SHORT $LN59@SelectProd
	inc	ecx
	mov	DWORD PTR [eax+16], ecx
	mov	ebx, DWORD PTR [eax+8]
	sub	ebx, edx
	sar	ebx, 2
	cmp	ecx, ebx
	jl	SHORT $LL24@SelectProd
$LN22@SelectProd:
	or	edi, -1
$LN25@SelectProd:

; 1037 : 	while(iNumSubTypes != (int)eSubtype)

	sub	DWORD PTR tv252[esp+28], 1
	jne	SHORT $LL6@SelectProd
	mov	ebx, ebp
$LN5@SelectProd:

; 1040 : 		iNumSubTypes++;
; 1041 : 		FAssertMsg(eSpecialization != NO_CITY_SPECIALIZATION, "Production specializations in XML doesn't match NUM_PRODUCTION_SPECIALIZATION_SUBTYPES");
; 1042 : 	}
; 1043 : 
; 1044 : 	// If this is the wonder type, make sure we have a city to build it
; 1045 : 	if(eSubtype == GetWonderSubtype())

	mov	ecx, esi
	call	?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ; CvCitySpecializationAI::GetWonderSubtype
	cmp	ebx, eax
	jne	SHORT $LN4@SelectProd

; 1046 : 	{
; 1047 : 		CvCity* pCity = FindBestWonderCity();

	mov	ecx, esi
	call	?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ ; CvCitySpecializationAI::FindBestWonderCity

; 1048 : 		if(pCity != NULL)

	test	eax, eax
	je	SHORT $LN3@SelectProd

; 1049 : 		{
; 1050 : 			m_iWonderCityID = pCity->GetID();

	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR [esi+200], ecx

; 1051 : 			m_bWonderChosen = true;

	mov	BYTE PTR [esi+208], 1

; 1052 : 		}
; 1053 : 
; 1054 : 		// No wonder city, substitute default specialization instead
; 1055 : 		else

	jmp	SHORT $LN2@SelectProd
$LN59@SelectProd:

; 1038 : 	{
; 1039 : 		eSpecialization = GC.GetGameCitySpecializations()->GetNextSpecializationForYield();

	mov	edi, ecx
	jmp	SHORT $LN25@SelectProd
$LN3@SelectProd:

; 1056 : 		{
; 1057 : 			eSpecialization = GetEconomicDefaultSpecialization();

	mov	ecx, esi
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	mov	edi, eax
$LN2@SelectProd:

; 1058 : 		}
; 1059 : 		iReductionAmount = m_ProductionSubtypeWeights.GetWeight(0);

	mov	eax, DWORD PTR [esi+120]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _iReductionAmount$[esp+24]
	mov	DWORD PTR [ecx], eax

; 1071 : 	}
; 1072 : 
; 1073 : 	return eSpecialization;

	mov	eax, edi
	pop	edi
	mov	DWORD PTR _elem$238879[esp+24], edx
	mov	edx, DWORD PTR [esi+120]
	pop	esi
	pop	ebp
	mov	DWORD PTR [edx+4], 0
	pop	ebx

; 1074 : }

	add	esp, 12					; 0000000cH
	ret	4
$LN4@SelectProd:

; 1060 : 		m_ProductionSubtypeWeights.SetWeight(0, 0);
; 1061 : 	}
; 1062 : 
; 1063 : 	else
; 1064 : 	{
; 1065 : 		// Reduce weight for this subtype based on dividing original weight by <num of this type + 1>
; 1066 : 		int iOldWeight = m_ProductionSubtypeWeights.GetWeight(0);

	mov	eax, DWORD PTR [esi+120]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _elem$238901[esp+28], ecx
	mov	ecx, DWORD PTR [eax+4]

; 1067 : 		m_iNumSpecializationsForThisSubtype[(int)iNumSubTypes]++;

	inc	DWORD PTR [esi+ebp*4+168]
	mov	edx, DWORD PTR [esi+ebp*4+168]

; 1068 : 		int iNewWeight = iOldWeight * m_iNumSpecializationsForThisSubtype[(int)iNumSubTypes] / (m_iNumSpecializationsForThisSubtype[(int)iNumSubTypes] + 1);

	mov	eax, edx
	imul	eax, ecx
	lea	ebx, DWORD PTR [edx+1]
	cdq
	idiv	ebx

; 1069 : 		iReductionAmount = iOldWeight - iNewWeight;

	mov	edx, DWORD PTR _iReductionAmount$[esp+24]
	sub	ecx, eax
	mov	DWORD PTR [edx], ecx

; 1070 : 		m_ProductionSubtypeWeights.SetWeight(0, iNewWeight);

	mov	ecx, DWORD PTR [esi+120]
	mov	DWORD PTR [ecx+4], eax

; 1071 : 	}
; 1072 : 
; 1073 : 	return eSpecialization;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1074 : }

	add	esp, 12					; 0000000cH
	ret	4
?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z ENDP ; CvCitySpecializationAI::SelectProductionSpecialization
_TEXT	ENDS
PUBLIC	?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::SelectSpecializations
EXTRN	?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z:PROC ; CvWonderProductionAI::IsWonder
EXTRN	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ:PROC ; CvPlayer::GetWonderProductionAI
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ:PROC ; CvCity::getProductionBuilding
EXTRN	?GetNumPuppetCities@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetNumPuppetCities
; Function compile flags: /Ogtpy
;	COMDAT ?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_iReductionAmount$ = -24				; size = 4
_pkProductionBuildingInfo$ = -24			; size = 4
_elem$239064 = -20					; size = 8
_elem$239050 = -20					; size = 8
_eSpecialization$ = -20					; size = 4
$T238919 = -20						; size = 4
_iSpecializationsToAssign$ = -12			; size = 4
_elem$239203 = -8					; size = 8
_elem$239156 = -8					; size = 8
?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ PROC ; CvCitySpecializationAI::SelectSpecializations, COMDAT
; _this$ = ecx

; 942  : {

	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 943  : 	CitySpecializationTypes eSpecialization;
; 944  : 	unsigned int iSpecializationsToAssign = (unsigned int)m_pPlayer->getNumCities() - (unsigned int) m_pPlayer->GetNumPuppetCities() + 1;

	mov	ecx, DWORD PTR [esi]
	push	edi
	call	?GetNumPuppetCities@CvPlayer@@QBEHXZ	; CvPlayer::GetNumPuppetCities
	mov	ecx, DWORD PTR [esi]
	mov	edi, 1
	sub	edi, eax
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities

; 945  : 	int iOldWeight;
; 946  : 	int iNewWeight;
; 947  : 	int iReductionAmount;
; 948  : 
; 949  : 	m_SpecializationsNeeded.clear();

	mov	ecx, DWORD PTR [esi+20]
	lea	ebx, DWORD PTR [esi+16]
	add	eax, edi
	mov	DWORD PTR _iSpecializationsToAssign$[esp+40], eax
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], ecx
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [ecx+4], ecx
	xor	ebp, ebp
	mov	DWORD PTR [ebx+8], ebp
	cmp	eax, DWORD PTR [ebx+4]
	je	SHORT $LN18@SelectSpec
	npad	2
$LL20@SelectSpec:
	mov	edi, DWORD PTR [eax]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, edi
	cmp	edi, DWORD PTR [ebx+4]
	jne	SHORT $LL20@SelectSpec
$LN18@SelectSpec:

; 950  : 	m_bWonderChosen = false;

	mov	BYTE PTR [esi+208], 0

; 951  : 
; 952  : 	// Clear info about what we've picked
; 953  : 	for(int iI = 0; iI < NUM_SPECIALIZATION_YIELDS; iI++)
; 954  : 	{
; 955  : 		m_iNumSpecializationsForThisYield[iI] = 0;

	mov	DWORD PTR [esi+100], ebp
	mov	DWORD PTR [esi+104], ebp
	mov	DWORD PTR [esi+108], ebp
	mov	DWORD PTR [esi+112], ebp
	mov	DWORD PTR [esi+116], ebp

; 956  : 	}
; 957  : 	for(int iI = 0; iI < NUM_PRODUCTION_SPECIALIZATION_SUBTYPES; iI++)
; 958  : 	{
; 959  : 		m_iNumSpecializationsForThisSubtype[iI] = 0;

	mov	DWORD PTR [esi+168], ebp
	mov	DWORD PTR [esi+172], ebp
	mov	DWORD PTR [esi+176], ebp
	mov	DWORD PTR [esi+180], ebp
	mov	DWORD PTR [esi+184], ebp

; 960  : 	}
; 961  : 
; 962  : 	CvCity* pkWonderBuildCity = GetWonderBuildCity();

	mov	eax, DWORD PTR [esi+200]
	xor	edi, edi
	cmp	eax, -1
	je	SHORT $LN33@SelectSpec
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	edi, eax
$LN33@SelectSpec:

; 963  : 	CvBuildingEntry* pkProductionBuildingInfo = NULL;

	mov	DWORD PTR _pkProductionBuildingInfo$[esp+40], ebp

; 964  : 	if(NULL != pkWonderBuildCity && pkWonderBuildCity->getProductionBuilding() != NO_BUILDING)

	cmp	edi, ebp
	je	SHORT $LN181@SelectSpec
	mov	ecx, edi
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	cmp	eax, -1
	je	SHORT $LN181@SelectSpec

; 965  : 	{
; 966  : 		pkProductionBuildingInfo = GC.getBuildingInfo(pkWonderBuildCity->getProductionBuilding());

	mov	ecx, edi
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkProductionBuildingInfo$[esp+40], eax
$LN181@SelectSpec:

; 967  : 	}
; 968  : 
; 969  : 	// Do we have a wonder build in progress that we can't interrupt?
; 970  : 	if(!m_bInterruptWonders && NULL != pkProductionBuildingInfo && m_pPlayer->GetWonderProductionAI()->IsWonder(*pkProductionBuildingInfo))

	cmp	BYTE PTR [esi+192], 0
	jne	$LN182@SelectSpec
	mov	eax, DWORD PTR _pkProductionBuildingInfo$[esp+40]
	cmp	eax, ebp
	je	$LN182@SelectSpec
	mov	ecx, DWORD PTR [esi]
	push	eax
	call	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ ; CvPlayer::GetWonderProductionAI
	mov	ecx, eax
	call	?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z ; CvWonderProductionAI::IsWonder
	test	al, al
	je	$LN182@SelectSpec

; 971  : 	{
; 972  : 		m_SpecializationsNeeded.push_back(GetWonderSpecialization());

	mov	ecx, esi
	call	?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetWonderSpecialization
	mov	edi, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR $T238919[esp+40], eax
	lea	eax, DWORD PTR $T238919[esp+40]
	push	eax
	push	ecx
	push	edi
	mov	ecx, ebx
	call	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
	push	1
	mov	ecx, ebx
	mov	ebp, eax
	call	?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize
	mov	DWORD PTR [edi+4], ebp
	mov	edx, DWORD PTR [ebp+4]
	mov	DWORD PTR [edx], ebp

; 973  : 		m_iNumSpecializationsForThisYield[1 + (int)YIELD_PRODUCTION]++;
; 974  : 		iOldWeight = m_YieldWeights.GetWeight(YIELD_PRODUCTION);

	mov	eax, DWORD PTR [esi+44]
	inc	DWORD PTR [esi+108]
	mov	ecx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [eax+12]
	mov	DWORD PTR _elem$239050[esp+40], ecx

; 975  : 		iReductionAmount = m_ProductionSubtypeWeights.GetWeight(GetWonderSubtype());

	mov	ecx, esi
	call	?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ; CvCitySpecializationAI::GetWonderSubtype
	mov	ecx, DWORD PTR [esi+120]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [ecx+eax*8+4]

; 976  : 		m_YieldWeights.SetWeight(YIELD_PRODUCTION, (iOldWeight - iReductionAmount));

	sub	edi, eax
	mov	DWORD PTR _iReductionAmount$[esp+40], eax
	mov	eax, DWORD PTR [esi+44]

; 977  : 
; 978  : 		// Only one wonder at a time, so zero out the weight for this subtype entirely
; 979  : 		m_ProductionSubtypeWeights.SetWeight(GetWonderSubtype(), 0);

	mov	ecx, esi
	mov	DWORD PTR _elem$239064[esp+40], edx
	mov	DWORD PTR [eax+12], edi
	call	?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ; CvCitySpecializationAI::GetWonderSubtype
	mov	ecx, DWORD PTR [esi+120]
	mov	DWORD PTR [ecx+eax*8+4], 0

; 980  : 		m_bWonderChosen = true;

	mov	BYTE PTR [esi+208], 1

; 981  : 	}
; 982  : 	else

	xor	ebp, ebp
	jmp	SHORT $LN157@SelectSpec
$LN182@SelectSpec:

; 983  : 	{
; 984  : 		m_iWonderCityID = -1;

	mov	DWORD PTR [esi+200], -1
$LN157@SelectSpec:

; 985  : 	}
; 986  : 
; 987  : 	// LOOP as many times as we have cities PLUS ONE
; 988  : 	while(m_SpecializationsNeeded.size() < iSpecializationsToAssign)

	mov	edx, DWORD PTR _iSpecializationsToAssign$[esp+40]
	cmp	DWORD PTR [esi+24], edx
	jae	$LN5@SelectSpec
	jmp	SHORT $LN6@SelectSpec
$LL178@SelectSpec:
	xor	ebp, ebp
$LN6@SelectSpec:

; 989  : 	{
; 990  : 		// Find highest weighted specialization
; 991  : 		m_YieldWeights.SortItems();

	mov	eax, DWORD PTR [esi+44]
	mov	ecx, DWORD PTR [esi+48]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>

; 992  : 
; 993  : 		// Mark that we need one city of this type
; 994  : 		YieldTypes eYield = m_YieldWeights.GetElement(0);

	mov	eax, DWORD PTR [esi+44]
	mov	edi, DWORD PTR [eax]
	add	esp, 12					; 0000000cH

; 995  : 		if(GC.GetGameCitySpecializations()->GetNumSpecializationsForYield(eYield) > 1)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, ecx
	sar	eax, 2
	xor	edx, edx
	cmp	eax, ebp
	jle	SHORT $LN4@SelectSpec
	npad	3
$LL93@SelectSpec:
	mov	ebp, DWORD PTR [ecx]
	cmp	DWORD PTR [ebp+264], edi
	jne	SHORT $LN92@SelectSpec
	inc	edx
$LN92@SelectSpec:
	add	ecx, 4
	sub	eax, 1
	jne	SHORT $LL93@SelectSpec
	cmp	edx, 1
	jle	SHORT $LN180@SelectSpec

; 996  : 		{
; 997  : 			if(eYield == YIELD_PRODUCTION)

	cmp	edi, 1
	jne	$LN130@SelectSpec

; 998  : 			{
; 999  : 				eSpecialization = SelectProductionSpecialization(iReductionAmount);

	lea	ecx, DWORD PTR _iReductionAmount$[esp+40]
	push	ecx
	mov	ecx, esi
	call	?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z ; CvCitySpecializationAI::SelectProductionSpecialization
	mov	DWORD PTR _eSpecialization$[esp+40], eax

; 1000 : 
; 1001 : 				iOldWeight = m_YieldWeights.GetWeight(0);

	mov	eax, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]

; 1002 : 				m_iNumSpecializationsForThisYield[1 + (int)eYield]++;

	inc	DWORD PTR [esi+108]

; 1003 : 				iNewWeight = iOldWeight - iReductionAmount;

	sub	eax, DWORD PTR _iReductionAmount$[esp+40]
	mov	DWORD PTR _elem$239156[esp+40], edx

; 1004 : 				m_YieldWeights.SetWeight(0, iNewWeight);
; 1005 : 			}
; 1006 : 			else
; 1007 : 			{
; 1008 : 				FAssertMsg(false, "Code does not support > 1 specialization for yields other than production.");
; 1009 : 			}
; 1010 : 		}
; 1011 : 		else

	jmp	SHORT $LN183@SelectSpec
$LN180@SelectSpec:
	xor	ebp, ebp
$LN4@SelectSpec:

; 1012 : 		{
; 1013 : 			eSpecialization = GC.GetGameCitySpecializations()->GetFirstSpecializationForYield(eYield);

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR [eax+20], edi
	mov	DWORD PTR [eax+16], ebp
	test	ecx, -4					; fffffffcH
	jle	SHORT $LN113@SelectSpec
	npad	8
$LL115@SelectSpec:
	mov	ecx, DWORD PTR [eax+16]
	mov	ebp, DWORD PTR [edx+ecx*4]
	cmp	DWORD PTR [ebp+264], edi
	je	SHORT $LN160@SelectSpec
	inc	ecx
	mov	DWORD PTR [eax+16], ecx
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	sar	ecx, 2
	cmp	DWORD PTR [eax+16], ecx
	jl	SHORT $LL115@SelectSpec
$LN113@SelectSpec:
	or	eax, -1
$LN116@SelectSpec:
	mov	DWORD PTR _eSpecialization$[esp+40], eax

; 1014 : 
; 1015 : 			// Reduce weight for this specialization based on dividing original weight by <num of this type + 1>
; 1016 : 			iOldWeight = m_YieldWeights.GetWeight(0);

	mov	eax, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]

; 1017 : 			m_iNumSpecializationsForThisYield[1 + (int)eYield]++;

	inc	DWORD PTR [esi+edi*4+104]
	mov	edi, DWORD PTR [esi+edi*4+104]

; 1018 : 			iNewWeight = iOldWeight * m_iNumSpecializationsForThisYield[1 + (int)eYield] / (m_iNumSpecializationsForThisYield[1 + (int)eYield] + 1);

	mov	eax, edi
	imul	eax, ecx
	mov	DWORD PTR _elem$239203[esp+40], edx
	cdq
	inc	edi
	idiv	edi
$LN183@SelectSpec:

; 1019 : 			m_YieldWeights.SetWeight(0, iNewWeight);

	mov	ecx, DWORD PTR [esi+44]
	mov	DWORD PTR [ecx+4], eax
$LN130@SelectSpec:

; 1020 : 		}
; 1021 : 		m_SpecializationsNeeded.push_back(eSpecialization);

	mov	edi, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [edi+4]
	lea	edx, DWORD PTR _eSpecialization$[esp+40]
	push	edx
	push	eax
	push	edi
	mov	ecx, ebx
	call	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
	push	1
	mov	ecx, ebx
	mov	ebp, eax
	call	?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize
	mov	edx, DWORD PTR _iSpecializationsToAssign$[esp+40]
	mov	DWORD PTR [edi+4], ebp
	mov	ecx, DWORD PTR [ebp+4]
	mov	DWORD PTR [ecx], ebp
	cmp	DWORD PTR [esi+24], edx
	jb	$LL178@SelectSpec
$LN5@SelectSpec:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1022 : 	}
; 1023 : }

	add	esp, 24					; 00000018H
	ret	0
$LN160@SelectSpec:

; 1012 : 		{
; 1013 : 			eSpecialization = GC.GetGameCitySpecializations()->GetFirstSpecializationForYield(eYield);

	mov	eax, ecx
	jmp	SHORT $LN116@SelectSpec
?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ ENDP ; CvCitySpecializationAI::SelectSpecializations
_TEXT	ENDS
PUBLIC	?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::AssignSpecializations
EXTRN	?isCoastal@CvCity@@QBE_NH@Z:PROC		; CvCity::isCoastal
EXTRN	?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z:PROC ; CvGlobals::getCitySpecializationInfo
EXTRN	?plot@CvCity@@QBEPAVCvPlot@@XZ:PROC		; CvCity::plot
EXTRN	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z:PROC ; CvCityStrategyAI::SetSpecialization
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$1
__ehfuncinfo$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_bCoastal$226658 = -133					; size = 1
_bAllGeneral$ = -133					; size = 1
tv2204 = -132						; size = 4
_eWonderSpecialiation$ = -132				; size = 4
_iI$ = -128						; size = 4
_it$ = -128						; size = 4
_iLoop$ = -124						; size = 4
_eYield$226657 = -120					; size = 4
_eType$226654 = -116					; size = 4
_citiesWithoutSpecialization$ = -112			; size = 12
_iBestDelta$226611 = -100				; size = 16
_cityData$ = -84					; size = 24
_yieldImprovements$226625 = -60				; size = 48
__$EHRec$ = -12						; size = 12
?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ PROC ; CvCitySpecializationAI::AssignSpecializations, COMDAT
; _this$ = ecx

; 666  : {

	push	-1
	push	__ehhandler$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 124				; 0000007cH
	push	ebx
	push	ebp
	push	esi
	mov	ebp, ecx
	push	edi

; 667  : 	int iI;
; 668  : 	CitySpecializationTypes eSpecialization;
; 669  : 	CitySpecializationData cityData;
; 670  : 	list<CitySpecializationData> citiesWithoutSpecialization;

	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[esp+152]
	call	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
	mov	ebx, eax
	mov	DWORD PTR _citiesWithoutSpecialization$[esp+156], ebx

; 671  : 	list<CitySpecializationTypes>::iterator it;
; 672  : 	list<CitySpecializationTypes>::iterator iterEnd;
; 673  : 	list<CitySpecializationData>::iterator cityIter;
; 674  : 	list<CitySpecializationData>::iterator cityIterEnd;
; 675  : 	list<CitySpecializationData>::iterator bestCity;
; 676  : 
; 677  : 	m_eNextSpecializationDesired = NO_CITY_SPECIALIZATION;

	mov	DWORD PTR [ebp+12], -1

; 678  : 	citiesWithoutSpecialization.clear();

	mov	eax, DWORD PTR [ebx]
	xor	ecx, ecx
	mov	DWORD PTR [ebx], ebx
	mov	DWORD PTR __$EHRec$[esp+160], ecx
	mov	DWORD PTR [ebx+4], ebx
	mov	DWORD PTR _citiesWithoutSpecialization$[esp+160], ecx
	cmp	eax, ebx
	je	SHORT $LN112@AssignSpec
	npad	4
$LL114@AssignSpec:
	mov	esi, DWORD PTR [eax]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, esi
	cmp	esi, ebx
	jne	SHORT $LL114@AssignSpec
$LN112@AssignSpec:

; 679  : 
; 680  : 	CitySpecializationTypes eWonderSpecialiation = GetWonderSpecialization();

	mov	ecx, ebp
	call	?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetWonderSpecialization
	mov	edi, eax

; 681  : 
; 682  : 	// Find specializations needed (including for the next city we build)
; 683  : 	SelectSpecializations();

	mov	ecx, ebp
	mov	DWORD PTR _eWonderSpecialiation$[esp+152], edi
	call	?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::SelectSpecializations

; 684  : 
; 685  : 	// OBVIOUS ASSIGNMENTS: Loop through our cities making obvious assignments
; 686  : 	CvCity* pLoopCity;
; 687  : 	int iLoop;
; 688  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	mov	ecx, DWORD PTR [ebp]
	push	0
	lea	eax, DWORD PTR _iLoop$[esp+156]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	esi, eax
	test	esi, esi
	je	$LN972@AssignSpec
	npad	2
$LL63@AssignSpec:

; 689  : 	{
; 690  : 		if(pLoopCity->IsPuppet())

	mov	ecx, esi
	call	?IsPuppet@CvCity@@QBE_NXZ		; CvCity::IsPuppet
	test	al, al
	je	SHORT $LN60@AssignSpec

; 691  : 		{
; 692  : 			pLoopCity->GetCityStrategyAI()->SetSpecialization(GetEconomicDefaultSpecialization());

	mov	ecx, ebp
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	push	eax
	mov	ecx, esi
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 693  : 			LogSpecializationAssignment(pLoopCity, GetEconomicDefaultSpecialization(), true);

	push	1
	mov	ecx, ebp
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	push	eax
	push	esi
	mov	ecx, ebp
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 694  : 			continue;

	jmp	$LN62@AssignSpec
$LN60@AssignSpec:

; 695  : 		}
; 696  : 
; 697  : 		// If this is the city to build our current wonder in, mark all that
; 698  : 		if(m_bWonderChosen && pLoopCity->GetID() == m_iWonderCityID)

	cmp	BYTE PTR [ebp+208], 0
	je	SHORT $LN58@AssignSpec
	mov	eax, DWORD PTR [esi+120]
	cmp	eax, DWORD PTR [ebp+200]
	jne	SHORT $LN58@AssignSpec

; 699  : 		{
; 700  : 			it = find(m_SpecializationsNeeded.begin(), m_SpecializationsNeeded.end(), eWonderSpecialiation);

	mov	ecx, DWORD PTR [ebp+20]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, ecx
	je	SHORT $LN58@AssignSpec
$LL155@AssignSpec:
	cmp	DWORD PTR [eax+8], edi
	je	SHORT $LN926@AssignSpec
	mov	eax, DWORD PTR [eax]
	cmp	eax, ecx
	jne	SHORT $LL155@AssignSpec
$LN926@AssignSpec:

; 701  : 			if(it != m_SpecializationsNeeded.end())

	cmp	eax, ecx
	je	SHORT $LN58@AssignSpec

; 702  : 			{
; 703  : 				m_SpecializationsNeeded.erase(it);

	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	push	eax
	mov	DWORD PTR [ecx+4], edx
	call	??3@YAXPAX@Z				; operator delete
	dec	DWORD PTR [ebp+24]
	add	esp, 4

; 704  : 				pLoopCity->GetCityStrategyAI()->SetSpecialization(eWonderSpecialiation);

	push	edi
	mov	ecx, esi
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 705  : 				LogSpecializationAssignment(pLoopCity, eWonderSpecialiation, true);

	push	1
	push	edi
	push	esi
	mov	ecx, ebp
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 706  : 				continue;

	jmp	$LN62@AssignSpec
$LN58@AssignSpec:

; 707  : 			}
; 708  : 		}
; 709  : 
; 710  : 		// If city default is equal to a needed type, go with that
; 711  : 		eSpecialization = pLoopCity->GetCityStrategyAI()->GetDefaultSpecialization();

	mov	ecx, esi
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI

; 712  : 		it = find(m_SpecializationsNeeded.begin(), m_SpecializationsNeeded.end(), eSpecialization);

	mov	ecx, DWORD PTR [ebp+20]
	mov	edi, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, ecx
	je	SHORT $LN57@AssignSpec
$LL236@AssignSpec:
	cmp	DWORD PTR [eax+8], edi
	je	SHORT $LN927@AssignSpec
	mov	eax, DWORD PTR [eax]
	cmp	eax, ecx
	jne	SHORT $LL236@AssignSpec
$LN927@AssignSpec:

; 713  : 		if(it != m_SpecializationsNeeded.end())

	cmp	eax, ecx
	je	SHORT $LN57@AssignSpec
$LN987@AssignSpec:

; 714  : 		{
; 715  : 			m_SpecializationsNeeded.erase(it);

	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	push	eax
	mov	DWORD PTR [ecx+4], edx
	call	??3@YAXPAX@Z				; operator delete
	dec	DWORD PTR [ebp+24]
	add	esp, 4

; 716  : 			pLoopCity->GetCityStrategyAI()->SetSpecialization(eSpecialization);

	push	edi
	mov	ecx, esi
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 717  : 			LogSpecializationAssignment(pLoopCity, eSpecialization);

	push	0
	push	edi
	push	esi
	mov	ecx, ebp
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 718  : 		}
; 719  : 		else

	jmp	$LN985@AssignSpec
$LN57@AssignSpec:

; 720  : 		{
; 721  : 			// If cities' current specialization is needed, stick with that
; 722  : 			eSpecialization = pLoopCity->GetCityStrategyAI()->GetSpecialization();

	mov	ecx, esi
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI

; 723  : 			it = find(m_SpecializationsNeeded.begin(), m_SpecializationsNeeded.end(), eSpecialization);

	mov	ecx, DWORD PTR [ebp+20]
	mov	edi, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, ecx
	je	SHORT $LN55@AssignSpec
	npad	3
$LL317@AssignSpec:
	cmp	DWORD PTR [eax+8], edi
	je	SHORT $LN928@AssignSpec
	mov	eax, DWORD PTR [eax]
	cmp	eax, ecx
	jne	SHORT $LL317@AssignSpec
$LN928@AssignSpec:

; 724  : 			if(it != m_SpecializationsNeeded.end())

	cmp	eax, ecx

; 725  : 			{
; 726  : 				m_SpecializationsNeeded.erase(it);
; 727  : 				pLoopCity->GetCityStrategyAI()->SetSpecialization(eSpecialization);
; 728  : 				LogSpecializationAssignment(pLoopCity, eSpecialization);
; 729  : 			}
; 730  : 
; 731  : 			// Save this city off (with detailed data about what it is good at) to assign later
; 732  : 			else

	jne	SHORT $LN987@AssignSpec
$LN55@AssignSpec:

; 733  : 			{
; 734  : 				cityData.m_eID = pLoopCity->GetID();

	mov	eax, DWORD PTR [esi+120]
	mov	DWORD PTR _cityData$[esp+152], eax

; 735  : 				for(iI = 0; iI <= YIELD_SCIENCE; iI++)

	xor	edi, edi
$LL53@AssignSpec:

; 736  : 				{
; 737  : 					if(iI == YIELD_SCIENCE)
; 738  : 					{
; 739  : 						cityData.m_iWeight[iI] = PlotValueForScience(pLoopCity->plot()); // -- BKW, looks like PlotValueForScience is making some assumptions that are no longer true

	mov	ecx, esi
	cmp	edi, 3
	jne	SHORT $LN50@AssignSpec
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	push	eax
	mov	ecx, ebp
	call	?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z ; CvCitySpecializationAI::PlotValueForScience
	mov	DWORD PTR _cityData$[esp+168], eax

; 740  : 					}
; 741  : 					else

	jmp	SHORT $LN49@AssignSpec
$LN50@AssignSpec:

; 742  : 					{
; 743  : 						cityData.m_iWeight[iI] = PlotValueForSpecificYield(pLoopCity->plot(), (YieldTypes)iI);

	push	edi
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	push	eax
	mov	ecx, ebp
	call	?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z ; CvCitySpecializationAI::PlotValueForSpecificYield
	mov	DWORD PTR _cityData$[esp+edi*4+156], eax
$LN49@AssignSpec:

; 744  : 					}
; 745  : 					cityData.m_iWeight[iI] = AdjustValueBasedOnBuildings(pLoopCity, (YieldTypes)iI, cityData.m_iWeight[iI]);

	mov	ecx, DWORD PTR _cityData$[esp+edi*4+156]
	push	ecx
	push	edi
	push	esi
	mov	ecx, ebp
	call	?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z ; CvCitySpecializationAI::AdjustValueBasedOnBuildings
	mov	DWORD PTR _cityData$[esp+edi*4+156], eax

; 746  : 					if(cityData.m_iWeight[iI] < 0)

	test	eax, eax
	jge	SHORT $LN52@AssignSpec

; 747  : 					{
; 748  : 						cityData.m_iWeight[iI] = 0;

	mov	DWORD PTR _cityData$[esp+edi*4+156], 0
$LN52@AssignSpec:

; 735  : 				for(iI = 0; iI <= YIELD_SCIENCE; iI++)

	inc	edi
	cmp	edi, 3
	jle	SHORT $LL53@AssignSpec

; 749  : 					}
; 750  : 				}
; 751  : 				citiesWithoutSpecialization.push_back(cityData);

	mov	eax, DWORD PTR _citiesWithoutSpecialization$[esp+156]
	mov	ecx, DWORD PTR [eax+4]
	lea	ebx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR _cityData$[esp+152]
	push	edx
	push	ecx
	push	eax
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[esp+164]
	call	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
	push	1
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[esp+156]
	mov	edi, eax
	call	?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize

; 752  : 
; 753  : 				LogCity(pLoopCity, cityData);

	mov	edx, DWORD PTR _cityData$[esp+152]
	mov	ecx, DWORD PTR _cityData$[esp+156]
	mov	DWORD PTR [ebx], edi
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 24					; 00000018H
	mov	DWORD PTR [eax], edi
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _cityData$[esp+184]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _cityData$[esp+188]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR _cityData$[esp+192]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR _cityData$[esp+196]
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], ecx
	push	esi
	mov	ecx, ebp
	call	?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z ; CvCitySpecializationAI::LogCity
	mov	ebx, DWORD PTR _citiesWithoutSpecialization$[esp+156]
$LN985@AssignSpec:
	mov	edi, DWORD PTR _eWonderSpecialiation$[esp+152]
$LN62@AssignSpec:

; 684  : 
; 685  : 	// OBVIOUS ASSIGNMENTS: Loop through our cities making obvious assignments
; 686  : 	CvCity* pLoopCity;
; 687  : 	int iLoop;
; 688  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	mov	ecx, DWORD PTR [ebp]
	push	0
	lea	edx, DWORD PTR _iLoop$[esp+156]
	push	edx
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	esi, eax
	test	esi, esi
	jne	$LL63@AssignSpec

; 754  : 
; 755  : 			}
; 756  : 		}
; 757  : 	}
; 758  : 
; 759  : 	FAssert(citiesWithoutSpecialization.size() + 1 == m_SpecializationsNeeded.size());
; 760  : 
; 761  : 	// NEXT SPECIALIZATION NEEDED: Now figure out what we want to assign as our "next specialization needed"
; 762  : 
; 763  : 	// If only one specialization left, it's easy
; 764  : 	if(citiesWithoutSpecialization.empty())

	cmp	DWORD PTR _citiesWithoutSpecialization$[esp+160], eax
	jne	SHORT $LN47@AssignSpec
$LN972@AssignSpec:

; 765  : 	{
; 766  : 		it = m_SpecializationsNeeded.begin();

	mov	eax, DWORD PTR [ebp+20]

; 767  : 		m_eNextSpecializationDesired = *it;

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+8]

; 768  : 		LogNextSpecialization(m_eNextSpecializationDesired);

	push	eax
	mov	ecx, ebp
	mov	DWORD PTR [ebp+12], eax
	call	?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ; CvCitySpecializationAI::LogNextSpecialization

; 769  : 		return;

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [ebx], ebx
	mov	DWORD PTR [ebx+4], ebx
	cmp	eax, ebx
	je	SHORT $LN416@AssignSpec
$LL418@AssignSpec:
	mov	esi, DWORD PTR [eax]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, esi
	cmp	esi, ebx
	jne	SHORT $LL418@AssignSpec
$LN416@AssignSpec:
	push	ebx
	jmp	$LN988@AssignSpec
$LN47@AssignSpec:

; 770  : 	}
; 771  : 
; 772  : 	// If all specializations left are "general economic", set that as next needed
; 773  : 	bool bAllGeneral = true;
; 774  : 	it = m_SpecializationsNeeded.begin();

	mov	eax, DWORD PTR [ebp+20]
	mov	edi, DWORD PTR [eax]
	mov	BYTE PTR _bAllGeneral$[esp+152], 1
	mov	DWORD PTR tv2204[esp+152], eax

; 775  : 	iterEnd = m_SpecializationsNeeded.end();
; 776  : 	for(; it != iterEnd; ++it)

	cmp	edi, eax
	je	SHORT $LN980@AssignSpec
	npad	6
$LL453@AssignSpec:

; 777  : 	{
; 778  : 		CitySpecializationTypes eType = *it;

	mov	ebx, DWORD PTR [edi+8]

; 779  : 		if(eType != GetEconomicDefaultSpecialization())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	test	eax, eax
	jle	SHORT $LN468@AssignSpec
$LL470@AssignSpec:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+esi*4]
	cmp	BYTE PTR [eax+273], 0
	jne	SHORT $LN471@AssignSpec
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	esi, eax
	jl	SHORT $LL470@AssignSpec
$LN468@AssignSpec:
	or	esi, -1
$LN471@AssignSpec:
	cmp	ebx, esi
	je	SHORT $LN45@AssignSpec

; 780  : 		{
; 781  : 			bAllGeneral = false;

	mov	BYTE PTR _bAllGeneral$[esp+152], 0
$LN45@AssignSpec:

; 775  : 	iterEnd = m_SpecializationsNeeded.end();
; 776  : 	for(; it != iterEnd; ++it)

	mov	edi, DWORD PTR [edi]
	cmp	edi, DWORD PTR tv2204[esp+152]
	jne	SHORT $LL453@AssignSpec

; 782  : 		}
; 783  : 	}
; 784  : 
; 785  : 	if(bAllGeneral)

	cmp	BYTE PTR _bAllGeneral$[esp+152], 0
	je	SHORT $LN42@AssignSpec
$LN980@AssignSpec:

; 786  : 	{
; 787  : 		m_eNextSpecializationDesired = GetEconomicDefaultSpecialization();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	test	eax, eax
	jle	SHORT $LN480@AssignSpec
$LL482@AssignSpec:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+esi*4]
	cmp	BYTE PTR [ecx+273], 0
	jne	SHORT $LN483@AssignSpec
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	esi, eax
	jl	SHORT $LL482@AssignSpec
$LN480@AssignSpec:
	or	esi, -1
$LN483@AssignSpec:

; 788  : 		LogNextSpecialization(m_eNextSpecializationDesired);

	push	esi
	mov	ecx, ebp
	mov	DWORD PTR [ebp+12], esi
	call	?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ; CvCitySpecializationAI::LogNextSpecialization

; 789  : 		m_SpecializationsNeeded.erase(m_SpecializationsNeeded.begin());

	mov	edx, DWORD PTR [ebp+20]
	mov	eax, DWORD PTR [edx]
	cmp	eax, edx
	je	$LN669@AssignSpec
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	push	eax
	mov	DWORD PTR [ecx+4], edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	dec	DWORD PTR [ebp+24]

; 790  : 	}
; 791  : 
; 792  : 	else

	jmp	$LN669@AssignSpec
$LN42@AssignSpec:

; 793  : 	{
; 794  : 		// Find best possible sites for each of the yield types
; 795  : 		FindBestSites();

	mov	ecx, ebp
	call	?FindBestSites@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::FindBestSites

; 796  : 
; 797  : 		// Compute the yield which we can improve the most with a new city
; 798  : 		int iCurrentDelta;
; 799  : 		int iBestDelta[YIELD_SCIENCE + 1];
; 800  : 		for(iI = 0; iI <= YIELD_SCIENCE; iI++)
; 801  : 		{
; 802  : 			iBestDelta[iI] = MIN_INT;
; 803  : 		}
; 804  : 		cityIter = citiesWithoutSpecialization.begin();

	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[esp+156]
	mov	eax, -2147483648			; 80000000H
	mov	DWORD PTR _iBestDelta$226611[esp+152], eax
	mov	DWORD PTR _iBestDelta$226611[esp+156], eax
	mov	DWORD PTR _iBestDelta$226611[esp+160], eax
	mov	DWORD PTR _iBestDelta$226611[esp+164], eax
	mov	eax, DWORD PTR [ecx]

; 805  : 		cityIterEnd = citiesWithoutSpecialization.end();
; 806  : 		for(; cityIter != cityIterEnd; ++cityIter)

	cmp	eax, ecx
	je	SHORT $LN979@AssignSpec
	npad	1
$LL546@AssignSpec:

; 807  : 		{
; 808  : 			cityData = *cityIter;

	mov	ecx, DWORD PTR [eax+8]
	mov	ebx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [eax+16]
	mov	esi, DWORD PTR [eax+20]
	mov	edi, DWORD PTR [eax+24]
	mov	DWORD PTR _cityData$[esp+152], ecx
	mov	ecx, DWORD PTR [eax+12]

; 809  : 			for(iI = 0; iI <= YIELD_SCIENCE; iI++)
; 810  : 			{
; 811  : 				iCurrentDelta = cityData.m_iWeight[iI] - m_iBestValue[iI];

	sub	ecx, DWORD PTR [ebp+28]
	mov	DWORD PTR _cityData$[esp+172], ebx

; 812  : 				if(iCurrentDelta > iBestDelta[iI])

	cmp	ecx, DWORD PTR _iBestDelta$226611[esp+152]
	jle	SHORT $LN33@AssignSpec

; 813  : 				{
; 814  : 					iBestDelta[iI] = iCurrentDelta;

	mov	DWORD PTR _iBestDelta$226611[esp+152], ecx
$LN33@AssignSpec:

; 809  : 			for(iI = 0; iI <= YIELD_SCIENCE; iI++)
; 810  : 			{
; 811  : 				iCurrentDelta = cityData.m_iWeight[iI] - m_iBestValue[iI];

	sub	edx, DWORD PTR [ebp+32]

; 812  : 				if(iCurrentDelta > iBestDelta[iI])

	cmp	edx, DWORD PTR _iBestDelta$226611[esp+156]
	jle	SHORT $LN963@AssignSpec

; 813  : 				{
; 814  : 					iBestDelta[iI] = iCurrentDelta;

	mov	DWORD PTR _iBestDelta$226611[esp+156], edx
$LN963@AssignSpec:

; 809  : 			for(iI = 0; iI <= YIELD_SCIENCE; iI++)
; 810  : 			{
; 811  : 				iCurrentDelta = cityData.m_iWeight[iI] - m_iBestValue[iI];

	sub	esi, DWORD PTR [ebp+36]

; 812  : 				if(iCurrentDelta > iBestDelta[iI])

	cmp	esi, DWORD PTR _iBestDelta$226611[esp+160]
	jle	SHORT $LN965@AssignSpec

; 813  : 				{
; 814  : 					iBestDelta[iI] = iCurrentDelta;

	mov	DWORD PTR _iBestDelta$226611[esp+160], esi
$LN965@AssignSpec:

; 809  : 			for(iI = 0; iI <= YIELD_SCIENCE; iI++)
; 810  : 			{
; 811  : 				iCurrentDelta = cityData.m_iWeight[iI] - m_iBestValue[iI];

	sub	edi, DWORD PTR [ebp+40]

; 812  : 				if(iCurrentDelta > iBestDelta[iI])

	cmp	edi, DWORD PTR _iBestDelta$226611[esp+164]
	jle	SHORT $LN36@AssignSpec

; 813  : 				{
; 814  : 					iBestDelta[iI] = iCurrentDelta;

	mov	DWORD PTR _iBestDelta$226611[esp+164], edi
$LN36@AssignSpec:

; 805  : 		cityIterEnd = citiesWithoutSpecialization.end();
; 806  : 		for(; cityIter != cityIterEnd; ++cityIter)

	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR _citiesWithoutSpecialization$[esp+156]
	jne	SHORT $LL546@AssignSpec
$LN979@AssignSpec:

; 815  : 				}
; 816  : 			}
; 817  : 		}
; 818  : 
; 819  : 		// Save yield improvements in a vector we can sort
; 820  : 		CvWeightedVector<int, YIELD_SCIENCE+1, true> yieldImprovements;

	xor	ecx, ecx
	mov	ebx, 4
	lea	edx, DWORD PTR _yieldImprovements$226625[esp+164]
	mov	DWORD PTR _yieldImprovements$226625[esp+156], ecx
	mov	DWORD PTR _yieldImprovements$226625[esp+160], ebx
	mov	DWORD PTR _yieldImprovements$226625[esp+152], edx
	mov	BYTE PTR __$EHRec$[esp+160], 1

; 821  : 		for(iI = 0; iI <= YIELD_SCIENCE; iI++)

	xor	esi, esi
	jmp	SHORT $LN30@AssignSpec
	npad	7
$LL981@AssignSpec:
	mov	ebx, DWORD PTR _yieldImprovements$226625[esp+160]
$LN30@AssignSpec:

; 822  : 		{
; 823  : 			int iImprovementWithNewCity;
; 824  : 			if(iBestDelta[iI] > 0)

	mov	eax, DWORD PTR _iBestDelta$226611[esp+esi*4+152]
	test	eax, eax
	jle	SHORT $LN27@AssignSpec

; 825  : 			{
; 826  : 				iImprovementWithNewCity = 0;

	xor	edi, edi

; 827  : 			}
; 828  : 			else

	jmp	SHORT $LN26@AssignSpec
$LN27@AssignSpec:

; 829  : 			{
; 830  : 				iImprovementWithNewCity = -iBestDelta[iI];

	neg	eax
	mov	edi, eax
$LN26@AssignSpec:

; 831  : 			}
; 832  : 			yieldImprovements.push_back(iI, iImprovementWithNewCity);

	mov	BYTE PTR _yieldImprovements$226625[esp+196], 0
	cmp	ecx, ebx
	jne	SHORT $LN575@AssignSpec
	push	ebx
	lea	ecx, DWORD PTR _yieldImprovements$226625[esp+156]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
	mov	ecx, DWORD PTR _yieldImprovements$226625[esp+156]
	mov	edx, DWORD PTR _yieldImprovements$226625[esp+152]
$LN575@AssignSpec:
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN578@AssignSpec
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	mov	ecx, DWORD PTR _yieldImprovements$226625[esp+156]
	mov	edx, DWORD PTR _yieldImprovements$226625[esp+152]
$LN578@AssignSpec:
	inc	ecx
	inc	esi
	cmp	esi, 3
	mov	DWORD PTR _yieldImprovements$226625[esp+156], ecx
	jle	SHORT $LL981@AssignSpec

; 833  : 		}
; 834  : 		yieldImprovements.SortItems();

	lea	ecx, DWORD PTR [edx+ecx*8]
	mov	eax, ecx
	sub	eax, edx
	sar	eax, 3
	push	eax
	push	ecx
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 835  : 
; 836  : 		// Take them out in order and see if we need this specialization
; 837  : 		bool bFoundIt = false;
; 838  : 		for(iI = 0; iI < yieldImprovements.size(); iI++)

	cmp	DWORD PTR _yieldImprovements$226625[esp+156], 0
	mov	DWORD PTR _iI$[esp+152], 0
	jle	$LN974@AssignSpec
	npad	7
$LL25@AssignSpec:

; 839  : 		{
; 840  : 			YieldTypes eMostImprovedYield = (YieldTypes)yieldImprovements.GetElement(iI);
; 841  : 
; 842  : 			// Loop through needed specializations until we find one that matches
; 843  : 			it = m_SpecializationsNeeded.begin();

	mov	eax, DWORD PTR [ebp+20]
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _iI$[esp+152]
	mov	edx, DWORD PTR _yieldImprovements$226625[esp+152]
	mov	ebx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR tv2204[esp+152], eax

; 844  : 			iterEnd = m_SpecializationsNeeded.end();
; 845  : 			for(; it != iterEnd; ++it)

	cmp	esi, eax
	je	SHORT $LN20@AssignSpec
	npad	8
$LL617@AssignSpec:

; 846  : 			{
; 847  : 				CitySpecializationTypes eType = *it;

	mov	edi, DWORD PTR [esi+8]

; 848  : 				YieldTypes eYield = GC.getCitySpecializationInfo(eType)->GetYieldType();

	push	edi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z ; CvGlobals::getCitySpecializationInfo

; 849  : 				if(eYield == eMostImprovedYield)

	cmp	DWORD PTR [eax+264], ebx
	je	SHORT $LN931@AssignSpec
	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR tv2204[esp+152]
	jne	SHORT $LL617@AssignSpec
$LN20@AssignSpec:

; 835  : 
; 836  : 		// Take them out in order and see if we need this specialization
; 837  : 		bool bFoundIt = false;
; 838  : 		for(iI = 0; iI < yieldImprovements.size(); iI++)

	mov	eax, DWORD PTR _iI$[esp+152]
	inc	eax
	cmp	eax, DWORD PTR _yieldImprovements$226625[esp+156]
	mov	DWORD PTR _iI$[esp+152], eax
	jl	SHORT $LL25@AssignSpec
	jmp	SHORT $LN974@AssignSpec
$LN931@AssignSpec:

; 850  : 				{
; 851  : 					m_eNextSpecializationDesired = eType;
; 852  : 					LogNextSpecialization(m_eNextSpecializationDesired);

	push	edi
	mov	ecx, ebp
	mov	DWORD PTR [ebp+12], edi
	call	?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ; CvCitySpecializationAI::LogNextSpecialization

; 853  : 					m_SpecializationsNeeded.erase(it);

	cmp	esi, DWORD PTR [ebp+20]
	je	SHORT $LN974@AssignSpec
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	push	esi
	mov	DWORD PTR [edx+4], eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	dec	DWORD PTR [ebp+24]
$LN974@AssignSpec:

; 854  : 					bFoundIt = true;
; 855  : 					break;
; 856  : 				}
; 857  : 			}
; 858  : 			if(bFoundIt)
; 859  : 			{
; 860  : 				break;
; 861  : 			}
; 862  : 		}
; 863  : 	}

	mov	eax, DWORD PTR _yieldImprovements$226625[esp+152]
	lea	ecx, DWORD PTR _yieldImprovements$226625[esp+164]
	mov	BYTE PTR __$EHRec$[esp+160], 0
	cmp	eax, ecx
	je	SHORT $LN669@AssignSpec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN669@AssignSpec:

; 864  : 
; 865  : 	FAssert(citiesWithoutSpecialization.size() == m_SpecializationsNeeded.size());
; 866  : 
; 867  : 	// REMAINING ASSIGNMENTS: Make the rest of the assignments
; 868  : 	it = m_SpecializationsNeeded.begin();

	mov	ecx, DWORD PTR [ebp+20]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR tv2204[esp+152], ecx
	mov	DWORD PTR _it$[esp+152], eax

; 869  : 	iterEnd = m_SpecializationsNeeded.end();
; 870  : 	for(; it != iterEnd; ++it)

	cmp	eax, ecx
	je	$LN15@AssignSpec
	npad	4
$LL975@AssignSpec:

; 871  : 	{
; 872  : 		const CitySpecializationTypes eType = *it;

	mov	eax, DWORD PTR [eax+8]

; 873  : 		CvCitySpecializationXMLEntry* pkCitySpecializationEntry = GC.getCitySpecializationInfo(eType);

	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _eType$226654[esp+156], eax
	call	?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z ; CvGlobals::getCitySpecializationInfo

; 874  : 		if(pkCitySpecializationEntry == NULL)

	test	eax, eax
	je	$LN16@AssignSpec

; 875  : 			continue;
; 876  : 
; 877  : 		YieldTypes eYield = pkCitySpecializationEntry->GetYieldType();
; 878  : 		bool bCoastal = pkCitySpecializationEntry->IsMustBeCoastal();
; 879  : 		bestCity = citiesWithoutSpecialization.end();

	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[esp+156]
	mov	edx, DWORD PTR [eax+264]

; 880  : 
; 881  : 		// Pick best existing city based on a better computation of existing city's value for a yield type
; 882  : 		int iBestValue = -1;
; 883  : 		cityIter = citiesWithoutSpecialization.begin();

	mov	esi, DWORD PTR [ecx]
	mov	al, BYTE PTR [eax+274]
	or	ebx, -1
	mov	DWORD PTR _eYield$226657[esp+152], edx
	mov	BYTE PTR _bCoastal$226658[esp+152], al
	mov	edi, ecx

; 884  : 		cityIterEnd = citiesWithoutSpecialization.end();
; 885  : 		for(; cityIter != cityIterEnd; ++cityIter)

	cmp	esi, ecx
	je	$LN2@AssignSpec
$LL737@AssignSpec:

; 886  : 		{
; 887  : 			cityData = *cityIter;
; 888  : 
; 889  : 			if(bCoastal && !m_pPlayer->getCity(cityData.m_eID)->isCoastal(100))

	cmp	BYTE PTR _bCoastal$226658[esp+152], 0
	mov	edx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _cityData$[esp+156], edx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR _cityData$[esp+160], edx
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR _cityData$[esp+164], edx
	mov	edx, DWORD PTR [esi+24]
	mov	DWORD PTR _cityData$[esp+168], edx
	mov	edx, DWORD PTR [esi+28]
	mov	DWORD PTR _cityData$[esp+152], eax
	mov	DWORD PTR _cityData$[esp+172], edx
	je	SHORT $LN978@AssignSpec
	mov	ecx, DWORD PTR [ebp]
	push	100					; 00000064H
	push	eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	ecx, eax
	call	?isCoastal@CvCity@@QBE_NH@Z		; CvCity::isCoastal
	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[esp+156]
	test	al, al
	je	SHORT $LN12@AssignSpec
$LN978@AssignSpec:

; 890  : 			{
; 891  : 				continue;
; 892  : 			}
; 893  : 
; 894  : 			if(eYield == NO_YIELD)

	mov	eax, DWORD PTR _eYield$226657[esp+152]
	cmp	eax, -1
	jne	SHORT $LN9@AssignSpec
	mov	eax, DWORD PTR _cityData$[esp+160]
	mov	edx, DWORD PTR _cityData$[esp+164]
	add	eax, edx

; 895  : 			{
; 896  : 				// General economic is all yields added together
; 897  : 				int iCityValue = 0;
; 898  : 				for(iI = 0; iI <= YIELD_SCIENCE; iI++)
; 899  : 				{
; 900  : 					iCityValue += cityData.m_iWeight[iI];

	add	eax, DWORD PTR _cityData$[esp+156]
	add	eax, DWORD PTR _cityData$[esp+168]

; 901  : 				}
; 902  : 				if(iCityValue > iBestValue)
; 903  : 				{
; 904  : 					iBestValue = iCityValue;
; 905  : 					bestCity = cityIter;
; 906  : 				}
; 907  : 			}
; 908  : 			else

	jmp	SHORT $LN991@AssignSpec
$LN9@AssignSpec:

; 909  : 			{
; 910  : 				if(cityData.m_iWeight[(int)eYield] > iBestValue)

	mov	eax, DWORD PTR _cityData$[esp+eax*4+156]
$LN991@AssignSpec:
	cmp	eax, ebx
	jle	SHORT $LN12@AssignSpec

; 911  : 				{
; 912  : 					iBestValue = cityData.m_iWeight[(int)eYield];
; 913  : 					bestCity = cityIter;

	mov	edi, esi
	mov	ebx, eax
$LN12@AssignSpec:
	mov	esi, DWORD PTR [esi]
	cmp	esi, ecx
	jne	SHORT $LL737@AssignSpec

; 914  : 				}
; 915  : 			}
; 916  : 		}
; 917  : 
; 918  : 		// Found a city to set
; 919  : 		if(bestCity != citiesWithoutSpecialization.end())

	cmp	edi, ecx
	je	SHORT $LN2@AssignSpec

; 920  : 		{
; 921  : 			CvCity* pCity = m_pPlayer->getCity(bestCity->m_eID);

	mov	eax, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [ebp]
	push	eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 922  : 			pCity->GetCityStrategyAI()->SetSpecialization(eType);

	mov	ebx, DWORD PTR _eType$226654[esp+152]
	mov	esi, eax
	push	ebx
	mov	ecx, esi
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 923  : 			LogSpecializationAssignment(pCity, eType);

	push	0
	push	ebx
	push	esi
	mov	ecx, ebp
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 924  : 			citiesWithoutSpecialization.erase(bestCity);

	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], ecx
	push	edi

; 925  : 		}
; 926  : 
; 927  : 		// No (coastal) city found, use default specialization as last resort
; 928  : 		else

	jmp	$LN989@AssignSpec
$LN2@AssignSpec:

; 929  : 		{
; 930  : 			CvCity* pCity = m_pPlayer->getCity(citiesWithoutSpecialization.begin()->m_eID);

	mov	ebx, DWORD PTR _citiesWithoutSpecialization$[esp+156]
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [ebp]
	add	eax, 8
	push	edx
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 931  : 			pCity->GetCityStrategyAI()->SetSpecialization(GetEconomicDefaultSpecialization());

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	edi, eax
	xor	esi, esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	test	eax, eax
	jle	SHORT $LN977@AssignSpec
	npad	9
$LL819@AssignSpec:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+esi*4]
	cmp	BYTE PTR [ecx+273], 0
	jne	SHORT $LN820@AssignSpec
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	esi, eax
	jl	SHORT $LL819@AssignSpec
$LN977@AssignSpec:
	or	esi, -1
$LN820@AssignSpec:
	push	esi
	mov	ecx, edi
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 932  : 			LogSpecializationAssignment(pCity, GetEconomicDefaultSpecialization());

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	test	eax, eax
	jle	SHORT $LN829@AssignSpec
	npad	6
$LL831@AssignSpec:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+esi*4]
	cmp	BYTE PTR [eax+273], 0
	jne	SHORT $LN832@AssignSpec
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	esi, eax
	jl	SHORT $LL831@AssignSpec
$LN829@AssignSpec:
	or	esi, -1
$LN832@AssignSpec:
	push	0
	push	esi
	push	edi
	mov	ecx, ebp
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 933  : 			citiesWithoutSpecialization.erase(citiesWithoutSpecialization.begin());

	mov	eax, DWORD PTR [ebx]
	cmp	eax, ebx
	je	SHORT $LN16@AssignSpec
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	push	eax
$LN989@AssignSpec:
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	dec	DWORD PTR _citiesWithoutSpecialization$[esp+160]
$LN16@AssignSpec:
	mov	eax, DWORD PTR _it$[esp+152]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _it$[esp+152], eax
	cmp	eax, DWORD PTR tv2204[esp+152]
	jne	$LL975@AssignSpec
$LN15@AssignSpec:

; 934  : 		}
; 935  : 	}
; 936  : 
; 937  : 	return;

	mov	esi, DWORD PTR _citiesWithoutSpecialization$[esp+156]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi], esi
	mov	DWORD PTR [esi+4], esi
	cmp	eax, esi
	je	SHORT $LN883@AssignSpec
	npad	5
$LL885@AssignSpec:
	mov	edi, DWORD PTR [eax]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, edi
	cmp	edi, esi
	jne	SHORT $LL885@AssignSpec
$LN883@AssignSpec:
	push	esi
$LN988@AssignSpec:
	call	??3@YAXPAX@Z				; operator delete

; 938  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+156]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 136				; 00000088H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$0:
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	jmp	??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::~list<CitySpecializationData,std::allocator<CitySpecializationData> >
__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$1:
	lea	ecx, DWORD PTR _yieldImprovements$226625[ebp]
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__ehhandler$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ ENDP ; CvCitySpecializationAI::AssignSpecializations
PUBLIC	?DoTurn@CvCitySpecializationAI@@QAEXXZ		; CvCitySpecializationAI::DoTurn
EXTRN	?ChooseWonder@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_N0AAH@Z:PROC ; CvWonderProductionAI::ChooseWonder
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
EXTRN	?isHuman@CvPlayer@@QBE_NXZ:PROC			; CvPlayer::isHuman
; Function compile flags: /Ogtpy
;	COMDAT ?DoTurn@CvCitySpecializationAI@@QAEXXZ
_TEXT	SEGMENT
_iCityLoop$ = -4					; size = 4
?DoTurn@CvCitySpecializationAI@@QAEXXZ PROC		; CvCitySpecializationAI::DoTurn, COMDAT
; _this$ = ecx

; 331  : {

	push	ecx
	push	esi
	mov	esi, ecx

; 332  : 	AI_PERF_FORMAT("AI-perf.csv", ("CvCitySpecializationAI::DoTurn, Turn %03d, %s", GC.getGame().getElapsedGameTurns(), GetPlayer()->getCivilizationShortDescription()) );
; 333  : 
; 334  : 	int iCityLoop = 0;
; 335  : 
; 336  : 	// No city specializations for humans!
; 337  : 	if(m_pPlayer->isHuman())

	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _iCityLoop$[esp+8], 0
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	jne	$LN7@DoTurn

; 338  : 	{
; 339  : 		return;
; 340  : 	}
; 341  : 
; 342  : 	// No city specializations for minor civs
; 343  : 	if(m_pPlayer->isMinorCiv())

	mov	ecx, DWORD PTR [esi]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	jne	$LN7@DoTurn

; 344  : 	{
; 345  : 		return;
; 346  : 	}
; 347  : 
; 348  : 	// No city specializations early in the game
; 349  : 	if(GC.getGame().getGameTurn() < GC.getAI_CITY_SPECIALIZATION_EARLIEST_TURN())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	edi
	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2208
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	cmp	eax, edi
	jl	$LN26@DoTurn

; 350  : 	{
; 351  : 		return;
; 352  : 	}
; 353  : 
; 354  : 	// No city specialization if we don't have enough cities
; 355  : 	if(m_pPlayer->getNumCities() < 2)

	mov	ecx, DWORD PTR [esi]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	cmp	eax, 2
	jl	$LN26@DoTurn

; 356  : 	{
; 357  : 		return;
; 358  : 	}
; 359  : 
; 360  : 	// See if need to update assignments
; 361  : 	if(m_bSpecializationsDirty || (m_iLastTurnEvaluated + GC.getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL() > GC.getGame().getGameTurn()))

	cmp	BYTE PTR [esi+8], 0
	jne	SHORT $LN6@DoTurn
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2212
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR [esi+188]
	add	ecx, edi
	cmp	ecx, eax
	jle	$LN26@DoTurn
$LN6@DoTurn:

; 362  : 	{
; 363  : 		m_eNextWonderDesired = m_pPlayer->GetWonderProductionAI()->ChooseWonder(false /*bUseAsyncRandom*/, true /*bAdjustForOtherPlayers*/, m_iNextWonderWeight);

	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR [esi+204]
	push	edx
	push	1
	push	0
	call	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ ; CvPlayer::GetWonderProductionAI
	mov	ecx, eax
	call	?ChooseWonder@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_N0AAH@Z ; CvWonderProductionAI::ChooseWonder

; 364  : 		WeightSpecializations();

	mov	ecx, esi
	mov	DWORD PTR [esi+196], eax
	call	?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::WeightSpecializations

; 365  : 		AssignSpecializations();

	mov	ecx, esi
	call	?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::AssignSpecializations

; 366  : 		m_bSpecializationsDirty = false;

	mov	BYTE PTR [esi+8], 0

; 367  : 		m_iLastTurnEvaluated = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn

; 368  : 
; 369  : 		// Do we need to choose production again at all our cities?
; 370  : 		if(m_bInterruptWonders)

	cmp	BYTE PTR [esi+192], 0
	mov	DWORD PTR [esi+188], eax
	je	SHORT $LN2@DoTurn

; 371  : 		{
; 372  : 			CvCity* pLoopCity = NULL;
; 373  : 			for(pLoopCity = m_pPlayer->firstCity(&iCityLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iCityLoop))

	mov	ecx, DWORD PTR [esi]
	push	0
	lea	eax, DWORD PTR _iCityLoop$[esp+16]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN2@DoTurn
	npad	6
$LL4@DoTurn:

; 374  : 			{
; 375  : 				if(!pLoopCity->IsBuildingUnitForOperation())

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, edi
	call	eax
	test	al, al
	jne	SHORT $LN3@DoTurn

; 376  : 				{
; 377  : 					pLoopCity->AI_chooseProduction(true /*bInterruptWonders*/);

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+16]
	push	1
	mov	ecx, edi
	call	eax
$LN3@DoTurn:
	push	0
	lea	ecx, DWORD PTR _iCityLoop$[esp+16]
	push	ecx
	mov	ecx, DWORD PTR [esi]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	edi, eax
	test	edi, edi
	jne	SHORT $LL4@DoTurn
$LN2@DoTurn:

; 378  : 				}
; 379  : 			}
; 380  : 		}
; 381  : 
; 382  : 		// Reset this flag -- need a new high priority event before we'll interrupt again
; 383  : 		m_bInterruptWonders = false;

	mov	BYTE PTR [esi+192], 0
$LN26@DoTurn:
	pop	edi
$LN7@DoTurn:
	pop	esi

; 384  : 	}
; 385  : }

	pop	ecx
	ret	0
?DoTurn@CvCitySpecializationAI@@QAEXXZ ENDP		; CvCitySpecializationAI::DoTurn
_TEXT	ENDS
END
