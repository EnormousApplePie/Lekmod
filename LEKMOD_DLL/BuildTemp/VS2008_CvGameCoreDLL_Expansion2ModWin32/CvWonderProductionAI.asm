; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Desktop\Lekmod Files\Lekmod DLL versions\v29\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvWonderProductionAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
CONST	SEGMENT
$SG223222 DB	'LOAD ERROR: Building Type not found', 00H
$SG223470 DB	'GAMEOPTION_AI_GIMP_NO_WORLD_WONDER', 00H
	ORG $+1
$SG223513 DB	'Choosing wonder from Top Choices', 00H
	ORG $+3
$SG223543 DB	'GAMEOPTION_AI_GIMP_NO_WORLD_WONDER', 00H
	ORG $+1
$SG223573 DB	'Choosing wonder from Top Choices', 00H
	ORG $+3
$SG223592 DB	'%03d, ', 00H
	ORG $+1
$SG223594 DB	', ', 00H
	ORG $+1
$SG223604 DB	'Wonder, %s, %d', 00H
CONST	ENDS
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	?LogFlavors@CvWonderProductionAI@@UAEXW4FlavorTypes@@@Z ; CvWonderProductionAI::LogFlavors
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
;	COMDAT ?LogFlavors@CvWonderProductionAI@@UAEXW4FlavorTypes@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?LogFlavors@CvWonderProductionAI@@UAEXW4FlavorTypes@@@Z PROC ; CvWonderProductionAI::LogFlavors, COMDAT
; _this$ = ecx

; 699  : }

	ret	4
?LogFlavors@CvWonderProductionAI@@UAEXW4FlavorTypes@@@Z ENDP ; CvWonderProductionAI::LogFlavors
_TEXT	ENDS
PUBLIC	?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z ; CvWonderProductionAI::IsWonder
EXTRN	?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z:PROC ; isNationalWonderClass
EXTRN	?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z:PROC ; isTeamWonderClass
EXTRN	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z:PROC ; isWorldWonderClass
EXTRN	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ:PROC ; CvBuildingEntry::GetBuildingClassInfo
; Function compile flags: /Ogtpy
;	COMDAT ?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z
_TEXT	SEGMENT
_kBuilding$ = 8						; size = 4
?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z PROC ; CvWonderProductionAI::IsWonder, COMDAT
; _this$ = ecx

; 704  : 	const CvBuildingClassInfo& kBuildingClass = kBuilding.GetBuildingClassInfo();

	mov	ecx, DWORD PTR _kBuilding$[esp-4]
	push	esi
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo
	mov	esi, eax

; 705  : 
; 706  : 	if(::isWorldWonderClass(kBuildingClass) ||
; 707  : 	        ::isTeamWonderClass(kBuildingClass) ||
; 708  : 	        ::isNationalWonderClass(kBuildingClass))

	push	esi
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN1@IsWonder
	push	esi
	call	?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isTeamWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN1@IsWonder
	push	esi
	call	?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isNationalWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN1@IsWonder
	pop	esi

; 711  : 	}
; 712  : 	return false;
; 713  : }

	ret	4
$LN1@IsWonder:

; 709  : 	{
; 710  : 		return true;

	mov	al, 1
	pop	esi

; 711  : 	}
; 712  : 	return false;
; 713  : }

	ret	4
?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z ENDP ; CvWonderProductionAI::IsWonder
_TEXT	ENDS
PUBLIC	?HaveCityToBuild@CvWonderProductionAI@@ABE_NW4BuildingTypes@@@Z ; CvWonderProductionAI::HaveCityToBuild
EXTRN	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::nextCity
EXTRN	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z:PROC ; CvCity::canConstruct
EXTRN	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::firstCity
; Function compile flags: /Ogtpy
;	COMDAT ?HaveCityToBuild@CvWonderProductionAI@@ABE_NW4BuildingTypes@@@Z
_TEXT	SEGMENT
_iLoop$ = -4						; size = 4
_eBuilding$ = 8						; size = 4
?HaveCityToBuild@CvWonderProductionAI@@ABE_NW4BuildingTypes@@@Z PROC ; CvWonderProductionAI::HaveCityToBuild, COMDAT
; _this$ = ecx

; 719  : {

	push	ecx
	push	esi
	push	edi
	mov	esi, ecx

; 720  : 	CvCity* pLoopCity;
; 721  : 	int iLoop;
; 722  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	mov	ecx, DWORD PTR [esi+12]
	push	0
	lea	eax, DWORD PTR _iLoop$[esp+16]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	test	eax, eax
	je	SHORT $LN2@HaveCityTo
	mov	edi, DWORD PTR _eBuilding$[esp+8]
	npad	4
$LL4@HaveCityTo:

; 723  : 	{
; 724  : 		if(pLoopCity->canConstruct(eBuilding))

	push	0
	push	0
	push	0
	push	0
	push	edi
	mov	ecx, eax
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	test	al, al
	jne	SHORT $LN8@HaveCityTo
	push	0
	lea	ecx, DWORD PTR _iLoop$[esp+16]
	push	ecx
	mov	ecx, DWORD PTR [esi+12]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	test	eax, eax
	jne	SHORT $LL4@HaveCityTo
$LN2@HaveCityTo:
	pop	edi

; 727  : 		}
; 728  : 	}
; 729  : 	return false;

	xor	al, al
	pop	esi

; 730  : }

	pop	ecx
	ret	4
$LN8@HaveCityTo:
	pop	edi

; 725  : 		{
; 726  : 			return true;

	mov	al, 1
	pop	esi

; 730  : }

	pop	ecx
	ret	4
?HaveCityToBuild@CvWonderProductionAI@@ABE_NW4BuildingTypes@@@Z ENDP ; CvWonderProductionAI::HaveCityToBuild
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??0?$ArrayWrapper@H@@QAE@HPAH@Z			; ArrayWrapper<int>::ArrayWrapper<int>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??0?$ArrayWrapper@H@@QAE@HPAH@Z
_TEXT	SEGMENT
_count$ = 8						; size = 4
_values$ = 12						; size = 4
??0?$ArrayWrapper@H@@QAE@HPAH@Z PROC			; ArrayWrapper<int>::ArrayWrapper<int>, COMDAT
; _this$ = ecx

; 378  : 		: m_values(values), m_count(count) {}

	mov	edx, DWORD PTR _count$[esp-4]
	mov	eax, ecx
	mov	ecx, DWORD PTR _values$[esp-4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	ret	8
??0?$ArrayWrapper@H@@QAE@HPAH@Z ENDP			; ArrayWrapper<int>::ArrayWrapper<int>
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0IH@$00@@QAE@XZ ; CvWeightedVector<int,135,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0IH@$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@H$0IH@$00@@QAE@XZ PROC ; CvWeightedVector<int,135,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@H$0IH@$00@@QAE@XZ ENDP ; CvWeightedVector<int,135,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@XZ ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@XZ PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@XZ ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@XZ PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax*8]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0DC@$00@@QAE@XZ ; CvWeightedVector<int,50,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0DC@$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@H$0DC@$00@@QAE@XZ PROC ; CvWeightedVector<int,50,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@H$0DC@$00@@QAE@XZ ENDP ; CvWeightedVector<int,50,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0DC@$00@@QAE@ABU01@@Z ; CvWeightedVector<int,50,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0DC@$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@H$0DC@$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<int,50,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@H$0DC@$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<int,50,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@ DB 'c:\users\eno'
	DB	'rmousapplepie\desktop\lekmod files\lekmod dll versions\v29\le'
	DB	'kmod_dll\fireplace\include\fireworks\FFastVector.h', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 135				; 00000087H
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 135			; 00000087H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0IH@$00@@QAE@ABU01@@Z ; CvWeightedVector<int,135,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0IH@$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@H$0IH@$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<int,135,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@H$0IH@$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<int,135,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::Alloc
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 50					; 00000032H
	jbe	SHORT $LN2@Alloc@2

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@2:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 50			; 00000032H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	?GetClosureThis@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QBEPAVGenericClass@23@XZ ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::GetClosureThis
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ?GetClosureThis@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QBEPAVGenericClass@23@XZ
_TEXT	SEGMENT
?GetClosureThis@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QBEPAVGenericClass@23@XZ PROC ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::GetClosureThis, COMDAT
; _this$ = ecx

; 701  : 	inline GenericClass *GetClosureThis() const { return m_pthis; }

	mov	eax, DWORD PTR [ecx]
	ret	0
?GetClosureThis@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QBEPAVGenericClass@23@XZ ENDP ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::GetClosureThis
_TEXT	ENDS
PUBLIC	?GetClosureMemPtr@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QBEP8GenericClass@23@AEHHPBD@ZXZ ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::GetClosureMemPtr
; Function compile flags: /Ogtpy
;	COMDAT ?GetClosureMemPtr@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QBEP8GenericClass@23@AEHHPBD@ZXZ
_TEXT	SEGMENT
?GetClosureMemPtr@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QBEP8GenericClass@23@AEHHPBD@ZXZ PROC ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::GetClosureMemPtr, COMDAT
; _this$ = ecx

; 702  : 	inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?GetClosureMemPtr@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QBEP8GenericClass@23@AEHHPBD@ZXZ ENDP ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::GetClosureMemPtr
_TEXT	ENDS
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 3384 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN4@max
	mov	eax, ecx
$LN4@max:

; 3385 : 	}

	ret	0
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
PUBLIC	?getArray@?$ArrayWrapper@H@@QAEPAHXZ		; ArrayWrapper<int>::getArray
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ?getArray@?$ArrayWrapper@H@@QAEPAHXZ
_TEXT	SEGMENT
?getArray@?$ArrayWrapper@H@@QAEPAHXZ PROC		; ArrayWrapper<int>::getArray, COMDAT
; _this$ = ecx

; 382  : 		return m_values;

	mov	eax, DWORD PTR [ecx]

; 383  : 	}

	ret	0
?getArray@?$ArrayWrapper@H@@QAEPAHXZ ENDP		; ArrayWrapper<int>::getArray
_TEXT	ENDS
PUBLIC	?getArray@?$ArrayWrapper@H@@QBEPBHXZ		; ArrayWrapper<int>::getArray
; Function compile flags: /Ogtpy
;	COMDAT ?getArray@?$ArrayWrapper@H@@QBEPBHXZ
_TEXT	SEGMENT
?getArray@?$ArrayWrapper@H@@QBEPBHXZ PROC		; ArrayWrapper<int>::getArray, COMDAT
; _this$ = ecx

; 386  : 		return m_values;

	mov	eax, DWORD PTR [ecx]

; 387  : 	}

	ret	0
?getArray@?$ArrayWrapper@H@@QBEPBHXZ ENDP		; ArrayWrapper<int>::getArray
_TEXT	ENDS
PUBLIC	?getCount@?$ArrayWrapper@H@@QBEHXZ		; ArrayWrapper<int>::getCount
; Function compile flags: /Ogtpy
;	COMDAT ?getCount@?$ArrayWrapper@H@@QBEHXZ
_TEXT	SEGMENT
?getCount@?$ArrayWrapper@H@@QBEHXZ PROC			; ArrayWrapper<int>::getCount, COMDAT
; _this$ = ecx

; 391  : 		return m_count;

	mov	eax, DWORD PTR [ecx+4]

; 392  : 	}

	ret	0
?getCount@?$ArrayWrapper@H@@QBEHXZ ENDP			; ArrayWrapper<int>::getCount
_TEXT	ENDS
PUBLIC	??$implicit_cast@PAVCvGame@@PAV1@@detail@fastdelegate@@YAPAVCvGame@@PAV2@@Z ; fastdelegate::detail::implicit_cast<CvGame *,CvGame *>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$implicit_cast@PAVCvGame@@PAV1@@detail@fastdelegate@@YAPAVCvGame@@PAV2@@Z
_TEXT	SEGMENT
_input$ = 8						; size = 4
??$implicit_cast@PAVCvGame@@PAV1@@detail@fastdelegate@@YAPAVCvGame@@PAV2@@Z PROC ; fastdelegate::detail::implicit_cast<CvGame *,CvGame *>, COMDAT

; 153  : 	return input;

	mov	eax, DWORD PTR _input$[esp-4]

; 154  : }

	ret	0
??$implicit_cast@PAVCvGame@@PAV1@@detail@fastdelegate@@YAPAVCvGame@@PAV2@@Z ENDP ; fastdelegate::detail::implicit_cast<CvGame *,CvGame *>
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@H$0DC@$00@@QBE_NABU01@@Z ; CvWeightedVector<int,50,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??MWeightedElement@?$CvWeightedVector@H$0DC@$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@H$0DC@$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<int,50,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@H$0DC@$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<int,50,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::pair<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>::pair<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::pair<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>::pair<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::pair<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>::pair<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$Convert@VCvGame@@P81@AEHHPBD@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SAPAVGenericClass@12@PAVCvGame@@P84@AEHHPBD@ZAAP8312@AEXXZ@Z ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<CvGame,int (__thiscall CvGame::*)(int,char const *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$Convert@VCvGame@@P81@AEHHPBD@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SAPAVGenericClass@12@PAVCvGame@@P84@AEHHPBD@ZAAP8312@AEXXZ@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
_function_to_bind$ = 12					; size = 4
_bound_func$ = 16					; size = 4
??$Convert@VCvGame@@P81@AEHHPBD@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SAPAVGenericClass@12@PAVCvGame@@P84@AEHHPBD@ZAAP8312@AEXXZ@Z PROC ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<CvGame,int (__thiscall CvGame::*)(int,char const *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>, COMDAT

; 306  : 			GenericMemFuncType &bound_func) {
; 307  : #if defined __DMC__  
; 308  : 		// Digital Mars doesn't allow you to cast between abitrary PMF's, 
; 309  : 		// even though the standard says you can. The 32-bit compiler lets you
; 310  : 		// static_cast through an int, but the DOS compiler doesn't.
; 311  : 		bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
; 312  : #else 
; 313  :         bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);

	mov	eax, DWORD PTR _bound_func$[esp-4]
	mov	ecx, DWORD PTR _function_to_bind$[esp-4]
	mov	DWORD PTR [eax], ecx

; 314  : #endif
; 315  :         return reinterpret_cast<GenericClass *>(pthis);

	mov	eax, DWORD PTR _pthis$[esp-4]

; 316  : 	}

	ret	0
??$Convert@VCvGame@@P81@AEHHPBD@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SAPAVGenericClass@12@PAVCvGame@@P84@AEHHPBD@ZAAP8312@AEXXZ@Z ENDP ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<CvGame,int (__thiscall CvGame::*)(int,char const *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@Z ; std::_Dist_type<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::swap<CvWeightedVector<int,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::swap<CvWeightedVector<int,50,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::swap<CvWeightedVector<int,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap
	npad	1
$LL3@Push_heap:
	cmp	DWORD PTR [esi+eax*8+4], ebx
	jle	SHORT $LN1@Push_heap

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	edx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [esi+ecx*8+4], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap
$LN1@Push_heap:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	pop	edi
	mov	DWORD PTR [esi+ecx*8+4], ebx
	mov	DWORD PTR [esi+ecx*8], eax
	pop	esi
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::_Iter_random<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw
	push	esi
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw
	pop	esi
$LN1@Copy_backw:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0CvString@@QAE@PBD@Z				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0CvString@@QAE@PBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??0CvString@@QAE@PBD@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 25   : 	CvString(const char* s) : std::string(s ? s : "") {CvAssertMsg(s != NULL, "Passing NULL to std::string; possible heap corruption!");}

	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, ecx
	test	eax, eax
	jne	SHORT $LN4@CvString
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@CvString:
	push	eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@PBD@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??BCvString@@QBEPBDXZ				; CvString::operator char const *
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??BCvString@@QBEPBDXZ
_TEXT	SEGMENT
??BCvString@@QBEPBDXZ PROC				; CvString::operator char const *, COMDAT
; _this$ = ecx

; 31   : 	operator const char*() const 	{ return c_str(); }												

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
??BCvString@@QBEPBDXZ ENDP				; CvString::operator char const *
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CvString::operator=, COMDAT
; _this$ = ecx

; 38   : 	CvString& operator=( const std::string& s) { assign(s.c_str());	return *this; }	

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _s$[esp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CvString::operator=
_TEXT	ENDS
PUBLIC	?GetCString@CvString@@QBEPBDXZ			; CvString::GetCString
; Function compile flags: /Ogtpy
;	COMDAT ?GetCString@CvString@@QBEPBDXZ
_TEXT	SEGMENT
?GetCString@CvString@@QBEPBDXZ PROC			; CvString::GetCString, COMDAT
; _this$ = ecx

; 42   : 	const char* GetCString() const 	{ return c_str(); }

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetCString@CvString@@QBEPBDXZ ENDP			; CvString::GetCString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
_buf$ = -2048						; size = 2048
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	sub	esp, 2048				; 00000800H
	push	ebx
	push	ebp

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	mov	ebp, DWORD PTR _args$[esp+2052]
	push	esi
	push	edi
	lea	edi, DWORD PTR _buf$[esp+2064]
	mov	esi, 2047				; 000007ffH
	npad	6
$LL10@formatv:

; 194  : 	int len = 0;
; 195  : 	int attempts = 0;
; 196  : 	bool success = false;
; 197  : 	const int kMaxAttempts = 40;
; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;
; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	eax, DWORD PTR _fmt$[esp+2060]
	push	ebp
	push	eax
	push	esi
	push	edi
	mov	ebx, esi
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H

; 203  : 		attempts++;

	add	esi, 2048				; 00000800H

; 204  : 		success = (len>=0 && len<=maxlen);

	test	eax, eax
	jl	SHORT $LN13@formatv
	cmp	eax, ebx
	jle	SHORT $LN18@formatv
$LN13@formatv:

; 205  : 		if (!success)
; 206  : 		{
; 207  : 			if (pbuf!=buf)

	lea	ecx, DWORD PTR _buf$[esp+2064]
	xor	bl, bl
	cmp	edi, ecx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	lea	edx, DWORD PTR [esi+1]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	cmp	esi, 83967				; 000147ffH
	mov	edi, eax
	jl	SHORT $LL10@formatv

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@formatv:
	mov	ecx, DWORD PTR _out$[esp+2064]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 223  : 
; 224  : 	if (pbuf!=buf)

	lea	eax, DWORD PTR _buf$[esp+2064]
	cmp	edi, eax
	je	SHORT $LN20@formatv

; 225  : 		delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN20@formatv:
	pop	edi
	pop	esi
	pop	ebp

; 226  : 
; 227  : 	return success;

	mov	al, bl
	pop	ebx

; 228  : }

	add	esp, 2048				; 00000800H
	ret	0
$LN18@formatv:

; 204  : 		success = (len>=0 && len<=maxlen);

	mov	bl, 1

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)
; 220  : 		out = pbuf;

	push	edi

; 221  : 	else

	jmp	SHORT $LN21@formatv
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);
; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _lpszFormat$[esp+36]
	lea	eax, DWORD PTR _lpszFormat$[esp+40]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _result$[esp+48]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+60], 0
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);
; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR _this$[esp+36]
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	lea	ecx, DWORD PTR _result$[esp+40]
	mov	DWORD PTR __$EHRec$[esp+48], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	?GetDescription@CvBaseInfo@@QBEPBDXZ		; CvBaseInfo::GetDescription
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
;	COMDAT ?GetDescription@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
?GetDescription@CvBaseInfo@@QBEPBDXZ PROC		; CvBaseInfo::GetDescription, COMDAT
; _this$ = ecx

; 64   : 		return m_strDescription.c_str();

	add	ecx, 36					; 00000024H
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetDescription@CvBaseInfo@@QBEPBDXZ ENDP		; CvBaseInfo::GetDescription
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	?getNumFlavorTypes@CvGlobals@@QAEHXZ		; CvGlobals::getNumFlavorTypes
; Function compile flags: /Ogtpy
;	COMDAT ?getNumFlavorTypes@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getNumFlavorTypes@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumFlavorTypes, COMDAT
; _this$ = ecx

; 804  : 		return m_iNumFlavorTypes;

	mov	eax, DWORD PTR [ecx+1764]

; 805  : 	}

	ret	0
?getNumFlavorTypes@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumFlavorTypes
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z		; CvTeam::getTeam
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvteam.h
;	COMDAT ?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z PROC		; CvTeam::getTeam, COMDAT

; 29   : 		CvAssertMsg(eTeam != NO_TEAM, "eTeam is not assigned a valid value");
; 30   : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is not assigned a valid value");
; 31   : 		return m_aTeams[eTeam];

	mov	eax, DWORD PTR _eTeam$[esp-4]
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams

; 32   : 	}

	ret	0
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z ENDP		; CvTeam::getTeam
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@ABV0@@Z			; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??0CvString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CvString@@QAE@ABV0@@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@ABV0@@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??0DelegateMemento@fastdelegate@@QAE@XZ		; fastdelegate::DelegateMemento::DelegateMemento
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??0DelegateMemento@fastdelegate@@QAE@XZ
_TEXT	SEGMENT
??0DelegateMemento@fastdelegate@@QAE@XZ PROC		; fastdelegate::DelegateMemento::DelegateMemento, COMDAT
; _this$ = ecx

; 579  : 	DelegateMemento() : m_pthis(0), m_pFunction(0) {};

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0DelegateMemento@fastdelegate@@QAE@XZ ENDP		; fastdelegate::DelegateMemento::DelegateMemento
_TEXT	ENDS
PUBLIC	?clear@DelegateMemento@fastdelegate@@QAEXXZ	; fastdelegate::DelegateMemento::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@DelegateMemento@fastdelegate@@QAEXXZ
_TEXT	SEGMENT
?clear@DelegateMemento@fastdelegate@@QAEXXZ PROC	; fastdelegate::DelegateMemento::clear, COMDAT
; _this$ = ecx

; 580  : 	void clear() {	m_pthis=0; m_pFunction=0;	}

	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@DelegateMemento@fastdelegate@@QAEXXZ ENDP	; fastdelegate::DelegateMemento::clear
_TEXT	ENDS
PUBLIC	?SetMementoFrom@DelegateMemento@fastdelegate@@IAEXABV12@@Z ; fastdelegate::DelegateMemento::SetMementoFrom
; Function compile flags: /Ogtpy
;	COMDAT ?SetMementoFrom@DelegateMemento@fastdelegate@@IAEXABV12@@Z
_TEXT	SEGMENT
_right$ = 8						; size = 4
?SetMementoFrom@DelegateMemento@fastdelegate@@IAEXABV12@@Z PROC ; fastdelegate::DelegateMemento::SetMementoFrom, COMDAT
; _this$ = ecx

; 637  : 		m_pFunction = right.m_pFunction;

	mov	eax, DWORD PTR _right$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 638  : 		m_pthis = right.m_pthis;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 639  : #if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
; 640  : 		m_pStaticFunction = right.m_pStaticFunction;
; 641  : #endif
; 642  : 	}

	ret	4
?SetMementoFrom@DelegateMemento@fastdelegate@@IAEXABV12@@Z ENDP ; fastdelegate::DelegateMemento::SetMementoFrom
_TEXT	ENDS
PUBLIC	??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z PROC ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 771  : 		}

	ret	4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ENDP ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
_TEXT	ENDS
PUBLIC	??$?6H@FDataStream@@QAEAAV0@ABH@Z		; FDataStream::operator<<<int>
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?6H@FDataStream@@QAEAAV0@ABH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6H@FDataStream@@QAEAAV0@ABH@Z PROC			; FDataStream::operator<<<int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6H@FDataStream@@QAEAAV0@ABH@Z ENDP			; FDataStream::operator<<<int>
_TEXT	ENDS
PUBLIC	??$?5H@FDataStream@@QAEAAV0@AAH@Z		; FDataStream::operator>><int>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5H@FDataStream@@QAEAAV0@AAH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5H@FDataStream@@QAEAAV0@AAH@Z PROC			; FDataStream::operator>><int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5H@FDataStream@@QAEAAV0@AAH@Z ENDP			; FDataStream::operator>><int>
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ	; FAutoVariable<bool,CvPlayer>::operator bool const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ
_TEXT	SEGMENT
??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ PROC	; FAutoVariable<bool,CvPlayer>::operator bool const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ ENDP	; FAutoVariable<bool,CvPlayer>::operator bool const &
_TEXT	ENDS
PUBLIC	??$?5I@FDataStream@@QAEAAV0@AAI@Z		; FDataStream::operator>><unsigned int>
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5I@FDataStream@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5I@FDataStream@@QAEAAV0@AAI@Z PROC			; FDataStream::operator>><unsigned int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5I@FDataStream@@QAEAAV0@AAI@Z ENDP			; FDataStream::operator>><unsigned int>
_TEXT	ENDS
PUBLIC	??$?6I@FDataStream@@QAEAAV0@ABI@Z		; FDataStream::operator<<<unsigned int>
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6I@FDataStream@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6I@FDataStream@@QAEAAV0@ABI@Z PROC			; FDataStream::operator<<<unsigned int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6I@FDataStream@@QAEAAV0@ABI@Z ENDP			; FDataStream::operator<<<unsigned int>
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@H$0IH@$00@@QBEHI@Z ; CvWeightedVector<int,135,1>::GetWeight
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?GetWeight@?$CvWeightedVector@H$0IH@$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -8						; size = 8
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@H$0IH@$00@@QBEHI@Z PROC	; CvWeightedVector<int,135,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 8

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$[esp+8], edx

; 75   : 	}

	add	esp, 8
	ret	4
?GetWeight@?$CvWeightedVector@H$0IH@$00@@QBEHI@Z ENDP	; CvWeightedVector<int,135,1>::GetWeight
_TEXT	ENDS
PUBLIC	?IncreaseWeight@?$CvWeightedVector@H$0IH@$00@@QAEXIH@Z ; CvWeightedVector<int,135,1>::IncreaseWeight
; Function compile flags: /Ogtpy
;	COMDAT ?IncreaseWeight@?$CvWeightedVector@H$0IH@$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?IncreaseWeight@?$CvWeightedVector@H$0IH@$00@@QAEXIH@Z PROC ; CvWeightedVector<int,135,1>::IncreaseWeight, COMDAT
; _this$ = ecx

; 78   : 		m_pItems[iIndex].m_iWeight += iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	mov	edx, DWORD PTR _iWeight$[esp-4]
	add	DWORD PTR [eax+ecx*8+4], edx
	lea	eax, DWORD PTR [eax+ecx*8+4]

; 79   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 80   : 	}

	ret	8
?IncreaseWeight@?$CvWeightedVector@H$0IH@$00@@QAEXIH@Z ENDP ; CvWeightedVector<int,135,1>::IncreaseWeight
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@H$0DC@$00@@QBEABHI@Z ; CvWeightedVector<int,50,1>::GetElement
; Function compile flags: /Ogtpy
;	COMDAT ?GetElement@?$CvWeightedVector@H$0DC@$00@@QBEABHI@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@H$0DC@$00@@QBEABHI@Z PROC ; CvWeightedVector<int,50,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@H$0DC@$00@@QBEABHI@Z ENDP ; CvWeightedVector<int,50,1>::GetElement
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@H$0DC@$00@@QBEHI@Z ; CvWeightedVector<int,50,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@H$0DC@$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -8						; size = 8
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@H$0DC@$00@@QBEHI@Z PROC	; CvWeightedVector<int,50,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 8

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$[esp+8], edx

; 75   : 	}

	add	esp, 8
	ret	4
?GetWeight@?$CvWeightedVector@H$0DC@$00@@QBEHI@Z ENDP	; CvWeightedVector<int,50,1>::GetWeight
_TEXT	ENDS
PUBLIC	?GetTotalWeight@?$CvWeightedVector@H$0DC@$00@@QAEHXZ ; CvWeightedVector<int,50,1>::GetTotalWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetTotalWeight@?$CvWeightedVector@H$0DC@$00@@QAEHXZ
_TEXT	SEGMENT
_rtnValue$ = -4						; size = 4
?GetTotalWeight@?$CvWeightedVector@H$0DC@$00@@QAEHXZ PROC ; CvWeightedVector<int,50,1>::GetTotalWeight, COMDAT
; _this$ = ecx

; 89   : 	{

	push	ecx
	push	ebx
	mov	ebx, DWORD PTR [ecx+4]
	push	ebp
	push	esi
	push	edi

; 90   : 		int rtnValue = 0;

	xor	edx, edx
	xor	esi, esi
	xor	edi, edi

; 91   : 
; 92   : 		for (unsigned int i = 0; i < m_pItems.size(); i++)

	xor	ebp, ebp
	cmp	ebx, 2
	mov	DWORD PTR _rtnValue$[esp+20], edx
	jl	SHORT $LC15@GetTotalWe

; 93   : 		{
; 94   : 			WeightedElement elem = m_pItems[i];
; 95   : 			rtnValue += elem.m_iWeight;

	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [ebx-2]
	shr	edx, 1
	add	eax, 12					; 0000000cH
	inc	edx
	lea	ebp, DWORD PTR [edx+edx]
$LL16@GetTotalWe:
	add	esi, DWORD PTR [eax-8]
	add	edi, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	sub	edx, 1
	jne	SHORT $LL16@GetTotalWe
	mov	edx, DWORD PTR _rtnValue$[esp+20]
$LC15@GetTotalWe:

; 91   : 
; 92   : 		for (unsigned int i = 0; i < m_pItems.size(); i++)

	cmp	ebp, ebx
	jae	SHORT $LN14@GetTotalWe

; 93   : 		{
; 94   : 			WeightedElement elem = m_pItems[i];
; 95   : 			rtnValue += elem.m_iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+ebp*8+4]
$LN14@GetTotalWe:
	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
	pop	ebp

; 96   : 		}
; 97   : 
; 98   : 		return rtnValue;

	add	eax, edx
	pop	ebx

; 99   : 	};

	pop	ecx
	ret	0
?GetTotalWeight@?$CvWeightedVector@H$0DC@$00@@QAEHXZ ENDP ; CvWeightedVector<int,50,1>::GetTotalWeight
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@H$0DC@$00@@QAEHXZ	; CvWeightedVector<int,50,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@H$0DC@$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@H$0DC@$00@@QAEHXZ PROC		; CvWeightedVector<int,50,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@H$0DC@$00@@QAEHXZ ENDP		; CvWeightedVector<int,50,1>::size
_TEXT	ENDS
PUBLIC	??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAE@XZ ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAE@XZ
_TEXT	SEGMENT
??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAE@XZ PROC ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAE@XZ ENDP ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 135			; 00000087H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<int,135,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 50			; 00000032H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<int,50,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	??R?$FastDelegate2@HPBDH@fastdelegate@@QBEHHPBD@Z ; fastdelegate::FastDelegate2<int,char const *,int>::operator()
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??R?$FastDelegate2@HPBDH@fastdelegate@@QBEHHPBD@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
??R?$FastDelegate2@HPBDH@fastdelegate@@QBEHHPBD@Z PROC	; fastdelegate::FastDelegate2<int,char const *,int>::operator(), COMDAT
; _this$ = ecx

; 1080 : 	return (m_Closure.GetClosureThis()->*(m_Closure.GetClosureMemPtr()))(p1, p2); }

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	jmp	eax
??R?$FastDelegate2@HPBDH@fastdelegate@@QBEHHPBD@Z ENDP	; fastdelegate::FastDelegate2<int,char const *,int>::operator()
_TEXT	ENDS
PUBLIC	?clear@?$FastDelegate2@HPBDH@fastdelegate@@QAEXXZ ; fastdelegate::FastDelegate2<int,char const *,int>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$FastDelegate2@HPBDH@fastdelegate@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FastDelegate2@HPBDH@fastdelegate@@QAEXXZ PROC	; fastdelegate::FastDelegate2<int,char const *,int>::clear, COMDAT
; _this$ = ecx

; 1101 : 	void clear() { m_Closure.clear();}

	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FastDelegate2@HPBDH@fastdelegate@@QAEXXZ ENDP	; fastdelegate::FastDelegate2<int,char const *,int>::clear
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0IH@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::Free
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@2

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@2:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::Free
_TEXT	ENDS
PUBLIC	??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ; operator>><int>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_v$ = 12						; size = 4
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z PROC ; operator>><int>, COMDAT

; 516  : 	int i = 0;
; 517  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[esp-4]
	push	esi

; 518  : 	ValueType * values = v.getArray();

	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, DWORD PTR [eax+4]

; 519  : 	for(i = 0; i < count; ++i)

	test	edi, edi
	jle	SHORT $LN14@operator
	push	ebx
	mov	ebx, DWORD PTR _loadFrom$[esp+8]
$LL3@operator:

; 520  : 	{
; 521  : 		loadFrom >> values[i];

	push	esi
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	add	esi, 4
	sub	edi, 1
	jne	SHORT $LL3@operator

; 522  : 	}
; 523  : 	return loadFrom;

	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi

; 524  : }

	ret	0
$LN14@operator:

; 522  : 	}
; 523  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[esp+4]
	pop	edi
	pop	esi

; 524  : }

	ret	0
??$?5H@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@H@@@Z ENDP ; operator>><int>
_TEXT	ENDS
PUBLIC	??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ; operator<<<int>
; Function compile flags: /Ogtpy
;	COMDAT ??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_v$ = 12						; size = 4
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z PROC ; operator<<<int>, COMDAT

; 503  : 	int i = 0;
; 504  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[esp-4]
	push	esi

; 505  : 	const ValueType * values = v.getArray();

	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, DWORD PTR [eax+4]

; 506  : 	for(i = 0; i < count; ++i)

	test	edi, edi
	jle	SHORT $LN14@operator@2
	push	ebx
	mov	ebx, DWORD PTR _saveTo$[esp+8]
$LL3@operator@2:

; 507  : 	{
; 508  : 		saveTo << values[i];

	push	esi
	mov	ecx, ebx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	esi, 4
	sub	edi, 1
	jne	SHORT $LL3@operator@2

; 509  : 	}
; 510  : 	return saveTo;

	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi

; 511  : }

	ret	0
$LN14@operator@2:

; 509  : 	}
; 510  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[esp+4]
	pop	edi
	pop	esi

; 511  : }

	ret	0
??$?6H@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@H@@@Z ENDP ; operator<<<int>
_TEXT	ENDS
PUBLIC	??$CopyFrom@V?$FastDelegate2@HPBDH@fastdelegate@@@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAV?$FastDelegate2@HPBDH@2@ABVDelegateMemento@2@@Z ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::CopyFrom<fastdelegate::FastDelegate2<int,char const *,int> >
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$CopyFrom@V?$FastDelegate2@HPBDH@fastdelegate@@@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAV?$FastDelegate2@HPBDH@2@ABVDelegateMemento@2@@Z
_TEXT	SEGMENT
_pParent$ = 8						; size = 4
_right$ = 12						; size = 4
??$CopyFrom@V?$FastDelegate2@HPBDH@fastdelegate@@@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAV?$FastDelegate2@HPBDH@2@ABVDelegateMemento@2@@Z PROC ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::CopyFrom<fastdelegate::FastDelegate2<int,char const *,int> >, COMDAT
; _this$ = ecx

; 763  : #endif
; 764  : 		SetMementoFrom(right);

	mov	eax, DWORD PTR _right$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 765  : 	}

	ret	8
??$CopyFrom@V?$FastDelegate2@HPBDH@fastdelegate@@@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAV?$FastDelegate2@HPBDH@2@ABVDelegateMemento@2@@Z ENDP ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::CopyFrom<fastdelegate::FastDelegate2<int,char const *,int> >
_TEXT	ENDS
PUBLIC	??$bindmemfunc@VCvGame@@P81@AEHHPBD@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAVCvGame@@P83@AEHHPBD@Z@Z ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::bindmemfunc<CvGame,int (__thiscall CvGame::*)(int,char const *)>
; Function compile flags: /Ogtpy
;	COMDAT ??$bindmemfunc@VCvGame@@P81@AEHHPBD@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAVCvGame@@P83@AEHHPBD@Z@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
_function_to_bind$ = 12					; size = 4
??$bindmemfunc@VCvGame@@P81@AEHHPBD@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAVCvGame@@P83@AEHHPBD@Z@Z PROC ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::bindmemfunc<CvGame,int (__thiscall CvGame::*)(int,char const *)>, COMDAT
; _this$ = ecx

; 673  : 		m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
; 674  : 			::Convert(pthis, function_to_bind, m_pFunction);

	mov	eax, DWORD PTR _function_to_bind$[esp-4]
	mov	edx, DWORD PTR _pthis$[esp-4]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx], edx

; 675  : #if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
; 676  : 		m_pStaticFunction = 0;
; 677  : #endif
; 678  : 	}

	ret	8
??$bindmemfunc@VCvGame@@P81@AEHHPBD@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAVCvGame@@P83@AEHHPBD@Z@Z ENDP ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::bindmemfunc<CvGame,int (__thiscall CvGame::*)(int,char const *)>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::iter_swap<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	jle	SHORT $LN10@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN10@Med3:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+4]
	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [eax+4]
	jle	SHORT $LN19@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3
	mov	edi, DWORD PTR [edx]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	pop	ebx
$LN19@Med3:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN28@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN28@Med3:
	pop	edi
	pop	esi

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	edx, DWORD PTR __Hole$[esp-4]

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp+4]
	lea	eax, DWORD PTR [edx+edx+2]
	cmp	eax, esi
	push	edi
	mov	edi, edx
	jge	SHORT $LN14@Adjust_hea
	npad	7
$LL5@Adjust_hea:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [ecx+eax*8+4]
	cmp	ebx, DWORD PTR [ecx+eax*8-4]
	jle	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [ecx+edx*8], ebx
	mov	ebx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], ebx
	mov	edx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea
$LN14@Adjust_hea:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	edx, DWORD PTR [esi-1]
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	esi, DWORD PTR __Val$[esp+8]
	sub	esp, 8
	mov	eax, esp
	push	edi
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Val$[esp+24]
	push	edx
	push	ecx
	mov	DWORD PTR [eax+4], esi
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_
	push	esi
$LL8@unchecked_:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_
	pop	esi
$LN7@unchecked_:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 8
___formal$ = 28						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR __Last$[esp+4]
	sub	ecx, eax
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT
; _p$ = eax

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 302  : }

	ret	0
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1

; 302  : }

	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
PUBLIC	?isAlive@CvPlayer@@QBE_NXZ			; CvPlayer::isAlive
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
;	COMDAT ?isAlive@CvPlayer@@QBE_NXZ
_TEXT	SEGMENT
?isAlive@CvPlayer@@QBE_NXZ PROC				; CvPlayer::isAlive, COMDAT
; _this$ = ecx

; 1092 : 		return m_bAlive;

	mov	al, BYTE PTR [ecx+2256]

; 1093 : 	}

	ret	0
?isAlive@CvPlayer@@QBE_NXZ ENDP				; CvPlayer::isAlive
_TEXT	ENDS
PUBLIC	?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ		; CvPlayer::GetID
; Function compile flags: /Ogtpy
;	COMDAT ?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ PROC		; CvPlayer::GetID, COMDAT
; _this$ = ecx

; 1168 : 		return m_eID;

	mov	eax, DWORD PTR [ecx+44]

; 1169 : 	}

	ret	0
?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ ENDP		; CvPlayer::GetID
_TEXT	ENDS
PUBLIC	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ		; CvPlayer::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ PROC		; CvPlayer::getTeam, COMDAT
; _this$ = ecx

; 1178 : 		return CvPreGame::teamType(m_eID);

	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN5@getTeam
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 1179 : 	}

	ret	0

; 1178 : 		return CvPreGame::teamType(m_eID);

$LN5@getTeam:
	or	eax, -1

; 1179 : 	}

	ret	0
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ ENDP		; CvPlayer::getTeam
_TEXT	ENDS
PUBLIC	?Write@CvWonderProductionAI@@QBEXAAVFDataStream@@@Z ; CvWonderProductionAI::Write
EXTRN	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z:PROC ; CvInfosSerializationHelper::WriteHashed
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ:PROC ; CvBuildingXMLEntries::GetNumBuildings
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
;	COMDAT ?Write@CvWonderProductionAI@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_uiVersion$ = -16					; size = 4
$T225252 = -12						; size = 4
_elem$225312 = -8					; size = 8
$T225253 = -8						; size = 4
_iNumBuildings$223247 = 8				; size = 4
$T225250 = 8						; size = 4
_kStream$ = 8						; size = 4
?Write@CvWonderProductionAI@@QBEXAAVFDataStream@@@Z PROC ; CvWonderProductionAI::Write, COMDAT
; _this$ = ecx

; 133  : {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi

; 136  : 	kStream << uiVersion;

	mov	esi, DWORD PTR _kStream$[esp+24]
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+32]
	mov	ebp, ecx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR _uiVersion$[esp+36], 1
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 137  : 
; 138  : 	CvAssertMsg(m_piLatestFlavorValues != NULL && GC.getNumFlavorTypes() > 0, "Number of flavor values to serialize is expected to greater than 0");
; 139  : 	kStream << GC.getNumFlavorTypes();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	lea	edx, DWORD PTR $T225250[esp+28]
	mov	DWORD PTR $T225250[esp+28], ecx
	push	edx
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 140  : 	kStream << ArrayWrapper<int>(GC.getNumFlavorTypes(), m_piLatestFlavorValues);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	mov	edi, DWORD PTR [ebp+8]
	test	eax, eax
	jle	SHORT $LN20@Write

; 134  : 	// Current version number
; 135  : 	uint uiVersion = 1;

	mov	ebx, eax

; 140  : 	kStream << ArrayWrapper<int>(GC.getNumFlavorTypes(), m_piLatestFlavorValues);

$LL22@Write:
	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebx, 1
	jne	SHORT $LL22@Write
$LN20@Write:

; 141  : 
; 142  : 	if(m_pBuildings)

	mov	ecx, DWORD PTR [ebp+16]
	test	ecx, ecx
	je	SHORT $LN4@Write

; 143  : 	{
; 144  : 		int iNumBuildings = m_pBuildings->GetNumBuildings();

	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	mov	DWORD PTR _iNumBuildings$223247[esp+28], eax

; 145  : 		kStream << iNumBuildings;

	lea	eax, DWORD PTR _iNumBuildings$223247[esp+28]
	push	eax
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 146  : 
; 147  : 		// Loop through writing each entry
; 148  : 		for(int iI = 0; iI < iNumBuildings; iI++)

	xor	ebx, ebx
	xor	edi, edi
	cmp	DWORD PTR _iNumBuildings$223247[esp+28], ebx
	jle	SHORT $LN4@Write
	npad	5
$LL6@Write:

; 149  : 		{
; 150  : 			const BuildingTypes eBuilding = static_cast<BuildingTypes>(iI);
; 151  : 			CvBuildingEntry* pkBuildingInfo = GC.getBuildingInfo(eBuilding);

	push	edi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo

; 152  : 			if(pkBuildingInfo)

	cmp	eax, ebx
	je	SHORT $LN3@Write

; 153  : 			{
; 154  : 				CvInfosSerializationHelper::WriteHashed(kStream, pkBuildingInfo);

	push	eax
	push	esi
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z ; CvInfosSerializationHelper::WriteHashed

; 155  : 				kStream << m_WonderAIWeights.GetWeight(iI);

	mov	eax, DWORD PTR [ebp+20]
	mov	ecx, DWORD PTR [eax+edi*8]
	mov	eax, DWORD PTR [eax+edi*8+4]
	add	esp, 8
	lea	edx, DWORD PTR $T225252[esp+32]
	mov	DWORD PTR _elem$225312[esp+32], ecx
	mov	DWORD PTR $T225252[esp+32], eax
	push	edx

; 156  : 			}
; 157  : 			else

	jmp	SHORT $LN47@Write
$LN3@Write:

; 158  : 			{
; 159  : 				kStream << (int)0;

	lea	eax, DWORD PTR $T225253[esp+32]
	mov	DWORD PTR $T225253[esp+32], ebx
	push	eax
$LN47@Write:
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	edi
	cmp	edi, DWORD PTR _iNumBuildings$223247[esp+28]
	jl	SHORT $LL6@Write
$LN4@Write:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 160  : 			}
; 161  : 		}
; 162  : 	}
; 163  : 	else
; 164  : 	{
; 165  : 		CvAssertMsg(m_pBuildings != NULL, "Wonder Production AI init failure: building entries are NULL");
; 166  : 	}
; 167  : }

	add	esp, 16					; 00000010H
	ret	4
?Write@CvWonderProductionAI@@QBEXAAVFDataStream@@@Z ENDP ; CvWonderProductionAI::Write
_TEXT	ENDS
PUBLIC	?AddFlavorWeights@CvWonderProductionAI@@QAEXW4FlavorTypes@@H@Z ; CvWonderProductionAI::AddFlavorWeights
EXTRN	?GetFlavorValue@CvBuildingEntry@@QBEHH@Z:PROC	; CvBuildingEntry::GetFlavorValue
EXTRN	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z:PROC ; CvBuildingXMLEntries::GetEntry
; Function compile flags: /Ogtpy
;	COMDAT ?AddFlavorWeights@CvWonderProductionAI@@QAEXW4FlavorTypes@@H@Z
_TEXT	SEGMENT
_eFlavor$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?AddFlavorWeights@CvWonderProductionAI@@QAEXW4FlavorTypes@@H@Z PROC ; CvWonderProductionAI::AddFlavorWeights, COMDAT
; _this$ = ecx

; 182  : {

	push	ebx
	mov	ebx, ecx

; 183  : #ifdef AUI_PER_CITY_WONDER_PRODUCTION_AI
; 184  : #ifdef AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS
; 185  : 	CvPlayer* pPlayer = m_pCity->GetPlayer();
; 186  : 	CvPlayerPolicies* pPlayerPolicies = NULL;
; 187  : 	if (pPlayer)
; 188  : 		pPlayerPolicies = pPlayer->GetPlayerPolicies();
; 189  : #endif
; 190  : #ifdef AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS
; 191  : 	const CvReligion* pReligion = GC.getGame().GetGameReligions()->GetReligion(m_pCity->GetCityReligions()->GetReligiousMajority(), m_pCity->getOwner());
; 192  : #endif
; 193  : #else
; 194  : #ifdef AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS
; 195  : 	CvPlayer* pPlayer = m_pPlayer;
; 196  : 	CvPlayerPolicies* pPlayerPolicies = NULL;
; 197  : 	if (pPlayer)
; 198  : 		pPlayerPolicies = pPlayer->GetPlayerPolicies();
; 199  : #endif
; 200  : #ifdef AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS
; 201  : 	CvCity* pCapitol = m_pPlayer->getCapitalCity();
; 202  : 	const CvReligion* pReligion = NULL;
; 203  : 	if (pCapitol)
; 204  : 		pReligion = GC.getGame().GetGameReligions()->GetReligion(pCapitol->GetCityReligions()->GetReligiousMajority(), m_pPlayer->GetID());
; 205  : #endif
; 206  : #endif
; 207  : 	// Loop through all buildings (even though we're only go to do anything on wonders)
; 208  : #ifdef AUI_WARNING_FIXES
; 209  : 	for (uint iBldg = 0; iBldg < m_pBuildings->GetNumBuildings(); iBldg++)
; 210  : #else
; 211  : 	for(int iBldg = 0; iBldg < m_pBuildings->GetNumBuildings(); iBldg++)

	mov	ecx, DWORD PTR [ebx+16]
	push	edi
	xor	edi, edi
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	test	eax, eax
	jle	SHORT $LN3@AddFlavorW
	push	ebp
	push	esi
$LL20@AddFlavorW:

; 212  : #endif
; 213  : 	{
; 214  : 		CvBuildingEntry* entry = m_pBuildings->GetEntry(iBldg);

	mov	ecx, DWORD PTR [ebx+16]
	push	edi
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	esi, eax

; 215  : 		if(entry)

	test	esi, esi
	je	SHORT $LN4@AddFlavorW

; 216  : 		{
; 217  : 			CvBuildingEntry& kBuilding = *entry;
; 218  : 			if(IsWonder(kBuilding))

	mov	ecx, esi
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo
	mov	ebp, eax
	push	ebp
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN8@AddFlavorW
	push	ebp
	call	?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isTeamWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN8@AddFlavorW
	push	ebp
	call	?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isNationalWonderClass
	add	esp, 4
	test	al, al
	je	SHORT $LN4@AddFlavorW
$LN8@AddFlavorW:

; 219  : 			{
; 220  : 				// Set its weight by looking at wonder's weight for this flavor and using iWeight multiplier passed in
; 221  : #if defined(AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BUILDING_PRODUCTION_AI_LUA_FLAVOR_WEIGHTS) || (defined(AUI_BUILDING_PRODUCTION_AI_CONSIDER_FREE_STUFF) && defined(AUI_PER_CITY_WONDER_PRODUCTION_AI))
; 222  : 				int iFlavorValue = entry->GetFlavorValue(eFlavor);
; 223  : #endif
; 224  : #ifdef AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS
; 225  : 				if (pPlayerPolicies)
; 226  : 				{
; 227  : 					for (int iI = 0; iI < GC.getNumPolicyInfos(); iI++)
; 228  : 					{
; 229  : 						PolicyTypes ePolicy = static_cast<PolicyTypes>(iI);
; 230  : 						CvPolicyEntry* pPolicy = GC.getPolicyInfo(ePolicy);
; 231  : 						if (pPolicy && pPlayerPolicies->HasPolicy(ePolicy))
; 232  : 						{
; 233  : 							iFlavorValue += pPolicy->GetBuildingClassFlavorChanges(entry->GetBuildingClassType(), eFlavor);
; 234  : 						}
; 235  : 					}
; 236  : 				}
; 237  : #endif
; 238  : #ifdef AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS
; 239  : 				if (pReligion)
; 240  : 				{
; 241  : 					pReligion->m_Beliefs.GetBuildingClassFlavorChange(static_cast<BuildingClassTypes>(entry->GetBuildingClassType()), eFlavor);
; 242  : 				}
; 243  : #endif
; 244  : #if defined(AUI_BUILDING_PRODUCTION_AI_CONSIDER_FREE_STUFF) && defined(AUI_PER_CITY_WONDER_PRODUCTION_AI)
; 245  : #ifdef AUI_WARNING_FIXES
; 246  : 				for (uint iI = 0; iI < GC.getNumUnitInfos(); iI++)
; 247  : #else
; 248  : 				for (int iI = 0; iI < GC.getNumUnitInfos(); iI++)
; 249  : #endif
; 250  : 				{
; 251  : 					int iNumFreeUnits = entry->GetNumFreeUnits(iI);
; 252  : 					if (iNumFreeUnits > 0)
; 253  : 					{
; 254  : 						iWeight += iNumFreeUnits * m_pCity->GetCityStrategyAI()->GetUnitProductionAI()->GetWeight((UnitTypes)iI);
; 255  : 					}
; 256  : 				}
; 257  : #endif
; 258  : #if defined(AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BUILDING_PRODUCTION_AI_LUA_FLAVOR_WEIGHTS) || (defined(AUI_BUILDING_PRODUCTION_AI_CONSIDER_FREE_STUFF) && defined(AUI_PER_CITY_WONDER_PRODUCTION_AI))
; 259  : 				m_WonderAIWeights.IncreaseWeight(iBldg, iFlavorValue * iWeight);
; 260  : #else
; 261  : 				m_WonderAIWeights.IncreaseWeight(iBldg, kBuilding.GetFlavorValue(eFlavor) * iWeight);

	mov	eax, DWORD PTR _eFlavor$[esp+12]
	push	eax
	mov	ecx, esi
	call	?GetFlavorValue@CvBuildingEntry@@QBEHH@Z ; CvBuildingEntry::GetFlavorValue
	imul	eax, DWORD PTR _iWeight$[esp+12]
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ecx+edi*8+4], eax
	lea	ecx, DWORD PTR [ecx+edi*8+4]
$LN4@AddFlavorW:
	mov	ecx, DWORD PTR [ebx+16]
	inc	edi
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	edi, eax
	jl	SHORT $LL20@AddFlavorW
	pop	esi
	pop	ebp
$LN3@AddFlavorW:
	pop	edi
	pop	ebx

; 262  : #endif
; 263  : 			}
; 264  : 		}
; 265  : 	}
; 266  : }

	ret	8
?AddFlavorWeights@CvWonderProductionAI@@QAEXW4FlavorTypes@@H@Z ENDP ; CvWonderProductionAI::AddFlavorWeights
_TEXT	ENDS
PUBLIC	?GetWeight@CvWonderProductionAI@@QAEHW4BuildingTypes@@@Z ; CvWonderProductionAI::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@CvWonderProductionAI@@QAEHW4BuildingTypes@@@Z
_TEXT	SEGMENT
_elem$225364 = -8					; size = 8
_eBldg$ = 8						; size = 4
?GetWeight@CvWonderProductionAI@@QAEHW4BuildingTypes@@@Z PROC ; CvWonderProductionAI::GetWeight, COMDAT
; _this$ = ecx

; 270  : {

	sub	esp, 8

; 271  : #if defined(AUI_BUILDING_PRODUCTION_AI_CONSIDER_FREE_STUFF) && defined(AUI_PER_CITY_WONDER_PRODUCTION_AI)
; 272  : 	int iWeight = m_WonderAIWeights.GetWeight(eBldg);
; 273  : 	CvBuildingEntry* entry = m_pBuildings->GetEntry(eBldg);
; 274  : 	if (entry)
; 275  : 	{
; 276  : 		CvPlayer* pPlayer = m_pCity->GetPlayer();
; 277  : 		int iLoop = 0;
; 278  : 
; 279  : 		BuildingTypes eFreeBuildingThisCity = static_cast<BuildingTypes>(entry->GetFreeBuildingThisCity());
; 280  : 		if (eFreeBuildingThisCity != NO_BUILDING)
; 281  : 		{
; 282  : 			if (m_pCity->GetCityBuildings()->GetNumBuilding(eFreeBuildingThisCity) == 0)
; 283  : 				iWeight += m_pCity->GetCityStrategyAI()->GetBuildingProductionAI()->GetWeight(eFreeBuildingThisCity);
; 284  : 		}
; 285  : 
; 286  : 		BuildingClassTypes eFreeBuildingClassAllCities = static_cast<BuildingClassTypes>(entry->GetFreeBuildingClass());
; 287  : 		if (eFreeBuildingClassAllCities != NO_BUILDINGCLASS)
; 288  : 		{
; 289  : 			BuildingTypes eFreeBuilding = static_cast<BuildingTypes>(m_pCity->getCivilizationInfo().getCivilizationBuildings(eFreeBuildingClassAllCities));
; 290  : 			for (CvCity* pLoopCity = pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = pPlayer->nextCity(&iLoop))
; 291  : 			{
; 292  : 				if (pLoopCity->GetCityBuildings()->GetNumBuilding(eFreeBuilding) == 0)
; 293  : 					iWeight += pLoopCity->GetCityStrategyAI()->GetBuildingProductionAI()->GetWeight(eFreeBuilding);
; 294  : 			}
; 295  : 		}
; 296  : 
; 297  : 		if (entry->GetInstantMilitaryIncrease())
; 298  : 		{
; 299  : 			FFastVector<UnitTypes, true, c_eCiv5GameplayDLL> aExtraUnits;
; 300  : 			for (CvUnit* pLoopUnit = pPlayer->firstUnit(&iLoop); pLoopUnit != NULL; pLoopUnit = pPlayer->nextUnit(&iLoop))
; 301  : 			{
; 302  : 				if (pLoopUnit->getDomainType() == DOMAIN_LAND && pLoopUnit->IsCombatUnit())
; 303  : 				{
; 304  : 					UnitTypes eCurrentUnitType = pLoopUnit->getUnitType();
; 305  : 
; 306  : 					// check for duplicate unit
; 307  : 					bool bAddUnit = true;
; 308  : 					for (uint ui = 0; ui < aExtraUnits.size(); ui++)
; 309  : 					{
; 310  : 						if (aExtraUnits[ui] == eCurrentUnitType)
; 311  : 						{
; 312  : 							bAddUnit = false;
; 313  : 							break;
; 314  : 						}
; 315  : 					}
; 316  : 					if (bAddUnit)
; 317  : 					{
; 318  : 						aExtraUnits.push_back(eCurrentUnitType);
; 319  : 					}
; 320  : 				}
; 321  : 			}
; 322  : 			for (uint ui = 0; ui < aExtraUnits.size(); ui++)
; 323  : 			{
; 324  : 				iWeight += m_pCity->GetCityStrategyAI()->GetUnitProductionAI()->GetWeight(aExtraUnits[ui]);
; 325  : 			}
; 326  : 		}
; 327  : 	}
; 328  : 	return iWeight;
; 329  : #else
; 330  : 	return m_WonderAIWeights.GetWeight(eBldg);

	mov	eax, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _eBldg$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$225364[esp+8], edx

; 331  : #endif
; 332  : }

	add	esp, 8
	ret	4
?GetWeight@CvWonderProductionAI@@QAEHW4BuildingTypes@@@Z ENDP ; CvWonderProductionAI::GetWeight
_TEXT	ENDS
PUBLIC	?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ ; CvWonderProductionAI::LogPossibleWonders
EXTRN	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ:PROC ; CvGlobals::GetGameBuildings
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z:PROC ; CvCitySpecializationAI::GetLogFileName
EXTRN	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ:PROC ; CvPlayer::GetCitySpecializationAI
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$6
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
xdata$x	ENDS
;	COMDAT ?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ
_TEXT	SEGMENT
_strDesc$223602 = -188					; size = 28
$T225369 = -188						; size = 28
_strBaseString$223591 = -160				; size = 28
_strOutBuf$223599 = -132				; size = 28
_playerName$223588 = -104				; size = 28
_strTemp$223603 = -76					; size = 28
_elem$225454 = -48					; size = 8
$T225368 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ PROC	; CvWonderProductionAI::LogPossibleWonders, COMDAT
; _this$ = ecx

; 660  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 176				; 000000b0H
	push	esi
	mov	esi, ecx

; 661  : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN5@LogPossibl
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN5@LogPossibl

; 662  : 	{
; 663  : 		// Find the name of this civ
; 664  : 		CvString playerName = m_pPlayer->getCivilizationShortDescription();

	mov	ecx, DWORD PTR [esi+12]
	push	ebx
	push	ebp
	push	edi
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	xor	ebp, ebp
	cmp	eax, ebp
	jne	SHORT $LN18@LogPossibl
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@LogPossibl:
	push	eax
	lea	ecx, DWORD PTR _playerName$223588[esp+208]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[esp+212], ebp

; 665  : 
; 666  : 		// Open the log file
; 667  : 		FILogFile* pLog = LOGFILEMGR.GetLog(m_pPlayer->GetCitySpecializationAI()->GetLogFileName(playerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	edi, eax
	lea	eax, DWORD PTR _playerName$223588[esp+204]
	push	eax
	lea	ecx, DWORD PTR $T225368[esp+208]
	push	ecx
	mov	ecx, DWORD PTR [esi+12]
	call	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ ; CvPlayer::GetCitySpecializationAI
	mov	ecx, eax
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+212], 1
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [edi]
	push	ebp
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, edi
	call	eax
	lea	ecx, DWORD PTR $T225368[esp+204]
	mov	ebx, eax
	mov	BYTE PTR __$EHRec$[esp+212], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 668  : 
; 669  : 		// Get the leading info for this line
; 670  : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$223591[esp+204]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 671  : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	BYTE PTR __$EHRec$[esp+212], 2
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$223591[esp+208]
	push	OFFSET $SG223592
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 672  : 		strBaseString += playerName + ", ";

	push	OFFSET $SG223594
	lea	edx, DWORD PTR _playerName$223588[esp+220]
	push	edx
	lea	eax, DWORD PTR $T225369[esp+224]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$223591[esp+208]
	mov	BYTE PTR __$EHRec$[esp+216], 3
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T225369[esp+204]
	mov	BYTE PTR __$EHRec$[esp+212], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 673  : 
; 674  : 
; 675  : 
; 676  : 		// Dump out the weight of each buildable item
; 677  : 		for(int iI = 0; iI < m_Buildables.size(); iI++)

	cmp	DWORD PTR [esi+1120], 0
	jle	$LN2@LogPossibl
	npad	8
$LL4@LogPossibl:

; 678  : 		{
; 679  : 			CvString strOutBuf = strBaseString;

	lea	ecx, DWORD PTR _strBaseString$223591[esp+204]
	push	ecx
	lea	ecx, DWORD PTR _strOutBuf$223599[esp+208]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR [esi+1116]
	lea	edi, DWORD PTR [ebp*8]

; 680  : 
; 681  : 			CvBuildingEntry* pEntry = GC.GetGameBuildings()->GetEntry(m_Buildables.GetElement(iI));

	mov	edx, DWORD PTR [eax+edi]
	add	eax, edi
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR __$EHRec$[esp+216], 4
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry

; 682  : 			if(pEntry != NULL)

	test	eax, eax
	je	$LN1@LogPossibl

; 683  : 			{
; 684  : 				CvString strDesc = pEntry->GetDescription();

	lea	ecx, DWORD PTR [eax+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	test	eax, eax
	jne	SHORT $LN46@LogPossibl
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN46@LogPossibl:
	push	eax
	lea	ecx, DWORD PTR _strDesc$223602[esp+208]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z

; 685  : 				CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$223603[esp+204]
	mov	BYTE PTR __$EHRec$[esp+212], 5
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 686  : 				strTemp.Format("Wonder, %s, %d", strDesc.GetCString(), m_Buildables.GetWeight(iI));

	mov	eax, DWORD PTR [esi+1116]
	mov	ecx, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [eax+edi+4]
	mov	DWORD PTR _elem$225454[esp+204], ecx
	push	eax
	lea	ecx, DWORD PTR _strDesc$223602[esp+208]
	mov	BYTE PTR __$EHRec$[esp+216], 6
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	edx, DWORD PTR _strTemp$223603[esp+212]
	push	OFFSET $SG223604
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 687  : 				strOutBuf += strTemp;

	lea	eax, DWORD PTR _strTemp$223603[esp+204]
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$223599[esp+208]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 688  : 
; 689  : 			}

	lea	ecx, DWORD PTR _strTemp$223603[esp+204]
	mov	BYTE PTR __$EHRec$[esp+212], 5
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strDesc$223602[esp+204]
	mov	BYTE PTR __$EHRec$[esp+212], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@LogPossibl:

; 690  : 
; 691  : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$223599[esp+204]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	ebx
	call	edx
	add	esp, 8

; 692  : 		}

	lea	ecx, DWORD PTR _strOutBuf$223599[esp+204]
	mov	BYTE PTR __$EHRec$[esp+212], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	inc	ebp
	cmp	ebp, DWORD PTR [esi+1120]
	jl	$LL4@LogPossibl
$LN2@LogPossibl:

; 693  : 	}

	lea	ecx, DWORD PTR _strBaseString$223591[esp+204]
	mov	BYTE PTR __$EHRec$[esp+212], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _playerName$223588[esp+204]
	mov	DWORD PTR __$EHRec$[esp+212], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	edi
	pop	ebp
	pop	ebx
$LN5@LogPossibl:

; 694  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+192]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 188				; 000000bcH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _playerName$223588[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T225368[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strBaseString$223591[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR $T225369[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$4:
	lea	ecx, DWORD PTR _strOutBuf$223599[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$5:
	lea	ecx, DWORD PTR _strDesc$223602[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ$6:
	lea	ecx, DWORD PTR _strTemp$223603[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ ENDP	; CvWonderProductionAI::LogPossibleWonders
PUBLIC	?clear@?$CvWeightedVector@H$0IH@$00@@QAEXXZ	; CvWeightedVector<int,135,1>::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?clear@?$CvWeightedVector@H$0IH@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@H$0IH@$00@@QAEXXZ PROC	; CvWeightedVector<int,135,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@H$0IH@$00@@QAEXXZ ENDP	; CvWeightedVector<int,135,1>::clear
_TEXT	ENDS
PUBLIC	?clear@?$CvWeightedVector@H$0DC@$00@@QAEXXZ	; CvWeightedVector<int,50,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$CvWeightedVector@H$0DC@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@H$0DC@$00@@QAEXXZ PROC	; CvWeightedVector<int,50,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@H$0DC@$00@@QAEXXZ ENDP	; CvWeightedVector<int,50,1>::clear
_TEXT	ENDS
PUBLIC	?ChooseFromTopChoices@?$CvWeightedVector@H$0DC@$00@@QAEHHPAV?$FastDelegate2@HPBDH@fastdelegate@@PBD@Z ; CvWeightedVector<int,50,1>::ChooseFromTopChoices
; Function compile flags: /Ogtpy
;	COMDAT ?ChooseFromTopChoices@?$CvWeightedVector@H$0DC@$00@@QAEHHPAV?$FastDelegate2@HPBDH@fastdelegate@@PBD@Z
_TEXT	SEGMENT
_iNumChoices$ = 8					; size = 4
_rndFcn$ = 12						; size = 4
_szRollName$ = 16					; size = 4
?ChooseFromTopChoices@?$CvWeightedVector@H$0DC@$00@@QAEHHPAV?$FastDelegate2@HPBDH@fastdelegate@@PBD@Z PROC ; CvWeightedVector<int,50,1>::ChooseFromTopChoices, COMDAT
; _this$ = ecx

; 223  : 	{

	push	ebx
	push	esi
	mov	ebx, ecx

; 224  : 		// Loop through the top choices, or the total vector size, whichever is smaller
; 225  : 		if (iNumChoices > (int) m_pItems.size())

	mov	eax, DWORD PTR [ebx+4]
	push	edi
	mov	edi, DWORD PTR _iNumChoices$[esp+8]
	cmp	edi, eax
	jle	SHORT $LN8@ChooseFrom

; 226  : 		{
; 227  : 			iNumChoices = (int) m_pItems.size();

	mov	edi, eax
$LN8@ChooseFrom:

; 228  : 		}
; 229  : 
; 230  : 		WeightedElement elem;

	xor	esi, esi

; 231  : 		int i;
; 232  : 		int iChoice;
; 233  : 		int iTotalTopChoicesWeight = 0;

	xor	ecx, ecx

; 234  : 
; 235  : 		// Get the total weight
; 236  : 		for (i = 0; i < iNumChoices; i++)

	test	edi, edi
	jle	SHORT $LN5@ChooseFrom
	mov	eax, DWORD PTR [ebx]
	mov	edx, edi
	npad	2
$LL7@ChooseFrom:

; 237  : 		{
; 238  : 			elem = m_pItems[i];
; 239  : 			iTotalTopChoicesWeight += elem.m_iWeight;

	add	ecx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR [eax]
	add	eax, 8
	sub	edx, 1
	jne	SHORT $LL7@ChooseFrom
$LN5@ChooseFrom:

; 240  : 		}
; 241  : 
; 242  : 		// Random roll up to total weight
; 243  : 		iChoice = (*rndFcn)(iTotalTopChoicesWeight, szRollName);

	mov	eax, DWORD PTR _szRollName$[esp+8]
	push	eax
	mov	eax, DWORD PTR _rndFcn$[esp+12]
	mov	edx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	call	edx

; 244  : 
; 245  : 		// Find out which element was chosen
; 246  : 		for (i = 0; i < iNumChoices; i++)

	xor	edx, edx
	test	edi, edi
	jle	SHORT $LN2@ChooseFrom

; 240  : 		}
; 241  : 
; 242  : 		// Random roll up to total weight
; 243  : 		iChoice = (*rndFcn)(iTotalTopChoicesWeight, szRollName);

	mov	ecx, DWORD PTR [ebx]
$LL4@ChooseFrom:

; 247  : 		{
; 248  : 			elem = m_pItems[i];
; 249  : 			iChoice -= elem.m_iWeight;

	sub	eax, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [ecx]

; 250  : 			if (iChoice < 0)

	js	SHORT $LN2@ChooseFrom
	inc	edx
	add	ecx, 8
	cmp	edx, edi
	jl	SHORT $LL4@ChooseFrom
$LN2@ChooseFrom:
	pop	edi

; 251  : 			{
; 252  : 				return elem.m_Element;
; 253  : 			}
; 254  : 		}
; 255  : 
; 256  : 		// We should have found something, so reaching here is an error
; 257  : 		//    Just return last thing accessed
; 258  : 		CvAssertMsg (false, "Internal error in CvWeightedVector.");
; 259  : 		return elem.m_Element;

	mov	eax, esi
	pop	esi
	pop	ebx

; 260  : 	};

	ret	12					; 0000000cH
?ChooseFromTopChoices@?$CvWeightedVector@H$0DC@$00@@QAEHHPAV?$FastDelegate2@HPBDH@fastdelegate@@PBD@Z ENDP ; CvWeightedVector<int,50,1>::ChooseFromTopChoices
_TEXT	ENDS
PUBLIC	??0?$FastDelegate2@HPBDH@fastdelegate@@QAE@XZ	; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??0?$FastDelegate2@HPBDH@fastdelegate@@QAE@XZ
_TEXT	SEGMENT
??0?$FastDelegate2@HPBDH@fastdelegate@@QAE@XZ PROC	; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int>, COMDAT
; _this$ = ecx

; 1041 : 	FastDelegate2() { clear(); }

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$FastDelegate2@HPBDH@fastdelegate@@QAE@XZ ENDP	; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int>
_TEXT	ENDS
PUBLIC	??4?$FastDelegate2@HPBDH@fastdelegate@@QAEXABV01@@Z ; fastdelegate::FastDelegate2<int,char const *,int>::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$FastDelegate2@HPBDH@fastdelegate@@QAEXABV01@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??4?$FastDelegate2@HPBDH@fastdelegate@@QAEXABV01@@Z PROC ; fastdelegate::FastDelegate2<int,char const *,int>::operator=, COMDAT
; _this$ = ecx

; 1045 : 		m_Closure.CopyFrom(this, x.m_Closure); }

	mov	eax, DWORD PTR _x$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	ret	4
??4?$FastDelegate2@HPBDH@fastdelegate@@QAEXABV01@@Z ENDP ; fastdelegate::FastDelegate2<int,char const *,int>::operator=
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::~FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@2:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN34@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 135				; 00000087H
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize
$LN16@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 135			; 00000087H
$LN15@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+1092], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize@2
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@2
	npad	6
$LL8@GrowSize@2:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize@2

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@2

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@2
$LN34@GrowSize@2:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@2:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 50					; 00000032H
	jbe	SHORT $LN16@GrowSize@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize@2
$LN16@GrowSize@2:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 50			; 00000032H
$LN15@GrowSize@2:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize@2:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+412], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	??$?0VCvGame@@V0@@?$FastDelegate2@HPBDH@fastdelegate@@QAE@PAVCvGame@@P82@AEHHPBD@Z@Z ; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int><CvGame,CvGame>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$?0VCvGame@@V0@@?$FastDelegate2@HPBDH@fastdelegate@@QAE@PAVCvGame@@P82@AEHHPBD@Z@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
_function_to_bind$ = 12					; size = 4
??$?0VCvGame@@V0@@?$FastDelegate2@HPBDH@fastdelegate@@QAE@PAVCvGame@@P82@AEHHPBD@Z@Z PROC ; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int><CvGame,CvGame>, COMDAT
; _this$ = ecx

; 1057 : 		m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind); }

	mov	edx, DWORD PTR _pthis$[esp-4]
	mov	eax, ecx
	mov	ecx, DWORD PTR _function_to_bind$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], edx
	ret	8
??$?0VCvGame@@V0@@?$FastDelegate2@HPBDH@fastdelegate@@QAE@PAVCvGame@@P82@AEHHPBD@Z@Z ENDP ; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int><CvGame,CvGame>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Median<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	edi, 4
	lea	ebx, DWORD PTR [eax*8]
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,50,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,50,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,50,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,50,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<int,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	sub	ebx, edi
	sar	ebx, 3

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap
	npad	3
$LL2@Make_heap:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [edi+esi*8-8]
	sub	esp, 8
	mov	eax, esp
	dec	esi
	push	ebx
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+esi*8+4]
	push	esi
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 20					; 00000014H
	test	esi, esi
	jg	SHORT $LL2@Make_heap
$LN1@Make_heap:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp

; 2968 : 	if (_First != _Last)

	mov	ebp, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	cmp	edi, ebp
	je	SHORT $LN6@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+8]
	cmp	edx, ebp
	je	SHORT $LN6@Insertion_
	push	ebx
	push	esi
$LL7@Insertion_:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+4]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edx]
	mov	ecx, edx
	jle	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, edx
	cmp	edi, edx
	je	SHORT $LN21@Insertion_
	npad	7
$LL22@Insertion_:
	mov	ecx, DWORD PTR [eax-8]
	sub	eax, 8
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+12], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_
$LN21@Insertion_:

; 2977 : 				*_First = _Val;

	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-8]
	jle	SHORT $LN1@Insertion_
$LL3@Insertion_:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ecx, eax
	sub	eax, 8
	cmp	esi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Last$[esp+12]
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], esi
$LN4@Insertion_:
	add	edx, 8
	cmp	edx, ebp
	jne	SHORT $LL7@Insertion_
	pop	esi
	pop	ebx
$LN6@Insertion_:
	pop	edi
	pop	ebp

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax-8]
	push	edi
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 8
	mov	edx, esp
	sub	eax, 8
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	pop	edi
	pop	esi
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	?FlavorUpdate@CvWonderProductionAI@@UAEXXZ	; CvWonderProductionAI::FlavorUpdate
EXTRN	?GetLatestFlavorValue@CvFlavorRecipient@@QAEHW4FlavorTypes@@_N@Z:PROC ; CvFlavorRecipient::GetLatestFlavorValue
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
;	COMDAT ?FlavorUpdate@CvWonderProductionAI@@UAEXXZ
_TEXT	SEGMENT
?FlavorUpdate@CvWonderProductionAI@@UAEXXZ PROC		; CvWonderProductionAI::FlavorUpdate, COMDAT
; _this$ = ecx

; 171  : {

	push	esi

; 172  : 	// Broadcast to our sub AI objects
; 173  : 	for(int iFlavor = 0; iFlavor < GC.getNumFlavorTypes(); iFlavor++)

	xor	esi, esi
	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764, esi
	push	edi
	mov	edi, ecx
	jle	SHORT $LN1@FlavorUpda
	npad	2
$LL3@FlavorUpda:

; 174  : 	{
; 175  : 		int iFlavorValue = GetLatestFlavorValue((FlavorTypes)iFlavor);

	push	0
	push	esi
	mov	ecx, edi
	call	?GetLatestFlavorValue@CvFlavorRecipient@@QAEHW4FlavorTypes@@_N@Z ; CvFlavorRecipient::GetLatestFlavorValue

; 176  : 		AddFlavorWeights((FlavorTypes)iFlavor, iFlavorValue);

	push	eax
	push	esi
	mov	ecx, edi
	call	?AddFlavorWeights@CvWonderProductionAI@@QAEXW4FlavorTypes@@H@Z ; CvWonderProductionAI::AddFlavorWeights
	inc	esi
	cmp	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	jl	SHORT $LL3@FlavorUpda
$LN1@FlavorUpda:
	pop	edi
	pop	esi

; 177  : 	}
; 178  : }

	ret	0
?FlavorUpdate@CvWonderProductionAI@@UAEXXZ ENDP		; CvWonderProductionAI::FlavorUpdate
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@H$0IH@$00@@QAE@XZ		; CvWeightedVector<int,135,1>::CvWeightedVector<int,135,1>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0?$CvWeightedVector@H$0IH@$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@H$0IH@$00@@QAE@XZ PROC		; CvWeightedVector<int,135,1>::CvWeightedVector<int,135,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 135			; 00000087H
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@H$0IH@$00@@QAE@XZ ENDP		; CvWeightedVector<int,135,1>::CvWeightedVector<int,135,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ		; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ PROC		; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted:
	ret	0
??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ ENDP		; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@H$0DC@$00@@QAE@XZ		; CvWeightedVector<int,50,1>::CvWeightedVector<int,50,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$CvWeightedVector@H$0DC@$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@H$0DC@$00@@QAE@XZ PROC		; CvWeightedVector<int,50,1>::CvWeightedVector<int,50,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 50			; 00000032H
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@H$0DC@$00@@QAE@XZ ENDP		; CvWeightedVector<int,50,1>::CvWeightedVector<int,50,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$0DC@$00@@QAE@XZ		; CvWeightedVector<int,50,1>::~CvWeightedVector<int,50,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@H$0DC@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@H$0DC@$00@@QAE@XZ PROC		; CvWeightedVector<int,50,1>::~CvWeightedVector<int,50,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted@2:
	ret	0
??1?$CvWeightedVector@H$0DC@$00@@QAE@XZ ENDP		; CvWeightedVector<int,50,1>::~CvWeightedVector<int,50,1>
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+1092], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0IH@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@Z ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+412], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN1@push_back@2:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back@2
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back@2:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_func$ = 16						; size = 4
??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z PROC ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>, COMDAT

; 2031 : 	return FastDelegate2<Param1, Param2, FASTDLGT_RETTYPE>(x, func);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR _func$[esp-4]
	mov	edx, DWORD PTR _x$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], edx

; 2032 : }

	ret	0
??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z ENDP ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__Tmp$226192 = -24					; size = 8
__Tmp$226120 = -16					; size = 8
__Tmp$226146 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 24					; 00000018H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+24]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+28]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	push	edi
	sar	eax, 1
	lea	edi, DWORD PTR [ebx+eax*8]

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-8]
	push	eax
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Median<CvWeightedVector<int,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+8]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_
$LL27@Unguarded_:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	jl	SHORT $LN99@Unguarded_
	jg	SHORT $LN99@Unguarded_

; 3033 : 		--_Pfirst;

	sub	ecx, 8
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_
$LN99@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR [ecx+4]
	npad	1
$LL25@Unguarded_:
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_
	jg	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	add	esi, 8
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	ebx, ecx
$LL23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+36]
	jae	SHORT $LN103@Unguarded_
	npad	6
$LL21@Unguarded_:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+4]
	cmp	edx, edi
	jl	SHORT $LN20@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 8
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_
	mov	ebp, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$226120[esp+44], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	edx, DWORD PTR __Tmp$226120[esp+44]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
$LN20@Unguarded_:
	add	eax, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jb	SHORT $LL21@Unguarded_
$LN103@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	ebx, DWORD PTR __First$[esp+36]
	jbe	SHORT $LN115@Unguarded_
	lea	edx, DWORD PTR [ebx-8]
$LL14@Unguarded_:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [ecx+4]
	cmp	ebp, edi
	jl	SHORT $LN13@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 8
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_
	mov	ebp, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$226146[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$226146[esp+44]
	mov	DWORD PTR [edx+4], edi
$LN13@Unguarded_:
	sub	ebx, 8
	sub	edx, 8
	cmp	DWORD PTR __First$[esp+36], ebx
	jb	SHORT $LL14@Unguarded_
$LN111@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebx, DWORD PTR __First$[esp+36]
$LN115@Unguarded_:
	jne	SHORT $LN6@Unguarded_
	cmp	eax, DWORD PTR __Last$[esp+36]
	je	$LN105@Unguarded_

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi
$LN64@Unguarded_:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	edi, ecx
	add	esi, 8
	add	ecx, 8
	add	eax, 8
	cmp	edi, edx
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR __Tmp$226192[esp+40], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$226192[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	edi, DWORD PTR __Tmp$226192[esp+40]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$226192[esp+44]
	mov	DWORD PTR [edx+4], edi
	jmp	$LL23@Unguarded_
$LN6@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	ebx, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN3@Unguarded_
	sub	ecx, 8
	cmp	ebx, ecx
	je	SHORT $LN78@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edi
$LN78@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 8
	cmp	ecx, esi
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebx
	je	SHORT $LN92@Unguarded_
	mov	ebp, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edi
$LN92@Unguarded_:
	add	eax, 8

; 3076 : 		}

	jmp	$LL23@Unguarded_
$LN105@Unguarded_:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+36]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::make_heap<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::make_heap<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -8					; fffffff8H
	cmp	edx, 8
	jle	SHORT $LN1@make_heap

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::pop_heap<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	edx, eax
	push	esi
	sub	edx, ecx
	mov	esi, edx
	and	esi, -8					; fffffff8H
	cmp	esi, 8
	push	edi
	jle	SHORT $LN12@pop_heap

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax-8]
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], ebx
	mov	ebx, DWORD PTR [ecx+4]
	sub	esp, 8
	mov	DWORD PTR [eax-4], ebx
	mov	eax, esp
	add	edx, -8					; fffffff8H
	sar	edx, 3
	push	edx
	push	0
	push	ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN12@pop_heap:

; 2099 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??_7CvWonderProductionAI@@6B@			; CvWonderProductionAI::`vftable'
PUBLIC	??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z ; CvWonderProductionAI::CvWonderProductionAI
PUBLIC	??_R4CvWonderProductionAI@@6B@			; CvWonderProductionAI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCvWonderProductionAI@@@8		; CvWonderProductionAI `RTTI Type Descriptor'
PUBLIC	??_R3CvWonderProductionAI@@8			; CvWonderProductionAI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CvWonderProductionAI@@8			; CvWonderProductionAI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CvWonderProductionAI@@8		; CvWonderProductionAI::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CvFlavorRecipient@@8		; CvFlavorRecipient::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCvFlavorRecipient@@@8			; CvFlavorRecipient `RTTI Type Descriptor'
PUBLIC	??_R3CvFlavorRecipient@@8			; CvFlavorRecipient::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CvFlavorRecipient@@8			; CvFlavorRecipient::`RTTI Base Class Array'
EXTRN	??1CvFlavorRecipient@@QAE@XZ:PROC		; CvFlavorRecipient::~CvFlavorRecipient
EXTRN	??0CvFlavorRecipient@@QAE@XZ:PROC		; CvFlavorRecipient::CvFlavorRecipient
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Init@CvFlavorRecipient@@UAEXXZ:PROC		; CvFlavorRecipient::Init
EXTRN	?Uninit@CvFlavorRecipient@@UAEXXZ:PROC		; CvFlavorRecipient::Uninit
;	COMDAT ??_R2CvFlavorRecipient@@8
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
rdata$r	SEGMENT
??_R2CvFlavorRecipient@@8 DD FLAT:??_R1A@?0A@EA@CvFlavorRecipient@@8 ; CvFlavorRecipient::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CvFlavorRecipient@@8
rdata$r	SEGMENT
??_R3CvFlavorRecipient@@8 DD 00H			; CvFlavorRecipient::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CvFlavorRecipient@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCvFlavorRecipient@@@8
_DATA	SEGMENT
??_R0?AVCvFlavorRecipient@@@8 DD FLAT:??_7type_info@@6B@ ; CvFlavorRecipient `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCvFlavorRecipient@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CvFlavorRecipient@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CvFlavorRecipient@@8 DD FLAT:??_R0?AVCvFlavorRecipient@@@8 ; CvFlavorRecipient::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CvFlavorRecipient@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CvWonderProductionAI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CvWonderProductionAI@@8 DD FLAT:??_R0?AVCvWonderProductionAI@@@8 ; CvWonderProductionAI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CvWonderProductionAI@@8
rdata$r	ENDS
;	COMDAT ??_R2CvWonderProductionAI@@8
rdata$r	SEGMENT
??_R2CvWonderProductionAI@@8 DD FLAT:??_R1A@?0A@EA@CvWonderProductionAI@@8 ; CvWonderProductionAI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CvFlavorRecipient@@8
rdata$r	ENDS
;	COMDAT ??_R3CvWonderProductionAI@@8
rdata$r	SEGMENT
??_R3CvWonderProductionAI@@8 DD 00H			; CvWonderProductionAI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CvWonderProductionAI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCvWonderProductionAI@@@8
_DATA	SEGMENT
??_R0?AVCvWonderProductionAI@@@8 DD FLAT:??_7type_info@@6B@ ; CvWonderProductionAI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCvWonderProductionAI@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CvWonderProductionAI@@6B@
rdata$r	SEGMENT
??_R4CvWonderProductionAI@@6B@ DD 00H			; CvWonderProductionAI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCvWonderProductionAI@@@8
	DD	FLAT:??_R3CvWonderProductionAI@@8
rdata$r	ENDS
;	COMDAT ??_7CvWonderProductionAI@@6B@
CONST	SEGMENT
??_7CvWonderProductionAI@@6B@ DD FLAT:??_R4CvWonderProductionAI@@6B@ ; CvWonderProductionAI::`vftable'
	DD	FLAT:?Init@CvFlavorRecipient@@UAEXXZ
	DD	FLAT:?Uninit@CvFlavorRecipient@@UAEXXZ
	DD	FLAT:?FlavorUpdate@CvWonderProductionAI@@UAEXXZ
	DD	FLAT:?LogFlavors@CvWonderProductionAI@@UAEXW4FlavorTypes@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z$1
__ehfuncinfo$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
xdata$x	ENDS
;	COMDAT ??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPlayer$ = 8						; size = 4
_pBuildings$ = 12					; size = 4
??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z PROC ; CvWonderProductionAI::CvWonderProductionAI, COMDAT
; _this$ = ecx

; 25   : {

	push	-1
	push	__ehhandler$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	call	??0CvFlavorRecipient@@QAE@XZ		; CvFlavorRecipient::CvFlavorRecipient
	mov	eax, DWORD PTR _pPlayer$[esp+16]
	mov	ecx, DWORD PTR _pBuildings$[esp+16]
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], ecx
	mov	DWORD PTR [esi], OFFSET ??_7CvWonderProductionAI@@6B@
	xor	ecx, ecx
	lea	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [esi+24], ecx
	mov	DWORD PTR [esi+28], 135			; 00000087H
	mov	DWORD PTR [esi+20], eax
	lea	eax, DWORD PTR [esi+1128]
	mov	DWORD PTR [esi+1120], ecx

; 26   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	DWORD PTR [esi+1116], eax
	mov	DWORD PTR [esi+1124], 50		; 00000032H
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvFlavorRecipient@@QAE@XZ		; CvFlavorRecipient::~CvFlavorRecipient
__unwindfunclet$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ	; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>
__ehhandler$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvWonderProductionAI@@QAE@PAVCvPlayer@@PAVCvBuildingXMLEntries@@@Z ENDP ; CvWonderProductionAI::CvWonderProductionAI
PUBLIC	??1CvWonderProductionAI@@QAE@XZ			; CvWonderProductionAI::~CvWonderProductionAI
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvWonderProductionAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvWonderProductionAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvWonderProductionAI@@QAE@XZ$1
__ehfuncinfo$??1CvWonderProductionAI@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvWonderProductionAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
xdata$x	ENDS
;	COMDAT ??1CvWonderProductionAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvWonderProductionAI@@QAE@XZ PROC			; CvWonderProductionAI::~CvWonderProductionAI, COMDAT
; _this$ = ecx

; 30   : {

	push	-1
	push	__ehhandler$??1CvWonderProductionAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	mov	DWORD PTR [esi], OFFSET ??_7CvWonderProductionAI@@6B@

; 31   : }

	mov	eax, DWORD PTR [esi+1116]
	lea	ecx, DWORD PTR [esi+1128]
	mov	DWORD PTR __$EHRec$[esp+28], 1
	cmp	eax, ecx
	je	SHORT $LN11@CvWonderPr
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN11@CvWonderPr:
	mov	eax, DWORD PTR [esi+20]
	lea	edx, DWORD PTR [esi+32]
	mov	BYTE PTR __$EHRec$[esp+28], 0
	cmp	eax, edx
	je	SHORT $LN28@CvWonderPr
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN28@CvWonderPr:
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	call	??1CvFlavorRecipient@@QAE@XZ		; CvFlavorRecipient::~CvFlavorRecipient
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvWonderProductionAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvFlavorRecipient@@QAE@XZ		; CvFlavorRecipient::~CvFlavorRecipient
__unwindfunclet$??1CvWonderProductionAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$CvWeightedVector@H$0IH@$00@@QAE@XZ	; CvWeightedVector<int,135,1>::~CvWeightedVector<int,135,1>
__ehhandler$??1CvWonderProductionAI@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvWonderProductionAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvWonderProductionAI@@QAE@XZ ENDP			; CvWonderProductionAI::~CvWonderProductionAI
PUBLIC	?push_back@?$CvWeightedVector@H$0IH@$00@@QAEIABHH@Z ; CvWeightedVector<int,135,1>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?push_back@?$CvWeightedVector@H$0IH@$00@@QAEIABHH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@H$0IH@$00@@QAEIABHH@Z PROC ; CvWeightedVector<int,135,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+1092], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@3
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize
$LN5@push_back@3:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@3
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@3:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@H$0IH@$00@@QAEIABHH@Z ENDP ; CvWeightedVector<int,135,1>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@H$0DC@$00@@QAEIABHH@Z ; CvWeightedVector<int,50,1>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$CvWeightedVector@H$0DC@$00@@QAEIABHH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@H$0DC@$00@@QAEIABHH@Z PROC ; CvWeightedVector<int,50,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+412], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@4
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN5@push_back@4:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@4
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@4:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@H$0DC@$00@@QAEIABHH@Z ENDP ; CvWeightedVector<int,50,1>::push_back
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	mov	eax, ecx
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap
	mov	ebx, 8
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	lea	esi, DWORD PTR [ecx-8]
	jle	SHORT $LN2@Sort_heap
$LN24@Sort_heap:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 8
	mov	DWORD PTR [esi+4], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [ebx+esi-8]
	sar	ecx, 3
	push	ecx
	push	0
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN2@Sort_heap:
	sub	esi, 8
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 3
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap
$LN1@Sort_heap:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?Reset@CvWonderProductionAI@@QAEXXZ		; CvWonderProductionAI::Reset
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
;	COMDAT ?Reset@CvWonderProductionAI@@QAEXXZ
_TEXT	SEGMENT
?Reset@CvWonderProductionAI@@QAEXXZ PROC		; CvWonderProductionAI::Reset, COMDAT
; _this$ = ecx

; 49   : {

	push	ebx
	push	ebp
	mov	ebp, ecx

; 50   : 	CvAssertMsg(m_pBuildings != NULL, "Wonder Production AI init failure: building entries are NULL");
; 51   : 
; 52   : 	// Reset vector
; 53   : 	m_WonderAIWeights.clear();

	xor	ebx, ebx
	mov	DWORD PTR [ebp+24], ebx

; 54   : 
; 55   : 	// Loop through reading each one and adding it to our vector
; 56   : 	if(m_pBuildings)

	mov	ecx, DWORD PTR [ebp+16]
	cmp	ecx, ebx
	je	SHORT $LN1@Reset
	push	edi

; 57   : 	{
; 58   : #ifdef AUI_WARNING_FIXES
; 59   : 		for (uint i = 0; i < m_pBuildings->GetNumBuildings(); i++)
; 60   : #else
; 61   : 		for(int i = 0; i < m_pBuildings->GetNumBuildings(); i++)

	xor	edi, edi
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	test	eax, eax
	jle	SHORT $LN33@Reset
	push	esi
	lea	esi, DWORD PTR [ebp+20]
$LL3@Reset:

; 62   : #endif
; 63   : 		{
; 64   : 			m_WonderAIWeights.push_back(i, 0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+1092], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN21@Reset
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize
$LN21@Reset:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	cmp	eax, ebx
	je	SHORT $LN24@Reset
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
$LN24@Reset:
	inc	DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ebp+16]
	inc	edi
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	edi, eax
	jl	SHORT $LL3@Reset
	pop	esi
$LN33@Reset:
	pop	edi
$LN1@Reset:
	pop	ebp
	pop	ebx

; 65   : 		}
; 66   : 	}
; 67   : }

	ret	0
?Reset@CvWonderProductionAI@@QAEXXZ ENDP		; CvWonderProductionAI::Reset
_TEXT	ENDS
PUBLIC	?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z ; CvWonderProductionAI::Read
EXTRN	?LogMessage@CvGlobals@@QAEXPBD@Z:PROC		; CvGlobals::LogMessage
EXTRN	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z:PROC ; CvInfosSerializationHelper::ReadHashed
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z$0
__ehfuncinfo$?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
xdata$x	ENDS
;	COMDAT ?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_iI$223212 = -60					; size = 4
_iNumEntries$223210 = -56				; size = 4
_iNumFlavors$ = -52					; size = 4
_iWeight$ = -48						; size = 4
_uiVersion$ = -44					; size = 4
_szError$223221 = -40					; size = 28
__$EHRec$ = -12						; size = 12
_bValid$223216 = 8					; size = 1
_kStream$ = 8						; size = 4
?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z PROC	; CvWonderProductionAI::Read, COMDAT
; _this$ = ecx

; 71   : {

	push	-1
	mov	eax, DWORD PTR fs:0
	push	__ehhandler$?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 48					; 00000030H
	push	ebx

; 72   : 	// Version number to maintain backwards compatibility
; 73   : 	uint uiVersion;
; 74   : 	kStream >> uiVersion;

	mov	ebx, DWORD PTR _kStream$[esp+60]
	push	ebp
	push	esi
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+76]
	mov	ebp, ecx
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 75   : 
; 76   : 	int iWeight;
; 77   : 
; 78   : 	CvAssertMsg(m_piLatestFlavorValues != NULL && GC.getNumFlavorTypes() > 0, "Number of flavor values to serialize is expected to greater than 0");
; 79   : 
; 80   : 	int iNumFlavors;
; 81   : 	kStream >> iNumFlavors;

	lea	ecx, DWORD PTR _iNumFlavors$[esp+76]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 82   : 
; 83   : 	ArrayWrapper<int> wrapm_piLatestFlavorValues(iNumFlavors, m_piLatestFlavorValues);
; 84   : 	kStream >> wrapm_piLatestFlavorValues;

	mov	edi, DWORD PTR _iNumFlavors$[esp+76]
	mov	esi, DWORD PTR [ebp+8]
	test	edi, edi
	jle	SHORT $LN21@Read
$LL23@Read:
	push	esi
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	add	esi, 4
	sub	edi, 1
	jne	SHORT $LL23@Read
$LN21@Read:

; 85   : 
; 86   : 	CvAssertMsg(m_pBuildings != NULL, "Wonder Production AI init failure: building entries are NULL");
; 87   : 
; 88   : 	// Reset vector
; 89   : 	m_WonderAIWeights.clear();

	xor	edi, edi
	lea	esi, DWORD PTR [ebp+20]
	mov	DWORD PTR [esi+4], edi

; 90   : 
; 91   : 	// Loop through reading each one and adding it to our vector
; 92   : 	if(m_pBuildings)

	mov	ecx, DWORD PTR [ebp+16]
	cmp	ecx, edi
	je	$LN5@Read

; 93   : 	{
; 94   : #ifdef AUI_WARNING_FIXES
; 95   : 		for (uint i = 0; i < m_pBuildings->GetNumBuildings(); i++)
; 96   : #else
; 97   : 		for(int i = 0; i < m_pBuildings->GetNumBuildings(); i++)

	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	test	eax, eax
	jle	SHORT $LN8@Read
$LL10@Read:

; 98   : #endif
; 99   : 		{
; 100  : 			m_WonderAIWeights.push_back(i, 0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+1092], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN46@Read
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0IH@$00@@$0IH@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,135,1>::WeightedElement,135,1,0,0>::GrowSize
$LN46@Read:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN49@Read
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], 0
$LN49@Read:
	inc	DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ebp+16]
	inc	edi
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	edi, eax
	jl	SHORT $LL10@Read
$LN8@Read:

; 101  : 		}
; 102  : 
; 103  : 		int iNumEntries;
; 104  : 		int iType;
; 105  : 
; 106  : 		kStream >> iNumEntries;

	lea	ecx, DWORD PTR _iNumEntries$223210[esp+76]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 107  : 
; 108  : 		for(int iI = 0; iI < iNumEntries; iI++)

	cmp	DWORD PTR _iNumEntries$223210[esp+76], 0
	mov	DWORD PTR _iI$223212[esp+76], 0
	jle	$LN5@Read
	or	ebp, -1
	npad	1
$LL7@Read:

; 109  : 		{
; 110  : 			bool bValid = true;
; 111  : 			iType = CvInfosSerializationHelper::ReadHashed(kStream, &bValid);

	lea	edx, DWORD PTR _bValid$223216[esp+72]
	push	edx
	push	ebx
	mov	BYTE PTR _bValid$223216[esp+80], 1
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	mov	edi, eax
	add	esp, 8

; 112  : 			if(iType != -1 || !bValid)

	cmp	edi, ebp
	jne	SHORT $LN3@Read
	cmp	BYTE PTR _bValid$223216[esp+72], 0
	jne	SHORT $LN6@Read
$LN3@Read:

; 113  : 			{
; 114  : 				kStream >> iWeight;

	lea	eax, DWORD PTR _iWeight$[esp+76]
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 115  : 				if(iType != -1)

	cmp	edi, ebp
	je	SHORT $LN2@Read

; 116  : 				{
; 117  : 					m_WonderAIWeights.IncreaseWeight(iType, iWeight);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _iWeight$[esp+76]
	add	DWORD PTR [ecx+edi*8+4], edx
	lea	eax, DWORD PTR [ecx+edi*8+4]

; 118  : 				}
; 119  : 				else

	jmp	SHORT $LN6@Read
$LN2@Read:

; 120  : 				{
; 121  : 					CvString szError;

	lea	ecx, DWORD PTR _szError$223221[esp+76]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 122  : 					szError.Format("LOAD ERROR: Building Type not found");

	lea	eax, DWORD PTR _szError$223221[esp+76]
	push	OFFSET $SG223222
	push	eax
	mov	DWORD PTR __$EHRec$[esp+92], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 123  : 					GC.LogMessage(szError.GetCString());

	lea	ecx, DWORD PTR _szError$223221[esp+76]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?LogMessage@CvGlobals@@QAEXPBD@Z	; CvGlobals::LogMessage

; 124  : 					CvAssertMsg(false, szError);
; 125  : 				}

	lea	ecx, DWORD PTR _szError$223221[esp+76]
	mov	DWORD PTR __$EHRec$[esp+84], ebp
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN6@Read:
	mov	eax, DWORD PTR _iI$223212[esp+76]
	inc	eax
	cmp	eax, DWORD PTR _iNumEntries$223210[esp+76]
	mov	DWORD PTR _iI$223212[esp+76], eax
	jl	$LL7@Read
$LN5@Read:

; 126  : 			}
; 127  : 		}
; 128  : 	}
; 129  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+76]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 60					; 0000003cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z$0:
	lea	ecx, DWORD PTR _szError$223221[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Read@CvWonderProductionAI@@QAEXAAVFDataStream@@@Z ENDP	; CvWonderProductionAI::Read
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::sort_heap<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,50,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?Init@CvWonderProductionAI@@QAEXPAVCvBuildingXMLEntries@@PAVCvPlayer@@_N@Z ; CvWonderProductionAI::Init
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
;	COMDAT ?Init@CvWonderProductionAI@@QAEXPAVCvBuildingXMLEntries@@PAVCvPlayer@@_N@Z
_TEXT	SEGMENT
_pBuildings$ = 8					; size = 4
_pPlayer$ = 12						; size = 4
_bIsCity$ = 16						; size = 1
?Init@CvWonderProductionAI@@QAEXPAVCvBuildingXMLEntries@@PAVCvPlayer@@_N@Z PROC ; CvWonderProductionAI::Init, COMDAT
; _this$ = ecx

; 35   : {

	push	esi
	mov	esi, ecx

; 36   : 	// Init base class
; 37   : 	CvFlavorRecipient::Init();

	call	?Init@CvFlavorRecipient@@UAEXXZ		; CvFlavorRecipient::Init

; 38   : 
; 39   : 	// Store off the pointer to the buildings for this game
; 40   : 	m_pBuildings = pBuildings;
; 41   : 	m_pPlayer = pPlayer;

	mov	ecx, DWORD PTR _pPlayer$[esp]
	mov	eax, DWORD PTR _pBuildings$[esp]

; 42   : 	m_bIsCity = bIsCity;

	mov	dl, BYTE PTR _bIsCity$[esp]
	mov	DWORD PTR [esi+12], ecx

; 43   : 
; 44   : 	Reset();

	mov	ecx, esi
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi+4], dl
	call	?Reset@CvWonderProductionAI@@QAEXXZ	; CvWonderProductionAI::Reset
	pop	esi

; 45   : }

	ret	12					; 0000000cH
?Init@CvWonderProductionAI@@QAEXPAVCvBuildingXMLEntries@@PAVCvPlayer@@_N@Z ENDP ; CvWonderProductionAI::Init
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z
_TEXT	SEGMENT
__Mid$223963 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort:
	test	esi, esi
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$223963[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,50,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$223963[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$223963[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -8					; fffffff8H
	and	edx, -8					; fffffff8H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$223963[esp+36]
$LN26@Sort:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort
$LN25@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,50,1>::WeightedElement *,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -8					; fffffff8H
	cmp	eax, 8
	jle	SHORT $LN10@Sort
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,50,1>::WeightedElement *,int,CvWeightedVector<int,50,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,50,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ; std::sort<CvWeightedVector<int,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z PROC ; std::sort<CvWeightedVector<int,50,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 3
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0@Z ENDP ; std::sort<CvWeightedVector<int,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@H$0DC@$00@@QAEXXZ	; CvWeightedVector<int,50,1>::SortItems
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?SortItems@?$CvWeightedVector@H$0DC@$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@H$0DC@$00@@QAEXXZ PROC	; CvWeightedVector<int,50,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@H$0DC@$00@@QAEXXZ ENDP	; CvWeightedVector<int,50,1>::SortItems
_TEXT	ENDS
PUBLIC	?ChooseWonder@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_N0AAH@Z ; CvWonderProductionAI::ChooseWonder
EXTRN	?GetCityProductionNumOptions@CvHandicapInfo@@QBEHXZ:PROC ; CvHandicapInfo::GetCityProductionNumOptions
EXTRN	?getHandicapInfo@CvGame@@QBEAAVCvHandicapInfo@@XZ:PROC ; CvGame::getHandicapInfo
EXTRN	?getBuildingClassMaking@CvPlayer@@QBEHW4BuildingClassTypes@@@Z:PROC ; CvPlayer::getBuildingClassMaking
EXTRN	?GetBuildingClassType@CvBuildingEntry@@QBEHXZ:PROC ; CvBuildingEntry::GetBuildingClassType
EXTRN	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z:PROC ; CityStrategyAIHelpers::ReweightByTurnsLeft
EXTRN	?GetGold@CvTreasury@@QBEHXZ:PROC		; CvTreasury::GetGold
EXTRN	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ:PROC ; CvPlayer::GetTreasury
EXTRN	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForDiploVictory
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
EXTRN	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ:PROC ; CvMinorCivAI::GetAlly
EXTRN	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ:PROC ; CvPlayer::GetMinorCivAI
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?GetLiberatedByTeam@CvTeam@@QBE?AW4TeamTypes@@XZ:PROC ; CvTeam::GetLiberatedByTeam
EXTRN	?GetVotesNeededForDiploVictory@CvGame@@QBEHXZ:PROC ; CvGame::GetVotesNeededForDiploVictory
EXTRN	?IsDiplomaticVoting@CvBuildingEntry@@QBE_NXZ:PROC ; CvBuildingEntry::IsDiplomaticVoting
EXTRN	?GetBuildingProduction@CvCityBuildings@@QBEHW4BuildingTypes@@@Z:PROC ; CvCityBuildings::GetBuildingProduction
EXTRN	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ:PROC ; CvCity::GetCityBuildings
EXTRN	?GetProductionCost@CvBuildingEntry@@QBEHXZ:PROC	; CvBuildingEntry::GetProductionCost
EXTRN	?isOption@CvGame@@QBE_NPBD@Z:PROC		; CvGame::isOption
EXTRN	?getCurrentProductionDifference@CvCity@@QBEH_N0@Z:PROC ; CvCity::getCurrentProductionDifference
EXTRN	?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ:PROC ; CvCitySpecializationAI::GetWonderBuildCity
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
EXTRN	?getAsyncRandNum@CvGame@@QAEHHPBD@Z:PROC	; CvGame::getAsyncRandNum
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvwonderproductionai.cpp
;	COMDAT ?ChooseWonder@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_N0AAH@Z
_TEXT	SEGMENT
_iTempWeight$223476 = -52				; size = 4
$T226960 = -52						; size = 4
_this$ = -48						; size = 4
_iEstimatedProductionPerTurn$ = -44			; size = 4
$T227223 = -40						; size = 4
$T226964 = -40						; size = 4
$T226959 = -40						; size = 4
_iBldgLoop$ = -36					; size = 4
_elem$227198 = -32					; size = 8
_elem$227183 = -32					; size = 8
$T226963 = -32						; size = 4
_iVotesNeededToWin$223478 = -32				; size = 4
_iTurnsRequired$ = -24					; size = 4
_kBuildingClassInfo$223468 = -20			; size = 4
_pkBuildingInfo$223465 = -16				; size = 4
_iCityLoop$ = -12					; size = 4
_fcn$ = -8						; size = 8
_pWonderCity$ = 8					; size = 4
_bUseAsyncRandom$ = 8					; size = 1
_bAdjustForOtherPlayers$ = 12				; size = 1
_iWonderWeight$ = 16					; size = 4
?ChooseWonder@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_N0AAH@Z PROC ; CvWonderProductionAI::ChooseWonder, COMDAT
; _this$ = ecx

; 336  : {

	sub	esp, 52					; 00000034H

; 337  : #ifdef AUI_WARNING_FIXES
; 338  : 	uint iBldgLoop;
; 339  : #else
; 340  : 	int iBldgLoop;
; 341  : #endif
; 342  : 	int iWeight;
; 343  : 	int iTurnsRequired;
; 344  : 	int iEstimatedProductionPerTurn;
; 345  : 	int iCityLoop;
; 346  : 	RandomNumberDelegate fcn;
; 347  : 	BuildingTypes eSelection;
; 348  : 
; 349  : 	// Use the asynchronous random number generate if "no random" is set
; 350  : 	if(bUseAsyncRandom)

	cmp	BYTE PTR _bUseAsyncRandom$[esp+48], 0
	push	ebx
	mov	ebx, ecx
	push	ebp
	mov	DWORD PTR _this$[esp+60], ebx
	je	SHORT $LN31@ChooseWond

; 351  : 	{
; 352  : 		fcn = MakeDelegate(&GC.getGame(), &CvGame::getAsyncRandNum);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _fcn$[esp+64], OFFSET ?getAsyncRandNum@CvGame@@QAEHHPBD@Z ; CvGame::getAsyncRandNum
	mov	DWORD PTR _fcn$[esp+60], eax

; 353  : 	}
; 354  : 	else

	jmp	SHORT $LN88@ChooseWond
$LN31@ChooseWond:

; 355  : 	{
; 356  : 		fcn = MakeDelegate(&GC.getGame(), &CvGame::getJonRandNum);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _fcn$[esp+64], OFFSET ?getJonRandNum@CvGame@@QAEHHPBD@Z ; CvGame::getJonRandNum
	mov	DWORD PTR _fcn$[esp+60], ecx
$LN88@ChooseWond:

; 357  : 	}
; 358  : 
; 359  : 	// Reset list of all the possible wonders
; 360  : 	m_Buildables.clear();

	xor	ebp, ebp
	mov	DWORD PTR [ebx+1120], ebp

; 361  : 
; 362  : 	// Guess which city will be producing this (doesn't matter that much since weights are all relative)
; 363  : 	CvCity* pWonderCity = m_pPlayer->GetCitySpecializationAI()->GetWonderBuildCity();

	mov	ecx, DWORD PTR [ebx+12]
	call	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ ; CvPlayer::GetCitySpecializationAI
	mov	ecx, eax
	call	?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ ; CvCitySpecializationAI::GetWonderBuildCity
	mov	DWORD PTR _pWonderCity$[esp+56], eax

; 364  : 	if(pWonderCity == NULL)

	cmp	eax, ebp
	jne	SHORT $LN28@ChooseWond

; 365  : 	{
; 366  : 		pWonderCity = m_pPlayer->firstCity(&iCityLoop);

	mov	ecx, DWORD PTR [ebx+12]
	push	ebp
	lea	edx, DWORD PTR _iCityLoop$[esp+64]
	push	edx
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pWonderCity$[esp+56], eax

; 367  : 	}
; 368  : 
; 369  : 	CvAssertMsg(pWonderCity, "Trying to choose the next wonder to build and the player has no cities!");
; 370  : 	if(pWonderCity == NULL)

	cmp	eax, ebp
	jne	SHORT $LN28@ChooseWond
	pop	ebp

; 371  : 		return NO_BUILDING;

	or	eax, -1
	pop	ebx

; 496  : 	}
; 497  : }

	add	esp, 52					; 00000034H
	ret	12					; 0000000cH
$LN28@ChooseWond:

; 372  : 
; 373  : 	iEstimatedProductionPerTurn = pWonderCity->getCurrentProductionDifference(true, false);

	push	ebp
	push	1
	mov	ecx, eax
	call	?getCurrentProductionDifference@CvCity@@QBEH_N0@Z ; CvCity::getCurrentProductionDifference

; 374  : 	if(iEstimatedProductionPerTurn < 1)

	cmp	eax, 1
	mov	DWORD PTR _iEstimatedProductionPerTurn$[esp+60], eax
	jge	SHORT $LN27@ChooseWond

; 375  : 	{
; 376  : 		iEstimatedProductionPerTurn = 1;

	mov	DWORD PTR _iEstimatedProductionPerTurn$[esp+60], 1
$LN27@ChooseWond:
	push	esi
	push	edi

; 377  : 	}
; 378  : 
; 379  : 	// Loop through adding the available wonders
; 380  : 	for(iBldgLoop = 0; iBldgLoop < GC.GetGameBuildings()->GetNumBuildings(); iBldgLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _iBldgLoop$[esp+68], ebp
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	test	eax, eax
	jle	$LN24@ChooseWond
$LL207@ChooseWond:

; 381  : 	{
; 382  : 		const BuildingTypes eBuilding = static_cast<BuildingTypes>(iBldgLoop);
; 383  : 		CvBuildingEntry* pkBuildingInfo = m_pBuildings->GetEntry(eBuilding);

	mov	ecx, DWORD PTR [ebx+16]
	push	ebp
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	edi, eax
	mov	DWORD PTR _pkBuildingInfo$223465[esp+68], edi

; 384  : 		if(pkBuildingInfo)

	test	edi, edi
	je	$LN25@ChooseWond

; 385  : 		{
; 386  : 			CvBuildingEntry& kBuilding = *pkBuildingInfo;
; 387  : 			const CvBuildingClassInfo& kBuildingClassInfo = kBuilding.GetBuildingClassInfo();

	mov	ecx, edi
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo

; 388  : #ifdef NQM_AI_GIMP_NO_WORLD_WONDERS
; 389  : 			if (GC.getGame().isOption("GAMEOPTION_AI_GIMP_NO_WORLD_WONDER") && isWorldWonderClass(kBuildingClassInfo))

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	esi, eax
	push	OFFSET $SG223470
	mov	DWORD PTR _kBuildingClassInfo$223468[esp+72], esi
	call	?isOption@CvGame@@QBE_NPBD@Z		; CvGame::isOption
	test	al, al
	je	SHORT $LN22@ChooseWond
	push	esi
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	test	al, al
	jne	$LN25@ChooseWond
$LN22@ChooseWond:

; 390  : 			{
; 391  : 				continue;
; 392  : 			}
; 393  : #endif
; 394  : 
; 395  : 			// Make sure this wonder can be built now
; 396  : 			if(IsWonder(kBuilding) && HaveCityToBuild((BuildingTypes)iBldgLoop))

	mov	ecx, edi
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo
	mov	esi, eax
	push	esi
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN102@ChooseWond
	push	esi
	call	?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isTeamWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN102@ChooseWond
	push	esi
	call	?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isNationalWonderClass
	add	esp, 4
	test	al, al
	je	$LN25@ChooseWond
$LN102@ChooseWond:
	push	ebp
	mov	ecx, ebx
	call	?HaveCityToBuild@CvWonderProductionAI@@ABE_NW4BuildingTypes@@@Z ; CvWonderProductionAI::HaveCityToBuild
	test	al, al
	je	$LN25@ChooseWond

; 397  : 			{
; 398  : 				iTurnsRequired = std::max(1, kBuilding.GetProductionCost() / iEstimatedProductionPerTurn);

	mov	ecx, edi
	call	?GetProductionCost@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetProductionCost
	cdq
	idiv	DWORD PTR _iEstimatedProductionPerTurn$[esp+68]
	mov	DWORD PTR $T226960[esp+68], 1
	mov	DWORD PTR $T226959[esp+68], eax
	cmp	eax, 1
	lea	eax, DWORD PTR $T226959[esp+68]
	jg	SHORT $LN109@ChooseWond
	lea	eax, DWORD PTR $T226960[esp+68]
$LN109@ChooseWond:
	mov	eax, DWORD PTR [eax]

; 399  : 
; 400  : 				// if we are forced to restart a wonder, give one that has been started already a huge bump
; 401  : 				bool bAlreadyStarted = pWonderCity->GetCityBuildings()->GetBuildingProduction(eBuilding) > 0;

	mov	ecx, DWORD PTR _pWonderCity$[esp+64]
	push	ebp
	mov	DWORD PTR _iTurnsRequired$[esp+72], eax
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetBuildingProduction@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetBuildingProduction
	test	eax, eax

; 402  : 				int iTempWeight = bAlreadyStarted ? m_WonderAIWeights.GetWeight(iBldgLoop) * 25 : m_WonderAIWeights.GetWeight(iBldgLoop);

	mov	eax, DWORD PTR [ebx+20]
	jle	SHORT $LN34@ChooseWond
	mov	ecx, DWORD PTR [eax+ebp*8]
	mov	eax, DWORD PTR [eax+ebp*8+4]
	mov	DWORD PTR _elem$227183[esp+68], ecx
	imul	eax, 25					; 00000019H
	jmp	SHORT $LN210@ChooseWond
$LN34@ChooseWond:
	mov	edx, DWORD PTR [eax+ebp*8]
	mov	eax, DWORD PTR [eax+ebp*8+4]
	mov	DWORD PTR _elem$227198[esp+68], edx
$LN210@ChooseWond:

; 403  : 
; 404  : 				// Don't build the UN if you aren't going for the diplo victory
; 405  : 				if(pkBuildingInfo->IsDiplomaticVoting())

	mov	ecx, edi
	mov	DWORD PTR _iTempWeight$223476[esp+68], eax
	call	?IsDiplomaticVoting@CvBuildingEntry@@QBE_NXZ ; CvBuildingEntry::IsDiplomaticVoting
	test	al, al
	je	$LN203@ChooseWond

; 406  : 				{
; 407  : 					int iVotesNeededToWin = GC.getGame().GetVotesNeededForDiploVictory();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?GetVotesNeededForDiploVictory@CvGame@@QBEHXZ ; CvGame::GetVotesNeededForDiploVictory

; 408  : 					int iSecuredVotes = 0;
; 409  : 					TeamTypes myTeamID = m_pPlayer->getTeam();

	mov	ecx, DWORD PTR [ebx+12]
	mov	ebx, DWORD PTR [ecx+44]
	xor	edi, edi
	mov	DWORD PTR _iVotesNeededToWin$223478[esp+68], eax
	cmp	ebx, 63					; 0000003fH
	ja	SHORT $LN128@ChooseWond
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR $T227223[esp+68], ecx
	jmp	SHORT $LN129@ChooseWond
$LN128@ChooseWond:
	mov	DWORD PTR $T227223[esp+68], -1
$LN129@ChooseWond:

; 410  : 					PlayerTypes myPlayerID = m_pPlayer->GetID();

	xor	esi, esi
	npad	9
$LL206@ChooseWond:

; 416  : 					{
; 417  : 						eLoopPlayer = (PlayerTypes) iPlayerLoop;
; 418  : 
; 419  : 						if(GET_PLAYER(eLoopPlayer).isAlive())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	cmp	BYTE PTR [esi+eax+2256], 0
	je	SHORT $LN18@ChooseWond

; 420  : 						{
; 421  : 							eLoopTeam = GET_PLAYER(eLoopPlayer).getTeam();

	mov	eax, DWORD PTR [esi+eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN149@ChooseWond
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN150@ChooseWond
$LN149@ChooseWond:
	or	eax, -1
$LN150@ChooseWond:

; 422  : 
; 423  : 							// Liberated?
; 424  : 							if(GET_TEAM(eLoopTeam).GetLiberatedByTeam() == myTeamID)

	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	ecx, eax
	call	?GetLiberatedByTeam@CvTeam@@QBE?AW4TeamTypes@@XZ ; CvTeam::GetLiberatedByTeam
	cmp	eax, DWORD PTR $T227223[esp+68]

; 425  : 							{
; 426  : 								iSecuredVotes++;

	je	SHORT $LN211@ChooseWond

; 427  : 							}
; 428  : 
; 429  : 							// Minor civ?
; 430  : 							else if(GET_PLAYER(eLoopPlayer).isMinorCiv())

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+edx]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN18@ChooseWond

; 431  : 							{
; 432  : 								// Best Relations?
; 433  : 								if(GET_PLAYER(eLoopPlayer).GetMinorCivAI()->GetAlly() == myPlayerID)

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+eax]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	cmp	eax, ebx
	jne	SHORT $LN18@ChooseWond
$LN211@ChooseWond:

; 434  : 								{
; 435  : 									iSecuredVotes++;

	inc	edi
$LN18@ChooseWond:

; 411  : 
; 412  : 					// Loop through Players to see if they'll vote for this player
; 413  : 					PlayerTypes eLoopPlayer;
; 414  : 					TeamTypes eLoopTeam;
; 415  : 					for(int iPlayerLoop = 0; iPlayerLoop < MAX_CIV_PLAYERS; iPlayerLoop++)

	add	esi, 63236				; 0000f704H
	cmp	esi, 3983868				; 003cc9fcH
	jl	SHORT $LL206@ChooseWond

; 436  : 								}
; 437  : 							}
; 438  : 						}
; 439  : 					}
; 440  : 
; 441  : 					int iNumberOfPlayersWeNeedToBuyOff = MAX(0, iVotesNeededToWin - iSecuredVotes);

	mov	eax, DWORD PTR _iVotesNeededToWin$223478[esp+68]
	sub	eax, edi
	mov	DWORD PTR $T226963[esp+68], eax
	mov	DWORD PTR $T226964[esp+68], 0
	lea	esi, DWORD PTR $T226963[esp+68]
	test	eax, eax
	jg	SHORT $LN163@ChooseWond
	lea	esi, DWORD PTR $T226964[esp+68]
$LN163@ChooseWond:

; 442  : 
; 443  : 					if(!m_pPlayer->GetDiplomacyAI() || !m_pPlayer->GetDiplomacyAI()->IsGoingForDiploVictory() || m_pPlayer->GetTreasury()->GetGold() < iNumberOfPlayersWeNeedToBuyOff * 500 )

	mov	edi, DWORD PTR _this$[esp+68]
	mov	ecx, DWORD PTR [edi+12]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	test	eax, eax
	je	SHORT $LN10@ChooseWond
	mov	ecx, DWORD PTR [edi+12]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForDiploVictory
	test	al, al
	je	SHORT $LN10@ChooseWond
	mov	ecx, DWORD PTR [edi+12]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?GetGold@CvTreasury@@QBEHXZ		; CvTreasury::GetGold
	mov	ecx, DWORD PTR [esi]
	imul	ecx, 500				; 000001f4H
	cmp	eax, ecx
	jge	SHORT $LN203@ChooseWond
$LN10@ChooseWond:

; 444  : 					{
; 445  : 						iTempWeight = 0;

	mov	DWORD PTR _iTempWeight$223476[esp+68], 0
$LN203@ChooseWond:

; 446  : 					}
; 447  : 				}
; 448  : 
; 449  : 				iWeight = CityStrategyAIHelpers::ReweightByTurnsLeft(iTempWeight, iTurnsRequired);

	mov	edx, DWORD PTR _iTurnsRequired$[esp+68]
	mov	eax, DWORD PTR _iTempWeight$223476[esp+68]
	push	edx
	push	eax
	call	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z ; CityStrategyAIHelpers::ReweightByTurnsLeft
	add	esp, 8

; 450  : 
; 451  : 				if(bAdjustForOtherPlayers && ::isWorldWonderClass(kBuildingClassInfo))

	cmp	BYTE PTR _bAdjustForOtherPlayers$[esp+64], 0
	mov	ebx, eax
	je	SHORT $LN9@ChooseWond
	mov	ecx, DWORD PTR _kBuildingClassInfo$223468[esp+68]
	push	ecx
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	test	al, al
	je	SHORT $LN9@ChooseWond

; 452  : 				{
; 453  : 					// Adjust weight for this wonder down based on number of other players currently working on it
; 454  : 					int iNumOthersConstructing = 0;

	xor	ebp, ebp
	xor	esi, esi
	npad	1
$LL8@ChooseWond:

; 456  : 					{
; 457  : 						PlayerTypes eLoopPlayer = (PlayerTypes) iPlayerLoop;
; 458  : 						if(GET_PLAYER(eLoopPlayer).getBuildingClassMaking((BuildingClassTypes)kBuilding.GetBuildingClassType()) > 0)

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, DWORD PTR _pkBuildingInfo$223465[esp+68]
	lea	edi, DWORD PTR [esi+edx]
	call	?GetBuildingClassType@CvBuildingEntry@@QBEHXZ ; CvBuildingEntry::GetBuildingClassType
	push	eax
	mov	ecx, edi
	call	?getBuildingClassMaking@CvPlayer@@QBEHW4BuildingClassTypes@@@Z ; CvPlayer::getBuildingClassMaking
	test	eax, eax
	jle	SHORT $LN7@ChooseWond

; 459  : 						{
; 460  : 							iNumOthersConstructing++;

	inc	ebp
$LN7@ChooseWond:

; 455  : 					for(int iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)

	add	esi, 63236				; 0000f704H
	cmp	esi, 1391192				; 00153a58H
	jl	SHORT $LL8@ChooseWond

; 461  : 						}
; 462  : 					}
; 463  : 					iWeight = iWeight / (1 + iNumOthersConstructing);

	mov	eax, ebx
	inc	ebp
	cdq
	idiv	ebp
	mov	ebp, DWORD PTR _iBldgLoop$[esp+68]
	mov	ebx, eax
$LN9@ChooseWond:

; 464  : 				}
; 465  : 
; 466  : 				m_Buildables.push_back(iBldgLoop, iWeight);

	mov	esi, DWORD PTR _this$[esp+68]
	mov	eax, DWORD PTR [esi+1124]
	add	esi, 1116				; 0000045cH
	mov	BYTE PTR [esi+412], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN170@ChooseWond
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN170@ChooseWond:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN173@ChooseWond
	mov	DWORD PTR [eax], ebp
	mov	DWORD PTR [eax+4], ebx
$LN173@ChooseWond:
	inc	DWORD PTR [esi+4]
	mov	ebx, DWORD PTR _this$[esp+68]
$LN25@ChooseWond:
	inc	ebp
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _iBldgLoop$[esp+68], ebp
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	ebp, eax
	jl	$LL207@ChooseWond
$LN24@ChooseWond:

; 467  : 			}
; 468  : 		}
; 469  : 	}
; 470  : 
; 471  : 	// Sort items and grab the first one
; 472  : 	if(m_Buildables.size() > 0)

	cmp	DWORD PTR [ebx+1120], 0
	jle	$LN4@ChooseWond

; 473  : 	{
; 474  : 		m_Buildables.SortItems();

	mov	eax, DWORD PTR [ebx+1116]
	mov	edx, DWORD PTR [ebx+1120]
	lea	esi, DWORD PTR [ebx+1116]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 475  : 		LogPossibleWonders();

	mov	ecx, ebx
	call	?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ ; CvWonderProductionAI::LogPossibleWonders

; 476  : 
; 477  : 		if(m_Buildables.GetTotalWeight() > 0)

	mov	ecx, esi
	call	?GetTotalWeight@?$CvWeightedVector@H$0DC@$00@@QAEHXZ ; CvWeightedVector<int,50,1>::GetTotalWeight
	test	eax, eax
	jle	SHORT $LN4@ChooseWond

; 478  : 		{
; 479  : 			int iNumChoices = GC.getGame().getHandicapInfo().GetCityProductionNumOptions();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getHandicapInfo@CvGame@@QBEAAVCvHandicapInfo@@XZ ; CvGame::getHandicapInfo
	mov	ecx, eax
	call	?GetCityProductionNumOptions@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::GetCityProductionNumOptions

; 480  : 			eSelection = (BuildingTypes)m_Buildables.ChooseFromTopChoices(iNumChoices, &fcn, "Choosing wonder from Top Choices");

	push	OFFSET $SG223513
	lea	ecx, DWORD PTR _fcn$[esp+72]
	push	ecx
	push	eax
	mov	ecx, esi
	call	?ChooseFromTopChoices@?$CvWeightedVector@H$0DC@$00@@QAEHHPAV?$FastDelegate2@HPBDH@fastdelegate@@PBD@Z ; CvWeightedVector<int,50,1>::ChooseFromTopChoices

; 481  : 			iWonderWeight = m_Buildables.GetTotalWeight();

	mov	ecx, esi
	mov	edi, eax
	call	?GetTotalWeight@?$CvWeightedVector@H$0DC@$00@@QAEHXZ ; CvWeightedVector<int,50,1>::GetTotalWeight
	mov	edx, DWORD PTR _iWonderWeight$[esp+64]
	mov	DWORD PTR [edx], eax

; 482  : 			return eSelection;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 496  : 	}
; 497  : }

	add	esp, 52					; 00000034H
	ret	12					; 0000000cH
$LN4@ChooseWond:
	pop	edi
	pop	esi
	pop	ebp

; 483  : 		}
; 484  : 
; 485  : 		// Nothing with any weight
; 486  : 		else
; 487  : 		{
; 488  : 			return NO_BUILDING;
; 489  : 		}
; 490  : 	}
; 491  : 
; 492  : 	// Unless we didn't find any
; 493  : 	else
; 494  : 	{
; 495  : 		return NO_BUILDING;

	or	eax, -1
	pop	ebx

; 496  : 	}
; 497  : }

	add	esp, 52					; 00000034H
	ret	12					; 0000000cH
?ChooseWonder@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_N0AAH@Z ENDP ; CvWonderProductionAI::ChooseWonder
_TEXT	ENDS
PUBLIC	?ChooseWonderForGreatEngineer@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_NAAHAAPAVCvCity@@@Z ; CvWonderProductionAI::ChooseWonderForGreatEngineer
; Function compile flags: /Ogtpy
;	COMDAT ?ChooseWonderForGreatEngineer@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_NAAHAAPAVCvCity@@@Z
_TEXT	SEGMENT
$T227642 = -32						; size = 4
$T227407 = -32						; size = 4
_iWeight$ = -28						; size = 4
_pWonderCity$ = -24					; size = 4
_elem$227622 = -20					; size = 8
$T227406 = -20						; size = 4
_iVotesNeededToWin$223548 = -20				; size = 4
_iCityLoop$ = -12					; size = 4
_fcn$ = -8						; size = 8
_iLoop$223577 = 8					; size = 4
_iBldgLoop$ = 8						; size = 4
_bUseAsyncRandom$ = 8					; size = 1
_iWonderWeight$ = 12					; size = 4
_pCityToBuildAt$ = 16					; size = 4
?ChooseWonderForGreatEngineer@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_NAAHAAPAVCvCity@@@Z PROC ; CvWonderProductionAI::ChooseWonderForGreatEngineer, COMDAT
; _this$ = ecx

; 503  : #ifdef AUI_WARNING_FIXES
; 504  : 	uint iBldgLoop;
; 505  : #else
; 506  : 	int iBldgLoop;
; 507  : #endif
; 508  : 	int iWeight;
; 509  : 	int iCityLoop;
; 510  : 	RandomNumberDelegate fcn;
; 511  : 	BuildingTypes eSelection;
; 512  : 
; 513  : 	pCityToBuildAt = 0;

	mov	eax, DWORD PTR _pCityToBuildAt$[esp-4]
	sub	esp, 32					; 00000020H
	push	ebx
	push	ebp
	xor	ebp, ebp

; 514  : 	iWonderWeight = 0;
; 515  : 
; 516  : 	// Use the asynchronous random number generate if "no random" is set
; 517  : 	if (bUseAsyncRandom)

	cmp	BYTE PTR _bUseAsyncRandom$[esp+36], 0
	mov	ebx, ecx
	mov	ecx, DWORD PTR _iWonderWeight$[esp+36]
	mov	DWORD PTR [eax], ebp
	mov	DWORD PTR [ecx], ebp
	je	SHORT $LN31@ChooseWond@2

; 518  : 	{
; 519  : 		fcn = MakeDelegate(&GC.getGame(), &CvGame::getAsyncRandNum);

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _fcn$[esp+44], OFFSET ?getAsyncRandNum@CvGame@@QAEHHPBD@Z ; CvGame::getAsyncRandNum
	mov	DWORD PTR _fcn$[esp+40], edx

; 520  : 	}
; 521  : 	else

	jmp	SHORT $LN86@ChooseWond@2
$LN31@ChooseWond@2:

; 522  : 	{
; 523  : 		fcn = MakeDelegate(&GC.getGame(), &CvGame::getJonRandNum);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR _fcn$[esp+44], OFFSET ?getJonRandNum@CvGame@@QAEHHPBD@Z ; CvGame::getJonRandNum
	mov	DWORD PTR _fcn$[esp+40], eax
$LN86@ChooseWond@2:

; 524  : 	}
; 525  : 
; 526  : 	// Reset list of all the possible wonders
; 527  : 	m_Buildables.clear();

	mov	DWORD PTR [ebx+1120], ebp

; 528  : 
; 529  : 	// Guess which city will be producing this
; 530  : 	CvCity* pWonderCity = m_pPlayer->GetCitySpecializationAI()->GetWonderBuildCity();

	mov	ecx, DWORD PTR [ebx+12]
	call	?GetCitySpecializationAI@CvPlayer@@QBEPAVCvCitySpecializationAI@@XZ ; CvPlayer::GetCitySpecializationAI
	mov	ecx, eax
	call	?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ ; CvCitySpecializationAI::GetWonderBuildCity
	mov	DWORD PTR _pWonderCity$[esp+40], eax

; 531  : 	if (pWonderCity == NULL)

	cmp	eax, ebp
	jne	SHORT $LN187@ChooseWond@2

; 532  : 	{
; 533  : 		pWonderCity = m_pPlayer->firstCity(&iCityLoop);

	push	ebp
	lea	ecx, DWORD PTR _iCityLoop$[esp+44]
	push	ecx
	mov	ecx, DWORD PTR [ebx+12]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pWonderCity$[esp+40], eax

; 534  : 	}
; 535  : 
; 536  : 	CvAssertMsg(pWonderCity, "Trying to choose the next wonder to build and the player has no cities!");
; 537  : 	if (pWonderCity == NULL)

	cmp	eax, ebp
	jne	SHORT $LN187@ChooseWond@2
	pop	ebp

; 538  : 		return NO_BUILDING;

	or	eax, -1
	pop	ebx

; 654  : 	}
; 655  : }

	add	esp, 32					; 00000020H
	ret	12					; 0000000cH
$LN187@ChooseWond@2:
	push	esi
	push	edi

; 539  : 
; 540  : 	// Loop through adding the available wonders
; 541  : 	for (iBldgLoop = 0; iBldgLoop < GC.GetGameBuildings()->GetNumBuildings(); iBldgLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _iBldgLoop$[esp+44], ebp
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	test	eax, eax
	jle	$LN25@ChooseWond@2
	npad	2
$LL192@ChooseWond@2:

; 542  : 	{
; 543  : 		const BuildingTypes eBuilding = static_cast<BuildingTypes>(iBldgLoop);
; 544  : 		CvBuildingEntry* pkBuildingInfo = m_pBuildings->GetEntry(eBuilding);

	mov	ecx, DWORD PTR [ebx+16]
	push	ebp
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry
	mov	esi, eax

; 545  : 		if (pkBuildingInfo)

	test	esi, esi
	je	$LN26@ChooseWond@2

; 546  : 		{
; 547  : 			CvBuildingEntry& kBuilding = *pkBuildingInfo;
; 548  : #ifdef NQM_AI_GIMP_NO_WORLD_WONDERS
; 549  : 			if (GC.getGame().isOption("GAMEOPTION_AI_GIMP_NO_WORLD_WONDER") && isWorldWonderClass(kBuilding.GetBuildingClassInfo()))

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	OFFSET $SG223543
	call	?isOption@CvGame@@QBE_NPBD@Z		; CvGame::isOption
	test	al, al
	je	SHORT $LN23@ChooseWond@2
	mov	ecx, esi
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo
	push	eax
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	test	al, al
	jne	$LN26@ChooseWond@2
$LN23@ChooseWond@2:

; 550  : 			{
; 551  : 				continue;
; 552  : 			}
; 553  : #endif
; 554  : 			// Make sure this wonder can be built now
; 555  : 			if (IsWonder(kBuilding) && HaveCityToBuild((BuildingTypes)iBldgLoop))

	mov	ecx, esi
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo
	mov	edi, eax
	push	edi
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN100@ChooseWond@2
	push	edi
	call	?isTeamWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isTeamWonderClass
	add	esp, 4
	test	al, al
	jne	SHORT $LN100@ChooseWond@2
	push	edi
	call	?isNationalWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isNationalWonderClass
	add	esp, 4
	test	al, al
	je	$LN26@ChooseWond@2
$LN100@ChooseWond@2:
	push	ebp
	mov	ecx, ebx
	call	?HaveCityToBuild@CvWonderProductionAI@@ABE_NW4BuildingTypes@@@Z ; CvWonderProductionAI::HaveCityToBuild
	test	al, al
	je	$LN26@ChooseWond@2

; 556  : 			{
; 557  : 				iWeight = m_WonderAIWeights.GetWeight((UnitTypes)iBldgLoop); // use raw weight since this wonder is essentially free

	mov	eax, DWORD PTR [ebx+20]
	mov	edx, DWORD PTR [eax+ebp*8]
	mov	eax, DWORD PTR [eax+ebp*8+4]

; 558  : 				// Don't build the UN if you aren't going for the diplo victory and have a chance of winning it
; 559  : 				if(pkBuildingInfo->IsDiplomaticVoting())

	mov	ecx, esi
	mov	DWORD PTR _elem$227622[esp+48], edx
	mov	DWORD PTR _iWeight$[esp+48], eax
	call	?IsDiplomaticVoting@CvBuildingEntry@@QBE_NXZ ; CvBuildingEntry::IsDiplomaticVoting
	test	al, al
	je	$LN12@ChooseWond@2

; 560  : 				{
; 561  : 					int iVotesNeededToWin = GC.getGame().GetVotesNeededForDiploVictory();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?GetVotesNeededForDiploVictory@CvGame@@QBEHXZ ; CvGame::GetVotesNeededForDiploVictory

; 562  : 					int iSecuredVotes = 0;
; 563  : 					TeamTypes myTeamID = m_pPlayer->getTeam();

	mov	ecx, DWORD PTR [ebx+12]
	mov	ebp, DWORD PTR [ecx+44]
	xor	edi, edi
	mov	DWORD PTR _iVotesNeededToWin$223548[esp+48], eax
	cmp	ebp, 63					; 0000003fH
	ja	SHORT $LN116@ChooseWond@2
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+ebp*4]
	mov	DWORD PTR $T227642[esp+48], ecx
	jmp	SHORT $LN117@ChooseWond@2
$LN116@ChooseWond@2:
	mov	DWORD PTR $T227642[esp+48], -1
$LN117@ChooseWond@2:

; 564  : 					PlayerTypes myPlayerID = m_pPlayer->GetID();

	xor	esi, esi
	npad	4
$LL191@ChooseWond@2:

; 570  : 					{
; 571  : 						eLoopPlayer = (PlayerTypes) iPlayerLoop;
; 572  : 
; 573  : 						if(GET_PLAYER(eLoopPlayer).isAlive())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	cmp	BYTE PTR [esi+eax+2256], 0
	je	SHORT $LN19@ChooseWond@2

; 574  : 						{
; 575  : 							eLoopTeam = GET_PLAYER(eLoopPlayer).getTeam();

	mov	eax, DWORD PTR [esi+eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN137@ChooseWond@2
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN138@ChooseWond@2
$LN137@ChooseWond@2:
	or	eax, -1
$LN138@ChooseWond@2:

; 576  : 
; 577  : 							// Liberated?
; 578  : 							if(GET_TEAM(eLoopTeam).GetLiberatedByTeam() == myTeamID)

	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	ecx, eax
	call	?GetLiberatedByTeam@CvTeam@@QBE?AW4TeamTypes@@XZ ; CvTeam::GetLiberatedByTeam
	cmp	eax, DWORD PTR $T227642[esp+48]

; 579  : 							{
; 580  : 								iSecuredVotes++;

	je	SHORT $LN195@ChooseWond@2

; 581  : 							}
; 582  : 
; 583  : 							// Minor civ?
; 584  : 							else if(GET_PLAYER(eLoopPlayer).isMinorCiv())

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+edx]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN19@ChooseWond@2

; 585  : 							{
; 586  : 								// Best Relations?
; 587  : 								if(GET_PLAYER(eLoopPlayer).GetMinorCivAI()->GetAlly() == myPlayerID)

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+eax]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	cmp	eax, ebp
	jne	SHORT $LN19@ChooseWond@2
$LN195@ChooseWond@2:

; 588  : 								{
; 589  : 									iSecuredVotes++;

	inc	edi
$LN19@ChooseWond@2:

; 565  : 
; 566  : 					// Loop through Players to see if they'll vote for this player
; 567  : 					PlayerTypes eLoopPlayer;
; 568  : 					TeamTypes eLoopTeam;
; 569  : 					for(int iPlayerLoop = 0; iPlayerLoop < MAX_CIV_PLAYERS; iPlayerLoop++)

	add	esi, 63236				; 0000f704H
	cmp	esi, 3983868				; 003cc9fcH
	jl	SHORT $LL191@ChooseWond@2

; 590  : 								}
; 591  : 							}
; 592  : 						}
; 593  : 					}
; 594  : 
; 595  : 					int iNumberOfPlayersWeNeedToBuyOff = MAX(0, iVotesNeededToWin - iSecuredVotes);

	mov	eax, DWORD PTR _iVotesNeededToWin$223548[esp+48]
	sub	eax, edi
	mov	DWORD PTR $T227406[esp+48], eax
	mov	DWORD PTR $T227407[esp+48], 0
	lea	esi, DWORD PTR $T227406[esp+48]
	test	eax, eax
	jg	SHORT $LN151@ChooseWond@2
	lea	esi, DWORD PTR $T227407[esp+48]
$LN151@ChooseWond@2:

; 596  : 
; 597  : 					if(!m_pPlayer->GetDiplomacyAI() || !m_pPlayer->GetDiplomacyAI()->IsGoingForDiploVictory() || m_pPlayer->GetTreasury()->GetGold() < iNumberOfPlayersWeNeedToBuyOff * 500 )

	mov	ecx, DWORD PTR [ebx+12]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	test	eax, eax
	je	SHORT $LN11@ChooseWond@2
	mov	ecx, DWORD PTR [ebx+12]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForDiploVictory
	test	al, al
	je	SHORT $LN11@ChooseWond@2
	mov	ecx, DWORD PTR [ebx+12]
	call	?GetTreasury@CvPlayer@@QBEPAVCvTreasury@@XZ ; CvPlayer::GetTreasury
	mov	ecx, eax
	call	?GetGold@CvTreasury@@QBEHXZ		; CvTreasury::GetGold
	mov	ecx, DWORD PTR [esi]
	imul	ecx, 500				; 000001f4H
	cmp	eax, ecx
	jge	SHORT $LN188@ChooseWond@2
$LN11@ChooseWond@2:

; 598  : 					{
; 599  : 						iWeight = 0;

	mov	DWORD PTR _iWeight$[esp+48], 0
$LN188@ChooseWond@2:
	mov	ebp, DWORD PTR _iBldgLoop$[esp+44]
$LN12@ChooseWond@2:

; 600  : 					}
; 601  : 				}
; 602  : 				// ??? do we want to weight it more for more expensive wonders?
; 603  : 				m_Buildables.push_back(iBldgLoop, iWeight);

	mov	eax, DWORD PTR [ebx+1124]
	lea	esi, DWORD PTR [ebx+1116]
	mov	BYTE PTR [esi+412], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN156@ChooseWond@2
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN156@ChooseWond@2:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN159@ChooseWond@2
	mov	ecx, DWORD PTR _iWeight$[esp+48]
	mov	DWORD PTR [eax], ebp
	mov	DWORD PTR [eax+4], ecx
$LN159@ChooseWond@2:
	inc	DWORD PTR [esi+4]
$LN26@ChooseWond@2:

; 539  : 
; 540  : 	// Loop through adding the available wonders
; 541  : 	for (iBldgLoop = 0; iBldgLoop < GC.GetGameBuildings()->GetNumBuildings(); iBldgLoop++)

	inc	ebp
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _iBldgLoop$[esp+44], ebp
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	ebp, eax
	jl	$LL192@ChooseWond@2
$LN25@ChooseWond@2:

; 604  : 			}
; 605  : 		}
; 606  : 	}
; 607  : 
; 608  : 	// Sort items and grab the first one
; 609  : 	if(m_Buildables.size() > 0)

	cmp	DWORD PTR [ebx+1120], 0
	jle	$LN10@ChooseWond@2

; 610  : 	{
; 611  : 		m_Buildables.SortItems();

	mov	eax, DWORD PTR [ebx+1116]
	mov	edx, DWORD PTR [ebx+1120]
	lea	esi, DWORD PTR [ebx+1116]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 612  : 		LogPossibleWonders();

	mov	ecx, ebx
	call	?LogPossibleWonders@CvWonderProductionAI@@QAEXXZ ; CvWonderProductionAI::LogPossibleWonders

; 613  : 
; 614  : 		if(m_Buildables.GetTotalWeight() > 0)

	mov	ecx, esi
	call	?GetTotalWeight@?$CvWeightedVector@H$0DC@$00@@QAEHXZ ; CvWeightedVector<int,50,1>::GetTotalWeight
	test	eax, eax
	jle	$LN10@ChooseWond@2

; 615  : 		{
; 616  : 			int iNumChoices = 1;
; 617  : 			eSelection = (BuildingTypes)m_Buildables.ChooseFromTopChoices(iNumChoices, &fcn, "Choosing wonder from Top Choices");

	push	OFFSET $SG223573
	lea	eax, DWORD PTR _fcn$[esp+52]
	push	eax
	push	1
	mov	ecx, esi
	call	?ChooseFromTopChoices@?$CvWeightedVector@H$0DC@$00@@QAEHHPAV?$FastDelegate2@HPBDH@fastdelegate@@PBD@Z ; CvWeightedVector<int,50,1>::ChooseFromTopChoices

; 618  : 			iWonderWeight = m_Buildables.GetTotalWeight();

	mov	ecx, esi
	mov	edi, eax
	call	?GetTotalWeight@?$CvWeightedVector@H$0DC@$00@@QAEHXZ ; CvWeightedVector<int,50,1>::GetTotalWeight
	mov	ecx, DWORD PTR _iWonderWeight$[esp+44]

; 619  : 
; 620  : 			// first check if the wonder city can build it
; 621  : 			if (pWonderCity->canConstruct(eSelection))

	mov	esi, DWORD PTR _pWonderCity$[esp+48]
	push	0
	push	0
	push	0
	push	0
	mov	DWORD PTR [ecx], eax
	push	edi
	mov	ecx, esi
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	test	al, al

; 622  : 			{
; 623  : 				pCityToBuildAt = pWonderCity;
; 624  : 			}
; 625  : 			// if it can't then check for other cities
; 626  : 			else

	jne	SHORT $LN181@ChooseWond@2

; 627  : 			{
; 628  : 				CvCity* pLoopCity;
; 629  : 				int iLoop;
; 630  : 				for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	mov	ecx, DWORD PTR [ebx+12]
	push	0
	lea	eax, DWORD PTR _iLoop$223577[esp+48]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN4@ChooseWond@2
	npad	2
$LL6@ChooseWond@2:

; 631  : 				{
; 632  : 					if(pLoopCity->canConstruct(eSelection))

	push	0
	push	0
	push	0
	push	0
	push	edi
	mov	ecx, esi
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	test	al, al
	jne	SHORT $LN181@ChooseWond@2
	push	0
	lea	ecx, DWORD PTR _iLoop$223577[esp+48]
	push	ecx
	mov	ecx, DWORD PTR [ebx+12]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	esi, eax
	test	esi, esi
	jne	SHORT $LL6@ChooseWond@2

; 635  : 						break; // todo: find the best city 
; 636  : 					}
; 637  : 				}
; 638  : 			}
; 639  : 
; 640  : 			return eSelection;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 654  : 	}
; 655  : }

	add	esp, 32					; 00000020H
	ret	12					; 0000000cH
$LN181@ChooseWond@2:

; 633  : 					{
; 634  : 						pCityToBuildAt = pLoopCity;

	mov	edx, DWORD PTR _pCityToBuildAt$[esp+44]
	mov	DWORD PTR [edx], esi
$LN4@ChooseWond@2:

; 635  : 						break; // todo: find the best city 
; 636  : 					}
; 637  : 				}
; 638  : 			}
; 639  : 
; 640  : 			return eSelection;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 654  : 	}
; 655  : }

	add	esp, 32					; 00000020H
	ret	12					; 0000000cH
$LN10@ChooseWond@2:
	pop	edi
	pop	esi
	pop	ebp

; 641  : 		}
; 642  : 
; 643  : 		// Nothing with any weight
; 644  : 		else
; 645  : 		{
; 646  : 			return NO_BUILDING;
; 647  : 		}
; 648  : 	}
; 649  : 
; 650  : 	// Unless we didn't find any
; 651  : 	else
; 652  : 	{
; 653  : 		return NO_BUILDING;

	or	eax, -1
	pop	ebx

; 654  : 	}
; 655  : }

	add	esp, 32					; 00000020H
	ret	12					; 0000000cH
?ChooseWonderForGreatEngineer@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_NAAHAAPAVCvCity@@@Z ENDP ; CvWonderProductionAI::ChooseWonderForGreatEngineer
_TEXT	ENDS
END
