; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Desktop\Lekmod Files\Lekmod DLL versions\v29\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvEspionageClasses.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
PUBLIC	?g_eSortPlayer@@3W4PlayerTypes@@A		; g_eSortPlayer
CONST	SEGMENT
$SG222783 DB	'Randomizing m_aiSpyListNameOrder list', 00H
$SG223392 DB	00H
$SG223904 DB	00H
$SG222820 DB	'GAMEOPTION_NO_ESPIONAGE', 00H
$SG222834 DB	'TXT_KEY_NOTIFICATION_SPY_CREATED', 00H
$SG224228 DB	00H
$SG224230 DB	00H
	ORG $+1
$SG222837 DB	'TXT_KEY_NOTIFICATION_SUMMARY_SPY_CREATED', 00H
	ORG $+3
$SG222840 DB	'New Spy, %d,', 00H
	ORG $+3
$SG222889 DB	'TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH_S', 00H
	ORG $+1
$SG222898 DB	'TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH', 00H
	ORG $+3
$SG222905 DB	'Re-eval: can''t steal research, %d,', 00H
	ORG $+1
$SG222912 DB	'Re-eval: potential too low, %d,', 00H
$SG222926 DB	'TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH_S', 00H
	ORG $+1
$SG222917 DB	'Re-eval: m_aaPlayerStealableTechList[eCityOwner].size() '
	DB	'== 0, %d,', 00H
	ORG $+2
$SG222930 DB	'TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH', 00H
	ORG $+3
$SG222939 DB	'Random roll for the result of a spy mission with a count'
	DB	'erspy in the city', 00H
	ORG $+2
$SG222948 DB	'CIVILIZATION_RUSSIA', 00H
$SG222949 DB	'CIVILIZATION_ENGLAND', 00H
	ORG $+3
$SG222954 DB	'Random roll for the result of a spying mission without a'
	DB	' counterspy in the city', 00H
$SG222970 DB	'TXT_KEY_NOTIFICATION_SPY_WAS_KILLED_S', 00H
	ORG $+2
$SG222974 DB	'TXT_KEY_NOTIFICATION_SPY_WAS_KILLED', 00H
$SG222988 DB	'Killed, %d,', 00H
$SG222990 DB	',', 00H
	ORG $+2
$SG222991 DB	',', 00H
	ORG $+2
$SG222992 DB	',', 00H
	ORG $+2
$SG222993 DB	',', 00H
	ORG $+2
$SG222995 DB	',', 00H
	ORG $+2
$SG222996 DB	'Killed', 00H
	ORG $+1
$SG223000 DB	'Re-eval: spy completed mission, %d,', 00H
$SG223014 DB	'TXT_KEY_NOTIFICATION_SPY_STEAL_TECH_S', 00H
	ORG $+2
$SG223017 DB	'TXT_KEY_NOTIFICATION_SPY_STEAL_TECH', 00H
$SG223026 DB	'Stealing tech, %d,', 00H
	ORG $+1
$SG223028 DB	',', 00H
	ORG $+2
$SG223029 DB	',', 00H
	ORG $+2
$SG223030 DB	',', 00H
	ORG $+2
$SG223031 DB	',', 00H
	ORG $+2
$SG223033 DB	',', 00H
	ORG $+2
$SG223039 DB	'Undetected', 00H
	ORG $+1
$SG223041 DB	'Detected', 00H
	ORG $+3
$SG223043 DB	'Identified', 00H
	ORG $+1
$SG223057 DB	'Re-eval: spy killed, %d,', 00H
	ORG $+3
$SG223063 DB	'TXT_KEY_NOTIFICATION_SPY_REVIVED_S', 00H
	ORG $+1
$SG223066 DB	'TXT_KEY_NOTIFICATION_SPY_REVIVED', 00H
	ORG $+3
$SG223071 DB	'Respawned spy, %d,', 00H
	ORG $+1
$SG223104 DB	'Randomizing aiMajorCivIndex list within UncoverIntrigue', 00H
$SG223243 DB	'Moving spy, %d,', 00H
$SG223245 DB	',', 00H
	ORG $+2
$SG223247 DB	',', 00H
	ORG $+2
$SG223250 DB	'Unassigned', 00H
	ORG $+1
$SG223251 DB	',', 00H
	ORG $+2
$SG223252 DB	',', 00H
	ORG $+2
$SG223254 DB	',', 00H
	ORG $+2
$SG223257 DB	'Unassigned', 00H
	ORG $+1
$SG223258 DB	',', 00H
	ORG $+2
$SG223259 DB	',', 00H
	ORG $+2
$SG223261 DB	'Diplomat', 00H
	ORG $+3
$SG223262 DB	',', 00H
	ORG $+2
$SG223300 DB	'TXT_KEY_NOTIFICATION_SPY_PROMOTED', 00H
	ORG $+2
$SG223303 DB	'TXT_KEY_NOTIFICATION_SUMMARY_SPY_PROMOTED', 00H
	ORG $+2
$SG223387 DB	'TXT_KEY_SPY_RANK_0', 00H
	ORG $+1
$SG223389 DB	'TXT_KEY_SPY_RANK_1', 00H
	ORG $+1
$SG223391 DB	'TXT_KEY_SPY_RANK_2', 00H
	ORG $+1
$SG223546 DB	'Re-eval: attempting coup, %d,', 00H
	ORG $+2
$SG223550 DB	'Roll for the result of an attempted coup', 00H
	ORG $+3
$SG223587 DB	'TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_SUCCESS_S', 00H
	ORG $+2
$SG223591 DB	'TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_SUCCESS', 00H
$SG223597 DB	'TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_FAILURE_S', 00H
	ORG $+2
$SG223601 DB	'TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_FAILURE', 00H
$SG223612 DB	'TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS_S', 00H
	ORG $+2
$SG223615 DB	'TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS', 00H
$SG223622 DB	'TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE_S', 00H
	ORG $+2
$SG223625 DB	'TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE', 00H
$SG223801 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH_S', 00H
$SG223805 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH_W_'
	DB	'TIP', 00H
$SG223808 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH', 00H
	ORG $+2
$SG223813 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH_'
	DB	'S', 00H
	ORG $+2
$SG223818 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH_'
	DB	'W_TIP', 00H
	ORG $+2
$SG223821 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH', 00H
$SG223829 DB	'TXT_KEY_NOTIFICATION_KILLED_A_SPY_S', 00H
$SG223833 DB	'TXT_KEY_NOTIFICATION_KILLED_A_SPY', 00H
	ORG $+2
$SG223848 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_S', 00H
$SG223853 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_W_TIP', 00H
$SG223856 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED', 00H
	ORG $+2
$SG223862 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_S', 00H
	ORG $+2
$SG223868 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_W_TIP', 00H
	ORG $+2
$SG223871 DB	'TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED', 00H
$SG223908 DB	'TXT_KEY_SPY_FULL_NAME', 00H
	ORG $+2
$SG223923 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_YOU_S', 00H
	ORG $+3
$SG223929 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_YOU', 00H
	ORG $+1
$SG223941 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_UNKNOWN_S'
	DB	00H
	ORG $+3
$SG223947 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_UNKNOWN', 00H
	ORG $+1
$SG223958 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_KNOWN_S', 00H
	ORG $+1
$SG223968 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_KNOWN', 00H
	ORG $+3
$SG223985 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_ARMY_S', 00H
	ORG $+2
$SG223991 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_ARMY', 00H
$SG224002 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY_S'
	DB	00H
	ORG $+3
$SG224008 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY', 00H
	ORG $+5
$SG224022 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'YOU_CITY_KNOWN_S', 00H
	ORG $+7
$SG224029 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'YOU_CITY_KNOWN', 00H
	ORG $+1
$SG224036 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'YOU_CITY_UNKNOWN_S', 00H
	ORG $+5
$SG224042 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'YOU_CITY_UNKNOWN', 00H
	ORG $+7
$SG224050 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'KNOWN_CITY_KNOWN_S', 00H
	ORG $+5
$SG224057 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'KNOWN_CITY_KNOWN', 00H
	ORG $+7
$SG224065 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'KNOWN_CITY_UNKNOWN_S', 00H
	ORG $+3
$SG224075 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'KNOWN_CITY_UNKNOWN', 00H
	ORG $+5
$SG224083 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'SOMEONE_S', 00H
	ORG $+6
$SG224085 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'SOMEONE', 00H
$SG224088 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'UNKNOWN_S', 00H
	ORG $+6
$SG224090 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_'
	DB	'UNKNOWN', 00H
$SG224105 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_YOU_CITY_KNOWN_S', 00H
	ORG $+5
$SG224112 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_YOU_CITY_KNOWN', 00H
	ORG $+7
$SG224119 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_YOU_CITY_UNKNOWN_S', 00H
	ORG $+3
$SG224125 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_YOU_CITY_UNKNOWN', 00H
	ORG $+5
$SG224133 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_KNOWN_CITY_KNOWN_S', 00H
	ORG $+3
$SG224140 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_KNOWN_CITY_KNOWN', 00H
	ORG $+5
$SG224148 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_KNOWN_CITY_UNKNOWN_S', 00H
	ORG $+1
$SG224158 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_KNOWN_CITY_UNKNOWN', 00H
	ORG $+3
$SG224166 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_SOMEONE_S', 00H
$SG224184 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_CONSTRUCT_WONDER_S', 00H
	ORG $+3
$SG224168 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_SOMEONE', 00H
	ORG $+6
$SG224171 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_UNKNOWN_S', 00H
$SG224250 DB	'TXT_KEY_INTRIGUE_PLOTTING_AGAINST_UNKNOWN', 00H
	ORG $+2
$SG224173 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINS'
	DB	'T_UNKNOWN', 00H
	ORG $+2
$SG224200 DB	'TXT_KEY_NOTIFICATION_INTRIGUE_CONSTRUCT_WONDER', 00H
	ORG $+1
$SG224242 DB	'TXT_KEY_INTRIGUE_PLOTTING_AGAINST_YOU', 00H
	ORG $+2
$SG224257 DB	'TXT_KEY_INTRIGUE_PLOTTING_AGAINST_KNOWN', 00H
$SG224268 DB	'TXT_KEY_INTRIGUE_BUILDING_ARMY', 00H
	ORG $+1
$SG224275 DB	'TXT_KEY_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY', 00H
	ORG $+2
$SG224284 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOW'
	DB	'N', 00H
	ORG $+2
$SG224292 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKN'
	DB	'OWN', 00H
$SG224301 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KN'
	DB	'OWN', 00H
$SG224310 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UN'
	DB	'KNOWN', 00H
	ORG $+2
$SG224322 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE', 00H
	ORG $+1
$SG224325 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN', 00H
	ORG $+1
$SG224334 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KN'
	DB	'OWN', 00H
$SG224342 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UN'
	DB	'KNOWN', 00H
	ORG $+2
$SG224351 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_'
	DB	'KNOWN', 00H
	ORG $+2
$SG224360 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_'
	DB	'UNKNOWN', 00H
$SG224372 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE', 00H
	ORG $+3
$SG224375 DB	'TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN', 00H
	ORG $+3
$SG224383 DB	'TXT_KEY_INTRIGUE_CONSTRUCT_WONDER', 00H
	ORG $+2
$SG224386 DB	'TXT_KEY_INTRIGUE_CONSTRUCT_WONDER_WO_CITY', 00H
	ORG $+2
$SG224635 DB	'EspionageLog.csv', 00H
	ORG $+3
$SG224645 DB	'%03d,', 00H
	ORG $+2
$SG224646 DB	',', 00H
	ORG $+2
$SG225061 DB	'Re-eval: UN constructed/reassign, %d,', 00H
	ORG $+2
$SG225515 DB	'AI no more tech to steal,', 00H
	ORG $+2
$SG225516 DB	',', 00H
	ORG $+2
$SG225517 DB	',', 00H
	ORG $+2
$SG225518 DB	',', 00H
	ORG $+2
$SG225536 DB	'Random roll to see if we should attempt a coup', 00H
	ORG $+1
$SG226294 DB	'FLAVOR_GROWTH', 00H
	ORG $+2
$SG226429 DB	'Re-eval: assigned to promise player, %d,', 00H
	ORG $+3
$SG226446 DB	'Re-eval: unassigned spy, %d,', 00H
	ORG $+3
$SG226463 DB	'Re-eval: defensive spy, %d,', 00H
$SG226479 DB	'Re-eval: diplomat spy, %d,', 00H
	ORG $+1
$SG92492 DB	'b103d2e0-3aab-40d7-a2f3-375d2eabfcaf', 00H
	ORG $+3
_CIV5_XP1_SCENARIO3_MODID DD FLAT:$SG92492
CONST	ENDS
_DATA	SEGMENT
?g_eSortPlayer@@3W4PlayerTypes@@A DD 0ffffffffH		; g_eSortPlayer
_DATA	ENDS
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	?GetArmyBeingBuilt@CvMilitaryAI@@QBE?AW4ArmyType@@XZ ; CvMilitaryAI::GetArmyBeingBuilt
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvmilitaryai.h
;	COMDAT ?GetArmyBeingBuilt@CvMilitaryAI@@QBE?AW4ArmyType@@XZ
_TEXT	SEGMENT
?GetArmyBeingBuilt@CvMilitaryAI@@QBE?AW4ArmyType@@XZ PROC ; CvMilitaryAI::GetArmyBeingBuilt, COMDAT
; _this$ = ecx

; 255  : 		return m_eArmyTypeBeingBuilt;

	mov	eax, DWORD PTR [ecx+44]

; 256  : 	};

	ret	0
?GetArmyBeingBuilt@CvMilitaryAI@@QBE?AW4ArmyType@@XZ ENDP ; CvMilitaryAI::GetArmyBeingBuilt
_TEXT	ENDS
PUBLIC	??0CvEspionageSpy@@QAE@XZ			; CvEspionageSpy::CvEspionageSpy
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
;	COMDAT ??0CvEspionageSpy@@QAE@XZ
_TEXT	SEGMENT
??0CvEspionageSpy@@QAE@XZ PROC				; CvEspionageSpy::CvEspionageSpy, COMDAT
; _this$ = ecx

; 42   : {

	mov	eax, ecx
	or	ecx, -1
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+12], 3
	mov	DWORD PTR [eax+16], 9
	mov	DWORD PTR [eax+20], ecx
	mov	BYTE PTR [eax+24], cl
	mov	BYTE PTR [eax+25], 1

; 43   : }

	ret	0
??0CvEspionageSpy@@QAE@XZ ENDP				; CvEspionageSpy::CvEspionageSpy
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	esi
	lea	eax, DWORD PTR __Message$[esp]
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	eax, DWORD PTR __Message$[esp+16]
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[esp+32], 0
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 27   : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 31   : 		}

	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar@2
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar@2:
	mov	eax, esi
	pop	esi
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	mov	eax, DWORD PTR __Message$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 110  : 		}

	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN8@scalar@3
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN8@scalar@3:
	mov	eax, esi
	pop	esi
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	_ceilf
EXTRN	__imp__ceil:PROC
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT _ceilf
_TEXT	SEGMENT
tv71 = 8						; size = 4
__X$ = 8						; size = 4
_ceilf	PROC						; COMDAT

; 397  :         {return ((float)ceil((double)_X)); }

	fld	DWORD PTR __X$[esp-4]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__ceil
	fstp	DWORD PTR tv71[esp+4]
	add	esp, 8
	fld	DWORD PTR tv71[esp-4]
	ret	0
_ceilf	ENDP
_TEXT	ENDS
PUBLIC	_floorf
EXTRN	__imp__floor:PROC
; Function compile flags: /Ogtpy
;	COMDAT _floorf
_TEXT	SEGMENT
tv71 = 8						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 405  :         {return ((float)floor((double)_X)); }

	fld	DWORD PTR __X$[esp-4]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__floor
	fstp	DWORD PTR tv71[esp+4]
	add	esp, 8
	fld	DWORD PTR tv71[esp-4]
	ret	0
_floorf	ENDP
_TEXT	ENDS
PUBLIC	?ceil@@YAMM@Z					; ceil
; Function compile flags: /Ogtpy
;	COMDAT ?ceil@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
$T232954 = 8						; size = 4
__X$ = 8						; size = 4
?ceil@@YAMM@Z PROC					; ceil, COMDAT

; 502  :         {return (ceilf(_X)); }

	fld	DWORD PTR __X$[esp-4]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__ceil
	fstp	DWORD PTR tv73[esp+4]
	add	esp, 8
	fld	DWORD PTR tv73[esp-4]
	fstp	DWORD PTR $T232954[esp-4]
	fld	DWORD PTR $T232954[esp-4]
	ret	0
?ceil@@YAMM@Z ENDP					; ceil
_TEXT	ENDS
PUBLIC	?floor@@YAMM@Z					; floor
; Function compile flags: /Ogtpy
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
tv73 = 8						; size = 4
$T232961 = 8						; size = 4
__X$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 512  :         {return (floorf(_X)); }

	fld	DWORD PTR __X$[esp-4]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__floor
	fstp	DWORD PTR tv73[esp+4]
	add	esp, 8
	fld	DWORD PTR tv73[esp-4]
	fstp	DWORD PTR $T232961[esp-4]
	fld	DWORD PTR $T232961[esp-4]
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
PUBLIC	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z	; CvPlayerEspionage::GetSpyRankName
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
;	COMDAT ?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z
_TEXT	SEGMENT
_iRank$ = 8						; size = 4
?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z PROC	; CvPlayerEspionage::GetSpyRankName, COMDAT
; _this$ = ecx

; 1517 : 	switch(iRank)

	mov	eax, DWORD PTR _iRank$[esp-4]
	sub	eax, 0
	je	SHORT $LN3@GetSpyRank
	sub	eax, 1
	je	SHORT $LN2@GetSpyRank
	sub	eax, 1
	je	SHORT $LN1@GetSpyRank

; 1527 : 		break;
; 1528 : 	}
; 1529 : 
; 1530 : 	return "";

	mov	eax, OFFSET $SG223392

; 1531 : }

	ret	4
$LN1@GetSpyRank:

; 1524 : 		break;
; 1525 : 	case SPY_RANK_SPECIAL_AGENT:
; 1526 : 		return "TXT_KEY_SPY_RANK_2";

	mov	eax, OFFSET $SG223391

; 1531 : }

	ret	4
$LN2@GetSpyRank:

; 1521 : 		break;
; 1522 : 	case SPY_RANK_AGENT:
; 1523 : 		return "TXT_KEY_SPY_RANK_1";

	mov	eax, OFFSET $SG223389

; 1531 : }

	ret	4
$LN3@GetSpyRank:

; 1518 : 	{
; 1519 : 	case SPY_RANK_RECRUIT:
; 1520 : 		return "TXT_KEY_SPY_RANK_0";

	mov	eax, OFFSET $SG223387

; 1531 : }

	ret	4
?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ENDP	; CvPlayerEspionage::GetSpyRankName
_TEXT	ENDS
PUBLIC	??1CvCityEspionage@@QAE@XZ			; CvCityEspionage::~CvCityEspionage
; Function compile flags: /Ogtpy
;	COMDAT ??1CvCityEspionage@@QAE@XZ
_TEXT	SEGMENT
??1CvCityEspionage@@QAE@XZ PROC				; CvCityEspionage::~CvCityEspionage, COMDAT
; _this$ = ecx

; 3939 : }

	ret	0
??1CvCityEspionage@@QAE@XZ ENDP				; CvCityEspionage::~CvCityEspionage
_TEXT	ENDS
PUBLIC	??RScoreCityEntryHighEval@@QBE_NABUScoreCityEntry@@0@Z ; ScoreCityEntryHighEval::operator()
; Function compile flags: /Ogtpy
;	COMDAT ??RScoreCityEntryHighEval@@QBE_NABUScoreCityEntry@@0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??RScoreCityEntryHighEval@@QBE_NABUScoreCityEntry@@0@Z PROC ; ScoreCityEntryHighEval::operator(), COMDAT
; _this$ = ecx

; 4939 : 		return a.m_iScore > b.m_iScore;

	mov	eax, DWORD PTR _a$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _b$[esp-4]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx+4]
	setg	al

; 4940 : 	}

	ret	8
??RScoreCityEntryHighEval@@QBE_NABUScoreCityEntry@@0@Z ENDP ; ScoreCityEntryHighEval::operator()
_TEXT	ENDS
PUBLIC	??RScoreCityEntryLowEval@@QBE_NABUScoreCityEntry@@0@Z ; ScoreCityEntryLowEval::operator()
; Function compile flags: /Ogtpy
;	COMDAT ??RScoreCityEntryLowEval@@QBE_NABUScoreCityEntry@@0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??RScoreCityEntryLowEval@@QBE_NABUScoreCityEntry@@0@Z PROC ; ScoreCityEntryLowEval::operator(), COMDAT
; _this$ = ecx

; 4947 : 		return a.m_iScore < b.m_iScore;

	mov	eax, DWORD PTR _a$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _b$[esp-4]
	xor	eax, eax
	cmp	ecx, DWORD PTR [edx+4]
	setl	al

; 4948 : 	}

	ret	8
??RScoreCityEntryLowEval@@QBE_NABUScoreCityEntry@@0@Z ENDP ; ScoreCityEntryLowEval::operator()
_TEXT	ENDS
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 786  : 		}

	ret	4
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@H$0A@@@QAEAAHI@Z		; BaseVector<int,0>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@H$0A@@@QAEAAHI@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@H$0A@@@QAEAAHI@Z PROC			; BaseVector<int,0>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 131  : 	};

	ret	4
??A?$BaseVector@H$0A@@@QAEAAHI@Z ENDP			; BaseVector<int,0>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@H$0A@@@QBEABHI@Z		; BaseVector<int,0>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@H$0A@@@QBEABHI@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@H$0A@@@QBEABHI@Z PROC			; BaseVector<int,0>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 137  : 	};

	ret	4
??A?$BaseVector@H$0A@@@QBEABHI@Z ENDP			; BaseVector<int,0>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@H$0A@@@QBEIXZ		; BaseVector<int,0>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@H$0A@@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@H$0A@@@QBEIXZ PROC			; BaseVector<int,0>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@H$0A@@@QBEIXZ ENDP			; BaseVector<int,0>::size
_TEXT	ENDS
PUBLIC	??A?$BaseVector@VCvEspionageSpy@@$0A@@@QAEAAVCvEspionageSpy@@I@Z ; BaseVector<CvEspionageSpy,0>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@VCvEspionageSpy@@$0A@@@QAEAAVCvEspionageSpy@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@VCvEspionageSpy@@$0A@@@QAEAAVCvEspionageSpy@@I@Z PROC ; BaseVector<CvEspionageSpy,0>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]

; 131  : 	};

	ret	4
??A?$BaseVector@VCvEspionageSpy@@$0A@@@QAEAAVCvEspionageSpy@@I@Z ENDP ; BaseVector<CvEspionageSpy,0>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@VCvEspionageSpy@@$0A@@@QBEABVCvEspionageSpy@@I@Z ; BaseVector<CvEspionageSpy,0>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@VCvEspionageSpy@@$0A@@@QBEABVCvEspionageSpy@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@VCvEspionageSpy@@$0A@@@QBEABVCvEspionageSpy@@I@Z PROC ; BaseVector<CvEspionageSpy,0>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]

; 137  : 	};

	ret	4
??A?$BaseVector@VCvEspionageSpy@@$0A@@@QBEABVCvEspionageSpy@@I@Z ENDP ; BaseVector<CvEspionageSpy,0>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@VCvEspionageSpy@@$0A@@@QBEIXZ ; BaseVector<CvEspionageSpy,0>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@VCvEspionageSpy@@$0A@@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@VCvEspionageSpy@@$0A@@@QBEIXZ PROC	; BaseVector<CvEspionageSpy,0>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@VCvEspionageSpy@@$0A@@@QBEIXZ ENDP	; BaseVector<CvEspionageSpy,0>::size
_TEXT	ENDS
PUBLIC	??A?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEAAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEAAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEAAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]

; 131  : 	};

	ret	4
??A?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEAAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QBEABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QBEABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QBEABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]

; 137  : 	};

	ret	4
??A?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QBEABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QBEIXZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QBEIXZ PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QBEIXZ ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::size
_TEXT	ENDS
PUBLIC	??A?$BaseVector@W4TechTypes@@$0A@@@QAEAAW4TechTypes@@I@Z ; BaseVector<enum TechTypes,0>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@W4TechTypes@@$0A@@@QAEAAW4TechTypes@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@W4TechTypes@@$0A@@@QAEAAW4TechTypes@@I@Z PROC ; BaseVector<enum TechTypes,0>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 131  : 	};

	ret	4
??A?$BaseVector@W4TechTypes@@$0A@@@QAEAAW4TechTypes@@I@Z ENDP ; BaseVector<enum TechTypes,0>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@W4TechTypes@@$0A@@@QBEABW4TechTypes@@I@Z ; BaseVector<enum TechTypes,0>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@W4TechTypes@@$0A@@@QBEABW4TechTypes@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@W4TechTypes@@$0A@@@QBEABW4TechTypes@@I@Z PROC ; BaseVector<enum TechTypes,0>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 137  : 	};

	ret	4
??A?$BaseVector@W4TechTypes@@$0A@@@QBEABW4TechTypes@@I@Z ENDP ; BaseVector<enum TechTypes,0>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@W4TechTypes@@$0A@@@QBEIXZ	; BaseVector<enum TechTypes,0>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@W4TechTypes@@$0A@@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@W4TechTypes@@$0A@@@QBEIXZ PROC	; BaseVector<enum TechTypes,0>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@W4TechTypes@@$0A@@@QBEIXZ ENDP	; BaseVector<enum TechTypes,0>::size
_TEXT	ENDS
PUBLIC	??A?$Array@H$0BG@@Firaxis@@QBEABHI@Z		; Firaxis::Array<int,22>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\farray.h
;	COMDAT ??A?$Array@H$0BG@@Firaxis@@QBEABHI@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$Array@H$0BG@@Firaxis@@QBEABHI@Z PROC		; Firaxis::Array<int,22>::operator[], COMDAT
; _this$ = ecx

; 144  : #		ifdef _MSC_VER
; 145  : #			pragma warning ( push )
; 146  : #			pragma warning ( disable : 6385 ) //  Invalid data: accessing 'm_akItems' the readable size is X but X+N bytes might be read
; 147  : 			// sad day. 
; 148  : #		endif//_MSC_VER
; 149  : 		    assert( i < ARRAY_SIZE );
; 150  : 		    return ( m_akItems[ i ] );

	mov	eax, DWORD PTR _i$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]

; 151  : #		ifdef _MSC_VER
; 152  : #		pragma warning ( pop )
; 153  : #		endif//_MSC_VER
; 154  : 	    }

	ret	4
??A?$Array@H$0BG@@Firaxis@@QBEABHI@Z ENDP		; Firaxis::Array<int,22>::operator[]
_TEXT	ENDS
PUBLIC	??A?$Array@H$0BG@@Firaxis@@QAEAAHI@Z		; Firaxis::Array<int,22>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$Array@H$0BG@@Firaxis@@QAEAAHI@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$Array@H$0BG@@Firaxis@@QAEAAHI@Z PROC		; Firaxis::Array<int,22>::operator[], COMDAT
; _this$ = ecx

; 157  : #		ifdef _MSC_VER
; 158  : #			pragma warning ( push )
; 159  : #			pragma warning ( disable : 6385 ) //  Invalid data: accessing 'm_akItems' the readable size is X but X+N bytes might be read
; 160  : 			// sad day. 
; 161  : #		endif//_MSC_VER
; 162  : 		    assert( i < ARRAY_SIZE );
; 163  : 		    return ( m_akItems[ i ] );

	mov	eax, DWORD PTR _i$[esp-4]
	lea	eax, DWORD PTR [ecx+eax*4]

; 164  : #		ifdef _MSC_VER
; 165  : #		pragma warning ( pop )
; 166  : #		endif//_MSC_VER
; 167  : 		}

	ret	4
??A?$Array@H$0BG@@Firaxis@@QAEAAHI@Z ENDP		; Firaxis::Array<int,22>::operator[]
_TEXT	ENDS
PUBLIC	??A?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QBEABV?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@I@Z ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QBEABV?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@I@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QBEABV?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@I@Z PROC ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::operator[], COMDAT
; _this$ = ecx

; 144  : #		ifdef _MSC_VER
; 145  : #			pragma warning ( push )
; 146  : #			pragma warning ( disable : 6385 ) //  Invalid data: accessing 'm_akItems' the readable size is X but X+N bytes might be read
; 147  : 			// sad day. 
; 148  : #		endif//_MSC_VER
; 149  : 		    assert( i < ARRAY_SIZE );
; 150  : 		    return ( m_akItems[ i ] );

	mov	eax, DWORD PTR _i$[esp-4]
	shl	eax, 4
	add	eax, ecx

; 151  : #		ifdef _MSC_VER
; 152  : #		pragma warning ( pop )
; 153  : #		endif//_MSC_VER
; 154  : 	    }

	ret	4
??A?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QBEABV?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@I@Z ENDP ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::operator[]
_TEXT	ENDS
PUBLIC	??A?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAEAAV?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@I@Z ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAEAAV?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@I@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??A?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAEAAV?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@I@Z PROC ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::operator[], COMDAT
; _this$ = ecx

; 157  : #		ifdef _MSC_VER
; 158  : #			pragma warning ( push )
; 159  : #			pragma warning ( disable : 6385 ) //  Invalid data: accessing 'm_akItems' the readable size is X but X+N bytes might be read
; 160  : 			// sad day. 
; 161  : #		endif//_MSC_VER
; 162  : 		    assert( i < ARRAY_SIZE );
; 163  : 		    return ( m_akItems[ i ] );

	mov	eax, DWORD PTR _i$[esp-4]
	shl	eax, 4
	add	eax, ecx

; 164  : #		ifdef _MSC_VER
; 165  : #		pragma warning ( pop )
; 166  : #		endif//_MSC_VER
; 167  : 		}

	ret	4
??A?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAEAAV?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@I@Z ENDP ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 3

; 727  : 		}

	ret	0
?size@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEABUHeistLocation@@I@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEABUHeistLocation@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEABUHeistLocation@@I@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 771  : 		}

	ret	4
??A?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEABUHeistLocation@@I@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAUHeistLocation@@I@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAUHeistLocation@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAUHeistLocation@@I@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::operator[], COMDAT
; _this$ = ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 786  : 		}

	ret	4
??A?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAUHeistLocation@@I@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 727  : 		}

	ret	0
?size@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEABUSpyNotificationMessage@@I@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEABUSpyNotificationMessage@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEABUSpyNotificationMessage@@I@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]

; 771  : 		}

	ret	4
??A?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEABUSpyNotificationMessage@@I@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAUSpyNotificationMessage@@I@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAUSpyNotificationMessage@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAUSpyNotificationMessage@@I@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator[], COMDAT
; _this$ = ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[esp-4]
	mov	ecx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]

; 786  : 		}

	ret	4
??A?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAUSpyNotificationMessage@@I@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, 2021161081				; 78787879H
	imul	edx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 727  : 		}

	ret	0
?size@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEABUIntrigueNotificationMessage@@I@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEABUIntrigueNotificationMessage@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEABUIntrigueNotificationMessage@@I@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[esp-4]
	mov	edx, eax
	shl	edx, 4
	add	edx, eax
	mov	eax, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+edx*4]

; 771  : 		}

	ret	4
??A?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEABUIntrigueNotificationMessage@@I@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAUIntrigueNotificationMessage@@I@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAUIntrigueNotificationMessage@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAUIntrigueNotificationMessage@@I@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator[], COMDAT
; _this$ = ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR __Pos$[esp-4]
	mov	edx, eax
	shl	edx, 4
	add	edx, eax
	mov	eax, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+edx*4]

; 786  : 		}

	ret	4
??A?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAUIntrigueNotificationMessage@@I@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 727  : 		}

	ret	0
?size@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAPAVCvCity@@I@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAPAVCvCity@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAPAVCvCity@@I@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::operator[], COMDAT
; _this$ = ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 786  : 		}

	ret	4
??A?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAPAVCvCity@@I@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::operator[]
_TEXT	ENDS
PUBLIC	?size@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 3

; 727  : 		}

	ret	0
?size@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAUScoreCityEntry@@I@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAUScoreCityEntry@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAUScoreCityEntry@@I@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator[], COMDAT
; _this$ = ecx

; 775  : 
; 776  :  #if _HAS_ITERATOR_DEBUGGING
; 777  : 		if (size() <= _Pos)
; 778  : 			{
; 779  : 			_DEBUG_ERROR("vector subscript out of range");
; 780  : 			_SCL_SECURE_OUT_OF_RANGE;
; 781  : 			}
; 782  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 783  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 784  : 
; 785  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 786  : 		}

	ret	4
??A?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAUScoreCityEntry@@I@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$BaseVector@H$0A@@@QAE@XZ			; BaseVector<int,0>::~BaseVector<int,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$BaseVector@H$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@H$0A@@@QAE@XZ PROC			; BaseVector<int,0>::~BaseVector<int,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@H$0A@@@QAE@XZ ENDP			; BaseVector<int,0>::~BaseVector<int,0>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@H$0A@@@IAE@XZ			; BaseVector<int,0>::BaseVector<int,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@H$0A@@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@H$0A@@@IAE@XZ PROC			; BaseVector<int,0>::BaseVector<int,0>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@H$0A@@@IAE@XZ ENDP			; BaseVector<int,0>::BaseVector<int,0>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z		; BaseVector<int,0>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z PROC		; BaseVector<int,0>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@H$0A@@@IAEXPAHI@Z ENDP		; BaseVector<int,0>::Destroy
_TEXT	ENDS
PUBLIC	??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEPAVCvEspionageSpy@@I@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
CONST	SEGMENT
??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@ DB 'c:\users\eno'
	DB	'rmousapplepie\desktop\lekmod files\lekmod dll versions\v29\le'
	DB	'kmod_dll\fireplace\include\fireworks\FFastVector.h', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEPAVCvEspionageSpy@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEPAVCvEspionageSpy@@I@Z PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 8
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	lea	eax, DWORD PTR [edi*8]
	sub	eax, edi
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	add	eax, eax
	add	eax, eax
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 8
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEPAVCvEspionageSpy@@I@Z ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ	; BaseVector<CvEspionageSpy,0>::~BaseVector<CvEspionageSpy,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ PROC	; BaseVector<CvEspionageSpy,0>::~BaseVector<CvEspionageSpy,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@VCvEspionageSpy@@$0A@@@QAE@XZ ENDP	; BaseVector<CvEspionageSpy,0>::~BaseVector<CvEspionageSpy,0>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@VCvEspionageSpy@@$0A@@@IAE@XZ	; BaseVector<CvEspionageSpy,0>::BaseVector<CvEspionageSpy,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@VCvEspionageSpy@@$0A@@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@VCvEspionageSpy@@$0A@@@IAE@XZ PROC	; BaseVector<CvEspionageSpy,0>::BaseVector<CvEspionageSpy,0>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@VCvEspionageSpy@@$0A@@@IAE@XZ ENDP	; BaseVector<CvEspionageSpy,0>::BaseVector<CvEspionageSpy,0>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@VCvEspionageSpy@@$0A@@@IAEXPAVCvEspionageSpy@@I@Z ; BaseVector<CvEspionageSpy,0>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@VCvEspionageSpy@@$0A@@@IAEXPAVCvEspionageSpy@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@VCvEspionageSpy@@$0A@@@IAEXPAVCvEspionageSpy@@I@Z PROC ; BaseVector<CvEspionageSpy,0>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@VCvEspionageSpy@@$0A@@@IAEXPAVCvEspionageSpy@@I@Z ENDP ; BaseVector<CvEspionageSpy,0>::Destroy
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Alloc
; Function compile flags: /Ogtpy
;	COMDAT ?Alloc@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 22					; 00000016H
	jbe	SHORT $LN2@Alloc@2

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	lea	eax, DWORD PTR [edi+edi*4]
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	add	eax, eax
	add	eax, eax
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@2:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 22			; 00000016H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAE@XZ ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::~BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAE@XZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAE@XZ PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAE@XZ ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEPAW4TechTypes@@I@Z ; FStaticVector<enum TechTypes,1,0,297,0>::Alloc
; Function compile flags: /Ogtpy
;	COMDAT ?Alloc@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEPAW4TechTypes@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEPAW4TechTypes@@I@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 1
	jbe	SHORT $LN2@Alloc@3

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@3:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 1
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEPAW4TechTypes@@I@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ	; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ PROC		; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@W4TechTypes@@$0A@@@QAE@XZ ENDP		; BaseVector<enum TechTypes,0>::~BaseVector<enum TechTypes,0>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@W4TechTypes@@$0A@@@IAE@XZ	; BaseVector<enum TechTypes,0>::BaseVector<enum TechTypes,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@W4TechTypes@@$0A@@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@W4TechTypes@@$0A@@@IAE@XZ PROC		; BaseVector<enum TechTypes,0>::BaseVector<enum TechTypes,0>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@W4TechTypes@@$0A@@@IAE@XZ ENDP		; BaseVector<enum TechTypes,0>::BaseVector<enum TechTypes,0>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@W4TechTypes@@$0A@@@IAEXPAW4TechTypes@@I@Z ; BaseVector<enum TechTypes,0>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@W4TechTypes@@$0A@@@IAEXPAW4TechTypes@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@W4TechTypes@@$0A@@@IAEXPAW4TechTypes@@I@Z PROC ; BaseVector<enum TechTypes,0>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@W4TechTypes@@$0A@@@IAEXPAW4TechTypes@@I@Z ENDP ; BaseVector<enum TechTypes,0>::Destroy
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEPAHI@Z ; FStaticVector<int,22,0,297,0>::Alloc
; Function compile flags: /Ogtpy
;	COMDAT ?Alloc@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEPAHI@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEPAHI@Z PROC ; FStaticVector<int,22,0,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 22					; 00000016H
	jbe	SHORT $LN2@Alloc@4

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@4:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 22			; 00000016H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEPAHI@Z ENDP ; FStaticVector<int,22,0,297,0>::Alloc
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXPAHI@Z ; FStaticVector<int,22,0,297,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXPAHI@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXPAHI@Z PROC ; FStaticVector<int,22,0,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXPAHI@Z ENDP ; FStaticVector<int,22,0,297,0>::Free
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN3@capacity
	xor	eax, eax

; 636  : 		}

	ret	0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+12]
	sub	eax, edx
	sar	eax, 3

; 636  : 		}

	ret	0
?capacity@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::capacity
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??BCvString@@QBEPBDXZ				; CvString::operator char const *
; Function compile flags: /Ogtpy
;	COMDAT ??BCvString@@QBEPBDXZ
_TEXT	SEGMENT
??BCvString@@QBEPBDXZ PROC				; CvString::operator char const *, COMDAT
; _this$ = ecx

; 31   : 	operator const char*() const 	{ return c_str(); }												

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
??BCvString@@QBEPBDXZ ENDP				; CvString::operator char const *
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@PBD@Z			; CvString::operator=
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@PBD@Z PROC				; CvString::operator=, COMDAT
; _this$ = ecx

; 37   : 	CvString& operator=( const char* s) { if (s) assign(s); else clear();	return *this; }	

	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, ecx
	test	eax, eax
	je	SHORT $LN2@operator
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
$LN2@operator:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@PBD@Z ENDP				; CvString::operator=
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CvString::operator=, COMDAT
; _this$ = ecx

; 38   : 	CvString& operator=( const std::string& s) { assign(s.c_str());	return *this; }	

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _s$[esp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CvString::operator=
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@UHeistLocation@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >::~_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@UHeistLocation@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@UHeistLocation@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >::~_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@UHeistLocation@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >::~_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UHeistLocation@@@std@@QAE@XZ	; std::allocator<HeistLocation>::allocator<HeistLocation>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UHeistLocation@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UHeistLocation@@@std@@QAE@XZ PROC	; std::allocator<HeistLocation>::allocator<HeistLocation>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@UHeistLocation@@@std@@QAE@XZ ENDP	; std::allocator<HeistLocation>::allocator<HeistLocation>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	jne	SHORT $LN3@capacity@2

; 636  : 		}

	ret	0
$LN3@capacity@2:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	ecx, DWORD PTR [ecx+12]
	sub	ecx, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 636  : 		}

	ret	0
?capacity@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::capacity
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
_buf$ = -2048						; size = 2048
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	sub	esp, 2048				; 00000800H
	push	ebx
	push	ebp

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	mov	ebp, DWORD PTR _args$[esp+2052]
	push	esi
	push	edi
	lea	edi, DWORD PTR _buf$[esp+2064]
	mov	esi, 2047				; 000007ffH
	npad	6
$LL10@formatv:

; 194  : 	int len = 0;
; 195  : 	int attempts = 0;
; 196  : 	bool success = false;
; 197  : 	const int kMaxAttempts = 40;
; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;
; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	eax, DWORD PTR _fmt$[esp+2060]
	push	ebp
	push	eax
	push	esi
	push	edi
	mov	ebx, esi
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H

; 203  : 		attempts++;

	add	esi, 2048				; 00000800H

; 204  : 		success = (len>=0 && len<=maxlen);

	test	eax, eax
	jl	SHORT $LN13@formatv
	cmp	eax, ebx
	jle	SHORT $LN18@formatv
$LN13@formatv:

; 205  : 		if (!success)
; 206  : 		{
; 207  : 			if (pbuf!=buf)

	lea	ecx, DWORD PTR _buf$[esp+2064]
	xor	bl, bl
	cmp	edi, ecx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	lea	edx, DWORD PTR [esi+1]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	cmp	esi, 83967				; 000147ffH
	mov	edi, eax
	jl	SHORT $LL10@formatv

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@formatv:
	mov	ecx, DWORD PTR _out$[esp+2064]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 223  : 
; 224  : 	if (pbuf!=buf)

	lea	eax, DWORD PTR _buf$[esp+2064]
	cmp	edi, eax
	je	SHORT $LN20@formatv

; 225  : 		delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN20@formatv:
	pop	edi
	pop	esi
	pop	ebp

; 226  : 
; 227  : 	return success;

	mov	al, bl
	pop	ebx

; 228  : }

	add	esp, 2048				; 00000800H
	ret	0
$LN18@formatv:

; 204  : 		success = (len>=0 && len<=maxlen);

	mov	bl, 1

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)
; 220  : 		out = pbuf;

	push	edi

; 221  : 	else

	jmp	SHORT $LN21@formatv
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >::~_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >::~_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >::~_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$allocator@USpyNotificationMessage@@@std@@QAE@XZ ; std::allocator<SpyNotificationMessage>::allocator<SpyNotificationMessage>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USpyNotificationMessage@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USpyNotificationMessage@@@std@@QAE@XZ PROC ; std::allocator<SpyNotificationMessage>::allocator<SpyNotificationMessage>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@USpyNotificationMessage@@@std@@QAE@XZ ENDP ; std::allocator<SpyNotificationMessage>::allocator<SpyNotificationMessage>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	jne	SHORT $LN3@capacity@3

; 636  : 		}

	ret	0
$LN3@capacity@3:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	ecx, DWORD PTR [ecx+12]
	sub	ecx, eax
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 636  : 		}

	ret	0
?capacity@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::capacity
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);
; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _lpszFormat$[esp+36]
	lea	eax, DWORD PTR _lpszFormat$[esp+40]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _result$[esp+48]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+60], 0
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);
; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR _this$[esp+36]
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	lea	ecx, DWORD PTR _result$[esp+40]
	mov	DWORD PTR __$EHRec$[esp+48], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >::~_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >::~_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >::~_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UIntrigueNotificationMessage@@@std@@QAE@XZ ; std::allocator<IntrigueNotificationMessage>::allocator<IntrigueNotificationMessage>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UIntrigueNotificationMessage@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UIntrigueNotificationMessage@@@std@@QAE@XZ PROC ; std::allocator<IntrigueNotificationMessage>::allocator<IntrigueNotificationMessage>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@UIntrigueNotificationMessage@@@std@@QAE@XZ ENDP ; std::allocator<IntrigueNotificationMessage>::allocator<IntrigueNotificationMessage>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEABUIntrigueNotificationMessage@@XZ ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEABUIntrigueNotificationMessage@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEABUIntrigueNotificationMessage@@XZ PROC ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator*, COMDAT
; _this$ = ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());
; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR [ecx]

; 107  : 		}

	ret	0
??D?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEABUIntrigueNotificationMessage@@XZ ENDP ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

	mov	eax, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

	add	DWORD PTR [eax], 68			; 00000044H

; 126  : 		return (*this);
; 127  : 		}

	ret	0
??E?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator++
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator==, COMDAT
; _this$ = ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator==
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::capacity
; Function compile flags: /Ogtpy
;	COMDAT ?capacity@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN3@capacity@4
	xor	eax, eax

; 636  : 		}

	ret	0
$LN3@capacity@4:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+12]
	sub	eax, edx
	sar	eax, 2

; 636  : 		}

	ret	0
?capacity@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::capacity
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCity@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >::~_Container_base_aux_alloc_empty<std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCity@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCity@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >::~_Container_base_aux_alloc_empty<std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCity@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >::~_Container_base_aux_alloc_empty<std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCvCity@@@std@@QAE@XZ		; std::allocator<CvCity *>::allocator<CvCity *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVCvCity@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCvCity@@@std@@QAE@XZ PROC		; std::allocator<CvCity *>::allocator<CvCity *>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@PAVCvCity@@@std@@QAE@XZ ENDP		; std::allocator<CvCity *>::allocator<CvCity *>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN3@capacity@5
	xor	eax, eax

; 636  : 		}

	ret	0
$LN3@capacity@5:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+12]
	sub	eax, edx
	sar	eax, 3

; 636  : 		}

	ret	0
?capacity@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::capacity
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >::~_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >::~_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >::~_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UScoreCityEntry@@@std@@QAE@XZ	; std::allocator<ScoreCityEntry>::allocator<ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UScoreCityEntry@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UScoreCityEntry@@@std@@QAE@XZ PROC	; std::allocator<ScoreCityEntry>::allocator<ScoreCityEntry>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@UScoreCityEntry@@@std@@QAE@XZ ENDP	; std::allocator<ScoreCityEntry>::allocator<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z ; BaseVector<enum TechTypes,0>::Copy
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z
_TEXT	SEGMENT
_RHS$ = 8						; size = 4
?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z PROC	; BaseVector<enum TechTypes,0>::Copy, COMDAT
; _this$ = ecx

; 229  : 	void Copy(const THIS_TYPE& RHS){

	push	esi
	push	edi

; 230  : 		m_uiCurrSize = RHS.m_uiCurrSize;

	mov	edi, DWORD PTR _RHS$[esp+4]
	mov	eax, DWORD PTR [edi+4]

; 231  : 		if( bPODType ){
; 232  : 			memcpy( (void*)m_pData, (void*)RHS.m_pData, sizeof(T)*RHS.m_uiCurrSize);
; 233  : 		}else{
; 234  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i){

	xor	esi, esi
	mov	DWORD PTR [ecx+4], eax
	test	eax, eax
	jbe	SHORT $LN1@Copy
	push	ebx
$LL3@Copy:
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [esi*4]
	add	eax, edx

; 235  : 				new( (void*)&m_pData[i] )T( RHS.m_pData[i] );

	je	SHORT $LN2@Copy
	mov	ebx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+ebx]
	mov	DWORD PTR [eax], edx
$LN2@Copy:
	inc	esi
	cmp	esi, DWORD PTR [ecx+4]
	jb	SHORT $LL3@Copy
	pop	ebx
$LN1@Copy:
	pop	edi
	pop	esi

; 236  : 			}
; 237  : 		}
; 238  : 	};

	ret	4
?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z ENDP	; BaseVector<enum TechTypes,0>::Copy
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T233254 = -80						; size = 28
$T233253 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233254[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T233253[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T233254[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T233253[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T233253[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233253[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T233253[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN13@Xlen:
$LN12@Xlen:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T233254[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T233253[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+20]
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	add	edi, 12					; 0000000cH
	push	edi
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[esp+36], 0
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@UHeistLocation@@@std@@@std@@IAE@V?$allocator@UHeistLocation@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@UHeistLocation@@@std@@@std@@IAE@V?$allocator@UHeistLocation@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@UHeistLocation@@@std@@@std@@IAE@V?$allocator@UHeistLocation@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@UHeistLocation@@@std@@@std@@IAE@V?$allocator@UHeistLocation@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >::_Container_base_aux_alloc_empty<std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UHeistLocation@@@std@@QAE@ABV01@@Z ; std::allocator<HeistLocation>::allocator<HeistLocation>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UHeistLocation@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UHeistLocation@@@std@@QAE@ABV01@@Z PROC	; std::allocator<HeistLocation>::allocator<HeistLocation>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@UHeistLocation@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<HeistLocation>::allocator<HeistLocation>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@I@Z ; std::allocator<HeistLocation>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@I@Z PROC ; std::allocator<HeistLocation>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@I@Z ENDP ; std::allocator<HeistLocation>::deallocate
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T233300 = -80						; size = 28
$T233299 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233300[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T233299[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T233300[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T233299[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T233299[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233299[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T233299[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN13@Xlen@2:
$LN12@Xlen@2:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T233300[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T233299[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@V?$allocator@USpyNotificationMessage@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@V?$allocator@USpyNotificationMessage@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@V?$allocator@USpyNotificationMessage@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@V?$allocator@USpyNotificationMessage@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >::_Container_base_aux_alloc_empty<std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$allocator@USpyNotificationMessage@@@std@@QAE@ABV01@@Z ; std::allocator<SpyNotificationMessage>::allocator<SpyNotificationMessage>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@USpyNotificationMessage@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@USpyNotificationMessage@@@std@@QAE@ABV01@@Z PROC ; std::allocator<SpyNotificationMessage>::allocator<SpyNotificationMessage>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@USpyNotificationMessage@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<SpyNotificationMessage>::allocator<SpyNotificationMessage>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@I@Z ; std::allocator<SpyNotificationMessage>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@I@Z PROC ; std::allocator<SpyNotificationMessage>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@I@Z ENDP ; std::allocator<SpyNotificationMessage>::deallocate
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T233334 = -80						; size = 28
$T233333 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233334[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T233333[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T233334[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T233333[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T233333[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233333[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T233333[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN13@Xlen@3:
$LN12@Xlen@3:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T233334[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T233333[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@V?$allocator@UIntrigueNotificationMessage@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@V?$allocator@UIntrigueNotificationMessage@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@V?$allocator@UIntrigueNotificationMessage@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@V?$allocator@UIntrigueNotificationMessage@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >::_Container_base_aux_alloc_empty<std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UIntrigueNotificationMessage@@@std@@QAE@ABV01@@Z ; std::allocator<IntrigueNotificationMessage>::allocator<IntrigueNotificationMessage>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UIntrigueNotificationMessage@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UIntrigueNotificationMessage@@@std@@QAE@ABV01@@Z PROC ; std::allocator<IntrigueNotificationMessage>::allocator<IntrigueNotificationMessage>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@UIntrigueNotificationMessage@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<IntrigueNotificationMessage>::allocator<IntrigueNotificationMessage>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@I@Z ; std::allocator<IntrigueNotificationMessage>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@I@Z PROC ; std::allocator<IntrigueNotificationMessage>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@I@Z ENDP ; std::allocator<IntrigueNotificationMessage>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@PAUIntrigueNotificationMessage@@@Z ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@PAUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@PAUIntrigueNotificationMessage@@@Z PROC ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx

; 84   : 	explicit _Vector_const_iterator(_Tptr _Ptr)

	mov	eax, ecx

; 85   : 		{	// construct with pointer _Ptr
; 86   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 87   : 		}

	ret	4
??0?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@PAUIntrigueNotificationMessage@@@Z ENDP ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator-, COMDAT
; _this$ = ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 195  : 		}

	ret	4
??G?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator-
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T233374 = -80						; size = 28
$T233373 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233374[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T233373[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T233374[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T233373[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T233373[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233373[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T233373[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN13@Xlen@4:
$LN12@Xlen@4:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T233374[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T233373[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCity@@@std@@@std@@IAE@V?$allocator@PAVCvCity@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCity@@@std@@@std@@IAE@V?$allocator@PAVCvCity@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCity@@@std@@@std@@IAE@V?$allocator@PAVCvCity@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@PAVCvCity@@@std@@@std@@IAE@V?$allocator@PAVCvCity@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >::_Container_base_aux_alloc_empty<std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCvCity@@@std@@QAE@ABV01@@Z	; std::allocator<CvCity *>::allocator<CvCity *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVCvCity@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVCvCity@@@std@@QAE@ABV01@@Z PROC	; std::allocator<CvCity *>::allocator<CvCity *>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@PAVCvCity@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<CvCity *>::allocator<CvCity *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCvCity@@@std@@QAEXPAPAVCvCity@@I@Z ; std::allocator<CvCity *>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@PAVCvCity@@@std@@QAEXPAPAVCvCity@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCvCity@@@std@@QAEXPAPAVCvCity@@I@Z PROC ; std::allocator<CvCity *>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@PAVCvCity@@@std@@QAEXPAPAVCvCity@@I@Z ENDP ; std::allocator<CvCity *>::deallocate
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T233408 = -80						; size = 28
$T233407 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233408[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T233407[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T233408[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T233407[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T233407[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233407[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T233407[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN13@Xlen@5:
$LN12@Xlen@5:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T233408[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T233407[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@V?$allocator@UScoreCityEntry@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@V?$allocator@UScoreCityEntry@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@V?$allocator@UScoreCityEntry@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@V?$allocator@UScoreCityEntry@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >::_Container_base_aux_alloc_empty<std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UScoreCityEntry@@@std@@QAE@ABV01@@Z ; std::allocator<ScoreCityEntry>::allocator<ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UScoreCityEntry@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UScoreCityEntry@@@std@@QAE@ABV01@@Z PROC	; std::allocator<ScoreCityEntry>::allocator<ScoreCityEntry>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@UScoreCityEntry@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<ScoreCityEntry>::allocator<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@I@Z ; std::allocator<ScoreCityEntry>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@I@Z PROC ; std::allocator<ScoreCityEntry>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@I@Z ENDP ; std::allocator<ScoreCityEntry>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@PAUScoreCityEntry@@@Z ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@PAUScoreCityEntry@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@PAUScoreCityEntry@@@Z PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 84   : 	explicit _Vector_const_iterator(_Tptr _Ptr)

	mov	eax, ecx

; 85   : 		{	// construct with pointer _Ptr
; 86   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 87   : 		}

	ret	4
??0?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@PAUScoreCityEntry@@@Z ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator-, COMDAT
; _this$ = ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[esp-4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3

; 195  : 		}

	ret	4
??G?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator-
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator-, COMDAT
; _this$ = ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[esp-4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3

; 195  : 		}

	ret	4
??G?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator-
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator-, COMDAT
; _this$ = ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [eax]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 195  : 		}

	ret	4
??G?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator-
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator-, COMDAT
; _this$ = ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[esp-4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 195  : 		}

	ret	4
??G?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator-
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UHeistLocation@@@std@@QBEIXZ ; std::allocator<HeistLocation>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@UHeistLocation@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UHeistLocation@@@std@@QBEIXZ PROC	; std::allocator<HeistLocation>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 536870911				; 1fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@UHeistLocation@@@std@@QBEIXZ ENDP	; std::allocator<HeistLocation>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@USpyNotificationMessage@@@std@@QBEIXZ ; std::allocator<SpyNotificationMessage>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@USpyNotificationMessage@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@USpyNotificationMessage@@@std@@QBEIXZ PROC ; std::allocator<SpyNotificationMessage>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 214748364				; 0cccccccH

; 167  : 		}

	ret	0
?max_size@?$allocator@USpyNotificationMessage@@@std@@QBEIXZ ENDP ; std::allocator<SpyNotificationMessage>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UIntrigueNotificationMessage@@@std@@QBEIXZ ; std::allocator<IntrigueNotificationMessage>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@UIntrigueNotificationMessage@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UIntrigueNotificationMessage@@@std@@QBEIXZ PROC ; std::allocator<IntrigueNotificationMessage>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 63161283				; 03c3c3c3H

; 167  : 		}

	ret	0
?max_size@?$allocator@UIntrigueNotificationMessage@@@std@@QBEIXZ ENDP ; std::allocator<IntrigueNotificationMessage>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVCvCity@@@std@@QBEIXZ	; std::allocator<CvCity *>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@PAVCvCity@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCvCity@@@std@@QBEIXZ PROC	; std::allocator<CvCity *>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 1073741823				; 3fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@PAVCvCity@@@std@@QBEIXZ ENDP	; std::allocator<CvCity *>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UScoreCityEntry@@@std@@QBEIXZ ; std::allocator<ScoreCityEntry>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@UScoreCityEntry@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UScoreCityEntry@@@std@@QBEIXZ PROC ; std::allocator<ScoreCityEntry>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 536870911				; 1fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@UScoreCityEntry@@@std@@QBEIXZ ENDP ; std::allocator<ScoreCityEntry>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@PAUHeistLocation@@@Z ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@PAUHeistLocation@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@PAUHeistLocation@@@Z PROC ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 84   : 	explicit _Vector_const_iterator(_Tptr _Ptr)

	mov	eax, ecx

; 85   : 		{	// construct with pointer _Ptr
; 86   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 87   : 		}

	ret	4
??0?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@PAUHeistLocation@@@Z ENDP ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator==, COMDAT
; _this$ = ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@PAUSpyNotificationMessage@@@Z ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@PAUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@PAUSpyNotificationMessage@@@Z PROC ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx

; 84   : 	explicit _Vector_const_iterator(_Tptr _Ptr)

	mov	eax, ecx

; 85   : 		{	// construct with pointer _Ptr
; 86   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 87   : 		}

	ret	4
??0?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@PAUSpyNotificationMessage@@@Z ENDP ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator==, COMDAT
; _this$ = ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator==
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@PAPAVCvCity@@@Z ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@PAPAVCvCity@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@PAPAVCvCity@@@Z PROC ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 84   : 	explicit _Vector_const_iterator(_Tptr _Ptr)

	mov	eax, ecx

; 85   : 		{	// construct with pointer _Ptr
; 86   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 87   : 		}

	ret	4
??0?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@PAPAVCvCity@@@Z ENDP ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator==, COMDAT
; _this$ = ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator==
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	mov	eax, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 161  : 		_SCL_SECURE_VALIDATE_RANGE(
; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);
; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	mov	edx, ecx
	shl	edx, 4
	add	edx, ecx
	add	edx, edx
	add	edx, edx
	add	DWORD PTR [eax], edx

; 165  : 		return (*this);
; 166  : 		}

	ret	4
??Y?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	mov	eax, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 161  : 		_SCL_SECURE_VALIDATE_RANGE(
; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);
; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*8]
	add	DWORD PTR [eax], edx

; 165  : 		return (*this);
; 166  : 		}

	ret	4
??Y?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	mov	eax, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 161  : 		_SCL_SECURE_VALIDATE_RANGE(
; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);
; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*8]
	add	DWORD PTR [eax], edx

; 165  : 		return (*this);
; 166  : 		}

	ret	4
??Y?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	mov	eax, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 161  : 		_SCL_SECURE_VALIDATE_RANGE(
; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);
; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	add	ecx, ecx
	add	ecx, ecx
	add	DWORD PTR [eax], ecx

; 165  : 		return (*this);
; 166  : 		}

	ret	4
??Y?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	mov	eax, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 161  : 		_SCL_SECURE_VALIDATE_RANGE(
; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);
; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*4]
	add	DWORD PTR [eax], edx

; 165  : 		return (*this);
; 166  : 		}

	ret	4
??Y?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator+=
_TEXT	ENDS
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 3384 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN4@max
	mov	eax, ecx
$LN4@max:

; 3385 : 	}

	ret	0
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
PUBLIC	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBD@Z:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvlocalization\include\cvlocalization.h
;	COMDAT ??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z PROC	; operator<<<char const *>, COMDAT

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR _s$[esp]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 492  : 	return s;

	mov	eax, esi
	pop	esi

; 493  : }

	ret	0
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ENDP	; operator<<<char const *>
_TEXT	ENDS
PUBLIC	??$min@H@std@@YAABHABH0@Z			; std::min<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$min@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YAABHABH0@Z PROC				; std::min<int>, COMDAT

; 3399 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Left$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN4@min
	mov	eax, ecx
$LN4@min:

; 3400 : 	}

	ret	0
??$min@H@std@@YAABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ; std::_Allocate<HeistLocation>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z
_TEXT	SEGMENT
$T233529 = -12						; size = 12
$T233533 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z PROC ; std::_Allocate<HeistLocation>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx*8]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 8
	jae	SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T233533[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T233529[esp+16]
	mov	DWORD PTR $T233533[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T233529[esp+16]
	push	ecx
	mov	DWORD PTR $T233529[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate:
$LN8@Allocate:
	int	3
??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ENDP ; std::_Allocate<HeistLocation>
_TEXT	ENDS
PUBLIC	??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ; std::_Allocate<SpyNotificationMessage>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z
_TEXT	SEGMENT
$T233539 = -12						; size = 12
$T233543 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z PROC ; std::_Allocate<SpyNotificationMessage>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx+ecx*4]
	add	edx, edx
	add	edx, edx
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 20					; 00000014H
	jae	SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T233543[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T233539[esp+16]
	mov	DWORD PTR $T233543[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T233539[esp+16]
	push	ecx
	mov	DWORD PTR $T233539[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate@2:
$LN8@Allocate@2:
	int	3
??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ENDP ; std::_Allocate<SpyNotificationMessage>
_TEXT	ENDS
PUBLIC	??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ; std::_Allocate<IntrigueNotificationMessage>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z
_TEXT	SEGMENT
$T233549 = -12						; size = 12
$T233553 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z PROC ; std::_Allocate<IntrigueNotificationMessage>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, ecx
	shl	edx, 4
	add	edx, ecx
	add	edx, edx
	add	edx, edx
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 68					; 00000044H
	jae	SHORT $LN1@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T233553[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T233549[esp+16]
	mov	DWORD PTR $T233553[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T233549[esp+16]
	push	ecx
	mov	DWORD PTR $T233549[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate@3:
$LN8@Allocate@3:
	int	3
??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ENDP ; std::_Allocate<IntrigueNotificationMessage>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ; std::_Allocate<CvCity *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z
_TEXT	SEGMENT
$T233559 = -12						; size = 12
$T233563 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z PROC ; std::_Allocate<CvCity *>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx*4]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 4
	jae	SHORT $LN1@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T233563[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T233559[esp+16]
	mov	DWORD PTR $T233563[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T233559[esp+16]
	push	ecx
	mov	DWORD PTR $T233559[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate@4:
$LN8@Allocate@4:
	int	3
??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ENDP ; std::_Allocate<CvCity *>
_TEXT	ENDS
PUBLIC	??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ; std::_Allocate<ScoreCityEntry>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z
_TEXT	SEGMENT
$T233569 = -12						; size = 12
$T233573 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z PROC ; std::_Allocate<ScoreCityEntry>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx*8]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 8
	jae	SHORT $LN1@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T233573[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T233569[esp+16]
	mov	DWORD PTR $T233573[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T233569[esp+16]
	push	ecx
	mov	DWORD PTR $T233569[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate@5:
$LN8@Allocate@5:
	int	3
??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ENDP ; std::_Allocate<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator==, COMDAT
; _this$ = ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator==
_TEXT	ENDS
PUBLIC	??$_Dist_type@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ; std::_Dist_type<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Dist_type@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z PROC ; std::_Dist_type<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ENDP ; std::_Dist_type<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Val_type@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAPAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ; std::_Val_type<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAPAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAPAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z PROC ; std::_Val_type<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAPAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ENDP ; std::_Val_type<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUHeistLocation@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHeistLocation@@0@Z ; std::_Iter_random<HeistLocation *,HeistLocation *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAUHeistLocation@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHeistLocation@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUHeistLocation@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHeistLocation@@0@Z PROC ; std::_Iter_random<HeistLocation *,HeistLocation *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUHeistLocation@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUHeistLocation@@0@Z ENDP ; std::_Iter_random<HeistLocation *,HeistLocation *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUHeistLocation@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHeistLocation@@0@Z ; std::_Ptr_cat<HeistLocation *,HeistLocation *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUHeistLocation@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHeistLocation@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUHeistLocation@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHeistLocation@@0@Z PROC ; std::_Ptr_cat<HeistLocation *,HeistLocation *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUHeistLocation@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUHeistLocation@@0@Z ENDP ; std::_Ptr_cat<HeistLocation *,HeistLocation *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag>, COMDAT

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN1@Copy_opt
	push	esi
$LL3@Copy_opt:

; 2472 : 		*_Dest = *_First;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	add	ecx, 8
	add	eax, 8
	cmp	ecx, edx
	jne	SHORT $LL3@Copy_opt
	pop	esi
$LN1@Copy_opt:

; 2473 : 	return (_Dest);
; 2474 : 	}

	ret	0
??$_Copy_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUSpyNotificationMessage@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpyNotificationMessage@@0@Z ; std::_Iter_random<SpyNotificationMessage *,SpyNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAUSpyNotificationMessage@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpyNotificationMessage@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUSpyNotificationMessage@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpyNotificationMessage@@0@Z PROC ; std::_Iter_random<SpyNotificationMessage *,SpyNotificationMessage *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUSpyNotificationMessage@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSpyNotificationMessage@@0@Z ENDP ; std::_Iter_random<SpyNotificationMessage *,SpyNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUSpyNotificationMessage@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSpyNotificationMessage@@0@Z ; std::_Ptr_cat<SpyNotificationMessage *,SpyNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUSpyNotificationMessage@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSpyNotificationMessage@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUSpyNotificationMessage@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSpyNotificationMessage@@0@Z PROC ; std::_Ptr_cat<SpyNotificationMessage *,SpyNotificationMessage *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUSpyNotificationMessage@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUSpyNotificationMessage@@0@Z ENDP ; std::_Ptr_cat<SpyNotificationMessage *,SpyNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>, COMDAT

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN1@Copy_opt@2
	push	esi
$LL3@Copy_opt@2:

; 2472 : 		*_Dest = *_First;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	mov	esi, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], esi
	add	ecx, 20					; 00000014H
	add	eax, 20					; 00000014H
	cmp	ecx, edx
	jne	SHORT $LL3@Copy_opt@2
	pop	esi
$LN1@Copy_opt@2:

; 2473 : 	return (_Dest);
; 2474 : 	}

	ret	0
??$_Copy_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUIntrigueNotificationMessage@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUIntrigueNotificationMessage@@0@Z ; std::_Iter_random<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAUIntrigueNotificationMessage@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUIntrigueNotificationMessage@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUIntrigueNotificationMessage@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUIntrigueNotificationMessage@@0@Z PROC ; std::_Iter_random<IntrigueNotificationMessage *,IntrigueNotificationMessage *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUIntrigueNotificationMessage@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUIntrigueNotificationMessage@@0@Z ENDP ; std::_Iter_random<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUIntrigueNotificationMessage@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUIntrigueNotificationMessage@@0@Z ; std::_Ptr_cat<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUIntrigueNotificationMessage@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUIntrigueNotificationMessage@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUIntrigueNotificationMessage@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUIntrigueNotificationMessage@@0@Z PROC ; std::_Ptr_cat<IntrigueNotificationMessage *,IntrigueNotificationMessage *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUIntrigueNotificationMessage@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUIntrigueNotificationMessage@@0@Z ENDP ; std::_Ptr_cat<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAPAVCvCity@@PAPAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCity@@0@Z ; std::_Iter_random<CvCity * *,CvCity * *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAPAVCvCity@@PAPAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCity@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAPAVCvCity@@PAPAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCity@@0@Z PROC ; std::_Iter_random<CvCity * *,CvCity * *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAPAVCvCity@@PAPAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCity@@0@Z ENDP ; std::_Iter_random<CvCity * *,CvCity * *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAPAVCvCity@@PAPAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCvCity@@0@Z ; std::_Ptr_cat<CvCity * *,CvCity * *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAPAVCvCity@@PAPAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCvCity@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAVCvCity@@PAPAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCvCity@@0@Z PROC ; std::_Ptr_cat<CvCity * *,CvCity * *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAPAVCvCity@@PAPAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAPAVCvCity@@0@Z ENDP ; std::_Ptr_cat<CvCity * *,CvCity * *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag>
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag>, COMDAT

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]

; 2505 : 	if (_Off > 0)

	test	eax, eax
	jle	SHORT $LN4@Copy_opt@3

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN4@Copy_opt@3:
	pop	edi

; 2507 : 	return _Result;

	mov	eax, esi
	pop	esi

; 2508 : 	}

	ret	0
??$_Copy_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUScoreCityEntry@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUScoreCityEntry@@0@Z ; std::_Ptr_cat<ScoreCityEntry *,ScoreCityEntry *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUScoreCityEntry@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUScoreCityEntry@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUScoreCityEntry@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUScoreCityEntry@@0@Z PROC ; std::_Ptr_cat<ScoreCityEntry *,ScoreCityEntry *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUScoreCityEntry@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUScoreCityEntry@@0@Z ENDP ; std::_Ptr_cat<ScoreCityEntry *,ScoreCityEntry *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z ; std::_Fill<HeistLocation *,HeistLocation>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z PROC ; std::_Fill<HeistLocation *,HeistLocation>, COMDAT

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	cmp	eax, edx
	je	SHORT $LN1@Fill
	mov	ecx, DWORD PTR __Val$[esp-4]
	push	esi
$LL3@Fill:

; 3159 : 		*_First = _Val;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	add	eax, 8
	cmp	eax, edx
	jne	SHORT $LL3@Fill
	pop	esi
$LN1@Fill:

; 3160 : 	}

	ret	0
??$_Fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z ENDP ; std::_Fill<HeistLocation *,HeistLocation>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUHeistLocation@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHeistLocation@@@Z ; std::_Move_cat<HeistLocation *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAUHeistLocation@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHeistLocation@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUHeistLocation@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHeistLocation@@@Z PROC ; std::_Move_cat<HeistLocation *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAUHeistLocation@@@std@@YA?AU_Undefined_move_tag@0@ABQAUHeistLocation@@@Z ENDP ; std::_Move_cat<HeistLocation *>
_TEXT	ENDS
PUBLIC	??$_Fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z ; std::_Fill<SpyNotificationMessage *,SpyNotificationMessage>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z PROC ; std::_Fill<SpyNotificationMessage *,SpyNotificationMessage>, COMDAT

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	cmp	eax, edx
	je	SHORT $LN1@Fill@2
	mov	ecx, DWORD PTR __Val$[esp-4]
	push	esi
$LL3@Fill@2:

; 3159 : 		*_First = _Val;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	mov	esi, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], esi
	add	eax, 20					; 00000014H
	cmp	eax, edx
	jne	SHORT $LL3@Fill@2
	pop	esi
$LN1@Fill@2:

; 3160 : 	}

	ret	0
??$_Fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z ENDP ; std::_Fill<SpyNotificationMessage *,SpyNotificationMessage>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUSpyNotificationMessage@@@std@@YA?AU_Undefined_move_tag@0@ABQAUSpyNotificationMessage@@@Z ; std::_Move_cat<SpyNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAUSpyNotificationMessage@@@std@@YA?AU_Undefined_move_tag@0@ABQAUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUSpyNotificationMessage@@@std@@YA?AU_Undefined_move_tag@0@ABQAUSpyNotificationMessage@@@Z PROC ; std::_Move_cat<SpyNotificationMessage *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAUSpyNotificationMessage@@@std@@YA?AU_Undefined_move_tag@0@ABQAUSpyNotificationMessage@@@Z ENDP ; std::_Move_cat<SpyNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUIntrigueNotificationMessage@@@std@@YA?AU_Undefined_move_tag@0@ABQAUIntrigueNotificationMessage@@@Z ; std::_Move_cat<IntrigueNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAUIntrigueNotificationMessage@@@std@@YA?AU_Undefined_move_tag@0@ABQAUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUIntrigueNotificationMessage@@@std@@YA?AU_Undefined_move_tag@0@ABQAUIntrigueNotificationMessage@@@Z PROC ; std::_Move_cat<IntrigueNotificationMessage *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAUIntrigueNotificationMessage@@@std@@YA?AU_Undefined_move_tag@0@ABQAUIntrigueNotificationMessage@@@Z ENDP ; std::_Move_cat<IntrigueNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@0AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@0AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@0AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<CvCity *> >, COMDAT

; 242  : 	}

	ret	0
??$_Destroy_range@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@0AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??$_Fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z ; std::_Fill<CvCity * *,CvCity *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z PROC ; std::_Fill<CvCity * *,CvCity *>, COMDAT

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@Fill@3
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL3@Fill@3:

; 3159 : 		*_First = _Val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL3@Fill@3
	pop	esi
$LN1@Fill@3:

; 3160 : 	}

	ret	0
??$_Fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z ENDP ; std::_Fill<CvCity * *,CvCity *>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAPAVCvCity@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCvCity@@@Z ; std::_Move_cat<CvCity * *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAPAVCvCity@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCvCity@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAPAVCvCity@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCvCity@@@Z PROC ; std::_Move_cat<CvCity * *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAPAVCvCity@@@std@@YA?AU_Undefined_move_tag@0@ABQAPAVCvCity@@@Z ENDP ; std::_Move_cat<CvCity * *>
_TEXT	ENDS
PUBLIC	?GetDescriptionKey@CvBaseInfo@@QBEPBDXZ		; CvBaseInfo::GetDescriptionKey
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
;	COMDAT ?GetDescriptionKey@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
?GetDescriptionKey@CvBaseInfo@@QBEPBDXZ PROC		; CvBaseInfo::GetDescriptionKey, COMDAT
; _this$ = ecx

; 69   : 		return m_strDescriptionKey.c_str();

	add	ecx, 64					; 00000040H
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetDescriptionKey@CvBaseInfo@@QBEPBDXZ ENDP		; CvBaseInfo::GetDescriptionKey
_TEXT	ENDS
PUBLIC	??$_Fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z ; std::_Fill<ScoreCityEntry *,ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z PROC ; std::_Fill<ScoreCityEntry *,ScoreCityEntry>, COMDAT

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	cmp	eax, edx
	je	SHORT $LN1@Fill@4
	mov	ecx, DWORD PTR __Val$[esp-4]
	push	esi
$LL3@Fill@4:

; 3159 : 		*_First = _Val;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	add	eax, 8
	cmp	eax, edx
	jne	SHORT $LL3@Fill@4
	pop	esi
$LN1@Fill@4:

; 3160 : 	}

	ret	0
??$_Fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z ENDP ; std::_Fill<ScoreCityEntry *,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUScoreCityEntry@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@0@Z ; std::_Iter_random<ScoreCityEntry *,ScoreCityEntry *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAUScoreCityEntry@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUScoreCityEntry@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@0@Z PROC ; std::_Iter_random<ScoreCityEntry *,ScoreCityEntry *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUScoreCityEntry@@PAU1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@0@Z ENDP ; std::_Iter_random<ScoreCityEntry *,ScoreCityEntry *>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAUScoreCityEntry@@@std@@YA?AU_Undefined_move_tag@0@ABQAUScoreCityEntry@@@Z ; std::_Move_cat<ScoreCityEntry *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAUScoreCityEntry@@@std@@YA?AU_Undefined_move_tag@0@ABQAUScoreCityEntry@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAUScoreCityEntry@@@std@@YA?AU_Undefined_move_tag@0@ABQAUScoreCityEntry@@@Z PROC ; std::_Move_cat<ScoreCityEntry *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAUScoreCityEntry@@@std@@YA?AU_Undefined_move_tag@0@ABQAUScoreCityEntry@@@Z ENDP ; std::_Move_cat<ScoreCityEntry *>
_TEXT	ENDS
PUBLIC	??0?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@H@Z ; std::_Temp_iterator<ScoreCityEntry>::_Temp_iterator<ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??0?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@H@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??0?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@H@Z PROC	; std::_Temp_iterator<ScoreCityEntry>::_Temp_iterator<ScoreCityEntry>, COMDAT
; _this$ = ecx

; 526  : 	_Temp_iterator(_PDFT _Count = 0)

	mov	eax, ecx

; 527  : 		{	// construct from desired temporary buffer size
; 528  : 		_Buf._Begin = 0;

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx

; 529  : 		_Buf._Current = 0;

	mov	DWORD PTR [eax+4], ecx

; 530  : 		_Buf._Hiwater = 0;

	mov	DWORD PTR [eax+8], ecx

; 531  : 		_Buf._Size = _Count;	// memorize size for lazy allocation

	mov	ecx, DWORD PTR __Count$[esp-4]
	mov	DWORD PTR [eax+12], ecx

; 532  : 		_Pbuf = &_Buf;

	mov	DWORD PTR [eax+16], eax

; 533  : 		}

	ret	4
??0?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@H@Z ENDP	; std::_Temp_iterator<ScoreCityEntry>::_Temp_iterator<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw
	push	esi
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw
	pop	esi
$LN1@Copy_backw:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw@2
	push	esi
$LL2@Copy_backw@2:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-20]
	sub	ecx, 20					; 00000014H
	sub	eax, 20					; 00000014H
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	mov	esi, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw@2
	pop	esi
$LN1@Copy_backw@2:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag>, COMDAT

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);
; 2702 : 	if (_First != _Last)
; 2703 : 		_DEBUG_POINTER(_Dest);
; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx

; 2711 : 	if (_Off > 0)

	test	eax, eax
	jle	SHORT $LN4@Copy_backw@3

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	push	ecx
	push	edx
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN4@Copy_backw@3:

; 2713 : 	return _Result;

	mov	eax, esi
	pop	esi

; 2714 : 	}

	ret	0
??$_Copy_backward_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUScoreCityEntry@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUScoreCityEntry@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<ScoreCityEntry *,ScoreCityEntry *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUScoreCityEntry@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUScoreCityEntry@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUScoreCityEntry@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUScoreCityEntry@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<ScoreCityEntry *,ScoreCityEntry *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw@4
	push	esi
$LL2@Copy_backw@4:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw@4
	pop	esi
$LN1@Copy_backw@4:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUScoreCityEntry@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUScoreCityEntry@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<ScoreCityEntry *,ScoreCityEntry *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Construct@UHeistLocation@@U1@@std@@YAXPAUHeistLocation@@ABU1@@Z ; std::_Construct<HeistLocation,HeistLocation>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Construct@UHeistLocation@@U1@@std@@YAXPAUHeistLocation@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UHeistLocation@@U1@@std@@YAXPAUHeistLocation@@ABU1@@Z PROC ; std::_Construct<HeistLocation,HeistLocation>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN3@Construct:

; 53   : 	}

	ret	0
??$_Construct@UHeistLocation@@U1@@std@@YAXPAUHeistLocation@@ABU1@@Z ENDP ; std::_Construct<HeistLocation,HeistLocation>
_TEXT	ENDS
PUBLIC	??$_Destroy@UHeistLocation@@@std@@YAXPAUHeistLocation@@@Z ; std::_Destroy<HeistLocation>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@UHeistLocation@@@std@@YAXPAUHeistLocation@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UHeistLocation@@@std@@YAXPAUHeistLocation@@@Z PROC ; std::_Destroy<HeistLocation>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@UHeistLocation@@@std@@YAXPAUHeistLocation@@@Z ENDP ; std::_Destroy<HeistLocation>
_TEXT	ENDS
PUBLIC	??$_Construct@USpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@ABU1@@Z ; std::_Construct<SpyNotificationMessage,SpyNotificationMessage>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@USpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@USpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@ABU1@@Z PROC ; std::_Construct<SpyNotificationMessage,SpyNotificationMessage>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN3@Construct@2
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
$LN3@Construct@2:

; 53   : 	}

	ret	0
??$_Construct@USpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@ABU1@@Z ENDP ; std::_Construct<SpyNotificationMessage,SpyNotificationMessage>
_TEXT	ENDS
PUBLIC	??$_Destroy@USpyNotificationMessage@@@std@@YAXPAUSpyNotificationMessage@@@Z ; std::_Destroy<SpyNotificationMessage>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@USpyNotificationMessage@@@std@@YAXPAUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@USpyNotificationMessage@@@std@@YAXPAUSpyNotificationMessage@@@Z PROC ; std::_Destroy<SpyNotificationMessage>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@USpyNotificationMessage@@@std@@YAXPAUSpyNotificationMessage@@@Z ENDP ; std::_Destroy<SpyNotificationMessage>
_TEXT	ENDS
PUBLIC	??$_Construct@UScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@ABU1@@Z ; std::_Construct<ScoreCityEntry,ScoreCityEntry>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Construct@UScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@ABU1@@Z PROC ; std::_Construct<ScoreCityEntry,ScoreCityEntry>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN3@Construct@3
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN3@Construct@3:

; 53   : 	}

	ret	0
??$_Construct@UScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@ABU1@@Z ENDP ; std::_Construct<ScoreCityEntry,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Destroy@UScoreCityEntry@@@std@@YAXPAUScoreCityEntry@@@Z ; std::_Destroy<ScoreCityEntry>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy@UScoreCityEntry@@@std@@YAXPAUScoreCityEntry@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UScoreCityEntry@@@std@@YAXPAUScoreCityEntry@@@Z PROC ; std::_Destroy<ScoreCityEntry>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@UScoreCityEntry@@@std@@YAXPAUScoreCityEntry@@@Z ENDP ; std::_Destroy<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	?getMap@CvGlobals@@QAEAAVCvMap@@XZ		; CvGlobals::getMap
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getMap@CvGlobals@@QAEAAVCvMap@@XZ
_TEXT	SEGMENT
?getMap@CvGlobals@@QAEAAVCvMap@@XZ PROC			; CvGlobals::getMap, COMDAT
; _this$ = ecx

; 175  : 		return *m_map;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+52]

; 176  : 	}

	ret	0
?getMap@CvGlobals@@QAEAAVCvMap@@XZ ENDP			; CvGlobals::getMap
_TEXT	ENDS
PUBLIC	??$return_temporary_buffer@UScoreCityEntry@@@std@@YAXPAUScoreCityEntry@@@Z ; std::return_temporary_buffer<ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$return_temporary_buffer@UScoreCityEntry@@@std@@YAXPAUScoreCityEntry@@@Z
_TEXT	SEGMENT
__Pbuf$ = 8						; size = 4
??$return_temporary_buffer@UScoreCityEntry@@@std@@YAXPAUScoreCityEntry@@@Z PROC ; std::return_temporary_buffer<ScoreCityEntry>, COMDAT

; 39   : 	operator delete(_Pbuf);

	jmp	??3@YAXPAX@Z				; operator delete
??$return_temporary_buffer@UScoreCityEntry@@@std@@YAXPAUScoreCityEntry@@@Z ENDP ; std::return_temporary_buffer<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	??$_Iter_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ; std::_Iter_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

	ret	0
??$_Iter_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Iter_cat@PAPAVCvCity@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCity@@@Z ; std::_Iter_cat<CvCity * *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@PAPAVCvCity@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCity@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAVCvCity@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCity@@@Z PROC ; std::_Iter_cat<CvCity * *>, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

	ret	0
??$_Iter_cat@PAPAVCvCity@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVCvCity@@@Z ENDP ; std::_Iter_cat<CvCity * *>
_TEXT	ENDS
PUBLIC	??G?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEHABV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@1@@Z ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEHABV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEHABV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@1@@Z PROC ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator-, COMDAT
; _this$ = ecx

; 398  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[esp-4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3

; 399  : 		}

	ret	4
??G?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEHABV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@1@@Z ENDP ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator-
_TEXT	ENDS
PUBLIC	?_Init@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV12@XZ ; std::_Temp_iterator<ScoreCityEntry>::_Init
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ?_Init@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
?_Init@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV12@XZ PROC ; std::_Temp_iterator<ScoreCityEntry>::_Init, COMDAT
; _this$ = ecx

; 591  : 		{	// set pointer at beginning of buffer

	mov	eax, ecx

; 592  : 		_Pbuf->_Current = _Pbuf->_Begin;

	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+4], edx

; 593  : 		return (*this);
; 594  : 		}

	ret	0
?_Init@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV12@XZ ENDP ; std::_Temp_iterator<ScoreCityEntry>::_Init
_TEXT	ENDS
PUBLIC	?_First@?$_Temp_iterator@UScoreCityEntry@@@std@@QBEPAUScoreCityEntry@@XZ ; std::_Temp_iterator<ScoreCityEntry>::_First
; Function compile flags: /Ogtpy
;	COMDAT ?_First@?$_Temp_iterator@UScoreCityEntry@@@std@@QBEPAUScoreCityEntry@@XZ
_TEXT	SEGMENT
?_First@?$_Temp_iterator@UScoreCityEntry@@@std@@QBEPAUScoreCityEntry@@XZ PROC ; std::_Temp_iterator<ScoreCityEntry>::_First, COMDAT
; _this$ = ecx

; 598  : 		return (_Pbuf->_Begin);

	mov	eax, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax]

; 599  : 		}

	ret	0
?_First@?$_Temp_iterator@UScoreCityEntry@@@std@@QBEPAUScoreCityEntry@@XZ ENDP ; std::_Temp_iterator<ScoreCityEntry>::_First
_TEXT	ENDS
PUBLIC	?_Last@?$_Temp_iterator@UScoreCityEntry@@@std@@QBEPAUScoreCityEntry@@XZ ; std::_Temp_iterator<ScoreCityEntry>::_Last
; Function compile flags: /Ogtpy
;	COMDAT ?_Last@?$_Temp_iterator@UScoreCityEntry@@@std@@QBEPAUScoreCityEntry@@XZ
_TEXT	SEGMENT
?_Last@?$_Temp_iterator@UScoreCityEntry@@@std@@QBEPAUScoreCityEntry@@XZ PROC ; std::_Temp_iterator<ScoreCityEntry>::_Last, COMDAT
; _this$ = ecx

; 603  : 		return (_Pbuf->_Current);

	mov	eax, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax+4]

; 604  : 		}

	ret	0
?_Last@?$_Temp_iterator@UScoreCityEntry@@@std@@QBEPAUScoreCityEntry@@XZ ENDP ; std::_Temp_iterator<ScoreCityEntry>::_Last
_TEXT	ENDS
PUBLIC	??0?$pair@PAUScoreCityEntry@@H@std@@QAE@ABQAUScoreCityEntry@@ABH@Z ; std::pair<ScoreCityEntry *,int>::pair<ScoreCityEntry *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@PAUScoreCityEntry@@H@std@@QAE@ABQAUScoreCityEntry@@ABH@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUScoreCityEntry@@H@std@@QAE@ABQAUScoreCityEntry@@ABH@Z PROC ; std::pair<ScoreCityEntry *,int>::pair<ScoreCityEntry *,int>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUScoreCityEntry@@H@std@@QAE@ABQAUScoreCityEntry@@ABH@Z ENDP ; std::pair<ScoreCityEntry *,int>::pair<ScoreCityEntry *,int>
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 62   : 	_Vector_const_iterator()

	mov	eax, ecx

; 63   : 		{	// construct with null pointer
; 64   : 		_Myptr = 0;

	mov	DWORD PTR [eax], 0

; 65   : 		}

	ret	0
??0?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEABUScoreCityEntry@@XZ ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEABUScoreCityEntry@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEABUScoreCityEntry@@XZ PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator*, COMDAT
; _this$ = ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());
; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR [ecx]

; 107  : 		}

	ret	0
??D?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEABUScoreCityEntry@@XZ ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator*
_TEXT	ENDS
PUBLIC	??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABV01@@Z ; std::_Temp_iterator<ScoreCityEntry>::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Temp_iterator<ScoreCityEntry>::operator=, COMDAT
; _this$ = ecx

; 556  : 		{	// assign _Right (share active buffer)

	mov	eax, ecx

; 557  : 		_Pbuf = _Right._Pbuf;

	mov	ecx, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 558  : 		return (*this);
; 559  : 		}

	ret	4
??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Temp_iterator<ScoreCityEntry>::operator=
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVCvCity@@IPAV1@@std@@YAXPAPAVCvCity@@IABQAV1@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<CvCity * *,unsigned int,CvCity *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PAPAVCvCity@@IPAV1@@std@@YAXPAPAVCvCity@@IABQAV1@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAPAVCvCity@@IPAV1@@std@@YAXPAPAVCvCity@@IABQAV1@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<CvCity * *,unsigned int,CvCity *>, COMDAT

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jbe	SHORT $LN1@Fill_n
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
$LL3@Fill_n:

; 3198 : 		*_First = _Val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL3@Fill_n
	pop	esi
$LN1@Fill_n:

; 3199 : 	}

	ret	0
??$_Fill_n@PAPAVCvCity@@IPAV1@@std@@YAXPAPAVCvCity@@IABQAV1@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<CvCity * *,unsigned int,CvCity *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >, COMDAT

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]

; 150  : 	if (_Count > 0)

	test	eax, eax
	jbe	SHORT $LN4@Uninit_cop

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN4@Uninit_cop:
	pop	edi

; 152  : 	return (_Result);

	mov	eax, esi
	pop	esi

; 153  : 	}

	ret	0
??$_Uninit_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

	mov	eax, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

	add	DWORD PTR [eax], 8

; 126  : 		return (*this);
; 127  : 		}

	ret	0
??E?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator++
_TEXT	ENDS
PUBLIC	??F?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??F?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator--, COMDAT
; _this$ = ecx

; 137  : 		{	// predecrement

	mov	eax, ecx

; 138  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 139  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr > ((_Myvec *)(this->_Getmycont()))->_Myfirst);
; 140  : 
; 141  :  #if _HAS_ITERATOR_DEBUGGING
; 142  : 		if (this->_Mycont == 0
; 143  : 			|| _Myptr == ((_Myvec *)this->_Mycont)->_Myfirst)
; 144  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 145  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 146  : 
; 147  : 		--_Myptr;

	add	DWORD PTR [eax], -8			; fffffff8H

; 148  : 		return (*this);
; 149  : 		}

	ret	0
??F?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator--
_TEXT	ENDS
PUBLIC	??$swap@UScoreCityEntry@@@std@@YAXAAUScoreCityEntry@@0@Z ; std::swap<ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??$swap@UScoreCityEntry@@@std@@YAXAAUScoreCityEntry@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UScoreCityEntry@@@std@@YAXAAUScoreCityEntry@@0@Z PROC ; std::swap<ScoreCityEntry>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UScoreCityEntry@@@std@@YAXAAUScoreCityEntry@@0@Z ENDP ; std::swap<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AUforward_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@ABV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AUforward_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@ABV?$_Temp_iterator@UScoreCityEntry@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AUforward_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@ABV?$_Temp_iterator@UScoreCityEntry@@@0@@Z PROC ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AUforward_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@ABV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ENDP ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@AAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Ptr_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@AAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@AAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z PROC ; std::_Ptr_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@AAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ENDP ; std::_Ptr_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@1@Z ; std::_Iter_random<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Iter_random@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@1@Z PROC ; std::_Iter_random<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 1007 : 	typename _Iter_random_helper3<
; 1008 : 		iterator_traits<_Iter1>::iterator_category, 
; 1009 : 		iterator_traits<_Iter2>::iterator_category,
; 1010 : 		iterator_traits<_Iter3>::iterator_category>::_Iter_random_cat _Cat;
; 1011 : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 1012 : 	}

	ret	0
??$_Iter_random@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@1@Z ENDP ; std::_Iter_random<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ; std::_Temp_iterator<ScoreCityEntry>::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z PROC ; std::_Temp_iterator<ScoreCityEntry>::operator=, COMDAT
; _this$ = ecx

; 562  : 		{	// assign or construct value into active buffer, and increment

	mov	eax, ecx

; 563  : 		if (_Pbuf->_Current < _Pbuf->_Hiwater)

	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [ecx+8]

; 564  : 			*_Pbuf->_Current++ = _Val;	// below high water mark, assign

	mov	ecx, DWORD PTR [ecx+4]
	push	esi
	jae	SHORT $LN2@operator@2
	mov	edx, DWORD PTR __Val$[esp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR [eax+16]
	add	DWORD PTR [ecx+4], 8
	pop	esi

; 571  : 			}
; 572  : 		return (*this);
; 573  : 		}

	ret	4
$LN2@operator@2:

; 565  : 		else
; 566  : 			{	// above high water mark, construct
; 567  : 			_SCL_SECURE_VALIDATE((_Pbuf->_Current - _Pbuf->_Begin) < _Pbuf->_Size);
; 568  : 			_Pty _Ptr = &*_Pbuf->_Current;
; 569  : 			_Construct(_Ptr, _Val);

	test	ecx, ecx
	je	SHORT $LN7@operator@2
	mov	edx, DWORD PTR __Val$[esp]
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], edx
$LN7@operator@2:

; 570  : 			_Pbuf->_Hiwater = ++_Pbuf->_Current;

	mov	ecx, DWORD PTR [eax+16]
	add	DWORD PTR [ecx+4], 8
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx+8], edx
	pop	esi

; 571  : 			}
; 572  : 		return (*this);
; 573  : 		}

	ret	4
??4?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@ABUScoreCityEntry@@@Z ENDP ; std::_Temp_iterator<ScoreCityEntry>::operator=
_TEXT	ENDS
PUBLIC	??D?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@XZ ; std::_Temp_iterator<ScoreCityEntry>::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??D?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@XZ PROC ; std::_Temp_iterator<ScoreCityEntry>::operator*, COMDAT
; _this$ = ecx

; 576  : 		{	// pretend to return designated value

	mov	eax, ecx

; 577  : 		return (*this);
; 578  : 		}

	ret	0
??D?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@XZ ENDP ; std::_Temp_iterator<ScoreCityEntry>::operator*
_TEXT	ENDS
PUBLIC	??E?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@XZ ; std::_Temp_iterator<ScoreCityEntry>::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@XZ PROC ; std::_Temp_iterator<ScoreCityEntry>::operator++, COMDAT
; _this$ = ecx

; 581  : 		{	// pretend to preincrement

	mov	eax, ecx

; 582  : 		return (*this);
; 583  : 		}

	ret	0
??E?$_Temp_iterator@UScoreCityEntry@@@std@@QAEAAV01@XZ ENDP ; std::_Temp_iterator<ScoreCityEntry>::operator++
_TEXT	ENDS
PUBLIC	??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z PROC ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z ENDP ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z ; std::_Ptr_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z PROC ; std::_Ptr_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z ENDP ; std::_Ptr_cat<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ; std::_Iter_random<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z PROC ; std::_Iter_random<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ENDP ; std::_Iter_random<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUScoreCityEntry@@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ; std::_Ptr_cat<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUScoreCityEntry@@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUScoreCityEntry@@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z PROC ; std::_Ptr_cat<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUScoreCityEntry@@AAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ENDP ; std::_Ptr_cat<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AUforward_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0ABV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AUforward_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0ABV?$_Temp_iterator@UScoreCityEntry@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AUforward_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0ABV?$_Temp_iterator@UScoreCityEntry@@@0@@Z PROC ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >, COMDAT

; 1007 : 	typename _Iter_random_helper3<
; 1008 : 		iterator_traits<_Iter1>::iterator_category, 
; 1009 : 		iterator_traits<_Iter2>::iterator_category,
; 1010 : 		iterator_traits<_Iter3>::iterator_category>::_Iter_random_cat _Cat;
; 1011 : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 1012 : 	}

	ret	0
??$_Iter_random@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@@std@@YA?AUforward_iterator_tag@0@ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0ABV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ENDP ; std::_Iter_random<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$_Iter_cat@PAUScoreCityEntry@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@@Z ; std::_Iter_cat<ScoreCityEntry *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@PAUScoreCityEntry@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAUScoreCityEntry@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@@Z PROC ; std::_Iter_cat<ScoreCityEntry *>, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

	ret	0
??$_Iter_cat@PAUScoreCityEntry@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@@Z ENDP ; std::_Iter_cat<ScoreCityEntry *>
_TEXT	ENDS
PUBLIC	??$_Advance@PAUScoreCityEntry@@H@std@@YAXAAPAUScoreCityEntry@@HUrandom_access_iterator_tag@0@@Z ; std::_Advance<ScoreCityEntry *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Advance@PAUScoreCityEntry@@H@std@@YAXAAPAUScoreCityEntry@@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance@PAUScoreCityEntry@@H@std@@YAXAAPAUScoreCityEntry@@HUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<ScoreCityEntry *,int>, COMDAT

; 1822 : 	_Where += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	lea	ecx, DWORD PTR [eax*8]
	mov	eax, DWORD PTR __Where$[esp-4]
	add	DWORD PTR [eax], ecx

; 1823 : 	}

	ret	0
??$_Advance@PAUScoreCityEntry@@H@std@@YAXAAPAUScoreCityEntry@@HUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<ScoreCityEntry *,int>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@0ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ; std::_Iter_random<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_random@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@0ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Iter_random@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@0ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z PROC ; std::_Iter_random<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 1007 : 	typename _Iter_random_helper3<
; 1008 : 		iterator_traits<_Iter1>::iterator_category, 
; 1009 : 		iterator_traits<_Iter2>::iterator_category,
; 1010 : 		iterator_traits<_Iter3>::iterator_category>::_Iter_random_cat _Cat;
; 1011 : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 1012 : 	}

	ret	0
??$_Iter_random@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUScoreCityEntry@@0ABV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@@Z ENDP ; std::_Iter_random<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	?getMC_GIFT_WEIGHT_MARITIME_GROWTH@CvGlobals@@QAEHXZ ; CvGlobals::getMC_GIFT_WEIGHT_MARITIME_GROWTH
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getMC_GIFT_WEIGHT_MARITIME_GROWTH@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMC_GIFT_WEIGHT_MARITIME_GROWTH@CvGlobals@@QAEHXZ PROC ; CvGlobals::getMC_GIFT_WEIGHT_MARITIME_GROWTH, COMDAT
; _this$ = ecx

; 2533 : 		return m_iMC_GIFT_WEIGHT_MARITIME_GROWTH;

	mov	eax, DWORD PTR [ecx+3460]

; 2534 : 	}

	ret	0
?getMC_GIFT_WEIGHT_MARITIME_GROWTH@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getMC_GIFT_WEIGHT_MARITIME_GROWTH
_TEXT	ENDS
PUBLIC	?getMC_GIFT_WEIGHT_MILITARISTIC@CvGlobals@@QAEHXZ ; CvGlobals::getMC_GIFT_WEIGHT_MILITARISTIC
; Function compile flags: /Ogtpy
;	COMDAT ?getMC_GIFT_WEIGHT_MILITARISTIC@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMC_GIFT_WEIGHT_MILITARISTIC@CvGlobals@@QAEHXZ PROC	; CvGlobals::getMC_GIFT_WEIGHT_MILITARISTIC, COMDAT
; _this$ = ecx

; 2549 : 		return m_iMC_GIFT_WEIGHT_MILITARISTIC;

	mov	eax, DWORD PTR [ecx+3476]

; 2550 : 	}

	ret	0
?getMC_GIFT_WEIGHT_MILITARISTIC@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getMC_GIFT_WEIGHT_MILITARISTIC
_TEXT	ENDS
PUBLIC	?getMC_GIFT_WEIGHT_RESOURCE_WE_NEED@CvGlobals@@QAEHXZ ; CvGlobals::getMC_GIFT_WEIGHT_RESOURCE_WE_NEED
; Function compile flags: /Ogtpy
;	COMDAT ?getMC_GIFT_WEIGHT_RESOURCE_WE_NEED@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMC_GIFT_WEIGHT_RESOURCE_WE_NEED@CvGlobals@@QAEHXZ PROC ; CvGlobals::getMC_GIFT_WEIGHT_RESOURCE_WE_NEED, COMDAT
; _this$ = ecx

; 2553 : 		return m_iMC_GIFT_WEIGHT_RESOURCE_WE_NEED;

	mov	eax, DWORD PTR [ecx+3480]

; 2554 : 	}

	ret	0
?getMC_GIFT_WEIGHT_RESOURCE_WE_NEED@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getMC_GIFT_WEIGHT_RESOURCE_WE_NEED
_TEXT	ENDS
PUBLIC	?getMC_GIFT_WEIGHT_PROTECTIVE@CvGlobals@@QAEHXZ	; CvGlobals::getMC_GIFT_WEIGHT_PROTECTIVE
; Function compile flags: /Ogtpy
;	COMDAT ?getMC_GIFT_WEIGHT_PROTECTIVE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMC_GIFT_WEIGHT_PROTECTIVE@CvGlobals@@QAEHXZ PROC	; CvGlobals::getMC_GIFT_WEIGHT_PROTECTIVE, COMDAT
; _this$ = ecx

; 2561 : 		return m_iMC_GIFT_WEIGHT_PROTECTIVE;

	mov	eax, DWORD PTR [ecx+3488]

; 2562 : 	}

	ret	0
?getMC_GIFT_WEIGHT_PROTECTIVE@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getMC_GIFT_WEIGHT_PROTECTIVE
_TEXT	ENDS
PUBLIC	?getMC_GIFT_WEIGHT_HOSTILE@CvGlobals@@QAEHXZ	; CvGlobals::getMC_GIFT_WEIGHT_HOSTILE
; Function compile flags: /Ogtpy
;	COMDAT ?getMC_GIFT_WEIGHT_HOSTILE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMC_GIFT_WEIGHT_HOSTILE@CvGlobals@@QAEHXZ PROC	; CvGlobals::getMC_GIFT_WEIGHT_HOSTILE, COMDAT
; _this$ = ecx

; 2565 : 		return m_iMC_GIFT_WEIGHT_HOSTILE;

	mov	eax, DWORD PTR [ecx+3492]

; 2566 : 	}

	ret	0
?getMC_GIFT_WEIGHT_HOSTILE@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getMC_GIFT_WEIGHT_HOSTILE
_TEXT	ENDS
PUBLIC	?getMC_GIFT_WEIGHT_NEIGHBORS@CvGlobals@@QAEHXZ	; CvGlobals::getMC_GIFT_WEIGHT_NEIGHBORS
; Function compile flags: /Ogtpy
;	COMDAT ?getMC_GIFT_WEIGHT_NEIGHBORS@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMC_GIFT_WEIGHT_NEIGHBORS@CvGlobals@@QAEHXZ PROC	; CvGlobals::getMC_GIFT_WEIGHT_NEIGHBORS, COMDAT
; _this$ = ecx

; 2569 : 		return m_iMC_GIFT_WEIGHT_NEIGHBORS;

	mov	eax, DWORD PTR [ecx+3496]

; 2570 : 	}

	ret	0
?getMC_GIFT_WEIGHT_NEIGHBORS@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getMC_GIFT_WEIGHT_NEIGHBORS
_TEXT	ENDS
PUBLIC	?getMC_GIFT_WEIGHT_CLOSE@CvGlobals@@QAEHXZ	; CvGlobals::getMC_GIFT_WEIGHT_CLOSE
; Function compile flags: /Ogtpy
;	COMDAT ?getMC_GIFT_WEIGHT_CLOSE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMC_GIFT_WEIGHT_CLOSE@CvGlobals@@QAEHXZ PROC		; CvGlobals::getMC_GIFT_WEIGHT_CLOSE, COMDAT
; _this$ = ecx

; 2573 : 		return m_iMC_GIFT_WEIGHT_CLOSE;

	mov	eax, DWORD PTR [ecx+3500]

; 2574 : 	}

	ret	0
?getMC_GIFT_WEIGHT_CLOSE@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getMC_GIFT_WEIGHT_CLOSE
_TEXT	ENDS
PUBLIC	?getMC_GIFT_WEIGHT_FAR@CvGlobals@@QAEHXZ	; CvGlobals::getMC_GIFT_WEIGHT_FAR
; Function compile flags: /Ogtpy
;	COMDAT ?getMC_GIFT_WEIGHT_FAR@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMC_GIFT_WEIGHT_FAR@CvGlobals@@QAEHXZ PROC		; CvGlobals::getMC_GIFT_WEIGHT_FAR, COMDAT
; _this$ = ecx

; 2577 : 		return m_iMC_GIFT_WEIGHT_FAR;

	mov	eax, DWORD PTR [ecx+3504]

; 2578 : 	}

	ret	0
?getMC_GIFT_WEIGHT_FAR@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getMC_GIFT_WEIGHT_FAR
_TEXT	ENDS
PUBLIC	?getESPIONAGE_GATHERING_INTEL_COST_PERCENT@CvGlobals@@QAEHXZ ; CvGlobals::getESPIONAGE_GATHERING_INTEL_COST_PERCENT
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_GATHERING_INTEL_COST_PERCENT@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getESPIONAGE_GATHERING_INTEL_COST_PERCENT@CvGlobals@@QAEHXZ PROC ; CvGlobals::getESPIONAGE_GATHERING_INTEL_COST_PERCENT, COMDAT
; _this$ = ecx

; 7423 : 		return m_iESPIONAGE_GATHERING_INTEL_COST_PERCENT;

	mov	eax, DWORD PTR [ecx+7924]

; 7424 : 	}

	ret	0
?getESPIONAGE_GATHERING_INTEL_COST_PERCENT@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getESPIONAGE_GATHERING_INTEL_COST_PERCENT
_TEXT	ENDS
PUBLIC	?getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT@CvGlobals@@QAEHXZ ; CvGlobals::getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT@CvGlobals@@QAEHXZ PROC ; CvGlobals::getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT, COMDAT
; _this$ = ecx

; 7427 : 		return m_iESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT;

	mov	eax, DWORD PTR [ecx+7928]

; 7428 : 	}

	ret	0
?getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT
_TEXT	ENDS
PUBLIC	?getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT@CvGlobals@@QAEHXZ ; CvGlobals::getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT@CvGlobals@@QAEHXZ PROC ; CvGlobals::getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT, COMDAT
; _this$ = ecx

; 7431 : 		return m_iESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT;

	mov	eax, DWORD PTR [ecx+7932]

; 7432 : 	}

	ret	0
?getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT
_TEXT	ENDS
PUBLIC	?getESPIONAGE_SURVEILLANCE_SIGHT_RANGE@CvGlobals@@QAEHXZ ; CvGlobals::getESPIONAGE_SURVEILLANCE_SIGHT_RANGE
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_SURVEILLANCE_SIGHT_RANGE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getESPIONAGE_SURVEILLANCE_SIGHT_RANGE@CvGlobals@@QAEHXZ PROC ; CvGlobals::getESPIONAGE_SURVEILLANCE_SIGHT_RANGE, COMDAT
; _this$ = ecx

; 7447 : 		return m_iESPIONAGE_SURVEILLANCE_SIGHT_RANGE;

	mov	eax, DWORD PTR [ecx+7948]

; 7448 : 	}

	ret	0
?getESPIONAGE_SURVEILLANCE_SIGHT_RANGE@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getESPIONAGE_SURVEILLANCE_SIGHT_RANGE
_TEXT	ENDS
PUBLIC	?getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP@CvGlobals@@QAEHXZ ; CvGlobals::getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP@CvGlobals@@QAEHXZ PROC ; CvGlobals::getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP, COMDAT
; _this$ = ecx

; 7451 : 		return m_iESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP;

	mov	eax, DWORD PTR [ecx+7952]

; 7452 : 	}

	ret	0
?getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP
_TEXT	ENDS
PUBLIC	?getESPIONAGE_COUP_NOBODY_BONUS@CvGlobals@@QAEMXZ ; CvGlobals::getESPIONAGE_COUP_NOBODY_BONUS
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_COUP_NOBODY_BONUS@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getESPIONAGE_COUP_NOBODY_BONUS@CvGlobals@@QAEMXZ PROC	; CvGlobals::getESPIONAGE_COUP_NOBODY_BONUS, COMDAT
; _this$ = ecx

; 7455 : 		return m_fESPIONAGE_COUP_NOBODY_BONUS;

	fld	DWORD PTR [ecx+8156]

; 7456 : 	}

	ret	0
?getESPIONAGE_COUP_NOBODY_BONUS@CvGlobals@@QAEMXZ ENDP	; CvGlobals::getESPIONAGE_COUP_NOBODY_BONUS
_TEXT	ENDS
PUBLIC	?getESPIONAGE_COUP_MULTIPLY_CONSTANT@CvGlobals@@QAEMXZ ; CvGlobals::getESPIONAGE_COUP_MULTIPLY_CONSTANT
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_COUP_MULTIPLY_CONSTANT@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getESPIONAGE_COUP_MULTIPLY_CONSTANT@CvGlobals@@QAEMXZ PROC ; CvGlobals::getESPIONAGE_COUP_MULTIPLY_CONSTANT, COMDAT
; _this$ = ecx

; 7459 : 		return m_fESPIONAGE_COUP_MULTIPLY_CONSTANT;

	fld	DWORD PTR [ecx+8160]

; 7460 : 	}

	ret	0
?getESPIONAGE_COUP_MULTIPLY_CONSTANT@CvGlobals@@QAEMXZ ENDP ; CvGlobals::getESPIONAGE_COUP_MULTIPLY_CONSTANT
_TEXT	ENDS
PUBLIC	?getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO@CvGlobals@@QAEMXZ ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO@CvGlobals@@QAEMXZ PROC ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO, COMDAT
; _this$ = ecx

; 7463 : 		return m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO;

	fld	DWORD PTR [ecx+8164]

; 7464 : 	}

	ret	0
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO@CvGlobals@@QAEMXZ ENDP ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO
_TEXT	ENDS
PUBLIC	?getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE@CvGlobals@@QAEMXZ ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE@CvGlobals@@QAEMXZ PROC ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE, COMDAT
; _this$ = ecx

; 7467 : 		return m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE;

	fld	DWORD PTR [ecx+8168]

; 7468 : 	}

	ret	0
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE@CvGlobals@@QAEMXZ ENDP ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE
_TEXT	ENDS
PUBLIC	?getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO@CvGlobals@@QAEMXZ ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO@CvGlobals@@QAEMXZ PROC ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO, COMDAT
; _this$ = ecx

; 7471 : 		return m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO;

	fld	DWORD PTR [ecx+8172]

; 7472 : 	}

	ret	0
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO@CvGlobals@@QAEMXZ ENDP ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO
_TEXT	ENDS
PUBLIC	?getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE@CvGlobals@@QAEMXZ ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE@CvGlobals@@QAEMXZ PROC ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE, COMDAT
; _this$ = ecx

; 7475 : 		return m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE;

	fld	DWORD PTR [ecx+8176]

; 7476 : 	}

	ret	0
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE@CvGlobals@@QAEMXZ ENDP ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE
_TEXT	ENDS
PUBLIC	?getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR@CvGlobals@@QAEMXZ ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR
; Function compile flags: /Ogtpy
;	COMDAT ?getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR@CvGlobals@@QAEMXZ PROC ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR, COMDAT
; _this$ = ecx

; 7479 : 		return m_fESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR;

	fld	DWORD PTR [ecx+8180]

; 7480 : 	}

	ret	0
?getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR@CvGlobals@@QAEMXZ ENDP ; CvGlobals::getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR
_TEXT	ENDS
PUBLIC	?getDLLIFace@CvGlobals@@QAEPAVICvEngineUtility4@@XZ ; CvGlobals::getDLLIFace
; Function compile flags: /Ogtpy
;	COMDAT ?getDLLIFace@CvGlobals@@QAEPAVICvEngineUtility4@@XZ
_TEXT	SEGMENT
?getDLLIFace@CvGlobals@@QAEPAVICvEngineUtility4@@XZ PROC ; CvGlobals::getDLLIFace, COMDAT
; _this$ = ecx

; 7703 : 		return m_pDLL;

	mov	eax, DWORD PTR [ecx+8564]

; 7704 : 	}

	ret	0
?getDLLIFace@CvGlobals@@QAEPAVICvEngineUtility4@@XZ ENDP ; CvGlobals::getDLLIFace
_TEXT	ENDS
PUBLIC	?GetEngineUserInterface@CvGlobals@@QAEPAVICvUserInterface2@@XZ ; CvGlobals::GetEngineUserInterface
; Function compile flags: /Ogtpy
;	COMDAT ?GetEngineUserInterface@CvGlobals@@QAEPAVICvUserInterface2@@XZ
_TEXT	SEGMENT
?GetEngineUserInterface@CvGlobals@@QAEPAVICvUserInterface2@@XZ PROC ; CvGlobals::GetEngineUserInterface, COMDAT
; _this$ = ecx

; 7713 : 		return m_pEngineUI;

	mov	eax, DWORD PTR [ecx+8568]

; 7714 : 	}

	ret	0
?GetEngineUserInterface@CvGlobals@@QAEPAVICvUserInterface2@@XZ ENDP ; CvGlobals::GetEngineUserInterface
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV0@@Z			; CvString::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CvString@@QAEAAV0@ABV0@@Z PROC			; CvString::operator=, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV0@@Z ENDP			; CvString::operator=
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN1@getPlotCit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 537  : 	}

	ret	0
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax

; 537  : 	}

	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
_TEXT	ENDS
PUBLIC	?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z		; CvPlot::PlotBoolField::GetBit
; Function compile flags: /Ogtpy
;	COMDAT ?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z
_TEXT	SEGMENT
_uiEntry$ = 8						; size = 4
?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z PROC		; CvPlot::PlotBoolField::GetBit, COMDAT
; _this$ = ecx

; 767  : 		{

	mov	edx, ecx

; 768  : 			const uint uiOffset = uiEntry/eSize;

	mov	ecx, DWORD PTR _uiEntry$[esp-4]
	push	esi
	mov	eax, ecx
	shr	eax, 5

; 769  : 			return m_dwBits[uiOffset] & 1<<(uiEntry-(eSize*uiOffset));

	mov	esi, eax
	shl	esi, 5
	sub	ecx, esi
	mov	esi, 1
	shl	esi, cl
	test	esi, DWORD PTR [edx+eax*4]
	pop	esi
	setne	al

; 770  : 		}

	ret	4
?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z ENDP		; CvPlot::PlotBoolField::GetBit
_TEXT	ENDS
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 88   : 	if(bWrap)

	cmp	BYTE PTR _bWrap$[esp-4], 0
	mov	eax, DWORD PTR _iCoord$[esp-4]
	je	SHORT $LN5@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)
; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	ecx, DWORD PTR _iRange$[esp-4]
	test	eax, eax
	jge	SHORT $LN3@coordRange
	cdq
	idiv	ecx
	mov	eax, edx
	add	eax, ecx

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	cmp	eax, ecx
	jl	SHORT $LN5@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	cdq
	idiv	ecx
	mov	eax, edx
$LN5@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
_TEXT	ENDS
PUBLIC	?getGridWidth@CvMap@@QBEHXZ			; CvMap::getGridWidth
; Function compile flags: /Ogtpy
;	COMDAT ?getGridWidth@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridWidth@CvMap@@QBEHXZ PROC			; CvMap::getGridWidth, COMDAT
; _this$ = ecx

; 198  : 		return m_iGridWidth;

	mov	eax, DWORD PTR [ecx+4020]

; 199  : 	}

	ret	0
?getGridWidth@CvMap@@QBEHXZ ENDP			; CvMap::getGridWidth
_TEXT	ENDS
PUBLIC	?getGridHeight@CvMap@@QBEHXZ			; CvMap::getGridHeight
; Function compile flags: /Ogtpy
;	COMDAT ?getGridHeight@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridHeight@CvMap@@QBEHXZ PROC			; CvMap::getGridHeight, COMDAT
; _this$ = ecx

; 206  : 		return m_iGridHeight;

	mov	eax, DWORD PTR [ecx+4024]

; 207  : 	}

	ret	0
?getGridHeight@CvMap@@QBEHXZ ENDP			; CvMap::getGridHeight
_TEXT	ENDS
PUBLIC	?isWrapX@CvMap@@QBE_NXZ				; CvMap::isWrapX
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapX@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapX@CvMap@@QBE_NXZ PROC				; CvMap::isWrapX, COMDAT
; _this$ = ecx

; 228  : 		return m_bWrapX;

	mov	al, BYTE PTR [ecx+4056]

; 229  : 	}

	ret	0
?isWrapX@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapX
_TEXT	ENDS
PUBLIC	?isWrapY@CvMap@@QBE_NXZ				; CvMap::isWrapY
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapY@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapY@CvMap@@QBE_NXZ PROC				; CvMap::isWrapY, COMDAT
; _this$ = ecx

; 233  : 		return m_bWrapY;

	mov	al, BYTE PTR [ecx+4057]

; 234  : 	}

	ret	0
?isWrapY@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapY
_TEXT	ENDS
PUBLIC	?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z		; CvTeam::getTeam
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvteam.h
;	COMDAT ?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z PROC		; CvTeam::getTeam, COMDAT

; 29   : 		CvAssertMsg(eTeam != NO_TEAM, "eTeam is not assigned a valid value");
; 30   : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is not assigned a valid value");
; 31   : 		return m_aTeams[eTeam];

	mov	eax, DWORD PTR _eTeam$[esp-4]
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams

; 32   : 	}

	ret	0
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z ENDP		; CvTeam::getTeam
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@ABV0@@Z			; CvString::CvString
; Function compile flags: /Ogtpy
;	COMDAT ??0CvString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CvString@@QAE@ABV0@@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@ABV0@@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 727  : 		}

	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QBEABHI@Z ; std::vector<int,std::allocator<int> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QBEABHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@HV?$allocator@H@std@@@std@@QBEABHI@Z PROC	; std::vector<int,std::allocator<int> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 771  : 		}

	ret	4
??A?$vector@HV?$allocator@H@std@@@std@@QBEABHI@Z ENDP	; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z PROC ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 771  : 		}

	ret	4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ENDP ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::~_Container_base_aux_alloc_empty<std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::~_Container_base_aux_alloc_empty<std::allocator<int> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::~_Container_base_aux_alloc_empty<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T233979 = -80						; size = 28
$T233978 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233979[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T233978[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T233979[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T233978[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T233978[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233978[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T233978[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN13@Xlen@6:
$LN12@Xlen@6:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T233979[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T233978[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::_Container_base_aux_alloc_empty<std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::_Container_base_aux_alloc_empty<std::allocator<int> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<int> >::_Container_base_aux_alloc_empty<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 1073741823				; 3fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
PUBLIC	??$?6H@FDataStream@@QAEAAV0@ABH@Z		; FDataStream::operator<<<int>
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?6H@FDataStream@@QAEAAV0@ABH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6H@FDataStream@@QAEAAV0@ABH@Z PROC			; FDataStream::operator<<<int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6H@FDataStream@@QAEAAV0@ABH@Z ENDP			; FDataStream::operator<<<int>
_TEXT	ENDS
PUBLIC	??$?5H@FDataStream@@QAEAAV0@AAH@Z		; FDataStream::operator>><int>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5H@FDataStream@@QAEAAV0@AAH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5H@FDataStream@@QAEAAV0@AAH@Z PROC			; FDataStream::operator>><int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5H@FDataStream@@QAEAAV0@AAH@Z ENDP			; FDataStream::operator>><int>
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ		; FAutoVariable<int,CvCity>::operator int const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ
_TEXT	SEGMENT
??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ PROC		; FAutoVariable<int,CvCity>::operator int const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ ENDP		; FAutoVariable<int,CvCity>::operator int const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ	; FAutoVariable<bool,CvPlayer>::operator bool const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ
_TEXT	SEGMENT
??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ PROC	; FAutoVariable<bool,CvPlayer>::operator bool const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ ENDP	; FAutoVariable<bool,CvPlayer>::operator bool const &
_TEXT	ENDS
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T234035 = -12						; size = 12
$T234039 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx*4]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 4
	jae	SHORT $LN1@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T234039[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T234035[esp+16]
	mov	DWORD PTR $T234039[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T234035[esp+16]
	push	ecx
	mov	DWORD PTR $T234035[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate@6:
$LN8@Allocate@6:
	int	3
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAH@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAH@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 84   : 	explicit _Vector_const_iterator(_Tptr _Ptr)

	mov	eax, ecx

; 85   : 		{	// construct with pointer _Ptr
; 86   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 87   : 		}

	ret	4
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAH@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==, COMDAT
; _this$ = ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
_TEXT	ENDS
PUBLIC	??$?5_N@FDataStream@@QAEAAV0@AA_N@Z		; FDataStream::operator>><bool>
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5_N@FDataStream@@QAEAAV0@AA_N@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5_N@FDataStream@@QAEAAV0@AA_N@Z PROC		; FDataStream::operator>><bool>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5_N@FDataStream@@QAEAAV0@AA_N@Z ENDP		; FDataStream::operator>><bool>
_TEXT	ENDS
PUBLIC	??$?6_N@FDataStream@@QAEAAV0@AB_N@Z		; FDataStream::operator<<<bool>
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6_N@FDataStream@@QAEAAV0@AB_N@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6_N@FDataStream@@QAEAAV0@AB_N@Z PROC		; FDataStream::operator<<<bool>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6_N@FDataStream@@QAEAAV0@AB_N@Z ENDP		; FDataStream::operator<<<bool>
_TEXT	ENDS
PUBLIC	??$?5VCvString@@@FDataStream@@QAEAAV0@AAVCvString@@@Z ; FDataStream::operator>><CvString>
EXTRN	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5VCvString@@@FDataStream@@QAEAAV0@AAVCvString@@@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5VCvString@@@FDataStream@@QAEAAV0@AAVCvString@@@Z PROC ; FDataStream::operator>><CvString>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5VCvString@@@FDataStream@@QAEAAV0@AAVCvString@@@Z ENDP ; FDataStream::operator>><CvString>
_TEXT	ENDS
PUBLIC	??$?6VCvString@@@FDataStream@@QAEAAV0@ABVCvString@@@Z ; FDataStream::operator<<<CvString>
EXTRN	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6VCvString@@@FDataStream@@QAEAAV0@ABVCvString@@@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6VCvString@@@FDataStream@@QAEAAV0@ABVCvString@@@Z PROC ; FDataStream::operator<<<CvString>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6VCvString@@@FDataStream@@QAEAAV0@ABVCvString@@@Z ENDP ; FDataStream::operator<<<CvString>
_TEXT	ENDS
PUBLIC	??$?5I@FDataStream@@QAEAAV0@AAI@Z		; FDataStream::operator>><unsigned int>
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5I@FDataStream@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5I@FDataStream@@QAEAAV0@AAI@Z PROC			; FDataStream::operator>><unsigned int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5I@FDataStream@@QAEAAV0@AAI@Z ENDP			; FDataStream::operator>><unsigned int>
_TEXT	ENDS
PUBLIC	??$?6I@FDataStream@@QAEAAV0@ABI@Z		; FDataStream::operator<<<unsigned int>
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6I@FDataStream@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6I@FDataStream@@QAEAAV0@ABI@Z PROC			; FDataStream::operator<<<unsigned int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6I@FDataStream@@QAEAAV0@ABI@Z ENDP			; FDataStream::operator<<<unsigned int>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z PROC ; std::_Ptr_cat<int *,int *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ENDP ; std::_Ptr_cat<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 242  : 	}

	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ; std::_Iter_random<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z PROC ; std::_Iter_random<int *,int *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ENDP ; std::_Iter_random<int *,int *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>, COMDAT

; 2495 : 
; 2496 :  #if _HAS_ITERATOR_DEBUGGING
; 2497 : 	_DEBUG_RANGE(_First, _Last);
; 2498 : 	if (_First != _Last)
; 2499 : 		_DEBUG_POINTER(_Dest);
; 2500 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2501 : 
; 2502 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi

; 2503 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2504 : 	_OutIt _Result = _Dest + _Off;

	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]

; 2505 : 	if (_Off > 0)

	test	eax, eax
	jle	SHORT $LN4@Copy_opt@4

; 2506 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN4@Copy_opt@4:
	pop	edi

; 2507 : 	return _Result;

	mov	eax, esi
	pop	esi

; 2508 : 	}

	ret	0
??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN3@capacity@6
	xor	eax, eax

; 636  : 		}

	ret	0
$LN3@capacity@6:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+12]
	sub	eax, edx
	sar	eax, 2

; 636  : 		}

	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-
; Function compile flags: /Ogtpy
;	COMDAT ??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-, COMDAT
; _this$ = ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[esp-4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 195  : 		}

	ret	4
??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	mov	eax, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 161  : 		_SCL_SECURE_VALIDATE_RANGE(
; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);
; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*4]
	add	DWORD PTR [eax], edx

; 165  : 		return (*this);
; 166  : 		}

	ret	4
??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=
_TEXT	ENDS
PUBLIC	??$_Fill@PAHH@std@@YAXPAH0ABH@Z			; std::_Fill<int *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAHH@std@@YAXPAH0ABH@Z PROC			; std::_Fill<int *,int>, COMDAT

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@Fill@5
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL3@Fill@5:

; 3159 : 		*_First = _Val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL3@Fill@5
	pop	esi
$LN1@Fill@5:

; 3160 : 	}

	ret	0
??$_Fill@PAHH@std@@YAXPAH0ABH@Z ENDP			; std::_Fill<int *,int>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ; std::_Move_cat<int *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z PROC ; std::_Move_cat<int *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ENDP ; std::_Move_cat<int *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>, COMDAT

; 2699 : 
; 2700 :  #if _HAS_ITERATOR_DEBUGGING
; 2701 : 	_DEBUG_RANGE(_First, _Last);
; 2702 : 	if (_First != _Last)
; 2703 : 		_DEBUG_POINTER(_Dest);
; 2704 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2705 : 
; 2706 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi

; 2707 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2708 : 	 * the memmove
; 2709 : 	 */
; 2710 : 	_OutIt _Result = _Dest - _Off;

	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx

; 2711 : 	if (_Off > 0)

	test	eax, eax
	jle	SHORT $LN4@Copy_backw@5

; 2712 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	push	ecx
	push	edx
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN4@Copy_backw@5:

; 2713 : 	return _Result;

	mov	eax, esi
	pop	esi

; 2714 : 	}

	ret	0
??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

	ret	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 3197 : 	for (; 0 < _Count; --_Count, ++_First)

	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jbe	SHORT $LN1@Fill_n@2
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
$LL3@Fill_n@2:

; 3198 : 		*_First = _Val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL3@Fill_n@2
	pop	esi
$LN1@Fill_n@2:

; 3199 : 	}

	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int *,int *,std::allocator<int> >, COMDAT

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]

; 150  : 	if (_Count > 0)

	test	eax, eax
	jbe	SHORT $LN4@Uninit_cop@2

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN4@Uninit_cop@2:
	pop	edi

; 152  : 	return (_Result);

	mov	eax, esi
	pop	esi

; 153  : 	}

	ret	0
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?GetLocalizedText@@YA?AVCvString@@PBD@Z		; GetLocalizedText
EXTRN	__imp_??1String@Localization@@UAE@XZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z:PROC
EXTRN	__imp_?Lookup@Localization@@YA?AVString@1@PBD@Z:PROC
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetLocalizedText@@YA?AVCvString@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$0
__ehfuncinfo$?GetLocalizedText@@YA?AVCvString@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ?GetLocalizedText@@YA?AVCvString@@PBD@Z
_TEXT	SEGMENT
_bytes$ = -100						; size = 4
$T234123 = -96						; size = 4
_text$ = -92						; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
?GetLocalizedText@@YA?AVCvString@@PBD@Z PROC		; GetLocalizedText, COMDAT

; 489  : {

	push	-1
	push	__ehhandler$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H

; 490  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[esp+96]
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	ecx, DWORD PTR _text$[esp+116]
	xor	ebx, ebx
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+128], ebx
	mov	DWORD PTR $T234123[esp+120], ebx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 491  : 
; 492  : 	size_t bytes = 0;
; 493  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[esp+116]
	push	edx
	lea	ecx, DWORD PTR _text$[esp+120]
	mov	DWORD PTR __$EHRec$[esp+128], 1
	mov	DWORD PTR _bytes$[esp+120], ebx
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z

; 494  : 	CvString str;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+108]
	mov	ecx, esi
	mov	edi, eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 495  : 	str.assign(szComposedString, bytes);
; 496  : 	return str;

	mov	eax, DWORD PTR _bytes$[esp+112]
	push	eax
	push	edi
	mov	ecx, esi
	mov	DWORD PTR $T234123[esp+120], 1
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
	lea	ecx, DWORD PTR _text$[esp+112]
	mov	BYTE PTR __$EHRec$[esp+120], bl
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 497  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+112]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 100				; 00000064H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$1:
	mov	eax, DWORD PTR $T234123[ebp]
	and	eax, 1
	je	$LN5@GetLocaliz
	and	DWORD PTR $T234123[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetLocaliz:
	ret	0
__ehhandler$?GetLocalizedText@@YA?AVCvString@@PBD@Z:
	mov	eax, OFFSET __ehfuncinfo$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLocalizedText@@YA?AVCvString@@PBD@Z ENDP		; GetLocalizedText
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z ; operator>>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z
_TEXT	SEGMENT
_iSpyState$ = -8					; size = 4
_uiVersion$ = -4					; size = 4
_iSpyRank$ = 8						; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z PROC	; operator>>, COMDAT

; 47   : {

	sub	esp, 8
	push	esi

; 48   : 	uint uiVersion;
; 49   : 	loadFrom >> uiVersion;

	mov	esi, DWORD PTR _loadFrom$[esp+8]
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+16]
	push	eax
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 50   : 
; 51   : 	loadFrom >> writeTo.m_iName;

	mov	edi, DWORD PTR _writeTo$[esp+12]
	push	edi
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 52   : 	int iSpyRank;
; 53   : 	loadFrom >> iSpyRank;

	lea	ecx, DWORD PTR _iSpyRank$[esp+12]
	push	ecx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 54   : 	writeTo.m_eRank = (CvSpyRank)iSpyRank;

	mov	edx, DWORD PTR _iSpyRank$[esp+12]

; 55   : 	loadFrom >> writeTo.m_iCityX;

	lea	eax, DWORD PTR [edi+4]
	push	eax
	mov	ecx, esi
	mov	DWORD PTR [edi+12], edx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 56   : 	loadFrom >> writeTo.m_iCityY;

	lea	ecx, DWORD PTR [edi+8]
	push	ecx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 57   : 
; 58   : 	int iSpyState;
; 59   : 	loadFrom >> iSpyState;

	lea	edx, DWORD PTR _iSpyState$[esp+16]
	push	edx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 60   : 	writeTo.m_eSpyState = (CvSpyState)iSpyState;

	mov	eax, DWORD PTR _iSpyState$[esp+16]

; 61   : 
; 62   : 	loadFrom >> writeTo.m_iReviveCounter;

	lea	ecx, DWORD PTR [edi+20]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR [edi+16], eax
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 63   : 	if (uiVersion >= 1)

	cmp	DWORD PTR _uiVersion$[esp+16], 1
	jb	SHORT $LN2@operator@3

; 64   : 	{
; 65   : 		loadFrom >> writeTo.m_bIsDiplomat;

	lea	edx, DWORD PTR [edi+24]
	push	edx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 66   : 	}
; 67   : 	else

	jmp	SHORT $LN1@operator@3
$LN2@operator@3:

; 68   : 	{
; 69   : 		writeTo.m_bIsDiplomat = false;

	mov	BYTE PTR [edi+24], 0
$LN1@operator@3:

; 70   : 	}
; 71   : 	
; 72   : 	loadFrom >> writeTo.m_bEvaluateReassignment;

	add	edi, 25					; 00000019H
	push	edi
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 73   : 	writeTo.m_bEvaluateReassignment = true;

	mov	BYTE PTR [edi], 1
	pop	edi

; 74   : 
; 75   : 	return loadFrom;

	mov	eax, esi
	pop	esi

; 76   : }

	add	esp, 8
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z ; operator<<
; Function compile flags: /Ogtpy
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z
_TEXT	SEGMENT
_uiVersion$ = -4					; size = 4
$T234169 = 8						; size = 4
$T234168 = 8						; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z PROC	; operator<<, COMDAT

; 80   : {

	push	ecx
	push	esi

; 81   : 	uint uiVersion = 1;
; 82   : 	saveTo << uiVersion;

	mov	esi, DWORD PTR _saveTo$[esp+4]
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+12]
	push	eax
	mov	ecx, esi
	mov	DWORD PTR _uiVersion$[esp+16], 1
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 83   : 
; 84   : 	saveTo << readFrom.m_iName;

	mov	edi, DWORD PTR _readFrom$[esp+8]
	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 85   : 	saveTo << (int)readFrom.m_eRank;

	mov	ecx, DWORD PTR [edi+12]
	lea	edx, DWORD PTR $T234168[esp+8]
	mov	DWORD PTR $T234168[esp+8], ecx
	push	edx
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 86   : 	saveTo << readFrom.m_iCityX;

	lea	eax, DWORD PTR [edi+4]
	push	eax
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 87   : 	saveTo << readFrom.m_iCityY;

	lea	ecx, DWORD PTR [edi+8]
	push	ecx
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 88   : 	saveTo << (int)readFrom.m_eSpyState;

	mov	edx, DWORD PTR [edi+16]
	lea	eax, DWORD PTR $T234169[esp+8]
	push	eax
	mov	ecx, esi
	mov	DWORD PTR $T234169[esp+12], edx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 89   : 	saveTo << readFrom.m_iReviveCounter;

	lea	ecx, DWORD PTR [edi+20]
	push	ecx
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 90   : 	saveTo << readFrom.m_bIsDiplomat;

	lea	edx, DWORD PTR [edi+24]
	push	edx
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 91   : 	saveTo << readFrom.m_bEvaluateReassignment;

	add	edi, 25					; 00000019H
	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write
	pop	edi

; 92   : 
; 93   : 	return saveTo;

	mov	eax, esi
	pop	esi

; 94   : }

	pop	ecx
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	?GetNextSpyName@CvPlayerEspionage@@QAEHXZ	; CvPlayerEspionage::GetNextSpyName
; Function compile flags: /Ogtpy
;	COMDAT ?GetNextSpyName@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
?GetNextSpyName@CvPlayerEspionage@@QAEHXZ PROC		; CvPlayerEspionage::GetNextSpyName, COMDAT
; _this$ = ecx

; 952  : 	CvAssertMsg((uint)m_iSpyListNameOrderIndex < m_aiSpyListNameOrder.size(), "m_iSpyListNameOrderIndex out of bounds probably because this civ doesn't have spy names.")
; 953  : 	if((uint)m_iSpyListNameOrderIndex >= m_aiSpyListNameOrder.size())

	mov	eax, DWORD PTR [ecx+248]
	sub	eax, DWORD PTR [ecx+244]
	mov	edx, DWORD PTR [ecx+256]
	sar	eax, 2
	cmp	edx, eax
	jb	SHORT $LN2@GetNextSpy

; 954  : 	{
; 955  : 		return -1;

	or	eax, -1

; 963  : 	}
; 964  : 	return iName;
; 965  : }

	ret	0
$LN2@GetNextSpy:

; 956  : 	}
; 957  : 
; 958  : 	int iName = m_aiSpyListNameOrder[m_iSpyListNameOrderIndex];

	mov	eax, DWORD PTR [ecx+244]
	mov	eax, DWORD PTR [eax+edx*4]
	push	esi

; 959  : 	m_iSpyListNameOrderIndex++;

	inc	edx
	mov	DWORD PTR [ecx+256], edx

; 960  : 	if(m_iSpyListNameOrderIndex >= (int)m_aiSpyListNameOrder.size())

	mov	esi, DWORD PTR [ecx+248]
	sub	esi, DWORD PTR [ecx+244]
	sar	esi, 2
	cmp	edx, esi
	pop	esi
	jl	SHORT $LN3@GetNextSpy

; 961  : 	{
; 962  : 		m_iSpyListNameOrderIndex = 0;

	mov	DWORD PTR [ecx+256], 0
$LN3@GetNextSpy:

; 963  : 	}
; 964  : 	return iName;
; 965  : }

	ret	0
?GetNextSpyName@CvPlayerEspionage@@QAEHXZ ENDP		; CvPlayerEspionage::GetNextSpyName
_TEXT	ENDS
PUBLIC	?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::IsSpyInCity
; Function compile flags: /Ogtpy
;	COMDAT ?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_uiSpyIndex$ = 8					; size = 4
?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::IsSpyInCity, COMDAT
; _this$ = ecx

; 970  : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "uiSpyIndex is out of bounds");
; 971  : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]

; 972  : 	{
; 973  : 		return false;

	jae	SHORT $LN2@IsSpyInCit

; 974  : 	}
; 975  : 
; 976  : 	if(m_aSpyList[uiSpyIndex].m_iCityX != -1 && m_aSpyList[uiSpyIndex].m_iCityY != -1)

	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*4]
	or	ecx, -1
	cmp	DWORD PTR [eax+4], ecx
	je	SHORT $LN2@IsSpyInCit
	cmp	DWORD PTR [eax+8], ecx
	je	SHORT $LN2@IsSpyInCit

; 977  : 	{
; 978  : 		return true;

	mov	al, 1

; 983  : 	}
; 984  : }

	ret	4
$LN2@IsSpyInCit:

; 979  : 	}
; 980  : 	else
; 981  : 	{
; 982  : 		return false;

	xor	al, al

; 983  : 	}
; 984  : }

	ret	4
?IsSpyInCity@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::IsSpyInCity
_TEXT	ENDS
PUBLIC	?IsDiplomat@CvPlayerEspionage@@QAE_NI@Z		; CvPlayerEspionage::IsDiplomat
; Function compile flags: /Ogtpy
;	COMDAT ?IsDiplomat@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_uiSpyIndex$ = 8					; size = 4
?IsDiplomat@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::IsDiplomat, COMDAT
; _this$ = ecx

; 1621 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1622 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN1@IsDiplomat

; 1623 : 	{
; 1624 : 		return false;

	xor	al, al

; 1628 : }

	ret	4
$LN1@IsDiplomat:

; 1625 : 	}
; 1626 : 
; 1627 : 	return m_aSpyList[uiSpyIndex].m_bIsDiplomat;

	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	mov	al, BYTE PTR [eax+edx*4+24]

; 1628 : }

	ret	4
?IsDiplomat@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::IsDiplomat
_TEXT	ENDS
PUBLIC	?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::IsSchmoozing
; Function compile flags: /Ogtpy
;	COMDAT ?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_uiSpyIndex$ = 8					; size = 4
?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::IsSchmoozing, COMDAT
; _this$ = ecx

; 1632 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1633 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN3@IsSchmoozi

; 1634 : 	{
; 1635 : 		return false;

	xor	al, al

; 1639 : 	{
; 1640 : 		return true;
; 1641 : 	}
; 1642 : 	else
; 1643 : 	{
; 1644 : 		return false;
; 1645 : 	}
; 1646 : }

	ret	4
$LN3@IsSchmoozi:

; 1636 : 	}
; 1637 : 
; 1638 : 	if (m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_SCHMOOZE)

	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+edx*4+16], 7
	sete	al

; 1639 : 	{
; 1640 : 		return true;
; 1641 : 	}
; 1642 : 	else
; 1643 : 	{
; 1644 : 		return false;
; 1645 : 	}
; 1646 : }

	ret	4
?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::IsSchmoozing
_TEXT	ENDS
PUBLIC	?GetNumSpies@CvPlayerEspionage@@QAEHXZ		; CvPlayerEspionage::GetNumSpies
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumSpies@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
?GetNumSpies@CvPlayerEspionage@@QAEHXZ PROC		; CvPlayerEspionage::GetNumSpies, COMDAT
; _this$ = ecx

; 2216 : 	return m_aSpyList.size();

	mov	eax, DWORD PTR [ecx+4]

; 2217 : }

	ret	0
?GetNumSpies@CvPlayerEspionage@@QAEHXZ ENDP		; CvPlayerEspionage::GetNumSpies
_TEXT	ENDS
PUBLIC	?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ	; CvPlayerEspionage::GetNumAliveSpies
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ PROC	; CvPlayerEspionage::GetNumAliveSpies, COMDAT
; _this$ = ecx

; 2221 : {

	mov	edx, DWORD PTR [ecx+4]

; 2222 : 	int iCount = 0;

	xor	eax, eax

; 2223 : 	for(uint ui = 0; ui < m_aSpyList.size(); ui++)

	test	edx, edx
	jbe	SHORT $LN2@GetNumAliv
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	npad	2
$LL4@GetNumAliv:

; 2224 : 	{
; 2225 : 		if(m_aSpyList[ui].m_eSpyState != SPY_STATE_DEAD)

	cmp	DWORD PTR [ecx], 8
	je	SHORT $LN3@GetNumAliv

; 2226 : 		{
; 2227 : 			iCount++;

	inc	eax
$LN3@GetNumAliv:

; 2223 : 	for(uint ui = 0; ui < m_aSpyList.size(); ui++)

	add	ecx, 28					; 0000001cH
	sub	edx, 1
	jne	SHORT $LL4@GetNumAliv
$LN2@GetNumAliv:

; 2228 : 		}
; 2229 : 	}
; 2230 : 
; 2231 : 	return iCount;
; 2232 : }

	ret	0
?GetNumAliveSpies@CvPlayerEspionage@@QAEHXZ ENDP	; CvPlayerEspionage::GetNumAliveSpies
_TEXT	ENDS
PUBLIC	?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ	; CvPlayerEspionage::GetNumAssignedSpies
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ PROC	; CvPlayerEspionage::GetNumAssignedSpies, COMDAT
; _this$ = ecx

; 2236 : {

	push	esi

; 2237 : 	int iCount = 0;
; 2238 : 	for(uint ui = 0; ui < m_aSpyList.size(); ui++)

	mov	esi, DWORD PTR [ecx+4]
	xor	eax, eax
	xor	edx, edx
	test	esi, esi
	jbe	SHORT $LN3@GetNumAssi
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 4
$LL5@GetNumAssi:

; 2239 : 	{
; 2240 : 		if(m_aSpyList[ui].m_eSpyState == SPY_STATE_DEAD)

	cmp	DWORD PTR [ecx+12], 8
	je	SHORT $LN4@GetNumAssi

; 2241 : 		{
; 2242 : 			continue;
; 2243 : 		}
; 2244 : 
; 2245 : 		if(IsSpyInCity(ui))

	cmp	edx, esi
	jae	SHORT $LN4@GetNumAssi
	cmp	DWORD PTR [ecx], -1
	je	SHORT $LN4@GetNumAssi
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN4@GetNumAssi

; 2246 : 		{
; 2247 : 			iCount++;

	inc	eax
$LN4@GetNumAssi:

; 2237 : 	int iCount = 0;
; 2238 : 	for(uint ui = 0; ui < m_aSpyList.size(); ui++)

	inc	edx
	add	ecx, 28					; 0000001cH
	cmp	edx, esi
	jb	SHORT $LL5@GetNumAssi
$LN3@GetNumAssi:
	pop	esi

; 2248 : 		}
; 2249 : 	}
; 2250 : 
; 2251 : 	return iCount;
; 2252 : }

	ret	0
?GetNumAssignedSpies@CvPlayerEspionage@@QAEHXZ ENDP	; CvPlayerEspionage::GetNumAssignedSpies
_TEXT	ENDS
PUBLIC	?GetNumUnassignedSpies@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNumUnassignedSpies
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumUnassignedSpies@CvPlayerEspionage@@QAEHXZ
_TEXT	SEGMENT
?GetNumUnassignedSpies@CvPlayerEspionage@@QAEHXZ PROC	; CvPlayerEspionage::GetNumUnassignedSpies, COMDAT
; _this$ = ecx

; 2256 : {

	push	esi

; 2257 : 	return GetNumAliveSpies() - GetNumAssignedSpies();

	mov	esi, DWORD PTR [ecx+4]
	xor	eax, eax
	push	edi
	test	esi, esi
	jbe	SHORT $LN4@GetNumUnas
	mov	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	mov	edi, esi
$LL6@GetNumUnas:
	cmp	DWORD PTR [edx], 8
	je	SHORT $LN5@GetNumUnas
	inc	eax
$LN5@GetNumUnas:
	add	edx, 28					; 0000001cH
	sub	edi, 1
	jne	SHORT $LL6@GetNumUnas
$LN4@GetNumUnas:
	xor	edi, edi
	xor	edx, edx
	test	esi, esi
	jbe	SHORT $LN15@GetNumUnas
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 4
	npad	3
$LL17@GetNumUnas:
	cmp	DWORD PTR [ecx+12], 8
	je	SHORT $LN16@GetNumUnas
	cmp	edx, esi
	jae	SHORT $LN16@GetNumUnas
	cmp	DWORD PTR [ecx], -1
	je	SHORT $LN16@GetNumUnas
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN16@GetNumUnas
	inc	edi
$LN16@GetNumUnas:
	inc	edx
	add	ecx, 28					; 0000001cH
	cmp	edx, esi
	jb	SHORT $LL17@GetNumUnas
$LN15@GetNumUnas:
	sub	eax, edi
	pop	edi
	pop	esi

; 2258 : }

	ret	0
?GetNumUnassignedSpies@CvPlayerEspionage@@QAEHXZ ENDP	; CvPlayerEspionage::GetNumUnassignedSpies
_TEXT	ENDS
PUBLIC	?IsTechStealable@CvPlayerEspionage@@QAE_NW4PlayerTypes@@W4TechTypes@@@Z ; CvPlayerEspionage::IsTechStealable
; Function compile flags: /Ogtpy
;	COMDAT ?IsTechStealable@CvPlayerEspionage@@QAE_NW4PlayerTypes@@W4TechTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_eTech$ = 12						; size = 4
?IsTechStealable@CvPlayerEspionage@@QAE_NW4PlayerTypes@@W4TechTypes@@@Z PROC ; CvPlayerEspionage::IsTechStealable, COMDAT
; _this$ = ecx

; 2317 : 	CvAssertMsg((uint)ePlayer < m_aaPlayerStealableTechList.size(), "ePlayer out of bounds");
; 2318 : 	if((uint)ePlayer >= m_aaPlayerStealableTechList.size())

	mov	edx, DWORD PTR _ePlayer$[esp-4]
	cmp	edx, DWORD PTR [ecx+264]
	jb	SHORT $LN5@IsTechStea

; 2319 : 	{
; 2320 : 		return false;

	xor	al, al

; 2332 : }

	ret	8
$LN5@IsTechStea:

; 2321 : 	}
; 2322 : 
; 2323 : 	for(uint ui = 0; ui < m_aaPlayerStealableTechList[ePlayer].size(); ui++)

	mov	ecx, DWORD PTR [ecx+260]
	lea	edx, DWORD PTR [edx+edx*4]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edx+4]
	xor	eax, eax
	push	esi
	test	ecx, ecx
	jbe	SHORT $LN2@IsTechStea
	mov	edx, DWORD PTR [edx]
	mov	esi, DWORD PTR _eTech$[esp]
	npad	3
$LL4@IsTechStea:

; 2324 : 	{
; 2325 : 		if(m_aaPlayerStealableTechList[ePlayer][ui] == eTech)

	cmp	DWORD PTR [edx], esi
	je	SHORT $LN19@IsTechStea
	inc	eax
	add	edx, 4
	cmp	eax, ecx
	jb	SHORT $LL4@IsTechStea
$LN2@IsTechStea:

; 2328 : 		}
; 2329 : 	}
; 2330 : 
; 2331 : 	return false;

	xor	al, al
	pop	esi

; 2332 : }

	ret	8
$LN19@IsTechStea:

; 2326 : 		{
; 2327 : 			return true;

	mov	al, 1
	pop	esi

; 2332 : }

	ret	8
?IsTechStealable@CvPlayerEspionage@@QAE_NW4PlayerTypes@@W4TechTypes@@@Z ENDP ; CvPlayerEspionage::IsTechStealable
_TEXT	ENDS
PUBLIC	?GetNumTechsToSteal@CvPlayerEspionage@@QAEHW4PlayerTypes@@@Z ; CvPlayerEspionage::GetNumTechsToSteal
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumTechsToSteal@CvPlayerEspionage@@QAEHW4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?GetNumTechsToSteal@CvPlayerEspionage@@QAEHW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::GetNumTechsToSteal, COMDAT
; _this$ = ecx

; 2337 : 	CvAssertMsg((uint)ePlayer < m_aiNumTechsToStealList.size(), "ePlayer out of bounds");
; 2338 : 	if((uint)ePlayer >= m_aiNumTechsToStealList.size())

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	cmp	eax, DWORD PTR [ecx+720]
	jb	SHORT $LN1@GetNumTech

; 2339 : 	{
; 2340 : 		return -1;

	or	eax, -1

; 2344 : }

	ret	4
$LN1@GetNumTech:

; 2341 : 	}
; 2342 : 
; 2343 : 	return m_aiNumTechsToStealList[ePlayer];

	mov	ecx, DWORD PTR [ecx+716]
	mov	eax, DWORD PTR [ecx+eax*4]

; 2344 : }

	ret	4
?GetNumTechsToSteal@CvPlayerEspionage@@QAEHW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::GetNumTechsToSteal
_TEXT	ENDS
PUBLIC	??0IntrigueNotificationMessage@@QAE@XZ		; IntrigueNotificationMessage::IntrigueNotificationMessage
; Function compile flags: /Ogtpy
;	COMDAT ??0IntrigueNotificationMessage@@QAE@XZ
_TEXT	SEGMENT
??0IntrigueNotificationMessage@@QAE@XZ PROC		; IntrigueNotificationMessage::IntrigueNotificationMessage, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+36]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0IntrigueNotificationMessage@@QAE@XZ ENDP		; IntrigueNotificationMessage::IntrigueNotificationMessage
_TEXT	ENDS
PUBLIC	??1IntrigueNotificationMessage@@QAE@XZ		; IntrigueNotificationMessage::~IntrigueNotificationMessage
; Function compile flags: /Ogtpy
;	COMDAT ??1IntrigueNotificationMessage@@QAE@XZ
_TEXT	SEGMENT
??1IntrigueNotificationMessage@@QAE@XZ PROC		; IntrigueNotificationMessage::~IntrigueNotificationMessage, COMDAT
; _this$ = ecx
	add	ecx, 36					; 00000024H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1IntrigueNotificationMessage@@QAE@XZ ENDP		; IntrigueNotificationMessage::~IntrigueNotificationMessage
_TEXT	ENDS
PUBLIC	?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z ; CvPlayerEspionage::GetRecentIntrigueInfo
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Ogtpy
;	COMDAT ?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_eTargetPlayer$ = 8					; size = 4
?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z PROC ; CvPlayerEspionage::GetRecentIntrigueInfo, COMDAT
; _this$ = ecx

; 3517 : {

	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 3518 : 	/// GetRecentIntriguePlotter: returns the player id of whoever is currently plotting against this player
; 3519 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [esi+1284]
	sub	ecx, DWORD PTR [esi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	push	edi
	shr	eax, 31					; 0000001fH
	xor	edi, edi
	add	eax, edx
	je	SHORT $LN4@GetRecentI
	xor	ebp, ebp
	npad	7
$LL6@GetRecentI:

; 3520 : 	{
; 3521 : 		// if we've already shared this information, don't count it
; 3522 : 		if(m_aIntrigueNotificationMessages[ui].m_bShared)

	mov	ecx, DWORD PTR [esi+1280]
	cmp	BYTE PTR [ecx+ebp+64], 0
	lea	ebx, DWORD PTR [ecx+ebp]
	jne	SHORT $LN5@GetRecentI

; 3523 : 		{
; 3524 : 			continue;
; 3525 : 		}
; 3526 : 
; 3527 : 		// if the message isn't about the target, ignore
; 3528 : 		if(m_aIntrigueNotificationMessages[ui].m_eTargetPlayer != eTargetPlayer)

	mov	edx, DWORD PTR _eTargetPlayer$[esp+12]
	cmp	DWORD PTR [ebx+8], edx
	jne	SHORT $LN5@GetRecentI

; 3529 : 		{
; 3530 : 			continue;
; 3531 : 		}
; 3532 : 
; 3533 : 		// if the message is too long ago, ignore
; 3534 : 		if(m_aIntrigueNotificationMessages[ui].m_iTurnNum < (GC.getGame().getGameTurn() - iIntrigueTurnsValid))  // todo: make 5 an xml global

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	sub	eax, 5
	cmp	DWORD PTR [ebx+24], eax
	jge	SHORT $LN1@GetRecentI
$LN5@GetRecentI:

; 3518 : 	/// GetRecentIntriguePlotter: returns the player id of whoever is currently plotting against this player
; 3519 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [esi+1284]
	sub	ecx, DWORD PTR [esi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	inc	edi
	add	eax, edx
	add	ebp, 68					; 00000044H
	cmp	edi, eax
	jb	SHORT $LL6@GetRecentI
$LN4@GetRecentI:
	pop	edi
	pop	esi
	pop	ebp

; 3540 : 	}
; 3541 : 
; 3542 : 	return NULL;

	xor	eax, eax
	pop	ebx

; 3543 : }

	ret	4
$LN1@GetRecentI:

; 3535 : 		{
; 3536 : 			continue;
; 3537 : 		}
; 3538 : 
; 3539 : 		return &(m_aIntrigueNotificationMessages[ui]);

	mov	edx, DWORD PTR [esi+1280]
	mov	ecx, edi
	shl	ecx, 4
	add	ecx, edi
	pop	edi
	pop	esi
	pop	ebp
	lea	eax, DWORD PTR [edx+ecx*4]
	pop	ebx

; 3543 : }

	ret	4
?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::GetRecentIntrigueInfo
_TEXT	ENDS
PUBLIC	?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ ; CvPlayerEspionage::GetLogFileName
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ$0
__ehfuncinfo$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ
_TEXT	SEGMENT
$T234472 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ PROC ; CvPlayerEspionage::GetLogFileName, COMDAT
; _this$ = ecx

; 3681 : {

	push	-1
	push	__ehhandler$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	DWORD PTR $T234472[esp+20], 0

; 3682 : 	CvString strLogName;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+16]
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+28], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3683 : 	strLogName = "EspionageLog.csv";
; 3684 : 	return strLogName;

	push	OFFSET $SG224635
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+32], 0
	mov	DWORD PTR $T234472[esp+24], 1
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 3685 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ$0:
	mov	eax, DWORD PTR $T234472[ebp]
	and	eax, 1
	je	$LN4@GetLogFile
	and	DWORD PTR $T234472[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN4@GetLogFile:
	ret	0
__ehhandler$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ:
	mov	eax, OFFSET __ehfuncinfo$?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ ENDP ; CvPlayerEspionage::GetLogFileName
PUBLIC	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$3
__ehfuncinfo$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z
_TEXT	SEGMENT
_strBaseString$224642 = -124				; size = 28
_strOutBuf$224641 = -96					; size = 28
$T234492 = -68						; size = 28
$T234493 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_strMsg$ = 8						; size = 4
?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z PROC ; CvPlayerEspionage::LogEspionageMsg, COMDAT
; _this$ = ecx

; 3688 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 112				; 00000070H
	push	edi
	mov	edi, ecx

; 3689 : 	if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN1@LogEspiona
	push	esi

; 3690 : 	{
; 3691 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$224641[esp+132]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3692 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$224642[esp+132]
	mov	DWORD PTR __$EHRec$[esp+140], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[esp+140], 1

; 3693 : 		FILogFile* pLog;
; 3694 : 
; 3695 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	esi, eax
	lea	eax, DWORD PTR $T234492[esp+132]
	push	eax
	mov	ecx, edi
	call	?GetLogFileName@CvPlayerEspionage@@QBE?AVCvString@@XZ ; CvPlayerEspionage::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+140], 2
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, esi
	call	eax
	lea	ecx, DWORD PTR $T234492[esp+132]
	mov	esi, eax
	mov	BYTE PTR __$EHRec$[esp+140], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3696 : 
; 3697 : 		// Get the leading info for this line
; 3698 : 		strBaseString.Format("%03d,", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$224642[esp+136]
	push	OFFSET $SG224645
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 3699 : 		strBaseString += m_pPlayer->getCivilizationShortDescription();

	mov	ecx, DWORD PTR [edi+1292]
	add	esp, 12					; 0000000cH
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strBaseString$224642[esp+136]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3700 : 		strBaseString += ",";

	push	OFFSET $SG224646
	lea	ecx, DWORD PTR _strBaseString$224642[esp+136]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 3701 : 		strOutBuf = strBaseString + strMsg;

	mov	edx, DWORD PTR _strMsg$[esp+128]
	push	edx
	lea	eax, DWORD PTR _strBaseString$224642[esp+136]
	push	eax
	lea	ecx, DWORD PTR $T234493[esp+140]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+140], 3
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$224641[esp+136]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T234493[esp+132]
	mov	BYTE PTR __$EHRec$[esp+140], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3702 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$224641[esp+132]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	esi
	call	eax
	add	esp, 8

; 3703 : 	}

	lea	ecx, DWORD PTR _strBaseString$224642[esp+132]
	mov	BYTE PTR __$EHRec$[esp+140], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$224641[esp+132]
	mov	DWORD PTR __$EHRec$[esp+140], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	esi
$LN1@LogEspiona:

; 3704 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+128]
	pop	edi
	mov	DWORD PTR fs:0, ecx
	add	esp, 124				; 0000007cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$224641[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$224642[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$2:
	lea	ecx, DWORD PTR $T234492[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z$3:
	lea	ecx, DWORD PTR $T234493[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ENDP ; CvPlayerEspionage::LogEspionageMsg
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvPlayerEspionage@@@Z ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4BuildingTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4TechTypes@@@Z:PROC ; operator<<
; Function compile flags: /Ogtpy
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvPlayerEspionage@@@Z
_TEXT	SEGMENT
_uiVersion$ = -4					; size = 4
tv313 = 8						; size = 4
$T234554 = 8						; size = 4
$T234553 = 8						; size = 4
$T234552 = 8						; size = 4
$T234550 = 8						; size = 4
$T234549 = 8						; size = 4
$T234548 = 8						; size = 4
_uiCiv$224744 = 8					; size = 4
$T234546 = 8						; size = 4
$T234545 = 8						; size = 4
$T234544 = 8						; size = 4
_saveTo$ = 8						; size = 4
$T234551 = 12						; size = 4
$T234547 = 12						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvPlayerEspionage@@@Z PROC ; operator<<, COMDAT

; 3821 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 3822 : 	uint uiVersion = 0;
; 3823 : 	saveTo << uiVersion;

	mov	edi, DWORD PTR _saveTo$[esp+16]
	lea	eax, DWORD PTR _uiVersion$[esp+20]
	xor	ebp, ebp
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _uiVersion$[esp+24], ebp
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3824 : 
; 3825 : 	saveTo << readFrom.m_aSpyList.size();

	mov	esi, DWORD PTR _readFrom$[esp+16]
	mov	ecx, DWORD PTR [esi+4]
	lea	edx, DWORD PTR $T234544[esp+16]
	mov	DWORD PTR $T234544[esp+16], ecx
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3826 : 	for(uint i = 0; i < readFrom.m_aSpyList.size(); i++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+4], ebp
	jbe	SHORT $LN28@operator@4
	npad	7
$LL30@operator@4:

; 3827 : 	{
; 3828 : 		saveTo << readFrom.m_aSpyList[i];

	mov	eax, DWORD PTR [esi]
	add	eax, ebp
	push	eax
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABVCvEspionageSpy@@@Z ; operator<<
	inc	ebx
	add	esp, 8
	add	ebp, 28					; 0000001cH
	cmp	ebx, DWORD PTR [esi+4]
	jb	SHORT $LL30@operator@4
$LN28@operator@4:

; 3829 : 	}
; 3830 : 
; 3831 : 	saveTo << readFrom.m_aiSpyListNameOrder.size();

	mov	ecx, DWORD PTR [esi+248]
	sub	ecx, DWORD PTR [esi+244]
	lea	edx, DWORD PTR $T234545[esp+16]
	sar	ecx, 2
	mov	DWORD PTR $T234545[esp+16], ecx
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3832 : 	for(uint ui = 0; ui < readFrom.m_aiSpyListNameOrder.size(); ui++)

	mov	eax, DWORD PTR [esi+248]
	sub	eax, DWORD PTR [esi+244]
	xor	ebp, ebp
	sar	eax, 2
	xor	ebx, ebx
	test	eax, eax
	jbe	SHORT $LN25@operator@4
	npad	3
$LL27@operator@4:
	mov	ecx, DWORD PTR [esi+244]
	lea	edx, DWORD PTR [ecx+ebx*4]

; 3833 : 	{
; 3834 : 		saveTo << readFrom.m_aiSpyListNameOrder[ui];

	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	mov	eax, DWORD PTR [esi+248]
	sub	eax, DWORD PTR [esi+244]
	inc	ebx
	sar	eax, 2
	cmp	ebx, eax
	jb	SHORT $LL27@operator@4
$LN25@operator@4:

; 3835 : 	}
; 3836 : 
; 3837 : 	saveTo << readFrom.m_iSpyListNameOrderIndex;

	lea	ecx, DWORD PTR [esi+256]
	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3838 : 
; 3839 : 	saveTo << readFrom.m_aaPlayerStealableTechList.size();

	mov	edx, DWORD PTR [esi+264]
	lea	eax, DWORD PTR $T234546[esp+16]
	push	eax
	mov	ecx, edi
	mov	DWORD PTR $T234546[esp+20], edx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3840 : 	for(uint uiCiv = 0; uiCiv < readFrom.m_aaPlayerStealableTechList.size(); uiCiv++)

	mov	DWORD PTR _uiCiv$224744[esp+16], ebp
	cmp	DWORD PTR [esi+264], ebp
	jbe	SHORT $LN22@operator@4
	mov	eax, DWORD PTR [esi+260]
	npad	5
$LL201@operator@4:

; 3841 : 	{
; 3842 : 		saveTo << readFrom.m_aaPlayerStealableTechList[uiCiv].size();

	mov	ecx, DWORD PTR [eax+ebp+4]
	lea	edx, DWORD PTR $T234547[esp+16]
	mov	DWORD PTR $T234547[esp+16], ecx
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3843 : 		for(uint uiTech = 0; uiTech < readFrom.m_aaPlayerStealableTechList[uiCiv].size(); uiTech++)

	mov	eax, DWORD PTR [esi+260]
	xor	ebx, ebx
	cmp	DWORD PTR [eax+ebp+4], ebx
	lea	ecx, DWORD PTR [eax+ebp]
	jbe	SHORT $LN23@operator@4
$LL21@operator@4:
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+ebx*4]

; 3844 : 		{
; 3845 : 			saveTo << readFrom.m_aaPlayerStealableTechList[uiCiv][uiTech];

	push	ecx
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4TechTypes@@@Z ; operator<<
	mov	eax, DWORD PTR [esi+260]
	inc	ebx
	lea	ecx, DWORD PTR [eax+ebp]
	add	esp, 8
	cmp	ebx, DWORD PTR [ecx+4]
	jb	SHORT $LL21@operator@4
$LN23@operator@4:

; 3840 : 	for(uint uiCiv = 0; uiCiv < readFrom.m_aaPlayerStealableTechList.size(); uiCiv++)

	mov	ecx, DWORD PTR _uiCiv$224744[esp+16]
	inc	ecx
	add	ebp, 20					; 00000014H
	mov	DWORD PTR _uiCiv$224744[esp+16], ecx
	cmp	ecx, DWORD PTR [esi+264]
	jb	SHORT $LL201@operator@4
$LN22@operator@4:

; 3846 : 		}
; 3847 : 	}
; 3848 : 
; 3849 : 	saveTo << readFrom.m_aiNumTechsToStealList.size();

	mov	edx, DWORD PTR [esi+720]
	lea	eax, DWORD PTR $T234548[esp+16]
	push	eax
	mov	ecx, edi
	mov	DWORD PTR $T234548[esp+20], edx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3850 : 	for(uint uiCiv = 0; uiCiv < readFrom.m_aiNumTechsToStealList.size(); uiCiv++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+720], ebx
	jbe	SHORT $LN16@operator@4
	npad	9
$LL18@operator@4:
	mov	ecx, DWORD PTR [esi+716]
	lea	edx, DWORD PTR [ecx+ebx*4]

; 3851 : 	{
; 3852 : 		saveTo << readFrom.m_aiNumTechsToStealList[uiCiv];

	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+720]
	jb	SHORT $LL18@operator@4
$LN16@operator@4:

; 3853 : 	}
; 3854 : 
; 3855 : 	saveTo << MAX_MAJOR_CIVS;

	lea	eax, DWORD PTR $T234549[esp+16]
	mov	ebp, 22					; 00000016H
	push	eax
	mov	ecx, edi
	mov	DWORD PTR $T234549[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	ebx, DWORD PTR [esi+820]
$LL15@operator@4:

; 3856 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 3857 : 	{
; 3858 : 		saveTo << readFrom.m_aiMaxTechCost[ui];

	push	ebx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	ebx, 4
	sub	ebp, 1
	jne	SHORT $LL15@operator@4

; 3859 : 	}
; 3860 : 
; 3861 : 	saveTo << MAX_MAJOR_CIVS;

	lea	ecx, DWORD PTR $T234550[esp+16]
	push	ecx
	mov	ebp, 22					; 00000016H
	mov	ecx, edi
	mov	DWORD PTR $T234550[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	ebx, DWORD PTR [esi+912]
	mov	DWORD PTR tv313[esp+16], ebp
$LL200@operator@4:

; 3863 : 	{
; 3864 : 		saveTo << readFrom.m_aHeistLocations[uiCiv].size();

	mov	edx, DWORD PTR [ebx+4]
	sub	edx, DWORD PTR [ebx]
	lea	eax, DWORD PTR $T234551[esp+16]
	sar	edx, 3
	push	eax
	mov	ecx, edi
	mov	DWORD PTR $T234551[esp+20], edx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3865 : 		for(uint ui = 0; ui < readFrom.m_aHeistLocations[uiCiv].size(); ui++)

	mov	ecx, DWORD PTR [ebx+4]
	sub	ecx, DWORD PTR [ebx]
	xor	ebp, ebp
	sar	ecx, 3
	test	ecx, ecx
	jbe	SHORT $LN11@operator@4
	npad	6
$LL9@operator@4:
	mov	edx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [ebp*8]
	add	edx, eax

; 3866 : 		{
; 3867 : 			saveTo << readFrom.m_aHeistLocations[uiCiv][ui].m_iX;

	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3868 : 			saveTo << readFrom.m_aHeistLocations[uiCiv][ui].m_iY;

	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [eax+ebp*8+4]
	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	mov	edx, DWORD PTR [ebx+4]
	sub	edx, DWORD PTR [ebx]
	inc	ebp
	sar	edx, 3
	cmp	ebp, edx
	jb	SHORT $LL9@operator@4
$LN11@operator@4:

; 3862 : 	for(uint uiCiv = 0; uiCiv < MAX_MAJOR_CIVS; uiCiv++)

	add	ebx, 16					; 00000010H
	sub	DWORD PTR tv313[esp+16], 1
	jne	SHORT $LL200@operator@4

; 3869 : 		}
; 3870 : 	}
; 3871 : 
; 3872 : 	saveTo << readFrom.m_aSpyNotificationMessages.size();

	mov	ecx, DWORD PTR [esi+1268]
	sub	ecx, DWORD PTR [esi+1264]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR $T234552[esp+16]
	add	eax, edx
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR $T234552[esp+20], eax
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3873 : 	for(uint ui = 0; ui < readFrom.m_aSpyNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [esi+1268]
	sub	ecx, DWORD PTR [esi+1264]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	xor	ebp, ebp
	add	eax, edx
	je	$LN4@operator@4

; 3869 : 		}
; 3870 : 	}
; 3871 : 
; 3872 : 	saveTo << readFrom.m_aSpyNotificationMessages.size();

	xor	ebx, ebx
	npad	4
$LL6@operator@4:

; 3874 : 	{
; 3875 : #ifdef AUI_WARNING_FIXES
; 3876 : 		const SpyNotificationMessage& kSpyNotificationMessage = readFrom.m_aSpyNotificationMessages[ui];
; 3877 : 		saveTo << kSpyNotificationMessage.m_iCityX;
; 3878 : 		saveTo << kSpyNotificationMessage.m_iCityY;
; 3879 : 		saveTo << kSpyNotificationMessage.m_eAttackingPlayer;
; 3880 : 		saveTo << kSpyNotificationMessage.m_iSpyResult;
; 3881 : 		saveTo << kSpyNotificationMessage.m_eStolenTech;
; 3882 : #else
; 3883 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_iCityX;

	mov	ecx, DWORD PTR [esi+1264]
	add	ecx, ebx
	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3884 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_iCityY;

	mov	edx, DWORD PTR [esi+1264]
	lea	eax, DWORD PTR [edx+ebx+4]
	push	eax
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3885 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_eAttackingPlayer;

	mov	ecx, DWORD PTR [esi+1264]
	lea	edx, DWORD PTR [ecx+ebx+8]
	push	edx
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<

; 3886 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_iSpyResult;

	mov	eax, DWORD PTR [esi+1264]
	lea	ecx, DWORD PTR [eax+ebx+12]
	add	esp, 8
	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3887 : 		saveTo << readFrom.m_aSpyNotificationMessages[ui].m_eStolenTech;

	mov	edx, DWORD PTR [esi+1264]
	lea	eax, DWORD PTR [edx+ebx+16]
	push	eax
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4TechTypes@@@Z ; operator<<
	mov	ecx, DWORD PTR [esi+1268]
	sub	ecx, DWORD PTR [esi+1264]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	inc	ebp
	add	ecx, edx
	add	esp, 8
	add	ebx, 20					; 00000014H
	cmp	ebp, ecx
	jb	$LL6@operator@4
$LN4@operator@4:

; 3888 : #endif
; 3889 : 	}
; 3890 : 
; 3891 : 	saveTo << readFrom.m_aIntrigueNotificationMessages.size();

	mov	ecx, DWORD PTR [esi+1284]
	sub	ecx, DWORD PTR [esi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR $T234553[esp+16]
	add	eax, edx
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR $T234553[esp+20], eax
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 3892 : 	for(uint ui = 0; ui < readFrom.m_aIntrigueNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [esi+1284]
	sub	ecx, DWORD PTR [esi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	xor	ebp, ebp
	add	eax, edx
	je	$LN199@operator@4

; 3888 : #endif
; 3889 : 	}
; 3890 : 
; 3891 : 	saveTo << readFrom.m_aIntrigueNotificationMessages.size();

	xor	ebx, ebx
	npad	7
$LL3@operator@4:

; 3893 : 	{
; 3894 : #ifdef AUI_WARNING_FIXES
; 3895 : 		const IntrigueNotificationMessage& kIntrigueNotificationMessage = readFrom.m_aIntrigueNotificationMessages[ui];
; 3896 : 		saveTo << kIntrigueNotificationMessage.m_eDiscoveringPlayer;
; 3897 : 		saveTo << kIntrigueNotificationMessage.m_eSourcePlayer;
; 3898 : 		saveTo << kIntrigueNotificationMessage.m_eTargetPlayer;
; 3899 : 		saveTo << kIntrigueNotificationMessage.m_eBuilding;
; 3900 : 		saveTo << kIntrigueNotificationMessage.m_eProject;
; 3901 : 		saveTo << kIntrigueNotificationMessage.m_iIntrigueType;
; 3902 : 		saveTo << kIntrigueNotificationMessage.m_iTurnNum;
; 3903 : 		saveTo << kIntrigueNotificationMessage.m_iCityX;
; 3904 : 		saveTo << kIntrigueNotificationMessage.m_iCityY;
; 3905 : 		saveTo << kIntrigueNotificationMessage.m_strSpyName;
; 3906 : 		saveTo << kIntrigueNotificationMessage.m_bShared;
; 3907 : #else
; 3908 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_eDiscoveringPlayer;

	mov	ecx, DWORD PTR [esi+1280]
	add	ecx, ebx
	push	ecx
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<

; 3909 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_eSourcePlayer;

	mov	edx, DWORD PTR [esi+1280]
	lea	eax, DWORD PTR [ebx+edx+4]
	push	eax
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<

; 3910 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_eTargetPlayer;

	mov	ecx, DWORD PTR [esi+1280]
	lea	edx, DWORD PTR [ebx+ecx+8]
	push	edx
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4PlayerTypes@@@Z ; operator<<

; 3911 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_eBuilding;

	mov	eax, DWORD PTR [esi+1280]
	lea	ecx, DWORD PTR [ebx+eax+12]
	push	ecx
	push	edi
	call	??6@YAAAVFDataStream@@AAV0@ABW4BuildingTypes@@@Z ; operator<<

; 3912 : 		saveTo << (int)(readFrom.m_aIntrigueNotificationMessages[ui].m_eProject);

	mov	edx, DWORD PTR [esi+1280]
	mov	eax, DWORD PTR [ebx+edx+16]
	add	esp, 32					; 00000020H
	lea	ecx, DWORD PTR $T234554[esp+16]
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR $T234554[esp+20], eax
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3913 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_iIntrigueType;

	mov	edx, DWORD PTR [esi+1280]
	lea	eax, DWORD PTR [ebx+edx+20]
	push	eax
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3914 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_iTurnNum;

	mov	ecx, DWORD PTR [esi+1280]
	lea	edx, DWORD PTR [ebx+ecx+24]
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3915 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_iCityX;

	mov	eax, DWORD PTR [esi+1280]
	lea	ecx, DWORD PTR [ebx+eax+28]
	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3916 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_iCityY;

	mov	edx, DWORD PTR [esi+1280]
	lea	eax, DWORD PTR [ebx+edx+32]
	push	eax
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3917 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_strSpyName;

	mov	ecx, DWORD PTR [esi+1280]
	lea	edx, DWORD PTR [ebx+ecx+36]
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 3918 : 		saveTo << readFrom.m_aIntrigueNotificationMessages[ui].m_bShared;

	mov	eax, DWORD PTR [esi+1280]
	lea	ecx, DWORD PTR [ebx+eax+64]
	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write
	mov	ecx, DWORD PTR [esi+1284]
	sub	ecx, DWORD PTR [esi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	inc	ebp
	add	eax, edx
	add	ebx, 68					; 00000044H
	cmp	ebp, eax
	jb	$LL3@operator@4
$LN199@operator@4:

; 3919 : #endif
; 3920 : 	}
; 3921 : 
; 3922 : 	return saveTo;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3923 : }

	pop	ecx
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvPlayerEspionage@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	?Reset@CvCityEspionage@@QAEXXZ			; CvCityEspionage::Reset
; Function compile flags: /Ogtpy
;	COMDAT ?Reset@CvCityEspionage@@QAEXXZ
_TEXT	SEGMENT
?Reset@CvCityEspionage@@QAEXXZ PROC			; CvCityEspionage::Reset, COMDAT
; _this$ = ecx

; 3957 : {

	push	esi

; 3958 : 	m_pCity = NULL;

	xor	esi, esi
	mov	DWORD PTR [ecx], esi
	lea	eax, DWORD PTR [ecx+92]
	lea	edx, DWORD PTR [esi+22]
	or	ecx, -1
	npad	2
$LL3@Reset:

; 3959 : 
; 3960 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 3961 : 	{
; 3962 : 		m_aiSpyAssignment[ui] = -1;

	mov	DWORD PTR [eax-88], ecx

; 3963 : 		m_aiAmount[ui] = -1;

	mov	DWORD PTR [eax], ecx

; 3964 : 		m_aiRate[ui] = -1;

	mov	DWORD PTR [eax+88], ecx

; 3965 : 		m_aiGoal[ui] = -1;

	mov	DWORD PTR [eax+176], ecx

; 3966 : 		m_aiLastProgress[ui] = -1;

	mov	DWORD PTR [eax+264], ecx

; 3967 : 		m_aiLastPotential[ui] = -1;

	mov	DWORD PTR [eax+352], ecx

; 3968 : 		m_aiLastBasePotential[ui] = -1;

	mov	DWORD PTR [eax+440], ecx

; 3969 : 		m_aiResult[ui] = SPY_RESULT_UNDETECTED;

	mov	DWORD PTR [eax+528], esi

; 3970 : 		m_aiNumTimesCityRobbed[ui] = 0;

	mov	DWORD PTR [eax+616], esi
	add	eax, 4
	sub	edx, 1
	jne	SHORT $LL3@Reset
	pop	esi

; 3971 : 	}
; 3972 : }

	ret	0
?Reset@CvCityEspionage@@QAEXXZ ENDP			; CvCityEspionage::Reset
_TEXT	ENDS
PUBLIC	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity
; Function compile flags: /Ogtpy
;	COMDAT ?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_iAmount$ = 12						; size = 4
_iRate$ = 16						; size = 4
_iGoal$ = 20						; size = 4
?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z PROC ; CvCityEspionage::SetActivity, COMDAT
; _this$ = ecx

; 3977 : 	CvAssertMsg(m_aiAmount[ePlayer] == -1, "Amount has not been reset");
; 3978 : 	CvAssertMsg(m_aiRate[ePlayer] == -1, "Rate has not been reset");
; 3979 : 	CvAssertMsg(m_aiGoal[ePlayer] == -1, "Goal has not been reset");
; 3980 : 	m_aiAmount[ePlayer] = iAmount;

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	mov	edx, DWORD PTR _iAmount$[esp-4]
	mov	DWORD PTR [ecx+eax*4+92], edx

; 3981 : 	m_aiRate[ePlayer] = iRate;

	mov	edx, DWORD PTR _iRate$[esp-4]
	mov	DWORD PTR [ecx+eax*4+180], edx

; 3982 : 	m_aiGoal[ePlayer] = iGoal;

	mov	edx, DWORD PTR _iGoal$[esp-4]
	mov	DWORD PTR [ecx+eax*4+268], edx

; 3983 : }

	ret	16					; 00000010H
?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ENDP ; CvCityEspionage::SetActivity
_TEXT	ENDS
PUBLIC	?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z	; CvCityEspionage::Process
; Function compile flags: /Ogtpy
;	COMDAT ?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z PROC	; CvCityEspionage::Process, COMDAT
; _this$ = ecx

; 3988 : 	CvAssertMsg(m_aiAmount[ePlayer] != -1, "Amount has not been set");
; 3989 : 	CvAssertMsg(m_aiRate[ePlayer] != -1, "Rate has not been set");
; 3990 : 	CvAssertMsg(m_aiGoal[ePlayer] != -1, "Goal has not been set");
; 3991 : 	m_aiAmount[ePlayer] += m_aiRate[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	mov	edx, DWORD PTR [ecx+eax*4+180]
	add	DWORD PTR [ecx+eax*4+92], edx

; 3992 : }

	ret	4
?Process@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ENDP	; CvCityEspionage::Process
_TEXT	ENDS
PUBLIC	?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ; CvCityEspionage::HasReachedGoal
; Function compile flags: /Ogtpy
;	COMDAT ?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvCityEspionage::HasReachedGoal, COMDAT
; _this$ = ecx

; 3997 : 	CvAssertMsg(m_aiAmount[ePlayer] != -1, "Amount has not been set");
; 3998 : 	CvAssertMsg(m_aiRate[ePlayer] != -1, "Rate has not been set");
; 3999 : 	CvAssertMsg(m_aiGoal[ePlayer] != -1, "Goal has not been set");
; 4000 : 	return m_aiAmount[ePlayer] >= m_aiGoal[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	mov	edx, DWORD PTR [ecx+eax*4+92]
	push	ebx
	xor	ebx, ebx
	cmp	edx, DWORD PTR [ecx+eax*4+268]
	setge	bl
	mov	al, bl
	pop	ebx

; 4001 : }

	ret	4
?HasReachedGoal@CvCityEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvCityEspionage::HasReachedGoal
_TEXT	ENDS
PUBLIC	?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ; CvCityEspionage::ResetProgress
; Function compile flags: /Ogtpy
;	COMDAT ?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z PROC ; CvCityEspionage::ResetProgress, COMDAT
; _this$ = ecx

; 4006 : 	m_aiAmount[ePlayer] = -1;

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	or	edx, -1
	mov	DWORD PTR [ecx+eax*4+92], edx

; 4007 : 	m_aiGoal[ePlayer] = -1;

	mov	DWORD PTR [ecx+eax*4+268], edx

; 4008 : 	m_aiRate[ePlayer] = -1;

	mov	DWORD PTR [ecx+eax*4+180], edx

; 4009 : }

	ret	4
?ResetProgress@CvCityEspionage@@QAEXW4PlayerTypes@@@Z ENDP ; CvCityEspionage::ResetProgress
_TEXT	ENDS
PUBLIC	?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastProgress
; Function compile flags: /Ogtpy
;	COMDAT ?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_iProgress$ = 12					; size = 4
?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z PROC ; CvCityEspionage::SetLastProgress, COMDAT
; _this$ = ecx

; 4014 : 	m_aiLastProgress[ePlayer] = iProgress;

	mov	eax, DWORD PTR _iProgress$[esp-4]
	mov	edx, DWORD PTR _ePlayer$[esp-4]
	mov	DWORD PTR [ecx+edx*4+356], eax

; 4015 : }

	ret	8
?SetLastProgress@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ENDP ; CvCityEspionage::SetLastProgress
_TEXT	ENDS
PUBLIC	?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastPotential
; Function compile flags: /Ogtpy
;	COMDAT ?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_iPotential$ = 12					; size = 4
?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z PROC ; CvCityEspionage::SetLastPotential, COMDAT
; _this$ = ecx

; 4020 : 	m_aiLastPotential[ePlayer] = iPotential;

	mov	eax, DWORD PTR _iPotential$[esp-4]
	mov	edx, DWORD PTR _ePlayer$[esp-4]
	mov	DWORD PTR [ecx+edx*4+444], eax

; 4021 : }

	ret	8
?SetLastPotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ENDP ; CvCityEspionage::SetLastPotential
_TEXT	ENDS
PUBLIC	?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetLastBasePotential
; Function compile flags: /Ogtpy
;	COMDAT ?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_iPotential$ = 12					; size = 4
?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z PROC ; CvCityEspionage::SetLastBasePotential, COMDAT
; _this$ = ecx

; 4026 : 	m_aiLastBasePotential[ePlayer] = iPotential;

	mov	eax, DWORD PTR _iPotential$[esp-4]
	mov	edx, DWORD PTR _ePlayer$[esp-4]
	mov	DWORD PTR [ecx+edx*4+532], eax

; 4027 : }

	ret	8
?SetLastBasePotential@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ENDP ; CvCityEspionage::SetLastBasePotential
_TEXT	ENDS
PUBLIC	?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ; CvCityEspionage::SetSpyResult
; Function compile flags: /Ogtpy
;	COMDAT ?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z
_TEXT	SEGMENT
_eSpyOwner$ = 8						; size = 4
_iResult$ = 12						; size = 4
?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z PROC ; CvCityEspionage::SetSpyResult, COMDAT
; _this$ = ecx

; 4032 : 	m_aiResult[eSpyOwner] = iResult;

	mov	eax, DWORD PTR _iResult$[esp-4]
	mov	edx, DWORD PTR _eSpyOwner$[esp-4]
	mov	DWORD PTR [ecx+edx*4+620], eax

; 4033 : }

	ret	8
?SetSpyResult@CvCityEspionage@@QAEXW4PlayerTypes@@H@Z ENDP ; CvCityEspionage::SetSpyResult
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvCityEspionage@@@Z ; operator>>
; Function compile flags: /Ogtpy
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvCityEspionage@@@Z
_TEXT	SEGMENT
_uiNumSpyAssignment$ = -32				; size = 4
_uiNumAmounts$ = -28					; size = 4
_uiNumRates$ = -24					; size = 4
_uiNumGoals$ = -20					; size = 4
_iNumLastProgresses$ = -16				; size = 4
_iNumLastPotential$ = -12				; size = 4
_iNumLastBasePotential$ = -8				; size = 4
_uiVersion$ = -4					; size = 4
_iNumResults$ = 8					; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvCityEspionage@@@Z PROC	; operator>>, COMDAT

; 4043 : {

	sub	esp, 32					; 00000020H
	push	ebx
	push	ebp
	push	esi

; 4044 : 	uint uiVersion;
; 4045 : 	loadFrom >> uiVersion;

	mov	esi, DWORD PTR _loadFrom$[esp+40]
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+48]
	push	eax
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4046 : 
; 4047 : 	uint uiNumSpyAssignment;
; 4048 : 	loadFrom >> uiNumSpyAssignment;

	lea	ecx, DWORD PTR _uiNumSpyAssignment$[esp+48]
	push	ecx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4049 : 	for(uint ui = 0; ui < uiNumSpyAssignment; ui++)

	mov	ebp, DWORD PTR _writeTo$[esp+44]
	xor	edi, edi
	cmp	DWORD PTR _uiNumSpyAssignment$[esp+48], edi
	jbe	SHORT $LN25@operator@5

; 4044 : 	uint uiVersion;
; 4045 : 	loadFrom >> uiVersion;

	lea	ebx, DWORD PTR [ebp+4]
$LL27@operator@5:

; 4050 : 	{
; 4051 : 		loadFrom >> writeTo.m_aiSpyAssignment[ui];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _uiNumSpyAssignment$[esp+48]
	jb	SHORT $LL27@operator@5
$LN25@operator@5:

; 4052 : 	}
; 4053 : 
; 4054 : 	// amount
; 4055 : 	uint uiNumAmounts;
; 4056 : 	loadFrom >> uiNumAmounts;

	lea	edx, DWORD PTR _uiNumAmounts$[esp+48]
	push	edx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4057 : 	for(uint ui = 0; ui < uiNumAmounts; ui++)

	xor	edi, edi
	cmp	DWORD PTR _uiNumAmounts$[esp+48], edi
	jbe	SHORT $LN22@operator@5

; 4052 : 	}
; 4053 : 
; 4054 : 	// amount
; 4055 : 	uint uiNumAmounts;
; 4056 : 	loadFrom >> uiNumAmounts;

	lea	ebx, DWORD PTR [ebp+92]
	npad	5
$LL24@operator@5:

; 4058 : 	{
; 4059 : 		loadFrom >> writeTo.m_aiAmount[ui];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _uiNumAmounts$[esp+48]
	jb	SHORT $LL24@operator@5
$LN22@operator@5:

; 4060 : 	}
; 4061 : 
; 4062 : 	// rate
; 4063 : 	uint uiNumRates;
; 4064 : 	loadFrom >> uiNumRates;

	lea	eax, DWORD PTR _uiNumRates$[esp+48]
	push	eax
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4065 : 	for(uint ui = 0; ui < uiNumRates; ui++)

	xor	edi, edi
	cmp	DWORD PTR _uiNumRates$[esp+48], edi
	jbe	SHORT $LN19@operator@5

; 4060 : 	}
; 4061 : 
; 4062 : 	// rate
; 4063 : 	uint uiNumRates;
; 4064 : 	loadFrom >> uiNumRates;

	lea	ebx, DWORD PTR [ebp+180]
	npad	4
$LL21@operator@5:

; 4066 : 	{
; 4067 : 		loadFrom >> writeTo.m_aiRate[ui];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _uiNumRates$[esp+48]
	jb	SHORT $LL21@operator@5
$LN19@operator@5:

; 4068 : 	}
; 4069 : 
; 4070 : 	// goal
; 4071 : 	uint uiNumGoals;
; 4072 : 	loadFrom >> uiNumGoals;

	lea	ecx, DWORD PTR _uiNumGoals$[esp+48]
	push	ecx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 4073 : 	for(uint ui = 0; ui < uiNumGoals; ui++)

	xor	edi, edi
	cmp	DWORD PTR _uiNumGoals$[esp+48], edi
	jbe	SHORT $LN16@operator@5

; 4068 : 	}
; 4069 : 
; 4070 : 	// goal
; 4071 : 	uint uiNumGoals;
; 4072 : 	loadFrom >> uiNumGoals;

	lea	ebx, DWORD PTR [ebp+268]
	npad	4
$LL18@operator@5:

; 4074 : 	{
; 4075 : 		loadFrom >> writeTo.m_aiGoal[ui];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _uiNumGoals$[esp+48]
	jb	SHORT $LL18@operator@5
$LN16@operator@5:

; 4076 : 	}
; 4077 : 
; 4078 : 	// last progress
; 4079 : 	int iNumLastProgresses;
; 4080 : 	loadFrom >> iNumLastProgresses;

	lea	edx, DWORD PTR _iNumLastProgresses$[esp+48]
	push	edx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4081 : 	for(int i = 0; i < iNumLastProgresses; i++)

	xor	edi, edi
	cmp	DWORD PTR _iNumLastProgresses$[esp+48], edi
	jle	SHORT $LN13@operator@5

; 4076 : 	}
; 4077 : 
; 4078 : 	// last progress
; 4079 : 	int iNumLastProgresses;
; 4080 : 	loadFrom >> iNumLastProgresses;

	lea	ebx, DWORD PTR [ebp+356]
	npad	4
$LL15@operator@5:

; 4082 : 	{
; 4083 : 		loadFrom >> writeTo.m_aiLastProgress[i];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _iNumLastProgresses$[esp+48]
	jl	SHORT $LL15@operator@5
$LN13@operator@5:

; 4084 : 	}
; 4085 : 
; 4086 : 	// last potential
; 4087 : 	int iNumLastPotential;
; 4088 : 	loadFrom >> iNumLastPotential;

	lea	eax, DWORD PTR _iNumLastPotential$[esp+48]
	push	eax
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4089 : 	for (int i = 0; i < iNumLastPotential; i++)

	xor	edi, edi
	cmp	DWORD PTR _iNumLastPotential$[esp+48], edi
	jle	SHORT $LN10@operator@5

; 4084 : 	}
; 4085 : 
; 4086 : 	// last potential
; 4087 : 	int iNumLastPotential;
; 4088 : 	loadFrom >> iNumLastPotential;

	lea	ebx, DWORD PTR [ebp+444]
	npad	4
$LL12@operator@5:

; 4090 : 	{
; 4091 : 		loadFrom >> writeTo.m_aiLastPotential[i];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _iNumLastPotential$[esp+48]
	jl	SHORT $LL12@operator@5
$LN10@operator@5:

; 4092 : 	}
; 4093 : 
; 4094 : 	// last base potential
; 4095 : 	int iNumLastBasePotential;
; 4096 : 	loadFrom >> iNumLastBasePotential;

	lea	ecx, DWORD PTR _iNumLastBasePotential$[esp+48]
	push	ecx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4097 : 	for (int i = 0; i < iNumLastBasePotential; i++)

	xor	edi, edi
	cmp	DWORD PTR _iNumLastBasePotential$[esp+48], edi
	jle	SHORT $LN7@operator@5

; 4092 : 	}
; 4093 : 
; 4094 : 	// last base potential
; 4095 : 	int iNumLastBasePotential;
; 4096 : 	loadFrom >> iNumLastBasePotential;

	lea	ebx, DWORD PTR [ebp+532]
	npad	4
$LL9@operator@5:

; 4098 : 	{
; 4099 : 		loadFrom >> writeTo.m_aiLastBasePotential[i];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _iNumLastBasePotential$[esp+48]
	jl	SHORT $LL9@operator@5
$LN7@operator@5:

; 4100 : 	}
; 4101 : 
; 4102 : 	// results
; 4103 : 	int iNumResults;
; 4104 : 	loadFrom >> iNumResults;

	lea	edx, DWORD PTR _iNumResults$[esp+44]
	push	edx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4105 : 	for(int i = 0; i < iNumResults; i++)

	xor	edi, edi
	cmp	DWORD PTR _iNumResults$[esp+44], edi
	jle	SHORT $LN4@operator@5

; 4100 : 	}
; 4101 : 
; 4102 : 	// results
; 4103 : 	int iNumResults;
; 4104 : 	loadFrom >> iNumResults;

	lea	ebx, DWORD PTR [ebp+620]
	npad	4
$LL6@operator@5:

; 4106 : 	{
; 4107 : 		loadFrom >> writeTo.m_aiResult[i];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _iNumResults$[esp+44]
	jl	SHORT $LL6@operator@5
$LN4@operator@5:

; 4108 : 	}
; 4109 : 
; 4110 : 	// num times robbed
; 4111 : 	loadFrom >> iNumResults;

	lea	eax, DWORD PTR _iNumResults$[esp+44]
	push	eax
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 4112 : 	for (int i = 0; i < iNumResults; i++)

	xor	edi, edi
	cmp	DWORD PTR _iNumResults$[esp+44], edi
	jle	SHORT $LN104@operator@5

; 4108 : 	}
; 4109 : 
; 4110 : 	// num times robbed
; 4111 : 	loadFrom >> iNumResults;

	lea	ebx, DWORD PTR [ebp+708]
	npad	4
$LL3@operator@5:

; 4113 : 	{
; 4114 : 		loadFrom >> writeTo.m_aiNumTimesCityRobbed[i];

	push	ebx
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	inc	edi
	add	ebx, 4
	cmp	edi, DWORD PTR _iNumResults$[esp+44]
	jl	SHORT $LL3@operator@5
$LN104@operator@5:
	pop	edi

; 4115 : 	}
; 4116 : 
; 4117 : 	return loadFrom;

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 4118 : }

	add	esp, 32					; 00000020H
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvCityEspionage@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvCityEspionage@@@Z ; operator<<
; Function compile flags: /Ogtpy
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvCityEspionage@@@Z
_TEXT	SEGMENT
_uiVersion$ = -4					; size = 4
$T235041 = 8						; size = 4
$T235040 = 8						; size = 4
$T235039 = 8						; size = 4
$T235038 = 8						; size = 4
$T235037 = 8						; size = 4
$T235036 = 8						; size = 4
$T235035 = 8						; size = 4
$T235034 = 8						; size = 4
$T235033 = 8						; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvCityEspionage@@@Z PROC	; operator<<, COMDAT

; 4122 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 4123 : 	uint uiVersion = 0;
; 4124 : 	saveTo << uiVersion;

	mov	esi, DWORD PTR _saveTo$[esp+12]
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+20]
	push	eax
	mov	ecx, esi
	mov	DWORD PTR _uiVersion$[esp+24], 0
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 4125 : 
; 4126 : 	saveTo << MAX_MAJOR_CIVS;

	lea	ecx, DWORD PTR $T235033[esp+16]
	push	ecx
	mov	ebp, 22					; 00000016H
	mov	ecx, esi
	mov	DWORD PTR $T235033[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	mov	ebx, DWORD PTR _readFrom$[esp+16]
	lea	edi, DWORD PTR [ebx+4]
	npad	7
$LL27@operator@6:

; 4127 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4128 : 	{
; 4129 : 		saveTo << readFrom.m_aiSpyAssignment[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL27@operator@6

; 4130 : 	}
; 4131 : 
; 4132 : 	// amount
; 4133 : 	saveTo << MAX_MAJOR_CIVS;

	lea	edx, DWORD PTR $T235034[esp+16]
	mov	ebp, 22					; 00000016H
	push	edx
	mov	ecx, esi
	mov	DWORD PTR $T235034[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	edi, DWORD PTR [ebx+92]
$LL24@operator@6:

; 4134 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4135 : 	{
; 4136 : 		saveTo << readFrom.m_aiAmount[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL24@operator@6

; 4137 : 	}
; 4138 : 
; 4139 : 	// rate
; 4140 : 	saveTo << MAX_MAJOR_CIVS;

	lea	eax, DWORD PTR $T235035[esp+16]
	mov	ebp, 22					; 00000016H
	push	eax
	mov	ecx, esi
	mov	DWORD PTR $T235035[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	edi, DWORD PTR [ebx+180]
$LL21@operator@6:

; 4141 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4142 : 	{
; 4143 : 		saveTo << readFrom.m_aiRate[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL21@operator@6

; 4144 : 	}
; 4145 : 
; 4146 : 	// goal
; 4147 : 	saveTo << MAX_MAJOR_CIVS;

	lea	ecx, DWORD PTR $T235036[esp+16]
	push	ecx
	mov	ebp, 22					; 00000016H
	mov	ecx, esi
	mov	DWORD PTR $T235036[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	edi, DWORD PTR [ebx+268]
	npad	2
$LL18@operator@6:

; 4148 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4149 : 	{
; 4150 : 		saveTo << readFrom.m_aiGoal[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL18@operator@6

; 4151 : 	}
; 4152 : 
; 4153 : 	// last progress
; 4154 : 	saveTo << MAX_MAJOR_CIVS;

	lea	edx, DWORD PTR $T235037[esp+16]
	mov	ebp, 22					; 00000016H
	push	edx
	mov	ecx, esi
	mov	DWORD PTR $T235037[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	edi, DWORD PTR [ebx+356]
	npad	5
$LL15@operator@6:

; 4155 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4156 : 	{
; 4157 : 		saveTo << readFrom.m_aiLastProgress[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL15@operator@6

; 4158 : 	}
; 4159 : 
; 4160 : 	// last potential
; 4161 : 	saveTo << MAX_MAJOR_CIVS;

	lea	eax, DWORD PTR $T235038[esp+16]
	mov	ebp, 22					; 00000016H
	push	eax
	mov	ecx, esi
	mov	DWORD PTR $T235038[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	edi, DWORD PTR [ebx+444]
	npad	5
$LL12@operator@6:

; 4162 : 	for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4163 : 	{
; 4164 : 		saveTo << readFrom.m_aiLastPotential[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL12@operator@6

; 4165 : 	}
; 4166 : 
; 4167 : 	// last base potential
; 4168 : 	saveTo << MAX_MAJOR_CIVS;

	lea	ecx, DWORD PTR $T235039[esp+16]
	push	ecx
	mov	ebp, 22					; 00000016H
	mov	ecx, esi
	mov	DWORD PTR $T235039[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	edi, DWORD PTR [ebx+532]
	npad	5
$LL9@operator@6:

; 4169 : 	for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4170 : 	{
; 4171 : 		saveTo << readFrom.m_aiLastBasePotential[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL9@operator@6

; 4172 : 	}
; 4173 : 
; 4174 : 	// results
; 4175 : 	saveTo << MAX_MAJOR_CIVS;

	lea	edx, DWORD PTR $T235040[esp+16]
	mov	ebp, 22					; 00000016H
	push	edx
	mov	ecx, esi
	mov	DWORD PTR $T235040[esp+20], ebp
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	edi, DWORD PTR [ebx+620]
	npad	5
$LL6@operator@6:

; 4176 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4177 : 	{
; 4178 : 		saveTo << readFrom.m_aiResult[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL6@operator@6

; 4179 : 	}
; 4180 : 
; 4181 : 	// num times robbed
; 4182 : 	saveTo << MAX_MAJOR_CIVS;

	lea	eax, DWORD PTR $T235041[esp+16]
	push	eax
	mov	ecx, esi
	mov	DWORD PTR $T235041[esp+20], 22		; 00000016H
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	lea	edi, DWORD PTR [ebx+708]
	lea	ebx, DWORD PTR [ebp+22]
	npad	3
$LL3@operator@6:

; 4183 : 	for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4184 : 	{
; 4185 : 		saveTo << readFrom.m_aiNumTimesCityRobbed[ui];

	push	edi
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	add	edi, 4
	sub	ebx, 1
	jne	SHORT $LL3@operator@6
	pop	edi

; 4186 : 	}
; 4187 : 
; 4188 : 	return saveTo;

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 4189 : }

	pop	ecx
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvCityEspionage@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ	; CvEspionageAI::EvaluateDiplomatSpies
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z:PROC	; CvCivilizationInfo::getSpyNames
EXTRN	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ:PROC ; CvPlayer::getCivilizationInfo
EXTRN	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ:PROC ; CvPlayer::GetEspionage
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ$1
__ehfuncinfo$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
tv234 = -72						; size = 4
_strMsg$226478 = -68					; size = 28
$T235147 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ PROC	; CvEspionageAI::EvaluateDiplomatSpies, COMDAT
; _this$ = ecx

; 5604 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 60					; 0000003cH
	push	ebx
	push	ebp
	mov	ebx, ecx

; 5605 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ebx]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	edi, eax

; 5606 : 	for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	xor	ebp, ebp
	cmp	DWORD PTR [edi+4], ebp
	jbe	$LN4@EvaluateDi
	mov	DWORD PTR tv234[esp+84], ebp
	push	esi
$LL6@EvaluateDi:

; 5607 : 	{
; 5608 : 		CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	esi, DWORD PTR [edi]
	add	esi, DWORD PTR tv234[esp+88]

; 5609 : 		// don't process dead spies
; 5610 : 		if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	cmp	DWORD PTR [esi+16], 8
	je	$LN5@EvaluateDi

; 5611 : 		{
; 5612 : 			continue;
; 5613 : 		}
; 5614 : 
; 5615 : 		if (pSpy->m_bIsDiplomat)

	cmp	BYTE PTR [esi+24], 0
	je	$LN5@EvaluateDi

; 5616 : 		{
; 5617 : 			pSpy->m_bEvaluateReassignment = true;
; 5618 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR [esi+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN5@EvaluateDi

; 5619 : 			{
; 5620 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$226478[esp+88]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5621 : 				strMsg.Format("Re-eval: diplomat spy, %d,", ui);

	push	ebp
	lea	eax, DWORD PTR _strMsg$226478[esp+92]
	push	OFFSET $SG226479
	push	eax
	mov	DWORD PTR __$EHRec$[esp+108], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 5622 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR [ebx]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T235147[esp+92]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$226478[esp+92]
	mov	BYTE PTR __$EHRec$[esp+100], 1
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T235147[esp+88]
	mov	BYTE PTR __$EHRec$[esp+96], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5623 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	eax, DWORD PTR _strMsg$226478[esp+88]
	push	eax
	mov	ecx, edi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 5624 : 			}

	lea	ecx, DWORD PTR _strMsg$226478[esp+88]
	mov	DWORD PTR __$EHRec$[esp+96], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@EvaluateDi:
	add	DWORD PTR tv234[esp+88], 28		; 0000001cH
	inc	ebp
	cmp	ebp, DWORD PTR [edi+4]
	jb	$LL6@EvaluateDi
	pop	esi
$LN4@EvaluateDi:

; 5625 : 
; 5626 : 		}
; 5627 : 	}
; 5628 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+84]
	pop	edi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 72					; 00000048H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$226478[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T235147[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ ENDP	; CvEspionageAI::EvaluateDiplomatSpies
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvEspionageAI@@@Z	; operator<<
; Function compile flags: /Ogtpy
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvEspionageAI@@@Z
_TEXT	SEGMENT
_uiVersion$ = -4					; size = 4
$T235187 = 8						; size = 4
$T235186 = 8						; size = 4
$T235185 = 8						; size = 4
$T235184 = 8						; size = 4
$T235183 = 8						; size = 4
$T235182 = 8						; size = 4
$T235181 = 8						; size = 4
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvEspionageAI@@@Z PROC	; operator<<, COMDAT

; 5695 : {

	push	ecx
	push	ebx
	push	esi
	push	edi

; 5696 : 	uint uiVersion = 0;
; 5697 : 	saveTo << uiVersion;

	mov	edi, DWORD PTR _saveTo$[esp+12]
	lea	eax, DWORD PTR _uiVersion$[esp+16]
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _uiVersion$[esp+20], 0
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5698 : 
; 5699 : 	saveTo << readFrom.m_aiCivOutOfTechTurn.size();

	mov	esi, DWORD PTR _readFrom$[esp+12]
	mov	ecx, DWORD PTR [esi+8]
	lea	edx, DWORD PTR $T235181[esp+12]
	mov	DWORD PTR $T235181[esp+12], ecx
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5700 : 	for(uint ui = 0; ui < readFrom.m_aiCivOutOfTechTurn.size(); ui++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+8], ebx
	jbe	SHORT $LN19@operator@7
	npad	6
$LL21@operator@7:
	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [eax+ebx*4]

; 5701 : 	{
; 5702 : 		saveTo << readFrom.m_aiCivOutOfTechTurn[ui];

	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+8]
	jb	SHORT $LL21@operator@7
$LN19@operator@7:

; 5703 : 	}
; 5704 : 
; 5705 : 	saveTo << readFrom.m_aiNumSpiesCaught.size();

	mov	edx, DWORD PTR [esi+112]
	lea	eax, DWORD PTR $T235182[esp+12]
	push	eax
	mov	ecx, edi
	mov	DWORD PTR $T235182[esp+16], edx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5706 : 	for(uint ui = 0; ui < readFrom.m_aiNumSpiesCaught.size(); ui++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+112], ebx
	jbe	SHORT $LN16@operator@7
	npad	2
$LL18@operator@7:
	mov	ecx, DWORD PTR [esi+108]
	lea	edx, DWORD PTR [ecx+ebx*4]

; 5707 : 	{
; 5708 : 		saveTo << readFrom.m_aiNumSpiesCaught[ui];

	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+112]
	jb	SHORT $LL18@operator@7
$LN16@operator@7:

; 5709 : 	}
; 5710 : 
; 5711 : 	saveTo << readFrom.m_aiNumSpiesKilled.size();

	mov	eax, DWORD PTR [esi+216]
	lea	ecx, DWORD PTR $T235183[esp+12]
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR $T235183[esp+16], eax
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5712 : 	for(uint ui = 0; ui < readFrom.m_aiNumSpiesKilled.size(); ui++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+216], ebx
	jbe	SHORT $LN13@operator@7
$LL15@operator@7:
	mov	edx, DWORD PTR [esi+212]
	lea	eax, DWORD PTR [edx+ebx*4]

; 5713 : 	{
; 5714 : 		saveTo << readFrom.m_aiNumSpiesKilled[ui];

	push	eax
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+216]
	jb	SHORT $LL15@operator@7
$LN13@operator@7:

; 5715 : 	}
; 5716 : 
; 5717 : 	saveTo << readFrom.m_aiNumSpiesDied.size();

	mov	ecx, DWORD PTR [esi+320]
	lea	edx, DWORD PTR $T235184[esp+12]
	mov	DWORD PTR $T235184[esp+12], ecx
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5718 : 	for(uint ui = 0; ui < readFrom.m_aiNumSpiesDied.size(); ui++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+320], ebx
	jbe	SHORT $LN10@operator@7
	npad	2
$LL12@operator@7:
	mov	eax, DWORD PTR [esi+316]
	lea	ecx, DWORD PTR [eax+ebx*4]

; 5719 : 	{
; 5720 : 		saveTo << readFrom.m_aiNumSpiesDied[ui];

	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+320]
	jb	SHORT $LL12@operator@7
$LN10@operator@7:

; 5721 : 	}
; 5722 : 
; 5723 : 	saveTo << readFrom.m_aiTurnLastSpyCaught.size();

	mov	edx, DWORD PTR [esi+424]
	lea	eax, DWORD PTR $T235185[esp+12]
	push	eax
	mov	ecx, edi
	mov	DWORD PTR $T235185[esp+16], edx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5724 : 	for(uint ui = 0; ui < readFrom.m_aiTurnLastSpyCaught.size(); ui++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+424], ebx
	jbe	SHORT $LN7@operator@7
	npad	6
$LL9@operator@7:
	mov	ecx, DWORD PTR [esi+420]
	lea	edx, DWORD PTR [ecx+ebx*4]

; 5725 : 	{
; 5726 : 		saveTo << readFrom.m_aiTurnLastSpyCaught[ui];

	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+424]
	jb	SHORT $LL9@operator@7
$LN7@operator@7:

; 5727 : 	}
; 5728 : 
; 5729 : 	saveTo << readFrom.m_aiTurnLastSpyKilled.size();

	mov	eax, DWORD PTR [esi+528]
	lea	ecx, DWORD PTR $T235186[esp+12]
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR $T235186[esp+16], eax
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5730 : 	for(uint ui = 0; ui < readFrom.m_aiTurnLastSpyKilled.size(); ui++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+528], ebx
	jbe	SHORT $LN4@operator@7
	npad	6
$LL6@operator@7:
	mov	edx, DWORD PTR [esi+524]
	lea	eax, DWORD PTR [edx+ebx*4]

; 5731 : 	{
; 5732 : 		saveTo << readFrom.m_aiTurnLastSpyKilled[ui];

	push	eax
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+528]
	jb	SHORT $LL6@operator@7
$LN4@operator@7:

; 5733 : 	}
; 5734 : 
; 5735 : 	saveTo << readFrom.m_aiTurnLastSpyDied.size();

	mov	ecx, DWORD PTR [esi+632]
	lea	edx, DWORD PTR $T235187[esp+12]
	mov	DWORD PTR $T235187[esp+12], ecx
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 5736 : 	for(uint ui = 0; ui < readFrom.m_aiTurnLastSpyDied.size(); ui++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+632], ebx
	jbe	SHORT $LN1@operator@7
	npad	6
$LL3@operator@7:
	mov	eax, DWORD PTR [esi+628]
	lea	ecx, DWORD PTR [eax+ebx*4]

; 5737 : 	{
; 5738 : 		saveTo << readFrom.m_aiTurnLastSpyDied[ui];

	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+632]
	jb	SHORT $LL3@operator@7
$LN1@operator@7:

; 5739 : 	}
; 5740 : 
; 5741 : 	saveTo << readFrom.m_bUNCountdownStarted;

	lea	edx, DWORD PTR [esi+732]
	push	edx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 5742 : 	saveTo << readFrom.m_iTurnEspionageStarted;

	add	esi, 736				; 000002e0H
	push	esi
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 5743 : 
; 5744 : 	return saveTo;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 5745 : }

	pop	ecx
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvEspionageAI@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@H$0A@@@QAEXXZ		; BaseVector<int,0>::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?clear@?$BaseVector@H$0A@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@H$0A@@@QAEXXZ PROC			; BaseVector<int,0>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@H$0A@@@QAEXXZ ENDP			; BaseVector<int,0>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::FStaticVector<CvEspionageSpy,8,0,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::FStaticVector<CvEspionageSpy,8,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 8
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::FStaticVector<CvEspionageSpy,8,0,297,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@VCvEspionageSpy@@$0A@@@QAEXXZ ; BaseVector<CvEspionageSpy,0>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@VCvEspionageSpy@@$0A@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@VCvEspionageSpy@@$0A@@@QAEXXZ PROC	; BaseVector<CvEspionageSpy,0>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@VCvEspionageSpy@@$0A@@@QAEXXZ ENDP	; BaseVector<CvEspionageSpy,0>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 22			; 00000016H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 1
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@W4TechTypes@@$0A@@@QAEXXZ	; BaseVector<enum TechTypes,0>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@W4TechTypes@@$0A@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@W4TechTypes@@$0A@@@QAEXXZ PROC	; BaseVector<enum TechTypes,0>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@W4TechTypes@@$0A@@@QAEXXZ ENDP	; BaseVector<enum TechTypes,0>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ	; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC	; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 22			; 00000016H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP	; FStaticVector<int,22,0,297,0>::FStaticVector<int,22,0,297,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ	; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC	; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP	; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEAAUIntrigueNotificationMessage@@XZ ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEAAUIntrigueNotificationMessage@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEAAUIntrigueNotificationMessage@@XZ PROC ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator*, COMDAT
; _this$ = ecx

; 339  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [ecx]

; 340  : 		}

	ret	0
??D?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEAAUIntrigueNotificationMessage@@XZ ENDP ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator++, COMDAT
; _this$ = ecx

; 348  : 		{	// preincrement

	mov	eax, ecx

; 349  : 		++(*(_Mybase *)this);

	add	DWORD PTR [eax], 68			; 00000044H

; 350  : 		return (*this);
; 351  : 		}

	ret	0
??E?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator++
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator!=, COMDAT
; _this$ = ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator!=
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::~_Vector_val<HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::~_Vector_val<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::~_Vector_val<HeistLocation,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::~_Vector_val<CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::~_Vector_val<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::~_Vector_val<CvCity *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXPAVCvEspionageSpy@@I@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::Free
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Free@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXPAVCvEspionageSpy@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXPAVCvEspionageSpy@@I@Z PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@2

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@2:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXPAVCvEspionageSpy@@I@Z ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::Free
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_RHS$ = 8						; size = 4
??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>, COMDAT
; _this$ = ecx

; 591  : 	FStaticVector(const THIS_TYPE& RHS)

	push	ebx

; 592  : 	{
; 593  : 		m_uiCurrSize = RHS.m_uiCurrSize;

	mov	ebx, DWORD PTR _RHS$[esp]
	xor	eax, eax
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+4], eax

; 594  : 		m_uiCurrMaxSize = RHS.m_uiCurrMaxSize;

	mov	ecx, DWORD PTR [ebx+8]
	push	edi
	mov	DWORD PTR [esi+8], ecx

; 595  : 		m_pData = Alloc(RHS.m_uiCurrMaxSize);

	mov	edi, DWORD PTR [ebx+8]
	cmp	edi, 1
	jbe	SHORT $LN6@FStaticVec@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	edx, DWORD PTR [edi*4]
	push	4
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 596  : #ifdef BREAK_ON_STATIC_RESIZE
; 597  : 		m_iNumResized = 0;
; 598  : #endif
; 599  : 		Copy(RHS);

	push	ebx
	mov	ecx, esi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi], eax
	call	?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z ; BaseVector<enum TechTypes,0>::Copy
	pop	edi

; 600  : 	};

	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4

; 595  : 		m_pData = Alloc(RHS.m_uiCurrMaxSize);

$LN6@FStaticVec@2:
	lea	eax, DWORD PTR [esi+12]

; 596  : #ifdef BREAK_ON_STATIC_RESIZE
; 597  : 		m_iNumResized = 0;
; 598  : #endif
; 599  : 		Copy(RHS);

	push	ebx
	mov	ecx, esi
	mov	DWORD PTR [esi+8], 1
	mov	DWORD PTR [esi], eax
	call	?Copy@?$BaseVector@W4TechTypes@@$0A@@@IAEXABV1@@Z ; BaseVector<enum TechTypes,0>::Copy
	pop	edi

; 600  : 	};

	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z ; FStaticVector<enum TechTypes,1,0,297,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@3

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@3:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXPAW4TechTypes@@I@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::Free
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<int,22,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN30@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN30@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+8]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	5
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN33@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN33@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	edi, DWORD PTR [esi+8]
	cmp	edi, 22					; 00000016H
	jbe	SHORT $LN15@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	ebp, eax
	mov	DWORD PTR [esi+8], edi
	jmp	SHORT $LN14@GrowSize
$LN15@GrowSize:
	lea	ebp, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 22			; 00000016H
$LN14@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);
; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	jbe	SHORT $LN1@GrowSize
	mov	ecx, ebp
$LL3@GrowSize:

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	test	ecx, ecx
	je	SHORT $LN2@GrowSize
	mov	edx, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], edx
$LN2@GrowSize:
	inc	eax
	add	ecx, 4
	cmp	eax, DWORD PTR [esi+4]
	jb	SHORT $LL3@GrowSize
$LN1@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [esi+12]
	cmp	eax, ecx
	je	SHORT $LN37@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN37@GrowSize:
	pop	edi

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], ebp

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+100], 1
	pop	esi
	pop	ebp

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<int,22,0,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE@V?$allocator@UHeistLocation@@@1@@Z ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::_Vector_val<HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE@V?$allocator@UHeistLocation@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE@V?$allocator@UHeistLocation@@@1@@Z PROC ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::_Vector_val<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	mov	eax, ecx

; 426  : 		}

	ret	4
??0?$_Vector_val@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE@V?$allocator@UHeistLocation@@@1@@Z ENDP ; std::_Vector_val<HeistLocation,std::allocator<HeistLocation> >::_Vector_val<HeistLocation,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@V?$allocator@USpyNotificationMessage@@@1@@Z ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@V?$allocator@USpyNotificationMessage@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@V?$allocator@USpyNotificationMessage@@@1@@Z PROC ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	mov	eax, ecx

; 426  : 		}

	ret	4
??0?$_Vector_val@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE@V?$allocator@USpyNotificationMessage@@@1@@Z ENDP ; std::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_val<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@V?$allocator@UIntrigueNotificationMessage@@@1@@Z ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@V?$allocator@UIntrigueNotificationMessage@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@V?$allocator@UIntrigueNotificationMessage@@@1@@Z PROC ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	mov	eax, ecx

; 426  : 		}

	ret	4
??0?$_Vector_val@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE@V?$allocator@UIntrigueNotificationMessage@@@1@@Z ENDP ; std::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_val<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@PAUIntrigueNotificationMessage@@@Z ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@PAUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@PAUIntrigueNotificationMessage@@@Z PROC ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx

; 333  : 		{	// construct with pointer _Ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 334  : 		}

	ret	4
??0?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@PAUIntrigueNotificationMessage@@@Z ENDP ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE@V?$allocator@PAVCvCity@@@1@@Z ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::_Vector_val<CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE@V?$allocator@PAVCvCity@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE@V?$allocator@PAVCvCity@@@1@@Z PROC ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::_Vector_val<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	mov	eax, ecx

; 426  : 		}

	ret	4
??0?$_Vector_val@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE@V?$allocator@PAVCvCity@@@1@@Z ENDP ; std::_Vector_val<CvCity *,std::allocator<CvCity *> >::_Vector_val<CvCity *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@V?$allocator@UScoreCityEntry@@@1@@Z ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@V?$allocator@UScoreCityEntry@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@V?$allocator@UScoreCityEntry@@@1@@Z PROC ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	mov	eax, ecx

; 426  : 		}

	ret	4
??0?$_Vector_val@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE@V?$allocator@UScoreCityEntry@@@1@@Z ENDP ; std::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_val<ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@PAUScoreCityEntry@@@Z ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@PAUScoreCityEntry@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@PAUScoreCityEntry@@@Z PROC ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 333  : 		{	// construct with pointer _Ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 334  : 		}

	ret	4
??0?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@PAUScoreCityEntry@@@Z ENDP ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 536870911				; 1fffffffH

; 732  : 		}

	ret	0
?max_size@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBEIXZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UHeistLocation@@@std@@QAEPAUHeistLocation@@I@Z ; std::allocator<HeistLocation>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UHeistLocation@@@std@@QAEPAUHeistLocation@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UHeistLocation@@@std@@QAEPAUHeistLocation@@I@Z PROC ; std::allocator<HeistLocation>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ; std::_Allocate<HeistLocation>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@UHeistLocation@@@std@@QAEPAUHeistLocation@@I@Z ENDP ; std::allocator<HeistLocation>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 214748364				; 0cccccccH

; 732  : 		}

	ret	0
?max_size@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBEIXZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@USpyNotificationMessage@@@std@@QAEPAUSpyNotificationMessage@@I@Z ; std::allocator<SpyNotificationMessage>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@USpyNotificationMessage@@@std@@QAEPAUSpyNotificationMessage@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@USpyNotificationMessage@@@std@@QAEPAUSpyNotificationMessage@@I@Z PROC ; std::allocator<SpyNotificationMessage>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ; std::_Allocate<SpyNotificationMessage>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@USpyNotificationMessage@@@std@@QAEPAUSpyNotificationMessage@@I@Z ENDP ; std::allocator<SpyNotificationMessage>::allocate
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Make_iter, COMDAT
; _this$ = ecx

; 687  : 		return (iterator(_Where._Myptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 688  : 		}

	ret	8
?_Make_iter@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Make_iter
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 63161283				; 03c3c3c3H

; 732  : 		}

	ret	0
?max_size@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBEIXZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UIntrigueNotificationMessage@@@std@@QAEPAUIntrigueNotificationMessage@@I@Z ; std::allocator<IntrigueNotificationMessage>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UIntrigueNotificationMessage@@@std@@QAEPAUIntrigueNotificationMessage@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UIntrigueNotificationMessage@@@std@@QAEPAUIntrigueNotificationMessage@@I@Z PROC ; std::allocator<IntrigueNotificationMessage>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ; std::_Allocate<IntrigueNotificationMessage>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@UIntrigueNotificationMessage@@@std@@QAEPAUIntrigueNotificationMessage@@I@Z ENDP ; std::allocator<IntrigueNotificationMessage>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 732  : 		}

	ret	0
?max_size@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBEIXZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVCvCity@@@std@@QAEPAPAVCvCity@@I@Z ; std::allocator<CvCity *>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVCvCity@@@std@@QAEPAPAVCvCity@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCvCity@@@std@@QAEPAPAVCvCity@@I@Z PROC ; std::allocator<CvCity *>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ; std::_Allocate<CvCity *>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@PAVCvCity@@@std@@QAEPAPAVCvCity@@I@Z ENDP ; std::allocator<CvCity *>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 536870911				; 1fffffffH

; 732  : 		}

	ret	0
?max_size@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEIXZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UScoreCityEntry@@@std@@QAEPAUScoreCityEntry@@I@Z ; std::allocator<ScoreCityEntry>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@UScoreCityEntry@@@std@@QAEPAUScoreCityEntry@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UScoreCityEntry@@@std@@QAEPAUScoreCityEntry@@I@Z PROC ; std::allocator<ScoreCityEntry>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ; std::_Allocate<ScoreCityEntry>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@UScoreCityEntry@@@std@@QAEPAUScoreCityEntry@@I@Z ENDP ; std::allocator<ScoreCityEntry>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@PAUHeistLocation@@@Z ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@PAUHeistLocation@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@PAUHeistLocation@@@Z PROC ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 333  : 		{	// construct with pointer _Ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 334  : 		}

	ret	4
??0?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@PAUHeistLocation@@@Z ENDP ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator!=, COMDAT
; _this$ = ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<HeistLocation,std::allocator<HeistLocation> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@PAUSpyNotificationMessage@@@Z ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@PAUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@PAUSpyNotificationMessage@@@Z PROC ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx

; 333  : 		{	// construct with pointer _Ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 334  : 		}

	ret	4
??0?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@PAUSpyNotificationMessage@@@Z ENDP ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator!=, COMDAT
; _this$ = ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@PAPAVCvCity@@@Z ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::_Vector_iterator<CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@PAPAVCvCity@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@PAPAVCvCity@@@Z PROC ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::_Vector_iterator<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 333  : 		{	// construct with pointer _Ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 334  : 		}

	ret	4
??0?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@PAPAVCvCity@@@Z ENDP ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::_Vector_iterator<CvCity *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator!=, COMDAT
; _this$ = ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<CvCity *,std::allocator<CvCity *> >::operator!=
_TEXT	ENDS
PUBLIC	??0IntrigueNotificationMessage@@QAE@ABU0@@Z	; IntrigueNotificationMessage::IntrigueNotificationMessage
; Function compile flags: /Ogtpy
;	COMDAT ??0IntrigueNotificationMessage@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0IntrigueNotificationMessage@@QAE@ABU0@@Z PROC	; IntrigueNotificationMessage::IntrigueNotificationMessage, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR ___that$[esp+4]
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], ecx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], edx
	mov	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
	mov	ecx, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], ecx
	mov	edx, DWORD PTR [edi+32]
	lea	eax, DWORD PTR [edi+36]
	push	eax
	lea	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+32], edx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	cl, BYTE PTR [edi+64]
	pop	edi
	mov	BYTE PTR [esi+64], cl
	mov	eax, esi
	pop	esi
	ret	4
??0IntrigueNotificationMessage@@QAE@ABU0@@Z ENDP	; IntrigueNotificationMessage::IntrigueNotificationMessage
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	mov	eax, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	mov	edx, ecx
	shl	edx, 4
	add	edx, ecx
	add	edx, edx
	add	edx, edx
	add	DWORD PTR [eax], edx

; 376  : 		return (*this);
; 377  : 		}

	ret	4
??Y?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	mov	eax, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*8]
	add	DWORD PTR [eax], edx

; 376  : 		return (*this);
; 377  : 		}

	ret	4
??Y?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	mov	eax, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*8]
	add	DWORD PTR [eax], edx

; 376  : 		return (*this);
; 377  : 		}

	ret	4
??Y?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	mov	eax, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	add	ecx, ecx
	add	ecx, ecx
	add	DWORD PTR [eax], ecx

; 376  : 		return (*this);
; 377  : 		}

	ret	4
??Y?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+=
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	mov	eax, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*4]
	add	DWORD PTR [eax], edx

; 376  : 		return (*this);
; 377  : 		}

	ret	4
??Y?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::operator+=
_TEXT	ENDS
PUBLIC	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z	; GetLocalizedText<char const *>
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$0
__ehfuncinfo$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
_TEXT	SEGMENT
_bytes$ = -100						; size = 4
$T235840 = -96						; size = 4
_text$ = -92						; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z PROC	; GetLocalizedText<char const *>, COMDAT

; 501  : {

	push	-1
	push	__ehhandler$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H

; 502  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[esp+96]
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	ecx, DWORD PTR _text$[esp+116]
	xor	ebx, ebx
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+128], ebx
	mov	DWORD PTR $T235840[esp+120], ebx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 503  : 	text << arg1;

	mov	edx, DWORD PTR _arg1$[esp+108]
	push	edx
	lea	ecx, DWORD PTR _text$[esp+116]
	mov	DWORD PTR __$EHRec$[esp+124], 1
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 504  : 
; 505  : 	size_t bytes = 0;
; 506  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[esp+116]
	push	eax
	lea	ecx, DWORD PTR _text$[esp+120]
	mov	DWORD PTR _bytes$[esp+120], ebx
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z

; 507  : 	CvString str;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+108]
	mov	ecx, esi
	mov	edi, eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 508  : 	str.assign(szComposedString, bytes);
; 509  : 	return str;

	mov	ecx, DWORD PTR _bytes$[esp+112]
	push	ecx
	push	edi
	mov	ecx, esi
	mov	DWORD PTR $T235840[esp+120], 1
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
	lea	ecx, DWORD PTR _text$[esp+112]
	mov	BYTE PTR __$EHRec$[esp+120], bl
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 510  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+112]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 100				; 00000064H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z$1:
	mov	eax, DWORD PTR $T235840[ebp]
	and	eax, 1
	je	$LN5@GetLocaliz@2
	and	DWORD PTR $T235840[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetLocaliz@2:
	ret	0
__ehhandler$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z:
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ENDP	; GetLocalizedText<char const *>
PUBLIC	??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z ; GetLocalizedText<char const *,char const *,char const *>
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$0
__ehfuncinfo$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z
_TEXT	SEGMENT
_bytes$ = -100						; size = 4
$T235860 = -96						; size = 4
_text$ = -92						; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_arg3$ = 24						; size = 4
??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z PROC ; GetLocalizedText<char const *,char const *,char const *>, COMDAT

; 527  : {

	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H

; 528  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[esp+96]
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	ecx, DWORD PTR _text$[esp+116]
	xor	ebx, ebx
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+128], ebx
	mov	DWORD PTR $T235860[esp+120], ebx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 529  : 	text << arg1 << arg2 << arg3;

	mov	edx, DWORD PTR _arg1$[esp+108]
	mov	eax, DWORD PTR [edx]
	mov	esi, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _text$[esp+116]
	mov	DWORD PTR __$EHRec$[esp+124], 1
	call	esi
	mov	ecx, DWORD PTR _arg2$[esp+108]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _text$[esp+116]
	call	esi
	mov	eax, DWORD PTR _arg3$[esp+108]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _text$[esp+116]
	call	esi

; 530  : 
; 531  : 	size_t bytes = 0;
; 532  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[esp+116]
	push	edx
	lea	ecx, DWORD PTR _text$[esp+120]
	mov	DWORD PTR _bytes$[esp+120], ebx
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z

; 533  : 	CvString str;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+108]
	mov	ecx, esi
	mov	edi, eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 534  : 	str.assign(szComposedString, bytes);
; 535  : 	return str;

	mov	eax, DWORD PTR _bytes$[esp+112]
	push	eax
	push	edi
	mov	ecx, esi
	mov	DWORD PTR $T235860[esp+120], 1
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
	lea	ecx, DWORD PTR _text$[esp+112]
	mov	BYTE PTR __$EHRec$[esp+120], bl
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 536  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+112]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 100				; 00000064H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z$1:
	mov	eax, DWORD PTR $T235860[ebp]
	and	eax, 1
	je	$LN5@GetLocaliz@3
	and	DWORD PTR $T235860[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetLocaliz@3:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z:
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z ENDP ; GetLocalizedText<char const *,char const *,char const *>
PUBLIC	??$unchecked_copy@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z ; stdext::unchecked_copy<HeistLocation *,HeistLocation *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z PROC ; stdext::unchecked_copy<HeistLocation *,HeistLocation *>, COMDAT

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN7@unchecked_
	push	esi
$LL9@unchecked_:
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	add	ecx, 8
	add	eax, 8
	cmp	ecx, edx
	jne	SHORT $LL9@unchecked_
	pop	esi
$LN7@unchecked_:

; 3607 : 	}

	ret	0
??$unchecked_copy@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z ENDP ; stdext::unchecked_copy<HeistLocation *,HeistLocation *>
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z ; stdext::unchecked_copy<SpyNotificationMessage *,SpyNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_copy@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z
_TEXT	SEGMENT
$T235911 = -4						; size = 1
__Cat$235916 = -4					; size = 1
$T235913 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z PROC ; stdext::unchecked_copy<SpyNotificationMessage *,SpyNotificationMessage *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	BYTE PTR $T235911[esp+4], 0
	mov	eax, DWORD PTR $T235911[esp+4]
	mov	ecx, DWORD PTR __Cat$235916[esp+4]
	mov	edx, DWORD PTR $T235913[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Copy_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>

; 3607 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_copy@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z ENDP ; stdext::unchecked_copy<SpyNotificationMessage *,SpyNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCity * *,CvCity * *>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvCity * *,CvCity * *>, COMDAT

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jle	SHORT $LN10@unchecked_@2
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN10@unchecked_@2:
	pop	edi
	mov	eax, esi
	pop	esi

; 3607 : 	}

	ret	0
??$unchecked_copy@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvCity * *,CvCity * *>
_TEXT	ENDS
PUBLIC	??$fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z ; std::fill<HeistLocation *,HeistLocation>
; Function compile flags: /Ogtpy
;	COMDAT ??$fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z PROC ; std::fill<HeistLocation *,HeistLocation>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	cmp	eax, edx
	je	SHORT $LN3@fill
	mov	ecx, DWORD PTR __Val$[esp-4]
	push	esi
$LL5@fill:
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	add	eax, 8
	cmp	eax, edx
	jne	SHORT $LL5@fill
	pop	esi
$LN3@fill:

; 3188 : 	}

	ret	0
??$fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z ENDP ; std::fill<HeistLocation *,HeistLocation>
_TEXT	ENDS
PUBLIC	??$fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z ; std::fill<SpyNotificationMessage *,SpyNotificationMessage>
; Function compile flags: /Ogtpy
;	COMDAT ??$fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z PROC ; std::fill<SpyNotificationMessage *,SpyNotificationMessage>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	jmp	??$_Fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z ; std::_Fill<SpyNotificationMessage *,SpyNotificationMessage>
??$fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z ENDP ; std::fill<SpyNotificationMessage *,SpyNotificationMessage>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@0AAV?$allocator@PAVCvCity@@@0@@Z ; std::_Destroy_range<std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@0AAV?$allocator@PAVCvCity@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@0AAV?$allocator@PAVCvCity@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CvCity *> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@0AAV?$allocator@PAVCvCity@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??$fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z ; std::fill<CvCity * *,CvCity *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z PROC ; std::fill<CvCity * *,CvCity *>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@fill@2
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL5@fill@2:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL5@fill@2
	pop	esi
$LN3@fill@2:

; 3188 : 	}

	ret	0
??$fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z ENDP ; std::fill<CvCity * *,CvCity *>
_TEXT	ENDS
PUBLIC	??$fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z ; std::fill<ScoreCityEntry *,ScoreCityEntry>
; Function compile flags: /Ogtpy
;	COMDAT ??$fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z PROC ; std::fill<ScoreCityEntry *,ScoreCityEntry>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	cmp	eax, edx
	je	SHORT $LN3@fill@3
	mov	ecx, DWORD PTR __Val$[esp-4]
	push	esi
$LL5@fill@3:
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	add	eax, 8
	cmp	eax, edx
	jne	SHORT $LL5@fill@3
	pop	esi
$LN3@fill@3:

; 3188 : 	}

	ret	0
??$fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z ENDP ; std::fill<ScoreCityEntry *,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator!=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator!=, COMDAT
; _this$ = ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator!=
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Move_backward_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN5@Move_backw
	push	esi
$LL6@Move_backw:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL6@Move_backw
	pop	esi
$LN5@Move_backw:

; 2755 : 	}

	ret	0
??$_Move_backward_opt@PAUHeistLocation@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUHeistLocation@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<HeistLocation *,HeistLocation *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T236028 = -4						; size = 1
__Cat$236032 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	edx, DWORD PTR __First_dest_cat$[esp]
	mov	BYTE PTR $T236028[esp+4], 0
	mov	eax, DWORD PTR $T236028[esp+4]
	mov	ecx, DWORD PTR __Cat$236032[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Copy_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>

; 2755 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Move_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi
	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx
	test	eax, eax
	jle	SHORT $LN8@Move_backw@2
	push	ecx
	push	edx
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@Move_backw@2:
	mov	eax, esi
	pop	esi

; 2755 : 	}

	ret	0
??$_Move_backward_opt@PAPAVCvCity@@PAPAV1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAPAVCvCity@@PAPAV1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<CvCity * *,CvCity * *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUScoreCityEntry@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUScoreCityEntry@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<ScoreCityEntry *,ScoreCityEntry *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAUScoreCityEntry@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUScoreCityEntry@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUScoreCityEntry@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUScoreCityEntry@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<ScoreCityEntry *,ScoreCityEntry *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN5@Move_backw@3
	push	esi
$LL6@Move_backw@3:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL6@Move_backw@3
	pop	esi
$LN5@Move_backw@3:

; 2755 : 	}

	ret	0
??$_Move_backward_opt@PAUScoreCityEntry@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUScoreCityEntry@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<ScoreCityEntry *,ScoreCityEntry *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z	; IntrigueNotificationMessage::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z PROC	; IntrigueNotificationMessage::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR ___that$[esp+4]
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], ecx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], edx
	mov	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
	mov	ecx, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], ecx
	mov	edx, DWORD PTR [edi+32]
	lea	eax, DWORD PTR [edi+36]
	push	eax
	lea	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+32], edx
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	cl, BYTE PTR [edi+64]
	pop	edi
	mov	BYTE PTR [esi+64], cl
	mov	eax, esi
	pop	esi
	ret	4
??4IntrigueNotificationMessage@@QAEAAU0@ABU0@@Z ENDP	; IntrigueNotificationMessage::operator=
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@ABU3@@Z ; std::allocator<HeistLocation>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@ABU3@@Z PROC ; std::allocator<HeistLocation>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN5@construct
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN5@construct:

; 156  : 		}

	ret	8
?construct@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@ABU3@@Z ENDP ; std::allocator<HeistLocation>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@@Z ; std::allocator<HeistLocation>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@@Z PROC ; std::allocator<HeistLocation>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	4
?destroy@?$allocator@UHeistLocation@@@std@@QAEXPAUHeistLocation@@@Z ENDP ; std::allocator<HeistLocation>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@ABU3@@Z ; std::allocator<SpyNotificationMessage>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@ABU3@@Z PROC ; std::allocator<SpyNotificationMessage>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN5@construct@2
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], ecx
$LN5@construct@2:

; 156  : 		}

	ret	8
?construct@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@ABU3@@Z ENDP ; std::allocator<SpyNotificationMessage>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@@Z ; std::allocator<SpyNotificationMessage>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@@Z PROC ; std::allocator<SpyNotificationMessage>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	4
?destroy@?$allocator@USpyNotificationMessage@@@std@@QAEXPAUSpyNotificationMessage@@@Z ENDP ; std::allocator<SpyNotificationMessage>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@ABU3@@Z ; std::allocator<ScoreCityEntry>::construct
; Function compile flags: /Ogtpy
;	COMDAT ?construct@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@ABU3@@Z PROC ; std::allocator<ScoreCityEntry>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN5@construct@3
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN5@construct@3:

; 156  : 		}

	ret	8
?construct@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@ABU3@@Z ENDP ; std::allocator<ScoreCityEntry>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@@Z ; std::allocator<ScoreCityEntry>::destroy
; Function compile flags: /Ogtpy
;	COMDAT ?destroy@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@@Z PROC ; std::allocator<ScoreCityEntry>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	4
?destroy@?$allocator@UScoreCityEntry@@@std@@QAEXPAUScoreCityEntry@@@Z ENDP ; std::allocator<ScoreCityEntry>::destroy
_TEXT	ENDS
PUBLIC	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ PROC	; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>, COMDAT
; _this$ = ecx

; 546  : 		if (_Buf._Begin != 0)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN9@Temp_itera

; 547  : 			{	// destroy any constructed elements in buffer
; 548  : 			for (_Pty _Next = _Buf._Begin;
; 549  : 				_Next != _Buf._Hiwater; ++_Next)
; 550  : 				_Destroy(&*_Next);
; 551  : 			std::return_temporary_buffer(_Buf._Begin);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
$LN9@Temp_itera:

; 552  : 			}
; 553  : 		}

	ret	0
??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ENDP	; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebx

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	ebx, DWORD PTR __First$[esp]
	push	esi
	mov	esi, DWORD PTR __Last$[esp+4]
	cmp	ebx, esi
	je	SHORT $LN11@Copy_backw@6
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+8]
$LL2@Copy_backw@6:

; 2676 : 		*--_Dest = *--_Last;

	mov	eax, DWORD PTR [esi-68]
	sub	esi, 68					; 00000044H
	sub	edi, 68					; 00000044H
	mov	DWORD PTR [edi], eax
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], edx
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], ecx
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], edx
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], ecx
	mov	edx, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [esi+36]
	push	eax
	lea	ecx, DWORD PTR [edi+36]
	mov	DWORD PTR [edi+32], edx
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	cl, BYTE PTR [esi+64]
	mov	BYTE PTR [edi+64], cl
	cmp	esi, ebx
	jne	SHORT $LL2@Copy_backw@6

; 2677 : 	return (_Dest);

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 2678 : 	}

	ret	0
$LN11@Copy_backw@6:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[esp+4]
	pop	esi
	pop	ebx

; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z ; std::_Construct<IntrigueNotificationMessage,IntrigueNotificationMessage>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z$0
__ehfuncinfo$??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z
_TEXT	SEGMENT
$T236185 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$ = 8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z PROC ; std::_Construct<IntrigueNotificationMessage,IntrigueNotificationMessage>, COMDAT

; 50   : 	{	// construct object at _Ptr with value _Val

	push	-1
	push	__ehhandler$??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx

; 51   : 	void _FARQ *_Vptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp+12]
	mov	DWORD PTR __Vptr$[esp+12], ecx

; 52   : 	::new (_Vptr) _T1(_Val);

	mov	DWORD PTR $T236185[esp+16], ecx
	mov	DWORD PTR __$EHRec$[esp+24], 0
	test	ecx, ecx
	je	SHORT $LN3@Construct@4
	mov	eax, DWORD PTR __Val$[esp+12]
	push	eax
	call	??0IntrigueNotificationMessage@@QAE@ABU0@@Z
$LN3@Construct@4:

; 53   : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp-4]
	push	eax
	mov	ecx, DWORD PTR $T236185[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@UIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@ABU1@@Z ENDP ; std::_Construct<IntrigueNotificationMessage,IntrigueNotificationMessage>
PUBLIC	??_GIntrigueNotificationMessage@@QAEPAXI@Z	; IntrigueNotificationMessage::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GIntrigueNotificationMessage@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GIntrigueNotificationMessage@@QAEPAXI@Z PROC		; IntrigueNotificationMessage::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+36]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN10@scalar@4
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN10@scalar@4:
	mov	eax, esi
	pop	esi
	ret	4
??_GIntrigueNotificationMessage@@QAEPAXI@Z ENDP		; IntrigueNotificationMessage::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??$_Distance2@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Distance2@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>, COMDAT

; 1867 : 
; 1868 :  #if _HAS_ITERATOR_DEBUGGING
; 1869 : 	if (_First != _Last)
; 1870 : 		{	// check for null pointers
; 1871 : 		_DEBUG_POINTER(_First);
; 1872 : 		_DEBUG_POINTER(_Last);
; 1873 : 		}
; 1874 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1875 : 
; 1876 : 	_Off += _Last - _First;

	mov	ecx, DWORD PTR __Last$[esp-4]
	sub	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Off$[esp-4]
	sar	ecx, 3
	add	DWORD PTR [eax], ecx

; 1877 : 	}

	ret	0
??$_Distance2@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAPAVCvCity@@IPAV1@Urandom_access_iterator_tag@std@@@std@@YAXPAPAVCvCity@@IABQAV1@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<CvCity * *,unsigned int,CvCity *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill_n@PAPAVCvCity@@IPAV1@Urandom_access_iterator_tag@std@@@std@@YAXPAPAVCvCity@@IABQAV1@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAPAVCvCity@@IPAV1@Urandom_access_iterator_tag@std@@@std@@YAXPAPAVCvCity@@IABQAV1@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<CvCity * *,unsigned int,CvCity *,std::random_access_iterator_tag>, COMDAT

; 3242 : 		_Fill_n(_First, _Count, _Val, _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN3@Fill_n@3
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL5@Fill_n@3:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL5@Fill_n@3
	pop	esi
$LN3@Fill_n@3:

; 3243 : 	}

	ret	0
??$_Fill_n@PAPAVCvCity@@IPAV1@Urandom_access_iterator_tag@std@@@std@@YAXPAPAVCvCity@@IABQAV1@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<CvCity * *,unsigned int,CvCity *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >, COMDAT

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN8@unchecked_@3
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@3:
	pop	edi
	mov	eax, esi
	pop	esi

; 823  : 	}

	ret	0
??$unchecked_uninitialized_copy@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvCity * *,CvCity * *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z ; std::get_temporary_buffer<ScoreCityEntry>
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
; Function compile flags: /Ogtpy
;	COMDAT ??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z
_TEXT	SEGMENT
$T236261 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T236265 = 12						; size = 4
__Count$ = 12						; size = 4
??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z PROC ; std::get_temporary_buffer<ScoreCityEntry>, COMDAT

; 19   : 	{	// get raw temporary buffer of up to _Count elements

	sub	esp, 12					; 0000000cH
	push	esi

; 20   : 	_Ty _FARQ *_Pbuf;
; 21   : 
; 22   : 	if (_Count <= 0)

	mov	esi, DWORD PTR __Count$[esp+12]
	test	esi, esi
	jg	SHORT $LN7@get_tempor

; 23   : 		_Count = 0;

	xor	esi, esi
$LN5@get_tempor:

; 26   : 
; 27   : 	for (_Pbuf = 0; 0 < _Count; _Count /= 2)

	xor	ecx, ecx
	test	esi, esi
	jle	SHORT $LN15@get_tempor
	npad	12
$LL4@get_tempor:

; 28   : 		if ((_Pbuf = (_Ty _FARQ *)operator new(
; 29   : 			(_SIZT)_Count * sizeof (_Ty), nothrow)) != 0)

	lea	edx, DWORD PTR [esi*8]
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	edx
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN15@get_tempor
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	test	esi, esi
	jg	SHORT $LL4@get_tempor
$LN15@get_tempor:

; 30   : 			break;
; 31   : 
; 32   : 	return (pair<_Ty _FARQ *, _PDFT>(_Pbuf, _Count));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+12]
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax], ecx
	pop	esi

; 33   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN7@get_tempor:

; 24   : 	else if (((size_t)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	esi
	cmp	eax, 8
	jae	SHORT $LN5@get_tempor

; 25   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T236265[esp+12]
	push	eax
	lea	ecx, DWORD PTR $T236261[esp+20]
	mov	DWORD PTR $T236265[esp+16], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236261[esp+20]
	push	ecx
	mov	DWORD PTR $T236261[esp+24], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN18@get_tempor:
$LN17@get_tempor:
	int	3
??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z ENDP ; std::get_temporary_buffer<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 314  : 	_Vector_iterator()

	mov	eax, ecx
	mov	DWORD PTR [eax], 0

; 315  : 		{	// construct with null vector pointer
; 316  : 		}

	ret	0
??0?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??D?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEAAUScoreCityEntry@@XZ ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator*
; Function compile flags: /Ogtpy
;	COMDAT ??D?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEAAUScoreCityEntry@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEAAUScoreCityEntry@@XZ PROC ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator*, COMDAT
; _this$ = ecx

; 339  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [ecx]

; 340  : 		}

	ret	0
??D?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBEAAUScoreCityEntry@@XZ ENDP ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator*
_TEXT	ENDS
PUBLIC	??0?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@ABV01@@Z ; std::_Temp_iterator<ScoreCityEntry>::_Temp_iterator<ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??0?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@ABV01@@Z PROC ; std::_Temp_iterator<ScoreCityEntry>::_Temp_iterator<ScoreCityEntry>, COMDAT
; _this$ = ecx

; 535  : 	_Temp_iterator(const _Temp_iterator<_Ty>& _Right)

	mov	eax, ecx

; 536  : 		{	// construct from _Right (share active buffer)
; 537  : 		_Buf._Begin = 0;	// clear stored buffer, for safe destruction

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx

; 538  : 		_Buf._Current = 0;

	mov	DWORD PTR [eax+4], ecx

; 539  : 		_Buf._Hiwater = 0;

	mov	DWORD PTR [eax+8], ecx

; 540  : 		_Buf._Size = 0;

	mov	DWORD PTR [eax+12], ecx

; 541  : 		*this = _Right;

	mov	ecx, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 542  : 		}

	ret	4
??0?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@ABV01@@Z ENDP ; std::_Temp_iterator<ScoreCityEntry>::_Temp_iterator<ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Advance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HUrandom_access_iterator_tag@0@@Z ; std::_Advance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Advance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>, COMDAT

; 1822 : 	_Where += _Off;

	mov	eax, DWORD PTR __Off$[esp-4]
	lea	ecx, DWORD PTR [eax*8]
	mov	eax, DWORD PTR __Where$[esp-4]
	add	DWORD PTR [eax], ecx

; 1823 : 	}

	ret	0
??$_Advance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>
_TEXT	ENDS
PUBLIC	??$iter_swap@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z ; std::iter_swap<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$iter_swap@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z PROC ; std::iter_swap<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	ecx, DWORD PTR __Right$[esp-4]
	mov	eax, DWORD PTR __Left$[esp-4]
	push	esi
	mov	edx, ecx
	mov	esi, eax
	cmp	eax, ecx
	je	SHORT $LN11@iter_swap
	push	ebx
	mov	ebx, DWORD PTR [ecx]
	push	edi
	mov	edi, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ebx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [edx], edi
	pop	edi
	mov	DWORD PTR [edx+4], eax
	pop	ebx
$LN11@iter_swap:
	pop	esi

; 595  : 	}

	ret	0
??$iter_swap@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0@Z ENDP ; std::iter_swap<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >, COMDAT

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;
; 128  : 
; 129  : 	_TRY_BEGIN
; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN4@Uninit_cop@3
	push	esi
$LL6@Uninit_cop@3:

; 131  : 		_Al.construct(_Dest, *_First);

	test	eax, eax
	je	SHORT $LN5@Uninit_cop@3
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
$LN5@Uninit_cop@3:
	add	ecx, 8
	add	eax, 8
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_cop@3
	pop	esi
$LN4@Uninit_cop@3:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)
; 134  : 		_Al.destroy(_Next);
; 135  : 	_RERAISE;
; 136  : 	_CATCH_END
; 137  : 	return (_Dest);
; 138  : 	}

	ret	0
??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >, COMDAT

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;
; 128  : 
; 129  : 	_TRY_BEGIN
; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN4@Uninit_cop@4
	push	esi
$LL6@Uninit_cop@4:

; 131  : 		_Al.construct(_Dest, *_First);

	test	eax, eax
	je	SHORT $LN5@Uninit_cop@4
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	mov	esi, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], esi
$LN5@Uninit_cop@4:
	add	ecx, 20					; 00000014H
	add	eax, 20					; 00000014H
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_cop@4
	pop	esi
$LN4@Uninit_cop@4:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)
; 134  : 		_Al.destroy(_Next);
; 135  : 	_RERAISE;
; 136  : 	_CATCH_END
; 137  : 	return (_Dest);
; 138  : 	}

	ret	0
??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >, COMDAT

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;
; 128  : 
; 129  : 	_TRY_BEGIN
; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN4@Uninit_cop@5
	push	esi
$LL6@Uninit_cop@5:

; 131  : 		_Al.construct(_Dest, *_First);

	test	eax, eax
	je	SHORT $LN5@Uninit_cop@5
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
$LN5@Uninit_cop@5:
	add	ecx, 8
	add	eax, 8
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_cop@5
	pop	esi
$LN4@Uninit_cop@5:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)
; 134  : 		_Al.destroy(_Next);
; 135  : 	_RERAISE;
; 136  : 	_CATCH_END
; 137  : 	return (_Dest);
; 138  : 	}

	ret	0
??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??E?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator++
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator++, COMDAT
; _this$ = ecx

; 348  : 		{	// preincrement

	mov	eax, ecx

; 349  : 		++(*(_Mybase *)this);

	add	DWORD PTR [eax], 8

; 350  : 		return (*this);
; 351  : 		}

	ret	0
??E?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator++
_TEXT	ENDS
PUBLIC	??F?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??F?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator--, COMDAT
; _this$ = ecx

; 361  : 		{	// predecrement

	mov	eax, ecx

; 362  : 		--(*(_Mybase *)this);

	add	DWORD PTR [eax], -8			; fffffff8H

; 363  : 		return (*this);
; 364  : 		}

	ret	0
??F?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator--
_TEXT	ENDS
PUBLIC	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T236464 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 20
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
___formal$ = 48						; size = 1
??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,std::forward_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ecx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ecx, DWORD PTR __First$[esp]
	push	esi
	push	edi
	xor	edi, edi
	mov	DWORD PTR $T236464[esp+12], edi
	cmp	ecx, DWORD PTR __Last$[esp+8]
	je	SHORT $LN1@Copy_opt@5
	lea	esi, DWORD PTR [edi+8]
$LL13@Copy_opt@5:

; 2472 : 		*_Dest = *_First;

	mov	edx, DWORD PTR __Dest$[esp+24]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN26@Copy_opt@5
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR __Dest$[esp+24]
	add	DWORD PTR [eax+4], esi
	jmp	SHORT $LN2@Copy_opt@5
$LN26@Copy_opt@5:
	cmp	eax, edi
	je	SHORT $LN31@Copy_opt@5
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR __Dest$[esp+24]
$LN31@Copy_opt@5:
	add	DWORD PTR [edx+4], esi
	mov	eax, DWORD PTR __Dest$[esp+24]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+8], edx
$LN2@Copy_opt@5:
	mov	ecx, DWORD PTR __First$[esp+8]
	add	ecx, esi
	mov	DWORD PTR __First$[esp+8], ecx
	cmp	ecx, DWORD PTR __Last$[esp+8]
	jne	SHORT $LL13@Copy_opt@5
$LN1@Copy_opt@5:

; 2473 : 	return (_Dest);

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	eax, DWORD PTR __Dest$[esp+24]
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], edi
	cmp	eax, edi
	je	SHORT $LN53@Copy_opt@5
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN53@Copy_opt@5:
	pop	edi
	mov	eax, esi
	pop	esi

; 2474 : 	}

	pop	ecx
	ret	0
??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __Last$[esp-4]
	cmp	DWORD PTR __First$[esp-4], eax
	je	SHORT $LN27@Copy_backw@7
	npad	6
$LL2@Copy_backw@7:

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Dest$[esp-4]
	sub	eax, 8
	sub	ecx, 8
	mov	DWORD PTR __Last$[esp-4], eax
	mov	DWORD PTR __Dest$[esp-4], ecx
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __Last$[esp-4]
	cmp	DWORD PTR __First$[esp-4], eax
	jne	SHORT $LL2@Copy_backw@7

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	edx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [eax], edx

; 2678 : 	}

	ret	0
$LN27@Copy_backw@7:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [eax], ecx

; 2678 : 	}

	ret	0
??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$advance@PAUScoreCityEntry@@H@std@@YAXAAPAUScoreCityEntry@@H@Z ; std::advance<ScoreCityEntry *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$advance@PAUScoreCityEntry@@H@std@@YAXAAPAUScoreCityEntry@@H@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@PAUScoreCityEntry@@H@std@@YAXAAPAUScoreCityEntry@@H@Z PROC ; std::advance<ScoreCityEntry *,int>, COMDAT

; 1774 : 	_Advance(_Where, _Off, _Iter_cat(_Where));

	mov	eax, DWORD PTR __Off$[esp-4]
	lea	ecx, DWORD PTR [eax*8]
	mov	eax, DWORD PTR __Where$[esp-4]
	add	DWORD PTR [eax], ecx

; 1775 : 	}

	ret	0
??$advance@PAUScoreCityEntry@@H@std@@YAXAAPAUScoreCityEntry@@H@Z ENDP ; std::advance<ScoreCityEntry *,int>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>, COMDAT

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	cmp	eax, DWORD PTR __Last$[esp-4]
	je	SHORT $LN28@Copy_opt@6
	mov	ecx, 8
	push	esi
$LL12@Copy_opt@6:

; 2472 : 		*_Dest = *_First;

	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR __Dest$[esp]
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Dest$[esp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR __First$[esp]
	add	DWORD PTR __Dest$[esp], ecx
	add	eax, ecx
	mov	DWORD PTR __First$[esp], eax
	cmp	eax, DWORD PTR __Last$[esp]
	jne	SHORT $LL12@Copy_opt@6

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	ecx, DWORD PTR __Dest$[esp]
	mov	DWORD PTR [eax], ecx
	pop	esi

; 2474 : 	}

	ret	0
$LN28@Copy_opt@6:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	edx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [eax], edx

; 2474 : 	}

	ret	0
??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Copy_backward_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	cmp	edx, eax
	je	SHORT $LN15@Copy_backw@8
	push	esi
	npad	3
$LL2@Copy_backw@8:

; 2676 : 		*--_Dest = *--_Last;

	mov	ecx, DWORD PTR __Dest$[esp]
	mov	esi, DWORD PTR [eax-8]
	sub	eax, 8
	sub	ecx, 8
	mov	DWORD PTR __Dest$[esp], ecx
	mov	DWORD PTR [ecx], esi
	mov	ecx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR __Dest$[esp]
	mov	DWORD PTR [esi+4], ecx
	cmp	eax, edx
	jne	SHORT $LL2@Copy_backw@8

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	edx, DWORD PTR __Dest$[esp]
	mov	DWORD PTR [eax], edx
	pop	esi

; 2678 : 	}

	ret	0
$LN15@Copy_backw@8:

; 2677 : 	return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [eax], ecx

; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Copy_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>, COMDAT

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN16@Copy_opt@7
	push	esi
	mov	edx, 8
	push	edi
$LL3@Copy_opt@7:

; 2472 : 		*_Dest = *_First;

	mov	esi, DWORD PTR [eax]
	mov	edi, DWORD PTR __Dest$[esp+4]
	mov	DWORD PTR [edi], esi
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR __Dest$[esp+4]
	mov	DWORD PTR [edi+4], esi
	add	DWORD PTR __Dest$[esp+4], edx
	add	eax, edx
	cmp	eax, ecx
	jne	SHORT $LL3@Copy_opt@7

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	ecx, DWORD PTR __Dest$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], ecx
	pop	esi

; 2474 : 	}

	ret	0
$LN16@Copy_opt@7:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	edx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [eax], edx

; 2474 : 	}

	ret	0
??$_Copy_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT
; _p$ = eax

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 302  : }

	ret	0
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1

; 302  : }

	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
PUBLIC	?getX@CvCity@@QBEHXZ				; CvCity::getX
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
;	COMDAT ?getX@CvCity@@QBEHXZ
_TEXT	SEGMENT
?getX@CvCity@@QBEHXZ PROC				; CvCity::getX, COMDAT
; _this$ = ecx

; 340  : 		return m_iX;

	mov	eax, DWORD PTR [ecx+96]

; 341  : 	}

	ret	0
?getX@CvCity@@QBEHXZ ENDP				; CvCity::getX
_TEXT	ENDS
PUBLIC	?getY@CvCity@@QBEHXZ				; CvCity::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvCity@@QBEHXZ
_TEXT	SEGMENT
?getY@CvCity@@QBEHXZ PROC				; CvCity::getY, COMDAT
; _this$ = ecx

; 345  : 		return m_iY;

	mov	eax, DWORD PTR [ecx+108]

; 346  : 	}

	ret	0
?getY@CvCity@@QBEHXZ ENDP				; CvCity::getY
_TEXT	ENDS
PUBLIC	?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ	; CvCity::getOwner
; Function compile flags: /Ogtpy
;	COMDAT ?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ PROC		; CvCity::getOwner, COMDAT
; _this$ = ecx

; 604  : 		return m_eOwner;

	mov	eax, DWORD PTR [ecx+84]

; 605  : 	}

	ret	0
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ ENDP		; CvCity::getOwner
_TEXT	ENDS
PUBLIC	?isAlive@CvPlayer@@QBE_NXZ			; CvPlayer::isAlive
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
;	COMDAT ?isAlive@CvPlayer@@QBE_NXZ
_TEXT	SEGMENT
?isAlive@CvPlayer@@QBE_NXZ PROC				; CvPlayer::isAlive, COMDAT
; _this$ = ecx

; 1092 : 		return m_bAlive;

	mov	al, BYTE PTR [ecx+2256]

; 1093 : 	}

	ret	0
?isAlive@CvPlayer@@QBE_NXZ ENDP				; CvPlayer::isAlive
_TEXT	ENDS
PUBLIC	?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ		; CvPlayer::GetID
; Function compile flags: /Ogtpy
;	COMDAT ?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ PROC		; CvPlayer::GetID, COMDAT
; _this$ = ecx

; 1168 : 		return m_eID;

	mov	eax, DWORD PTR [ecx+44]

; 1169 : 	}

	ret	0
?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ ENDP		; CvPlayer::GetID
_TEXT	ENDS
PUBLIC	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ		; CvPlayer::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ PROC		; CvPlayer::getTeam, COMDAT
; _this$ = ecx

; 1178 : 		return CvPreGame::teamType(m_eID);

	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN5@getTeam
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 1179 : 	}

	ret	0

; 1178 : 		return CvPreGame::teamType(m_eID);

$LN5@getTeam:
	or	eax, -1

; 1179 : 	}

	ret	0
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ ENDP		; CvPlayer::getTeam
_TEXT	ENDS
PUBLIC	?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z	; CvPlot::isRevealed
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z PROC		; CvPlot::isRevealed, COMDAT
; _this$ = ecx

; 620  : 	{

	mov	edx, ecx

; 621  : 		CvAssertMsg(eTeam >= 0, "eTeam is expected to be non-negative (invalid Index)");
; 622  : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is expected to be within maximum bounds (invalid Index)");
; 623  : 		return m_bfRevealed.GetBit(eTeam);

	mov	ecx, DWORD PTR _eTeam$[esp-4]
	push	esi
	mov	eax, ecx
	shr	eax, 5
	mov	esi, eax
	shl	esi, 5
	sub	ecx, esi
	mov	esi, 1
	shl	esi, cl
	test	esi, DWORD PTR [edx+eax*4+8]
	pop	esi
	setne	al

; 624  : 	}

	ret	4
?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z ENDP		; CvPlot::isRevealed
_TEXT	ENDS
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	mov	eax, DWORD PTR _iX$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4020]
	jge	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _iY$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4024]
	jge	SHORT $LN3@isPlot
	mov	eax, 1

; 161  : #endif
; 162  : 	}

	ret	8
$LN3@isPlot:

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	xor	eax, eax

; 161  : #endif
; 162  : 	}

	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
_TEXT	ENDS
PUBLIC	?plotNum@CvMap@@QBEHHH@Z			; CvMap::plotNum
; Function compile flags: /Ogtpy
;	COMDAT ?plotNum@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plotNum@CvMap@@QBEHHH@Z PROC				; CvMap::plotNum, COMDAT
; _this$ = ecx

; 183  : 		return ((iY * getGridWidth()) + iX);

	mov	eax, DWORD PTR [ecx+4020]
	imul	eax, DWORD PTR _iY$[esp-4]
	add	eax, DWORD PTR _iX$[esp-4]

; 184  : #endif
; 185  : 	}

	ret	8
?plotNum@CvMap@@QBEHHH@Z ENDP				; CvMap::plotNum
_TEXT	ENDS
PUBLIC	?plot@CvMap@@QBEPAVCvPlot@@HH@Z			; CvMap::plot
; Function compile flags: /Ogtpy
;	COMDAT ?plot@CvMap@@QBEPAVCvPlot@@HH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plot@CvMap@@QBEPAVCvPlot@@HH@Z PROC			; CvMap::plot, COMDAT
; _this$ = ecx

; 273  : 		if((iX == INVALID_PLOT_COORD) || (iY == INVALID_PLOT_COORD))

	mov	eax, DWORD PTR _iX$[esp-4]
	push	ebp
	cmp	eax, -2147483647			; 80000001H
	je	$LN1@plot
	mov	ebp, DWORD PTR _iY$[esp]
	cmp	ebp, -2147483647			; 80000001H
	je	$LN1@plot

; 276  : 		}
; 277  : 		int iMapX = coordRange(iX, getGridWidth(), isWrapX());

	cmp	BYTE PTR [ecx+4056], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR [ecx+4020]
	push	edi
	je	SHORT $LN11@plot
	test	eax, eax
	jge	SHORT $LN13@plot
	cdq
	idiv	esi
	mov	edi, edx
	add	edi, esi
	jmp	SHORT $LN15@plot
$LN13@plot:
	cmp	eax, esi
	jl	SHORT $LN11@plot
	cdq
	idiv	esi
	mov	edi, edx
	jmp	SHORT $LN15@plot
$LN11@plot:
	mov	edi, eax
$LN15@plot:

; 278  : 		int iMapY = coordRange(iY, getGridHeight(), isWrapY());

	cmp	BYTE PTR [ecx+4057], 0
	mov	ebx, DWORD PTR [ecx+4024]
	je	SHORT $LN40@plot
	test	ebp, ebp
	jge	SHORT $LN23@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN25@plot
$LN23@plot:
	cmp	ebp, ebx
	jl	SHORT $LN40@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	jmp	SHORT $LN25@plot
$LN40@plot:
	mov	edx, ebp
$LN25@plot:

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	test	edi, edi
	jl	SHORT $LN5@plot
	cmp	edi, esi
	jge	SHORT $LN5@plot
	test	edx, edx
	jl	SHORT $LN5@plot
	cmp	edx, ebx
	jge	SHORT $LN5@plot
	imul	esi, edx
	add	esi, edi
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ecx+4068]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp

; 280  : 	}

	ret	8
$LN5@plot:
	pop	edi
	pop	esi
	pop	ebx

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
$LN1@plot:

; 274  : 		{
; 275  : 			return NULL;

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
?plot@CvMap@@QBEPAVCvPlot@@HH@Z ENDP			; CvMap::plot
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	mov	eax, ecx

; 426  : 		}

	ret	4
??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 732  : 		}

	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAH@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAH@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 333  : 		{	// construct with pointer _Ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 334  : 		}

	ret	4
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAH@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=, COMDAT
; _this$ = ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z	; stdext::unchecked_copy<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z PROC	; stdext::unchecked_copy<int *,int *>, COMDAT

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jle	SHORT $LN10@unchecked_@4
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN10@unchecked_@4:
	pop	edi
	mov	eax, esi
	pop	esi

; 3607 : 	}

	ret	0
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ENDP	; stdext::unchecked_copy<int *,int *>
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	mov	eax, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*4]
	add	DWORD PTR [eax], edx

; 376  : 		return (*this);
; 377  : 		}

	ret	4
??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
_TEXT	ENDS
PUBLIC	??$fill@PAHH@std@@YAXPAH0ABH@Z			; std::fill<int *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAHH@std@@YAXPAH0ABH@Z PROC			; std::fill<int *,int>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@fill@4
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL5@fill@4:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL5@fill@4
	pop	esi
$LN3@fill@4:

; 3188 : 	}

	ret	0
??$fill@PAHH@std@@YAXPAH0ABH@Z ENDP			; std::fill<int *,int>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi
	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx
	test	eax, eax
	jle	SHORT $LN8@Move_backw@4
	push	ecx
	push	edx
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@Move_backw@4:
	mov	eax, esi
	pop	esi

; 2755 : 	}

	ret	0
??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Fill_n@PAHIHUrandom_access_iterator_tag@std@@@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Fill_n@PAHIHUrandom_access_iterator_tag@std@@@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAHIHUrandom_access_iterator_tag@std@@@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int,std::random_access_iterator_tag>, COMDAT

; 3242 : 		_Fill_n(_First, _Count, _Val, _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN3@Fill_n@4
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL5@Fill_n@4:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL5@Fill_n@4
	pop	esi
$LN3@Fill_n@4:

; 3243 : 	}

	ret	0
??$_Fill_n@PAHIHUrandom_access_iterator_tag@std@@@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN8@unchecked_@5
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_@5:
	pop	edi
	mov	eax, esi
	pop	esi

; 823  : 	}

	ret	0
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
;	COMDAT ?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z
_TEXT	SEGMENT
_uiSpyIndex$ = 8					; size = 4
?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z PROC ; CvPlayerEspionage::GetCityWithSpy, COMDAT
; _this$ = ecx

; 988  : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "uiSpyIndex is out of bounds");
; 989  : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]

; 990  : 	{
; 991  : #ifdef AUI_WARNING_FIXES
; 992  : 		return NULL;
; 993  : #else
; 994  : 		return false;

	jae	$LN56@GetCityWit

; 995  : #endif
; 996  : 	}
; 997  : 
; 998  : 	if(m_aSpyList[uiSpyIndex].m_iCityX == -1 && m_aSpyList[uiSpyIndex].m_iCityY == -1)

	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, -1
	jne	SHORT $LN2@GetCityWit
	cmp	DWORD PTR [ecx+8], eax

; 999  : 	{
; 1000 : 		return NULL;

	je	$LN56@GetCityWit
$LN2@GetCityWit:
	push	ebx

; 1001 : 	}
; 1002 : 
; 1003 : 	CvPlot* pCityPlot = GC.getMap().plot(m_aSpyList[uiSpyIndex].m_iCityX, m_aSpyList[uiSpyIndex].m_iCityY);

	mov	ebx, DWORD PTR [ecx+8]
	push	ebp
	push	esi
	push	edi
	cmp	eax, -2147483647			; 80000001H
	je	$LN18@GetCityWit
	cmp	ebx, -2147483647			; 80000001H
	je	SHORT $LN18@GetCityWit
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	je	SHORT $LN62@GetCityWit
	test	eax, eax
	jge	SHORT $LN30@GetCityWit
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN32@GetCityWit
$LN30@GetCityWit:
	cmp	eax, ecx
	jl	SHORT $LN62@GetCityWit
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN32@GetCityWit
$LN62@GetCityWit:
	mov	esi, eax
$LN32@GetCityWit:
	cmp	BYTE PTR [ebp+4057], 0
	mov	edi, DWORD PTR [ebp+4024]
	je	SHORT $LN63@GetCityWit
	test	ebx, ebx
	jge	SHORT $LN40@GetCityWit
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN42@GetCityWit
$LN40@GetCityWit:
	cmp	ebx, edi
	jl	SHORT $LN63@GetCityWit
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN42@GetCityWit
$LN63@GetCityWit:
	mov	edx, ebx
$LN42@GetCityWit:
	test	esi, esi
	jl	SHORT $LN18@GetCityWit
	cmp	esi, ecx
	jge	SHORT $LN18@GetCityWit
	test	edx, edx
	jl	SHORT $LN18@GetCityWit
	cmp	edx, edi
	jge	SHORT $LN18@GetCityWit
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]
	jmp	SHORT $LN20@GetCityWit
$LN18@GetCityWit:
	xor	ecx, ecx
$LN20@GetCityWit:
	pop	edi
	pop	esi

; 1004 : 	CvAssertMsg(pCityPlot, "pCityPlot is null. This should have been caught above");
; 1005 : 	CvCity* pCity = NULL;

	xor	eax, eax
	pop	ebp
	pop	ebx

; 1006 : 	if(pCityPlot)

	test	ecx, ecx
	je	SHORT $LN4@GetCityWit

; 1007 : 	{
; 1008 : 		pCity = pCityPlot->getPlotCity();

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN56@GetCityWit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN56@GetCityWit
	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _uiSpyIndex$[esp-4], ecx
	mov	ecx, eax
	jmp	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
$LN56@GetCityWit:
	xor	eax, eax
$LN4@GetCityWit:

; 1009 : 		CvAssertMsg(pCity, "Spy is pointing to empty city, what's up with that");
; 1010 : 	}
; 1011 : 
; 1012 : 	return pCity;
; 1013 : }

	ret	4
?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ENDP ; CvPlayerEspionage::GetCityWithSpy
_TEXT	ENDS
PUBLIC	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity
EXTRN	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ:PROC ; CvCity::GetCityEspionage
; Function compile flags: /Ogtpy
;	COMDAT ?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z
_TEXT	SEGMENT
_pCity$ = 8						; size = 4
?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z PROC ; CvPlayerEspionage::GetSpyIndexInCity, COMDAT
; _this$ = ecx

; 1017 : {

	mov	eax, ecx

; 1018 : 	CvAssertMsg(pCity, "pCity is null. Can't do much with this");
; 1019 : 	if(!pCity)

	mov	ecx, DWORD PTR _pCity$[esp-4]
	test	ecx, ecx
	jne	SHORT $LN1@GetSpyInde

; 1020 : 	{
; 1021 : 		return -1;

	or	eax, -1

; 1025 : }

	ret	4
$LN1@GetSpyInde:

; 1022 : 	}
; 1023 : 
; 1024 : 	return pCity->GetCityEspionage()->m_aiSpyAssignment[m_pPlayer->GetID()];

	mov	eax, DWORD PTR [eax+1292]
	push	esi
	mov	esi, DWORD PTR [eax+44]
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	mov	eax, DWORD PTR [eax+esi*4]
	pop	esi

; 1025 : }

	ret	4
?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ENDP ; CvPlayerEspionage::GetSpyIndexInCity
_TEXT	ENDS
PUBLIC	?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::CanEverMoveSpyTo
EXTRN	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isHasMet
EXTRN	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ:PROC	; CvCity::getTeam
EXTRN	?plot@CvCity@@QBEPAVCvPlot@@XZ:PROC		; CvCity::plot
; Function compile flags: /Ogtpy
;	COMDAT ?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z
_TEXT	SEGMENT
_pCity$ = 8						; size = 4
?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z PROC ; CvPlayerEspionage::CanEverMoveSpyTo, COMDAT
; _this$ = ecx

; 1030 : {

	push	ebx

; 1031 : 	// allow moving into empty spaces
; 1032 : 	if(!pCity)

	mov	ebx, DWORD PTR _pCity$[esp]
	push	edi
	mov	edi, ecx
	test	ebx, ebx
	jne	SHORT $LN4@CanEverMov
	pop	edi

; 1033 : 	{
; 1034 : 		return true;

	mov	al, 1
	pop	ebx

; 1051 : 	{
; 1052 : 		return false;
; 1053 : 	}
; 1054 : 
; 1055 : 	return true;
; 1056 : }

	ret	4
$LN4@CanEverMov:
	push	ebp

; 1035 : 	}
; 1036 : 
; 1037 : 	CvPlot* pPlot = pCity->plot();

	mov	ecx, ebx
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	ebp, eax

; 1038 : 	CvAssertMsg(pPlot, "No plot() for pCity");
; 1039 : 	if(!pPlot)

	test	ebp, ebp

; 1040 : 	{
; 1041 : 		return false;

	je	SHORT $LN32@CanEverMov

; 1042 : 	}
; 1043 : 
; 1044 : 	if(!GET_TEAM(m_pPlayer->getTeam()).isHasMet(pCity->getTeam()))

	mov	eax, DWORD PTR [edi+1292]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN11@CanEverMov
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN12@CanEverMov
$LN11@CanEverMov:
	or	eax, -1
$LN12@CanEverMov:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	esi
	mov	ecx, ebx
	mov	esi, eax
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, esi
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	pop	esi
	test	al, al
	jne	SHORT $LN2@CanEverMov
$LN32@CanEverMov:
	pop	ebp
	pop	edi

; 1045 : 	{
; 1046 : 		return false;

	xor	al, al
	pop	ebx

; 1051 : 	{
; 1052 : 		return false;
; 1053 : 	}
; 1054 : 
; 1055 : 	return true;
; 1056 : }

	ret	4
$LN2@CanEverMov:

; 1047 : 	}
; 1048 : 
; 1049 : 	// check to see if the plot can be seen
; 1050 : 	if(!pPlot->isRevealed(m_pPlayer->getTeam()))

	mov	eax, DWORD PTR [edi+1292]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN22@CanEverMov
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN23@CanEverMov
$LN22@CanEverMov:
	or	ecx, -1
$LN23@CanEverMov:
	mov	eax, ecx
	shr	eax, 5
	mov	edx, eax
	shl	edx, 5
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	test	edx, DWORD PTR [ebp+eax*4+8]
	pop	ebp
	pop	edi
	setne	al
	pop	ebx

; 1051 : 	{
; 1052 : 		return false;
; 1053 : 	}
; 1054 : 
; 1055 : 	return true;
; 1056 : }

	ret	4
?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ENDP ; CvPlayerEspionage::CanEverMoveSpyTo
_TEXT	ENDS
PUBLIC	?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::CanMoveSpyTo
EXTRN	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isAtWar
EXTRN	?isCapital@CvCity@@QBE_NXZ:PROC			; CvCity::isCapital
; Function compile flags: /Ogtpy
;	COMDAT ?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
_TEXT	SEGMENT
_pCity$ = 8						; size = 4
_uiSpyIndex$ = 12					; size = 4
_bAsDiplomat$ = 16					; size = 1
?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z PROC ; CvPlayerEspionage::CanMoveSpyTo, COMDAT
; _this$ = ecx

; 1060 : {

	push	esi
	push	edi

; 1061 : 	// This allows the player to move the spy off the board
; 1062 : 	if(!pCity)

	mov	edi, DWORD PTR _pCity$[esp+4]
	mov	esi, ecx
	test	edi, edi

; 1063 : 	{
; 1064 : 		return true;

	je	SHORT $LN1@CanMoveSpy

; 1065 : 	}
; 1066 : 
; 1067 : 	if(!CanEverMoveSpyTo(pCity))

	push	edi
	call	?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::CanEverMoveSpyTo
	test	al, al
	jne	SHORT $LN8@CanMoveSpy
$LN30@CanMoveSpy:
	pop	edi

; 1068 : 	{
; 1069 : 		return false;

	xor	al, al
	pop	esi

; 1107 : }

	ret	12					; 0000000cH
$LN8@CanMoveSpy:

; 1070 : 	}
; 1071 : 
; 1072 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1073 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp+4]
	cmp	eax, DWORD PTR [esi+4]

; 1074 : 	{
; 1075 : 		return false;

	jae	SHORT $LN30@CanMoveSpy

; 1076 : 	}
; 1077 : 
; 1078 : 	// check to see if there is someone already there
; 1079 : 	CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, edi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage

; 1080 : 	CvAssertMsg(pCityEspionage, "pCityEspionage is null");
; 1081 : 	if(!pCityEspionage)

	test	eax, eax

; 1082 : 	{
; 1083 : 		return false;

	je	SHORT $LN30@CanMoveSpy

; 1084 : 	}
; 1085 : 
; 1086 : 	PlayerTypes ePlayerID = m_pPlayer->GetID();
; 1087 : 	if(pCityEspionage->m_aiSpyAssignment[ePlayerID] != -1)

	mov	ecx, DWORD PTR [esi+1292]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [eax+edx*4+4], -1

; 1088 : 	{
; 1089 : 		return false;

	jne	SHORT $LN30@CanMoveSpy

; 1090 : 	}
; 1091 : 
; 1092 : 	if (bAsDiplomat)

	cmp	BYTE PTR _bAsDiplomat$[esp+4], 0
	je	SHORT $LN1@CanMoveSpy

; 1093 : 	{
; 1094 : 		// diplomatic spy must be in capital
; 1095 : 		if (!pCity->isCapital() || pCity->getOwner() == m_pPlayer->GetID())

	mov	ecx, edi
	call	?isCapital@CvCity@@QBE_NXZ		; CvCity::isCapital
	test	al, al
	je	SHORT $LN30@CanMoveSpy
	mov	ecx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [edi+84]
	cmp	eax, DWORD PTR [ecx+44]
	je	SHORT $LN30@CanMoveSpy

; 1096 : 		{
; 1097 : 			return false;
; 1098 : 		}
; 1099 : 
; 1100 : 		if (GET_TEAM(m_pPlayer->getTeam()).isAtWar(pCity->getTeam()))

	call	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ	; CvPlayer::getTeam
	mov	esi, eax
	imul	esi, 2980				; 00000ba4H
	add	esi, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	ecx, edi
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, esi
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al

; 1101 : 		{
; 1102 : 			return false;

	jne	SHORT $LN30@CanMoveSpy
$LN1@CanMoveSpy:
	pop	edi

; 1103 : 		}
; 1104 : 	}
; 1105 : 
; 1106 : 	return true;

	mov	al, 1
	pop	esi

; 1107 : }

	ret	12					; 0000000cH
?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ENDP ; CvPlayerEspionage::CanMoveSpyTo
_TEXT	ENDS
PUBLIC	?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z		; CvPlayerEspionage::LevelUpSpy
EXTRN	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z:PROC ; CvNotifications::Add
EXTRN	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ:PROC ; CvPlayer::GetNotifications
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z$1
__ehfuncinfo$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z
_TEXT	SEGMENT
_szNewPromotion$223288 = -76				; size = 4
_szOldPromotion$223287 = -72				; size = 4
_strSummary$223301 = -68				; size = 28
_strBuffer$223289 = -40					; size = 28
__$EHRec$ = -12						; size = 12
_szSpyName$223286 = 8					; size = 4
_uiSpyIndex$ = 8					; size = 4
?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z PROC		; CvPlayerEspionage::LevelUpSpy, COMDAT
; _this$ = ecx

; 1255 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z
	push	eax
	mov	DWORD PTR fs:0, esp

; 1256 : 	// if the spy can level up and it's not dead
; 1257 : 	if(m_aSpyList[uiSpyIndex].m_eRank < NUM_SPY_RANKS - 1 && m_aSpyList[uiSpyIndex].m_eSpyState != SPY_STATE_DEAD)

	mov	eax, DWORD PTR _uiSpyIndex$[esp+8]
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [eax*8]
	sub	edi, eax
	add	edi, edi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	add	edi, edi
	add	eax, edi
	cmp	DWORD PTR [eax+12], 2
	jge	$LN1@LevelUpSpy
	cmp	DWORD PTR [eax+16], 8
	je	$LN1@LevelUpSpy
	push	ebx
	push	ebp

; 1258 : 	{
; 1259 : 		CvSpyRank eOriginalRank = m_aSpyList[uiSpyIndex].m_eRank;

	mov	ebp, DWORD PTR [eax+12]

; 1260 : 
; 1261 : 		// announce promotion through notification
; 1262 : 		m_aSpyList[uiSpyIndex].m_eRank = (CvSpyRank)(m_aSpyList[uiSpyIndex].m_eRank + 1);

	lea	ecx, DWORD PTR [ebp+1]
	mov	DWORD PTR [eax+12], ecx

; 1263 : 
; 1264 : 		CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ebx, eax

; 1265 : 		if(pNotifications)

	test	ebx, ebx
	je	$LN32@LevelUpSpy

; 1266 : 		{
; 1267 : 			const char* szSpyName = m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+edi]
	mov	ecx, DWORD PTR [esi+1292]
	add	eax, edi
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames

; 1268 : 			const char* szOldPromotion = GetSpyRankName(eOriginalRank);

	push	ebp
	mov	ecx, esi
	mov	DWORD PTR _szSpyName$223286[esp+92], eax
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	DWORD PTR _szOldPromotion$223287[esp+92], eax

; 1269 : 			const char* szNewPromotion = GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi+eax+12]
	push	ecx
	mov	ecx, esi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName

; 1270 : 			CvString strBuffer = GetLocalizedText("TXT_KEY_NOTIFICATION_SPY_PROMOTED", szSpyName, szOldPromotion, szNewPromotion);

	lea	edx, DWORD PTR _szNewPromotion$223288[esp+92]
	push	edx
	mov	DWORD PTR _szNewPromotion$223288[esp+96], eax
	lea	eax, DWORD PTR _szOldPromotion$223287[esp+96]
	push	eax
	lea	ecx, DWORD PTR _szSpyName$223286[esp+96]
	push	ecx
	lea	edx, DWORD PTR _strBuffer$223289[esp+104]
	push	OFFSET $SG223300
	push	edx
	call	??$GetLocalizedText@PBDPBDPBD@@YA?AVCvString@@PBDABQBD11@Z ; GetLocalizedText<char const *,char const *,char const *>

; 1271 : 			CvString strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_SUMMARY_SPY_PROMOTED", szSpyName);

	mov	eax, DWORD PTR _szSpyName$223286[esp+108]
	push	eax
	lea	ecx, DWORD PTR _strSummary$223301[esp+116]
	push	OFFSET $SG223303
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+132], 0
	call	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ; GetLocalizedText<char const *>
	add	esp, 32					; 00000020H

; 1272 : 			pNotifications->Add(NOTIFICATION_SPY_PROMOTION, strBuffer, strSummary, -1, -1, 0);

	lea	ecx, DWORD PTR _strSummary$223301[esp+92]
	mov	BYTE PTR __$EHRec$[esp+100], 1
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	-1
	push	0
	push	-1
	push	-1
	push	eax
	lea	ecx, DWORD PTR _strBuffer$223289[esp+112]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	180382033				; 0ac06951H
	mov	ecx, ebx
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 1273 : 		}

	lea	ecx, DWORD PTR _strSummary$223301[esp+92]
	mov	BYTE PTR __$EHRec$[esp+100], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBuffer$223289[esp+92]
	mov	DWORD PTR __$EHRec$[esp+100], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN32@LevelUpSpy:
	pop	ebp
	pop	ebx
$LN1@LevelUpSpy:

; 1274 : 	}
; 1275 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+84]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 76					; 0000004cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z$0:
	lea	ecx, DWORD PTR _strBuffer$223289[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z$1:
	lea	ecx, DWORD PTR _strSummary$223301[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z ENDP		; CvPlayerEspionage::LevelUpSpy
PUBLIC	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
EXTRN	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z:PROC ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
EXTRN	?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z:PROC ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus
EXTRN	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ:PROC ; CvPlayer::GetCulture
EXTRN	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z:PROC ; CvPlayerPolicies::GetNumericModifier
EXTRN	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ:PROC ; CvPlayer::GetPlayerPolicies
EXTRN	?GetEspionageModifier@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetEspionageModifier
EXTRN	?GetEspionageModifier@CvCity@@QBEHXZ:PROC	; CvCity::GetEspionageModifier
EXTRN	?getSpyRatePercent@CvGameSpeedInfo@@QBEHXZ:PROC	; CvGameSpeedInfo::getSpyRatePercent
EXTRN	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ:PROC ; CvGame::getGameSpeedInfo
EXTRN	?getYieldRateTimes100@CvCity@@QBEHW4YieldTypes@@_N@Z:PROC ; CvCity::getYieldRateTimes100
; Function compile flags: /Ogtpy
;	COMDAT ?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z
_TEXT	SEGMENT
_iFinalModifier$223342 = 8				; size = 4
_iCityEspionageModifier$223338 = 8			; size = 4
_iSpyState$ = 8						; size = 4
$T237335 = 12						; size = 4
$T237323 = 12						; size = 4
_iPlayerEspionageModifier$223339 = 12			; size = 4
_pCity$ = 12						; size = 4
_iSpyIndex$ = 16					; size = 4
?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z PROC ; CvPlayerEspionage::CalcPerTurn, COMDAT
; _this$ = ecx

; 1344 : 	CvAssertMsg(pCity, "pCity is null");
; 1345 : 	switch(iSpyState)

	mov	eax, DWORD PTR _iSpyState$[esp-4]
	push	ebp
	dec	eax
	push	esi
	push	edi
	mov	ebp, ecx
	cmp	eax, 6
	ja	$LN12@CalcPerTur
	jmp	DWORD PTR $LN42@CalcPerTur[eax*4]
$LN11@CalcPerTur:
	pop	edi
	pop	esi

; 1346 : 	{
; 1347 : 	case SPY_STATE_TRAVELLING:
; 1348 : 	{
; 1349 : 		return 1;

	mov	eax, 1
	pop	ebp

; 1433 : }

	ret	12					; 0000000cH
$LN9@CalcPerTur:

; 1350 : 	}
; 1351 : 	break;
; 1352 : 	case SPY_STATE_SURVEILLANCE:
; 1353 : 	{
; 1354 : 		return 1;
; 1355 : 	}
; 1356 : 	break;
; 1357 : 	case SPY_STATE_GATHERING_INTEL:
; 1358 : 	{
; 1359 : 		if(pCity)

	mov	edi, DWORD PTR _pCity$[esp+8]
	test	edi, edi
	je	$LN12@CalcPerTur
	push	ebx

; 1360 : 		{
; 1361 : 			PlayerTypes eCityOwner = pCity->getOwner();

	mov	ebx, DWORD PTR [edi+84]

; 1362 : 			int iBaseYieldRate = pCity->getYieldRateTimes100(YIELD_SCIENCE, false);

	push	0
	push	3
	mov	ecx, edi
	call	?getYieldRateTimes100@CvCity@@QBEHW4YieldTypes@@_N@Z ; CvCity::getYieldRateTimes100

; 1363 : 			iBaseYieldRate *= GC.getESPIONAGE_GATHERING_INTEL_RATE_BASE_PERCENT();
; 1364 : 			iBaseYieldRate *= GC.getGame().getGameSpeedInfo().getSpyRatePercent();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	esi, eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7932
	mov	DWORD PTR $T237335[esp+12], eax
	call	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ ; CvGame::getGameSpeedInfo
	mov	ecx, eax
	call	?getSpyRatePercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getSpyRatePercent
	mov	ecx, eax
	imul	ecx, DWORD PTR $T237335[esp+12]

; 1365 : 			iBaseYieldRate /= 10000;

	imul	ecx, esi
	mov	eax, 1759218605				; 68db8badH
	imul	ecx
	sar	edx, 12					; 0000000cH
	mov	esi, edx
	shr	esi, 31					; 0000001fH

; 1366 : 			int iCityEspionageModifier = pCity->GetEspionageModifier();

	mov	ecx, edi
	add	esi, edx
	call	?GetEspionageModifier@CvCity@@QBEHXZ	; CvCity::GetEspionageModifier

; 1367 : 			int iPlayerEspionageModifier = GET_PLAYER(eCityOwner).GetEspionageModifier();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edi, ebx
	imul	edi, 63236				; 0000f704H
	add	ecx, edi
	mov	DWORD PTR _iCityEspionageModifier$223338[esp+12], eax
	call	?GetEspionageModifier@CvPlayer@@QBEHXZ	; CvPlayer::GetEspionageModifier

; 1368 : 			int iTheirPoliciesEspionageModifier = GET_PLAYER(eCityOwner).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_STEAL_TECH_SLOWER_MODIFIER);

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [edi+edx]
	push	20					; 00000014H
	mov	DWORD PTR _iPlayerEspionageModifier$223339[esp+16], eax
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier

; 1369 : 			int iMyPoliciesEspionageModifier = m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_STEAL_TECH_FASTER_MODIFIER);

	mov	ecx, DWORD PTR [ebp+1292]
	push	40					; 00000028H
	mov	edi, eax
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier

; 1370 : 			int iFinalModifier = (iBaseYieldRate * (100 + iCityEspionageModifier + iPlayerEspionageModifier + iTheirPoliciesEspionageModifier + iMyPoliciesEspionageModifier)) / 100;

	mov	ecx, DWORD PTR _iCityEspionageModifier$223338[esp+12]
	add	eax, edi
	add	eax, DWORD PTR _iPlayerEspionageModifier$223339[esp+12]

; 1371 : 
; 1372 : 			int iResult = max(iFinalModifier, 1);

	mov	DWORD PTR $T237323[esp+12], 1
	lea	ecx, DWORD PTR [eax+ecx+100]
	imul	ecx, esi
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR _iFinalModifier$223342[esp+12], eax
	cmp	eax, 1
	lea	eax, DWORD PTR $T237323[esp+12]
	jl	SHORT $LN31@CalcPerTur
	lea	eax, DWORD PTR _iFinalModifier$223342[esp+12]
$LN31@CalcPerTur:
	mov	edi, DWORD PTR [eax]

; 1373 : 			if(iSpyIndex >= 0)

	mov	eax, DWORD PTR _iSpyIndex$[esp+12]
	test	eax, eax
	jl	SHORT $LN7@CalcPerTur

; 1374 : 			{
; 1375 : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 1376 : 				int iSpyRank = m_aSpyList[iSpyIndex].m_eCachedRank;
; 1377 : 				iSpyRank += m_aSpyList[iSpyIndex].m_iInfluenceMajorCivSpyRankBonusCached;
; 1378 : 				iMyPoliciesEspionageModifier = m_aSpyList[iSpyIndex].m_iMyPoliciesEspionageModifierCached;
; 1379 : 				iFinalModifier = (iBaseYieldRate * (100 + iCityEspionageModifier + iPlayerEspionageModifier + iTheirPoliciesEspionageModifier + iMyPoliciesEspionageModifier)) / 100;
; 1380 : 
; 1381 : 				iResult = MAX(iFinalModifier, 1);
; 1382 : #else
; 1383 : 				int iSpyRank = m_aSpyList[iSpyIndex].m_eRank;
; 1384 : 				iSpyRank += m_pPlayer->GetCulture()->GetInfluenceMajorCivSpyRankBonus(eCityOwner);

	mov	ecx, DWORD PTR [ebp+1292]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ebp]
	mov	esi, DWORD PTR [eax+edx*4+12]
	push	ebx
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus

; 1385 : #endif
; 1386 : 				iResult *= 100 + (GC.getESPIONAGE_GATHERING_INTEL_RATE_BY_SPY_RANK_PERCENT() * iSpyRank);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7928
	add	esi, eax
	imul	ecx, esi
	add	ecx, 100				; 00000064H
	imul	ecx, edi

; 1387 : 				iResult /= 100;

	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	mov	edi, ecx
$LN7@CalcPerTur:
	pop	ebx

; 1388 : 			}
; 1389 : 
; 1390 : 			return iResult;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp

; 1433 : }

	ret	12					; 0000000cH
$LN6@CalcPerTur:

; 1391 : 		}
; 1392 : 	}
; 1393 : 	break;
; 1394 : 	case SPY_STATE_RIG_ELECTION:
; 1395 : 	{
; 1396 : 		if(pCity)

	mov	edx, DWORD PTR _pCity$[esp+8]
	test	edx, edx
	je	SHORT $LN12@CalcPerTur

; 1397 : 		{
; 1398 : 			int iResult = 1;
; 1399 : 			if(iSpyIndex >= 0)

	mov	ecx, DWORD PTR _iSpyIndex$[esp+8]
	mov	eax, 1
	test	ecx, ecx
	jl	SHORT $LN14@CalcPerTur

; 1400 : 			{
; 1401 : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 1402 : 				int iSpyRank = m_aSpyList[iSpyIndex].m_eCachedRank;
; 1403 : 				iSpyRank += m_aSpyList[iSpyIndex].m_iInfluenceCityStateSpyRankBonusCached;
; 1404 : #else
; 1405 : 				int iSpyRank = m_aSpyList[iSpyIndex].m_eRank;

	lea	eax, DWORD PTR [ecx*8]
	sub	eax, ecx
	mov	ecx, DWORD PTR [ebp]
	mov	esi, DWORD PTR [ecx+eax*4+12]

; 1406 : 				iSpyRank += m_pPlayer->GetCulture()->GetInfluenceCityStateSpyRankBonus(pCity->getOwner());

	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ebp+1292]
	push	eax
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
	add	esi, eax
	pop	edi

; 1407 : #endif
; 1408 : 				iResult = (iSpyRank + 1) * (iSpyRank + 1);

	lea	eax, DWORD PTR [esi+1]
	pop	esi
	imul	eax, eax
	pop	ebp

; 1433 : }

	ret	12					; 0000000cH
$LN3@CalcPerTur:
	pop	edi
	pop	esi

; 1409 : 			}
; 1410 : 			return iResult;
; 1411 : 		}
; 1412 : 	}
; 1413 : 	break;
; 1414 : 	case SPY_STATE_COUNTER_INTEL:
; 1415 : 	{
; 1416 : 		return 0;

	xor	eax, eax
	pop	ebp

; 1433 : }

	ret	12					; 0000000cH
$LN12@CalcPerTur:

; 1417 : 	}
; 1418 : 	break;
; 1419 : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 1420 : 	{
; 1421 : 		return 1;
; 1422 : 	}
; 1423 : 	break;
; 1424 : 	case SPY_STATE_SCHMOOZE:
; 1425 : 	{
; 1426 : 		return 0;
; 1427 : 	}
; 1428 : 	break;
; 1429 : 	}
; 1430 : 
; 1431 : 	CvAssertMsg(false, "CalcPerTurn cannot handle that iSpyState");
; 1432 : 	return -1;

	or	eax, -1
$LN14@CalcPerTur:
	pop	edi
	pop	esi
	pop	ebp

; 1433 : }

	ret	12					; 0000000cH
$LN42@CalcPerTur:
	DD	$LN11@CalcPerTur
	DD	$LN11@CalcPerTur
	DD	$LN9@CalcPerTur
	DD	$LN6@CalcPerTur
	DD	$LN3@CalcPerTur
	DD	$LN11@CalcPerTur
	DD	$LN3@CalcPerTur
?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ENDP ; CvPlayerEspionage::CalcPerTurn
_TEXT	ENDS
PUBLIC	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired
EXTRN	?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ:PROC	; CvGameSpeedInfo::getLeaguePercent
EXTRN	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ:PROC ; CvGame::GetTurnsUntilMinorCivElection
EXTRN	?isBarbarian@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isBarbarian
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z:PROC ; CvPlayerCulture::GetInfluenceSurveillanceTime
; Function compile flags: /Ogtpy
;	COMDAT ?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z
_TEXT	SEGMENT
_iSpyState$ = 8						; size = 4
_pCity$ = 12						; size = 4
___formal$ = 16						; size = 4
?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z PROC ; CvPlayerEspionage::CalcRequired, COMDAT
; _this$ = ecx

; 1449 : #endif
; 1450 : 
; 1451 : 	switch(iSpyState)

	mov	eax, DWORD PTR _iSpyState$[esp-4]
	dec	eax
	push	ebx
	mov	ebx, ecx
	cmp	eax, 5
	ja	$LN10@CalcRequir
	jmp	DWORD PTR $LN36@CalcRequir[eax*4]
$LN9@CalcRequir:

; 1452 : 	{
; 1453 : 	case SPY_STATE_TRAVELLING:
; 1454 : 	{
; 1455 : 		return iSpyTurnsToTravel;

	mov	eax, 1
	pop	ebx

; 1511 : }

	ret	12					; 0000000cH
$LN8@CalcRequir:

; 1456 : 	}
; 1457 : 	break;
; 1458 : 	case SPY_STATE_SURVEILLANCE:
; 1459 : 	{
; 1460 : 		int iTime = 3;
; 1461 : 		if (pCity)

	mov	ecx, DWORD PTR _pCity$[esp]
	mov	eax, 3
	test	ecx, ecx
	je	SHORT $LN12@CalcRequir

; 1462 : 		{
; 1463 : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 1464 : 			if (iSpyIndex >= 0)
; 1465 : 			{
; 1466 : 				iTime = m_aSpyList[iSpyIndex].m_iInfluenceSurveillanceTimeCached;
; 1467 : 			}
; 1468 : #else
; 1469 : 			iTime = m_pPlayer->GetCulture()->GetInfluenceSurveillanceTime(pCity->getOwner());

	mov	eax, DWORD PTR [ecx+84]
	mov	ecx, DWORD PTR [ebx+1292]
	push	eax
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceSurveillanceTime
	pop	ebx

; 1511 : }

	ret	12					; 0000000cH
$LN6@CalcRequir:

; 1470 : #endif
; 1471 : 		}
; 1472 : 		return iTime;
; 1473 : 	}
; 1474 : 	break;
; 1475 : 	case SPY_STATE_GATHERING_INTEL:
; 1476 : 	{
; 1477 : 		if(pCity)

	mov	eax, DWORD PTR _pCity$[esp]
	test	eax, eax
	je	$LN10@CalcRequir
	push	esi
	push	edi

; 1478 : 		{
; 1479 : 			PlayerTypes ePlayer = pCity->getOwner();

	mov	edi, DWORD PTR [eax+84]

; 1480 : 			CvAssertMsg(!GET_PLAYER(ePlayer).isMinorCiv(), "Can't spy on a minor civ");
; 1481 : 			CvAssertMsg(!GET_PLAYER(ePlayer).isBarbarian(), "Can't spy on barbarians");
; 1482 : 			if(GET_PLAYER(ePlayer).isMinorCiv() || GET_PLAYER(ePlayer).isBarbarian())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	esi, edi
	imul	esi, 63236				; 0000f704H
	lea	ecx, DWORD PTR [esi+eax]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	jne	SHORT $LN3@CalcRequir
	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, esi
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	test	al, al
	jne	SHORT $LN3@CalcRequir

; 1485 : 			}
; 1486 : 
; 1487 : 			CvAssertMsg(m_aiMaxTechCost[ePlayer] >= 0, "m_aiMaxTechCost[ePlayer] is below zero");
; 1488 : 			uint uiMaxTechCostAdjusted = m_aiMaxTechCost[ePlayer];			
; 1489 : 			uiMaxTechCostAdjusted *= GC.getESPIONAGE_GATHERING_INTEL_COST_PERCENT();

	mov	edx, DWORD PTR [ebx+edi*4+820]
	imul	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7924

; 1490 : 			uiMaxTechCostAdjusted /= 100;

	mov	eax, 1374389535				; 51eb851fH
	mul	edx
	mov	eax, edx
	pop	edi
	shr	eax, 5
	pop	esi
$LN12@CalcRequir:
	pop	ebx

; 1511 : }

	ret	12					; 0000000cH
$LN3@CalcRequir:
	pop	edi
	pop	esi

; 1483 : 			{
; 1484 : 				return -1;

	or	eax, -1
	pop	ebx

; 1511 : }

	ret	12					; 0000000cH
$LN2@CalcRequir:

; 1491 : 			int iMaxTechCostAdjusted = uiMaxTechCostAdjusted;
; 1492 : 			CvAssertMsg(m_aiMaxTechCost[ePlayer] >= 0, "iMaxTechCostAdjusted is below zero. Overflow!");
; 1493 : 			return iMaxTechCostAdjusted;
; 1494 : 		}
; 1495 : 	}
; 1496 : 	break;
; 1497 : 	case SPY_STATE_RIG_ELECTION:
; 1498 : 	{
; 1499 : 		return GC.getGame().GetTurnsUntilMinorCivElection();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ ; CvGame::GetTurnsUntilMinorCivElection
	pop	ebx

; 1511 : }

	ret	12					; 0000000cH
$LN1@CalcRequir:

; 1500 : 	}
; 1501 : 	break;
; 1502 : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 1503 : 	{
; 1504 : 		return (iSpyTurnsToMakeIntroductions * GC.getGame().getGameSpeedInfo().getLeaguePercent()) / 100;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ ; CvGame::getGameSpeedInfo
	mov	ecx, eax
	call	?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getLeaguePercent
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	pop	ebx

; 1511 : }

	ret	12					; 0000000cH
$LN10@CalcRequir:

; 1505 : 	}
; 1506 : 	break;
; 1507 : 	}
; 1508 : 
; 1509 : 	CvAssertMsg(false, "CalcRequired cannot handle that iSpyState");
; 1510 : 	return -1;

	or	eax, -1
	pop	ebx

; 1511 : }

	ret	12					; 0000000cH
$LN36@CalcRequir:
	DD	$LN9@CalcRequir
	DD	$LN8@CalcRequir
	DD	$LN6@CalcRequir
	DD	$LN2@CalcRequir
	DD	$LN10@CalcRequir
	DD	$LN1@CalcRequir
?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ENDP ; CvPlayerEspionage::CalcRequired
_TEXT	ENDS
PUBLIC	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
; Function compile flags: /Ogtpy
;	COMDAT ?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_uiSpyIndex$ = 8					; size = 4
?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z PROC ; CvPlayerEspionage::HasEstablishedSurveillance, COMDAT
; _this$ = ecx

; 1536 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1537 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp-4]
	push	edi
	mov	edi, ecx
	cmp	eax, DWORD PTR [edi+4]
	jb	SHORT $LN7@HasEstabli

; 1538 : 	{
; 1539 : 		return false;

	xor	al, al
	pop	edi

; 1562 : }

	ret	4
$LN7@HasEstabli:

; 1540 : 	}
; 1541 : 
; 1542 : 	if(!IsSpyInCity(uiSpyIndex))

	mov	ecx, DWORD PTR [edi]
	push	esi
	lea	esi, DWORD PTR [eax*8]
	sub	esi, eax
	add	esi, esi
	add	esi, esi
	add	ecx, esi
	or	edx, -1
	cmp	DWORD PTR [ecx+4], edx
	je	SHORT $LN43@HasEstabli
	cmp	DWORD PTR [ecx+8], edx

; 1543 : 	{
; 1544 : 		return false;

	je	SHORT $LN43@HasEstabli

; 1545 : 	}
; 1546 : 
; 1547 : 	CvCity* pCity = GetCityWithSpy(uiSpyIndex);

	push	eax
	mov	ecx, edi
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 1548 : 	if(pCity == NULL)

	test	eax, eax

; 1549 : 		return false;

	je	SHORT $LN43@HasEstabli

; 1550 : 
; 1551 : 	CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, eax
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage

; 1552 : 	if(m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_SURVEILLANCE && pCityEspionage->HasReachedGoal(m_pPlayer->GetID()))

	mov	edx, DWORD PTR [edi]
	mov	esi, DWORD PTR [esi+edx+16]
	cmp	esi, 2
	jne	SHORT $LN4@HasEstabli
	mov	ecx, DWORD PTR [edi+1292]
	mov	ecx, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR [eax+ecx*4+92]
	cmp	edx, DWORD PTR [eax+ecx*4+268]

; 1553 : 	{
; 1554 : 		return true;

	jge	SHORT $LN1@HasEstabli
$LN4@HasEstabli:

; 1555 : 	}
; 1556 : 	else if(m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_GATHERING_INTEL || m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_RIG_ELECTION || m_aSpyList[uiSpyIndex].m_eSpyState == SPY_STATE_SCHMOOZE)

	cmp	esi, 3
	je	SHORT $LN1@HasEstabli
	cmp	esi, 4
	je	SHORT $LN1@HasEstabli
	cmp	esi, 7
	je	SHORT $LN1@HasEstabli
$LN43@HasEstabli:
	pop	esi

; 1559 : 	}
; 1560 : 
; 1561 : 	return false;

	xor	al, al
	pop	edi

; 1562 : }

	ret	4
$LN1@HasEstabli:
	pop	esi

; 1557 : 	{
; 1558 : 		return true;

	mov	al, 1
	pop	edi

; 1562 : }

	ret	4
?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ENDP ; CvPlayerEspionage::HasEstablishedSurveillance
_TEXT	ENDS
PUBLIC	?HasEstablishedSurveillanceInCity@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::HasEstablishedSurveillanceInCity
; Function compile flags: /Ogtpy
;	COMDAT ?HasEstablishedSurveillanceInCity@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z
_TEXT	SEGMENT
_iY$ = 8						; size = 4
_pCity$ = 8						; size = 4
?HasEstablishedSurveillanceInCity@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z PROC ; CvPlayerEspionage::HasEstablishedSurveillanceInCity, COMDAT
; _this$ = ecx

; 1567 : 	CvAssertMsg(pCity, "pCity is null");
; 1568 : 	if(!pCity)

	mov	eax, DWORD PTR _pCity$[esp-4]
	push	esi
	mov	esi, ecx
	test	eax, eax
	jne	SHORT $LN5@HasEstabli@2

; 1569 : 	{
; 1570 : 		return false;

	xor	al, al
	pop	esi

; 1585 : }

	ret	4
$LN5@HasEstabli@2:
	push	ebx
	push	ebp

; 1571 : 	}
; 1572 : 
; 1573 : 	int iX = pCity->getX();

	mov	ebp, DWORD PTR [eax+96]

; 1574 : 	int iY = pCity->getY();

	mov	eax, DWORD PTR [eax+108]
	push	edi

; 1575 : 
; 1576 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	xor	edi, edi
	mov	DWORD PTR _iY$[esp+12], eax
	cmp	DWORD PTR [esi+4], edi
	jbe	SHORT $LN2@HasEstabli@2

; 1571 : 	}
; 1572 : 
; 1573 : 	int iX = pCity->getX();

	xor	ebx, ebx
$LL25@HasEstabli@2:

; 1577 : 	{
; 1578 : 		if(m_aSpyList[uiSpy].m_iCityX == iX && m_aSpyList[uiSpy].m_iCityY == iY && HasEstablishedSurveillance(uiSpy))

	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ebx+ecx+4], ebp
	lea	eax, DWORD PTR [ebx+ecx]
	jne	SHORT $LN3@HasEstabli@2
	mov	edx, DWORD PTR _iY$[esp+12]
	cmp	DWORD PTR [eax+8], edx
	jne	SHORT $LN3@HasEstabli@2
	push	edi
	mov	ecx, esi
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	test	al, al
	jne	SHORT $LN23@HasEstabli@2
$LN3@HasEstabli@2:

; 1575 : 
; 1576 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	inc	edi
	add	ebx, 28					; 0000001cH
	cmp	edi, DWORD PTR [esi+4]
	jb	SHORT $LL25@HasEstabli@2
$LN2@HasEstabli@2:
	pop	edi
	pop	ebp
	pop	ebx

; 1581 : 		}
; 1582 : 	}
; 1583 : 
; 1584 : 	return false;

	xor	al, al
	pop	esi

; 1585 : }

	ret	4
$LN23@HasEstabli@2:
	pop	edi
	pop	ebp
	pop	ebx

; 1579 : 		{
; 1580 : 			return true;

	mov	al, 1
	pop	esi

; 1585 : }

	ret	4
?HasEstablishedSurveillanceInCity@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ENDP ; CvPlayerEspionage::HasEstablishedSurveillanceInCity
_TEXT	ENDS
PUBLIC	?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::IsAnySurveillanceEstablished
; Function compile flags: /Ogtpy
;	COMDAT ?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_uiSpy$223422 = -12					; size = 4
_this$ = -8						; size = 4
tv425 = -4						; size = 4
_eTargetPlayer$ = 8					; size = 4
?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::IsAnySurveillanceEstablished, COMDAT
; _this$ = ecx

; 1589 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	mov	edx, ecx

; 1590 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	mov	eax, DWORD PTR [edx+4]
	push	esi
	xor	esi, esi
	push	edi
	mov	DWORD PTR _this$[esp+28], edx
	mov	DWORD PTR _uiSpy$223422[esp+28], esi
	test	eax, eax
	jbe	$LN5@IsAnySurve
	xor	ecx, ecx
	mov	DWORD PTR tv425[esp+28], ecx

; 1591 : 	{
; 1592 : 		// can't have established surveillance when not in a city
; 1593 : 		if(!IsSpyInCity(uiSpy))

	cmp	esi, eax
	jae	$LN6@IsAnySurve
$LN86@IsAnySurve:
	mov	eax, DWORD PTR [edx]
	add	ecx, eax
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, -1
	je	$LN6@IsAnySurve
	mov	ebx, DWORD PTR [ecx+8]
	cmp	ebx, -1
	je	$LN6@IsAnySurve

; 1594 : 		{
; 1595 : 			continue;
; 1596 : 		}
; 1597 : 
; 1598 : 		CvPlot* pPlot = GC.getMap().plot(m_aSpyList[uiSpy].m_iCityX, m_aSpyList[uiSpy].m_iCityY);

	cmp	eax, -2147483647			; 80000001H
	je	$LN5@IsAnySurve
	cmp	ebx, -2147483647			; 80000001H
	je	$LN5@IsAnySurve
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	je	SHORT $LN39@IsAnySurve
	test	eax, eax
	jge	SHORT $LN41@IsAnySurve
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN43@IsAnySurve
$LN41@IsAnySurve:
	cmp	eax, ecx
	jl	SHORT $LN39@IsAnySurve
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN43@IsAnySurve
$LN39@IsAnySurve:
	mov	esi, eax
$LN43@IsAnySurve:
	cmp	BYTE PTR [ebp+4057], 0
	mov	edi, DWORD PTR [ebp+4024]
	je	SHORT $LN49@IsAnySurve
	test	ebx, ebx
	jge	SHORT $LN51@IsAnySurve
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN53@IsAnySurve
$LN51@IsAnySurve:
	cmp	ebx, edi
	jl	SHORT $LN49@IsAnySurve
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN53@IsAnySurve
$LN49@IsAnySurve:
	mov	edx, ebx
$LN53@IsAnySurve:
	test	esi, esi
	jl	$LN5@IsAnySurve
	cmp	esi, ecx
	jge	$LN5@IsAnySurve
	test	edx, edx
	jl	SHORT $LN5@IsAnySurve
	cmp	edx, edi
	jge	SHORT $LN5@IsAnySurve
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]

; 1599 : 		CvAssertMsg(pPlot, "Spy coordinates did not point to plot");
; 1600 : 		if(!pPlot)

	je	SHORT $LN5@IsAnySurve

; 1601 : 		{
; 1602 : 			return false;
; 1603 : 		}
; 1604 : 		CvCity* pCity = pPlot->getPlotCity();

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN5@IsAnySurve
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN5@IsAnySurve
	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	esi, eax

; 1605 : 		CvAssertMsg(pCity, "There is not a city at the specified plot");
; 1606 : 		if(!pCity)

	test	esi, esi
	je	SHORT $LN5@IsAnySurve

; 1607 : 		{
; 1608 : 			return false;
; 1609 : 		}
; 1610 : 		if(HasEstablishedSurveillance(uiSpy) && pCity->getOwner() == eTargetPlayer)

	mov	edx, DWORD PTR _uiSpy$223422[esp+28]
	mov	ecx, DWORD PTR _this$[esp+28]
	push	edx
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	test	al, al
	je	SHORT $LN84@IsAnySurve
	mov	eax, DWORD PTR _eTargetPlayer$[esp+24]
	cmp	DWORD PTR [esi+84], eax
	je	SHORT $LN79@IsAnySurve
$LN84@IsAnySurve:
	mov	edx, DWORD PTR _this$[esp+28]
	mov	esi, DWORD PTR _uiSpy$223422[esp+28]
$LN6@IsAnySurve:
	mov	ecx, DWORD PTR tv425[esp+28]
	mov	eax, DWORD PTR [edx+4]
	inc	esi
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _uiSpy$223422[esp+28], esi
	mov	DWORD PTR tv425[esp+28], ecx
	cmp	esi, eax
	jb	$LN86@IsAnySurve
$LN5@IsAnySurve:
	pop	edi
	pop	esi
	pop	ebp

; 1613 : 		}
; 1614 : 	}
; 1615 : 
; 1616 : 	return false;

	xor	al, al
	pop	ebx

; 1617 : }

	add	esp, 12					; 0000000cH
	ret	4
$LN79@IsAnySurve:
	pop	edi
	pop	esi
	pop	ebp

; 1611 : 		{
; 1612 : 			return true;

	mov	al, 1
	pop	ebx

; 1617 : }

	add	esp, 12					; 0000000cH
	ret	4
?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::IsAnySurveillanceEstablished
_TEXT	ENDS
PUBLIC	?IsAnySchmoozing@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::IsAnySchmoozing
; Function compile flags: /Ogtpy
;	COMDAT ?IsAnySchmoozing@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_uiSpy$223448 = -8					; size = 4
tv463 = -4						; size = 4
_pCity$ = 8						; size = 4
?IsAnySchmoozing@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z PROC ; CvPlayerEspionage::IsAnySchmoozing, COMDAT
; _this$ = ecx

; 1649 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	mov	edx, ecx

; 1650 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	mov	eax, DWORD PTR [edx+4]
	push	esi
	xor	esi, esi
	push	edi
	mov	DWORD PTR _this$[esp+28], edx
	mov	DWORD PTR _uiSpy$223448[esp+28], esi
	test	eax, eax
	jbe	$LN5@IsAnySchmo
	xor	ecx, ecx
	mov	DWORD PTR tv463[esp+28], ecx

; 1651 : 	{
; 1652 : 		// can't have established surveillance when not in a city
; 1653 : 		if(!IsSpyInCity(uiSpy))

	cmp	esi, eax
	jae	$LN6@IsAnySchmo
$LN92@IsAnySchmo:
	mov	eax, DWORD PTR [edx]
	add	ecx, eax
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, -1
	je	$LN6@IsAnySchmo
	mov	ebx, DWORD PTR [ecx+8]
	cmp	ebx, -1
	je	$LN6@IsAnySchmo

; 1654 : 		{
; 1655 : 			continue;
; 1656 : 		}
; 1657 : 
; 1658 : 		CvPlot* pPlot = GC.getMap().plot(m_aSpyList[uiSpy].m_iCityX, m_aSpyList[uiSpy].m_iCityY);

	cmp	eax, -2147483647			; 80000001H
	je	$LN5@IsAnySchmo
	cmp	ebx, -2147483647			; 80000001H
	je	$LN5@IsAnySchmo
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	je	SHORT $LN39@IsAnySchmo
	test	eax, eax
	jge	SHORT $LN41@IsAnySchmo
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN43@IsAnySchmo
$LN41@IsAnySchmo:
	cmp	eax, ecx
	jl	SHORT $LN39@IsAnySchmo
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN43@IsAnySchmo
$LN39@IsAnySchmo:
	mov	esi, eax
$LN43@IsAnySchmo:
	cmp	BYTE PTR [ebp+4057], 0
	mov	edi, DWORD PTR [ebp+4024]
	je	SHORT $LN49@IsAnySchmo
	test	ebx, ebx
	jge	SHORT $LN51@IsAnySchmo
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN53@IsAnySchmo
$LN51@IsAnySchmo:
	cmp	ebx, edi
	jl	SHORT $LN49@IsAnySchmo
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN53@IsAnySchmo
$LN49@IsAnySchmo:
	mov	edx, ebx
$LN53@IsAnySchmo:
	test	esi, esi
	jl	$LN5@IsAnySchmo
	cmp	esi, ecx
	jge	$LN5@IsAnySchmo
	test	edx, edx
	jl	$LN5@IsAnySchmo
	cmp	edx, edi
	jge	SHORT $LN5@IsAnySchmo
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]

; 1659 : 		CvAssertMsg(pPlot, "Spy coordinates did not point to plot");
; 1660 : 		if(!pPlot)

	je	SHORT $LN5@IsAnySchmo

; 1661 : 		{
; 1662 : 			return false;
; 1663 : 		}
; 1664 : 		CvCity* pPlotCity = pPlot->getPlotCity();

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN5@IsAnySchmo
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN5@IsAnySchmo
	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 1665 : 		CvAssertMsg(pPlotCity, "There is not a city at the specified plot");
; 1666 : 		if(!pPlotCity)

	test	eax, eax
	je	SHORT $LN5@IsAnySchmo

; 1667 : 		{
; 1668 : 			return false;
; 1669 : 		}
; 1670 : 		if(pCity == pPlotCity && IsSchmoozing(uiSpy))

	cmp	DWORD PTR _pCity$[esp+24], eax
	jne	SHORT $LN90@IsAnySchmo
	mov	edx, DWORD PTR _uiSpy$223448[esp+28]
	mov	eax, DWORD PTR _this$[esp+28]
	cmp	edx, DWORD PTR [eax+4]
	jae	SHORT $LN90@IsAnySchmo
	mov	ecx, eax
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv463[esp+28]
	cmp	DWORD PTR [eax+edx+16], 7
	je	SHORT $LN84@IsAnySchmo
$LN90@IsAnySchmo:
	mov	edx, DWORD PTR _this$[esp+28]
	mov	esi, DWORD PTR _uiSpy$223448[esp+28]
$LN6@IsAnySchmo:
	mov	ecx, DWORD PTR tv463[esp+28]
	mov	eax, DWORD PTR [edx+4]
	inc	esi
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR _uiSpy$223448[esp+28], esi
	mov	DWORD PTR tv463[esp+28], ecx
	cmp	esi, eax
	jb	$LN92@IsAnySchmo
$LN5@IsAnySchmo:
	pop	edi
	pop	esi
	pop	ebp

; 1673 : 		}
; 1674 : 	}
; 1675 : 
; 1676 : 	return false;

	xor	al, al
	pop	ebx

; 1677 : }

	add	esp, 12					; 0000000cH
	ret	4
$LN84@IsAnySchmo:
	pop	edi
	pop	esi
	pop	ebp

; 1671 : 		{
; 1672 : 			return true;

	mov	al, 1
	pop	ebx

; 1677 : }

	add	esp, 12					; 0000000cH
	ret	4
?IsAnySchmoozing@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ENDP ; CvPlayerEspionage::IsAnySchmoozing
_TEXT	ENDS
PUBLIC	?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::CanStageCoup
EXTRN	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ:PROC ; CvMinorCivAI::GetAlly
EXTRN	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ:PROC ; CvPlayer::GetMinorCivAI
; Function compile flags: /Ogtpy
;	COMDAT ?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_uiSpyIndex$ = 8					; size = 4
?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::CanStageCoup, COMDAT
; _this$ = ecx

; 1681 : {

	push	ebx
	push	esi

; 1682 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1683 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	esi, DWORD PTR _uiSpyIndex$[esp+4]
	mov	ebx, ecx
	cmp	esi, DWORD PTR [ebx+4]
	jb	SHORT $LN6@CanStageCo

; 1684 : 	{
; 1685 : 		return false;
; 1686 : 	}
; 1687 : 
; 1688 : 	if(!IsSpyInCity(uiSpyIndex))

$LN12@CanStageCo:
	pop	esi
	xor	al, al
	pop	ebx

; 1720 : }

	ret	4
$LN6@CanStageCo:

; 1684 : 	{
; 1685 : 		return false;
; 1686 : 	}
; 1687 : 
; 1688 : 	if(!IsSpyInCity(uiSpyIndex))

	mov	ecx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [esi*8]
	sub	eax, esi
	cmp	DWORD PTR [ecx+eax*4+4], -1
	lea	eax, DWORD PTR [ecx+eax*4]
	je	SHORT $LN12@CanStageCo
	cmp	DWORD PTR [eax+8], -1

; 1689 : 	{
; 1690 : 		return false;

	je	SHORT $LN12@CanStageCo
	push	edi

; 1691 : 	}
; 1692 : 
; 1693 : 	CvCity* pCity = GetCityWithSpy(uiSpyIndex);

	push	esi
	mov	ecx, ebx
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	edi, eax

; 1694 : 	CvAssertMsg(pCity, "pCity is null!");
; 1695 : 	if(!pCity)

	test	edi, edi

; 1696 : 	{
; 1697 : 		return false;

	je	SHORT $LN1@CanStageCo

; 1698 : 	}
; 1699 : 
; 1700 : 	if(!HasEstablishedSurveillance(uiSpyIndex))

	push	esi
	mov	ecx, ebx
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	test	al, al

; 1701 : 	{
; 1702 : 		return false;

	je	SHORT $LN1@CanStageCo

; 1703 : 	}
; 1704 : 
; 1705 : 	PlayerTypes eCityOwner = pCity->getOwner();

	mov	esi, DWORD PTR [edi+84]

; 1706 : 	if(!GET_PLAYER(eCityOwner).isMinorCiv())

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	imul	esi, 63236				; 0000f704H
	lea	ecx, DWORD PTR [esi+edx]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al

; 1707 : 	{
; 1708 : 		return false;

	je	SHORT $LN1@CanStageCo

; 1709 : 	}
; 1710 : 
; 1711 : 	CvMinorCivAI* pMinorCivAI = GET_PLAYER(eCityOwner).GetMinorCivAI();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+eax]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI

; 1712 : 	PlayerTypes eMinorCivAlly = pMinorCivAI->GetAlly();

	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly

; 1713 : 
; 1714 : 	if(eMinorCivAlly != NO_PLAYER && eMinorCivAlly != m_pPlayer->GetID())

	cmp	eax, -1
	je	SHORT $LN1@CanStageCo
	mov	ecx, DWORD PTR [ebx+1292]
	cmp	eax, DWORD PTR [ecx+44]
	je	SHORT $LN1@CanStageCo
	pop	edi
	pop	esi

; 1715 : 	{
; 1716 : 		return true;

	mov	al, 1
	pop	ebx

; 1720 : }

	ret	4
$LN1@CanStageCo:
	pop	edi
	pop	esi

; 1717 : 	}
; 1718 : 
; 1719 : 	return false;

	xor	al, al
	pop	ebx

; 1720 : }

	ret	4
?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::CanStageCoup
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetCoupChanceOfSuccess
EXTRN	?GetEffectiveFriendshipWithMajorTimes100@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::GetEffectiveFriendshipWithMajorTimes100
EXTRN	__ftol2_sse_excpt:PROC
;	COMDAT __real@42c80000
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
CONST	ENDS
;	COMDAT ?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z
_TEXT	SEGMENT
_bNoAllySpy$ = -41					; size = 1
_fMySpyValue$ = -40					; size = 4
_fAllySpyValue$ = -36					; size = 4
_iAllySpyRank$ = -32					; size = 4
_fSpyLevelDeltaTwo$ = -28				; size = 4
_fSpyLevelDeltaOne$ = -24				; size = 4
_fSpyLevelDeltaZero$ = -20				; size = 4
_eCityOwner$ = -16					; size = 4
_fMultiplyConstant$ = -12				; size = 4
_fNobodyBonus$ = -8					; size = 4
_iDeltaInfluence$ = -4					; size = 4
_fSpyMultipier$ = 8					; size = 4
_uiSpyIndex$ = 8					; size = 4
?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z PROC	; CvPlayerEspionage::GetCoupChanceOfSuccess, COMDAT
; _this$ = ecx

; 1724 : {

	sub	esp, 44					; 0000002cH
	push	ebp
	push	esi

; 1725 : 	// if you can't stage a coup, then the likelihood is zero!
; 1726 : 	if(!CanStageCoup(uiSpyIndex))

	mov	esi, DWORD PTR _uiSpyIndex$[esp+48]
	push	esi
	mov	ebp, ecx
	call	?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::CanStageCoup
	test	al, al
	jne	SHORT $LN22@GetCoupCha
$LN65@GetCoupCha:
	pop	esi

; 1727 : 	{
; 1728 : 		return 0;

	xor	eax, eax
	pop	ebp

; 1868 : }

	add	esp, 44					; 0000002cH
	ret	4
$LN22@GetCoupCha:

; 1729 : 	}
; 1730 : 
; 1731 : 	CvCity* pCity = GetCityWithSpy(uiSpyIndex);

	push	esi
	mov	ecx, ebp
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	esi, eax

; 1732 : 	CvAssertMsg(pCity, "No city");
; 1733 : 	if(!pCity)

	test	esi, esi

; 1734 : 	{
; 1735 : 		return 0;

	je	SHORT $LN65@GetCoupCha
	push	ebx

; 1736 : 	}
; 1737 : 
; 1738 : 	CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	ebx, eax

; 1739 : 	CvAssertMsg(pCityEspionage, "No city espionage");
; 1740 : 	if(!pCityEspionage)

	test	ebx, ebx

; 1741 : 	{
; 1742 : 		return 0;

	je	SHORT $LN64@GetCoupCha

; 1743 : 	}
; 1744 : 
; 1745 : 	PlayerTypes eCityOwner = pCity->getOwner();

	mov	esi, DWORD PTR [esi+84]

; 1746 : 	CvAssertMsg(GET_PLAYER(eCityOwner).isMinorCiv(), "Owner is not a minor civ");
; 1747 : 	if(!GET_PLAYER(eCityOwner).isMinorCiv())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _eCityOwner$[esp+56], esi
	imul	esi, 63236				; 0000f704H
	lea	ecx, DWORD PTR [esi+eax]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	jne	SHORT $LN19@GetCoupCha
$LN64@GetCoupCha:
	pop	ebx
	pop	esi

; 1748 : 	{
; 1749 : 		return 0;

	xor	eax, eax
	pop	ebp

; 1868 : }

	add	esp, 44					; 0000002cH
	ret	4
$LN19@GetCoupCha:

; 1750 : 	}
; 1751 : 
; 1752 : 	CvMinorCivAI* pMinorCivAI = GET_PLAYER(eCityOwner).GetMinorCivAI();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	edi
	add	ecx, esi
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	edi, eax

; 1753 : 	CvAssertMsg(pMinorCivAI, "pMinorCivAI is null");
; 1754 : 	if(!pMinorCivAI)

	test	edi, edi
	jne	SHORT $LN18@GetCoupCha
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp

; 1868 : }

	add	esp, 44					; 0000002cH
	ret	4
$LN18@GetCoupCha:

; 1755 : 	{
; 1756 : 		return 0;
; 1757 : 	}
; 1758 : 
; 1759 : 	PlayerTypes eAllyPlayer = pMinorCivAI->GetAlly();

	mov	ecx, edi
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	esi, eax

; 1760 : 	int iAllySpyRank = 0;
; 1761 : 	bool bNoAllySpy = true;
; 1762 : 	if(pCityEspionage->m_aiSpyAssignment[eAllyPlayer] != -1)

	mov	ebx, DWORD PTR [ebx+esi*4+4]
	mov	DWORD PTR _iAllySpyRank$[esp+60], 0
	mov	BYTE PTR _bNoAllySpy$[esp+60], 1
	cmp	ebx, -1
	je	SHORT $LN17@GetCoupCha

; 1763 : 	{
; 1764 : 		int iAllySpyIndex = pCityEspionage->m_aiSpyAssignment[eAllyPlayer];
; 1765 : 		iAllySpyRank = GET_PLAYER(eAllyPlayer).GetEspionage()->m_aSpyList[iAllySpyIndex].m_eRank;

	mov	ecx, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [ebx*8]
	sub	edx, ebx
	mov	ecx, DWORD PTR [eax+edx*4+12]
	mov	DWORD PTR _iAllySpyRank$[esp+60], ecx

; 1766 : #ifdef AUI_ESPIONAGE_FIX_RESTORE_ENEMY_SPY_COUP_MALUS
; 1767 : 		bNoAllySpy = false;

	mov	BYTE PTR _bNoAllySpy$[esp+60], 0
$LN17@GetCoupCha:

; 1768 : #else
; 1769 : 		bNoAllySpy = true;
; 1770 : #endif
; 1771 : 	}
; 1772 : 
; 1773 : 	int iAllyInfluence = pMinorCivAI->GetEffectiveFriendshipWithMajorTimes100(eAllyPlayer);

	push	esi
	mov	ecx, edi
	call	?GetEffectiveFriendshipWithMajorTimes100@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajorTimes100

; 1774 : #ifdef NQ_COUP_FORMULA_USES_BASE_FRIENDSHIP_NOT_EFFECTIVE_FRIENDSHIP
; 1775 : 	int iMyInfluence = pMinorCivAI->GetBaseFriendshipWithMajorTimes100(m_pPlayer->GetID());
; 1776 : #else
; 1777 : 	int iMyInfluence = pMinorCivAI->GetEffectiveFriendshipWithMajorTimes100(m_pPlayer->GetID());

	mov	edx, DWORD PTR [ebp+1292]
	mov	esi, eax
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, edi
	call	?GetEffectiveFriendshipWithMajorTimes100@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajorTimes100

; 1778 : #endif
; 1779 : 	int iDeltaInfluence = iAllyInfluence - iMyInfluence;
; 1780 : 
; 1781 : 	//float fNobodyBonus = 0.5;
; 1782 : 	//float fMultiplyConstant = 3.0f;
; 1783 : 	//float fSpyLevelDeltaZero = 0.0f;
; 1784 : 	//float fSpyLevelDeltaOne = 1.5f;
; 1785 : 	//float fSpyLevelDeltaTwo = 2.25;
; 1786 : 	//float fSpyLevelDeltaThree = 3.0f;
; 1787 : 
; 1788 : 	float fNobodyBonus = GC.getESPIONAGE_COUP_NOBODY_BONUS();
; 1789 : 	float fMultiplyConstant = GC.getESPIONAGE_COUP_MULTIPLY_CONSTANT();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8160

; 1790 : 	float fSpyLevelDeltaZero = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_ZERO();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8164

; 1791 : 	float fSpyLevelDeltaOne = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_ONE();
; 1792 : 	float fSpyLevelDeltaTwo = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_TWO();
; 1793 : #ifndef NQM_PRUNING
; 1794 : 	float fSpyLevelDeltaThree = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_THREE();

	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8176

; 1795 : 	float fSpyLevelDeltaFour = GC.getESPIONAGE_COUP_SPY_LEVEL_DELTA_FOUR();

	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8180
	sub	esi, eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8156
	mov	DWORD PTR _fNobodyBonus$[esp+60], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8168
	mov	DWORD PTR _fSpyLevelDeltaOne$[esp+60], eax

; 1796 : #endif
; 1797 : 
; 1798 : 	float fAllySpyValue = 0.0f;

	xor	eax, eax
	mov	DWORD PTR _fMultiplyConstant$[esp+60], ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8172
	mov	DWORD PTR _fAllySpyValue$[esp+60], eax

; 1799 : 	float fMySpyValue = 0.0;

	mov	DWORD PTR _fMySpyValue$[esp+60], eax

; 1800 : 
; 1801 : 	int iMySpyRank = m_aSpyList[uiSpyIndex].m_eRank;

	mov	eax, DWORD PTR _uiSpyIndex$[esp+56]
	mov	DWORD PTR _fSpyLevelDeltaZero$[esp+60], edx
	mov	DWORD PTR _fSpyLevelDeltaTwo$[esp+60], ecx

; 1802 : 	iMySpyRank += m_pPlayer->GetCulture()->GetInfluenceCityStateSpyRankBonus(eCityOwner);

	mov	ecx, DWORD PTR _eCityOwner$[esp+60]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ebp]
	push	ecx
	mov	ecx, DWORD PTR [ebp+1292]
	mov	DWORD PTR _iDeltaInfluence$[esp+64], esi
	mov	esi, DWORD PTR [eax+edx*4+12]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
	add	eax, esi

; 1803 : 	switch (iMySpyRank)

	cmp	eax, 4
	ja	SHORT $LN61@GetCoupCha
	jmp	DWORD PTR $LN66@GetCoupCha[eax*4]
$LN14@GetCoupCha:

; 1804 : 	{
; 1805 : 	case 0:
; 1806 : 		fMySpyValue = fSpyLevelDeltaZero;

	mov	edx, DWORD PTR _fSpyLevelDeltaZero$[esp+60]
	mov	DWORD PTR _fMySpyValue$[esp+60], edx

; 1807 : 		break;

	jmp	SHORT $LN61@GetCoupCha
$LN13@GetCoupCha:

; 1808 : 	case 1:
; 1809 : 		fMySpyValue = fSpyLevelDeltaOne;

	mov	eax, DWORD PTR _fSpyLevelDeltaOne$[esp+60]
	mov	DWORD PTR _fMySpyValue$[esp+60], eax

; 1810 : 		break;

	jmp	SHORT $LN61@GetCoupCha
$LN12@GetCoupCha:

; 1811 : 	case 2:
; 1812 : 		fMySpyValue = fSpyLevelDeltaTwo;

	mov	ecx, DWORD PTR _fSpyLevelDeltaTwo$[esp+60]
	mov	DWORD PTR _fMySpyValue$[esp+60], ecx

; 1813 : 		break;

	jmp	SHORT $LN61@GetCoupCha
$LN11@GetCoupCha:

; 1814 : #ifndef NQM_PRUNING
; 1815 : 	case 3:
; 1816 : 		fMySpyValue = fSpyLevelDeltaThree;

	mov	DWORD PTR _fMySpyValue$[esp+60], edi

; 1817 : 		break;

	jmp	SHORT $LN61@GetCoupCha
$LN10@GetCoupCha:

; 1818 : 	case 4:
; 1819 : 		fMySpyValue = fSpyLevelDeltaFour;

	mov	DWORD PTR _fMySpyValue$[esp+60], ebx
$LN61@GetCoupCha:

; 1820 : 		break;
; 1821 : #endif
; 1822 : 	}
; 1823 : 
; 1824 : 	switch (iAllySpyRank)

	mov	eax, DWORD PTR _iAllySpyRank$[esp+60]
	sub	eax, 0
	je	SHORT $LN7@GetCoupCha
	sub	eax, 1
	je	SHORT $LN6@GetCoupCha
	sub	eax, 1
	jne	SHORT $LN8@GetCoupCha

; 1832 : 	case 2:
; 1833 : 		fAllySpyValue = fSpyLevelDeltaTwo;

	mov	edx, DWORD PTR _fSpyLevelDeltaTwo$[esp+60]
	mov	DWORD PTR _fAllySpyValue$[esp+60], edx

; 1834 : 		break;

	jmp	SHORT $LN8@GetCoupCha
$LN6@GetCoupCha:

; 1828 : 		break;
; 1829 : 	case 1:
; 1830 : 		fAllySpyValue = fSpyLevelDeltaOne;

	mov	eax, DWORD PTR _fSpyLevelDeltaOne$[esp+60]
	mov	DWORD PTR _fAllySpyValue$[esp+60], eax

; 1831 : 		break;

	jmp	SHORT $LN8@GetCoupCha
$LN7@GetCoupCha:

; 1825 : 	{
; 1826 : 	case 0:
; 1827 : 		fAllySpyValue = fSpyLevelDeltaZero;

	mov	ecx, DWORD PTR _fSpyLevelDeltaZero$[esp+60]
	mov	DWORD PTR _fAllySpyValue$[esp+60], ecx
$LN8@GetCoupCha:

; 1835 : 	}	
; 1836 : 
; 1837 : 	float fSpyMultipier = fAllySpyValue - fMySpyValue + fMultiplyConstant;
; 1838 : 	if (bNoAllySpy)

	cmp	BYTE PTR _bNoAllySpy$[esp+60], 0
	fld	DWORD PTR _fAllySpyValue$[esp+60]
	fsub	DWORD PTR _fMySpyValue$[esp+60]
	fadd	DWORD PTR _fMultiplyConstant$[esp+60]
	fstp	DWORD PTR _fSpyMultipier$[esp+56]
	je	SHORT $LN4@GetCoupCha

; 1839 : 	{
; 1840 : 		fSpyMultipier *= fNobodyBonus;

	fld	DWORD PTR _fSpyMultipier$[esp+56]
	fmul	DWORD PTR _fNobodyBonus$[esp+60]
	fstp	DWORD PTR _fSpyMultipier$[esp+56]
$LN4@GetCoupCha:

; 1841 : 	}
; 1842 : 
; 1843 : 	int iResultPercentage = 100 - (int)((iDeltaInfluence * fSpyMultipier) / 100);
; 1844 : 
; 1845 : #ifdef NQ_COUP_CHANCE_MODIFIER_FROM_POLICIES
; 1846 : 	iResultPercentage += m_pPlayer->GetPlayerPolicies()->GetNumericModifier(POLICYMOD_COUP_CHANCE_MODIFIER);

	mov	ecx, DWORD PTR [ebp+1292]
	push	54					; 00000036H
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	fild	DWORD PTR _iDeltaInfluence$[esp+60]
	mov	esi, eax
	fmul	DWORD PTR _fSpyMultipier$[esp+56]
	fdiv	DWORD PTR __real@42c80000
	call	__ftol2_sse_excpt
	mov	edx, 100				; 00000064H
	sub	edx, eax
	add	esi, edx

; 1847 : #endif
; 1848 : 
; 1849 : 	if(iResultPercentage > 85)

	cmp	esi, 85					; 00000055H
	jle	SHORT $LN3@GetCoupCha
	pop	edi

; 1850 : 	{
; 1851 : 		iResultPercentage = 85;

	mov	esi, 85					; 00000055H
	pop	ebx

; 1856 : 	}
; 1857 : 
; 1858 : 	//int iAdjustedAllyInfluenceTimes100 = iAllyInfluence * (100 + m_aSpyList[uiSpyIndex].m_eRank * 100);
; 1859 : 	//int iAdjustedAllyInfluence = iAdjustedAllyInfluenceTimes100 / 100;
; 1860 : 	//int iResultPercentage = 0;
; 1861 : 	//if (iAdjustedAllyInfluence != 0)
; 1862 : 	//{
; 1863 : 	//	iResultPercentage = 100 - ((iDeltaInfluence * 100) / iAdjustedAllyInfluence);
; 1864 : 	//}
; 1865 : 
; 1866 : 
; 1867 : 	return iResultPercentage;

	mov	eax, esi
	pop	esi
	pop	ebp

; 1868 : }

	add	esp, 44					; 0000002cH
	ret	4
$LN3@GetCoupCha:

; 1852 : 	}
; 1853 : 	else if(iResultPercentage < 0)

	test	esi, esi
	jge	SHORT $LN1@GetCoupCha

; 1854 : 	{
; 1855 : 		iResultPercentage = 0;

	xor	esi, esi
$LN1@GetCoupCha:
	pop	edi
	pop	ebx

; 1856 : 	}
; 1857 : 
; 1858 : 	//int iAdjustedAllyInfluenceTimes100 = iAllyInfluence * (100 + m_aSpyList[uiSpyIndex].m_eRank * 100);
; 1859 : 	//int iAdjustedAllyInfluence = iAdjustedAllyInfluenceTimes100 / 100;
; 1860 : 	//int iResultPercentage = 0;
; 1861 : 	//if (iAdjustedAllyInfluence != 0)
; 1862 : 	//{
; 1863 : 	//	iResultPercentage = 100 - ((iDeltaInfluence * 100) / iAdjustedAllyInfluence);
; 1864 : 	//}
; 1865 : 
; 1866 : 
; 1867 : 	return iResultPercentage;

	mov	eax, esi
	pop	esi
	pop	ebp

; 1868 : }

	add	esp, 44					; 0000002cH
	ret	4
$LN66@GetCoupCha:
	DD	$LN14@GetCoupCha
	DD	$LN13@GetCoupCha
	DD	$LN12@GetCoupCha
	DD	$LN11@GetCoupCha
	DD	$LN10@GetCoupCha
?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z ENDP	; CvPlayerEspionage::GetCoupChanceOfSuccess
_TEXT	ENDS
PUBLIC	?GetTurnsUntilStateComplete@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetTurnsUntilStateComplete
; Function compile flags: /Ogtpy
;	COMDAT ?GetTurnsUntilStateComplete@CvPlayerEspionage@@QAEHI@Z
_TEXT	SEGMENT
_uiSpyIndex$ = 8					; size = 4
?GetTurnsUntilStateComplete@CvPlayerEspionage@@QAEHI@Z PROC ; CvPlayerEspionage::GetTurnsUntilStateComplete, COMDAT
; _this$ = ecx

; 2089 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 2090 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN11@GetTurnsUn

; 2091 : 	{
; 2092 : 		return -2;

	mov	eax, -2					; fffffffeH

; 2143 : }

	ret	4
$LN11@GetTurnsUn:

; 2093 : 	}
; 2094 : 
; 2095 : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	edx, DWORD PTR [ecx+1292]
	push	ebx

; 2096 : 	CvCity* pCity;
; 2097 : 	CvCityEspionage* pCityEspionage;
; 2098 : 	int iAmountLeft = 0;
; 2099 : 	int iTurnsLeft = 0;
; 2100 : 
; 2101 : 	switch(m_aSpyList[uiSpyIndex].m_eSpyState)

	mov	ebx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [edx+44]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	edx, DWORD PTR [ebx+edx*4+16]
	push	edi
	xor	edi, edi
	cmp	edx, 8
	ja	SHORT $LN9@GetTurnsUn
	jmp	DWORD PTR $LN37@GetTurnsUn[edx*4]
$LN7@GetTurnsUn:

; 2102 : 	{
; 2103 : 	case SPY_STATE_UNASSIGNED:
; 2104 : 		// no end time
; 2105 : 		return -1;
; 2106 : 		break;
; 2107 : 	case SPY_STATE_TRAVELLING:
; 2108 : 	case SPY_STATE_SURVEILLANCE:
; 2109 : 	case SPY_STATE_GATHERING_INTEL:
; 2110 : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 2111 : 		pCity = GetCityWithSpy(uiSpyIndex);

	push	eax
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 2112 : 		CvAssertMsg(pCity, "GetCityWithSpy returned null. Has the wrong task");
; 2113 : 		if(!pCity)

	test	eax, eax

; 2114 : 		{
; 2115 : 			return -1;

	je	SHORT $LN9@GetTurnsUn

; 2116 : 		}
; 2117 : 		pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, eax
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage

; 2118 : 		iAmountLeft = pCityEspionage->m_aiGoal[ePlayer] - pCityEspionage->m_aiAmount[ePlayer];

	mov	ecx, DWORD PTR [eax+esi*4+268]
	sub	ecx, DWORD PTR [eax+esi*4+92]

; 2119 : 		if(pCityEspionage->m_aiRate[ePlayer] != 0)

	cmp	DWORD PTR [eax+esi*4+180], edi
	je	SHORT $LN4@GetTurnsUn

; 2120 : 		{
; 2121 : 			iTurnsLeft = iAmountLeft / pCityEspionage->m_aiRate[ePlayer];

	mov	esi, DWORD PTR [eax+esi*4+180]
	mov	eax, ecx
	cdq
	idiv	esi
	mov	edi, eax

; 2122 : 			if(iAmountLeft % pCityEspionage->m_aiRate[ePlayer] > 0)

	test	edx, edx
	jle	SHORT $LN4@GetTurnsUn

; 2123 : 			{
; 2124 : 				iTurnsLeft++;

	inc	edi
$LN4@GetTurnsUn:

; 2125 : 			}
; 2126 : 		}
; 2127 : 		return iTurnsLeft;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 2143 : }

	ret	4
$LN3@GetTurnsUn:

; 2128 : 	case SPY_STATE_RIG_ELECTION:
; 2129 : 		return GC.getGame().GetTurnsUntilMinorCivElection();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ ; CvGame::GetTurnsUntilMinorCivElection
	pop	edi
	pop	esi
	pop	ebx

; 2143 : }

	ret	4
$LN9@GetTurnsUn:
	pop	edi
	pop	esi

; 2130 : 		break;
; 2131 : 	case SPY_STATE_COUNTER_INTEL:
; 2132 : 	case SPY_STATE_SCHMOOZE:
; 2133 : 		// no end time
; 2134 : 		return -1;
; 2135 : 		break;
; 2136 : 	case SPY_STATE_DEAD:
; 2137 : 		// no end time
; 2138 : 		return -1;
; 2139 : 		break;
; 2140 : 	}
; 2141 : 
; 2142 : 	return -1;

	or	eax, -1
	pop	ebx

; 2143 : }

	ret	4
$LN37@GetTurnsUn:
	DD	$LN9@GetTurnsUn
	DD	$LN7@GetTurnsUn
	DD	$LN7@GetTurnsUn
	DD	$LN7@GetTurnsUn
	DD	$LN3@GetTurnsUn
	DD	$LN9@GetTurnsUn
	DD	$LN7@GetTurnsUn
	DD	$LN9@GetTurnsUn
	DD	$LN9@GetTurnsUn
?GetTurnsUntilStateComplete@CvPlayerEspionage@@QAEHI@Z ENDP ; CvPlayerEspionage::GetTurnsUntilStateComplete
_TEXT	ENDS
PUBLIC	?GetPercentOfStateComplete@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetPercentOfStateComplete
EXTRN	?GetTurnsBetweenMinorCivElections@CvGame@@QAEHXZ:PROC ; CvGame::GetTurnsBetweenMinorCivElections
; Function compile flags: /Ogtpy
;	COMDAT ?GetPercentOfStateComplete@CvPlayerEspionage@@QAEHI@Z
_TEXT	SEGMENT
_uiSpyIndex$ = 8					; size = 4
?GetPercentOfStateComplete@CvPlayerEspionage@@QAEHI@Z PROC ; CvPlayerEspionage::GetPercentOfStateComplete, COMDAT
; _this$ = ecx

; 2148 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 2149 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp-4]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN12@GetPercent

; 2150 : 	{
; 2151 : 		return -2;

	mov	eax, -2					; fffffffeH

; 2210 : }

	ret	4
$LN12@GetPercent:

; 2152 : 	}
; 2153 : 
; 2154 : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	edx, DWORD PTR [ecx+1292]
	push	esi
	mov	esi, DWORD PTR [edx+44]

; 2155 : 	CvCity* pCity = NULL;
; 2156 : 	CvCityEspionage* pCityEspionage = NULL;
; 2157 : #ifdef AUI_WARNING_FIXES
; 2158 : 	const CvGame& kGame = GC.getGame();
; 2159 : #endif
; 2160 : 
; 2161 : 	switch(m_aSpyList[uiSpyIndex].m_eSpyState)

	lea	edx, DWORD PTR [eax*8]
	push	edi
	mov	edi, DWORD PTR [ecx]
	sub	edx, eax
	mov	edx, DWORD PTR [edi+edx*4+16]
	cmp	edx, 8
	ja	SHORT $LN10@GetPercent
	jmp	DWORD PTR $LN40@GetPercent[edx*4]
$LN8@GetPercent:

; 2162 : 	{
; 2163 : 	case SPY_STATE_UNASSIGNED:
; 2164 : 		// no end time
; 2165 : 		return -1;
; 2166 : 		break;
; 2167 : 	case SPY_STATE_TRAVELLING:
; 2168 : 	case SPY_STATE_SURVEILLANCE:
; 2169 : 	case SPY_STATE_GATHERING_INTEL:
; 2170 : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 2171 : 		pCity = GetCityWithSpy(uiSpyIndex);

	push	eax
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 2172 : 		if (pCity)

	test	eax, eax
	je	SHORT $LN10@GetPercent

; 2173 : 		{
; 2174 : 			pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, eax
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage

; 2175 : 			CvAssertMsg(pCityEspionage->m_aiGoal[ePlayer] != 0, "Trying to div by zero!");
; 2176 : 			if(pCityEspionage->m_aiGoal[ePlayer] != 0)

	mov	ecx, DWORD PTR [eax+esi*4+268]
	test	ecx, ecx
	je	SHORT $LN10@GetPercent

; 2177 : 			{
; 2178 : 				return (pCityEspionage->m_aiAmount[ePlayer] * 100) / pCityEspionage->m_aiGoal[ePlayer];

	mov	eax, DWORD PTR [eax+esi*4+92]
	imul	eax, 100				; 00000064H
	cdq
	pop	edi
	idiv	ecx
	pop	esi

; 2210 : }

	ret	4
$LN5@GetPercent:

; 2179 : 			}
; 2180 : 		}
; 2181 : 		return -1;
; 2182 : 	case SPY_STATE_RIG_ELECTION:
; 2183 : #ifdef AUI_WARNING_FIXES
; 2184 : 		if (kGame.GetTurnsBetweenMinorCivElections() != 0)
; 2185 : 		{
; 2186 : 			return ((kGame.GetTurnsBetweenMinorCivElections() - kGame.GetTurnsUntilMinorCivElection()) * 100) / kGame.GetTurnsBetweenMinorCivElections();
; 2187 : #else
; 2188 : 		if(GC.getGame().GetTurnsBetweenMinorCivElections() != 0)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?GetTurnsBetweenMinorCivElections@CvGame@@QAEHXZ ; CvGame::GetTurnsBetweenMinorCivElections
	test	eax, eax
	je	SHORT $LN10@GetPercent

; 2189 : 		{
; 2190 : 			return ((GC.getGame().GetTurnsBetweenMinorCivElections() - GC.getGame().GetTurnsUntilMinorCivElection()) * 100) / GC.getGame().GetTurnsBetweenMinorCivElections();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	ebx
	mov	esi, ecx
	mov	edi, ecx
	call	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ ; CvGame::GetTurnsUntilMinorCivElection
	mov	ecx, esi
	mov	ebx, eax
	call	?GetTurnsBetweenMinorCivElections@CvGame@@QAEHXZ ; CvGame::GetTurnsBetweenMinorCivElections
	mov	esi, eax
	sub	esi, ebx
	mov	ecx, edi
	imul	esi, 100				; 00000064H
	call	?GetTurnsBetweenMinorCivElections@CvGame@@QAEHXZ ; CvGame::GetTurnsBetweenMinorCivElections
	mov	ecx, eax
	mov	eax, esi
	pop	ebx
	cdq
	pop	edi
	idiv	ecx
	pop	esi

; 2210 : }

	ret	4
$LN10@GetPercent:
	pop	edi

; 2191 : #endif
; 2192 : 		}
; 2193 : 		else
; 2194 : 		{
; 2195 : 			return -1;
; 2196 : 		}
; 2197 : 		break;
; 2198 : 	case SPY_STATE_COUNTER_INTEL:
; 2199 : 	case SPY_STATE_SCHMOOZE:
; 2200 : 		// no end time
; 2201 : 		return -1;
; 2202 : 		break;
; 2203 : 	case SPY_STATE_DEAD:
; 2204 : 		// no end time
; 2205 : 		return -1;
; 2206 : 		break;
; 2207 : 	}
; 2208 : 
; 2209 : 	return -1;

	or	eax, -1
	pop	esi

; 2210 : }

	ret	4
	npad	3
$LN40@GetPercent:
	DD	$LN10@GetPercent
	DD	$LN8@GetPercent
	DD	$LN8@GetPercent
	DD	$LN8@GetPercent
	DD	$LN5@GetPercent
	DD	$LN10@GetPercent
	DD	$LN8@GetPercent
	DD	$LN10@GetPercent
	DD	$LN10@GetPercent
?GetPercentOfStateComplete@CvPlayerEspionage@@QAEHI@Z ENDP ; CvPlayerEspionage::GetPercentOfStateComplete
_TEXT	ENDS
PUBLIC	?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ; CvPlayerEspionage::IsMyDiplomatVisitingThem
EXTRN	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ:PROC	; CvPlayer::getCapitalCity
; Function compile flags: /Ogtpy
;	COMDAT ?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_bIncludeTravelling$ = 12				; size = 1
?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z PROC ; CvPlayerEspionage::IsMyDiplomatVisitingThem, COMDAT
; _this$ = ecx

; 2347 : {

	push	esi
	mov	esi, ecx

; 2348 : 	CvCity* pTheirCapital = GET_PLAYER(ePlayer).getCapitalCity();

	mov	ecx, DWORD PTR _ePlayer$[esp]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity

; 2349 : 	if (!pTheirCapital)

	test	eax, eax
	jne	SHORT $LN10@IsMyDiplom
$LN21@IsMyDiplom:

; 2350 : 	{
; 2351 : 		return false;

	xor	al, al
	pop	esi

; 2376 : }

	ret	8

; 2352 : 	}
; 2353 : 
; 2354 : 	int iSpyIndex = GetSpyIndexInCity(pTheirCapital);

$LN10@IsMyDiplom:
	mov	ecx, DWORD PTR [esi+1292]
	push	edi
	mov	edi, DWORD PTR [ecx+44]
	mov	ecx, eax
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	mov	eax, DWORD PTR [eax+edi*4]
	pop	edi

; 2355 : 
; 2356 : 	if (iSpyIndex < 0)

	test	eax, eax

; 2357 : 	{
; 2358 : 		return false;

	jl	SHORT $LN21@IsMyDiplom

; 2359 : 	}
; 2360 : 
; 2361 : 	if (!m_aSpyList[iSpyIndex].m_bIsDiplomat)

	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	cmp	BYTE PTR [ecx+edx*4+24], 0

; 2362 : 	{
; 2363 : 		return false;

	je	SHORT $LN21@IsMyDiplom

; 2364 : 	}
; 2365 : 
; 2366 : 	if (!bIncludeTravelling)

	cmp	BYTE PTR _bIncludeTravelling$[esp], 0
	jne	SHORT $LN1@IsMyDiplom

; 2367 : 	{
; 2368 : 		// If the spy is not schmoozing yet, then it doesn't count as a diplomat yet
; 2369 : 		if (!IsSchmoozing(iSpyIndex))

	push	eax
	mov	ecx, esi
	call	?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSchmoozing
	test	al, al

; 2370 : 		{
; 2371 : 			return false;

	je	SHORT $LN21@IsMyDiplom
$LN1@IsMyDiplom:

; 2372 : 		}
; 2373 : 	}
; 2374 : 
; 2375 : 	return true;

	mov	al, 1
	pop	esi

; 2376 : }

	ret	8
?IsMyDiplomatVisitingThem@CvPlayerEspionage@@QAE_NW4PlayerTypes@@_N@Z ENDP ; CvPlayerEspionage::IsMyDiplomatVisitingThem
_TEXT	ENDS
PUBLIC	?IsOtherDiplomatVisitingMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::IsOtherDiplomatVisitingMe
; Function compile flags: /Ogtpy
;	COMDAT ?IsOtherDiplomatVisitingMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?IsOtherDiplomatVisitingMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::IsOtherDiplomatVisitingMe, COMDAT
; _this$ = ecx

; 2380 : 	return GET_PLAYER(ePlayer).GetEspionage()->IsMyDiplomatVisitingThem(m_pPlayer->GetID());

	mov	eax, DWORD PTR [ecx+1292]
	mov	ecx, DWORD PTR _ePlayer$[esp-4]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	esi
	mov	esi, DWORD PTR [eax+44]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	imul	esi, 63236				; 0000f704H
	add	esi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edi, eax
	mov	ecx, esi
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	test	eax, eax
	jne	SHORT $LN18@IsOtherDip
$LN29@IsOtherDip:
	pop	edi
	xor	al, al
	pop	esi

; 2381 : }

	ret	4

; 2380 : 	return GET_PLAYER(ePlayer).GetEspionage()->IsMyDiplomatVisitingThem(m_pPlayer->GetID());

$LN18@IsOtherDip:
	mov	ecx, DWORD PTR [edi+1292]
	mov	esi, DWORD PTR [ecx+44]
	mov	ecx, eax
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	mov	eax, DWORD PTR [eax+esi*4]
	test	eax, eax
	jl	SHORT $LN29@IsOtherDip
	mov	ecx, DWORD PTR [edi]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	cmp	BYTE PTR [ecx+edx*4+24], 0
	je	SHORT $LN29@IsOtherDip
	push	eax
	mov	ecx, edi
	call	?IsSchmoozing@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::IsSchmoozing
	test	al, al
	pop	edi
	setne	al
	pop	esi

; 2381 : }

	ret	4
?IsOtherDiplomatVisitingMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::IsOtherDiplomatVisitingMe
_TEXT	ENDS
PUBLIC	?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z ; CvPlayerEspionage::GetIntrigueMessage
EXTRN	__imp_??0String@Localization@@QAE@ABV01@@Z:PROC
EXTRN	?GetTextKey@CvBaseInfo@@QBEPBDXZ:PROC		; CvBaseInfo::GetTextKey
EXTRN	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z:PROC ; CvGlobals::getProjectInfo
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationAdjectiveKey
EXTRN	?getNameKey@CvCity@@QBEPBDXZ:PROC		; CvCity::getNameKey
EXTRN	?getNameKey@CvPlayer@@QBEPBDXZ:PROC		; CvPlayer::getNameKey
EXTRN	?getNickName@CvPlayer@@QBEQBDXZ:PROC		; CvPlayer::getNickName
EXTRN	?isHuman@CvPlayer@@QBE_NXZ:PROC			; CvPlayer::isHuman
EXTRN	?isGameMultiPlayer@CvGame@@QBE_NXZ:PROC		; CvGame::isGameMultiPlayer
EXTRN	__imp_??4String@Localization@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??0String@Localization@@QAE@PBD@Z:PROC
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvlocalization\include\cvlocalization.h
xdata$x	SEGMENT
__ehfuncinfo$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z DD 019930522H
	DD	015H
	DD	FLAT:__unwindtable$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$4
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$5
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$6
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$7
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$8
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$9
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$10
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$12
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$13
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$14
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$15
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$16
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$17
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$18
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$19
	DD	01H
	DD	FLAT:__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$20
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z
_TEXT	SEGMENT
_pCity$ = -1624						; size = 4
$T238429 = -1620					; size = 4
_strResult$ = -1616					; size = 80
$T238285 = -1536					; size = 4
$T238242 = -1532					; size = 80
$T238252 = -1452					; size = 80
$T238253 = -1372					; size = 80
$T238224 = -1292					; size = 80
$T238256 = -1212					; size = 80
$T238232 = -1132					; size = 80
$T238260 = -1052					; size = 80
$T238239 = -972						; size = 80
$T238263 = -892						; size = 80
$T238247 = -812						; size = 80
$T238268 = -732						; size = 80
$T238229 = -652						; size = 80
$T238273 = -572						; size = 80
$T238218 = -492						; size = 80
$T238274 = -412						; size = 80
$T238235 = -332						; size = 80
$T238277 = -252						; size = 80
$T238221 = -172						; size = 80
$T238278 = -92						; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_uiIndex$ = 12						; size = 4
?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z PROC ; CvPlayerEspionage::GetIntrigueMessage, COMDAT
; _this$ = ecx

; 3183 : {

	push	-1
	push	__ehhandler$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 1612				; 0000064cH
	push	ebx
	push	ebp

; 3184 : 	CvAssertMsg(uiIndex < m_aIntrigueNotificationMessages.size(), "uiIndex out of bounds");
; 3185 : 	if(uiIndex >= m_aIntrigueNotificationMessages.size())

	mov	ebp, DWORD PTR _uiIndex$[esp+1628]
	push	esi
	xor	ebx, ebx
	push	edi
	mov	edi, ecx
	mov	DWORD PTR $T238285[esp+1640], ebx
	mov	ecx, DWORD PTR [edi+1284]
	sub	ecx, DWORD PTR [edi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	ebp, eax
	jb	SHORT $LN81@GetIntrigu

; 3186 : 	{
; 3187 : 		return "";

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+1636]
	push	OFFSET $SG224228
	mov	ecx, esi
	call	DWORD PTR __imp_??0String@Localization@@QAE@PBD@Z
	jmp	$LN571@GetIntrigu
$LN81@GetIntrigu:

; 3188 : 	}
; 3189 : 
; 3190 : 	Localization::String strResult = "";

	push	OFFSET $SG224230
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	DWORD PTR __imp_??0String@Localization@@QAE@PBD@Z

; 3191 : 
; 3192 : 	// get the city if it exists
; 3193 : 	CvCity* pCity = NULL;
; 3194 : 	if(m_aIntrigueNotificationMessages[uiIndex].m_iCityX != -1 && m_aIntrigueNotificationMessages[uiIndex].m_iCityY)

	mov	ecx, DWORD PTR [edi+1280]
	mov	esi, ebp
	shl	esi, 4
	add	esi, ebp
	add	esi, esi
	add	esi, esi
	cmp	DWORD PTR [ecx+esi+28], -1
	lea	eax, DWORD PTR [ecx+esi]
	mov	DWORD PTR __$EHRec$[esp+1648], 1
	mov	DWORD PTR _pCity$[esp+1640], ebx
	je	$LN79@GetIntrigu
	cmp	DWORD PTR [eax+32], ebx
	je	$LN79@GetIntrigu

; 3195 : 	{
; 3196 : 		CvPlot* pPlot = GC.getMap().plot(m_aIntrigueNotificationMessages[uiIndex].m_iCityX, m_aIntrigueNotificationMessages[uiIndex].m_iCityY);

	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+esi+32]
	lea	eax, DWORD PTR [edx+esi]
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR $T238429[esp+1640], ecx
	cmp	eax, -2147483647			; 80000001H
	je	$LN79@GetIntrigu
	cmp	ecx, -2147483647			; 80000001H
	je	$LN79@GetIntrigu
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	dl, BYTE PTR [ecx+4056]
	mov	ecx, DWORD PTR [ecx+4020]
	test	dl, dl
	je	SHORT $LN128@GetIntrigu
	cmp	eax, ebx
	jge	SHORT $LN130@GetIntrigu
	cdq
	idiv	ecx
	mov	ebp, edx
	add	ebp, ecx
	jmp	SHORT $LN132@GetIntrigu
$LN130@GetIntrigu:
	cmp	eax, ecx
	jl	SHORT $LN128@GetIntrigu
	cdq
	idiv	ecx
	mov	ebp, edx
	jmp	SHORT $LN132@GetIntrigu
$LN128@GetIntrigu:
	mov	ebp, eax
$LN132@GetIntrigu:
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	al, BYTE PTR [edx+4057]
	mov	ebx, DWORD PTR [edx+4024]
	mov	edx, DWORD PTR $T238429[esp+1640]
	test	al, al
	je	SHORT $LN138@GetIntrigu
	test	edx, edx
	jge	SHORT $LN140@GetIntrigu
	mov	eax, edx
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN138@GetIntrigu
$LN140@GetIntrigu:
	cmp	edx, ebx
	jl	SHORT $LN138@GetIntrigu
	mov	eax, edx
	cdq
	idiv	ebx
$LN138@GetIntrigu:
	test	ebp, ebp
	jl	SHORT $LN79@GetIntrigu
	cmp	ebp, ecx
	jge	SHORT $LN79@GetIntrigu
	test	edx, edx
	jl	SHORT $LN79@GetIntrigu
	cmp	edx, ebx
	jge	SHORT $LN79@GetIntrigu
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	imul	ecx, edx
	add	ecx, ebp
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [eax+4068]

; 3197 : 		if(pPlot)

	test	ecx, ecx
	je	SHORT $LN79@GetIntrigu

; 3198 : 		{
; 3199 : 			pCity = pPlot->getPlotCity();

	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	DWORD PTR _pCity$[esp+1640], eax
$LN79@GetIntrigu:

; 3200 : 		}
; 3201 : 	}
; 3202 : 
; 3203 : 	switch(m_aIntrigueNotificationMessages[uiIndex].m_iIntrigueType)

	mov	ecx, DWORD PTR [edi+1280]
	lea	eax, DWORD PTR [ecx+esi]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, 5
	ja	$LN568@GetIntrigu
	jmp	DWORD PTR $LN602@GetIntrigu[ecx*4]
$LN76@GetIntrigu:

; 3204 : 	{
; 3205 : 	case INTRIGUE_TYPE_DECEPTION:
; 3206 : 		if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == m_pPlayer->GetID())  // if we found intrigue related to us

	mov	edx, DWORD PTR [edi+1292]
	mov	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, ecx
	jne	$LN75@GetIntrigu

; 3207 : 		{
; 3208 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_PLOTTING_AGAINST_YOU");

	lea	eax, DWORD PTR $T238218[esp+1640]
	push	OFFSET $SG224242
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 2
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238218[esp+1640]
$LN593@GetIntrigu:
	mov	BYTE PTR __$EHRec$[esp+1648], 1
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3209 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	$LN62@GetIntrigu
	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	$LN62@GetIntrigu

; 3210 : 			{
; 3211 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	edi, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [edi+esi+4]
	add	edi, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 3212 : 			}
; 3213 : 			else

	jmp	$LN568@GetIntrigu
$LN75@GetIntrigu:

; 3214 : 			{
; 3215 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3216 : 			}
; 3217 : 		}
; 3218 : 		else if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == NO_PLAYER)  // if we don't know who the intrigue information is about

	cmp	eax, -1
	jne	SHORT $LN71@GetIntrigu

; 3219 : 		{
; 3220 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_PLOTTING_AGAINST_UNKNOWN");

	lea	ecx, DWORD PTR $T238221[esp+1640]
	push	OFFSET $SG224250
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 3
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238221[esp+1640]

; 3221 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3222 : 			{
; 3223 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3224 : 			}
; 3225 : 			else

	jmp	$LN593@GetIntrigu
$LN71@GetIntrigu:

; 3226 : 			{
; 3227 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3228 : 			}
; 3229 : 		}
; 3230 : 		else // if we found intrigue related to another player
; 3231 : 		{
; 3232 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_PLOTTING_AGAINST_KNOWN");

	lea	edx, DWORD PTR $T238224[esp+1640]
	push	OFFSET $SG224257
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 4
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238224[esp+1640]
$LN601@GetIntrigu:
	mov	BYTE PTR __$EHRec$[esp+1648], 1
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3233 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN67@GetIntrigu
	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN67@GetIntrigu

; 3234 : 			{
; 3235 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3236 : 			}
; 3237 : 			else

	jmp	SHORT $LN572@GetIntrigu
$LN67@GetIntrigu:

; 3238 : 			{
; 3239 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN572@GetIntrigu:
	mov	ebp, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	ebp

; 3240 : 			}
; 3241 : 
; 3242 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN65@GetIntrigu
	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+8]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN65@GetIntrigu

; 3243 : 			{
; 3244 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNickName();

	mov	edi, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [edi+esi+8]
	add	edi, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3245 : 			}
; 3246 : 			else

	jmp	$LN573@GetIntrigu
$LN65@GetIntrigu:

; 3247 : 			{
; 3248 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNameKey();

	mov	edi, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [edi+esi+8]
	add	edi, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey

; 3249 : 			}
; 3250 : 		}
; 3251 : 		break;

	jmp	$LN573@GetIntrigu
$LN63@GetIntrigu:

; 3252 : 	case INTRIGUE_TYPE_BUILDING_ARMY:
; 3253 : 		strResult = Localization::Lookup("TXT_KEY_INTRIGUE_BUILDING_ARMY");

	lea	eax, DWORD PTR $T238229[esp+1640]
	push	OFFSET $SG224268
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 5
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238229[esp+1640]

; 3254 : 		if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3255 : 		{
; 3256 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3257 : 		}
; 3258 : 		else

	jmp	$LN593@GetIntrigu
$LN62@GetIntrigu:

; 3259 : 		{
; 3260 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	edi, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [edi+esi+4]
	add	edi, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 3261 : 		}
; 3262 : 		break;

	jmp	$LN568@GetIntrigu
$LN60@GetIntrigu:

; 3263 : 	case INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY:
; 3264 : 		strResult = Localization::Lookup("TXT_KEY_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY");

	lea	ecx, DWORD PTR $T238232[esp+1640]
	push	OFFSET $SG224275
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 6
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238232[esp+1640]

; 3265 : 		if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3266 : 		{
; 3267 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3268 : 		}
; 3269 : 		else

	jmp	$LN593@GetIntrigu
$LN57@GetIntrigu:

; 3270 : 		{
; 3271 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3272 : 		}
; 3273 : 		break;
; 3274 : 	case INTRIGUE_TYPE_ARMY_SNEAK_ATTACK:
; 3275 : 		// player is target
; 3276 : 		if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == m_pPlayer->GetID())

	mov	edx, DWORD PTR [edi+1292]
	mov	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, ecx
	jne	$LN56@GetIntrigu

; 3277 : 		{
; 3278 : 			if(pCity)

	mov	ebx, DWORD PTR _pCity$[esp+1640]
	test	ebx, ebx
	je	$LN55@GetIntrigu

; 3279 : 			{
; 3280 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN");

	lea	eax, DWORD PTR $T238235[esp+1640]
	push	OFFSET $SG224284
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 7
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238235[esp+1640]
$LN599@GetIntrigu:
	mov	BYTE PTR __$EHRec$[esp+1648], 1
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3281 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN54@GetIntrigu
	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN54@GetIntrigu

; 3282 : 				{
; 3283 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	edi, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [edi+esi+4]
	add	edi, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3284 : 				}
; 3285 : 				else

	jmp	SHORT $LN574@GetIntrigu
$LN54@GetIntrigu:

; 3286 : 				{
; 3287 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	edi, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [edi+esi+4]
	add	edi, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN574@GetIntrigu:
	mov	esi, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	esi

; 3288 : 				}
; 3289 : 				strResult << pCity->getNameKey();

	mov	ecx, ebx
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	esi

; 3290 : 			}
; 3291 : 			else

	jmp	$LN568@GetIntrigu
$LN55@GetIntrigu:

; 3292 : 			{
; 3293 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN");

	lea	ecx, DWORD PTR $T238239[esp+1640]
	push	OFFSET $SG224292
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 8
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238239[esp+1640]

; 3294 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3295 : 				{
; 3296 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3297 : 				}
; 3298 : 				else

	jmp	$LN593@GetIntrigu
$LN56@GetIntrigu:

; 3299 : 				{
; 3300 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3301 : 				}
; 3302 : 			}
; 3303 : 		}
; 3304 : 		// other player is target
; 3305 : 		else if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer != NO_PLAYER && m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer != MAX_MAJOR_CIVS)

	cmp	eax, -1
	je	$LN48@GetIntrigu
	cmp	eax, 22					; 00000016H
	je	$LN576@GetIntrigu

; 3306 : 		{
; 3307 : 			if(pCity)

	mov	ebx, DWORD PTR _pCity$[esp+1640]
	test	ebx, ebx
	je	$LN47@GetIntrigu

; 3308 : 			{
; 3309 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN");

	lea	edx, DWORD PTR $T238242[esp+1640]
	push	OFFSET $SG224301
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 9
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238242[esp+1640]
$LN600@GetIntrigu:
	mov	BYTE PTR __$EHRec$[esp+1648], 1
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3310 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN46@GetIntrigu
	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN46@GetIntrigu

; 3311 : 				{
; 3312 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3313 : 				}
; 3314 : 				else

	jmp	SHORT $LN577@GetIntrigu
$LN46@GetIntrigu:

; 3315 : 				{
; 3316 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN577@GetIntrigu:
	mov	ebp, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	ebp

; 3317 : 				}
; 3318 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getCivilizationAdjectiveKey();

	mov	edi, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [edi+esi+8]
	add	edi, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	ebp

; 3319 : 				strResult << pCity->getNameKey();
; 3320 : 			}
; 3321 : 			else

	jmp	$LN578@GetIntrigu
$LN47@GetIntrigu:

; 3322 : 			{
; 3323 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN");

	lea	eax, DWORD PTR $T238247[esp+1640]
	push	OFFSET $SG224310
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 10	; 0000000aH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238247[esp+1640]

; 3324 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3325 : 				{
; 3326 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3327 : 				}
; 3328 : 				else

	jmp	$LN601@GetIntrigu
$LN48@GetIntrigu:

; 3329 : 				{
; 3330 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3331 : 				}
; 3332 : 
; 3333 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).isHuman())
; 3334 : 				{
; 3335 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNickName();
; 3336 : 				}
; 3337 : 				else
; 3338 : 				{
; 3339 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNameKey();
; 3340 : 				}
; 3341 : 			}
; 3342 : 		}
; 3343 : 		// unknown player is target
; 3344 : 		else
; 3345 : 		{
; 3346 : 			if (m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == MAX_MAJOR_CIVS)

	cmp	eax, 22					; 00000016H
	jne	SHORT $LN38@GetIntrigu
$LN576@GetIntrigu:

; 3347 : 			{
; 3348 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE");

	lea	ecx, DWORD PTR $T238252[esp+1640]
	push	OFFSET $SG224322
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 11	; 0000000bH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238252[esp+1640]

; 3349 : 			}
; 3350 : 			else

	jmp	$LN593@GetIntrigu
$LN38@GetIntrigu:

; 3351 : 			{
; 3352 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN");

	lea	edx, DWORD PTR $T238253[esp+1640]
	push	OFFSET $SG224325
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 12	; 0000000cH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238253[esp+1640]

; 3353 : 			}
; 3354 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3355 : 			{
; 3356 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3357 : 			}
; 3358 : 			else

	jmp	$LN593@GetIntrigu
$LN34@GetIntrigu:

; 3359 : 			{
; 3360 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3361 : 			}
; 3362 : 		}
; 3363 : 		break;
; 3364 : 	case INTRIGUE_TYPE_AMPHIBIOUS_SNEAK_ATTACK:
; 3365 : 		// player is target
; 3366 : 		if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == m_pPlayer->GetID())

	mov	ecx, DWORD PTR [edi+1292]
	mov	ecx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, ecx
	jne	SHORT $LN33@GetIntrigu

; 3367 : 		{
; 3368 : 			if(pCity)

	mov	ebx, DWORD PTR _pCity$[esp+1640]
	test	ebx, ebx
	je	SHORT $LN32@GetIntrigu

; 3369 : 			{
; 3370 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN");

	lea	edx, DWORD PTR $T238256[esp+1640]
	push	OFFSET $SG224334
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 13	; 0000000dH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238256[esp+1640]

; 3371 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3372 : 				{
; 3373 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3374 : 				}
; 3375 : 				else

	jmp	$LN599@GetIntrigu
$LN32@GetIntrigu:

; 3376 : 				{
; 3377 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3378 : 				}
; 3379 : 				strResult << pCity->getNameKey();
; 3380 : 			}
; 3381 : 			else
; 3382 : 			{
; 3383 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN");

	lea	eax, DWORD PTR $T238260[esp+1640]
	push	OFFSET $SG224342
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 14	; 0000000eH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238260[esp+1640]

; 3384 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3385 : 				{
; 3386 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3387 : 				}
; 3388 : 				else

	jmp	$LN593@GetIntrigu
$LN33@GetIntrigu:

; 3389 : 				{
; 3390 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3391 : 				}
; 3392 : 			}
; 3393 : 		}
; 3394 : 		// other player is target
; 3395 : 		else if(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer != NO_PLAYER && m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer != MAX_MAJOR_CIVS)

	cmp	eax, -1
	je	SHORT $LN25@GetIntrigu
	cmp	eax, 22					; 00000016H
	je	SHORT $LN583@GetIntrigu

; 3396 : 		{
; 3397 : 			if(pCity)

	mov	ebx, DWORD PTR _pCity$[esp+1640]
	test	ebx, ebx
	je	SHORT $LN24@GetIntrigu

; 3398 : 			{
; 3399 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN");

	lea	ecx, DWORD PTR $T238263[esp+1640]
	push	OFFSET $SG224351
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 15	; 0000000fH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238263[esp+1640]

; 3400 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3401 : 				{
; 3402 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3403 : 				}
; 3404 : 				else

	jmp	$LN600@GetIntrigu
$LN24@GetIntrigu:

; 3405 : 				{
; 3406 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3407 : 				}
; 3408 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getCivilizationAdjectiveKey();
; 3409 : 				strResult << pCity->getNameKey();
; 3410 : 			}
; 3411 : 			else
; 3412 : 			{
; 3413 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN");

	lea	edx, DWORD PTR $T238268[esp+1640]
	push	OFFSET $SG224360
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 16	; 00000010H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238268[esp+1640]

; 3414 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3415 : 				{
; 3416 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3417 : 				}
; 3418 : 				else

	jmp	$LN601@GetIntrigu
$LN25@GetIntrigu:

; 3419 : 				{
; 3420 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3421 : 				}
; 3422 : 
; 3423 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).isHuman())
; 3424 : 				{
; 3425 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNickName();
; 3426 : 				}
; 3427 : 				else
; 3428 : 				{
; 3429 : 					strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer).getNameKey();
; 3430 : 				}
; 3431 : 			}
; 3432 : 		}
; 3433 : 		// unknown player is target
; 3434 : 		else
; 3435 : 		{
; 3436 : 			if (m_aIntrigueNotificationMessages[uiIndex].m_eTargetPlayer == MAX_MAJOR_CIVS)

	cmp	eax, 22					; 00000016H
	jne	SHORT $LN15@GetIntrigu
$LN583@GetIntrigu:

; 3437 : 			{
; 3438 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE");

	lea	eax, DWORD PTR $T238273[esp+1640]
	push	OFFSET $SG224372
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 17	; 00000011H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238273[esp+1640]

; 3439 : 			}
; 3440 : 			else

	jmp	$LN593@GetIntrigu
$LN15@GetIntrigu:

; 3441 : 			{
; 3442 : 				strResult = Localization::Lookup("TXT_KEY_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN");

	lea	ecx, DWORD PTR $T238274[esp+1640]
	push	OFFSET $SG224375
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 18	; 00000012H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238274[esp+1640]

; 3443 : 			}
; 3444 : 
; 3445 : 			if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())
; 3446 : 			{
; 3447 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();
; 3448 : 			}
; 3449 : 			else

	jmp	$LN593@GetIntrigu
$LN11@GetIntrigu:

; 3450 : 			{
; 3451 : 				strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();
; 3452 : 			}
; 3453 : 		}
; 3454 : 		break;
; 3455 : 	case INTRIGUE_TYPE_CONSTRUCTING_WONDER:
; 3456 : 		if (pCity)

	mov	ebx, DWORD PTR _pCity$[esp+1640]
	test	ebx, ebx
	je	SHORT $LN10@GetIntrigu

; 3457 : 		{
; 3458 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_CONSTRUCT_WONDER");

	lea	edx, DWORD PTR $T238277[esp+1640]
	push	OFFSET $SG224383
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 19	; 00000013H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238277[esp+1640]

; 3459 : 		}
; 3460 : 		else

	jmp	SHORT $LN587@GetIntrigu
$LN10@GetIntrigu:

; 3461 : 		{
; 3462 : 			strResult = Localization::Lookup("TXT_KEY_INTRIGUE_CONSTRUCT_WONDER_WO_CITY");

	lea	eax, DWORD PTR $T238278[esp+1640]
	push	OFFSET $SG224386
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	mov	BYTE PTR __$EHRec$[esp+1652], 20	; 00000014H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T238278[esp+1640]
$LN587@GetIntrigu:
	mov	BYTE PTR __$EHRec$[esp+1648], 1
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3463 : 		}
; 3464 : 		if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN8@GetIntrigu
	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN8@GetIntrigu

; 3465 : 		{
; 3466 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNickName();

	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3467 : 		}
; 3468 : 		else

	jmp	SHORT $LN588@GetIntrigu
$LN8@GetIntrigu:

; 3469 : 		{
; 3470 : 			strResult << GET_PLAYER(m_aIntrigueNotificationMessages[uiIndex].m_eSourcePlayer).getNameKey();

	mov	eax, DWORD PTR [edi+1280]
	mov	ecx, DWORD PTR [eax+esi+4]
	add	eax, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN588@GetIntrigu:
	mov	ebp, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	ebp

; 3471 : 		}
; 3472 : 		if (m_aIntrigueNotificationMessages[uiIndex].m_eBuilding != NO_BUILDING)

	mov	ecx, DWORD PTR [edi+1280]
	lea	eax, DWORD PTR [ecx+esi]
	or	ecx, -1
	cmp	DWORD PTR [eax+12], ecx
	je	SHORT $LN6@GetIntrigu

; 3473 : 		{
; 3474 : 			CvBuildingEntry* pBuildingInfo = GC.getBuildingInfo(m_aIntrigueNotificationMessages[uiIndex].m_eBuilding);

	mov	edx, DWORD PTR [eax+12]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo

; 3475 : 			CvAssertMsg(pBuildingInfo, "pBuildingInfo is null");
; 3476 : 			if (pBuildingInfo)
; 3477 : 			{
; 3478 : 				strResult << pBuildingInfo->GetTextKey();
; 3479 : 			}
; 3480 : 		}

	jmp	SHORT $LN590@GetIntrigu
$LN6@GetIntrigu:

; 3481 : 		else if (m_aIntrigueNotificationMessages[uiIndex].m_eProject != NO_PROJECT)

	cmp	DWORD PTR [eax+16], ecx
	je	SHORT $LN569@GetIntrigu

; 3482 : 		{
; 3483 : 			CvProjectEntry* pProjectInfo = GC.getProjectInfo(m_aIntrigueNotificationMessages[uiIndex].m_eProject);

	mov	eax, DWORD PTR [eax+16]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
$LN590@GetIntrigu:

; 3484 : 			CvAssertMsg(pProjectInfo, "pProjectInfo is null");
; 3485 : 			if (pProjectInfo)

	test	eax, eax
	je	SHORT $LN569@GetIntrigu

; 3486 : 			{
; 3487 : 				strResult << pProjectInfo->GetTextKey();

	mov	ecx, eax
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	ebp
$LN569@GetIntrigu:

; 3488 : 			}
; 3489 : 		}
; 3490 : 
; 3491 : 		if (pCity)

	test	ebx, ebx
	je	SHORT $LN568@GetIntrigu
$LN578@GetIntrigu:

; 3492 : 		{
; 3493 : 			strResult << pCity->getNameKey();

	mov	ecx, ebx
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
$LN573@GetIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strResult$[esp+1644]
	call	ebp
$LN568@GetIntrigu:

; 3494 : 		}
; 3495 : 		break;
; 3496 : 	}
; 3497 : 
; 3498 : 	return strResult;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+1636]
	lea	ecx, DWORD PTR _strResult$[esp+1640]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_??0String@Localization@@QAE@ABV01@@Z
	lea	ecx, DWORD PTR _strResult$[esp+1640]
	mov	DWORD PTR $T238285[esp+1640], 1
	mov	BYTE PTR __$EHRec$[esp+1648], 0
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN571@GetIntrigu:

; 3499 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+1640]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 1624				; 00000658H
	ret	8
	npad	1
$LN602@GetIntrigu:
	DD	$LN76@GetIntrigu
	DD	$LN63@GetIntrigu
	DD	$LN60@GetIntrigu
	DD	$LN57@GetIntrigu
	DD	$LN34@GetIntrigu
	DD	$LN11@GetIntrigu
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$0:
	mov	eax, DWORD PTR $T238285[ebp]
	and	eax, 1
	je	$LN85@GetIntrigu
	and	DWORD PTR $T238285[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN85@GetIntrigu:
	ret	0
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$1:
	lea	ecx, DWORD PTR _strResult$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$2:
	lea	ecx, DWORD PTR $T238218[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$3:
	lea	ecx, DWORD PTR $T238221[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$4:
	lea	ecx, DWORD PTR $T238224[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$5:
	lea	ecx, DWORD PTR $T238229[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$6:
	lea	ecx, DWORD PTR $T238232[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$7:
	lea	ecx, DWORD PTR $T238235[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$8:
	lea	ecx, DWORD PTR $T238239[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$9:
	lea	ecx, DWORD PTR $T238242[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$10:
	lea	ecx, DWORD PTR $T238247[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$11:
	lea	ecx, DWORD PTR $T238252[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$12:
	lea	ecx, DWORD PTR $T238253[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$13:
	lea	ecx, DWORD PTR $T238256[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$14:
	lea	ecx, DWORD PTR $T238260[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$15:
	lea	ecx, DWORD PTR $T238263[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$16:
	lea	ecx, DWORD PTR $T238268[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$17:
	lea	ecx, DWORD PTR $T238273[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$18:
	lea	ecx, DWORD PTR $T238274[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$19:
	lea	ecx, DWORD PTR $T238277[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z$20:
	lea	ecx, DWORD PTR $T238278[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z:
	mov	eax, OFFSET __ehfuncinfo$?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetIntrigueMessage@CvPlayerEspionage@@QAE?AVString@Localization@@I@Z ENDP ; CvPlayerEspionage::GetIntrigueMessage
PUBLIC	?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::HasRecentIntrigueAbout
; Function compile flags: /Ogtpy
;	COMDAT ?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_eTargetPlayer$ = 8					; size = 4
?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::HasRecentIntrigueAbout, COMDAT
; _this$ = ecx

; 3504 : 	IntrigueNotificationMessage* pMessage = GetRecentIntrigueInfo(eTargetPlayer);

	mov	eax, DWORD PTR _eTargetPlayer$[esp-4]
	push	eax
	call	?GetRecentIntrigueInfo@CvPlayerEspionage@@QAEPAUIntrigueNotificationMessage@@W4PlayerTypes@@@Z ; CvPlayerEspionage::GetRecentIntrigueInfo

; 3505 : 	if(pMessage && pMessage->m_eSourcePlayer != NO_PLAYER && pMessage->m_iIntrigueType != NUM_INTRIGUE_TYPES)

	test	eax, eax
	je	SHORT $LN2@HasRecentI
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN2@HasRecentI
	cmp	DWORD PTR [eax+20], 6
	je	SHORT $LN2@HasRecentI

; 3506 : 	{
; 3507 : 		return true;

	mov	al, 1

; 3512 : 	}
; 3513 : }

	ret	4
$LN2@HasRecentI:

; 3508 : 	}
; 3509 : 	else
; 3510 : 	{
; 3511 : 		return false;

	xor	al, al

; 3512 : 	}
; 3513 : }

	ret	4
?HasRecentIntrigueAbout@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::HasRecentIntrigueAbout
_TEXT	ENDS
PUBLIC	?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0W4CvIntrigueType@@@Z ; CvPlayerEspionage::HasSharedIntrigue
; Function compile flags: /Ogtpy
;	COMDAT ?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0W4CvIntrigueType@@@Z
_TEXT	SEGMENT
_eTargetPlayer$ = 8					; size = 4
_eSourcePlayer$ = 12					; size = 4
_eIntrigueType$ = 16					; size = 4
?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0W4CvIntrigueType@@@Z PROC ; CvPlayerEspionage::HasSharedIntrigue, COMDAT
; _this$ = ecx

; 3547 : {

	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 3548 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [esi+1284]
	sub	ecx, DWORD PTR [esi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	xor	ebx, ebx
	add	eax, edx
	push	edi
	je	SHORT $LN7@HasSharedI
	xor	ebp, ebp
	npad	7
$LL9@HasSharedI:

; 3549 : 	{
; 3550 : 		IntrigueNotificationMessage* pMessage = &(m_aIntrigueNotificationMessages[ui]);

	mov	ecx, DWORD PTR [esi+1280]

; 3551 : 
; 3552 : 		// if we HAVE NOT shared this information, don't count it
; 3553 : 		if(!pMessage->m_bShared)

	cmp	BYTE PTR [ecx+ebp+64], 0
	lea	edi, DWORD PTR [ecx+ebp]
	je	SHORT $LN8@HasSharedI

; 3554 : 		{
; 3555 : 			continue;
; 3556 : 		}
; 3557 : 
; 3558 : 		// if we did not discover the message, we cannot share the intrigue
; 3559 : 		if (pMessage->m_eDiscoveringPlayer != m_pPlayer->GetID())

	mov	edx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [edx+44]
	jne	SHORT $LN8@HasSharedI

; 3560 : 		{
; 3561 : 			continue;
; 3562 : 		}
; 3563 : 
; 3564 : 		if(pMessage->m_eTargetPlayer != eTargetPlayer)

	mov	ecx, DWORD PTR _eTargetPlayer$[esp+12]
	cmp	DWORD PTR [edi+8], ecx
	jne	SHORT $LN8@HasSharedI

; 3565 : 		{
; 3566 : 			continue;
; 3567 : 		}
; 3568 : 
; 3569 : 		if(pMessage->m_eSourcePlayer != eSourcePlayer)

	mov	edx, DWORD PTR _eSourcePlayer$[esp+12]
	cmp	DWORD PTR [edi+4], edx
	jne	SHORT $LN8@HasSharedI

; 3570 : 		{
; 3571 : 			continue;
; 3572 : 		}
; 3573 : 
; 3574 : 		if(pMessage->m_iIntrigueType != eIntrigueType)

	mov	eax, DWORD PTR _eIntrigueType$[esp+12]
	cmp	DWORD PTR [edi+20], eax
	jne	SHORT $LN8@HasSharedI

; 3575 : 		{
; 3576 : 			continue;
; 3577 : 		}
; 3578 : 
; 3579 : 		// has this intrigue been shared the last 30 turns?
; 3580 : 		if((GC.getGame().getGameTurn() - m_aIntrigueNotificationMessages[ui].m_iTurnNum) > 30)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	sub	eax, DWORD PTR [edi+24]
	cmp	eax, 30					; 0000001eH
	jle	SHORT $LN1@HasSharedI
$LN8@HasSharedI:

; 3548 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [esi+1284]
	sub	ecx, DWORD PTR [esi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	inc	ebx
	add	ecx, edx
	add	ebp, 68					; 00000044H
	cmp	ebx, ecx
	jb	SHORT $LL9@HasSharedI
$LN7@HasSharedI:
	pop	edi
	pop	esi
	pop	ebp

; 3586 : 	}
; 3587 : 
; 3588 : 	return false;

	xor	al, al
	pop	ebx

; 3589 : }

	ret	12					; 0000000cH
$LN1@HasSharedI:
	pop	edi
	pop	esi
	pop	ebp

; 3581 : 		{
; 3582 : 			continue;
; 3583 : 		}
; 3584 : 
; 3585 : 		return true;

	mov	al, 1
	pop	ebx

; 3589 : }

	ret	12					; 0000000cH
?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0W4CvIntrigueType@@@Z ENDP ; CvPlayerEspionage::HasSharedIntrigue
_TEXT	ENDS
PUBLIC	?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0@Z ; CvPlayerEspionage::HasSharedIntrigue
; Function compile flags: /Ogtpy
;	COMDAT ?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0@Z
_TEXT	SEGMENT
_eTargetPlayer$ = 8					; size = 4
_eSourcePlayer$ = 12					; size = 4
?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0@Z PROC ; CvPlayerEspionage::HasSharedIntrigue, COMDAT
; _this$ = ecx

; 3594 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	edx, DWORD PTR [ecx+1284]
	sub	edx, DWORD PTR [ecx+1280]
	mov	eax, 2021161081				; 78787879H
	imul	edx
	push	ebx
	push	ebp
	sar	edx, 5
	push	esi
	mov	eax, edx
	push	edi
	shr	eax, 31					; 0000001fH
	xor	edi, edi
	add	eax, edx
	je	SHORT $LN5@HasSharedI@2
	mov	edx, DWORD PTR [ecx+1284]
	sub	edx, DWORD PTR [ecx+1280]
	mov	eax, 2021161081				; 78787879H
	imul	edx
	mov	eax, DWORD PTR [ecx+1280]
	sar	edx, 5
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	mov	edx, DWORD PTR _eSourcePlayer$[esp+12]
	npad	4
$LL21@HasSharedI@2:

; 3595 : 	{
; 3596 : 		IntrigueNotificationMessage* pMessage = &(m_aIntrigueNotificationMessages[ui]);
; 3597 : 
; 3598 : 		// if we HAVE NOT shared this information, don't count it
; 3599 : 		if(!pMessage->m_bShared)

	cmp	BYTE PTR [eax+64], 0
	je	SHORT $LN6@HasSharedI@2

; 3600 : 		{
; 3601 : 			continue;
; 3602 : 		}
; 3603 : 
; 3604 : 		// can't share intrigue we didn't discover
; 3605 : 		if (pMessage->m_eDiscoveringPlayer != m_pPlayer->GetID())

	mov	ebx, DWORD PTR [ecx+1292]
	mov	ebp, DWORD PTR [eax]
	cmp	ebp, DWORD PTR [ebx+44]
	jne	SHORT $LN6@HasSharedI@2

; 3606 : 		{
; 3607 : 			continue;
; 3608 : 		}
; 3609 : 
; 3610 : 		if(pMessage->m_eTargetPlayer != eTargetPlayer)

	mov	ebx, DWORD PTR _eTargetPlayer$[esp+12]
	cmp	DWORD PTR [eax+8], ebx
	jne	SHORT $LN6@HasSharedI@2

; 3611 : 		{
; 3612 : 			continue;
; 3613 : 		}
; 3614 : 
; 3615 : 		if(pMessage->m_eSourcePlayer != eSourcePlayer)

	cmp	DWORD PTR [eax+4], edx
	je	SHORT $LN1@HasSharedI@2
$LN6@HasSharedI@2:

; 3594 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	inc	edi
	add	eax, 68					; 00000044H
	cmp	edi, esi
	jb	SHORT $LL21@HasSharedI@2
$LN5@HasSharedI@2:
	pop	edi
	pop	esi
	pop	ebp

; 3621 : 	}
; 3622 : 
; 3623 : 	return false;

	xor	al, al
	pop	ebx

; 3624 : }

	ret	8
$LN1@HasSharedI@2:
	pop	edi
	pop	esi
	pop	ebp

; 3616 : 		{
; 3617 : 			continue;
; 3618 : 		}
; 3619 : 
; 3620 : 		return true;

	mov	al, 1
	pop	ebx

; 3624 : }

	ret	8
?HasSharedIntrigue@CvPlayerEspionage@@QAE_NW4PlayerTypes@@0@Z ENDP ; CvPlayerEspionage::HasSharedIntrigue
_TEXT	ENDS
PUBLIC	?MarkRecentIntrigueAsShared@CvPlayerEspionage@@QAEHW4PlayerTypes@@0W4CvIntrigueType@@@Z ; CvPlayerEspionage::MarkRecentIntrigueAsShared
; Function compile flags: /Ogtpy
;	COMDAT ?MarkRecentIntrigueAsShared@CvPlayerEspionage@@QAEHW4PlayerTypes@@0W4CvIntrigueType@@@Z
_TEXT	SEGMENT
_eTargetPlayer$ = 8					; size = 4
_eSourcePlayer$ = 12					; size = 4
_eIntrigueType$ = 16					; size = 4
?MarkRecentIntrigueAsShared@CvPlayerEspionage@@QAEHW4PlayerTypes@@0W4CvIntrigueType@@@Z PROC ; CvPlayerEspionage::MarkRecentIntrigueAsShared, COMDAT
; _this$ = ecx

; 3630 : 	int iNumShared = 0;
; 3631 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	edx, DWORD PTR [ecx+1284]
	sub	edx, DWORD PTR [ecx+1280]
	mov	eax, 2021161081				; 78787879H
	imul	edx
	sar	edx, 5
	push	ebp
	mov	eax, edx
	push	esi
	shr	eax, 31					; 0000001fH
	xor	ebp, ebp
	xor	esi, esi
	add	eax, edx
	je	SHORT $LN21@MarkRecent
	push	ebx
	push	edi
	xor	edi, edi
	npad	7
$LL23@MarkRecent:

; 3632 : 	{
; 3633 : 		IntrigueNotificationMessage* pMessage = &(m_aIntrigueNotificationMessages[ui]);

	mov	eax, DWORD PTR [ecx+1280]
	add	eax, edi

; 3634 : 		if(pMessage->m_bShared)

	cmp	BYTE PTR [eax+64], 0
	jne	SHORT $LN7@MarkRecent

; 3635 : 		{
; 3636 : 			continue;
; 3637 : 		}
; 3638 : 
; 3639 : 		// can't share intrigue messages we don't own
; 3640 : 		if (pMessage->m_eDiscoveringPlayer != m_pPlayer->GetID())

	mov	edx, DWORD PTR [ecx+1292]
	mov	ebx, DWORD PTR [eax]
	cmp	ebx, DWORD PTR [edx+44]
	jne	SHORT $LN7@MarkRecent

; 3641 : 		{
; 3642 : 			continue;
; 3643 : 		}
; 3644 : 
; 3645 : 		if(pMessage->m_eTargetPlayer != eTargetPlayer)

	mov	edx, DWORD PTR _eTargetPlayer$[esp+12]
	cmp	DWORD PTR [eax+8], edx
	jne	SHORT $LN7@MarkRecent

; 3646 : 		{
; 3647 : 			continue;
; 3648 : 		}
; 3649 : 
; 3650 : 		if(pMessage->m_eSourcePlayer != eSourcePlayer)

	mov	edx, DWORD PTR _eSourcePlayer$[esp+12]
	cmp	DWORD PTR [eax+4], edx
	jne	SHORT $LN7@MarkRecent

; 3651 : 		{
; 3652 : 			continue;
; 3653 : 		}
; 3654 : 
; 3655 : 		if(pMessage->m_iIntrigueType != eIntrigueType)

	mov	edx, DWORD PTR _eIntrigueType$[esp+12]
	cmp	DWORD PTR [eax+20], edx
	jne	SHORT $LN7@MarkRecent

; 3656 : 		{
; 3657 : 			continue;
; 3658 : 		}
; 3659 : 
; 3660 : 		// this message has not been shared. Marking it as shared.
; 3661 : 		pMessage->m_bShared = true;

	mov	BYTE PTR [eax+64], 1

; 3662 : 		iNumShared++;

	inc	ebp
$LN7@MarkRecent:
	mov	edx, DWORD PTR [ecx+1284]
	sub	edx, DWORD PTR [ecx+1280]
	mov	eax, 2021161081				; 78787879H
	imul	edx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	inc	esi
	add	eax, edx
	add	edi, 68					; 00000044H
	cmp	esi, eax
	jb	SHORT $LL23@MarkRecent
	pop	edi
	pop	ebx
$LN21@MarkRecent:
	pop	esi

; 3663 : 	}
; 3664 : 
; 3665 : 	return iNumShared;

	mov	eax, ebp
	pop	ebp

; 3666 : }

	ret	12					; 0000000cH
?MarkRecentIntrigueAsShared@CvPlayerEspionage@@QAEHW4PlayerTypes@@0W4CvIntrigueType@@@Z ENDP ; CvPlayerEspionage::MarkRecentIntrigueAsShared
_TEXT	ENDS
PUBLIC	??0CvCityEspionage@@QAE@XZ			; CvCityEspionage::CvCityEspionage
; Function compile flags: /Ogtpy
;	COMDAT ??0CvCityEspionage@@QAE@XZ
_TEXT	SEGMENT
??0CvCityEspionage@@QAE@XZ PROC				; CvCityEspionage::CvCityEspionage, COMDAT
; _this$ = ecx

; 3932 : {

	push	esi
	mov	esi, ecx

; 3933 : 	Reset();

	call	?Reset@CvCityEspionage@@QAEXXZ		; CvCityEspionage::Reset

; 3934 : }

	mov	eax, esi
	pop	esi
	ret	0
??0CvCityEspionage@@QAE@XZ ENDP				; CvCityEspionage::CvCityEspionage
_TEXT	ENDS
PUBLIC	?Init@CvCityEspionage@@QAEXPAVCvCity@@@Z	; CvCityEspionage::Init
; Function compile flags: /Ogtpy
;	COMDAT ?Init@CvCityEspionage@@QAEXPAVCvCity@@@Z
_TEXT	SEGMENT
_pCity$ = 8						; size = 4
?Init@CvCityEspionage@@QAEXPAVCvCity@@@Z PROC		; CvCityEspionage::Init, COMDAT
; _this$ = ecx

; 3943 : {

	push	esi
	mov	esi, ecx

; 3944 : 	Reset();

	call	?Reset@CvCityEspionage@@QAEXXZ		; CvCityEspionage::Reset

; 3945 : 
; 3946 : 	m_pCity = pCity;

	mov	eax, DWORD PTR _pCity$[esp]
	mov	DWORD PTR [esi], eax
	pop	esi

; 3947 : }

	ret	4
?Init@CvCityEspionage@@QAEXPAVCvCity@@@Z ENDP		; CvCityEspionage::Init
_TEXT	ENDS
PUBLIC	?Uninit@CvCityEspionage@@QAEXXZ			; CvCityEspionage::Uninit
; Function compile flags: /Ogtpy
;	COMDAT ?Uninit@CvCityEspionage@@QAEXXZ
_TEXT	SEGMENT
?Uninit@CvCityEspionage@@QAEXXZ PROC			; CvCityEspionage::Uninit, COMDAT
; _this$ = ecx

; 3952 : 	Reset();

	jmp	?Reset@CvCityEspionage@@QAEXXZ		; CvCityEspionage::Reset
?Uninit@CvCityEspionage@@QAEXXZ ENDP			; CvCityEspionage::Uninit
_TEXT	ENDS
PUBLIC	?HasCounterSpy@CvCityEspionage@@QAE_NXZ		; CvCityEspionage::HasCounterSpy
; Function compile flags: /Ogtpy
;	COMDAT ?HasCounterSpy@CvCityEspionage@@QAE_NXZ
_TEXT	SEGMENT
?HasCounterSpy@CvCityEspionage@@QAE_NXZ PROC		; CvCityEspionage::HasCounterSpy, COMDAT
; _this$ = ecx

; 4038 : 	return m_aiSpyAssignment[m_pCity->getOwner()] != -1;

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+84]
	xor	eax, eax
	cmp	DWORD PTR [ecx+edx*4+4], -1
	setne	al

; 4039 : }

	ret	0
?HasCounterSpy@CvCityEspionage@@QAE_NXZ ENDP		; CvCityEspionage::HasCounterSpy
_TEXT	ENDS
PUBLIC	??0CvEspionageAI@@QAE@XZ			; CvEspionageAI::CvEspionageAI
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__ehfuncinfo$??0CvEspionageAI@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CvEspionageAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvEspionageAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvEspionageAI@@QAE@XZ$5
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvEspionageAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvEspionageAI@@QAE@XZ PROC				; CvEspionageAI::CvEspionageAI, COMDAT
; _this$ = ecx

; 4199 : {

	push	-1
	push	__ehhandler$??0CvEspionageAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	eax, ecx
	xor	ecx, ecx
	push	esi
	mov	DWORD PTR [eax], ecx
	lea	esi, DWORD PTR [eax+16]
	mov	edx, 22					; 00000016H
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+4], esi
	lea	esi, DWORD PTR [eax+120]
	mov	DWORD PTR [eax+112], ecx
	mov	DWORD PTR [eax+116], edx
	mov	DWORD PTR [eax+108], esi
	lea	esi, DWORD PTR [eax+224]
	mov	DWORD PTR [eax+216], ecx
	mov	DWORD PTR [eax+220], edx
	mov	DWORD PTR [eax+212], esi
	lea	esi, DWORD PTR [eax+328]
	mov	DWORD PTR [eax+320], ecx
	mov	DWORD PTR [eax+324], edx
	mov	DWORD PTR [eax+316], esi
	lea	esi, DWORD PTR [eax+432]
	mov	DWORD PTR [eax+424], ecx
	mov	DWORD PTR [eax+428], edx
	mov	DWORD PTR [eax+420], esi
	lea	esi, DWORD PTR [eax+536]
	mov	DWORD PTR [eax+528], ecx
	mov	DWORD PTR [eax+532], edx
	mov	DWORD PTR [eax+524], esi
	mov	DWORD PTR [eax+632], ecx
	lea	esi, DWORD PTR [eax+640]
	mov	DWORD PTR [eax+628], esi
	mov	DWORD PTR [eax+636], edx
	mov	BYTE PTR [eax+732], cl

; 4200 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	DWORD PTR [eax+736], -1
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvEspionageAI@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__ehhandler$??0CvEspionageAI@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0CvEspionageAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvEspionageAI@@QAE@XZ ENDP				; CvEspionageAI::CvEspionageAI
PUBLIC	?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z ; CvEspionageAI::GetCityStatePlan
; Function compile flags: /Ogtpy
;	COMDAT ?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z
_TEXT	SEGMENT
_iCurrentPlan$ = -92					; size = 4
_aiMajorCivVotes$226383 = -88				; size = 88
_peDiploThreat$ = 8					; size = 4
?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z PROC ; CvEspionageAI::GetCityStatePlan, COMDAT
; _this$ = ecx

; 5442 : {

	sub	esp, 92					; 0000005cH
	push	ebp
	push	edi
	mov	ebp, ecx

; 5443 : 	int iCurrentPlan = PLAN_PLAY_NORMAL; 
; 5444 : 	PlayerTypes eCurrentDiploThreat = NO_PLAYER;

	or	edi, -1

; 5445 : 	if (m_bUNCountdownStarted)

	cmp	BYTE PTR [ebp+732], 0
	mov	DWORD PTR _iCurrentPlan$[esp+100], 3
	je	$LN48@GetCitySta

; 5446 : 	{
; 5447 : 		int aiMajorCivVotes[MAX_MAJOR_CIVS];
; 5448 : 		for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 5449 : 		{
; 5450 : 			aiMajorCivVotes[ui] = 0;

	xor	eax, eax
	push	ebx
	push	esi
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+108], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+112], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+116], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+120], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+124], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+128], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+132], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+136], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+140], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+144], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+148], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+152], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+156], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+160], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+164], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+168], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+172], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+176], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+180], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+184], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+188], eax
	mov	DWORD PTR _aiMajorCivVotes$226383[esp+192], eax

; 5451 : 		}
; 5452 : 
; 5453 : 		int iAliveMinorCivs = 0;

	xor	ebx, ebx
	mov	esi, 1391192				; 00153a58H
$LL17@GetCitySta:

; 5454 : 
; 5455 : 		for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)
; 5456 : 		{
; 5457 : 			PlayerTypes eTargetPlayer = (PlayerTypes)ui;
; 5458 : 
; 5459 : 			// only count minor civs
; 5460 : 			if (!GET_PLAYER(eTargetPlayer).isMinorCiv())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+eax]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN16@GetCitySta

; 5513 : 	}
; 5514 : 	return iCurrentPlan;

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, esi
	cmp	BYTE PTR [ecx+2256], 0
	je	SHORT $LN16@GetCitySta
	inc	ebx
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	cmp	eax, -1
	je	SHORT $LN16@GetCitySta
	inc	DWORD PTR _aiMajorCivVotes$226383[esp+eax*4+108]
	lea	eax, DWORD PTR _aiMajorCivVotes$226383[esp+eax*4+108]
$LN16@GetCitySta:
	add	esi, 63236				; 0000f704H
	cmp	esi, 3983868				; 003cc9fcH
	jb	SHORT $LL17@GetCitySta
	xor	ecx, ecx
	xor	eax, eax
$LL11@GetCitySta:
	mov	edx, DWORD PTR _aiMajorCivVotes$226383[esp+eax*4+108]
	cmp	edx, ecx
	jle	SHORT $LN10@GetCitySta
	mov	ecx, edx
	mov	edi, eax
$LN10@GetCitySta:
	mov	edx, DWORD PTR _aiMajorCivVotes$226383[esp+eax*4+112]
	cmp	edx, ecx
	jle	SHORT $LN45@GetCitySta
	mov	ecx, edx
	lea	edi, DWORD PTR [eax+1]
$LN45@GetCitySta:
	add	eax, 2
	cmp	eax, 22					; 00000016H
	jb	SHORT $LL11@GetCitySta

; 5461 : 			{
; 5462 : 				continue;
; 5463 : 			}
; 5464 : 
; 5465 : 			if (!GET_PLAYER(eTargetPlayer).isAlive())
; 5466 : 			{
; 5467 : 				continue;
; 5468 : 			}
; 5469 : 
; 5470 : 			iAliveMinorCivs++;
; 5471 : 
; 5472 : 			PlayerTypes eAllyPlayer = GET_PLAYER(eTargetPlayer).GetMinorCivAI()->GetAlly();
; 5473 : 			if (eAllyPlayer != NO_PLAYER)
; 5474 : 			{
; 5475 : 				aiMajorCivVotes[eAllyPlayer]++;
; 5476 : 			}
; 5477 : 		}
; 5478 : 
; 5479 : 		int iMaxVotes = 0;
; 5480 : 		for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 5481 : 		{
; 5482 : 			PlayerTypes eTargetPlayer = (PlayerTypes)ui;
; 5483 : 			if (aiMajorCivVotes[eTargetPlayer] > iMaxVotes)
; 5484 : 			{
; 5485 : 				iMaxVotes = aiMajorCivVotes[eTargetPlayer];
; 5486 : 				eCurrentDiploThreat = eTargetPlayer;
; 5487 : 			}
; 5488 : 		}
; 5489 : 
; 5490 : 		if (eCurrentDiploThreat != NO_PLAYER)

	cmp	edi, -1
	je	SHORT $LN50@GetCitySta

; 5491 : 		{
; 5492 : 			if (iMaxVotes >= iAliveMinorCivs / 2)

	mov	eax, ebx
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ecx, eax
	jl	SHORT $LN6@GetCitySta

; 5493 : 			{
; 5494 : 				if (eCurrentDiploThreat == m_pPlayer->GetID())

	mov	edx, DWORD PTR [ebp]
	xor	eax, eax
	cmp	edi, DWORD PTR [edx+44]
	setne	al
	mov	DWORD PTR _iCurrentPlan$[esp+108], eax

; 5495 : 				{
; 5496 : 					iCurrentPlan = PLAN_DEFEND_CS_FOR_WIN;
; 5497 : 				}
; 5498 : 				else
; 5499 : 				{
; 5500 : 					iCurrentPlan = PLAN_ATTACK_CS_TO_PREVENT_DEFEAT;
; 5501 : 				}

	jmp	SHORT $LN50@GetCitySta
$LN6@GetCitySta:

; 5502 : 			}
; 5503 : 			else if (iMaxVotes >= iAliveMinorCivs / 4)

	mov	eax, ebx
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	ecx, eax
	jl	SHORT $LN50@GetCitySta

; 5504 : 			{
; 5505 : 				iCurrentPlan = PLAN_COLLECT_VOTES;

	mov	DWORD PTR _iCurrentPlan$[esp+108], 2
$LN50@GetCitySta:
	pop	esi
	pop	ebx
$LN48@GetCitySta:

; 5506 : 			}
; 5507 : 		}
; 5508 : 	}
; 5509 : 
; 5510 : 	if (peDiploThreat)

	mov	eax, DWORD PTR _peDiploThreat$[esp+96]
	test	eax, eax
	je	SHORT $LN46@GetCitySta

; 5511 : 	{
; 5512 : 		*peDiploThreat = eCurrentDiploThreat;

	mov	DWORD PTR [eax], edi
$LN46@GetCitySta:

; 5513 : 	}
; 5514 : 	return iCurrentPlan;

	mov	eax, DWORD PTR _iCurrentPlan$[esp+100]
	pop	edi
	pop	ebp

; 5515 : }

	add	esp, 92					; 0000005cH
	ret	4
?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z ENDP ; CvEspionageAI::GetCityStatePlan
_TEXT	ENDS
PUBLIC	?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z ; CvEspionageAI::EvaluateSpiesAssignedToTargetPlayer
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z$1
__ehfuncinfo$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
tv238 = -72						; size = 4
_strMsg$226428 = -68					; size = 28
$T239550 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_ePlayer$ = 8						; size = 4
?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z PROC ; CvEspionageAI::EvaluateSpiesAssignedToTargetPlayer, COMDAT
; _this$ = ecx

; 5519 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 60					; 0000003cH
	push	ebx
	push	ebp
	mov	ebx, ecx

; 5520 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ebx]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	edi, eax

; 5521 : 	for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	xor	ebp, ebp
	cmp	DWORD PTR [edi+4], ebp
	jbe	$LN4@EvaluateSp
	mov	DWORD PTR tv238[esp+84], ebp
	push	esi
$LL6@EvaluateSp:

; 5522 : 	{
; 5523 : 		CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	esi, DWORD PTR [edi]
	add	esi, DWORD PTR tv238[esp+88]

; 5524 : 		// don't process dead spies
; 5525 : 		if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	cmp	DWORD PTR [esi+16], 8
	je	$LN5@EvaluateSp

; 5526 : 		{
; 5527 : 			continue;
; 5528 : 		}
; 5529 : 
; 5530 : 		CvCity* pCity = pEspionage->GetCityWithSpy(ui);

	push	ebp
	mov	ecx, edi
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 5531 : 		if (pCity && pCity->getOwner() == ePlayer)

	test	eax, eax
	je	$LN5@EvaluateSp
	mov	ecx, DWORD PTR _ePlayer$[esp+84]
	cmp	DWORD PTR [eax+84], ecx
	jne	$LN5@EvaluateSp

; 5532 : 		{
; 5533 : 			pSpy->m_bEvaluateReassignment = true;
; 5534 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR [esi+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN5@EvaluateSp

; 5535 : 			{
; 5536 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$226428[esp+88]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5537 : 				strMsg.Format("Re-eval: assigned to promise player, %d,", ui);

	push	ebp
	lea	edx, DWORD PTR _strMsg$226428[esp+92]
	push	OFFSET $SG226429
	push	edx
	mov	DWORD PTR __$EHRec$[esp+108], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 5538 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx]
	add	esp, 12					; 0000000cH
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T239550[esp+92]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$226428[esp+92]
	mov	BYTE PTR __$EHRec$[esp+100], 1
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T239550[esp+88]
	mov	BYTE PTR __$EHRec$[esp+96], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5539 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$226428[esp+88]
	push	edx
	mov	ecx, edi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 5540 : 			}

	lea	ecx, DWORD PTR _strMsg$226428[esp+88]
	mov	DWORD PTR __$EHRec$[esp+96], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@EvaluateSp:
	add	DWORD PTR tv238[esp+88], 28		; 0000001cH
	inc	ebp
	cmp	ebp, DWORD PTR [edi+4]
	jb	$LL6@EvaluateSp
	pop	esi
$LN4@EvaluateSp:

; 5541 : 		}
; 5542 : 	}
; 5543 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+84]
	pop	edi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 72					; 00000048H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z$0:
	lea	ecx, DWORD PTR _strMsg$226428[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z$1:
	lea	ecx, DWORD PTR $T239550[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateSpiesAssignedToTargetPlayer@CvEspionageAI@@QAEXW4PlayerTypes@@@Z ENDP ; CvEspionageAI::EvaluateSpiesAssignedToTargetPlayer
PUBLIC	?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ	; CvEspionageAI::EvaluateUnassignedSpies
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ$1
__ehfuncinfo$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
tv233 = -72						; size = 4
_strMsg$226445 = -68					; size = 28
$T239593 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ PROC	; CvEspionageAI::EvaluateUnassignedSpies, COMDAT
; _this$ = ecx

; 5547 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 60					; 0000003cH
	push	ebx
	push	ebp
	mov	ebx, ecx

; 5548 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ebx]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	edi, eax

; 5549 : 	for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	xor	ebp, ebp
	cmp	DWORD PTR [edi+4], ebp
	jbe	$LN4@EvaluateUn
	mov	DWORD PTR tv233[esp+84], ebp
	push	esi
$LL6@EvaluateUn:

; 5550 : 	{
; 5551 : 		CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	esi, DWORD PTR [edi]
	add	esi, DWORD PTR tv233[esp+88]

; 5552 : 		// don't process dead spies
; 5553 : 		if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	cmp	DWORD PTR [esi+16], 8
	je	$LN5@EvaluateUn

; 5554 : 		{
; 5555 : 			continue;
; 5556 : 		}
; 5557 : 
; 5558 : 		CvCity* pCity = pEspionage->GetCityWithSpy(ui);

	push	ebp
	mov	ecx, edi
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 5559 : 		if (!pCity)

	test	eax, eax
	jne	$LN5@EvaluateUn

; 5560 : 		{
; 5561 : 			pSpy->m_bEvaluateReassignment = true;
; 5562 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR [esi+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN5@EvaluateUn

; 5563 : 			{
; 5564 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$226445[esp+88]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5565 : 				strMsg.Format("Re-eval: unassigned spy, %d,", ui);

	push	ebp
	lea	eax, DWORD PTR _strMsg$226445[esp+92]
	push	OFFSET $SG226446
	push	eax
	mov	DWORD PTR __$EHRec$[esp+108], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 5566 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR [ebx]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T239593[esp+92]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$226445[esp+92]
	mov	BYTE PTR __$EHRec$[esp+100], 1
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T239593[esp+88]
	mov	BYTE PTR __$EHRec$[esp+96], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5567 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	eax, DWORD PTR _strMsg$226445[esp+88]
	push	eax
	mov	ecx, edi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 5568 : 			}

	lea	ecx, DWORD PTR _strMsg$226445[esp+88]
	mov	DWORD PTR __$EHRec$[esp+96], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@EvaluateUn:
	add	DWORD PTR tv233[esp+88], 28		; 0000001cH
	inc	ebp
	cmp	ebp, DWORD PTR [edi+4]
	jb	$LL6@EvaluateUn
	pop	esi
$LN4@EvaluateUn:

; 5569 : 		}
; 5570 : 	}
; 5571 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+84]
	pop	edi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 72					; 00000048H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$226445[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T239593[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ ENDP	; CvEspionageAI::EvaluateUnassignedSpies
PUBLIC	?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ	; CvEspionageAI::EvaluateDefensiveSpies
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ$1
__ehfuncinfo$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
tv274 = -72						; size = 4
_strMsg$226462 = -68					; size = 28
$T239627 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ PROC	; CvEspionageAI::EvaluateDefensiveSpies, COMDAT
; _this$ = ecx

; 5575 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 60					; 0000003cH
	push	ebx
	push	ebp
	mov	ebx, ecx

; 5576 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ebx]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	edi, eax

; 5577 : 	for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	xor	ebp, ebp
	cmp	DWORD PTR [edi+4], ebp
	jbe	$LN4@EvaluateDe
	mov	DWORD PTR tv274[esp+84], ebp
	push	esi
$LL6@EvaluateDe:

; 5578 : 	{
; 5579 : 		CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	esi, DWORD PTR [edi]
	add	esi, DWORD PTR tv274[esp+88]

; 5580 : 		// don't process dead spies
; 5581 : 		if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	cmp	DWORD PTR [esi+16], 8
	je	$LN5@EvaluateDe

; 5582 : 		{
; 5583 : 			continue;
; 5584 : 		}
; 5585 : 
; 5586 : 		CvCity* pCity = pEspionage->GetCityWithSpy(ui);

	push	ebp
	mov	ecx, edi
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 5587 : 		if (pCity && pCity->getOwner() == m_pPlayer->GetID())

	test	eax, eax
	je	$LN5@EvaluateDe
	mov	eax, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR [ebx]
	cmp	eax, DWORD PTR [ecx+44]
	jne	$LN5@EvaluateDe

; 5588 : 		{
; 5589 : 			pSpy->m_bEvaluateReassignment = true;
; 5590 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR [esi+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN5@EvaluateDe

; 5591 : 			{
; 5592 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$226462[esp+88]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5593 : 				strMsg.Format("Re-eval: defensive spy, %d,", ui);

	push	ebp
	lea	edx, DWORD PTR _strMsg$226462[esp+92]
	push	OFFSET $SG226463
	push	edx
	mov	DWORD PTR __$EHRec$[esp+108], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 5594 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ebx]
	add	esp, 12					; 0000000cH
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T239627[esp+92]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$226462[esp+92]
	mov	BYTE PTR __$EHRec$[esp+100], 1
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T239627[esp+88]
	mov	BYTE PTR __$EHRec$[esp+96], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5595 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$226462[esp+88]
	push	edx
	mov	ecx, edi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 5596 : 			}

	lea	ecx, DWORD PTR _strMsg$226462[esp+88]
	mov	DWORD PTR __$EHRec$[esp+96], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN5@EvaluateDe:
	add	DWORD PTR tv274[esp+88], 28		; 0000001cH
	inc	ebp
	cmp	ebp, DWORD PTR [edi+4]
	jb	$LL6@EvaluateDe
	pop	esi
$LN4@EvaluateDe:

; 5597 : 
; 5598 : 		}
; 5599 : 	}
; 5600 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+84]
	pop	edi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 72					; 00000048H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$226462[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T239627[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ ENDP	; CvEspionageAI::EvaluateDefensiveSpies
PUBLIC	??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@3:

; 619  : 	};

	ret	0
??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@4
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@4:

; 619  : 	};

	ret	0
??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,22,0,297,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z PROC ; FStaticVector<int,22,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR _element$[esp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAEIABH@Z ENDP ; FStaticVector<int,22,0,297,0>::push_back
_TEXT	ENDS
PUBLIC	?begin@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@XZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::begin, COMDAT
; _this$ = ecx

; 667  : 		return (iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 668  : 		}

	ret	4
?begin@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@XZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@XZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::end, COMDAT
; _this$ = ecx

; 677  : 		return (iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 678  : 		}

	ret	4
?end@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@XZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@XZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::begin, COMDAT
; _this$ = ecx

; 667  : 		return (iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 668  : 		}

	ret	4
?begin@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@XZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@XZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::end, COMDAT
; _this$ = ecx

; 677  : 		return (iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 678  : 		}

	ret	4
?end@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@XZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::end
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_pRet$239802 = 8					; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [ebp+8], 0
	jne	SHORT $LN38@GrowSize@2
	mov	DWORD PTR [ebp+8], 1
$LN38@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp]
	cmp	edx, DWORD PTR [ebp+8]
	jb	SHORT $LN7@GrowSize@2
	npad	7
$LL8@GrowSize@2:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [ebp+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN33@GrowSize@2

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [ebp+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@2

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@2
$LN33@GrowSize@2:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [ebp+8], edx
$LN7@GrowSize@2:
	push	ebx
	push	esi

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	esi, DWORD PTR [ebp+8]
	cmp	esi, 8
	jbe	SHORT $LN15@GrowSize@2
	push	798					; 0000031eH
	lea	eax, DWORD PTR [esi*8]
	sub	eax, esi
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	add	eax, eax
	add	eax, eax
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$239802[esp+8], eax
	mov	DWORD PTR [ebp+8], esi
	jmp	SHORT $LN14@GrowSize@2
$LN15@GrowSize@2:
	lea	ecx, DWORD PTR [ebp+12]
	mov	DWORD PTR _pRet$239802[esp+8], ecx
	mov	DWORD PTR [ebp+8], 8
$LN14@GrowSize@2:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);
; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	xor	ebx, ebx
	cmp	DWORD PTR [ebp+4], ebx
	jbe	SHORT $LN1@GrowSize@2
	mov	eax, DWORD PTR _pRet$239802[esp+8]
	xor	edx, edx
	push	edi
$LL39@GrowSize@2:

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	test	eax, eax
	je	SHORT $LN2@GrowSize@2
	mov	esi, DWORD PTR [ebp]
	add	esi, edx
	mov	ecx, 7
	mov	edi, eax
	rep movsd
$LN2@GrowSize@2:
	inc	ebx
	add	edx, 28					; 0000001cH
	add	eax, 28					; 0000001cH
	cmp	ebx, DWORD PTR [ebp+4]
	jb	SHORT $LL39@GrowSize@2
	pop	edi
$LN1@GrowSize@2:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR [ebp+12]
	pop	esi
	pop	ebx
	cmp	eax, edx
	je	SHORT $LN37@GrowSize@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _pRet$239802[esp+4]
	add	esp, 4
	mov	DWORD PTR [ebp], eax

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [ebp+236], 1
	pop	ebp

; 772  : 	};

	ret	4
$LN37@GrowSize@2:

; 769  : 		m_pData = pTemp;

	mov	ecx, DWORD PTR _pRet$239802[esp]
	mov	DWORD PTR [ebp], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [ebp+236], 1
	pop	ebp

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	mov	ebx, 1
	jne	SHORT $LN30@GrowSize@3
	mov	DWORD PTR [esi+8], ebx
$LN30@GrowSize@3:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+8]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@3
	npad	4
$LL8@GrowSize@3:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN33@GrowSize@3

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@3

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@3
$LN33@GrowSize@3:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@3:
	push	edi

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	edi, DWORD PTR [esi+8]
	cmp	edi, ebx
	jbe	SHORT $LN15@GrowSize@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	ebp, eax
	mov	DWORD PTR [esi+8], edi
	jmp	SHORT $LN14@GrowSize@3
$LN15@GrowSize@3:
	lea	ebp, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], ebx
$LN14@GrowSize@3:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);
; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	xor	eax, eax
	pop	edi
	cmp	DWORD PTR [esi+4], eax
	jbe	SHORT $LN1@GrowSize@3
	mov	ecx, ebp
$LL3@GrowSize@3:

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	test	ecx, ecx
	je	SHORT $LN2@GrowSize@3
	mov	edx, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [ecx], edx
$LN2@GrowSize@3:
	add	eax, ebx
	add	ecx, 4
	cmp	eax, DWORD PTR [esi+4]
	jb	SHORT $LL3@GrowSize@3
$LN1@GrowSize@3:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [esi+12]
	cmp	eax, ecx
	je	SHORT $LN37@GrowSize@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN37@GrowSize@3:

; 769  : 		m_pData = pTemp;
; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+16], bl
	mov	DWORD PTR [esi], ebp
	pop	esi
	pop	ebp
	pop	ebx

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	?begin@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@XZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::begin, COMDAT
; _this$ = ecx

; 667  : 		return (iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 668  : 		}

	ret	4
?begin@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@XZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@XZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::end, COMDAT
; _this$ = ecx

; 677  : 		return (iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 678  : 		}

	ret	4
?end@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@XZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::end
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Buy
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1104 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy
	pop	edi

; 1105 : 			return (false);

	xor	al, al
	pop	esi

; 1115 : 		}

	ret	4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	cmp	edi, 536870911				; 1fffffffH
	jbe	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen
$LN16@Buy:
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ; std::_Allocate<HeistLocation>
	mov	DWORD PTR [esi+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	DWORD PTR [esi+8], eax
	add	esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

	lea	eax, DWORD PTR [eax+edi*8]
	mov	DWORD PTR [esi+12], eax
	pop	edi

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
	pop	esi

; 1115 : 		}

	ret	4
$LN15@Buy:
?_Buy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Buy
_TEXT	ENDS
PUBLIC	?begin@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@XZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::begin, COMDAT
; _this$ = ecx

; 667  : 		return (iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 668  : 		}

	ret	4
?begin@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@XZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@XZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::end, COMDAT
; _this$ = ecx

; 677  : 		return (iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 678  : 		}

	ret	4
?end@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@XZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::end
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Buy
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1104 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy@2
	pop	edi

; 1105 : 			return (false);

	xor	al, al
	pop	esi

; 1115 : 		}

	ret	4
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	cmp	edi, 214748364				; 0cccccccH
	jbe	SHORT $LN2@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen
$LN16@Buy@2:
$LN2@Buy@2:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ; std::_Allocate<SpyNotificationMessage>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

	lea	ecx, DWORD PTR [edi+edi*4]
	add	esp, 8
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	pop	edi
	mov	DWORD PTR [esi+12], edx

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
	pop	esi

; 1115 : 		}

	ret	4
$LN15@Buy@2:
?_Buy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Buy
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1104 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy@3
	pop	edi

; 1105 : 			return (false);

	xor	al, al
	pop	esi

; 1115 : 		}

	ret	4
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	cmp	edi, 63161283				; 03c3c3c3H
	jbe	SHORT $LN2@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen
$LN16@Buy@3:
$LN2@Buy@3:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ; std::_Allocate<IntrigueNotificationMessage>

; 1111 : 			_Mylast = _Myfirst;
; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	ecx, edi
	shl	ecx, 4
	add	ecx, edi
	add	esp, 8
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	pop	edi
	mov	DWORD PTR [esi+12], edx

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
	pop	esi

; 1115 : 		}

	ret	4
$LN15@Buy@3:
?_Buy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Buy
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@XZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::begin, COMDAT
; _this$ = ecx

; 667  : 		return (iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 668  : 		}

	ret	4
?begin@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@XZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@XZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::end, COMDAT
; _this$ = ecx

; 677  : 		return (iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 678  : 		}

	ret	4
?end@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@XZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::end
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Buy
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1104 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy@4
	pop	edi

; 1105 : 			return (false);

	xor	al, al
	pop	esi

; 1115 : 		}

	ret	4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	cmp	edi, 1073741823				; 3fffffffH
	jbe	SHORT $LN2@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen
$LN16@Buy@4:
$LN2@Buy@4:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ; std::_Allocate<CvCity *>
	mov	DWORD PTR [esi+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	DWORD PTR [esi+8], eax
	add	esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [esi+12], eax
	pop	edi

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
	pop	esi

; 1115 : 		}

	ret	4
$LN15@Buy@4:
?_Buy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Buy
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1104 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy@5
	pop	edi

; 1105 : 			return (false);

	xor	al, al
	pop	esi

; 1115 : 		}

	ret	4
$LN4@Buy@5:

; 1106 : 		else if (max_size() < _Capacity)

	cmp	edi, 536870911				; 1fffffffH
	jbe	SHORT $LN2@Buy@5

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen
$LN16@Buy@5:
$LN2@Buy@5:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ; std::_Allocate<ScoreCityEntry>
	mov	DWORD PTR [esi+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	DWORD PTR [esi+8], eax
	add	esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

	lea	eax, DWORD PTR [eax+edi*8]
	mov	DWORD PTR [esi+12], eax
	pop	edi

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
	pop	esi

; 1115 : 		}

	ret	4
$LN15@Buy@5:
?_Buy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Buy
_TEXT	ENDS
PUBLIC	??_G?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEPAXI@Z ; FStaticVector<enum TechTypes,1,0,297,0>::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEPAXI@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [esi+12]
	cmp	eax, ecx
	je	SHORT $LN6@scalar@5
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN6@scalar@5:
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN20@scalar@5
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN20@scalar@5:
	mov	eax, esi
	pop	esi
	ret	4
??_G?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEPAXI@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Make_iter, COMDAT
; _this$ = ecx

; 687  : 		return (iterator(_Where._Myptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 688  : 		}

	ret	8
?_Make_iter@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Make_iter, COMDAT
; _this$ = ecx

; 687  : 		return (iterator(_Where._Myptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 688  : 		}

	ret	8
?_Make_iter@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Make_iter
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+, COMDAT
; _this$ = ecx

; 381  : 		_Myt _Tmp = *this;
; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	edx, eax
	shl	edx, 4
	add	edx, eax
	mov	eax, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 383  : 		}

	ret	8
??H?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::operator+
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Make_iter, COMDAT
; _this$ = ecx

; 687  : 		return (iterator(_Where._Myptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 688  : 		}

	ret	8
?_Make_iter@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Make_iter
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXPAPAVCvCity@@0@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXPAPAVCvCity@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXPAPAVCvCity@@0@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

	ret	8
?_Destroy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXPAPAVCvCity@@0@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Destroy
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+, COMDAT
; _this$ = ecx

; 381  : 		_Myt _Tmp = *this;
; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 383  : 		}

	ret	8
??H?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >::operator+
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+, COMDAT
; _this$ = ecx

; 381  : 		_Myt _Tmp = *this;
; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 383  : 		}

	ret	8
??H?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<HeistLocation,std::allocator<HeistLocation> >::operator+
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+, COMDAT
; _this$ = ecx

; 381  : 		_Myt _Tmp = *this;
; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR __Off$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 383  : 		}

	ret	8
??H?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::operator+
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::operator+, COMDAT
; _this$ = ecx

; 381  : 		_Myt _Tmp = *this;
; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 383  : 		}

	ret	8
??H?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<CvCity *,std::allocator<CvCity *> >::operator+
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HeistLocation *,HeistLocation *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Unchecked_move_backward@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<HeistLocation *,HeistLocation *>, COMDAT

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN11@Unchecked_
	push	esi
$LL12@Unchecked_:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL12@Unchecked_
	pop	esi
$LN11@Unchecked_:

; 3697 : 	}

	ret	0
??$_Unchecked_move_backward@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<HeistLocation *,HeistLocation *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z ; stdext::_Unchecked_move_backward<SpyNotificationMessage *,SpyNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z
_TEXT	SEGMENT
$T240289 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$240292 = 16					; size = 1
$T240271 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<SpyNotificationMessage *,SpyNotificationMessage *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$240292[esp]
	mov	edx, DWORD PTR $T240271[esp]
	mov	BYTE PTR $T240289[esp+4], 0
	mov	eax, DWORD PTR $T240289[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Copy_backward_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>

; 3697 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Unchecked_move_backward@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<SpyNotificationMessage *,SpyNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ; stdext::_Unchecked_move_backward<CvCity * *,CvCity * *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z PROC ; stdext::_Unchecked_move_backward<CvCity * *,CvCity * *>, COMDAT

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi
	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx
	test	eax, eax
	jle	SHORT $LN14@Unchecked_@2
	push	ecx
	push	edx
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN14@Unchecked_@2:
	mov	eax, esi
	pop	esi

; 3697 : 	}

	ret	0
??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ENDP ; stdext::_Unchecked_move_backward<CvCity * *,CvCity * *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUScoreCityEntry@@PAU1@@stdext@@YAPAUScoreCityEntry@@PAU1@00@Z ; stdext::_Unchecked_move_backward<ScoreCityEntry *,ScoreCityEntry *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAUScoreCityEntry@@PAU1@@stdext@@YAPAUScoreCityEntry@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUScoreCityEntry@@PAU1@@stdext@@YAPAUScoreCityEntry@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<ScoreCityEntry *,ScoreCityEntry *>, COMDAT

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN11@Unchecked_@3
	push	esi
$LL12@Unchecked_@3:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL12@Unchecked_@3
	pop	esi
$LN11@Unchecked_@3:

; 3697 : 	}

	ret	0
??$_Unchecked_move_backward@PAUScoreCityEntry@@PAU1@@stdext@@YAPAUScoreCityEntry@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<ScoreCityEntry *,ScoreCityEntry *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >, COMDAT

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;
; 401  : 
; 402  : 	_TRY_BEGIN
; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	mov	ecx, DWORD PTR __Count$[esp-4]
	test	ecx, ecx
	jbe	SHORT $LN4@Uninit_fil
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR __First$[esp-4]
	push	esi
$LL6@Uninit_fil:

; 404  : 		_Al.construct(_First, _Val);

	test	eax, eax
	je	SHORT $LN5@Uninit_fil
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi
$LN5@Uninit_fil:
	dec	ecx
	add	eax, 8
	test	ecx, ecx
	ja	SHORT $LL6@Uninit_fil
	pop	esi
$LN4@Uninit_fil:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)
; 407  : 		_Al.destroy(_Next);
; 408  : 	_RERAISE;
; 409  : 	_CATCH_END
; 410  : 	}

	ret	0
??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;
; 401  : 
; 402  : 	_TRY_BEGIN
; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	mov	ecx, DWORD PTR __Count$[esp-4]
	test	ecx, ecx
	jbe	SHORT $LN4@Uninit_fil@2
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR __First$[esp-4]
	push	esi
$LL6@Uninit_fil@2:

; 404  : 		_Al.construct(_First, _Val);

	test	eax, eax
	je	SHORT $LN5@Uninit_fil@2
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], esi
	mov	esi, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], esi
$LN5@Uninit_fil@2:
	dec	ecx
	add	eax, 20					; 00000014H
	test	ecx, ecx
	ja	SHORT $LL6@Uninit_fil@2
	pop	esi
$LN4@Uninit_fil@2:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)
; 407  : 		_Al.destroy(_Next);
; 408  : 	_RERAISE;
; 409  : 	_CATCH_END
; 410  : 	}

	ret	0
??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebx

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	cmp	esi, ebx
	je	SHORT $LN12@Copy_opt@8
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+8]
$LL3@Copy_opt@8:

; 2472 : 		*_Dest = *_First;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], edx
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [edi+12], eax
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+16], ecx
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+20], edx
	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [edi+24], eax
	mov	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+28], ecx
	mov	edx, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [esi+36]
	push	eax
	lea	ecx, DWORD PTR [edi+36]
	mov	DWORD PTR [edi+32], edx
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	cl, BYTE PTR [esi+64]
	mov	BYTE PTR [edi+64], cl
	add	esi, 68					; 00000044H
	add	edi, 68					; 00000044H
	cmp	esi, ebx
	jne	SHORT $LL3@Copy_opt@8

; 2473 : 	return (_Dest);

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 2474 : 	}

	ret	0
$LN12@Copy_opt@8:

; 2473 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[esp+4]
	pop	esi
	pop	ebx

; 2474 : 	}

	ret	0
??$_Copy_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;
; 401  : 
; 402  : 	_TRY_BEGIN
; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	mov	ecx, DWORD PTR __Count$[esp-4]
	test	ecx, ecx
	jbe	SHORT $LN4@Uninit_fil@3
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR __First$[esp-4]
	push	esi
$LL6@Uninit_fil@3:

; 404  : 		_Al.construct(_First, _Val);

	test	eax, eax
	je	SHORT $LN5@Uninit_fil@3
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi
$LN5@Uninit_fil@3:
	dec	ecx
	add	eax, 8
	test	ecx, ecx
	ja	SHORT $LL6@Uninit_fil@3
	pop	esi
$LN4@Uninit_fil@3:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)
; 407  : 		_Al.destroy(_Next);
; 408  : 	_RERAISE;
; 409  : 	_CATCH_END
; 410  : 	}

	ret	0
??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@0AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@0AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@0AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<HeistLocation> >, COMDAT

; 233  : 	for (; _First != _Last; ++_First)
; 234  : 		_Al.destroy(_First);
; 235  : 	}

	ret	0
??$_Destroy_range@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@0AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@0AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@0AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@0AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<SpyNotificationMessage> >, COMDAT

; 233  : 	for (; _First != _Last; ++_First)
; 234  : 		_Al.destroy(_First);
; 235  : 	}

	ret	0
??$_Destroy_range@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@0AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$_Fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z ; std::_Fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z PROC ; std::_Fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	mov	ebp, DWORD PTR __Last$[esp]
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	cmp	esi, ebp
	je	SHORT $LN1@Fill@6
	push	ebx
	push	edi
	mov	edi, DWORD PTR __Val$[esp+12]
	lea	ebx, DWORD PTR [edi+36]
$LL3@Fill@6:

; 3159 : 		*_First = _Val;

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], ecx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], edx
	mov	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
	mov	ecx, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], ecx
	mov	edx, DWORD PTR [edi+32]
	push	ebx
	lea	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+32], edx
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	al, BYTE PTR [edi+64]
	mov	BYTE PTR [esi+64], al
	add	esi, 68					; 00000044H
	cmp	esi, ebp
	jne	SHORT $LL3@Fill@6
	pop	edi
	pop	ebx
$LN1@Fill@6:
	pop	esi
	pop	ebp

; 3160 : 	}

	ret	0
??$_Fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z ENDP ; std::_Fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T240549 = -4						; size = 1
__Cat$240553 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2752 : 	{	// move defaults to copy if there is not a more effecient way

	push	ecx

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	edx, DWORD PTR __First_dest_cat$[esp]
	mov	BYTE PTR $T240549[esp+4], 0
	mov	eax, DWORD PTR $T240549[esp+4]
	mov	ecx, DWORD PTR __Cat$240553[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Copy_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>

; 2755 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Move_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@0AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@0AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@0AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<ScoreCityEntry> >, COMDAT

; 233  : 	for (; _First != _Last; ++_First)
; 234  : 		_Al.destroy(_First);
; 235  : 	}

	ret	0
??$_Destroy_range@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@0AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z ; std::allocator<IntrigueNotificationMessage>::construct
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z$0
__ehfuncinfo$?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z
_TEXT	SEGMENT
$T240576 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Vptr$240573 = 8					; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z PROC ; std::allocator<IntrigueNotificationMessage>::construct, COMDAT
; _this$ = ecx

; 154  : 		{	// construct object at _Ptr with value _Val

	push	-1
	push	__ehhandler$?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	ecx, DWORD PTR __Ptr$[esp+12]
	mov	DWORD PTR __Vptr$240573[esp+12], ecx
	mov	DWORD PTR $T240576[esp+16], ecx
	mov	DWORD PTR __$EHRec$[esp+24], 0
	test	ecx, ecx
	je	SHORT $LN5@construct@4
	mov	eax, DWORD PTR __Val$[esp+12]
	push	eax
	call	??0IntrigueNotificationMessage@@QAE@ABU0@@Z
$LN5@construct@4:

; 156  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z$0:
	mov	eax, DWORD PTR __Vptr$240573[ebp-4]
	push	eax
	mov	ecx, DWORD PTR $T240576[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z:
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@ABU3@@Z ENDP ; std::allocator<IntrigueNotificationMessage>::construct
PUBLIC	??$_Distance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0AAH@Z ; std::_Distance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Distance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0AAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0AAH@Z PROC ; std::_Distance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>, COMDAT

; 1893 : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

	mov	ecx, DWORD PTR __Last$[esp-4]
	sub	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Off$[esp-4]
	sar	ecx, 3
	add	DWORD PTR [eax], ecx

; 1894 : 	}

	ret	0
??$_Distance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0AAH@Z ENDP ; std::_Distance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z PROC ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>, COMDAT

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN7@unchecked_@6
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL9@unchecked_@6:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL9@unchecked_@6
	pop	esi
$LN7@unchecked_@6:

; 3722 : 	}

	ret	0
??$unchecked_fill_n@PAPAVCvCity@@IPAV1@@stdext@@YAXPAPAVCvCity@@IABQAV1@@Z ENDP ; stdext::unchecked_fill_n<CvCity * *,unsigned int,CvCity *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@U_Undefined_move_tag@3@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<CvCity * *,CvCity * *,std::allocator<CvCity *>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@U_Undefined_move_tag@3@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@U_Undefined_move_tag@3@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<CvCity * *,CvCity * *,std::allocator<CvCity *>,std::_Undefined_move_tag>, COMDAT

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN10@Uninit_mov
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN10@Uninit_mov:
	pop	edi
	mov	eax, esi
	pop	esi

; 208  : 	}

	ret	0
??$_Uninit_move@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@U_Undefined_move_tag@3@@std@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CvCity * *,CvCity * *,std::allocator<CvCity *>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Destroy@UIntrigueNotificationMessage@@@std@@YAXPAUIntrigueNotificationMessage@@@Z ; std::_Destroy<IntrigueNotificationMessage>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@UIntrigueNotificationMessage@@@std@@YAXPAUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UIntrigueNotificationMessage@@@std@@YAXPAUIntrigueNotificationMessage@@@Z PROC ; std::_Destroy<IntrigueNotificationMessage>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	add	ecx, 36					; 00000024H
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??$_Destroy@UIntrigueNotificationMessage@@@std@@YAXPAUIntrigueNotificationMessage@@@Z ENDP ; std::_Destroy<IntrigueNotificationMessage>
_TEXT	ENDS
PUBLIC	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ
_TEXT	SEGMENT
__Pair$230233 = -8					; size = 8
?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ PROC ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen, COMDAT
; _this$ = ecx

; 607  : 		{	// return size of buffer

	sub	esp, 8
	push	esi
	mov	esi, ecx

; 608  : 		if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)

	mov	eax, DWORD PTR [esi+16]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@Maxlen
	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	jle	SHORT $LN5@Maxlen

; 609  : 			{	// allocate buffer on first size query
; 610  : 			pair<_Pty, _PDFT> _Pair =
; 611  : 				std::get_temporary_buffer<_Ty>(_Pbuf->_Size);

	push	eax
	lea	eax, DWORD PTR __Pair$230233[esp+16]
	push	eax
	call	??$get_temporary_buffer@UScoreCityEntry@@@std@@YA?AU?$pair@PAUScoreCityEntry@@H@0@H@Z ; std::get_temporary_buffer<ScoreCityEntry>

; 612  : 
; 613  : 			_Pbuf->_Begin = _Pair.first;

	mov	ecx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR __Pair$230233[esp+20]
	mov	DWORD PTR [ecx], eax

; 614  : 			_Pbuf->_Current = _Pair.first;

	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [edx+4], eax

; 615  : 			_Pbuf->_Hiwater = _Pair.first;

	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [ecx+8], eax

; 616  : 			_Pbuf->_Size = _Pair.second;

	mov	edx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR __Pair$230233[esp+24]
	mov	DWORD PTR [edx+12], eax

; 617  : 			}
; 618  : 		return (_Pbuf->_Size);

	mov	ecx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [ecx+12]
	add	esp, 8
	pop	esi

; 619  : 		}

	add	esp, 8
	ret	0
$LN4@Maxlen:

; 617  : 			}
; 618  : 		return (_Pbuf->_Size);

	mov	edx, eax
	mov	eax, DWORD PTR [edx+12]
	pop	esi

; 619  : 		}

	add	esp, 8
	ret	0
$LN5@Maxlen:

; 617  : 			}
; 618  : 		return (_Pbuf->_Size);

	mov	eax, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [eax+12]
	pop	esi

; 619  : 		}

	add	esp, 8
	ret	0
?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ENDP ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
_TEXT	ENDS
PUBLIC	??$advance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@H@Z ; std::advance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$advance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@H@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@H@Z PROC ; std::advance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>, COMDAT

; 1774 : 	_Advance(_Where, _Off, _Iter_cat(_Where));

	mov	eax, DWORD PTR __Off$[esp-4]
	lea	ecx, DWORD PTR [eax*8]
	mov	eax, DWORD PTR __Where$[esp-4]
	add	DWORD PTR [eax], ecx

; 1775 : 	}

	ret	0
??$advance@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@H@std@@YAXAAV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@H@Z ENDP ; std::advance<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z ; stdext::unchecked_uninitialized_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z
_TEXT	SEGMENT
$T240734 = -4						; size = 1
__Cat$240738 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T240734[esp+4], 0
	mov	eax, DWORD PTR $T240734[esp+4]
	mov	ecx, DWORD PTR __Cat$240738[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >

; 823  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z
_TEXT	SEGMENT
$T240743 = -4						; size = 1
__Cat$240748 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T240743[esp+4], 0
	mov	eax, DWORD PTR $T240743[esp+4]
	mov	ecx, DWORD PTR __Cat$240748[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >

; 823  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z ; stdext::unchecked_uninitialized_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z
_TEXT	SEGMENT
$T240752 = -4						; size = 1
__Cat$240757 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T240752[esp+4], 0
	mov	eax, DWORD PTR $T240752[esp+4]
	mov	ecx, DWORD PTR __Cat$240757[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >

; 823  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z
_TEXT	SEGMENT
$T240761 = -4						; size = 1
$T240768 = -4						; size = 4
$T240764 = -4						; size = 4
__Cat$240773 = 8					; size = 1
$T240763 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 20
??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z PROC ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ecx
	push	ebx
	xor	ebx, ebx
	mov	DWORD PTR $T240768[esp+8], ebx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$240773[esp+4]
	mov	edx, DWORD PTR $T240763[esp+4]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	BYTE PTR $T240761[esp+12], bl
	mov	eax, DWORD PTR $T240761[esp+12]
	push	eax
	push	ecx
	push	edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	ecx, DWORD PTR __Dest$[esp+56]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last$[esp+40]
	mov	eax, DWORD PTR __First$[esp+40]
	mov	DWORD PTR $T240764[esp+44], esp
	push	edx
	push	eax
	push	esi
	call	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V10@Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,std::forward_iterator_tag>
	mov	eax, DWORD PTR __Dest$[esp+52]
	add	esp, 44					; 0000002cH
	cmp	eax, ebx
	je	SHORT $LN27@unchecked_@7
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN27@unchecked_@7:
	mov	eax, esi

; 3607 : 	}

	pop	esi
	pop	ebx
	pop	ecx
	ret	0
??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ENDP ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@00@Z ; stdext::unchecked_copy_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_copy_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@00@Z
_TEXT	SEGMENT
$T240812 = -4						; size = 1
__Cat$240818 = 8					; size = 1
$T240814 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
??$unchecked_copy_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@00@Z PROC ; stdext::unchecked_copy_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 3636 : 	{	// copy [_First, _Last) backwards to [..., _Dest)

	push	ecx

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$240818[esp]
	mov	edx, DWORD PTR $T240814[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T240812[esp+8], 0
	mov	eax, DWORD PTR $T240812[esp+8]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First$[esp+16]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH
	mov	eax, esi
	pop	esi

; 3639 : 	}

	pop	ecx
	ret	0
??$unchecked_copy_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@00@Z ENDP ; stdext::unchecked_copy_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z PROC ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>, COMDAT

; 2289 : 	_DEBUG_POINTER(_Pred);
; 2290 : 	_DEBUG_ORDER_SINGLE_PRED(_First, _Last, _Pred, true);
; 2291 : 	_Diff _Count = 0;
; 2292 : 	_Distance(_First, _Last, _Count);

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	esi
	mov	esi, DWORD PTR __First$[esp]
	sub	ecx, esi
	sar	ecx, 3

; 2293 : 	for (; 0 < _Count; )

	test	ecx, ecx
	jle	SHORT $LN38@Lower_boun
	mov	eax, DWORD PTR __Val$[esp]
	push	edi
	mov	edi, DWORD PTR [eax+4]
	npad	6
$LL4@Lower_boun:

; 2294 : 		{	// divide and conquer, find half that contains answer
; 2295 : 		_Diff _Count2 = _Count / 2;

	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1

; 2296 : 		_FwdIt _Mid = _First;
; 2297 : 		std::advance(_Mid, _Count2);
; 2298 : 		_DEBUG_ORDER_SINGLE_PRED(_Mid, _Last, _Pred, false);
; 2299 : 
; 2300 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))

	cmp	DWORD PTR [esi+eax*8+4], edi
	jle	SHORT $LN2@Lower_boun

; 2301 : 			_First = ++_Mid, _Count -= _Count2 + 1;

	or	edx, -1
	lea	esi, DWORD PTR [esi+eax*8+8]
	sub	edx, eax
	mov	DWORD PTR __First$[esp+4], esi
	add	ecx, edx

; 2302 : 		else

	jmp	SHORT $LN1@Lower_boun
$LN2@Lower_boun:

; 2303 : 			_Count = _Count2;

	mov	ecx, eax
$LN1@Lower_boun:

; 2293 : 	for (; 0 < _Count; )

	test	ecx, ecx
	jg	SHORT $LL4@Lower_boun
	pop	edi
$LN38@Lower_boun:

; 2304 : 		}
; 2305 : 	return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [eax], esi
	pop	esi

; 2306 : 	}

	ret	0
??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ENDP ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z PROC ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>, COMDAT

; 2360 : 	_DEBUG_POINTER(_Pred);
; 2361 : 	_DEBUG_ORDER_SINGLE_PRED(_First, _Last, _Pred, true);
; 2362 : 	_Diff _Count = 0;
; 2363 : 	_Distance(_First, _Last, _Count);

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	esi
	mov	esi, DWORD PTR __First$[esp]
	sub	ecx, esi
	sar	ecx, 3

; 2364 : 	for (; 0 < _Count; )

	test	ecx, ecx
	jle	SHORT $LN38@Upper_boun
	mov	eax, DWORD PTR __Val$[esp]
	push	edi
	mov	edi, DWORD PTR [eax+4]
	npad	6
$LL4@Upper_boun:

; 2365 : 		{	// divide and conquer, find half that contains answer
; 2366 : 		_Diff _Count2 = _Count / 2;

	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1

; 2367 : 		_FwdIt _Mid = _First;
; 2368 : 		std::advance(_Mid, _Count2);
; 2369 : 		_DEBUG_ORDER_SINGLE_PRED(_Mid, _Last, _Pred, false);
; 2370 : 
; 2371 : 		if (!_DEBUG_LT_PRED(_Pred, _Val, *_Mid))

	cmp	edi, DWORD PTR [esi+eax*8+4]
	jg	SHORT $LN2@Upper_boun

; 2372 : 			_First = ++_Mid, _Count -= _Count2 + 1;

	or	edx, -1
	lea	esi, DWORD PTR [esi+eax*8+8]
	sub	edx, eax
	mov	DWORD PTR __First$[esp+4], esi
	add	ecx, edx

; 2373 : 		else

	jmp	SHORT $LN1@Upper_boun
$LN2@Upper_boun:

; 2374 : 			_Count = _Count2;

	mov	ecx, eax
$LN1@Upper_boun:

; 2364 : 	for (; 0 < _Count; )

	test	ecx, ecx
	jg	SHORT $LL4@Upper_boun
	pop	edi
$LN38@Upper_boun:

; 2375 : 		}
; 2376 : 	return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [eax], esi
	pop	esi

; 2377 : 	}

	ret	0
??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ENDP ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@00@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@00@Z
_TEXT	SEGMENT
$T241012 = -4						; size = 1
__Cat$241017 = 8					; size = 1
$T241014 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@00@Z PROC ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$241017[esp]
	mov	edx, DWORD PTR $T241014[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T241012[esp+8], 0
	mov	eax, DWORD PTR $T241012[esp+8]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First$[esp+16]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH
	mov	eax, esi
	pop	esi

; 3607 : 	}

	pop	ecx
	ret	0
??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@00@Z ENDP ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@@Z ; stdext::unchecked_copy_backward<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_copy_backward@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@@Z
_TEXT	SEGMENT
$T241026 = -4						; size = 1
__Cat$241031 = 8					; size = 1
$T241028 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
??$unchecked_copy_backward@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@@Z PROC ; stdext::unchecked_copy_backward<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 3636 : 	{	// copy [_First, _Last) backwards to [..., _Dest)

	push	ecx

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$241031[esp]
	mov	edx, DWORD PTR $T241028[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T241026[esp+8], 0
	mov	eax, DWORD PTR $T241026[esp+8]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First$[esp+16]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	??$_Copy_backward_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH
	mov	eax, esi
	pop	esi

; 3639 : 	}

	pop	ecx
	ret	0
??$unchecked_copy_backward@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@@Z ENDP ; stdext::unchecked_copy_backward<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@@Z ; stdext::unchecked_copy<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_copy@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@@Z
_TEXT	SEGMENT
$T241040 = -4						; size = 1
__Cat$241045 = 8					; size = 1
$T241042 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Dest$ = 20						; size = 4
??$unchecked_copy@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@@Z PROC ; stdext::unchecked_copy<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$241045[esp]
	mov	edx, DWORD PTR $T241042[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T241040[esp+8], 0
	mov	eax, DWORD PTR $T241040[esp+8]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First$[esp+16]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	??$_Copy_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH
	mov	eax, esi
	pop	esi

; 3607 : 	}

	pop	ecx
	ret	0
??$unchecked_copy@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@@Z ENDP ; stdext::unchecked_copy<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T241199 = 12						; size = 1
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Cat$241203 = 28					; size = 1
$T241201 = 28						; size = 1
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>, COMDAT

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	mov	eax, DWORD PTR __First1$[esp-4]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Last1$[esp+4]
	cmp	eax, esi
	je	SHORT $LN44@Merge
$LL10@Merge:
	mov	edx, DWORD PTR __First2$[esp+4]
	cmp	edx, DWORD PTR __Last2$[esp+4]
	je	SHORT $LN68@Merge

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	ebx, DWORD PTR [edx+4]
	cmp	ebx, DWORD PTR [eax+4]
	jge	SHORT $LN2@Merge

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Dest$[esp+4]
	mov	DWORD PTR [edx+4], ecx
	add	DWORD PTR __First2$[esp+4], 8

; 2600 : 		else

	jmp	SHORT $LN4@Merge
$LN2@Merge:

; 2601 : 			*_Dest = *_First1, ++_First1;

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Dest$[esp+4]
	mov	DWORD PTR [edx+4], ecx
	add	eax, 8
$LN4@Merge:
	mov	ecx, DWORD PTR __Dest$[esp+4]
	add	ecx, 8
	mov	DWORD PTR __Dest$[esp+4], ecx
	cmp	eax, esi
	jne	SHORT $LL10@Merge
$LN68@Merge:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	cmp	eax, esi
	je	SHORT $LN44@Merge
	npad	3
$LL46@Merge:
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	add	eax, 8
	add	ecx, 8
	cmp	eax, esi
	jne	SHORT $LL46@Merge
$LN44@Merge:

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	DWORD PTR __Dest$[esp+4], ecx
	mov	edx, DWORD PTR __Cat$241203[esp+4]
	mov	BYTE PTR $T241199[esp+4], 0
	mov	eax, DWORD PTR $T241199[esp+4]
	push	eax
	mov	eax, DWORD PTR $T241201[esp+8]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+12]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR __Last2$[esp+20]
	push	ecx
	push	edx
	push	esi
	call	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH
	mov	eax, esi
	pop	esi
	pop	ebx

; 2605 : 	}

	ret	0
??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T241263 = -4						; size = 1
$T241239 = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Cat$241267 = 16					; size = 1
$T241265 = 16						; size = 1
__Cat$241243 = 16					; size = 1
$T241241 = 16						; size = 1
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>, COMDAT

; 2839 : 	{	// merge backwards to _Dest, using _Pred

	push	ecx

; 2840 : 	for (; ; )
; 2841 : 		if (_First1 == _Last1)

	mov	edx, DWORD PTR __First1$[esp]
	mov	ecx, DWORD PTR __Last1$[esp]
	mov	eax, DWORD PTR __Last2$[esp]
	push	esi
	mov	esi, DWORD PTR __First2$[esp+4]
	push	edi
	cmp	edx, ecx
	je	SHORT $LN61@Merge_back
$LL8@Merge_back:

; 2843 : 		else if (_First2 == _Last2)

	cmp	esi, eax
	je	$LN62@Merge_back

; 2845 : 		else if (_DEBUG_LT_PRED(_Pred, *--_Last2, *--_Last1))

	mov	edx, DWORD PTR [eax-4]
	sub	eax, 8
	sub	ecx, 8
	mov	DWORD PTR __Last1$[esp+8], ecx
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN2@Merge_back

; 2846 : 			*--_Dest = *_Last1, ++_Last2;

	mov	edx, DWORD PTR __Dest$[esp+8]
	sub	edx, 8
	mov	DWORD PTR __Dest$[esp+8], edx
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [edx], edi
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __Dest$[esp+8]
	mov	DWORD PTR [edx+4], ecx

; 2847 : 		else

	mov	ecx, DWORD PTR __Last1$[esp+8]
	add	eax, 8
	jmp	SHORT $LN57@Merge_back
$LN2@Merge_back:

; 2848 : 			*--_Dest = *_Last2, ++_Last1;

	mov	ecx, DWORD PTR __Dest$[esp+8]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 8
	mov	DWORD PTR __Dest$[esp+8], ecx
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Dest$[esp+8]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR __Last1$[esp+8]
	add	ecx, 8
	mov	DWORD PTR __Last1$[esp+8], ecx
$LN57@Merge_back:
	mov	edx, DWORD PTR __First1$[esp+8]
	cmp	edx, ecx
	jne	SHORT $LL8@Merge_back
$LN61@Merge_back:

; 2842 : 			return (_STDEXT unchecked_copy_backward(_First2, _Last2, _Dest));

	mov	edx, DWORD PTR __Cat$241243[esp+8]
	mov	BYTE PTR $T241239[esp+12], 0
	mov	ecx, DWORD PTR $T241239[esp+12]
	push	ecx
	mov	ecx, DWORD PTR $T241241[esp+12]
	push	edx
	mov	edx, DWORD PTR __Dest$[esp+16]
	push	ecx
	push	edx
	push	eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+32]
	push	esi
	call	??$_Copy_backward_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>

; 2844 : 			return (_STDEXT unchecked_copy_backward(_First1, _Last1, _Dest));

	add	esp, 28					; 0000001cH
	pop	edi
	mov	eax, esi
	pop	esi

; 2849 : 	}

	pop	ecx
	ret	0
$LN62@Merge_back:

; 2844 : 			return (_STDEXT unchecked_copy_backward(_First1, _Last1, _Dest));

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	BYTE PTR $T241263[esp+12], 0
	mov	eax, DWORD PTR $T241263[esp+12]
	push	eax
	mov	eax, DWORD PTR __Cat$241267[esp+12]
	push	eax
	mov	eax, DWORD PTR $T241265[esp+16]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+20]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH
	pop	edi
	mov	eax, esi
	pop	esi

; 2849 : 	}

	pop	ecx
	ret	0
??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z PROC ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>, COMDAT

; 2289 : 	_DEBUG_POINTER(_Pred);
; 2290 : 	_DEBUG_ORDER_SINGLE_PRED(_First, _Last, _Pred, true);
; 2291 : 	_Diff _Count = 0;
; 2292 : 	_Distance(_First, _Last, _Count);

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	esi
	mov	esi, DWORD PTR __First$[esp]
	sub	ecx, esi
	sar	ecx, 3

; 2293 : 	for (; 0 < _Count; )

	test	ecx, ecx
	jle	SHORT $LN38@Lower_boun@2
	mov	eax, DWORD PTR __Val$[esp]
	push	edi
	mov	edi, DWORD PTR [eax+4]
	npad	6
$LL4@Lower_boun@2:

; 2294 : 		{	// divide and conquer, find half that contains answer
; 2295 : 		_Diff _Count2 = _Count / 2;

	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1

; 2296 : 		_FwdIt _Mid = _First;
; 2297 : 		std::advance(_Mid, _Count2);
; 2298 : 		_DEBUG_ORDER_SINGLE_PRED(_Mid, _Last, _Pred, false);
; 2299 : 
; 2300 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))

	cmp	DWORD PTR [esi+eax*8+4], edi
	jge	SHORT $LN2@Lower_boun@2

; 2301 : 			_First = ++_Mid, _Count -= _Count2 + 1;

	or	edx, -1
	lea	esi, DWORD PTR [esi+eax*8+8]
	sub	edx, eax
	mov	DWORD PTR __First$[esp+4], esi
	add	ecx, edx

; 2302 : 		else

	jmp	SHORT $LN1@Lower_boun@2
$LN2@Lower_boun@2:

; 2303 : 			_Count = _Count2;

	mov	ecx, eax
$LN1@Lower_boun@2:

; 2293 : 	for (; 0 < _Count; )

	test	ecx, ecx
	jg	SHORT $LL4@Lower_boun@2
	pop	edi
$LN38@Lower_boun@2:

; 2304 : 		}
; 2305 : 	return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [eax], esi
	pop	esi

; 2306 : 	}

	ret	0
??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ENDP ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
___formal$ = 28						; size = 4
??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z PROC ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>, COMDAT

; 2360 : 	_DEBUG_POINTER(_Pred);
; 2361 : 	_DEBUG_ORDER_SINGLE_PRED(_First, _Last, _Pred, true);
; 2362 : 	_Diff _Count = 0;
; 2363 : 	_Distance(_First, _Last, _Count);

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	esi
	mov	esi, DWORD PTR __First$[esp]
	sub	ecx, esi
	sar	ecx, 3

; 2364 : 	for (; 0 < _Count; )

	test	ecx, ecx
	jle	SHORT $LN38@Upper_boun@2
	mov	eax, DWORD PTR __Val$[esp]
	push	edi
	mov	edi, DWORD PTR [eax+4]
	npad	6
$LL4@Upper_boun@2:

; 2365 : 		{	// divide and conquer, find half that contains answer
; 2366 : 		_Diff _Count2 = _Count / 2;

	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1

; 2367 : 		_FwdIt _Mid = _First;
; 2368 : 		std::advance(_Mid, _Count2);
; 2369 : 		_DEBUG_ORDER_SINGLE_PRED(_Mid, _Last, _Pred, false);
; 2370 : 
; 2371 : 		if (!_DEBUG_LT_PRED(_Pred, _Val, *_Mid))

	cmp	edi, DWORD PTR [esi+eax*8+4]
	jl	SHORT $LN2@Upper_boun@2

; 2372 : 			_First = ++_Mid, _Count -= _Count2 + 1;

	or	edx, -1
	lea	esi, DWORD PTR [esi+eax*8+8]
	sub	edx, eax
	mov	DWORD PTR __First$[esp+4], esi
	add	ecx, edx

; 2373 : 		else

	jmp	SHORT $LN1@Upper_boun@2
$LN2@Upper_boun@2:

; 2374 : 			_Count = _Count2;

	mov	ecx, eax
$LN1@Upper_boun@2:

; 2364 : 	for (; 0 < _Count; )

	test	ecx, ecx
	jg	SHORT $LL4@Upper_boun@2
	pop	edi
$LN38@Upper_boun@2:

; 2375 : 		}
; 2376 : 	return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	mov	DWORD PTR [eax], esi
	pop	esi

; 2377 : 	}

	ret	0
??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ENDP ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T241547 = -24						; size = 4
$T241541 = -24						; size = 4
$T241539 = -24						; size = 4
$T241540 = -20						; size = 20
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
__Pred$ = 48						; size = 1
___formal$ = 52						; size = 1
___formal$ = 56						; size = 1
??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval,std::forward_iterator_tag>, COMDAT

; 2593 : 	{	//  copy merging ranges, both using _Pred

	sub	esp, 24					; 00000018H

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	mov	eax, DWORD PTR __First1$[esp+20]
	push	esi
	push	edi
	xor	edi, edi
	mov	DWORD PTR $T241547[esp+32], edi
	cmp	eax, DWORD PTR __Last1$[esp+28]
	je	$LN3@Merge@2
	mov	ecx, DWORD PTR __First2$[esp+28]
	lea	esi, DWORD PTR [edi+8]
$LL4@Merge@2:
	cmp	ecx, DWORD PTR __Last2$[esp+28]
	je	$LN3@Merge@2

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+4]

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	edx, DWORD PTR __Dest$[esp+44]
	jle	SHORT $LN2@Merge@2
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN41@Merge@2
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR __Dest$[esp+44]
	add	DWORD PTR [eax+4], esi
	mov	ecx, DWORD PTR __First2$[esp+28]

; 2600 : 		else

	mov	eax, DWORD PTR __First1$[esp+28]
	add	ecx, esi
	mov	DWORD PTR __First2$[esp+28], ecx
	jmp	SHORT $LN72@Merge@2

; 2599 : 			*_Dest = *_First2, ++_First2;

$LN41@Merge@2:
	cmp	eax, edi
	je	SHORT $LN46@Merge@2
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR __Dest$[esp+44]
$LN46@Merge@2:
	add	DWORD PTR [edx+4], esi
	mov	eax, DWORD PTR __Dest$[esp+44]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR __First2$[esp+28]

; 2600 : 		else

	mov	eax, DWORD PTR __First1$[esp+28]
	add	ecx, esi
	mov	DWORD PTR __First2$[esp+28], ecx
	jmp	SHORT $LN72@Merge@2
$LN2@Merge@2:

; 2601 : 			*_Dest = *_First1, ++_First1;

	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN61@Merge@2
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR __Dest$[esp+44]
	add	DWORD PTR [eax+4], esi
	jmp	SHORT $LN60@Merge@2
$LN61@Merge@2:
	cmp	eax, edi
	je	SHORT $LN66@Merge@2
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR __Dest$[esp+44]
$LN66@Merge@2:
	add	DWORD PTR [edx+4], esi
	mov	eax, DWORD PTR __Dest$[esp+44]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+8], edx
$LN60@Merge@2:
	mov	eax, DWORD PTR __First1$[esp+28]
	mov	ecx, DWORD PTR __First2$[esp+28]
	add	eax, esi
	mov	DWORD PTR __First1$[esp+28], eax
$LN72@Merge@2:

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	cmp	eax, DWORD PTR __Last1$[esp+28]
	jne	$LL4@Merge@2
$LN3@Merge@2:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], edi
	mov	ecx, DWORD PTR __Dest$[esp+64]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last1$[esp+48]
	mov	eax, DWORD PTR __First1$[esp+48]
	mov	DWORD PTR $T241539[esp+52], esp
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T241540[esp+60]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR $T241540[esp+64]
	add	esp, 32					; 00000020H
	mov	DWORD PTR __Dest$[esp+44], edx
	cmp	eax, edi
	je	SHORT $LN88@Merge@2
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN88@Merge@2:

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+28]
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], edi
	mov	ecx, DWORD PTR __Dest$[esp+64]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last2$[esp+48]
	mov	eax, DWORD PTR __First2$[esp+48]
	mov	DWORD PTR $T241541[esp+52], esp
	push	edx
	push	eax
	push	esi
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	eax, DWORD PTR __Dest$[esp+60]
	add	esp, 32					; 00000020H
	cmp	eax, edi
	je	SHORT $LN109@Merge@2
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN109@Merge@2:

; 2605 : 	}

	pop	edi
	mov	eax, esi
	pop	esi
	add	esp, 24					; 00000018H
	ret	0
??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>, COMDAT

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	mov	ecx, DWORD PTR __First1$[esp-4]
	mov	edx, DWORD PTR __Dest$[esp-4]
	mov	eax, DWORD PTR __First2$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Last1$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Last2$[esp+8]
	cmp	ecx, esi
	je	SHORT $LN28@Merge@3
	npad	5
$LL10@Merge@3:
	cmp	eax, edi
	je	SHORT $LN3@Merge@3

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	ebx, DWORD PTR [eax+4]
	cmp	ebx, DWORD PTR [ecx+4]
	jle	SHORT $LN2@Merge@3

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	edx, DWORD PTR [eax+4]
	add	eax, 8

; 2600 : 		else

	jmp	SHORT $LN68@Merge@3
$LN2@Merge@3:

; 2601 : 			*_Dest = *_First1, ++_First1;

	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], ebx
	mov	edx, DWORD PTR [ecx+4]
	add	ecx, 8
$LN68@Merge@3:
	mov	ebx, DWORD PTR __Dest$[esp+8]
	mov	DWORD PTR [ebx+4], edx
	mov	edx, DWORD PTR __Dest$[esp+8]
	add	edx, 8
	mov	DWORD PTR __Dest$[esp+8], edx
	cmp	ecx, esi
	jne	SHORT $LL10@Merge@3
$LN3@Merge@3:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	cmp	ecx, esi
	je	SHORT $LN28@Merge@3
	npad	4
$LL30@Merge@3:
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], ebx
	add	ecx, 8
	add	edx, 8
	cmp	ecx, esi
	jne	SHORT $LL30@Merge@3
$LN28@Merge@3:

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	cmp	eax, edi
	je	SHORT $LN66@Merge@3
$LL49@Merge@3:
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	add	eax, 8
	add	edx, 8
	cmp	eax, edi
	jne	SHORT $LL49@Merge@3
$LN66@Merge@3:
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], edx
	pop	ebx

; 2605 : 	}

	ret	0
??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z
_TEXT	SEGMENT
$T241941 = -24						; size = 4
__Shift$ = -20						; size = 4
$T241945 = -16						; size = 4
$T241946 = -12						; size = 4
__Holeval$231932 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z PROC ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>, COMDAT

; 1679 : 	{	// rotate [_First, _Last), random-access iterators

	sub	esp, 24					; 00000018H

; 1680 : 	_DEBUG_RANGE(_First, _Mid);
; 1681 : 	_DEBUG_RANGE(_Mid, _Last);
; 1682 : 	_Diff _Shift = _Mid - _First;
; 1683 : 	_Diff _Count = _Last - _First;

	mov	ecx, DWORD PTR __Last$[esp+20]
	push	ebx
	mov	ebx, DWORD PTR __Mid$[esp+24]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+32]
	sub	ebx, edi
	sar	ebx, 3
	sub	ecx, edi
	sar	ecx, 3
	mov	DWORD PTR __Shift$[esp+36], ebx
	mov	eax, ecx

; 1684 : 
; 1685 : 	for (_Diff _Factor = _Shift; _Factor != 0; )

	mov	esi, ebx
	test	ebx, ebx
	je	SHORT $LN7@Rotate
$LL8@Rotate:

; 1686 : 		{	// find subcycle count as GCD of shift count and length
; 1687 : 		_Diff _Tmp = _Count % _Factor;

	cdq
	idiv	esi

; 1688 : 		_Count = _Factor, _Factor = _Tmp;

	mov	eax, esi
	mov	esi, edx
	test	edx, edx
	jne	SHORT $LL8@Rotate
$LN7@Rotate:

; 1689 : 		}
; 1690 : 
; 1691 : 	if (_Count < _Last - _First)

	cmp	eax, ecx
	jge	$LN3@Rotate

; 1692 : 		for (; 0 < _Count; --_Count)

	test	eax, eax
	jle	$LN3@Rotate
	add	ebx, ebx
	add	ebx, ebx
	push	ebp
	add	ebx, ebx
	jmp	SHORT $LN5@Rotate
	npad	4
$LL93@Rotate:
	mov	edi, DWORD PTR __First$[esp+36]
$LN5@Rotate:

; 1693 : 			{	// rotate each subcycle
; 1694 : 			_RanIt _Hole = _First + _Count;
; 1695 : 			_RanIt _Next = _Hole;
; 1696 : 			_Ty _Holeval = *_Hole;

	mov	ecx, DWORD PTR [edi+eax*8+4]
	mov	ebp, DWORD PTR [edi+eax*8]
	lea	esi, DWORD PTR [edi+eax*8]
	mov	DWORD PTR __Holeval$231932[esp+44], ecx

; 1697 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

	lea	ecx, DWORD PTR [ebx+esi]
	mov	edi, esi
	cmp	ecx, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN11@Rotate
	lea	ecx, DWORD PTR __First$[esp+36]
	jmp	SHORT $LN12@Rotate
$LN11@Rotate:
	mov	DWORD PTR $T241941[esp+40], ecx
	lea	ecx, DWORD PTR $T241941[esp+40]
$LN12@Rotate:
	mov	ecx, DWORD PTR [ecx]

; 1698 : 			while (_Next1 != _Hole)

	cmp	ecx, esi
	je	SHORT $LN1@Rotate
$LL2@Rotate:

; 1699 : 				{	// percolate elements back around subcycle
; 1700 : 				*_Next = *_Next1;

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edi], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], edx

; 1701 : 				_Next = _Next1;
; 1702 : 				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
; 1703 : 					: _First + (_Shift - (_Last - _Next1));

	mov	edx, DWORD PTR __Last$[esp+36]
	sub	edx, ecx
	sar	edx, 3
	cmp	DWORD PTR __Shift$[esp+40], edx
	mov	edi, ecx
	jge	SHORT $LN13@Rotate
	add	ecx, ebx
	mov	DWORD PTR $T241945[esp+40], ecx
	lea	ecx, DWORD PTR $T241945[esp+40]
	jmp	SHORT $LN14@Rotate
$LN13@Rotate:
	add	edx, edx
	add	edx, edx
	add	edx, edx
	mov	ecx, ebx
	sub	ecx, edx
	add	ecx, DWORD PTR __First$[esp+36]
	mov	DWORD PTR $T241946[esp+40], ecx
	lea	ecx, DWORD PTR $T241946[esp+40]
$LN14@Rotate:
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, esi
	jne	SHORT $LL2@Rotate
$LN1@Rotate:

; 1704 : 				}
; 1705 : 			*_Next = _Holeval;

	mov	edx, DWORD PTR __Holeval$231932[esp+44]
	dec	eax
	mov	DWORD PTR [edi], ebp
	mov	DWORD PTR [edi+4], edx
	test	eax, eax
	jg	$LL93@Rotate
	pop	ebp
$LN3@Rotate:
	pop	edi
	pop	esi
	pop	ebx

; 1706 : 			}
; 1707 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z ENDP ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T242131 = -24						; size = 4
$T242125 = -24						; size = 4
$T242123 = -24						; size = 4
$T242124 = -20						; size = 20
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
__Pred$ = 48						; size = 1
___formal$ = 52						; size = 1
___formal$ = 56						; size = 1
??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval,std::forward_iterator_tag>, COMDAT

; 2593 : 	{	//  copy merging ranges, both using _Pred

	sub	esp, 24					; 00000018H

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	mov	eax, DWORD PTR __First1$[esp+20]
	push	esi
	push	edi
	xor	edi, edi
	mov	DWORD PTR $T242131[esp+32], edi
	cmp	eax, DWORD PTR __Last1$[esp+28]
	je	$LN3@Merge@4
	mov	ecx, DWORD PTR __First2$[esp+28]
	lea	esi, DWORD PTR [edi+8]
$LL4@Merge@4:
	cmp	ecx, DWORD PTR __Last2$[esp+28]
	je	$LN3@Merge@4

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+4]

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	edx, DWORD PTR __Dest$[esp+44]
	jge	SHORT $LN2@Merge@4
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN41@Merge@4
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR __Dest$[esp+44]
	add	DWORD PTR [eax+4], esi
	mov	ecx, DWORD PTR __First2$[esp+28]

; 2600 : 		else

	mov	eax, DWORD PTR __First1$[esp+28]
	add	ecx, esi
	mov	DWORD PTR __First2$[esp+28], ecx
	jmp	SHORT $LN72@Merge@4

; 2599 : 			*_Dest = *_First2, ++_First2;

$LN41@Merge@4:
	cmp	eax, edi
	je	SHORT $LN46@Merge@4
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR __Dest$[esp+44]
$LN46@Merge@4:
	add	DWORD PTR [edx+4], esi
	mov	eax, DWORD PTR __Dest$[esp+44]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR __First2$[esp+28]

; 2600 : 		else

	mov	eax, DWORD PTR __First1$[esp+28]
	add	ecx, esi
	mov	DWORD PTR __First2$[esp+28], ecx
	jmp	SHORT $LN72@Merge@4
$LN2@Merge@4:

; 2601 : 			*_Dest = *_First1, ++_First1;

	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN61@Merge@4
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR __Dest$[esp+44]
	add	DWORD PTR [eax+4], esi
	jmp	SHORT $LN60@Merge@4
$LN61@Merge@4:
	cmp	eax, edi
	je	SHORT $LN66@Merge@4
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR __Dest$[esp+44]
$LN66@Merge@4:
	add	DWORD PTR [edx+4], esi
	mov	eax, DWORD PTR __Dest$[esp+44]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+8], edx
$LN60@Merge@4:
	mov	eax, DWORD PTR __First1$[esp+28]
	mov	ecx, DWORD PTR __First2$[esp+28]
	add	eax, esi
	mov	DWORD PTR __First1$[esp+28], eax
$LN72@Merge@4:

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	cmp	eax, DWORD PTR __Last1$[esp+28]
	jne	$LL4@Merge@4
$LN3@Merge@4:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], edi
	mov	ecx, DWORD PTR __Dest$[esp+64]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last1$[esp+48]
	mov	eax, DWORD PTR __First1$[esp+48]
	mov	DWORD PTR $T242123[esp+52], esp
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T242124[esp+60]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR $T242124[esp+64]
	add	esp, 32					; 00000020H
	mov	DWORD PTR __Dest$[esp+44], edx
	cmp	eax, edi
	je	SHORT $LN88@Merge@4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN88@Merge@4:

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+28]
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], edi
	mov	ecx, DWORD PTR __Dest$[esp+64]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last2$[esp+48]
	mov	eax, DWORD PTR __First2$[esp+48]
	mov	DWORD PTR $T242125[esp+52], esp
	push	edx
	push	eax
	push	esi
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	eax, DWORD PTR __Dest$[esp+60]
	add	esp, 32					; 00000020H
	cmp	eax, edi
	je	SHORT $LN109@Merge@4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN109@Merge@4:

; 2605 : 	}

	pop	edi
	mov	eax, esi
	pop	esi
	add	esp, 24					; 00000018H
	ret	0
??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval,std::forward_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>, COMDAT

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	mov	ecx, DWORD PTR __First1$[esp-4]
	mov	edx, DWORD PTR __Dest$[esp-4]
	mov	eax, DWORD PTR __First2$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Last1$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Last2$[esp+8]
	cmp	ecx, esi
	je	SHORT $LN28@Merge@5
	npad	5
$LL10@Merge@5:
	cmp	eax, edi
	je	SHORT $LN3@Merge@5

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	ebx, DWORD PTR [eax+4]
	cmp	ebx, DWORD PTR [ecx+4]
	jge	SHORT $LN2@Merge@5

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	edx, DWORD PTR [eax+4]
	add	eax, 8

; 2600 : 		else

	jmp	SHORT $LN68@Merge@5
$LN2@Merge@5:

; 2601 : 			*_Dest = *_First1, ++_First1;

	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], ebx
	mov	edx, DWORD PTR [ecx+4]
	add	ecx, 8
$LN68@Merge@5:
	mov	ebx, DWORD PTR __Dest$[esp+8]
	mov	DWORD PTR [ebx+4], edx
	mov	edx, DWORD PTR __Dest$[esp+8]
	add	edx, 8
	mov	DWORD PTR __Dest$[esp+8], edx
	cmp	ecx, esi
	jne	SHORT $LL10@Merge@5
$LN3@Merge@5:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	cmp	ecx, esi
	je	SHORT $LN28@Merge@5
	npad	4
$LL30@Merge@5:
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], ebx
	add	ecx, 8
	add	edx, 8
	cmp	ecx, esi
	jne	SHORT $LL30@Merge@5
$LN28@Merge@5:

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	cmp	eax, edi
	je	SHORT $LN66@Merge@5
$LL49@Merge@5:
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	add	eax, 8
	add	edx, 8
	cmp	eax, edi
	jne	SHORT $LL49@Merge@5
$LN66@Merge@5:
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+8]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], edx
	pop	ebx

; 2605 : 	}

	ret	0
??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1104 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy@6
	pop	edi

; 1105 : 			return (false);

	xor	al, al
	pop	esi

; 1115 : 		}

	ret	4
$LN4@Buy@6:

; 1106 : 		else if (max_size() < _Capacity)

	cmp	edi, 1073741823				; 3fffffffH
	jbe	SHORT $LN2@Buy@6

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
$LN16@Buy@6:
$LN2@Buy@6:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	mov	DWORD PTR [esi+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	DWORD PTR [esi+8], eax
	add	esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [esi+12], eax
	pop	edi

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
	pop	esi

; 1115 : 		}

	ret	4
$LN15@Buy@6:
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 667  : 		return (iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 668  : 		}

	ret	4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 677  : 		return (iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 678  : 		}

	ret	4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Ogtpy
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 687  : 		return (iterator(_Where._Myptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 688  : 		}

	ret	8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+
; Function compile flags: /Ogtpy
;	COMDAT ??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator+, COMDAT
; _this$ = ecx

; 381  : 		_Myt _Tmp = *this;
; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 383  : 		}

	ret	8
??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator+
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::_Unchecked_move_backward<int *,int *>, COMDAT

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi
	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx
	test	eax, eax
	jle	SHORT $LN14@Unchecked_@4
	push	ecx
	push	edx
	push	ecx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN14@Unchecked_@4:
	mov	eax, esi
	pop	esi

; 3697 : 	}

	ret	0
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::_Unchecked_move_backward<int *,int *>
_TEXT	ENDS
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN7@unchecked_@8
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL9@unchecked_@8:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL9@unchecked_@8
	pop	esi
$LN7@unchecked_@8:

; 3722 : 	}

	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>, COMDAT

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN10@Uninit_mov@2
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN10@Uninit_mov@2:
	pop	edi
	mov	eax, esi
	pop	esi

; 208  : 	}

	ret	0
??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::ExtractSpyFromCity
EXTRN	?changeAdjacentSight@CvPlot@@QAEXW4TeamTypes@@H_NW4InvisibleTypes@@W4DirectionTypes@@1@Z:PROC ; CvPlot::changeAdjacentSight
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
;	COMDAT ?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_bHadSurveillance$ = 8					; size = 1
_uiSpyIndex$ = 8					; size = 4
?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z PROC	; CvPlayerEspionage::ExtractSpyFromCity, COMDAT
; _this$ = ecx

; 1207 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1208 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR _uiSpyIndex$[esp-4]
	push	edi
	mov	edi, ecx
	cmp	eax, DWORD PTR [edi+4]
	jb	SHORT $LN5@ExtractSpy

; 1209 : 	{
; 1210 : 		return false;

	xor	al, al
	pop	edi

; 1251 : }

	ret	4
$LN5@ExtractSpy:

; 1211 : 	}
; 1212 : 
; 1213 : 	if(!IsSpyInCity(uiSpyIndex))

	mov	ecx, DWORD PTR [edi]
	push	ebx
	push	esi
	lea	esi, DWORD PTR [eax*8]
	sub	esi, eax
	add	esi, esi
	add	esi, esi
	add	ecx, esi
	or	ebx, -1
	cmp	DWORD PTR [ecx+4], ebx
	je	SHORT $LN11@ExtractSpy
	cmp	DWORD PTR [ecx+8], ebx
	jne	SHORT $LN4@ExtractSpy
$LN11@ExtractSpy:
	pop	esi
	pop	ebx

; 1214 : 	{
; 1215 : 		return true;

	mov	al, 1
	pop	edi

; 1251 : }

	ret	4
$LN4@ExtractSpy:
	push	ebp

; 1216 : 	}
; 1217 : 
; 1218 : 	bool bHadSurveillance = HasEstablishedSurveillance(uiSpyIndex);

	push	eax
	mov	ecx, edi
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance

; 1219 : 
; 1220 : 	int iCityX = m_aSpyList[uiSpyIndex].m_iCityX;

	mov	edx, DWORD PTR [edi]

; 1221 : 	int iCityY = m_aSpyList[uiSpyIndex].m_iCityY;

	mov	ebp, DWORD PTR [esi+edx+8]
	lea	ecx, DWORD PTR [esi+edx]
	mov	BYTE PTR _bHadSurveillance$[esp+12], al
	mov	eax, DWORD PTR [ecx+4]

; 1222 : 
; 1223 : 	m_aSpyList[uiSpyIndex].m_iCityX = -1;

	mov	DWORD PTR [ecx+4], ebx

; 1224 : 	m_aSpyList[uiSpyIndex].m_iCityY = -1;

	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi+ecx+8], ebx

; 1225 : 	m_aSpyList[uiSpyIndex].m_eSpyState = SPY_STATE_UNASSIGNED;

	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi+edx+16], 0

; 1226 : 
; 1227 : 	CvPlot* pPlot = GC.getMap().plot(iCityX, iCityY);

	cmp	eax, -2147483647			; 80000001H
	je	$LN99@ExtractSpy
	cmp	ebp, -2147483647			; 80000001H
	je	$LN99@ExtractSpy
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [edx+4056], 0
	mov	ecx, DWORD PTR [edx+4020]
	je	SHORT $LN43@ExtractSpy
	test	eax, eax
	jge	SHORT $LN45@ExtractSpy
	cdq
	idiv	ecx
	mov	esi, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	add	esi, ecx
	jmp	SHORT $LN47@ExtractSpy
$LN45@ExtractSpy:
	cmp	eax, ecx
	jl	SHORT $LN43@ExtractSpy
	cdq
	idiv	ecx
	mov	esi, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	jmp	SHORT $LN47@ExtractSpy
$LN43@ExtractSpy:
	mov	esi, eax
$LN47@ExtractSpy:
	cmp	BYTE PTR [edx+4057], 0
	mov	ebx, DWORD PTR [edx+4024]
	je	SHORT $LN53@ExtractSpy
	test	ebp, ebp
	jge	SHORT $LN55@ExtractSpy
	mov	eax, ebp
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN57@ExtractSpy
$LN55@ExtractSpy:
	cmp	ebp, ebx
	jl	SHORT $LN53@ExtractSpy
	mov	eax, ebp
	cdq
	idiv	ebx
	jmp	SHORT $LN57@ExtractSpy
$LN53@ExtractSpy:
	mov	edx, ebp
$LN57@ExtractSpy:
	test	esi, esi
	jl	SHORT $LN99@ExtractSpy
	cmp	esi, ecx
	jge	SHORT $LN99@ExtractSpy
	test	edx, edx
	jl	SHORT $LN99@ExtractSpy
	cmp	edx, ebx
	jge	SHORT $LN99@ExtractSpy
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [eax+4068]

; 1228 : 	CvAssertMsg(pPlot, "Spy coordinates did not point to plot");
; 1229 : 	if(!pPlot)

	test	ecx, ecx

; 1230 : 	{
; 1231 : 		return false;

	je	SHORT $LN99@ExtractSpy

; 1232 : 	}
; 1233 : 
; 1234 : 	CvCity* pCity = pPlot->getPlotCity();

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN99@ExtractSpy
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN99@ExtractSpy
	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	esi, eax

; 1235 : 	CvAssertMsg(pCity, "No city in plot pointed to by spy");
; 1236 : 	if(!pCity)

	test	esi, esi
	jne	SHORT $LN2@ExtractSpy
$LN99@ExtractSpy:
	pop	ebp
	pop	esi
	pop	ebx

; 1237 : 	{
; 1238 : 		return false;

	xor	al, al
	pop	edi

; 1251 : }

	ret	4
$LN2@ExtractSpy:

; 1239 : 	}
; 1240 : 
; 1241 : 	// turn off visibility of city
; 1242 : 	if(bHadSurveillance)
; 1243 : 	{
; 1244 : 		pCity->plot()->changeAdjacentSight(m_pPlayer->getTeam(), GC.getESPIONAGE_SURVEILLANCE_SIGHT_RANGE(), false, NO_INVISIBLE, NO_DIRECTION, false);

	or	ebx, -1
	cmp	BYTE PTR _bHadSurveillance$[esp+12], 0
	je	SHORT $LN1@ExtractSpy
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7948
	mov	ecx, DWORD PTR [edi+1292]
	push	0
	push	ebx
	push	ebx
	push	0
	push	edx
	call	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ	; CvPlayer::getTeam
	push	eax
	mov	ecx, esi
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	ecx, eax
	call	?changeAdjacentSight@CvPlot@@QAEXW4TeamTypes@@H_NW4InvisibleTypes@@W4DirectionTypes@@1@Z ; CvPlot::changeAdjacentSight
$LN1@ExtractSpy:

; 1245 : 	}
; 1246 : 
; 1247 : 	pCity->GetCityEspionage()->m_aiSpyAssignment[m_pPlayer->GetID()] = -1;

	mov	eax, DWORD PTR [edi+1292]
	mov	ebp, DWORD PTR [eax+44]
	mov	ecx, esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	DWORD PTR [eax+ebp*4+4], ebx

; 1248 : 	pCity->GetCityEspionage()->ResetProgress(m_pPlayer->GetID());

	mov	ecx, DWORD PTR [edi+1292]
	mov	edi, DWORD PTR [ecx+44]
	mov	ecx, esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	pop	ebp
	mov	DWORD PTR [eax+edi*4+92], ebx
	mov	DWORD PTR [eax+edi*4+268], ebx
	mov	DWORD PTR [eax+edi*4+180], ebx
	pop	esi
	pop	ebx

; 1249 : 
; 1250 : 	return true;

	mov	al, 1
	pop	edi

; 1251 : }

	ret	4
?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z ENDP	; CvPlayerEspionage::ExtractSpyFromCity
_TEXT	ENDS
PUBLIC	?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z ; CvPlayerEspionage::UpdateCity
; Function compile flags: /Ogtpy
;	COMDAT ?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z
_TEXT	SEGMENT
$T242958 = -4						; size = 4
_pCity$ = 8						; size = 4
?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z PROC	; CvPlayerEspionage::UpdateCity, COMDAT
; _this$ = ecx

; 1292 : {

	push	ecx
	push	ebx

; 1293 : 	CvAssertMsg(pCity, "pCity is null");
; 1294 : 	if(pCity == NULL)

	mov	ebx, DWORD PTR _pCity$[esp+4]
	push	esi
	mov	esi, ecx
	test	ebx, ebx
	je	$LN4@UpdateCity

; 1295 : 	{
; 1296 : 		return;
; 1297 : 	}
; 1298 : 
; 1299 : 	int iSpyIndex = GetSpyIndexInCity(pCity);

	mov	eax, DWORD PTR [esi+1292]
	push	ebp
	push	edi
	mov	edi, DWORD PTR [eax+44]
	mov	ecx, ebx
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	ebp, DWORD PTR [eax+edi*4+4]
	add	eax, 4

; 1300 : 
; 1301 : 	// if there isn't a spy in the city, bail out
; 1302 : 	if(iSpyIndex == -1)

	cmp	ebp, -1
	je	$LN43@UpdateCity

; 1303 : 	{
; 1304 : 		return;
; 1305 : 	}
; 1306 : 
; 1307 : 	CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, ebx
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	ebx, eax

; 1308 : 	CvAssertMsg(pCityEspionage, "pCityEspionage is null");
; 1309 : 	if(pCityEspionage == NULL)

	test	ebx, ebx
	je	SHORT $LN43@UpdateCity

; 1310 : 	{
; 1311 : 		return;
; 1312 : 	}
; 1313 : 	pCityEspionage->m_aiLastBasePotential[m_pPlayer->GetID()] = CalcPerTurn(m_aSpyList[iSpyIndex].m_eSpyState, pCity, -1);

	mov	ecx, DWORD PTR [esi+1292]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _pCity$[esp+16]
	lea	edi, DWORD PTR [ebp*8]
	sub	edi, ebp
	add	edi, edi
	add	edi, edi
	push	-1
	add	eax, edi
	mov	DWORD PTR $T242958[esp+24], edx
	mov	edx, DWORD PTR [eax+16]
	push	ecx
	push	edx
	mov	ecx, esi
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	ecx, DWORD PTR $T242958[esp+20]
	mov	DWORD PTR [ebx+ecx*4+532], eax

; 1314 : 	pCityEspionage->m_aiLastPotential[m_pPlayer->GetID()] = CalcPerTurn(m_aSpyList[iSpyIndex].m_eSpyState, pCity, iSpyIndex);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+1292]
	mov	ecx, DWORD PTR _pCity$[esp+16]
	add	eax, edi
	mov	edi, DWORD PTR [edx+44]
	mov	edx, DWORD PTR [eax+16]
	push	ebp
	push	ecx
	push	edx
	mov	ecx, esi
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR [ebx+edi*4+444], eax

; 1315 : 	pCityEspionage->m_aiRate[m_pPlayer->GetID()] = pCityEspionage->m_aiLastPotential[m_pPlayer->GetID()];

	mov	eax, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [eax+44]
	mov	ecx, DWORD PTR [ebx+eax*4+444]
	mov	DWORD PTR [ebx+eax*4+180], ecx
$LN43@UpdateCity:
	pop	edi
	pop	ebp
$LN4@UpdateCity:
	pop	esi
	pop	ebx

; 1316 : }

	pop	ecx
	ret	4
?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z ENDP	; CvPlayerEspionage::UpdateCity
_TEXT	ENDS
PUBLIC	?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z	; CvPlayerEspionage::AttemptCoup
EXTRN	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ:PROC ; CvGame::getActivePlayer
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDXZ:PROC
EXTRN	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescriptionKey
EXTRN	__imp_??0String@Localization@@QAE@XZ:PROC
EXTRN	?SetFriendshipWithMajorTimes100@CvMinorCivAI@@QAEXW4PlayerTypes@@H_N@Z:PROC ; CvMinorCivAI::SetFriendshipWithMajorTimes100
EXTRN	?IsFriends@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsFriends
EXTRN	?GetFriendshipAnchorWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::GetFriendshipAnchorWithMajor
EXTRN	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::GetEffectiveFriendshipWithMajor
EXTRN	?SetDisableNotifications@CvMinorCivAI@@QAEX_N@Z:PROC ; CvMinorCivAI::SetDisableNotifications
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
xdata$x	SEGMENT
__ehfuncinfo$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$10
	DD	09H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$11
	DD	09H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$12
	DD	09H
	DD	FLAT:__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$13
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z
_TEXT	SEGMENT
_bAttemptSuccess$ = -594				; size = 1
_bNotify$223571 = -593					; size = 1
_ui$223562 = -592					; size = 4
_iNewInfluence$223559 = -592				; size = 4
tv1354 = -588						; size = 4
$T243008 = -588						; size = 4
_eNotification$223607 = -584				; size = 4
_eNotification$223582 = -584				; size = 4
_iRelationshipAnchor$223573 = -584			; size = 4
_iRandRoll$ = -584					; size = 4
_pMinorCivAI$ = -580					; size = 4
_bMetMinor$223570 = -573				; size = 1
$T243236 = -572						; size = 4
_pNotifications$ = -572					; size = 4
_pNotifications$223580 = -572				; size = 4
_iFriendship$223572 = -572				; size = 4
_ePreviousAlly$ = -568					; size = 4
tv943 = -564						; size = 4
tv933 = -560						; size = 4
_strSummary$223608 = -556				; size = 80
$T243019 = -556						; size = 80
$T243016 = -556						; size = 80
$T243012 = -556						; size = 80
$T243009 = -556						; size = 80
$T243030 = -476						; size = 80
$T243025 = -476						; size = 80
$T243023 = -476						; size = 80
_strSummary$223583 = -476				; size = 80
_strMsg$223545 = -396					; size = 28
_strNotification$223609 = -368				; size = 80
_strNotification$223584 = -288				; size = 80
_aiNewInfluenceValueTimes100$ = -208			; size = 88
$T243007 = -120						; size = 28
$T243032 = -92						; size = 80
__$EHRec$ = -12						; size = 12
_uiSpyIndex$ = 8					; size = 4
?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z PROC		; CvPlayerEspionage::AttemptCoup, COMDAT
; _this$ = ecx

; 1872 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 584				; 00000248H
	push	ebp

; 1873 : 	// if you're not allowed to stage a coup here, the coup fails
; 1874 : 	if(!CanStageCoup(uiSpyIndex))

	mov	ebp, DWORD PTR _uiSpyIndex$[esp+596]
	push	edi
	push	ebp
	mov	edi, ecx
	call	?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::CanStageCoup
	test	al, al
	je	$LN31@AttemptCou
$LN30@AttemptCou:
	push	ebx

; 1875 : 	{
; 1876 : 		return false;
; 1877 : 	}
; 1878 : 
; 1879 : 	CvCity* pCity = GetCityWithSpy(uiSpyIndex);

	push	ebp
	mov	ecx, edi
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	ebx, eax

; 1880 : 	CvAssertMsg(pCity, "Spy isn't in a city.");
; 1881 : 	if(!pCity)

	test	ebx, ebx
	jne	SHORT $LN29@AttemptCou

; 1882 : 	{
; 1883 : 		return false;

	xor	al, al
	jmp	$LN261@AttemptCou
$LN29@AttemptCou:

; 1884 : 	}
; 1885 : 
; 1886 : 	PlayerTypes eCityOwner = pCity->getOwner();
; 1887 : 	if(!GET_PLAYER(eCityOwner).isMinorCiv())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	esi
	mov	esi, DWORD PTR [ebx+84]
	imul	esi, 63236				; 0000f704H
	lea	ecx, DWORD PTR [esi+eax]
	mov	DWORD PTR tv933[esp+612], esi
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al

; 1888 : 	{
; 1889 : 		// this city state is not a minor civ
; 1890 : 		return false;

	je	SHORT $LN265@AttemptCou

; 1891 : 	}
; 1892 : 
; 1893 : 	CvMinorCivAI* pMinorCivAI = GET_PLAYER(eCityOwner).GetMinorCivAI();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, esi
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI

; 1894 : 
; 1895 : 	PlayerTypes ePreviousAlly = pMinorCivAI->GetAlly();

	mov	ecx, eax
	mov	DWORD PTR _pMinorCivAI$[esp+612], eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly
	mov	DWORD PTR _ePreviousAlly$[esp+612], eax

; 1896 : 	CvAssertMsg(ePreviousAlly != NO_PLAYER, "City state has no ally. Something's going wrong");
; 1897 : 	if(ePreviousAlly == NO_PLAYER)

	cmp	eax, -1
	jne	SHORT $LN27@AttemptCou
$LN265@AttemptCou:

; 1898 : 	{
; 1899 : 		return false;

	xor	al, al
	jmp	$LN262@AttemptCou
$LN27@AttemptCou:

; 1900 : 	}
; 1901 : 
; 1902 : 	int aiNewInfluenceValueTimes100[MAX_MAJOR_CIVS];
; 1903 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	xor	esi, esi
$LL26@AttemptCou:

; 1904 : 	{
; 1905 : #ifdef NQ_COUP_FORMULA_USES_BASE_FRIENDSHIP_NOT_EFFECTIVE_FRIENDSHIP
; 1906 : 		aiNewInfluenceValueTimes100[ui] = pMinorCivAI->GetBaseFriendshipWithMajorTimes100((PlayerTypes)ui);
; 1907 : #else
; 1908 : 		aiNewInfluenceValueTimes100[ui] = pMinorCivAI->GetEffectiveFriendshipWithMajorTimes100((PlayerTypes)ui);

	mov	ecx, DWORD PTR _pMinorCivAI$[esp+612]
	push	esi
	call	?GetEffectiveFriendshipWithMajorTimes100@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajorTimes100
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[esp+esi*4+612], eax
	inc	esi
	cmp	esi, 22					; 00000016H
	jb	SHORT $LL26@AttemptCou

; 1909 : #endif
; 1910 : 	}
; 1911 : 
; 1912 : 	m_aSpyList[uiSpyIndex].m_bEvaluateReassignment = true; // flag for reassignment

	mov	edx, DWORD PTR [edi]
	lea	esi, DWORD PTR [ebp*8]
	sub	esi, ebp
	add	esi, esi
	add	esi, esi

; 1913 : 	if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR tv943[esp+612], esi
	mov	BYTE PTR [esi+edx+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN23@AttemptCou

; 1914 : 	{
; 1915 : 		CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$223545[esp+612]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1916 : 		strMsg.Format("Re-eval: attempting coup, %d,", uiSpyIndex);

	push	ebp
	lea	eax, DWORD PTR _strMsg$223545[esp+616]
	push	OFFSET $SG223546
	push	eax
	mov	DWORD PTR __$EHRec$[esp+632], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1917 : 		strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName));

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+esi]
	add	eax, esi
	add	esp, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T243007[esp+616]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$223545[esp+616]
	mov	BYTE PTR __$EHRec$[esp+624], 1
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T243007[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1918 : 		LogEspionageMsg(strMsg);

	lea	eax, DWORD PTR _strMsg$223545[esp+612]
	push	eax
	mov	ecx, edi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 1919 : 	}

	lea	ecx, DWORD PTR _strMsg$223545[esp+612]
	mov	DWORD PTR __$EHRec$[esp+620], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN23@AttemptCou:

; 1920 : 
; 1921 : 	bool bAttemptSuccess = false;
; 1922 : 	int iRandRoll = GC.getGame().getJonRandNum(100, "Roll for the result of an attempted coup");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	OFFSET $SG223550
	push	100					; 00000064H
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 1923 : 	if(iRandRoll <= GetCoupChanceOfSuccess(uiSpyIndex))

	push	ebp
	mov	ecx, edi
	mov	DWORD PTR _iRandRoll$[esp+616], eax
	call	?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetCoupChanceOfSuccess
	cmp	DWORD PTR _iRandRoll$[esp+612], eax

; 1924 : 	{
; 1925 : 		// swap influence from ally to 2nd place ally
; 1926 : 		int iInfluenceTemp = aiNewInfluenceValueTimes100[ePreviousAlly];
; 1927 : 		aiNewInfluenceValueTimes100[ePreviousAlly] = aiNewInfluenceValueTimes100[m_pPlayer->GetID()];

	mov	ecx, DWORD PTR [edi+1292]
	jg	$LN22@AttemptCou
	mov	ecx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _ePreviousAlly$[esp+612]
	mov	esi, DWORD PTR _aiNewInfluenceValueTimes100$[esp+ecx*4+612]
	mov	edx, DWORD PTR _aiNewInfluenceValueTimes100$[esp+eax*4+612]
	lea	eax, DWORD PTR _aiNewInfluenceValueTimes100$[esp+eax*4+612]
	mov	DWORD PTR [eax], esi

; 1928 : 		aiNewInfluenceValueTimes100[m_pPlayer->GetID()] = iInfluenceTemp;

	mov	DWORD PTR _aiNewInfluenceValueTimes100$[esp+ecx*4+612], edx

; 1929 : 
; 1930 : 		// reduce the influence of all the other players
; 1931 : #ifdef AUI_WARNING_FIXES
; 1932 : 		for (int ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 1933 : #else
; 1934 : 		for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 1935 : #endif
; 1936 : 		{
; 1937 : 			if(ui == m_pPlayer->GetID())

	mov	edx, DWORD PTR [edi+1292]
	mov	edx, DWORD PTR [edx+44]
	xor	esi, esi
	xor	ecx, ecx
	npad	1
$LL259@AttemptCou:
	cmp	ecx, edx
	je	SHORT $LN20@AttemptCou

; 1938 : 			{
; 1939 : 				continue;
; 1940 : 			}
; 1941 : 
; 1942 : 			// only drop the influence if they have positive influence
; 1943 : 			if(aiNewInfluenceValueTimes100[ui] > 0)

	mov	eax, DWORD PTR _aiNewInfluenceValueTimes100$[esp+ecx*4+612]
	cmp	eax, esi
	jle	SHORT $LN20@AttemptCou

; 1944 : 			{
; 1945 : 				int iNewInfluence = aiNewInfluenceValueTimes100[ui] - (GC.getESPIONAGE_COUP_OTHER_PLAYERS_INFLUENCE_DROP() * 100);

	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7952
	imul	ebp, 100				; 00000064H
	sub	eax, ebp
	mov	DWORD PTR _iNewInfluence$223559[esp+612], eax

; 1946 : 				iNewInfluence = max(iNewInfluence, 0);

	mov	DWORD PTR $T243008[esp+612], esi
	lea	eax, DWORD PTR $T243008[esp+612]
	js	SHORT $LN87@AttemptCou
	lea	eax, DWORD PTR _iNewInfluence$223559[esp+612]
$LN87@AttemptCou:

; 1947 : #ifdef NQ_COUP_FORMULA_USES_BASE_FRIENDSHIP_NOT_EFFECTIVE_FRIENDSHIP
; 1948 : 				// cap all others at the ally threshold of 60 though (it's further reduced by 20 later)
; 1949 : 				iNewInfluence = min(iNewInfluence, GC.getFRIENDSHIP_THRESHOLD_ALLIES() * 100);
; 1950 : #endif
; 1951 : 				aiNewInfluenceValueTimes100[ui] = iNewInfluence;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[esp+ecx*4+612], eax
$LN20@AttemptCou:
	lea	eax, DWORD PTR [ecx+1]
	cmp	eax, edx
	je	SHORT $LN256@AttemptCou
	mov	eax, DWORD PTR _aiNewInfluenceValueTimes100$[esp+ecx*4+616]
	cmp	eax, esi
	jle	SHORT $LN256@AttemptCou
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7952
	imul	ebp, 100				; 00000064H
	sub	eax, ebp
	mov	DWORD PTR _iNewInfluence$223559[esp+612], eax
	mov	DWORD PTR $T243008[esp+612], esi
	lea	eax, DWORD PTR $T243008[esp+612]
	js	SHORT $LN255@AttemptCou

; 1946 : 				iNewInfluence = max(iNewInfluence, 0);

	lea	eax, DWORD PTR _iNewInfluence$223559[esp+612]
$LN255@AttemptCou:

; 1947 : #ifdef NQ_COUP_FORMULA_USES_BASE_FRIENDSHIP_NOT_EFFECTIVE_FRIENDSHIP
; 1948 : 				// cap all others at the ally threshold of 60 though (it's further reduced by 20 later)
; 1949 : 				iNewInfluence = min(iNewInfluence, GC.getFRIENDSHIP_THRESHOLD_ALLIES() * 100);
; 1950 : #endif
; 1951 : 				aiNewInfluenceValueTimes100[ui] = iNewInfluence;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[esp+ecx*4+616], eax
$LN256@AttemptCou:
	add	ecx, 2
	cmp	ecx, 22					; 00000016H
	jb	SHORT $LL259@AttemptCou

; 1952 : 			}
; 1953 : 		}
; 1954 : 
; 1955 : 		bAttemptSuccess = true;

	mov	BYTE PTR _bAttemptSuccess$[esp+612], 1

; 1956 : 	}
; 1957 : 	else

	jmp	SHORT $LN16@AttemptCou
$LN22@AttemptCou:

; 1958 : 	{
; 1959 : 		// reduce influence of player
; 1960 : 		// right now move the influence into a negative space
; 1961 : 		aiNewInfluenceValueTimes100[m_pPlayer->GetID()] = (-10 * 100);

	mov	eax, DWORD PTR [ecx+44]

; 1962 : 		bAttemptSuccess = false;
; 1963 : 
; 1964 : 		// kill the spy
; 1965 : 		ExtractSpyFromCity(uiSpyIndex); // move the dead body out so that someone else can move in

	push	ebp
	mov	ecx, edi
	mov	DWORD PTR _aiNewInfluenceValueTimes100$[esp+eax*4+616], -1000 ; fffffc18H
	mov	BYTE PTR _bAttemptSuccess$[esp+616], 0
	call	?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::ExtractSpyFromCity

; 1966 : 		m_aSpyList[uiSpyIndex].m_eSpyState = SPY_STATE_DEAD; // have to official kill him after the extraction

	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi+edx+16], 8
	xor	esi, esi
$LN16@AttemptCou:

; 1967 : 	}
; 1968 : 
; 1969 : 	// do others influence first so that the potential coup person will be the ally
; 1970 : 	pMinorCivAI->SetDisableNotifications(true);

	mov	ecx, DWORD PTR _pMinorCivAI$[esp+612]
	push	1
	call	?SetDisableNotifications@CvMinorCivAI@@QAEX_N@Z ; CvMinorCivAI::SetDisableNotifications
	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	xor	eax, eax

; 1971 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$223562[esp+612], esi
	mov	esi, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	mov	DWORD PTR tv1354[esp+612], eax
	npad	6
$LL15@AttemptCou:

; 1972 : 	{
; 1973 : 		PlayerTypes ePlayer = (PlayerTypes)ui;
; 1974 : 		if(!GET_PLAYER(ePlayer).isAlive())

	cmp	BYTE PTR [eax+edx+2256], 0
	je	$LN14@AttemptCou

; 1975 : 		{
; 1976 : 			continue;
; 1977 : 		}
; 1978 : 
; 1979 : 		// skip the spy player
; 1980 : 		if(ePlayer == m_pPlayer->GetID())

	mov	eax, DWORD PTR [edi+1292]
	mov	ecx, DWORD PTR _ui$223562[esp+612]
	cmp	ecx, DWORD PTR [eax+44]
	je	$LN14@AttemptCou

; 1981 : 		{
; 1982 : 			continue;
; 1983 : 		}
; 1984 : 
; 1985 : 		// send notification to other civs if they have met this minor
; 1986 : 		bool bMetMinor = GET_TEAM(GET_PLAYER(ePlayer).getTeam()).isHasMet(GET_PLAYER(eCityOwner).getTeam());

	mov	eax, DWORD PTR tv933[esp+612]
	mov	eax, DWORD PTR [eax+edx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN110@AttemptCou
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN111@AttemptCou
$LN110@AttemptCou:
	or	ecx, -1
$LN111@AttemptCou:
	mov	eax, DWORD PTR tv1354[esp+612]
	mov	eax, DWORD PTR [eax+edx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN121@AttemptCou
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN122@AttemptCou
$LN121@AttemptCou:
	or	eax, -1
$LN122@AttemptCou:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet

; 1987 : 		bool bNotify = false;
; 1988 : 		int iFriendship = pMinorCivAI->GetEffectiveFriendshipWithMajor(ePlayer);

	mov	ecx, DWORD PTR _pMinorCivAI$[esp+612]
	mov	BYTE PTR _bMetMinor$223570[esp+612], al
	mov	eax, DWORD PTR _ui$223562[esp+612]
	push	eax
	mov	BYTE PTR _bNotify$223571[esp+616], 0
	call	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajor

; 1989 : 		int iRelationshipAnchor = pMinorCivAI->GetFriendshipAnchorWithMajor(ePlayer);

	mov	ecx, DWORD PTR _ui$223562[esp+612]
	push	ecx
	mov	ecx, DWORD PTR _pMinorCivAI$[esp+616]
	mov	DWORD PTR _iFriendship$223572[esp+616], eax
	call	?GetFriendshipAnchorWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetFriendshipAnchorWithMajor

; 1990 : 		bool bFriends = pMinorCivAI->IsFriends(ePlayer);

	mov	edx, DWORD PTR _ui$223562[esp+612]
	mov	ecx, DWORD PTR _pMinorCivAI$[esp+612]
	push	edx
	mov	DWORD PTR _iRelationshipAnchor$223573[esp+616], eax
	call	?IsFriends@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsFriends

; 1991 : 
; 1992 : 		if (iFriendship > iRelationshipAnchor || bFriends)

	mov	ecx, DWORD PTR _iRelationshipAnchor$223573[esp+612]
	cmp	DWORD PTR _iFriendship$223572[esp+612], ecx
	jg	SHORT $LN9@AttemptCou
	test	al, al
	je	SHORT $LN10@AttemptCou
$LN9@AttemptCou:

; 1993 : 		{
; 1994 : 			bNotify = true;

	mov	BYTE PTR _bNotify$223571[esp+612], 1
$LN10@AttemptCou:

; 1995 : 		}
; 1996 : 
; 1997 : 		CvPlayerEspionage* pOtherEspionage = GET_PLAYER(ePlayer).GetEspionage();

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR tv1354[esp+612]
	lea	ecx, DWORD PTR [eax+edx]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage

; 1998 : 		int iSpyIndex = pOtherEspionage->GetSpyIndexInCity(pCity);

	mov	ecx, DWORD PTR [eax+1292]
	mov	edx, DWORD PTR [ecx+44]
	mov	ecx, ebx
	mov	DWORD PTR $T243236[esp+612], edx
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage

; 1999 : 		if (iSpyIndex >= 0)

	mov	ecx, DWORD PTR $T243236[esp+612]
	add	eax, 4
	cmp	DWORD PTR [eax+ecx*4], 0
	jl	SHORT $LN8@AttemptCou

; 2000 : 		{
; 2001 : 			bNotify = true;

	mov	BYTE PTR _bNotify$223571[esp+612], 1
$LN8@AttemptCou:

; 2002 : 		}
; 2003 : 
; 2004 : 		pMinorCivAI->SetFriendshipWithMajorTimes100(ePlayer, aiNewInfluenceValueTimes100[ui]);

	mov	eax, DWORD PTR _ui$223562[esp+612]
	mov	edx, DWORD PTR _aiNewInfluenceValueTimes100$[esp+eax*4+612]
	mov	ecx, DWORD PTR _pMinorCivAI$[esp+612]
	push	0
	push	edx
	push	eax
	call	?SetFriendshipWithMajorTimes100@CvMinorCivAI@@QAEXW4PlayerTypes@@H_N@Z ; CvMinorCivAI::SetFriendshipWithMajorTimes100

; 2005 : 
; 2006 : 		CvNotifications* pNotifications = GET_PLAYER(ePlayer).GetNotifications();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, DWORD PTR tv1354[esp+612]
	add	ecx, eax
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$223580[esp+612], eax

; 2007 : 		if(pNotifications && bMetMinor && bNotify)

	test	eax, eax
	je	$LN257@AttemptCou
	cmp	BYTE PTR _bMetMinor$223570[esp+612], 0
	je	$LN257@AttemptCou
	cmp	BYTE PTR _bNotify$223571[esp+612], 0
	je	$LN257@AttemptCou

; 2008 : 		{
; 2009 : 			NotificationTypes eNotification;
; 2010 : 			Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223583[esp+612]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2011 : 			Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223584[esp+612]
	mov	DWORD PTR __$EHRec$[esp+620], 2
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2012 : 			if(bAttemptSuccess)

	cmp	BYTE PTR _bAttemptSuccess$[esp+612], 0
	mov	BYTE PTR __$EHRec$[esp+620], 3
	je	$LN6@AttemptCou

; 2013 : 			{
; 2014 : 				eNotification = NOTIFICATION_SPY_STAGE_COUP_SUCCESS;
; 2015 : 				strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_SUCCESS_S");

	lea	edx, DWORD PTR $T243009[esp+612]
	push	OFFSET $SG223587
	push	edx
	mov	DWORD PTR _eNotification$223582[esp+620], -20047341 ; fece1a13H
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223583[esp+616]
	mov	BYTE PTR __$EHRec$[esp+624], 4
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T243009[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 3
	call	ebp

; 2016 : 				strSummary << m_pPlayer->getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223583[esp+616]
	call	esi

; 2017 : 				strSummary << pCity->getNameKey();

	mov	ecx, ebx
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223583[esp+616]
	call	esi

; 2018 : 				strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_SUCCESS");

	lea	eax, DWORD PTR $T243012[esp+612]
	push	OFFSET $SG223591
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[esp+620], 5

; 2019 : 				strNotification << m_pPlayer->getCivilizationShortDescriptionKey();
; 2020 : 				strNotification << pCity->getNameKey();
; 2021 : 				strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();
; 2022 : 			}
; 2023 : 			else

	jmp	$LN263@AttemptCou
$LN6@AttemptCou:

; 2024 : 			{
; 2025 : 				eNotification = NOTIFICATION_SPY_STAGE_COUP_FAILURE;
; 2026 : 				strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_FAILURE_S");

	lea	ecx, DWORD PTR $T243016[esp+612]
	push	OFFSET $SG223597
	push	ecx
	mov	DWORD PTR _eNotification$223582[esp+620], -1336555936 ; b055c660H
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223583[esp+616]
	mov	BYTE PTR __$EHRec$[esp+624], 6
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T243016[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 3
	call	ebp

; 2027 : 				strSummary << m_pPlayer->getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223583[esp+616]
	call	esi

; 2028 : 				strSummary << pCity->getNameKey();

	mov	ecx, ebx
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223583[esp+616]
	call	esi

; 2029 : 				strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STAGE_COUP_FAILURE");

	lea	edx, DWORD PTR $T243019[esp+612]
	push	OFFSET $SG223601
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	BYTE PTR __$EHRec$[esp+620], 7
$LN263@AttemptCou:
	push	eax
	lea	ecx, DWORD PTR _strNotification$223584[esp+616]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T243019[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 3
	call	ebp

; 2030 : 				strNotification << m_pPlayer->getCivilizationShortDescriptionKey();

	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationShortDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescriptionKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223584[esp+616]
	call	esi

; 2031 : 				strNotification << pCity->getNameKey();

	mov	ecx, ebx
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223584[esp+616]
	call	esi

; 2032 : 				strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _ePreviousAlly$[esp+612]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223584[esp+616]
	call	esi

; 2033 : 			}
; 2034 : 			pNotifications->Add(eNotification, strNotification.toUTF8(), strSummary.toUTF8(), pCity->getX(), pCity->getY(), -1);

	mov	eax, DWORD PTR [ebx+108]
	mov	ecx, DWORD PTR [ebx+96]
	push	-1
	push	-1
	push	eax
	push	ecx
	lea	ecx, DWORD PTR _strSummary$223583[esp+628]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223584[esp+632]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	ecx, DWORD PTR _pNotifications$223580[esp+632]
	push	eax
	mov	eax, DWORD PTR _eNotification$223582[esp+636]
	push	eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2035 : 		}

	lea	ecx, DWORD PTR _strNotification$223584[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 2
	call	ebp
	lea	ecx, DWORD PTR _strSummary$223583[esp+612]
	mov	DWORD PTR __$EHRec$[esp+620], -1
	call	ebp
$LN257@AttemptCou:
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
$LN14@AttemptCou:

; 1971 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	eax, DWORD PTR tv1354[esp+612]
	inc	DWORD PTR _ui$223562[esp+612]
	add	eax, 63236				; 0000f704H
	mov	DWORD PTR tv1354[esp+612], eax
	cmp	eax, 1391192				; 00153a58H
	jb	$LL15@AttemptCou

; 2036 : 	}
; 2037 : 	
; 2038 : 	pMinorCivAI->SetFriendshipWithMajorTimes100(m_pPlayer->GetID(), aiNewInfluenceValueTimes100[m_pPlayer->GetID()]);

	mov	ecx, DWORD PTR [edi+1292]
	mov	eax, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _aiNewInfluenceValueTimes100$[esp+eax*4+612]
	mov	ecx, DWORD PTR _pMinorCivAI$[esp+612]
	push	0
	push	edx
	push	eax
	call	?SetFriendshipWithMajorTimes100@CvMinorCivAI@@QAEXW4PlayerTypes@@H_N@Z ; CvMinorCivAI::SetFriendshipWithMajorTimes100

; 2039 : 	pMinorCivAI->SetDisableNotifications(false);

	mov	ecx, DWORD PTR _pMinorCivAI$[esp+612]
	push	0
	call	?SetDisableNotifications@CvMinorCivAI@@QAEX_N@Z ; CvMinorCivAI::SetDisableNotifications

; 2040 : 
; 2041 : 	// send notification to player
; 2042 : 	CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [edi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$[esp+612], eax

; 2043 : 	if(pNotifications)

	test	eax, eax
	je	$LN4@AttemptCou

; 2044 : 	{
; 2045 : 		NotificationTypes eNotification;
; 2046 : 		Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223608[esp+612]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2047 : 		Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223609[esp+612]
	mov	DWORD PTR __$EHRec$[esp+620], 8
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2048 : 		if(bAttemptSuccess)

	cmp	BYTE PTR _bAttemptSuccess$[esp+612], 0
	mov	BYTE PTR __$EHRec$[esp+620], 9
	je	$LN3@AttemptCou

; 2049 : 		{
; 2050 : 			eNotification = NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS;
; 2051 : 			strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS_S");

	lea	eax, DWORD PTR $T243023[esp+612]
	push	OFFSET $SG223612
	push	eax
	mov	DWORD PTR _eNotification$223607[esp+620], -887564073 ; cb18d8d7H
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223608[esp+616]
	mov	BYTE PTR __$EHRec$[esp+624], 10		; 0000000aH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T243023[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 9
	call	ebp

; 2052 : 			strSummary << pCity->getNameKey();

	mov	ecx, ebx
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223608[esp+616]
	call	esi

; 2053 : 			strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_SUCCESS");

	lea	ecx, DWORD PTR $T243025[esp+612]
	push	OFFSET $SG223615
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	mov	BYTE PTR __$EHRec$[esp+624], 11		; 0000000bH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T243025[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 9
	call	ebp

; 2054 : 			strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR tv943[esp+612]
	mov	eax, DWORD PTR [eax+edx+12]
	sub	eax, 0
	je	SHORT $LN187@AttemptCou
	sub	eax, 1
	je	SHORT $LN186@AttemptCou
	sub	eax, 1
	je	SHORT $LN185@AttemptCou
	mov	eax, OFFSET $SG223392
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	call	esi

; 2055 : 			strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR tv943[esp+612]
	mov	ecx, DWORD PTR [eax]
	push	ecx

; 2056 : 			strNotification << pCity->getNameKey();
; 2057 : 			strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();
; 2058 : 		}
; 2059 : 		else

	jmp	$LN264@AttemptCou

; 2054 : 			strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

$LN185@AttemptCou:
	mov	eax, OFFSET $SG223391
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	call	esi

; 2055 : 			strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR tv943[esp+612]
	mov	ecx, DWORD PTR [eax]
	push	ecx

; 2056 : 			strNotification << pCity->getNameKey();
; 2057 : 			strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();
; 2058 : 		}
; 2059 : 		else

	jmp	$LN264@AttemptCou

; 2054 : 			strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

$LN186@AttemptCou:
	mov	eax, OFFSET $SG223389
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	call	esi

; 2055 : 			strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR tv943[esp+612]
	mov	ecx, DWORD PTR [eax]
	push	ecx

; 2056 : 			strNotification << pCity->getNameKey();
; 2057 : 			strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();
; 2058 : 		}
; 2059 : 		else

	jmp	$LN264@AttemptCou

; 2054 : 			strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

$LN187@AttemptCou:
	mov	eax, OFFSET $SG223387
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	call	esi

; 2055 : 			strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR tv943[esp+612]
	mov	ecx, DWORD PTR [eax]
	push	ecx

; 2056 : 			strNotification << pCity->getNameKey();
; 2057 : 			strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();
; 2058 : 		}
; 2059 : 		else

	jmp	$LN264@AttemptCou
$LN3@AttemptCou:

; 2060 : 		{
; 2061 : 			eNotification = NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE;
; 2062 : 			strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE_S");

	lea	edx, DWORD PTR $T243030[esp+612]
	push	OFFSET $SG223622
	push	edx
	mov	DWORD PTR _eNotification$223607[esp+620], -2055011164 ; 858304a4H
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223608[esp+616]
	mov	BYTE PTR __$EHRec$[esp+624], 12		; 0000000cH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T243030[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 9
	call	ebp

; 2063 : 			strSummary << pCity->getNameKey();

	mov	ecx, ebx
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223608[esp+616]
	call	esi

; 2064 : 			strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_YOU_STAGE_COUP_FAILURE");

	lea	eax, DWORD PTR $T243032[esp+612]
	push	OFFSET $SG223625
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	mov	BYTE PTR __$EHRec$[esp+624], 13		; 0000000dH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T243032[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 9
	call	ebp

; 2065 : 			strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR tv943[esp+612]
	mov	eax, DWORD PTR [edx+ecx+12]
	sub	eax, 0
	je	SHORT $LN210@AttemptCou
	sub	eax, 1
	je	SHORT $LN209@AttemptCou
	sub	eax, 1
	je	SHORT $LN208@AttemptCou
	mov	eax, OFFSET $SG223392
	jmp	SHORT $LN213@AttemptCou
$LN208@AttemptCou:
	mov	eax, OFFSET $SG223391
	jmp	SHORT $LN213@AttemptCou
$LN209@AttemptCou:
	mov	eax, OFFSET $SG223389
	jmp	SHORT $LN213@AttemptCou
$LN210@AttemptCou:
	mov	eax, OFFSET $SG223387
$LN213@AttemptCou:
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	call	esi

; 2066 : 			strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR tv943[esp+612]
	mov	eax, DWORD PTR [eax]
	push	eax
$LN264@AttemptCou:
	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	call	esi

; 2067 : 			strNotification << pCity->getNameKey();

	mov	ecx, ebx
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	call	esi

; 2068 : 			strNotification << GET_PLAYER(ePreviousAlly).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR _ePreviousAlly$[esp+612]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, eax
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+616]
	call	esi

; 2069 : 		}
; 2070 : 		pNotifications->Add(eNotification, strNotification.toUTF8(), strSummary.toUTF8(), pCity->getX(), pCity->getY(), -1);

	mov	eax, DWORD PTR [ebx+108]
	mov	ebx, DWORD PTR [ebx+96]
	mov	esi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	-1
	push	eax
	push	ebx
	lea	ecx, DWORD PTR _strSummary$223608[esp+628]
	call	esi
	push	eax
	lea	ecx, DWORD PTR _strNotification$223609[esp+632]
	call	esi
	mov	ecx, DWORD PTR _eNotification$223607[esp+632]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _pNotifications$[esp+640]
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2071 : 	}

	lea	ecx, DWORD PTR _strNotification$223609[esp+612]
	mov	BYTE PTR __$EHRec$[esp+620], 8
	call	ebp
	lea	ecx, DWORD PTR _strSummary$223608[esp+612]
	mov	DWORD PTR __$EHRec$[esp+620], -1
	call	ebp
$LN4@AttemptCou:

; 2072 : 
; 2073 : 	//Achievements!
; 2074 : 	if(bAttemptSuccess && m_pPlayer->GetID() == GC.getGame().getActivePlayer())

	mov	bl, BYTE PTR _bAttemptSuccess$[esp+612]
	test	bl, bl
	je	SHORT $LN1@AttemptCou
	mov	edx, DWORD PTR [edi+1292]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	esi, DWORD PTR [edx+44]
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	esi, eax
	jne	SHORT $LN1@AttemptCou

; 2075 : 	{
; 2076 : 		gDLL->UnlockAchievement(ACHIEVEMENT_XP1_13);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+828]
	push	203					; 000000cbH
	call	edx
$LN1@AttemptCou:

; 2077 : 	}
; 2078 : 
; 2079 : 	// Update City banners and game info
; 2080 : 	GC.GetEngineUserInterface()->setDirty(GameData_DIRTY_BIT, true);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+260]
	push	1
	push	11					; 0000000bH
	call	edx

; 2081 : 	GC.GetEngineUserInterface()->setDirty(CityInfo_DIRTY_BIT, true);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+260]
	push	1
	push	18					; 00000012H
	call	edx

; 2082 : 
; 2083 : 	return bAttemptSuccess;

	mov	al, bl
$LN262@AttemptCou:
	pop	esi
$LN261@AttemptCou:
	pop	ebx
$LN31@AttemptCou:

; 2084 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+604]
	pop	edi
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	add	esp, 596				; 00000254H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$0:
	lea	ecx, DWORD PTR _strMsg$223545[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$1:
	lea	ecx, DWORD PTR $T243007[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$2:
	lea	ecx, DWORD PTR _strSummary$223583[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$3:
	lea	ecx, DWORD PTR _strNotification$223584[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$4:
	lea	ecx, DWORD PTR $T243009[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$5:
	lea	ecx, DWORD PTR $T243012[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$6:
	lea	ecx, DWORD PTR $T243016[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$7:
	lea	ecx, DWORD PTR $T243019[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$8:
	lea	ecx, DWORD PTR _strSummary$223608[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$9:
	lea	ecx, DWORD PTR _strNotification$223609[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$10:
	lea	ecx, DWORD PTR $T243023[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$11:
	lea	ecx, DWORD PTR $T243025[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$12:
	lea	ecx, DWORD PTR $T243030[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z$13:
	lea	ecx, DWORD PTR $T243032[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z:
	mov	eax, OFFSET __ehfuncinfo$?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z ENDP		; CvPlayerEspionage::AttemptCoup
PUBLIC	?HasSharedIntrigueAboutMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::HasSharedIntrigueAboutMe
; Function compile flags: /Ogtpy
;	COMDAT ?HasSharedIntrigueAboutMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_eFromPlayer$ = 8					; size = 4
?HasSharedIntrigueAboutMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::HasSharedIntrigueAboutMe, COMDAT
; _this$ = ecx

; 3670 : 	for(std::vector<IntrigueNotificationMessage>::iterator it = m_aIntrigueNotificationMessages.begin();

	mov	eax, DWORD PTR [ecx+1280]
	mov	ecx, DWORD PTR [ecx+1284]

; 3671 : 		it != m_aIntrigueNotificationMessages.end(); ++it)

	cmp	eax, ecx
	je	SHORT $LN2@HasSharedI@3
	mov	edx, DWORD PTR _eFromPlayer$[esp-4]
$LL15@HasSharedI@3:

; 3672 : 	{
; 3673 : 		if((*it).m_eDiscoveringPlayer == eFromPlayer)

	cmp	DWORD PTR [eax], edx
	je	SHORT $LN32@HasSharedI@3
	add	eax, 68					; 00000044H
	cmp	eax, ecx
	jne	SHORT $LL15@HasSharedI@3
$LN2@HasSharedI@3:

; 3675 : 	}
; 3676 : 
; 3677 : 	return false;

	xor	al, al

; 3678 : }

	ret	4
$LN32@HasSharedI@3:

; 3674 : 			return true;

	mov	al, 1

; 3678 : }

	ret	4
?HasSharedIntrigueAboutMe@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::HasSharedIntrigueAboutMe
_TEXT	ENDS
PUBLIC	?Reset@CvEspionageAI@@QAEXXZ			; CvEspionageAI::Reset
; Function compile flags: /Ogtpy
;	COMDAT ?Reset@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
?Reset@CvEspionageAI@@QAEXXZ PROC			; CvEspionageAI::Reset, COMDAT
; _this$ = ecx

; 4224 : {

	push	ebx
	push	ebp
	push	esi
	mov	ebp, ecx

; 4225 : 	m_aiCivOutOfTechTurn.clear();

	xor	ebx, ebx
	lea	esi, DWORD PTR [ebp+4]
	push	edi
	mov	DWORD PTR [esi+4], ebx
	lea	edi, DWORD PTR [ebx+22]
$LL21@Reset@2:

; 4226 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4227 : 	{
; 4228 : 		m_aiCivOutOfTechTurn.push_back(-1);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN32@Reset@2
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN32@Reset@2:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, ebx
	je	SHORT $LN35@Reset@2
	mov	DWORD PTR [eax], -1
$LN35@Reset@2:
	inc	DWORD PTR [esi+4]
	sub	edi, 1
	jne	SHORT $LL21@Reset@2

; 4229 : 	}
; 4230 : 
; 4231 : 	m_aiNumSpiesCaught.clear();

	lea	esi, DWORD PTR [ebp+108]
	mov	DWORD PTR [esi+4], ebx
	mov	edi, 22					; 00000016H
	npad	7
$LL18@Reset@2:

; 4232 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4233 : 	{
; 4234 : 		m_aiNumSpiesCaught.push_back(0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN47@Reset@2
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN47@Reset@2:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*4]
	cmp	eax, ebx
	je	SHORT $LN50@Reset@2
	mov	DWORD PTR [eax], ebx
$LN50@Reset@2:
	inc	DWORD PTR [esi+4]
	sub	edi, 1
	jne	SHORT $LL18@Reset@2

; 4235 : 	}
; 4236 : 
; 4237 : 	m_aiNumSpiesKilled.clear();

	lea	esi, DWORD PTR [ebp+212]
	mov	DWORD PTR [esi+4], ebx
	mov	edi, 22					; 00000016H
$LL15@Reset@2:

; 4238 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4239 : 	{
; 4240 : 		m_aiNumSpiesKilled.push_back(0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN62@Reset@2
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN62@Reset@2:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN65@Reset@2
	mov	DWORD PTR [eax], ebx
$LN65@Reset@2:
	inc	DWORD PTR [esi+4]
	sub	edi, 1
	jne	SHORT $LL15@Reset@2

; 4241 : 	}
; 4242 : 
; 4243 : 	m_aiNumSpiesDied.clear();

	lea	esi, DWORD PTR [ebp+316]
	mov	DWORD PTR [esi+4], ebx
	mov	edi, 22					; 00000016H
	npad	2
$LL12@Reset@2:

; 4244 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4245 : 	{
; 4246 : 		m_aiNumSpiesDied.push_back(0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN77@Reset@2
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN77@Reset@2:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, ebx
	je	SHORT $LN80@Reset@2
	mov	DWORD PTR [eax], ebx
$LN80@Reset@2:
	inc	DWORD PTR [esi+4]
	sub	edi, 1
	jne	SHORT $LL12@Reset@2

; 4247 : 	}
; 4248 : 
; 4249 : 	m_aiTurnLastSpyCaught.clear();

	lea	esi, DWORD PTR [ebp+420]
	mov	DWORD PTR [esi+4], ebx
	mov	edi, 22					; 00000016H
$LL9@Reset@2:

; 4250 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4251 : 	{
; 4252 : 		m_aiTurnLastSpyCaught.push_back(-1);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN92@Reset@2
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN92@Reset@2:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*4]
	cmp	eax, ebx
	je	SHORT $LN95@Reset@2
	mov	DWORD PTR [eax], -1
$LN95@Reset@2:
	inc	DWORD PTR [esi+4]
	sub	edi, 1
	jne	SHORT $LL9@Reset@2

; 4253 : 	}
; 4254 : 
; 4255 : 	m_aiTurnLastSpyKilled.clear();

	lea	esi, DWORD PTR [ebp+524]
	mov	DWORD PTR [esi+4], ebx
	mov	edi, 22					; 00000016H
$LL6@Reset@2:

; 4256 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4257 : 	{
; 4258 : 		m_aiTurnLastSpyKilled.push_back(-1);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN107@Reset@2
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN107@Reset@2:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN110@Reset@2
	mov	DWORD PTR [eax], -1
$LN110@Reset@2:
	inc	DWORD PTR [esi+4]
	sub	edi, 1
	jne	SHORT $LL6@Reset@2

; 4259 : 	}
; 4260 : 
; 4261 : 	m_aiTurnLastSpyDied.clear();

	lea	esi, DWORD PTR [ebp+628]
	mov	DWORD PTR [esi+4], ebx
	mov	edi, 22					; 00000016H
	npad	3
$LL3@Reset@2:

; 4262 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4263 : 	{
; 4264 : 		m_aiTurnLastSpyDied.push_back(-1);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN122@Reset@2
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN122@Reset@2:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, ebx
	je	SHORT $LN125@Reset@2
	mov	DWORD PTR [eax], -1
$LN125@Reset@2:
	inc	DWORD PTR [esi+4]
	sub	edi, 1
	jne	SHORT $LL3@Reset@2
	pop	edi
	pop	esi

; 4265 : 	}
; 4266 : 
; 4267 : 	m_bUNCountdownStarted = false;

	mov	BYTE PTR [ebp+732], bl

; 4268 : 	m_iTurnEspionageStarted = -1;

	mov	DWORD PTR [ebp+736], -1
	pop	ebp
	pop	ebx

; 4269 : }

	ret	0
?Reset@CvEspionageAI@@QAEXXZ ENDP			; CvEspionageAI::Reset
_TEXT	ENDS
PUBLIC	?AttemptCoups@CvEspionageAI@@QAEXXZ		; CvEspionageAI::AttemptCoups
EXTRN	?IsDoFAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::IsDoFAccepted
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
; Function compile flags: /Ogtpy
;	COMDAT ?AttemptCoups@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
?AttemptCoups@CvEspionageAI@@QAEXXZ PROC		; CvEspionageAI::AttemptCoups, COMDAT
; _this$ = ecx

; 4672 : {

	push	ebx
	push	ebp
	mov	ebp, ecx

; 4673 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ebp]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ebx, eax

; 4674 : 	for(uint uiSpy = 0; uiSpy < pEspionage->m_aSpyList.size(); uiSpy++)

	xor	edi, edi
	cmp	DWORD PTR [ebx+4], edi
	jbe	$LN6@AttemptCou@2
	push	esi
	npad	5
$LL8@AttemptCou@2:

; 4675 : 	{
; 4676 : 		if (!pEspionage->CanStageCoup(uiSpy))

	push	edi
	mov	ecx, ebx
	call	?CanStageCoup@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::CanStageCoup
	test	al, al
	je	$LN7@AttemptCou@2

; 4677 : 		{
; 4678 : 			continue;
; 4679 : 		}
; 4680 : 	
; 4681 : 		// special Lena fix: no couping on CS that are allies with your friend
; 4682 : 		CvCity* pCity = pEspionage->GetCityWithSpy(uiSpy);

	push	edi
	mov	ecx, ebx
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	esi, eax

; 4683 : 		if (pCity && GET_PLAYER(pCity->getOwner()).isMinorCiv())

	test	esi, esi
	je	SHORT $LN2@AttemptCou@2
	mov	ecx, DWORD PTR [esi+84]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN2@AttemptCou@2

; 4684 : 		{
; 4685 : 			CvMinorCivAI* pMinorCivAI = GET_PLAYER(pCity->getOwner()).GetMinorCivAI();

	mov	ecx, DWORD PTR [esi+84]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI

; 4686 : 			if (pMinorCivAI)

	test	eax, eax
	je	SHORT $LN2@AttemptCou@2

; 4687 : 			{
; 4688 : 				PlayerTypes eCurrentAlly = pMinorCivAI->GetAlly();

	mov	ecx, eax
	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly

; 4689 : 				if (eCurrentAlly != NO_PLAYER && eCurrentAlly != m_pPlayer->GetID() && m_pPlayer->GetDiplomacyAI()->IsDoFAccepted(eCurrentAlly))

	cmp	eax, -1
	je	SHORT $LN2@AttemptCou@2
	mov	ecx, DWORD PTR [ebp]
	cmp	eax, DWORD PTR [ecx+44]
	je	SHORT $LN2@AttemptCou@2
	push	eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsDoFAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsDoFAccepted
	test	al, al
	jne	SHORT $LN7@AttemptCou@2
$LN2@AttemptCou@2:

; 4690 : 				{
; 4691 : 					continue;
; 4692 : 				}
; 4693 : 			}
; 4694 : 		}
; 4695 : 
; 4696 : 		int iChanceOfSuccess = pEspionage->GetCoupChanceOfSuccess(uiSpy);

	push	edi
	mov	ecx, ebx
	call	?GetCoupChanceOfSuccess@CvPlayerEspionage@@QAEHI@Z ; CvPlayerEspionage::GetCoupChanceOfSuccess

; 4697 : 		int iRoll = GC.getGame().getJonRandNum(100, "Random roll to see if we should attempt a coup");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	OFFSET $SG225536
	push	100					; 00000064H
	mov	esi, eax
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 4698 : 		if (iRoll < iChanceOfSuccess)

	cmp	eax, esi
	jge	SHORT $LN7@AttemptCou@2

; 4699 : 		{
; 4700 : 			pEspionage->AttemptCoup(uiSpy);

	push	edi
	mov	ecx, ebx
	call	?AttemptCoup@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::AttemptCoup
$LN7@AttemptCou@2:
	inc	edi
	cmp	edi, DWORD PTR [ebx+4]
	jb	$LL8@AttemptCou@2
	pop	esi
$LN6@AttemptCou@2:
	pop	edi
	pop	ebp
	pop	ebx

; 4701 : 		}
; 4702 : 	}
; 4703 : }

	ret	0
?AttemptCoups@CvEspionageAI@@QAEXXZ ENDP		; CvEspionageAI::AttemptCoups
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvEspionageAI@@@Z	; operator>>
; Function compile flags: /Ogtpy
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvEspionageAI@@@Z
_TEXT	SEGMENT
_iValue$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_uiCount$ = 8						; size = 4
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvEspionageAI@@@Z PROC	; operator>>, COMDAT

; 5632 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi

; 5633 : 	uint uiVersion;
; 5634 : 	loadFrom >> uiVersion;

	mov	edi, DWORD PTR _loadFrom$[esp+20]
	lea	eax, DWORD PTR _uiVersion$[esp+24]
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5635 : 
; 5636 : 	uint uiCount;
; 5637 : 	loadFrom >> uiCount;

	lea	ecx, DWORD PTR _uiCount$[esp+20]
	push	ecx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5638 : 	int iValue;
; 5639 : 	for(uint ui = 0; ui < uiCount; ui++)

	xor	ebx, ebx
	xor	ebp, ebp
	cmp	DWORD PTR _uiCount$[esp+20], ebx
	jbe	SHORT $LN19@operator@8
	mov	esi, DWORD PTR _writeTo$[esp+20]
	add	esi, 4
$LL21@operator@8:

; 5640 : 	{
; 5641 : 		loadFrom >> iValue;

	lea	edx, DWORD PTR _iValue$[esp+24]
	push	edx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5642 : 		writeTo.m_aiCivOutOfTechTurn.push_back(iValue);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN30@operator@8
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN30@operator@8:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, ebx
	je	SHORT $LN33@operator@8
	mov	edx, DWORD PTR _iValue$[esp+24]
	mov	DWORD PTR [eax], edx
$LN33@operator@8:
	inc	DWORD PTR [esi+4]
	inc	ebp
	cmp	ebp, DWORD PTR _uiCount$[esp+20]
	jb	SHORT $LL21@operator@8
$LN19@operator@8:

; 5643 : 	}
; 5644 : 
; 5645 : 	loadFrom >> uiCount;

	lea	eax, DWORD PTR _uiCount$[esp+20]
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5646 : 	for(uint ui = 0; ui < uiCount; ui++)

	xor	ebp, ebp
	cmp	DWORD PTR _uiCount$[esp+20], ebx
	jbe	SHORT $LN16@operator@8
	mov	esi, DWORD PTR _writeTo$[esp+20]
	add	esi, 108				; 0000006cH
	npad	6
$LL18@operator@8:

; 5647 : 	{
; 5648 : 		loadFrom >> iValue;

	lea	ecx, DWORD PTR _iValue$[esp+24]
	push	ecx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5649 : 		writeTo.m_aiNumSpiesCaught.push_back(iValue);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN41@operator@8
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN41@operator@8:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*4]
	cmp	eax, ebx
	je	SHORT $LN44@operator@8
	mov	ecx, DWORD PTR _iValue$[esp+24]
	mov	DWORD PTR [eax], ecx
$LN44@operator@8:
	inc	DWORD PTR [esi+4]
	inc	ebp
	cmp	ebp, DWORD PTR _uiCount$[esp+20]
	jb	SHORT $LL18@operator@8
$LN16@operator@8:

; 5650 : 	}
; 5651 : 
; 5652 : 	loadFrom >> uiCount;

	lea	edx, DWORD PTR _uiCount$[esp+20]
	push	edx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5653 : 	for(uint ui = 0; ui < uiCount; ui++)

	xor	ebp, ebp
	cmp	DWORD PTR _uiCount$[esp+20], ebx
	jbe	SHORT $LN13@operator@8
	mov	esi, DWORD PTR _writeTo$[esp+20]
	add	esi, 212				; 000000d4H
	npad	7
$LL15@operator@8:

; 5654 : 	{
; 5655 : 		loadFrom >> iValue;

	lea	eax, DWORD PTR _iValue$[esp+24]
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5656 : 		writeTo.m_aiNumSpiesKilled.push_back(iValue);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN52@operator@8
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN52@operator@8:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN55@operator@8
	mov	ecx, DWORD PTR _iValue$[esp+24]
	mov	DWORD PTR [eax], ecx
$LN55@operator@8:
	inc	DWORD PTR [esi+4]
	inc	ebp
	cmp	ebp, DWORD PTR _uiCount$[esp+20]
	jb	SHORT $LL15@operator@8
$LN13@operator@8:

; 5657 : 	}
; 5658 : 
; 5659 : 	loadFrom >> uiCount;

	lea	edx, DWORD PTR _uiCount$[esp+20]
	push	edx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5660 : 	for(uint ui = 0; ui < uiCount; ui++)

	xor	ebp, ebp
	cmp	DWORD PTR _uiCount$[esp+20], ebx
	jbe	SHORT $LN10@operator@8
	mov	esi, DWORD PTR _writeTo$[esp+20]
	add	esi, 316				; 0000013cH
	npad	7
$LL12@operator@8:

; 5661 : 	{
; 5662 : 		loadFrom >> iValue;

	lea	eax, DWORD PTR _iValue$[esp+24]
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5663 : 		writeTo.m_aiNumSpiesDied.push_back(iValue);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN63@operator@8
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN63@operator@8:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN66@operator@8
	mov	ecx, DWORD PTR _iValue$[esp+24]
	mov	DWORD PTR [eax], ecx
$LN66@operator@8:
	inc	DWORD PTR [esi+4]
	inc	ebp
	cmp	ebp, DWORD PTR _uiCount$[esp+20]
	jb	SHORT $LL12@operator@8
$LN10@operator@8:

; 5664 : 	}
; 5665 : 
; 5666 : 	loadFrom >> uiCount;

	lea	edx, DWORD PTR _uiCount$[esp+20]
	push	edx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5667 : 	for(uint ui = 0; ui < uiCount; ui++)

	xor	ebp, ebp
	cmp	DWORD PTR _uiCount$[esp+20], ebx
	jbe	SHORT $LN7@operator@8
	mov	esi, DWORD PTR _writeTo$[esp+20]
	add	esi, 420				; 000001a4H
	npad	7
$LL9@operator@8:

; 5668 : 	{
; 5669 : 		loadFrom >> iValue;

	lea	eax, DWORD PTR _iValue$[esp+24]
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5670 : 		writeTo.m_aiTurnLastSpyCaught.push_back(iValue);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN74@operator@8
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN74@operator@8:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN77@operator@8
	mov	ecx, DWORD PTR _iValue$[esp+24]
	mov	DWORD PTR [eax], ecx
$LN77@operator@8:
	inc	DWORD PTR [esi+4]
	inc	ebp
	cmp	ebp, DWORD PTR _uiCount$[esp+20]
	jb	SHORT $LL9@operator@8
$LN7@operator@8:

; 5671 : 	}
; 5672 : 
; 5673 : 	loadFrom >> uiCount;

	lea	edx, DWORD PTR _uiCount$[esp+20]
	push	edx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5674 : 	for(uint ui = 0; ui < uiCount; ui++)

	xor	ebp, ebp
	cmp	DWORD PTR _uiCount$[esp+20], ebx
	jbe	SHORT $LN4@operator@8
	mov	esi, DWORD PTR _writeTo$[esp+20]
	add	esi, 524				; 0000020cH
	npad	7
$LL6@operator@8:

; 5675 : 	{
; 5676 : 		loadFrom >> iValue;

	lea	eax, DWORD PTR _iValue$[esp+24]
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5677 : 		writeTo.m_aiTurnLastSpyKilled.push_back(iValue);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN85@operator@8
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN85@operator@8:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN88@operator@8
	mov	ecx, DWORD PTR _iValue$[esp+24]
	mov	DWORD PTR [eax], ecx
$LN88@operator@8:
	inc	DWORD PTR [esi+4]
	inc	ebp
	cmp	ebp, DWORD PTR _uiCount$[esp+20]
	jb	SHORT $LL6@operator@8
$LN4@operator@8:

; 5678 : 	}
; 5679 : 
; 5680 : 	loadFrom >> uiCount;

	lea	edx, DWORD PTR _uiCount$[esp+20]
	push	edx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 5681 : 	for(uint ui = 0; ui < uiCount; ui++)

	xor	ebp, ebp
	cmp	DWORD PTR _uiCount$[esp+20], ebx
	jbe	SHORT $LN1@operator@8
	mov	esi, DWORD PTR _writeTo$[esp+20]
	add	esi, 628				; 00000274H
	npad	7
$LL3@operator@8:

; 5682 : 	{
; 5683 : 		loadFrom >> iValue;

	lea	eax, DWORD PTR _iValue$[esp+24]
	push	eax
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5684 : 		writeTo.m_aiTurnLastSpyDied.push_back(iValue);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN96@operator@8
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN96@operator@8:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN99@operator@8
	mov	ecx, DWORD PTR _iValue$[esp+24]
	mov	DWORD PTR [eax], ecx
$LN99@operator@8:
	inc	DWORD PTR [esi+4]
	inc	ebp
	cmp	ebp, DWORD PTR _uiCount$[esp+20]
	jb	SHORT $LL3@operator@8
$LN1@operator@8:

; 5685 : 	}
; 5686 : 
; 5687 : 	loadFrom >> writeTo.m_bUNCountdownStarted;

	mov	esi, DWORD PTR _writeTo$[esp+20]
	lea	edx, DWORD PTR [esi+732]
	push	edx
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 5688 : 	loadFrom >> writeTo.m_iTurnEspionageStarted;

	add	esi, 736				; 000002e0H
	push	esi
	mov	ecx, edi
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 5689 : 	
; 5690 : 	return loadFrom;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5691 : }

	add	esp, 8
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvEspionageAI@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z PROC ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebx
	mov	ebx, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [ebx+8]
	push	edi
	mov	BYTE PTR [ebx+236], 0
	cmp	DWORD PTR [ebx+4], eax
	jne	SHORT $LN1@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize
$LN1@push_back@2:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	edi, DWORD PTR [edx+ecx*4]
	test	edi, edi
	je	SHORT $LN4@push_back@2
	push	esi
	mov	esi, DWORD PTR _element$[esp+8]
	mov	ecx, 7
	rep movsd
	pop	esi
$LN4@push_back@2:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [ebx+4], ecx
	pop	ebx

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z ENDP ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z PROC ; FStaticVector<enum TechTypes,1,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+16], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@3

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize
$LN1@push_back@3:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN4@push_back@3
	mov	edx, DWORD PTR _element$[esp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN4@push_back@3:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAEIABW4TechTypes@@@Z ENDP ; FStaticVector<enum TechTypes,1,0,297,0>::push_back
_TEXT	ENDS
PUBLIC	??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	mov	eax, ecx

; 471  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 472  : 		}

	ret	0
??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??0?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	mov	eax, ecx

; 471  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 472  : 		}

	ret	0
??0?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	mov	eax, ecx

; 471  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 472  : 		}

	ret	0
??0?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	mov	eax, ecx

; 471  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 472  : 		}

	ret	0
??0?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::vector<CvCity *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	mov	eax, ecx

; 471  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 472  : 		}

	ret	0
??0?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy, COMDAT
; _this$ = ecx

; 220  : 	{

	push	edi

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){

	mov	edi, DWORD PTR _uiNumElements$[esp]
	test	edi, edi
	jbe	SHORT $LN1@Destroy
	push	esi
	mov	esi, DWORD PTR _pVal$[esp+4]
	npad	2
$LL3@Destroy:

; 223  : 				pVal[i].~T();

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [esi+12]
	cmp	eax, ecx
	je	SHORT $LN12@Destroy
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN12@Destroy:
	add	esi, 20					; 00000014H
	sub	edi, 1
	jne	SHORT $LL3@Destroy
	pop	esi
$LN1@Destroy:
	pop	edi

; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::erase, COMDAT
; _this$ = ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	edx, DWORD PTR __First_arg$[esp-4]
	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp]
	push	esi

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);
; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	esi, DWORD PTR __Last_arg$[esp+4]
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [ebp], edx
	cmp	edx, esi
	je	SHORT $LN29@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR [edi+8]
	sub	eax, esi
	sar	eax, 2
	lea	ecx, DWORD PTR [eax*4]
	push	ebx
	lea	ebx, DWORD PTR [ecx+edx]
	test	eax, eax
	jle	SHORT $LN26@erase
	push	ecx
	push	esi
	push	ecx
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN26@erase:

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);
; 1049 : 			_Mylast = _Ptr;

	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN29@erase:
	pop	edi
	pop	esi

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, ebp
	pop	ebp

; 1055 : #endif
; 1056 : 		}

	ret	12					; 0000000cH
?erase@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@0@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 1135 : 		}

	ret	0
?_Tidy@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Tidy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@std@@@Z
_TEXT	SEGMENT
$T244730 = -4						; size = 1
__Cat$244734 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T244730[esp+4], 0
	mov	eax, DWORD PTR $T244730[esp+4]
	mov	ecx, DWORD PTR __Cat$244734[esp+4]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Count$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >

; 943  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@std@@@Z
_TEXT	SEGMENT
$T244739 = -4						; size = 1
__Cat$244744 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T244739[esp+4], 0
	mov	eax, DWORD PTR $T244739[esp+4]
	mov	ecx, DWORD PTR __Cat$244744[esp+4]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Count$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >

; 943  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z ; stdext::unchecked_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z
_TEXT	SEGMENT
$T244748 = -4						; size = 1
__Cat$244754 = -4					; size = 1
$T244750 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z PROC ; stdext::unchecked_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ecx

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	BYTE PTR $T244748[esp+4], 0
	mov	eax, DWORD PTR $T244748[esp+4]
	mov	ecx, DWORD PTR __Cat$244754[esp+4]
	mov	edx, DWORD PTR $T244750[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Copy_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>

; 3607 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_copy@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z ENDP ; stdext::unchecked_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@std@@@Z
_TEXT	SEGMENT
$T244762 = -4						; size = 1
__Cat$244767 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T244762[esp+4], 0
	mov	eax, DWORD PTR $T244762[esp+4]
	mov	ecx, DWORD PTR __Cat$244767[esp+4]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Count$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >

; 943  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@0AAV?$allocator@UHeistLocation@@@0@@Z ; std::_Destroy_range<std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@0AAV?$allocator@UHeistLocation@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@0AAV?$allocator@UHeistLocation@@@0@@Z PROC ; std::_Destroy_range<std::allocator<HeistLocation> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@0AAV?$allocator@UHeistLocation@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@0AAV?$allocator@USpyNotificationMessage@@@0@@Z ; std::_Destroy_range<std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Destroy_range@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@0AAV?$allocator@USpyNotificationMessage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@0AAV?$allocator@USpyNotificationMessage@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SpyNotificationMessage> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@0AAV?$allocator@USpyNotificationMessage@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z ; std::fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z PROC ; std::fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	jmp	??$_Fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z ; std::_Fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>
??$fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z ENDP ; std::fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z ; stdext::_Unchecked_move_backward<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z
_TEXT	SEGMENT
$T244810 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$244814 = 16					; size = 1
$T244793 = 16						; size = 1
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z PROC ; stdext::_Unchecked_move_backward<IntrigueNotificationMessage *,IntrigueNotificationMessage *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ecx

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$244814[esp]
	mov	edx, DWORD PTR $T244793[esp]
	mov	BYTE PTR $T244810[esp+4], 0
	mov	eax, DWORD PTR $T244810[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Copy_backward_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>

; 3697 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z ENDP ; stdext::_Unchecked_move_backward<IntrigueNotificationMessage *,IntrigueNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@0AAV?$allocator@UScoreCityEntry@@@0@@Z ; std::_Destroy_range<std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@0AAV?$allocator@UScoreCityEntry@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@0AAV?$allocator@UScoreCityEntry@@@0@@Z PROC ; std::_Destroy_range<std::allocator<ScoreCityEntry> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@0AAV?$allocator@UScoreCityEntry@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAVCvCity@@IPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@IABQAV1@AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvCity * *,unsigned int,CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAPAVCvCity@@IPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@IABQAV1@AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAPAVCvCity@@IPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@IABQAV1@AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CvCity * *,unsigned int,CvCity *,std::allocator<CvCity *> >, COMDAT

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN9@Uninit_fil@4
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL11@Uninit_fil@4:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL11@Uninit_fil@4
	pop	esi
$LN9@Uninit_fil@4:

; 420  : 	}

	ret	0
??$_Uninit_fill_n@PAPAVCvCity@@IPAV1@V?$allocator@PAVCvCity@@@std@@@std@@YAXPAPAVCvCity@@IABQAV1@AAV?$allocator@PAVCvCity@@@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CvCity * *,unsigned int,CvCity *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<CvCity * *,CvCity * *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_uninitialized_move@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<CvCity * *,CvCity * *,std::allocator<CvCity *> >, COMDAT

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN14@Unchecked_@5
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN14@Unchecked_@5:
	pop	edi
	mov	eax, esi
	pop	esi

; 865  : 	}

	ret	0
??$_Unchecked_uninitialized_move@PAPAVCvCity@@PAPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAPAPAVCvCity@@PAPAV1@00AAV?$allocator@PAVCvCity@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<CvCity * *,CvCity * *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@@Z ; std::allocator<IntrigueNotificationMessage>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@@Z PROC ; std::allocator<IntrigueNotificationMessage>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 161  : 		}

	ret	4
?destroy@?$allocator@UIntrigueNotificationMessage@@@std@@QAEXPAUIntrigueNotificationMessage@@@Z ENDP ; std::allocator<IntrigueNotificationMessage>::destroy
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<HeistLocation *,HeistLocation *,std::allocator<HeistLocation>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T244979 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$244982 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<HeistLocation *,HeistLocation *,std::allocator<HeistLocation>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	ecx, DWORD PTR __Cat$244982[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T244979[esp+4], 0
	mov	eax, DWORD PTR $T244979[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >

; 208  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Uninit_move@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@U_Undefined_move_tag@3@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<HeistLocation *,HeistLocation *,std::allocator<HeistLocation>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@U_Undefined_move_tag@3@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@U_Undefined_move_tag@3@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T244998 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$245001 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@U_Undefined_move_tag@3@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	ecx, DWORD PTR __Cat$245001[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T244998[esp+4], 0
	mov	eax, DWORD PTR $T244998[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >

; 208  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Uninit_move@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@U_Undefined_move_tag@3@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@U_Undefined_move_tag@3@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Uninit_move@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@U_Undefined_move_tag@3@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T245017 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$245020 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@U_Undefined_move_tag@3@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	ecx, DWORD PTR __Cat$245020[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T245017[esp+4], 0
	mov	eax, DWORD PTR $T245017[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >

; 208  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Uninit_move@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@U_Undefined_move_tag@3@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z
_TEXT	SEGMENT
$T245092 = -8						; size = 1
$T245027 = -4						; size = 4
__Cat$245096 = 8					; size = 1
$T245094 = 8						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z PROC ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>, COMDAT

; 3124 : 	if (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	sub	esp, 8
	cmp	edx, eax
	je	SHORT $LN6@Insertion_
	push	esi

; 3125 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	esi, DWORD PTR [edx+8]
	cmp	esi, eax
	je	SHORT $LN73@Insertion_
	push	ebx
	mov	ebx, DWORD PTR $T245094[esp+12]
	push	ebp
	push	edi
	jmp	SHORT $LN7@Insertion_
$LL72@Insertion_:
	mov	edx, DWORD PTR __First$[esp+20]
$LN7@Insertion_:

; 3126 : 			{	// order next element
; 3127 : 			_BidIt _Next1 = _Next;
; 3128 : 			_Ty _Val = *_Next;

	mov	edi, DWORD PTR [esi+4]

; 3129 : 
; 3130 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

	cmp	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [esi]
	mov	ecx, esi
	jle	SHORT $LN5@Insertion_

; 3131 : 				{	// found new earliest element, move to front
; 3132 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	BYTE PTR $T245092[esp+24], 0
	mov	ecx, DWORD PTR $T245092[esp+24]
	push	ecx
	mov	ecx, DWORD PTR __Cat$245096[esp+24]
	push	ecx
	push	ebx
	lea	eax, DWORD PTR [esi+8]
	push	eax
	push	esi
	push	edx
	lea	edx, DWORD PTR $T245027[esp+48]
	push	edx
	call	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>

; 3133 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[esp+48]
	mov	DWORD PTR [eax], ebp
	mov	ecx, DWORD PTR __First$[esp+48]
	add	esp, 28					; 0000001cH

; 3134 : 				}
; 3135 : 			else

	jmp	SHORT $LN75@Insertion_
$LN5@Insertion_:

; 3136 : 				{	// look for insertion point after first
; 3137 : 				for (_BidIt _First1 = _Next1;
; 3138 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3139 : 					_Next1 = _First1)

	cmp	edi, DWORD PTR [esi-4]
	lea	eax, DWORD PTR [esi-8]
	jle	SHORT $LN1@Insertion_
$LL3@Insertion_:

; 3140 : 					*_Next1 = *_First1;	// move hole down

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, eax
	sub	eax, 8
	cmp	edi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_
$LN1@Insertion_:

; 3141 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebp
$LN75@Insertion_:

; 3125 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	add	esi, 8

; 3141 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx+4], edi
	cmp	esi, DWORD PTR __Last$[esp+20]
	jne	SHORT $LL72@Insertion_
	pop	edi
	pop	ebp
	pop	ebx
$LN73@Insertion_:
	pop	esi
$LN6@Insertion_:

; 3142 : 				}
; 3143 : 			}
; 3144 : 	}

	add	esp, 8
	ret	0
??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ENDP ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T245166 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@@Z PROC ; std::lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 2313 : 	{	// find first element not before _Val, using _Pred

	push	ecx

; 2314 : 	_ASSIGN_FROM_BASE(_First,

	mov	eax, DWORD PTR __Pred$[esp]
	mov	ecx, DWORD PTR __Val$[esp]
	mov	edx, DWORD PTR __Last$[esp]
	push	0
	push	eax
	mov	eax, DWORD PTR __First$[esp+8]
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T245166[esp+24]
	push	ecx
	call	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>

; 2315 : 		_Lower_bound(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val, _Pred, _Dist_type(_First)));
; 2316 : 	return _First;

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+24]
	mov	DWORD PTR [eax], edx

; 2317 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ENDP ; std::lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T245173 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@@Z PROC ; std::upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 2384 : 	{	// find first element that _Val is before, using _Pred

	push	ecx

; 2385 : 	_ASSIGN_FROM_BASE(_First,

	mov	eax, DWORD PTR __Pred$[esp]
	mov	ecx, DWORD PTR __Val$[esp]
	mov	edx, DWORD PTR __Last$[esp]
	push	0
	push	eax
	mov	eax, DWORD PTR __First$[esp+8]
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T245173[esp+24]
	push	ecx
	call	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>

; 2386 : 		_Upper_bound(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val, _Pred, _Dist_type(_First)));
; 2387 : 	return _First;

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+24]
	mov	DWORD PTR [eax], edx

; 2388 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ENDP ; std::upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z
_TEXT	SEGMENT
$T245245 = -8						; size = 1
$T245180 = -4						; size = 4
__Cat$245249 = 8					; size = 1
$T245247 = 8						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
___formal$ = 20						; size = 4
??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z PROC ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>, COMDAT

; 3124 : 	if (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	sub	esp, 8
	cmp	edx, eax
	je	SHORT $LN6@Insertion_@2
	push	esi

; 3125 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	esi, DWORD PTR [edx+8]
	cmp	esi, eax
	je	SHORT $LN73@Insertion_@2
	push	ebx
	mov	ebx, DWORD PTR $T245247[esp+12]
	push	ebp
	push	edi
	jmp	SHORT $LN7@Insertion_@2
$LL72@Insertion_@2:
	mov	edx, DWORD PTR __First$[esp+20]
$LN7@Insertion_@2:

; 3126 : 			{	// order next element
; 3127 : 			_BidIt _Next1 = _Next;
; 3128 : 			_Ty _Val = *_Next;

	mov	edi, DWORD PTR [esi+4]

; 3129 : 
; 3130 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

	cmp	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [esi]
	mov	ecx, esi
	jge	SHORT $LN5@Insertion_@2

; 3131 : 				{	// found new earliest element, move to front
; 3132 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	BYTE PTR $T245245[esp+24], 0
	mov	ecx, DWORD PTR $T245245[esp+24]
	push	ecx
	mov	ecx, DWORD PTR __Cat$245249[esp+24]
	push	ecx
	push	ebx
	lea	eax, DWORD PTR [esi+8]
	push	eax
	push	esi
	push	edx
	lea	edx, DWORD PTR $T245180[esp+48]
	push	edx
	call	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>

; 3133 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[esp+48]
	mov	DWORD PTR [eax], ebp
	mov	ecx, DWORD PTR __First$[esp+48]
	add	esp, 28					; 0000001cH

; 3134 : 				}
; 3135 : 			else

	jmp	SHORT $LN75@Insertion_@2
$LN5@Insertion_@2:

; 3136 : 				{	// look for insertion point after first
; 3137 : 				for (_BidIt _First1 = _Next1;
; 3138 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);
; 3139 : 					_Next1 = _First1)

	cmp	edi, DWORD PTR [esi-4]
	lea	eax, DWORD PTR [esi-8]
	jge	SHORT $LN1@Insertion_@2
$LL3@Insertion_@2:

; 3140 : 					*_Next1 = *_First1;	// move hole down

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, eax
	sub	eax, 8
	cmp	edi, DWORD PTR [eax+4]
	jl	SHORT $LL3@Insertion_@2
$LN1@Insertion_@2:

; 3141 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebp
$LN75@Insertion_@2:

; 3125 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	add	esi, 8

; 3141 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx+4], edi
	cmp	esi, DWORD PTR __Last$[esp+20]
	jne	SHORT $LL72@Insertion_@2
	pop	edi
	pop	ebp
	pop	ebx
$LN73@Insertion_@2:
	pop	esi
$LN6@Insertion_@2:

; 3142 : 				}
; 3143 : 			}
; 3144 : 	}

	add	esp, 8
	ret	0
??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ENDP ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T245319 = -4						; size = 1
$T245320 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryLowEval@@@Z PROC ; stdext::unchecked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ecx

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR $T245320[esp]
	mov	edx, DWORD PTR __Pred$[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T245319[esp+8], 0
	mov	eax, DWORD PTR $T245319[esp+8]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last2$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+16]
	push	eax
	mov	eax, DWORD PTR __Last1$[esp+20]
	push	ecx
	mov	ecx, DWORD PTR __First1$[esp+24]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
	mov	eax, esi
	pop	esi

; 5160 : 	}

	pop	ecx
	ret	0
??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryLowEval@@@Z ENDP ; stdext::unchecked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Unchecked_merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@@Z ; stdext::_Unchecked_merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T245328 = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$_Unchecked_merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@@Z PROC ; stdext::_Unchecked_merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>, COMDAT

; 5227 : 	{

	push	ecx

; 5228 : 		return _STD _Merge_backward(_First1, _Last1, _First2, _Last2, _Dest, _Pred, _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Pred$[esp]
	mov	edx, DWORD PTR __Dest$[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T245328[esp+8], 0
	mov	eax, DWORD PTR $T245328[esp+8]
	push	eax
	mov	eax, DWORD PTR __Last2$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __First2$[esp+12]
	push	edx
	mov	edx, DWORD PTR __Last1$[esp+16]
	push	eax
	mov	eax, DWORD PTR __First1$[esp+20]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
	add	esp, 32					; 00000020H
	mov	eax, esi
	pop	esi

; 5229 : 	}

	pop	ecx
	ret	0
??$_Unchecked_merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@@Z ENDP ; stdext::_Unchecked_merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ; std::lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T245332 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@@Z PROC ; std::lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 2313 : 	{	// find first element not before _Val, using _Pred

	push	ecx

; 2314 : 	_ASSIGN_FROM_BASE(_First,

	mov	eax, DWORD PTR __Pred$[esp]
	mov	ecx, DWORD PTR __Val$[esp]
	mov	edx, DWORD PTR __Last$[esp]
	push	0
	push	eax
	mov	eax, DWORD PTR __First$[esp+8]
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T245332[esp+24]
	push	ecx
	call	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>

; 2315 : 		_Lower_bound(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val, _Pred, _Dist_type(_First)));
; 2316 : 	return _First;

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+24]
	mov	DWORD PTR [eax], edx

; 2317 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ENDP ; std::lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ; std::upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T245339 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@@Z PROC ; std::upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 2384 : 	{	// find first element that _Val is before, using _Pred

	push	ecx

; 2385 : 	_ASSIGN_FROM_BASE(_First,

	mov	eax, DWORD PTR __Pred$[esp]
	mov	ecx, DWORD PTR __Val$[esp]
	mov	edx, DWORD PTR __Last$[esp]
	push	0
	push	eax
	mov	eax, DWORD PTR __First$[esp+8]
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T245339[esp+24]
	push	ecx
	call	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>

; 2386 : 		_Upper_bound(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val, _Pred, _Dist_type(_First)));
; 2387 : 	return _First;

	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+24]
	mov	DWORD PTR [eax], edx

; 2388 : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ENDP ; std::upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T245388 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Vptr$245398 = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	edi, DWORD PTR __First$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR __Next$[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
	npad	1
$LL6@Uninit_cop@6:

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	edi, DWORD PTR __Last$[ebp]
	je	$LN4@Uninit_cop@6

; 131  : 		_Al.construct(_Dest, *_First);

	mov	DWORD PTR __Vptr$245398[ebp], esi
	mov	DWORD PTR $T245388[ebp], esi
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	esi, ebx
	je	SHORT $LN18@Uninit_cop@6
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], ecx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], edx
	mov	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
	mov	ecx, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], ecx
	mov	edx, DWORD PTR [edi+32]
	lea	eax, DWORD PTR [edi+36]
	lea	ecx, DWORD PTR [esi+36]
	push	eax
	mov	DWORD PTR [esi+32], edx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	cl, BYTE PTR [edi+64]
	mov	BYTE PTR [esi+64], cl
$LN18@Uninit_cop@6:
	add	esi, 68					; 00000044H
	mov	BYTE PTR __$EHRec$[ebp+12], bl
	mov	DWORD PTR __Dest$[ebp], esi
	add	edi, 68					; 00000044H
	jmp	SHORT $LL6@Uninit_cop@6
__catch$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	mov	esi, DWORD PTR __Next$[ebp]
	mov	edi, DWORD PTR __Dest$[ebp]
	cmp	esi, edi
	je	SHORT $LN1@Uninit_cop@6
$LL3@Uninit_cop@6:
	lea	ecx, DWORD PTR [esi+36]

; 134  : 		_Al.destroy(_Next);

	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	add	esi, 68					; 00000044H
	cmp	esi, edi
	jne	SHORT $LL3@Uninit_cop@6
$LN1@Uninit_cop@6:

; 135  : 	_RERAISE;

	xor	ebx, ebx
	push	ebx
	push	ebx
	call	__CxxThrowException@8
$LN48@Uninit_cop@6:
$LN4@Uninit_cop@6:

; 136  : 	_CATCH_END
; 137  : 	return (_Dest);
; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN47@Uninit_cop@6:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$245398[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245388[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
PUBLIC	??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T245601 = 12						; size = 1
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Cat$245605 = 28					; size = 1
$T245603 = 28						; size = 1
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>, COMDAT

; 2594 : 	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 2595 : 	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 2596 : 	_DEBUG_POINTER(_Dest);
; 2597 : 	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)

	mov	eax, DWORD PTR __First1$[esp-4]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Last1$[esp+4]
	cmp	eax, esi
	je	SHORT $LN44@Merge@6
$LL10@Merge@6:
	mov	edx, DWORD PTR __First2$[esp+4]
	cmp	edx, DWORD PTR __Last2$[esp+4]
	je	SHORT $LN68@Merge@6

; 2598 : 		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))

	mov	ebx, DWORD PTR [edx+4]
	cmp	ebx, DWORD PTR [eax+4]
	jle	SHORT $LN2@Merge@6

; 2599 : 			*_Dest = *_First2, ++_First2;

	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Dest$[esp+4]
	mov	DWORD PTR [edx+4], ecx
	add	DWORD PTR __First2$[esp+4], 8

; 2600 : 		else

	jmp	SHORT $LN4@Merge@6
$LN2@Merge@6:

; 2601 : 			*_Dest = *_First1, ++_First1;

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Dest$[esp+4]
	mov	DWORD PTR [edx+4], ecx
	add	eax, 8
$LN4@Merge@6:
	mov	ecx, DWORD PTR __Dest$[esp+4]
	add	ecx, 8
	mov	DWORD PTR __Dest$[esp+4], ecx
	cmp	eax, esi
	jne	SHORT $LL10@Merge@6
$LN68@Merge@6:

; 2602 : 
; 2603 : 	_Dest = _STDEXT unchecked_copy(_First1, _Last1, _Dest);	// copy any tail

	cmp	eax, esi
	je	SHORT $LN44@Merge@6
	npad	3
$LL46@Merge@6:
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	add	eax, 8
	add	ecx, 8
	cmp	eax, esi
	jne	SHORT $LL46@Merge@6
$LN44@Merge@6:

; 2604 : 	return (_STDEXT unchecked_copy(_First2, _Last2, _Dest));

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	DWORD PTR __Dest$[esp+4], ecx
	mov	edx, DWORD PTR __Cat$245605[esp+4]
	mov	BYTE PTR $T245601[esp+4], 0
	mov	eax, DWORD PTR $T245601[esp+4]
	push	eax
	mov	eax, DWORD PTR $T245603[esp+8]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+12]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR __Last2$[esp+20]
	push	ecx
	push	edx
	push	esi
	call	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH
	mov	eax, esi
	pop	esi
	pop	ebx

; 2605 : 	}

	ret	0
??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T245666 = -4						; size = 1
$T245641 = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Cat$245670 = 16					; size = 1
$T245668 = 16						; size = 1
__Cat$245645 = 16					; size = 1
$T245643 = 16						; size = 1
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
___formal$ = 36						; size = 1
??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 2839 : 	{	// merge backwards to _Dest, using _Pred

	push	ecx

; 2840 : 	for (; ; )
; 2841 : 		if (_First1 == _Last1)

	mov	edx, DWORD PTR __First1$[esp]
	mov	ecx, DWORD PTR __Last1$[esp]
	mov	eax, DWORD PTR __Last2$[esp]
	push	esi
	mov	esi, DWORD PTR __First2$[esp+4]
	push	edi
	cmp	edx, ecx
	je	SHORT $LN61@Merge_back@2
$LL8@Merge_back@2:

; 2843 : 		else if (_First2 == _Last2)

	cmp	esi, eax
	je	$LN62@Merge_back@2

; 2845 : 		else if (_DEBUG_LT_PRED(_Pred, *--_Last2, *--_Last1))

	mov	edx, DWORD PTR [eax-4]
	sub	eax, 8
	sub	ecx, 8
	mov	DWORD PTR __Last1$[esp+8], ecx
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN2@Merge_back@2

; 2846 : 			*--_Dest = *_Last1, ++_Last2;

	mov	edx, DWORD PTR __Dest$[esp+8]
	sub	edx, 8
	mov	DWORD PTR __Dest$[esp+8], edx
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [edx], edi
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR __Dest$[esp+8]
	mov	DWORD PTR [edx+4], ecx

; 2847 : 		else

	mov	ecx, DWORD PTR __Last1$[esp+8]
	add	eax, 8
	jmp	SHORT $LN57@Merge_back@2
$LN2@Merge_back@2:

; 2848 : 			*--_Dest = *_Last2, ++_Last1;

	mov	ecx, DWORD PTR __Dest$[esp+8]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 8
	mov	DWORD PTR __Dest$[esp+8], ecx
	mov	DWORD PTR [ecx], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Dest$[esp+8]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR __Last1$[esp+8]
	add	ecx, 8
	mov	DWORD PTR __Last1$[esp+8], ecx
$LN57@Merge_back@2:
	mov	edx, DWORD PTR __First1$[esp+8]
	cmp	edx, ecx
	jne	SHORT $LL8@Merge_back@2
$LN61@Merge_back@2:

; 2842 : 			return (_STDEXT unchecked_copy_backward(_First2, _Last2, _Dest));

	mov	edx, DWORD PTR __Cat$245645[esp+8]
	mov	BYTE PTR $T245641[esp+12], 0
	mov	ecx, DWORD PTR $T245641[esp+12]
	push	ecx
	mov	ecx, DWORD PTR $T245643[esp+12]
	push	edx
	mov	edx, DWORD PTR __Dest$[esp+16]
	push	ecx
	push	edx
	push	eax
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+32]
	push	esi
	call	??$_Copy_backward_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>

; 2844 : 			return (_STDEXT unchecked_copy_backward(_First1, _Last1, _Dest));

	add	esp, 28					; 0000001cH
	pop	edi
	mov	eax, esi
	pop	esi

; 2849 : 	}

	pop	ecx
	ret	0
$LN62@Merge_back@2:

; 2844 : 			return (_STDEXT unchecked_copy_backward(_First1, _Last1, _Dest));

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	BYTE PTR $T245666[esp+12], 0
	mov	eax, DWORD PTR $T245666[esp+12]
	push	eax
	mov	eax, DWORD PTR __Cat$245670[esp+12]
	push	eax
	mov	eax, DWORD PTR $T245668[esp+16]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+20]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 28					; 0000001cH
	pop	edi
	mov	eax, esi
	pop	esi

; 2849 : 	}

	pop	ecx
	ret	0
??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T245755 = -4						; size = 1
$T245761 = -4						; size = 4
$T245757 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
$T245756 = 48						; size = 1
__Pred$ = 48						; size = 1
??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z PROC ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ecx
	push	ebx
	push	esi
	xor	ebx, ebx
	mov	DWORD PTR $T245761[esp+12], ebx

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR $T245756[esp+8]
	mov	edx, DWORD PTR __Pred$[esp+8]
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	BYTE PTR $T245755[esp+12], bl
	mov	eax, DWORD PTR $T245755[esp+12]
	push	eax
	push	ecx
	push	edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	ecx, DWORD PTR __Dest$[esp+56]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last2$[esp+40]
	mov	eax, DWORD PTR __First2$[esp+40]
	mov	ecx, DWORD PTR __Last1$[esp+40]
	mov	DWORD PTR $T245757[esp+44], esp
	push	edx
	mov	edx, DWORD PTR __First1$[esp+44]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryHighEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval,std::forward_iterator_tag>
	mov	eax, DWORD PTR __Dest$[esp+60]
	add	esp, 52					; 00000034H
	cmp	eax, ebx
	je	SHORT $LN25@unchecked_@9
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN25@unchecked_@9:
	mov	eax, esi

; 5160 : 	}

	pop	esi
	pop	ebx
	pop	ecx
	ret	0
??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z ENDP ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T245801 = -4						; size = 1
$T245802 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z PROC ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ecx

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR $T245802[esp]
	mov	edx, DWORD PTR __Pred$[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T245801[esp+8], 0
	mov	eax, DWORD PTR $T245801[esp+8]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last2$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+16]
	push	eax
	mov	eax, DWORD PTR __Last1$[esp+20]
	push	ecx
	mov	ecx, DWORD PTR __First1$[esp+24]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
	mov	eax, esi
	pop	esi

; 5160 : 	}

	pop	ecx
	ret	0
??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryHighEval@@@Z ENDP ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00Urandom_access_iterator_tag@0@@Z ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00Urandom_access_iterator_tag@0@@Z PROC ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 1713 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __Mid$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	push	0
	push	0
	push	eax
	push	ecx
	push	edx
	call	??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
	add	esp, 20					; 00000014H

; 1714 : 	}

	ret	0
??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00Urandom_access_iterator_tag@0@@Z ENDP ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T245819 = -4						; size = 1
$T245825 = -4						; size = 4
$T245821 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 20
$T245820 = 48						; size = 1
__Pred$ = 48						; size = 1
??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z PROC ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ecx
	push	ebx
	push	esi
	xor	ebx, ebx
	mov	DWORD PTR $T245825[esp+12], ebx

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR $T245820[esp+8]
	mov	edx, DWORD PTR __Pred$[esp+8]
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	BYTE PTR $T245819[esp+12], bl
	mov	eax, DWORD PTR $T245819[esp+12]
	push	eax
	push	ecx
	push	edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	ecx, DWORD PTR __Dest$[esp+56]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last2$[esp+40]
	mov	eax, DWORD PTR __First2$[esp+40]
	mov	ecx, DWORD PTR __Last1$[esp+40]
	mov	DWORD PTR $T245821[esp+44], esp
	push	edx
	mov	edx, DWORD PTR __First1$[esp+44]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	??$_Merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@Uforward_iterator_tag@2@@std@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@0@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@000V10@UScoreCityEntryLowEval@@Uforward_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval,std::forward_iterator_tag>
	mov	eax, DWORD PTR __Dest$[esp+60]
	add	esp, 52					; 00000034H
	cmp	eax, ebx
	je	SHORT $LN25@unchecked_@10
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN25@unchecked_@10:
	mov	eax, esi

; 5160 : 	}

	pop	esi
	pop	ebx
	pop	ecx
	ret	0
??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z ENDP ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T245865 = -4						; size = 1
$T245866 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z PROC ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ecx

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR $T245866[esp]
	mov	edx, DWORD PTR __Pred$[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T245865[esp+8], 0
	mov	eax, DWORD PTR $T245865[esp+8]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last2$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+16]
	push	eax
	mov	eax, DWORD PTR __Last1$[esp+20]
	push	ecx
	mov	ecx, DWORD PTR __First1$[esp+24]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
	mov	eax, esi
	pop	esi

; 5160 : 	}

	pop	ecx
	ret	0
??$unchecked_merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@000V12@UScoreCityEntryLowEval@@@Z ENDP ; stdext::unchecked_merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	mov	eax, ecx

; 471  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 472  : 		}

	ret	0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 1135 : 		}

	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	edx, DWORD PTR __First_arg$[esp-4]
	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp]
	push	esi

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);
; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	esi, DWORD PTR __Last_arg$[esp+4]
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [ebp], edx
	cmp	edx, esi
	je	SHORT $LN29@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR [edi+8]
	sub	eax, esi
	sar	eax, 2
	lea	ecx, DWORD PTR [eax*4]
	push	ebx
	lea	ebx, DWORD PTR [ecx+edx]
	test	eax, eax
	jle	SHORT $LN26@erase@2
	push	ecx
	push	esi
	push	ecx
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN26@erase@2:

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);
; 1049 : 			_Mylast = _Ptr;

	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN29@erase@2:
	pop	edi
	pop	esi

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, ebp
	pop	ebp

; 1055 : #endif
; 1056 : 		}

	ret	12					; 0000000cH
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >, COMDAT

; 419  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN9@Uninit_fil@5
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL11@Uninit_fil@5:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL11@Uninit_fil@5
	pop	esi
$LN9@Uninit_fil@5:

; 420  : 	}

	ret	0
??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN14@Unchecked_@6
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN14@Unchecked_@6:
	pop	edi
	mov	eax, esi
	pop	esi

; 865  : 	}

	ret	0
??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?CreateSpy@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::CreateSpy
EXTRN	?GetStartingSpyRank@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetStartingSpyRank
EXTRN	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ:PROC ; CvPlayer::GetEspionageAI
EXTRN	?isOption@CvGame@@QBE_NPBD@Z:PROC		; CvGame::isOption
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?CreateSpy@CvPlayerEspionage@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$3
__ehfuncinfo$?CreateSpy@CvPlayerEspionage@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?CreateSpy@CvPlayerEspionage@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?CreateSpy@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
_strSummary$222835 = -124				; size = 28
_kNewSpy$ = -124					; size = 28
_strMsg$222839 = -96					; size = 28
_strBuffer$222827 = -68					; size = 28
$T246174 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?CreateSpy@CvPlayerEspionage@@QAEXXZ PROC		; CvPlayerEspionage::CreateSpy, COMDAT
; _this$ = ecx

; 193  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?CreateSpy@CvPlayerEspionage@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 112				; 00000070H
	push	esi
	mov	esi, ecx

; 194  : 	// don't create spies if espionage is disabled
; 195  : 	if(GC.getGame().isOption(GAMEOPTION_NO_ESPIONAGE))

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	OFFSET $SG222820
	call	?isOption@CvGame@@QBE_NPBD@Z		; CvGame::isOption
	test	al, al
	jne	$LN1@CreateSpy

; 196  : 	{
; 197  : 		return;
; 198  : 	}
; 199  : 
; 200  : 	if (m_pPlayer->GetEspionageAI()->m_iTurnEspionageStarted == -1)

	mov	ecx, DWORD PTR [esi+1292]
	push	ebx
	push	edi
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	or	edi, -1
	cmp	DWORD PTR [eax+736], edi
	jne	SHORT $LN3@CreateSpy

; 201  : 	{
; 202  : 		m_pPlayer->GetEspionageAI()->m_iTurnEspionageStarted = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR [esi+1292]
	mov	ebx, eax
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	DWORD PTR [eax+736], ebx
$LN3@CreateSpy:

; 203  : 	}
; 204  : 
; 205  : 	CvEspionageSpy kNewSpy;
; 206  : 	kNewSpy.m_eRank = (CvSpyRank)m_pPlayer->GetStartingSpyRank();

	mov	ecx, DWORD PTR [esi+1292]
	xor	ebx, ebx
	push	ebp
	mov	DWORD PTR _kNewSpy$[esp+144], edi
	mov	DWORD PTR _kNewSpy$[esp+148], edi
	mov	DWORD PTR _kNewSpy$[esp+160], ebx
	mov	BYTE PTR _kNewSpy$[esp+164], bl
	call	?GetStartingSpyRank@CvPlayer@@QBEHXZ	; CvPlayer::GetStartingSpyRank

; 207  : 	kNewSpy.m_eSpyState = SPY_STATE_UNASSIGNED;
; 208  : 	kNewSpy.m_iName = GetNextSpyName();

	mov	ecx, esi
	mov	DWORD PTR _kNewSpy$[esp+152], eax
	mov	DWORD PTR _kNewSpy$[esp+156], ebx
	call	?GetNextSpyName@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNextSpyName
	mov	ebp, eax

; 209  : 	kNewSpy.m_bEvaluateReassignment = true;
; 210  : 
; 211  : 	m_aSpyList.push_back(kNewSpy);

	lea	eax, DWORD PTR _kNewSpy$[esp+140]
	push	eax
	mov	DWORD PTR _kNewSpy$[esp+144], ebp
	mov	BYTE PTR _kNewSpy$[esp+169], 1
	call	?push_back@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAEIABVCvEspionageSpy@@@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::push_back

; 212  : 
; 213  : 	CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ebx, eax

; 214  : 	if(pNotifications)

	test	ebx, ebx
	je	$LN2@CreateSpy

; 215  : 	{
; 216  : 		const char* szSpyName = m_pPlayer->getCivilizationInfo().getSpyNames(kNewSpy.m_iName);

	mov	ecx, DWORD PTR [esi+1292]
	push	ebp
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	edi, eax

; 217  : 		CvString strBuffer = GetLocalizedText("TXT_KEY_NOTIFICATION_SPY_CREATED", szSpyName);

	push	edi
	lea	ecx, DWORD PTR _strBuffer$222827[esp+144]
	push	OFFSET $SG222834
	push	ecx
	call	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ; GetLocalizedText<char const *>

; 218  : 		CvString strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_SUMMARY_SPY_CREATED", szSpyName);

	push	edi
	lea	edx, DWORD PTR _strSummary$222835[esp+156]
	push	OFFSET $SG222837
	push	edx
	mov	DWORD PTR __$EHRec$[esp+172], 0
	call	??$GetLocalizedText@PBD@@YA?AVCvString@@PBD0@Z ; GetLocalizedText<char const *>
	add	esp, 24					; 00000018H

; 219  : 		pNotifications->Add(NOTIFICATION_SPY_CREATED_ACTIVE_PLAYER, strBuffer, strSummary, -1, -1, 0);

	lea	ecx, DWORD PTR _strSummary$222835[esp+140]
	mov	BYTE PTR __$EHRec$[esp+148], 1
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	-1
	push	0
	push	-1
	push	-1
	push	eax
	lea	ecx, DWORD PTR _strBuffer$222827[esp+160]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	-433658102				; e626e70aH
	mov	ecx, ebx
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 220  : 	}

	lea	ecx, DWORD PTR _strSummary$222835[esp+140]
	mov	BYTE PTR __$EHRec$[esp+148], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBuffer$222827[esp+140]
	mov	DWORD PTR __$EHRec$[esp+148], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	or	edi, -1
$LN2@CreateSpy:

; 221  : 
; 222  : 	if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN41@CreateSpy

; 223  : 	{
; 224  : 		CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222839[esp+140]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 225  : 		strMsg.Format("New Spy, %d,", m_aSpyList.size() - 1);

	mov	eax, DWORD PTR [esi+4]
	dec	eax
	push	eax
	lea	eax, DWORD PTR _strMsg$222839[esp+144]
	push	OFFSET $SG222840
	mov	ebx, 2
	push	eax
	mov	DWORD PTR __$EHRec$[esp+160], ebx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 226  : 		strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(kNewSpy.m_iName));

	mov	ecx, DWORD PTR [esi+1292]
	add	esp, 12					; 0000000cH
	push	ebp
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T246174[esp+144]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$222839[esp+144]
	mov	BYTE PTR __$EHRec$[esp+152], 3
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T246174[esp+140]
	mov	BYTE PTR __$EHRec$[esp+148], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 227  : 		LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$222839[esp+140]
	push	edx
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 228  : 	}

	lea	ecx, DWORD PTR _strMsg$222839[esp+140]
	mov	DWORD PTR __$EHRec$[esp+148], edi
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN41@CreateSpy:
	pop	ebp
	pop	edi
	pop	ebx
$LN1@CreateSpy:

; 229  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+128]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 124				; 0000007cH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strBuffer$222827[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strSummary$222835[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strMsg$222839[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateSpy@CvPlayerEspionage@@QAEXXZ$3:
	lea	ecx, DWORD PTR $T246174[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?CreateSpy@CvPlayerEspionage@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?CreateSpy@CvPlayerEspionage@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateSpy@CvPlayerEspionage@@QAEXXZ ENDP		; CvPlayerEspionage::CreateSpy
PUBLIC	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$3
__ehfuncinfo$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
_TEXT	SEGMENT
_strMsg$223242 = -68					; size = 28
$T246235 = -40						; size = 28
$T246234 = -40						; size = 28
$T246233 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
_pOldCity$ = 12						; size = 4
_uiSpyIndex$ = 12					; size = 4
_bAsDiplomat$ = 16					; size = 1
?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z PROC ; CvPlayerEspionage::MoveSpyTo, COMDAT
; _this$ = ecx

; 1111 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 56					; 00000038H
	push	esi
	mov	esi, ecx

; 1112 : 	CvAssertMsg(uiSpyIndex < m_aSpyList.size(), "iSpyIndex is out of bounds");
; 1113 : 	if(uiSpyIndex >= m_aSpyList.size())

	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	edi, DWORD PTR _uiSpyIndex$[esp+72]
	cmp	edi, eax
	jb	SHORT $LN13@MoveSpyTo
	pop	edi

; 1114 : 	{
; 1115 : 		return false;

	xor	al, al
	pop	esi

; 1200 : 
; 1201 : 	return true;
; 1202 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	add	esp, 68					; 00000044H
	ret	12					; 0000000cH
$LN13@MoveSpyTo:

; 1116 : 	}
; 1117 : 
; 1118 : 	if(!CanMoveSpyTo(pCity, uiSpyIndex, bAsDiplomat))

	mov	eax, DWORD PTR _bAsDiplomat$[esp+72]
	push	ebp
	mov	ebp, DWORD PTR _pCity$[esp+76]
	push	eax
	push	edi
	push	ebp
	call	?CanMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::CanMoveSpyTo
	test	al, al
	jne	SHORT $LN12@MoveSpyTo
	pop	ebp
	pop	edi
	pop	esi

; 1200 : 
; 1201 : 	return true;
; 1202 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	add	esp, 68					; 00000044H
	ret	12					; 0000000cH
$LN12@MoveSpyTo:

; 1119 : 	{
; 1120 : 		return false;
; 1121 : 	}
; 1122 : 
; 1123 : 	CvCity* pOldCity = NULL;
; 1124 : 
; 1125 : 	if(IsSpyInCity(uiSpyIndex))

	mov	eax, DWORD PTR [esi+4]
	push	ebx
	xor	ebx, ebx
	mov	DWORD PTR _pOldCity$[esp+80], ebx
	cmp	edi, eax
	jae	SHORT $LN171@MoveSpyTo
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [edi*8]
	sub	ecx, edi
	lea	eax, DWORD PTR [edx+ecx*4]
	or	ecx, -1
	cmp	DWORD PTR [eax+4], ecx
	je	SHORT $LN171@MoveSpyTo
	cmp	DWORD PTR [eax+8], ecx
	je	SHORT $LN171@MoveSpyTo

; 1126 : 	{
; 1127 : 		pOldCity = GetCityWithSpy(uiSpyIndex);

	push	edi
	mov	ecx, esi
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy
	mov	ebx, eax
	mov	DWORD PTR _pOldCity$[esp+80], ebx

; 1128 : 		// trying to move into a city where the spy is already at
; 1129 : 		if(pCity == pOldCity)

	cmp	ebp, ebx

; 1130 : 		{
; 1131 : 			return true;

	je	$LN6@MoveSpyTo

; 1132 : 		}
; 1133 : 
; 1134 : 		if(!ExtractSpyFromCity(uiSpyIndex))

	push	edi
	mov	ecx, esi
	call	?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::ExtractSpyFromCity
	test	al, al

; 1135 : 		{
; 1136 : 			CvAssertMsg(false, "Failed to extract spy");
; 1137 : 			return false;

	je	SHORT $LN175@MoveSpyTo
$LN171@MoveSpyTo:

; 1138 : 		}
; 1139 : 	}
; 1140 : 
; 1141 : 	if(pCity)

	test	ebp, ebp
	je	$LN133@MoveSpyTo

; 1142 : 	{
; 1143 : 		CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, ebp
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage

; 1144 : 		CvAssertMsg(pCityEspionage, "Could not get CvCityEspionage from pCity");
; 1145 : 		if(!pCityEspionage)

	test	eax, eax
	jne	SHORT $LN7@MoveSpyTo
$LN175@MoveSpyTo:
	pop	ebx
	pop	ebp
	pop	edi

; 1146 : 		{
; 1147 : 			return false;

	xor	al, al
	pop	esi

; 1200 : 
; 1201 : 	return true;
; 1202 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	mov	DWORD PTR fs:0, ecx
	add	esp, 68					; 00000044H
	ret	12					; 0000000cH
$LN7@MoveSpyTo:

; 1148 : 		}
; 1149 : 
; 1150 : 		m_aSpyList[uiSpyIndex].m_iCityX = pCity->getX();

	mov	edx, DWORD PTR [ebp+96]
	mov	ebx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [edi*8]
	sub	ecx, edi
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR [ecx+ebx+4], edx

; 1151 : 		m_aSpyList[uiSpyIndex].m_iCityY = pCity->getY();

	mov	ebx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebp+108]
	mov	DWORD PTR [ecx+ebx+8], edx

; 1152 : 		pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] = uiSpyIndex;

	mov	edx, DWORD PTR [esi+1292]
	mov	edx, DWORD PTR [edx+44]

; 1153 : 		m_aSpyList[uiSpyIndex].m_eSpyState = SPY_STATE_TRAVELLING;
; 1154 : 		m_aSpyList[uiSpyIndex].m_bIsDiplomat = bAsDiplomat;

	mov	bl, BYTE PTR _bAsDiplomat$[esp+80]
	mov	DWORD PTR [eax+edx*4+4], edi
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [ecx+edx+16], 1
	mov	edx, DWORD PTR [esi]
	mov	BYTE PTR [ecx+edx+24], bl

; 1155 : 		int iRate = CalcPerTurn(SPY_STATE_TRAVELLING, pCity, uiSpyIndex);
; 1156 : 		int iGoal = CalcRequired(SPY_STATE_TRAVELLING, pCity, uiSpyIndex);
; 1157 : 		pCityEspionage->SetActivity(m_pPlayer->GetID(), 0, iRate, iGoal);

	mov	ecx, DWORD PTR [esi+1292]
	mov	ecx, DWORD PTR [ecx+44]
	mov	ebx, DWORD PTR _pOldCity$[esp+80]
	mov	edx, 1
	mov	DWORD PTR [eax+ecx*4+92], 0
	mov	DWORD PTR [eax+ecx*4+180], edx
	mov	DWORD PTR [eax+ecx*4+268], edx
$LN133@MoveSpyTo:

; 1158 : 	}
; 1159 : 
; 1160 : 	if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN6@MoveSpyTo

; 1161 : 	{
; 1162 : 		CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$223242[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1163 : 		strMsg.Format("Moving spy, %d,", uiSpyIndex);

	push	edi
	lea	edx, DWORD PTR _strMsg$223242[esp+88]
	push	OFFSET $SG223243
	push	edx
	mov	DWORD PTR __$EHRec$[esp+104], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 1164 : 		strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName));

	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edi*8]
	sub	eax, edi
	mov	edx, DWORD PTR [ecx+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [esi+1292]
	add	esp, 12					; 0000000cH
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	eax, DWORD PTR $T246233[esp+88]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	mov	BYTE PTR __$EHRec$[esp+96], 1
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T246233[esp+84]
	mov	BYTE PTR __$EHRec$[esp+92], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1165 : 		strMsg += ",";

	push	OFFSET $SG223245
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1166 : 		if(pOldCity)

	test	ebx, ebx
	je	SHORT $LN5@MoveSpyTo

; 1167 : 		{
; 1168 : 			strMsg += GET_PLAYER(pOldCity->getOwner()).getCivilizationShortDescription();

	mov	eax, DWORD PTR [ebx+84]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1169 : 			strMsg += ",";

	push	OFFSET $SG223247
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1170 : 			strMsg += pOldCity->getName();

	lea	ecx, DWORD PTR $T246234[esp+84]
	push	ecx
	mov	ecx, ebx
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	push	eax
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	mov	BYTE PTR __$EHRec$[esp+96], 2
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T246234[esp+84]
	mov	BYTE PTR __$EHRec$[esp+92], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1171 : 		}
; 1172 : 		else

	jmp	SHORT $LN4@MoveSpyTo
$LN5@MoveSpyTo:

; 1173 : 		{
; 1174 : 			strMsg += "Unassigned";

	push	OFFSET $SG223250
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1175 : 			strMsg += ",";

	push	OFFSET $SG223251
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN4@MoveSpyTo:

; 1176 : 		}
; 1177 : 		strMsg += ",";

	push	OFFSET $SG223252
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1178 : 
; 1179 : 		if(pCity)

	test	ebp, ebp
	je	SHORT $LN3@MoveSpyTo

; 1180 : 		{
; 1181 : 			strMsg += GET_PLAYER(pCity->getOwner()).getCivilizationShortDescription();

	mov	eax, DWORD PTR [ebp+84]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1182 : 			strMsg += ",";

	push	OFFSET $SG223254
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1183 : 			strMsg += pCity->getName();

	lea	edx, DWORD PTR $T246235[esp+84]
	push	edx
	mov	ecx, ebp
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	push	eax
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	mov	BYTE PTR __$EHRec$[esp+96], 3
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T246235[esp+84]
	mov	BYTE PTR __$EHRec$[esp+92], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1184 : 		}
; 1185 : 		else

	jmp	SHORT $LN2@MoveSpyTo
$LN3@MoveSpyTo:

; 1186 : 		{
; 1187 : 			strMsg += "Unassigned";

	push	OFFSET $SG223257
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1188 : 			strMsg += ",";

	push	OFFSET $SG223258
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@MoveSpyTo:

; 1189 : 		}
; 1190 : 		strMsg += ",";

	push	OFFSET $SG223259
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1191 : 
; 1192 : 		if (bAsDiplomat)

	cmp	BYTE PTR _bAsDiplomat$[esp+80], 0
	je	SHORT $LN1@MoveSpyTo

; 1193 : 		{
; 1194 : 			strMsg += "Diplomat";

	push	OFFSET $SG223261
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@MoveSpyTo:

; 1195 : 		}
; 1196 : 		strMsg += ",";

	push	OFFSET $SG223262
	lea	ecx, DWORD PTR _strMsg$223242[esp+88]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 1197 : 
; 1198 : 		LogEspionageMsg(strMsg);

	lea	eax, DWORD PTR _strMsg$223242[esp+84]
	push	eax
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 1199 : 	}

	lea	ecx, DWORD PTR _strMsg$223242[esp+84]
	mov	DWORD PTR __$EHRec$[esp+92], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN6@MoveSpyTo:

; 1200 : 
; 1201 : 	return true;
; 1202 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+84]
	pop	ebx
	pop	ebp
	pop	edi
	mov	al, 1
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 68					; 00000044H
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$0:
	lea	ecx, DWORD PTR _strMsg$223242[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$1:
	lea	ecx, DWORD PTR $T246233[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$2:
	lea	ecx, DWORD PTR $T246234[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z$3:
	lea	ecx, DWORD PTR $T246235[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ENDP ; CvPlayerEspionage::MoveSpyTo
PUBLIC	?UpdateSpies@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::UpdateSpies
; Function compile flags: /Ogtpy
;	COMDAT ?UpdateSpies@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
?UpdateSpies@CvPlayerEspionage@@QAEXXZ PROC		; CvPlayerEspionage::UpdateSpies, COMDAT
; _this$ = ecx

; 1279 : {

	push	esi
	push	edi
	mov	esi, ecx

; 1280 : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	xor	edi, edi
	cmp	DWORD PTR [esi+4], edi
	jbe	SHORT $LN2@UpdateSpie
	npad	5
$LL4@UpdateSpie:

; 1281 : 	{
; 1282 : 		CvCity* pCity = GetCityWithSpy(uiSpy);

	push	edi
	mov	ecx, esi
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 1283 : 		if (pCity)

	test	eax, eax
	je	SHORT $LN3@UpdateSpie

; 1284 : 		{
; 1285 : 			UpdateCity(pCity);

	push	eax
	mov	ecx, esi
	call	?UpdateCity@CvPlayerEspionage@@QAEXPAVCvCity@@@Z ; CvPlayerEspionage::UpdateCity
$LN3@UpdateSpie:
	inc	edi
	cmp	edi, DWORD PTR [esi+4]
	jb	SHORT $LL4@UpdateSpie
$LN2@UpdateSpie:
	pop	edi
	pop	esi

; 1286 : 		}
; 1287 : 	}
; 1288 : }

	ret	0
?UpdateSpies@CvPlayerEspionage@@QAEXXZ ENDP		; CvPlayerEspionage::UpdateSpies
_TEXT	ENDS
PUBLIC	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList
EXTRN	?GetResearchCost@CvPlayerTechs@@QBEHW4TechTypes@@@Z:PROC ; CvPlayerTechs::GetResearchCost
EXTRN	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z:PROC ; CvPlayerTechs::CanResearch
EXTRN	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z:PROC	; CvTeamTechs::HasTech
EXTRN	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ:PROC ; CvTeam::GetTeamTechs
EXTRN	?GetNumTechs@CvTechXMLEntries@@QAEHXZ:PROC	; CvTechXMLEntries::GetNumTechs
EXTRN	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ:PROC ; CvPlayerTechs::GetTechs
EXTRN	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ:PROC ; CvPlayer::GetPlayerTechs
; Function compile flags: /Ogtpy
;	COMDAT ?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
_iMaxTechCost$ = -16					; size = 4
_pMyPlayerTechs$ = -12					; size = 4
tv295 = -8						; size = 4
_pOtherPlayerTechs$ = -4				; size = 4
_ePlayer$ = 8						; size = 4
?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z PROC ; CvPlayerEspionage::BuildStealableTechList, COMDAT
; _this$ = ecx

; 2262 : {

	sub	esp, 16					; 00000010H
	push	ebp
	push	esi

; 2263 : 	CvAssertMsg((uint)ePlayer < m_aaPlayerStealableTechList.size(), "ePlayer out of bounds");
; 2264 : 	if((uint)ePlayer >= m_aaPlayerStealableTechList.size())

	mov	esi, DWORD PTR _ePlayer$[esp+20]
	mov	ebp, ecx
	cmp	esi, DWORD PTR [ebp+264]
	jae	$LN9@BuildSteal

; 2265 : 	{
; 2266 : 		return;
; 2267 : 	}
; 2268 : 
; 2269 : 	m_aaPlayerStealableTechList[ePlayer].clear();

	mov	eax, DWORD PTR [ebp+260]
	push	ebx

; 2270 : 
; 2271 : 	if(!GET_PLAYER(ePlayer).isAlive())

	mov	ebx, esi
	lea	ecx, DWORD PTR [esi+esi*4]
	imul	ebx, 63236				; 0000f704H
	add	ecx, ecx
	add	ecx, ecx
	add	eax, ecx
	push	edi
	xor	edi, edi
	mov	DWORD PTR [eax+4], edi
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	cmp	BYTE PTR [ebx+eax+2256], 0
	mov	DWORD PTR tv295[esp+32], ecx
	je	$LN61@BuildSteal

; 2272 : 	{
; 2273 : 		return;
; 2274 : 	}
; 2275 : 
; 2276 : 	int iMaxTechCost = -1;
; 2277 : 
; 2278 : 	CvPlayerTechs* pMyPlayerTechs = m_pPlayer->GetPlayerTechs();

	mov	ecx, DWORD PTR [ebp+1292]
	mov	DWORD PTR _iMaxTechCost$[esp+32], -1
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs

; 2279 : 	CvPlayerTechs* pOtherPlayerTechs = GET_PLAYER(ePlayer).GetPlayerTechs();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, ebx
	mov	DWORD PTR _pMyPlayerTechs$[esp+32], eax
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs

; 2280 : #ifdef AUI_WARNING_FIXES
; 2281 : 	for (uint iTechLoop = 0; iTechLoop < pOtherPlayerTechs->GetTechs()->GetNumTechs(); iTechLoop++)
; 2282 : #else
; 2283 : 	for(int iTechLoop = 0; iTechLoop < pOtherPlayerTechs->GetTechs()->GetNumTechs(); iTechLoop++)

	mov	ecx, eax
	mov	DWORD PTR _pOtherPlayerTechs$[esp+32], eax
	call	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ ; CvPlayerTechs::GetTechs
	mov	ecx, eax
	call	?GetNumTechs@CvTechXMLEntries@@QAEHXZ	; CvTechXMLEntries::GetNumTechs
	test	eax, eax
	jle	$LN4@BuildSteal
	npad	6
$LL60@BuildSteal:

; 2284 : #endif
; 2285 : 	{
; 2286 : 		TechTypes eTech = (TechTypes)iTechLoop;
; 2287 : 
; 2288 : 		// Does the other player already have this tech?
; 2289 : 		if(!GET_TEAM(GET_PLAYER(ePlayer).getTeam()).GetTeamTechs()->HasTech(eTech))

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR [ebx+edx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN37@BuildSteal
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN38@BuildSteal
$LN37@BuildSteal:
	or	eax, -1
$LN38@BuildSteal:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	edi
	mov	ecx, eax
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	test	al, al
	je	SHORT $LN5@BuildSteal

; 2290 : 		{
; 2291 : 			continue;
; 2292 : 		}
; 2293 : 
; 2294 : 		// can we not research this tech?
; 2295 : 		if(!pMyPlayerTechs->CanResearch(eTech))

	mov	ecx, DWORD PTR _pMyPlayerTechs$[esp+32]
	push	0
	push	edi
	call	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z ; CvPlayerTechs::CanResearch
	test	al, al
	je	SHORT $LN5@BuildSteal

; 2296 : 		{
; 2297 : 			continue;
; 2298 : 		}
; 2299 : 
; 2300 : 		// add to list!
; 2301 : 		m_aaPlayerStealableTechList[ePlayer].push_back(eTech);

	mov	esi, DWORD PTR [ebp+260]
	add	esi, DWORD PTR tv295[esp+32]
	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+16], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN46@BuildSteal
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize
$LN46@BuildSteal:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN49@BuildSteal
	mov	DWORD PTR [eax], edi
$LN49@BuildSteal:
	inc	DWORD PTR [esi+4]

; 2302 : 
; 2303 : 		// try to find the most expensive tech that can be researched
; 2304 : 		int iTechCost = m_pPlayer->GetPlayerTechs()->GetResearchCost(eTech) * 100;

	mov	ecx, DWORD PTR [ebp+1292]
	push	edi
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetResearchCost@CvPlayerTechs@@QBEHW4TechTypes@@@Z ; CvPlayerTechs::GetResearchCost
	imul	eax, 100				; 00000064H

; 2305 : 		if(iTechCost > iMaxTechCost)

	cmp	eax, DWORD PTR _iMaxTechCost$[esp+32]
	jle	SHORT $LN5@BuildSteal

; 2306 : 		{
; 2307 : 			iMaxTechCost = iTechCost;

	mov	DWORD PTR _iMaxTechCost$[esp+32], eax
$LN5@BuildSteal:

; 2280 : #ifdef AUI_WARNING_FIXES
; 2281 : 	for (uint iTechLoop = 0; iTechLoop < pOtherPlayerTechs->GetTechs()->GetNumTechs(); iTechLoop++)
; 2282 : #else
; 2283 : 	for(int iTechLoop = 0; iTechLoop < pOtherPlayerTechs->GetTechs()->GetNumTechs(); iTechLoop++)

	mov	ecx, DWORD PTR _pOtherPlayerTechs$[esp+32]
	inc	edi
	call	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ ; CvPlayerTechs::GetTechs
	mov	ecx, eax
	call	?GetNumTechs@CvTechXMLEntries@@QAEHXZ	; CvTechXMLEntries::GetNumTechs
	cmp	edi, eax
	jl	$LL60@BuildSteal
	mov	esi, DWORD PTR _ePlayer$[esp+28]
$LN4@BuildSteal:

; 2308 : 		}
; 2309 : 	}
; 2310 : 
; 2311 : 	m_aiMaxTechCost[ePlayer] = iMaxTechCost;

	mov	edx, DWORD PTR _iMaxTechCost$[esp+32]
	mov	DWORD PTR [ebp+esi*4+820], edx
$LN61@BuildSteal:
	pop	edi
	pop	ebx
$LN9@BuildSteal:
	pop	esi
	pop	ebp

; 2312 : }

	add	esp, 16					; 00000010H
	ret	4
?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ENDP ; CvPlayerEspionage::BuildStealableTechList
_TEXT	ENDS
PUBLIC	?Init@CvEspionageAI@@QAEXPAVCvPlayer@@@Z	; CvEspionageAI::Init
; Function compile flags: /Ogtpy
;	COMDAT ?Init@CvEspionageAI@@QAEXPAVCvPlayer@@@Z
_TEXT	SEGMENT
_pPlayer$ = 8						; size = 4
?Init@CvEspionageAI@@QAEXPAVCvPlayer@@@Z PROC		; CvEspionageAI::Init, COMDAT
; _this$ = ecx

; 4211 : 	m_pPlayer = pPlayer;

	mov	eax, DWORD PTR _pPlayer$[esp-4]
	mov	DWORD PTR [ecx], eax

; 4212 : 
; 4213 : 	Reset();

	call	?Reset@CvEspionageAI@@QAEXXZ		; CvEspionageAI::Reset

; 4214 : }

	ret	4
?Init@CvEspionageAI@@QAEXPAVCvPlayer@@@Z ENDP		; CvEspionageAI::Init
_TEXT	ENDS
PUBLIC	?Uninit@CvEspionageAI@@QAEXXZ			; CvEspionageAI::Uninit
; Function compile flags: /Ogtpy
;	COMDAT ?Uninit@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
?Uninit@CvEspionageAI@@QAEXXZ PROC			; CvEspionageAI::Uninit, COMDAT
; _this$ = ecx

; 4219 : 	Reset();

	jmp	?Reset@CvEspionageAI@@QAEXXZ		; CvEspionageAI::Reset
?Uninit@CvEspionageAI@@QAEXXZ ENDP			; CvEspionageAI::Uninit
_TEXT	ENDS
PUBLIC	?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ	; CvEspionageAI::UpdateCivOutOfTechTurn
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ$0
__ehfuncinfo$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T246733 = -44						; size = 4
_strMsg$225514 = -40					; size = 28
__$EHRec$ = -12						; size = 12
?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ PROC	; CvEspionageAI::UpdateCivOutOfTechTurn, COMDAT
; _this$ = ecx

; 4633 : {

	push	-1
	push	__ehhandler$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	ebp
	push	esi
	mov	DWORD PTR _this$[esp+60], ecx

; 4634 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ecx]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage

; 4635 : 
; 4636 : 	// determine which civs have run out of techs to steal
; 4637 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	xor	esi, esi
	xor	ebx, ebx
	mov	edi, eax
	xor	ebp, ebp
	npad	1
$LL7@UpdateCivO:

; 4638 : 	{
; 4639 : 		PlayerTypes eOtherPlayer = (PlayerTypes)ui;
; 4640 : 
; 4641 : 		if(m_pPlayer->GetID() == eOtherPlayer)

	mov	eax, DWORD PTR _this$[esp+64]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+44], esi
	je	$LN6@UpdateCivO

; 4642 : 		{
; 4643 : 			continue;
; 4644 : 		}
; 4645 : 
; 4646 : 		// if surveillance has not been established, continue
; 4647 : 		if(!pEspionage->IsAnySurveillanceEstablished(eOtherPlayer))

	push	esi
	mov	ecx, edi
	call	?IsAnySurveillanceEstablished@CvPlayerEspionage@@QAE_NW4PlayerTypes@@@Z ; CvPlayerEspionage::IsAnySurveillanceEstablished
	test	al, al
	je	$LN6@UpdateCivO

; 4648 : 		{
; 4649 : 			continue;
; 4650 : 		}
; 4651 : 
; 4652 : 		pEspionage->BuildStealableTechList(eOtherPlayer);

	push	esi
	mov	ecx, edi
	call	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList

; 4653 : 		if(pEspionage->m_aaPlayerStealableTechList[eOtherPlayer].size() > 0)

	mov	edx, DWORD PTR [edi+260]
	cmp	DWORD PTR [edx+ebp+4], 0
	ja	$LN6@UpdateCivO
	mov	eax, DWORD PTR _this$[esp+64]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+esi*4]

; 4654 : 		{
; 4655 : 			continue;
; 4656 : 		}
; 4657 : 		m_aiCivOutOfTechTurn[eOtherPlayer] = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T246733[esp+64], edx
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T246733[esp+64]
	mov	DWORD PTR [ecx], eax

; 4658 : 		if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN6@UpdateCivO

; 4659 : 		{
; 4660 : 			CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$225514[esp+64]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4661 : 			strMsg.Format("AI no more tech to steal,");

	lea	edx, DWORD PTR _strMsg$225514[esp+64]
	push	OFFSET $SG225515
	push	edx
	mov	DWORD PTR __$EHRec$[esp+80], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 4662 : 			strMsg += ",";

	push	OFFSET $SG225516
	lea	ecx, DWORD PTR _strMsg$225514[esp+68]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4663 : 			strMsg += ",";

	push	OFFSET $SG225517
	lea	ecx, DWORD PTR _strMsg$225514[esp+68]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4664 : 			strMsg += GET_PLAYER(eOtherPlayer).getCivilizationShortDescription();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [ebx+eax]
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$225514[esp+68]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4665 : 			strMsg += ",";

	push	OFFSET $SG225518
	lea	ecx, DWORD PTR _strMsg$225514[esp+68]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 4666 : 			pEspionage->LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$225514[esp+64]
	push	ecx
	mov	ecx, edi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 4667 : 		}

	lea	ecx, DWORD PTR _strMsg$225514[esp+64]
	mov	DWORD PTR __$EHRec$[esp+72], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN6@UpdateCivO:
	add	ebp, 20					; 00000014H
	inc	esi
	add	ebx, 63236				; 0000f704H
	cmp	ebp, 440				; 000001b8H
	jb	$LL7@UpdateCivO

; 4668 : 	}
; 4669 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+64]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 48					; 00000030H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$225514[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ ENDP	; CvEspionageAI::UpdateCivOutOfTechTurn
PUBLIC	?clear@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEXXZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?clear@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEXXZ PROC ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::clear, COMDAT
; _this$ = ecx

; 120  : 	void clear(){

	push	ebx
	mov	ebx, ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ebx+4]
	push	esi
	mov	esi, DWORD PTR [ebx]
	test	eax, eax
	jbe	SHORT $LN30@clear
	push	edi
	mov	edi, eax
$LL5@clear:
	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR [esi+12]
	cmp	eax, ecx
	je	SHORT $LN14@clear
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN14@clear:
	add	esi, 20					; 00000014H
	sub	edi, 1
	jne	SHORT $LL5@clear
	pop	edi
$LN30@clear:
	pop	esi

; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ebx+4], 0
	pop	ebx

; 123  : 	};

	ret	0
?clear@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEXXZ ENDP ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::clear
_TEXT	ENDS
PUBLIC	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN6@vector
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@vector:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 560  : 		}

	ret	0
??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXXZ PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	esi
	push	edi
	mov	edi, ecx

; 1060 : 		erase(begin(), end());

	mov	ecx, DWORD PTR [edi+8]
	mov	esi, DWORD PTR [edi+4]
	cmp	esi, ecx
	je	SHORT $LN15@clear@2
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	lea	edx, DWORD PTR [eax*4]
	push	ebx
	lea	ebx, DWORD PTR [edx+esi]
	test	eax, eax
	jle	SHORT $LN40@clear@2
	push	edx
	push	ecx
	push	edx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN40@clear@2:
	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN15@clear@2:
	pop	edi
	pop	esi

; 1061 : 		}

	ret	0
?clear@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXXZ ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::clear
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);

	mov	eax, DWORD PTR _uiNumElements$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR _pVal$[esp+4]
	push	eax
	push	edi
	mov	esi, ecx
	call	?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy

; 811  : 		if( pVal != (T*)m_aData )

	add	esi, 12					; 0000000cH
	cmp	edi, esi
	je	SHORT $LN1@Free@4

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	edi
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@Free@4:
	pop	edi
	pop	esi

; 813  : 	};

	ret	8
?Free@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::Free
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU3@IABU3@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Ufill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Ufill@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU3@IABU3@@Z
_TEXT	SEGMENT
$T247038 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$247041 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU3@IABU3@@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	edx, DWORD PTR __Cat$247041[esp]
	push	esi
	mov	esi, DWORD PTR __Count$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+8]
	mov	BYTE PTR $T247038[esp+12], 0
	mov	eax, DWORD PTR $T247038[esp+12]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+12]
	push	edx
	push	ecx
	push	eax
	push	esi
	push	edi
	call	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H

; 1255 : 		return (_Ptr + _Count);

	lea	eax, DWORD PTR [edi+esi*8]
	pop	edi
	pop	esi

; 1256 : 		}

	pop	ecx
	ret	12					; 0000000cH
?_Ufill@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU3@IABU3@@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU3@IABU3@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU3@IABU3@@Z
_TEXT	SEGMENT
$T247056 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$247059 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU3@IABU3@@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	edx, DWORD PTR __Cat$247059[esp]
	push	esi
	mov	esi, DWORD PTR __Count$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+8]
	mov	BYTE PTR $T247056[esp+12], 0
	mov	eax, DWORD PTR $T247056[esp+12]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+12]
	push	edx
	push	ecx
	push	eax
	push	esi
	push	edi
	call	??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >

; 1255 : 		return (_Ptr + _Count);

	lea	ecx, DWORD PTR [esi+esi*4]
	add	esp, 24					; 00000018H
	lea	eax, DWORD PTR [edi+ecx*4]
	pop	edi
	pop	esi

; 1256 : 		}

	pop	ecx
	ret	12					; 0000000cH
?_Ufill@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU3@IABU3@@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU3@IABU3@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU3@IABU3@@Z
_TEXT	SEGMENT
$T247073 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$247076 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU3@IABU3@@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	edx, DWORD PTR __Cat$247076[esp]
	push	esi
	mov	esi, DWORD PTR __Count$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+8]
	mov	BYTE PTR $T247073[esp+12], 0
	mov	eax, DWORD PTR $T247073[esp+12]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+12]
	push	edx
	push	ecx
	push	eax
	push	esi
	push	edi
	call	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H

; 1255 : 		return (_Ptr + _Count);

	lea	eax, DWORD PTR [edi+esi*8]
	pop	edi
	pop	esi

; 1256 : 		}

	pop	ecx
	ret	12					; 0000000cH
?_Ufill@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU3@IABU3@@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXPAUHeistLocation@@0@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXPAUHeistLocation@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXPAUHeistLocation@@0@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

	ret	8
?_Destroy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXPAUHeistLocation@@0@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXPAUSpyNotificationMessage@@0@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXPAUSpyNotificationMessage@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXPAUSpyNotificationMessage@@0@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

	ret	8
?_Destroy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXPAUSpyNotificationMessage@@0@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXPAUScoreCityEntry@@0@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXPAUScoreCityEntry@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXPAUScoreCityEntry@@0@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

	ret	8
?_Destroy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXPAUScoreCityEntry@@0@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Destroy
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAPAVCvCity@@IPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAXPAPAVCvCity@@IABQAV1@AAV?$allocator@PAVCvCity@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<CvCity * *,unsigned int,CvCity *,std::allocator<CvCity *> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAPAVCvCity@@IPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAXPAPAVCvCity@@IABQAV1@AAV?$allocator@PAVCvCity@@@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAPAVCvCity@@IPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAXPAPAVCvCity@@IABQAV1@AAV?$allocator@PAVCvCity@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<CvCity * *,unsigned int,CvCity *,std::allocator<CvCity *> >, COMDAT

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN13@unchecked_@11
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL15@unchecked_@11:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL15@unchecked_@11
	pop	esi
$LN13@unchecked_@11:

; 943  : 	}

	ret	0
??$unchecked_uninitialized_fill_n@PAPAVCvCity@@IPAV1@V?$allocator@PAVCvCity@@@std@@@stdext@@YAXPAPAVCvCity@@IABQAV1@AAV?$allocator@PAVCvCity@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<CvCity * *,unsigned int,CvCity *,std::allocator<CvCity *> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAPAVCvCity@@@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV2@00@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Umove<CvCity * *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVCvCity@@@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVCvCity@@@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV2@00@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Umove<CvCity * *>, COMDAT
; _this$ = ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN16@Umove
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN16@Umove:
	pop	edi
	mov	eax, esi
	pop	esi

; 1149 : 		}

	ret	12					; 0000000cH
??$_Umove@PAPAVCvCity@@@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV2@00@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Umove<CvCity * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$7
__unwindtable$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T247289 = -24						; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Vptr$247299 = 12					; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;
; 401  : 
; 402  : 	_TRY_BEGIN

	mov	ebx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	mov	edi, DWORD PTR __Val$[ebp]
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR __Next$[ebp], esi
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LL6@Uninit_fil@6:

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	test	ebx, ebx
	jbe	$LN4@Uninit_fil@6

; 404  : 		_Al.construct(_First, _Val);

	mov	DWORD PTR __Vptr$247299[ebp], esi
	mov	DWORD PTR $T247289[ebp], esi
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	test	esi, esi
	je	SHORT $LN18@Uninit_fil@6
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi+16], ecx
	mov	edx, DWORD PTR [edi+20]
	mov	DWORD PTR [esi+20], edx
	mov	eax, DWORD PTR [edi+24]
	mov	DWORD PTR [esi+24], eax
	mov	ecx, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+28], ecx
	mov	edx, DWORD PTR [edi+32]
	lea	eax, DWORD PTR [edi+36]
	lea	ecx, DWORD PTR [esi+36]
	push	eax
	mov	DWORD PTR [esi+32], edx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	cl, BYTE PTR [edi+64]
	mov	BYTE PTR [esi+64], cl
$LN18@Uninit_fil@6:
	dec	ebx
	add	esi, 68					; 00000044H
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	DWORD PTR __First$[ebp], esi
	jmp	SHORT $LL6@Uninit_fil@6
__catch$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	mov	esi, DWORD PTR __Next$[ebp]
	mov	edi, DWORD PTR __First$[ebp]
	cmp	esi, edi
	je	SHORT $LN1@Uninit_fil@6
	npad	8
$LL3@Uninit_fil@6:
	lea	ecx, DWORD PTR [esi+36]

; 407  : 		_Al.destroy(_Next);

	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	add	esi, 68					; 00000044H
	cmp	esi, edi
	jne	SHORT $LL3@Uninit_fil@6
$LN1@Uninit_fil@6:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN48@Uninit_fil@6:
$LN4@Uninit_fil@6:

; 409  : 	_CATCH_END
; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN47@Uninit_fil@6:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$247299[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247289[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
PUBLIC	??$_Unchecked_uninitialized_move@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_uninitialized_move@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z
_TEXT	SEGMENT
$T247384 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$247387 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$247387[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T247384[esp+4], 0
	mov	eax, DWORD PTR $T247384[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >

; 865  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Unchecked_uninitialized_move@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@stdext@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_uninitialized_move@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z
_TEXT	SEGMENT
$T247421 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$247424 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$247424[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T247421[esp+4], 0
	mov	eax, DWORD PTR $T247421[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >

; 865  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Unchecked_uninitialized_move@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@0AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@0AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@0AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<IntrigueNotificationMessage> >, COMDAT

; 232  : 	{	// destroy [_First, _Last), arbitrary type

	push	esi

; 233  : 	for (; _First != _Last; ++_First)

	mov	esi, DWORD PTR __First$[esp]
	push	edi
	mov	edi, DWORD PTR __Last$[esp+4]
	cmp	esi, edi
	je	SHORT $LN1@Destroy_ra
	npad	2
$LL3@Destroy_ra:
	lea	ecx, DWORD PTR [esi+36]

; 234  : 		_Al.destroy(_First);

	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	add	esi, 68					; 00000044H
	cmp	esi, edi
	jne	SHORT $LL3@Destroy_ra
$LN1@Destroy_ra:
	pop	edi
	pop	esi

; 235  : 	}

	ret	0
??$_Destroy_range@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@0AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z
_TEXT	SEGMENT
$T247504 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$247507 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$247507[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T247504[esp+4], 0
	mov	eax, DWORD PTR $T247504[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >

; 865  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Unchecked_uninitialized_move@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@stdext@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z ; std::_Insertion_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z PROC ; std::_Insertion_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 3150 : 	std::_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

	mov	eax, DWORD PTR __Pred$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	push	edx
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
	add	esp, 16					; 00000010H

; 3151 : 	}

	ret	0
??$_Insertion_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z ENDP ; std::_Insertion_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@@Z ; std::_Insertion_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@@Z PROC ; std::_Insertion_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>, COMDAT

; 3150 : 	std::_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));

	mov	eax, DWORD PTR __Pred$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	push	edx
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
	add	esp, 16					; 00000010H

; 3151 : 	}

	ret	0
??$_Insertion_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@@Z ENDP ; std::_Insertion_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z
_TEXT	SEGMENT
$T247527 = -4						; size = 1
__Cat$247531 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T247527[esp+4], 0
	mov	eax, DWORD PTR $T247527[esp+4]
	mov	ecx, DWORD PTR __Cat$247531[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >

; 823  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T247536 = -4						; size = 1
$T247537 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryHighEval@@@Z PROC ; stdext::unchecked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 5157 : 	{	//  copy merging ranges, both using _Pred

	push	ecx

; 5158 : 		return _STD _Merge(_CHECKED_BASE(_First1), _CHECKED_BASE(_Last1), _CHECKED_BASE(_First2), _CHECKED_BASE(_Last2), _Dest, _Pred,
; 5159 : 			_STD _Iter_random(_First1, _First2,_Dest), _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR $T247537[esp]
	mov	edx, DWORD PTR __Pred$[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T247536[esp+8], 0
	mov	eax, DWORD PTR $T247536[esp+8]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last2$[esp+12]
	push	edx
	mov	edx, DWORD PTR __First2$[esp+16]
	push	eax
	mov	eax, DWORD PTR __Last1$[esp+20]
	push	ecx
	mov	ecx, DWORD PTR __First1$[esp+24]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	??$_Merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@11UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
	mov	eax, esi
	pop	esi

; 5160 : 	}

	pop	ecx
	ret	0
??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryHighEval@@@Z ENDP ; stdext::unchecked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Unchecked_merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@@Z ; stdext::_Unchecked_merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T247545 = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First1$ = 12						; size = 4
__Last1$ = 16						; size = 4
__First2$ = 20						; size = 4
__Last2$ = 24						; size = 4
__Dest$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$_Unchecked_merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@@Z PROC ; stdext::_Unchecked_merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 5227 : 	{

	push	ecx

; 5228 : 		return _STD _Merge_backward(_First1, _Last1, _First2, _Last2, _Dest, _Pred, _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Pred$[esp]
	mov	edx, DWORD PTR __Dest$[esp]
	push	esi
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	BYTE PTR $T247545[esp+8], 0
	mov	eax, DWORD PTR $T247545[esp+8]
	push	eax
	mov	eax, DWORD PTR __Last2$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __First2$[esp+12]
	push	edx
	mov	edx, DWORD PTR __Last1$[esp+16]
	push	eax
	mov	eax, DWORD PTR __First1$[esp+20]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
	add	esp, 32					; 00000020H
	mov	eax, esi
	pop	esi

; 5229 : 	}

	pop	ecx
	ret	0
??$_Unchecked_merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@@Z ENDP ; stdext::_Unchecked_merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T247554 = -20						; size = 20
$T247552 = -20						; size = 20
$T247550 = -20						; size = 20
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
$T247549 = 36						; size = 4
__Chunk$ = 36						; size = 4
$T247553 = 40						; size = 4
$T247551 = 40						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 1
___formal$ = 48						; size = 1
??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>, COMDAT

; 3434 : 	{	// copy merging chunks, using _Pred

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	push	esi

; 3435 : 	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)

	mov	esi, DWORD PTR __First$[esp+28]
	push	edi
	mov	edi, DWORD PTR __Chunk$[esp+32]
	lea	ebp, DWORD PTR [edi+edi]
	xor	ebx, ebx
	cmp	ebp, DWORD PTR __Count$[esp+32]
	jg	SHORT $LN3@Chunked_me
	npad	6
$LL5@Chunked_me:

; 3436 : 		{	// copy merging pairs of adjacent chunks
; 3437 : 		_BidIt _Mid1 = _First;
; 3438 : 		std::advance(_Mid1, _Chunk);
; 3439 : 		_BidIt _Mid2 = _Mid1;
; 3440 : 		std::advance(_Mid2, _Chunk);
; 3441 : 
; 3442 : 		_Dest = _STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);

	mov	eax, DWORD PTR __Pred$[esp+32]
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, esp
	lea	ecx, DWORD PTR [esi+edi*8]
	mov	DWORD PTR $T247549[esp+56], esp
	lea	esi, DWORD PTR [ecx+edi*8]
	push	esi
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR __Dest$[esp+76]
	push	ecx
	push	ecx
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __First$[esp+68]
	push	eax
	lea	ecx, DWORD PTR $T247550[esp+76]
	push	ecx
	call	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR $T247550[esp+80]
	add	esp, 44					; 0000002cH
	mov	DWORD PTR __Dest$[esp+48], edx
	cmp	eax, ebx
	je	SHORT $LN49@Chunked_me
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN49@Chunked_me:
	mov	eax, DWORD PTR __Count$[esp+32]
	sub	eax, ebp
	cmp	eax, ebp

; 3443 : 		_First = _Mid2;

	mov	DWORD PTR __First$[esp+32], esi
	mov	DWORD PTR __Count$[esp+32], eax
	jge	SHORT $LL5@Chunked_me
$LN3@Chunked_me:

; 3444 : 		}
; 3445 : 
; 3446 : 	if (_Count <= _Chunk)

	cmp	DWORD PTR __Count$[esp+32], edi
	jg	SHORT $LN2@Chunked_me

; 3447 : 		_STDEXT unchecked_copy(_First, _Last, _Dest);	// copy partial last chunk

	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	ecx, DWORD PTR __Dest$[esp+68]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last$[esp+52]
	mov	eax, DWORD PTR __First$[esp+52]
	mov	DWORD PTR $T247551[esp+52], esp
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T247552[esp+64]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H

; 3448 : 	else

	jmp	SHORT $LN111@Chunked_me
$LN2@Chunked_me:

; 3449 : 		{	// copy merging whole and partial last chunk
; 3450 : 		_BidIt _Mid1 = _First;
; 3451 : 		std::advance(_Mid1, _Chunk);
; 3452 : 
; 3453 : 		_STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);

	mov	edx, DWORD PTR __Pred$[esp+32]
	push	edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR __Dest$[esp+72]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __Last$[esp+56]
	mov	DWORD PTR $T247553[esp+56], esp
	push	eax
	lea	ecx, DWORD PTR [esi+edi*8]
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+68]
	push	ecx
	lea	edx, DWORD PTR $T247554[esp+76]
	push	edx
	call	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryHighEval>
	add	esp, 44					; 0000002cH
$LN111@Chunked_me:
	mov	eax, DWORD PTR $T247554[esp+36]
	cmp	eax, ebx
	je	SHORT $LN87@Chunked_me
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN87@Chunked_me:

; 3454 : 		}
; 3455 : 	}

	mov	eax, DWORD PTR __Dest$[esp+32]
	cmp	eax, ebx
	je	SHORT $LN97@Chunked_me
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN97@Chunked_me:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T247784 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
$T247829 = 20						; size = 1
__Chunk$ = 20						; size = 4
$T247937 = 24						; size = 1
$T247938 = 24						; size = 1
$T247830 = 24						; size = 1
$T247786 = 24						; size = 4
__Count$ = 24						; size = 4
__Pred$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>, COMDAT

; 3434 : 	{	// copy merging chunks, using _Pred

	push	ecx

; 3435 : 	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)

	mov	ecx, DWORD PTR __Count$[esp]
	mov	edx, DWORD PTR __Dest$[esp]
	mov	eax, DWORD PTR __First$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Chunk$[esp+12]
	lea	ebp, DWORD PTR [edi+edi]
	cmp	ebp, ecx
	jg	SHORT $LN3@Chunked_me@2
	push	ebx
	npad	4
$LL58@Chunked_me@2:

; 3436 : 		{	// copy merging pairs of adjacent chunks
; 3437 : 		_BidIt _Mid1 = _First;
; 3438 : 		std::advance(_Mid1, _Chunk);
; 3439 : 		_BidIt _Mid2 = _Mid1;
; 3440 : 		std::advance(_Mid2, _Chunk);
; 3441 : 
; 3442 : 		_Dest = _STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);

	mov	BYTE PTR $T247829[esp+16], 0
	mov	ebx, DWORD PTR $T247829[esp+16]
	push	ebx
	mov	ebx, DWORD PTR $T247830[esp+20]
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+24]
	push	ebx
	lea	ecx, DWORD PTR [eax+edi*8]
	push	edx
	lea	esi, DWORD PTR [ecx+edi*8]
	push	esi
	push	ecx
	push	ecx
	push	eax
	lea	eax, DWORD PTR $T247784[esp+52]
	push	eax
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
	mov	ecx, DWORD PTR __Count$[esp+52]
	mov	edx, DWORD PTR $T247784[esp+56]
	sub	ecx, ebp
	add	esp, 36					; 00000024H
	cmp	ecx, ebp
	mov	DWORD PTR __Dest$[esp+16], edx

; 3443 : 		_First = _Mid2;

	mov	eax, esi
	mov	DWORD PTR __Count$[esp+16], ecx
	jge	SHORT $LL58@Chunked_me@2
	pop	ebx
$LN3@Chunked_me@2:

; 3444 : 		}
; 3445 : 
; 3446 : 	if (_Count <= _Chunk)

	cmp	ecx, edi
	jg	SHORT $LN2@Chunked_me@2

; 3447 : 		_STDEXT unchecked_copy(_First, _Last, _Dest);	// copy partial last chunk

	mov	ecx, DWORD PTR __Last$[esp+12]
	cmp	eax, ecx
	je	SHORT $LN49@Chunked_me@2
$LL32@Chunked_me@2:
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], esi
	add	eax, 8
	add	edx, 8
	cmp	eax, ecx
	jne	SHORT $LL32@Chunked_me@2
	pop	edi
	pop	esi
	pop	ebp

; 3454 : 		}
; 3455 : 	}

	pop	ecx
	ret	0
$LN2@Chunked_me@2:

; 3448 : 	else
; 3449 : 		{	// copy merging whole and partial last chunk
; 3450 : 		_BidIt _Mid1 = _First;
; 3451 : 		std::advance(_Mid1, _Chunk);
; 3452 : 
; 3453 : 		_STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);

	mov	BYTE PTR $T247937[esp+12], 0
	mov	ecx, DWORD PTR $T247937[esp+12]
	push	ecx
	mov	ecx, DWORD PTR $T247938[esp+16]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[esp+20]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+28]
	push	edx
	lea	edi, DWORD PTR [eax+edi*8]
	push	edi
	push	edi
	push	eax
	lea	eax, DWORD PTR $T247786[esp+44]
	push	eax
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryHighEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
$LN49@Chunked_me@2:
	pop	edi
	pop	esi
	pop	ebp

; 3454 : 		}
; 3455 : 	}

	pop	ecx
	ret	0
??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00@Z ; std::rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
; Function compile flags: /Ogtpy
;	COMDAT ??$rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00@Z PROC ; std::rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >, COMDAT

; 1719 : 	if (_First != _Mid && _Mid != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Mid$[esp-4]
	cmp	edx, eax
	je	SHORT $LN14@rotate
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN14@rotate

; 1720 : 		_Rotate(_CHECKED_BASE(_First), _CHECKED_BASE(_Mid), _CHECKED_BASE(_Last), _Iter_cat(_First));

	push	0
	push	0
	push	ecx
	push	eax
	push	edx
	call	??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
	add	esp, 20					; 00000014H
$LN14@rotate:

; 1721 : 	}

	ret	0
??$rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00@Z ENDP ; std::rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> > >
_TEXT	ENDS
PUBLIC	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T248002 = -20						; size = 20
$T248000 = -20						; size = 20
$T247998 = -20						; size = 20
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
$T247997 = 36						; size = 4
__Chunk$ = 36						; size = 4
$T248001 = 40						; size = 4
$T247999 = 40						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 1
___formal$ = 48						; size = 1
??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>, COMDAT

; 3434 : 	{	// copy merging chunks, using _Pred

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	push	esi

; 3435 : 	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)

	mov	esi, DWORD PTR __First$[esp+28]
	push	edi
	mov	edi, DWORD PTR __Chunk$[esp+32]
	lea	ebp, DWORD PTR [edi+edi]
	xor	ebx, ebx
	cmp	ebp, DWORD PTR __Count$[esp+32]
	jg	SHORT $LN3@Chunked_me@3
	npad	6
$LL5@Chunked_me@3:

; 3436 : 		{	// copy merging pairs of adjacent chunks
; 3437 : 		_BidIt _Mid1 = _First;
; 3438 : 		std::advance(_Mid1, _Chunk);
; 3439 : 		_BidIt _Mid2 = _Mid1;
; 3440 : 		std::advance(_Mid2, _Chunk);
; 3441 : 
; 3442 : 		_Dest = _STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);

	mov	eax, DWORD PTR __Pred$[esp+32]
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, esp
	lea	ecx, DWORD PTR [esi+edi*8]
	mov	DWORD PTR $T247997[esp+56], esp
	lea	esi, DWORD PTR [ecx+edi*8]
	push	esi
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR __Dest$[esp+76]
	push	ecx
	push	ecx
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __First$[esp+68]
	push	eax
	lea	ecx, DWORD PTR $T247998[esp+76]
	push	ecx
	call	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>
	mov	edx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR $T247998[esp+80]
	add	esp, 44					; 0000002cH
	mov	DWORD PTR __Dest$[esp+48], edx
	cmp	eax, ebx
	je	SHORT $LN49@Chunked_me@3
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN49@Chunked_me@3:
	mov	eax, DWORD PTR __Count$[esp+32]
	sub	eax, ebp
	cmp	eax, ebp

; 3443 : 		_First = _Mid2;

	mov	DWORD PTR __First$[esp+32], esi
	mov	DWORD PTR __Count$[esp+32], eax
	jge	SHORT $LL5@Chunked_me@3
$LN3@Chunked_me@3:

; 3444 : 		}
; 3445 : 
; 3446 : 	if (_Count <= _Chunk)

	cmp	DWORD PTR __Count$[esp+32], edi
	jg	SHORT $LN2@Chunked_me@3

; 3447 : 		_STDEXT unchecked_copy(_First, _Last, _Dest);	// copy partial last chunk

	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	ecx, DWORD PTR __Dest$[esp+68]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last$[esp+52]
	mov	eax, DWORD PTR __First$[esp+52]
	mov	DWORD PTR $T247999[esp+52], esp
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T248000[esp+64]
	push	ecx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	add	esp, 32					; 00000020H

; 3448 : 	else

	jmp	SHORT $LN111@Chunked_me@3
$LN2@Chunked_me@3:

; 3449 : 		{	// copy merging whole and partial last chunk
; 3450 : 		_BidIt _Mid1 = _First;
; 3451 : 		std::advance(_Mid1, _Chunk);
; 3452 : 
; 3453 : 		_STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);

	mov	edx, DWORD PTR __Pred$[esp+32]
	push	edx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR __Dest$[esp+72]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __Last$[esp+56]
	mov	DWORD PTR $T248001[esp+56], esp
	push	eax
	lea	ecx, DWORD PTR [esi+edi*8]
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+68]
	push	ecx
	lea	edx, DWORD PTR $T248002[esp+76]
	push	edx
	call	??$unchecked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@V?$_Temp_iterator@UScoreCityEntry@@@2@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@000V12@UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,ScoreCityEntryLowEval>
	add	esp, 44					; 0000002cH
$LN111@Chunked_me@3:
	mov	eax, DWORD PTR $T248002[esp+36]
	cmp	eax, ebx
	je	SHORT $LN87@Chunked_me@3
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN87@Chunked_me@3:

; 3454 : 		}
; 3455 : 	}

	mov	eax, DWORD PTR __Dest$[esp+32]
	cmp	eax, ebx
	je	SHORT $LN97@Chunked_me@3
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN97@Chunked_me@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T248232 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
$T248278 = 20						; size = 1
__Chunk$ = 20						; size = 4
$T248386 = 24						; size = 1
$T248387 = 24						; size = 1
$T248279 = 24						; size = 1
$T248234 = 24						; size = 4
__Count$ = 24						; size = 4
__Pred$ = 28						; size = 1
___formal$ = 32						; size = 1
??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>, COMDAT

; 3434 : 	{	// copy merging chunks, using _Pred

	push	ecx

; 3435 : 	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)

	mov	ecx, DWORD PTR __Count$[esp]
	mov	edx, DWORD PTR __Dest$[esp]
	mov	eax, DWORD PTR __First$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Chunk$[esp+12]
	lea	ebp, DWORD PTR [edi+edi]
	cmp	ebp, ecx
	jg	SHORT $LN3@Chunked_me@4
	push	ebx
	npad	4
$LL58@Chunked_me@4:

; 3436 : 		{	// copy merging pairs of adjacent chunks
; 3437 : 		_BidIt _Mid1 = _First;
; 3438 : 		std::advance(_Mid1, _Chunk);
; 3439 : 		_BidIt _Mid2 = _Mid1;
; 3440 : 		std::advance(_Mid2, _Chunk);
; 3441 : 
; 3442 : 		_Dest = _STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);

	mov	BYTE PTR $T248278[esp+16], 0
	mov	ebx, DWORD PTR $T248278[esp+16]
	push	ebx
	mov	ebx, DWORD PTR $T248279[esp+20]
	push	ebx
	mov	ebx, DWORD PTR __Pred$[esp+24]
	push	ebx
	lea	ecx, DWORD PTR [eax+edi*8]
	push	edx
	lea	esi, DWORD PTR [ecx+edi*8]
	push	esi
	push	ecx
	push	ecx
	push	eax
	lea	eax, DWORD PTR $T248232[esp+52]
	push	eax
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
	mov	ecx, DWORD PTR __Count$[esp+52]
	mov	edx, DWORD PTR $T248232[esp+56]
	sub	ecx, ebp
	add	esp, 36					; 00000024H
	cmp	ecx, ebp
	mov	DWORD PTR __Dest$[esp+16], edx

; 3443 : 		_First = _Mid2;

	mov	eax, esi
	mov	DWORD PTR __Count$[esp+16], ecx
	jge	SHORT $LL58@Chunked_me@4
	pop	ebx
$LN3@Chunked_me@4:

; 3444 : 		}
; 3445 : 
; 3446 : 	if (_Count <= _Chunk)

	cmp	ecx, edi
	jg	SHORT $LN2@Chunked_me@4

; 3447 : 		_STDEXT unchecked_copy(_First, _Last, _Dest);	// copy partial last chunk

	mov	ecx, DWORD PTR __Last$[esp+12]
	cmp	eax, ecx
	je	SHORT $LN49@Chunked_me@4
$LL32@Chunked_me@4:
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], esi
	add	eax, 8
	add	edx, 8
	cmp	eax, ecx
	jne	SHORT $LL32@Chunked_me@4
	pop	edi
	pop	esi
	pop	ebp

; 3454 : 		}
; 3455 : 	}

	pop	ecx
	ret	0
$LN2@Chunked_me@4:

; 3448 : 	else
; 3449 : 		{	// copy merging whole and partial last chunk
; 3450 : 		_BidIt _Mid1 = _First;
; 3451 : 		std::advance(_Mid1, _Chunk);
; 3452 : 
; 3453 : 		_STDEXT unchecked_merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);

	mov	BYTE PTR $T248386[esp+12], 0
	mov	ecx, DWORD PTR $T248386[esp+12]
	push	ecx
	mov	ecx, DWORD PTR $T248387[esp+16]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[esp+20]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+28]
	push	edx
	lea	edi, DWORD PTR [eax+edi*8]
	push	edi
	push	edi
	push	eax
	lea	eax, DWORD PTR $T248234[esp+44]
	push	eax
	call	??$_Merge@PAUScoreCityEntry@@PAU1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@000V10@UScoreCityEntryLowEval@@Urandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Merge<ScoreCityEntry *,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,std::random_access_iterator_tag>
	add	esp, 36					; 00000024H
$LN49@Chunked_me@4:
	pop	edi
	pop	esi
	pop	ebp

; 3454 : 		}
; 3455 : 	}

	pop	ecx
	ret	0
??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN6@vector@2
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@vector@2:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 560  : 		}

	ret	0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	esi
	push	edi
	mov	edi, ecx

; 1060 : 		erase(begin(), end());

	mov	ecx, DWORD PTR [edi+8]
	mov	esi, DWORD PTR [edi+4]
	cmp	esi, ecx
	je	SHORT $LN15@clear@3
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	lea	edx, DWORD PTR [eax*4]
	push	ebx
	lea	ebx, DWORD PTR [edx+esi]
	test	eax, eax
	jle	SHORT $LN40@clear@3
	push	edx
	push	ecx
	push	edx
	push	esi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN40@clear@3:
	mov	DWORD PTR [edi+8], ebx
	pop	ebx
$LN15@clear@3:
	pop	edi
	pop	esi

; 1061 : 		}

	ret	0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >, COMDAT

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN13@unchecked_@12
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL15@unchecked_@12:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL15@unchecked_@12
	pop	esi
$LN13@unchecked_@12:

; 943  : 	}

	ret	0
??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN16@Umove@2
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN16@Umove@2:
	pop	edi
	mov	eax, esi
	pop	esi

; 1149 : 		}

	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
_TEXT	ENDS
PUBLIC	??1CvEspionageAI@@QAE@XZ			; CvEspionageAI::~CvEspionageAI
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__ehfuncinfo$??1CvEspionageAI@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1CvEspionageAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvEspionageAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvEspionageAI@@QAE@XZ$6
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvEspionageAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvEspionageAI@@QAE@XZ PROC				; CvEspionageAI::~CvEspionageAI, COMDAT
; _this$ = ecx

; 4204 : {

	push	-1
	push	__ehhandler$??1CvEspionageAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	mov	DWORD PTR __$EHRec$[esp+28], 6

; 4205 : 	Uninit();

	call	?Reset@CvEspionageAI@@QAEXXZ		; CvEspionageAI::Reset

; 4206 : }

	mov	eax, DWORD PTR [esi+628]
	lea	ecx, DWORD PTR [esi+640]
	mov	BYTE PTR __$EHRec$[esp+28], 5
	cmp	eax, ecx
	je	SHORT $LN14@CvEspionag
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN14@CvEspionag:
	mov	eax, DWORD PTR [esi+524]
	lea	edx, DWORD PTR [esi+536]
	mov	BYTE PTR __$EHRec$[esp+28], 4
	cmp	eax, edx
	je	SHORT $LN28@CvEspionag
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN28@CvEspionag:
	mov	eax, DWORD PTR [esi+420]
	lea	ecx, DWORD PTR [esi+432]
	mov	BYTE PTR __$EHRec$[esp+28], 3
	cmp	eax, ecx
	je	SHORT $LN42@CvEspionag
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN42@CvEspionag:
	mov	eax, DWORD PTR [esi+316]
	lea	edx, DWORD PTR [esi+328]
	mov	BYTE PTR __$EHRec$[esp+28], 2
	cmp	eax, edx
	je	SHORT $LN56@CvEspionag
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN56@CvEspionag:
	mov	eax, DWORD PTR [esi+212]
	lea	ecx, DWORD PTR [esi+224]
	mov	BYTE PTR __$EHRec$[esp+28], 1
	cmp	eax, ecx
	je	SHORT $LN70@CvEspionag
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN70@CvEspionag:
	mov	eax, DWORD PTR [esi+108]
	lea	edx, DWORD PTR [esi+120]
	mov	BYTE PTR __$EHRec$[esp+28], 0
	cmp	eax, edx
	je	SHORT $LN84@CvEspionag
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN84@CvEspionag:
	mov	eax, DWORD PTR [esi+4]
	add	esi, 16					; 00000010H
	cmp	eax, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	pop	esi
	je	SHORT $LN98@CvEspionag
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN98@CvEspionag:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvEspionageAI@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 628				; 00000274H
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__ehhandler$??1CvEspionageAI@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvEspionageAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvEspionageAI@@QAE@XZ ENDP				; CvEspionageAI::~CvEspionageAI
PUBLIC	??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	esi
	mov	esi, ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	edi, DWORD PTR [esi]
	push	eax
	push	edi
	call	?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy
	add	esi, 12					; 0000000cH
	cmp	edi, esi
	je	SHORT $LN3@FStaticVec@5
	push	edi
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN3@FStaticVec@5:
	pop	edi
	pop	esi

; 619  : 	};

	ret	0
??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z$0
__ehfuncinfo$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_pTemp$ = -20						; size = 4
$T249073 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T249204 = 8						; size = 4
_i$227346 = 8						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	push	ebx
	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN58@GrowSize@4
	mov	DWORD PTR [esi+8], 1
$LN58@GrowSize@4:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+28]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@4
$LL8@GrowSize@4:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN52@GrowSize@4

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@4

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@4
$LN52@GrowSize@4:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@4:

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	edi, DWORD PTR [esi+8]
	cmp	edi, 22					; 00000016H
	jbe	SHORT $LN16@GrowSize@4
	push	798					; 0000031eH
	lea	eax, DWORD PTR [edi+edi*4]
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	add	eax, eax
	add	eax, eax
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	ebx, eax
	mov	DWORD PTR [esi+8], edi
	jmp	SHORT $LN15@GrowSize@4
$LN16@GrowSize@4:
	lea	ebx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 22			; 00000016H
$LN15@GrowSize@4:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);
; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	xor	edi, edi
	push	ebp
	mov	DWORD PTR _pTemp$[esp+36], ebx
	mov	DWORD PTR _i$227346[esp+32], edi
	cmp	DWORD PTR [esi+4], edi
	jbe	SHORT $LN1@GrowSize@4
	or	ebp, -1
$LL3@GrowSize@4:

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	lea	eax, DWORD PTR [edi+edi*4]
	add	eax, eax
	add	eax, eax
	lea	ecx, DWORD PTR [eax+ebx]
	mov	DWORD PTR $T249073[esp+36], ecx
	mov	DWORD PTR __$EHRec$[esp+44], 0
	test	ecx, ecx
	je	SHORT $LN12@GrowSize@4
	mov	edx, DWORD PTR [esi]
	add	edx, eax
	push	edx
	call	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
$LN12@GrowSize@4:
	inc	edi
	mov	DWORD PTR __$EHRec$[esp+44], ebp
	mov	DWORD PTR _i$227346[esp+32], edi
	cmp	edi, DWORD PTR [esi+4]
	jb	SHORT $LL3@GrowSize@4
$LN1@GrowSize@4:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR $T249204[esp+32], ecx
	test	eax, eax
	jbe	SHORT $LN25@GrowSize@4
	mov	edi, ecx
	mov	ebp, eax
$LL27@GrowSize@4:
	mov	eax, DWORD PTR [edi]
	lea	edx, DWORD PTR [edi+12]
	cmp	eax, edx
	je	SHORT $LN36@GrowSize@4
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	mov	ecx, DWORD PTR $T249204[esp+36]
	add	esp, 4
$LN36@GrowSize@4:
	add	edi, 20					; 00000014H
	sub	ebp, 1
	jne	SHORT $LL27@GrowSize@4
$LN25@GrowSize@4:
	lea	eax, DWORD PTR [esi+12]
	pop	ebp
	cmp	ecx, eax
	je	SHORT $LN57@GrowSize@4
	push	ecx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN57@GrowSize@4:

; 769  : 		m_pData = pTemp;
; 770  : 
; 771  : 		m_bIsResized = true;
; 772  : 	};

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	mov	DWORD PTR [esi], ebx
	pop	edi
	mov	BYTE PTR [esi+452], 1
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 20					; 00000014H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z$0:
	mov	eax, DWORD PTR _i$227346[ebp-4]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR _pTemp$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T249073[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize
PUBLIC	?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::erase
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::erase, COMDAT
; _this$ = ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);
; 1030 : 		iterator _Last = _Make_iter(_Last_arg);
; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __Last_arg$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	push	esi
	mov	esi, DWORD PTR __First_arg$[esp]
	mov	DWORD PTR [eax], esi
	cmp	esi, edx
	je	SHORT $LN1@erase@3
	push	edi

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edi, DWORD PTR [ecx+8]
	cmp	edx, edi
	je	SHORT $LN26@erase@3
	push	ebx
	npad	4
$LL28@erase@3:
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [esi], ebx
	mov	ebx, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], ebx
	add	edx, 8
	add	esi, 8
	cmp	edx, edi
	jne	SHORT $LL28@erase@3
	pop	ebx
$LN26@erase@3:

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);
; 1049 : 			_Mylast = _Ptr;

	mov	DWORD PTR [ecx+8], esi
	pop	edi
$LN1@erase@3:
	pop	esi

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);
; 1055 : #endif
; 1056 : 		}

	ret	12					; 0000000cH
?erase@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@0@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 1135 : 		}

	ret	0
?_Tidy@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXXZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z
_TEXT	SEGMENT
$T249371 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Cat$249375 = 12					; size = 1
$T249373 = 12						; size = 1
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::erase, COMDAT
; _this$ = ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[esp-4]

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);
; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __Last_arg$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [edi], eax
	cmp	eax, edx
	je	SHORT $LN26@erase@4

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	ecx, DWORD PTR [esi+8]
	push	ebx
	mov	BYTE PTR $T249371[esp+8], 0
	mov	ebx, DWORD PTR $T249371[esp+8]
	push	ebx
	mov	ebx, DWORD PTR __Cat$249375[esp+12]
	push	ebx
	mov	ebx, DWORD PTR $T249373[esp+16]
	push	ebx
	push	eax
	push	ecx
	push	edx
	call	??$_Copy_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);
; 1049 : 			_Mylast = _Ptr;

	mov	DWORD PTR [esi+8], eax
	pop	ebx
$LN26@erase@4:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, edi
	pop	edi
	pop	esi

; 1055 : #endif
; 1056 : 		}

	ret	12					; 0000000cH
?erase@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@0@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Tidy@4

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy@4:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 1135 : 		}

	ret	0
?_Tidy@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXXZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	esi

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	esi, DWORD PTR __Count$[esp]
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+4]
	mov	eax, esi
	mov	ecx, edi
	test	esi, esi
	jbe	SHORT $LN22@Ufill
	mov	edx, DWORD PTR __Val$[esp+4]
	push	ebx
$LL17@Ufill:
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebx
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL17@Ufill
	pop	ebx
$LN22@Ufill:

; 1255 : 		return (_Ptr + _Count);

	lea	eax, DWORD PTR [edi+esi*4]
	pop	edi
	pop	esi

; 1256 : 		}

	ret	12					; 0000000cH
?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Tidy@5

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy@5:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 1135 : 		}

	ret	0
?_Tidy@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXXZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
; Function compile flags: /Ogtpy
;	COMDAT ?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z
_TEXT	SEGMENT
__Capacity$ = -4					; size = 4
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Tmp$228059 = 16					; size = 4
__Tmp$228049 = 16					; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ecx
	push	esi
	mov	esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	edx, DWORD PTR [esi+4]
	push	edi
	test	edx, edx
	jne	SHORT $LN29@Insert_n
	xor	ecx, ecx
	jmp	SHORT $LN30@Insert_n
$LN29@Insert_n:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, edx
	sar	eax, 2
	mov	ecx, eax
$LN30@Insert_n:

; 1162 : 
; 1163 : 		if (_Count == 0)

	mov	edi, DWORD PTR __Count$[esp+8]
	test	edi, edi
	je	$LN1@Insert_n
	push	ebx

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ebx, DWORD PTR [esi+8]
	mov	eax, ebx
	sub	eax, edx
	sar	eax, 2
	mov	edx, 1073741823				; 3fffffffH
	sub	edx, eax
	cmp	edx, edi
	jae	SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@KAXXZ ; std::vector<CvCity *,std::allocator<CvCity *> >::_Xlen
$LN64@Insert_n:
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

	lea	edx, DWORD PTR [eax+edi]
	push	ebp
	cmp	ecx, edx
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, ecx
	shr	eax, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, eax
	cmp	ebx, ecx
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR __Capacity$[esp+20], 0
	mov	ecx, DWORD PTR __Capacity$[esp+20]
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	add	ecx, eax
	mov	DWORD PTR __Capacity$[esp+20], ecx
$LN18@Insert_n:

; 1171 : 			if (_Capacity < size() + _Count)

	cmp	ecx, edx
	jae	SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	DWORD PTR __Capacity$[esp+20], edx
	mov	ecx, edx
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	push	0
	push	ecx
	call	??$_Allocate@PAVCvCity@@@std@@YAPAPAVCvCity@@IPAPAV1@@Z ; std::_Allocate<CvCity *>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ebx, DWORD PTR __Where$[esp+24]
	sub	ebx, DWORD PTR [esi+4]
	add	esp, 8
	mov	ebp, eax

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Val$[esp+16]
	push	eax
	sar	ebx, 2
	push	edi
	lea	ecx, DWORD PTR [ebp+ebx*4]
	push	ecx
	mov	ecx, esi
	call	?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR __Where$[esp+16]
	mov	eax, DWORD PTR [esi+4]
	push	ebp
	push	edx
	push	eax
	mov	ecx, esi
	call	??$_Umove@PAPAVCvCity@@@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV2@00@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Umove<CvCity * *>

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR __Where$[esp+16]
	add	ebx, edi
	lea	ecx, DWORD PTR [ebp+ebx*4]
	push	ecx
	push	edx
	push	eax
	mov	ecx, esi
	call	??$_Umove@PAPAVCvCity@@@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV2@00@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Umove<CvCity * *>

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)
; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1188 : 			if (0 < _Ncopied)
; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 1191 : 			_RERAISE;
; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 2
	add	edi, ecx

; 1195 : 			if (_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN57@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);
; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN57@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[esp+20]

; 1206 : 			_Mylast = _Newvec + _Count;

	lea	ecx, DWORD PTR [ebp+edi*4]
	lea	eax, DWORD PTR [ebp+edx*4]

; 1207 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+4], ebp
	pop	ebp
	pop	ebx
	pop	edi
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+8], ecx
	pop	esi

; 1249 : 			}
; 1250 : 		}

	pop	ecx
	ret	12					; 0000000cH
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR __Where$[esp+16]

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[esp+16]
	mov	edx, ebx
	sub	edx, eax
	sar	edx, 2
	cmp	edx, edi
	mov	edx, DWORD PTR [ecx]

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	lea	ebp, DWORD PTR [edi*4]
	mov	DWORD PTR __Tmp$228049[esp+16], edx
	jae	SHORT $LN3@Insert_n
	lea	ecx, DWORD PTR [eax+ebp]
	push	ecx
	push	ebx
	push	eax
	mov	ecx, esi
	call	??$_Umove@PAPAVCvCity@@@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV2@00@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Umove<CvCity * *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, eax
	sub	ecx, DWORD PTR __Where$[esp+16]
	lea	edx, DWORD PTR __Tmp$228049[esp+16]
	sar	ecx, 2
	push	edx
	sub	edi, ecx
	push	edi
	push	eax
	mov	ecx, esi
	call	?_Ufill@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV3@IABQAV3@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Ufill

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1221 : 			_RERAISE;
; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

	add	DWORD PTR [esi+8], ebp
	mov	esi, DWORD PTR [esi+8]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Where$[esp+16]
	lea	edx, DWORD PTR __Tmp$228049[esp+16]
	push	edx
	sub	esi, ebp
	push	esi
	push	eax
	call	??$fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z ; std::fill<CvCity * *,CvCity *>
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi

; 1249 : 			}
; 1250 : 		}

	pop	ecx
	ret	12					; 0000000cH
$LN3@Insert_n:

; 1232 : 			}
; 1233 : 		else
; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence
; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	push	ebx
	mov	edi, ebx
	push	ebx
	sub	edi, ebp
	push	edi
	mov	ecx, esi
	call	??$_Umove@PAPAVCvCity@@@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEPAPAVCvCity@@PAPAV2@00@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Umove<CvCity * *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	push	ebx
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR __Where$[esp+20]
	push	edi
	push	eax
	call	??$_Unchecked_move_backward@PAPAVCvCity@@PAPAV1@@stdext@@YAPAPAVCvCity@@PAPAV1@00@Z ; stdext::_Unchecked_move_backward<CvCity * *,CvCity * *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[esp+28]
	lea	ecx, DWORD PTR __Tmp$228059[esp+28]
	push	ecx
	add	ebp, eax
	push	ebp
	push	eax
	call	??$fill@PAPAVCvCity@@PAV1@@std@@YAXPAPAVCvCity@@0ABQAV1@@Z ; std::fill<CvCity * *,CvCity *>
	add	esp, 24					; 00000018H
	pop	ebp
	pop	ebx
$LN1@Insert_n:
	pop	edi
	pop	esi

; 1249 : 			}
; 1250 : 		}

	pop	ecx
	ret	12					; 0000000cH
$LN63@Insert_n:
?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z
_TEXT	SEGMENT
$T249592 = -4						; size = 1
__Cat$249596 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T249592[esp+4], 0
	mov	eax, DWORD PTR $T249592[esp+4]
	mov	ecx, DWORD PTR __Cat$249596[esp+4]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Count$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >

; 943  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUHeistLocation@@@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU2@00@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Umove<HeistLocation *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUHeistLocation@@@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU2@00@Z
_TEXT	SEGMENT
$T249647 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$249650 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUHeistLocation@@@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU2@00@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Umove<HeistLocation *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	edx, DWORD PTR __Cat$249650[esp]
	mov	BYTE PTR $T249647[esp+4], 0
	mov	eax, DWORD PTR $T249647[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	edx
	mov	edx, DWORD PTR __First$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >

; 1149 : 		}

	add	esp, 28					; 0000001cH
	ret	12					; 0000000cH
??$_Umove@PAUHeistLocation@@@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU2@00@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Umove<HeistLocation *>
_TEXT	ENDS
PUBLIC	??$_Umove@PAUSpyNotificationMessage@@@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU2@00@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Umove<SpyNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAUSpyNotificationMessage@@@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU2@00@Z
_TEXT	SEGMENT
$T249702 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$249705 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUSpyNotificationMessage@@@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU2@00@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Umove<SpyNotificationMessage *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	edx, DWORD PTR __Cat$249705[esp]
	mov	BYTE PTR $T249702[esp+4], 0
	mov	eax, DWORD PTR $T249702[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	edx
	mov	edx, DWORD PTR __First$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >

; 1149 : 		}

	add	esp, 28					; 0000001cH
	ret	12					; 0000000cH
??$_Umove@PAUSpyNotificationMessage@@@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU2@00@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Umove<SpyNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@0AAV?$allocator@UIntrigueNotificationMessage@@@0@@Z ; std::_Destroy_range<std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@0AAV?$allocator@UIntrigueNotificationMessage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@0AAV?$allocator@UIntrigueNotificationMessage@@@0@@Z PROC ; std::_Destroy_range<std::allocator<IntrigueNotificationMessage> >, COMDAT

; 224  : 	{	// destroy [_First, _Last)

	push	esi

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	esi, DWORD PTR __First$[esp]
	push	edi
	mov	edi, DWORD PTR __Last$[esp+4]
	cmp	esi, edi
	je	SHORT $LN5@Destroy_ra@2
	npad	2
$LL7@Destroy_ra@2:
	lea	ecx, DWORD PTR [esi+36]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	add	esi, 68					; 00000044H
	cmp	esi, edi
	jne	SHORT $LL7@Destroy_ra@2
$LN5@Destroy_ra@2:
	pop	edi
	pop	esi

; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@0AAV?$allocator@UIntrigueNotificationMessage@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$_Umove@PAUScoreCityEntry@@@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU2@00@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Umove<ScoreCityEntry *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??$_Umove@PAUScoreCityEntry@@@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU2@00@Z
_TEXT	SEGMENT
$T249827 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$249830 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUScoreCityEntry@@@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU2@00@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Umove<ScoreCityEntry *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	edx, DWORD PTR __Cat$249830[esp]
	mov	BYTE PTR $T249827[esp+4], 0
	mov	eax, DWORD PTR $T249827[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	edx
	mov	edx, DWORD PTR __First$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >

; 1149 : 		}

	add	esp, 28					; 0000001cH
	ret	12					; 0000000cH
??$_Umove@PAUScoreCityEntry@@@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU2@00@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Umove<ScoreCityEntry *>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@U_Undefined_move_tag@3@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@U_Undefined_move_tag@3@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T249845 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$249848 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@U_Undefined_move_tag@3@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	ecx, DWORD PTR __Cat$249848[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T249845[esp+4], 0
	mov	eax, DWORD PTR $T249845[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >

; 208  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Uninit_move@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@U_Undefined_move_tag@3@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T249855 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
__Chunk$ = 36						; size = 4
$T249856 = 40						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 1
??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z PROC ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>, COMDAT

; 5285 : 	{

	push	ecx

; 5286 : 		_STD _Chunked_merge(_First, _Last, _Dest, _Chunk, _Count, _Pred, _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Pred$[esp]
	mov	edx, DWORD PTR __Count$[esp]
	push	ebx
	xor	ebx, ebx
	mov	BYTE PTR $T249855[esp+8], bl
	mov	eax, DWORD PTR $T249855[esp+8]
	push	eax
	mov	eax, DWORD PTR __Chunk$[esp+8]
	push	ecx
	push	edx
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	ecx, DWORD PTR __Dest$[esp+56]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last$[esp+40]
	mov	eax, DWORD PTR __First$[esp+40]
	mov	DWORD PTR $T249856[esp+40], esp
	push	edx
	push	eax
	call	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>

; 5287 : 	}

	mov	eax, DWORD PTR __Dest$[esp+48]
	add	esp, 44					; 0000002cH
	cmp	eax, ebx
	je	SHORT $LN17@Unchecked_@7
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN17@Unchecked_@7:
	pop	ebx
	pop	ecx
	ret	0
??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryHighEval@@@Z ENDP ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Unchecked_chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@stdext@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HHUScoreCityEntryHighEval@@@Z ; stdext::_Unchecked_chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@stdext@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HHUScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T249892 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Chunk$ = 20						; size = 4
__Count$ = 24						; size = 4
__Pred$ = 28						; size = 1
??$_Unchecked_chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@stdext@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HHUScoreCityEntryHighEval@@@Z PROC ; stdext::_Unchecked_chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>, COMDAT

; 5285 : 	{

	push	ecx

; 5286 : 		_STD _Chunked_merge(_First, _Last, _Dest, _Chunk, _Count, _Pred, _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Pred$[esp]
	mov	edx, DWORD PTR __Count$[esp]
	mov	BYTE PTR $T249892[esp+4], 0
	mov	eax, DWORD PTR $T249892[esp+4]
	push	eax
	mov	eax, DWORD PTR __Chunk$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Dest$[esp+8]
	push	edx
	mov	edx, DWORD PTR __Last$[esp+12]
	push	eax
	mov	eax, DWORD PTR __First$[esp+16]
	push	ecx
	push	edx
	push	eax
	call	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>

; 5287 : 	}

	add	esp, 32					; 00000020H
	ret	0
??$_Unchecked_chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@stdext@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HHUScoreCityEntryHighEval@@@Z ENDP ; stdext::_Unchecked_chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z
_TEXT	SEGMENT
$T249900 = -20						; size = 20
$T249897 = -20						; size = 20
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Mid$ = 16						; size = 4
__Last$ = 20						; size = 4
$T250073 = 24						; size = 1
__Cat$250078 = 24					; size = 1
$T250075 = 24						; size = 1
$T250039 = 24						; size = 1
__Cat$250044 = 24					; size = 1
$T250041 = 24						; size = 1
$T249984 = 24						; size = 1
__Cat$249989 = 24					; size = 1
$T249986 = 24						; size = 1
$T249950 = 24						; size = 1
__Cat$249955 = 24					; size = 1
$T249952 = 24						; size = 1
$T249901 = 24						; size = 4
$T249899 = 24						; size = 4
$T249898 = 24						; size = 4
$T249896 = 24						; size = 4
__Count1$ = 24						; size = 4
__Count2$ = 28						; size = 4
__Tempbuf$ = 32						; size = 4
??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z PROC ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>, COMDAT

; 2683 : 	{	// rotate [_First, _Last) using temp buffer

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 2684 : 	if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())

	mov	ebp, DWORD PTR __Count2$[esp+24]
	push	esi
	mov	esi, DWORD PTR __Tempbuf$[esp+28]
	push	edi
	mov	edi, DWORD PTR __Count1$[esp+32]
	cmp	edi, ebp
	jg	$LN4@Buffered_r
	mov	ecx, esi
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	edi, eax
	jg	$LN4@Buffered_r

; 2685 : 		{	// buffer left partition, then copy parts
; 2686 : 		_STDEXT unchecked_copy(_First, _Mid, _Tempbuf._Init());

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	xor	ebx, ebx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __Mid$[esp+52]
	mov	ecx, DWORD PTR __First$[esp+52]
	mov	DWORD PTR $T249896[esp+52], esp
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T249897[esp+64]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	eax, DWORD PTR $T249897[esp+68]
	add	esp, 32					; 00000020H
	cmp	eax, ebx
	je	SHORT $LN25@Buffered_r
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN25@Buffered_r:

; 2687 : 		_STDEXT unchecked_copy(_Mid, _Last, _First);

	mov	BYTE PTR $T249950[esp+32], bl
	mov	eax, DWORD PTR $T249950[esp+32]
	mov	ecx, DWORD PTR __Cat$249955[esp+32]
	mov	edx, DWORD PTR $T249952[esp+32]
	push	eax
	mov	eax, DWORD PTR __First$[esp+36]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+40]
	push	edx
	mov	edx, DWORD PTR __Mid$[esp+44]
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR $T249898[esp+56]
	push	eax
	call	??$_Copy_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>

; 2688 : 		return (_STDEXT unchecked_copy_backward(_Tempbuf._First(), _Tempbuf._Last(),
; 2689 : 			_Last));

	mov	esi, DWORD PTR [esi+16]
	mov	BYTE PTR $T249984[esp+60], bl
	mov	ecx, DWORD PTR $T249984[esp+60]
	mov	edx, DWORD PTR __Cat$249989[esp+60]
	mov	eax, DWORD PTR $T249986[esp+60]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+64]
	push	edx
	mov	edx, DWORD PTR [esi+4]
	push	eax
	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+72]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	??$_Copy_backward_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 56					; 00000038H
	mov	eax, esi

; 2700 : 		std::advance(_First, _Count2);
; 2701 : 		return (_First);
; 2702 : 		}
; 2703 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
$LN4@Buffered_r:

; 2690 : 		}
; 2691 : 	else if (_Count2 <= _Tempbuf._Maxlen())

	mov	ecx, esi
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	ebp, eax
	jg	$LN2@Buffered_r

; 2692 : 		{	// buffer right partition, then copy parts
; 2693 : 		_STDEXT unchecked_copy(_Mid, _Last, _Tempbuf._Init());

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	xor	ebx, ebx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __Last$[esp+52]
	mov	ecx, DWORD PTR __Mid$[esp+52]
	mov	DWORD PTR $T249899[esp+52], esp
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T249900[esp+64]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	eax, DWORD PTR $T249900[esp+68]
	add	esp, 32					; 00000020H
	cmp	eax, ebx
	je	SHORT $LN57@Buffered_r
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN57@Buffered_r:

; 2694 : 		_STDEXT unchecked_copy_backward(_First, _Mid, _Last);

	mov	BYTE PTR $T250039[esp+32], bl
	mov	eax, DWORD PTR $T250039[esp+32]
	mov	ecx, DWORD PTR __Cat$250044[esp+32]
	mov	edx, DWORD PTR $T250041[esp+32]
	push	eax
	mov	eax, DWORD PTR __Last$[esp+36]
	push	ecx
	mov	ecx, DWORD PTR __Mid$[esp+40]
	push	edx
	mov	edx, DWORD PTR __First$[esp+44]
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR $T249901[esp+56]
	push	eax
	call	??$_Copy_backward_opt@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>

; 2695 : 		return (_STDEXT unchecked_copy(_Tempbuf._First(), _Tempbuf._Last(), _First));

	mov	esi, DWORD PTR [esi+16]
	mov	BYTE PTR $T250073[esp+60], bl
	mov	ecx, DWORD PTR $T250073[esp+60]
	mov	edx, DWORD PTR __Cat$250078[esp+60]
	mov	eax, DWORD PTR $T250075[esp+60]
	push	ecx
	mov	ecx, DWORD PTR __First$[esp+64]
	push	edx
	mov	edx, DWORD PTR [esi+4]
	push	eax
	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR ___$ReturnUdt$[esp+72]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	??$_Copy_opt@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@Urandom_access_iterator_tag@3@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@PAUScoreCityEntry@@0V10@Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::random_access_iterator_tag>
	add	esp, 56					; 00000038H
	mov	eax, esi

; 2700 : 		std::advance(_First, _Count2);
; 2701 : 		return (_First);
; 2702 : 		}
; 2703 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
$LN2@Buffered_r:

; 2696 : 		}
; 2697 : 	else
; 2698 : 		{	// buffer too small, rotate in place
; 2699 : 		std::rotate(_First, _Mid, _Last);

	mov	eax, DWORD PTR __First$[esp+32]
	mov	ecx, DWORD PTR __Mid$[esp+32]
	cmp	eax, ecx
	je	SHORT $LN88@Buffered_r
	mov	edx, DWORD PTR __Last$[esp+32]
	cmp	ecx, edx
	je	SHORT $LN88@Buffered_r
	xor	ebx, ebx
	push	ebx
	push	ebx
	push	edx
	push	ecx
	push	eax
	call	??$_Rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00PAHPAUScoreCityEntry@@@Z ; std::_Rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
	mov	eax, DWORD PTR __First$[esp+52]
	add	esp, 20					; 00000014H
$LN88@Buffered_r:

; 2700 : 		std::advance(_First, _Count2);
; 2701 : 		return (_First);
; 2702 : 		}
; 2703 : 	}

	pop	edi
	lea	ecx, DWORD PTR [eax+ebp*8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+28]
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx
	add	esp, 20					; 00000014H
	ret	0
??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ENDP ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>
_TEXT	ENDS
PUBLIC	??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T250187 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 20
__Chunk$ = 36						; size = 4
$T250188 = 40						; size = 4
__Count$ = 40						; size = 4
__Pred$ = 44						; size = 1
??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z PROC ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>, COMDAT

; 5285 : 	{

	push	ecx

; 5286 : 		_STD _Chunked_merge(_First, _Last, _Dest, _Chunk, _Count, _Pred, _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Pred$[esp]
	mov	edx, DWORD PTR __Count$[esp]
	push	ebx
	xor	ebx, ebx
	mov	BYTE PTR $T250187[esp+8], bl
	mov	eax, DWORD PTR $T250187[esp+8]
	push	eax
	mov	eax, DWORD PTR __Chunk$[esp+8]
	push	ecx
	push	edx
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	ecx, DWORD PTR __Dest$[esp+56]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR __Last$[esp+40]
	mov	eax, DWORD PTR __First$[esp+40]
	mov	DWORD PTR $T250188[esp+40], esp
	push	edx
	push	eax
	call	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>

; 5287 : 	}

	mov	eax, DWORD PTR __Dest$[esp+48]
	add	esp, 44					; 0000002cH
	cmp	eax, ebx
	je	SHORT $LN17@Unchecked_@8
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN17@Unchecked_@8:
	pop	ebx
	pop	ecx
	ret	0
??$_Unchecked_chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@stdext@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@0V?$_Temp_iterator@UScoreCityEntry@@@2@HHUScoreCityEntryLowEval@@@Z ENDP ; stdext::_Unchecked_chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Unchecked_chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@stdext@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HHUScoreCityEntryLowEval@@@Z ; stdext::_Unchecked_chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unchecked_chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@stdext@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HHUScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T250224 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Chunk$ = 20						; size = 4
__Count$ = 24						; size = 4
__Pred$ = 28						; size = 1
??$_Unchecked_chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@stdext@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HHUScoreCityEntryLowEval@@@Z PROC ; stdext::_Unchecked_chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>, COMDAT

; 5285 : 	{

	push	ecx

; 5286 : 		_STD _Chunked_merge(_First, _Last, _Dest, _Chunk, _Count, _Pred, _STD _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Pred$[esp]
	mov	edx, DWORD PTR __Count$[esp]
	mov	BYTE PTR $T250224[esp+4], 0
	mov	eax, DWORD PTR $T250224[esp+4]
	push	eax
	mov	eax, DWORD PTR __Chunk$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Dest$[esp+8]
	push	edx
	mov	edx, DWORD PTR __Last$[esp+12]
	push	eax
	mov	eax, DWORD PTR __First$[esp+16]
	push	ecx
	push	edx
	push	eax
	call	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>

; 5287 : 	}

	add	esp, 32					; 00000020H
	ret	0
??$_Unchecked_chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@stdext@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HHUScoreCityEntryLowEval@@@Z ENDP ; stdext::_Unchecked_chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	esi

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	esi, DWORD PTR __Count$[esp]
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+4]
	mov	eax, esi
	mov	ecx, edi
	test	esi, esi
	jbe	SHORT $LN22@Ufill@2
	mov	edx, DWORD PTR __Val$[esp+4]
	push	ebx
$LL17@Ufill@2:
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebx
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL17@Ufill@2
	pop	ebx
$LN22@Ufill@2:

; 1255 : 		return (_Ptr + _Count);

	lea	eax, DWORD PTR [edi+esi*4]
	pop	edi
	pop	esi

; 1256 : 		}

	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Ogtpy
;	COMDAT ?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
_TEXT	SEGMENT
__Capacity$ = -4					; size = 4
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Tmp$214846 = 16					; size = 4
__Tmp$214836 = 16					; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z PROC ; std::vector<int,std::allocator<int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ecx
	push	esi
	mov	esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	edx, DWORD PTR [esi+4]
	push	edi
	test	edx, edx
	jne	SHORT $LN29@Insert_n@2
	xor	ecx, ecx
	jmp	SHORT $LN30@Insert_n@2
$LN29@Insert_n@2:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, edx
	sar	eax, 2
	mov	ecx, eax
$LN30@Insert_n@2:

; 1162 : 
; 1163 : 		if (_Count == 0)

	mov	edi, DWORD PTR __Count$[esp+8]
	test	edi, edi
	je	$LN1@Insert_n@2
	push	ebx

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ebx, DWORD PTR [esi+8]
	mov	eax, ebx
	sub	eax, edx
	sar	eax, 2
	mov	edx, 1073741823				; 3fffffffH
	sub	edx, eax
	cmp	edx, edi
	jae	SHORT $LN12@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
$LN64@Insert_n@2:
$LN12@Insert_n@2:

; 1167 : 		else if (_Capacity < size() + _Count)

	lea	edx, DWORD PTR [eax+edi]
	push	ebp
	cmp	ecx, edx
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, ecx
	shr	eax, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, eax
	cmp	ebx, ecx
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR __Capacity$[esp+20], 0
	mov	ecx, DWORD PTR __Capacity$[esp+20]
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	add	ecx, eax
	mov	DWORD PTR __Capacity$[esp+20], ecx
$LN18@Insert_n@2:

; 1171 : 			if (_Capacity < size() + _Count)

	cmp	ecx, edx
	jae	SHORT $LN9@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	DWORD PTR __Capacity$[esp+20], edx
	mov	ecx, edx
$LN9@Insert_n@2:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	push	0
	push	ecx
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ebx, DWORD PTR __Where$[esp+24]
	sub	ebx, DWORD PTR [esi+4]
	add	esp, 8
	mov	ebp, eax

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Val$[esp+16]
	push	eax
	sar	ebx, 2
	push	edi
	lea	ecx, DWORD PTR [ebp+ebx*4]
	push	ecx
	mov	ecx, esi
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR __Where$[esp+16]
	mov	eax, DWORD PTR [esi+4]
	push	ebp
	push	edx
	push	eax
	mov	ecx, esi
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR __Where$[esp+16]
	add	ebx, edi
	lea	ecx, DWORD PTR [ebp+ebx*4]
	push	ecx
	push	edx
	push	eax
	mov	ecx, esi
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)
; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1188 : 			if (0 < _Ncopied)
; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 1191 : 			_RERAISE;
; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 2
	add	edi, ecx

; 1195 : 			if (_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN57@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);
; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN57@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[esp+20]

; 1206 : 			_Mylast = _Newvec + _Count;

	lea	ecx, DWORD PTR [ebp+edi*4]
	lea	eax, DWORD PTR [ebp+edx*4]

; 1207 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+4], ebp
	pop	ebp
	pop	ebx
	pop	edi
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+8], ecx
	pop	esi

; 1249 : 			}
; 1250 : 		}

	pop	ecx
	ret	12					; 0000000cH
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR __Where$[esp+16]

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[esp+16]
	mov	edx, ebx
	sub	edx, eax
	sar	edx, 2
	cmp	edx, edi
	mov	edx, DWORD PTR [ecx]

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	lea	ebp, DWORD PTR [edi*4]
	mov	DWORD PTR __Tmp$214836[esp+16], edx
	jae	SHORT $LN3@Insert_n@2
	lea	ecx, DWORD PTR [eax+ebp]
	push	ecx
	push	ebx
	push	eax
	mov	ecx, esi
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, eax
	sub	ecx, DWORD PTR __Where$[esp+16]
	lea	edx, DWORD PTR __Tmp$214836[esp+16]
	sar	ecx, 2
	push	edx
	sub	edi, ecx
	push	edi
	push	eax
	mov	ecx, esi
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1221 : 			_RERAISE;
; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

	add	DWORD PTR [esi+8], ebp
	mov	esi, DWORD PTR [esi+8]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Where$[esp+16]
	lea	edx, DWORD PTR __Tmp$214836[esp+16]
	push	edx
	sub	esi, ebp
	push	esi
	push	eax
	call	??$fill@PAHH@std@@YAXPAH0ABH@Z		; std::fill<int *,int>
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi

; 1249 : 			}
; 1250 : 		}

	pop	ecx
	ret	12					; 0000000cH
$LN3@Insert_n@2:

; 1232 : 			}
; 1233 : 		else
; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence
; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	push	ebx
	mov	edi, ebx
	push	ebx
	sub	edi, ebp
	push	edi
	mov	ecx, esi
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	push	ebx
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR __Where$[esp+20]
	push	edi
	push	eax
	call	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[esp+28]
	lea	ecx, DWORD PTR __Tmp$214846[esp+28]
	push	ecx
	add	ebp, eax
	push	ebp
	push	eax
	call	??$fill@PAHH@std@@YAXPAH0ABH@Z		; std::fill<int *,int>
	add	esp, 24					; 00000018H
	pop	ebp
	pop	ebx
$LN1@Insert_n@2:
	pop	edi
	pop	esi

; 1249 : 			}
; 1250 : 		}

	pop	ecx
	ret	12					; 0000000cH
$LN63@Insert_n@2:
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Insert_n
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::push_back
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z$0
__ehfuncinfo$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	ENDS
;	COMDAT ?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T250418 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_element$ = 8						; size = 4
?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z PROC ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	-1
	push	__ehhandler$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _this$[esp+24], esi
	mov	BYTE PTR [esi+452], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@4

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize
$LN1@push_back@4:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T250418[esp+24], ecx
	mov	DWORD PTR __$EHRec$[esp+32], 0
	test	ecx, ecx
	je	SHORT $LN4@push_back@4
	mov	edx, DWORD PTR _element$[esp+20]
	push	edx
	call	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
$LN4@push_back@4:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], ecx

; 682  : 	};

	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 20					; 00000014H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z$0:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR $T250418[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?push_back@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAEIABV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@@Z ENDP ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::push_back
PUBLIC	??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN6@vector@3
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@vector@3:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 560  : 		}

	ret	0
??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXXZ PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::clear, COMDAT
; _this$ = ecx

; 1060 : 		erase(begin(), end());

	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [ecx+8]
	cmp	edx, esi
	je	SHORT $LN15@clear@4
	mov	eax, esi
	cmp	esi, esi
	je	SHORT $LN40@clear@4
	push	edi
$LL42@clear@4:
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], edi
	add	eax, 8
	add	edx, 8
	cmp	eax, esi
	jne	SHORT $LL42@clear@4
	pop	edi
$LN40@clear@4:
	mov	DWORD PTR [ecx+8], edx
$LN15@clear@4:
	pop	esi

; 1061 : 		}

	ret	0
?clear@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXXZ ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN6@vector@4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@vector@4:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 560  : 		}

	ret	0
??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T250748 = -4						; size = 1
$T250750 = -4						; size = 1
__Cat$250752 = -4					; size = 1
?clear@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXXZ PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ecx
	push	esi
	mov	esi, ecx

; 1060 : 		erase(begin(), end());

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, eax
	je	SHORT $LN15@clear@5
	mov	BYTE PTR $T250748[esp+8], 0
	mov	edx, DWORD PTR $T250748[esp+8]
	push	edx
	mov	edx, DWORD PTR __Cat$250752[esp+12]
	push	edx
	mov	edx, DWORD PTR $T250750[esp+16]
	push	edx
	push	ecx
	push	eax
	push	eax
	call	??$_Copy_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H
	mov	DWORD PTR [esi+8], eax
$LN15@clear@5:
	pop	esi

; 1061 : 		}

	pop	ecx
	ret	0
?clear@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXXZ ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN6@vector@5
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@vector@5:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 560  : 		}

	ret	0
??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU3@IABU3@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Ufill
; Function compile flags: /Ogtpy
;	COMDAT ?_Ufill@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU3@IABU3@@Z
_TEXT	SEGMENT
$T250783 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$250786 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU3@IABU3@@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	edx, DWORD PTR __Cat$250786[esp]
	push	esi
	mov	esi, DWORD PTR __Count$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+8]
	mov	BYTE PTR $T250783[esp+12], 0
	mov	eax, DWORD PTR $T250783[esp+12]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+12]
	push	edx
	push	ecx
	push	eax
	push	esi
	push	edi
	call	??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >

; 1255 : 		return (_Ptr + _Count);

	mov	ecx, esi
	add	esp, 24					; 00000018H
	shl	ecx, 4
	add	ecx, esi
	lea	eax, DWORD PTR [edi+ecx*4]
	pop	edi
	pop	esi

; 1256 : 		}

	pop	ecx
	ret	12					; 0000000cH
?_Ufill@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU3@IABU3@@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Ufill
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	esi
	push	edi
	mov	edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, eax
	test	ecx, -4					; fffffffcH
	mov	ecx, DWORD PTR __Where$[esp+4]
	jne	SHORT $LN3@insert
	xor	esi, esi
	jmp	SHORT $LN4@insert
$LN3@insert:
	mov	esi, ecx
	sub	esi, eax
	sar	esi, 2
$LN4@insert:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[esp+4]
	push	edx
	push	1
	push	ecx
	mov	ecx, edi
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR [edi+4]
	lea	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], ecx
	pop	esi

; 879  : 		}

	ret	12					; 0000000cH
?insert@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@V?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@ABQAVCvCity@@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::insert
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$2
__catchsym$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$0
__unwindtable$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
_TEXT	SEGMENT
__Tmp$227826 = -24					; size = 8
__Tmp$227816 = -24					; size = 8
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$251054 = 8					; size = 1
__Cat$250983 = 8					; size = 1
__Where$ = 8						; size = 4
__Newvec$227801 = 12					; size = 4
__Count$ = 12						; size = 4
tv515 = 16						; size = 4
$T251051 = 16						; size = 1
$T250979 = 16						; size = 1
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	edx, DWORD PTR [esi+4]
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	test	edx, edx
	jne	SHORT $LN29@Insert_n@3
	xor	ecx, ecx
	jmp	SHORT $LN30@Insert_n@3
$LN29@Insert_n@3:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, edx
	sar	eax, 3
	mov	ecx, eax
$LN30@Insert_n@3:

; 1162 : 
; 1163 : 		if (_Count == 0)

	mov	ebx, DWORD PTR __Count$[ebp]
	test	ebx, ebx
	je	$LN1@Insert_n@3

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	edi, DWORD PTR [esi+8]
	mov	eax, edi
	sub	eax, edx
	sar	eax, 3
	mov	edx, 536870911				; 1fffffffH
	sub	edx, eax
	cmp	edx, ebx
	jae	SHORT $LN12@Insert_n@3

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@KAXXZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Xlen
$LN87@Insert_n@3:
$LN12@Insert_n@3:

; 1167 : 		else if (_Capacity < size() + _Count)

	lea	edx, DWORD PTR [eax+ebx]
	cmp	ecx, edx
	jae	$LN10@Insert_n@3

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, ecx
	shr	eax, 1
	mov	edi, 536870911				; 1fffffffH
	sub	edi, eax
	cmp	edi, ecx
	jae	SHORT $LN17@Insert_n@3
	mov	DWORD PTR __Capacity$[ebp], 0
	mov	ecx, DWORD PTR __Capacity$[ebp]
	jmp	SHORT $LN18@Insert_n@3
$LN17@Insert_n@3:
	add	ecx, eax
	mov	DWORD PTR __Capacity$[ebp], ecx
$LN18@Insert_n@3:

; 1171 : 			if (_Capacity < size() + _Count)

	cmp	ecx, edx
	jae	SHORT $LN9@Insert_n@3

; 1172 : 				_Capacity = size() + _Count;

	mov	DWORD PTR __Capacity$[ebp], edx
	mov	ecx, edx
$LN9@Insert_n@3:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	push	0
	push	ecx
	call	??$_Allocate@UHeistLocation@@@std@@YAPAUHeistLocation@@IPAU1@@Z ; std::_Allocate<HeistLocation>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edi, DWORD PTR __Where$[ebp]
	sub	edi, DWORD PTR [esi+4]

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	add	esp, 8
	push	ecx
	sar	edi, 3
	push	ebx
	lea	edx, DWORD PTR [eax+edi*8]
	push	edx
	mov	ecx, esi
	mov	DWORD PTR __Newvec$227801[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	call	?_Ufill@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU3@IABU3@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR __Cat$250983[ebp]
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR $T250979[ebp], 0
	mov	ecx, DWORD PTR $T250979[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Newvec$227801[ebp]
	push	edx
	mov	edx, DWORD PTR __Where$[ebp]
	push	esi
	push	ecx
	push	edx
	push	eax
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR [esi+8]
	add	esp, 24					; 00000018H
	mov	BYTE PTR $T251051[ebp], 0
	mov	edx, DWORD PTR $T251051[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$251054[ebp]
	push	edx
	lea	ecx, DWORD PTR [edi+ebx]
	mov	edi, DWORD PTR __Newvec$227801[ebp]
	push	esi
	lea	ecx, DWORD PTR [edi+ecx*8]
	push	ecx
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Uninit_copy@PAUHeistLocation@@PAU1@V?$allocator@UHeistLocation@@@std@@@std@@YAPAUHeistLocation@@PAU1@00AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<HeistLocation *,HeistLocation *,std::allocator<HeistLocation> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 3
	add	esp, 24					; 00000018H
	add	ebx, ecx

; 1195 : 			if (_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN81@Insert_n@3

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);
; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN81@Insert_n@3:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [edi+edx*8]

; 1206 : 			_Mylast = _Newvec + _Count;

	lea	ecx, DWORD PTR [edi+ebx*8]
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+4], edi

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
__catch$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)
; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1188 : 			if (0 < _Ncopied)
; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Newvec$227801[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
__catch$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z$2:

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN88@Insert_n@3:
$LN10@Insert_n@3:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, edi
	sub	ecx, eax
	sar	ecx, 3
	cmp	ecx, ebx
	jae	SHORT $LN3@Insert_n@3

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$227816[ebp+4], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	lea	ecx, DWORD PTR [ebx*8]
	mov	DWORD PTR tv515[ebp], ecx
	add	ecx, eax
	push	ecx
	push	edi
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __Tmp$227816[ebp], edx
	call	??$_Umove@PAUHeistLocation@@@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU2@00@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Umove<HeistLocation *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, eax
	sub	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR __Tmp$227816[ebp]
	sar	ecx, 3
	push	edx
	sub	ebx, ecx
	push	ebx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+12], 2
	call	?_Ufill@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU3@IABU3@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Ufill

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1221 : 			_RERAISE;
; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR tv515[ebp]
	add	DWORD PTR [esi+8], eax
	mov	esi, DWORD PTR [esi+8]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$227816[ebp]
	push	edx
	sub	esi, eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	esi
	push	eax
	call	??$fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z ; std::fill<HeistLocation *,HeistLocation>
	add	esp, 12					; 0000000cH

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN3@Insert_n@3:

; 1232 : 			}
; 1233 : 		else
; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	lea	eax, DWORD PTR [ebx*8]
	push	edi
	mov	ebx, edi
	sub	ebx, eax
	push	edi
	mov	DWORD PTR __Tmp$227826[ebp], ecx
	push	ebx
	mov	ecx, esi
	mov	DWORD PTR __Tmp$227826[ebp+4], edx
	mov	DWORD PTR tv515[ebp], eax
	call	??$_Umove@PAUHeistLocation@@@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEPAUHeistLocation@@PAU2@00@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Umove<HeistLocation *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	push	edi
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	ebx
	push	eax
	call	??$_Unchecked_move_backward@PAUHeistLocation@@PAU1@@stdext@@YAPAUHeistLocation@@PAU1@00@Z ; stdext::_Unchecked_move_backward<HeistLocation *,HeistLocation *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR tv515[ebp]
	lea	ecx, DWORD PTR __Tmp$227826[ebp]
	push	ecx
	add	edx, eax
	push	edx
	push	eax
	call	??$fill@PAUHeistLocation@@U1@@std@@YAXPAUHeistLocation@@0ABU1@@Z ; std::fill<HeistLocation *,HeistLocation>
	add	esp, 24					; 00000018H
$LN1@Insert_n@3:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN86@Insert_n@3:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n
PUBLIC	?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$2
__catchsym$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$0
__unwindtable$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
__Tmp$227901 = -40					; size = 20
__Tmp$227891 = -40					; size = 20
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$251291 = 8					; size = 1
__Cat$251219 = 8					; size = 1
__Where$ = 8						; size = 4
__Newvec$227876 = 12					; size = 4
__Count$ = 12						; size = 4
tv525 = 16						; size = 4
tv515 = 16						; size = 4
$T251288 = 16						; size = 1
$T251216 = 16						; size = 1
__Val$ = 16						; size = 4
?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	mov	esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	test	eax, eax
	jne	SHORT $LN29@Insert_n@4
	xor	ecx, ecx
	jmp	SHORT $LN30@Insert_n@4
$LN29@Insert_n@4:
	mov	edx, DWORD PTR [esi+12]
	sub	edx, eax
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	ecx, eax
$LN30@Insert_n@4:

; 1162 : 
; 1163 : 		if (_Count == 0)

	mov	edi, DWORD PTR __Count$[ebp]
	test	edi, edi
	je	$LN85@Insert_n@4

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ebx, DWORD PTR [esi+8]
	mov	edx, ebx
	sub	edx, DWORD PTR [esi+4]
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	edx, 214748364				; 0cccccccH
	sub	edx, eax
	cmp	edx, edi
	jae	SHORT $LN12@Insert_n@4

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Xlen
$LN91@Insert_n@4:
$LN12@Insert_n@4:

; 1167 : 		else if (_Capacity < size() + _Count)

	lea	edx, DWORD PTR [eax+edi]
	cmp	ecx, edx
	jae	$LN10@Insert_n@4

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, ecx
	shr	eax, 1
	mov	ebx, 214748364				; 0cccccccH
	sub	ebx, eax
	cmp	ebx, ecx
	jae	SHORT $LN17@Insert_n@4
	mov	DWORD PTR __Capacity$[ebp], 0
	mov	ecx, DWORD PTR __Capacity$[ebp]
	jmp	SHORT $LN18@Insert_n@4
$LN17@Insert_n@4:
	add	ecx, eax
	mov	DWORD PTR __Capacity$[ebp], ecx
$LN18@Insert_n@4:

; 1171 : 			if (_Capacity < size() + _Count)

	cmp	ecx, edx
	jae	SHORT $LN9@Insert_n@4

; 1172 : 				_Capacity = size() + _Count;

	mov	DWORD PTR __Capacity$[ebp], edx
	mov	ecx, edx
$LN9@Insert_n@4:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	push	0
	push	ecx
	call	??$_Allocate@USpyNotificationMessage@@@std@@YAPAUSpyNotificationMessage@@IPAU1@@Z ; std::_Allocate<SpyNotificationMessage>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [esi+4]
	mov	ecx, eax
	mov	eax, 1717986919				; 66666667H
	imul	edx

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Val$[ebp]
	sar	edx, 3
	mov	ebx, edx
	add	esp, 8
	shr	ebx, 31					; 0000001fH
	add	ebx, edx
	push	eax
	lea	edx, DWORD PTR [ebx+ebx*4]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	edi
	mov	DWORD PTR __Newvec$227876[ebp], ecx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	call	?_Ufill@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU3@IABU3@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR __Cat$251219[ebp]
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR $T251216[ebp], 0
	mov	ecx, DWORD PTR $T251216[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Newvec$227876[ebp]
	push	edx
	mov	edx, DWORD PTR __Where$[ebp]
	push	esi
	push	ecx
	push	edx
	push	eax
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	edx, DWORD PTR __Newvec$227876[ebp]
	mov	eax, DWORD PTR [esi+8]
	add	esp, 24					; 00000018H
	add	ebx, edi
	lea	ecx, DWORD PTR [ebx+ebx*4]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR $T251288[ebp], 0
	mov	edx, DWORD PTR $T251288[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$251291[ebp]
	push	edx
	push	esi
	push	ecx
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Uninit_copy@PAUSpyNotificationMessage@@PAU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<SpyNotificationMessage *,SpyNotificationMessage *,std::allocator<SpyNotificationMessage> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

	mov	ebx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, ebx
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	add	esp, 24					; 00000018H
	add	edi, ecx

; 1195 : 			if (_Myfirst != 0)

	test	ebx, ebx
	je	SHORT $LN81@Insert_n@4

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);
; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN81@Insert_n@4:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR __Newvec$227876[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]

; 1206 : 			_Mylast = _Newvec + _Count;

	lea	edx, DWORD PTR [edi+edi*4]
	mov	DWORD PTR [esi+12], ecx
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [esi+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+4], eax

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
__catch$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)
; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1188 : 			if (0 < _Ncopied)
; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Newvec$227876[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
__catch$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z$2:

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN92@Insert_n@4:
$LN10@Insert_n@4:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	edx, ebx
	sub	edx, ecx
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, edi

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	jae	$LN3@Insert_n@4
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$227891[ebp], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$227891[ebp+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$227891[ebp+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR __Tmp$227891[ebp+16], eax

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	lea	eax, DWORD PTR [edi+edi*4]
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv515[ebp], eax
	add	eax, ecx
	push	eax
	push	ebx
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR __Tmp$227891[ebp+12], edx
	call	??$_Umove@PAUSpyNotificationMessage@@@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU2@00@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Umove<SpyNotificationMessage *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	ebx, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR __Tmp$227891[ebp]
	push	ecx
	mov	ecx, ebx
	sub	ecx, DWORD PTR __Where$[ebp]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	sub	edi, eax
	push	edi
	push	ebx
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+12], 2
	call	?_Ufill@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU3@IABU3@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Ufill

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1221 : 			_RERAISE;
; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR tv515[ebp]
	add	DWORD PTR [esi+8], eax
	mov	esi, DWORD PTR [esi+8]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR __Tmp$227891[ebp]
	push	ecx
	sub	esi, eax
	push	esi
	push	edx
	call	??$_Fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z ; std::_Fill<SpyNotificationMessage *,SpyNotificationMessage>
	add	esp, 12					; 0000000cH

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN3@Insert_n@4:

; 1232 : 			}
; 1233 : 		else
; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$227901[ebp], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$227901[ebp+4], edx
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+16]

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	lea	edi, DWORD PTR [edi+edi*4]
	mov	DWORD PTR __Tmp$227901[ebp+16], eax
	add	edi, edi
	push	ebx
	add	edi, edi
	mov	eax, ebx
	sub	eax, edi
	push	ebx
	mov	DWORD PTR __Tmp$227901[ebp+8], ecx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __Tmp$227901[ebp+12], edx
	mov	DWORD PTR tv525[ebp], eax
	call	??$_Umove@PAUSpyNotificationMessage@@@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEPAUSpyNotificationMessage@@PAU2@00@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Umove<SpyNotificationMessage *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	ecx, DWORD PTR tv525[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	push	ebx
	push	ecx
	push	edx
	mov	DWORD PTR [esi+8], eax
	call	??$_Unchecked_move_backward@PAUSpyNotificationMessage@@PAU1@@stdext@@YAPAUSpyNotificationMessage@@PAU1@00@Z ; stdext::_Unchecked_move_backward<SpyNotificationMessage *,SpyNotificationMessage *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$227901[ebp]
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	add	edi, eax
	push	edi
	push	eax
	call	??$_Fill@PAUSpyNotificationMessage@@U1@@std@@YAXPAUSpyNotificationMessage@@0ABU1@@Z ; std::_Fill<SpyNotificationMessage *,SpyNotificationMessage>
	add	esp, 24					; 00000018H
$LN85@Insert_n@4:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN90@Insert_n@4:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Insert_n
PUBLIC	?_Destroy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXPAUIntrigueNotificationMessage@@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXPAUIntrigueNotificationMessage@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXPAUIntrigueNotificationMessage@@0@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Destroy, COMDAT
; _this$ = ecx

; 1118 : 		{	// destroy [_First, _Last) using allocator

	push	esi

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	esi, DWORD PTR __First$[esp]
	push	edi
	mov	edi, DWORD PTR __Last$[esp+4]
	cmp	esi, edi
	je	SHORT $LN7@Destroy@2
	npad	2
$LL9@Destroy@2:
	lea	ecx, DWORD PTR [esi+36]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	add	esi, 68					; 00000044H
	cmp	esi, edi
	jne	SHORT $LL9@Destroy@2
$LN7@Destroy@2:
	pop	edi
	pop	esi

; 1120 : 		}

	ret	8
?_Destroy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXPAUIntrigueNotificationMessage@@0@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$2
__catchsym$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$0
__unwindtable$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
_TEXT	SEGMENT
__Tmp$228130 = -24					; size = 8
__Tmp$228120 = -24					; size = 8
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$251628 = 8					; size = 1
__Cat$251556 = 8					; size = 1
__Where$ = 8						; size = 4
__Newvec$228105 = 12					; size = 4
__Count$ = 12						; size = 4
tv515 = 16						; size = 4
$T251625 = 16						; size = 1
$T251553 = 16						; size = 1
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	edx, DWORD PTR [esi+4]
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	test	edx, edx
	jne	SHORT $LN29@Insert_n@5
	xor	ecx, ecx
	jmp	SHORT $LN30@Insert_n@5
$LN29@Insert_n@5:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, edx
	sar	eax, 3
	mov	ecx, eax
$LN30@Insert_n@5:

; 1162 : 
; 1163 : 		if (_Count == 0)

	mov	ebx, DWORD PTR __Count$[ebp]
	test	ebx, ebx
	je	$LN1@Insert_n@5

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	edi, DWORD PTR [esi+8]
	mov	eax, edi
	sub	eax, edx
	sar	eax, 3
	mov	edx, 536870911				; 1fffffffH
	sub	edx, eax
	cmp	edx, ebx
	jae	SHORT $LN12@Insert_n@5

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@KAXXZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Xlen
$LN87@Insert_n@5:
$LN12@Insert_n@5:

; 1167 : 		else if (_Capacity < size() + _Count)

	lea	edx, DWORD PTR [eax+ebx]
	cmp	ecx, edx
	jae	$LN10@Insert_n@5

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, ecx
	shr	eax, 1
	mov	edi, 536870911				; 1fffffffH
	sub	edi, eax
	cmp	edi, ecx
	jae	SHORT $LN17@Insert_n@5
	mov	DWORD PTR __Capacity$[ebp], 0
	mov	ecx, DWORD PTR __Capacity$[ebp]
	jmp	SHORT $LN18@Insert_n@5
$LN17@Insert_n@5:
	add	ecx, eax
	mov	DWORD PTR __Capacity$[ebp], ecx
$LN18@Insert_n@5:

; 1171 : 			if (_Capacity < size() + _Count)

	cmp	ecx, edx
	jae	SHORT $LN9@Insert_n@5

; 1172 : 				_Capacity = size() + _Count;

	mov	DWORD PTR __Capacity$[ebp], edx
	mov	ecx, edx
$LN9@Insert_n@5:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	push	0
	push	ecx
	call	??$_Allocate@UScoreCityEntry@@@std@@YAPAUScoreCityEntry@@IPAU1@@Z ; std::_Allocate<ScoreCityEntry>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edi, DWORD PTR __Where$[ebp]
	sub	edi, DWORD PTR [esi+4]

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	add	esp, 8
	push	ecx
	sar	edi, 3
	push	ebx
	lea	edx, DWORD PTR [eax+edi*8]
	push	edx
	mov	ecx, esi
	mov	DWORD PTR __Newvec$228105[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	call	?_Ufill@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU3@IABU3@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR __Cat$251556[ebp]
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR $T251553[ebp], 0
	mov	ecx, DWORD PTR $T251553[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Newvec$228105[ebp]
	push	edx
	mov	edx, DWORD PTR __Where$[ebp]
	push	esi
	push	ecx
	push	edx
	push	eax
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR [esi+8]
	add	esp, 24					; 00000018H
	mov	BYTE PTR $T251625[ebp], 0
	mov	edx, DWORD PTR $T251625[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$251628[ebp]
	push	edx
	lea	ecx, DWORD PTR [edi+ebx]
	mov	edi, DWORD PTR __Newvec$228105[ebp]
	push	esi
	lea	ecx, DWORD PTR [edi+ecx*8]
	push	ecx
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Uninit_copy@PAUScoreCityEntry@@PAU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAPAUScoreCityEntry@@PAU1@00AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ScoreCityEntry *,ScoreCityEntry *,std::allocator<ScoreCityEntry> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 3
	add	esp, 24					; 00000018H
	add	ebx, ecx

; 1195 : 			if (_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN81@Insert_n@5

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);
; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN81@Insert_n@5:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [edi+edx*8]

; 1206 : 			_Mylast = _Newvec + _Count;

	lea	ecx, DWORD PTR [edi+ebx*8]
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+4], edi

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
__catch$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)
; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1188 : 			if (0 < _Ncopied)
; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Newvec$228105[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
__catch$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z$2:

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN88@Insert_n@5:
$LN10@Insert_n@5:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, edi
	sub	ecx, eax
	sar	ecx, 3
	cmp	ecx, ebx
	jae	SHORT $LN3@Insert_n@5

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$228120[ebp+4], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	lea	ecx, DWORD PTR [ebx*8]
	mov	DWORD PTR tv515[ebp], ecx
	add	ecx, eax
	push	ecx
	push	edi
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __Tmp$228120[ebp], edx
	call	??$_Umove@PAUScoreCityEntry@@@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU2@00@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Umove<ScoreCityEntry *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, eax
	sub	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR __Tmp$228120[ebp]
	sar	ecx, 3
	push	edx
	sub	ebx, ecx
	push	ebx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+12], 2
	call	?_Ufill@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU3@IABU3@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Ufill

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1221 : 			_RERAISE;
; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR tv515[ebp]
	add	DWORD PTR [esi+8], eax
	mov	esi, DWORD PTR [esi+8]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$228120[ebp]
	push	edx
	sub	esi, eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	esi
	push	eax
	call	??$fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z ; std::fill<ScoreCityEntry *,ScoreCityEntry>
	add	esp, 12					; 0000000cH

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN3@Insert_n@5:

; 1232 : 			}
; 1233 : 		else
; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	lea	eax, DWORD PTR [ebx*8]
	push	edi
	mov	ebx, edi
	sub	ebx, eax
	push	edi
	mov	DWORD PTR __Tmp$228130[ebp], ecx
	push	ebx
	mov	ecx, esi
	mov	DWORD PTR __Tmp$228130[ebp+4], edx
	mov	DWORD PTR tv515[ebp], eax
	call	??$_Umove@PAUScoreCityEntry@@@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEPAUScoreCityEntry@@PAU2@00@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Umove<ScoreCityEntry *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	push	edi
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	ebx
	push	eax
	call	??$_Unchecked_move_backward@PAUScoreCityEntry@@PAU1@@stdext@@YAPAUScoreCityEntry@@PAU1@00@Z ; stdext::_Unchecked_move_backward<ScoreCityEntry *,ScoreCityEntry *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR tv515[ebp]
	lea	ecx, DWORD PTR __Tmp$228130[ebp]
	push	ecx
	add	edx, eax
	push	edx
	push	eax
	call	??$fill@PAUScoreCityEntry@@U1@@std@@YAXPAUScoreCityEntry@@0ABU1@@Z ; std::fill<ScoreCityEntry *,ScoreCityEntry>
	add	esp, 24					; 00000018H
$LN1@Insert_n@5:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN86@Insert_n@5:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n
PUBLIC	??$_Unchecked_uninitialized_move@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z
_TEXT	SEGMENT
$T251687 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$251690 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$251690[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T251687[esp+4], 0
	mov	eax, DWORD PTR $T251687[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >

; 865  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Unchecked_uninitialized_move@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
$T251824 = -8						; size = 1
$T251795 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T251794 = 16						; size = 1
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z PROC ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 3503 : 	_BidIt _Mid = _First;

	mov	eax, DWORD PTR __First$[esp-4]
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi

; 3504 : 	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)

	mov	edi, DWORD PTR __Count$[esp+20]
	xor	ebx, ebx
	cmp	edi, 32					; 00000020H
	jl	SHORT $LN4@Buffered_m
	mov	ebp, edi
	shr	ebp, 5
	npad	5
$LL6@Buffered_m:

; 3505 : 		{	// sort chunks
; 3506 : 		_BidIt _Midn = _Mid;
; 3507 : 		std::advance(_Midn, (int)_ISORT_MAX);
; 3508 : 
; 3509 : 		std::_Insertion_sort(_Mid, _Midn, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+20]
	push	ebx
	push	ecx
	lea	esi, DWORD PTR [eax+256]
	push	esi
	push	eax
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
	add	esp, 16					; 00000010H
	sub	ebp, 1

; 3510 : 		_Mid = _Midn;

	mov	eax, esi
	jne	SHORT $LL6@Buffered_m
$LN4@Buffered_m:

; 3511 : 		}
; 3512 : 	std::_Insertion_sort(_Mid, _Last, _Pred);	// sort partial last chunk

	mov	edx, DWORD PTR __Pred$[esp+20]
	mov	ecx, DWORD PTR __Last$[esp+20]
	push	ebx
	push	edx
	push	ecx
	push	eax
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>

; 3513 : 
; 3514 : 	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)

	mov	esi, 32					; 00000020H
	add	esp, 16					; 00000010H
	cmp	edi, esi
	jle	SHORT $LN1@Buffered_m
	mov	ebp, DWORD PTR __Tempbuf$[esp+20]
	npad	2
$LL3@Buffered_m:

; 3515 : 		{	// merge adjacent pairs of chunks to and from temp buffer
; 3516 : 		_STDEXT _Unchecked_chunked_merge(_First, _Last, _Tempbuf._Init(),
; 3517 : 			_Chunk, _Count, _Pred);

	mov	eax, DWORD PTR [ebp+16]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __Pred$[esp+20]
	mov	ecx, DWORD PTR [ebp+16]
	mov	BYTE PTR $T251794[esp+20], bl
	mov	eax, DWORD PTR $T251794[esp+20]
	push	eax
	push	edx
	push	edi
	push	esi
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR __Last$[esp+56]
	mov	ecx, DWORD PTR __First$[esp+56]
	mov	DWORD PTR $T251795[esp+60], esp
	push	eax
	push	ecx
	call	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryHighEval>

; 3518 : 		_STDEXT _Unchecked_chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
; 3519 : 			_Chunk *= 2, _Count, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+64]
	mov	eax, DWORD PTR [ebp+16]
	mov	BYTE PTR $T251824[esp+68], bl
	mov	edx, DWORD PTR $T251824[esp+68]
	push	edx
	mov	edx, DWORD PTR __First$[esp+68]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	push	edi
	add	esi, esi
	push	esi
	push	edx
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edx
	call	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryHighEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryHighEval>
	add	esi, esi
	add	esp, 72					; 00000048H
	cmp	esi, edi
	jl	SHORT $LL3@Buffered_m
$LN1@Buffered_m:

; 3520 : 		}
; 3521 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ENDP ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
tv518 = -24						; size = 4
$T252145 = -24						; size = 4
$T252055 = -24						; size = 4
$T251838 = -20						; size = 20
$T251835 = -20						; size = 20
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
$T251986 = 20						; size = 1
__Midn$230409 = 20					; size = 4
$T251839 = 20						; size = 4
$T251837 = 20						; size = 4
$T251836 = 20						; size = 4
$T251834 = 20						; size = 4
__Count1$ = 20						; size = 4
__Count2$ = 24						; size = 4
__Tempbuf$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z PROC ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 2889 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred

	sub	esp, 24					; 00000018H
	push	ebx

; 2890 : 	if (_Count1 + _Count2 == 2)

	mov	ebx, DWORD PTR __Count1$[esp+24]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Count2$[esp+36]
	lea	eax, DWORD PTR [ebx+edi]
	cmp	eax, 2
	jne	SHORT $LN9@Buffered_m@2

; 2891 : 		{	// order two one-element partitions
; 2892 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp+36]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __First$[esp+36]
	cmp	edx, DWORD PTR [ecx+4]
	jle	$LN3@Buffered_m@2

; 2893 : 			std::iter_swap(_First, _Mid);

	mov	edx, ecx
	cmp	ecx, eax
	je	$LN3@Buffered_m@2
	mov	edi, DWORD PTR [eax]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], edi
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], ecx

; 2933 : 		}
; 2934 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
$LN9@Buffered_m@2:

; 2894 : 		}
; 2895 : 	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())

	cmp	ebx, edi
	mov	esi, DWORD PTR __Tempbuf$[esp+36]
	jg	$LN6@Buffered_m@2
	mov	ecx, esi
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	ebx, eax
	jg	SHORT $LN6@Buffered_m@2

; 2896 : 		{	// buffer left partition, then merge
; 2897 : 		_STDEXT unchecked_copy(_First, _Mid, _Tempbuf._Init());

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	xor	ebx, ebx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __Mid$[esp+56]
	mov	ecx, DWORD PTR __First$[esp+56]
	mov	DWORD PTR $T251834[esp+56], esp
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T251835[esp+68]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	eax, DWORD PTR $T251835[esp+72]
	add	esp, 32					; 00000020H
	cmp	eax, ebx
	je	SHORT $LN53@Buffered_m@2
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN53@Buffered_m@2:

; 2898 : 		_STDEXT unchecked_merge(_Tempbuf._First(), _Tempbuf._Last(),
; 2899 : 			_Mid, _Last, _First, _Pred);

	mov	eax, DWORD PTR __Pred$[esp+36]
	mov	ecx, DWORD PTR __First$[esp+36]
	mov	edx, DWORD PTR __Last$[esp+36]
	mov	esi, DWORD PTR [esi+16]
	push	eax
	mov	eax, DWORD PTR __Mid$[esp+40]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	edx
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR $T251836[esp+60]
	push	eax
	call	??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryHighEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryHighEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
	add	esp, 28					; 0000001cH

; 2933 : 		}
; 2934 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
$LN6@Buffered_m@2:

; 2900 : 		}
; 2901 : 	else if (_Count2 <= _Tempbuf._Maxlen())

	mov	ecx, esi
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	edi, eax
	jg	$LN4@Buffered_m@2

; 2902 : 		{	// buffer right partition, then merge
; 2903 : 		_STDEXT unchecked_copy(_Mid, _Last, _Tempbuf._Init());

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	xor	ebx, ebx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __Last$[esp+56]
	mov	ecx, DWORD PTR __Mid$[esp+56]
	mov	DWORD PTR $T251837[esp+56], esp
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T251838[esp+68]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	eax, DWORD PTR $T251838[esp+72]
	add	esp, 32					; 00000020H
	cmp	eax, ebx
	je	SHORT $LN73@Buffered_m@2
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN73@Buffered_m@2:

; 2904 : 		_STDEXT _Unchecked_merge_backward(_First, _Mid, _Tempbuf._First(), _Tempbuf._Last(),
; 2905 : 			_Last, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+36]
	mov	esi, DWORD PTR [esi+16]
	mov	edx, DWORD PTR __Last$[esp+36]
	mov	BYTE PTR $T251986[esp+36], bl
	mov	eax, DWORD PTR $T251986[esp+36]
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	mov	ecx, DWORD PTR [esi]
	push	edx
	mov	edx, DWORD PTR __Mid$[esp+48]
	push	eax
	mov	eax, DWORD PTR __First$[esp+52]
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T251839[esp+64]
	push	ecx
	call	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryHighEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
	add	esp, 32					; 00000020H

; 2933 : 		}
; 2934 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
$LN4@Buffered_m@2:

; 2906 : 		}
; 2907 : 	else
; 2908 : 		{	// buffer too small, divide and conquer
; 2909 : 		_BidIt _Firstn, _Lastn;
; 2910 : 		_Diff _Count1n, _Count2n;
; 2911 : 		if (_Count2 < _Count1)

	cmp	edi, ebx

; 2912 : 			{	// left larger, cut it in half and partition right to match
; 2913 : 			_Count1n = _Count1 / 2, _Count2n = 0;
; 2914 : 			_Firstn = _First;
; 2915 : 			std::advance(_Firstn, _Count1n);
; 2916 : 			_Lastn = lower_bound(_Mid, _Last, *_Firstn, _Pred);

	push	0
	jge	SHORT $LN2@Buffered_m@2
	mov	ecx, DWORD PTR __Last$[esp+40]
	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR __First$[esp+40]
	mov	edi, eax
	mov	eax, DWORD PTR __Pred$[esp+40]
	push	eax
	sar	edi, 1
	lea	ebp, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR __Mid$[esp+44]
	push	ebp
	push	ecx
	push	edx
	lea	eax, DWORD PTR $T252055[esp+60]
	push	eax
	call	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
	mov	ebx, DWORD PTR [eax]

; 2917 : 			_Distance(_Mid, _Lastn, _Count2n);

	mov	esi, ebx
	sub	esi, DWORD PTR __Mid$[esp+60]
	add	esp, 24					; 00000018H
	sar	esi, 3

; 2918 : 			}
; 2919 : 		else

	jmp	SHORT $LN139@Buffered_m@2
$LN2@Buffered_m@2:

; 2920 : 			{	// right larger, cut it in half and partition left to match
; 2921 : 			_Count1n = 0, _Count2n = _Count2 / 2;
; 2922 : 			_Lastn = _Mid;
; 2923 : 			std::advance(_Lastn, _Count2n);
; 2924 : 			_Firstn = upper_bound(_First, _Mid, *_Lastn, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+40]
	mov	eax, edi
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR __First$[esp+40]
	mov	esi, eax
	mov	eax, DWORD PTR __Mid$[esp+40]
	push	ecx
	sar	esi, 1
	lea	ebx, DWORD PTR [eax+esi*8]
	push	ebx
	push	eax
	push	edx
	lea	eax, DWORD PTR $T252145[esp+60]
	push	eax
	call	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryHighEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryHighEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryHighEval>
	mov	ebp, DWORD PTR [eax]

; 2925 : 			_Distance(_First, _Firstn, _Count1n);

	mov	edi, ebp
	sub	edi, DWORD PTR __First$[esp+60]
	add	esp, 24					; 00000018H
	sar	edi, 3
$LN139@Buffered_m@2:

; 2926 : 			}
; 2927 : 		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
; 2928 : 			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle

	mov	ecx, DWORD PTR __Tempbuf$[esp+36]
	mov	eax, DWORD PTR __Count1$[esp+36]
	mov	edx, DWORD PTR __Mid$[esp+36]
	push	ecx
	push	esi
	sub	eax, edi
	push	eax
	push	ebx
	push	edx
	mov	DWORD PTR tv518[esp+60], eax
	lea	eax, DWORD PTR __Midn$230409[esp+56]
	push	ebp
	push	eax
	call	??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>

; 2929 : 		_Buffered_merge(_First, _Firstn, _Midn,
; 2930 : 			_Count1n, _Count2n, _Tempbuf, _Pred);	// merge each new part

	mov	ecx, DWORD PTR __Pred$[esp+64]
	mov	edx, DWORD PTR __Tempbuf$[esp+64]
	mov	eax, DWORD PTR __First$[esp+64]
	push	ecx
	push	edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Midn$230409[esp+80]
	push	edi
	push	ebp
	push	eax
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>

; 2931 : 		_Buffered_merge(_Midn, _Lastn, _Last,
; 2932 : 			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+92]
	mov	edx, DWORD PTR __Tempbuf$[esp+92]
	mov	eax, DWORD PTR __Count2$[esp+92]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+96]
	push	edx
	sub	eax, esi
	push	eax
	mov	eax, DWORD PTR tv518[esp+108]
	push	eax
	push	ecx
	push	ebx
	push	edi
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 84					; 00000054H
$LN3@Buffered_m@2:

; 2933 : 		}
; 2934 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ENDP ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
$T252322 = -8						; size = 1
$T252293 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
$T252292 = 16						; size = 1
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z PROC ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 3503 : 	_BidIt _Mid = _First;

	mov	eax, DWORD PTR __First$[esp-4]
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi

; 3504 : 	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)

	mov	edi, DWORD PTR __Count$[esp+20]
	xor	ebx, ebx
	cmp	edi, 32					; 00000020H
	jl	SHORT $LN4@Buffered_m@3
	mov	ebp, edi
	shr	ebp, 5
	npad	5
$LL6@Buffered_m@3:

; 3505 : 		{	// sort chunks
; 3506 : 		_BidIt _Midn = _Mid;
; 3507 : 		std::advance(_Midn, (int)_ISORT_MAX);
; 3508 : 
; 3509 : 		std::_Insertion_sort(_Mid, _Midn, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+20]
	push	ebx
	push	ecx
	lea	esi, DWORD PTR [eax+256]
	push	esi
	push	eax
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
	add	esp, 16					; 00000010H
	sub	ebp, 1

; 3510 : 		_Mid = _Midn;

	mov	eax, esi
	jne	SHORT $LL6@Buffered_m@3
$LN4@Buffered_m@3:

; 3511 : 		}
; 3512 : 	std::_Insertion_sort(_Mid, _Last, _Pred);	// sort partial last chunk

	mov	edx, DWORD PTR __Pred$[esp+20]
	mov	ecx, DWORD PTR __Last$[esp+20]
	push	ebx
	push	edx
	push	ecx
	push	eax
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>

; 3513 : 
; 3514 : 	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)

	mov	esi, 32					; 00000020H
	add	esp, 16					; 00000010H
	cmp	edi, esi
	jle	SHORT $LN1@Buffered_m@3
	mov	ebp, DWORD PTR __Tempbuf$[esp+20]
	npad	2
$LL3@Buffered_m@3:

; 3515 : 		{	// merge adjacent pairs of chunks to and from temp buffer
; 3516 : 		_STDEXT _Unchecked_chunked_merge(_First, _Last, _Tempbuf._Init(),
; 3517 : 			_Chunk, _Count, _Pred);

	mov	eax, DWORD PTR [ebp+16]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __Pred$[esp+20]
	mov	ecx, DWORD PTR [ebp+16]
	mov	BYTE PTR $T252292[esp+20], bl
	mov	eax, DWORD PTR $T252292[esp+20]
	push	eax
	push	edx
	push	edi
	push	esi
	sub	esp, 20					; 00000014H
	mov	eax, esp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR __Last$[esp+56]
	mov	ecx, DWORD PTR __First$[esp+56]
	mov	DWORD PTR $T252293[esp+60], esp
	push	eax
	push	ecx
	call	??$_Chunked_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@HUScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0V?$_Temp_iterator@UScoreCityEntry@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry>,int,ScoreCityEntryLowEval>

; 3518 : 		_STDEXT _Unchecked_chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
; 3519 : 			_Chunk *= 2, _Count, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+64]
	mov	eax, DWORD PTR [ebp+16]
	mov	BYTE PTR $T252322[esp+68], bl
	mov	edx, DWORD PTR $T252322[esp+68]
	push	edx
	mov	edx, DWORD PTR __First$[esp+68]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	push	edi
	add	esi, esi
	push	esi
	push	edx
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edx
	call	??$_Chunked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntryLowEval@@@std@@YAXPAUScoreCityEntry@@0V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@HHUScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Chunked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntryLowEval>
	add	esi, esi
	add	esp, 72					; 00000048H
	cmp	esi, edi
	jl	SHORT $LL3@Buffered_m@3
$LN1@Buffered_m@3:

; 3520 : 		}
; 3521 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ENDP ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
tv518 = -24						; size = 4
$T252644 = -24						; size = 4
$T252554 = -24						; size = 4
$T252337 = -20						; size = 20
$T252334 = -20						; size = 20
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
$T252485 = 20						; size = 1
__Midn$230534 = 20					; size = 4
$T252338 = 20						; size = 4
$T252336 = 20						; size = 4
$T252335 = 20						; size = 4
$T252333 = 20						; size = 4
__Count1$ = 20						; size = 4
__Count2$ = 24						; size = 4
__Tempbuf$ = 28						; size = 4
__Pred$ = 32						; size = 1
??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z PROC ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 2889 : 	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred

	sub	esp, 24					; 00000018H
	push	ebx

; 2890 : 	if (_Count1 + _Count2 == 2)

	mov	ebx, DWORD PTR __Count1$[esp+24]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Count2$[esp+36]
	lea	eax, DWORD PTR [ebx+edi]
	cmp	eax, 2
	jne	SHORT $LN9@Buffered_m@4

; 2891 : 		{	// order two one-element partitions
; 2892 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp+36]
	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR __First$[esp+36]
	cmp	edx, DWORD PTR [ecx+4]
	jge	$LN3@Buffered_m@4

; 2893 : 			std::iter_swap(_First, _Mid);

	mov	edx, ecx
	cmp	ecx, eax
	je	$LN3@Buffered_m@4
	mov	edi, DWORD PTR [eax]
	mov	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], edi
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], ecx

; 2933 : 		}
; 2934 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
$LN9@Buffered_m@4:

; 2894 : 		}
; 2895 : 	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())

	cmp	ebx, edi
	mov	esi, DWORD PTR __Tempbuf$[esp+36]
	jg	$LN6@Buffered_m@4
	mov	ecx, esi
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	ebx, eax
	jg	SHORT $LN6@Buffered_m@4

; 2896 : 		{	// buffer left partition, then merge
; 2897 : 		_STDEXT unchecked_copy(_First, _Mid, _Tempbuf._Init());

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	xor	ebx, ebx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __Mid$[esp+56]
	mov	ecx, DWORD PTR __First$[esp+56]
	mov	DWORD PTR $T252333[esp+56], esp
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T252334[esp+68]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	eax, DWORD PTR $T252334[esp+72]
	add	esp, 32					; 00000020H
	cmp	eax, ebx
	je	SHORT $LN53@Buffered_m@4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN53@Buffered_m@4:

; 2898 : 		_STDEXT unchecked_merge(_Tempbuf._First(), _Tempbuf._Last(),
; 2899 : 			_Mid, _Last, _First, _Pred);

	mov	eax, DWORD PTR __Pred$[esp+36]
	mov	ecx, DWORD PTR __First$[esp+36]
	mov	edx, DWORD PTR __Last$[esp+36]
	mov	esi, DWORD PTR [esi+16]
	push	eax
	mov	eax, DWORD PTR __Mid$[esp+40]
	push	ecx
	mov	ecx, DWORD PTR [esi+4]
	push	edx
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR $T252335[esp+60]
	push	eax
	call	??$unchecked_merge@PAUScoreCityEntry@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V23@UScoreCityEntryLowEval@@@stdext@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@0V12@11UScoreCityEntryLowEval@@@Z ; stdext::unchecked_merge<ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
	add	esp, 28					; 0000001cH

; 2933 : 		}
; 2934 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
$LN6@Buffered_m@4:

; 2900 : 		}
; 2901 : 	else if (_Count2 <= _Tempbuf._Maxlen())

	mov	ecx, esi
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	edi, eax
	jg	$LN4@Buffered_m@4

; 2902 : 		{	// buffer right partition, then merge
; 2903 : 		_STDEXT unchecked_copy(_Mid, _Last, _Tempbuf._Init());

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+4], ecx
	sub	esp, 20					; 00000014H
	mov	eax, esp
	xor	ebx, ebx
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR __Last$[esp+56]
	mov	ecx, DWORD PTR __Mid$[esp+56]
	mov	DWORD PTR $T252336[esp+56], esp
	push	eax
	push	ecx
	lea	edx, DWORD PTR $T252337[esp+68]
	push	edx
	call	??$unchecked_copy@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@V?$_Temp_iterator@UScoreCityEntry@@@2@@stdext@@YA?AV?$_Temp_iterator@UScoreCityEntry@@@std@@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@0V12@@Z ; stdext::unchecked_copy<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,std::_Temp_iterator<ScoreCityEntry> >
	mov	eax, DWORD PTR $T252337[esp+72]
	add	esp, 32					; 00000020H
	cmp	eax, ebx
	je	SHORT $LN73@Buffered_m@4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN73@Buffered_m@4:

; 2904 : 		_STDEXT _Unchecked_merge_backward(_First, _Mid, _Tempbuf._First(), _Tempbuf._Last(),
; 2905 : 			_Last, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+36]
	mov	esi, DWORD PTR [esi+16]
	mov	edx, DWORD PTR __Last$[esp+36]
	mov	BYTE PTR $T252485[esp+36], bl
	mov	eax, DWORD PTR $T252485[esp+36]
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	ecx
	mov	ecx, DWORD PTR [esi]
	push	edx
	mov	edx, DWORD PTR __Mid$[esp+48]
	push	eax
	mov	eax, DWORD PTR __First$[esp+52]
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T252338[esp+64]
	push	ecx
	call	??$_Merge_backward@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@PAUScoreCityEntry@@V12@UScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0PAUScoreCityEntry@@10UScoreCityEntryLowEval@@U_Range_checked_iterator_tag@0@@Z ; std::_Merge_backward<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry *,std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
	add	esp, 32					; 00000020H

; 2933 : 		}
; 2934 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
$LN4@Buffered_m@4:

; 2906 : 		}
; 2907 : 	else
; 2908 : 		{	// buffer too small, divide and conquer
; 2909 : 		_BidIt _Firstn, _Lastn;
; 2910 : 		_Diff _Count1n, _Count2n;
; 2911 : 		if (_Count2 < _Count1)

	cmp	edi, ebx

; 2912 : 			{	// left larger, cut it in half and partition right to match
; 2913 : 			_Count1n = _Count1 / 2, _Count2n = 0;
; 2914 : 			_Firstn = _First;
; 2915 : 			std::advance(_Firstn, _Count1n);
; 2916 : 			_Lastn = lower_bound(_Mid, _Last, *_Firstn, _Pred);

	push	0
	jge	SHORT $LN2@Buffered_m@4
	mov	ecx, DWORD PTR __Last$[esp+40]
	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR __First$[esp+40]
	mov	edi, eax
	mov	eax, DWORD PTR __Pred$[esp+40]
	push	eax
	sar	edi, 1
	lea	ebp, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR __Mid$[esp+44]
	push	ebp
	push	ecx
	push	edx
	lea	eax, DWORD PTR $T252554[esp+60]
	push	eax
	call	??$_Lower_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Lower_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
	mov	ebx, DWORD PTR [eax]

; 2917 : 			_Distance(_Mid, _Lastn, _Count2n);

	mov	esi, ebx
	sub	esi, DWORD PTR __Mid$[esp+60]
	add	esp, 24					; 00000018H
	sar	esi, 3

; 2918 : 			}
; 2919 : 		else

	jmp	SHORT $LN139@Buffered_m@4
$LN2@Buffered_m@4:

; 2920 : 			{	// right larger, cut it in half and partition left to match
; 2921 : 			_Count1n = 0, _Count2n = _Count2 / 2;
; 2922 : 			_Lastn = _Mid;
; 2923 : 			std::advance(_Lastn, _Count2n);
; 2924 : 			_Firstn = upper_bound(_First, _Mid, *_Lastn, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+40]
	mov	eax, edi
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR __First$[esp+40]
	mov	esi, eax
	mov	eax, DWORD PTR __Mid$[esp+40]
	push	ecx
	sar	esi, 1
	lea	ebx, DWORD PTR [eax+esi*8]
	push	ebx
	push	eax
	push	edx
	lea	eax, DWORD PTR $T252644[esp+60]
	push	eax
	call	??$_Upper_bound@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntry@@HUScoreCityEntryLowEval@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@0ABUScoreCityEntry@@UScoreCityEntryLowEval@@PAH@Z ; std::_Upper_bound<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntry,int,ScoreCityEntryLowEval>
	mov	ebp, DWORD PTR [eax]

; 2925 : 			_Distance(_First, _Firstn, _Count1n);

	mov	edi, ebp
	sub	edi, DWORD PTR __First$[esp+60]
	add	esp, 24					; 00000018H
	sar	edi, 3
$LN139@Buffered_m@4:

; 2926 : 			}
; 2927 : 		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
; 2928 : 			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle

	mov	ecx, DWORD PTR __Tempbuf$[esp+36]
	mov	eax, DWORD PTR __Count1$[esp+36]
	mov	edx, DWORD PTR __Mid$[esp+36]
	push	ecx
	push	esi
	sub	eax, edi
	push	eax
	push	ebx
	push	edx
	mov	DWORD PTR tv518[esp+60], eax
	lea	eax, DWORD PTR __Midn$230534[esp+56]
	push	ebp
	push	eax
	call	??$_Buffered_rotate@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@@std@@YA?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@V10@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@@Z ; std::_Buffered_rotate<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry>

; 2929 : 		_Buffered_merge(_First, _Firstn, _Midn,
; 2930 : 			_Count1n, _Count2n, _Tempbuf, _Pred);	// merge each new part

	mov	ecx, DWORD PTR __Pred$[esp+64]
	mov	edx, DWORD PTR __Tempbuf$[esp+64]
	mov	eax, DWORD PTR __First$[esp+64]
	push	ecx
	push	edx
	push	esi
	push	edi
	mov	edi, DWORD PTR __Midn$230534[esp+80]
	push	edi
	push	ebp
	push	eax
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>

; 2931 : 		_Buffered_merge(_Midn, _Lastn, _Last,
; 2932 : 			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+92]
	mov	edx, DWORD PTR __Tempbuf$[esp+92]
	mov	eax, DWORD PTR __Count2$[esp+92]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+96]
	push	edx
	sub	eax, esi
	push	eax
	mov	eax, DWORD PTR tv518[esp+108]
	push	eax
	push	ecx
	push	ebx
	push	edi
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 84					; 00000054H
$LN3@Buffered_m@4:

; 2933 : 		}
; 2934 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ENDP ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z PROC ; std::vector<int,std::allocator<int> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	esi
	push	edi
	mov	edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, eax
	test	ecx, -4					; fffffffcH
	mov	ecx, DWORD PTR __Where$[esp+4]
	jne	SHORT $LN3@insert@2
	xor	esi, esi
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	mov	esi, ecx
	sub	esi, eax
	sar	esi, 2
$LN4@insert@2:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[esp+4]
	push	edx
	push	1
	push	ecx
	mov	ecx, edi
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR [edi+4]
	lea	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], ecx
	pop	esi

; 879  : 		}

	ret	12					; 0000000cH
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ENDP ; std::vector<int,std::allocator<int> >::insert
_TEXT	ENDS
PUBLIC	??0?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
; Function compile flags: /Ogtpy
;	COMDAT ??0?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ
_TEXT	SEGMENT
??0?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ PROC ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>, COMDAT
; _this$ = ecx
	push	esi
	push	OFFSET ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
	push	OFFSET ??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >
	push	22					; 00000016H
	mov	esi, ecx
	push	16					; 00000010H
	push	esi
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	eax, esi
	pop	esi
	ret	0
??0?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ ENDP ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>
_TEXT	ENDS
PUBLIC	??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::~Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtpy
;	COMDAT ??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ
_TEXT	SEGMENT
??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ PROC ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::~Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>, COMDAT
; _this$ = ecx
	push	OFFSET ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
	push	22					; 00000016H
	push	16					; 00000010H
	push	ecx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	ret	0
??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ ENDP ; Firaxis::Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>::~Array<std::vector<HeistLocation,std::allocator<HeistLocation> >,22>
_TEXT	ENDS
PUBLIC	?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::ProcessSpyMessages
EXTRN	?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ:PROC ; CvCivilizationInfo::getAdjectiveKey
EXTRN	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ:PROC ; CvCivilizationBaseInfo::getShortDescriptionKey
EXTRN	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z:PROC ; CvGlobals::getTechInfo
EXTRN	?countHumanPlayersEverAlive@CvGame@@QBEHXZ:PROC	; CvGame::countHumanPlayersEverAlive
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__ehfuncinfo$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ DD 019930522H
	DD	014H
	DD	FLAT:__unwindtable$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$5
	DD	06H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$6
	DD	07H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$9
	DD	0aH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$11
	DD	0cH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$12
	DD	0dH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$15
	DD	010H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$16
	DD	011H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$17
	DD	011H
	DD	FLAT:__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$18
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
tv1620 = -544						; size = 4
tv1285 = -544						; size = 4
$T253118 = -544						; size = 4
_iDefendingSpy$223825 = -544				; size = 4
_pTechEntry$223789 = -544				; size = 4
_iMapX$253115 = -540					; size = 4
_pCity$223783 = -540					; size = 4
_bMultiplayer$ = -534					; size = 1
$T253037 = -533						; size = 1
_pNotifications$ = -532					; size = 4
$T252953 = -528						; size = 1
_ui$223778 = -528					; size = 4
__Cat$252957 = -524					; size = 1
$T252955 = -524						; size = 1
_pEspionageAI$ = -524					; size = 4
_strNotification$223865 = -520				; size = 80
_strNotification$223850 = -520				; size = 80
_strNotification$223831 = -520				; size = 80
_strNotification$223815 = -520				; size = 80
_strNotification$223802 = -520				; size = 80
_strSummary$223860 = -440				; size = 80
_strSummary$223846 = -440				; size = 80
_strSummary$223827 = -440				; size = 80
_strSummary$223811 = -440				; size = 80
_strSummary$223799 = -440				; size = 80
$T252764 = -360						; size = 28
$T252785 = -332						; size = 80
$T252766 = -332						; size = 80
$T252779 = -252						; size = 80
$T252770 = -252						; size = 80
$T252786 = -172						; size = 80
$T252765 = -172						; size = 80
$T252780 = -92						; size = 80
$T252769 = -92						; size = 80
__$EHRec$ = -12						; size = 12
?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ PROC	; CvPlayerEspionage::ProcessSpyMessages, COMDAT
; _this$ = ecx

; 2412 : {

	push	-1
	push	__ehhandler$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 532				; 00000214H
	push	ebx
	push	esi
	mov	esi, ecx

; 2413 : 	CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications

; 2414 : 	if(!pNotifications)

	xor	ebx, ebx
	mov	DWORD PTR _pNotifications$[esp+552], eax
	cmp	eax, ebx
	jne	SHORT $LN34@ProcessSpy

; 2415 : 	{
; 2416 : 		m_aSpyNotificationMessages.clear();

	mov	ecx, DWORD PTR [esi+1264]
	mov	eax, DWORD PTR [esi+1268]
	cmp	ecx, eax
	je	$LN299@ProcessSpy
	mov	BYTE PTR $T252953[esp+552], bl
	mov	edx, DWORD PTR $T252953[esp+552]
	push	edx
	mov	edx, DWORD PTR __Cat$252957[esp+556]
	push	edx
	mov	edx, DWORD PTR $T252955[esp+560]
	push	edx
	push	ecx
	push	eax
	push	eax
	call	??$_Copy_opt@PAUSpyNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUSpyNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<SpyNotificationMessage *,SpyNotificationMessage *,std::random_access_iterator_tag>
	add	esp, 24					; 00000018H
	mov	DWORD PTR [esi+1268], eax
	pop	esi
	pop	ebx

; 2585 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+544]
	mov	DWORD PTR fs:0, ecx
	add	esp, 544				; 00000220H
	ret	0
$LN34@ProcessSpy:

; 2417 : 		return;
; 2418 : 	}
; 2419 : 
; 2420 : 	bool bMultiplayer = GC.getGame().countHumanPlayersEverAlive() > 1;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	edi
	call	?countHumanPlayersEverAlive@CvGame@@QBEHXZ ; CvGame::countHumanPlayersEverAlive

; 2421 : 	CvEspionageAI* pEspionageAI = m_pPlayer->GetEspionageAI();

	mov	ecx, DWORD PTR [esi+1292]
	cmp	eax, 1
	setg	BYTE PTR _bMultiplayer$[esp+556]
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI

; 2422 : 
; 2423 : 	for(uint ui = 0; ui < m_aSpyNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [esi+1268]
	sub	ecx, DWORD PTR [esi+1264]
	mov	DWORD PTR _pEspionageAI$[esp+556], eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR _ui$223778[esp+556], ebx
	je	$LN31@ProcessSpy
	mov	edi, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	ebp
	npad	12
$LL336@ProcessSpy:

; 2424 : 	{
; 2425 : 		CvPlot* pPlot = GC.getMap().plot(m_aSpyNotificationMessages[ui].m_iCityX, m_aSpyNotificationMessages[ui].m_iCityY);

	mov	ecx, DWORD PTR [esi+1264]
	mov	ebp, DWORD PTR [ecx+ebx]
	mov	eax, DWORD PTR [ecx+ebx+4]
	add	ecx, ebx
	mov	DWORD PTR $T253118[esp+560], eax
	cmp	ebp, -2147483647			; 80000001H
	je	$LN32@ProcessSpy
	cmp	eax, -2147483647			; 80000001H
	je	$LN32@ProcessSpy
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	dl, BYTE PTR [ecx+4056]
	mov	ecx, DWORD PTR [ecx+4020]
	test	dl, dl
	je	SHORT $LN337@ProcessSpy
	test	ebp, ebp
	jge	SHORT $LN117@ProcessSpy
	mov	eax, ebp
	cdq
	idiv	ecx
	mov	eax, DWORD PTR $T253118[esp+560]
	mov	ebp, edx
	add	ebp, ecx
$LN337@ProcessSpy:
	mov	DWORD PTR _iMapX$253115[esp+560], ebp
$LN119@ProcessSpy:
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	dl, BYTE PTR [edx+4057]
	mov	BYTE PTR $T253037[esp+560], dl
	cmp	BYTE PTR $T253037[esp+560], 0
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	edx, DWORD PTR [edx+4024]
	mov	DWORD PTR tv1620[esp+560], edx
	je	SHORT $LN339@ProcessSpy
	test	eax, eax
	jge	SHORT $LN127@ProcessSpy
	mov	ebp, DWORD PTR tv1620[esp+560]
	cdq
	idiv	ebp
	add	edx, ebp
	mov	ebp, DWORD PTR _iMapX$253115[esp+560]
	jmp	SHORT $LN129@ProcessSpy
$LN117@ProcessSpy:
	cmp	ebp, ecx
	jl	SHORT $LN337@ProcessSpy
	mov	eax, ebp
	cdq
	idiv	ecx
	mov	eax, DWORD PTR $T253118[esp+560]
	mov	ebp, edx
	mov	DWORD PTR _iMapX$253115[esp+560], edx
	jmp	SHORT $LN119@ProcessSpy
$LN127@ProcessSpy:
	cmp	eax, edx
	jl	SHORT $LN339@ProcessSpy
	mov	ebp, DWORD PTR _iMapX$253115[esp+560]
	cdq
	idiv	DWORD PTR tv1620[esp+560]
	jmp	SHORT $LN129@ProcessSpy
$LN339@ProcessSpy:
	mov	edx, eax
$LN129@ProcessSpy:
	test	ebp, ebp
	jl	$LN32@ProcessSpy
	cmp	ebp, ecx
	jge	$LN32@ProcessSpy
	test	edx, edx
	jl	$LN32@ProcessSpy
	cmp	edx, DWORD PTR tv1620[esp+560]
	jge	$LN32@ProcessSpy
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	imul	ecx, edx
	add	ecx, ebp
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [eax+4068]

; 2426 : 		CvCity* pCity = NULL;
; 2427 : 		CvCityEspionage* pCityEspionage = NULL;
; 2428 : 		CvAssertMsg(pPlot, "Could not find plot location for SpyNotificationMessages");
; 2429 : 		if(pPlot)

	test	ecx, ecx
	je	$LN32@ProcessSpy

; 2430 : 		{
; 2431 : 			pCity = pPlot->getPlotCity();

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	$LN32@ProcessSpy
	cmp	eax, 64					; 00000040H
	jge	$LN32@ProcessSpy
	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pCity$223783[esp+560], eax

; 2432 : 			CvAssertMsg(pCity, "Plot does not contain a city");
; 2433 : 			if(pCity)

	test	eax, eax
	je	$LN32@ProcessSpy

; 2434 : 			{
; 2435 : 				CvAssertMsg(pCity->getOwner() == m_pPlayer->GetID(), "City does not belong to player. This is very strange");
; 2436 : 				pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, eax
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	ebp, eax

; 2437 : 			}
; 2438 : 		}
; 2439 : 
; 2440 : 		if(!pCity || !pCityEspionage)

	test	ebp, ebp
	je	$LN32@ProcessSpy

; 2441 : 		{
; 2442 : 			continue;
; 2443 : 		}
; 2444 : 
; 2445 : 		CvTechEntry* pTechEntry = NULL;
; 2446 : 		if(m_aSpyNotificationMessages[ui].m_eStolenTech != NO_TECH)

	mov	edx, DWORD PTR [esi+1264]
	cmp	DWORD PTR [ebx+edx+16], -1
	lea	eax, DWORD PTR [ebx+edx]
	mov	DWORD PTR _pTechEntry$223789[esp+560], 0
	je	SHORT $LN26@ProcessSpy

; 2447 : 		{
; 2448 : 			pTechEntry = GC.getTechInfo(m_aSpyNotificationMessages[ui].m_eStolenTech);

	mov	eax, DWORD PTR [eax+16]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ; CvGlobals::getTechInfo
	mov	DWORD PTR _pTechEntry$223789[esp+560], eax
$LN26@ProcessSpy:

; 2449 : 		}
; 2450 : 
; 2451 : 		if(bMultiplayer || !pTechEntry)

	cmp	BYTE PTR _bMultiplayer$[esp+560], 0
	jne	$LN24@ProcessSpy
	cmp	DWORD PTR _pTechEntry$223789[esp+560], 0
	je	$LN24@ProcessSpy

; 2521 : 			}
; 2522 : 		}
; 2523 : 		else
; 2524 : 		{
; 2525 : 			switch(m_aSpyNotificationMessages[ui].m_iSpyResult)

	mov	ecx, DWORD PTR [esi+1264]
	mov	eax, DWORD PTR [ebx+ecx+12]
	sub	eax, 1
	je	$LN7@ProcessSpy
	sub	eax, 1
	jne	$LN32@ProcessSpy

; 2550 : 			case SPY_RESULT_IDENTIFIED:
; 2551 : 			{
; 2552 : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_S");

	lea	edx, DWORD PTR _strSummary$223860[esp+560]
	push	OFFSET $SG223862
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 2553 : 				strSummary << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationInfo().getShortDescriptionKey();

	mov	eax, DWORD PTR [esi+1264]
	mov	ecx, DWORD PTR [eax+ebx+8]
	add	eax, ebx
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR __$EHRec$[esp+568], 16	; 00000010H
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223860[esp+564]
	call	edi

; 2554 : 				strSummary << pTechEntry->GetDescriptionKey();

	mov	ecx, DWORD PTR _pTechEntry$223789[esp+560]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR tv1285[esp+560], ecx
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strSummary$223860[esp+564]
	call	edi

; 2555 : 
; 2556 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223865[esp+560]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2557 : 				if(pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] == -1)  // no defensive spy

	mov	eax, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [eax+44]
	cmp	DWORD PTR [ebp+eax*4+4], -1
	mov	BYTE PTR __$EHRec$[esp+568], 17		; 00000011H
	jne	SHORT $LN3@ProcessSpy

; 2558 : 				{
; 2559 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_W_TIP");

	lea	ecx, DWORD PTR $T252785[esp+560]
	push	OFFSET $SG223868
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223865[esp+564]
	mov	BYTE PTR __$EHRec$[esp+572], 18		; 00000012H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T252785[esp+560]

; 2560 : 				}
; 2561 : 				else

	jmp	SHORT $LN342@ProcessSpy
$LN3@ProcessSpy:

; 2562 : 				{
; 2563 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED");

	lea	edx, DWORD PTR $T252786[esp+560]
	push	OFFSET $SG223871
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223865[esp+564]
	mov	BYTE PTR __$EHRec$[esp+572], 19		; 00000013H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T252786[esp+560]
$LN342@ProcessSpy:
	mov	BYTE PTR __$EHRec$[esp+568], 17		; 00000011H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2564 : 				}
; 2565 : 				strNotification << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationInfo().getAdjectiveKey();

	mov	eax, DWORD PTR [esi+1264]
	mov	ecx, DWORD PTR [eax+ebx+8]
	add	eax, ebx
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ ; CvCivilizationInfo::getAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223865[esp+564]
	call	edi

; 2566 : 				strNotification << pTechEntry->GetDescriptionKey();

	mov	ecx, DWORD PTR tv1285[esp+560]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223865[esp+564]
	call	edi

; 2567 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223783[esp+560]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223865[esp+564]
	call	edi

; 2568 : 				pNotifications->Add(NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, m_aSpyNotificationMessages[ui].m_eAttackingPlayer);

	mov	eax, DWORD PTR [esi+1264]
	mov	ebp, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	add	eax, ebx
	mov	eax, DWORD PTR [eax+8]
	push	-1
	push	eax
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223860[esp+576]
	call	ebp
	push	eax
	lea	ecx, DWORD PTR _strNotification$223865[esp+580]
	call	ebp
	mov	ecx, DWORD PTR _pNotifications$[esp+580]
	push	eax
	push	-720689320				; d50b2758H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2569 : 
; 2570 : 				pEspionageAI->m_aiNumSpiesCaught[m_aSpyNotificationMessages[ui].m_eAttackingPlayer]++;

	mov	ecx, DWORD PTR [esi+1264]
	mov	edx, DWORD PTR [ebx+ecx+8]
	mov	ecx, DWORD PTR _pEspionageAI$[esp+560]
	mov	eax, DWORD PTR [ecx+108]
	inc	DWORD PTR [eax+edx*4]
	lea	eax, DWORD PTR [eax+edx*4]

; 2571 : 				pEspionageAI->m_aiTurnLastSpyCaught[m_aSpyNotificationMessages[ui].m_eAttackingPlayer] = GC.getGame().getGameTurn();

	mov	eax, DWORD PTR [esi+1264]
	mov	edx, DWORD PTR [eax+ebx+8]
	add	eax, ebx
	mov	eax, DWORD PTR [ecx+420]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	lea	ebp, DWORD PTR [eax+edx*4]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	DWORD PTR [ebp], eax

; 2572 : 			}

	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[esp+568], 16		; 00000010H

; 2573 : 			break;

	jmp	$LN343@ProcessSpy
$LN7@ProcessSpy:

; 2526 : 			{
; 2527 : 			case SPY_RESULT_UNDETECTED:
; 2528 : 				// nothing happens, nobody is notified
; 2529 : 				break;
; 2530 : 			case SPY_RESULT_DETECTED:
; 2531 : 			{
; 2532 : 				// notify defending player that a spy of unknown origin stole a tech
; 2533 : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_S");

	lea	ecx, DWORD PTR _strSummary$223846[esp+560]
	push	OFFSET $SG223848
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 2534 : 				strSummary << pTechEntry->GetDescriptionKey();

	mov	ecx, DWORD PTR _pTechEntry$223789[esp+560]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR __$EHRec$[esp+568], 12	; 0000000cH
	mov	DWORD PTR tv1285[esp+560], ecx
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strSummary$223846[esp+564]
	call	edi

; 2535 : 
; 2536 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223850[esp+560]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2537 : 				if(pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] == -1)  // no defensive spy

	mov	edx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [edx+44]
	cmp	DWORD PTR [ebp+eax*4+4], -1
	mov	BYTE PTR __$EHRec$[esp+568], 13		; 0000000dH
	jne	SHORT $LN6@ProcessSpy

; 2538 : 				{
; 2539 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_W_TIP");

	lea	eax, DWORD PTR $T252779[esp+560]
	push	OFFSET $SG223853
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223850[esp+564]
	mov	BYTE PTR __$EHRec$[esp+572], 14		; 0000000eH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR $T252779[esp+560]
	mov	BYTE PTR __$EHRec$[esp+568], 13		; 0000000dH
	call	ebp

; 2540 : 				}
; 2541 : 				else // defensive spy

	jmp	SHORT $LN5@ProcessSpy
$LN6@ProcessSpy:

; 2542 : 				{
; 2543 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED");

	lea	ecx, DWORD PTR $T252780[esp+560]
	push	OFFSET $SG223856
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223850[esp+564]
	mov	BYTE PTR __$EHRec$[esp+572], 15		; 0000000fH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T252780[esp+560]
	mov	BYTE PTR __$EHRec$[esp+568], 13		; 0000000dH
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN5@ProcessSpy:

; 2544 : 				}
; 2545 : 				strNotification << pTechEntry->GetDescriptionKey();

	mov	ecx, DWORD PTR tv1285[esp+560]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223850[esp+564]
	call	edi

; 2546 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223783[esp+560]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223850[esp+564]
	call	edi

; 2547 : 				pNotifications->Add(NOTIFICATION_TECH_STOLEN_SPY_DETECTED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223846[esp+576]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223850[esp+580]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	ecx, DWORD PTR _pNotifications$[esp+580]
	push	eax
	push	57220132				; 03691c24H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2548 : 			}

	mov	BYTE PTR __$EHRec$[esp+568], 12		; 0000000cH

; 2549 : 			break;

	jmp	$LN343@ProcessSpy
$LN24@ProcessSpy:

; 2452 : 		{
; 2453 : 			switch(m_aSpyNotificationMessages[ui].m_iSpyResult)

	mov	edx, DWORD PTR [esi+1264]
	mov	eax, DWORD PTR [ebx+edx+12]
	sub	eax, 1
	je	$LN20@ProcessSpy
	sub	eax, 1
	je	$LN17@ProcessSpy
	sub	eax, 1
	jne	$LN32@ProcessSpy

; 2496 : 			case SPY_RESULT_KILLED:
; 2497 : 				// notify defending player that they killed a spy
; 2498 : 			{
; 2499 : 				int iDefendingSpy = pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()];

	mov	eax, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [eax+44]
	mov	eax, DWORD PTR [ebp+eax*4+4]
	mov	DWORD PTR _iDefendingSpy$223825[esp+560], eax

; 2500 : 				CvAssertMsg(iDefendingSpy >= 0, "iDefendingSpy value is out of bounds");
; 2501 : 				if(iDefendingSpy >= 0)

	test	eax, eax
	jl	$LN32@ProcessSpy

; 2502 : 				{
; 2503 : 					Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_KILLED_A_SPY_S");

	mov	ebp, DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	lea	ecx, DWORD PTR _strSummary$223827[esp+560]
	push	OFFSET $SG223829
	push	ecx
	call	ebp
	add	esp, 8

; 2504 : 					strSummary << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR [esi+1264]
	mov	ecx, DWORD PTR [eax+ebx+8]
	add	eax, ebx
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR __$EHRec$[esp+568], 10	; 0000000aH
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223827[esp+564]
	call	edi

; 2505 : 					Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_KILLED_A_SPY");

	lea	edx, DWORD PTR _strNotification$223831[esp+560]
	push	OFFSET $SG223833
	push	edx
	call	ebp
	add	esp, 8

; 2506 : 					strNotification << GetSpyRankName(m_aSpyList[iDefendingSpy].m_eRank);

	mov	ebp, DWORD PTR _iDefendingSpy$223825[esp+560]
	mov	eax, DWORD PTR [esi]
	add	ebp, ebp
	add	ebp, ebp
	add	ebp, ebp
	sub	ebp, DWORD PTR _iDefendingSpy$223825[esp+560]
	mov	BYTE PTR __$EHRec$[esp+568], 11		; 0000000bH
	add	ebp, ebp
	add	ebp, ebp
	mov	ecx, DWORD PTR [eax+ebp+12]
	push	ecx
	mov	ecx, esi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$223831[esp+564]
	call	edi

; 2507 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[iDefendingSpy].m_iName);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+ebp]
	mov	ecx, DWORD PTR [esi+1292]
	add	eax, ebp
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$223831[esp+564]
	call	edi

; 2508 : 					strNotification << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationAdjectiveKey();

	mov	eax, DWORD PTR [esi+1264]
	mov	ecx, DWORD PTR [eax+ebx+8]
	add	eax, ebx
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223831[esp+564]
	call	edi

; 2509 : 					strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223783[esp+560]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223831[esp+564]
	call	edi

; 2510 : 
; 2511 : 					pNotifications->Add(NOTIFICATION_SPY_KILLED_A_SPY, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, m_aSpyNotificationMessages[ui].m_eAttackingPlayer);

	mov	eax, DWORD PTR [esi+1264]
	mov	ebp, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	add	eax, ebx
	mov	eax, DWORD PTR [eax+8]
	push	-1
	push	eax
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223827[esp+576]
	call	ebp
	push	eax
	lea	ecx, DWORD PTR _strNotification$223831[esp+580]
	call	ebp
	mov	ecx, DWORD PTR _pNotifications$[esp+580]
	push	eax
	push	-54118376				; fcc63818H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2512 : 				
; 2513 : 					//Achievements
; 2514 : 					if(m_pPlayer->GetID() == GC.getGame().getActivePlayer())

	mov	ecx, DWORD PTR [esi+1292]
	mov	ebp, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	ebp, eax
	jne	SHORT $LN12@ProcessSpy

; 2515 : 					{
; 2516 : 						gDLL->UnlockAchievement(ACHIEVEMENT_XP1_15);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+828]
	push	205					; 000000cdH
	call	eax
$LN12@ProcessSpy:

; 2517 : 					}
; 2518 : 				}

	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	BYTE PTR __$EHRec$[esp+568], 10		; 0000000aH

; 2519 : 			}
; 2520 : 			break;

	jmp	$LN343@ProcessSpy
$LN17@ProcessSpy:

; 2475 : 			break;
; 2476 : 			case SPY_RESULT_IDENTIFIED:
; 2477 : 				// notify defending player that a spy of known origin stole something
; 2478 : 			{
; 2479 : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH_S");

	lea	ecx, DWORD PTR _strSummary$223811[esp+560]
	push	OFFSET $SG223813
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 2480 : 				strSummary << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationInfo().getShortDescriptionKey();

	mov	eax, DWORD PTR [esi+1264]
	mov	ecx, DWORD PTR [eax+ebx+8]
	add	eax, ebx
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR __$EHRec$[esp+568], 6
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$223811[esp+564]
	call	edi

; 2481 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223815[esp+560]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2482 : 
; 2483 : 				if(pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] == -1)

	mov	edx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [edx+44]
	cmp	DWORD PTR [ebp+eax*4+4], -1
	mov	BYTE PTR __$EHRec$[esp+568], 7
	jne	SHORT $LN16@ProcessSpy

; 2484 : 				{
; 2485 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH_W_TIP");

	lea	eax, DWORD PTR $T252769[esp+560]
	push	OFFSET $SG223818
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223815[esp+564]
	mov	BYTE PTR __$EHRec$[esp+572], 8
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR $T252769[esp+560]
	mov	BYTE PTR __$EHRec$[esp+568], 7
	call	ebp

; 2486 : 				}
; 2487 : 				else

	jmp	SHORT $LN15@ProcessSpy
$LN16@ProcessSpy:

; 2488 : 				{
; 2489 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED_WO_TECH");

	lea	ecx, DWORD PTR $T252770[esp+560]
	push	OFFSET $SG223821
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223815[esp+564]
	mov	BYTE PTR __$EHRec$[esp+572], 9
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T252770[esp+560]
	mov	BYTE PTR __$EHRec$[esp+568], 7
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN15@ProcessSpy:

; 2490 : 				}
; 2491 : 				strNotification << GET_PLAYER(m_aSpyNotificationMessages[ui].m_eAttackingPlayer).getCivilizationInfo().getAdjectiveKey();

	mov	eax, DWORD PTR [esi+1264]
	mov	ecx, DWORD PTR [eax+ebx+8]
	add	eax, ebx
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ ; CvCivilizationInfo::getAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223815[esp+564]
	call	edi

; 2492 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223783[esp+560]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223815[esp+564]
	call	edi

; 2493 : 				pNotifications->Add(NOTIFICATION_TECH_STOLEN_SPY_IDENTIFIED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, m_aSpyNotificationMessages[ui].m_eAttackingPlayer);

	mov	eax, DWORD PTR [esi+1264]
	mov	edx, DWORD PTR [eax+ebx+8]
	add	eax, ebx
	push	-1
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223811[esp+576]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223815[esp+580]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	ecx, DWORD PTR _pNotifications$[esp+580]
	push	eax
	push	-720689320				; d50b2758H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2494 : 			}

	mov	BYTE PTR __$EHRec$[esp+568], 6

; 2495 : 			break;

	jmp	$LN343@ProcessSpy
$LN20@ProcessSpy:

; 2454 : 			{
; 2455 : 			case SPY_RESULT_UNDETECTED:
; 2456 : 				// do nothing
; 2457 : 				break;
; 2458 : 			case SPY_RESULT_DETECTED:
; 2459 : 				// notify defending player that a spy of unknown origin stole something
; 2460 : 			{
; 2461 : 				Localization::String strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH_S");;

	lea	eax, DWORD PTR $T252764[esp+560]
	push	OFFSET $SG223801
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	ecx, eax
	mov	DWORD PTR __$EHRec$[esp+568], 0
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strSummary$223799[esp+564]
	call	DWORD PTR __imp_??0String@Localization@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T252764[esp+560]
	mov	BYTE PTR __$EHRec$[esp+568], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2462 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223802[esp+560]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2463 : 
; 2464 : 				if(pCityEspionage->m_aiSpyAssignment[m_pPlayer->GetID()] == -1)

	mov	ecx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [ecx+44]
	cmp	DWORD PTR [ebp+eax*4+4], -1
	mov	BYTE PTR __$EHRec$[esp+568], 3
	jne	SHORT $LN19@ProcessSpy

; 2465 : 				{
; 2466 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH_W_TIP");

	lea	edx, DWORD PTR $T252765[esp+560]
	push	OFFSET $SG223805
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223802[esp+564]
	mov	BYTE PTR __$EHRec$[esp+572], 4
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR $T252765[esp+560]
	mov	BYTE PTR __$EHRec$[esp+568], 3
	call	ebp

; 2467 : 				}
; 2468 : 				else

	jmp	SHORT $LN18@ProcessSpy
$LN19@ProcessSpy:

; 2469 : 				{
; 2470 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_TECH_STOLEN_SPY_DETECTED_WO_TECH");

	lea	eax, DWORD PTR $T252766[esp+560]
	push	OFFSET $SG223808
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223802[esp+564]
	mov	BYTE PTR __$EHRec$[esp+572], 5
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T252766[esp+560]
	mov	BYTE PTR __$EHRec$[esp+568], 3
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN18@ProcessSpy:

; 2471 : 				}
; 2472 : 				strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$223783[esp+560]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223802[esp+564]
	call	edi

; 2473 : 				pNotifications->Add(NOTIFICATION_TECH_STOLEN_SPY_DETECTED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223799[esp+576]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223802[esp+580]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	ecx, DWORD PTR _pNotifications$[esp+580]
	push	eax
	push	57220132				; 03691c24H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2474 : 			}

	mov	BYTE PTR __$EHRec$[esp+568], 2
$LN343@ProcessSpy:
	lea	ecx, DWORD PTR _strNotification$223802[esp+560]
	call	ebp
	lea	ecx, DWORD PTR _strSummary$223799[esp+560]
	mov	DWORD PTR __$EHRec$[esp+568], -1
	call	ebp
$LN32@ProcessSpy:
	mov	ecx, DWORD PTR [esi+1268]
	sub	ecx, DWORD PTR [esi+1264]
	inc	DWORD PTR _ui$223778[esp+560]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	add	ebx, 20					; 00000014H
	cmp	DWORD PTR _ui$223778[esp+560], ecx
	jb	$LL336@ProcessSpy
	pop	ebp
$LN31@ProcessSpy:

; 2574 : 			case SPY_RESULT_KILLED:
; 2575 : 				// notify defending player that they killed a spy
; 2576 : 			{
; 2577 : 				CvAssertMsg(false, "This code was not expected to be called");
; 2578 : 			}
; 2579 : 			break;
; 2580 : 			}
; 2581 : 		}
; 2582 : 	}
; 2583 : 
; 2584 : 	m_aSpyNotificationMessages.clear();

	mov	ecx, DWORD PTR [esi+1264]
	mov	edx, DWORD PTR [esi+1268]
	cmp	ecx, edx
	je	SHORT $LN341@ProcessSpy
	mov	eax, edx
	cmp	edx, edx
	je	SHORT $LN324@ProcessSpy
	npad	7
$LL326@ProcessSpy:
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edi
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edi
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edi
	mov	edi, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edi
	mov	edi, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edi
	add	eax, 20					; 00000014H
	add	ecx, 20					; 00000014H
	cmp	eax, edx
	jne	SHORT $LL326@ProcessSpy
$LN324@ProcessSpy:
	mov	DWORD PTR [esi+1268], ecx
$LN341@ProcessSpy:
	pop	edi
$LN299@ProcessSpy:

; 2585 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+552]
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 544				; 00000220H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$15:
	lea	ecx, DWORD PTR _strSummary$223860[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$16:
	lea	ecx, DWORD PTR _strNotification$223865[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$17:
	lea	ecx, DWORD PTR $T252785[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$18:
	lea	ecx, DWORD PTR $T252786[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$11:
	lea	ecx, DWORD PTR _strSummary$223846[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$12:
	lea	ecx, DWORD PTR _strNotification$223850[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$13:
	lea	ecx, DWORD PTR $T252779[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$14:
	lea	ecx, DWORD PTR $T252780[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$9:
	lea	ecx, DWORD PTR _strSummary$223827[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$10:
	lea	ecx, DWORD PTR _strNotification$223831[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$5:
	lea	ecx, DWORD PTR _strSummary$223811[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$6:
	lea	ecx, DWORD PTR _strNotification$223815[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$7:
	lea	ecx, DWORD PTR $T252769[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$8:
	lea	ecx, DWORD PTR $T252770[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$0:
	lea	ecx, DWORD PTR $T252764[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strSummary$223799[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strNotification$223802[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$3:
	lea	ecx, DWORD PTR $T252765[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ$4:
	lea	ecx, DWORD PTR $T252766[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ ENDP	; CvPlayerEspionage::ProcessSpyMessages
PUBLIC	?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z PROC ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	esi

; 810  : 		if (size() < capacity())

	mov	esi, DWORD PTR [ecx+4]
	push	edi
	test	esi, esi
	jne	SHORT $LN9@push_back@5
	xor	eax, eax
	jmp	SHORT $LN10@push_back@5
$LN9@push_back@5:
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, esi
	sar	eax, 2
$LN10@push_back@5:
	mov	edx, DWORD PTR [ecx+8]
	mov	edi, edx
	sub	edi, esi
	sar	edi, 2
	cmp	edi, eax

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR __Val$[esp+4]
	pop	edi
	pop	esi
	jae	SHORT $LN2@push_back@5
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	add	edx, 4
	mov	DWORD PTR [ecx+8], edx

; 824  : 		}

	ret	4
$LN2@push_back@5:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	push	eax
	push	1
	push	edx
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n

; 824  : 		}

	ret	4
?push_back@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAEXABQAVCvCity@@@Z ENDP ; std::vector<CvCity *,std::allocator<CvCity *> >::push_back
_TEXT	ENDS
PUBLIC	?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	esi
	push	edi
	mov	edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, eax
	test	ecx, -8					; fffffff8H
	mov	ecx, DWORD PTR __Where$[esp+4]
	jne	SHORT $LN3@insert@3
	xor	esi, esi
	jmp	SHORT $LN4@insert@3
$LN3@insert@3:
	mov	esi, ecx
	sub	esi, eax
	sar	esi, 3
$LN4@insert@3:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[esp+4]
	push	edx
	push	1
	push	ecx
	mov	ecx, edi
	call	?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR [edi+4]
	lea	ecx, DWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], ecx
	pop	esi

; 879  : 		}

	ret	12					; 0000000cH
?insert@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE?AV?$_Vector_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@V?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@ABUHeistLocation@@@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	ebx, DWORD PTR __Where$[esp]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, esi
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	jne	SHORT $LN3@insert@4
	xor	esi, esi
	jmp	SHORT $LN4@insert@4
$LN3@insert@4:
	mov	ecx, ebx
	sub	ecx, esi
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
$LN4@insert@4:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	ecx, DWORD PTR __Val$[esp+8]
	push	ecx
	push	1
	push	ebx
	mov	ecx, edi
	call	?_Insert_n@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@IABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR [edi+4]
	lea	edx, DWORD PTR [esi+esi*4]
	pop	edi
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	pop	esi
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 879  : 		}

	ret	12					; 0000000cH
?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::insert
_TEXT	ENDS
PUBLIC	?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z
_TEXT	SEGMENT
$T254035 = -4						; size = 1
__Cat$254040 = 8					; size = 1
$T254037 = 8						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);
; 1030 : 		iterator _Last = _Make_iter(_Last_arg);
; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __Last_arg$[esp]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp]
	push	ebp
	mov	ebp, ecx
	mov	ecx, DWORD PTR __First_arg$[esp+4]
	mov	DWORD PTR [eax], ecx
	cmp	ecx, edx
	je	SHORT $LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR [ebp+8]
	push	ebx
	push	esi
	push	edi
	mov	BYTE PTR $T254035[esp+20], 0
	mov	esi, DWORD PTR $T254035[esp+20]
	push	esi
	mov	esi, DWORD PTR __Cat$254040[esp+20]
	push	esi
	mov	esi, DWORD PTR $T254037[esp+24]
	push	esi
	push	ecx
	push	eax
	push	edx
	call	??$_Copy_opt@PAUIntrigueNotificationMessage@@PAU1@Urandom_access_iterator_tag@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::random_access_iterator_tag>

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ebx, DWORD PTR [ebp+8]
	mov	edi, eax
	add	esp, 24					; 00000018H
	mov	esi, edi
	cmp	edi, ebx
	je	SHORT $LN32@erase@5
$LL34@erase@5:
	lea	ecx, DWORD PTR [esi+36]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	add	esi, 68					; 00000044H
	cmp	esi, ebx
	jne	SHORT $LL34@erase@5
$LN32@erase@5:

; 1049 : 			_Mylast = _Ptr;
; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	mov	DWORD PTR [ebp+8], edi
	pop	edi
	pop	esi
	pop	ebx
$LN1@erase@5:
	pop	ebp

; 1055 : #endif
; 1056 : 		}

	pop	ecx
	ret	12					; 0000000cH
?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebx
	mov	ebx, ecx
	push	esi

; 1124 : 		if (_Myfirst != 0)

	mov	esi, DWORD PTR [ebx+4]
	test	esi, esi
	je	SHORT $LN28@Tidy@6
	push	edi

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	edi, DWORD PTR [ebx+8]
	cmp	esi, edi
	je	SHORT $LN10@Tidy@6
$LL12@Tidy@6:
	lea	ecx, DWORD PTR [esi+36]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	add	esi, 68					; 00000044H
	cmp	esi, edi
	jne	SHORT $LL12@Tidy@6
$LN10@Tidy@6:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR [ebx+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	pop	edi
$LN28@Tidy@6:
	pop	esi

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [ebx+4], 0
	mov	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], 0
	pop	ebx

; 1135 : 		}

	ret	0
?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy
_TEXT	ENDS
PUBLIC	?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	esi
	push	edi
	mov	edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, eax
	test	ecx, -8					; fffffff8H
	mov	ecx, DWORD PTR __Where$[esp+4]
	jne	SHORT $LN3@insert@5
	xor	esi, esi
	jmp	SHORT $LN4@insert@5
$LN3@insert@5:
	mov	esi, ecx
	sub	esi, eax
	sar	esi, 3
$LN4@insert@5:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[esp+4]
	push	edx
	push	1
	push	ecx
	mov	ecx, edi
	call	?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR [edi+4]
	lea	ecx, DWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], ecx
	pop	esi

; 879  : 		}

	ret	12					; 0000000cH
?insert@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@V?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@ABUScoreCityEntry@@@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::insert
_TEXT	ENDS
PUBLIC	??$_Umove@PAUIntrigueNotificationMessage@@@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU2@00@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Umove<IntrigueNotificationMessage *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAUIntrigueNotificationMessage@@@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU2@00@Z
_TEXT	SEGMENT
$T254403 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$254406 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUIntrigueNotificationMessage@@@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU2@00@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Umove<IntrigueNotificationMessage *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	edx, DWORD PTR __Cat$254406[esp]
	mov	BYTE PTR $T254403[esp+4], 0
	mov	eax, DWORD PTR $T254403[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	edx
	mov	edx, DWORD PTR __First$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >

; 1149 : 		}

	add	esp, 28					; 0000001cH
	ret	12					; 0000000cH
??$_Umove@PAUIntrigueNotificationMessage@@@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU2@00@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Umove<IntrigueNotificationMessage *>
_TEXT	ENDS
PUBLIC	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z PROC ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 3529 : 	{	// sort preserving order of equivalents, using _Pred

	push	edi

; 3530 : 	if (_Count <= _ISORT_MAX)

	mov	edi, DWORD PTR __Count$[esp]
	cmp	edi, 32					; 00000020H
	jg	SHORT $LN4@Stable_sor

; 3531 : 		std::_Insertion_sort(_First, _Last, _Pred);	// small

	mov	eax, DWORD PTR __Pred$[esp]
	mov	ecx, DWORD PTR __Last$[esp]
	mov	edx, DWORD PTR __First$[esp]
	push	0
	push	eax
	push	ecx
	push	edx
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval,ScoreCityEntry>
	add	esp, 16					; 00000010H
	pop	edi

; 3552 : 		}
; 3553 : 	}

	ret	0
$LN4@Stable_sor:
	push	ebx

; 3532 : 	else
; 3533 : 		{	// sort halves and merge
; 3534 : 		_Diff _Count2 = (_Count + 1) / 2;

	lea	eax, DWORD PTR [edi+1]
	cdq
	push	ebp

; 3535 : 		_BidIt _Mid = _First;
; 3536 : 		std::advance(_Mid, _Count2);
; 3537 : 
; 3538 : 		if (_Count2 <= _Tempbuf._Maxlen())

	mov	ebp, DWORD PTR __Tempbuf$[esp+8]
	sub	eax, edx
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR __First$[esp+12]
	sar	esi, 1
	mov	ecx, ebp
	lea	ebx, DWORD PTR [eax+esi*8]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	esi, eax
	jg	SHORT $LN2@Stable_sor

; 3539 : 			{	// temp buffer big enough, sort each half using buffer
; 3540 : 			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+12]
	mov	edx, DWORD PTR __First$[esp+12]
	push	ecx
	push	ebp
	push	esi
	push	ebx
	push	edx
	call	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>

; 3541 : 			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
; 3542 : 				_Tempbuf, _Pred);

	mov	eax, DWORD PTR __Pred$[esp+32]
	mov	ecx, DWORD PTR __Last$[esp+32]
	push	eax
	push	ebp
	sub	edi, esi
	push	edi
	push	ecx
	push	ebx
	call	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>

; 3543 : 			}
; 3544 : 		else

	jmp	SHORT $LN21@Stable_sor
$LN2@Stable_sor:

; 3545 : 			{	// temp buffer not big enough, divide and conquer
; 3546 : 			_Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);

	mov	edx, DWORD PTR __Pred$[esp+12]
	mov	eax, DWORD PTR __First$[esp+12]
	push	edx
	push	ebp
	push	esi
	push	ebx
	push	eax
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>

; 3547 : 			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Last$[esp+32]
	push	ecx
	push	ebp
	sub	edi, esi
	push	edi
	push	edx
	push	ebx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
$LN21@Stable_sor:

; 3548 : 			}
; 3549 : 
; 3550 : 		_Buffered_merge(_First, _Mid, _Last,
; 3551 : 			_Count2, _Count - _Count2, _Tempbuf, _Pred);	// merge halves

	mov	eax, DWORD PTR __Pred$[esp+52]
	mov	ecx, DWORD PTR __Last$[esp+52]
	mov	edx, DWORD PTR __First$[esp+52]
	add	esp, 40					; 00000028H
	push	eax
	push	ebp
	push	edi
	push	esi
	push	ecx
	push	ebx
	push	edx
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 28					; 0000001cH
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi

; 3552 : 		}
; 3553 : 	}

	ret	0
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ENDP ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Count$ = 16						; size = 4
__Tempbuf$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z PROC ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 3529 : 	{	// sort preserving order of equivalents, using _Pred

	push	edi

; 3530 : 	if (_Count <= _ISORT_MAX)

	mov	edi, DWORD PTR __Count$[esp]
	cmp	edi, 32					; 00000020H
	jg	SHORT $LN4@Stable_sor@2

; 3531 : 		std::_Insertion_sort(_First, _Last, _Pred);	// small

	mov	eax, DWORD PTR __Pred$[esp]
	mov	ecx, DWORD PTR __Last$[esp]
	mov	edx, DWORD PTR __First$[esp]
	push	0
	push	eax
	push	ecx
	push	edx
	call	??$_Insertion_sort1@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@UScoreCityEntry@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@PAUScoreCityEntry@@@Z ; std::_Insertion_sort1<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval,ScoreCityEntry>
	add	esp, 16					; 00000010H
	pop	edi

; 3552 : 		}
; 3553 : 	}

	ret	0
$LN4@Stable_sor@2:
	push	ebx

; 3532 : 	else
; 3533 : 		{	// sort halves and merge
; 3534 : 		_Diff _Count2 = (_Count + 1) / 2;

	lea	eax, DWORD PTR [edi+1]
	cdq
	push	ebp

; 3535 : 		_BidIt _Mid = _First;
; 3536 : 		std::advance(_Mid, _Count2);
; 3537 : 
; 3538 : 		if (_Count2 <= _Tempbuf._Maxlen())

	mov	ebp, DWORD PTR __Tempbuf$[esp+8]
	sub	eax, edx
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR __First$[esp+12]
	sar	esi, 1
	mov	ecx, ebp
	lea	ebx, DWORD PTR [eax+esi*8]
	call	?_Maxlen@?$_Temp_iterator@UScoreCityEntry@@@std@@QAEHXZ ; std::_Temp_iterator<ScoreCityEntry>::_Maxlen
	cmp	esi, eax
	jg	SHORT $LN2@Stable_sor@2

; 3539 : 			{	// temp buffer big enough, sort each half using buffer
; 3540 : 			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+12]
	mov	edx, DWORD PTR __First$[esp+12]
	push	ecx
	push	ebp
	push	esi
	push	ebx
	push	edx
	call	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>

; 3541 : 			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
; 3542 : 				_Tempbuf, _Pred);

	mov	eax, DWORD PTR __Pred$[esp+32]
	mov	ecx, DWORD PTR __Last$[esp+32]
	push	eax
	push	ebp
	sub	edi, esi
	push	edi
	push	ecx
	push	ebx
	call	??$_Buffered_merge_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>

; 3543 : 			}
; 3544 : 		else

	jmp	SHORT $LN21@Stable_sor@2
$LN2@Stable_sor@2:

; 3545 : 			{	// temp buffer not big enough, divide and conquer
; 3546 : 			_Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);

	mov	edx, DWORD PTR __Pred$[esp+12]
	mov	eax, DWORD PTR __First$[esp+12]
	push	edx
	push	ebp
	push	esi
	push	ebx
	push	eax
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>

; 3547 : 			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);

	mov	ecx, DWORD PTR __Pred$[esp+32]
	mov	edx, DWORD PTR __Last$[esp+32]
	push	ecx
	push	ebp
	sub	edi, esi
	push	edi
	push	edx
	push	ebx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
$LN21@Stable_sor@2:

; 3548 : 			}
; 3549 : 
; 3550 : 		_Buffered_merge(_First, _Mid, _Last,
; 3551 : 			_Count2, _Count - _Count2, _Tempbuf, _Pred);	// merge halves

	mov	eax, DWORD PTR __Pred$[esp+52]
	mov	ecx, DWORD PTR __Last$[esp+52]
	mov	edx, DWORD PTR __First$[esp+52]
	add	esp, 40					; 00000028H
	push	eax
	push	ebp
	push	edi
	push	esi
	push	ecx
	push	ebx
	push	edx
	call	??$_Buffered_merge@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@00HHAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Buffered_merge<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 28					; 0000001cH
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi

; 3552 : 		}
; 3553 : 	}

	ret	0
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ENDP ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	esi

; 810  : 		if (size() < capacity())

	mov	esi, DWORD PTR [ecx+4]
	push	edi
	test	esi, esi
	jne	SHORT $LN9@push_back@6
	xor	eax, eax
	jmp	SHORT $LN10@push_back@6
$LN9@push_back@6:
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, esi
	sar	eax, 2
$LN10@push_back@6:
	mov	edx, DWORD PTR [ecx+8]
	mov	edi, edx
	sub	edi, esi
	sar	edi, 2
	cmp	edi, eax

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR __Val$[esp+4]
	pop	edi
	pop	esi
	jae	SHORT $LN2@push_back@6
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	add	edx, 4
	mov	DWORD PTR [ecx+8], edx

; 824  : 		}

	ret	4
$LN2@push_back@6:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	push	eax
	push	1
	push	edx
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n

; 824  : 		}

	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z ; CvEspionageAI::FindTargetSpyNumbers
EXTRN	?getNumCities@CvPlayer@@QBEHXZ:PROC		; CvPlayer::getNumCities
EXTRN	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::nextCity
EXTRN	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::firstCity
EXTRN	?IsGoingForSpaceshipVictory@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForSpaceshipVictory
EXTRN	?GetMaxPropagandaDiplomatsWanted@CvPlayerCulture@@QBEHXZ:PROC ; CvPlayerCulture::GetMaxPropagandaDiplomatsWanted
EXTRN	?IsGoingForCultureVictory@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForCultureVictory
EXTRN	?GetTrait@CvMinorCivAI@@QBE?AW4MinorCivTraitTypes@@XZ:PROC ; CvMinorCivAI::GetTrait
EXTRN	?IsGoingForWorldConquest@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForWorldConquest
EXTRN	?GetDiplomatUsefulnessAtCiv@CvLeagueAI@@QAE?AW4DiplomatUsefulnessLevels@1@W4PlayerTypes@@@Z:PROC ; CvLeagueAI::GetDiplomatUsefulnessAtCiv
EXTRN	?GetLeagueAI@CvPlayer@@QBEPAVCvLeagueAI@@XZ:PROC ; CvPlayer::GetLeagueAI
EXTRN	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ:PROC ; CvDiplomacyAI::IsGoingForDiploVictory
EXTRN	?GetTechRatio@CvTechAI@@QAEMXZ:PROC		; CvTechAI::GetTechRatio
EXTRN	?GetTechAI@CvPlayerTechs@@QAEPAVCvTechAI@@XZ:PROC ; CvPlayerTechs::GetTechAI
;	COMDAT __real@3e800000
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z$0
__ehfuncinfo$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z
_TEXT	SEGMENT
_bAllocatedOffensiveSpies$ = -49			; size = 1
_iNumDiplomats$225607 = -48				; size = 4
_iNumRemainingSpies$ = -48				; size = 4
tv1647 = -44						; size = 4
$T254801 = -44						; size = 4
$T254806 = -44						; size = 4
_iCount$254764 = -44					; size = 4
$T254753 = -44						; size = 4
$T254752 = -44						; size = 4
_iNumDiplomats$225572 = -44				; size = 4
_fNumDiplomats$225554 = -44				; size = 4
_this$ = -40						; size = 4
_fTechPositionRatio$ = -36				; size = 4
_iLoop$ = -32						; size = 4
_apOtherCityList$ = -28					; size = 16
__$EHRec$ = -12						; size = 12
_piTargetOffensiveSpies$ = 8				; size = 4
_piTargetDefensiveSpies$ = 12				; size = 4
tv1576 = 16						; size = 4
$T255144 = 16						; size = 4
$T255138 = 16						; size = 4
$T255143 = 16						; size = 4
_ui$225623 = 16						; size = 4
_piTargetCityStateSpies$ = 16				; size = 4
tv1631 = 20						; size = 4
tv1608 = 20						; size = 4
$T254974 = 20						; size = 4
$T254968 = 20						; size = 4
$T254973 = 20						; size = 4
$T254826 = 20						; size = 4
$T254820 = 20						; size = 4
$T254825 = 20						; size = 4
_pLoopCity$ = 20					; size = 4
_iNumMilitaristicCityStates$225594 = 20			; size = 4
_iNumCityStates$225580 = 20				; size = 4
_piTargetDiplomatSpies$ = 20				; size = 4
?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z PROC	; CvEspionageAI::FindTargetSpyNumbers, COMDAT
; _this$ = ecx

; 4707 : {

	push	-1
	push	__ehhandler$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H
	push	ebx
	mov	ebx, ecx

; 4708 : 	CvDiplomacyAI* pDiploAI = m_pPlayer->GetDiplomacyAI();

	mov	ecx, DWORD PTR [ebx]
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+64], ebx
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI

; 4709 : 
; 4710 : 	int iNumRemainingSpies = m_pPlayer->GetEspionage()->GetNumAliveSpies();

	mov	ecx, DWORD PTR [ebx]
	mov	edi, eax
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	edx, DWORD PTR [eax+4]
	xor	esi, esi
	xor	ecx, ecx
	mov	DWORD PTR _iCount$254764[esp+64], esi
	test	edx, edx
	jbe	SHORT $LN58@FindTarget
	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
$LL60@FindTarget:
	cmp	DWORD PTR [eax], 8
	je	SHORT $LN59@FindTarget
	inc	esi
$LN59@FindTarget:
	inc	ecx
	add	eax, 28					; 0000001cH
	cmp	ecx, edx
	jb	SHORT $LL60@FindTarget
	mov	DWORD PTR _iCount$254764[esp+64], esi
$LN58@FindTarget:
	mov	DWORD PTR _iNumRemainingSpies$[esp+64], esi

; 4711 : 	if(iNumRemainingSpies == 0)

	test	esi, esi
	jne	SHORT $LN53@FindTarget

; 4712 : 	{
; 4713 : 		*piTargetDefensiveSpies = 0;

	mov	eax, DWORD PTR _piTargetDefensiveSpies$[esp+60]

; 4714 : 		*piTargetOffensiveSpies = 0;

	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[esp+60]

; 4715 : 		*piTargetCityStateSpies = 0;

	mov	edx, DWORD PTR _piTargetCityStateSpies$[esp+60]
	mov	DWORD PTR [eax], esi

; 4716 : 		*piTargetDiplomatSpies  = 0;

	mov	eax, DWORD PTR _piTargetDiplomatSpies$[esp+60]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [edx], esi
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebx

; 4925 : 		}
; 4926 : 	}
; 4927 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+52]
	mov	DWORD PTR fs:0, ecx
	add	esp, 52					; 00000034H
	ret	16					; 00000010H
$LN53@FindTarget:

; 4717 : 		return;
; 4718 : 	}
; 4719 : 
; 4720 : 	bool bAllocatedOffensiveSpies = false;
; 4721 : 	bool bAllocatedDefensiveSpies = false;
; 4722 : 	bool bAllocatedCityStateSpies = false;
; 4723 : 	bool bAllocatedDiplomatSpies  = false;
; 4724 : 	float fTechPositionRatio = m_pPlayer->GetPlayerTechs()->GetTechAI()->GetTechRatio();

	mov	ecx, DWORD PTR [ebx]
	push	ebp
	mov	BYTE PTR _bAllocatedOffensiveSpies$[esp+68], 0
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetTechAI@CvPlayerTechs@@QAEPAVCvTechAI@@XZ ; CvPlayerTechs::GetTechAI
	mov	ecx, eax
	call	?GetTechRatio@CvTechAI@@QAEMXZ		; CvTechAI::GetTechRatio
	fstp	DWORD PTR _fTechPositionRatio$[esp+68]

; 4725 : 
; 4726 : 	// if going for diplo or conquest, evaluate the offensive spies before assigning CS spies
; 4727 : 	if (pDiploAI->IsGoingForDiploVictory())

	mov	ecx, edi
	call	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForDiploVictory
	test	al, al
	je	$LN52@FindTarget

; 4728 : 	{
; 4729 : 		// find out how many diplomats we need
; 4730 : 		float fNumDiplomats = 0.0f;

	xor	ebp, ebp
	mov	DWORD PTR _fNumDiplomats$225554[esp+68], ebp

; 4731 : 		for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	xor	edi, edi
$LL51@FindTarget:

; 4732 : 		{
; 4733 : 			PlayerTypes ePlayer = (PlayerTypes)ui;
; 4734 : 			// must not be me and must be alive
; 4735 : 			if (ePlayer == m_pPlayer->GetID() || !GET_PLAYER(ePlayer).isAlive())

	mov	ecx, DWORD PTR [ebx]
	cmp	edi, DWORD PTR [ecx+44]
	je	SHORT $LN50@FindTarget
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	cmp	BYTE PTR [edx+ebp+2256], 0
	je	SHORT $LN50@FindTarget

; 4736 : 			{
; 4737 : 				continue;
; 4738 : 			}
; 4739 : 
; 4740 : 			CvLeagueAI::DiplomatUsefulnessLevels eUsefulnessLevel = m_pPlayer->GetLeagueAI()->GetDiplomatUsefulnessAtCiv(ePlayer);

	push	edi
	call	?GetLeagueAI@CvPlayer@@QBEPAVCvLeagueAI@@XZ ; CvPlayer::GetLeagueAI
	mov	ecx, eax
	call	?GetDiplomatUsefulnessAtCiv@CvLeagueAI@@QAE?AW4DiplomatUsefulnessLevels@1@W4PlayerTypes@@@Z ; CvLeagueAI::GetDiplomatUsefulnessAtCiv

; 4741 : 			switch (eUsefulnessLevel)

	sub	eax, 1
	je	SHORT $LN42@FindTarget
	sub	eax, 1
	je	SHORT $LN43@FindTarget
	sub	eax, 1
	jne	SHORT $LN50@FindTarget

; 4742 : 			{
; 4743 : 			case CvLeagueAI::DIPLOMAT_USEFULNESS_HIGH:
; 4744 : 				fNumDiplomats += 1.0f;

	fld	DWORD PTR _fNumDiplomats$225554[esp+68]
	fld1
	faddp	ST(1), ST(0)

; 4745 : 				break;

	jmp	SHORT $LN373@FindTarget
$LN43@FindTarget:

; 4746 : 			case CvLeagueAI::DIPLOMAT_USEFULNESS_MEDIUM:
; 4747 : 				fNumDiplomats += 0.5f;

	fld	DWORD PTR _fNumDiplomats$225554[esp+68]
	fadd	DWORD PTR __real@3f000000

; 4748 : 				break;

	jmp	SHORT $LN373@FindTarget
$LN42@FindTarget:

; 4749 : 			case CvLeagueAI::DIPLOMAT_USEFULNESS_LOW:
; 4750 : 				fNumDiplomats += 0.25f;

	fld	DWORD PTR _fNumDiplomats$225554[esp+68]
	fadd	DWORD PTR __real@3e800000
$LN373@FindTarget:
	fstp	DWORD PTR _fNumDiplomats$225554[esp+68]
$LN50@FindTarget:

; 4731 : 		for (uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	add	ebp, 63236				; 0000f704H
	inc	edi
	cmp	ebp, 1391192				; 00153a58H
	jb	SHORT $LL51@FindTarget

; 4751 : 				break;
; 4752 : 			case CvLeagueAI::DIPLOMAT_USEFULNESS_NONE:
; 4753 : 				break;
; 4754 : 			}
; 4755 : 		}
; 4756 : 
; 4757 : 		// assign spies to be diplomats
; 4758 : 		int iNumDiplomats = (int)floor(fNumDiplomats);

	fld	DWORD PTR _fNumDiplomats$225554[esp+68]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__floor
	fstp	DWORD PTR tv1647[esp+76]
	add	esp, 8
	fld	DWORD PTR tv1647[esp+68]
	fstp	DWORD PTR $T254801[esp+68]
	mov	eax, DWORD PTR $T254801[esp+68]
	mov	DWORD PTR $T254806[esp+68], eax
	fld	DWORD PTR $T254806[esp+68]
	call	__ftol2_sse_excpt
	mov	DWORD PTR _iNumDiplomats$225572[esp+68], eax

; 4759 : 		*piTargetDiplomatSpies = min(iNumRemainingSpies, iNumDiplomats);

	cmp	eax, esi
	lea	eax, DWORD PTR _iNumDiplomats$225572[esp+68]
	jl	SHORT $LN84@FindTarget
	lea	eax, DWORD PTR _iNumRemainingSpies$[esp+68]
$LN84@FindTarget:
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _piTargetDiplomatSpies$[esp+64]

; 4760 : 		bAllocatedDiplomatSpies = true;
; 4761 : 		iNumRemainingSpies -= *piTargetDiplomatSpies;

	sub	esi, eax
	mov	DWORD PTR _iNumRemainingSpies$[esp+68], esi

; 4762 : 
; 4763 : 		// assign offensive spies according to tech position
; 4764 : 		*piTargetOffensiveSpies = (int)ceil(fTechPositionRatio * iNumRemainingSpies);

	fild	DWORD PTR _iNumRemainingSpies$[esp+68]
	sub	esp, 8
	mov	DWORD PTR [ecx], eax
	fmul	DWORD PTR _fTechPositionRatio$[esp+76]
	fstp	DWORD PTR $T254825[esp+72]
	fld	DWORD PTR $T254825[esp+72]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__ceil
	fstp	DWORD PTR tv1631[esp+72]
	add	esp, 8
	fld	DWORD PTR tv1631[esp+64]
	fstp	DWORD PTR $T254820[esp+64]
	mov	edx, DWORD PTR $T254820[esp+64]
	mov	DWORD PTR $T254826[esp+64], edx
	fld	DWORD PTR $T254826[esp+64]
	call	__ftol2_sse_excpt
	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[esp+64]

; 4765 : 		bAllocatedOffensiveSpies = true;
; 4766 : 		iNumRemainingSpies -= *piTargetOffensiveSpies;

	sub	esi, eax

; 4767 : 
; 4768 : 		int iNumCityStates = 0;

	xor	ebp, ebp
	mov	DWORD PTR [ecx], eax
	mov	BYTE PTR _bAllocatedOffensiveSpies$[esp+68], 1
	mov	DWORD PTR _iNumRemainingSpies$[esp+68], esi
	mov	DWORD PTR _iNumCityStates$225580[esp+64], ebp
	mov	edi, 1391192				; 00153a58H
	npad	3
$LL40@FindTarget:

; 4770 : 		{
; 4771 : 			PlayerTypes ePlayer = (PlayerTypes)ui;
; 4772 : 			if (!GET_PLAYER(ePlayer).isAlive())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	cmp	BYTE PTR [edi+eax+2256], 0
	je	$LN39@FindTarget

; 4773 : 			{
; 4774 : 				continue;
; 4775 : 			}
; 4776 : 
; 4777 : 			if(!GET_TEAM(m_pPlayer->getTeam()).isHasMet(GET_PLAYER(ePlayer).getTeam()))

	mov	eax, DWORD PTR [edi+eax+44]
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN101@FindTarget
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN102@FindTarget
$LN101@FindTarget:
	or	ecx, -1
$LN102@FindTarget:
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN110@FindTarget
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN111@FindTarget
$LN110@FindTarget:
	or	eax, -1
$LN111@FindTarget:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	test	al, al
	je	SHORT $LN39@FindTarget

; 4778 : 			{
; 4779 : 				continue;
; 4780 : 			}
; 4781 : 
; 4782 : 			// don't interact with city-states that are at war with us
; 4783 : 			if (GET_TEAM(GET_PLAYER(ePlayer).getTeam()).isAtWar(m_pPlayer->getTeam()))

	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+44]
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN121@FindTarget
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN122@FindTarget
$LN121@FindTarget:
	or	ecx, -1
$LN122@FindTarget:
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR [edi+eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN132@FindTarget
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN133@FindTarget
$LN132@FindTarget:
	or	eax, -1
$LN133@FindTarget:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	jne	SHORT $LN39@FindTarget

; 4784 : 			{
; 4785 : 				continue;
; 4786 : 			}
; 4787 : 
; 4788 : 			if (GET_PLAYER(ePlayer).isMinorCiv())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [edi+eax]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN39@FindTarget

; 4789 : 			{
; 4790 : 				iNumCityStates++;

	inc	ebp
$LN39@FindTarget:

; 4769 : 		for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)

	add	edi, 63236				; 0000f704H
	cmp	edi, 3983868				; 003cc9fcH
	jb	$LL40@FindTarget

; 4791 : 			}
; 4792 : 		}
; 4793 : 
; 4794 : 		*piTargetCityStateSpies = min(iNumRemainingSpies, iNumCityStates);

	cmp	ebp, esi
	mov	DWORD PTR _iNumCityStates$225580[esp+64], ebp
	lea	eax, DWORD PTR _iNumCityStates$225580[esp+64]
	jl	SHORT $LN144@FindTarget
	lea	eax, DWORD PTR _iNumRemainingSpies$[esp+68]
$LN144@FindTarget:
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _piTargetCityStateSpies$[esp+64]
	mov	DWORD PTR [edx], ecx

; 4795 : 		bAllocatedCityStateSpies = true;

	jmp	$LN371@FindTarget
$LN52@FindTarget:

; 4796 : 	}
; 4797 : 	else if (pDiploAI->IsGoingForWorldConquest())

	mov	ecx, edi
	call	?IsGoingForWorldConquest@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForWorldConquest
	test	al, al
	je	$LN32@FindTarget

; 4798 : 	{
; 4799 : 		// assign offensive spies according to tech position
; 4800 : 		*piTargetOffensiveSpies = (int)ceil(fTechPositionRatio * iNumRemainingSpies);

	fild	DWORD PTR _iCount$254764[esp+68]
	sub	esp, 8
	fmul	DWORD PTR _fTechPositionRatio$[esp+76]
	fstp	DWORD PTR $T254973[esp+72]
	fld	DWORD PTR $T254973[esp+72]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__ceil
	fstp	DWORD PTR tv1608[esp+72]
	add	esp, 8
	fld	DWORD PTR tv1608[esp+64]
	fstp	DWORD PTR $T254968[esp+64]
	mov	eax, DWORD PTR $T254968[esp+64]
	mov	DWORD PTR $T254974[esp+64], eax
	fld	DWORD PTR $T254974[esp+64]
	call	__ftol2_sse_excpt
	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[esp+64]

; 4801 : 		bAllocatedOffensiveSpies = true;
; 4802 : 		iNumRemainingSpies -= *piTargetOffensiveSpies;

	sub	esi, eax

; 4803 : 
; 4804 : 		// Assign the rest to militaristic city-states
; 4805 : 		// for now, assign spies to the militaristic city states
; 4806 : 		int iNumMilitaristicCityStates = 0;

	xor	ebp, ebp
	mov	DWORD PTR [ecx], eax
	mov	BYTE PTR _bAllocatedOffensiveSpies$[esp+68], 1
	mov	DWORD PTR _iNumRemainingSpies$[esp+68], esi
	mov	DWORD PTR _iNumMilitaristicCityStates$225594[esp+64], ebp
	mov	edi, 1391192				; 00153a58H
	npad	2
$LL31@FindTarget:

; 4808 : 		{
; 4809 : 			PlayerTypes ePlayer = (PlayerTypes)ui;
; 4810 : 			if (!GET_PLAYER(ePlayer).isAlive())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	cmp	BYTE PTR [edi+eax+2256], 0
	je	$LN30@FindTarget

; 4811 : 			{
; 4812 : 				continue;
; 4813 : 			}
; 4814 : 
; 4815 : 			if(!GET_TEAM(m_pPlayer->getTeam()).isHasMet(GET_PLAYER(ePlayer).getTeam()))

	mov	eax, DWORD PTR [edi+eax+44]
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN161@FindTarget
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN162@FindTarget
$LN161@FindTarget:
	or	ecx, -1
$LN162@FindTarget:
	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN170@FindTarget
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN171@FindTarget
$LN170@FindTarget:
	or	eax, -1
$LN171@FindTarget:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	test	al, al
	je	SHORT $LN30@FindTarget

; 4816 : 			{
; 4817 : 				continue;
; 4818 : 			}
; 4819 : 
; 4820 : 			// don't interact with city-states that are at war with us
; 4821 : 			if (GET_TEAM(GET_PLAYER(ePlayer).getTeam()).isAtWar(m_pPlayer->getTeam()))

	mov	eax, DWORD PTR [ebx]
	mov	eax, DWORD PTR [eax+44]
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN181@FindTarget
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN182@FindTarget
$LN181@FindTarget:
	or	ecx, -1
$LN182@FindTarget:
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR [edi+eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN192@FindTarget
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN193@FindTarget
$LN192@FindTarget:
	or	eax, -1
$LN193@FindTarget:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	jne	SHORT $LN30@FindTarget

; 4822 : 			{
; 4823 : 				continue;
; 4824 : 			}
; 4825 : 
; 4826 : 			if (GET_PLAYER(ePlayer).isMinorCiv() && GET_PLAYER(ePlayer).GetMinorCivAI()->GetTrait() == MINOR_CIV_TRAIT_MILITARISTIC)

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [edi+eax]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN30@FindTarget
	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, edi
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?GetTrait@CvMinorCivAI@@QBE?AW4MinorCivTraitTypes@@XZ ; CvMinorCivAI::GetTrait
	cmp	eax, 1
	jne	SHORT $LN30@FindTarget

; 4827 : 			{
; 4828 : 				iNumMilitaristicCityStates++;

	inc	ebp
$LN30@FindTarget:

; 4807 : 		for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)

	add	edi, 63236				; 0000f704H
	cmp	edi, 3983868				; 003cc9fcH
	jb	$LL31@FindTarget

; 4829 : 			}
; 4830 : 		}
; 4831 : 
; 4832 : 		*piTargetCityStateSpies = min(iNumRemainingSpies, iNumMilitaristicCityStates);

	cmp	ebp, esi
	mov	DWORD PTR _iNumMilitaristicCityStates$225594[esp+64], ebp
	lea	eax, DWORD PTR _iNumMilitaristicCityStates$225594[esp+64]
	jl	SHORT $LN206@FindTarget
	lea	eax, DWORD PTR _iNumRemainingSpies$[esp+68]
$LN206@FindTarget:
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _piTargetCityStateSpies$[esp+64]
	mov	DWORD PTR [eax], edx

; 4833 : 		bAllocatedCityStateSpies = true;

	jmp	$LN371@FindTarget
$LN32@FindTarget:

; 4834 : 	}
; 4835 : 	else if (pDiploAI->IsGoingForCultureVictory())

	mov	ecx, edi
	call	?IsGoingForCultureVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForCultureVictory
	test	al, al
	je	SHORT $LN23@FindTarget

; 4836 : 	{
; 4837 : 		// assign two spies to be diplomats
; 4838 : 		int iNumDiplomats = min(iNumRemainingSpies, 2);

	cmp	esi, 2
	mov	DWORD PTR $T254752[esp+68], 2
	lea	eax, DWORD PTR $T254752[esp+68]
	jg	SHORT $LN210@FindTarget
	lea	eax, DWORD PTR _iNumRemainingSpies$[esp+68]
$LN210@FindTarget:
	mov	edi, DWORD PTR [eax]

; 4839 : 		iNumDiplomats = min(iNumDiplomats, m_pPlayer->GetCulture()->GetMaxPropagandaDiplomatsWanted());

	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _iNumDiplomats$225607[esp+68], edi
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetMaxPropagandaDiplomatsWanted@CvPlayerCulture@@QBEHXZ ; CvPlayerCulture::GetMaxPropagandaDiplomatsWanted
	mov	DWORD PTR $T254753[esp+68], eax
	cmp	eax, edi
	lea	eax, DWORD PTR $T254753[esp+68]
	jl	SHORT $LN214@FindTarget
	lea	eax, DWORD PTR _iNumDiplomats$225607[esp+68]
$LN214@FindTarget:
	mov	eax, DWORD PTR [eax]

; 4840 : 		*piTargetDiplomatSpies = iNumDiplomats;

	mov	ecx, DWORD PTR _piTargetDiplomatSpies$[esp+64]
	mov	DWORD PTR [ecx], eax

; 4841 : 
; 4842 : 		if (iNumDiplomats > 0)

	test	eax, eax
	jle	SHORT $LN371@FindTarget

; 4843 : 		{
; 4844 : 			bAllocatedDiplomatSpies = true;
; 4845 : 			iNumRemainingSpies -= *piTargetDiplomatSpies;

	sub	esi, eax

; 4846 : 		}
; 4847 : 	}

	jmp	SHORT $LN371@FindTarget
$LN23@FindTarget:

; 4848 : 	else if (pDiploAI->IsGoingForSpaceshipVictory())

	mov	ecx, edi
	call	?IsGoingForSpaceshipVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForSpaceshipVictory
	test	al, al
	je	SHORT $LN20@FindTarget

; 4849 : 	{
; 4850 : 		// assign none to CS
; 4851 : 		*piTargetCityStateSpies = 0;

	mov	edx, DWORD PTR _piTargetCityStateSpies$[esp+64]
	mov	DWORD PTR [edx], 0

; 4852 : 		bAllocatedCityStateSpies = true;
; 4853 : 	}
; 4854 : 	else

	jmp	SHORT $LN371@FindTarget
$LN20@FindTarget:

; 4855 : 	{
; 4856 : 		// assign 1/3rd to CS
; 4857 : 		*piTargetCityStateSpies = iNumRemainingSpies / 3;

	mov	ecx, DWORD PTR _piTargetCityStateSpies$[esp+64]
	mov	eax, 1431655766				; 55555556H
	imul	esi
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR [ecx], eax
$LN371@FindTarget:

; 4858 : 		bAllocatedCityStateSpies = true;
; 4859 : 	}
; 4860 : 
; 4861 : 	iNumRemainingSpies -= *piTargetCityStateSpies;

	mov	edx, DWORD PTR _piTargetCityStateSpies$[esp+64]
	sub	esi, DWORD PTR [edx]

; 4862 : 	if (!bAllocatedOffensiveSpies)

	cmp	BYTE PTR _bAllocatedOffensiveSpies$[esp+68], 0
	mov	DWORD PTR _iNumRemainingSpies$[esp+68], esi
	jne	SHORT $LN18@FindTarget

; 4863 : 	{
; 4864 : 		*piTargetOffensiveSpies = (int)ceil(fTechPositionRatio * iNumRemainingSpies);

	fild	DWORD PTR _iNumRemainingSpies$[esp+68]
	sub	esp, 8
	fmul	DWORD PTR _fTechPositionRatio$[esp+76]
	fstp	DWORD PTR $T255143[esp+72]
	fld	DWORD PTR $T255143[esp+72]
	fstp	QWORD PTR [esp]
	call	DWORD PTR __imp__ceil
	fstp	DWORD PTR tv1576[esp+72]
	add	esp, 8
	fld	DWORD PTR tv1576[esp+64]
	fstp	DWORD PTR $T255138[esp+64]
	mov	eax, DWORD PTR $T255138[esp+64]
	mov	DWORD PTR $T255144[esp+64], eax
	fld	DWORD PTR $T255144[esp+64]
	call	__ftol2_sse_excpt
	mov	ecx, DWORD PTR _piTargetOffensiveSpies$[esp+64]
	mov	DWORD PTR [ecx], eax

; 4865 : 		bAllocatedOffensiveSpies = true;
; 4866 : 		iNumRemainingSpies -= *piTargetOffensiveSpies;

	sub	esi, eax
$LN18@FindTarget:

; 4867 : 	}
; 4868 : 
; 4869 : 	*piTargetDefensiveSpies = iNumRemainingSpies;

	mov	ebx, DWORD PTR _piTargetDefensiveSpies$[esp+64]

; 4870 : 	bAllocatedDefensiveSpies = true;
; 4871 : 
; 4872 : 	// rationalization
; 4873 : 	std::vector<CvCity*> apOtherCityList;

	xor	edi, edi
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR _apOtherCityList$[esp+72], edi
	mov	DWORD PTR _apOtherCityList$[esp+76], edi
	mov	DWORD PTR _apOtherCityList$[esp+80], edi
	mov	DWORD PTR __$EHRec$[esp+76], edi

; 4874 : 	CvCity* pLoopCity = NULL;
; 4875 : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[esp+68], edi

; 4876 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$225623[esp+64], edi
	xor	ebp, ebp
$LL17@FindTarget:

; 4877 : 	{
; 4878 : 		PlayerTypes eTargetPlayer = (PlayerTypes)ui;
; 4879 : 
; 4880 : 		// don't count the player's own cities
; 4881 : 		if(eTargetPlayer == m_pPlayer->GetID())

	mov	edx, DWORD PTR _this$[esp+68]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ui$225623[esp+64]
	cmp	ecx, DWORD PTR [eax+44]
	je	$LN16@FindTarget

; 4882 : 		{
; 4883 : 			continue;
; 4884 : 		}
; 4885 : 
; 4886 : 		for(pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	lea	eax, DWORD PTR _iLoop$[esp+72]
	lea	ecx, DWORD PTR [edx+ebp]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	esi, eax
	mov	DWORD PTR _pLoopCity$[esp+64], esi
	test	esi, esi
	je	$LN16@FindTarget
	npad	4
$LL13@FindTarget:

; 4887 : 		{
; 4888 : 			CvPlot* pCityPlot = pLoopCity->plot();

	mov	ecx, esi
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot

; 4889 : 			CvAssertMsg(pCityPlot, "City plot is null!");
; 4890 : 			if(pCityPlot)

	test	eax, eax
	je	$LN12@FindTarget

; 4891 : 			{
; 4892 : 				if(pCityPlot->isRevealed(m_pPlayer->getTeam()))

	mov	ecx, DWORD PTR _this$[esp+68]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+44]
	cmp	ecx, 63					; 0000003fH
	ja	SHORT $LN268@FindTarget
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN269@FindTarget
$LN268@FindTarget:
	or	ecx, -1
$LN269@FindTarget:
	mov	edx, ecx
	shr	edx, 5
	mov	ebx, edx
	shl	ebx, 5
	sub	ecx, ebx
	mov	ebx, 1
	shl	ebx, cl
	test	ebx, DWORD PTR [eax+edx*4+8]
	je	SHORT $LN368@FindTarget

; 4893 : 				{
; 4894 : 					apOtherCityList.push_back(pLoopCity);

	mov	ecx, DWORD PTR _apOtherCityList$[esp+72]
	test	ecx, ecx
	jne	SHORT $LN285@FindTarget
	xor	eax, eax
	jmp	SHORT $LN286@FindTarget
$LN285@FindTarget:
	mov	eax, DWORD PTR _apOtherCityList$[esp+80]
	sub	eax, ecx
	sar	eax, 2
$LN286@FindTarget:
	mov	edx, edi
	sub	edx, ecx
	sar	edx, 2
	cmp	edx, eax
	jae	SHORT $LN278@FindTarget
	mov	DWORD PTR [edi], esi
	add	edi, 4
	mov	DWORD PTR _apOtherCityList$[esp+76], edi
	jmp	SHORT $LN368@FindTarget
$LN278@FindTarget:
	lea	eax, DWORD PTR _pLoopCity$[esp+64]
	push	eax
	push	1
	push	edi
	lea	ecx, DWORD PTR _apOtherCityList$[esp+80]
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
	mov	edi, DWORD PTR _apOtherCityList$[esp+76]
$LN368@FindTarget:
	mov	ebx, DWORD PTR _piTargetDefensiveSpies$[esp+64]
$LN12@FindTarget:

; 4882 : 		{
; 4883 : 			continue;
; 4884 : 		}
; 4885 : 
; 4886 : 		for(pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	lea	edx, DWORD PTR _iLoop$[esp+72]
	add	ecx, ebp
	push	edx
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	esi, eax
	mov	DWORD PTR _pLoopCity$[esp+64], esi
	test	esi, esi
	jne	$LL13@FindTarget
$LN16@FindTarget:

; 4876 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	inc	DWORD PTR _ui$225623[esp+64]
	add	ebp, 63236				; 0000f704H
	cmp	ebp, 1391192				; 00153a58H
	jb	$LL17@FindTarget

; 4895 : 				}
; 4896 : 			}
; 4897 : 		}
; 4898 : 	}
; 4899 : 
; 4900 : 	while(*piTargetDefensiveSpies > m_pPlayer->getNumCities())

	mov	eax, DWORD PTR _this$[esp+68]
	mov	ecx, DWORD PTR [eax]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	cmp	DWORD PTR [ebx], eax
	mov	ebp, DWORD PTR _piTargetOffensiveSpies$[esp+64]
	jle	SHORT $LN357@FindTarget
	mov	esi, edi
	sub	esi, DWORD PTR _apOtherCityList$[esp+72]
	sar	esi, 2
	npad	1
$LL8@FindTarget:

; 4901 : 	{
; 4902 : 		if(*piTargetOffensiveSpies < (int)apOtherCityList.size())

	cmp	DWORD PTR [ebp], esi
	jge	SHORT $LN6@FindTarget

; 4903 : 		{
; 4904 : 			(*piTargetDefensiveSpies)--;

	dec	DWORD PTR [ebx]

; 4905 : 			(*piTargetOffensiveSpies)++;

	inc	DWORD PTR [ebp]

; 4906 : 		}
; 4907 : 		else

	jmp	SHORT $LN5@FindTarget
$LN6@FindTarget:

; 4908 : 		{
; 4909 : 			// spies will be unused
; 4910 : 			(*piTargetDefensiveSpies)--;

	dec	DWORD PTR [ebx]
$LN5@FindTarget:

; 4895 : 				}
; 4896 : 			}
; 4897 : 		}
; 4898 : 	}
; 4899 : 
; 4900 : 	while(*piTargetDefensiveSpies > m_pPlayer->getNumCities())

	mov	ecx, DWORD PTR _this$[esp+68]
	mov	ecx, DWORD PTR [ecx]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	cmp	DWORD PTR [ebx], eax
	jg	SHORT $LL8@FindTarget
$LN357@FindTarget:

; 4911 : 		}
; 4912 : 	}
; 4913 : 
; 4914 : 	while(*piTargetOffensiveSpies > (int)apOtherCityList.size())

	sub	edi, DWORD PTR _apOtherCityList$[esp+72]
	sar	edi, 2
	cmp	DWORD PTR [ebp], edi
	jle	SHORT $LN3@FindTarget
	npad	7
$LL4@FindTarget:

; 4915 : 	{
; 4916 : 		if(*piTargetDefensiveSpies < m_pPlayer->getNumCities())

	mov	edx, DWORD PTR _this$[esp+68]
	mov	ecx, DWORD PTR [edx]
	mov	esi, DWORD PTR [ebx]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	cmp	esi, eax
	jge	SHORT $LN2@FindTarget

; 4917 : 		{
; 4918 : 			(*piTargetDefensiveSpies)++;

	inc	esi
	mov	DWORD PTR [ebx], esi
$LN2@FindTarget:

; 4919 : 			(*piTargetOffensiveSpies)--;
; 4920 : 		}
; 4921 : 		else
; 4922 : 		{
; 4923 : 			// spies will be unused
; 4924 : 			(*piTargetOffensiveSpies)--;

	dec	DWORD PTR [ebp]
	cmp	DWORD PTR [ebp], edi
	jg	SHORT $LL4@FindTarget
$LN3@FindTarget:

; 4925 : 		}
; 4926 : 	}
; 4927 : }

	cmp	DWORD PTR _apOtherCityList$[esp+72], 0
	pop	ebp
	je	SHORT $LN347@FindTarget
	mov	eax, DWORD PTR _apOtherCityList$[esp+68]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN347@FindTarget:
	mov	ecx, DWORD PTR __$EHRec$[esp+64]
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 52					; 00000034H
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z$0:
	lea	ecx, DWORD PTR _apOtherCityList$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__ehhandler$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z:
	mov	eax, OFFSET __ehfuncinfo$?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z ENDP	; CvEspionageAI::FindTargetSpyNumbers
PUBLIC	?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z
_TEXT	SEGMENT
$T255751 = -4						; size = 1
__Cat$255754 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z PROC ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ecx
	push	esi
	mov	esi, ecx

; 810  : 		if (size() < capacity())

	mov	ecx, DWORD PTR [esi+4]
	push	edi
	test	ecx, ecx
	jne	SHORT $LN9@push_back@7
	xor	eax, eax
	jmp	SHORT $LN10@push_back@7
$LN9@push_back@7:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, ecx
	sar	eax, 3
$LN10@push_back@7:
	mov	edi, DWORD PTR [esi+8]
	mov	edx, edi
	sub	edx, ecx
	sar	edx, 3
	cmp	edx, eax
	jae	SHORT $LN2@push_back@7

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	ecx, DWORD PTR __Cat$255754[esp+8]
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	BYTE PTR $T255751[esp+12], 0
	mov	eax, DWORD PTR $T255751[esp+12]
	push	eax
	push	ecx
	push	esi
	push	edx
	push	1
	push	edi
	call	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H
	add	edi, 8
	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 824  : 		}

	pop	ecx
	ret	4
$LN2@push_back@7:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[esp+8]
	push	eax
	push	1
	push	edi
	mov	ecx, esi
	call	?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n
	pop	edi
	pop	esi

; 824  : 		}

	pop	ecx
	ret	4
?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z ENDP ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z
_TEXT	SEGMENT
$T255899 = -4						; size = 1
__Cat$255902 = 8					; size = 1
$T255868 = 8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z PROC ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx

; 810  : 		if (size() < capacity())

	mov	ebx, DWORD PTR [esi+4]
	push	edi
	test	ebx, ebx
	jne	SHORT $LN9@push_back@8
	xor	ecx, ecx
	jmp	SHORT $LN10@push_back@8
$LN9@push_back@8:
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, ebx
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
$LN10@push_back@8:
	mov	edi, DWORD PTR [esi+8]
	mov	edx, edi
	sub	edx, ebx
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, ecx
	jae	SHORT $LN2@push_back@8

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR __Cat$255902[esp+12]
	mov	eax, DWORD PTR __Val$[esp+12]
	mov	BYTE PTR $T255899[esp+16], 0
	mov	ecx, DWORD PTR $T255899[esp+16]
	push	ecx
	push	edx
	push	esi
	push	eax
	push	1
	push	edi
	call	??$_Uninit_fill_n@PAUSpyNotificationMessage@@IU1@V?$allocator@USpyNotificationMessage@@@std@@@std@@YAXPAUSpyNotificationMessage@@IABU1@AAV?$allocator@USpyNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<SpyNotificationMessage *,unsigned int,SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
	add	esp, 24					; 00000018H
	add	edi, 20					; 00000014H
	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi
	pop	ebx

; 824  : 		}

	pop	ecx
	ret	4
$LN2@push_back@8:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	mov	ecx, DWORD PTR __Val$[esp+12]
	push	ecx
	push	edi
	lea	edx, DWORD PTR $T255868[esp+20]
	push	edx
	mov	ecx, esi
	call	?insert@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@2@ABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::insert
	pop	edi
	pop	esi
	pop	ebx

; 824  : 		}

	pop	ecx
	ret	4
?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z ENDP ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back
_TEXT	ENDS
PUBLIC	??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >, COMDAT
; _this$ = ecx

; 559  : 		_Tidy();

	jmp	?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy
??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T255932 = -4						; size = 4
?clear@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXXZ PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::clear, COMDAT
; _this$ = ecx

; 1059 : 		{	// erase all

	push	ecx

; 1060 : 		erase(begin(), end());

	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	push	edx
	lea	eax, DWORD PTR $T255932[esp+12]
	push	eax
	call	?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase

; 1061 : 		}

	pop	ecx
	ret	0
?clear@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXXZ ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::clear
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z
_TEXT	SEGMENT
$T256001 = -4						; size = 1
__Cat$256004 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z PROC ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ecx
	push	esi
	mov	esi, ecx

; 810  : 		if (size() < capacity())

	mov	ecx, DWORD PTR [esi+4]
	push	edi
	test	ecx, ecx
	jne	SHORT $LN9@push_back@9
	xor	eax, eax
	jmp	SHORT $LN10@push_back@9
$LN9@push_back@9:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, ecx
	sar	eax, 3
$LN10@push_back@9:
	mov	edi, DWORD PTR [esi+8]
	mov	edx, edi
	sub	edx, ecx
	sar	edx, 3
	cmp	edx, eax
	jae	SHORT $LN2@push_back@9

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	ecx, DWORD PTR __Cat$256004[esp+8]
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	BYTE PTR $T256001[esp+12], 0
	mov	eax, DWORD PTR $T256001[esp+12]
	push	eax
	push	ecx
	push	esi
	push	edx
	push	1
	push	edi
	call	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H
	add	edi, 8
	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 824  : 		}

	pop	ecx
	ret	4
$LN2@push_back@9:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[esp+8]
	push	eax
	push	1
	push	edi
	mov	ecx, esi
	call	?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n
	pop	edi
	pop	esi

; 824  : 		}

	pop	ecx
	ret	4
?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ENDP ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Insert_n
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$2
__catchsym$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$10 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$10
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$11
__unwindtable$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
__Tmp$227976 = -84					; size = 68
__$EHRec$ = -16						; size = 16
__Tmp$227966 = 0					; size = 68
__Whereoff$227952 = 68					; size = 4
__Ncopied$227953 = 72					; size = 4
_this$ = 76						; size = 4
__Newvec$227951 = 80					; size = 4
__Capacity$ = 84					; size = 4
__Cat$256320 = 96					; size = 1
__Cat$256247 = 96					; size = 1
__Where$ = 96						; size = 4
tv525 = 100						; size = 4
__Count$ = 100						; size = 4
$T256317 = 104						; size = 1
$T256244 = 104						; size = 1
__Val$ = 104						; size = 4
?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	lea	ebp, DWORD PTR [esp-88]
	sub	esp, 88					; 00000058H
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi
	mov	esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], esi
	test	eax, eax
	jne	SHORT $LN31@Insert_n@6
	mov	DWORD PTR __Capacity$[ebp], eax
	jmp	SHORT $LN32@Insert_n@6
$LN31@Insert_n@6:
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, eax
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR __Capacity$[ebp], eax
$LN32@Insert_n@6:

; 1162 : 
; 1163 : 		if (_Count == 0)

	mov	edi, DWORD PTR __Count$[ebp]
	test	edi, edi
	je	$LN1@Insert_n@6

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ebx, DWORD PTR [esi+8]
	mov	ecx, ebx
	sub	ecx, DWORD PTR [esi+4]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	ecx, 63161283				; 03c3c3c3H
	sub	ecx, eax
	cmp	ecx, edi
	jae	SHORT $LN12@Insert_n@6

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@KAXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Xlen
$LN107@Insert_n@6:
$LN12@Insert_n@6:

; 1167 : 		else if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	add	eax, edi
	cmp	ecx, eax
	jae	$LN10@Insert_n@6

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	edx, ecx
	shr	edx, 1
	mov	ebx, 63161283				; 03c3c3c3H
	sub	ebx, edx
	cmp	ebx, ecx
	jae	SHORT $LN17@Insert_n@6
	mov	DWORD PTR __Capacity$[ebp], 0
	mov	ecx, DWORD PTR __Capacity$[ebp]
	jmp	SHORT $LN18@Insert_n@6
$LN17@Insert_n@6:
	add	ecx, edx
	mov	DWORD PTR __Capacity$[ebp], ecx
$LN18@Insert_n@6:

; 1171 : 			if (_Capacity < size() + _Count)

	cmp	ecx, eax
	jae	SHORT $LN9@Insert_n@6

; 1172 : 				_Capacity = size() + _Count;

	mov	DWORD PTR __Capacity$[ebp], eax
	mov	ecx, eax
$LN9@Insert_n@6:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	push	0
	push	ecx
	call	??$_Allocate@UIntrigueNotificationMessage@@@std@@YAPAUIntrigueNotificationMessage@@IPAU1@@Z ; std::_Allocate<IntrigueNotificationMessage>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [esi+4]
	mov	ecx, eax
	mov	eax, 2021161081				; 78787879H
	imul	edx
	sar	edx, 5
	mov	ebx, edx

; 1175 : 			int _Ncopied = 0;

	xor	eax, eax
	shr	ebx, 31					; 0000001fH
	add	ebx, edx

; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR __Ncopied$227953[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], eax
	add	esp, 8
	mov	eax, ebx
	shl	eax, 4
	push	edx
	mov	DWORD PTR __Newvec$227951[ebp], ecx
	add	eax, ebx
	lea	ecx, DWORD PTR [ecx+eax*4]
	push	edi
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR __Whereoff$227952[ebp], ebx
	call	?_Ufill@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU3@IABU3@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR __Cat$256247[ebp]
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR $T256244[ebp], 0
	mov	edx, DWORD PTR $T256244[ebp]
	push	edx
	mov	edx, DWORD PTR __Newvec$227951[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Where$[ebp]
	push	esi
	push	edx
	push	ecx
	push	eax
	mov	DWORD PTR __Ncopied$227953[ebp], 1
	call	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR __Newvec$227951[ebp]
	mov	eax, DWORD PTR [esi+8]
	add	ebx, edi
	mov	edx, ebx
	shl	edx, 4
	add	edx, ebx
	add	esp, 24					; 00000018H
	lea	ecx, DWORD PTR [ecx+edx*4]
	mov	BYTE PTR $T256317[ebp], 0
	mov	edx, DWORD PTR $T256317[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$256320[ebp]
	push	edx
	push	esi
	push	ecx
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	DWORD PTR __Ncopied$227953[ebp], 2
	call	??$_Uninit_copy@PAUIntrigueNotificationMessage@@PAU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAPAUIntrigueNotificationMessage@@PAU1@00AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<IntrigueNotificationMessage *,IntrigueNotificationMessage *,std::allocator<IntrigueNotificationMessage> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

	mov	ebx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, ebx
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	add	esp, 24					; 00000018H
	add	edi, ecx
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1195 : 			if (_Myfirst != 0)

	test	ebx, ebx
	je	SHORT $LN83@Insert_n@6

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR [esi+8]
	push	edx
	push	ebx
	mov	ecx, esi
	call	?_Destroy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXPAUIntrigueNotificationMessage@@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Destroy

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN83@Insert_n@6:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, eax
	shl	ecx, 4
	add	ecx, eax
	mov	eax, DWORD PTR __Newvec$227951[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, edi
	shl	ecx, 4
	add	ecx, edi
	mov	DWORD PTR [esi+12], edx
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [esi+8], edx

; 1207 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+4], eax
	jmp	$LN1@Insert_n@6
__catch$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	mov	ebx, DWORD PTR __Ncopied$227953[ebp]
	cmp	ebx, 1

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	esi, DWORD PTR __Whereoff$227952[ebp]
	mov	edi, DWORD PTR __Newvec$227951[ebp]
	jle	SHORT $LN7@Insert_n@6
	mov	eax, esi
	shl	eax, 4
	add	eax, esi
	lea	ecx, DWORD PTR [edi+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	push	edi
	call	?_Destroy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXPAUIntrigueNotificationMessage@@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Destroy
$LN7@Insert_n@6:

; 1188 : 			if (0 < _Ncopied)

	test	ebx, ebx
	jle	SHORT $LN6@Insert_n@6

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [esi+edx]
	mov	ecx, eax
	shl	ecx, 4
	add	ecx, eax
	mov	eax, esi
	lea	edx, DWORD PTR [edi+ecx*4]
	shl	eax, 4
	add	eax, esi
	lea	ecx, DWORD PTR [edi+eax*4]
	push	edx
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXPAUIntrigueNotificationMessage@@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Destroy
$LN6@Insert_n@6:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN108@Insert_n@6:
$LN10@Insert_n@6:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	sub	ebx, DWORD PTR __Where$[ebp]
	mov	eax, 2021161081				; 78787879H
	imul	ebx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, edi
	jae	$LN3@Insert_n@6

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$227966[ebp]
	call	??0IntrigueNotificationMessage@@QAE@ABU0@@Z

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, DWORD PTR [esi+8]
	mov	ebx, edi
	shl	ebx, 4
	add	ebx, edi
	add	ebx, ebx
	add	ebx, ebx
	lea	edx, DWORD PTR [ebx+eax]
	push	edx
	push	ecx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+12], 2
	call	??$_Umove@PAUIntrigueNotificationMessage@@@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU2@00@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Umove<IntrigueNotificationMessage *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	ecx, DWORD PTR [esi+8]
	lea	edx, DWORD PTR __Tmp$227966[ebp]
	push	edx
	mov	edx, ecx
	sub	edx, DWORD PTR __Where$[ebp]
	mov	eax, 2021161081				; 78787879H
	imul	edx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	sub	edi, eax
	push	edi
	push	ecx
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	call	?_Ufill@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU3@IABU3@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Ufill

; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

	add	DWORD PTR [esi+8], ebx
	mov	esi, DWORD PTR [esi+8]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR __Tmp$227966[ebp]
	push	ecx
	sub	esi, ebx
	push	esi
	push	edx
	mov	DWORD PTR __$EHRec$[ebp+12], 2
	call	??$_Fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z ; std::_Fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>
	add	esp, 12					; 0000000cH

; 1232 : 			}

	lea	ecx, DWORD PTR __Tmp$227966[ebp+36]

; 1233 : 		else

	jmp	$LN106@Insert_n@6
__catch$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	eax, ecx
	shl	eax, 4
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	eax, eax
	add	eax, eax
	add	edx, eax
	push	edx
	mov	edx, DWORD PTR __Where$[ebp]
	add	eax, edx
	push	eax
	call	?_Destroy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXPAUIntrigueNotificationMessage@@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Destroy

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN109@Insert_n@6:
$LN3@Insert_n@6:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$227976[ebp]
	call	??0IntrigueNotificationMessage@@QAE@ABU0@@Z

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR [esi+8]

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	ebx, edi
	shl	ebx, 4
	add	ebx, edi
	add	ebx, ebx
	push	eax
	mov	edi, eax
	add	ebx, ebx
	push	eax
	sub	edi, ebx
	push	edi
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+12], 5
	mov	DWORD PTR tv525[ebp], eax
	call	??$_Umove@PAUIntrigueNotificationMessage@@@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEPAUIntrigueNotificationMessage@@PAU2@00@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Umove<IntrigueNotificationMessage *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	ecx, DWORD PTR tv525[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	push	ecx
	push	edi
	push	edx
	mov	DWORD PTR [esi+8], eax
	call	??$_Unchecked_move_backward@PAUIntrigueNotificationMessage@@PAU1@@stdext@@YAPAUIntrigueNotificationMessage@@PAU1@00@Z ; stdext::_Unchecked_move_backward<IntrigueNotificationMessage *,IntrigueNotificationMessage *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	lea	eax, DWORD PTR __Tmp$227976[ebp]
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	add	ebx, eax
	push	ebx
	push	eax
	call	??$_Fill@PAUIntrigueNotificationMessage@@U1@@std@@YAXPAUIntrigueNotificationMessage@@0ABU1@@Z ; std::_Fill<IntrigueNotificationMessage *,IntrigueNotificationMessage>
	add	esp, 24					; 00000018H

; 1249 : 			}

	lea	ecx, DWORD PTR __Tmp$227976[ebp+36]
$LN106@Insert_n@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@Insert_n@6:

; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	ebp, 88					; 00000058H
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN105@Insert_n@6:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$4:
	lea	ecx, DWORD PTR __Tmp$227966[ebp]
	jmp	??1IntrigueNotificationMessage@@QAE@XZ
__unwindfunclet$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z$5:
	lea	ecx, DWORD PTR __Tmp$227976[ebp]
	jmp	??1IntrigueNotificationMessage@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Insert_n
PUBLIC	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z$0
__ehfuncinfo$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
__Tempbuf$ = -32					; size = 20
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z PROC ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>, COMDAT

; 3560 : 	{	// sort preserving order of equivalents, using _Pred

	push	-1
	push	__ehhandler$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi

; 3561 : 	_Diff _Count = 0;
; 3562 : 	_Distance(_First, _Last, _Count);

	mov	esi, DWORD PTR __Last$[esp+36]
	push	edi
	mov	edi, DWORD PTR __First$[esp+40]
	mov	ecx, esi
	sub	ecx, edi
	sar	ecx, 3

; 3563 : 	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);

	lea	eax, DWORD PTR [ecx+1]
	cdq
	sub	eax, edx
	sar	eax, 1
	xor	ebx, ebx
	mov	DWORD PTR __Tempbuf$[esp+56], eax
	lea	eax, DWORD PTR __Tempbuf$[esp+44]
	mov	DWORD PTR __Tempbuf$[esp+44], ebx
	mov	DWORD PTR __Tempbuf$[esp+48], ebx
	mov	DWORD PTR __Tempbuf$[esp+52], ebx
	mov	DWORD PTR __Tempbuf$[esp+60], eax

; 3564 : 	_Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);

	mov	edx, DWORD PTR __Pred$[esp+40]
	push	edx
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[esp+72], ebx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>

; 3565 : 	}

	mov	eax, DWORD PTR __Tempbuf$[esp+64]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	cmp	eax, ebx
	pop	ebx
	je	SHORT $LN24@Stable_sor@3
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN24@Stable_sor@3:
	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	mov	DWORD PTR fs:0, ecx
	add	esp, 32					; 00000020H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z$0:
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ENDP ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
PUBLIC	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	SEGMENT
__unwindtable$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z$0
__ehfuncinfo$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
xdata$x	ENDS
;	COMDAT ??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
__Tempbuf$ = -32					; size = 20
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z PROC ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>, COMDAT

; 3560 : 	{	// sort preserving order of equivalents, using _Pred

	push	-1
	push	__ehhandler$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi

; 3561 : 	_Diff _Count = 0;
; 3562 : 	_Distance(_First, _Last, _Count);

	mov	esi, DWORD PTR __Last$[esp+36]
	push	edi
	mov	edi, DWORD PTR __First$[esp+40]
	mov	ecx, esi
	sub	ecx, edi
	sar	ecx, 3

; 3563 : 	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);

	lea	eax, DWORD PTR [ecx+1]
	cdq
	sub	eax, edx
	sar	eax, 1
	xor	ebx, ebx
	mov	DWORD PTR __Tempbuf$[esp+56], eax
	lea	eax, DWORD PTR __Tempbuf$[esp+44]
	mov	DWORD PTR __Tempbuf$[esp+44], ebx
	mov	DWORD PTR __Tempbuf$[esp+48], ebx
	mov	DWORD PTR __Tempbuf$[esp+52], ebx
	mov	DWORD PTR __Tempbuf$[esp+60], eax

; 3564 : 	_Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);

	mov	edx, DWORD PTR __Pred$[esp+40]
	push	edx
	push	eax
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[esp+72], ebx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0HAAV?$_Temp_iterator@UScoreCityEntry@@@0@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>

; 3565 : 	}

	mov	eax, DWORD PTR __Tempbuf$[esp+64]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	cmp	eax, ebx
	pop	ebx
	je	SHORT $LN24@Stable_sor@4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN24@Stable_sor@4:
	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	mov	DWORD PTR fs:0, ecx
	add	esp, 32					; 00000020H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z$0:
	lea	ecx, DWORD PTR __Tempbuf$[ebp]
	jmp	??1?$_Temp_iterator@UScoreCityEntry@@@std@@QAE@XZ ; std::_Temp_iterator<ScoreCityEntry>::~_Temp_iterator<ScoreCityEntry>
__ehhandler$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ENDP ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
PUBLIC	?Reset@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::Reset
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
;	COMDAT ?Reset@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
$T256823 = -4						; size = 4
?Reset@CvPlayerEspionage@@QAEXXZ PROC			; CvPlayerEspionage::Reset, COMDAT
; _this$ = ecx

; 158  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 159  : 	m_pPlayer = NULL;

	xor	ebp, ebp
	mov	DWORD PTR [esi+1292], ebp

; 160  : 	m_aSpyList.clear();

	mov	DWORD PTR [esi+4], ebp

; 161  : 	m_aiSpyListNameOrder.clear();

	mov	ecx, DWORD PTR [esi+248]
	push	edi
	mov	edi, DWORD PTR [esi+244]
	cmp	edi, ecx
	je	SHORT $LN28@Reset@3
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	cmp	eax, ebp
	lea	edx, DWORD PTR [eax*4]
	lea	ebx, DWORD PTR [edx+edi]
	jle	SHORT $LN53@Reset@3
	push	edx
	push	ecx
	push	edx
	push	edi
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN53@Reset@3:
	mov	DWORD PTR [esi+248], ebx
$LN28@Reset@3:

; 162  : 	m_iSpyListNameOrderIndex = -1;

	mov	DWORD PTR [esi+256], -1

; 163  : 	m_aiNumTechsToStealList.clear();
; 164  : 	m_aIntrigueNotificationMessages.clear();

	lea	ecx, DWORD PTR [esi+1276]
	mov	DWORD PTR [esi+720], ebp
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	push	edx
	lea	eax, DWORD PTR $T256823[esp+28]
	push	eax
	call	?erase@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@0@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::erase

; 165  : 	m_aaPlayerStealableTechList.clear();

	lea	ecx, DWORD PTR [esi+260]
	call	?clear@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@QAEXXZ ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::clear
	lea	edi, DWORD PTR [esi+820]
	add	esi, 916				; 00000394H
	mov	ebx, 22					; 00000016H
	npad	2
$LL3@Reset@3:

; 167  : 	{
; 168  : 		m_aiMaxTechCost[ui] = -1;

	mov	DWORD PTR [edi], -1

; 169  : 		m_aHeistLocations[ui].clear();

	mov	ecx, DWORD PTR [esi-4]
	mov	edx, DWORD PTR [esi]
	cmp	ecx, edx
	je	SHORT $LN2@Reset@3
	mov	eax, edx
	cmp	edx, edx
	je	SHORT $LN121@Reset@3
$LL123@Reset@3:
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	add	eax, 8
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL123@Reset@3
$LN121@Reset@3:
	mov	DWORD PTR [esi], ecx
$LN2@Reset@3:

; 166  : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	add	edi, 4
	add	esi, 16					; 00000010H
	sub	ebx, 1
	jne	SHORT $LL3@Reset@3
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 170  : 	}
; 171  : }

	pop	ecx
	ret	0
?Reset@CvPlayerEspionage@@QAEXXZ ENDP			; CvPlayerEspionage::Reset
_TEXT	ENDS
PUBLIC	?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z ; CvPlayerEspionage::AddSpyMessage
; Function compile flags: /Ogtpy
;	COMDAT ?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z
_TEXT	SEGMENT
_kMessage$ = -20					; size = 20
_iCityX$ = 8						; size = 4
_iCityY$ = 12						; size = 4
_eAttackingPlayer$ = 16					; size = 4
_iSpyResult$ = 20					; size = 4
_eStolenTech$ = 24					; size = 4
?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z PROC ; CvPlayerEspionage::AddSpyMessage, COMDAT
; _this$ = ecx

; 2387 : {

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp

; 2388 : 	// go through all messages to see if this is an update
; 2389 : 	for(uint ui = 0; ui < m_aSpyNotificationMessages.size(); ui++)

	mov	ebx, DWORD PTR _eAttackingPlayer$[esp+24]
	push	esi
	push	edi
	mov	edi, ecx
	mov	edx, DWORD PTR [edi+1268]
	sub	edx, DWORD PTR [edi+1264]
	lea	ecx, DWORD PTR [edi+1260]
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	xor	esi, esi
	add	eax, edx
	je	SHORT $LN2@AddSpyMess
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 3
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	edx, DWORD PTR [edi+1264]
$LL24@AddSpyMess:

; 2390 : 	{
; 2391 : 		if(m_aSpyNotificationMessages[ui].m_iCityX == iCityX && m_aSpyNotificationMessages[ui].m_iCityY == iCityY && m_aSpyNotificationMessages[ui].m_eAttackingPlayer == eAttackingPlayer)

	mov	ebp, DWORD PTR _iCityX$[esp+32]
	cmp	DWORD PTR [edx], ebp
	jne	SHORT $LN3@AddSpyMess
	mov	ebp, DWORD PTR [edx+4]
	cmp	ebp, DWORD PTR _iCityY$[esp+32]
	jne	SHORT $LN3@AddSpyMess
	cmp	DWORD PTR [edx+8], ebx
	je	SHORT $LN20@AddSpyMess
$LN3@AddSpyMess:

; 2388 : 	// go through all messages to see if this is an update
; 2389 : 	for(uint ui = 0; ui < m_aSpyNotificationMessages.size(); ui++)

	inc	esi
	add	edx, 20					; 00000014H
	cmp	esi, eax
	jb	SHORT $LL24@AddSpyMess
$LN2@AddSpyMess:

; 2395 : 			// found the appropriate message, now leaving the function
; 2396 : 			return;
; 2397 : 		}
; 2398 : 	}
; 2399 : 
; 2400 : 	// no matching message found so adding it to the back of the list
; 2401 : 	SpyNotificationMessage kMessage;
; 2402 : 	kMessage.m_iCityX = iCityX;

	mov	eax, DWORD PTR _iCityX$[esp+32]

; 2403 : 	kMessage.m_iCityY = iCityY;

	mov	edx, DWORD PTR _iCityY$[esp+32]
	mov	DWORD PTR _kMessage$[esp+36], eax

; 2404 : 	kMessage.m_eAttackingPlayer = eAttackingPlayer;
; 2405 : 	kMessage.m_iSpyResult = iSpyResult;

	mov	eax, DWORD PTR _iSpyResult$[esp+32]
	mov	DWORD PTR _kMessage$[esp+48], eax
	mov	DWORD PTR _kMessage$[esp+40], edx

; 2406 : 	kMessage.m_eStolenTech = eStolenTech;

	mov	edx, DWORD PTR _eStolenTech$[esp+32]

; 2407 : 	m_aSpyNotificationMessages.push_back(kMessage);

	lea	eax, DWORD PTR _kMessage$[esp+36]
	push	eax
	mov	DWORD PTR _kMessage$[esp+48], ebx
	mov	DWORD PTR _kMessage$[esp+56], edx
	call	?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 2408 : }

	add	esp, 20					; 00000014H
	ret	20					; 00000014H
$LN20@AddSpyMess:

; 2392 : 		{
; 2393 : 			m_aSpyNotificationMessages[ui].m_iSpyResult = iSpyResult;

	mov	ecx, DWORD PTR [edi+1264]
	mov	edx, DWORD PTR _iSpyResult$[esp+32]
	lea	eax, DWORD PTR [esi+esi*4]
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR [ecx+eax+12], edx

; 2394 : 			m_aSpyNotificationMessages[ui].m_eStolenTech = eStolenTech;

	mov	ecx, DWORD PTR [edi+1264]
	mov	edx, DWORD PTR _eStolenTech$[esp+32]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx+eax+16], edx
	pop	ebx

; 2408 : }

	add	esp, 20					; 00000014H
	ret	20					; 00000014H
?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z ENDP ; CvPlayerEspionage::AddSpyMessage
_TEXT	ENDS
PUBLIC	?StealTechnology@CvEspionageAI@@QAEXXZ		; CvEspionageAI::StealTechnology
EXTRN	?SetNoTradeTech@CvTeamTechs@@QAEXW4TechTypes@@_N@Z:PROC ; CvTeamTechs::SetNoTradeTech
EXTRN	?setHasTech@CvTeam@@QAEXW4TechTypes@@_NW4PlayerTypes@@11@Z:PROC ; CvTeam::setHasTech
; Function compile flags: /Ogtpy
;	COMDAT ?StealTechnology@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
_uiDefendingPlayer$225477 = -28				; size = 4
tv670 = -24						; size = 4
tv723 = -20						; size = 4
tv693 = -16						; size = 4
tv689 = -12						; size = 4
_this$ = -8						; size = 4
_pEspionage$ = -4					; size = 4
?StealTechnology@CvEspionageAI@@QAEXXZ PROC		; CvEspionageAI::StealTechnology, COMDAT
; _this$ = ecx

; 4577 : {

	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	push	esi
	mov	DWORD PTR _this$[esp+40], ecx

; 4578 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ecx]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ebx, eax

; 4579 : 
; 4580 : 	// try to steal technologies
; 4581 : 	for(uint uiDefendingPlayer = 0; uiDefendingPlayer < MAX_MAJOR_CIVS; uiDefendingPlayer++)

	xor	eax, eax
	xor	ebp, ebp
	lea	ecx, DWORD PTR [ebx+912]
	mov	DWORD PTR _pEspionage$[esp+44], ebx
	mov	DWORD PTR _uiDefendingPlayer$225477[esp+44], eax
	mov	DWORD PTR tv689[esp+44], eax
	mov	DWORD PTR tv693[esp+44], ebp
	mov	DWORD PTR tv723[esp+44], ecx
$LL11@StealTechn:

; 4585 : 		while(pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer] > 0)

	mov	edx, DWORD PTR [ebx+716]
	mov	ecx, DWORD PTR _uiDefendingPlayer$225477[esp+44]
	cmp	DWORD PTR [edx+ecx*4], eax
	jle	$LN10@StealTechn

; 4582 : 	{
; 4583 : 		PlayerTypes eDefendingPlayer = (PlayerTypes)uiDefendingPlayer;
; 4584 : 		int iHeistLocationCounter = 0;

	mov	DWORD PTR tv670[esp+44], eax
	npad	7
$LL8@StealTechn:

; 4586 : 		{
; 4587 : 			// steal a tech
; 4588 : 			CvAssertMsg(pEspionage->m_aaPlayerStealableTechList[uiDefendingPlayer].size() > 0, "pEspionage->m_aaPlayerStealableTechList[uiPlayer] list is empty. Not good");
; 4589 : 			TeamTypes eTeam = m_pPlayer->getTeam();

	mov	edx, DWORD PTR _this$[esp+44]
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN20@StealTechn
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN21@StealTechn
$LN20@StealTechn:
	or	esi, -1
$LN21@StealTechn:

; 4590 : 			TechTypes eStolenTech = pEspionage->m_aaPlayerStealableTechList[uiDefendingPlayer][0];

	mov	ecx, DWORD PTR [ebx+260]

; 4591 : 			GET_TEAM(eTeam).setHasTech(eStolenTech, true, m_pPlayer->GetID(), true, true);

	imul	esi, 2980				; 00000ba4H
	mov	edx, DWORD PTR [ecx+ebp]
	mov	edi, DWORD PTR [edx]
	push	1
	push	1
	push	eax
	mov	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	1
	push	edi
	lea	ecx, DWORD PTR [esi+eax]
	call	?setHasTech@CvTeam@@QAEXW4TechTypes@@_NW4PlayerTypes@@11@Z ; CvTeam::setHasTech

; 4592 : 			GET_TEAM(eTeam).GetTeamTechs()->SetNoTradeTech(eStolenTech, true);

	mov	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	1
	add	ecx, esi
	push	edi
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?SetNoTradeTech@CvTeamTechs@@QAEXW4TechTypes@@_N@Z ; CvTeamTechs::SetNoTradeTech

; 4593 : 
; 4594 : 			// send out notifications to the parties that were stolen from
; 4595 : 			CvPlot* pPlot = GC.getMap().plot(pEspionage->m_aHeistLocations[uiDefendingPlayer][iHeistLocationCounter].m_iX, pEspionage->m_aHeistLocations[uiDefendingPlayer][iHeistLocationCounter].m_iY);

	mov	edx, DWORD PTR tv723[esp+44]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv670[esp+44]
	mov	esi, DWORD PTR [eax+ecx+4]
	add	eax, ecx
	mov	eax, DWORD PTR [eax]
	cmp	eax, -2147483647			; 80000001H
	je	$LN3@StealTechn
	cmp	esi, -2147483647			; 80000001H
	je	$LN3@StealTechn
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [edx+4056], 0
	mov	ecx, DWORD PTR [edx+4020]
	je	SHORT $LN57@StealTechn
	test	eax, eax
	jge	SHORT $LN59@StealTechn
	cdq
	idiv	ecx
	mov	ebx, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	add	ebx, ecx
	jmp	SHORT $LN61@StealTechn
$LN59@StealTechn:
	cmp	eax, ecx
	jl	SHORT $LN57@StealTechn
	cdq
	idiv	ecx
	mov	ebx, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	jmp	SHORT $LN61@StealTechn
$LN57@StealTechn:
	mov	ebx, eax
$LN61@StealTechn:
	cmp	BYTE PTR [edx+4057], 0
	mov	ebp, DWORD PTR [edx+4024]
	je	SHORT $LN124@StealTechn
	test	esi, esi
	jge	SHORT $LN69@StealTechn
	mov	eax, esi
	cdq
	idiv	ebp
	add	edx, ebp
	jmp	SHORT $LN71@StealTechn
$LN69@StealTechn:
	cmp	esi, ebp
	jl	SHORT $LN124@StealTechn
	mov	eax, esi
	cdq
	idiv	ebp
	jmp	SHORT $LN71@StealTechn
$LN124@StealTechn:
	mov	edx, esi
$LN71@StealTechn:
	test	ebx, ebx
	jl	$LN125@StealTechn
	cmp	ebx, ecx
	jge	$LN125@StealTechn
	test	edx, edx
	jl	$LN125@StealTechn
	cmp	edx, ebp
	jge	$LN125@StealTechn
	imul	ecx, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	add	ecx, ebx
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [edx+4068]

; 4596 : 			CvAssertMsg(pPlot, "Could not find plot location for HeistLocation");
; 4597 : 			if(pPlot)

	test	ecx, ecx
	je	SHORT $LN125@StealTechn

; 4598 : 			{
; 4599 : 				CvCity* pCity = pPlot->getPlotCity();

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN125@StealTechn
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN125@StealTechn
	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	esi, eax

; 4600 : 				CvAssertMsg(pCity, "Plot does not contain a city");
; 4601 : 				if(pCity)

	test	esi, esi
	je	SHORT $LN125@StealTechn

; 4602 : 				{
; 4603 : 					CvAssertMsg(pCity->getOwner() == uiDefendingPlayer, "City does not belong to player. This is very strange");
; 4604 : 					CvCityEspionage* pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	ebx, eax

; 4605 : 					CvAssertMsg(pCityEspionage, "City did not have CityEspionage data");
; 4606 : 					if(pCityEspionage)

	test	ebx, ebx
	je	SHORT $LN125@StealTechn

; 4607 : 					{
; 4608 : 						CvPlayerEspionage* pDefendingPlayerEspionage = GET_PLAYER(eDefendingPlayer).GetEspionage();

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR tv689[esp+44]
	lea	ecx, DWORD PTR [eax+edx]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage

; 4609 : 						if(pDefendingPlayerEspionage)

	test	eax, eax
	je	SHORT $LN125@StealTechn

; 4610 : 						{
; 4611 : 							pDefendingPlayerEspionage->AddSpyMessage(pCity->getX(), pCity->getY(), m_pPlayer->GetID(), pCityEspionage->m_aiResult[m_pPlayer->GetID()], eStolenTech);

	mov	ecx, DWORD PTR _this$[esp+44]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [ebx+edx*4+620]
	push	edi
	push	ecx
	mov	ecx, DWORD PTR [esi+96]
	push	edx
	mov	edx, DWORD PTR [esi+108]
	push	edx
	push	ecx
	mov	ecx, eax
	call	?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z ; CvPlayerEspionage::AddSpyMessage
$LN125@StealTechn:
	mov	ebp, DWORD PTR tv693[esp+44]
	mov	ebx, DWORD PTR _pEspionage$[esp+44]
$LN3@StealTechn:

; 4612 : 						}
; 4613 : 					}
; 4614 : 				}
; 4615 : 			}
; 4616 : 			iHeistLocationCounter++;
; 4617 : 
; 4618 : 			// recalculate the num techs to steal list
; 4619 : 			pEspionage->BuildStealableTechList((PlayerTypes)uiDefendingPlayer);

	mov	esi, DWORD PTR _uiDefendingPlayer$225477[esp+44]
	add	DWORD PTR tv670[esp+44], 8
	push	esi
	mov	ecx, ebx
	call	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList

; 4620 : 			if(pEspionage->m_aaPlayerStealableTechList[uiDefendingPlayer].size() > 0 && pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer] > 0)

	mov	edx, DWORD PTR [ebx+260]
	cmp	DWORD PTR [edx+ebp+4], 0
	jbe	SHORT $LN2@StealTechn
	mov	eax, DWORD PTR [ebx+716]
	cmp	DWORD PTR [eax+esi*4], 0
	lea	eax, DWORD PTR [eax+esi*4]
	jle	SHORT $LN2@StealTechn

; 4621 : 			{
; 4622 : 				pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer]--;

	dec	DWORD PTR [eax]

; 4623 : 			}
; 4624 : 			else

	jmp	SHORT $LN1@StealTechn
$LN2@StealTechn:

; 4625 : 			{
; 4626 : 				pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer] = 0;

	mov	ecx, DWORD PTR [ebx+716]
	mov	DWORD PTR [ecx+esi*4], 0
$LN1@StealTechn:
	mov	edx, DWORD PTR [ebx+716]
	cmp	DWORD PTR [edx+esi*4], 0
	jg	$LL8@StealTechn

; 4585 : 		while(pEspionage->m_aiNumTechsToStealList[uiDefendingPlayer] > 0)

	xor	eax, eax
$LN10@StealTechn:

; 4579 : 
; 4580 : 	// try to steal technologies
; 4581 : 	for(uint uiDefendingPlayer = 0; uiDefendingPlayer < MAX_MAJOR_CIVS; uiDefendingPlayer++)

	inc	DWORD PTR _uiDefendingPlayer$225477[esp+44]
	add	DWORD PTR tv723[esp+44], 16		; 00000010H
	add	DWORD PTR tv689[esp+44], 63236		; 0000f704H
	add	ebp, 20					; 00000014H
	mov	DWORD PTR tv693[esp+44], ebp
	cmp	ebp, 440				; 000001b8H
	jb	$LL11@StealTechn
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 4627 : 			}
; 4628 : 		}
; 4629 : 	}
; 4630 : }

	add	esp, 28					; 0000001cH
	ret	0
?StealTechnology@CvEspionageAI@@QAEXXZ ENDP		; CvEspionageAI::StealTechnology
_TEXT	ENDS
PUBLIC	?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::insert
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	ebx, DWORD PTR __Where$[esp]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, esi
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	jne	SHORT $LN3@insert@6
	xor	esi, esi
	jmp	SHORT $LN4@insert@6
$LN3@insert@6:
	mov	ecx, ebx
	sub	ecx, esi
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
$LN4@insert@6:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	ecx, DWORD PTR __Val$[esp+8]
	push	ecx
	push	1
	push	ebx
	mov	ecx, edi
	call	?_Insert_n@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXV?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@IABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR [edi+4]
	mov	edx, esi
	shl	edx, 4
	add	edx, esi
	pop	edi
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	pop	esi
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 879  : 		}

	ret	12					; 0000000cH
?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::insert
_TEXT	ENDS
PUBLIC	??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z PROC ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>, COMDAT

; 3571 : 	_DEBUG_RANGE(_First, _Last);
; 3572 : 	_DEBUG_POINTER(_Pred);
; 3573 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@stable_sor

; 3574 : 		{
; 3575 : 		_Stable_sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 3576 : 			_Dist_type(_First), _Val_type(_First), _Pred);

	mov	edx, DWORD PTR __Pred$[esp-4]
	push	edx
	push	0
	push	0
	push	ecx
	push	eax
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H
$LN1@stable_sor:

; 3577 : 		}
; 3578 : 	}

	ret	0
??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryHighEval@@@Z ENDP ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryHighEval>
_TEXT	ENDS
PUBLIC	??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@@Z ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
; Function compile flags: /Ogtpy
;	COMDAT ??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@@Z PROC ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>, COMDAT

; 3571 : 	_DEBUG_RANGE(_First, _Last);
; 3572 : 	_DEBUG_POINTER(_Pred);
; 3573 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@stable_sor@2

; 3574 : 		{
; 3575 : 		_Stable_sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 3576 : 			_Dist_type(_First), _Val_type(_First), _Pred);

	mov	edx, DWORD PTR __Pred$[esp-4]
	push	edx
	push	0
	push	0
	push	ecx
	push	eax
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 20					; 00000014H
$LN1@stable_sor@2:

; 3577 : 		}
; 3578 : 	}

	ret	0
??$stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0UScoreCityEntryLowEval@@@Z ENDP ; std::stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,ScoreCityEntryLowEval>
_TEXT	ENDS
PUBLIC	??0CvPlayerEspionage@@QAE@XZ			; CvPlayerEspionage::CvPlayerEspionage
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__ehfuncinfo$??0CvPlayerEspionage@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0CvPlayerEspionage@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvPlayerEspionage@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$6
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??0CvPlayerEspionage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvPlayerEspionage@@QAE@XZ PROC			; CvPlayerEspionage::CvPlayerEspionage, COMDAT
; _this$ = ecx

; 101  : {

	push	-1
	push	__ehhandler$??0CvPlayerEspionage@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
	xor	edi, edi
	lea	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _this$[esp+24], esi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+8], 8
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR __$EHRec$[esp+32], edi
	mov	DWORD PTR [esi+244], edi
	mov	DWORD PTR [esi+248], edi
	mov	DWORD PTR [esi+252], edi
	lea	eax, DWORD PTR [esi+272]
	mov	ecx, 22					; 00000016H
	mov	DWORD PTR [esi+264], edi
	mov	DWORD PTR [esi+268], ecx
	mov	DWORD PTR [esi+260], eax
	lea	eax, DWORD PTR [esi+728]
	mov	DWORD PTR [esi+720], edi
	mov	DWORD PTR [esi+724], ecx
	mov	DWORD PTR [esi+716], eax
	push	OFFSET ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
	push	OFFSET ??0?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::vector<HeistLocation,std::allocator<HeistLocation> >
	push	ecx
	lea	eax, DWORD PTR [esi+908]
	push	16					; 00000010H
	push	eax
	mov	BYTE PTR __$EHRec$[esp+52], 3
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	DWORD PTR [esi+1264], edi
	mov	DWORD PTR [esi+1268], edi
	mov	DWORD PTR [esi+1272], edi
	mov	DWORD PTR [esi+1280], edi
	mov	DWORD PTR [esi+1284], edi
	mov	DWORD PTR [esi+1288], edi

; 102  : 	Reset();

	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+32], 6
	call	?Reset@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::Reset

; 103  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	jmp	??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 716				; 000002ccH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 908				; 0000038cH
	jmp	??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1260				; 000004ecH
	jmp	??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
__unwindfunclet$??0CvPlayerEspionage@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	jmp	??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
__ehhandler$??0CvPlayerEspionage@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0CvPlayerEspionage@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvPlayerEspionage@@QAE@XZ ENDP			; CvPlayerEspionage::CvPlayerEspionage
PUBLIC	??1CvPlayerEspionage@@QAE@XZ			; CvPlayerEspionage::~CvPlayerEspionage
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__ehfuncinfo$??1CvPlayerEspionage@@QAE@XZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??1CvPlayerEspionage@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvPlayerEspionage@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$6
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??1CvPlayerEspionage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvPlayerEspionage@@QAE@XZ PROC			; CvPlayerEspionage::~CvPlayerEspionage, COMDAT
; _this$ = ecx

; 107  : {

	push	-1
	push	__ehhandler$??1CvPlayerEspionage@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	ebp
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+24], esi
	mov	DWORD PTR __$EHRec$[esp+32], 6

; 108  : 	Reset();

	call	?Reset@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::Reset

; 109  : }

	lea	ecx, DWORD PTR [esi+1276]
	mov	BYTE PTR __$EHRec$[esp+32], 5
	call	?_Tidy@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@IAEXXZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::_Tidy
	mov	eax, DWORD PTR [esi+1264]
	xor	ebp, ebp
	cmp	eax, ebp
	je	SHORT $LN17@CvPlayerEs
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN17@CvPlayerEs:
	push	OFFSET ??1?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAE@XZ ; std::vector<HeistLocation,std::allocator<HeistLocation> >::~vector<HeistLocation,std::allocator<HeistLocation> >
	push	22					; 00000016H
	lea	eax, DWORD PTR [esi+908]
	push	16					; 00000010H
	push	eax
	mov	DWORD PTR [esi+1264], ebp
	mov	DWORD PTR [esi+1268], ebp
	mov	DWORD PTR [esi+1272], ebp
	mov	BYTE PTR __$EHRec$[esp+48], 3
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR [esi+716]
	lea	ecx, DWORD PTR [esi+728]
	mov	BYTE PTR __$EHRec$[esp+32], 2
	cmp	eax, ecx
	je	SHORT $LN24@CvPlayerEs
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN24@CvPlayerEs:
	mov	eax, DWORD PTR [esi+264]
	push	ebx
	mov	ebx, DWORD PTR [esi+260]
	push	edi
	lea	edi, DWORD PTR [esi+260]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+48], 1
	call	?Destroy@?$BaseVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0A@@@IAEXPAV?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@I@Z ; BaseVector<FStaticVector<enum TechTypes,1,0,297,0>,0>::Destroy
	add	edi, 12					; 0000000cH
	cmp	ebx, edi
	je	SHORT $LN38@CvPlayerEs
	push	ebx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN38@CvPlayerEs:
	mov	eax, DWORD PTR [esi+244]
	pop	edi
	pop	ebx
	cmp	eax, ebp
	je	SHORT $LN49@CvPlayerEs
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN49@CvPlayerEs:
	mov	DWORD PTR [esi+244], ebp
	mov	DWORD PTR [esi+248], ebp
	mov	DWORD PTR [esi+252], ebp
	mov	eax, DWORD PTR [esi]
	add	esi, 12					; 0000000cH
	cmp	eax, esi
	pop	esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	pop	ebp
	je	SHORT $LN53@CvPlayerEs
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN53@CvPlayerEs:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvEspionageSpy,8,0,297,0>::~FStaticVector<CvEspionageSpy,8,0,297,0>
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	jmp	??1?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::~FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 716				; 000002ccH
	jmp	??1?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,22,0,297,0>::~FStaticVector<int,22,0,297,0>
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 908				; 0000038cH
	jmp	??1?$Array@V?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@$0BG@@Firaxis@@QAE@XZ
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1260				; 000004ecH
	jmp	??1?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::~vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >
__unwindfunclet$??1CvPlayerEspionage@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1276				; 000004fcH
	jmp	??1?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE@XZ ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::~vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
__ehhandler$??1CvPlayerEspionage@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvPlayerEspionage@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvPlayerEspionage@@QAE@XZ ENDP			; CvPlayerEspionage::~CvPlayerEspionage
PUBLIC	?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z	; CvPlayerEspionage::Init
EXTRN	?getNumSpyNames@CvCivilizationInfo@@QBEHXZ:PROC	; CvCivilizationInfo::getNumSpyNames
EXTRN	?isPlayable@CvCivilizationBaseInfo@@QBE_NXZ:PROC ; CvCivilizationBaseInfo::isPlayable
EXTRN	?getCivilizationType@CvPlayer@@QBE?AW4CivilizationTypes@@XZ:PROC ; CvPlayer::getCivilizationType
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
xdata$x	SEGMENT
__unwindtable$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z$1
__ehfuncinfo$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z
_TEXT	SEGMENT
$T258494 = -40						; size = 4
$T258489 = -36						; size = 4
_aTechList$222788 = -32					; size = 20
__$EHRec$ = -12						; size = 12
tv497 = 8						; size = 4
_i$222773 = 8						; size = 4
_pPlayer$ = 8						; size = 4
?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z PROC	; CvPlayerEspionage::Init, COMDAT
; _this$ = ecx

; 113  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	esi, ecx

; 114  : 	Reset();

	call	?Reset@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::Reset

; 115  : 	m_pPlayer = pPlayer;

	mov	ecx, DWORD PTR _pPlayer$[esp+40]
	mov	DWORD PTR [esi+1292], ecx

; 116  : 
; 117  : 	// catching empty players, minor civs, and barbarians
; 118  : 	if(m_pPlayer->getCivilizationType() == NO_CIVILIZATION || !m_pPlayer->getCivilizationInfo().isPlayable())

	call	?getCivilizationType@CvPlayer@@QBE?AW4CivilizationTypes@@XZ ; CvPlayer::getCivilizationType
	cmp	eax, -1
	je	$LN13@Init
	mov	ecx, DWORD PTR [esi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?isPlayable@CvCivilizationBaseInfo@@QBE_NXZ ; CvCivilizationBaseInfo::isPlayable
	test	al, al
	je	$LN13@Init

; 119  : 	{
; 120  : 		return;
; 121  : 	}
; 122  : 
; 123  : 	// create m_aiSpyListNameOrder list
; 124  : 	for(int i = 0; i < m_pPlayer->getCivilizationInfo().getNumSpyNames(); i++)

	mov	ecx, DWORD PTR [esi+1292]
	push	ebx
	push	ebp
	xor	ebp, ebp
	push	edi
	mov	DWORD PTR _i$222773[esp+52], ebp
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getNumSpyNames@CvCivilizationInfo@@QBEHXZ ; CvCivilizationInfo::getNumSpyNames
	lea	ebx, DWORD PTR [ebp+1]
	test	eax, eax
	jle	SHORT $LN10@Init
	lea	edi, DWORD PTR [esi+240]
	npad	6
$LL142@Init:

; 125  : 	{
; 126  : 		m_aiSpyListNameOrder.push_back(i);

	mov	edx, DWORD PTR [edi+4]
	test	edx, edx
	jne	SHORT $LN26@Init
	xor	eax, eax
	jmp	SHORT $LN27@Init
$LN26@Init:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, edx
	sar	eax, 2
$LN27@Init:
	mov	ecx, DWORD PTR [edi+8]
	mov	ebx, ecx
	sub	ebx, edx
	sar	ebx, 2
	cmp	ebx, eax
	mov	ebx, 1
	jae	SHORT $LN19@Init
	mov	DWORD PTR [ecx], ebp
	add	ecx, 4
	mov	DWORD PTR [edi+8], ecx
	jmp	SHORT $LN11@Init
$LN19@Init:
	lea	eax, DWORD PTR _i$222773[esp+52]
	push	eax
	push	ebx
	push	ecx
	mov	ecx, edi
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
$LN11@Init:
	mov	ecx, DWORD PTR [esi+1292]
	add	ebp, ebx
	mov	DWORD PTR _i$222773[esp+52], ebp
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getNumSpyNames@CvCivilizationInfo@@QBEHXZ ; CvCivilizationInfo::getNumSpyNames
	cmp	ebp, eax
	jl	SHORT $LL142@Init
$LN10@Init:

; 127  : 	}
; 128  : 
; 129  : 	for(uint ui = 0; ui < m_aiSpyListNameOrder.size(); ui++)

	mov	ecx, DWORD PTR [esi+248]
	sub	ecx, DWORD PTR [esi+244]
	xor	edi, edi
	sar	ecx, 2
	test	ecx, ecx
	jbe	SHORT $LN7@Init
	npad	1
$LL9@Init:

; 130  : 	{
; 131  : 		uint uiTempValue;
; 132  : 		uint uiTargetSlot = GC.getGame().getJonRandNum(m_aiSpyListNameOrder.size(), "Randomizing m_aiSpyListNameOrder list");

	mov	eax, DWORD PTR [esi+248]
	sub	eax, DWORD PTR [esi+244]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	sar	eax, 2
	push	OFFSET $SG222783
	push	eax
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 133  : 		uiTempValue = m_aiSpyListNameOrder[ui];

	mov	ecx, DWORD PTR [esi+244]
	mov	edx, DWORD PTR [ecx+edi*4]

; 134  : 		m_aiSpyListNameOrder[ui] = m_aiSpyListNameOrder[uiTargetSlot];

	mov	ebp, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [ecx+edi*4], ebp

; 135  : 		m_aiSpyListNameOrder[uiTargetSlot] = uiTempValue;

	mov	ecx, DWORD PTR [esi+244]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	edx, DWORD PTR [esi+248]
	sub	edx, DWORD PTR [esi+244]
	add	edi, ebx
	sar	edx, 2
	cmp	edi, edx
	jb	SHORT $LL9@Init
$LN7@Init:

; 136  : 	}
; 137  : 	m_iSpyListNameOrderIndex = 0;

	xor	ebp, ebp
	lea	edi, DWORD PTR [esi+260]
	mov	DWORD PTR [esi+256], ebp

; 140  : 	{
; 141  : 		TechList aTechList;
; 142  : 		m_aaPlayerStealableTechList.push_back(aTechList);

	mov	DWORD PTR $T258494[esp+56], edi
	mov	DWORD PTR tv497[esp+52], 22		; 00000016H
	npad	9
$LL6@Init:
	lea	eax, DWORD PTR _aTechList$222788[esp+68]
	mov	DWORD PTR _aTechList$222788[esp+60], ebp
	mov	DWORD PTR _aTechList$222788[esp+64], ebx
	mov	DWORD PTR _aTechList$222788[esp+56], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR __$EHRec$[esp+64], ebp
	mov	BYTE PTR [edi+452], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN101@Init
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize
$LN101@Init:
	mov	eax, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T258489[esp+56], ecx
	mov	BYTE PTR __$EHRec$[esp+64], bl
	cmp	ecx, ebp
	je	SHORT $LN104@Init
	lea	eax, DWORD PTR _aTechList$222788[esp+56]
	push	eax
	call	??0?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@ABV0@@Z ; FStaticVector<enum TechTypes,1,0,297,0>::FStaticVector<enum TechTypes,1,0,297,0>
$LN104@Init:

; 143  : 	}

	mov	eax, DWORD PTR _aTechList$222788[esp+56]
	add	DWORD PTR [edi+4], ebx
	lea	ecx, DWORD PTR _aTechList$222788[esp+68]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	cmp	eax, ecx
	je	SHORT $LN5@Init
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN5@Init:

; 138  : 
; 139  : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	sub	DWORD PTR tv497[esp+52], ebx
	jne	SHORT $LL6@Init
	add	esi, 716				; 000002ccH

; 144  : 
; 145  : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	edi, 22					; 00000016H
	npad	3
$LL3@Init:

; 146  : 	{
; 147  : 		m_aiNumTechsToStealList.push_back(0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN123@Init
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN123@Init:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*4]
	cmp	eax, ebp
	je	SHORT $LN126@Init
	mov	DWORD PTR [eax], ebp
$LN126@Init:
	add	DWORD PTR [esi+4], ebx
	sub	edi, ebx
	jne	SHORT $LL3@Init
	pop	edi
	pop	ebp
	pop	ebx
$LN13@Init:

; 148  : 	}
; 149  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+44]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z$0:
	lea	ecx, DWORD PTR _aTechList$222788[ebp]
	jmp	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
__unwindfunclet$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z$1:
	mov	eax, DWORD PTR $T258494[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR $T258494[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR $T258489[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@CvPlayerEspionage@@QAEXPAVCvPlayer@@@Z ENDP	; CvPlayerEspionage::Init
PUBLIC	?Uninit@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::Uninit
; Function compile flags: /Ogtpy
;	COMDAT ?Uninit@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
?Uninit@CvPlayerEspionage@@QAEXXZ PROC			; CvPlayerEspionage::Uninit, COMDAT
; _this$ = ecx

; 154  : 	Reset();

	jmp	?Reset@CvPlayerEspionage@@QAEXXZ	; CvPlayerEspionage::Reset
?Uninit@CvPlayerEspionage@@QAEXXZ ENDP			; CvPlayerEspionage::Uninit
_TEXT	ENDS
PUBLIC	?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildDiplomatCityList
EXTRN	?isRevealed@CvCity@@QBE_NW4TeamTypes@@_N@Z:PROC	; CvCity::isRevealed
EXTRN	?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z:PROC ; CvPlayerCulture::WantsDiplomatDoingPropaganda
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0
__ehfuncinfo$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
_TEXT	SEGMENT
$T258578 = -40						; size = 4
_this$ = -40						; size = 4
_kEntry$226011 = -36					; size = 8
_pCulture$ = -36					; size = 4
_aCityScores$225998 = -28				; size = 16
__$EHRec$ = -12						; size = 12
tv727 = 8						; size = 4
$T258579 = 8						; size = 1
_ui$225688 = 8						; size = 4
_aDiplomatCityList$ = 8					; size = 4
?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z PROC ; CvEspionageAI::BuildDiplomatCityList, COMDAT
; _this$ = ecx

; 4952 : {

	push	-1
	push	__ehhandler$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp

; 4953 : 	aDiplomatCityList.clear();

	mov	ebp, DWORD PTR _aDiplomatCityList$[esp+44]
	mov	edx, DWORD PTR [ebp+4]
	mov	ebx, ecx
	mov	ecx, DWORD PTR [ebp+8]
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+56], ebx
	cmp	edx, ecx
	je	SHORT $LN290@BuildDiplo
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	lea	esi, DWORD PTR [eax*4]
	lea	edi, DWORD PTR [esi+edx]
	test	eax, eax
	jle	SHORT $LN60@BuildDiplo
	push	esi
	push	ecx
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN60@BuildDiplo:
	mov	DWORD PTR [ebp+8], edi
$LN290@BuildDiplo:

; 4954 : 	CvPlayerCulture* pCulture = m_pPlayer->GetCulture();

	mov	ecx, DWORD PTR [ebx]
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture

; 4955 : 	CvDiplomacyAI* pDiploAI = m_pPlayer->GetDiplomacyAI();

	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _pCulture$[esp+56], eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI

; 4956 : 
; 4957 : 	if (pDiploAI->IsGoingForCultureVictory())

	mov	ecx, eax
	call	?IsGoingForCultureVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForCultureVictory
	test	al, al
	je	$LN17@BuildDiplo

; 4958 : 	{
; 4959 : 		for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	xor	edi, edi
	mov	DWORD PTR _ui$225688[esp+52], edi
	npad	4
$LL292@BuildDiplo:

; 4960 : 		{
; 4961 : 			PlayerTypes eTargetPlayer = (PlayerTypes)ui;
; 4962 : 			if (pCulture->WantsDiplomatDoingPropaganda(eTargetPlayer))

	mov	eax, DWORD PTR _ui$225688[esp+52]
	mov	ecx, DWORD PTR _pCulture$[esp+56]
	push	eax
	call	?WantsDiplomatDoingPropaganda@CvPlayerCulture@@QBE_NW4PlayerTypes@@@Z ; CvPlayerCulture::WantsDiplomatDoingPropaganda
	test	al, al
	je	SHORT $LN15@BuildDiplo

; 4963 : 			{
; 4964 : 				aDiplomatCityList.push_back(GET_PLAYER(eTargetPlayer).getCapitalCity());

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, edi
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	ecx, DWORD PTR [ebp+4]
	mov	DWORD PTR $T258578[esp+56], eax
	test	ecx, ecx
	jne	SHORT $LN73@BuildDiplo
	xor	edx, edx
	jmp	SHORT $LN74@BuildDiplo
$LN73@BuildDiplo:
	mov	edx, DWORD PTR [ebp+12]
	sub	edx, ecx
	sar	edx, 2
$LN74@BuildDiplo:
	mov	esi, DWORD PTR [ebp+8]
	mov	ebx, esi
	sub	ebx, ecx
	sar	ebx, 2
	cmp	ebx, edx
	jae	SHORT $LN66@BuildDiplo
	mov	DWORD PTR [esi], eax
	add	esi, 4
	mov	DWORD PTR [ebp+8], esi
	jmp	SHORT $LN15@BuildDiplo
$LN66@BuildDiplo:
	lea	edx, DWORD PTR $T258578[esp+56]
	push	edx
	push	1
	push	esi
	mov	ecx, ebp
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
$LN15@BuildDiplo:
	inc	DWORD PTR _ui$225688[esp+52]
	add	edi, 63236				; 0000f704H
	cmp	edi, 1391192				; 00153a58H
	jb	SHORT $LL292@BuildDiplo
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5013 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	4
$LN17@BuildDiplo:

; 4965 : 			}
; 4966 : 		}
; 4967 : 	}
; 4968 : 	else // Going for diplo victory and others
; 4969 : 	{
; 4970 : 		std::vector<ScoreCityEntry> aCityScores;

	xor	ebx, ebx
	mov	DWORD PTR _aCityScores$225998[esp+60], ebx
	mov	DWORD PTR _aCityScores$225998[esp+64], ebx
	mov	DWORD PTR _aCityScores$225998[esp+68], ebx
	mov	DWORD PTR __$EHRec$[esp+64], ebx
	xor	edi, edi
	npad	8
$LL11@BuildDiplo:

; 4971 : 		for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)
; 4972 : 		{
; 4973 : 			PlayerTypes eTargetPlayer = (PlayerTypes)ui;
; 4974 : 
; 4975 : 			// don't count the player's own cities
; 4976 : 			if(eTargetPlayer == m_pPlayer->GetID() || !GET_PLAYER(eTargetPlayer).isAlive())

	mov	eax, DWORD PTR _this$[esp+56]
	mov	ecx, DWORD PTR [eax]
	cmp	ebx, DWORD PTR [ecx+44]
	je	$LN10@BuildDiplo
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	cmp	BYTE PTR [edi+edx+2256], 0
	je	SHORT $LN10@BuildDiplo

; 4977 : 			{
; 4978 : 				continue;
; 4979 : 			}
; 4980 : 
; 4981 : 			if (m_pPlayer->GetLeagueAI()->GetDiplomatUsefulnessAtCiv(eTargetPlayer) == CvLeagueAI::DIPLOMAT_USEFULNESS_NONE)

	push	ebx
	call	?GetLeagueAI@CvPlayer@@QBEPAVCvLeagueAI@@XZ ; CvPlayer::GetLeagueAI
	mov	ecx, eax
	call	?GetDiplomatUsefulnessAtCiv@CvLeagueAI@@QAE?AW4DiplomatUsefulnessLevels@1@W4PlayerTypes@@@Z ; CvLeagueAI::GetDiplomatUsefulnessAtCiv
	test	eax, eax
	je	SHORT $LN10@BuildDiplo

; 4982 : 			{
; 4983 : 				continue;
; 4984 : 			}
; 4985 : 
; 4986 : 			CvCity* pCapitalCity = GET_PLAYER(eTargetPlayer).getCapitalCity();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [edi+eax]
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	esi, eax

; 4987 : 			if (!pCapitalCity)

	test	esi, esi
	je	SHORT $LN10@BuildDiplo

; 4988 : 			{
; 4989 : 				continue;
; 4990 : 			}
; 4991 : 
; 4992 : 			// if we can't see it, we can't move a diplomat there.
; 4993 : 			if (!pCapitalCity->isRevealed(m_pPlayer->getTeam(), false))

	mov	ecx, DWORD PTR _this$[esp+56]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN179@BuildDiplo
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN180@BuildDiplo
$LN179@BuildDiplo:
	or	eax, -1
$LN180@BuildDiplo:
	push	0
	push	eax
	mov	ecx, esi
	call	?isRevealed@CvCity@@QBE_NW4TeamTypes@@_N@Z ; CvCity::isRevealed
	test	al, al
	je	SHORT $LN10@BuildDiplo

; 4994 : 			{
; 4995 : 				continue;
; 4996 : 			}
; 4997 : 
; 4998 : 			ScoreCityEntry kEntry;
; 4999 : 			kEntry.m_pCity = pCapitalCity;
; 5000 : 			kEntry.m_iScore = m_pPlayer->GetLeagueAI()->GetDiplomatUsefulnessAtCiv(eTargetPlayer);

	mov	eax, DWORD PTR _this$[esp+56]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	mov	DWORD PTR _kEntry$226011[esp+60], esi
	call	?GetLeagueAI@CvPlayer@@QBEPAVCvLeagueAI@@XZ ; CvPlayer::GetLeagueAI
	mov	ecx, eax
	call	?GetDiplomatUsefulnessAtCiv@CvLeagueAI@@QAE?AW4DiplomatUsefulnessLevels@1@W4PlayerTypes@@@Z ; CvLeagueAI::GetDiplomatUsefulnessAtCiv

; 5001 : 			aCityScores.push_back(kEntry);

	lea	ecx, DWORD PTR _kEntry$226011[esp+56]
	push	ecx
	lea	ecx, DWORD PTR _aCityScores$225998[esp+60]
	mov	DWORD PTR _kEntry$226011[esp+64], eax
	call	?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back
$LN10@BuildDiplo:
	add	edi, 63236				; 0000f704H
	inc	ebx
	cmp	edi, 1391192				; 00153a58H
	jb	$LL11@BuildDiplo

; 5002 : 		}
; 5003 : 
; 5004 : 		// sort
; 5005 : 		std::stable_sort(aCityScores.begin(), aCityScores.end(), ScoreCityEntryHighEval());

	mov	ebx, DWORD PTR _aCityScores$225998[esp+60]
	mov	esi, DWORD PTR _aCityScores$225998[esp+64]
	mov	BYTE PTR $T258579[esp+52], 0
	cmp	ebx, esi
	je	SHORT $LN291@BuildDiplo
	mov	edx, DWORD PTR $T258579[esp+52]
	push	edx
	push	0
	push	0
	push	esi
	push	ebx
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H
$LN291@BuildDiplo:

; 5006 : 
; 5007 : 		// transfer values to OffenseCityList
; 5008 : 		for(uint ui = 0; ui < aCityScores.size(); ui++)

	sub	esi, ebx
	sar	esi, 3
	test	esi, esi
	jbe	SHORT $LN1@BuildDiplo
	mov	edi, ebx
	mov	DWORD PTR tv727[esp+52], esi
	npad	1
$LL3@BuildDiplo:

; 5009 : 		{
; 5010 : 			aDiplomatCityList.push_back(aCityScores[ui].m_pCity);

	mov	edx, DWORD PTR [ebp+4]
	test	edx, edx
	jne	SHORT $LN219@BuildDiplo
	xor	ecx, ecx
	jmp	SHORT $LN220@BuildDiplo
$LN219@BuildDiplo:
	mov	ecx, DWORD PTR [ebp+12]
	sub	ecx, edx
	sar	ecx, 2
$LN220@BuildDiplo:
	mov	eax, DWORD PTR [ebp+8]
	mov	esi, eax
	sub	esi, edx
	sar	esi, 2
	cmp	esi, ecx
	jae	SHORT $LN212@BuildDiplo
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
	add	eax, 4
	mov	DWORD PTR [ebp+8], eax
	jmp	SHORT $LN2@BuildDiplo
$LN212@BuildDiplo:
	push	edi
	push	1
	push	eax
	mov	ecx, ebp
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
$LN2@BuildDiplo:
	add	edi, 8
	sub	DWORD PTR tv727[esp+52], 1
	jne	SHORT $LL3@BuildDiplo
$LN1@BuildDiplo:

; 5011 : 		}
; 5012 : 	}

	test	ebx, ebx
	je	SHORT $LN277@BuildDiplo
	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN277@BuildDiplo:

; 5013 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+56]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aCityScores$225998[ebp]
	jmp	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
__ehhandler$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ENDP ; CvEspionageAI::BuildDiplomatCityList
PUBLIC	?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildOffenseCityList
EXTRN	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC ; CvTeam::IsAllowsOpenBordersToTeam
EXTRN	?IsHasDefensivePact@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC ; CvTeam::IsHasDefensivePact
EXTRN	?IsHasResearchAgreement@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC ; CvTeam::IsHasResearchAgreement
EXTRN	?IsDenouncedPlayer@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::IsDenouncedPlayer
EXTRN	?IsPlayerStopSpyingRequestAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::IsPlayerStopSpyingRequestAccepted
EXTRN	?GetWarGoal@CvDiplomacyAI@@QBE?AW4WarGoalTypes@@W4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetWarGoal
EXTRN	?getPopulation@CvCity@@QBEHXZ:PROC		; CvCity::getPopulation
EXTRN	?getNumTechInfos@CvGlobals@@QAEHXZ:PROC		; CvGlobals::getNumTechInfos
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0
__ehfuncinfo$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
_TEXT	SEGMENT
_ui$226201 = -96					; size = 4
$T260144 = -92						; size = 4
tv1601 = -88						; size = 4
_iMaxTechCost$ = -84					; size = 4
_pDiploAI$ = -80					; size = 4
_ePlayer$ = -76						; size = 4
$T259979 = -72						; size = 4
_this$ = -68						; size = 4
tv1550 = -64						; size = 4
_pEspionage$ = -60					; size = 4
_iLoop$ = -56						; size = 4
tv1137 = -52						; size = 4
_pTargetDiploAI$226209 = -48				; size = 4
tv1611 = -44						; size = 4
$T259737 = -40						; size = 1
$T260469 = -40						; size = 1
_kEntry$226243 = -36					; size = 8
_aCityScores$ = -28					; size = 16
__$EHRec$ = -12						; size = 12
__Cat$260472 = 8					; size = 1
_aOffenseCityList$ = 8					; size = 4
?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z PROC ; CvEspionageAI::BuildOffenseCityList, COMDAT
; _this$ = ecx

; 5016 : {

	push	-1
	push	__ehhandler$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	ebp
	mov	ebp, ecx

; 5017 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ebp]
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+112], ebp
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ebx, eax

; 5018 : 
; 5019 : 	aOffenseCityList.clear();

	mov	eax, DWORD PTR _aOffenseCityList$[esp+108]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _pEspionage$[esp+112], ebx
	cmp	edx, ecx
	je	SHORT $LN383@BuildOffen
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	lea	esi, DWORD PTR [eax*4]
	lea	edi, DWORD PTR [edx+esi]
	test	eax, eax
	jle	SHORT $LN85@BuildOffen
	push	esi
	push	ecx
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN85@BuildOffen:
	mov	eax, DWORD PTR _aOffenseCityList$[esp+108]
	mov	DWORD PTR [eax+8], edi
$LN383@BuildOffen:

; 5020 : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	ecx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [ecx+44]

; 5021 : 	TeamTypes eTeam = GET_PLAYER(ePlayer).getTeam();

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _ePlayer$[esp+112], eax
	imul	eax, 63236				; 0000f704H
	mov	DWORD PTR tv1137[esp+112], eax
	mov	eax, DWORD PTR [eax+edx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN98@BuildOffen
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T259979[esp+112], eax
	jmp	SHORT $LN99@BuildOffen
$LN98@BuildOffen:
	mov	DWORD PTR $T259979[esp+112], -1
$LN99@BuildOffen:

; 5022 : 	CvDiplomacyAI* pDiploAI = m_pPlayer->GetDiplomacyAI();

	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI

; 5023 : 
; 5024 : 	// find the most expensive available research
; 5025 : 	int iMaxTechCost = -1;
; 5026 : 	CvPlayerTechs* pMyPlayerTechs = m_pPlayer->GetPlayerTechs();

	mov	ecx, DWORD PTR [ebp]
	mov	DWORD PTR _pDiploAI$[esp+112], eax
	mov	DWORD PTR _iMaxTechCost$[esp+112], -1
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs

; 5027 : 
; 5028 : #ifdef AUI_WARNING_FIXES
; 5029 : 	for (uint iTechLoop = 0; iTechLoop < GC.getNumTechInfos(); iTechLoop++)
; 5030 : #else
; 5031 : 	for(int iTechLoop = 0; iTechLoop < GC.getNumTechInfos(); iTechLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	edi, eax
	xor	esi, esi
	call	?getNumTechInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTechInfos
	test	eax, eax
	jle	SHORT $LN40@BuildOffen
	npad	1
$LL42@BuildOffen:

; 5032 : #endif
; 5033 : 	{
; 5034 : 		const TechTypes eTech = static_cast<TechTypes>(iTechLoop);
; 5035 : 		CvTechEntry* pkTechInfo = GC.getTechInfo(eTech);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ; CvGlobals::getTechInfo

; 5036 : 		if(!pkTechInfo)

	test	eax, eax
	je	SHORT $LN41@BuildOffen

; 5037 : 		{
; 5038 : 			continue;
; 5039 : 		}
; 5040 : 
; 5041 : 		// try to find the most expensive tech that can be researched
; 5042 : 		if(pMyPlayerTechs->CanResearch(eTech))

	push	0
	push	esi
	mov	ecx, edi
	call	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z ; CvPlayerTechs::CanResearch
	test	al, al
	je	SHORT $LN41@BuildOffen

; 5043 : 		{
; 5044 : 			int iTechCost = m_pPlayer->GetPlayerTechs()->GetResearchCost(eTech) * 100;

	mov	ecx, DWORD PTR [ebp]
	push	esi
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetResearchCost@CvPlayerTechs@@QBEHW4TechTypes@@@Z ; CvPlayerTechs::GetResearchCost
	imul	eax, 100				; 00000064H

; 5045 : 			if(iTechCost > iMaxTechCost)

	cmp	eax, DWORD PTR _iMaxTechCost$[esp+112]
	jle	SHORT $LN41@BuildOffen

; 5046 : 			{
; 5047 : 				iMaxTechCost = iTechCost;

	mov	DWORD PTR _iMaxTechCost$[esp+112], eax
$LN41@BuildOffen:

; 5027 : 
; 5028 : #ifdef AUI_WARNING_FIXES
; 5029 : 	for (uint iTechLoop = 0; iTechLoop < GC.getNumTechInfos(); iTechLoop++)
; 5030 : #else
; 5031 : 	for(int iTechLoop = 0; iTechLoop < GC.getNumTechInfos(); iTechLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumTechInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumTechInfos
	cmp	esi, eax
	jl	SHORT $LL42@BuildOffen
$LN40@BuildOffen:

; 5048 : 			}
; 5049 : 		}
; 5050 : 	}
; 5051 : 
; 5052 : 	std::vector<ScoreCityEntry> aCityScores;

	xor	ebp, ebp
	xor	edi, edi
	mov	DWORD PTR _aCityScores$[esp+116], ebp
	mov	DWORD PTR _aCityScores$[esp+120], edi
	mov	DWORD PTR _aCityScores$[esp+124], ebp
	xor	esi, esi
	mov	eax, -820				; fffffcccH
	lea	ecx, DWORD PTR [ebx+820]
	sub	eax, ebx
	mov	DWORD PTR __$EHRec$[esp+120], ebp

; 5053 : 	CvCity* pLoopCity = NULL;
; 5054 : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[esp+112], ebp

; 5055 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	mov	DWORD PTR _ui$226201[esp+112], ebp
	mov	DWORD PTR tv1550[esp+112], esi
	mov	DWORD PTR tv1601[esp+112], ecx
	mov	DWORD PTR tv1611[esp+112], eax
	jmp	SHORT $LN36@BuildOffen
$LL388@BuildOffen:

; 5048 : 			}
; 5049 : 		}
; 5050 : 	}
; 5051 : 
; 5052 : 	std::vector<ScoreCityEntry> aCityScores;

	xor	ebp, ebp
$LN36@BuildOffen:

; 5056 : 	{
; 5057 : 		PlayerTypes eTargetPlayer = (PlayerTypes)ui;
; 5058 : 
; 5059 : 		// don't count the player's own cities
; 5060 : 		if(eTargetPlayer == ePlayer)

	mov	edx, DWORD PTR _ui$226201[esp+112]
	cmp	edx, DWORD PTR _ePlayer$[esp+112]
	je	$LN35@BuildOffen

; 5061 : 		{
; 5062 : 			continue;
; 5063 : 		}
; 5064 : 
; 5065 : 		TeamTypes eTargetTeam = GET_PLAYER(eTargetPlayer).getTeam();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+eax]
	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN146@BuildOffen
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T260144[esp+112], eax
	jmp	SHORT $LN147@BuildOffen
$LN146@BuildOffen:
	mov	DWORD PTR $T260144[esp+112], -1
$LN147@BuildOffen:

; 5066 : 		CvDiplomacyAI* pTargetDiploAI = GET_PLAYER(eTargetPlayer).GetDiplomacyAI();

	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI

; 5067 : 
; 5068 : 		for(pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ebp
	lea	edx, DWORD PTR _iLoop$[esp+116]
	add	ecx, esi
	push	edx
	mov	DWORD PTR _pTargetDiploAI$226209[esp+120], eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	ebp, eax
	test	ebp, ebp
	je	$LN35@BuildOffen
$LL389@BuildOffen:

; 5069 : 		{
; 5070 : 			CvPlot* pCityPlot = pLoopCity->plot();

	mov	ecx, ebp
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot

; 5071 : 			CvAssertMsg(pCityPlot, "City plot is null!");
; 5072 : 			if(!pCityPlot)

	test	eax, eax
	je	$LN31@BuildOffen

; 5073 : 			{
; 5074 : 				continue;
; 5075 : 			}
; 5076 : 
; 5077 : 			if(!pCityPlot->isRevealed(GET_PLAYER(ePlayer).getTeam()))

	mov	ecx, DWORD PTR tv1137[esp+112]
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, DWORD PTR [ecx+edx+44]
	cmp	ecx, 63					; 0000003fH
	ja	SHORT $LN163@BuildOffen
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN164@BuildOffen
$LN163@BuildOffen:
	or	ecx, -1
$LN164@BuildOffen:
	mov	edx, ecx
	shr	edx, 5
	mov	edi, edx
	shl	edi, 5
	sub	ecx, edi
	mov	edi, 1
	shl	edi, cl
	test	edi, DWORD PTR [eax+edx*4+8]
	je	$LN31@BuildOffen

; 5078 : 			{
; 5079 : 				continue;
; 5080 : 			}
; 5081 : 
; 5082 : 			CvCityEspionage* pCityEspionage = pLoopCity->GetCityEspionage();

	mov	ecx, ebp
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	esi, eax

; 5083 : 
; 5084 : 			int iNumRemainingTurns = MAX_INT;

	mov	ebx, 2147483647				; 7fffffffH

; 5085 : 			int iSpyIndex = pEspionage->GetSpyIndexInCity(pLoopCity);

	test	ebp, ebp
	je	SHORT $LN384@BuildOffen
	mov	eax, DWORD PTR _pEspionage$[esp+112]
	mov	ecx, DWORD PTR [eax+1292]
	mov	edi, DWORD PTR [ecx+44]
	mov	ecx, ebp
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	mov	eax, DWORD PTR [eax+edi*4]

; 5086 : 			// if there is a spy currently stealing there, use the actual data
; 5087 : 			if(iSpyIndex >= 0 && pEspionage->m_aSpyList[iSpyIndex].m_eSpyState == SPY_STATE_GATHERING_INTEL)

	test	eax, eax
	jl	SHORT $LN384@BuildOffen
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR _pEspionage$[esp+112]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+edx*4+16], 3
	jne	SHORT $LN384@BuildOffen

; 5088 : 			{
; 5089 : 				if(pCityEspionage->m_aiRate[ePlayer] != 0)

	mov	edx, DWORD PTR _ePlayer$[esp+112]
	mov	ecx, DWORD PTR [esi+edx*4+180]
	test	ecx, ecx
	je	SHORT $LN385@BuildOffen

; 5090 : 				{
; 5091 : 					iNumRemainingTurns = (pCityEspionage->m_aiGoal[ePlayer] - pCityEspionage->m_aiAmount[ePlayer]) / pCityEspionage->m_aiRate[ePlayer];

	mov	eax, DWORD PTR [esi+edx*4+268]
	sub	eax, DWORD PTR [esi+edx*4+92]

; 5092 : 				}
; 5093 : 			}

	jmp	SHORT $LN392@BuildOffen
$LN384@BuildOffen:

; 5094 : 			// if we have any history with the city, use that data instead
; 5095 : 			else if(pCityEspionage->m_aiLastBasePotential[m_pPlayer->GetID()] > 0)

	mov	edx, DWORD PTR _this$[esp+112]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	mov	esi, DWORD PTR [esi+ecx*4+532]
	test	esi, esi
	jle	SHORT $LN24@BuildOffen

; 5096 : 			{
; 5097 : 				int iCost = iMaxTechCost;
; 5098 : 				if(pEspionage->m_aiMaxTechCost[eTargetPlayer] > 0)

	mov	edx, DWORD PTR tv1601[esp+112]
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _iMaxTechCost$[esp+112]
	test	ecx, ecx
	jle	SHORT $LN23@BuildOffen

; 5099 : 				{
; 5100 : 					iCost = pEspionage->m_aiMaxTechCost[eTargetPlayer];

	mov	eax, ecx
$LN23@BuildOffen:

; 5101 : 				}
; 5102 : 
; 5103 : 				iNumRemainingTurns = iCost / pCityEspionage->m_aiLastBasePotential[m_pPlayer->GetID()];

	cdq
	idiv	esi

; 5104 : 			}
; 5105 : 			// estimate the number of turns using the population
; 5106 : 			else

	jmp	SHORT $LN393@BuildOffen
$LN24@BuildOffen:

; 5107 : 			{
; 5108 : 				int iCost = iMaxTechCost;
; 5109 : 				if(pEspionage->m_aiMaxTechCost[eTargetPlayer] > 0)

	mov	eax, DWORD PTR tv1601[esp+112]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR _iMaxTechCost$[esp+112]
	test	eax, eax
	jle	SHORT $LN21@BuildOffen

; 5110 : 				{
; 5111 : 					iCost = pEspionage->m_aiMaxTechCost[eTargetPlayer];

	mov	esi, eax
$LN21@BuildOffen:

; 5112 : 				}
; 5113 : 				if(pLoopCity->getPopulation() > 0)

	mov	ecx, ebp
	call	?getPopulation@CvCity@@QBEHXZ		; CvCity::getPopulation
	test	eax, eax
	jle	SHORT $LN385@BuildOffen

; 5114 : 				{
; 5115 : 					iNumRemainingTurns = iCost / (pLoopCity->getPopulation() * 100);

	mov	ecx, ebp
	call	?getPopulation@CvCity@@QBEHXZ		; CvCity::getPopulation
	mov	ecx, eax
	imul	ecx, 100				; 00000064H
	mov	eax, esi
$LN392@BuildOffen:
	cdq
	idiv	ecx
$LN393@BuildOffen:
	mov	ebx, eax
$LN385@BuildOffen:

; 5116 : 				}
; 5117 : 			}
; 5118 : 
; 5119 : 			int iDiploModifier = 1;
; 5120 : 			if (pDiploAI->GetWarGoal(eTargetPlayer) == WAR_GOAL_PREPARE)

	mov	edx, DWORD PTR _ui$226201[esp+112]
	mov	ecx, DWORD PTR _pDiploAI$[esp+112]
	push	edx
	call	?GetWarGoal@CvDiplomacyAI@@QBE?AW4WarGoalTypes@@W4PlayerTypes@@@Z ; CvDiplomacyAI::GetWarGoal
	cmp	eax, 1
	jne	SHORT $LN19@BuildOffen

; 5121 : 			{
; 5122 : 				iDiploModifier = 1;

	mov	esi, eax
	jmp	$LN386@BuildOffen
$LN19@BuildOffen:

; 5123 : 			}
; 5124 : 			else if (GET_TEAM(eTeam).isAtWar(eTargetTeam))

	mov	edi, DWORD PTR $T259979[esp+112]
	mov	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	imul	edi, 2980				; 00000ba4H
	mov	edx, DWORD PTR $T260144[esp+112]
	lea	ecx, DWORD PTR [edi+eax]
	push	edx
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	je	SHORT $LN17@BuildOffen

; 5125 : 			{
; 5126 : 				// ignore promises
; 5127 : 				// bonus targeting!
; 5128 : 				iDiploModifier = 1;

	mov	esi, 1

; 5129 : 			}
; 5130 : 			else // we're not at war with them, so look at other factors

	jmp	$LN386@BuildOffen
$LN17@BuildOffen:

; 5131 : 			{
; 5132 : 				// raise our diplo modifier by a scale of 10 so that we're less likely to target those we aren't at war with
; 5133 : 				iDiploModifier = 10;
; 5134 : 				// if we promised not to spy, make it less likely that we will spy
; 5135 : 				if (pDiploAI->IsPlayerStopSpyingRequestAccepted(eTargetPlayer))

	mov	eax, DWORD PTR _ui$226201[esp+112]
	mov	ecx, DWORD PTR _pDiploAI$[esp+112]
	push	eax
	mov	esi, 10					; 0000000aH
	call	?IsPlayerStopSpyingRequestAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsPlayerStopSpyingRequestAccepted
	test	al, al
	je	SHORT $LN15@BuildOffen

; 5136 : 				{
; 5137 : 					// target far less frequently
; 5138 : 					iDiploModifier *= 100;

	mov	esi, 1000				; 000003e8H
$LN15@BuildOffen:

; 5139 : 				}
; 5140 : 
; 5141 : 				// if we've denounced them or they've denounced us, spy bonus!
; 5142 : 				if (pDiploAI->IsDenouncedPlayer(eTargetPlayer) || pTargetDiploAI->IsDenouncedPlayer(ePlayer))

	mov	ecx, DWORD PTR _ui$226201[esp+112]
	push	ecx
	mov	ecx, DWORD PTR _pDiploAI$[esp+116]
	call	?IsDenouncedPlayer@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsDenouncedPlayer
	test	al, al
	jne	SHORT $LN13@BuildOffen
	mov	edx, DWORD PTR _ePlayer$[esp+112]
	mov	ecx, DWORD PTR _pTargetDiploAI$226209[esp+112]
	push	edx
	call	?IsDenouncedPlayer@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsDenouncedPlayer
	test	al, al
	jne	SHORT $LN13@BuildOffen

; 5145 : 				}
; 5146 : 				else if (pDiploAI->IsDoFAccepted(eTargetPlayer))

	mov	eax, DWORD PTR _ui$226201[esp+112]
	mov	ecx, DWORD PTR _pDiploAI$[esp+112]
	push	eax
	call	?IsDoFAccepted@CvDiplomacyAI@@QBE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsDoFAccepted
	test	al, al
	je	SHORT $LN11@BuildOffen

; 5147 : 				{
; 5148 : 					iDiploModifier *= 50;

	imul	esi, 50					; 00000032H
	jmp	SHORT $LN11@BuildOffen
$LN13@BuildOffen:

; 5143 : 				{
; 5144 : 					iDiploModifier /= 2;

	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
$LN11@BuildOffen:

; 5149 : 				}
; 5150 : 
; 5151 : 				if (GET_TEAM(eTeam).IsHasResearchAgreement(eTargetTeam))

	mov	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	edx, DWORD PTR $T260144[esp+112]
	add	ecx, edi
	push	edx
	call	?IsHasResearchAgreement@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsHasResearchAgreement
	test	al, al
	je	SHORT $LN10@BuildOffen

; 5152 : 				{
; 5153 : 					iDiploModifier *= 5;

	lea	esi, DWORD PTR [esi+esi*4]
$LN10@BuildOffen:

; 5154 : 				}
; 5155 : 
; 5156 : 				if (GET_TEAM(eTeam).IsHasDefensivePact(eTargetTeam))

	mov	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	edx, DWORD PTR $T260144[esp+112]
	lea	ecx, DWORD PTR [edi+eax]
	push	edx
	call	?IsHasDefensivePact@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsHasDefensivePact
	test	al, al
	je	SHORT $LN9@BuildOffen

; 5157 : 				{
; 5158 : 					iDiploModifier *= 50;

	imul	esi, 50					; 00000032H
$LN9@BuildOffen:

; 5159 : 				}
; 5160 : 
; 5161 : 				if (GET_TEAM(eTeam).IsAllowsOpenBordersToTeam(eTargetTeam))

	mov	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	lea	ecx, DWORD PTR [edi+eax]
	mov	edi, DWORD PTR $T260144[esp+112]
	push	edi
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	test	al, al
	je	SHORT $LN8@BuildOffen

; 5162 : 				{
; 5163 : 					iDiploModifier *= 2;

	add	esi, esi
$LN8@BuildOffen:

; 5164 : 				}
; 5165 : 
; 5166 : 				if (GET_TEAM(eTargetTeam).IsAllowsOpenBordersToTeam(eTeam))

	mov	edx, DWORD PTR $T259979[esp+112]
	mov	ecx, edi
	imul	ecx, 2980				; 00000ba4H
	add	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	edx
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	test	al, al
	je	SHORT $LN386@BuildOffen

; 5167 : 				{
; 5168 : 					iDiploModifier *= 2;

	add	esi, esi
$LN386@BuildOffen:

; 5169 : 				}
; 5170 : 			}
; 5171 : 
; 5172 : 			ScoreCityEntry kEntry;
; 5173 : 			kEntry.m_pCity = pLoopCity;
; 5174 : 
; 5175 : 			int iScore = iNumRemainingTurns * iDiploModifier;
; 5176 : 			if (m_aiCivOutOfTechTurn[eTargetPlayer] == GC.getGame().getGameTurn())

	mov	eax, DWORD PTR tv1611[esp+112]
	imul	esi, ebx
	mov	ecx, DWORD PTR tv1601[esp+112]
	mov	edx, DWORD PTR _this$[esp+112]
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR _kEntry$226243[esp+112], ebp
	lea	ebp, DWORD PTR [eax+ecx]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	add	edi, ebp
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	cmp	DWORD PTR [edi], eax
	jne	SHORT $LN6@BuildOffen

; 5177 : 			{
; 5178 : 				iScore = MAX_INT;

	mov	esi, 2147483647				; 7fffffffH
	jmp	SHORT $LN4@BuildOffen
$LN6@BuildOffen:

; 5179 : 			}
; 5180 : 			else if(m_aiCivOutOfTechTurn[eTargetPlayer] > 0)

	mov	eax, DWORD PTR _this$[esp+112]
	mov	ecx, DWORD PTR [eax+4]
	mov	ebp, DWORD PTR [ecx+ebp]
	test	ebp, ebp
	jle	SHORT $LN4@BuildOffen

; 5181 : 			{
; 5182 : 				iScore = iScore * m_aiCivOutOfTechTurn[eTargetPlayer];

	imul	ebp, esi
	mov	esi, ebp
$LN4@BuildOffen:

; 5183 : 			}
; 5184 : 
; 5185 : 			kEntry.m_iScore = iScore;
; 5186 : 
; 5187 : 			aCityScores.push_back(kEntry);

	mov	ecx, DWORD PTR _aCityScores$[esp+116]
	mov	DWORD PTR _kEntry$226243[esp+116], esi
	test	ecx, ecx
	jne	SHORT $LN237@BuildOffen
	xor	eax, eax
	jmp	SHORT $LN238@BuildOffen
$LN237@BuildOffen:
	mov	eax, DWORD PTR _aCityScores$[esp+124]
	sub	eax, ecx
	sar	eax, 3
$LN238@BuildOffen:
	mov	esi, DWORD PTR _aCityScores$[esp+120]
	mov	edx, esi
	sub	edx, ecx
	sar	edx, 3
	cmp	edx, eax
	jae	SHORT $LN230@BuildOffen
	mov	ecx, DWORD PTR __Cat$260472[esp+108]
	mov	BYTE PTR $T260469[esp+112], 0
	mov	eax, DWORD PTR $T260469[esp+112]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _aCityScores$[esp+120]
	push	edx
	lea	eax, DWORD PTR _kEntry$226243[esp+124]
	push	eax
	push	1
	push	esi
	call	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H
	add	esi, 8
	mov	DWORD PTR _aCityScores$[esp+120], esi
	jmp	SHORT $LN394@BuildOffen
$LN230@BuildOffen:
	lea	ecx, DWORD PTR _kEntry$226243[esp+112]
	push	ecx
	push	1
	push	esi
	lea	ecx, DWORD PTR _aCityScores$[esp+124]
	call	?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n
$LN394@BuildOffen:
	mov	esi, DWORD PTR tv1550[esp+112]
$LN31@BuildOffen:

; 5067 : 
; 5068 : 		for(pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	lea	eax, DWORD PTR _iLoop$[esp+116]
	lea	ecx, DWORD PTR [esi+edx]
	push	eax
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	ebp, eax
	test	ebp, ebp
	jne	$LL389@BuildOffen
	mov	edi, DWORD PTR _aCityScores$[esp+120]
$LN35@BuildOffen:

; 5055 : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	inc	DWORD PTR _ui$226201[esp+112]
	add	DWORD PTR tv1601[esp+112], 4
	add	esi, 63236				; 0000f704H
	mov	DWORD PTR tv1550[esp+112], esi
	cmp	esi, 1391192				; 00153a58H
	jb	$LL388@BuildOffen

; 5188 : 		}
; 5189 : 	}
; 5190 : 
; 5191 : 	// sort
; 5192 : 	std::stable_sort(aCityScores.begin(), aCityScores.end(), ScoreCityEntryLowEval());

	mov	esi, DWORD PTR _aCityScores$[esp+116]
	mov	BYTE PTR $T259737[esp+112], 0
	cmp	esi, edi
	je	SHORT $LN390@BuildOffen
	mov	ecx, DWORD PTR $T259737[esp+112]
	push	ecx
	push	0
	push	0
	push	edi
	push	esi
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryLowEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryLowEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryLowEval>
	add	esp, 20					; 00000014H
$LN390@BuildOffen:

; 5193 : 
; 5194 : 	// transfer values to OffenseCityList
; 5195 : 	for(uint ui = 0; ui < aCityScores.size(); ui++)

	sub	edi, esi
	mov	eax, edi
	sar	eax, 3
	test	eax, eax
	jbe	SHORT $LN1@BuildOffen
	mov	edi, eax
$LL3@BuildOffen:

; 5196 : 	{
; 5197 : 		aOffenseCityList.push_back(aCityScores[ui].m_pCity);

	mov	ebx, DWORD PTR _aOffenseCityList$[esp+108]
	mov	edx, DWORD PTR [ebx+4]
	test	edx, edx
	jne	SHORT $LN312@BuildOffen
	xor	ecx, ecx
	jmp	SHORT $LN313@BuildOffen
$LN312@BuildOffen:
	mov	ecx, DWORD PTR [ebx+12]
	sub	ecx, edx
	sar	ecx, 2
$LN313@BuildOffen:
	mov	eax, DWORD PTR [ebx+8]
	mov	ebp, eax
	sub	ebp, edx
	sar	ebp, 2
	cmp	ebp, ecx
	jae	SHORT $LN305@BuildOffen
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	add	eax, 4
	mov	DWORD PTR [ebx+8], eax
	jmp	SHORT $LN2@BuildOffen
$LN305@BuildOffen:
	push	esi
	push	1
	push	eax
	mov	ecx, ebx
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
$LN2@BuildOffen:
	add	esi, 8
	sub	edi, 1
	jne	SHORT $LL3@BuildOffen
$LN1@BuildOffen:

; 5198 : 	}
; 5199 : }

	mov	eax, DWORD PTR _aCityScores$[esp+116]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	test	eax, eax
	je	SHORT $LN370@BuildOffen
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN370@BuildOffen:
	mov	ecx, DWORD PTR __$EHRec$[esp+96]
	mov	DWORD PTR fs:0, ecx
	add	esp, 96					; 00000060H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
__ehhandler$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ENDP ; CvEspionageAI::BuildOffenseCityList
PUBLIC	?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildDefenseCityList
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0
__ehfuncinfo$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
_TEXT	SEGMENT
_iLoop$ = -44						; size = 4
_pEspionage$ = -40					; size = 4
_kEntry$226278 = -36					; size = 8
_aCityScores$ = -28					; size = 16
__$EHRec$ = -12						; size = 12
$T260953 = 8						; size = 1
$T261482 = 8						; size = 1
__Cat$261485 = 8					; size = 1
tv174 = 8						; size = 4
_aDefenseCityList$ = 8					; size = 4
?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z PROC ; CvEspionageAI::BuildDefenseCityList, COMDAT
; _this$ = ecx

; 5202 : {

	push	-1
	push	__ehhandler$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 5203 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [esi]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage

; 5204 : 
; 5205 : 	aDefenseCityList.clear();

	mov	ebx, DWORD PTR _aDefenseCityList$[esp+56]
	mov	ecx, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR _pEspionage$[esp+60], eax
	cmp	edx, ecx
	je	SHORT $LN24@BuildDefen
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	lea	edi, DWORD PTR [eax*4]
	lea	ebp, DWORD PTR [edi+edx]
	test	eax, eax
	jle	SHORT $LN49@BuildDefen
	push	edi
	push	ecx
	push	edi
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN49@BuildDefen:
	mov	DWORD PTR [ebx+8], ebp
$LN24@BuildDefen:

; 5206 : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR [eax+44]

; 5207 : 
; 5208 : 	std::vector<ScoreCityEntry> aCityScores;

	xor	esi, esi
	xor	ebp, ebp
	mov	DWORD PTR _aCityScores$[esp+64], ebp
	mov	DWORD PTR _aCityScores$[esp+68], esi
	mov	DWORD PTR _aCityScores$[esp+72], esi

; 5209 : 
; 5210 : 	CvCity* pLoopCity = NULL;
; 5211 : 	int iLoop = 0;
; 5212 : 	for(pLoopCity = GET_PLAYER(ePlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(ePlayer).nextCity(&iLoop))

	imul	edi, 63236				; 0000f704H
	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	esi
	lea	edx, DWORD PTR _iLoop$[esp+64]
	add	ecx, edi
	push	edx
	mov	DWORD PTR __$EHRec$[esp+76], esi
	mov	DWORD PTR _iLoop$[esp+68], esi
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	test	eax, eax
	je	$LN4@BuildDefen
	npad	6
$LL6@BuildDefen:

; 5213 : 	{
; 5214 : 		ScoreCityEntry kEntry;
; 5215 : 		kEntry.m_pCity = pLoopCity;
; 5216 : 		kEntry.m_iScore = pEspionage->CalcPerTurn(SPY_STATE_GATHERING_INTEL, pLoopCity, -1);

	mov	ecx, DWORD PTR _pEspionage$[esp+60]
	push	-1
	push	eax
	push	3
	mov	DWORD PTR _kEntry$226278[esp+72], eax
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn
	mov	DWORD PTR _kEntry$226278[esp+64], eax

; 5217 : 		aCityScores.push_back(kEntry);

	test	ebp, ebp
	jne	SHORT $LN105@BuildDefen
	xor	eax, eax
	jmp	SHORT $LN106@BuildDefen
$LN105@BuildDefen:
	mov	eax, DWORD PTR _aCityScores$[esp+72]
	sub	eax, ebp
	sar	eax, 3
$LN106@BuildDefen:
	mov	ecx, esi
	sub	ecx, ebp
	sar	ecx, 3
	cmp	ecx, eax
	lea	ecx, DWORD PTR _aCityScores$[esp+60]
	jae	SHORT $LN98@BuildDefen
	mov	BYTE PTR $T261482[esp+56], 0
	mov	edx, DWORD PTR $T261482[esp+56]
	mov	eax, DWORD PTR __Cat$261485[esp+56]
	push	edx
	push	eax
	push	ecx
	lea	edx, DWORD PTR _kEntry$226278[esp+72]
	push	edx
	push	1
	push	esi
	call	??$_Uninit_fill_n@PAUScoreCityEntry@@IU1@V?$allocator@UScoreCityEntry@@@std@@@std@@YAXPAUScoreCityEntry@@IABU1@AAV?$allocator@UScoreCityEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ScoreCityEntry *,unsigned int,ScoreCityEntry,std::allocator<ScoreCityEntry> >
	add	esp, 24					; 00000018H
	add	esi, 8
	mov	DWORD PTR _aCityScores$[esp+68], esi
	jmp	SHORT $LN5@BuildDefen
$LN98@BuildDefen:
	lea	eax, DWORD PTR _kEntry$226278[esp+60]
	push	eax
	push	1
	push	esi
	call	?_Insert_n@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@2@IABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::_Insert_n
	mov	esi, DWORD PTR _aCityScores$[esp+68]
	mov	ebp, DWORD PTR _aCityScores$[esp+64]
$LN5@BuildDefen:
	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	lea	edx, DWORD PTR _iLoop$[esp+64]
	add	ecx, edi
	push	edx
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	test	eax, eax
	jne	$LL6@BuildDefen
$LN4@BuildDefen:

; 5218 : 	}
; 5219 : 
; 5220 : 	// sort
; 5221 : 	std::stable_sort(aCityScores.begin(), aCityScores.end(), ScoreCityEntryHighEval());

	mov	BYTE PTR $T260953[esp+56], 0
	cmp	ebp, esi
	je	SHORT $LN157@BuildDefen
	mov	eax, DWORD PTR $T260953[esp+56]
	push	eax
	push	0
	push	0
	push	esi
	push	ebp
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H
$LN157@BuildDefen:

; 5222 : 
; 5223 : 	// transfer values to aDefenseCityList
; 5224 : 	for(uint ui = 0; ui < aCityScores.size(); ui++)

	sub	esi, ebp
	sar	esi, 3
	test	esi, esi
	jbe	SHORT $LN1@BuildDefen
	mov	edi, ebp
	mov	DWORD PTR tv174[esp+56], esi
	npad	5
$LL246@BuildDefen:

; 5225 : 	{
; 5226 : 		aDefenseCityList.push_back(aCityScores[ui].m_pCity);

	mov	edx, DWORD PTR [ebx+4]
	test	edx, edx
	jne	SHORT $LN180@BuildDefen
	xor	ecx, ecx
	jmp	SHORT $LN181@BuildDefen
$LN180@BuildDefen:
	mov	ecx, DWORD PTR [ebx+12]
	sub	ecx, edx
	sar	ecx, 2
$LN181@BuildDefen:
	mov	eax, DWORD PTR [ebx+8]
	mov	esi, eax
	sub	esi, edx
	sar	esi, 2
	cmp	esi, ecx
	jae	SHORT $LN173@BuildDefen
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
	add	eax, 4
	mov	DWORD PTR [ebx+8], eax
	jmp	SHORT $LN2@BuildDefen
$LN173@BuildDefen:
	push	edi
	push	1
	push	eax
	mov	ecx, ebx
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
$LN2@BuildDefen:
	add	edi, 8
	sub	DWORD PTR tv174[esp+56], 1
	jne	SHORT $LL246@BuildDefen
$LN1@BuildDefen:

; 5227 : 	}
; 5228 : }

	test	ebp, ebp
	je	SHORT $LN238@BuildDefen
	push	ebp
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN238@BuildDefen:
	mov	ecx, DWORD PTR __$EHRec$[esp+60]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 44					; 0000002cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
__ehhandler$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ENDP ; CvEspionageAI::BuildDefenseCityList
PUBLIC	?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildMinorCityList
EXTRN	?IsCloseToNotBeingAllies@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsCloseToNotBeingAllies
EXTRN	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsAllies
EXTRN	?IsRecentlyBulliedByMajor@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::IsRecentlyBulliedByMajor
EXTRN	?GetProximityToPlayer@CvPlayer@@QBE?AW4PlayerProximityTypes@@W4PlayerTypes@@@Z:PROC ; CvPlayer::GetProximityToPlayer
EXTRN	?GetPersonality@CvMinorCivAI@@QBE?AW4MinorCivPersonalityTypes@@XZ:PROC ; CvMinorCivAI::GetPersonality
EXTRN	?GetNumResourcesMajorLacks@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z:PROC ; CvMinorCivAI::GetNumResourcesMajorLacks
EXTRN	?IsEmpireUnhappy@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::IsEmpireUnhappy
EXTRN	?GetMinorCivTrait@CvMinorCivInfo@@QBEHXZ:PROC	; CvMinorCivInfo::GetMinorCivTrait
EXTRN	?GetMinorCivApproach@CvDiplomacyAI@@QBE?AW4MinorCivApproachTypes@@W4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::GetMinorCivApproach
EXTRN	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z:PROC ; CvGlobals::getMinorCivInfo
EXTRN	?GetMinorCivType@CvMinorCivAI@@QBE?AW4MinorCivTypes@@XZ:PROC ; CvMinorCivAI::GetMinorCivType
EXTRN	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z:PROC ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
EXTRN	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ:PROC ; CvPlayer::GetGrandStrategyAI
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0
__ehfuncinfo$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
_TEXT	SEGMENT
_bAlreadyScoredCity$226318 = -85			; size = 1
_pDiploAI$ = -84					; size = 4
_ui$226304 = -80					; size = 4
_eCurrentDiploThreat$ = -76				; size = 4
_iFriendshipWithMinor$226317 = -72			; size = 4
_pMinorInfo$226315 = -68				; size = 4
_eApproach$226316 = -64					; size = 4
_iLoop$ = -60						; size = 4
_pEspionage$ = -56					; size = 4
_iCityStatePlan$ = -52					; size = 4
$T261951 = -48						; size = 4
$T261952 = -44						; size = 4
$T261953 = -40						; size = 1
_iGrowthFlavor$ = -40					; size = 4
_kEntry$226324 = -36					; size = 8
_aCityScores$ = -28					; size = 16
__$EHRec$ = -12						; size = 12
_aMinorCityList$ = 8					; size = 4
?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z PROC ; CvEspionageAI::BuildMinorCityList, COMDAT
; _this$ = ecx

; 5231 : {

	push	-1
	push	__ehhandler$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 76					; 0000004cH
	push	ebx
	push	ebp
	push	esi
	mov	ebp, ecx

; 5232 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [ebp]
	push	edi
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage

; 5233 : 	CvDiplomacyAI* pDiploAI = m_pPlayer->GetDiplomacyAI();

	mov	ecx, DWORD PTR [ebp]
	mov	DWORD PTR _pEspionage$[esp+104], eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	DWORD PTR _pDiploAI$[esp+104], eax

; 5234 : 
; 5235 : 	aMinorCityList.clear();

	mov	eax, DWORD PTR _aMinorCityList$[esp+100]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax+4]
	xor	ebx, ebx
	cmp	edx, ecx
	je	SHORT $LN71@BuildMinor
	mov	eax, ecx
	sub	eax, ecx
	sar	eax, 2
	cmp	eax, ebx
	lea	esi, DWORD PTR [eax*4]
	lea	edi, DWORD PTR [esi+edx]
	jle	SHORT $LN96@BuildMinor
	push	esi
	push	ecx
	push	esi
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN96@BuildMinor:
	mov	eax, DWORD PTR _aMinorCityList$[esp+100]
	mov	DWORD PTR [eax+8], edi
$LN71@BuildMinor:

; 5236 : 
; 5237 : 	int iGrowthFlavor = m_pPlayer->GetGrandStrategyAI()->GetPersonalityAndGrandStrategy((FlavorTypes) GC.getInfoTypeForString("FLAVOR_GROWTH"));

	push	ebx
	push	OFFSET $SG226294
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR [ebp]
	push	eax
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy

; 5238 : 	PlayerTypes eCurrentDiploThreat = NO_PLAYER;
; 5239 : 	int iCityStatePlan = GetCityStatePlan(&eCurrentDiploThreat);

	lea	ecx, DWORD PTR _eCurrentDiploThreat$[esp+104]
	push	ecx
	mov	ecx, ebp
	mov	DWORD PTR _iGrowthFlavor$[esp+108], eax
	mov	DWORD PTR _eCurrentDiploThreat$[esp+108], -1
	call	?GetCityStatePlan@CvEspionageAI@@QAEHPAW4PlayerTypes@@@Z ; CvEspionageAI::GetCityStatePlan
	mov	DWORD PTR _iCityStatePlan$[esp+104], eax

; 5240 : 
; 5241 : 	std::vector<ScoreCityEntry> aCityScores;

	mov	DWORD PTR _aCityScores$[esp+108], ebx
	mov	DWORD PTR _aCityScores$[esp+112], ebx
	mov	DWORD PTR _aCityScores$[esp+116], ebx
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR __$EHRec$[esp+112], ebx

; 5242 : 	CvCity* pLoopCity = NULL;
; 5243 : 	int iLoop = 0;

	mov	DWORD PTR _iLoop$[esp+104], ebx

; 5244 : 	for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)

	mov	DWORD PTR _ui$226304[esp+104], 22	; 00000016H
	mov	ebx, 1391192				; 00153a58H
$LL351@BuildMinor:

; 5245 : 	{
; 5246 : 		PlayerTypes eTargetPlayer = (PlayerTypes)ui;
; 5247 : 
; 5248 : 		// only count minor civs
; 5249 : 		if (!GET_PLAYER(eTargetPlayer).isMinorCiv())

	lea	ecx, DWORD PTR [ebx+eax]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	$LN349@BuildMinor
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 5250 : 		{
; 5251 : 			continue;
; 5252 : 		}
; 5253 : 
; 5254 : 		if (!GET_PLAYER(eTargetPlayer).isAlive())

	cmp	BYTE PTR [ebx+eax+2256], 0
	je	$LN52@BuildMinor

; 5255 : 		{
; 5256 : 			continue;
; 5257 : 		}
; 5258 : 
; 5259 : 		// if we haven't met the civ, ignore
; 5260 : 		if(!GET_TEAM(m_pPlayer->getTeam()).isHasMet((GET_PLAYER(eTargetPlayer).getTeam())))

	mov	eax, DWORD PTR [ebx+eax+44]
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN150@BuildMinor
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN151@BuildMinor
$LN150@BuildMinor:
	or	ecx, -1
$LN151@BuildMinor:
	mov	eax, DWORD PTR [ebp]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN159@BuildMinor
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN160@BuildMinor
$LN159@BuildMinor:
	or	eax, -1
$LN160@BuildMinor:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	test	al, al
	je	$LN349@BuildMinor

; 5261 : 		{
; 5262 : 			continue;
; 5263 : 		}
; 5264 : 
; 5265 : 		// if at war with the minor civ, do not try to assign a spy in the city
; 5266 : 		if (GET_TEAM(m_pPlayer->getTeam()).isAtWar(GET_PLAYER(eTargetPlayer).getTeam()))

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR [ebx+eax+44]
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN172@BuildMinor
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN173@BuildMinor
$LN172@BuildMinor:
	or	ecx, -1
$LN173@BuildMinor:
	mov	eax, DWORD PTR [ebp]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN181@BuildMinor
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN182@BuildMinor
$LN181@BuildMinor:
	or	eax, -1
$LN182@BuildMinor:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	jne	$LN349@BuildMinor

; 5267 : 		{
; 5268 : 			continue;
; 5269 : 		}
; 5270 : 
; 5271 : 		CvMinorCivAI* pMinorCivAI = GET_PLAYER(eTargetPlayer).GetMinorCivAI();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [ebx+eax]
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	edi, eax

; 5272 : 		CvMinorCivInfo* pMinorInfo = GC.getMinorCivInfo(pMinorCivAI->GetMinorCivType());

	mov	ecx, edi
	call	?GetMinorCivType@CvMinorCivAI@@QBE?AW4MinorCivTypes@@XZ ; CvMinorCivAI::GetMinorCivType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMinorCivInfo@CvGlobals@@QAEPAVCvMinorCivInfo@@W4MinorCivTypes@@@Z ; CvGlobals::getMinorCivInfo

; 5273 : 		MinorCivApproachTypes eApproach = pDiploAI->GetMinorCivApproach(eTargetPlayer);

	mov	ecx, DWORD PTR _ui$226304[esp+104]
	push	ecx
	mov	ecx, DWORD PTR _pDiploAI$[esp+108]
	mov	DWORD PTR _pMinorInfo$226315[esp+108], eax
	call	?GetMinorCivApproach@CvDiplomacyAI@@QBE?AW4MinorCivApproachTypes@@W4PlayerTypes@@@Z ; CvDiplomacyAI::GetMinorCivApproach

; 5274 : 		int iFriendshipWithMinor = pMinorCivAI->GetEffectiveFriendshipWithMajor(m_pPlayer->GetID());

	mov	edx, DWORD PTR [ebp]
	mov	DWORD PTR _eApproach$226316[esp+104], eax
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, edi
	call	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajor
	mov	DWORD PTR _iFriendshipWithMinor$226317[esp+104], eax

; 5275 : 		
; 5276 : 		bool bAlreadyScoredCity = false;
; 5277 : 		for (pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	lea	edx, DWORD PTR _iLoop$[esp+108]
	lea	ecx, DWORD PTR [ebx+eax]
	push	edx
	mov	BYTE PTR _bAlreadyScoredCity$226318[esp+112], 0
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	esi, eax
	test	esi, esi
	je	$LN349@BuildMinor
	npad	3
$LL46@BuildMinor:

; 5278 : 		{
; 5279 : 			if(!pEspionage->CanEverMoveSpyTo(pLoopCity))

	mov	ecx, DWORD PTR _pEspionage$[esp+104]
	push	esi
	call	?CanEverMoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@@Z ; CvPlayerEspionage::CanEverMoveSpyTo
	test	al, al
	je	$LN45@BuildMinor

; 5280 : 			{
; 5281 : 				continue;
; 5282 : 			}
; 5283 : 
; 5284 : 			// if we've already scored a city for this minor civ, we don't need to score another because the values would be the same
; 5285 : 			if (bAlreadyScoredCity)

	cmp	BYTE PTR _bAlreadyScoredCity$226318[esp+104], 0
	jne	$LN349@BuildMinor

; 5286 : 			{
; 5287 : 				break;
; 5288 : 			}
; 5289 : 			bAlreadyScoredCity = true;
; 5290 : 
; 5291 : 			ScoreCityEntry kEntry;
; 5292 : 			kEntry.m_pCity = pLoopCity;
; 5293 : 
; 5294 : 			int iValue = 100;
; 5295 : 			switch (iCityStatePlan)

	mov	eax, DWORD PTR _iCityStatePlan$[esp+104]
	mov	DWORD PTR _kEntry$226324[esp+104], esi
	mov	BYTE PTR _bAlreadyScoredCity$226318[esp+104], 1
	mov	esi, 100				; 00000064H
	cmp	eax, 3
	ja	$LN4@BuildMinor
	jmp	DWORD PTR $LN354@BuildMinor[eax*4]
$LN39@BuildMinor:

; 5296 : 			{
; 5297 : 			case PLAN_PLAY_NORMAL:
; 5298 : 				// If we're not protective or friendly, then don't bother with minor diplo
; 5299 : 				if(eApproach == MINOR_CIV_APPROACH_PROTECTIVE || eApproach == MINOR_CIV_APPROACH_FRIENDLY)

	mov	eax, DWORD PTR _eApproach$226316[esp+104]
	cmp	eax, 2
	je	SHORT $LN37@BuildMinor
	cmp	eax, 1
	jne	$LN23@BuildMinor
$LN37@BuildMinor:

; 5300 : 				{
; 5301 : 					// Nearly everyone likes to grow
; 5302 : 					if(pMinorInfo->GetMinorCivTrait() == MINOR_CIV_TRAIT_MARITIME && !m_pPlayer->IsEmpireUnhappy())

	mov	ecx, DWORD PTR _pMinorInfo$226315[esp+104]
	call	?GetMinorCivTrait@CvMinorCivInfo@@QBEHXZ ; CvMinorCivInfo::GetMinorCivTrait
	cmp	eax, 2
	jne	SHORT $LN36@BuildMinor
	mov	ecx, DWORD PTR [ebp]
	call	?IsEmpireUnhappy@CvPlayer@@QBE_NXZ	; CvPlayer::IsEmpireUnhappy
	test	al, al
	jne	SHORT $LN36@BuildMinor

; 5303 : 					{
; 5304 : 						iValue += /*20*/ GC.getMC_GIFT_WEIGHT_MARITIME_GROWTH() * iGrowthFlavor * max(1, m_pPlayer->getNumCities() / 3);

	mov	ecx, DWORD PTR [ebp]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	mov	ecx, eax
	mov	eax, 1431655766				; 55555556H
	imul	ecx
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR $T261951[esp+104], eax
	cmp	eax, 1
	mov	DWORD PTR $T261952[esp+104], 1
	lea	eax, DWORD PTR $T261951[esp+104]
	jg	SHORT $LN203@BuildMinor
	lea	eax, DWORD PTR $T261952[esp+104]
$LN203@BuildMinor:
	mov	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3460
	imul	esi, DWORD PTR _iGrowthFlavor$[esp+104]
	imul	esi, DWORD PTR [eax]
	add	esi, 100				; 00000064H
$LN36@BuildMinor:

; 5305 : 					}
; 5306 : 
; 5307 : 					// Slight negative weight towards militaristic
; 5308 : 					if(pMinorInfo->GetMinorCivTrait() == MINOR_CIV_TRAIT_MILITARISTIC && !pDiploAI->IsGoingForWorldConquest())

	mov	ecx, DWORD PTR _pMinorInfo$226315[esp+104]
	call	?GetMinorCivTrait@CvMinorCivInfo@@QBEHXZ ; CvMinorCivInfo::GetMinorCivTrait
	cmp	eax, 1
	jne	SHORT $LN35@BuildMinor
	mov	ecx, DWORD PTR _pDiploAI$[esp+104]
	call	?IsGoingForWorldConquest@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForWorldConquest
	test	al, al
	jne	SHORT $LN35@BuildMinor

; 5309 : 					{
; 5310 : 						iValue += /*-50*/ GC.getMC_GIFT_WEIGHT_MILITARISTIC();

	add	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3476
$LN35@BuildMinor:

; 5311 : 					}
; 5312 : 
; 5313 : 					// If they have a resource we don't have, add extra weight
; 5314 : 					int iResourcesWeLack = pMinorCivAI->GetNumResourcesMajorLacks(m_pPlayer->GetID());

	mov	eax, DWORD PTR [ebp]
	mov	eax, DWORD PTR [eax+44]
	push	eax
	mov	ecx, edi
	call	?GetNumResourcesMajorLacks@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetNumResourcesMajorLacks

; 5315 : 					if(iResourcesWeLack > 0)

	test	eax, eax
	jle	SHORT $LN34@BuildMinor

; 5316 : 					{
; 5317 : 						iValue += (iResourcesWeLack* /*80*/ GC.getMC_GIFT_WEIGHT_RESOURCE_WE_NEED());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3480
	imul	ecx, eax
	add	esi, ecx
$LN34@BuildMinor:

; 5318 : 					}
; 5319 : 
; 5320 : 					// If we're protective this is worth more than if we're friendly
; 5321 : 					if(eApproach == MINOR_CIV_APPROACH_PROTECTIVE)

	cmp	DWORD PTR _eApproach$226316[esp+104], 2
	jne	SHORT $LN33@BuildMinor

; 5322 : 					{
; 5323 : 						iValue += /*10*/ GC.getMC_GIFT_WEIGHT_PROTECTIVE();

	add	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3488
$LN33@BuildMinor:

; 5324 : 					}
; 5325 : 
; 5326 : 					// If the minor is hostile, then reduce the weighting
; 5327 : 					if(pMinorCivAI->GetPersonality() == MINOR_CIV_PERSONALITY_HOSTILE)

	mov	ecx, edi
	call	?GetPersonality@CvMinorCivAI@@QBE?AW4MinorCivPersonalityTypes@@XZ ; CvMinorCivAI::GetPersonality
	cmp	eax, 2
	jne	SHORT $LN32@BuildMinor

; 5328 : 					{
; 5329 : 						iValue += /*-20*/ GC.getMC_GIFT_WEIGHT_HOSTILE();

	add	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3492
$LN32@BuildMinor:

; 5330 : 					}
; 5331 : 
; 5332 : 					// The closer we are the better
; 5333 : 					if(m_pPlayer->GetProximityToPlayer(eTargetPlayer) == PLAYER_PROXIMITY_NEIGHBORS)

	mov	edx, DWORD PTR _ui$226304[esp+104]
	mov	ecx, DWORD PTR [ebp]
	push	edx
	call	?GetProximityToPlayer@CvPlayer@@QBE?AW4PlayerProximityTypes@@W4PlayerTypes@@@Z ; CvPlayer::GetProximityToPlayer
	cmp	eax, 3
	jne	SHORT $LN31@BuildMinor

; 5334 : 						iValue += /*5*/ GC.getMC_GIFT_WEIGHT_NEIGHBORS();

	add	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3496
	jmp	SHORT $LN27@BuildMinor
$LN31@BuildMinor:

; 5335 : 					else if(m_pPlayer->GetProximityToPlayer(eTargetPlayer) == PLAYER_PROXIMITY_CLOSE)

	mov	eax, DWORD PTR _ui$226304[esp+104]
	mov	ecx, DWORD PTR [ebp]
	push	eax
	call	?GetProximityToPlayer@CvPlayer@@QBE?AW4PlayerProximityTypes@@W4PlayerTypes@@@Z ; CvPlayer::GetProximityToPlayer
	cmp	eax, 2
	jne	SHORT $LN29@BuildMinor

; 5336 : 						iValue += /*4*/ GC.getMC_GIFT_WEIGHT_CLOSE();

	add	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3500
	jmp	SHORT $LN27@BuildMinor
$LN29@BuildMinor:

; 5337 : 					else if(m_pPlayer->GetProximityToPlayer(eTargetPlayer) == PLAYER_PROXIMITY_FAR)

	mov	ecx, DWORD PTR _ui$226304[esp+104]
	push	ecx
	mov	ecx, DWORD PTR [ebp]
	call	?GetProximityToPlayer@CvPlayer@@QBE?AW4PlayerProximityTypes@@W4PlayerTypes@@@Z ; CvPlayer::GetProximityToPlayer
	cmp	eax, 1
	jne	SHORT $LN27@BuildMinor

; 5338 : 						iValue += /*3*/ GC.getMC_GIFT_WEIGHT_FAR();

	add	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+3504
$LN27@BuildMinor:

; 5339 : 
; 5340 : 					// Did we bully you recently?  If so, giving you gold now would be very odd.
; 5341 : 					if(pMinorCivAI->IsRecentlyBulliedByMajor(m_pPlayer->GetID()))

	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, edi
	call	?IsRecentlyBulliedByMajor@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsRecentlyBulliedByMajor
	test	al, al
	je	SHORT $LN26@BuildMinor

; 5342 : 					{
; 5343 : 						iValue -= 100; //antonjs: todo: constant/XML

	sub	esi, 100				; 00000064H
$LN26@BuildMinor:

; 5344 : 					}
; 5345 : 
; 5346 : 					// if we're allies
; 5347 : 					if (pMinorCivAI->IsAllies(m_pPlayer->GetID()))

	mov	eax, DWORD PTR [ebp]
	mov	eax, DWORD PTR [eax+44]
	push	eax
	mov	ecx, edi
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies
	test	al, al
	je	SHORT $LN25@BuildMinor

; 5348 : 					{
; 5349 : 						// and we're secure as their allies, ignore the scoring
; 5350 : 						if (!pMinorCivAI->IsCloseToNotBeingAllies(m_pPlayer->GetID()))

	mov	ecx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [ecx+44]
	push	eax
	mov	ecx, edi
	call	?IsCloseToNotBeingAllies@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsCloseToNotBeingAllies
	test	al, al
	jne	SHORT $LN23@BuildMinor

; 5351 : 						{
; 5352 : 							iValue = 0;

	xor	esi, esi

; 5353 : 						}
; 5354 : 					}
; 5355 : 					else

	jmp	SHORT $LN23@BuildMinor
$LN25@BuildMinor:

; 5356 : 					{
; 5357 : 						// count however much we've invested into the friendship toward maintaining the friendship
; 5358 : 						iValue += iFriendshipWithMinor;

	add	esi, DWORD PTR _iFriendshipWithMinor$226317[esp+104]
$LN23@BuildMinor:

; 5359 : 					}
; 5360 : 				}
; 5361 : 
; 5362 : 				if (pDiploAI->IsGoingForCultureVictory())

	mov	ecx, DWORD PTR _pDiploAI$[esp+104]
	call	?IsGoingForCultureVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForCultureVictory
	test	al, al
	jne	$LN4@BuildMinor

; 5363 : 				{
; 5364 : 					// no modifiers
; 5365 : 				}
; 5366 : 				else if (pDiploAI->IsGoingForWorldConquest())

	mov	ecx, DWORD PTR _pDiploAI$[esp+104]
	call	?IsGoingForWorldConquest@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForWorldConquest
	test	al, al
	je	SHORT $LN20@BuildMinor

; 5367 : 				{
; 5368 : 					if (pMinorCivAI->GetTrait() == MINOR_CIV_TRAIT_MILITARISTIC)

	mov	ecx, edi
	call	?GetTrait@CvMinorCivAI@@QBE?AW4MinorCivTraitTypes@@XZ ; CvMinorCivAI::GetTrait
	cmp	eax, 1
	jne	$LN4@BuildMinor

; 5369 : 					{
; 5370 : 						iValue += 999;

	add	esi, 999				; 000003e7H

; 5371 : 					}
; 5372 : 				}

	jmp	$LN4@BuildMinor
$LN20@BuildMinor:

; 5373 : 				else if (pDiploAI->IsGoingForDiploVictory())

	mov	ecx, DWORD PTR _pDiploAI$[esp+104]
	call	?IsGoingForDiploVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForDiploVictory
	test	al, al
	jne	$LN4@BuildMinor

; 5374 : 				{
; 5375 : 					// no modifiers
; 5376 : 				}
; 5377 : 				else if (pDiploAI->IsGoingForSpaceshipVictory())

	mov	ecx, DWORD PTR _pDiploAI$[esp+104]
	call	?IsGoingForSpaceshipVictory@CvDiplomacyAI@@QAE_NXZ ; CvDiplomacyAI::IsGoingForSpaceshipVictory

; 5378 : 				{
; 5379 : 					// no modifiers
; 5380 : 				}
; 5381 : 				else // the player doesn't know how they're going to try to win yet
; 5382 : 				{
; 5383 : 					// no modifiers
; 5384 : 				}
; 5385 : 				break;

	jmp	SHORT $LN4@BuildMinor
$LN13@BuildMinor:

; 5386 : 
; 5387 : 			case PLAN_COLLECT_VOTES:
; 5388 : 				// if we're allies
; 5389 : 				if (pMinorCivAI->IsAllies(m_pPlayer->GetID()))

	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, edi
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies

; 5390 : 				{
; 5391 : 					// and we're secure as their allies, ignore the scoring
; 5392 : 					if (!pMinorCivAI->IsCloseToNotBeingAllies(m_pPlayer->GetID()))

	mov	ecx, edi
	test	al, al
	je	SHORT $LN12@BuildMinor
	mov	eax, DWORD PTR [ebp]
	mov	eax, DWORD PTR [eax+44]
	push	eax
	call	?IsCloseToNotBeingAllies@CvMinorCivAI@@QAE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsCloseToNotBeingAllies
	test	al, al
	jne	SHORT $LN4@BuildMinor

; 5393 : 					{
; 5394 : 						iValue = 0;

	xor	esi, esi

; 5395 : 					}
; 5396 : 				}
; 5397 : 				else

	jmp	SHORT $LN4@BuildMinor
$LN12@BuildMinor:

; 5398 : 				{
; 5399 : 					// if the minor is allied with someone else
; 5400 : 					if (pMinorCivAI->GetAlly() != NO_PLAYER)

	call	?GetAlly@CvMinorCivAI@@QBE?AW4PlayerTypes@@XZ ; CvMinorCivAI::GetAlly

; 5401 : 					{
; 5402 : 						iValue += iFriendshipWithMinor;

	mov	esi, DWORD PTR _iFriendshipWithMinor$226317[esp+104]
	cmp	eax, -1
	je	SHORT $LN9@BuildMinor
	add	esi, 100				; 00000064H

; 5403 : 					}
; 5404 : 					else

	jmp	SHORT $LN4@BuildMinor
$LN9@BuildMinor:

; 5405 : 					{
; 5406 : 						// count however much we've invested into the friendship toward maintaining the friendship
; 5407 : 						iValue += iFriendshipWithMinor * 2;

	lea	esi, DWORD PTR [esi+esi+100]

; 5408 : 					}
; 5409 : 				}
; 5410 : 				break;

	jmp	SHORT $LN4@BuildMinor
$LN7@BuildMinor:

; 5411 : 			case PLAN_ATTACK_CS_TO_PREVENT_DEFEAT:
; 5412 : 				// attack the least protected cities
; 5413 : 				if (pMinorCivAI->IsAllies(eCurrentDiploThreat))

	mov	ecx, DWORD PTR _eCurrentDiploThreat$[esp+104]
	push	ecx
	mov	ecx, edi
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies
	test	al, al
	je	SHORT $LN4@BuildMinor

; 5414 : 				{
; 5415 : 					iValue = MAX_INT - pMinorCivAI->GetEffectiveFriendshipWithMajor(eCurrentDiploThreat);

	mov	edx, DWORD PTR _eCurrentDiploThreat$[esp+104]
	push	edx

; 5416 : 				}
; 5417 : 				break;

	jmp	SHORT $LN353@BuildMinor
$LN5@BuildMinor:

; 5418 : 			case PLAN_DEFEND_CS_FOR_WIN:
; 5419 : 				// defend the least defended cities!
; 5420 : 				if (pMinorCivAI->IsAllies(eCurrentDiploThreat))

	mov	eax, DWORD PTR _eCurrentDiploThreat$[esp+104]
	push	eax
	mov	ecx, edi
	call	?IsAllies@CvMinorCivAI@@QBE_NW4PlayerTypes@@@Z ; CvMinorCivAI::IsAllies
	test	al, al
	je	SHORT $LN4@BuildMinor

; 5421 : 				{
; 5422 : 					iValue = MAX_INT - pMinorCivAI->GetEffectiveFriendshipWithMajor(eCurrentDiploThreat);

	mov	ecx, DWORD PTR _eCurrentDiploThreat$[esp+104]
	push	ecx
$LN353@BuildMinor:
	mov	ecx, edi
	call	?GetEffectiveFriendshipWithMajor@CvMinorCivAI@@QAEHW4PlayerTypes@@@Z ; CvMinorCivAI::GetEffectiveFriendshipWithMajor
	mov	esi, 2147483647				; 7fffffffH
	sub	esi, eax
$LN4@BuildMinor:

; 5423 : 				}
; 5424 : 			}
; 5425 : 
; 5426 : 			kEntry.m_iScore = iValue;
; 5427 : 			aCityScores.push_back(kEntry);

	lea	edx, DWORD PTR _kEntry$226324[esp+104]
	push	edx
	lea	ecx, DWORD PTR _aCityScores$[esp+108]
	mov	DWORD PTR _kEntry$226324[esp+112], esi
	call	?push_back@?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAEXABUScoreCityEntry@@@Z ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::push_back
$LN45@BuildMinor:
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	lea	edx, DWORD PTR _iLoop$[esp+108]
	lea	ecx, DWORD PTR [ebx+eax]
	push	edx
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	esi, eax
	test	esi, esi
	jne	$LL46@BuildMinor
$LN349@BuildMinor:

; 5275 : 		
; 5276 : 		bool bAlreadyScoredCity = false;
; 5277 : 		for (pLoopCity = GET_PLAYER(eTargetPlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(eTargetPlayer).nextCity(&iLoop))

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
$LN52@BuildMinor:

; 5244 : 	for(uint ui = MAX_MAJOR_CIVS; ui < MAX_CIV_PLAYERS; ui++)

	inc	DWORD PTR _ui$226304[esp+104]
	add	ebx, 63236				; 0000f704H
	cmp	ebx, 3983868				; 003cc9fcH
	jb	$LL351@BuildMinor

; 5428 : 		}
; 5429 : 	}
; 5430 : 
; 5431 : 	// sort
; 5432 : 	std::stable_sort(aCityScores.begin(), aCityScores.end(), ScoreCityEntryHighEval());

	mov	ebp, DWORD PTR _aCityScores$[esp+108]
	mov	esi, DWORD PTR _aCityScores$[esp+112]
	mov	BYTE PTR $T261953[esp+104], 0
	cmp	ebp, esi
	je	SHORT $LN350@BuildMinor
	mov	eax, DWORD PTR $T261953[esp+104]
	push	eax
	push	0
	push	0
	push	esi
	push	ebp
	call	??$_Stable_sort@V?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@HUScoreCityEntry@@UScoreCityEntryHighEval@@@std@@YAXV?$_Vector_iterator@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@0@0PAHPAUScoreCityEntry@@UScoreCityEntryHighEval@@@Z ; std::_Stable_sort<std::_Vector_iterator<ScoreCityEntry,std::allocator<ScoreCityEntry> >,int,ScoreCityEntry,ScoreCityEntryHighEval>
	add	esp, 20					; 00000014H
$LN350@BuildMinor:

; 5433 : 
; 5434 : 	// transfer values to OffenseCityList
; 5435 : 	for(uint ui = 0; ui < aCityScores.size(); ui++)

	sub	esi, ebp
	sar	esi, 3
	test	esi, esi
	jbe	SHORT $LN1@BuildMinor
	mov	edi, ebp
$LL347@BuildMinor:

; 5436 : 	{
; 5437 : 		aMinorCityList.push_back(aCityScores[ui].m_pCity);

	mov	eax, DWORD PTR _aMinorCityList$[esp+100]
	mov	edx, DWORD PTR [eax+4]
	test	edx, edx
	jne	SHORT $LN277@BuildMinor
	xor	ecx, ecx
	jmp	SHORT $LN278@BuildMinor
$LN277@BuildMinor:
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, edx
	sar	ecx, 2
$LN278@BuildMinor:
	mov	eax, DWORD PTR [eax+8]
	mov	ebx, eax
	sub	ebx, edx
	sar	ebx, 2
	cmp	ebx, ecx
	jae	SHORT $LN270@BuildMinor
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR _aMinorCityList$[esp+100]
	mov	DWORD PTR [eax], ecx
	add	eax, 4
	mov	DWORD PTR [edx+8], eax
	jmp	SHORT $LN2@BuildMinor
$LN270@BuildMinor:
	mov	ecx, DWORD PTR _aMinorCityList$[esp+100]
	push	edi
	push	1
	push	eax
	call	?_Insert_n@?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@IAEXV?$_Vector_const_iterator@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@2@IABQAVCvCity@@@Z ; std::vector<CvCity *,std::allocator<CvCity *> >::_Insert_n
$LN2@BuildMinor:
	add	edi, 8
	sub	esi, 1
	jne	SHORT $LL347@BuildMinor
$LN1@BuildMinor:

; 5438 : 	}
; 5439 : }

	test	ebp, ebp
	je	SHORT $LN335@BuildMinor
	push	ebp
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN335@BuildMinor:
	mov	ecx, DWORD PTR __$EHRec$[esp+104]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 88					; 00000058H
	ret	4
	npad	3
$LN354@BuildMinor:
	DD	$LN5@BuildMinor
	DD	$LN7@BuildMinor
	DD	$LN13@BuildMinor
	DD	$LN39@BuildMinor
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z$0:
	lea	ecx, DWORD PTR _aCityScores$[ebp]
	jmp	??1?$vector@UScoreCityEntry@@V?$allocator@UScoreCityEntry@@@std@@@std@@QAE@XZ ; std::vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >::~vector<ScoreCityEntry,std::allocator<ScoreCityEntry> >
__ehhandler$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ENDP ; CvEspionageAI::BuildMinorCityList
PUBLIC	?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z
_TEXT	SEGMENT
$T263018 = -4						; size = 1
__Cat$263021 = 8					; size = 1
$T262987 = 8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z PROC ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx

; 810  : 		if (size() < capacity())

	mov	ebx, DWORD PTR [esi+4]
	push	edi
	test	ebx, ebx
	jne	SHORT $LN9@push_back@10
	xor	ecx, ecx
	jmp	SHORT $LN10@push_back@10
$LN9@push_back@10:
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, ebx
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
$LN10@push_back@10:
	mov	edi, DWORD PTR [esi+8]
	mov	edx, edi
	sub	edx, ebx
	mov	eax, 2021161081				; 78787879H
	imul	edx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	eax, ecx
	jae	SHORT $LN2@push_back@10

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR __Cat$263021[esp+12]
	mov	eax, DWORD PTR __Val$[esp+12]
	mov	BYTE PTR $T263018[esp+16], 0
	mov	ecx, DWORD PTR $T263018[esp+16]
	push	ecx
	push	edx
	push	esi
	push	eax
	push	1
	push	edi
	call	??$_Uninit_fill_n@PAUIntrigueNotificationMessage@@IU1@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@YAXPAUIntrigueNotificationMessage@@IABU1@AAV?$allocator@UIntrigueNotificationMessage@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<IntrigueNotificationMessage *,unsigned int,IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >
	add	esp, 24					; 00000018H
	add	edi, 68					; 00000044H
	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi
	pop	ebx

; 824  : 		}

	pop	ecx
	ret	4
$LN2@push_back@10:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	mov	ecx, DWORD PTR __Val$[esp+12]
	push	ecx
	push	edi
	lea	edx, DWORD PTR $T262987[esp+20]
	push	edx
	mov	ecx, esi
	call	?insert@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAE?AV?$_Vector_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@V?$_Vector_const_iterator@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@2@ABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::insert
	pop	edi
	pop	esi
	pop	ebx

; 824  : 		}

	pop	ecx
	ret	4
?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z ENDP ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back
_TEXT	ENDS
PUBLIC	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
EXTRN	?getCivilizationDescriptionKey@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationDescriptionKey
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z DD 019930522H
	DD	030H
	DD	FLAT:__unwindtable$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$8
	DD	03H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$13
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$16
	DD	0fH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$17
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$18
	DD	012H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$19
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$20
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$21
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$22
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$23
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$24
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$25
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$26
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$27
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$28
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$29
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$30
	DD	013H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$31
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$32
	DD	020H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$33
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$34
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$35
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$36
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$37
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$38
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$39
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$40
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$41
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$42
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$43
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$44
	DD	021H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$45
	DD	00H
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$46
	DD	02eH
	DD	FLAT:__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$47
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z
_TEXT	SEGMENT
tv3140 = -2968						; size = 4
_eNotification$224101 = -2968				; size = 4
_eNotification$224018 = -2968				; size = 4
_iCityX$ = -2968					; size = 4
_pNotifications$223912 = -2964				; size = 4
_iCityY$ = -2964					; size = 4
_kMessage$ = -2960					; size = 68
_strSummary$224182 = -2892				; size = 80
_strNotification$224100 = -2892				; size = 80
_strNotification$224017 = -2892				; size = 80
_strSummary$223999 = -2892				; size = 80
_strSummary$223982 = -2892				; size = 80
_strNotification$223920 = -2892				; size = 80
_strNotification$224198 = -2812				; size = 80
_strSummary$224099 = -2812				; size = 80
_strSummary$224016 = -2812				; size = 80
_strNotification$224000 = -2812				; size = 80
_strNotification$223983 = -2812				; size = 80
_strSummary$223919 = -2812				; size = 80
_str$223906 = -2812					; size = 80
$T263108 = -2732					; size = 80
$T263123 = -2652					; size = 80
$T263048 = -2572					; size = 80
$T263128 = -2492					; size = 80
$T263057 = -2412					; size = 80
$T263129 = -2332					; size = 80
$T263068 = -2252					; size = 80
$T263130 = -2172					; size = 80
$T263079 = -2092					; size = 80
$T263131 = -2012					; size = 80
$T263087 = -1932					; size = 80
$T263137 = -1852					; size = 80
$T263096 = -1772					; size = 80
$T263141 = -1692					; size = 80
$T263104 = -1612					; size = 80
$T263146 = -1532					; size = 80
$T263112 = -1452					; size = 80
$T263149 = -1372					; size = 80
$T263054 = -1292					; size = 80
$T263153 = -1212					; size = 80
$T263076 = -1132					; size = 80
$T263157 = -1052					; size = 80
$T263092 = -972						; size = 80
$T263163 = -892						; size = 80
$T263045 = -812						; size = 80
$T263168 = -732						; size = 80
$T263063 = -652						; size = 80
$T263173 = -572						; size = 80
$T263101 = -492						; size = 80
$T263174 = -412						; size = 80
$T263084 = -332						; size = 80
$T263175 = -252						; size = 80
$T263118 = -172						; size = 80
$T263176 = -92						; size = 80
__$EHRec$ = -12						; size = 12
_eDiscoveringPlayer$ = 8				; size = 4
_eSourcePlayer$ = 12					; size = 4
_eTargetPlayer$ = 16					; size = 4
_eBuilding$ = 20					; size = 4
_eProject$ = 24						; size = 4
_eIntrigueType$ = 28					; size = 4
_uiSpyIndex$ = 32					; size = 4
_pCity$ = 36						; size = 4
_bShowNotification$ = 40				; size = 1
?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z PROC ; CvPlayerEspionage::AddIntrigueMessage, COMDAT
; _this$ = ecx

; 2590 : {

	push	-1
	push	__ehhandler$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 2956				; 00000b8cH
	push	ebx

; 2591 : 	CvAssertMsg(GetNumSpies() > 0, "How can you add an intrigue message when there are no spies?");
; 2592 : 
; 2593 : 	int iCityX = -1;

	or	eax, -1
	push	ebp
	mov	DWORD PTR _iCityX$[esp+2976], eax

; 2594 : 	int iCityY = -1;

	mov	DWORD PTR _iCityY$[esp+2976], eax

; 2595 : 	if(pCity)

	mov	eax, DWORD PTR _pCity$[esp+2972]
	push	esi
	push	edi
	mov	edi, ecx
	test	eax, eax
	je	SHORT $LN167@AddIntrigu

; 2596 : 	{
; 2597 : 		iCityX = pCity->getX();

	mov	ecx, DWORD PTR [eax+96]

; 2598 : 		iCityY = pCity->getY();

	mov	edx, DWORD PTR [eax+108]
	mov	DWORD PTR _iCityX$[esp+2984], ecx
	mov	DWORD PTR _iCityY$[esp+2984], edx
$LN167@AddIntrigu:

; 2599 : 	}
; 2600 : 
; 2601 : 	// go through all the intrigue messages to see if there is a duplicate
; 2602 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [edi+1284]
	sub	ecx, DWORD PTR [edi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	xor	ebx, ebx
	add	eax, edx
	je	$LN109@AddIntrigu
	xor	ebp, ebp
	npad	4
$LL111@AddIntrigu:

; 2603 : 	{
; 2604 : 		if (m_aIntrigueNotificationMessages[ui].m_eSourcePlayer == eSourcePlayer &&
; 2605 : 			m_aIntrigueNotificationMessages[ui].m_eTargetPlayer == eTargetPlayer &&
; 2606 : 			m_aIntrigueNotificationMessages[ui].m_iIntrigueType == eIntrigueType)

	mov	ecx, DWORD PTR [edi+1280]
	mov	edx, DWORD PTR _eSourcePlayer$[esp+2980]
	cmp	DWORD PTR [ecx+ebp+4], edx
	lea	esi, DWORD PTR [ecx+ebp]
	jne	$LN110@AddIntrigu
	mov	eax, DWORD PTR _eTargetPlayer$[esp+2980]
	cmp	DWORD PTR [esi+8], eax
	jne	SHORT $LN110@AddIntrigu
	mov	ecx, DWORD PTR _eIntrigueType$[esp+2980]
	cmp	DWORD PTR [esi+20], ecx
	jne	SHORT $LN110@AddIntrigu

; 2607 : 		{
; 2608 : 			bool bDuplicateTimer = GC.getGame().getGameTurn() - m_aIntrigueNotificationMessages[ui].m_iTurnNum < 30;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	sub	eax, DWORD PTR [esi+24]
	cmp	eax, 30					; 0000001eH
	setl	cl

; 2609 : 
; 2610 : 			if (eIntrigueType == INTRIGUE_TYPE_DECEPTION || eIntrigueType == INTRIGUE_TYPE_BUILDING_ARMY || eIntrigueType == INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY)

	cmp	DWORD PTR _eIntrigueType$[esp+2980], 0
	je	SHORT $LN106@AddIntrigu
	mov	eax, DWORD PTR _eIntrigueType$[esp+2980]
	cmp	eax, 1
	je	SHORT $LN106@AddIntrigu
	cmp	eax, 2
	je	SHORT $LN106@AddIntrigu

; 2613 : 				{
; 2614 : 					// if duplicate is found, exit the function
; 2615 : 					return;
; 2616 : 				}
; 2617 : 			}
; 2618 : 			else if (m_aIntrigueNotificationMessages[ui].m_eBuilding == eBuilding &&
; 2619 : 					 m_aIntrigueNotificationMessages[ui].m_eProject == eProject &&
; 2620 : 					 m_aIntrigueNotificationMessages[ui].m_iCityX == iCityX &&
; 2621 : 					 m_aIntrigueNotificationMessages[ui].m_iCityY == iCityY)

	mov	edx, DWORD PTR [edi+1280]
	lea	eax, DWORD PTR [edx+ebp]
	mov	edx, DWORD PTR _eBuilding$[esp+2980]
	cmp	DWORD PTR [eax+12], edx
	jne	SHORT $LN110@AddIntrigu
	mov	edx, DWORD PTR _eProject$[esp+2980]
	cmp	DWORD PTR [eax+16], edx
	jne	SHORT $LN110@AddIntrigu
	mov	edx, DWORD PTR _iCityX$[esp+2984]
	cmp	DWORD PTR [eax+28], edx
	jne	SHORT $LN110@AddIntrigu
	mov	edx, DWORD PTR _iCityY$[esp+2984]
	cmp	DWORD PTR [eax+32], edx
	jne	SHORT $LN110@AddIntrigu
$LN106@AddIntrigu:

; 2611 : 			{
; 2612 : 				if(bDuplicateTimer)

	test	cl, cl
	jne	$LN113@AddIntrigu
$LN110@AddIntrigu:

; 2599 : 	}
; 2600 : 
; 2601 : 	// go through all the intrigue messages to see if there is a duplicate
; 2602 : 	for(uint ui = 0; ui < m_aIntrigueNotificationMessages.size(); ui++)

	mov	ecx, DWORD PTR [edi+1284]
	sub	ecx, DWORD PTR [edi+1280]
	mov	eax, 2021161081				; 78787879H
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	inc	ebx
	add	eax, edx
	add	ebp, 68					; 00000044H
	cmp	ebx, eax
	jb	$LL111@AddIntrigu
$LN109@AddIntrigu:

; 2622 : 			{
; 2623 : 				if(bDuplicateTimer)
; 2624 : 				{
; 2625 : 					// if duplicate is found, exit the function
; 2626 : 					return;
; 2627 : 				}
; 2628 : 			}
; 2629 : 		}
; 2630 : 	}
; 2631 : 
; 2632 : 	// no matching message found so adding it to the list
; 2633 : 	IntrigueNotificationMessage kMessage;

	lea	ecx, DWORD PTR _kMessage$[esp+3020]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2634 : 	kMessage.m_eDiscoveringPlayer = eDiscoveringPlayer;
; 2635 : 	kMessage.m_eSourcePlayer = eSourcePlayer;

	mov	ecx, DWORD PTR _eSourcePlayer$[esp+2980]

; 2636 : 	kMessage.m_eTargetPlayer = eTargetPlayer;

	mov	edx, DWORD PTR _eTargetPlayer$[esp+2980]

; 2637 : 	kMessage.m_eBuilding = eBuilding;

	mov	eax, DWORD PTR _eBuilding$[esp+2980]
	mov	esi, DWORD PTR _eDiscoveringPlayer$[esp+2980]
	mov	DWORD PTR _kMessage$[esp+2988], ecx

; 2638 : 	kMessage.m_eProject = eProject;

	mov	ecx, DWORD PTR _eProject$[esp+2980]
	mov	DWORD PTR _kMessage$[esp+3000], ecx

; 2639 : 	kMessage.m_iIntrigueType = eIntrigueType;
; 2640 : 	kMessage.m_iCityX = iCityX;
; 2641 : 	kMessage.m_iCityY = iCityY;

	mov	ecx, DWORD PTR _iCityY$[esp+2984]
	mov	DWORD PTR _kMessage$[esp+2992], edx
	mov	edx, DWORD PTR _eIntrigueType$[esp+2980]
	mov	DWORD PTR _kMessage$[esp+2996], eax
	mov	eax, DWORD PTR _iCityX$[esp+2984]
	mov	DWORD PTR _kMessage$[esp+3016], ecx

; 2642 : 	kMessage.m_iTurnNum = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR __$EHRec$[esp+2992], 0
	mov	DWORD PTR _kMessage$[esp+2984], esi
	mov	DWORD PTR _kMessage$[esp+3004], edx
	mov	DWORD PTR _kMessage$[esp+3012], eax
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn

; 2643 : 	kMessage.m_strSpyName = "";

	push	OFFSET $SG223904
	lea	ecx, DWORD PTR _kMessage$[esp+3024]
	mov	DWORD PTR _kMessage$[esp+3012], eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 2644 : 	if (eDiscoveringPlayer == m_pPlayer->GetID())

	mov	edx, DWORD PTR [edi+1292]
	cmp	esi, DWORD PTR [edx+44]
	mov	ebp, DWORD PTR _uiSpyIndex$[esp+2980]
	mov	ebx, DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	mov	esi, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	jne	$LN101@AddIntrigu

; 2645 : 	{
; 2646 : 		Localization::String str = Localization::Lookup("TXT_KEY_SPY_FULL_NAME");

	lea	eax, DWORD PTR _str$223906[esp+2984]
	push	OFFSET $SG223908
	push	eax
	call	ebx
	add	esp, 8

; 2647 : 		str << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [ebp*8]
	sub	eax, ebp
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3140[esp+2984], eax
	mov	eax, DWORD PTR [ecx+eax+12]
	sub	eax, 0
	mov	BYTE PTR __$EHRec$[esp+2992], 1
	je	SHORT $LN211@AddIntrigu
	sub	eax, 1
	je	SHORT $LN210@AddIntrigu
	sub	eax, 1
	je	SHORT $LN209@AddIntrigu
	mov	eax, OFFSET $SG223392
	jmp	SHORT $LN214@AddIntrigu
$LN209@AddIntrigu:
	mov	eax, OFFSET $SG223391
	jmp	SHORT $LN214@AddIntrigu
$LN210@AddIntrigu:
	mov	eax, OFFSET $SG223389
	jmp	SHORT $LN214@AddIntrigu
$LN211@AddIntrigu:
	mov	eax, OFFSET $SG223387
$LN214@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _str$223906[esp+2988]
	call	esi

; 2648 : 		str << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	add	eax, DWORD PTR tv3140[esp+2984]
	mov	ecx, DWORD PTR [edi+1292]
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _str$223906[esp+2988]
	call	esi

; 2649 : 		kMessage.m_strSpyName = str.toUTF8();

	lea	ecx, DWORD PTR _str$223906[esp+2984]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	lea	ecx, DWORD PTR _kMessage$[esp+3020]
	test	eax, eax
	je	SHORT $LN223@AddIntrigu
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN222@AddIntrigu
$LN223@AddIntrigu:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN222@AddIntrigu:

; 2650 : 	}

	lea	ecx, DWORD PTR _str$223906[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 0
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN101@AddIntrigu:

; 2651 : 	kMessage.m_bShared = false;
; 2652 : 	m_aIntrigueNotificationMessages.push_back(kMessage);

	lea	eax, DWORD PTR _kMessage$[esp+2984]
	push	eax
	lea	ecx, DWORD PTR [edi+1276]
	mov	BYTE PTR _kMessage$[esp+3052], 0
	call	?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back

; 2653 : 
; 2654 : 	if (bShowNotification)

	cmp	BYTE PTR _bShowNotification$[esp+2980], 0
	je	$LN97@AddIntrigu

; 2655 : 	{
; 2656 : 		CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [edi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$223912[esp+2984], eax

; 2657 : 		CvAssertMsg(pNotifications, "No notifications found. This is wrong!");
; 2658 : 		if(!pNotifications)

	test	eax, eax

; 2659 : 		{
; 2660 : 			return;

	je	$LN97@AddIntrigu

; 2661 : 		}
; 2662 : 
; 2663 : 		switch(kMessage.m_iIntrigueType)

	mov	eax, DWORD PTR _kMessage$[esp+3004]
	cmp	eax, 5
	ja	$LN97@AddIntrigu
	jmp	DWORD PTR $LN825@AddIntrigu[eax*4]
$LN96@AddIntrigu:

; 2664 : 		{
; 2665 : 		case INTRIGUE_TYPE_DECEPTION:
; 2666 : 			{
; 2667 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223919[esp+2984]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2668 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223920[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 2
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2669 : 				if(kMessage.m_eTargetPlayer == m_pPlayer->GetID())  // if we found intrigue related to us

	mov	ecx, DWORD PTR [edi+1292]
	mov	eax, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	mov	BYTE PTR __$EHRec$[esp+2992], 3
	cmp	ecx, eax
	jne	$LN95@AddIntrigu

; 2670 : 				{
; 2671 : 					strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_YOU_S");

	lea	edx, DWORD PTR $T263045[esp+2984]
	push	OFFSET $SG223923
	push	edx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223919[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 4
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263045[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 3
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2672 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN94@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN94@AddIntrigu

; 2673 : 					{
; 2674 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2675 : 					}
; 2676 : 					else

	jmp	SHORT $LN785@AddIntrigu
$LN94@AddIntrigu:

; 2677 : 					{
; 2678 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN785@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$223919[esp+2988]
	call	esi

; 2679 : 					}
; 2680 : 
; 2681 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_YOU");

	lea	eax, DWORD PTR $T263048[esp+2984]
	push	OFFSET $SG223929
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 5
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263048[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 3
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2682 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ecx+ebx+12]
	push	edx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi

; 2683 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+1292]
	add	eax, ebx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi

; 2684 : 					CvAssertMsg(pCity, "City should be defined but is null");
; 2685 : 					if(pCity)

	cmp	DWORD PTR _pCity$[esp+2980], 0
	je	SHORT $LN256@AddIntrigu

; 2686 : 					{
; 2687 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi
$LN256@AddIntrigu:

; 2688 : 					}
; 2689 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN91@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN91@AddIntrigu

; 2690 : 					{
; 2691 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
$LN792@AddIntrigu:
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2692 : 					}
; 2693 : 					else

	jmp	$LN786@AddIntrigu
$LN91@AddIntrigu:

; 2694 : 					{
; 2695 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]

; 2696 : 					}

	jmp	$LN787@AddIntrigu
$LN95@AddIntrigu:

; 2697 : 				}
; 2698 : 				else if(kMessage.m_eTargetPlayer == NO_PLAYER)  // if we don't know who the intrigue information is about

	cmp	ecx, -1
	jne	$LN88@AddIntrigu

; 2699 : 				{
; 2700 : 					strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_UNKNOWN_S");

	lea	ecx, DWORD PTR $T263054[esp+2984]
	push	OFFSET $SG223941
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223919[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 6
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263054[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 3
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2701 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN87@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN87@AddIntrigu

; 2702 : 					{
; 2703 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2704 : 					}
; 2705 : 					else

	jmp	SHORT $LN788@AddIntrigu
$LN87@AddIntrigu:

; 2706 : 					{
; 2707 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN788@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$223919[esp+2988]
	call	esi

; 2708 : 					}
; 2709 : 
; 2710 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_UNKNOWN");

	lea	edx, DWORD PTR $T263057[esp+2984]
	push	OFFSET $SG223947
	push	edx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 7
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263057[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 3
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2711 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [eax+ebx+12]
	push	ecx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi

; 2712 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+ebx]
	mov	ecx, DWORD PTR [edi+1292]
	add	eax, ebx
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi

; 2713 : 					CvAssertMsg(pCity, "City should be defined but is null");
; 2714 : 					if(pCity)

	cmp	DWORD PTR _pCity$[esp+2980], 0
	je	SHORT $LN290@AddIntrigu

; 2715 : 					{
; 2716 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi
$LN290@AddIntrigu:

; 2717 : 					}
; 2718 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	$LN91@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	$LN91@AddIntrigu

; 2719 : 					{
; 2720 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2721 : 					}
; 2722 : 					else

	jmp	$LN786@AddIntrigu
$LN88@AddIntrigu:

; 2723 : 					{
; 2724 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();
; 2725 : 					}
; 2726 : 				}
; 2727 : 				else // if we found intrigue related to another player
; 2728 : 				{
; 2729 : 					strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_KNOWN_S");

	lea	eax, DWORD PTR $T263063[esp+2984]
	push	OFFSET $SG223958
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223919[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 8
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263063[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 3
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2730 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN81@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN81@AddIntrigu

; 2731 : 					{
; 2732 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2733 : 					}
; 2734 : 					else

	jmp	SHORT $LN789@AddIntrigu
$LN81@AddIntrigu:

; 2735 : 					{
; 2736 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN789@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$223919[esp+2988]
	call	esi

; 2737 : 					}
; 2738 : 
; 2739 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN79@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN79@AddIntrigu

; 2740 : 					{
; 2741 : 						strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2742 : 					}
; 2743 : 					else

	jmp	SHORT $LN790@AddIntrigu
$LN79@AddIntrigu:

; 2744 : 					{
; 2745 : 						strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN790@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$223919[esp+2988]
	call	esi

; 2746 : 					}
; 2747 : 
; 2748 : 					strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_PLOTTING_AGAINST_KNOWN");

	lea	ecx, DWORD PTR $T263068[esp+2984]
	push	OFFSET $SG223968
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 9
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263068[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 3
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2749 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [edx+ebx+12]
	push	eax
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi

; 2750 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+ebx]
	add	eax, ebx
	push	ecx
	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi

; 2751 : 					CvAssertMsg(pCity, "City should be defined but is null");
; 2752 : 					if(pCity)

	cmp	DWORD PTR _pCity$[esp+2980], 0
	je	SHORT $LN336@AddIntrigu

; 2753 : 					{
; 2754 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi
$LN336@AddIntrigu:

; 2755 : 					}
; 2756 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN76@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN76@AddIntrigu

; 2757 : 					{
; 2758 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2759 : 					}
; 2760 : 					else

	jmp	SHORT $LN791@AddIntrigu
$LN76@AddIntrigu:

; 2761 : 					{
; 2762 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN791@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi

; 2763 : 					}
; 2764 : 
; 2765 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN74@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN74@AddIntrigu

; 2766 : 					{
; 2767 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]

; 2768 : 					}
; 2769 : 					else

	jmp	$LN792@AddIntrigu
$LN74@AddIntrigu:

; 2770 : 					{
; 2771 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
$LN787@AddIntrigu:
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN786@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+2988]
	call	esi

; 2772 : 					}
; 2773 : 				}
; 2774 : 				pNotifications->Add(NOTIFICATION_INTRIGUE_DECEPTION, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, kMessage.m_eTargetPlayer);

	mov	edx, DWORD PTR _kMessage$[esp+2992]
	mov	esi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223919[esp+3000]
	call	esi
	push	eax
	lea	ecx, DWORD PTR _strNotification$223920[esp+3004]
	call	esi
	mov	ecx, DWORD PTR _pNotifications$223912[esp+3004]
	push	eax
	push	507398241				; 1e3e4861H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2775 : 			}

	mov	esi, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strNotification$223920[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 2
	call	esi
	lea	ecx, DWORD PTR _strSummary$223919[esp+2984]

; 2776 : 			break;

	jmp	$LN793@AddIntrigu
$LN72@AddIntrigu:

; 2777 : 		case INTRIGUE_TYPE_BUILDING_ARMY:
; 2778 : 			{
; 2779 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223982[esp+2984]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2780 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$223983[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 10	; 0000000aH
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2781 : 
; 2782 : 				strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_ARMY_S");

	lea	eax, DWORD PTR $T263076[esp+2984]
	push	OFFSET $SG223985
	push	eax
	mov	BYTE PTR __$EHRec$[esp+3000], 11	; 0000000bH
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223982[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 12	; 0000000cH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263076[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 11	; 0000000bH
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2783 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN71@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN71@AddIntrigu

; 2784 : 				{
; 2785 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2786 : 				}
; 2787 : 				else

	jmp	SHORT $LN794@AddIntrigu
$LN71@AddIntrigu:

; 2788 : 				{
; 2789 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN794@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$223982[esp+2988]
	call	esi

; 2790 : 				}
; 2791 : 
; 2792 : 				strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_ARMY");

	lea	ecx, DWORD PTR $T263079[esp+2984]
	push	OFFSET $SG223991
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$223983[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 13	; 0000000dH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263079[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 11	; 0000000bH
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2793 : 				strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [edx+ebx+12]
	push	eax
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$223983[esp+2988]
	call	esi

; 2794 : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+ebx]
	add	eax, ebx
	push	ecx
	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$223983[esp+2988]
	call	esi

; 2795 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN69@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN69@AddIntrigu

; 2796 : 				{
; 2797 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2798 : 				}
; 2799 : 				else

	jmp	SHORT $LN795@AddIntrigu
$LN69@AddIntrigu:

; 2800 : 				{
; 2801 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN795@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strNotification$223983[esp+2988]
	call	esi

; 2802 : 				}
; 2803 : 
; 2804 : 				pNotifications->Add(NOTIFICATION_INTRIGUE_BUILDING_SNEAK_ATTACK_ARMY, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	mov	esi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223982[esp+3000]
	call	esi
	push	eax
	lea	ecx, DWORD PTR _strNotification$223983[esp+3004]
	call	esi
	mov	ecx, DWORD PTR _pNotifications$223912[esp+3004]
	push	eax
	push	402583486				; 17feefbeH
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2805 : 			}

	mov	BYTE PTR __$EHRec$[esp+2992], 10	; 0000000aH

; 2806 : 			break;

	jmp	$LN796@AddIntrigu
$LN67@AddIntrigu:

; 2807 : 		case INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY:
; 2808 : 			{
; 2809 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$223999[esp+2984]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2810 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$224000[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 14	; 0000000eH
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2811 : 
; 2812 : 				strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY_S");

	lea	edx, DWORD PTR $T263084[esp+2984]
	push	OFFSET $SG224002
	push	edx
	mov	BYTE PTR __$EHRec$[esp+3000], 15	; 0000000fH
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$223999[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 16	; 00000010H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263084[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 15	; 0000000fH
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2813 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN66@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN66@AddIntrigu

; 2814 : 				{
; 2815 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2816 : 				}
; 2817 : 				else

	jmp	SHORT $LN797@AddIntrigu
$LN66@AddIntrigu:

; 2818 : 				{
; 2819 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN797@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$223999[esp+2988]
	call	esi

; 2820 : 				}
; 2821 : 
; 2822 : 				strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_BUILDING_AMPHIBIOUS_ARMY");

	lea	eax, DWORD PTR $T263087[esp+2984]
	push	OFFSET $SG224008
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224000[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 17	; 00000011H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263087[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 15	; 0000000fH
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2823 : 				strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ecx+ebx+12]
	push	edx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224000[esp+2988]
	call	esi

; 2824 : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+1292]
	add	eax, ebx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224000[esp+2988]
	call	esi

; 2825 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN64@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN64@AddIntrigu

; 2826 : 				{
; 2827 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2828 : 				}
; 2829 : 				else

	jmp	SHORT $LN798@AddIntrigu
$LN64@AddIntrigu:

; 2830 : 				{
; 2831 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN798@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strNotification$224000[esp+2988]
	call	esi

; 2832 : 				}
; 2833 : 
; 2834 : 				pNotifications->Add(NOTIFICATION_INTRIGUE_BUILDING_SNEAK_ATTACK_AMPHIBIOUS, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	mov	esi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223999[esp+3000]
	call	esi
	push	eax
	lea	ecx, DWORD PTR _strNotification$224000[esp+3004]
	call	esi
	mov	ecx, DWORD PTR _pNotifications$223912[esp+3004]
	push	eax
	push	48950482				; 02eaecd2H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2835 : 			}

	mov	BYTE PTR __$EHRec$[esp+2992], 14	; 0000000eH

; 2836 : 			break;

	jmp	$LN796@AddIntrigu
$LN62@AddIntrigu:

; 2837 : 
; 2838 : 		case INTRIGUE_TYPE_ARMY_SNEAK_ATTACK:
; 2839 : 			{
; 2840 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$224016[esp+2984]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2841 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$224017[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 18	; 00000012H
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2842 : 				NotificationTypes eNotification;
; 2843 : 
; 2844 : 				// targeting me
; 2845 : 				if(kMessage.m_eTargetPlayer == m_pPlayer->GetID())

	mov	ecx, DWORD PTR [edi+1292]
	mov	ecx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _kMessage$[esp+2992]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	cmp	eax, ecx
	jne	$LN61@AddIntrigu

; 2846 : 				{
; 2847 : 					if(pCity)

	cmp	DWORD PTR _pCity$[esp+2980], 0
	je	$LN60@AddIntrigu

; 2848 : 					{
; 2849 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN;
; 2850 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN_S");

	lea	edx, DWORD PTR $T263092[esp+2984]
	push	OFFSET $SG224022
	push	edx
	mov	DWORD PTR _eNotification$224018[esp+2992], 617384028 ; 24cc885cH
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 20	; 00000014H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263092[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2851 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN59@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN59@AddIntrigu

; 2852 : 						{
; 2853 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2854 : 						}
; 2855 : 						else

	jmp	SHORT $LN799@AddIntrigu
$LN59@AddIntrigu:

; 2856 : 						{
; 2857 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN799@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	call	esi

; 2858 : 						}
; 2859 : 						strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	call	esi

; 2860 : 
; 2861 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_KNOWN");

	lea	eax, DWORD PTR $T263096[esp+2984]
	push	OFFSET $SG224029
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 21	; 00000015H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263096[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2862 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ecx+ebx+12]
	push	edx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2863 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+1292]
	add	eax, ebx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2864 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
$LN808@AddIntrigu:
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2865 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey

; 2866 : 					}
; 2867 : 					else

	jmp	$LN800@AddIntrigu
$LN60@AddIntrigu:

; 2868 : 					{
; 2869 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN;
; 2870 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN_S");

	lea	ecx, DWORD PTR $T263101[esp+2984]
	push	OFFSET $SG224036
	push	ecx
	mov	DWORD PTR _eNotification$224018[esp+2992], 2135009779 ; 7f41a9f3H
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 22	; 00000016H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263101[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2871 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN56@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN56@AddIntrigu

; 2872 : 						{
; 2873 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2874 : 						}
; 2875 : 						else

	jmp	SHORT $LN801@AddIntrigu
$LN56@AddIntrigu:

; 2876 : 						{
; 2877 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN801@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	call	esi

; 2878 : 						}
; 2879 : 
; 2880 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_YOU_CITY_UNKNOWN");

	lea	edx, DWORD PTR $T263104[esp+2984]
	push	OFFSET $SG224042
	push	edx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 23	; 00000017H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263104[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2881 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [eax+ebx+12]
	push	ecx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2882 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+ebx]
	add	eax, ebx
	push	edx

; 2883 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();
; 2884 : 					}

	jmp	$LN802@AddIntrigu
$LN61@AddIntrigu:

; 2885 : 				}
; 2886 : 				// targeting somebody else I know
; 2887 : 				else if(kMessage.m_eTargetPlayer != NO_PLAYER && kMessage.m_eTargetPlayer != MAX_MAJOR_CIVS)

	cmp	eax, -1
	je	$LN53@AddIntrigu
	cmp	eax, 22					; 00000016H
	je	$LN53@AddIntrigu

; 2888 : 				{
; 2889 : 					if(pCity)

	cmp	DWORD PTR _pCity$[esp+2980], 0
	je	$LN52@AddIntrigu

; 2890 : 					{
; 2891 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN;
; 2892 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN_S");

	lea	eax, DWORD PTR $T263108[esp+2984]
	push	OFFSET $SG224050
	push	eax
	mov	DWORD PTR _eNotification$224018[esp+2992], -1432015642 ; aaa52ce6H
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 24	; 00000018H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263108[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2893 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN51@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN51@AddIntrigu

; 2894 : 						{
; 2895 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2896 : 						}
; 2897 : 						else

	jmp	SHORT $LN803@AddIntrigu
$LN51@AddIntrigu:

; 2898 : 						{
; 2899 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN803@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	call	esi

; 2900 : 						}
; 2901 : 						strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	call	esi

; 2902 : 
; 2903 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_KNOWN");

	lea	ecx, DWORD PTR $T263112[esp+2984]
	push	OFFSET $SG224057
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 25	; 00000019H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263112[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2904 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [edx+ebx+12]
	push	eax
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2905 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+ebx]
	add	eax, ebx
	push	ecx
	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2906 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2907 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]

; 2908 : 						strNotification << pCity->getNameKey();
; 2909 : 					}
; 2910 : 					else

	jmp	$LN808@AddIntrigu
$LN52@AddIntrigu:

; 2911 : 					{
; 2912 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN;
; 2913 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN_S");

	lea	edx, DWORD PTR $T263118[esp+2984]
	push	OFFSET $SG224065
	push	edx
	mov	DWORD PTR _eNotification$224018[esp+2992], -1328544167 ; b0d00659H
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 26	; 0000001aH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263118[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2914 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN48@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN48@AddIntrigu

; 2915 : 						{
; 2916 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2917 : 						}
; 2918 : 						else

	jmp	SHORT $LN804@AddIntrigu
$LN48@AddIntrigu:

; 2919 : 						{
; 2920 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN804@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	call	esi

; 2921 : 						}
; 2922 : 
; 2923 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN46@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN46@AddIntrigu

; 2924 : 						{
; 2925 : 							strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2926 : 						}
; 2927 : 						else

	jmp	SHORT $LN805@AddIntrigu
$LN46@AddIntrigu:

; 2928 : 						{
; 2929 : 							strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN805@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	call	esi

; 2930 : 						}
; 2931 : 
; 2932 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_KNOWN_CITY_UNKNOWN");

	lea	eax, DWORD PTR $T263123[esp+2984]
	push	OFFSET $SG224075
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 27	; 0000001bH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263123[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2933 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ecx+ebx+12]
	push	edx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2934 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+1292]
	add	eax, ebx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2935 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2936 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getCivilizationDescriptionKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationDescriptionKey

; 2937 : 					}
; 2938 : 				}
; 2939 : 				// targeting an unknown player
; 2940 : 				else

	jmp	$LN800@AddIntrigu
$LN53@AddIntrigu:

; 2941 : 				{
; 2942 : 					eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN;

	mov	DWORD PTR _eNotification$224018[esp+2984], -265092093 ; f0330403H

; 2943 : 					// if the spy wasn't high enough rank to know who was being attacked
; 2944 : 					if (kMessage.m_eTargetPlayer == MAX_MAJOR_CIVS)

	cmp	eax, 22					; 00000016H
	jne	SHORT $LN43@AddIntrigu

; 2945 : 					{
; 2946 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE_S");

	lea	ecx, DWORD PTR $T263128[esp+2984]
	push	OFFSET $SG224083
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 28	; 0000001cH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263128[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2947 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_SOMEONE");

	lea	edx, DWORD PTR $T263129[esp+2984]
	push	OFFSET $SG224085
	push	edx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 29	; 0000001dH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263129[esp+2984]

; 2948 : 					}
; 2949 : 					else

	jmp	SHORT $LN806@AddIntrigu
$LN43@AddIntrigu:

; 2950 : 					{
; 2951 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN_S");

	lea	eax, DWORD PTR $T263130[esp+2984]
	push	OFFSET $SG224088
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 30	; 0000001eH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263130[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2952 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_ARMY_AGAINST_UNKNOWN");

	lea	ecx, DWORD PTR $T263131[esp+2984]
	push	OFFSET $SG224090
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 31	; 0000001fH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263131[esp+2984]
$LN806@AddIntrigu:
	mov	BYTE PTR __$EHRec$[esp+2992], 19	; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2953 : 					}
; 2954 : 
; 2955 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN41@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN41@AddIntrigu

; 2956 : 					{
; 2957 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2958 : 					}
; 2959 : 					else

	jmp	SHORT $LN807@AddIntrigu
$LN41@AddIntrigu:

; 2960 : 					{
; 2961 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN807@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224016[esp+2988]
	call	esi

; 2962 : 					}
; 2963 : 
; 2964 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [edx+ebx+12]
	push	eax
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2965 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+ebx]
	add	eax, ebx
	push	ecx
$LN802@AddIntrigu:
	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2966 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
$LN800@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+2988]
	call	esi

; 2967 : 				}
; 2968 : 
; 2969 : 				pNotifications->Add(eNotification, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, kMessage.m_eTargetPlayer);

	mov	edx, DWORD PTR _kMessage$[esp+2992]
	mov	esi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$224016[esp+3000]
	call	esi
	push	eax
	lea	ecx, DWORD PTR _strNotification$224017[esp+3004]
	call	esi
	mov	ecx, DWORD PTR _pNotifications$223912[esp+3004]
	push	eax
	mov	eax, DWORD PTR _eNotification$224018[esp+3008]
	push	eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 2970 : 			}

	mov	esi, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strNotification$224017[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 18	; 00000012H
	call	esi
	lea	ecx, DWORD PTR _strSummary$224016[esp+2984]

; 2971 : 			break;

	jmp	$LN793@AddIntrigu
$LN39@AddIntrigu:

; 2972 : 		case INTRIGUE_TYPE_AMPHIBIOUS_SNEAK_ATTACK:
; 2973 : 			{
; 2974 : 				Localization::String strSummary;

	lea	ecx, DWORD PTR _strSummary$224099[esp+2984]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2975 : 				Localization::String strNotification;

	lea	ecx, DWORD PTR _strNotification$224100[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 32	; 00000020H
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ

; 2976 : 				NotificationTypes eNotification;
; 2977 : 
; 2978 : 				// targeting me
; 2979 : 				if(kMessage.m_eTargetPlayer == m_pPlayer->GetID())

	mov	ecx, DWORD PTR [edi+1292]
	mov	ecx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _kMessage$[esp+2992]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	cmp	eax, ecx
	jne	$LN38@AddIntrigu

; 2980 : 				{
; 2981 : 					if(pCity)

	cmp	DWORD PTR _pCity$[esp+2980], 0
	je	$LN37@AddIntrigu

; 2982 : 					{
; 2983 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN;
; 2984 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN_S");

	lea	edx, DWORD PTR $T263137[esp+2984]
	push	OFFSET $SG224105
	push	edx
	mov	DWORD PTR _eNotification$224101[esp+2992], -56440186 ; fca2ca86H
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 34	; 00000022H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263137[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2985 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN36@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN36@AddIntrigu

; 2986 : 						{
; 2987 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 2988 : 						}
; 2989 : 						else

	jmp	SHORT $LN809@AddIntrigu
$LN36@AddIntrigu:

; 2990 : 						{
; 2991 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN809@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	call	esi

; 2992 : 						}
; 2993 : 						strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	call	esi

; 2994 : 
; 2995 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_KNOWN");

	lea	eax, DWORD PTR $T263141[esp+2984]
	push	OFFSET $SG224112
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 35	; 00000023H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263141[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 2996 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ecx+ebx+12]
	push	edx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 2997 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+1292]
	add	eax, ebx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 2998 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
$LN818@AddIntrigu:
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 2999 : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey

; 3000 : 					}
; 3001 : 					else

	jmp	$LN810@AddIntrigu
$LN37@AddIntrigu:

; 3002 : 					{
; 3003 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN;
; 3004 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN_S");

	lea	ecx, DWORD PTR $T263146[esp+2984]
	push	OFFSET $SG224119
	push	ecx
	mov	DWORD PTR _eNotification$224101[esp+2992], -1673233228 ; 9c447cb4H
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 36	; 00000024H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263146[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3005 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN33@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN33@AddIntrigu

; 3006 : 						{
; 3007 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3008 : 						}
; 3009 : 						else

	jmp	SHORT $LN811@AddIntrigu
$LN33@AddIntrigu:

; 3010 : 						{
; 3011 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN811@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	call	esi

; 3012 : 						}
; 3013 : 
; 3014 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_YOU_CITY_UNKNOWN");

	lea	edx, DWORD PTR $T263149[esp+2984]
	push	OFFSET $SG224125
	push	edx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 37	; 00000025H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263149[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3015 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [eax+ebx+12]
	push	ecx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3016 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+ebx]
	add	eax, ebx
	push	edx

; 3017 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();
; 3018 : 					}

	jmp	$LN812@AddIntrigu
$LN38@AddIntrigu:

; 3019 : 				}
; 3020 : 				// targeting somebody else I know
; 3021 : 				else if(kMessage.m_eTargetPlayer != NO_PLAYER && kMessage.m_eTargetPlayer != MAX_MAJOR_CIVS)

	cmp	eax, -1
	je	$LN30@AddIntrigu
	cmp	eax, 22					; 00000016H
	je	$LN30@AddIntrigu

; 3022 : 				{
; 3023 : 					if(pCity)

	cmp	DWORD PTR _pCity$[esp+2980], 0
	je	$LN29@AddIntrigu

; 3024 : 					{
; 3025 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN;
; 3026 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN_S");

	lea	eax, DWORD PTR $T263153[esp+2984]
	push	OFFSET $SG224133
	push	eax
	mov	DWORD PTR _eNotification$224101[esp+2992], 1235286433 ; 49a0f9a1H
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 38	; 00000026H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263153[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3027 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN28@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN28@AddIntrigu

; 3028 : 						{
; 3029 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3030 : 						}
; 3031 : 						else

	jmp	SHORT $LN813@AddIntrigu
$LN28@AddIntrigu:

; 3032 : 						{
; 3033 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN813@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	call	esi

; 3034 : 						}
; 3035 : 						strSummary << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	call	esi

; 3036 : 
; 3037 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_KNOWN");

	lea	ecx, DWORD PTR $T263157[esp+2984]
	push	OFFSET $SG224140
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 39	; 00000027H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263157[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3038 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [edx+ebx+12]
	push	eax
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3039 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+ebx]
	add	eax, ebx
	push	ecx
	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3040 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3041 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]

; 3042 : 						strNotification << pCity->getNameKey();
; 3043 : 					}
; 3044 : 					else

	jmp	$LN818@AddIntrigu
$LN29@AddIntrigu:

; 3045 : 					{
; 3046 : 						eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN;
; 3047 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN_S");

	lea	edx, DWORD PTR $T263163[esp+2984]
	push	OFFSET $SG224148
	push	edx
	mov	DWORD PTR _eNotification$224101[esp+2992], -112125243 ; f9511ac5H
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 40	; 00000028H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263163[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3048 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN25@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN25@AddIntrigu

; 3049 : 						{
; 3050 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3051 : 						}
; 3052 : 						else

	jmp	SHORT $LN814@AddIntrigu
$LN25@AddIntrigu:

; 3053 : 						{
; 3054 : 							strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN814@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	call	esi

; 3055 : 						}
; 3056 : 
; 3057 : 						if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eTargetPlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN23@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN23@AddIntrigu

; 3058 : 						{
; 3059 : 							strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3060 : 						}
; 3061 : 						else

	jmp	SHORT $LN815@AddIntrigu
$LN23@AddIntrigu:

; 3062 : 						{
; 3063 : 							strSummary << GET_PLAYER(kMessage.m_eTargetPlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN815@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	call	esi

; 3064 : 						}
; 3065 : 
; 3066 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_KNOWN_CITY_UNKNOWN");

	lea	eax, DWORD PTR $T263168[esp+2984]
	push	OFFSET $SG224158
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 41	; 00000029H
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263168[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3067 : 						strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	ecx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	edx, DWORD PTR [ecx+ebx+12]
	push	edx
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3068 : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+1292]
	add	eax, ebx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3069 : 						strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3070 : 						strNotification << GET_PLAYER(kMessage.m_eTargetPlayer).getCivilizationDescriptionKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2992]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationDescriptionKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationDescriptionKey

; 3071 : 					}
; 3072 : 				}
; 3073 : 				// targeting an unknown player
; 3074 : 				else

	jmp	$LN810@AddIntrigu
$LN30@AddIntrigu:

; 3075 : 				{
; 3076 : 					eNotification = NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN;

	mov	DWORD PTR _eNotification$224101[esp+2984], 772849235 ; 2e10be53H

; 3077 : 
; 3078 : 					// if the spy wasn't high enough rank to know who was being attacked
; 3079 : 					if (kMessage.m_eTargetPlayer == MAX_MAJOR_CIVS)

	cmp	eax, 22					; 00000016H
	jne	SHORT $LN20@AddIntrigu

; 3080 : 					{
; 3081 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE_S");

	lea	ecx, DWORD PTR $T263173[esp+2984]
	push	OFFSET $SG224166
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 42	; 0000002aH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263173[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3082 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_SOMEONE");

	lea	edx, DWORD PTR $T263174[esp+2984]
	push	OFFSET $SG224168
	push	edx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 43	; 0000002bH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263174[esp+2984]

; 3083 : 					}
; 3084 : 					else

	jmp	SHORT $LN816@AddIntrigu
$LN20@AddIntrigu:

; 3085 : 					{
; 3086 : 						strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN_S");

	lea	eax, DWORD PTR $T263175[esp+2984]
	push	OFFSET $SG224171
	push	eax
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 44	; 0000002cH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263175[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3087 : 						strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_SNEAK_ATTACK_AMPHIB_AGAINST_UNKNOWN");

	lea	ecx, DWORD PTR $T263176[esp+2984]
	push	OFFSET $SG224173
	push	ecx
	call	ebx
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	mov	BYTE PTR __$EHRec$[esp+2996], 45	; 0000002dH
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T263176[esp+2984]
$LN816@AddIntrigu:
	mov	BYTE PTR __$EHRec$[esp+2992], 33	; 00000021H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 3088 : 					}
; 3089 : 
; 3090 : 					if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN18@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN18@AddIntrigu

; 3091 : 					{
; 3092 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3093 : 					}
; 3094 : 					else

	jmp	SHORT $LN817@AddIntrigu
$LN18@AddIntrigu:

; 3095 : 					{
; 3096 : 						strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN817@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224099[esp+2988]
	call	esi

; 3097 : 					}
; 3098 : 
; 3099 : 					strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	edx, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [edx+ebx+12]
	push	eax
	mov	ecx, edi
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3100 : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+ebx]
	add	eax, ebx
	push	ecx
$LN812@AddIntrigu:
	mov	ecx, DWORD PTR [edi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3101 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getCivilizationAdjectiveKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getCivilizationAdjectiveKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationAdjectiveKey
$LN810@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+2988]
	call	esi

; 3102 : 				}
; 3103 : 
; 3104 : 				pNotifications->Add(eNotification, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, kMessage.m_eTargetPlayer);

	mov	edx, DWORD PTR _kMessage$[esp+2992]
	mov	esi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$224099[esp+3000]
	call	esi
	push	eax
	lea	ecx, DWORD PTR _strNotification$224100[esp+3004]
	call	esi
	mov	ecx, DWORD PTR _pNotifications$223912[esp+3004]
	push	eax
	mov	eax, DWORD PTR _eNotification$224101[esp+3008]
	push	eax
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 3105 : 			}

	mov	esi, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strNotification$224100[esp+2984]
	mov	BYTE PTR __$EHRec$[esp+2992], 32	; 00000020H
	call	esi
	lea	ecx, DWORD PTR _strSummary$224099[esp+2984]

; 3106 : 			break;

	jmp	$LN793@AddIntrigu
$LN16@AddIntrigu:

; 3107 : 		case INTRIGUE_TYPE_CONSTRUCTING_WONDER:
; 3108 : 			{
; 3109 : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_CONSTRUCT_WONDER_S");

	lea	ecx, DWORD PTR _strSummary$224182[esp+2984]
	push	OFFSET $SG224184
	push	ecx
	call	ebx
	add	esp, 8

; 3110 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	BYTE PTR __$EHRec$[esp+2992], 46	; 0000002eH
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN15@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN15@AddIntrigu

; 3111 : 				{
; 3112 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3113 : 				}
; 3114 : 				else

	jmp	SHORT $LN819@AddIntrigu
$LN15@AddIntrigu:

; 3115 : 				{
; 3116 : 					strSummary << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN819@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strSummary$224182[esp+2988]
	call	esi

; 3117 : 				}
; 3118 : 				
; 3119 : 				if (kMessage.m_eBuilding != NO_BUILDING)

	mov	eax, DWORD PTR _kMessage$[esp+2996]
	cmp	eax, -1
	je	SHORT $LN13@AddIntrigu

; 3120 : 				{
; 3121 : 					CvBuildingEntry* pBuildingInfo = GC.getBuildingInfo(kMessage.m_eBuilding);

	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo

; 3122 : 					CvAssertMsg(pBuildingInfo, "pBuildingInfo is null");
; 3123 : 					if (pBuildingInfo)
; 3124 : 					{
; 3125 : 						strSummary << pBuildingInfo->GetTextKey();
; 3126 : 					}
; 3127 : 				}

	jmp	SHORT $LN821@AddIntrigu
$LN13@AddIntrigu:

; 3128 : 				else if (kMessage.m_eProject != NO_PROJECT)

	mov	eax, DWORD PTR _kMessage$[esp+3000]
	cmp	eax, -1
	je	SHORT $LN744@AddIntrigu

; 3129 : 				{
; 3130 : 					CvProjectEntry* pProjectInfo = GC.getProjectInfo(kMessage.m_eProject);

	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
$LN821@AddIntrigu:

; 3131 : 					CvAssertMsg(pProjectInfo, "pProjectInfo is null");
; 3132 : 					if (pProjectInfo)

	test	eax, eax
	je	SHORT $LN744@AddIntrigu

; 3133 : 					{
; 3134 : 						strSummary << pProjectInfo->GetTextKey();

	mov	ecx, eax
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$224182[esp+2988]
	call	esi
$LN744@AddIntrigu:

; 3135 : 					}
; 3136 : 				}
; 3137 : 
; 3138 : 				Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_INTRIGUE_CONSTRUCT_WONDER");

	lea	edx, DWORD PTR _strNotification$224198[esp+2984]
	push	OFFSET $SG224200
	push	edx
	call	ebx
	add	esp, 8

; 3139 : 				strNotification << GetSpyRankName(m_aSpyList[uiSpyIndex].m_eRank);

	mov	eax, DWORD PTR [edi]
	lea	ebx, DWORD PTR [ebp*8]
	sub	ebx, ebp
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [eax+ebx+12]
	push	ecx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+2996], 47	; 0000002fH
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$224198[esp+2988]
	call	esi

; 3140 : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName);

	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+ebx]
	mov	ecx, DWORD PTR [edi+1292]
	add	eax, ebx
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$224198[esp+2988]
	call	esi

; 3141 : 				if(GC.getGame().isGameMultiPlayer() && GET_PLAYER(kMessage.m_eSourcePlayer).isHuman())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isGameMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isGameMultiPlayer
	test	al, al
	je	SHORT $LN8@AddIntrigu
	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	je	SHORT $LN8@AddIntrigu

; 3142 : 				{
; 3143 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNickName();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNickName@CvPlayer@@QBEQBDXZ		; CvPlayer::getNickName

; 3144 : 				}
; 3145 : 				else

	jmp	SHORT $LN822@AddIntrigu
$LN8@AddIntrigu:

; 3146 : 				{
; 3147 : 					strNotification << GET_PLAYER(kMessage.m_eSourcePlayer).getNameKey();

	mov	ecx, DWORD PTR _kMessage$[esp+2988]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?getNameKey@CvPlayer@@QBEPBDXZ		; CvPlayer::getNameKey
$LN822@AddIntrigu:
	push	eax
	lea	ecx, DWORD PTR _strNotification$224198[esp+2988]
	call	esi

; 3148 : 				}
; 3149 : 
; 3150 : 				if (kMessage.m_eBuilding != NO_BUILDING)

	mov	eax, DWORD PTR _kMessage$[esp+2996]
	cmp	eax, -1
	je	SHORT $LN6@AddIntrigu

; 3151 : 				{
; 3152 : 					CvBuildingEntry* pBuildingInfo = GC.getBuildingInfo(kMessage.m_eBuilding);

	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo

; 3153 : 					CvAssertMsg(pBuildingInfo, "pBuildingInfo is null");
; 3154 : 					if (pBuildingInfo)
; 3155 : 					{
; 3156 : 						strNotification << pBuildingInfo->GetTextKey();
; 3157 : 					}
; 3158 : 				}

	jmp	SHORT $LN824@AddIntrigu
$LN6@AddIntrigu:

; 3159 : 				else if (kMessage.m_eProject != NO_PROJECT)

	mov	eax, DWORD PTR _kMessage$[esp+3000]
	cmp	eax, -1
	je	SHORT $LN782@AddIntrigu

; 3160 : 				{
; 3161 : 					CvProjectEntry* pProjectInfo = GC.getProjectInfo(kMessage.m_eProject);

	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
$LN824@AddIntrigu:

; 3162 : 					CvAssertMsg(pProjectInfo, "pProjectInfo is null");
; 3163 : 					if (pProjectInfo)

	test	eax, eax
	je	SHORT $LN782@AddIntrigu

; 3164 : 					{
; 3165 : 						strNotification << pProjectInfo->GetTextKey();

	mov	ecx, eax
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$224198[esp+2988]
	call	esi
$LN782@AddIntrigu:

; 3166 : 					}
; 3167 : 				}				
; 3168 : 
; 3169 : 				if (pCity)

	mov	ecx, DWORD PTR _pCity$[esp+2980]
	test	ecx, ecx
	je	SHORT $LN770@AddIntrigu

; 3170 : 				{
; 3171 : 					strNotification << pCity->getNameKey();

	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$224198[esp+2988]
	call	esi
$LN770@AddIntrigu:

; 3172 : 				}
; 3173 : 
; 3174 : 				pNotifications->Add(NOTIFICATION_INTRIGUE_CONSTRUCTING_WONDER, strNotification.toUTF8(), strSummary.toUTF8(), kMessage.m_iCityX, kMessage.m_iCityY, -1);

	mov	eax, DWORD PTR _kMessage$[esp+3016]
	mov	ecx, DWORD PTR _kMessage$[esp+3012]
	mov	esi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	-1
	push	eax
	push	ecx
	lea	ecx, DWORD PTR _strSummary$224182[esp+3000]
	call	esi
	push	eax
	lea	ecx, DWORD PTR _strNotification$224198[esp+3004]
	call	esi
	mov	ecx, DWORD PTR _pNotifications$223912[esp+3004]
	push	eax
	push	1527505427				; 5b0be213H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 3175 : 			}

	mov	BYTE PTR __$EHRec$[esp+2992], 46	; 0000002eH
$LN796@AddIntrigu:
	mov	esi, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strNotification$224198[esp+2984]
	call	esi
	lea	ecx, DWORD PTR _strSummary$224182[esp+2984]
$LN793@AddIntrigu:
	mov	BYTE PTR __$EHRec$[esp+2992], 0
	call	esi
$LN97@AddIntrigu:

; 3176 : 			break;
; 3177 : 		}
; 3178 : 	}
; 3179 : }

	lea	ecx, DWORD PTR _kMessage$[esp+3020]
	mov	DWORD PTR __$EHRec$[esp+2992], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN113@AddIntrigu:
	mov	ecx, DWORD PTR __$EHRec$[esp+2984]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 2968				; 00000b98H
	ret	36					; 00000024H
	npad	3
$LN825@AddIntrigu:
	DD	$LN96@AddIntrigu
	DD	$LN72@AddIntrigu
	DD	$LN67@AddIntrigu
	DD	$LN62@AddIntrigu
	DD	$LN39@AddIntrigu
	DD	$LN16@AddIntrigu
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$0:
	lea	ecx, DWORD PTR _kMessage$[ebp]
	jmp	??1IntrigueNotificationMessage@@QAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$1:
	lea	ecx, DWORD PTR _str$223906[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$2:
	lea	ecx, DWORD PTR _strSummary$223919[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$3:
	lea	ecx, DWORD PTR _strNotification$223920[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$4:
	lea	ecx, DWORD PTR $T263045[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$5:
	lea	ecx, DWORD PTR $T263048[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$6:
	lea	ecx, DWORD PTR $T263054[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$7:
	lea	ecx, DWORD PTR $T263057[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$8:
	lea	ecx, DWORD PTR $T263063[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$9:
	lea	ecx, DWORD PTR $T263068[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$10:
	lea	ecx, DWORD PTR _strSummary$223982[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$11:
	lea	ecx, DWORD PTR _strNotification$223983[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$12:
	lea	ecx, DWORD PTR $T263076[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$13:
	lea	ecx, DWORD PTR $T263079[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$14:
	lea	ecx, DWORD PTR _strSummary$223999[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$15:
	lea	ecx, DWORD PTR _strNotification$224000[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$16:
	lea	ecx, DWORD PTR $T263084[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$17:
	lea	ecx, DWORD PTR $T263087[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$18:
	lea	ecx, DWORD PTR _strSummary$224016[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$19:
	lea	ecx, DWORD PTR _strNotification$224017[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$20:
	lea	ecx, DWORD PTR $T263092[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$21:
	lea	ecx, DWORD PTR $T263096[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$22:
	lea	ecx, DWORD PTR $T263101[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$23:
	lea	ecx, DWORD PTR $T263104[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$24:
	lea	ecx, DWORD PTR $T263108[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$25:
	lea	ecx, DWORD PTR $T263112[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$26:
	lea	ecx, DWORD PTR $T263118[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$27:
	lea	ecx, DWORD PTR $T263123[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$28:
	lea	ecx, DWORD PTR $T263128[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$29:
	lea	ecx, DWORD PTR $T263129[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$30:
	lea	ecx, DWORD PTR $T263130[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$31:
	lea	ecx, DWORD PTR $T263131[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$32:
	lea	ecx, DWORD PTR _strSummary$224099[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$33:
	lea	ecx, DWORD PTR _strNotification$224100[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$34:
	lea	ecx, DWORD PTR $T263137[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$35:
	lea	ecx, DWORD PTR $T263141[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$36:
	lea	ecx, DWORD PTR $T263146[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$37:
	lea	ecx, DWORD PTR $T263149[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$38:
	lea	ecx, DWORD PTR $T263153[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$39:
	lea	ecx, DWORD PTR $T263157[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$40:
	lea	ecx, DWORD PTR $T263163[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$41:
	lea	ecx, DWORD PTR $T263168[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$42:
	lea	ecx, DWORD PTR $T263173[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$43:
	lea	ecx, DWORD PTR $T263174[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$44:
	lea	ecx, DWORD PTR $T263175[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$45:
	lea	ecx, DWORD PTR $T263176[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$46:
	lea	ecx, DWORD PTR _strSummary$224182[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z$47:
	lea	ecx, DWORD PTR _strNotification$224198[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__ehhandler$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ENDP ; CvPlayerEspionage::AddIntrigueMessage
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4BuildingTypes@@@Z:PROC ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z:PROC ; operator>>
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4TechTypes@@@Z:PROC ; operator>>
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$1
__ehfuncinfo$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z
_TEXT	SEGMENT
tv1339 = -196						; size = 4
tv1316 = -196						; size = 4
_iSpyNameIndex$224667 = -196				; size = 4
_i$224655 = -196					; size = 4
_i$264840 = -192					; size = 4
$T264776 = -192						; size = 4
_iCiv$224694 = -192					; size = 4
_i$224663 = -192					; size = 4
_iProjectType$224718 = -188				; size = 4
_i$224699 = -188					; size = 4
_uiCiv$224669 = -188					; size = 4
_iNumEntries$224698 = -184				; size = 4
_uiNumTechs$224674 = -184				; size = 4
_iNumMessages$ = -180					; size = 4
$T265123 = -176						; size = 1
_iNumTechsToSteal$224687 = -176				; size = 4
_eTech$224679 = -176					; size = 4
_uiNumCivs$ = -172					; size = 4
_kMessage$224709 = -168					; size = 20
_aTechList$224673 = -168				; size = 20
_iMaxTechCostEntries$ = -148				; size = 4
_iNumCivs$ = -144					; size = 4
_iNumSpyNames$ = -140					; size = 4
_iNumSpies$ = -136					; size = 4
__Cat$265126 = -132					; size = 1
$T264823 = -132						; size = 4
_kHeistLocation$224703 = -132				; size = 8
_kTempSpy$ = -124					; size = 28
$T264850 = -96						; size = 4
_uiVersion$ = -92					; size = 4
_kMessage$224714 = -88					; size = 68
__$EHRec$ = -12						; size = 12
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z PROC ; operator>>, COMDAT

; 3708 : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	-1
	push	__ehhandler$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 184				; 000000b8H
	push	ebx

; 3709 : 	uint uiVersion;
; 3710 : 	loadFrom >> uiVersion;

	mov	ebx, DWORD PTR _loadFrom$[ebp]
	push	esi
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+208]
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 3711 : 
; 3712 : 	int iNumSpies;
; 3713 : 	loadFrom >> iNumSpies;

	lea	ecx, DWORD PTR _iNumSpies$[esp+208]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3714 : 
; 3715 : 	CvEspionageSpy kTempSpy;

	or	eax, -1
	xor	edi, edi

; 3716 : 
; 3717 : 	for(int i = 0; i < iNumSpies; i++)

	cmp	DWORD PTR _iNumSpies$[esp+208], edi
	mov	DWORD PTR _kTempSpy$[esp+208], eax
	mov	DWORD PTR _kTempSpy$[esp+212], eax
	mov	DWORD PTR _kTempSpy$[esp+216], eax
	mov	DWORD PTR _kTempSpy$[esp+220], 3
	mov	DWORD PTR _kTempSpy$[esp+224], 9
	mov	DWORD PTR _kTempSpy$[esp+228], edi
	mov	BYTE PTR _kTempSpy$[esp+232], 0
	mov	BYTE PTR _kTempSpy$[esp+233], 1
	mov	DWORD PTR _i$224655[esp+208], edi
	jle	SHORT $LN315@operator@9
$LL30@operator@9:

; 3718 : 	{
; 3719 : 		loadFrom >> kTempSpy;

	lea	edx, DWORD PTR _kTempSpy$[esp+208]
	push	edx
	push	ebx
	call	??5@YAAAVFDataStream@@AAV0@AAVCvEspionageSpy@@@Z ; operator>>

; 3720 : 		writeTo.m_aSpyList.push_back(kTempSpy);

	mov	esi, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR [esi+8]
	add	esp, 8
	mov	BYTE PTR [esi+236], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN41@operator@9
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@VCvEspionageSpy@@$07$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvEspionageSpy,8,0,297,0>::GrowSize
$LN41@operator@9:
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	edi, DWORD PTR [edx+ecx*4]
	test	edi, edi
	je	SHORT $LN44@operator@9
	mov	ecx, 7
	lea	esi, DWORD PTR _kTempSpy$[esp+208]
	rep movsd
	mov	esi, DWORD PTR _writeTo$[ebp]
$LN44@operator@9:
	mov	eax, DWORD PTR _i$224655[esp+208]
	inc	DWORD PTR [esi+4]
	inc	eax
	cmp	eax, DWORD PTR _iNumSpies$[esp+208]
	mov	DWORD PTR _i$224655[esp+208], eax
	jl	SHORT $LL30@operator@9

; 3716 : 
; 3717 : 	for(int i = 0; i < iNumSpies; i++)

	xor	edi, edi
	jmp	SHORT $LN28@operator@9
$LN315@operator@9:
	mov	esi, DWORD PTR _writeTo$[ebp]
$LN28@operator@9:

; 3721 : 	}
; 3722 : 
; 3723 : 	int iNumSpyNames;
; 3724 : 	loadFrom >> iNumSpyNames;

	lea	eax, DWORD PTR _iNumSpyNames$[esp+208]
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3725 : 	for(int i = 0; i < iNumSpyNames; i++)

	cmp	DWORD PTR _iNumSpyNames$[esp+208], edi
	mov	DWORD PTR _i$224663[esp+208], edi
	jle	SHORT $LN25@operator@9
	lea	edi, DWORD PTR [esi+240]
$LN27@operator@9:

; 3726 : 	{
; 3727 : 		int iSpyNameIndex;
; 3728 : 		loadFrom >> iSpyNameIndex;

	lea	ecx, DWORD PTR _iSpyNameIndex$224667[esp+208]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3729 : 		writeTo.m_aiSpyListNameOrder.push_back(iSpyNameIndex);

	mov	edx, DWORD PTR [edi+4]
	test	edx, edx
	jne	SHORT $LN60@operator@9
	xor	eax, eax
	jmp	SHORT $LN61@operator@9
$LN60@operator@9:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, edx
	sar	eax, 2
$LN61@operator@9:
	mov	ecx, DWORD PTR [edi+8]
	mov	edi, ecx
	sub	edi, edx
	sar	edi, 2
	cmp	edi, eax
	lea	edi, DWORD PTR [esi+240]
	jae	SHORT $LN53@operator@9
	mov	edx, DWORD PTR _iSpyNameIndex$224667[esp+208]
	mov	DWORD PTR [ecx], edx
	add	ecx, 4
	mov	DWORD PTR [edi+8], ecx
	jmp	SHORT $LN26@operator@9
$LN53@operator@9:
	lea	eax, DWORD PTR _iSpyNameIndex$224667[esp+208]
	push	eax
	push	1
	push	ecx
	mov	ecx, edi
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
$LN26@operator@9:
	mov	eax, DWORD PTR _i$224663[esp+208]
	inc	eax
	cmp	eax, DWORD PTR _iNumSpyNames$[esp+208]
	mov	DWORD PTR _i$224663[esp+208], eax
	jl	SHORT $LN27@operator@9

; 3725 : 	for(int i = 0; i < iNumSpyNames; i++)

	xor	edi, edi
$LN25@operator@9:

; 3730 : 	}
; 3731 : 
; 3732 : 	loadFrom >> writeTo.m_iSpyListNameOrderIndex;

	lea	ecx, DWORD PTR [esi+256]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3733 : 
; 3734 : 	uint uiNumCivs;
; 3735 : 	loadFrom >> uiNumCivs;

	lea	edx, DWORD PTR _uiNumCivs$[esp+208]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 3736 : 	for(uint uiCiv = 0; uiCiv < uiNumCivs; uiCiv++)

	mov	DWORD PTR _uiCiv$224669[esp+208], edi
	cmp	DWORD PTR _uiNumCivs$[esp+208], edi
	jbe	$LN22@operator@9

; 3730 : 	}
; 3731 : 
; 3732 : 	loadFrom >> writeTo.m_iSpyListNameOrderIndex;

	mov	DWORD PTR tv1316[esp+208], edi
	npad	11
$LL24@operator@9:

; 3737 : 	{
; 3738 : 		TechList aTechList;

	lea	eax, DWORD PTR _aTechList$224673[esp+220]
	mov	DWORD PTR _aTechList$224673[esp+212], edi
	mov	DWORD PTR _aTechList$224673[esp+216], 1
	mov	DWORD PTR _aTechList$224673[esp+208], eax

; 3739 : 		writeTo.m_aaPlayerStealableTechList.push_back(aTechList);

	add	esi, 260				; 00000104H
	mov	DWORD PTR __$EHRec$[esp+216], edi
	mov	edi, esi
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR $T264850[esp+208], edi
	mov	BYTE PTR [edi+452], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN125@operator@9
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@V?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<FStaticVector<enum TechTypes,1,0,297,0>,22,0,297,0>::GrowSize
$LN125@operator@9:
	mov	eax, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T264823[esp+208], esi
	xor	eax, eax
	mov	BYTE PTR __$EHRec$[esp+216], 1
	cmp	esi, eax
	je	$LN141@operator@9
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR _aTechList$224673[esp+212]
	mov	DWORD PTR [esi+4], eax
	mov	ecx, DWORD PTR _aTechList$224673[esp+216]
	mov	DWORD PTR [esi+8], ecx
	mov	eax, DWORD PTR _aTechList$224673[esp+216]
	mov	DWORD PTR $T264776[esp+208], eax
	cmp	eax, 1
	jbe	SHORT $LN138@operator@9
	push	798					; 0000031eH
	push	OFFSET ??_C@_0HM@IMGGMCHG@c?3?2users?2enormousapplepie?2deskto@
	lea	edx, DWORD PTR [eax*4]
	push	4
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	mov	ecx, DWORD PTR $T264776[esp+224]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+8], ecx
	jmp	SHORT $LN137@operator@9
$LN138@operator@9:
	lea	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 1
$LN137@operator@9:
	mov	DWORD PTR [esi], eax
	mov	edx, DWORD PTR _aTechList$224673[esp+212]
	xor	ecx, ecx
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR _i$264840[esp+208], ecx
	cmp	DWORD PTR _aTechList$224673[esp+212], ecx
	jbe	SHORT $LN141@operator@9
	npad	10
$LL143@operator@9:
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [ecx*4]
	add	eax, edx
	je	SHORT $LN142@operator@9
	mov	ecx, DWORD PTR _aTechList$224673[esp+208]
	mov	edx, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _i$264840[esp+208]
	mov	DWORD PTR [eax], edx
$LN142@operator@9:
	inc	ecx
	mov	DWORD PTR _i$264840[esp+208], ecx
	cmp	ecx, DWORD PTR [esi+4]
	jb	SHORT $LL143@operator@9
$LN141@operator@9:
	inc	DWORD PTR [edi+4]

; 3740 : 
; 3741 : 		uint uiNumTechs;
; 3742 : 		loadFrom >> uiNumTechs;

	lea	eax, DWORD PTR _uiNumTechs$224674[esp+208]
	push	eax
	mov	ecx, ebx
	mov	BYTE PTR __$EHRec$[esp+220], 0
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 3743 : 		for(uint uiTech = 0; uiTech < uiNumTechs; uiTech++)

	xor	edi, edi
	cmp	DWORD PTR _uiNumTechs$224674[esp+208], edi
	jbe	SHORT $LN19@operator@9
$LL21@operator@9:

; 3744 : 		{
; 3745 : 			TechTypes eTech;
; 3746 : 			loadFrom >> eTech;

	lea	ecx, DWORD PTR _eTech$224679[esp+208]
	push	ecx
	push	ebx
	call	??5@YAAAVFDataStream@@AAV0@AAW4TechTypes@@@Z ; operator>>

; 3747 : 			writeTo.m_aaPlayerStealableTechList[uiCiv].push_back(eTech);

	mov	eax, DWORD PTR _writeTo$[ebp]
	mov	esi, DWORD PTR [eax+260]
	add	esi, DWORD PTR tv1316[esp+216]
	add	eax, 260				; 00000104H
	mov	eax, DWORD PTR [esi+8]
	add	esp, 8
	mov	BYTE PTR [esi+16], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN156@operator@9
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum TechTypes,1,0,297,0>::GrowSize
$LN156@operator@9:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*4]
	test	eax, eax
	je	SHORT $LN159@operator@9
	mov	ecx, DWORD PTR _eTech$224679[esp+208]
	mov	DWORD PTR [eax], ecx
$LN159@operator@9:
	inc	DWORD PTR [esi+4]
	inc	edi
	cmp	edi, DWORD PTR _uiNumTechs$224674[esp+208]
	jb	SHORT $LL21@operator@9
$LN19@operator@9:

; 3748 : 		}
; 3749 : 	}

	mov	eax, DWORD PTR _aTechList$224673[esp+208]
	lea	edx, DWORD PTR _aTechList$224673[esp+220]
	mov	DWORD PTR __$EHRec$[esp+216], -1
	cmp	eax, edx
	je	SHORT $LN23@operator@9
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN23@operator@9:
	mov	eax, DWORD PTR _uiCiv$224669[esp+208]
	add	DWORD PTR tv1316[esp+208], 20		; 00000014H
	mov	esi, DWORD PTR _writeTo$[ebp]
	inc	eax
	xor	edi, edi
	mov	DWORD PTR _uiCiv$224669[esp+208], eax
	cmp	eax, DWORD PTR _uiNumCivs$[esp+208]
	jb	$LL24@operator@9
$LN22@operator@9:

; 3750 : 
; 3751 : 
; 3752 : 	loadFrom >> uiNumCivs;

	lea	eax, DWORD PTR _uiNumCivs$[esp+208]
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 3753 : 	for(uint uiCiv = 0; uiCiv < uiNumCivs; uiCiv++)

	cmp	DWORD PTR _uiNumCivs$[esp+208], edi
	jbe	SHORT $LN16@operator@9
	add	esi, 716				; 000002ccH
$LL18@operator@9:

; 3754 : 	{
; 3755 : 		int iNumTechsToSteal;
; 3756 : 		loadFrom >> iNumTechsToSteal;

	lea	ecx, DWORD PTR _iNumTechsToSteal$224687[esp+208]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3757 : 		writeTo.m_aiNumTechsToStealList.push_back(iNumTechsToSteal);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+100], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN181@operator@9
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0BG@$0A@$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,22,0,297,0>::GrowSize
$LN181@operator@9:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*4]
	test	eax, eax
	je	SHORT $LN184@operator@9
	mov	ecx, DWORD PTR _iNumTechsToSteal$224687[esp+208]
	mov	DWORD PTR [eax], ecx
$LN184@operator@9:
	inc	DWORD PTR [esi+4]
	inc	edi
	cmp	edi, DWORD PTR _uiNumCivs$[esp+208]
	jb	SHORT $LL18@operator@9
	mov	esi, DWORD PTR _writeTo$[ebp]
	xor	edi, edi
$LN16@operator@9:

; 3758 : 	}
; 3759 : 
; 3760 : 	int iMaxTechCostEntries;
; 3761 : 	loadFrom >> iMaxTechCostEntries;

	lea	edx, DWORD PTR _iMaxTechCostEntries$[esp+208]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3762 : 	for(int i = 0; i < iMaxTechCostEntries; i++)

	cmp	DWORD PTR _iMaxTechCostEntries$[esp+208], 0
	jle	SHORT $LN13@operator@9
	lea	eax, DWORD PTR [esi+820]
	mov	DWORD PTR tv1339[esp+208], eax
$LN15@operator@9:

; 3763 : 	{
; 3764 : 		loadFrom >> writeTo.m_aiMaxTechCost[i];

	mov	ecx, DWORD PTR tv1339[esp+208]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read
	add	DWORD PTR tv1339[esp+208], 4
	inc	edi
	cmp	edi, DWORD PTR _iMaxTechCostEntries$[esp+208]
	jl	SHORT $LN15@operator@9
$LN13@operator@9:

; 3765 : 	}
; 3766 : 
; 3767 : 
; 3768 : 	int iNumCivs;
; 3769 : 	loadFrom >> iNumCivs;

	lea	edx, DWORD PTR _iNumCivs$[esp+208]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3770 : 	for(int iCiv = 0; iCiv < iNumCivs; iCiv++)

	cmp	DWORD PTR _iNumCivs$[esp+208], 0
	mov	DWORD PTR _iCiv$224694[esp+208], 0
	jle	$LN10@operator@9

; 3765 : 	}
; 3766 : 
; 3767 : 
; 3768 : 	int iNumCivs;
; 3769 : 	loadFrom >> iNumCivs;

	add	esi, 908				; 0000038cH
$LL12@operator@9:

; 3771 : 	{
; 3772 : 		int iNumEntries;
; 3773 : 		loadFrom >> iNumEntries;

	lea	eax, DWORD PTR _iNumEntries$224698[esp+208]
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3774 : 		for(int i = 0; i < iNumEntries; i++)

	cmp	DWORD PTR _iNumEntries$224698[esp+208], 0
	mov	DWORD PTR _i$224699[esp+208], 0
	jle	SHORT $LN11@operator@9
$LN9@operator@9:

; 3775 : 		{
; 3776 : 			HeistLocation kHeistLocation;
; 3777 : 			loadFrom >> kHeistLocation.m_iX;

	lea	ecx, DWORD PTR _kHeistLocation$224703[esp+208]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3778 : 			loadFrom >> kHeistLocation.m_iY;

	lea	edx, DWORD PTR _kHeistLocation$224703[esp+212]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3779 : 			writeTo.m_aHeistLocations[iCiv].push_back(kHeistLocation);

	mov	ecx, DWORD PTR [esi+4]
	test	ecx, ecx
	jne	SHORT $LN212@operator@9
	xor	eax, eax
	jmp	SHORT $LN213@operator@9
$LN212@operator@9:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, ecx
	sar	eax, 3
$LN213@operator@9:
	mov	edi, DWORD PTR [esi+8]
	mov	edx, edi
	sub	edx, ecx
	sar	edx, 3
	cmp	edx, eax
	jae	SHORT $LN205@operator@9
	mov	ecx, DWORD PTR __Cat$265126[esp+208]
	mov	BYTE PTR $T265123[esp+208], 0
	mov	eax, DWORD PTR $T265123[esp+208]
	push	eax
	push	ecx
	push	esi
	lea	edx, DWORD PTR _kHeistLocation$224703[esp+220]
	push	edx
	push	1
	push	edi
	call	??$_Uninit_fill_n@PAUHeistLocation@@IU1@V?$allocator@UHeistLocation@@@std@@@std@@YAXPAUHeistLocation@@IABU1@AAV?$allocator@UHeistLocation@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<HeistLocation *,unsigned int,HeistLocation,std::allocator<HeistLocation> >
	add	esp, 24					; 00000018H
	add	edi, 8
	mov	DWORD PTR [esi+8], edi
	jmp	SHORT $LN8@operator@9
$LN205@operator@9:
	lea	eax, DWORD PTR _kHeistLocation$224703[esp+208]
	push	eax
	push	1
	push	edi
	mov	ecx, esi
	call	?_Insert_n@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@IAEXV?$_Vector_const_iterator@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@2@IABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::_Insert_n
$LN8@operator@9:
	mov	eax, DWORD PTR _i$224699[esp+208]
	inc	eax
	cmp	eax, DWORD PTR _iNumEntries$224698[esp+208]
	mov	DWORD PTR _i$224699[esp+208], eax
	jl	SHORT $LN9@operator@9
$LN11@operator@9:

; 3770 : 	for(int iCiv = 0; iCiv < iNumCivs; iCiv++)

	mov	eax, DWORD PTR _iCiv$224694[esp+208]
	inc	eax
	add	esi, 16					; 00000010H
	cmp	eax, DWORD PTR _iNumCivs$[esp+208]
	mov	DWORD PTR _iCiv$224694[esp+208], eax
	jl	$LL12@operator@9
	mov	esi, DWORD PTR _writeTo$[ebp]
$LN10@operator@9:

; 3780 : 		}
; 3781 : 	}
; 3782 : 
; 3783 : 	int iNumMessages;
; 3784 : 	loadFrom >> iNumMessages;

	lea	ecx, DWORD PTR _iNumMessages$[esp+208]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3785 : 	for(int i = 0; i < iNumMessages; i++)

	xor	edi, edi
	cmp	DWORD PTR _iNumMessages$[esp+208], edi
	jle	SHORT $LN4@operator@9
	npad	6
$LL6@operator@9:

; 3786 : 	{
; 3787 : 		SpyNotificationMessage kMessage;
; 3788 : 		loadFrom >> kMessage.m_iCityX;

	lea	edx, DWORD PTR _kMessage$224709[esp+208]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3789 : 		loadFrom >> kMessage.m_iCityY;

	lea	eax, DWORD PTR _kMessage$224709[esp+212]
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3790 : 		loadFrom >> kMessage.m_eAttackingPlayer;

	lea	ecx, DWORD PTR _kMessage$224709[esp+216]
	push	ecx
	push	ebx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>
	add	esp, 8

; 3791 : 		loadFrom >> kMessage.m_iSpyResult;

	lea	edx, DWORD PTR _kMessage$224709[esp+220]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3792 : 		loadFrom >> kMessage.m_eStolenTech;

	lea	eax, DWORD PTR _kMessage$224709[esp+224]
	push	eax
	push	ebx
	call	??5@YAAAVFDataStream@@AAV0@AAW4TechTypes@@@Z ; operator>>
	add	esp, 8

; 3793 : 		writeTo.m_aSpyNotificationMessages.push_back(kMessage);

	lea	ecx, DWORD PTR _kMessage$224709[esp+208]
	push	ecx
	lea	ecx, DWORD PTR [esi+1260]
	call	?push_back@?$vector@USpyNotificationMessage@@V?$allocator@USpyNotificationMessage@@@std@@@std@@QAEXABUSpyNotificationMessage@@@Z ; std::vector<SpyNotificationMessage,std::allocator<SpyNotificationMessage> >::push_back
	inc	edi
	cmp	edi, DWORD PTR _iNumMessages$[esp+208]
	jl	SHORT $LL6@operator@9
$LN4@operator@9:

; 3794 : 	}
; 3795 : 
; 3796 : 	loadFrom >> iNumMessages;

	lea	edx, DWORD PTR _iNumMessages$[esp+208]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3797 : 	for(int i = 0; i < iNumMessages; i++)

	xor	edi, edi
	cmp	DWORD PTR _iNumMessages$[esp+208], edi
	jle	$LN314@operator@9
	add	esi, 1276				; 000004fcH
	npad	11
$LL3@operator@9:

; 3798 : 	{
; 3799 : 		IntrigueNotificationMessage kMessage;

	lea	ecx, DWORD PTR _kMessage$224714[esp+244]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 3800 : 		loadFrom >> kMessage.m_eDiscoveringPlayer;

	lea	eax, DWORD PTR _kMessage$224714[esp+208]
	push	eax
	push	ebx
	mov	DWORD PTR __$EHRec$[esp+224], 2
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>

; 3801 : 		loadFrom >> kMessage.m_eSourcePlayer;

	lea	ecx, DWORD PTR _kMessage$224714[esp+220]
	push	ecx
	push	ebx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>

; 3802 : 		loadFrom >> kMessage.m_eTargetPlayer;

	lea	edx, DWORD PTR _kMessage$224714[esp+232]
	push	edx
	push	ebx
	call	??5@YAAAVFDataStream@@AAV0@AAW4PlayerTypes@@@Z ; operator>>

; 3803 : 		loadFrom >> kMessage.m_eBuilding;

	lea	eax, DWORD PTR _kMessage$224714[esp+244]
	push	eax
	push	ebx
	call	??5@YAAAVFDataStream@@AAV0@AAW4BuildingTypes@@@Z ; operator>>
	add	esp, 32					; 00000020H

; 3804 : 		int iProjectType;
; 3805 : 		loadFrom >> iProjectType;

	lea	ecx, DWORD PTR _iProjectType$224718[esp+208]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3806 : 		kMessage.m_eProject = (ProjectTypes)iProjectType;

	mov	edx, DWORD PTR _iProjectType$224718[esp+208]

; 3807 : 		loadFrom >> kMessage.m_iIntrigueType;

	lea	eax, DWORD PTR _kMessage$224714[esp+228]
	push	eax
	mov	ecx, ebx
	mov	DWORD PTR _kMessage$224714[esp+228], edx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3808 : 		loadFrom >> kMessage.m_iTurnNum;

	lea	ecx, DWORD PTR _kMessage$224714[esp+232]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3809 : 		loadFrom >> kMessage.m_iCityX;

	lea	edx, DWORD PTR _kMessage$224714[esp+236]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3810 : 		loadFrom >> kMessage.m_iCityY;

	lea	eax, DWORD PTR _kMessage$224714[esp+240]
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3811 : 		loadFrom >> kMessage.m_strSpyName;

	lea	ecx, DWORD PTR _kMessage$224714[esp+244]
	push	ecx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 3812 : 		loadFrom >> kMessage.m_bShared;

	lea	edx, DWORD PTR _kMessage$224714[esp+272]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 3813 : 		writeTo.m_aIntrigueNotificationMessages.push_back(kMessage);

	lea	eax, DWORD PTR _kMessage$224714[esp+208]
	push	eax
	mov	ecx, esi
	call	?push_back@?$vector@UIntrigueNotificationMessage@@V?$allocator@UIntrigueNotificationMessage@@@std@@@std@@QAEXABUIntrigueNotificationMessage@@@Z ; std::vector<IntrigueNotificationMessage,std::allocator<IntrigueNotificationMessage> >::push_back

; 3814 : 	}

	lea	ecx, DWORD PTR _kMessage$224714[esp+244]
	mov	DWORD PTR __$EHRec$[esp+216], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	inc	edi
	cmp	edi, DWORD PTR _iNumMessages$[esp+208]
	jl	$LL3@operator@9
$LN314@operator@9:

; 3815 : 
; 3816 : 	return loadFrom;
; 3817 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+208]
	pop	edi
	pop	esi
	mov	eax, ebx
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$0:
	lea	ecx, DWORD PTR _aTechList$224673[ebp]
	jmp	??1?$FStaticVector@W4TechTypes@@$00$0A@$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum TechTypes,1,0,297,0>::~FStaticVector<enum TechTypes,1,0,297,0>
__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$2:
	mov	eax, DWORD PTR $T264850[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR $T264850[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR $T264823[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z$1:
	lea	ecx, DWORD PTR _kMessage$224714[ebp]
	jmp	??1IntrigueNotificationMessage@@QAE@XZ
__ehhandler$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??5@YAAAVFDataStream@@AAV0@AAVCvPlayerEspionage@@@Z ENDP ; operator>>
PUBLIC	?DoTurn@CvEspionageAI@@QAEXXZ			; CvEspionageAI::DoTurn
EXTRN	?IsUnitedNationsActive@CvGame@@QAE_NXZ:PROC	; CvGame::IsUnitedNationsActive
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__ehfuncinfo$?DoTurn@CvEspionageAI@@QAEXXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?DoTurn@CvEspionageAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DoTurn@CvEspionageAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$5
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?DoTurn@CvEspionageAI@@QAEXXZ
_TEXT	SEGMENT
_uiSpy$225430 = -144					; size = 4
_uiSpy$225391 = -144					; size = 4
tv1530 = -140						; size = 4
_iCorrectlyAssignedCityStateSpies$ = -140		; size = 4
_iCorrectlyAssignedDefenseSpies$ = -136			; size = 4
_iTargetOffensiveSpies$ = -132				; size = 4
tv1274 = -128						; size = 4
tv1261 = -128						; size = 4
tv1249 = -128						; size = 4
tv1233 = -128						; size = 4
_iTargetCityStateSpies$ = -124				; size = 4
_iTargetDefensiveSpies$ = -120				; size = 4
_iTargetDiplomatSpies$ = -116				; size = 4
_iCorrectlyAssignedOffenseSpies$ = -112			; size = 4
_iCorrectlyAssignedDiplomatSpies$ = -108		; size = 4
tv1690 = -104						; size = 4
_apCityDefense$ = -100					; size = 16
_apCityMinor$ = -84					; size = 16
_apCityDiplomat$ = -68					; size = 16
_strMsg$225060 = -68					; size = 28
_apCityOffense$ = -40					; size = 16
$T265267 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?DoTurn@CvEspionageAI@@QAEXXZ PROC			; CvEspionageAI::DoTurn, COMDAT
; _this$ = ecx

; 4295 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?DoTurn@CvEspionageAI@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 132				; 00000084H
	push	esi
	mov	esi, ecx

; 4296 : 	// no humans, minor civs, or barbarians allowed!
; 4297 : 	if(m_pPlayer->isHuman() || m_pPlayer->isMinorCiv() || m_pPlayer->isBarbarian())

	mov	ecx, DWORD PTR [esi]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	jne	$LN352@DoTurn
	mov	ecx, DWORD PTR [esi]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	jne	$LN352@DoTurn
	mov	ecx, DWORD PTR [esi]
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	test	al, al
	jne	$LN352@DoTurn
	push	ebx
	push	ebp
	push	edi

; 4298 : 	{
; 4299 : 		return;
; 4300 : 	}
; 4301 : 
; 4302 : 	AI_PERF_FORMAT("AI-perf.csv", ("Espionage AI, Turn %03d, %s", GC.getGame().getElapsedGameTurns(), m_pPlayer->getCivilizationShortDescription()) );
; 4303 : 
; 4304 : 	StealTechnology();

	mov	ecx, esi
	call	?StealTechnology@CvEspionageAI@@QAEXXZ	; CvEspionageAI::StealTechnology

; 4305 : 	UpdateCivOutOfTechTurn();

	mov	ecx, esi
	call	?UpdateCivOutOfTechTurn@CvEspionageAI@@QAEXXZ ; CvEspionageAI::UpdateCivOutOfTechTurn

; 4306 : 	AttemptCoups();

	mov	ecx, esi
	call	?AttemptCoups@CvEspionageAI@@QAEXXZ	; CvEspionageAI::AttemptCoups

; 4307 : 
; 4308 : 	// mark these spies available to reassign
; 4309 : 	EvaluateUnassignedSpies();

	mov	ecx, esi
	call	?EvaluateUnassignedSpies@CvEspionageAI@@QAEXXZ ; CvEspionageAI::EvaluateUnassignedSpies

; 4310 : 	EvaluateDefensiveSpies();

	mov	ecx, esi
	call	?EvaluateDefensiveSpies@CvEspionageAI@@QAEXXZ ; CvEspionageAI::EvaluateDefensiveSpies

; 4311 : 	EvaluateDiplomatSpies();

	mov	ecx, esi
	call	?EvaluateDiplomatSpies@CvEspionageAI@@QAEXXZ ; CvEspionageAI::EvaluateDiplomatSpies

; 4312 : 
; 4313 : 	// when the UN countdown starts, mark all spies to be reassigned
; 4314 : 	if (!m_bUNCountdownStarted && GC.getGame().IsUnitedNationsActive())

	xor	ebx, ebx
	cmp	BYTE PTR [esi+732], bl
	jne	$LN64@DoTurn
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?IsUnitedNationsActive@CvGame@@QAE_NXZ	; CvGame::IsUnitedNationsActive
	test	al, al
	je	$LN64@DoTurn

; 4317 : 		CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [esi]
	mov	BYTE PTR [esi+732], 1
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ebp, eax

; 4318 : 		for (uint ui = 0; ui < pEspionage->m_aSpyList.size(); ui++)

	cmp	DWORD PTR [ebp+4], ebx
	jbe	$LN64@DoTurn

; 4315 : 	{
; 4316 : 		m_bUNCountdownStarted = true;

	mov	DWORD PTR tv1530[esp+160], ebx
	npad	10
$LL66@DoTurn:

; 4319 : 		{
; 4320 : 			CvEspionageSpy* pSpy = &(pEspionage->m_aSpyList[ui]);

	mov	edi, DWORD PTR [ebp]
	add	edi, DWORD PTR tv1530[esp+160]

; 4321 : 			// don't process dead spies
; 4322 : 			if (pSpy->m_eSpyState == SPY_STATE_DEAD)

	cmp	DWORD PTR [edi+16], 8
	je	$LN65@DoTurn

; 4323 : 			{
; 4324 : 				continue;
; 4325 : 			}
; 4326 : 
; 4327 : 			pSpy->m_bEvaluateReassignment = true;
; 4328 : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR [edi+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN65@DoTurn

; 4329 : 			{
; 4330 : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$225060[esp+160]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4331 : 				strMsg.Format("Re-eval: UN constructed/reassign, %d,", ui);

	push	ebx
	lea	eax, DWORD PTR _strMsg$225060[esp+164]
	push	OFFSET $SG225061
	push	eax
	mov	DWORD PTR __$EHRec$[esp+180], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 4332 : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	ecx, DWORD PTR [edi]
	add	esp, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR [esi]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T265267[esp+164]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$225060[esp+164]
	mov	BYTE PTR __$EHRec$[esp+172], 1
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T265267[esp+160]
	mov	BYTE PTR __$EHRec$[esp+168], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4333 : 				pEspionage->LogEspionageMsg(strMsg);

	lea	eax, DWORD PTR _strMsg$225060[esp+160]
	push	eax
	mov	ecx, ebp
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 4334 : 			}

	lea	ecx, DWORD PTR _strMsg$225060[esp+160]
	mov	DWORD PTR __$EHRec$[esp+168], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN65@DoTurn:
	add	DWORD PTR tv1530[esp+160], 28		; 0000001cH
	inc	ebx
	cmp	ebx, DWORD PTR [ebp+4]
	jb	$LL66@DoTurn
$LN64@DoTurn:

; 4335 : 		}
; 4336 : 	}
; 4337 : 
; 4338 : 	int iTargetOffensiveSpies = 0;
; 4339 : 	int iTargetDefensiveSpies = 0;
; 4340 : 	int iTargetCityStateSpies = 0;
; 4341 : 	int iTargetDiplomatSpies  = 0;
; 4342 : 	FindTargetSpyNumbers(&iTargetOffensiveSpies, &iTargetDefensiveSpies, &iTargetCityStateSpies, &iTargetDiplomatSpies);

	lea	ecx, DWORD PTR _iTargetDiplomatSpies$[esp+160]
	push	ecx
	lea	edx, DWORD PTR _iTargetCityStateSpies$[esp+164]
	push	edx
	lea	eax, DWORD PTR _iTargetDefensiveSpies$[esp+168]
	xor	edi, edi
	push	eax
	lea	ecx, DWORD PTR _iTargetOffensiveSpies$[esp+172]
	push	ecx
	mov	ecx, esi
	mov	DWORD PTR _iTargetOffensiveSpies$[esp+176], edi
	mov	DWORD PTR _iTargetDefensiveSpies$[esp+176], edi
	mov	DWORD PTR _iTargetCityStateSpies$[esp+176], edi
	mov	DWORD PTR _iTargetDiplomatSpies$[esp+176], edi
	call	?FindTargetSpyNumbers@CvEspionageAI@@QAEXPAH000@Z ; CvEspionageAI::FindTargetSpyNumbers

; 4343 : 
; 4344 : 	std::vector<CvCity*> apCityDiplomat;

	mov	DWORD PTR _apCityDiplomat$[esp+164], edi
	mov	DWORD PTR _apCityDiplomat$[esp+168], edi
	mov	DWORD PTR _apCityDiplomat$[esp+172], edi
	mov	DWORD PTR __$EHRec$[esp+168], 2

; 4345 : 	std::vector<CvCity*> apCityOffense;

	mov	DWORD PTR _apCityOffense$[esp+164], edi
	mov	DWORD PTR _apCityOffense$[esp+168], edi
	mov	DWORD PTR _apCityOffense$[esp+172], edi

; 4346 : 	std::vector<CvCity*> apCityDefense;

	mov	DWORD PTR _apCityDefense$[esp+164], edi
	mov	DWORD PTR _apCityDefense$[esp+168], edi
	mov	DWORD PTR _apCityDefense$[esp+172], edi

; 4347 : 	std::vector<CvCity*> apCityMinor;

	mov	DWORD PTR _apCityMinor$[esp+164], edi
	mov	DWORD PTR _apCityMinor$[esp+168], edi
	mov	DWORD PTR _apCityMinor$[esp+172], edi

; 4348 : 	
; 4349 : 	if (iTargetDiplomatSpies > 0)

	cmp	DWORD PTR _iTargetDiplomatSpies$[esp+160], edi
	mov	BYTE PTR __$EHRec$[esp+168], 5
	jle	SHORT $LN61@DoTurn

; 4350 : 	{
; 4351 : 		BuildDiplomatCityList(apCityDiplomat);

	lea	edx, DWORD PTR _apCityDiplomat$[esp+160]
	push	edx
	mov	ecx, esi
	call	?BuildDiplomatCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildDiplomatCityList
$LN61@DoTurn:

; 4352 : 	}
; 4353 : 
; 4354 : 	if (iTargetOffensiveSpies > 0)

	cmp	DWORD PTR _iTargetOffensiveSpies$[esp+160], edi
	jle	SHORT $LN60@DoTurn

; 4355 : 	{
; 4356 : 		BuildOffenseCityList(apCityOffense);

	lea	eax, DWORD PTR _apCityOffense$[esp+160]
	push	eax
	mov	ecx, esi
	call	?BuildOffenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildOffenseCityList
$LN60@DoTurn:

; 4357 : 	}
; 4358 : 
; 4359 : 	if (iTargetDefensiveSpies > 0)

	cmp	DWORD PTR _iTargetDefensiveSpies$[esp+160], edi
	jle	SHORT $LN59@DoTurn

; 4360 : 	{
; 4361 : 		BuildDefenseCityList(apCityDefense);

	lea	ecx, DWORD PTR _apCityDefense$[esp+160]
	push	ecx
	mov	ecx, esi
	call	?BuildDefenseCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildDefenseCityList
$LN59@DoTurn:

; 4362 : 	}
; 4363 : 
; 4364 : 	if (iTargetCityStateSpies > 0)

	cmp	DWORD PTR _iTargetCityStateSpies$[esp+160], edi
	jle	SHORT $LN58@DoTurn

; 4365 : 	{
; 4366 : 		BuildMinorCityList(apCityMinor);

	lea	edx, DWORD PTR _apCityMinor$[esp+160]
	push	edx
	mov	ecx, esi
	call	?BuildMinorCityList@CvEspionageAI@@QAEXAAV?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@@Z ; CvEspionageAI::BuildMinorCityList
$LN58@DoTurn:

; 4367 : 	}
; 4368 : 
; 4369 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	mov	ecx, DWORD PTR [esi]
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ebp, eax

; 4370 : 
; 4371 : 	// loop through spies an extract all that aren't in a correct location
; 4372 : 	int iCorrectlyAssignedDiplomatSpies = 0;
; 4373 : 	int iCorrectlyAssignedDefenseSpies = 0;
; 4374 : 	int iCorrectlyAssignedOffenseSpies = 0;
; 4375 : 	int iCorrectlyAssignedCityStateSpies = 0;
; 4376 : 
; 4377 : 	for(uint uiSpy = 0; uiSpy < pEspionage->m_aSpyList.size(); uiSpy++)

	xor	eax, eax
	mov	DWORD PTR _iCorrectlyAssignedDiplomatSpies$[esp+160], edi
	mov	DWORD PTR _iCorrectlyAssignedDefenseSpies$[esp+160], edi
	mov	DWORD PTR _iCorrectlyAssignedOffenseSpies$[esp+160], edi
	mov	DWORD PTR _iCorrectlyAssignedCityStateSpies$[esp+160], edi
	mov	DWORD PTR _uiSpy$225391[esp+160], eax
	cmp	DWORD PTR [ebp+4], edi
	jbe	$LN55@DoTurn

; 4367 : 	}
; 4368 : 
; 4369 : 	CvPlayerEspionage* pEspionage = m_pPlayer->GetEspionage();

	xor	esi, esi
	npad	5
$LL403@DoTurn:

; 4378 : 	{
; 4379 : 		// dead spies are not processed
; 4380 : 		if(pEspionage->m_aSpyList[uiSpy].m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR [ebp]
	cmp	DWORD PTR [ecx+esi+16], 8
	je	$LN56@DoTurn

; 4381 : 		{
; 4382 : 			continue;
; 4383 : 		}
; 4384 : 
; 4385 : 		CvCity* pSpyCity = pEspionage->GetCityWithSpy(uiSpy);

	push	eax
	mov	ecx, ebp
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 4386 : 
; 4387 : 		// spies that are not assigned don't need to be processed
; 4388 : 		if(!pSpyCity)

	cmp	eax, edi
	je	$LN56@DoTurn

; 4389 : 		{
; 4390 : 			continue;
; 4391 : 		}
; 4392 : 
; 4393 : 		bool bAlreadyAssigned = false;

	xor	bl, bl

; 4394 : 
; 4395 : 		// diplomat cities
; 4396 : 		if (!bAlreadyAssigned)
; 4397 : 		{
; 4398 : 			// see if the spy is in any of the diplomat cities
; 4399 : 			for(int iDiplomatIndex = 0; iDiplomatIndex < iTargetDiplomatSpies && iDiplomatIndex < (int)apCityDiplomat.size(); iDiplomatIndex++)

	xor	ecx, ecx
	cmp	DWORD PTR _iTargetDiplomatSpies$[esp+160], edi
	jle	SHORT $LN395@DoTurn
	mov	edx, DWORD PTR _apCityDiplomat$[esp+168]
	sub	edx, DWORD PTR _apCityDiplomat$[esp+164]
	sar	edx, 2
$LL394@DoTurn:
	cmp	ecx, edx
	jge	SHORT $LN395@DoTurn

; 4400 : 			{
; 4401 : 				if(pSpyCity == apCityDiplomat[iDiplomatIndex] && pEspionage->m_aSpyList[uiSpy].m_bIsDiplomat)

	mov	edi, DWORD PTR _apCityDiplomat$[esp+164]
	cmp	eax, DWORD PTR [edi+ecx*4]
	jne	SHORT $LN50@DoTurn
	mov	edi, DWORD PTR [ebp]
	cmp	BYTE PTR [edi+esi+24], 0
	jne	$LN365@DoTurn
$LN50@DoTurn:

; 4394 : 
; 4395 : 		// diplomat cities
; 4396 : 		if (!bAlreadyAssigned)
; 4397 : 		{
; 4398 : 			// see if the spy is in any of the diplomat cities
; 4399 : 			for(int iDiplomatIndex = 0; iDiplomatIndex < iTargetDiplomatSpies && iDiplomatIndex < (int)apCityDiplomat.size(); iDiplomatIndex++)

	inc	ecx
	cmp	ecx, DWORD PTR _iTargetDiplomatSpies$[esp+160]
	jl	SHORT $LL394@DoTurn
$LN395@DoTurn:

; 4412 : 		{
; 4413 : 			// see if the spy is in any of the defensive cities
; 4414 : 			for(int iDefensiveIndex = 0; iDefensiveIndex < iTargetDefensiveSpies && iDefensiveIndex < (int)apCityDefense.size(); iDefensiveIndex++)

	xor	ecx, ecx
	cmp	DWORD PTR _iTargetDefensiveSpies$[esp+160], ecx
	jle	SHORT $LN397@DoTurn
	mov	edx, DWORD PTR _apCityDefense$[esp+168]
	sub	edx, DWORD PTR _apCityDefense$[esp+164]
	sar	edx, 2
$LL396@DoTurn:
	cmp	ecx, edx
	jge	SHORT $LN397@DoTurn

; 4415 : 			{
; 4416 : 				if(pSpyCity == apCityDefense[iDefensiveIndex])

	mov	edi, DWORD PTR _apCityDefense$[esp+164]
	cmp	eax, DWORD PTR [edi+ecx*4]
	je	SHORT $LN366@DoTurn
	inc	ecx
	cmp	ecx, DWORD PTR _iTargetDefensiveSpies$[esp+160]
	jl	SHORT $LL396@DoTurn
$LN397@DoTurn:

; 4427 : 		{
; 4428 : 			// see if the spy is in any of the offensive cities
; 4429 : 			for(int iOffensiveIndex = 0; iOffensiveIndex < iTargetOffensiveSpies && iOffensiveIndex < (int)apCityOffense.size(); iOffensiveIndex++)

	xor	ecx, ecx
	cmp	DWORD PTR _iTargetOffensiveSpies$[esp+160], ecx
	jle	SHORT $LN399@DoTurn
	mov	edx, DWORD PTR _apCityOffense$[esp+168]
	sub	edx, DWORD PTR _apCityOffense$[esp+164]
	sar	edx, 2
$LL398@DoTurn:
	cmp	ecx, edx
	jge	SHORT $LN399@DoTurn

; 4430 : 			{
; 4431 : 				if(pSpyCity == apCityOffense[iOffensiveIndex] && !pEspionage->m_aSpyList[uiSpy].m_bIsDiplomat)

	mov	edi, DWORD PTR _apCityOffense$[esp+164]
	cmp	eax, DWORD PTR [edi+ecx*4]
	jne	SHORT $LN40@DoTurn
	mov	edi, DWORD PTR [ebp]
	cmp	BYTE PTR [edi+esi+24], 0
	je	SHORT $LN367@DoTurn
$LN40@DoTurn:

; 4427 : 		{
; 4428 : 			// see if the spy is in any of the offensive cities
; 4429 : 			for(int iOffensiveIndex = 0; iOffensiveIndex < iTargetOffensiveSpies && iOffensiveIndex < (int)apCityOffense.size(); iOffensiveIndex++)

	inc	ecx
	cmp	ecx, DWORD PTR _iTargetOffensiveSpies$[esp+160]
	jl	SHORT $LL398@DoTurn
$LN399@DoTurn:

; 4442 : 		{
; 4443 : 			// see if the spy is in any of the city-states
; 4444 : 			for (int iCityStateIndex = 0; iCityStateIndex < iTargetCityStateSpies && iCityStateIndex < (int)apCityMinor.size(); iCityStateIndex++)

	xor	ecx, ecx
	cmp	DWORD PTR _iTargetCityStateSpies$[esp+160], ecx
	jle	SHORT $LN401@DoTurn
	mov	edx, DWORD PTR _apCityMinor$[esp+168]
	sub	edx, DWORD PTR _apCityMinor$[esp+164]
	sar	edx, 2
$LL400@DoTurn:
	cmp	ecx, edx
	jge	SHORT $LN401@DoTurn

; 4445 : 			{
; 4446 : 				if (pSpyCity == apCityMinor[iCityStateIndex])

	mov	edi, DWORD PTR _apCityMinor$[esp+164]
	cmp	eax, DWORD PTR [edi+ecx*4]
	je	SHORT $LN368@DoTurn
	inc	ecx
	cmp	ecx, DWORD PTR _iTargetCityStateSpies$[esp+160]
	jl	SHORT $LL400@DoTurn
	jmp	SHORT $LN401@DoTurn
$LN365@DoTurn:

; 4402 : 				{
; 4403 : 					iCorrectlyAssignedDiplomatSpies++;

	inc	DWORD PTR _iCorrectlyAssignedDiplomatSpies$[esp+160]

; 4404 : 					bAlreadyAssigned = true;
; 4405 : 					break;
; 4406 : 				}
; 4407 : 			}
; 4408 : 		}
; 4409 : 
; 4410 : 		// defensive cities
; 4411 : 		if(!bAlreadyAssigned)

	jmp	SHORT $LN405@DoTurn
$LN366@DoTurn:

; 4417 : 				{
; 4418 : 					iCorrectlyAssignedDefenseSpies++;

	inc	DWORD PTR _iCorrectlyAssignedDefenseSpies$[esp+160]

; 4419 : 					bAlreadyAssigned = true;
; 4420 : 					break;
; 4421 : 				}
; 4422 : 			}
; 4423 : 		}
; 4424 : 
; 4425 : 		// offensive cities
; 4426 : 		if(!bAlreadyAssigned)

	jmp	SHORT $LN405@DoTurn
$LN367@DoTurn:

; 4432 : 				{
; 4433 : 					iCorrectlyAssignedOffenseSpies++;

	inc	DWORD PTR _iCorrectlyAssignedOffenseSpies$[esp+160]

; 4434 : 					bAlreadyAssigned = true;
; 4435 : 					break;
; 4436 : 				}
; 4437 : 			}
; 4438 : 		}
; 4439 : 
; 4440 : 		// city-states
; 4441 : 		if (!bAlreadyAssigned)

	jmp	SHORT $LN405@DoTurn
$LN368@DoTurn:

; 4447 : 				{
; 4448 : 					iCorrectlyAssignedCityStateSpies++;

	inc	DWORD PTR _iCorrectlyAssignedCityStateSpies$[esp+160]
$LN405@DoTurn:

; 4449 : 					bAlreadyAssigned = true;

	mov	bl, 1
$LN401@DoTurn:

; 4450 : 					break;
; 4451 : 				}
; 4452 : 			}
; 4453 : 		}
; 4454 : 
; 4455 : 		// if the spy is flagged to be reassigned
; 4456 : 		if (pEspionage->m_aSpyList[uiSpy].m_bEvaluateReassignment)

	mov	edx, DWORD PTR [ebp]
	lea	eax, DWORD PTR [edx+esi+25]

; 4462 : 			}
; 4463 : 			else

	xor	edi, edi
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN56@DoTurn

; 4457 : 		{
; 4458 : 			// if the spy is already assigned to a correct city, mark them as assigned
; 4459 : 			if (bAlreadyAssigned)

	test	bl, bl
	je	SHORT $LN31@DoTurn

; 4460 : 			{
; 4461 : 				pEspionage->m_aSpyList[uiSpy].m_bEvaluateReassignment = false;		

	mov	BYTE PTR [eax], 0

; 4462 : 			}
; 4463 : 			else

	jmp	SHORT $LN56@DoTurn
$LN31@DoTurn:

; 4464 : 			{
; 4465 : 				// move spy out of target city
; 4466 : 				pEspionage->MoveSpyTo(NULL, uiSpy, false);

	mov	eax, DWORD PTR _uiSpy$225391[esp+160]
	push	edi
	push	eax
	push	edi
	mov	ecx, ebp
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo
$LN56@DoTurn:
	mov	eax, DWORD PTR _uiSpy$225391[esp+160]
	inc	eax
	add	esi, 28					; 0000001cH
	mov	DWORD PTR _uiSpy$225391[esp+160], eax
	cmp	eax, DWORD PTR [ebp+4]
	jb	$LL403@DoTurn
$LN55@DoTurn:

; 4467 : 			}
; 4468 : 		}
; 4469 : 	}
; 4470 : 
; 4471 : 	// go through spy list again and put spies in locations where they are needed
; 4472 : 	for(uint uiSpy = 0; uiSpy < pEspionage->m_aSpyList.size(); uiSpy++)

	mov	DWORD PTR _uiSpy$225430[esp+160], edi
	cmp	DWORD PTR [ebp+4], edi
	jbe	$LN27@DoTurn
	mov	DWORD PTR tv1690[esp+160], edi
	npad	4
$LL392@DoTurn:

; 4473 : 	{
; 4474 : 		// dead spies are not processed
; 4475 : 		if(pEspionage->m_aSpyList[uiSpy].m_eSpyState == SPY_STATE_DEAD)

	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR tv1690[esp+160]
	cmp	DWORD PTR [ecx+edx+16], 8
	lea	eax, DWORD PTR [ecx+edx]
	je	$LN28@DoTurn

; 4476 : 		{
; 4477 : 			continue;
; 4478 : 		}
; 4479 : 
; 4480 : 		// if this spy is not to be re-evaluated
; 4481 : 		if (!pEspionage->m_aSpyList[uiSpy].m_bEvaluateReassignment)

	cmp	BYTE PTR [eax+25], 0
	je	$LN28@DoTurn

; 4482 : 		{
; 4483 : 			continue;
; 4484 : 		}
; 4485 : 
; 4486 : 		// we're assigning the spy now, so reset their evaluate statement
; 4487 : 		pEspionage->m_aSpyList[uiSpy].m_bEvaluateReassignment = false;

	mov	BYTE PTR [eax+25], 0

; 4488 : 
; 4489 : 		CvCity* pSpyCity = pEspionage->GetCityWithSpy(uiSpy);

	mov	eax, DWORD PTR _uiSpy$225430[esp+160]
	push	eax
	mov	ecx, ebp
	call	?GetCityWithSpy@CvPlayerEspionage@@QAEPAVCvCity@@I@Z ; CvPlayerEspionage::GetCityWithSpy

; 4490 : 
; 4491 : 		// spies that are already are in a city are assumed to be in the right place
; 4492 : 		if(pSpyCity)

	test	eax, eax
	jne	$LN28@DoTurn

; 4493 : 		{
; 4494 : 			continue;
; 4495 : 		}
; 4496 : 
; 4497 : 		// if we have remaining defensive spies to assign
; 4498 : 		if(iTargetDiplomatSpies > iCorrectlyAssignedDiplomatSpies)

	mov	eax, DWORD PTR _iTargetDiplomatSpies$[esp+160]
	cmp	eax, DWORD PTR _iCorrectlyAssignedDiplomatSpies$[esp+160]
	jle	SHORT $LN23@DoTurn

; 4499 : 		{
; 4500 : 			// walk through cities and an open spot for the spy
; 4501 : 			for(int iCity = 0; iCity < iTargetDiplomatSpies && iCity < (int)apCityDiplomat.size(); iCity++)

	xor	ebx, ebx
	test	eax, eax
	jle	$LN28@DoTurn
	mov	eax, DWORD PTR _apCityDiplomat$[esp+168]
	sub	eax, DWORD PTR _apCityDiplomat$[esp+164]
	sar	eax, 2
	mov	DWORD PTR tv1233[esp+160], eax
	npad	6
$LL22@DoTurn:
	cmp	ebx, eax
	jge	$LN28@DoTurn

; 4502 : 			{
; 4503 : 				CvCity* pCity = apCityDiplomat[iCity];

	mov	ecx, DWORD PTR _apCityDiplomat$[esp+164]
	mov	esi, DWORD PTR [ecx+ebx*4]

; 4504 : 
; 4505 : 				// if a spy is already in this city, skip it
; 4506 : 				if(pEspionage->GetSpyIndexInCity(pCity) != -1)

	test	esi, esi
	je	SHORT $LN393@DoTurn
	mov	edx, DWORD PTR [ebp+1292]
	mov	edi, DWORD PTR [edx+44]
	mov	ecx, esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	cmp	DWORD PTR [eax+edi*4], -1
	je	SHORT $LN393@DoTurn
	inc	ebx
	cmp	ebx, DWORD PTR _iTargetDiplomatSpies$[esp+160]
	jge	$LN28@DoTurn

; 4499 : 		{
; 4500 : 			// walk through cities and an open spot for the spy
; 4501 : 			for(int iCity = 0; iCity < iTargetDiplomatSpies && iCity < (int)apCityDiplomat.size(); iCity++)

	mov	eax, DWORD PTR tv1233[esp+160]
	jmp	SHORT $LL22@DoTurn
$LN393@DoTurn:

; 4507 : 				{
; 4508 : 					continue;
; 4509 : 				}
; 4510 : 
; 4511 : 				pEspionage->MoveSpyTo(pCity, uiSpy, true);

	mov	eax, DWORD PTR _uiSpy$225430[esp+160]
	push	1
	push	eax
	push	esi
	mov	ecx, ebp
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo

; 4512 : 				iCorrectlyAssignedDefenseSpies++;

	inc	DWORD PTR _iCorrectlyAssignedDefenseSpies$[esp+160]

; 4513 : 				break;
; 4514 : 			}
; 4515 : 		}
; 4516 : 		// if we have remaining defensive spies to assign
; 4517 : 		else if(iTargetDefensiveSpies > iCorrectlyAssignedDefenseSpies)

	jmp	$LN28@DoTurn
$LN23@DoTurn:
	mov	ecx, DWORD PTR _iTargetDefensiveSpies$[esp+160]
	cmp	ecx, DWORD PTR _iCorrectlyAssignedDefenseSpies$[esp+160]
	jle	SHORT $LN17@DoTurn

; 4518 : 		{
; 4519 : 			// walk through cities and an open spot for the spy
; 4520 : 			for(int iCity = 0; iCity < iTargetDefensiveSpies && iCity < (int)apCityDefense.size(); iCity++)

	xor	ebx, ebx
	test	ecx, ecx
	jle	$LN28@DoTurn
	mov	eax, DWORD PTR _apCityDefense$[esp+168]
	sub	eax, DWORD PTR _apCityDefense$[esp+164]
	sar	eax, 2
	mov	DWORD PTR tv1249[esp+160], eax
$LL16@DoTurn:
	cmp	ebx, eax
	jge	$LN28@DoTurn

; 4521 : 			{
; 4522 : 				CvCity* pCity = apCityDefense[iCity];

	mov	edx, DWORD PTR _apCityDefense$[esp+164]
	mov	esi, DWORD PTR [edx+ebx*4]

; 4523 : 
; 4524 : 				// if a spy is already in this city, skip it
; 4525 : 				if(pEspionage->GetSpyIndexInCity(pCity) != -1)

	test	esi, esi
	je	SHORT $LN13@DoTurn
	mov	eax, DWORD PTR [ebp+1292]
	mov	edi, DWORD PTR [eax+44]
	mov	ecx, esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	cmp	DWORD PTR [eax+edi*4], -1
	je	SHORT $LN13@DoTurn
	inc	ebx
	cmp	ebx, DWORD PTR _iTargetDefensiveSpies$[esp+160]
	jge	$LN28@DoTurn

; 4518 : 		{
; 4519 : 			// walk through cities and an open spot for the spy
; 4520 : 			for(int iCity = 0; iCity < iTargetDefensiveSpies && iCity < (int)apCityDefense.size(); iCity++)

	mov	eax, DWORD PTR tv1249[esp+160]
	jmp	SHORT $LL16@DoTurn
$LN13@DoTurn:

; 4526 : 				{
; 4527 : 					continue;
; 4528 : 				}
; 4529 : 
; 4530 : 				pEspionage->MoveSpyTo(pCity, uiSpy, false);

	mov	ecx, DWORD PTR _uiSpy$225430[esp+160]
	push	0
	push	ecx
	push	esi
	mov	ecx, ebp
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo

; 4531 : 				iCorrectlyAssignedDefenseSpies++;

	inc	DWORD PTR _iCorrectlyAssignedDefenseSpies$[esp+160]

; 4532 : 				break;
; 4533 : 			}
; 4534 : 		}
; 4535 : 		// if we have remaining offensive spies to assign
; 4536 : 		else if(iTargetOffensiveSpies > iCorrectlyAssignedOffenseSpies)

	jmp	$LN28@DoTurn
$LN17@DoTurn:
	mov	edx, DWORD PTR _iTargetOffensiveSpies$[esp+160]
	cmp	edx, DWORD PTR _iCorrectlyAssignedOffenseSpies$[esp+160]
	jle	SHORT $LN11@DoTurn

; 4537 : 		{
; 4538 : 			for(int iCity = 0; iCity < iTargetOffensiveSpies && iCity < (int)apCityOffense.size(); iCity++)

	xor	ebx, ebx
	test	edx, edx
	jle	$LN28@DoTurn
	mov	eax, DWORD PTR _apCityOffense$[esp+168]
	sub	eax, DWORD PTR _apCityOffense$[esp+164]
	sar	eax, 2
	mov	DWORD PTR tv1261[esp+160], eax
$LL10@DoTurn:
	cmp	ebx, eax
	jge	$LN28@DoTurn

; 4539 : 			{
; 4540 : 				CvCity* pCity = apCityOffense[iCity];

	mov	eax, DWORD PTR _apCityOffense$[esp+164]
	mov	esi, DWORD PTR [eax+ebx*4]

; 4541 : 
; 4542 : 				// if a spy is already in this city, skip it
; 4543 : 				if(pEspionage->GetSpyIndexInCity(pCity) != -1)

	test	esi, esi
	je	SHORT $LN7@DoTurn
	mov	ecx, DWORD PTR [ebp+1292]
	mov	edi, DWORD PTR [ecx+44]
	mov	ecx, esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	cmp	DWORD PTR [eax+edi*4], -1
	je	SHORT $LN7@DoTurn
	inc	ebx
	cmp	ebx, DWORD PTR _iTargetOffensiveSpies$[esp+160]
	jge	$LN28@DoTurn

; 4537 : 		{
; 4538 : 			for(int iCity = 0; iCity < iTargetOffensiveSpies && iCity < (int)apCityOffense.size(); iCity++)

	mov	eax, DWORD PTR tv1261[esp+160]
	jmp	SHORT $LL10@DoTurn
$LN7@DoTurn:

; 4544 : 				{
; 4545 : 					continue;
; 4546 : 				}
; 4547 : 
; 4548 : 				pEspionage->MoveSpyTo(pCity, uiSpy, false);

	mov	edx, DWORD PTR _uiSpy$225430[esp+160]
	push	0
	push	edx
	push	esi
	mov	ecx, ebp
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo

; 4549 : 				iCorrectlyAssignedOffenseSpies++;

	inc	DWORD PTR _iCorrectlyAssignedOffenseSpies$[esp+160]

; 4550 : 				break;
; 4551 : 			}
; 4552 : 		}
; 4553 : 		// if we have remaining city-state spies to assign
; 4554 : 		else if (iTargetCityStateSpies > iCorrectlyAssignedCityStateSpies)

	jmp	SHORT $LN28@DoTurn
$LN11@DoTurn:
	mov	eax, DWORD PTR _iCorrectlyAssignedCityStateSpies$[esp+160]
	cmp	DWORD PTR _iTargetCityStateSpies$[esp+160], eax
	jle	SHORT $LN28@DoTurn

; 4555 : 		{
; 4556 : 			for (int iCity = 0; iCity < iTargetCityStateSpies && iCity < (int)apCityMinor.size(); iCity++)

	xor	ebx, ebx
	cmp	DWORD PTR _iTargetCityStateSpies$[esp+160], ebx
	jle	SHORT $LN28@DoTurn
	mov	eax, DWORD PTR _apCityMinor$[esp+168]
	sub	eax, DWORD PTR _apCityMinor$[esp+164]
	sar	eax, 2
	mov	DWORD PTR tv1274[esp+160], eax
$LL4@DoTurn:
	cmp	ebx, eax
	jge	SHORT $LN28@DoTurn

; 4557 : 			{
; 4558 : 				CvCity* pCity = apCityMinor[iCity];

	mov	ecx, DWORD PTR _apCityMinor$[esp+164]
	mov	esi, DWORD PTR [ecx+ebx*4]

; 4559 : 
; 4560 : 				// if a spy is already in this city, skip it
; 4561 : 				if (pEspionage->GetSpyIndexInCity(pCity) != -1)

	test	esi, esi
	je	SHORT $LN1@DoTurn
	mov	edx, DWORD PTR [ebp+1292]
	mov	edi, DWORD PTR [edx+44]
	mov	ecx, esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	add	eax, 4
	cmp	DWORD PTR [eax+edi*4], -1
	je	SHORT $LN1@DoTurn
	inc	ebx
	cmp	ebx, DWORD PTR _iTargetCityStateSpies$[esp+160]
	jge	SHORT $LN28@DoTurn

; 4555 : 		{
; 4556 : 			for (int iCity = 0; iCity < iTargetCityStateSpies && iCity < (int)apCityMinor.size(); iCity++)

	mov	eax, DWORD PTR tv1274[esp+160]
	jmp	SHORT $LL4@DoTurn
$LN1@DoTurn:

; 4562 : 				{
; 4563 : 					continue;
; 4564 : 				}
; 4565 : 
; 4566 : 				pEspionage->MoveSpyTo(pCity, uiSpy, false);

	mov	eax, DWORD PTR _uiSpy$225430[esp+160]
	push	0
	push	eax
	push	esi
	mov	ecx, ebp
	call	?MoveSpyTo@CvPlayerEspionage@@QAE_NPAVCvCity@@I_N@Z ; CvPlayerEspionage::MoveSpyTo

; 4567 : 				iCorrectlyAssignedCityStateSpies++;

	inc	DWORD PTR _iCorrectlyAssignedCityStateSpies$[esp+160]
$LN28@DoTurn:
	mov	eax, DWORD PTR _uiSpy$225430[esp+160]
	add	DWORD PTR tv1690[esp+160], 28		; 0000001cH
	inc	eax
	mov	DWORD PTR _uiSpy$225430[esp+160], eax
	cmp	eax, DWORD PTR [ebp+4]
	jb	$LL392@DoTurn
$LN27@DoTurn:

; 4568 : 				break;
; 4569 : 			}
; 4570 : 		}
; 4571 : 	}
; 4572 : }

	mov	eax, DWORD PTR _apCityMinor$[esp+164]
	pop	edi
	pop	ebp
	pop	ebx
	test	eax, eax
	je	SHORT $LN331@DoTurn
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN331@DoTurn:
	mov	eax, DWORD PTR _apCityDefense$[esp+152]
	test	eax, eax
	je	SHORT $LN338@DoTurn
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN338@DoTurn:
	mov	eax, DWORD PTR _apCityOffense$[esp+152]
	test	eax, eax
	je	SHORT $LN345@DoTurn
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN345@DoTurn:
	mov	eax, DWORD PTR _apCityDiplomat$[esp+152]
	test	eax, eax
	je	SHORT $LN352@DoTurn
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN352@DoTurn:
	mov	ecx, DWORD PTR __$EHRec$[esp+148]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 144				; 00000090H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strMsg$225060[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T265267[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR _apCityDiplomat$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR _apCityOffense$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$4:
	lea	ecx, DWORD PTR _apCityDefense$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__unwindfunclet$?DoTurn@CvEspionageAI@@QAEXXZ$5:
	lea	ecx, DWORD PTR _apCityMinor$[ebp]
	jmp	??1?$vector@PAVCvCity@@V?$allocator@PAVCvCity@@@std@@@std@@QAE@XZ ; std::vector<CvCity *,std::allocator<CvCity *> >::~vector<CvCity *,std::allocator<CvCity *> >
__ehhandler$?DoTurn@CvEspionageAI@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?DoTurn@CvEspionageAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoTurn@CvEspionageAI@@QAEXXZ ENDP			; CvEspionageAI::DoTurn
PUBLIC	?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z	; CvPlayerEspionage::UncoverIntrigue
EXTRN	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z:PROC ; isWorldWonderClass
EXTRN	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ:PROC ; CvBuildingEntry::GetBuildingClassInfo
EXTRN	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ:PROC ; CvCity::getProductionBuilding
EXTRN	?getProductionProject@CvCity@@QBE?AW4ProjectTypes@@XZ:PROC ; CvCity::getProductionProject
EXTRN	?GetMajorCivApproach@CvDiplomacyAI@@QBE?AW4MajorCivApproachTypes@@W4PlayerTypes@@_N@Z:PROC ; CvDiplomacyAI::GetMajorCivApproach
EXTRN	?GetTargetPlot@CvAIOperation@@QBEPAVCvPlot@@XZ:PROC ; CvAIOperation::GetTargetPlot
EXTRN	?GetSneakAttackOperation@CvMilitaryAI@@QAEPAVCvAIOperation@@W4PlayerTypes@@@Z:PROC ; CvMilitaryAI::GetSneakAttackOperation
EXTRN	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ:PROC ; CvPlayer::GetMilitaryAI
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z$0
__ehfuncinfo$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z
_TEXT	SEGMENT
_eCityOwner$ = -56					; size = 4
_this$ = -52						; size = 4
_pCity$ = -48						; size = 4
tv1167 = -44						; size = 4
_i$223092 = -44						; size = 4
_ui$223142 = -40					; size = 4
_eTargetPlayer$223109 = -40				; size = 4
tv1194 = -36						; size = 4
_pSneakAttackOperation$223113 = -36			; size = 4
tv1088 = -32						; size = 4
_aiMajorCivIndex$ = -28					; size = 16
__$EHRec$ = -12						; size = 12
_uiSpyIndex$ = 8					; size = 4
?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z PROC	; CvPlayerEspionage::UncoverIntrigue, COMDAT
; _this$ = ecx

; 741  : {

	push	-1
	push	__ehhandler$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 44					; 0000002cH

; 742  : 	CvEspionageSpy* pSpy = &(m_aSpyList[uiSpyIndex]);

	mov	eax, DWORD PTR _uiSpyIndex$[esp+52]
	mov	edx, ecx
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	mov	eax, DWORD PTR [edx]
	add	ecx, ecx
	add	ecx, ecx
	push	ebx
	add	eax, ecx
	push	ebp

; 743  : 	CvPlot* pCityPlot = GC.getMap().plot(pSpy->m_iCityX, pSpy->m_iCityY);

	mov	ebp, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+4]
	push	esi
	push	edi
	mov	DWORD PTR _this$[esp+72], edx
	mov	DWORD PTR tv1088[esp+72], ecx
	cmp	eax, -2147483647			; 80000001H
	je	$LN58@UncoverInt
	cmp	ebp, -2147483647			; 80000001H
	je	SHORT $LN58@UncoverInt
	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	dl, BYTE PTR [ebx+4056]
	mov	ecx, DWORD PTR [ebx+4020]
	test	dl, dl
	je	SHORT $LN380@UncoverInt
	test	eax, eax
	jge	SHORT $LN70@UncoverInt
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN72@UncoverInt
$LN70@UncoverInt:
	cmp	eax, ecx
	jl	SHORT $LN380@UncoverInt
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN72@UncoverInt
$LN380@UncoverInt:
	mov	esi, eax
$LN72@UncoverInt:
	mov	al, BYTE PTR [ebx+4057]
	mov	edi, DWORD PTR [ebx+4024]
	test	al, al
	je	SHORT $LN383@UncoverInt
	test	ebp, ebp
	jge	SHORT $LN80@UncoverInt
	mov	eax, ebp
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN82@UncoverInt
$LN80@UncoverInt:
	cmp	ebp, edi
	jl	SHORT $LN383@UncoverInt
	mov	eax, ebp
	cdq
	idiv	edi
	jmp	SHORT $LN82@UncoverInt
$LN383@UncoverInt:
	mov	edx, ebp
$LN82@UncoverInt:
	test	esi, esi
	jl	SHORT $LN58@UncoverInt
	cmp	esi, ecx
	jge	SHORT $LN58@UncoverInt
	test	edx, edx
	jl	SHORT $LN58@UncoverInt
	cmp	edx, edi
	jge	SHORT $LN58@UncoverInt
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebx+4068]
	jmp	SHORT $LN60@UncoverInt
$LN58@UncoverInt:
	xor	ecx, ecx
$LN60@UncoverInt:

; 744  : 	CvCity* pCity = NULL;
; 745  : 	CvCityEspionage* pCityEspionage = NULL;
; 746  : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	eax, DWORD PTR _this$[esp+72]
	mov	edx, DWORD PTR [eax+1292]
	mov	edi, DWORD PTR [edx+44]

; 747  : 	PlayerTypes eCityOwner = NO_PLAYER;
; 748  : 	if(pCityPlot)

	test	ecx, ecx
	je	$LN364@UncoverInt

; 749  : 	{
; 750  : 		pCity = pCityPlot->getPlotCity();

	mov	eax, DWORD PTR [ecx+104]
	xor	ebx, ebx
	cmp	eax, ebx
	jl	SHORT $LN100@UncoverInt
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN100@UncoverInt
	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	jmp	SHORT $LN387@UncoverInt
$LN100@UncoverInt:
	xor	eax, eax
$LN387@UncoverInt:

; 751  : 		eCityOwner = pCity->getOwner();

	mov	esi, DWORD PTR [eax+84]

; 752  : 		pCityEspionage = pCity->GetCityEspionage();

	mov	ecx, eax
	mov	DWORD PTR _pCity$[esp+72], eax
	mov	DWORD PTR _eCityOwner$[esp+72], esi
	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage

; 753  : 	}
; 754  : 
; 755  : 	CvAssertMsg(pCity, "Spy needs to be in city to uncover intrigue");
; 756  : 	if(!pCity)
; 757  : 	{
; 758  : 		return;
; 759  : 	}
; 760  : 
; 761  : 	CvAssertMsg(ePlayer != eCityOwner, "Uncover intrigue should not occur when a spy is in their own city");
; 762  : 	if(ePlayer == eCityOwner)

	cmp	edi, esi
	je	$LN364@UncoverInt

; 763  : 	{
; 764  : 		return;
; 765  : 	}
; 766  : 
; 767  : 	// make a list of the active civs
; 768  : 	std::vector<int> aiMajorCivIndex;

	xor	edi, edi
	xor	eax, eax
	mov	DWORD PTR _aiMajorCivIndex$[esp+76], edi
	mov	DWORD PTR _aiMajorCivIndex$[esp+80], eax
	mov	DWORD PTR _aiMajorCivIndex$[esp+84], ebx

; 769  : 	for(int i = 0; i < MAX_MAJOR_CIVS; i++)

	xor	esi, esi
	mov	DWORD PTR __$EHRec$[esp+80], ebx
	mov	DWORD PTR _i$223092[esp+72], esi
	npad	11
$LL385@UncoverInt:

; 770  : 	{
; 771  : 		if(GET_PLAYER((PlayerTypes)i).isAlive())

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edx, esi
	imul	edx, 63236				; 0000f704H
	cmp	BYTE PTR [edx+ecx+2256], 0
	je	SHORT $LN46@UncoverInt

; 772  : 		{
; 773  : 			aiMajorCivIndex.push_back(i);

	cmp	edi, ebx
	jne	SHORT $LN160@UncoverInt
	xor	ecx, ecx
	jmp	SHORT $LN161@UncoverInt
$LN160@UncoverInt:
	mov	ecx, DWORD PTR _aiMajorCivIndex$[esp+84]
	sub	ecx, edi
	sar	ecx, 2
$LN161@UncoverInt:
	mov	edx, eax
	sub	edx, edi
	sar	edx, 2
	cmp	edx, ecx
	jae	SHORT $LN153@UncoverInt
	mov	DWORD PTR [eax], esi
	add	eax, 4
	mov	DWORD PTR _aiMajorCivIndex$[esp+80], eax
	jmp	SHORT $LN46@UncoverInt
$LN153@UncoverInt:
	lea	ecx, DWORD PTR _i$223092[esp+72]
	push	ecx
	push	1
	push	eax
	lea	ecx, DWORD PTR _aiMajorCivIndex$[esp+84]
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
	mov	eax, DWORD PTR _aiMajorCivIndex$[esp+80]
	mov	edi, DWORD PTR _aiMajorCivIndex$[esp+76]
$LN46@UncoverInt:
	inc	esi
	cmp	esi, 22					; 00000016H
	mov	DWORD PTR _i$223092[esp+72], esi
	jl	SHORT $LL385@UncoverInt

; 774  : 		}
; 775  : 	}
; 776  : 
; 777  : 	// randomize that list
; 778  : 	for(uint ui = 0; ui < aiMajorCivIndex.size(); ui++)

	sub	eax, edi
	mov	ebx, eax
	sar	ebx, 2
	xor	esi, esi
	mov	DWORD PTR tv1167[esp+72], ebx
	test	ebx, ebx
	jbe	SHORT $LN41@UncoverInt
$LL43@UncoverInt:

; 779  : 	{
; 780  : 		int iTempValue;
; 781  : 		uint uiTargetSlot = GC.getGame().getJonRandNum(aiMajorCivIndex.size(), "Randomizing aiMajorCivIndex list within UncoverIntrigue");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	OFFSET $SG223104
	push	ebx
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 782  : 		iTempValue = aiMajorCivIndex[ui];

	mov	ecx, DWORD PTR [edi+esi*4]

; 783  : 		aiMajorCivIndex[ui] = aiMajorCivIndex[uiTargetSlot];

	mov	edx, DWORD PTR [edi+eax*4]
	mov	DWORD PTR [edi+esi*4], edx
	inc	esi

; 784  : 		aiMajorCivIndex[uiTargetSlot] = iTempValue;

	mov	DWORD PTR [edi+eax*4], ecx
	cmp	esi, ebx
	jb	SHORT $LL43@UncoverInt
$LN41@UncoverInt:

; 785  : 	}
; 786  : 
; 787  : 	// go through to determine any intrigue
; 788  : 
; 789  : 	// sending out a sneak attack
; 790  : 	for(uint ui = 0; ui < aiMajorCivIndex.size(); ui++)

	xor	edi, edi
	test	ebx, ebx
	jbe	$LN379@UncoverInt
	mov	ebp, DWORD PTR _eCityOwner$[esp+72]
$LL40@UncoverInt:

; 791  : 	{
; 792  : 		PlayerTypes eTargetPlayer = (PlayerTypes)aiMajorCivIndex[ui];

	mov	eax, DWORD PTR _aiMajorCivIndex$[esp+76]
	mov	ebx, DWORD PTR [eax+edi*4]
	mov	DWORD PTR _eTargetPlayer$223109[esp+72], ebx

; 793  : 		// a player shouldn't target themselves for a sneak attack. That's strange.
; 794  : 		if(eTargetPlayer == eCityOwner)

	cmp	ebx, ebp
	je	SHORT $LN39@UncoverInt

; 795  : 		{
; 796  : 			continue;
; 797  : 		}
; 798  : 
; 799  : 		// Don't tell other civs about what the shadow ai is thinking because that's incorrect information!
; 800  : 		if(GET_PLAYER(eCityOwner).isHuman())

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	esi, ebp
	imul	esi, 63236				; 0000f704H
	add	ecx, esi
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	jne	SHORT $LN39@UncoverInt

; 801  : 		{
; 802  : 			continue;
; 803  : 		}
; 804  : 
; 805  : 		CvAIOperation* pSneakAttackOperation = GET_PLAYER(eCityOwner).GetMilitaryAI()->GetSneakAttackOperation(eTargetPlayer);

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+edx]
	push	ebx
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?GetSneakAttackOperation@CvMilitaryAI@@QAEPAVCvAIOperation@@W4PlayerTypes@@@Z ; CvMilitaryAI::GetSneakAttackOperation
	mov	DWORD PTR _pSneakAttackOperation$223113[esp+72], eax

; 806  : 		if(!pSneakAttackOperation)

	test	eax, eax
	jne	SHORT $LN35@UncoverInt
$LN39@UncoverInt:

; 785  : 	}
; 786  : 
; 787  : 	// go through to determine any intrigue
; 788  : 
; 789  : 	// sending out a sneak attack
; 790  : 	for(uint ui = 0; ui < aiMajorCivIndex.size(); ui++)

	inc	edi
	cmp	edi, DWORD PTR tv1167[esp+72]
	jb	SHORT $LL40@UncoverInt

; 743  : 	CvPlot* pCityPlot = GC.getMap().plot(pSpy->m_iCityX, pSpy->m_iCityY);

	jmp	$LN379@UncoverInt
$LN35@UncoverInt:

; 807  : 		{
; 808  : 			continue;
; 809  : 		}
; 810  : 
; 811  : 		CvCity* pTargetCity = NULL;
; 812  : 		int iSpyRank = m_aSpyList[uiSpyIndex].m_eRank;

	mov	ebp, DWORD PTR _this$[esp+72]
	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR tv1088[esp+72]

; 813  : 		iSpyRank += m_pPlayer->GetCulture()->GetInfluenceMajorCivSpyRankBonus(eCityOwner);

	mov	edx, DWORD PTR _eCityOwner$[esp+72]
	mov	esi, DWORD PTR [eax+ecx+12]
	mov	ecx, DWORD PTR [ebp+1292]
	push	edx
	xor	ebx, ebx
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceMajorCivSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceMajorCivSpyRankBonus
	add	esi, eax

; 814  : 
; 815  : 		if(iSpyRank >= SPY_RANK_AGENT)

	cmp	esi, 1
	jl	SHORT $LN238@UncoverInt

; 816  : 		{
; 817  : 			CvPlot* pPlot = pSneakAttackOperation->GetTargetPlot();

	mov	ecx, DWORD PTR _pSneakAttackOperation$223113[esp+72]
	call	?GetTargetPlot@CvAIOperation@@QBEPAVCvPlot@@XZ ; CvAIOperation::GetTargetPlot

; 818  : 			if(pPlot)

	test	eax, eax
	je	SHORT $LN238@UncoverInt

; 819  : 			{
; 820  : 				pTargetCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR [eax+104]
	test	ecx, ecx
	jl	SHORT $LN237@UncoverInt
	cmp	ecx, 64					; 00000040H
	jge	SHORT $LN237@UncoverInt
	mov	eax, DWORD PTR [eax+108]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	ebx, eax
	jmp	SHORT $LN238@UncoverInt
$LN237@UncoverInt:
	xor	ebx, ebx
$LN238@UncoverInt:

; 821  : 			}
; 822  : 		}
; 823  : 
; 824  : 		PlayerTypes eRevealedTargetPlayer = NO_PLAYER;

	or	edi, -1

; 825  : 		if (iSpyRank == SPY_RANK_RECRUIT)

	test	esi, esi
	jne	SHORT $LN32@UncoverInt

; 826  : 		{
; 827  : 			eRevealedTargetPlayer = (PlayerTypes)MAX_MAJOR_CIVS; // hack to indicate that we shouldn't know the target due to our low spy rank

	lea	edi, DWORD PTR [esi+22]

; 828  : 		}
; 829  : 		else

	jmp	SHORT $LN30@UncoverInt
$LN32@UncoverInt:

; 830  : 		{
; 831  : 			if(GET_TEAM(m_pPlayer->getTeam()).isHasMet(GET_PLAYER(eTargetPlayer).getTeam()))

	mov	ecx, DWORD PTR _eTargetPlayer$223109[esp+72]
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	imul	ecx, 63236				; 0000f704H
	mov	eax, DWORD PTR [ecx+edx+44]
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN248@UncoverInt
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN249@UncoverInt
$LN248@UncoverInt:
	or	ecx, -1
$LN249@UncoverInt:
	mov	eax, DWORD PTR [ebp+1292]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN257@UncoverInt
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN258@UncoverInt
$LN257@UncoverInt:
	or	eax, -1
$LN258@UncoverInt:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet
	test	al, al
	je	SHORT $LN30@UncoverInt

; 832  : 			{
; 833  : 				eRevealedTargetPlayer = eTargetPlayer;

	mov	edi, DWORD PTR _eTargetPlayer$223109[esp+72]
$LN30@UncoverInt:

; 834  : 			}
; 835  : 		}
; 836  : 
; 837  : 		switch(pSneakAttackOperation->GetOperationType())

	mov	ecx, DWORD PTR _pSneakAttackOperation$223113[esp+72]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	eax, 6
	je	SHORT $LN27@UncoverInt
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN379@UncoverInt

; 842  : 		}
; 843  : 		break;
; 844  : 		case AI_OPERATION_NAVAL_SNEAK_ATTACK:
; 845  : 		{
; 846  : 			AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, eRevealedTargetPlayer, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_AMPHIBIOUS_SNEAK_ATTACK, uiSpyIndex, pTargetCity, true);

	mov	eax, DWORD PTR _uiSpyIndex$[esp+68]
	mov	ecx, DWORD PTR _eCityOwner$[esp+72]
	mov	edx, DWORD PTR [ebp+1292]
	push	1
	push	ebx
	push	eax
	mov	eax, DWORD PTR [edx+44]
	push	4
	push	-1
	push	-1
	push	edi
	push	ecx
	push	eax

; 847  : 		}
; 848  : 		break;

	jmp	SHORT $LN388@UncoverInt
$LN27@UncoverInt:

; 838  : 		{
; 839  : 		case AI_OPERATION_SNEAK_CITY_ATTACK:
; 840  : 		{
; 841  : 			AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, eRevealedTargetPlayer, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_ARMY_SNEAK_ATTACK, uiSpyIndex, pTargetCity, true);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+68]
	mov	edx, DWORD PTR _eCityOwner$[esp+72]
	mov	eax, DWORD PTR [ebp+1292]
	push	1
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR [eax+44]
	push	3
	push	-1
	push	-1
	push	edi
	push	edx
	push	ecx
$LN388@UncoverInt:
	mov	ecx, ebp
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
$LN379@UncoverInt:

; 849  : 		}
; 850  : 
; 851  : 		// If a sneak attack is reported, bust out of the loop
; 852  : 		break;
; 853  : 	}
; 854  : 
; 855  : 	// building up an army
; 856  : 	if(!GET_PLAYER(eCityOwner).isHuman())

	mov	esi, DWORD PTR _eCityOwner$[esp+72]
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edi, esi
	imul	edi, 63236				; 0000f704H
	lea	ecx, DWORD PTR [edi+edx]
	mov	DWORD PTR tv1194[esp+72], edi
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	jne	SHORT $LN382@UncoverInt

; 857  : 	{
; 858  : 		ArmyType eArmyType = GET_PLAYER(eCityOwner).GetMilitaryAI()->GetArmyBeingBuilt();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [edi+eax]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	eax, DWORD PTR [eax+44]

; 859  : 		if(eArmyType != NO_ARMY_TYPE)

	cmp	eax, -1
	je	SHORT $LN382@UncoverInt

; 860  : 		{
; 861  : 			switch(eArmyType)

	sub	eax, 0

; 865  : 				break;
; 866  : 			case ARMY_TYPE_NAVAL_INVASION:
; 867  : 				AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY, uiSpyIndex, pCity, true);

	mov	ebx, DWORD PTR _this$[esp+72]
	je	SHORT $LN21@UncoverInt

; 860  : 		{
; 861  : 			switch(eArmyType)

	sub	eax, 1
	jne	SHORT $LN22@UncoverInt

; 865  : 				break;
; 866  : 			case ARMY_TYPE_NAVAL_INVASION:
; 867  : 				AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_BUILDING_AMPHIBIOUS_ARMY, uiSpyIndex, pCity, true);

	mov	ecx, DWORD PTR _pCity$[esp+72]
	mov	edx, DWORD PTR _uiSpyIndex$[esp+68]
	mov	eax, DWORD PTR [ebx+1292]
	push	1
	push	ecx
	mov	ecx, DWORD PTR [eax+44]
	push	edx
	push	2
	push	-1
	push	-1
	push	-1
	push	esi
	push	ecx
	mov	ecx, ebx
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage

; 868  : 				break;

	jmp	SHORT $LN22@UncoverInt
$LN21@UncoverInt:

; 862  : 			{
; 863  : 			case ARMY_TYPE_LAND:
; 864  : 				AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_BUILDING_ARMY, uiSpyIndex, pCity, true);

	mov	edx, DWORD PTR _pCity$[esp+72]
	mov	eax, DWORD PTR _uiSpyIndex$[esp+68]
	mov	ecx, DWORD PTR [ebx+1292]
	push	1
	push	edx
	mov	edx, DWORD PTR [ecx+44]
	push	eax
	push	1
	push	-1
	push	-1
	push	-1
	push	esi
	push	edx
	mov	ecx, ebx
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
	jmp	SHORT $LN22@UncoverInt
$LN382@UncoverInt:
	mov	ebx, DWORD PTR _this$[esp+72]
$LN22@UncoverInt:

; 869  : 			}
; 870  : 		}
; 871  : 	}
; 872  : 
; 873  : 	// deception!
; 874  : 	CvDiplomacyAI* pTargetDiploAI = GET_PLAYER(eCityOwner).GetDiplomacyAI();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [edi+eax]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ebp, eax

; 875  : 	CvAssertMsg(pTargetDiploAI, "pTargetDiploAI is null");
; 876  : 	if(!pTargetDiploAI)

	test	ebp, ebp

; 877  : 	{
; 878  : 		return;

	je	$LN1@UncoverInt

; 879  : 	}
; 880  : 
; 881  : 	for(uint ui = 0; ui < aiMajorCivIndex.size(); ui++)

	xor	eax, eax
	mov	DWORD PTR _ui$223142[esp+72], eax
	cmp	DWORD PTR tv1167[esp+72], eax
	jbe	$LN7@UncoverInt
	jmp	SHORT $LN18@UncoverInt
	npad	1
$LL384@UncoverInt:
	mov	edi, DWORD PTR tv1194[esp+72]
$LN18@UncoverInt:

; 882  : 	{
; 883  : 		PlayerTypes eOtherOtherPlayer = (PlayerTypes)aiMajorCivIndex[ui];

	mov	ecx, DWORD PTR _aiMajorCivIndex$[esp+76]
	mov	esi, DWORD PTR [ecx+eax*4]

; 884  : 		// doesn't make sense for player to give information on themselves
; 885  : 		if(eOtherOtherPlayer == eCityOwner)

	cmp	esi, DWORD PTR _eCityOwner$[esp+72]
	je	$LN17@UncoverInt

; 886  : 		{
; 887  : 			continue;
; 888  : 		}
; 889  : 
; 890  : 		// Don't tell other civs about what the shadow ai is thinking because that's incorrect information!
; 891  : 		if(GET_PLAYER(eCityOwner).isHuman())

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [edi+edx]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al
	jne	$LN17@UncoverInt

; 892  : 		{
; 893  : 			continue;
; 894  : 		}
; 895  : 
; 896  : 		MajorCivApproachTypes eSurfaceApproach = pTargetDiploAI->GetMajorCivApproach(eOtherOtherPlayer, true);

	push	1
	push	esi
	mov	ecx, ebp
	call	?GetMajorCivApproach@CvDiplomacyAI@@QBE?AW4MajorCivApproachTypes@@W4PlayerTypes@@_N@Z ; CvDiplomacyAI::GetMajorCivApproach

; 897  : 		MajorCivApproachTypes eHonestApproach = pTargetDiploAI->GetMajorCivApproach(eOtherOtherPlayer, false);

	push	0
	push	esi
	mov	ecx, ebp
	mov	edi, eax
	call	?GetMajorCivApproach@CvDiplomacyAI@@QBE?AW4MajorCivApproachTypes@@W4PlayerTypes@@_N@Z ; CvDiplomacyAI::GetMajorCivApproach

; 898  : 
; 899  : 		// if the current approach is a dangerous approach
; 900  : 		if(eHonestApproach == MAJOR_CIV_APPROACH_DECEPTIVE || eHonestApproach == MAJOR_CIV_APPROACH_WAR)

	cmp	eax, 2
	je	SHORT $LN12@UncoverInt
	test	eax, eax
	jne	SHORT $LN17@UncoverInt
$LN12@UncoverInt:

; 901  : 		{
; 902  : 			// if the surface approach hides this
; 903  : 			if(eSurfaceApproach == MAJOR_CIV_APPROACH_FRIENDLY || eSurfaceApproach == MAJOR_CIV_APPROACH_NEUTRAL)

	cmp	edi, 5
	je	SHORT $LN10@UncoverInt
	cmp	edi, 6

; 918  : 				}
; 919  : 				break; // we reported intrigue, now bail out
; 920  : 			}
; 921  : 		}
; 922  : 	}

	jne	SHORT $LN17@UncoverInt
$LN10@UncoverInt:

; 904  : 			{
; 905  : 				if(GET_TEAM(GET_PLAYER(eCityOwner).getTeam()).isAtWar(GET_PLAYER(eOtherOtherPlayer).getTeam()))

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edi, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	eax, esi
	imul	eax, 63236				; 0000f704H
	mov	eax, DWORD PTR [eax+ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN307@UncoverInt
	mov	edx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN308@UncoverInt
$LN307@UncoverInt:
	or	edx, -1
$LN308@UncoverInt:
	mov	eax, DWORD PTR tv1194[esp+72]
	mov	eax, DWORD PTR [eax+ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN318@UncoverInt
	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN319@UncoverInt
$LN318@UncoverInt:
	or	eax, -1
$LN319@UncoverInt:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	edx
	mov	ecx, eax
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	je	SHORT $LN9@UncoverInt
$LN17@UncoverInt:

; 879  : 	}
; 880  : 
; 881  : 	for(uint ui = 0; ui < aiMajorCivIndex.size(); ui++)

	mov	eax, DWORD PTR _ui$223142[esp+72]
	inc	eax
	mov	DWORD PTR _ui$223142[esp+72], eax
	cmp	eax, DWORD PTR tv1167[esp+72]
	jb	$LL384@UncoverInt

; 743  : 	CvPlot* pCityPlot = GC.getMap().plot(pSpy->m_iCityX, pSpy->m_iCityY);

	jmp	$LN7@UncoverInt
$LN9@UncoverInt:

; 906  : 				{
; 907  : 					// If the teams are already at war, this isn't notable
; 908  : 					continue;
; 909  : 				}
; 910  : 
; 911  : 				if(GET_TEAM(m_pPlayer->getTeam()).isHasMet(GET_PLAYER(eOtherOtherPlayer).getTeam()))

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edx, esi
	imul	edx, 63236				; 0000f704H
	mov	eax, DWORD PTR [edx+eax+44]
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN331@UncoverInt
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN332@UncoverInt
$LN331@UncoverInt:
	or	ecx, -1
$LN332@UncoverInt:
	mov	eax, DWORD PTR [ebx+1292]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN340@UncoverInt
	mov	edx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN341@UncoverInt
$LN340@UncoverInt:
	or	eax, -1
$LN341@UncoverInt:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ecx
	mov	ecx, eax
	call	?isHasMet@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isHasMet

; 912  : 				{
; 913  : 					AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, eOtherOtherPlayer, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_DECEPTION, uiSpyIndex, pCity, true);

	push	1
	test	al, al
	je	SHORT $LN8@UncoverInt
	mov	eax, DWORD PTR _pCity$[esp+76]
	mov	ecx, DWORD PTR _uiSpyIndex$[esp+72]
	mov	edx, DWORD PTR _eCityOwner$[esp+76]
	push	eax
	mov	eax, DWORD PTR [ebx+1292]
	push	ecx
	mov	ecx, DWORD PTR [eax+44]
	push	0
	push	-1
	push	-1
	push	esi
	push	edx
	push	ecx

; 914  : 				}
; 915  : 				else

	jmp	SHORT $LN390@UncoverInt
$LN8@UncoverInt:

; 916  : 				{
; 917  : 					AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, NO_BUILDING, NO_PROJECT, INTRIGUE_TYPE_DECEPTION, uiSpyIndex, pCity, true);

	mov	edx, DWORD PTR _pCity$[esp+76]
	mov	eax, DWORD PTR _uiSpyIndex$[esp+72]
	mov	ecx, DWORD PTR _eCityOwner$[esp+76]
	push	edx
	mov	edx, DWORD PTR [ebx+1292]
	push	eax
	mov	eax, DWORD PTR [edx+44]
	push	0
	push	-1
	push	-1
	push	-1
	push	ecx
	push	eax
$LN390@UncoverInt:
	mov	ecx, ebx
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
$LN7@UncoverInt:

; 923  : 
; 924  : 	ProjectTypes eProject = pCity->getProductionProject();

	mov	ebp, DWORD PTR _pCity$[esp+72]
	mov	ecx, ebp
	call	?getProductionProject@CvCity@@QBE?AW4ProjectTypes@@XZ ; CvCity::getProductionProject

; 925  : 	BuildingTypes eBuilding = pCity->getProductionBuilding();

	mov	ecx, ebp
	mov	edi, eax
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	mov	esi, eax

; 926  : 	bool bNotifyAboutConstruction = false;
; 927  : 	if (eProject != NO_PROJECT)

	cmp	edi, -1

; 928  : 	{
; 929  : 		bNotifyAboutConstruction = true;

	jne	SHORT $LN377@UncoverInt

; 930  : 	}
; 931  : 	else if (eBuilding != NO_BUILDING)

	cmp	esi, edi
	je	SHORT $LN1@UncoverInt

; 932  : 	{
; 933  : 		CvBuildingEntry* pBuildingInfo = GC.getBuildingInfo(eBuilding);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo

; 934  : 		CvAssertMsg(pBuildingInfo, "pBuildingInfo is null");
; 935  : 		if (pBuildingInfo)

	test	eax, eax
	je	SHORT $LN1@UncoverInt

; 936  : 		{
; 937  : 			if (::isWorldWonderClass(pBuildingInfo->GetBuildingClassInfo()))

	mov	ecx, eax
	call	?GetBuildingClassInfo@CvBuildingEntry@@QBEABVCvBuildingClassInfo@@XZ ; CvBuildingEntry::GetBuildingClassInfo
	push	eax
	call	?isWorldWonderClass@@YA_NABVCvBuildingClassInfo@@@Z ; isWorldWonderClass
	add	esp, 4
	test	al, al
	je	SHORT $LN1@UncoverInt
$LN377@UncoverInt:

; 938  : 			{
; 939  : 				bNotifyAboutConstruction = true;
; 940  : 			}
; 941  : 		}
; 942  : 	}
; 943  : 
; 944  : 	if (bNotifyAboutConstruction)
; 945  : 	{
; 946  : 		AddIntrigueMessage(m_pPlayer->GetID(), eCityOwner, NO_PLAYER, eBuilding, eProject, INTRIGUE_TYPE_CONSTRUCTING_WONDER, uiSpyIndex, pCity, true);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+68]
	mov	edx, DWORD PTR _eCityOwner$[esp+72]
	mov	eax, DWORD PTR [ebx+1292]
	push	1
	push	ebp
	push	ecx
	mov	ecx, DWORD PTR [eax+44]
	push	5
	push	edi
	push	esi
	push	-1
	push	edx
	push	ecx
	mov	ecx, ebx
	call	?AddIntrigueMessage@CvPlayerEspionage@@QAEXW4PlayerTypes@@00W4BuildingTypes@@W4ProjectTypes@@W4CvIntrigueType@@IPAVCvCity@@_N@Z ; CvPlayerEspionage::AddIntrigueMessage
$LN1@UncoverInt:

; 947  : 	}
; 948  : }

	mov	eax, DWORD PTR _aiMajorCivIndex$[esp+76]
	test	eax, eax
	je	SHORT $LN364@UncoverInt
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN364@UncoverInt:
	mov	ecx, DWORD PTR __$EHRec$[esp+72]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 56					; 00000038H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z$0:
	lea	ecx, DWORD PTR _aiMajorCivIndex$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__ehhandler$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z ENDP	; CvPlayerEspionage::UncoverIntrigue
PUBLIC	?ProcessSpy@CvPlayerEspionage@@QAEXI@Z		; CvPlayerEspionage::ProcessSpy
EXTRN	?ChangeNumTimesRobbedBy@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z:PROC ; CvDiplomacyAI::ChangeNumTimesRobbedBy
EXTRN	?getCivilizationTypeKey@CvPlayer@@QBEPBDXZ:PROC	; CvPlayer::getCivilizationTypeKey
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__ehfuncinfo$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z DD 019930522H
	DD	01eH
	DD	FLAT:__unwindtable$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$13
	DD	0cH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$18
	DD	013H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$20
	DD	015H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$21
	DD	015H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$22
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$23
	DD	018H
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$24
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$25
	DD	01aH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$26
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$27
	DD	01cH
	DD	FLAT:__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$28
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\lekmod files\lekmod dll versions\v29\lekmod_dll\cvgamecoredll_expansion2\cvespionageclasses.cpp
xdata$x	ENDS
;	COMDAT ?ProcessSpy@CvPlayerEspionage@@QAEXI@Z
_TEXT	SEGMENT
_pCity$ = -572						; size = 4
_eCityOwner$ = -568					; size = 4
$T267315 = -564						; size = 4
_pDefenderEspionageAI$223007 = -564			; size = 4
_pDefendingPlayerEspionage$222959 = -564		; size = 4
_kSpyOwner$222946 = -564				; size = 4
_iSpyResult$222937 = -564				; size = 4
tv3829 = -560						; size = 4
_pSpy$ = -560						; size = 4
tv4584 = -556						; size = 4
tv4565 = -556						; size = 4
$T268781 = -556						; size = 4
_pEspionageAI$222979 = -556				; size = 4
_pNotifications$222966 = -556				; size = 4
_iCounterspyIndex$222940 = -556				; size = 4
tv3648 = -552						; size = 4
_pNotifications$222922 = -552				; size = 4
_pNotifications$222885 = -552				; size = 4
_bLastQualified$ = -546					; size = 1
_bHadSurveillance$ = -545				; size = 1
_strMsg$223056 = -544					; size = 28
_strMsg$223025 = -544					; size = 28
_strMsg$222999 = -544					; size = 28
_strMsg$222987 = -544					; size = 28
_strMsg$222916 = -544					; size = 28
_strMsg$222911 = -544					; size = 28
_strMsg$222904 = -544					; size = 28
tv3981 = -516						; size = 4
$T269025 = -516						; size = 4
$T268973 = -516						; size = 4
$T268845 = -516						; size = 4
_pNotifications$223010 = -516				; size = 4
_iRate$223004 = -516					; size = 4
_kHeistLocation$222936 = -516				; size = 8
_strNotification$223064 = -508				; size = 80
_strNotification$223015 = -508				; size = 80
_strNotification$222972 = -508				; size = 80
_strNotification$222928 = -508				; size = 80
_strNotification$222896 = -508				; size = 80
_strSummary$223061 = -428				; size = 80
_strSummary$223012 = -428				; size = 80
_strSummary$222968 = -428				; size = 80
_strSummary$222924 = -428				; size = 80
_strSummary$222887 = -428				; size = 80
_strMsg$223070 = -348					; size = 28
$T267151 = -320						; size = 28
$T267171 = -292						; size = 28
$T267172 = -264						; size = 28
$T267164 = -236						; size = 28
$T267173 = -208						; size = 28
$T267166 = -180						; size = 28
$T267176 = -152						; size = 28
$T267165 = -124						; size = 28
$T267152 = -96						; size = 28
$T267163 = -68						; size = 28
$T267153 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_uiSpyIndex$ = 8					; size = 4
?ProcessSpy@CvPlayerEspionage@@QAEXI@Z PROC		; CvPlayerEspionage::ProcessSpy, COMDAT
; _this$ = ecx

; 233  : {

	push	-1
	push	__ehhandler$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 234  : 	CvEspionageSpy* pSpy = &(m_aSpyList[uiSpyIndex]);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+580]
	mov	ebx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx*8]
	sub	eax, ecx
	add	eax, eax
	add	eax, eax
	add	ebx, eax
	push	edi

; 235  : 	bool bLastQualified;
; 236  : 	CvPlot* pCityPlot = GC.getMap().plot(pSpy->m_iCityX, pSpy->m_iCityY);

	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR tv3648[esp+588], eax
	mov	eax, DWORD PTR [ebx+8]
	mov	DWORD PTR _pSpy$[esp+588], ebx
	mov	DWORD PTR $T267315[esp+588], eax
	cmp	edi, -2147483647			; 80000001H
	je	$LN119@ProcessSpy@2
	cmp	eax, -2147483647			; 80000001H
	je	$LN119@ProcessSpy@2
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	dl, BYTE PTR [eax+4056]
	mov	ecx, DWORD PTR [eax+4020]
	test	dl, dl
	je	SHORT $LN129@ProcessSpy@2
	test	edi, edi
	jge	SHORT $LN131@ProcessSpy@2
	mov	eax, edi
	cdq
	idiv	ecx
	mov	edi, edx
	add	edi, ecx
	jmp	SHORT $LN129@ProcessSpy@2
$LN131@ProcessSpy@2:
	cmp	edi, ecx
	jl	SHORT $LN129@ProcessSpy@2
	mov	eax, edi
	cdq
	idiv	ecx
	mov	edi, edx
$LN129@ProcessSpy@2:
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	al, BYTE PTR [edx+4057]
	mov	ebp, DWORD PTR [edx+4024]
	mov	edx, DWORD PTR $T267315[esp+588]
	test	al, al
	je	SHORT $LN139@ProcessSpy@2
	test	edx, edx
	jge	SHORT $LN141@ProcessSpy@2
	mov	eax, edx
	cdq
	idiv	ebp
	add	edx, ebp
	jmp	SHORT $LN139@ProcessSpy@2
$LN141@ProcessSpy@2:
	cmp	edx, ebp
	jl	SHORT $LN139@ProcessSpy@2
	mov	eax, edx
	cdq
	idiv	ebp
$LN139@ProcessSpy@2:
	test	edi, edi
	jl	SHORT $LN119@ProcessSpy@2
	cmp	edi, ecx
	jge	SHORT $LN119@ProcessSpy@2
	test	edx, edx
	jl	SHORT $LN119@ProcessSpy@2
	cmp	edx, ebp
	jge	SHORT $LN119@ProcessSpy@2
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	imul	ecx, edx
	add	ecx, edi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [eax+4068]
	jmp	SHORT $LN121@ProcessSpy@2
$LN119@ProcessSpy@2:
	xor	ecx, ecx
$LN121@ProcessSpy@2:

; 237  : 	CvCity* pCity = NULL;
; 238  : 	CvCityEspionage* pCityEspionage = NULL;
; 239  : 	PlayerTypes ePlayer = m_pPlayer->GetID();

	mov	edx, DWORD PTR [esi+1292]
	mov	ebp, DWORD PTR [edx+44]
	xor	edi, edi
	mov	DWORD PTR _pCity$[esp+588], edi

; 240  : 	PlayerTypes eCityOwner = NO_PLAYER;

	mov	DWORD PTR _eCityOwner$[esp+588], -1

; 241  : 	if(pCityPlot)

	cmp	ecx, edi
	je	SHORT $LN82@ProcessSpy@2

; 242  : 	{
; 243  : 		pCity = pCityPlot->getPlotCity();

	mov	eax, DWORD PTR [ecx+104]
	cmp	eax, edi
	jl	SHORT $LN161@ProcessSpy@2
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN161@ProcessSpy@2
	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pCity$[esp+588], eax

; 244  : 		if(pCity)

	test	eax, eax
	je	SHORT $LN82@ProcessSpy@2

; 245  : 		{
; 246  : 			eCityOwner = pCity->getOwner();

	mov	ecx, eax
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _eCityOwner$[esp+588], edx

; 247  : 			pCityEspionage = pCity->GetCityEspionage();

	call	?GetCityEspionage@CvCity@@QBEPAVCvCityEspionage@@XZ ; CvCity::GetCityEspionage
	mov	edi, eax
$LN82@ProcessSpy@2:

; 248  : 		}
; 249  : 	}
; 250  : 
; 251  : 	bool bHadSurveillance = HasEstablishedSurveillance(uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[esp+584]
	push	eax
	mov	ecx, esi
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	mov	BYTE PTR _bHadSurveillance$[esp+588], al

; 252  : 
; 253  : 	switch(pSpy->m_eSpyState)

	mov	eax, DWORD PTR [ebx+16]
	cmp	eax, 8
	ja	$LN2@ProcessSpy@2
	jmp	DWORD PTR $LN1036@ProcessSpy@2[eax*4]

; 242  : 	{
; 243  : 		pCity = pCityPlot->getPlotCity();

$LN161@ProcessSpy@2:
	mov	DWORD PTR _pCity$[esp+588], edi

; 244  : 		if(pCity)

	jmp	SHORT $LN82@ProcessSpy@2
$LN78@ProcessSpy@2:

; 254  : 	{
; 255  : 	case SPY_STATE_UNASSIGNED:
; 256  : 		// spy is idling
; 257  : 		return;
; 258  : 		break;
; 259  : 	case SPY_STATE_TRAVELLING:
; 260  : 		// spy is traveling to location
; 261  : 		CvAssertMsg(pCity, "pCity not defined. What?");
; 262  : 		if(!pCity)

	cmp	DWORD PTR _pCity$[esp+588], 0
	je	$LN1@ProcessSpy@2

; 263  : 		{
; 264  : 			return;
; 265  : 		}
; 266  : 		// if the spy has completed travelling, move to location
; 267  : 		pCityEspionage->Process(ePlayer);

	mov	ecx, DWORD PTR [edi+ebp*4+180]
	add	DWORD PTR [edi+ebp*4+92], ecx

; 268  : 		if(pCityEspionage->HasReachedGoal(ePlayer))

	mov	edx, DWORD PTR [edi+ebp*4+92]
	cmp	edx, DWORD PTR [edi+ebp*4+268]
	jl	$LN2@ProcessSpy@2

; 269  : 		{
; 270  : 			pCityEspionage->ResetProgress(ePlayer);

	or	eax, -1
	mov	DWORD PTR [edi+ebp*4+92], eax
	mov	DWORD PTR [edi+ebp*4+268], eax
	mov	DWORD PTR [edi+ebp*4+180], eax

; 271  : 			if (pSpy->m_bIsDiplomat)

	cmp	BYTE PTR [ebx+24], 0
	je	SHORT $LN75@ProcessSpy@2

; 272  : 			{
; 273  : 				pSpy->m_eSpyState = SPY_STATE_MAKING_INTRODUCTIONS;

	mov	DWORD PTR [ebx+16], 6

; 274  : 				int iRate = CalcPerTurn(SPY_STATE_MAKING_INTRODUCTIONS, pCity, uiSpyIndex);
; 275  : 				int iGoal = CalcRequired(SPY_STATE_MAKING_INTRODUCTIONS, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getGameSpeedInfo@CvGame@@QBEAAVCvGameSpeedInfo@@XZ ; CvGame::getGameSpeedInfo
	mov	ecx, eax
	call	?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getLeaguePercent
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 276  : 				pCityEspionage->SetActivity(ePlayer, 0, iRate, iGoal);				

	jmp	SHORT $LN1035@ProcessSpy@2
$LN75@ProcessSpy@2:

; 277  : 			}
; 278  : 			else if(pCity->getTeam() == m_pPlayer->getTeam())  // moved to a friendly city

	mov	ecx, DWORD PTR _pCity$[esp+588]
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	mov	ecx, DWORD PTR [esi+1292]
	mov	ebx, eax
	call	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ	; CvPlayer::getTeam
	cmp	ebx, eax
	jne	SHORT $LN73@ProcessSpy@2

; 279  : 			{
; 280  : 				// moving to a defensive location
; 281  : 				pSpy->m_eSpyState = SPY_STATE_COUNTER_INTEL;

	mov	eax, DWORD PTR _pSpy$[esp+588]
	mov	DWORD PTR [eax+16], 5

; 282  : 			}
; 283  : 			else // moved to an opponent's city

	jmp	$LN2@ProcessSpy@2
$LN73@ProcessSpy@2:

; 284  : 			{
; 285  : 				pSpy->m_eSpyState = SPY_STATE_SURVEILLANCE;

	mov	ecx, DWORD PTR _pSpy$[esp+588]

; 286  : 				int iRate = CalcPerTurn(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);
; 287  : 				int iGoal = CalcRequired(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _pCity$[esp+588]
	mov	DWORD PTR [ecx+16], 2
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [esi+1292]
	push	eax
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceSurveillanceTime
$LN1035@ProcessSpy@2:

; 288  : 				pCityEspionage->SetActivity(ePlayer, 0, iRate, iGoal);

	mov	DWORD PTR [edi+ebp*4+92], 0
	mov	DWORD PTR [edi+ebp*4+180], 1
	mov	DWORD PTR [edi+ebp*4+268], eax

; 289  : 			}
; 290  : 		}
; 291  : 		break;

	jmp	$LN2@ProcessSpy@2
$LN71@ProcessSpy@2:

; 292  : 	case SPY_STATE_SURVEILLANCE:
; 293  : 		CvAssertMsg(pCity, "pCity not defined. What?");
; 294  : 		if(!pCity)

	cmp	DWORD PTR _pCity$[esp+588], 0
	je	$LN1@ProcessSpy@2

; 295  : 		{
; 296  : 			return;
; 297  : 		}
; 298  : 
; 299  : 		bLastQualified = pCityEspionage->HasReachedGoal(ePlayer);

	mov	eax, DWORD PTR [edi+ebp*4+92]
	cmp	eax, DWORD PTR [edi+ebp*4+268]

; 300  : 		pCityEspionage->Process(ePlayer);

	mov	ecx, DWORD PTR [edi+ebp*4+180]
	setge	BYTE PTR _bLastQualified$[esp+588]
	add	DWORD PTR [edi+ebp*4+92], ecx

; 301  : 		if(pCityEspionage->HasReachedGoal(ePlayer))

	mov	edx, DWORD PTR [edi+ebp*4+92]
	cmp	edx, DWORD PTR [edi+ebp*4+268]
	jl	$LN2@ProcessSpy@2

; 302  : 		{
; 303  : 			if(GET_PLAYER(eCityOwner).isMinorCiv())

	mov	eax, DWORD PTR _eCityOwner$[esp+588]
	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	imul	eax, 63236				; 0000f704H
	add	ecx, eax
	mov	DWORD PTR tv3829[esp+588], eax
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	$LN68@ProcessSpy@2

; 304  : 			{
; 305  : 				pSpy->m_eSpyState = SPY_STATE_RIG_ELECTION;
; 306  : 				pCityEspionage->ResetProgress(ePlayer);

	or	eax, -1

; 307  : 				int iRate = CalcPerTurn(SPY_STATE_RIG_ELECTION, pCity, uiSpyIndex);

	cmp	DWORD PTR _uiSpyIndex$[esp+584], 0
	mov	DWORD PTR [ebx+16], 4
	mov	DWORD PTR [edi+ebp*4+92], eax
	mov	DWORD PTR [edi+ebp*4+268], eax
	mov	DWORD PTR [edi+ebp*4+180], eax
	lea	ebx, DWORD PTR [eax+2]
	jl	SHORT $LN385@ProcessSpy@2
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR tv3648[esp+588]
	mov	ecx, DWORD PTR _pCity$[esp+588]
	mov	ebx, DWORD PTR [eax+edx+12]
	mov	eax, DWORD PTR [ecx+84]
	mov	ecx, DWORD PTR [esi+1292]
	push	eax
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceCityStateSpyRankBonus@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceCityStateSpyRankBonus
	add	ebx, eax
	inc	ebx
	imul	ebx, ebx
$LN385@ProcessSpy@2:

; 308  : 				int iGoal = CalcRequired(SPY_STATE_RIG_ELECTION, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?GetTurnsUntilMinorCivElection@CvGame@@QAEHXZ ; CvGame::GetTurnsUntilMinorCivElection

; 309  : 				pCityEspionage->SetActivity(ePlayer, 0, iRate, iGoal);

	mov	DWORD PTR [edi+ebp*4+92], 0
	mov	DWORD PTR [edi+ebp*4+180], ebx
	mov	DWORD PTR [edi+ebp*4+268], eax

; 310  : 				pCityEspionage->SetLastProgress(ePlayer, iRate);

	mov	DWORD PTR [edi+ebp*4+356], ebx

; 311  : 			}
; 312  : 			else

	jmp	$LN2@ProcessSpy@2
$LN68@ProcessSpy@2:

; 313  : 			{
; 314  : 				BuildStealableTechList(eCityOwner);

	mov	edx, DWORD PTR _eCityOwner$[esp+588]
	push	edx
	mov	ecx, esi
	call	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList

; 315  : 				// moved rate out here to set the potential
; 316  : 				int iBasePotentialRate = CalcPerTurn(SPY_STATE_GATHERING_INTEL, pCity, -1);

	mov	eax, DWORD PTR _pCity$[esp+588]
	push	-1
	push	eax
	push	3
	mov	ecx, esi
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn

; 317  : 				pCityEspionage->SetLastBasePotential(ePlayer, iBasePotentialRate);

	mov	DWORD PTR [edi+ebp*4+532], eax

; 318  : 
; 319  : 				if(m_aaPlayerStealableTechList[eCityOwner].size() > 0)

	mov	eax, DWORD PTR _eCityOwner$[esp+588]
	mov	edx, DWORD PTR [esi+260]
	lea	ecx, DWORD PTR [eax+eax*4]
	cmp	DWORD PTR [edx+ecx*4+4], 0
	jbe	$LN66@ProcessSpy@2

; 320  : 				{
; 321  : 					// TODO: need to proclaim surveillance somehow
; 322  : 					pSpy->m_eSpyState = SPY_STATE_GATHERING_INTEL;
; 323  : 					pCityEspionage->ResetProgress(ePlayer);
; 324  : 					int iPotentialRate = CalcPerTurn(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR _pCity$[esp+588]
	or	eax, -1
	mov	DWORD PTR [ebx+16], 3
	mov	DWORD PTR [edi+ebp*4+92], eax
	mov	DWORD PTR [edi+ebp*4+268], eax
	mov	DWORD PTR [edi+ebp*4+180], eax
	mov	eax, DWORD PTR _uiSpyIndex$[esp+584]
	push	eax
	push	ecx
	push	3
	mov	ecx, esi
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn

; 325  : 					int iGoal = CalcRequired(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[esp+584]
	mov	ebx, eax
	mov	eax, DWORD PTR _pCity$[esp+588]
	push	edx
	push	eax
	push	3
	mov	ecx, esi
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired

; 358  : 
; 359  : 				}
; 360  : 				UncoverIntrigue(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[esp+584]
	push	edx
	mov	ecx, esi
	mov	DWORD PTR [edi+ebp*4+92], 0
	mov	DWORD PTR [edi+ebp*4+180], ebx
	mov	DWORD PTR [edi+ebp*4+268], eax
	mov	DWORD PTR [edi+ebp*4+356], ebx
	mov	DWORD PTR [edi+ebp*4+444], ebx
	call	?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z ; CvPlayerEspionage::UncoverIntrigue

; 361  : 			}
; 362  : 		}
; 363  : 		break;

	jmp	$LN2@ProcessSpy@2
$LN66@ProcessSpy@2:

; 326  : 					pCityEspionage->SetActivity(ePlayer, 0, iPotentialRate, iGoal);
; 327  : 					pCityEspionage->SetLastProgress(ePlayer, iPotentialRate);
; 328  : 					pCityEspionage->SetLastPotential(ePlayer, iPotentialRate);
; 329  : 				}
; 330  : 				else
; 331  : 				{
; 332  : 					// if this is the first time they crossed the threshold
; 333  : 					if(!bLastQualified)

	cmp	BYTE PTR _bLastQualified$[esp+588], 0
	jne	$LN63@ProcessSpy@2

; 334  : 					{
; 335  : 						CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222885[esp+588], eax

; 336  : 						if(pNotifications)

	test	eax, eax
	je	$LN63@ProcessSpy@2

; 337  : 						{
; 338  : 							Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH_S");

	lea	ecx, DWORD PTR _strSummary$222887[esp+588]
	push	OFFSET $SG222889
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 339  : 							strSummary << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR tv3829[esp+588]
	lea	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR __$EHRec$[esp+596], 0
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	push	eax
	lea	ecx, DWORD PTR _strSummary$222887[esp+592]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 340  : 							Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH");

	lea	ecx, DWORD PTR _strNotification$222896[esp+588]
	push	OFFSET $SG222898
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 341  : 							strNotification << GetSpyRankName(pSpy->m_eRank);;

	mov	edx, DWORD PTR [ebx+12]
	push	edx
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+600], 1
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$222896[esp+592]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 342  : 							strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$222896[esp+592]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 343  : 							strNotification << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edx, DWORD PTR tv3829[esp+588]
	add	ecx, edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$222896[esp+592]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 344  : 							pNotifications->Add(NOTIFICATION_SPY_CANT_STEAL_TECH, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$222887[esp+604]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$222896[esp+608]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	ecx, DWORD PTR _pNotifications$222885[esp+608]
	push	eax
	push	240697813				; 0e58c1d5H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 345  : 						}

	lea	ecx, DWORD PTR _strNotification$222896[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 0
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strSummary$222887[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN63@ProcessSpy@2:

; 346  : 					}
; 347  : 					int iRate = CalcPerTurn(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);
; 348  : 					pCityEspionage->SetLastProgress(ePlayer, iRate);

	mov	DWORD PTR [edi+ebp*4+356], 1

; 349  : 					pCityEspionage->SetLastPotential(ePlayer, -1); // set the last potential back to zero so that 

	mov	DWORD PTR [edi+ebp*4+444], -1

; 350  : 					pSpy->m_bEvaluateReassignment = true; // flag to re-evaluate because we can't steal
; 351  : 					if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR [ebx+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN1026@ProcessSpy@2

; 352  : 					{
; 353  : 						CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222904[esp+588]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 354  : 						strMsg.Format("Re-eval: can't steal research, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[esp+584]
	push	eax
	lea	ecx, DWORD PTR _strMsg$222904[esp+592]
	push	OFFSET $SG222905
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+608], 2
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 355  : 						strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	add	esp, 12					; 0000000cH
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	eax, DWORD PTR $T267151[esp+592]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$222904[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 3
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267151[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 356  : 						LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$222904[esp+588]
	push	ecx
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 357  : 					}

	lea	ecx, DWORD PTR _strMsg$222904[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1026@ProcessSpy@2:

; 358  : 
; 359  : 				}
; 360  : 				UncoverIntrigue(uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[esp+584]
	push	edx
	mov	ecx, esi
	call	?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z ; CvPlayerEspionage::UncoverIntrigue

; 361  : 			}
; 362  : 		}
; 363  : 		break;

	jmp	$LN2@ProcessSpy@2
$LN61@ProcessSpy@2:

; 364  : 	case SPY_STATE_GATHERING_INTEL:
; 365  : 		CvAssertMsg(pCity, "pCity not defined. What?");
; 366  : 		if(!pCity)

	cmp	DWORD PTR _pCity$[esp+588], 0
	je	$LN1@ProcessSpy@2

; 367  : 		{
; 368  : 			return;
; 369  : 		}
; 370  : 		BuildStealableTechList(eCityOwner);

	mov	eax, DWORD PTR _eCityOwner$[esp+588]
	push	eax
	mov	ecx, esi
	call	?BuildStealableTechList@CvPlayerEspionage@@QAEXW4PlayerTypes@@@Z ; CvPlayerEspionage::BuildStealableTechList

; 371  : 		pCityEspionage->Process(ePlayer);

	mov	ecx, DWORD PTR [edi+ebp*4+180]
	add	DWORD PTR [edi+ebp*4+92], ecx

; 372  : 		// if the rate is too low, reassign the spy
; 373  : 		if (pCityEspionage->m_aiRate[m_pPlayer->GetID()] < 100)

	mov	edx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [edx+44]
	cmp	DWORD PTR [edi+eax*4+180], 100		; 00000064H
	jge	$LN58@ProcessSpy@2

; 374  : 		{
; 375  : 			pSpy->m_bEvaluateReassignment = true;
; 376  : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR [ebx+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN58@ProcessSpy@2

; 377  : 			{
; 378  : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222911[esp+588]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 379  : 				strMsg.Format("Re-eval: potential too low, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[esp+584]
	push	eax
	lea	ecx, DWORD PTR _strMsg$222911[esp+592]
	push	OFFSET $SG222912
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+608], 4
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 380  : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	add	esp, 12					; 0000000cH
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	eax, DWORD PTR $T267152[esp+592]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$222911[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 5
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267152[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 381  : 				LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$222911[esp+588]
	push	ecx
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 382  : 			}

	lea	ecx, DWORD PTR _strMsg$222911[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN58@ProcessSpy@2:

; 383  : 		}
; 384  : 
; 385  : 		if(m_aaPlayerStealableTechList[eCityOwner].size() == 0)

	mov	eax, DWORD PTR _eCityOwner$[esp+588]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [esi+260]
	cmp	DWORD PTR [eax+edx*4+4], 0
	jne	$LN57@ProcessSpy@2

; 386  : 		{
; 387  : 			// set the spy back to surveillance mode
; 388  : 			pCityEspionage->ResetProgress(ePlayer);

	or	eax, -1
	mov	DWORD PTR [edi+ebp*4+92], eax
	mov	DWORD PTR [edi+ebp*4+268], eax
	mov	DWORD PTR [edi+ebp*4+180], eax

; 389  : 			pSpy->m_eSpyState = SPY_STATE_SURVEILLANCE;
; 390  : 			pSpy->m_bEvaluateReassignment = true; // flag for reassignment
; 391  : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR [ebx+16], 2
	mov	BYTE PTR [ebx+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN56@ProcessSpy@2

; 392  : 			{
; 393  : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222916[esp+588]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 394  : 				strMsg.Format("Re-eval: m_aaPlayerStealableTechList[eCityOwner].size() == 0, %d,", uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+584]
	push	ecx
	lea	edx, DWORD PTR _strMsg$222916[esp+592]
	push	OFFSET $SG222917
	push	edx
	mov	DWORD PTR __$EHRec$[esp+608], 6
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 395  : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	add	esp, 12					; 0000000cH
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T267153[esp+592]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$222916[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 7
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267153[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 6
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 396  : 				LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$222916[esp+588]
	push	edx
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 397  : 			}

	lea	ecx, DWORD PTR _strMsg$222916[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN56@ProcessSpy@2:

; 398  : 
; 399  : 			int iRate = CalcPerTurn(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);
; 400  : 			int iGoal = CalcRequired(SPY_STATE_SURVEILLANCE, pCity, uiSpyIndex);

	mov	eax, DWORD PTR _pCity$[esp+588]
	mov	eax, DWORD PTR [eax+84]
	mov	ecx, DWORD PTR [esi+1292]
	push	eax
	call	?GetCulture@CvPlayer@@QBEPAVCvPlayerCulture@@XZ ; CvPlayer::GetCulture
	mov	ecx, eax
	call	?GetInfluenceSurveillanceTime@CvPlayerCulture@@QBEHW4PlayerTypes@@@Z ; CvPlayerCulture::GetInfluenceSurveillanceTime

; 401  : 			int iAmount = iGoal; // put the player back at surveillance levels
; 402  : 			pCityEspionage->SetActivity(ePlayer, iAmount, iRate, iGoal);

	push	eax
	push	1
	push	eax
	push	ebp
	mov	ecx, edi
	call	?SetActivity@CvCityEspionage@@QAEXW4PlayerTypes@@HHH@Z ; CvCityEspionage::SetActivity

; 403  : 
; 404  : 			// set last progress rate
; 405  : 			iRate = CalcPerTurn(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+584]
	mov	edx, DWORD PTR _pCity$[esp+588]
	push	ecx
	push	edx
	push	3
	mov	ecx, esi
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn

; 406  : 			pCityEspionage->SetLastProgress(ePlayer, iRate);
; 407  : 
; 408  : 			// can't steal any techs from this civ
; 409  : 			m_aiNumTechsToStealList[eCityOwner] = 0;

	mov	ecx, DWORD PTR _eCityOwner$[esp+588]
	mov	DWORD PTR [edi+ebp*4+356], eax
	mov	eax, DWORD PTR [esi+716]
	mov	DWORD PTR [eax+ecx*4], 0

; 410  : 
; 411  : 			CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222922[esp+588], eax

; 412  : 			if(pNotifications)

	test	eax, eax
	je	$LN2@ProcessSpy@2

; 413  : 			{
; 414  : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH_S");

	lea	edx, DWORD PTR _strSummary$222924[esp+588]
	push	OFFSET $SG222926
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 415  : 				strSummary << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	edi, DWORD PTR _eCityOwner$[esp+588]
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	imul	edi, 63236				; 0000f704H
	lea	ecx, DWORD PTR [edi+eax]
	mov	DWORD PTR __$EHRec$[esp+596], 8
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	mov	ebp, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _strSummary$222924[esp+592]
	call	ebp

; 416  : 				Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_CANT_STEAL_TECH");

	lea	ecx, DWORD PTR _strNotification$222928[esp+588]
	push	OFFSET $SG222930
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 417  : 				strNotification << GetSpyRankName(pSpy->m_eRank);;

	mov	edx, DWORD PTR [ebx+12]
	push	edx
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+600], 9
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$222928[esp+592]
	call	ebp

; 418  : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$222928[esp+592]
	call	ebp

; 419  : 				strNotification << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, edi
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$222928[esp+592]
	call	ebp

; 420  : 				pNotifications->Add(NOTIFICATION_SPY_CANT_STEAL_TECH, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	mov	edi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$222924[esp+604]
	call	edi
	push	eax
	lea	ecx, DWORD PTR _strNotification$222928[esp+608]
	call	edi
	mov	ecx, DWORD PTR _pNotifications$222922[esp+608]
	push	eax
	push	240697813				; 0e58c1d5H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 421  : 			}

	mov	edi, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strNotification$222928[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 8
	call	edi
	lea	ecx, DWORD PTR _strSummary$222924[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	edi

; 422  : 		}

	jmp	$LN2@ProcessSpy@2
$LN57@ProcessSpy@2:

; 423  : 		else if(pCityEspionage->HasReachedGoal(ePlayer))

	mov	edx, DWORD PTR [edi+ebp*4+92]
	cmp	edx, DWORD PTR [edi+ebp*4+268]
	jl	$LN2@ProcessSpy@2

; 424  : 		{
; 425  : 			HeistLocation kHeistLocation;
; 426  : 			kHeistLocation.m_iX = pCity->getX();

	mov	eax, DWORD PTR _pCity$[esp+588]
	mov	ecx, DWORD PTR [eax+96]

; 427  : 			kHeistLocation.m_iY = pCity->getY();

	mov	edx, DWORD PTR [eax+108]
	mov	DWORD PTR _kHeistLocation$222936[esp+588], ecx

; 428  : 			m_aHeistLocations[eCityOwner].push_back(kHeistLocation);

	mov	ecx, DWORD PTR _eCityOwner$[esp+588]
	lea	eax, DWORD PTR _kHeistLocation$222936[esp+588]
	shl	ecx, 4
	push	eax
	lea	ecx, DWORD PTR [ecx+esi+908]
	mov	DWORD PTR _kHeistLocation$222936[esp+596], edx
	call	?push_back@?$vector@UHeistLocation@@V?$allocator@UHeistLocation@@@std@@@std@@QAEXABUHeistLocation@@@Z ; std::vector<HeistLocation,std::allocator<HeistLocation> >::push_back

; 429  : 
; 430  : 			int iSpyResult;
; 431  : 			if(pCityEspionage->HasCounterSpy())

	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+84]
	cmp	DWORD PTR [edi+eax*4+4], -1

; 432  : 			{
; 433  : 				iSpyResult = GC.getGame().getJonRandNum(300, "Random roll for the result of a spy mission with a counterspy in the city");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	je	$LN52@ProcessSpy@2
	push	OFFSET $SG222939
	push	300					; 0000012cH
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 434  : 				int iCounterspyIndex = GET_PLAYER(eCityOwner).GetEspionage()->GetSpyIndexInCity(pCity);

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edx, DWORD PTR _pCity$[esp+588]
	mov	DWORD PTR _iSpyResult$222937[esp+588], eax
	mov	eax, DWORD PTR _eCityOwner$[esp+588]
	imul	eax, 63236				; 0000f704H
	add	ecx, eax
	push	edx
	mov	DWORD PTR tv3829[esp+592], eax
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, eax
	call	?GetSpyIndexInCity@CvPlayerEspionage@@QAEHPAVCvCity@@@Z ; CvPlayerEspionage::GetSpyIndexInCity

; 435  : 				iSpyResult += GET_PLAYER(eCityOwner).GetEspionage()->m_aSpyList[iCounterspyIndex].m_eRank * 30;

	mov	ecx, DWORD PTR tv3829[esp+588]
	mov	DWORD PTR _iCounterspyIndex$222940[esp+588], eax
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, eax
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	ecx, DWORD PTR _iCounterspyIndex$222940[esp+588]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx*8]
	sub	edx, ecx
	mov	eax, DWORD PTR [eax+edx*4+12]
	mov	edx, DWORD PTR _iSpyResult$222937[esp+588]
	mov	ecx, eax
	shl	ecx, 4
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*2]

; 436  : 				iSpyResult *= (100 + GET_PLAYER(pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_CATCH_SPIES_MODIFIER));

	mov	ecx, DWORD PTR _pCity$[esp+588]
	mov	DWORD PTR _iSpyResult$222937[esp+588], eax
	mov	eax, DWORD PTR [ecx+84]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	21					; 00000015H
	mov	ecx, eax
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	ecx, eax
	add	ecx, 100				; 00000064H
	imul	ecx, DWORD PTR _iSpyResult$222937[esp+588]

; 437  : 				iSpyResult /= 100;

	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 438  : 				if(iSpyResult < 100)

	cmp	eax, 100				; 00000064H
	jge	SHORT $LN51@ProcessSpy@2

; 439  : 				{
; 440  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_DETECTED);

	mov	DWORD PTR [edi+ebp*4+620], 1
	jmp	$LN780@ProcessSpy@2
$LN51@ProcessSpy@2:

; 441  : 				}
; 442  : 				else if(iSpyResult < 200)

	cmp	eax, 200				; 000000c8H

; 443  : 				{
; 444  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_IDENTIFIED);
; 445  : 				}
; 446  : 				else

	jl	$LN41@ProcessSpy@2

; 447  : 				{
; 448  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_KILLED);
; 449  : 
; 450  : 					CvPlayerAI& kCityOwner = GET_PLAYER(eCityOwner);

	mov	eax, DWORD PTR tv3829[esp+588]
	mov	DWORD PTR [edi+ebp*4+620], 3
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [eax+edx]

; 451  : 					CvPlayerAI& kSpyOwner = GET_PLAYER(ePlayer);

	mov	eax, ebp
	imul	eax, 63236				; 0000f704H
	add	eax, edx
	mov	DWORD PTR _kSpyOwner$222946[esp+588], eax

; 452  : 
; 453  : 					if(	strcmp(kCityOwner.getCivilizationTypeKey(), "CIVILIZATION_RUSSIA") == 0 &&
; 454  : 						strcmp(kSpyOwner.getCivilizationTypeKey(), "CIVILIZATION_ENGLAND") == 0)

	mov	DWORD PTR tv4584[esp+588], OFFSET $SG222948
	call	?getCivilizationTypeKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationTypeKey
	mov	edx, DWORD PTR tv4584[esp+588]
	npad	2
$LL1018@ProcessSpy@2:
	mov	cl, BYTE PTR [eax]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN1019@ProcessSpy@2
	test	cl, cl
	je	SHORT $LN1020@ProcessSpy@2
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN1019@ProcessSpy@2
	add	eax, 2
	add	edx, 2
	test	cl, cl
	jne	SHORT $LL1018@ProcessSpy@2
$LN1020@ProcessSpy@2:
	xor	eax, eax
	jmp	SHORT $LN1021@ProcessSpy@2
$LN1019@ProcessSpy@2:
	sbb	eax, eax
	sbb	eax, -1
$LN1021@ProcessSpy@2:
	test	eax, eax
	jne	$LN780@ProcessSpy@2
	mov	ecx, DWORD PTR _kSpyOwner$222946[esp+588]
	mov	DWORD PTR tv4565[esp+588], OFFSET $SG222949
	call	?getCivilizationTypeKey@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationTypeKey
	mov	edx, DWORD PTR tv4565[esp+588]
$LL1022@ProcessSpy@2:
	mov	cl, BYTE PTR [eax]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN1023@ProcessSpy@2
	test	cl, cl
	je	SHORT $LN1024@ProcessSpy@2
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN1023@ProcessSpy@2
	add	eax, 2
	add	edx, 2
	test	cl, cl
	jne	SHORT $LL1022@ProcessSpy@2
$LN1024@ProcessSpy@2:
	xor	eax, eax
	jmp	SHORT $LN1025@ProcessSpy@2
$LN1023@ProcessSpy@2:
	sbb	eax, eax
	sbb	eax, -1
$LN1025@ProcessSpy@2:
	test	eax, eax
	jne	$LN780@ProcessSpy@2

; 455  : 					{
; 456  : 						//Do not trigger achievement if we're in the Smokey Skies scenario.
; 457  : 						bool bUsingXP1Scenario3 = gDLL->IsModActivated(CIV5_XP1_SCENARIO3_MODID);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	push	OFFSET $SG92492
	call	eax

; 458  : 						if(!bUsingXP1Scenario3)

	test	al, al
	jne	$LN780@ProcessSpy@2

; 459  : 						{
; 460  : 							if(eCityOwner == GC.getGame().getActivePlayer())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR _eCityOwner$[esp+588], eax
	jne	$LN780@ProcessSpy@2

; 461  : 								gDLL->UnlockAchievement(ACHIEVEMENT_XP1_25);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+828]
	push	215					; 000000d7H
	call	eax

; 462  : 						}
; 463  : 					}
; 464  : 				}
; 465  : 			}
; 466  : 			else

	jmp	$LN780@ProcessSpy@2
$LN52@ProcessSpy@2:

; 467  : 			{
; 468  : 				iSpyResult = GC.getGame().getJonRandNum(300, "Random roll for the result of a spying mission without a counterspy in the city");

	push	OFFSET $SG222954
	push	300					; 0000012cH
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 469  : 				iSpyResult *= (100 + GET_PLAYER(pCity->getOwner()).GetPlayerPolicies()->GetNumericModifier(POLICYMOD_CATCH_SPIES_MODIFIER));

	mov	ecx, DWORD PTR _pCity$[esp+588]
	mov	DWORD PTR _iSpyResult$222937[esp+588], eax
	mov	eax, DWORD PTR [ecx+84]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	21					; 00000015H
	mov	ecx, eax
	call	?GetPlayerPolicies@CvPlayer@@QBEPAVCvPlayerPolicies@@XZ ; CvPlayer::GetPlayerPolicies
	mov	ecx, eax
	call	?GetNumericModifier@CvPlayerPolicies@@QAEHW4PolicyModifierType@@@Z ; CvPlayerPolicies::GetNumericModifier
	mov	ecx, eax
	add	ecx, 100				; 00000064H
	imul	ecx, DWORD PTR _iSpyResult$222937[esp+588]

; 470  : 				iSpyResult /= 100;

	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 471  : 				if(iSpyResult < 100)

	cmp	eax, 100				; 00000064H
	jge	SHORT $LN43@ProcessSpy@2

; 472  : 				{
; 473  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_UNDETECTED);

	mov	DWORD PTR [edi+ebp*4+620], 0
	jmp	SHORT $LN780@ProcessSpy@2
$LN43@ProcessSpy@2:

; 474  : 				}
; 475  : 				else if(iSpyResult < 200)

	cmp	eax, 200				; 000000c8H
	jge	SHORT $LN41@ProcessSpy@2

; 476  : 				{
; 477  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_DETECTED);

	mov	DWORD PTR [edi+ebp*4+620], 1

; 478  : 				}
; 479  : 				else

	jmp	SHORT $LN780@ProcessSpy@2
$LN41@ProcessSpy@2:

; 480  : 				{
; 481  : 					pCityEspionage->SetSpyResult(ePlayer, SPY_RESULT_IDENTIFIED);

	mov	DWORD PTR [edi+ebp*4+620], 2
$LN780@ProcessSpy@2:

; 482  : 				}
; 483  : 			}
; 484  : 
; 485  : 			CvPlayerEspionage* pDefendingPlayerEspionage = GET_PLAYER(eCityOwner).GetEspionage();

	mov	eax, DWORD PTR _eCityOwner$[esp+588]
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	imul	eax, 63236				; 0000f704H
	lea	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR tv3829[esp+588], eax
	call	?GetEspionage@CvPlayer@@QBEPAVCvPlayerEspionage@@XZ ; CvPlayer::GetEspionage
	mov	DWORD PTR _pDefendingPlayerEspionage$222959[esp+588], eax

; 486  : 			CvAssertMsg(pDefendingPlayerEspionage, "Defending player espionage is null");
; 487  : 			if(pDefendingPlayerEspionage)

	test	eax, eax
	je	SHORT $LN39@ProcessSpy@2

; 488  : 			{
; 489  : 				pDefendingPlayerEspionage->AddSpyMessage(pCity->getX(), pCity->getY(), m_pPlayer->GetID(), pCityEspionage->m_aiResult[ePlayer], NO_TECH);

	mov	edx, DWORD PTR _pCity$[esp+588]
	mov	ecx, DWORD PTR [edx+108]
	mov	edx, DWORD PTR [edx+96]
	mov	eax, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [eax+44]
	push	-1
	mov	DWORD PTR $T268781[esp+592], edx
	mov	edx, DWORD PTR [edi+ebp*4+620]
	push	edx
	push	eax
	mov	eax, DWORD PTR $T268781[esp+600]
	push	ecx
	mov	ecx, DWORD PTR _pDefendingPlayerEspionage$222959[esp+604]
	push	eax
	call	?AddSpyMessage@CvPlayerEspionage@@QAEXHHW4PlayerTypes@@HW4TechTypes@@@Z ; CvPlayerEspionage::AddSpyMessage
$LN39@ProcessSpy@2:

; 490  : 			}
; 491  : 
; 492  : 			CvDiplomacyAI* pDefendingPlayerDiploAI = GET_PLAYER(eCityOwner).GetDiplomacyAI();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edx, DWORD PTR tv3829[esp+588]
	add	ecx, edx
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI

; 493  : 			CvAssertMsg(pDefendingPlayerDiploAI, "Defending player diplo AI is null");
; 494  : 			if(pDefendingPlayerDiploAI)

	test	eax, eax
	je	SHORT $LN1027@ProcessSpy@2

; 495  : 			{
; 496  : 				if(pCityEspionage->m_aiResult[ePlayer] == SPY_RESULT_IDENTIFIED || pCityEspionage->m_aiResult[ePlayer] == SPY_RESULT_KILLED)

	mov	edx, DWORD PTR [edi+ebp*4+620]
	cmp	edx, 2
	je	SHORT $LN36@ProcessSpy@2
	cmp	edx, 3
	jne	SHORT $LN1027@ProcessSpy@2
$LN36@ProcessSpy@2:

; 497  : 				{
; 498  : 					pDefendingPlayerDiploAI->ChangeNumTimesRobbedBy(ePlayer, 1);

	push	1
	push	ebp
	mov	ecx, eax
	call	?ChangeNumTimesRobbedBy@CvDiplomacyAI@@QAEXW4PlayerTypes@@H@Z ; CvDiplomacyAI::ChangeNumTimesRobbedBy
$LN1027@ProcessSpy@2:

; 499  : 				}
; 500  : 			}
; 501  : 
; 502  : 			// spy killed in action
; 503  : 			if(pCityEspionage->m_aiResult[ePlayer] == SPY_RESULT_KILLED)

	cmp	DWORD PTR [edi+ebp*4+620], 3
	jne	$LN35@ProcessSpy@2

; 504  : 			{
; 505  : 				CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$222966[esp+588], eax

; 506  : 				if(pNotifications)

	test	eax, eax
	je	$LN1028@ProcessSpy@2

; 507  : 				{
; 508  : 					Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_WAS_KILLED_S");

	lea	eax, DWORD PTR _strSummary$222968[esp+588]
	push	OFFSET $SG222970
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 509  : 					strSummary << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	ecx, DWORD PTR [ebx]
	push	ecx
	mov	ecx, DWORD PTR [esi+1292]
	mov	DWORD PTR __$EHRec$[esp+600], 10	; 0000000aH
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	mov	ebp, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _strSummary$222968[esp+592]
	call	ebp

; 510  : 					Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_WAS_KILLED");

	lea	edx, DWORD PTR _strNotification$222972[esp+588]
	push	OFFSET $SG222974
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 511  : 					strNotification << GetSpyRankName(pSpy->m_eRank);

	mov	eax, DWORD PTR [ebx+12]
	push	eax
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+600], 11		; 0000000bH
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$222972[esp+592]
	call	ebp

; 512  : 					strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	ecx, DWORD PTR [ebx]
	push	ecx
	mov	ecx, DWORD PTR [esi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$222972[esp+592]
	call	ebp

; 513  : 					strNotification << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR tv3829[esp+588]
	lea	ecx, DWORD PTR [eax+edx]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$222972[esp+592]
	call	ebp

; 514  : 					strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+588]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$222972[esp+592]
	call	ebp

; 515  : 					pNotifications->Add(NOTIFICATION_SPY_WAS_KILLED, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	mov	ebp, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$222968[esp+604]
	call	ebp
	push	eax
	lea	ecx, DWORD PTR _strNotification$222972[esp+608]
	call	ebp
	mov	ecx, DWORD PTR _pNotifications$222966[esp+608]
	push	eax
	push	345927241				; 149e6e49H
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 516  : 
; 517  : 				}

	mov	ebp, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strNotification$222972[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 10		; 0000000aH
	call	ebp
	lea	ecx, DWORD PTR _strSummary$222968[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	ebp
$LN1028@ProcessSpy@2:

; 518  : 
; 519  : 				CvEspionageAI* pEspionageAI = m_pPlayer->GetEspionageAI();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	DWORD PTR _pEspionageAI$222979[esp+588], eax

; 520  : 				CvAssertMsg(pEspionageAI, "pEspionageAI is null");
; 521  : 				if(pEspionageAI)

	test	eax, eax
	je	SHORT $LN1029@ProcessSpy@2

; 522  : 				{
; 523  : 					pEspionageAI->m_aiTurnLastSpyDied[eCityOwner] = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR _eCityOwner$[esp+588]
	mov	ebp, DWORD PTR [eax+628]
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv3981[esp+588], ecx
	add	ebp, ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn

; 524  : 					pEspionageAI->m_aiNumSpiesDied[eCityOwner]++;

	mov	ecx, DWORD PTR _pEspionageAI$222979[esp+588]
	mov	DWORD PTR [ebp], eax
	mov	edx, DWORD PTR [ecx+316]
	mov	eax, DWORD PTR tv3981[esp+588]
	add	eax, edx
	inc	DWORD PTR [eax]
$LN1029@ProcessSpy@2:

; 525  : 				}
; 526  : 				CvEspionageAI* pDefenderEspionageAI = GET_PLAYER(eCityOwner).GetEspionageAI();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	edx, DWORD PTR tv3829[esp+588]
	add	ecx, edx
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	ebp, eax

; 527  : 				CvAssertMsg(pDefenderEspionageAI, "pDefenderEspionageAI is null");
; 528  : 				if(pDefenderEspionageAI)

	test	ebp, ebp
	je	SHORT $LN32@ProcessSpy@2

; 529  : 				{
; 530  : 					pDefenderEspionageAI->m_aiTurnLastSpyKilled[m_pPlayer->GetID()] = GC.getGame().getGameTurn();

	mov	eax, DWORD PTR [esi+1292]
	mov	ecx, DWORD PTR [ebp+524]
	mov	eax, DWORD PTR [eax+44]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T268845[esp+588], edx
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T268845[esp+588]
	mov	DWORD PTR [ecx], eax

; 531  : 					pDefenderEspionageAI->m_aiNumSpiesKilled[m_pPlayer->GetID()]++;

	mov	edx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [ebp+212]
	inc	DWORD PTR [ecx+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]
$LN32@ProcessSpy@2:

; 532  : 				}
; 533  : 
; 534  : 				// level up the defending spy
; 535  : 				int iDefendingSpy = pCityEspionage->m_aiSpyAssignment[eCityOwner];
; 536  : 				if(pDefendingPlayerEspionage)

	mov	ecx, DWORD PTR _pDefendingPlayerEspionage$222959[esp+588]
	mov	edx, DWORD PTR _eCityOwner$[esp+588]
	mov	edi, DWORD PTR [edi+edx*4+4]
	test	ecx, ecx
	je	SHORT $LN30@ProcessSpy@2

; 537  : 				{
; 538  : 					CvAssertMsg(iDefendingSpy >= 0, "No defending spy. This is ok if debugging and killing a spy without having a defending spy present, but should not occur when playing the game normally.");
; 539  : 					if(iDefendingSpy >= 0)

	test	edi, edi
	jl	SHORT $LN30@ProcessSpy@2

; 540  : 					{
; 541  : 						pDefendingPlayerEspionage->LevelUpSpy(iDefendingSpy);

	push	edi
	call	?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z	; CvPlayerEspionage::LevelUpSpy
$LN30@ProcessSpy@2:

; 542  : 					}
; 543  : 				}
; 544  : 
; 545  : 				// kill spy off
; 546  : 				ExtractSpyFromCity(uiSpyIndex); // move the dead body out so that someone else can move in

	mov	edi, DWORD PTR _uiSpyIndex$[esp+584]
	push	edi
	mov	ecx, esi
	call	?ExtractSpyFromCity@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::ExtractSpyFromCity

; 547  : 				pSpy->m_eSpyState = SPY_STATE_DEAD; // have to official kill him after the extraction
; 548  : 
; 549  : 				if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR [ebx+16], 8
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN1030@ProcessSpy@2

; 550  : 				{
; 551  : 					CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222987[esp+588]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 552  : 					strMsg.Format("Killed, %d,", uiSpyIndex);

	push	edi
	lea	eax, DWORD PTR _strMsg$222987[esp+592]
	push	OFFSET $SG222988
	push	eax
	mov	DWORD PTR __$EHRec$[esp+608], 12	; 0000000cH
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 553  : 					strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName));

	mov	eax, DWORD PTR [esi]
	add	eax, DWORD PTR tv3648[esp+600]
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR [esi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T267163[esp+592]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$222987[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 13		; 0000000dH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267163[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 12		; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 554  : 					strMsg += ",";

	push	OFFSET $SG222990
	lea	ecx, DWORD PTR _strMsg$222987[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 555  : 					strMsg += ",";

	push	OFFSET $SG222991
	lea	ecx, DWORD PTR _strMsg$222987[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 556  : 					strMsg += ",";

	push	OFFSET $SG222992
	lea	ecx, DWORD PTR _strMsg$222987[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 557  : 					strMsg += GET_PLAYER(eCityOwner).getCivilizationShortDescription();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, DWORD PTR tv3829[esp+588]
	add	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$222987[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 558  : 					strMsg += ",";

	push	OFFSET $SG222993
	lea	ecx, DWORD PTR _strMsg$222987[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 559  : 					strMsg += pCity->getName();

	mov	ecx, DWORD PTR _pCity$[esp+588]
	lea	edx, DWORD PTR $T267164[esp+588]
	push	edx
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	push	eax
	lea	ecx, DWORD PTR _strMsg$222987[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 14		; 0000000eH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267164[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 12		; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 560  : 					strMsg += ",";

	push	OFFSET $SG222995
	lea	ecx, DWORD PTR _strMsg$222987[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 561  : 					strMsg += "Killed";

	push	OFFSET $SG222996

; 562  : 					LogEspionageMsg(strMsg);
; 563  : 				}
; 564  : 			}
; 565  : 			else // spy successfully completed mission

	jmp	$LN1034@ProcessSpy@2
$LN35@ProcessSpy@2:

; 566  : 			{
; 567  : 				pSpy->m_bEvaluateReassignment = true; // flag spy for reassignment
; 568  : 				if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR [ebx+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN27@ProcessSpy@2

; 569  : 				{
; 570  : 					CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$222999[esp+588]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 571  : 					strMsg.Format("Re-eval: spy completed mission, %d,", uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+584]
	push	ecx
	lea	edx, DWORD PTR _strMsg$222999[esp+592]
	push	OFFSET $SG223000
	push	edx
	mov	DWORD PTR __$EHRec$[esp+608], 15	; 0000000fH
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 572  : 					strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	add	esp, 12					; 0000000cH
	push	eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR $T267165[esp+592]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$222999[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 16		; 00000010H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267165[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 15		; 0000000fH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 573  : 					LogEspionageMsg(strMsg);

	lea	edx, DWORD PTR _strMsg$222999[esp+588]
	push	edx
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 574  : 				}

	lea	ecx, DWORD PTR _strMsg$222999[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN27@ProcessSpy@2:

; 575  : 				int iCityOwner = (int)eCityOwner;
; 576  : 				m_aiNumTechsToStealList[iCityOwner] = m_aiNumTechsToStealList[iCityOwner] + 1;

	mov	eax, DWORD PTR [esi+716]
	mov	ecx, DWORD PTR _eCityOwner$[esp+588]
	inc	DWORD PTR [eax+ecx*4]

; 577  : 				pCityEspionage->ResetProgress(ePlayer);
; 578  : 				int iRate = CalcPerTurn(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[esp+584]
	lea	eax, DWORD PTR [eax+ecx*4]
	or	eax, -1
	mov	DWORD PTR [edi+ebp*4+92], eax
	mov	DWORD PTR [edi+ebp*4+268], eax
	mov	DWORD PTR [edi+ebp*4+180], eax
	mov	eax, DWORD PTR _pCity$[esp+588]
	push	edx
	push	eax
	push	3
	mov	ecx, esi
	call	?CalcPerTurn@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcPerTurn

; 579  : 				int iGoal = CalcRequired(SPY_STATE_GATHERING_INTEL, pCity, uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+584]
	mov	edx, DWORD PTR _pCity$[esp+588]
	push	ecx
	push	edx
	push	3
	mov	ecx, esi
	mov	DWORD PTR _iRate$223004[esp+600], eax
	call	?CalcRequired@CvPlayerEspionage@@QAEHHPAVCvCity@@H@Z ; CvPlayerEspionage::CalcRequired

; 580  : 				pCityEspionage->SetActivity(ePlayer, 0, iRate, iGoal);

	mov	ecx, DWORD PTR _iRate$223004[esp+588]
	mov	DWORD PTR [edi+ebp*4+268], eax

; 581  : 				pCityEspionage->SetLastProgress(ePlayer, iRate);
; 582  : 				pCityEspionage->m_aiNumTimesCityRobbed[eCityOwner]++;

	mov	eax, DWORD PTR _eCityOwner$[esp+588]
	mov	DWORD PTR [edi+ebp*4+92], 0
	mov	DWORD PTR [edi+ebp*4+180], ecx
	mov	DWORD PTR [edi+ebp*4+356], ecx
	inc	DWORD PTR [edi+eax*4+708]

; 583  : 
; 584  : 				if(pCityEspionage->m_aiResult[ePlayer] == SPY_RESULT_IDENTIFIED)

	cmp	DWORD PTR [edi+ebp*4+620], 2
	jne	SHORT $LN25@ProcessSpy@2

; 585  : 				{
; 586  : 					CvEspionageAI* pDefenderEspionageAI = GET_PLAYER(eCityOwner).GetEspionageAI();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, DWORD PTR tv3829[esp+588]
	add	ecx, eax
	call	?GetEspionageAI@CvPlayer@@QBEPAVCvEspionageAI@@XZ ; CvPlayer::GetEspionageAI
	mov	DWORD PTR _pDefenderEspionageAI$223007[esp+588], eax

; 587  : 					CvAssertMsg(pDefenderEspionageAI, "pDefenderEspionageAI is null");
; 588  : 					if(pDefenderEspionageAI)

	test	eax, eax
	je	SHORT $LN25@ProcessSpy@2

; 589  : 					{
; 590  : 						pDefenderEspionageAI->m_aiTurnLastSpyCaught[m_pPlayer->GetID()] = GC.getGame().getGameTurn();

	mov	edx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _pDefenderEspionageAI$223007[esp+588]
	mov	edx, DWORD PTR [ecx+420]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T268973[esp+588], eax
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	ecx, DWORD PTR $T268973[esp+588]
	mov	DWORD PTR [ecx], eax

; 591  : 						pDefenderEspionageAI->m_aiNumSpiesCaught[m_pPlayer->GetID()]++;

	mov	edx, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _pDefenderEspionageAI$223007[esp+588]
	mov	edx, DWORD PTR [ecx+108]
	inc	DWORD PTR [edx+eax*4]
	lea	eax, DWORD PTR [edx+eax*4]
$LN25@ProcessSpy@2:

; 592  : 					}
; 593  : 				}
; 594  : 
; 595  : 				// this check was added because m_aiNumTechsToStealList was getting out of whack somehow and this is a check to prevent the UI from going haywire
; 596  : 				CvAssertMsg(m_aiNumTechsToStealList[iCityOwner] > 0, "m_aiNumTechsToStealList[iCityOwner] <= 0, which shouldn't happen after you succeed at stealing");
; 597  : 				if (m_aiNumTechsToStealList[iCityOwner] > 0)

	mov	eax, DWORD PTR [esi+716]
	mov	ecx, DWORD PTR _eCityOwner$[esp+588]
	cmp	DWORD PTR [eax+ecx*4], 0
	lea	eax, DWORD PTR [eax+ecx*4]
	jle	$LN24@ProcessSpy@2

; 598  : 				{
; 599  : 					CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	DWORD PTR _pNotifications$223010[esp+588], eax

; 600  : 					if(pNotifications)

	test	eax, eax
	je	$LN22@ProcessSpy@2

; 601  : 					{
; 602  : 						Localization::String strSummary = GetLocalizedText("TXT_KEY_NOTIFICATION_SPY_STEAL_TECH_S");

	lea	edx, DWORD PTR $T267166[esp+588]
	push	OFFSET $SG223014
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	ecx, eax
	mov	DWORD PTR __$EHRec$[esp+596], 17	; 00000011H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strSummary$223012[esp+592]
	call	DWORD PTR __imp_??0String@Localization@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T267166[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 19		; 00000013H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 603  : 						Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_STEAL_TECH");

	lea	eax, DWORD PTR _strNotification$223015[esp+588]
	push	OFFSET $SG223017
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 604  : 						strNotification << GetSpyRankName(pSpy->m_eRank);

	mov	ecx, DWORD PTR [ebx+12]
	push	ecx
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+600], 20		; 00000014H
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	push	eax
	lea	ecx, DWORD PTR _strNotification$223015[esp+592]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 605  : 						strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$223015[esp+592]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 606  : 						strNotification << pCity->getNameKey();

	mov	ecx, DWORD PTR _pCity$[esp+588]
	call	?getNameKey@CvCity@@QBEPBDXZ		; CvCity::getNameKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223015[esp+592]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 607  : 						strNotification << GET_PLAYER(eCityOwner).getCivilizationInfo().getShortDescriptionKey();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, DWORD PTR tv3829[esp+588]
	add	ecx, eax
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
	push	eax
	lea	ecx, DWORD PTR _strNotification$223015[esp+592]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 608  : 						pNotifications->Add(NOTIFICATION_SPY_STOLE_TECH, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, eCityOwner);

	mov	edx, DWORD PTR _eCityOwner$[esp+588]
	push	-1
	push	edx
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223012[esp+604]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strNotification$223015[esp+608]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	mov	ecx, DWORD PTR _pNotifications$223010[esp+608]
	push	eax
	push	-1774532806				; 963ac73aH
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 609  : 					}

	lea	ecx, DWORD PTR _strNotification$223015[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 19		; 00000013H
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strSummary$223012[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 610  : 				}
; 611  : 				else

	jmp	SHORT $LN22@ProcessSpy@2
$LN24@ProcessSpy@2:

; 612  : 				{
; 613  : 					m_aiNumTechsToStealList[iCityOwner] = 0;

	mov	DWORD PTR [eax], 0
$LN22@ProcessSpy@2:

; 614  : 				}
; 615  : 
; 616  : 				//Achievements!
; 617  : 				if(m_pPlayer->GetID() == GC.getGame().getActivePlayer())

	mov	eax, DWORD PTR [esi+1292]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T269025[esp+588], ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	DWORD PTR $T269025[esp+588], eax
	jne	SHORT $LN21@ProcessSpy@2

; 618  : 				{
; 619  : 					gDLL->UnlockAchievement(ACHIEVEMENT_XP1_12);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+828]
	push	202					; 000000caH
	call	eax
$LN21@ProcessSpy@2:

; 620  : 				}
; 621  : 
; 622  : 				LevelUpSpy(uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+584]
	push	ecx
	mov	ecx, esi
	call	?LevelUpSpy@CvPlayerEspionage@@QAEXI@Z	; CvPlayerEspionage::LevelUpSpy

; 623  : 
; 624  : 				if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN1030@ProcessSpy@2

; 625  : 				{
; 626  : 					CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$223025[esp+588]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 627  : 					strMsg.Format("Stealing tech, %d,", uiSpyIndex);

	mov	edx, DWORD PTR _uiSpyIndex$[esp+584]
	push	edx
	lea	eax, DWORD PTR _strMsg$223025[esp+592]
	push	OFFSET $SG223026
	push	eax
	mov	DWORD PTR __$EHRec$[esp+608], 21	; 00000015H
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 628  : 					strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(m_aSpyList[uiSpyIndex].m_iName));

	mov	eax, DWORD PTR [esi]
	add	eax, DWORD PTR tv3648[esp+600]
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR [esi+1292]
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	edx, DWORD PTR $T267171[esp+592]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 22		; 00000016H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267171[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 21		; 00000015H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 629  : 					strMsg += ",";

	push	OFFSET $SG223028
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 630  : 					strMsg += ",";

	push	OFFSET $SG223029
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 631  : 					strMsg += ",";

	push	OFFSET $SG223030
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 632  : 					strMsg += GET_PLAYER(eCityOwner).getCivilizationShortDescription();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, DWORD PTR tv3829[esp+588]
	add	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	push	eax
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 633  : 					strMsg += ",";

	push	OFFSET $SG223031
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 634  : 					strMsg += pCity->getName();

	mov	ecx, DWORD PTR _pCity$[esp+588]
	lea	edx, DWORD PTR $T267172[esp+588]
	push	edx
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	push	eax
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 23		; 00000017H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267172[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 21		; 00000015H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 635  : 					strMsg += ",";

	push	OFFSET $SG223033
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 636  : 					switch(pCityEspionage->m_aiResult[ePlayer])

	mov	edi, DWORD PTR [edi+ebp*4+620]
	sub	edi, 0
	je	SHORT $LN17@ProcessSpy@2
	sub	edi, 1
	je	SHORT $LN16@ProcessSpy@2
	sub	edi, 1
	jne	SHORT $LN18@ProcessSpy@2

; 644  : 					case SPY_RESULT_IDENTIFIED:
; 645  : 						strMsg += "Identified";

	push	OFFSET $SG223043

; 646  : 						break;

	jmp	SHORT $LN1034@ProcessSpy@2
$LN16@ProcessSpy@2:

; 640  : 						break;
; 641  : 					case SPY_RESULT_DETECTED:
; 642  : 						strMsg += "Detected";

	push	OFFSET $SG223041

; 643  : 						break;

	jmp	SHORT $LN1034@ProcessSpy@2
$LN17@ProcessSpy@2:

; 637  : 					{
; 638  : 					case SPY_RESULT_UNDETECTED:
; 639  : 						strMsg += "Undetected";

	push	OFFSET $SG223039
$LN1034@ProcessSpy@2:
	lea	ecx, DWORD PTR _strMsg$223025[esp+592]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN18@ProcessSpy@2:

; 647  : 					}
; 648  : 					LogEspionageMsg(strMsg);

	lea	eax, DWORD PTR _strMsg$223025[esp+588]
	push	eax
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 649  : 				}

	lea	ecx, DWORD PTR _strMsg$223025[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1030@ProcessSpy@2:

; 650  : 			}
; 651  : 			if(pSpy->m_eSpyState != SPY_STATE_DEAD)

	cmp	DWORD PTR [ebx+16], 8
	je	$LN2@ProcessSpy@2

; 652  : 			{
; 653  : 				UncoverIntrigue(uiSpyIndex);

	mov	ecx, DWORD PTR _uiSpyIndex$[esp+584]
	push	ecx
	mov	ecx, esi
	call	?UncoverIntrigue@CvPlayerEspionage@@QAEXI@Z ; CvPlayerEspionage::UncoverIntrigue

; 654  : 			}
; 655  : 		}
; 656  : 		break;

	jmp	$LN2@ProcessSpy@2
$LN13@ProcessSpy@2:

; 657  : 	case SPY_STATE_RIG_ELECTION:
; 658  : 		// resetting the value is done in MinorCivAI
; 659  : 		pCityEspionage->Process(ePlayer);

	mov	edx, DWORD PTR [edi+ebp*4+180]
	add	DWORD PTR [edi+ebp*4+92], edx

; 660  : 		break;

	jmp	$LN2@ProcessSpy@2
$LN11@ProcessSpy@2:

; 661  : 	case SPY_STATE_COUNTER_INTEL:
; 662  : 		break;
; 663  : 	case SPY_STATE_MAKING_INTRODUCTIONS:
; 664  : 		// spy is traveling to location
; 665  : 		CvAssertMsg(pCity, "pCity not defined. What?");
; 666  : 		if(!pCity)

	cmp	DWORD PTR _pCity$[esp+588], 0
	je	$LN1@ProcessSpy@2

; 667  : 		{
; 668  : 			return;
; 669  : 		}
; 670  : 		// if the spy has completed travelling, move to location
; 671  : 		pCityEspionage->Process(ePlayer);

	mov	eax, DWORD PTR [edi+ebp*4+180]
	add	DWORD PTR [edi+ebp*4+92], eax

; 672  : 		if(pCityEspionage->HasReachedGoal(ePlayer))

	mov	ecx, DWORD PTR [edi+ebp*4+92]
	cmp	ecx, DWORD PTR [edi+ebp*4+268]
	jl	$LN2@ProcessSpy@2

; 673  : 		{
; 674  : 			pCityEspionage->ResetProgress(ePlayer);

	or	eax, -1
	mov	DWORD PTR [edi+ebp*4+92], eax
	mov	DWORD PTR [edi+ebp*4+268], eax
	mov	DWORD PTR [edi+ebp*4+180], eax

; 675  : 			pSpy->m_eSpyState = SPY_STATE_SCHMOOZE;

	mov	DWORD PTR [ebx+16], 7

; 676  : 		}
; 677  : 		break;

	jmp	$LN2@ProcessSpy@2
$LN6@ProcessSpy@2:

; 678  : 	case SPY_STATE_SCHMOOZE:
; 679  : 		if(pSpy->m_eSpyState != SPY_STATE_DEAD)
; 680  : 		{
; 681  : 			UncoverIntrigue(uiSpyIndex);
; 682  : 		}
; 683  : 		break;
; 684  : 	case SPY_STATE_DEAD:
; 685  : 		pSpy->m_iReviveCounter++;

	inc	DWORD PTR [ebx+20]

; 686  : 		if(pSpy->m_iReviveCounter >= iSpyTurnsToRevive)

	cmp	DWORD PTR [ebx+20], 5
	jl	$LN2@ProcessSpy@2

; 687  : 		{
; 688  : 			pSpy->m_iName = GetNextSpyName();

	mov	ecx, esi
	call	?GetNextSpyName@CvPlayerEspionage@@QAEHXZ ; CvPlayerEspionage::GetNextSpyName
	mov	DWORD PTR [ebx], eax

; 689  : #ifdef AUI_YIELDS_APPLIED_AFTER_TURN_NOT_BEFORE
; 690  : 			pSpy->m_eRank = (CvSpyRank)m_pPlayer->getCachedSpyStartingRank();
; 691  : #else
; 692  : 			pSpy->m_eRank = (CvSpyRank)m_pPlayer->GetStartingSpyRank();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetStartingSpyRank@CvPlayer@@QBEHXZ	; CvPlayer::GetStartingSpyRank
	mov	DWORD PTR [ebx+12], eax

; 693  : #endif
; 694  : 			pSpy->m_eSpyState = SPY_STATE_UNASSIGNED;

	xor	eax, eax

; 695  : 			pSpy->m_iCityX = -1;

	or	edi, -1

; 696  : 			pSpy->m_iCityY = -1;
; 697  : 			pSpy->m_iReviveCounter = 0;
; 698  : 			pSpy->m_bEvaluateReassignment = true;
; 699  : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR [ebx+16], eax
	mov	DWORD PTR [ebx+4], edi
	mov	DWORD PTR [ebx+8], edi
	mov	DWORD PTR [ebx+20], eax
	mov	BYTE PTR [ebx+25], 1
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN1031@ProcessSpy@2

; 700  : 			{
; 701  : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$223056[esp+588]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 702  : 				strMsg.Format("Re-eval: spy killed, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[esp+584]
	push	eax
	lea	ecx, DWORD PTR _strMsg$223056[esp+592]
	push	OFFSET $SG223057
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+608], 24	; 00000018H
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 703  : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	add	esp, 12					; 0000000cH
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	eax, DWORD PTR $T267173[esp+592]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$223056[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 25		; 00000019H
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267173[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 24		; 00000018H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 704  : 				LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$223056[esp+588]
	push	ecx
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 705  : 			}

	lea	ecx, DWORD PTR _strMsg$223056[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], edi
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1031@ProcessSpy@2:

; 706  : 
; 707  : 			CvNotifications* pNotifications = m_pPlayer->GetNotifications();

	mov	ecx, DWORD PTR [esi+1292]
	call	?GetNotifications@CvPlayer@@QBEPAVCvNotifications@@XZ ; CvPlayer::GetNotifications
	mov	ebp, eax

; 708  : 			if(pNotifications)

	test	ebp, ebp
	je	$LN3@ProcessSpy@2

; 709  : 			{
; 710  : 				Localization::String strSummary = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_REVIVED_S");

	mov	edi, DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	lea	edx, DWORD PTR _strSummary$223061[esp+588]
	push	OFFSET $SG223063
	push	edx
	call	edi

; 711  : 				Localization::String strNotification = Localization::Lookup("TXT_KEY_NOTIFICATION_SPY_REVIVED");

	lea	eax, DWORD PTR _strNotification$223064[esp+596]
	push	OFFSET $SG223066
	push	eax
	mov	DWORD PTR __$EHRec$[esp+612], 26	; 0000001aH
	call	edi
	add	esp, 16					; 00000010H

; 712  : 				strNotification << GetSpyRankName(pSpy->m_eRank);

	mov	ecx, DWORD PTR [ebx+12]
	push	ecx
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+600], 27		; 0000001bH
	call	?GetSpyRankName@CvPlayerEspionage@@QBEPBDH@Z ; CvPlayerEspionage::GetSpyRankName
	mov	edi, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _strNotification$223064[esp+592]
	call	edi

; 713  : 				strNotification << m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName);

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	ecx, DWORD PTR _strNotification$223064[esp+592]
	call	edi

; 714  : 				pNotifications->Add(NOTIFICATION_SPY_REPLACEMENT, strNotification.toUTF8(), strSummary.toUTF8(), -1, -1, -1);

	mov	edi, DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	-1
	push	-1
	push	-1
	push	-1
	lea	ecx, DWORD PTR _strSummary$223061[esp+604]
	call	edi
	push	eax
	lea	ecx, DWORD PTR _strNotification$223064[esp+608]
	call	edi
	push	eax
	push	-1698732748				; 9abf6534H
	mov	ecx, ebp
	call	?Add@CvNotifications@@QAEHW4NotificationTypes@@PBD1HHHH@Z ; CvNotifications::Add

; 715  : 			}

	mov	edi, DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _strNotification$223064[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 26		; 0000001aH
	call	edi
	lea	ecx, DWORD PTR _strSummary$223061[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], -1
	call	edi
	or	edi, -1
$LN3@ProcessSpy@2:

; 716  : 
; 717  : 			if(GC.getLogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN2@ProcessSpy@2

; 718  : 			{
; 719  : 				CvString strMsg;

	lea	ecx, DWORD PTR _strMsg$223070[esp+588]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 720  : 				strMsg.Format("Respawned spy, %d,", uiSpyIndex);

	mov	eax, DWORD PTR _uiSpyIndex$[esp+584]
	push	eax
	lea	ecx, DWORD PTR _strMsg$223070[esp+592]
	push	OFFSET $SG223071
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+608], 28	; 0000001cH
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 721  : 				strMsg += GetLocalizedText(m_pPlayer->getCivilizationInfo().getSpyNames(pSpy->m_iName));

	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+1292]
	add	esp, 12					; 0000000cH
	push	edx
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ; CvCivilizationInfo::getSpyNames
	push	eax
	lea	eax, DWORD PTR $T267176[esp+592]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strMsg$223070[esp+592]
	mov	BYTE PTR __$EHRec$[esp+600], 29		; 0000001dH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T267176[esp+588]
	mov	BYTE PTR __$EHRec$[esp+596], 28		; 0000001cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 722  : 				LogEspionageMsg(strMsg);

	lea	ecx, DWORD PTR _strMsg$223070[esp+588]
	push	ecx
	mov	ecx, esi
	call	?LogEspionageMsg@CvPlayerEspionage@@QAEXAAVCvString@@@Z ; CvPlayerEspionage::LogEspionageMsg

; 723  : 			}

	lea	ecx, DWORD PTR _strMsg$223070[esp+588]
	mov	DWORD PTR __$EHRec$[esp+596], edi
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@ProcessSpy@2:

; 724  : 		}
; 725  : 		break;
; 726  : 	}
; 727  : 
; 728  : 	// if we just established surveillance in the city, turn the lights on
; 729  : #ifdef AUI_WARNING_FIXES
; 730  : 	if (HasEstablishedSurveillance(uiSpyIndex) && !bHadSurveillance && pCity)
; 731  : #else
; 732  : 	if(HasEstablishedSurveillance(uiSpyIndex) && !bHadSurveillance)

	mov	edx, DWORD PTR _uiSpyIndex$[esp+584]
	push	edx
	mov	ecx, esi
	call	?HasEstablishedSurveillance@CvPlayerEspionage@@QAE_NI@Z ; CvPlayerEspionage::HasEstablishedSurveillance
	test	al, al
	je	SHORT $LN1@ProcessSpy@2
	cmp	BYTE PTR _bHadSurveillance$[esp+588], 0
	jne	SHORT $LN1@ProcessSpy@2

; 733  : #endif
; 734  : 	{
; 735  : 		pCity->plot()->changeAdjacentSight(m_pPlayer->getTeam(), GC.getESPIONAGE_SURVEILLANCE_SIGHT_RANGE(), true, NO_INVISIBLE, NO_DIRECTION, false);

	mov	eax, DWORD PTR [esi+1292]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN1012@ProcessSpy@2
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN1013@ProcessSpy@2
$LN1012@ProcessSpy@2:
	or	eax, -1
$LN1013@ProcessSpy@2:
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7948
	push	0
	push	-1
	push	-1
	push	1
	push	ecx
	mov	ecx, DWORD PTR _pCity$[esp+608]
	push	eax
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	ecx, eax
	call	?changeAdjacentSight@CvPlot@@QAEXW4TeamTypes@@H_NW4InvisibleTypes@@W4DirectionTypes@@1@Z ; CvPlot::changeAdjacentSight
$LN1@ProcessSpy@2:

; 736  : 	}
; 737  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+588]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 572				; 0000023cH
	ret	4
	npad	1
$LN1036@ProcessSpy@2:
	DD	$LN1@ProcessSpy@2
	DD	$LN78@ProcessSpy@2
	DD	$LN71@ProcessSpy@2
	DD	$LN61@ProcessSpy@2
	DD	$LN13@ProcessSpy@2
	DD	$LN2@ProcessSpy@2
	DD	$LN11@ProcessSpy@2
	DD	$LN1026@ProcessSpy@2
	DD	$LN6@ProcessSpy@2
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$0:
	lea	ecx, DWORD PTR _strSummary$222887[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$1:
	lea	ecx, DWORD PTR _strNotification$222896[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$2:
	lea	ecx, DWORD PTR _strMsg$222904[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$3:
	lea	ecx, DWORD PTR $T267151[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$4:
	lea	ecx, DWORD PTR _strMsg$222911[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$5:
	lea	ecx, DWORD PTR $T267152[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$6:
	lea	ecx, DWORD PTR _strMsg$222916[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$7:
	lea	ecx, DWORD PTR $T267153[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$8:
	lea	ecx, DWORD PTR _strSummary$222924[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$9:
	lea	ecx, DWORD PTR _strNotification$222928[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$10:
	lea	ecx, DWORD PTR _strSummary$222968[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$11:
	lea	ecx, DWORD PTR _strNotification$222972[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$12:
	lea	ecx, DWORD PTR _strMsg$222987[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$13:
	lea	ecx, DWORD PTR $T267163[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$14:
	lea	ecx, DWORD PTR $T267164[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$15:
	lea	ecx, DWORD PTR _strMsg$222999[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$16:
	lea	ecx, DWORD PTR $T267165[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$17:
	lea	ecx, DWORD PTR $T267166[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$18:
	lea	ecx, DWORD PTR _strSummary$223012[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$19:
	lea	ecx, DWORD PTR _strNotification$223015[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$20:
	lea	ecx, DWORD PTR _strMsg$223025[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$21:
	lea	ecx, DWORD PTR $T267171[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$22:
	lea	ecx, DWORD PTR $T267172[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$23:
	lea	ecx, DWORD PTR _strMsg$223056[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$24:
	lea	ecx, DWORD PTR $T267173[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$25:
	lea	ecx, DWORD PTR _strSummary$223061[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$26:
	lea	ecx, DWORD PTR _strNotification$223064[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$27:
	lea	ecx, DWORD PTR _strMsg$223070[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z$28:
	lea	ecx, DWORD PTR $T267176[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?ProcessSpy@CvPlayerEspionage@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessSpy@CvPlayerEspionage@@QAEXI@Z ENDP		; CvPlayerEspionage::ProcessSpy
PUBLIC	?DoTurn@CvPlayerEspionage@@QAEXXZ		; CvPlayerEspionage::DoTurn
; Function compile flags: /Ogtpy
;	COMDAT ?DoTurn@CvPlayerEspionage@@QAEXXZ
_TEXT	SEGMENT
?DoTurn@CvPlayerEspionage@@QAEXXZ PROC			; CvPlayerEspionage::DoTurn, COMDAT
; _this$ = ecx

; 176  : {

	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 177  : 	AI_PERF_FORMAT("AI-perf.csv", ("CvPlayerEspionage::DoTurn, Turn %03d, %s", GC.getGame().getElapsedGameTurns(), m_pPlayer->getCivilizationShortDescription()) );
; 178  : 	ProcessSpyMessages();

	call	?ProcessSpyMessages@CvPlayerEspionage@@QAEXXZ ; CvPlayerEspionage::ProcessSpyMessages
	lea	esi, DWORD PTR [edi+916]
	mov	ebx, 22					; 00000016H
$LL6@DoTurn@2:

; 181  : 	{
; 182  : 		m_aHeistLocations[ui].clear();

	mov	ecx, DWORD PTR [esi-4]
	mov	edx, DWORD PTR [esi]
	cmp	ecx, edx
	je	SHORT $LN5@DoTurn@2
	mov	eax, edx
	cmp	edx, edx
	je	SHORT $LN50@DoTurn@2
$LL52@DoTurn@2:
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	add	eax, 8
	add	ecx, 8
	cmp	eax, edx
	jne	SHORT $LL52@DoTurn@2
$LN50@DoTurn@2:
	mov	DWORD PTR [esi], ecx
$LN5@DoTurn@2:

; 179  : 
; 180  : 	for(uint ui = 0; ui < MAX_MAJOR_CIVS; ui++)

	add	esi, 16					; 00000010H
	sub	ebx, 1
	jne	SHORT $LL6@DoTurn@2

; 183  : 	}
; 184  : 
; 185  : 	for(uint uiSpy = 0; uiSpy < m_aSpyList.size(); uiSpy++)

	xor	esi, esi
	cmp	DWORD PTR [edi+4], esi
	jbe	SHORT $LN1@DoTurn@2
	npad	6
$LL3@DoTurn@2:

; 186  : 	{
; 187  : 		ProcessSpy(uiSpy);

	push	esi
	mov	ecx, edi
	call	?ProcessSpy@CvPlayerEspionage@@QAEXI@Z	; CvPlayerEspionage::ProcessSpy
	inc	esi
	cmp	esi, DWORD PTR [edi+4]
	jb	SHORT $LL3@DoTurn@2
$LN1@DoTurn@2:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 188  : 	}
; 189  : }

	ret	0
?DoTurn@CvPlayerEspionage@@QAEXXZ ENDP			; CvPlayerEspionage::DoTurn
_TEXT	ENDS
END
