; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Desktop\Cleanup (v1)\Lekmod Files\Lekmod DLL versions\v30\LEKMOD_DLL\CvGameCoreDLL_Expansion2\Lua\CvLuaUnit.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
CONST	SEGMENT
$SG221232 DB	'Instance no longer exists.', 00H
	ORG $+1
$SG221237 DB	'IsNone', 00H
	ORG $+1
$SG221238 DB	'Convert', 00H
$SG221239 DB	'Kill', 00H
	ORG $+3
$SG221240 DB	'IsActionRecommended', 00H
$SG221241 DB	'IsBetterDefenderThan', 00H
	ORG $+3
$SG221242 DB	'CanDoCommand', 00H
	ORG $+3
$SG221243 DB	'DoCommand', 00H
	ORG $+2
$SG221244 DB	'GetPathEndTurnPlot', 00H
	ORG $+1
$SG221245 DB	'GeneratePath', 00H
	ORG $+3
$SG221246 DB	'CanEnterTerritory', 00H
	ORG $+2
$SG221247 DB	'GetDeclareWarRangeStrike', 00H
	ORG $+3
$SG221248 DB	'CanMoveOrAttackInto', 00H
$SG221249 DB	'CanMoveThrough', 00H
	ORG $+1
$SG221250 DB	'JumpToNearestValidPlot', 00H
	ORG $+1
$SG221251 DB	'GetCombatDamage', 00H
$SG221252 DB	'GetFireSupportUnit', 00H
	ORG $+1
$SG221253 DB	'CanAutomate', 00H
$SG221254 DB	'CanScrap', 00H
	ORG $+3
$SG221255 DB	'GetScrapGold', 00H
	ORG $+3
$SG221256 DB	'CanGift', 00H
$SG221257 DB	'CanDistanceGift', 00H
$SG221258 DB	'CanLoadUnit', 00H
$SG221259 DB	'CanLoad', 00H
$SG221260 DB	'CanUnload', 00H
	ORG $+2
$SG221261 DB	'CanUnloadAll', 00H
	ORG $+3
$SG221262 DB	'CanHold', 00H
$SG221263 DB	'CanSleep', 00H
	ORG $+3
$SG221264 DB	'CanFortify', 00H
	ORG $+1
$SG221265 DB	'CanAirPatrol', 00H
	ORG $+3
$SG221266 DB	'IsEmbarked', 00H
	ORG $+1
$SG221267 DB	'SetEmbarked', 00H
$SG221268 DB	'CanHeal', 00H
$SG221269 DB	'CanSentry', 00H
	ORG $+2
$SG221270 DB	'CanEmbark', 00H
	ORG $+2
$SG221271 DB	'CanDisembark', 00H
	ORG $+3
$SG221272 DB	'CanEmbarkOnto', 00H
	ORG $+2
$SG221273 DB	'CanDisembarkOnto', 00H
	ORG $+3
$SG221274 DB	'CanRebaseAt', 00H
$SG221275 DB	'Embark', 00H
	ORG $+1
$SG221276 DB	'IsRangeAttackIgnoreLOS', 00H
	ORG $+1
$SG221277 DB	'CanAirlift', 00H
	ORG $+1
$SG221278 DB	'CanAirliftAt', 00H
	ORG $+3
$SG221279 DB	'IsNukeVictim', 00H
	ORG $+3
$SG221280 DB	'CanNuke', 00H
$SG221281 DB	'CanNukeAt', 00H
	ORG $+2
$SG221282 DB	'CanRangeStrike', 00H
	ORG $+1
$SG221283 DB	'CanRangeStrikeAt', 00H
	ORG $+3
$SG221284 DB	'CanParadrop', 00H
$SG221285 DB	'CanParadropAt', 00H
	ORG $+2
$SG221286 DB	'CanMakeTradeRoute', 00H
	ORG $+2
$SG221287 DB	'CanMakeTradeRouteAt', 00H
$SG221288 DB	'GetExoticGoodsGoldAmount', 00H
	ORG $+3
$SG221289 DB	'GetExoticGoodsXPAmount', 00H
	ORG $+1
$SG221290 DB	'CanPillage', 00H
	ORG $+1
$SG221291 DB	'IsSelected', 00H
	ORG $+1
$SG221292 DB	'CanFound', 00H
	ORG $+3
$SG221293 DB	'CanJoin', 00H
$SG221294 DB	'CanConstruct', 00H
	ORG $+3
$SG221295 DB	'CanDiscover', 00H
$SG221296 DB	'GetDiscoverAmount', 00H
	ORG $+2
$SG221297 DB	'GetHurryProduction', 00H
	ORG $+1
$SG221298 DB	'GetTradeGold', 00H
	ORG $+3
$SG221299 DB	'GetTradeInfluence', 00H
	ORG $+2
$SG221300 DB	'CanTrade', 00H
	ORG $+3
$SG221301 DB	'CanBuyCityState', 00H
$SG221302 DB	'CanRepairFleet', 00H
	ORG $+1
$SG221303 DB	'CanBuildSpaceship', 00H
	ORG $+2
$SG221304 DB	'CanGoldenAge', 00H
	ORG $+3
$SG221305 DB	'GetGoldenAgeTurns', 00H
	ORG $+2
$SG221306 DB	'GetGivePoliciesCulture', 00H
	ORG $+1
$SG221307 DB	'GetBlastTourism', 00H
$SG221308 DB	'CanBuild', 00H
	ORG $+3
$SG221309 DB	'CanLead', 00H
$SG221310 DB	'Lead', 00H
	ORG $+3
$SG221311 DB	'CanGiveExperience', 00H
	ORG $+2
$SG221312 DB	'GiveExperience', 00H
	ORG $+1
$SG221313 DB	'CanPromote', 00H
	ORG $+1
$SG221314 DB	'Promote', 00H
$SG221315 DB	'GetUpgradeUnitType', 00H
	ORG $+1
$SG221316 DB	'UpgradePrice', 00H
	ORG $+3
$SG221317 DB	'CanUpgradeRightNow', 00H
	ORG $+1
$SG221318 DB	'GetNumResourceNeededToUpgrade', 00H
	ORG $+2
$SG221319 DB	'GetHandicapType', 00H
$SG221320 DB	'GetCivilizationType', 00H
$SG221321 DB	'GetSpecialUnitType', 00H
	ORG $+1
$SG221322 DB	'GetCaptureUnitType', 00H
	ORG $+1
$SG221323 DB	'GetUnitCombatType', 00H
	ORG $+2
$SG221324 DB	'GetUnitAIType', 00H
	ORG $+2
$SG221325 DB	'SetUnitAIType', 00H
	ORG $+2
$SG221326 DB	'GetDomainType', 00H
	ORG $+2
$SG221327 DB	'GetInvisibleType', 00H
	ORG $+3
$SG221328 DB	'GetSeeInvisibleType', 00H
$SG221329 DB	'GetDropRange', 00H
	ORG $+3
$SG221330 DB	'FlavorValue', 00H
$SG221331 DB	'IsBarbarian', 00H
$SG221332 DB	'IsHuman', 00H
$SG221333 DB	'VisibilityRange', 00H
$SG221334 DB	'MaxMoves', 00H
	ORG $+3
$SG221335 DB	'MovesLeft', 00H
	ORG $+2
$SG221336 DB	'CanMove', 00H
$SG221337 DB	'HasMoved', 00H
	ORG $+3
$SG221338 DB	'Range', 00H
	ORG $+2
$SG221339 DB	'NukeDamageLevel', 00H
$SG221340 DB	'CanBuildRoute', 00H
	ORG $+2
$SG221341 DB	'GetBuildType', 00H
	ORG $+3
$SG221342 DB	'WorkRate', 00H
	ORG $+3
$SG221343 DB	'IsNoBadGoodies', 00H
	ORG $+1
$SG221344 DB	'IsOnlyDefensive', 00H
$SG221345 DB	'IsNoCapture', 00H
$SG221346 DB	'IsRivalTerritory', 00H
	ORG $+3
$SG221347 DB	'IsFound', 00H
$SG221348 DB	'IsWork', 00H
	ORG $+1
$SG221349 DB	'IsGoldenAge', 00H
$SG221350 DB	'IsNearFriendlyMinor', 00H
$SG221351 DB	'CanCoexistWithEnemyUnit', 00H
$SG221352 DB	'IsGreatPerson', 00H
	ORG $+2
$SG221353 DB	'IsFighting', 00H
	ORG $+1
$SG221354 DB	'IsAttacking', 00H
$SG221355 DB	'IsDefending', 00H
$SG221356 DB	'IsInCombat', 00H
	ORG $+1
$SG221357 DB	'GetMaxHitPoints', 00H
$SG221358 DB	'GetCurrHitPoints', 00H
	ORG $+3
$SG221359 DB	'IsHurt', 00H
	ORG $+1
$SG221360 DB	'IsDead', 00H
	ORG $+1
$SG221361 DB	'IsDelayedDeath', 00H
	ORG $+1
$SG221362 DB	'SetBaseCombatStrength', 00H
	ORG $+2
$SG221363 DB	'GetBaseCombatStrength', 00H
	ORG $+2
$SG221364 DB	'GetMaxAttackStrength', 00H
	ORG $+3
$SG221365 DB	'GetMaxDefenseStrength', 00H
	ORG $+2
$SG221366 DB	'GetEmbarkedUnitDefense', 00H
	ORG $+1
$SG221367 DB	'IsCombatUnit', 00H
	ORG $+3
$SG221368 DB	'IsCanDefend', 00H
$SG221369 DB	'CanSiege', 00H
	ORG $+3
$SG221370 DB	'IsCanAttackWithMove', 00H
$SG221371 DB	'IsCanAttackRanged', 00H
	ORG $+2
$SG221372 DB	'IsCanAttack', 00H
$SG221373 DB	'IsCanAttackWithMoveNow', 00H
	ORG $+1
$SG221374 DB	'IsEnemyInMovementRange', 00H
	ORG $+1
$SG221375 DB	'IsTrade', 00H
$SG221376 DB	'GetBaseRangedCombatStrength', 00H
$SG221377 DB	'GetMaxRangedCombatStrength', 00H
	ORG $+1
$SG221378 DB	'GetCombatLimit', 00H
	ORG $+1
$SG221379 DB	'GetRangedCombatLimit', 00H
	ORG $+3
$SG221380 DB	'CanAirAttack', 00H
	ORG $+3
$SG221381 DB	'CanAirDefend', 00H
	ORG $+3
$SG221382 DB	'GetAirCombatDamage', 00H
	ORG $+1
$SG221383 DB	'GetRangeCombatDamage', 00H
	ORG $+3
$SG221384 DB	'GetAirStrikeDefenseDamage', 00H
	ORG $+2
$SG221385 DB	'GetBestInterceptor', 00H
	ORG $+1
$SG221386 DB	'GetInterceptorCount', 00H
$SG221387 DB	'GetBestSeaPillageInterceptor', 00H
	ORG $+3
$SG221388 DB	'GetCaptureChance', 00H
	ORG $+3
$SG221389 DB	'IsAutomated', 00H
$SG221390 DB	'IsWaiting', 00H
	ORG $+2
$SG221391 DB	'IsFortifyable', 00H
	ORG $+2
$SG221392 DB	'IsEverFortifyable', 00H
	ORG $+2
$SG221393 DB	'FortifyModifier', 00H
$SG221394 DB	'ExperienceNeeded', 00H
	ORG $+3
$SG221395 DB	'AttackXPValue', 00H
	ORG $+2
$SG221396 DB	'DefenseXPValue', 00H
	ORG $+1
$SG221397 DB	'MaxXPValue', 00H
	ORG $+1
$SG221398 DB	'FirstStrikes', 00H
	ORG $+3
$SG221399 DB	'ChanceFirstStrikes', 00H
	ORG $+1
$SG221400 DB	'MaxFirstStrikes', 00H
$SG221401 DB	'IsRanged', 00H
	ORG $+3
$SG221402 DB	'IsMustSetUpToRangedAttack', 00H
	ORG $+2
$SG221403 DB	'CanSetUpForRangedAttack', 00H
$SG221404 DB	'IsSetUpForRangedAttack', 00H
	ORG $+1
$SG221405 DB	'ImmuneToFirstStrikes', 00H
	ORG $+3
$SG221406 DB	'NoDefensiveBonus', 00H
	ORG $+3
$SG221407 DB	'IgnoreBuildingDefense', 00H
	ORG $+2
$SG221408 DB	'CanMoveImpassable', 00H
	ORG $+2
$SG221409 DB	'CanMoveAllTerrain', 00H
	ORG $+2
$SG221410 DB	'FlatMovementCost', 00H
	ORG $+3
$SG221411 DB	'IgnoreTerrainCost', 00H
	ORG $+2
$SG221412 DB	'IsNeverInvisible', 00H
	ORG $+3
$SG221413 DB	'IsInvisible', 00H
$SG221414 DB	'IsNukeImmune', 00H
	ORG $+3
$SG221415 DB	'IsRangeAttackOnlyInDomain', 00H
	ORG $+2
$SG221416 DB	'IsCityAttackOnly', 00H
	ORG $+3
$SG221417 DB	'MaxInterceptionProbability', 00H
	ORG $+1
$SG221418 DB	'CurrInterceptionProbability', 00H
$SG221419 DB	'EvasionProbability', 00H
	ORG $+1
$SG221420 DB	'WithdrawalProbability', 00H
	ORG $+2
$SG221421 DB	'GetAdjacentModifier', 00H
$SG221422 DB	'GetAttackModifier', 00H
	ORG $+2
$SG221423 DB	'GetDefenseModifier', 00H
	ORG $+1
$SG221424 DB	'GetRangedAttackModifier', 00H
$SG221425 DB	'CityAttackModifier', 00H
	ORG $+1
$SG221426 DB	'CityDefenseModifier', 00H
$SG221427 DB	'HillsAttackModifier', 00H
$SG221428 DB	'HeavyChargeDownhillModifier', 00H
$SG221429 DB	'HillsDefenseModifier', 00H
	ORG $+3
$SG221430 DB	'RoughAttackModifier', 00H
$SG221431 DB	'OpenAttackModifier', 00H
	ORG $+1
$SG221432 DB	'OpenRangedAttackModifier', 00H
	ORG $+3
$SG221433 DB	'OpenDefenseModifier', 00H
$SG221434 DB	'RoughRangedAttackModifier', 00H
	ORG $+2
$SG221435 DB	'AttackFortifiedModifier', 00H
$SG221436 DB	'AttackWoundedModifier', 00H
	ORG $+2
$SG221437 DB	'FlankAttackModifier', 00H
$SG221438 DB	'RoughDefenseModifier', 00H
	ORG $+3
$SG221439 DB	'TerrainAttackModifier', 00H
	ORG $+2
$SG221440 DB	'TerrainDefenseModifier', 00H
	ORG $+1
$SG221441 DB	'FeatureAttackModifier', 00H
	ORG $+2
$SG221442 DB	'FeatureDefenseModifier', 00H
	ORG $+1
$SG221443 DB	'UnitClassAttackModifier', 00H
$SG221444 DB	'UnitClassDefenseModifier', 00H
	ORG $+3
$SG221445 DB	'UnitCombatModifier', 00H
	ORG $+1
$SG221446 DB	'DomainModifier', 00H
	ORG $+1
$SG221447 DB	'GetStrategicResourceCombatPenalty', 00H
	ORG $+2
$SG221448 DB	'GetUnhappinessCombatPenalty', 00H
$SG221449 DB	'AirSweepCombatMod', 00H
	ORG $+2
$SG221450 DB	'CapitalDefenseModifier', 00H
	ORG $+1
$SG221451 DB	'CapitalDefenseFalloff', 00H
	ORG $+2
$SG221452 DB	'SpecialCargo', 00H
	ORG $+3
$SG221453 DB	'DomainCargo', 00H
$SG221454 DB	'CargoSpace', 00H
	ORG $+1
$SG221455 DB	'ChangeCargoSpace', 00H
	ORG $+3
$SG221456 DB	'IsFull', 00H
	ORG $+1
$SG221457 DB	'CargoSpaceAvailable', 00H
$SG221458 DB	'HasCargo', 00H
	ORG $+3
$SG221459 DB	'CanCargoAllMove', 00H
$SG221460 DB	'GetUnitAICargo', 00H
	ORG $+1
$SG221461 DB	'GetID', 00H
	ORG $+2
$SG221462 DB	'GetHotKeyNumber', 00H
$SG221463 DB	'SetHotKeyNumber', 00H
$SG221464 DB	'GetX', 00H
	ORG $+3
$SG221465 DB	'GetY', 00H
	ORG $+3
$SG221466 DB	'SetXY', 00H
	ORG $+2
$SG221467 DB	'At', 00H
	ORG $+1
$SG221468 DB	'AtPlot', 00H
	ORG $+1
$SG221469 DB	'GetPlot', 00H
$SG221470 DB	'GetArea', 00H
$SG221471 DB	'GetReconPlot', 00H
	ORG $+3
$SG221472 DB	'SetReconPlot', 00H
	ORG $+3
$SG221473 DB	'GetGameTurnCreated', 00H
	ORG $+1
$SG221474 DB	'GetLastMoveTurn', 00H
$SG221475 DB	'GetDamage', 00H
	ORG $+2
$SG221476 DB	'SetDamage', 00H
	ORG $+2
$SG221477 DB	'ChangeDamage', 00H
	ORG $+3
$SG221478 DB	'GetMoves', 00H
	ORG $+3
$SG221479 DB	'SetMoves', 00H
	ORG $+3
$SG221480 DB	'ChangeMoves', 00H
$SG221481 DB	'FinishMoves', 00H
$SG221482 DB	'IsImmobile', 00H
	ORG $+1
$SG221483 DB	'GetExperience', 00H
	ORG $+2
$SG221484 DB	'SetExperience', 00H
	ORG $+2
$SG221485 DB	'ChangeExperience', 00H
	ORG $+3
$SG221486 DB	'GetLevel', 00H
	ORG $+3
$SG221487 DB	'SetLevel', 00H
	ORG $+3
$SG221488 DB	'ChangeLevel', 00H
$SG221489 DB	'GetFacingDirection', 00H
	ORG $+1
$SG221490 DB	'RotateFacingDirectionClockwise', 00H
	ORG $+1
$SG221491 DB	'RotateFacingDirectionCounterClockwise', 00H
	ORG $+2
$SG221492 DB	'GetCargo', 00H
	ORG $+3
$SG221493 DB	'GetFortifyTurns', 00H
$SG221494 DB	'GetBlitzCount', 00H
	ORG $+2
$SG221495 DB	'IsBlitz', 00H
$SG221496 DB	'GetAmphibCount', 00H
	ORG $+1
$SG221497 DB	'IsAmphib', 00H
	ORG $+3
$SG221498 DB	'GetRiverCrossingNoPenaltyCount', 00H
	ORG $+1
$SG221499 DB	'IsRiverCrossingNoPenalty', 00H
	ORG $+3
$SG221500 DB	'IsEnemyRoute', 00H
	ORG $+3
$SG221501 DB	'IsAlwaysHeal', 00H
	ORG $+3
$SG221502 DB	'IsHealOutsideFriendly', 00H
	ORG $+2
$SG221503 DB	'IsHillsDoubleMove', 00H
	ORG $+2
$SG221504 DB	'IsGarrisoned', 00H
	ORG $+3
$SG221505 DB	'GetGarrisonedCity', 00H
	ORG $+2
$SG221506 DB	'GetExtraVisibilityRange', 00H
$SG221507 DB	'GetExtraMoves', 00H
	ORG $+2
$SG221508 DB	'GetExtraMoveDiscount', 00H
	ORG $+3
$SG221509 DB	'GetExtraRange', 00H
	ORG $+2
$SG221510 DB	'GetExtraIntercept', 00H
	ORG $+2
$SG221511 DB	'GetExtraEvasion', 00H
$SG221512 DB	'GetExtraFirstStrikes', 00H
	ORG $+3
$SG221513 DB	'GetExtraChanceFirstStrikes', 00H
	ORG $+1
$SG221514 DB	'GetExtraWithdrawal', 00H
	ORG $+1
$SG221515 DB	'GetExtraEnemyHeal', 00H
	ORG $+2
$SG221516 DB	'GetExtraNeutralHeal', 00H
$SG221517 DB	'GetExtraFriendlyHeal', 00H
	ORG $+3
$SG221518 DB	'GetSameTileHeal', 00H
$SG221519 DB	'GetAdjacentTileHeal', 00H
$SG221520 DB	'GetExtraCombatPercent', 00H
	ORG $+2
$SG221521 DB	'GetFriendlyLandsModifier', 00H
	ORG $+3
$SG221522 DB	'GetFriendlyLandsAttackModifier', 00H
	ORG $+1
$SG221523 DB	'GetOutsideFriendlyLandsModifier', 00H
$SG221524 DB	'GetGoldenAgeForeignAttackBonus', 00H
	ORG $+1
$SG221525 DB	'GetCombatStrengthNearFriendlyMinor', 00H
	ORG $+1
$SG221526 DB	'GetExtraCityAttackPercent', 00H
	ORG $+2
$SG221527 DB	'GetExtraCityDefensePercent', 00H
	ORG $+1
$SG221528 DB	'GetExtraHillsAttackPercent', 00H
	ORG $+1
$SG221529 DB	'GetExtraHillsDefensePercent', 00H
$SG221530 DB	'GetExtraOpenAttackPercent', 00H
	ORG $+2
$SG221531 DB	'GetExtraOpenRangedAttackMod', 00H
$SG221532 DB	'GetExtraRoughAttackPercent', 00H
	ORG $+1
$SG221533 DB	'GetExtraRoughRangedAttackMod', 00H
	ORG $+3
$SG221534 DB	'GetExtraAttackFortifiedMod', 00H
	ORG $+1
$SG221535 DB	'GetExtraAttackWoundedMod', 00H
	ORG $+3
$SG221536 DB	'GetExtraOpenDefensePercent', 00H
	ORG $+1
$SG221537 DB	'GetPillageChange', 00H
	ORG $+3
$SG221538 DB	'GetUpgradeDiscount', 00H
	ORG $+1
$SG221539 DB	'GetExperiencePercent', 00H
	ORG $+3
$SG221540 DB	'GetKamikazePercent', 00H
	ORG $+1
$SG221541 DB	'IsOutOfAttacks', 00H
	ORG $+1
$SG221542 DB	'SetMadeAttack', 00H
	ORG $+2
$SG221543 DB	'isOutOfInterceptions', 00H
	ORG $+3
$SG221544 DB	'SetMadeInterception', 00H
$SG221545 DB	'IsPromotionReady', 00H
	ORG $+3
$SG221546 DB	'SetPromotionReady', 00H
	ORG $+2
$SG221547 DB	'GetOwner', 00H
	ORG $+3
$SG221548 DB	'GetVisualOwner', 00H
	ORG $+1
$SG221549 DB	'GetCombatOwner', 00H
	ORG $+1
$SG221550 DB	'GetOriginalOwner', 00H
	ORG $+3
$SG221551 DB	'SetOriginalOwner', 00H
	ORG $+3
$SG221552 DB	'GetTeam', 00H
$SG221553 DB	'GetUnitFlagIconOffset', 00H
	ORG $+2
$SG221554 DB	'GetUnitPortraitOffset', 00H
	ORG $+2
$SG221555 DB	'GetUnitType', 00H
$SG221556 DB	'GetUnitClassType', 00H
	ORG $+3
$SG221557 DB	'GetLeaderUnitType', 00H
	ORG $+2
$SG221558 DB	'SetLeaderUnitType', 00H
	ORG $+2
$SG221559 DB	'IsNearGreatGeneral', 00H
	ORG $+1
$SG221560 DB	'IsStackedGreatGeneral', 00H
	ORG $+2
$SG221561 DB	'IsIgnoreGreatGeneralBenefit', 00H
$SG221562 DB	'GetReverseGreatGeneralModifier', 00H
	ORG $+1
$SG221563 DB	'GetGreatGeneralCombatModifier', 00H
	ORG $+2
$SG221564 DB	'IsNearSapper', 00H
	ORG $+3
$SG221565 DB	'GetNearbyImprovementModifier', 00H
	ORG $+3
$SG221566 DB	'IsFriendlyUnitAdjacent', 00H
	ORG $+1
$SG221567 DB	'GetNumEnemyUnitsAdjacent', 00H
	ORG $+3
$SG221568 DB	'IsEnemyCityAdjacent', 00H
$SG221569 DB	'GetTransportUnit', 00H
	ORG $+3
$SG221570 DB	'IsCargo', 00H
$SG221571 DB	'GetExtraDomainModifier', 00H
	ORG $+1
$SG221572 DB	'GetName', 00H
$SG221573 DB	'GetNameNoDesc', 00H
	ORG $+2
$SG221574 DB	'HasName', 00H
$SG221575 DB	'GetNameKey', 00H
	ORG $+1
$SG221576 DB	'SetName', 00H
$SG221577 DB	'IsTerrainDoubleMove', 00H
$SG221578 DB	'IsFeatureDoubleMove', 00H
$SG221579 DB	'GetScriptData', 00H
	ORG $+2
$SG221580 DB	'SetScriptData', 00H
	ORG $+2
$SG221581 DB	'GetScenarioData', 00H
$SG221582 DB	'SetScenarioData', 00H
$SG221583 DB	'GetExtraTerrainAttackPercent', 00H
	ORG $+3
$SG221584 DB	'GetExtraTerrainDefensePercent', 00H
	ORG $+2
$SG221585 DB	'GetExtraFeatureAttackPercent', 00H
	ORG $+3
$SG221586 DB	'GetExtraFeatureDefensePercent', 00H
	ORG $+2
$SG221587 DB	'GetExtraUnitCombatModifier', 00H
	ORG $+1
$SG221588 DB	'GetUnitClassModifier', 00H
	ORG $+3
$SG221589 DB	'CanAcquirePromotion', 00H
$SG221590 DB	'CanAcquirePromotionAny', 00H
	ORG $+1
$SG221591 DB	'IsPromotionValid', 00H
	ORG $+3
$SG221592 DB	'IsHasPromotion', 00H
	ORG $+1
$SG221593 DB	'SetHasPromotion', 00H
$SG221594 DB	'GetActivityType', 00H
$SG221595 DB	'IsReadyToMove', 00H
	ORG $+2
$SG221596 DB	'IsBusy', 00H
	ORG $+1
$SG221597 DB	'GetReligion', 00H
$SG221598 DB	'GetConversionStrength', 00H
	ORG $+2
$SG221599 DB	'GetSpreadsLeft', 00H
	ORG $+1
$SG221600 DB	'GetNumFollowersAfterSpread', 00H
	ORG $+1
$SG221601 DB	'GetMajorityReligionAfterSpread', 00H
	ORG $+1
$SG221602 DB	'GetTourismBlastStrength', 00H
$SG221603 DB	'GetGreatWorkSlotType', 00H
	ORG $+3
$SG221604 DB	'RangeStrike', 00H
$SG221605 DB	'PushMission', 00H
$SG221606 DB	'PopMission', 00H
	ORG $+1
$SG221607 DB	'LastMissionPlot', 00H
$SG221608 DB	'CanStartMission', 00H
$SG221609 DB	'ExecuteSpecialExploreMove', 00H
	ORG $+2
$SG221610 DB	'SetDeployFromOperationTurn', 00H
	ORG $+1
$SG221611 DB	'IsHigherTechThan', 00H
	ORG $+3
$SG221612 DB	'IsLargerCivThan', 00H
$SG221613 DB	'IsRangedSupportFire', 00H
$SG221614 DB	'IsPlunderBlockedByOpposingTrait', 00H
$SG221617 DB	'Unit', 00H
	ORG $+3
$SG221777 DB	'NYI', 00H
$SG222140 DB	'Could not find unit info (%d) for unit.', 00H
$SG222308 DB	'Cannot find unit info (%d) for unit.', 00H
	ORG $+3
$SG224080 DB	'__instances', 00H
$SG224081 DB	'__mode', 00H
	ORG $+1
$SG224082 DB	'v', 00H
	ORG $+2
$SG224084 DB	'__instances', 00H
$SG224087 DB	'__instance', 00H
	ORG $+1
$SG224088 DB	'__index', 00H
$SG224100 DB	'__instances', 00H
$SG224101 DB	'__mode', 00H
	ORG $+1
$SG224102 DB	'v', 00H
	ORG $+2
$SG224104 DB	'__instances', 00H
$SG224107 DB	'__instance', 00H
	ORG $+1
$SG224108 DB	'__index', 00H
$SG224123 DB	'__instance', 00H
	ORG $+1
$SG224129 DB	'Not a valid instance.  Either the instance is NULL or yo'
	DB	'u used ''.'' instead of '':''.', 00H
	ORG $+1
$SG224140 DB	'__instances', 00H
$SG224141 DB	'__mode', 00H
	ORG $+1
$SG224142 DB	'v', 00H
	ORG $+2
$SG224144 DB	'__instances', 00H
$SG224147 DB	'__instance', 00H
	ORG $+1
$SG224148 DB	'__index', 00H
$SG224163 DB	'__instance', 00H
	ORG $+1
$SG224169 DB	'Not a valid instance.  Either the instance is NULL or yo'
	DB	'u used ''.'' instead of '':''.', 00H
	ORG $+1
$SG224180 DB	'__instances', 00H
$SG224181 DB	'__mode', 00H
	ORG $+1
$SG224182 DB	'v', 00H
	ORG $+2
$SG224184 DB	'__instances', 00H
$SG224187 DB	'__instance', 00H
	ORG $+1
$SG224188 DB	'__index', 00H
$SG224203 DB	'__instance', 00H
	ORG $+1
$SG224209 DB	'Not a valid instance.  Either the instance is NULL or yo'
	DB	'u used ''.'' instead of '':''.', 00H
CONST	ENDS
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
EXTRN	_lua_tointeger:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvluaargtemplates.h
;	COMDAT ??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z
_TEXT	SEGMENT
??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z PROC	; CvLuaArgs::toValue<int>, COMDAT
; _L$ = ecx
; _idx$ = eax

; 19   : 		return lua_tointeger(L, idx);

	push	eax
	push	ecx
	call	_lua_tointeger
	add	esp, 8

; 20   : 	}

	ret	0
??$toValue@H@CvLuaArgs@@YAHPAUlua_State@@H@Z ENDP	; CvLuaArgs::toValue<int>
_TEXT	ENDS
EXTRN	_lua_pushinteger:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??$pushValue@H@CvLuaArgs@@YAXPAUlua_State@@H@Z
_TEXT	SEGMENT
??$pushValue@H@CvLuaArgs@@YAXPAUlua_State@@H@Z PROC	; CvLuaArgs::pushValue<int>, COMDAT
; _L$ = ecx
; _t$ = eax

; 39   : 		lua_pushinteger(L, t);

	push	eax
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 40   : 	}

	ret	0
??$pushValue@H@CvLuaArgs@@YAXPAUlua_State@@H@Z ENDP	; CvLuaArgs::pushValue<int>
_TEXT	ENDS
EXTRN	_lua_pushboolean:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z
_TEXT	SEGMENT
??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z PROC	; CvLuaArgs::pushValue<bool>, COMDAT
; _L$ = ecx
; _t$ = eax

; 45   : 		lua_pushboolean(L, t);

	movzx	eax, al
	push	eax
	push	ecx
	call	_lua_pushboolean
	add	esp, 8

; 46   : 	}

	ret	0
??$pushValue@_N@CvLuaArgs@@YAXPAUlua_State@@_N@Z ENDP	; CvLuaArgs::pushValue<bool>
_TEXT	ENDS
PUBLIC	?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z ; CvLuaUnit::HandleMissingInstance
EXTRN	_luaL_error:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
;	COMDAT ?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z PROC ; CvLuaUnit::HandleMissingInstance, COMDAT

; 26   : 	luaL_error(L, "Instance no longer exists.");

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET $SG221232
	push	eax
	call	_luaL_error
	add	esp, 8

; 27   : }

	ret	0
?HandleMissingInstance@CvLuaUnit@@SAXPAUlua_State@@@Z ENDP ; CvLuaUnit::HandleMissingInstance
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	esi
	lea	eax, DWORD PTR __Message$[esp]
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	eax, DWORD PTR __Message$[esp+16]
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[esp+32], 0
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 27   : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 31   : 		}

	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar@2
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar@2:
	mov	eax, esi
	pop	esi
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	mov	eax, DWORD PTR __Message$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 110  : 		}

	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN8@scalar@3
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN8@scalar@3:
	mov	eax, esi
	pop	esi
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetTypeName@CvLuaUnit@@SAPBDXZ			; CvLuaUnit::GetTypeName
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
;	COMDAT ?GetTypeName@CvLuaUnit@@SAPBDXZ
_TEXT	SEGMENT
?GetTypeName@CvLuaUnit@@SAPBDXZ PROC			; CvLuaUnit::GetTypeName, COMDAT

; 496  : 	return "Unit";

	mov	eax, OFFSET $SG221617

; 497  : }

	ret	0
?GetTypeName@CvLuaUnit@@SAPBDXZ ENDP			; CvLuaUnit::GetTypeName
_TEXT	ENDS
PUBLIC	?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGeneratePath
; Function compile flags: /Ogtpy
;	COMDAT ?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGeneratePath, COMDAT

; 593  : 	luaL_error(L, "NYI");

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET $SG221777
	push	eax
	call	_luaL_error
	add	esp, 8

; 594  : 	/*CvUnit* pkUnit = GetInstance(L);
; 595  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);
; 596  : 	const int iFlags = 0;
; 597  : 	const bool bReuse = luaL_optint(L, 4, 0);	//defeaults to false
; 598  : 	const bool bResult = pkUnit->generatePath();
; 599  : 
; 600  : 	lua_pushboolean(L, bResult);
; 601  : 	return 1;*/
; 602  : 	return 0;

	xor	eax, eax

; 603  : }

	ret	0
?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGeneratePath
_TEXT	ENDS
PUBLIC	?addTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ; DestructionNotification<FObjectHandle<CvUnit> >::addTarget
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
;	COMDAT ?addTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
?addTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z PROC ; DestructionNotification<FObjectHandle<CvUnit> >::addTarget, COMDAT
; _this$ = ecx

; 52   : #ifdef TRACK_DESTRUCTION_NOTIFICATION
; 53   : 		m_targets.insert(&target);
; 54   : #endif
; 55   : 	}

	ret	4
?addTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ENDP ; DestructionNotification<FObjectHandle<CvUnit> >::addTarget
_TEXT	ENDS
PUBLIC	?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget
; Function compile flags: /Ogtpy
;	COMDAT ?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z PROC ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget, COMDAT
; _this$ = ecx

; 63   : #ifdef TRACK_DESTRUCTION_NOTIFICATION
; 64   : 		m_targets.erase(&target);
; 65   : #endif
; 66   : 	}

	ret	4
?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ENDP ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget
_TEXT	ENDS
PUBLIC	?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ ; FObjectHandle<CvUnit>::pointer
; Function compile flags: /Ogtpy
;	COMDAT ?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ
_TEXT	SEGMENT
?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ PROC ; FObjectHandle<CvUnit>::pointer, COMDAT
; _this$ = ecx

; 78   : 		return m_target;

	mov	eax, DWORD PTR [ecx]

; 79   : 	}

	ret	0
?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ ENDP ; FObjectHandle<CvUnit>::pointer
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z ; CvLuaScopedInstance<CvLuaArea,CvArea>::Push
EXTRN	_lua_pushnil:PROC
EXTRN	_lua_remove:PROC
EXTRN	_lua_pushlightuserdata:PROC
EXTRN	_lua_rawget:PROC
EXTRN	?PushMethods@CvLuaArea@@SAXPAUlua_State@@H@Z:PROC ; CvLuaArea::PushMethods
EXTRN	_lua_gettop:PROC
EXTRN	_lua_setfield:PROC
EXTRN	_lua_pushvalue:PROC
EXTRN	_lua_setmetatable:PROC
EXTRN	_lua_rawset:PROC
EXTRN	_lua_pushstring:PROC
EXTRN	_lua_createtable:PROC
EXTRN	_lua_settop:PROC
EXTRN	_lua_type:PROC
EXTRN	_lua_getfield:PROC
EXTRN	?GetTypeName@CvLuaArea@@SAPBDXZ:PROC		; CvLuaArea::GetTypeName
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluascopedinstance.h
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_pkType$ = 12						; size = 4
?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z PROC ; CvLuaScopedInstance<CvLuaArea,CvArea>::Push, COMDAT

; 39   : {

	push	edi

; 40   : 	//Pushing an instance involves more than just actually pushing a pointer into the
; 41   : 	//Lua stack.  There are some caching optimizations that are done as well as some
; 42   : 	//checks.
; 43   : 	//The first step is to load or create a global table <Typename> to store all member
; 44   : 	//methods and all pushed instances.  This conserves memory and offers faster pushing
; 45   : 	//speed.
; 46   : 	//If <Typename>.__instances[pkType] is not nil, return that value.
; 47   : 	//otherwise push a new instance and assign it to __instances.
; 48   : 
; 49   : 	//NOTE: Raw gets and sets are used as an optimization over using lua_[get,set]field
; 50   : 	if(pkType)

	mov	edi, DWORD PTR _pkType$[esp]
	test	edi, edi
	je	$LN4@Push
	push	ebx
	push	ebp
	push	esi

; 51   : 	{
; 52   : 		//const int t = lua_gettop(L);
; 53   : 
; 54   : 		lua_getglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaArea@@SAPBDXZ		; CvLuaArea::GetTypeName
	mov	esi, DWORD PTR _L$[esp+12]
	push	eax
	push	-10002					; ffffd8eeH
	push	esi
	call	_lua_getfield

; 55   : 		if(lua_isnil(L, -1))

	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	$LN7@Push

; 56   : 		{
; 57   : 			//Typename wasn't found, time to build it.
; 58   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	push	esi
	call	_lua_settop

; 59   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 60   : 
; 61   : 			//Create weak __instances table.
; 62   : 			lua_pushstring(L, "__instances");

	push	OFFSET $SG224080
	push	esi
	call	_lua_pushstring

; 63   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 64   : 
; 65   : 			//Create __instances.mt
; 66   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 67   : 			lua_pushstring(L, "__mode");

	push	OFFSET $SG224081
	push	esi
	call	_lua_pushstring

; 68   : 			lua_pushstring(L, "v");

	push	OFFSET $SG224082
	push	esi
	call	_lua_pushstring
	add	esp, 68					; 00000044H

; 69   : 			lua_rawset(L, -3);				// mt.__mode = "v";

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 70   : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_setmetatable

; 71   : 
; 72   : 			lua_rawset(L, -3);				//type.__instances = t;

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 73   : 
; 74   : 
; 75   : 			lua_pushvalue(L, -1);

	push	-1
	push	esi
	call	_lua_pushvalue

; 76   : 			lua_setglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaArea@@SAPBDXZ		; CvLuaArea::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	push	esi
	call	_lua_setfield

; 77   : 
; 78   : 			Derived::PushMethods(L, lua_gettop(L));

	push	esi
	call	_lua_gettop
	push	eax
	push	esi
	call	?PushMethods@CvLuaArea@@SAXPAUlua_State@@H@Z ; CvLuaArea::PushMethods
	add	esp, 56					; 00000038H
$LN7@Push:

; 79   : 		}
; 80   : 		const int type_index = lua_gettop(L);

	push	esi
	call	_lua_gettop

; 81   : 
; 82   : 		lua_pushstring(L, "__instances");

	push	OFFSET $SG224084
	push	esi
	mov	ebx, eax
	call	_lua_pushstring

; 83   : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_rawget

; 84   : 
; 85   : 		const int instances_index = lua_gettop(L);

	push	esi
	call	_lua_gettop

; 86   : 
; 87   : 		lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	mov	ebp, eax
	call	_lua_pushlightuserdata

; 88   : 
; 89   : 		lua_rawget(L, -2);					//retrieve type.__instances[pkType]

	push	-2					; fffffffeH
	push	esi
	call	_lua_rawget

; 90   : 
; 91   : 		if(lua_isnil(L, -1))

	push	-1
	push	esi
	call	_lua_type
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN2@Push

; 92   : 		{
; 93   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	push	esi
	call	_lua_settop

; 94   : 
; 95   : 			//Push new instance
; 96   : 			lua_createtable(L, 0, 1);

	push	1
	push	0
	push	esi
	call	_lua_createtable

; 97   : 			lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	call	_lua_pushlightuserdata

; 98   : 			lua_setfield(L, -2, "__instance");

	push	OFFSET $SG224087
	push	-2					; fffffffeH
	push	esi
	call	_lua_setfield

; 99   : 
; 100  : 			lua_createtable(L, 0, 1);			// create mt

	push	1
	push	0
	push	esi
	call	_lua_createtable

; 101  : 			lua_pushstring(L, "__index");

	push	OFFSET $SG224088
	push	esi
	call	_lua_pushstring

; 102  : 			lua_pushvalue(L, type_index);

	push	ebx
	push	esi
	call	_lua_pushvalue
	add	esp, 68					; 00000044H

; 103  : 			lua_rawset(L, -3);					// mt.__index = Type

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 104  : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_setmetatable

; 105  : 
; 106  : 			//Assign it in instances
; 107  : 			lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	call	_lua_pushlightuserdata

; 108  : 			lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_pushvalue

; 109  : 			lua_rawset(L, instances_index);				//__instances[pkType] = t;

	push	ebp
	push	esi
	call	_lua_rawset
	add	esp, 40					; 00000028H
$LN2@Push:

; 110  : 		}
; 111  : 
; 112  : 		//VERIFY(instances_index > type_index);
; 113  : 		lua_remove(L, instances_index);

	push	ebp
	push	esi
	call	_lua_remove

; 114  : 		lua_remove(L, type_index);

	push	ebx
	push	esi
	call	_lua_remove
	add	esp, 16					; 00000010H
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi

; 122  : 	}
; 123  : }

	ret	0
$LN4@Push:

; 115  : 
; 116  : 		//const int dt = lua_gettop(L);
; 117  : 		//VERIFY(dt == t + 1)
; 118  : 	}
; 119  : 	else
; 120  : 	{
; 121  : 		lua_pushnil(L);

	mov	eax, DWORD PTR _L$[esp]
	push	eax
	call	_lua_pushnil
	add	esp, 4
	pop	edi

; 122  : 	}
; 123  : }

	ret	0
?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z ENDP ; CvLuaScopedInstance<CvLuaArea,CvArea>::Push
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::Push
EXTRN	?PushMethods@CvLuaCity@@SAXPAUlua_State@@H@Z:PROC ; CvLuaCity::PushMethods
EXTRN	?GetTypeName@CvLuaCity@@SAPBDXZ:PROC		; CvLuaCity::GetTypeName
; Function compile flags: /Ogtpy
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_pkType$ = 12						; size = 4
?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z PROC ; CvLuaScopedInstance<CvLuaCity,CvCity>::Push, COMDAT

; 39   : {

	push	edi

; 40   : 	//Pushing an instance involves more than just actually pushing a pointer into the
; 41   : 	//Lua stack.  There are some caching optimizations that are done as well as some
; 42   : 	//checks.
; 43   : 	//The first step is to load or create a global table <Typename> to store all member
; 44   : 	//methods and all pushed instances.  This conserves memory and offers faster pushing
; 45   : 	//speed.
; 46   : 	//If <Typename>.__instances[pkType] is not nil, return that value.
; 47   : 	//otherwise push a new instance and assign it to __instances.
; 48   : 
; 49   : 	//NOTE: Raw gets and sets are used as an optimization over using lua_[get,set]field
; 50   : 	if(pkType)

	mov	edi, DWORD PTR _pkType$[esp]
	test	edi, edi
	je	$LN4@Push@2
	push	ebx
	push	ebp
	push	esi

; 51   : 	{
; 52   : 		//const int t = lua_gettop(L);
; 53   : 
; 54   : 		lua_getglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaCity@@SAPBDXZ		; CvLuaCity::GetTypeName
	mov	esi, DWORD PTR _L$[esp+12]
	push	eax
	push	-10002					; ffffd8eeH
	push	esi
	call	_lua_getfield

; 55   : 		if(lua_isnil(L, -1))

	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	$LN7@Push@2

; 56   : 		{
; 57   : 			//Typename wasn't found, time to build it.
; 58   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	push	esi
	call	_lua_settop

; 59   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 60   : 
; 61   : 			//Create weak __instances table.
; 62   : 			lua_pushstring(L, "__instances");

	push	OFFSET $SG224100
	push	esi
	call	_lua_pushstring

; 63   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 64   : 
; 65   : 			//Create __instances.mt
; 66   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 67   : 			lua_pushstring(L, "__mode");

	push	OFFSET $SG224101
	push	esi
	call	_lua_pushstring

; 68   : 			lua_pushstring(L, "v");

	push	OFFSET $SG224102
	push	esi
	call	_lua_pushstring
	add	esp, 68					; 00000044H

; 69   : 			lua_rawset(L, -3);				// mt.__mode = "v";

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 70   : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_setmetatable

; 71   : 
; 72   : 			lua_rawset(L, -3);				//type.__instances = t;

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 73   : 
; 74   : 
; 75   : 			lua_pushvalue(L, -1);

	push	-1
	push	esi
	call	_lua_pushvalue

; 76   : 			lua_setglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaCity@@SAPBDXZ		; CvLuaCity::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	push	esi
	call	_lua_setfield

; 77   : 
; 78   : 			Derived::PushMethods(L, lua_gettop(L));

	push	esi
	call	_lua_gettop
	push	eax
	push	esi
	call	?PushMethods@CvLuaCity@@SAXPAUlua_State@@H@Z ; CvLuaCity::PushMethods
	add	esp, 56					; 00000038H
$LN7@Push@2:

; 79   : 		}
; 80   : 		const int type_index = lua_gettop(L);

	push	esi
	call	_lua_gettop

; 81   : 
; 82   : 		lua_pushstring(L, "__instances");

	push	OFFSET $SG224104
	push	esi
	mov	ebx, eax
	call	_lua_pushstring

; 83   : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_rawget

; 84   : 
; 85   : 		const int instances_index = lua_gettop(L);

	push	esi
	call	_lua_gettop

; 86   : 
; 87   : 		lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	mov	ebp, eax
	call	_lua_pushlightuserdata

; 88   : 
; 89   : 		lua_rawget(L, -2);					//retrieve type.__instances[pkType]

	push	-2					; fffffffeH
	push	esi
	call	_lua_rawget

; 90   : 
; 91   : 		if(lua_isnil(L, -1))

	push	-1
	push	esi
	call	_lua_type
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN2@Push@2

; 92   : 		{
; 93   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	push	esi
	call	_lua_settop

; 94   : 
; 95   : 			//Push new instance
; 96   : 			lua_createtable(L, 0, 1);

	push	1
	push	0
	push	esi
	call	_lua_createtable

; 97   : 			lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	call	_lua_pushlightuserdata

; 98   : 			lua_setfield(L, -2, "__instance");

	push	OFFSET $SG224107
	push	-2					; fffffffeH
	push	esi
	call	_lua_setfield

; 99   : 
; 100  : 			lua_createtable(L, 0, 1);			// create mt

	push	1
	push	0
	push	esi
	call	_lua_createtable

; 101  : 			lua_pushstring(L, "__index");

	push	OFFSET $SG224108
	push	esi
	call	_lua_pushstring

; 102  : 			lua_pushvalue(L, type_index);

	push	ebx
	push	esi
	call	_lua_pushvalue
	add	esp, 68					; 00000044H

; 103  : 			lua_rawset(L, -3);					// mt.__index = Type

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 104  : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_setmetatable

; 105  : 
; 106  : 			//Assign it in instances
; 107  : 			lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	call	_lua_pushlightuserdata

; 108  : 			lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_pushvalue

; 109  : 			lua_rawset(L, instances_index);				//__instances[pkType] = t;

	push	ebp
	push	esi
	call	_lua_rawset
	add	esp, 40					; 00000028H
$LN2@Push@2:

; 110  : 		}
; 111  : 
; 112  : 		//VERIFY(instances_index > type_index);
; 113  : 		lua_remove(L, instances_index);

	push	ebp
	push	esi
	call	_lua_remove

; 114  : 		lua_remove(L, type_index);

	push	ebx
	push	esi
	call	_lua_remove
	add	esp, 16					; 00000010H
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi

; 122  : 	}
; 123  : }

	ret	0
$LN4@Push@2:

; 115  : 
; 116  : 		//const int dt = lua_gettop(L);
; 117  : 		//VERIFY(dt == t + 1)
; 118  : 	}
; 119  : 	else
; 120  : 	{
; 121  : 		lua_pushnil(L);

	mov	eax, DWORD PTR _L$[esp]
	push	eax
	call	_lua_pushnil
	add	esp, 4
	pop	edi

; 122  : 	}
; 123  : }

	ret	0
?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z ENDP ; CvLuaScopedInstance<CvLuaCity,CvCity>::Push
_TEXT	ENDS
PUBLIC	?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance
EXTRN	?HandleMissingInstance@CvLuaCity@@SAXPAUlua_State@@@Z:PROC ; CvLuaCity::HandleMissingInstance
EXTRN	_lua_touserdata:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_bErrorOnFail$ = 16					; size = 1
?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z PROC ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance, COMDAT

; 127  : {

	push	ebx
	push	ebp
	push	esi

; 128  : 	const int stack_size = lua_gettop(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	mov	ebp, eax

; 129  : 	bool bFail = true;
; 130  : 
; 131  : 	InstanceType* pkInstance = NULL;
; 132  : 	if(lua_type(L, idx) == LUA_TTABLE)

	mov	eax, DWORD PTR _idx$[esp+16]
	push	eax
	push	esi
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN3@GetInstanc

; 133  : 	{
; 134  : 		lua_getfield(L, idx, "__instance");

	mov	ecx, DWORD PTR _idx$[esp+12]
	push	OFFSET $SG224123
	push	ecx
	push	esi
	call	_lua_getfield

; 135  : 		if(lua_type(L, -1) == LUA_TLIGHTUSERDATA)

	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN3@GetInstanc

; 136  : 		{
; 137  : 			pkInstance = static_cast<InstanceType*>(lua_touserdata(L, -1));

	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8

; 138  : 			if(pkInstance)

	test	edi, edi
	je	SHORT $LN3@GetInstanc

; 139  : 			{
; 140  : 				bFail = false;

	xor	bl, bl
$LN3@GetInstanc:

; 141  : 			}
; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	lua_settop(L, stack_size);

	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8

; 146  : 
; 147  : 	if(bFail && bErrorOnFail)

	test	bl, bl
	je	SHORT $LN9@GetInstanc
	cmp	BYTE PTR _bErrorOnFail$[esp+12], 0
	je	SHORT $LN9@GetInstanc

; 148  : 	{
; 149  : 		if(idx == 1)

	cmp	DWORD PTR _idx$[esp+12], 1
	jne	SHORT $LN1@GetInstanc

; 150  : 			luaL_error(L, "Not a valid instance.  Either the instance is NULL or you used '.' instead of ':'.");

	push	OFFSET $SG224129
	push	esi
	call	_luaL_error
	add	esp, 8
$LN1@GetInstanc:

; 151  : 		Derived::HandleMissingInstance(L);

	push	esi
	call	?HandleMissingInstance@CvLuaCity@@SAXPAUlua_State@@@Z ; CvLuaCity::HandleMissingInstance
	add	esp, 4
$LN9@GetInstanc:

; 152  : 	}
; 153  : 	return pkInstance;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 154  : }

	ret	0
?GetInstance@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAPAVCvCity@@PAUlua_State@@H_N@Z ENDP ; CvLuaScopedInstance<CvLuaCity,CvCity>::GetInstance
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
EXTRN	?PushMethods@CvLuaPlot@@SAXPAUlua_State@@H@Z:PROC ; CvLuaPlot::PushMethods
EXTRN	?GetTypeName@CvLuaPlot@@SAPBDXZ:PROC		; CvLuaPlot::GetTypeName
; Function compile flags: /Ogtpy
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_pkType$ = 12						; size = 4
?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z PROC ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push, COMDAT

; 39   : {

	push	edi

; 40   : 	//Pushing an instance involves more than just actually pushing a pointer into the
; 41   : 	//Lua stack.  There are some caching optimizations that are done as well as some
; 42   : 	//checks.
; 43   : 	//The first step is to load or create a global table <Typename> to store all member
; 44   : 	//methods and all pushed instances.  This conserves memory and offers faster pushing
; 45   : 	//speed.
; 46   : 	//If <Typename>.__instances[pkType] is not nil, return that value.
; 47   : 	//otherwise push a new instance and assign it to __instances.
; 48   : 
; 49   : 	//NOTE: Raw gets and sets are used as an optimization over using lua_[get,set]field
; 50   : 	if(pkType)

	mov	edi, DWORD PTR _pkType$[esp]
	test	edi, edi
	je	$LN4@Push@3
	push	ebx
	push	ebp
	push	esi

; 51   : 	{
; 52   : 		//const int t = lua_gettop(L);
; 53   : 
; 54   : 		lua_getglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaPlot@@SAPBDXZ		; CvLuaPlot::GetTypeName
	mov	esi, DWORD PTR _L$[esp+12]
	push	eax
	push	-10002					; ffffd8eeH
	push	esi
	call	_lua_getfield

; 55   : 		if(lua_isnil(L, -1))

	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	$LN7@Push@3

; 56   : 		{
; 57   : 			//Typename wasn't found, time to build it.
; 58   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	push	esi
	call	_lua_settop

; 59   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 60   : 
; 61   : 			//Create weak __instances table.
; 62   : 			lua_pushstring(L, "__instances");

	push	OFFSET $SG224140
	push	esi
	call	_lua_pushstring

; 63   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 64   : 
; 65   : 			//Create __instances.mt
; 66   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 67   : 			lua_pushstring(L, "__mode");

	push	OFFSET $SG224141
	push	esi
	call	_lua_pushstring

; 68   : 			lua_pushstring(L, "v");

	push	OFFSET $SG224142
	push	esi
	call	_lua_pushstring
	add	esp, 68					; 00000044H

; 69   : 			lua_rawset(L, -3);				// mt.__mode = "v";

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 70   : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_setmetatable

; 71   : 
; 72   : 			lua_rawset(L, -3);				//type.__instances = t;

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 73   : 
; 74   : 
; 75   : 			lua_pushvalue(L, -1);

	push	-1
	push	esi
	call	_lua_pushvalue

; 76   : 			lua_setglobal(L, Derived::GetTypeName());

	call	?GetTypeName@CvLuaPlot@@SAPBDXZ		; CvLuaPlot::GetTypeName
	push	eax
	push	-10002					; ffffd8eeH
	push	esi
	call	_lua_setfield

; 77   : 
; 78   : 			Derived::PushMethods(L, lua_gettop(L));

	push	esi
	call	_lua_gettop
	push	eax
	push	esi
	call	?PushMethods@CvLuaPlot@@SAXPAUlua_State@@H@Z ; CvLuaPlot::PushMethods
	add	esp, 56					; 00000038H
$LN7@Push@3:

; 79   : 		}
; 80   : 		const int type_index = lua_gettop(L);

	push	esi
	call	_lua_gettop

; 81   : 
; 82   : 		lua_pushstring(L, "__instances");

	push	OFFSET $SG224144
	push	esi
	mov	ebx, eax
	call	_lua_pushstring

; 83   : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_rawget

; 84   : 
; 85   : 		const int instances_index = lua_gettop(L);

	push	esi
	call	_lua_gettop

; 86   : 
; 87   : 		lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	mov	ebp, eax
	call	_lua_pushlightuserdata

; 88   : 
; 89   : 		lua_rawget(L, -2);					//retrieve type.__instances[pkType]

	push	-2					; fffffffeH
	push	esi
	call	_lua_rawget

; 90   : 
; 91   : 		if(lua_isnil(L, -1))

	push	-1
	push	esi
	call	_lua_type
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN2@Push@3

; 92   : 		{
; 93   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	push	esi
	call	_lua_settop

; 94   : 
; 95   : 			//Push new instance
; 96   : 			lua_createtable(L, 0, 1);

	push	1
	push	0
	push	esi
	call	_lua_createtable

; 97   : 			lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	call	_lua_pushlightuserdata

; 98   : 			lua_setfield(L, -2, "__instance");

	push	OFFSET $SG224147
	push	-2					; fffffffeH
	push	esi
	call	_lua_setfield

; 99   : 
; 100  : 			lua_createtable(L, 0, 1);			// create mt

	push	1
	push	0
	push	esi
	call	_lua_createtable

; 101  : 			lua_pushstring(L, "__index");

	push	OFFSET $SG224148
	push	esi
	call	_lua_pushstring

; 102  : 			lua_pushvalue(L, type_index);

	push	ebx
	push	esi
	call	_lua_pushvalue
	add	esp, 68					; 00000044H

; 103  : 			lua_rawset(L, -3);					// mt.__index = Type

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 104  : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_setmetatable

; 105  : 
; 106  : 			//Assign it in instances
; 107  : 			lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	call	_lua_pushlightuserdata

; 108  : 			lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_pushvalue

; 109  : 			lua_rawset(L, instances_index);				//__instances[pkType] = t;

	push	ebp
	push	esi
	call	_lua_rawset
	add	esp, 40					; 00000028H
$LN2@Push@3:

; 110  : 		}
; 111  : 
; 112  : 		//VERIFY(instances_index > type_index);
; 113  : 		lua_remove(L, instances_index);

	push	ebp
	push	esi
	call	_lua_remove

; 114  : 		lua_remove(L, type_index);

	push	ebx
	push	esi
	call	_lua_remove
	add	esp, 16					; 00000010H
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi

; 122  : 	}
; 123  : }

	ret	0
$LN4@Push@3:

; 115  : 
; 116  : 		//const int dt = lua_gettop(L);
; 117  : 		//VERIFY(dt == t + 1)
; 118  : 	}
; 119  : 	else
; 120  : 	{
; 121  : 		lua_pushnil(L);

	mov	eax, DWORD PTR _L$[esp]
	push	eax
	call	_lua_pushnil
	add	esp, 4
	pop	edi

; 122  : 	}
; 123  : }

	ret	0
?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ENDP ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
_TEXT	ENDS
PUBLIC	?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
EXTRN	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z:PROC ; CvLuaPlot::HandleMissingInstance
; Function compile flags: /Ogtpy
;	COMDAT ?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_bErrorOnFail$ = 16					; size = 1
?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z PROC ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance, COMDAT

; 127  : {

	push	ebx
	push	ebp
	push	esi

; 128  : 	const int stack_size = lua_gettop(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	mov	ebp, eax

; 129  : 	bool bFail = true;
; 130  : 
; 131  : 	InstanceType* pkInstance = NULL;
; 132  : 	if(lua_type(L, idx) == LUA_TTABLE)

	mov	eax, DWORD PTR _idx$[esp+16]
	push	eax
	push	esi
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN3@GetInstanc@2

; 133  : 	{
; 134  : 		lua_getfield(L, idx, "__instance");

	mov	ecx, DWORD PTR _idx$[esp+12]
	push	OFFSET $SG224163
	push	ecx
	push	esi
	call	_lua_getfield

; 135  : 		if(lua_type(L, -1) == LUA_TLIGHTUSERDATA)

	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN3@GetInstanc@2

; 136  : 		{
; 137  : 			pkInstance = static_cast<InstanceType*>(lua_touserdata(L, -1));

	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8

; 138  : 			if(pkInstance)

	test	edi, edi
	je	SHORT $LN3@GetInstanc@2

; 139  : 			{
; 140  : 				bFail = false;

	xor	bl, bl
$LN3@GetInstanc@2:

; 141  : 			}
; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	lua_settop(L, stack_size);

	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8

; 146  : 
; 147  : 	if(bFail && bErrorOnFail)

	test	bl, bl
	je	SHORT $LN9@GetInstanc@2
	cmp	BYTE PTR _bErrorOnFail$[esp+12], 0
	je	SHORT $LN9@GetInstanc@2

; 148  : 	{
; 149  : 		if(idx == 1)

	cmp	DWORD PTR _idx$[esp+12], 1
	jne	SHORT $LN1@GetInstanc@2

; 150  : 			luaL_error(L, "Not a valid instance.  Either the instance is NULL or you used '.' instead of ':'.");

	push	OFFSET $SG224169
	push	esi
	call	_luaL_error
	add	esp, 8
$LN1@GetInstanc@2:

; 151  : 		Derived::HandleMissingInstance(L);

	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN9@GetInstanc@2:

; 152  : 	}
; 153  : 	return pkInstance;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 154  : }

	ret	0
?GetInstance@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAPAVCvPlot@@PAUlua_State@@H_N@Z ENDP ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::GetInstance
_TEXT	ENDS
PUBLIC	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
; Function compile flags: /Ogtpy
;	COMDAT ?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_idx$ = 12						; size = 4
_bErrorOnFail$ = 16					; size = 1
?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z PROC ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance, COMDAT

; 127  : {

	push	ebx
	push	ebp
	push	esi

; 128  : 	const int stack_size = lua_gettop(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	mov	ebp, eax

; 129  : 	bool bFail = true;
; 130  : 
; 131  : 	InstanceType* pkInstance = NULL;
; 132  : 	if(lua_type(L, idx) == LUA_TTABLE)

	mov	eax, DWORD PTR _idx$[esp+16]
	push	eax
	push	esi
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN3@GetInstanc@3

; 133  : 	{
; 134  : 		lua_getfield(L, idx, "__instance");

	mov	ecx, DWORD PTR _idx$[esp+12]
	push	OFFSET $SG224203
	push	ecx
	push	esi
	call	_lua_getfield

; 135  : 		if(lua_type(L, -1) == LUA_TLIGHTUSERDATA)

	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN3@GetInstanc@3

; 136  : 		{
; 137  : 			pkInstance = static_cast<InstanceType*>(lua_touserdata(L, -1));

	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8

; 138  : 			if(pkInstance)

	test	edi, edi
	je	SHORT $LN3@GetInstanc@3

; 139  : 			{
; 140  : 				bFail = false;

	xor	bl, bl
$LN3@GetInstanc@3:

; 141  : 			}
; 142  : 		}
; 143  : 	}
; 144  : 
; 145  : 	lua_settop(L, stack_size);

	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8

; 146  : 
; 147  : 	if(bFail && bErrorOnFail)

	test	bl, bl
	je	SHORT $LN11@GetInstanc@3
	cmp	BYTE PTR _bErrorOnFail$[esp+12], 0
	je	SHORT $LN11@GetInstanc@3

; 148  : 	{
; 149  : 		if(idx == 1)

	cmp	DWORD PTR _idx$[esp+12], 1
	jne	SHORT $LN1@GetInstanc@3

; 150  : 			luaL_error(L, "Not a valid instance.  Either the instance is NULL or you used '.' instead of ':'.");

	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	add	esp, 8
$LN1@GetInstanc@3:

; 151  : 		Derived::HandleMissingInstance(L);

	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN11@GetInstanc@3:

; 152  : 	}
; 153  : 	return pkInstance;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 154  : }

	ret	0
?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ENDP ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvluamethodwrapper.h
;	COMDAT ??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>, COMDAT

; 69   : {

	push	ebx
	push	ebp
	push	esi

; 70   : 	InstanceType* pkType = Derived::GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@BasicLuaMe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@BasicLuaMe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@BasicLuaMe
	xor	bl, bl
$LN5@BasicLuaMe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@BasicLuaMe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@BasicLuaMe:

; 71   : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)());

	mov	ecx, edi
	call	DWORD PTR _func$[esp+12]
	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 72   : 
; 73   : 	return 1;

	mov	eax, 1
	pop	ebx

; 74   : }

	ret	0
??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
; Function compile flags: /Ogtpy
;	COMDAT ??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>, COMDAT

; 69   : {

	push	ebx
	push	ebp
	push	esi

; 70   : 	InstanceType* pkType = Derived::GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@BasicLuaMe@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@BasicLuaMe@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@BasicLuaMe@2
	xor	bl, bl
$LN5@BasicLuaMe@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@BasicLuaMe@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@BasicLuaMe@2:

; 71   : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)());

	mov	ecx, edi
	call	DWORD PTR _func$[esp+12]
	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 72   : 
; 73   : 	return 1;

	mov	eax, 1
	pop	ebx

; 74   : }

	ret	0
??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
_TEXT	ENDS
PUBLIC	?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluascopedinstance.h
;	COMDAT ?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ
_TEXT	SEGMENT
?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ PROC ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex, COMDAT

; 159  : 	return 2;

	mov	eax, 2

; 160  : }

	ret	0
?GetStartingArgIndex@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SA?BHXZ ENDP ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetStartingArgIndex
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvluaargtemplates.h
_TEXT	ENDS
;	COMDAT ??$toValue@W4CommandTypes@@@CvLuaArgs@@YA?AW4CommandTypes@@PAUlua_State@@H@Z
_TEXT	SEGMENT
??$toValue@W4CommandTypes@@@CvLuaArgs@@YA?AW4CommandTypes@@PAUlua_State@@H@Z PROC ; CvLuaArgs::toValue<enum CommandTypes>, COMDAT
; _L$ = ecx
; _idx$ = eax

; 12   : 		//This is pretty unsafe, but common.
; 13   : 		//Assume T is a poorly designed enum =(
; 14   : 		return (T)lua_tointeger(L, idx);

	push	eax
	push	ecx
	call	_lua_tointeger
	add	esp, 8

; 15   : 	}

	ret	0
??$toValue@W4CommandTypes@@@CvLuaArgs@@YA?AW4CommandTypes@@PAUlua_State@@H@Z ENDP ; CvLuaArgs::toValue<enum CommandTypes>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$toValue@PBVCvPlot@@@CvLuaArgs@@YAPBVCvPlot@@PAUlua_State@@H@Z
_TEXT	SEGMENT
??$toValue@PBVCvPlot@@@CvLuaArgs@@YAPBVCvPlot@@PAUlua_State@@H@Z PROC ; CvLuaArgs::toValue<CvPlot const *>, COMDAT
; _L$ = ecx
; _idx$ = eax

; 12   : 		//This is pretty unsafe, but common.
; 13   : 		//Assume T is a poorly designed enum =(
; 14   : 		return (T)lua_tointeger(L, idx);

	push	eax
	push	ecx
	call	_lua_tointeger
	add	esp, 8

; 15   : 	}

	ret	0
??$toValue@PBVCvPlot@@@CvLuaArgs@@YAPBVCvPlot@@PAUlua_State@@H@Z ENDP ; CvLuaArgs::toValue<CvPlot const *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$pushValue@W4PlayerTypes@@@CvLuaArgs@@YAXPAUlua_State@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
??$pushValue@W4PlayerTypes@@@CvLuaArgs@@YAXPAUlua_State@@W4PlayerTypes@@@Z PROC ; CvLuaArgs::pushValue<enum PlayerTypes>, COMDAT
; _L$ = ecx
; _t$ = eax

; 31   : 		//This is pretty unsafe, but common.
; 32   : 		//Assume T is a poorly designed enum =(
; 33   : 		lua_pushinteger(L, t);

	push	eax
	push	ecx
	call	_lua_pushinteger
	add	esp, 8

; 34   : 	}

	ret	0
??$pushValue@W4PlayerTypes@@@CvLuaArgs@@YAXPAUlua_State@@W4PlayerTypes@@@Z ENDP ; CvLuaArgs::pushValue<enum PlayerTypes>
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0CvString@@QAE@PBD@Z				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0CvString@@QAE@PBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??0CvString@@QAE@PBD@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 25   : 	CvString(const char* s) : std::string(s ? s : "") {CvAssertMsg(s != NULL, "Passing NULL to std::string; possible heap corruption!");}

	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, ecx
	test	eax, eax
	jne	SHORT $LN4@CvString
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@CvString:
	push	eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@PBD@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
; Function compile flags: /Ogtpy
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??BCvString@@QBEPBDXZ				; CvString::operator char const *
; Function compile flags: /Ogtpy
;	COMDAT ??BCvString@@QBEPBDXZ
_TEXT	SEGMENT
??BCvString@@QBEPBDXZ PROC				; CvString::operator char const *, COMDAT
; _this$ = ecx

; 31   : 	operator const char*() const 	{ return c_str(); }												

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
??BCvString@@QBEPBDXZ ENDP				; CvString::operator char const *
_TEXT	ENDS
PUBLIC	?IsEmpty@CvString@@QBE_NXZ			; CvString::IsEmpty
EXTRN	__imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?IsEmpty@CvString@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@CvString@@QBE_NXZ PROC				; CvString::IsEmpty, COMDAT
; _this$ = ecx

; 41   : 	bool IsEmpty() const { return (empty() || this[0] == '\0');}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	test	al, al
	jne	SHORT $LN3@IsEmpty
	mov	ecx, esi
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	test	eax, eax
	je	SHORT $LN3@IsEmpty
	xor	eax, eax
	pop	esi
	ret	0
$LN3@IsEmpty:
	mov	eax, 1
	pop	esi
	ret	0
?IsEmpty@CvString@@QBE_NXZ ENDP				; CvString::IsEmpty
_TEXT	ENDS
PUBLIC	?GetReligionData@CvUnit@@QBEPAVCvUnitReligion@@XZ ; CvUnit::GetReligionData
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvunit.h
;	COMDAT ?GetReligionData@CvUnit@@QBEPAVCvUnitReligion@@XZ
_TEXT	SEGMENT
?GetReligionData@CvUnit@@QBEPAVCvUnitReligion@@XZ PROC	; CvUnit::GetReligionData, COMDAT
; _this$ = ecx

; 1317 : 		return m_pReligion;

	mov	eax, DWORD PTR [ecx+1888]

; 1318 : 	};

	ret	0
?GetReligionData@CvUnit@@QBEPAVCvUnitReligion@@XZ ENDP	; CvUnit::GetReligionData
_TEXT	ENDS
PUBLIC	?getMap@CvGlobals@@QAEAAVCvMap@@XZ		; CvGlobals::getMap
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getMap@CvGlobals@@QAEAAVCvMap@@XZ
_TEXT	SEGMENT
?getMap@CvGlobals@@QAEAAVCvMap@@XZ PROC			; CvGlobals::getMap, COMDAT
; _this$ = ecx

; 175  : 		return *m_map;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+52]

; 176  : 	}

	ret	0
?getMap@CvGlobals@@QAEAAVCvMap@@XZ ENDP			; CvGlobals::getMap
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 88   : 	if(bWrap)

	cmp	BYTE PTR _bWrap$[esp-4], 0
	mov	eax, DWORD PTR _iCoord$[esp-4]
	je	SHORT $LN5@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)
; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	ecx, DWORD PTR _iRange$[esp-4]
	test	eax, eax
	jge	SHORT $LN3@coordRange
	cdq
	idiv	ecx
	mov	eax, edx
	add	eax, ecx

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	cmp	eax, ecx
	jl	SHORT $LN5@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	cdq
	idiv	ecx
	mov	eax, edx
$LN5@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
_TEXT	ENDS
PUBLIC	?getGridWidth@CvMap@@QBEHXZ			; CvMap::getGridWidth
; Function compile flags: /Ogtpy
;	COMDAT ?getGridWidth@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridWidth@CvMap@@QBEHXZ PROC			; CvMap::getGridWidth, COMDAT
; _this$ = ecx

; 198  : 		return m_iGridWidth;

	mov	eax, DWORD PTR [ecx+4020]

; 199  : 	}

	ret	0
?getGridWidth@CvMap@@QBEHXZ ENDP			; CvMap::getGridWidth
_TEXT	ENDS
PUBLIC	?getGridHeight@CvMap@@QBEHXZ			; CvMap::getGridHeight
; Function compile flags: /Ogtpy
;	COMDAT ?getGridHeight@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridHeight@CvMap@@QBEHXZ PROC			; CvMap::getGridHeight, COMDAT
; _this$ = ecx

; 206  : 		return m_iGridHeight;

	mov	eax, DWORD PTR [ecx+4024]

; 207  : 	}

	ret	0
?getGridHeight@CvMap@@QBEHXZ ENDP			; CvMap::getGridHeight
_TEXT	ENDS
PUBLIC	?isWrapX@CvMap@@QBE_NXZ				; CvMap::isWrapX
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapX@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapX@CvMap@@QBE_NXZ PROC				; CvMap::isWrapX, COMDAT
; _this$ = ecx

; 228  : 		return m_bWrapX;

	mov	al, BYTE PTR [ecx+4056]

; 229  : 	}

	ret	0
?isWrapX@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapX
_TEXT	ENDS
PUBLIC	?isWrapY@CvMap@@QBE_NXZ				; CvMap::isWrapY
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapY@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapY@CvMap@@QBE_NXZ PROC				; CvMap::isWrapY, COMDAT
; _this$ = ecx

; 233  : 		return m_bWrapY;

	mov	al, BYTE PTR [ecx+4057]

; 234  : 	}

	ret	0
?isWrapY@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapY
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@ABV0@@Z			; CvString::CvString
; Function compile flags: /Ogtpy
;	COMDAT ??0CvString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CvString@@QAE@ABV0@@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@ABV0@@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	?GetReligion@CvUnitReligion@@QBE?AW4ReligionTypes@@XZ ; CvUnitReligion::GetReligion
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvreligionclasses.h
;	COMDAT ?GetReligion@CvUnitReligion@@QBE?AW4ReligionTypes@@XZ
_TEXT	SEGMENT
?GetReligion@CvUnitReligion@@QBE?AW4ReligionTypes@@XZ PROC ; CvUnitReligion::GetReligion, COMDAT
; _this$ = ecx

; 495  : 		return m_eReligion;

	mov	eax, DWORD PTR [ecx]

; 496  : 	};

	ret	0
?GetReligion@CvUnitReligion@@QBE?AW4ReligionTypes@@XZ ENDP ; CvUnitReligion::GetReligion
_TEXT	ENDS
PUBLIC	?GetSpreadsLeft@CvUnitReligion@@QBEHXZ		; CvUnitReligion::GetSpreadsLeft
; Function compile flags: /Ogtpy
;	COMDAT ?GetSpreadsLeft@CvUnitReligion@@QBEHXZ
_TEXT	SEGMENT
?GetSpreadsLeft@CvUnitReligion@@QBEHXZ PROC		; CvUnitReligion::GetSpreadsLeft, COMDAT
; _this$ = ecx

; 511  : 		return m_iSpreadsLeft;

	mov	eax, DWORD PTR [ecx+8]

; 512  : 	};

	ret	0
?GetSpreadsLeft@CvUnitReligion@@QBEHXZ ENDP		; CvUnitReligion::GetSpreadsLeft
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Isnil
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Isnil, COMDAT

; 157  : 		return ((_Charref)(*_Pnode)._Isnil);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 17					; 00000011H

; 158  : 		}

	ret	0
?_Isnil@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Left
; Function compile flags: /Ogtpy
;	COMDAT ?_Left@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Left, COMDAT

; 167  : 		return ((_Nodepref)(*_Pnode)._Left);

	mov	eax, DWORD PTR __Pnode$[esp-4]

; 168  : 		}

	ret	0
?_Left@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Right
; Function compile flags: /Ogtpy
;	COMDAT ?_Right@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Right, COMDAT

; 177  : 		return ((_Nodepref)(*_Pnode)._Right);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 8

; 178  : 		}

	ret	0
?_Right@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@SAABQAVFAutoVariableBase@@ABQAV3@@Z ; std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0>::_Kfn
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\set
;	COMDAT ?_Kfn@?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@SAABQAVFAutoVariableBase@@ABQAV3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@SAABQAVFAutoVariableBase@@ABQAV3@@Z PROC ; std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0>::_Kfn, COMDAT

; 45   : 		return (_Val);

	mov	eax, DWORD PTR __Val$[esp-4]

; 46   : 		}

	ret	0
?_Kfn@?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@SAABQAVFAutoVariableBase@@ABQAV3@@Z ENDP ; std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0>::_Kfn
_TEXT	ENDS
PUBLIC	??R?$less@PAVFAutoVariableBase@@@std@@QBE_NABQAVFAutoVariableBase@@0@Z ; std::less<FAutoVariableBase *>::operator()
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\functional
;	COMDAT ??R?$less@PAVFAutoVariableBase@@@std@@QBE_NABQAVFAutoVariableBase@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@PAVFAutoVariableBase@@@std@@QBE_NABQAVFAutoVariableBase@@0@Z PROC ; std::less<FAutoVariableBase *>::operator(), COMDAT
; _this$ = ecx

; 143  : 		return (_Left < _Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[esp-4]
	cmp	ecx, DWORD PTR [edx]
	sbb	eax, eax
	neg	eax

; 144  : 		}

	ret	8
??R?$less@PAVFAutoVariableBase@@@std@@QBE_NABQAVFAutoVariableBase@@0@Z ENDP ; std::less<FAutoVariableBase *>::operator()
_TEXT	ENDS
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator,bool>::pair<std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator,bool>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator,bool>::pair<std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+4], dl

; 51   : 		}

	ret	8
??0?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator,bool>::pair<std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::operator==
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 300  : 
; 301  :  #if _HAS_ITERATOR_DEBUGGING
; 302  : 			if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)
; 303  : 				{
; 304  : 				_DEBUG_ERROR("map/set iterators incompatible");
; 305  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 306  : 				}
; 307  :  #else
; 308  : 			_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 309  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 310  : 
; 311  : 			return (_Ptr == _Right._Ptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 312  : 			}

	ret	4
??8const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@3@XZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Mynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@3@XZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 410  : 			return (_Ptr);

	mov	eax, DWORD PTR [ecx]

; 411  : 			}

	ret	0
?_Mynode@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Color
; Function compile flags: /Ogtpy
;	COMDAT ?_Color@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Color, COMDAT

; 152  : 		return ((_Charref)(*_Pnode)._Color);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 16					; 00000010H

; 153  : 		}

	ret	0
?_Color@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Parent
; Function compile flags: /Ogtpy
;	COMDAT ?_Parent@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Parent, COMDAT

; 172  : 		return ((_Nodepref)(*_Pnode)._Parent);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 4

; 173  : 		}

	ret	0
?_Parent@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAVFAutoVariableBase@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Myval
; Function compile flags: /Ogtpy
;	COMDAT ?_Myval@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAVFAutoVariableBase@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAVFAutoVariableBase@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Myval, COMDAT

; 182  : 		return ((_Vref)(*_Pnode)._Myval);

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 12					; 0000000cH

; 183  : 		}

	ret	0
?_Myval@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAAAPAVFAutoVariableBase@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lmost
; Function compile flags: /Ogtpy
;	COMDAT ?_Lmost@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1281 : 		return (_Left(_Myhead));

	mov	eax, DWORD PTR [ecx+4]

; 1282 : 		}

	ret	0
?_Lmost@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rmost
; Function compile flags: /Ogtpy
;	COMDAT ?_Rmost@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1320 : 		return (_Right(_Myhead));

	mov	eax, DWORD PTR [ecx+4]
	add	eax, 8

; 1321 : 		}

	ret	0
?_Rmost@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rmost
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::const_iterator
; Function compile flags: /Ogtpy
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 244  : 			{	// construct with node pointer _Pnode

	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [eax], ecx

; 245  : 			}

	ret	4
??0const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVFAutoVariableBase@@@std@@QBEIXZ ; std::allocator<FAutoVariableBase *>::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVFAutoVariableBase@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVFAutoVariableBase@@@std@@QBEIXZ PROC ; std::allocator<FAutoVariableBase *>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 1073741823				; 3fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@PAVFAutoVariableBase@@@std@@QBEIXZ ENDP ; std::allocator<FAutoVariableBase *>::max_size
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>::deallocate
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU012@00ABQAVFAutoVariableBase@@D@Z ; std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node::_Node
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU012@00ABQAVFAutoVariableBase@@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU012@00ABQAVFAutoVariableBase@@D@Z PROC ; std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 38   : 			{	// construct a node with value

	mov	edx, DWORD PTR __Parg$[esp-4]
	mov	eax, ecx
	mov	ecx, DWORD PTR __Larg$[esp-4]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR __Rarg$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx]
	mov	dl, BYTE PTR __Carg$[esp-4]
	mov	DWORD PTR [eax+12], ecx
	mov	BYTE PTR [eax+16], dl
	mov	BYTE PTR [eax+17], 0

; 39   : 			}

	ret	20					; 00000014H
??0_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU012@00ABQAVFAutoVariableBase@@D@Z ENDP ; std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node::_Node
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Max
; Function compile flags: /Ogtpy
;	COMDAT ?_Max@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Max, COMDAT

; 1306 : 		while (!_Isnil(_Right(_Pnode)))

	mov	eax, DWORD PTR __Pnode$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	cmp	BYTE PTR [ecx+17], 0
	jne	SHORT $LN1@Max
	npad	3
$LL2@Max:

; 1307 : 			_Pnode = _Right(_Pnode);

	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+8]
	cmp	BYTE PTR [ecx+17], 0
	je	SHORT $LL2@Max
$LN1@Max:

; 1308 : 		return (_Pnode);
; 1309 : 		}

	ret	0
?_Max@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Max
_TEXT	ENDS
PUBLIC	?get@?$FAutoVariable@W4PlayerTypes@@VCvUnit@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvUnit>::get
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ?get@?$FAutoVariable@W4PlayerTypes@@VCvUnit@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
?get@?$FAutoVariable@W4PlayerTypes@@VCvUnit@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvUnit>::get, COMDAT
; _this$ = ecx

; 177  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 178  : }

	ret	0
?get@?$FAutoVariable@W4PlayerTypes@@VCvUnit@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvUnit>::get
_TEXT	ENDS
PUBLIC	?get@?$FAutoVariable@HVCvUnit@@@@QBEABHXZ	; FAutoVariable<int,CvUnit>::get
; Function compile flags: /Ogtpy
;	COMDAT ?get@?$FAutoVariable@HVCvUnit@@@@QBEABHXZ
_TEXT	SEGMENT
?get@?$FAutoVariable@HVCvUnit@@@@QBEABHXZ PROC		; FAutoVariable<int,CvUnit>::get, COMDAT
; _this$ = ecx

; 177  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 178  : }

	ret	0
?get@?$FAutoVariable@HVCvUnit@@@@QBEABHXZ ENDP		; FAutoVariable<int,CvUnit>::get
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@HVCvUnit@@@@QBEABHXZ		; FAutoVariable<int,CvUnit>::operator int const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@HVCvUnit@@@@QBEABHXZ
_TEXT	SEGMENT
??B?$FAutoVariable@HVCvUnit@@@@QBEABHXZ PROC		; FAutoVariable<int,CvUnit>::operator int const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@HVCvUnit@@@@QBEABHXZ ENDP		; FAutoVariable<int,CvUnit>::operator int const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@_NVCvUnit@@@@QBEAB_NXZ	; FAutoVariable<bool,CvUnit>::operator bool const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@_NVCvUnit@@@@QBEAB_NXZ
_TEXT	SEGMENT
??B?$FAutoVariable@_NVCvUnit@@@@QBEAB_NXZ PROC		; FAutoVariable<bool,CvUnit>::operator bool const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@_NVCvUnit@@@@QBEAB_NXZ ENDP		; FAutoVariable<bool,CvUnit>::operator bool const &
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T225194 = -12						; size = 12
$T225199 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx+ecx*4]
	add	edx, edx
	add	edx, edx
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 20					; 00000014H
	jae	SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T225199[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T225194[esp+16]
	mov	DWORD PTR $T225199[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T225194[esp+16]
	push	ecx
	mov	DWORD PTR $T225194[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate:
$LN8@Allocate:
	int	3
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsNone
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
;	COMDAT ?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsNone, COMDAT

; 504  : {

	push	ebx
	push	ebp
	push	esi

; 505  : #ifdef AUI_WARNING_FIXES
; 506  : 	const bool bDoesNotExist = (GetInstance(L, 1, false) == NULL);
; 507  : 	lua_pushboolean(L, bDoesNotExist ? 1 : 0);
; 508  : #else
; 509  : 	const bool bDoesNotExist = (GetInstance(L, false) == NULL);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	xor	edi, edi
	push	edi
	push	esi
	mov	ebp, eax
	mov	bl, 1
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNone
	push	OFFSET $SG224203
	push	edi
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNone
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsNone
	xor	bl, bl
$LN5@lIsNone:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNone
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN10@lIsNone:
	xor	eax, eax
	test	edi, edi
	sete	al

; 510  : 	lua_pushboolean(L, bDoesNotExist);

	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 511  : #endif
; 512  : 
; 513  : 	return 1;

	mov	eax, 1
	pop	ebx

; 514  : }

	ret	0
?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsNone
_TEXT	ENDS
PUBLIC	?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lConvert
EXTRN	?convert@CvUnit@@QAEXPAV1@_N@Z:PROC		; CvUnit::convert
EXTRN	_lua_toboolean:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225235 = -8					; size = 4
_bIsUpgrade$ = -4					; size = 1
_L$ = 8							; size = 4
?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lConvert, COMDAT

; 518  : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 519  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225235[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lConvert
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lConvert
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225235[esp+24], eax
	test	eax, eax
	je	SHORT $LN5@lConvert
	xor	bl, bl
$LN5@lConvert:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lConvert
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lConvert:

; 520  : 	CvUnit* pkUnitToConvert = GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lConvert
	push	OFFSET $SG224203
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lConvert
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lConvert
	xor	bl, bl
$LN14@lConvert:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN19@lConvert
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN19@lConvert:

; 521  : 	bool bIsUpgrade = lua_toboolean(L, 3);

	push	3
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bIsUpgrade$[esp+24], al

; 522  : 
; 523  : 	pkUnit->convert(pkUnitToConvert, bIsUpgrade);

	mov	ecx, DWORD PTR _bIsUpgrade$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$225235[esp+28]
	push	edi
	call	?convert@CvUnit@@QAEXPAV1@_N@Z		; CvUnit::convert
	pop	edi
	pop	esi
	pop	ebp

; 524  : 	return 0;

	xor	eax, eax
	pop	ebx

; 525  : }

	add	esp, 8
	ret	0
?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lConvert
_TEXT	ENDS
PUBLIC	?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lKill
EXTRN	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z:PROC	; CvUnit::kill
; Function compile flags: /Ogtpy
;	COMDAT ?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bDelay$ = -4						; size = 1
_L$ = 8							; size = 4
?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lKill, COMDAT

; 529  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 530  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN7@lKill
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN7@lKill
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN7@lKill
	xor	bl, bl
$LN7@lKill:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN12@lKill
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN12@lKill:

; 531  : 	const bool bDelay = lua_toboolean(L, 2);

	push	2
	push	esi
	call	_lua_toboolean
	test	eax, eax
	setne	al

; 532  : 	const PlayerTypes ePlayer
; 533  : 	    = (lua_isnil(L, 3))? NO_PLAYER : (PlayerTypes)lua_tointeger(L, 3);

	push	3
	push	esi
	mov	BYTE PTR _bDelay$[esp+36], al
	call	_lua_type
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN3@lKill

; 534  : 
; 535  : 	pkUnit->kill(bDelay, ePlayer);

	mov	ecx, DWORD PTR _bDelay$[esp+20]
	or	eax, -1
	push	eax
	push	ecx
	mov	ecx, edi
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill
	pop	edi
	pop	esi
	pop	ebp

; 536  : 	return 0;

	xor	eax, eax
	pop	ebx

; 537  : }

	pop	ecx
	ret	0
$LN3@lKill:

; 532  : 	const PlayerTypes ePlayer
; 533  : 	    = (lua_isnil(L, 3))? NO_PLAYER : (PlayerTypes)lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 534  : 
; 535  : 	pkUnit->kill(bDelay, ePlayer);

	mov	ecx, DWORD PTR _bDelay$[esp+28]
	add	esp, 8
	push	eax
	push	ecx
	mov	ecx, edi
	call	?kill@CvUnit@@QAEX_NW4PlayerTypes@@@Z	; CvUnit::kill
	pop	edi
	pop	esi
	pop	ebp

; 536  : 	return 0;

	xor	eax, eax
	pop	ebx

; 537  : }

	pop	ecx
	ret	0
?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lKill
_TEXT	ENDS
PUBLIC	?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBetterDefenderThan
EXTRN	?isBetterDefenderThan@CvUnit@@QBE_NPBV1@0@Z:PROC ; CvUnit::isBetterDefenderThan
; Function compile flags: /Ogtpy
;	COMDAT ?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsBetterDefenderThan, COMDAT

; 547  : {

	push	ebx
	push	ebp
	push	esi

; 548  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsBetterD
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsBetterD
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsBetterD
	xor	bl, bl
$LN5@lIsBetterD:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsBetterD
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsBetterD:

; 549  : 	CvUnit* pkDefender = GetInstance(L, 2, false);

	push	0
	push	2
	push	esi
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance

; 550  : 	CvUnit* pkAttacker = GetInstance(L, 3, false);

	push	0
	push	3
	push	esi
	mov	ebx, eax
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance
	add	esp, 24					; 00000018H

; 551  : 	const bool bResult = pkUnit->isBetterDefenderThan(pkDefender, pkAttacker);

	push	eax
	push	ebx
	mov	ecx, edi
	call	?isBetterDefenderThan@CvUnit@@QBE_NPBV1@0@Z ; CvUnit::isBetterDefenderThan

; 552  : 
; 553  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 554  : 	return 1;

	mov	eax, 1
	pop	ebx

; 555  : }

	ret	0
?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsBetterDefenderThan
_TEXT	ENDS
PUBLIC	?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanDoCommand
EXTRN	?canDoCommand@CvUnit@@QBE_NW4CommandTypes@@HH_N1@Z:PROC ; CvUnit::canDoCommand
EXTRN	_luaL_optinteger:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bTestBusy$ = -12					; size = 1
_bTestVisible$ = -8					; size = 1
_iData2$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDoCommand, COMDAT

; 559  : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi

; 560  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+20]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanDoComm
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanDoComm
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanDoComm
	xor	bl, bl
$LN5@lCanDoComm:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanDoComm
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanDoComm:

; 561  : 	const CommandTypes eCommand = (CommandTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 562  : 	const int iData1		= lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 563  : 	const int iData2		= lua_tointeger(L, 4);

	push	4
	push	esi
	mov	ebp, eax
	call	_lua_tointeger

; 564  : 	const bool bTestVisible = luaL_optint(L, 5, 0);		//defaults to false

	push	0
	push	5
	push	esi
	mov	DWORD PTR _iData2$[esp+64], eax
	call	_luaL_optinteger

; 565  : 	const bool bTestBusy	= luaL_optint(L, 6, 1);		//defaults to true

	push	1
	test	eax, eax
	setne	al
	push	6
	push	esi
	mov	BYTE PTR _bTestVisible$[esp+76], al
	call	_luaL_optinteger
	add	esp, 48					; 00000030H
	test	eax, eax

; 566  : 
; 567  : 	const bool bResult = pkUnit->canDoCommand(eCommand, iData1, iData2, bTestVisible, bTestBusy);

	mov	eax, DWORD PTR _bTestVisible$[esp+28]
	setne	cl
	mov	BYTE PTR _bTestBusy$[esp+28], cl
	mov	edx, DWORD PTR _bTestBusy$[esp+28]
	mov	ecx, DWORD PTR _iData2$[esp+28]
	push	edx
	push	eax
	push	ecx
	push	ebp
	push	ebx
	mov	ecx, edi
	call	?canDoCommand@CvUnit@@QBE_NW4CommandTypes@@HH_N1@Z ; CvUnit::canDoCommand

; 568  : 
; 569  : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 570  : 	return 1;

	mov	eax, 1
	pop	ebx

; 571  : }

	add	esp, 12					; 0000000cH
	ret	0
?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDoCommand
_TEXT	ENDS
PUBLIC	?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPathEndTurnPlot
EXTRN	?GetPathEndTurnPlot@CvUnit@@QBEPAVCvPlot@@XZ:PROC ; CvUnit::GetPathEndTurnPlot
; Function compile flags: /Ogtpy
;	COMDAT ?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetPathEndTurnPlot, COMDAT

; 581  : {

	push	ebx
	push	ebp
	push	esi

; 582  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetPathEn
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetPathEn
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetPathEn
	xor	bl, bl
$LN5@lGetPathEn:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetPathEn
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetPathEn:

; 583  : 
; 584  : 	CvPlot* pkPlot = pkUnit->GetPathEndTurnPlot();

	mov	ecx, edi
	call	?GetPathEndTurnPlot@CvUnit@@QBEPAVCvPlot@@XZ ; CvUnit::GetPathEndTurnPlot

; 585  : 	CvLuaPlot::Push(L, pkPlot);

	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 586  : 
; 587  : 	return 1;

	mov	eax, 1
	pop	ebx

; 588  : }

	ret	0
?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetPathEndTurnPlot
_TEXT	ENDS
PUBLIC	?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanEnterTerritory
EXTRN	?canEnterTerritory@CvUnit@@QBE_NW4TeamTypes@@_N11@Z:PROC ; CvUnit::canEnterTerritory
; Function compile flags: /Ogtpy
;	COMDAT ?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bIsCity$ = -8						; size = 1
_bIgnoreRightOfPassage$ = -4				; size = 1
_L$ = 8							; size = 4
?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanEnterTerritory, COMDAT

; 607  : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 608  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanEnterT
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanEnterT
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanEnterT
	xor	bl, bl
$LN5@lCanEnterT:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanEnterT
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanEnterT:

; 609  : 	const TeamTypes eTeam				= (TeamTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 610  : 	const bool bIgnoreRightOfPassage	= luaL_optint(L, 3, 0);

	push	0
	push	3
	push	esi
	mov	ebx, eax
	call	_luaL_optinteger

; 611  : 	const bool bIsCity					= luaL_optint(L, 4, 0);

	push	0
	test	eax, eax
	setne	al
	push	4
	push	esi
	mov	BYTE PTR _bIgnoreRightOfPassage$[esp+56], al
	call	_luaL_optinteger
	add	esp, 32					; 00000020H
	test	eax, eax

; 612  : 
; 613  : 	const bool bResult = pkUnit->canEnterTerritory(eTeam, bIgnoreRightOfPassage, bIsCity);

	mov	eax, DWORD PTR _bIgnoreRightOfPassage$[esp+24]
	setne	cl
	mov	BYTE PTR _bIsCity$[esp+24], cl
	mov	edx, DWORD PTR _bIsCity$[esp+24]
	push	0
	push	edx
	push	eax
	push	ebx
	mov	ecx, edi
	call	?canEnterTerritory@CvUnit@@QBE_NW4TeamTypes@@_N11@Z ; CvUnit::canEnterTerritory

; 614  : 
; 615  : 	lua_pushboolean(L, bResult);

	movzx	ecx, al
	push	ecx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 616  : 	return 1;

	mov	eax, 1
	pop	ebx

; 617  : }

	add	esp, 8
	ret	0
?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanEnterTerritory
_TEXT	ENDS
PUBLIC	?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDeclareWarRangeStrike
EXTRN	?GetDeclareWarRangeStrike@CvUnit@@QBE?AW4TeamTypes@@ABVCvPlot@@@Z:PROC ; CvUnit::GetDeclareWarRangeStrike
; Function compile flags: /Ogtpy
;	COMDAT ?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225370 = -4					; size = 4
_L$ = 8							; size = 4
?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetDeclareWarRangeStrike, COMDAT

; 621  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 622  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225370[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetDeclar@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetDeclar@2
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225370[esp+20], eax
	test	eax, eax
	je	SHORT $LN6@lGetDeclar@2
	xor	bl, bl
$LN6@lGetDeclar@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetDeclar@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetDeclar@2:

; 623  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lGetDeclar@2
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lGetDeclar@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lGetDeclar@2
	xor	bl, bl
$LN15@lGetDeclar@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN14@lGetDeclar@2
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lGetDeclar@2:

; 624  : 
; 625  : 	TeamTypes eResult = NO_TEAM;

	or	eax, -1

; 626  : 	if(pkPlot)

	test	edi, edi
	je	SHORT $LN1@lGetDeclar@2

; 627  : 	{
; 628  : 		eResult = pkUnit->GetDeclareWarRangeStrike(*pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225370[esp+20]
	push	edi
	call	?GetDeclareWarRangeStrike@CvUnit@@QBE?AW4TeamTypes@@ABVCvPlot@@@Z ; CvUnit::GetDeclareWarRangeStrike
$LN1@lGetDeclar@2:

; 629  : 	}
; 630  : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 631  : 	return 1;

	mov	eax, 1
	pop	ebx

; 632  : }

	pop	ecx
	ret	0
?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetDeclareWarRangeStrike
_TEXT	ENDS
PUBLIC	?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveOrAttackInto
EXTRN	?canMoveOrAttackInto@CvUnit@@QBE_NABVCvPlot@@E@Z:PROC ; CvUnit::canMoveOrAttackInto
; Function compile flags: /Ogtpy
;	COMDAT ?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bMoveFlags$ = -8					; size = 1
_pkInstance$225400 = -4					; size = 4
_L$ = 8							; size = 4
?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanMoveOrAttackInto, COMDAT

; 636  : {

	sub	esp, 8
	push	ebx
	push	esi

; 637  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225400[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN22@lCanMoveOr
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN22@lCanMoveOr
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225400[esp+20], eax
	test	eax, eax
	je	SHORT $LN22@lCanMoveOr
	xor	bl, bl
$LN22@lCanMoveOr:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanMoveOr
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN13@lCanMoveOr:
	push	ebp

; 638  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN17@lCanMoveOr
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN17@lCanMoveOr
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN17@lCanMoveOr
	xor	bl, bl
$LN17@lCanMoveOr:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	pop	ebp
	test	bl, bl
	je	SHORT $LN16@lCanMoveOr
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN16@lCanMoveOr:

; 639  : 	const bool bDeclareWar = luaL_optint(L, 3, 0);

	push	0
	push	3
	push	esi
	call	_luaL_optinteger

; 640  : 	const bool bDestination = luaL_optint(L, 4, 0);

	push	0
	test	eax, eax
	push	4
	push	esi
	setne	bl
	call	_luaL_optinteger
	add	esp, 24					; 00000018H
	test	eax, eax
	setne	al

; 641  : 
; 642  : 	byte bMoveFlags = 0;

	mov	BYTE PTR _bMoveFlags$[esp+20], 0

; 643  : 	if(bDeclareWar)

	test	bl, bl
	je	SHORT $LN3@lCanMoveOr

; 644  : 	{
; 645  : 		bMoveFlags |= CvUnit::MOVEFLAG_DECLARE_WAR;

	mov	BYTE PTR _bMoveFlags$[esp+20], 2
$LN3@lCanMoveOr:

; 646  : 	}
; 647  : 	if(bDestination)

	test	al, al
	je	SHORT $LN2@lCanMoveOr

; 648  : 	{
; 649  : 		bMoveFlags |= CvUnit::MOVEFLAG_DESTINATION;

	or	BYTE PTR _bMoveFlags$[esp+20], 4
$LN2@lCanMoveOr:

; 650  : 	}
; 651  : 
; 652  : 	bool bResult = false;
; 653  : 	if(pkPlot)

	test	edi, edi
	je	SHORT $LN1@lCanMoveOr

; 654  : 	{
; 655  : 		pkUnit->canMoveOrAttackInto(*pkPlot, bMoveFlags);

	mov	eax, DWORD PTR _bMoveFlags$[esp+20]
	mov	ecx, DWORD PTR _pkInstance$225400[esp+20]
	push	eax
	push	edi
	call	?canMoveOrAttackInto@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveOrAttackInto
$LN1@lCanMoveOr:

; 656  : 	}
; 657  : 
; 658  : 	lua_pushboolean(L, bResult);

	push	0
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi

; 659  : 	return 1;

	mov	eax, 1
	pop	ebx

; 660  : }

	add	esp, 8
	ret	0
?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanMoveOrAttackInto
_TEXT	ENDS
PUBLIC	?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanMoveThrough
EXTRN	?canMoveThrough@CvUnit@@QBE_NABVCvPlot@@E@Z:PROC ; CvUnit::canMoveThrough
; Function compile flags: /Ogtpy
;	COMDAT ?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225431 = -4					; size = 4
_L$ = 8							; size = 4
?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanMoveThrough, COMDAT

; 664  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 665  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225431[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lCanMoveTh
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lCanMoveTh
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225431[esp+20], eax
	test	eax, eax
	je	SHORT $LN6@lCanMoveTh
	xor	bl, bl
$LN6@lCanMoveTh:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lCanMoveTh
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lCanMoveTh:

; 666  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lCanMoveTh
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lCanMoveTh
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lCanMoveTh
	xor	bl, bl
$LN15@lCanMoveTh:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN14@lCanMoveTh
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lCanMoveTh:

; 667  : 	bool bResult = false;

	xor	al, al

; 668  : 	if(pkPlot)

	test	edi, edi
	je	SHORT $LN1@lCanMoveTh

; 669  : 	{
; 670  : 		bResult = pkUnit->canMoveThrough(*pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225431[esp+20]
	push	0
	push	edi
	call	?canMoveThrough@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveThrough
$LN1@lCanMoveTh:

; 671  : 	}
; 672  : 
; 673  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 674  : 	return 1;

	mov	eax, 1
	pop	ebx

; 675  : }

	pop	ecx
	ret	0
?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanMoveThrough
_TEXT	ENDS
PUBLIC	?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lJumpToNearestValidPlot
EXTRN	?jumpToNearestValidPlot@CvUnit@@QAE_NXZ:PROC	; CvUnit::jumpToNearestValidPlot
; Function compile flags: /Ogtpy
;	COMDAT ?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lJumpToNearestValidPlot, COMDAT

; 679  : {

	push	ebx
	push	ebp
	push	esi

; 680  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lJumpToNea
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lJumpToNea
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lJumpToNea
	xor	bl, bl
$LN5@lJumpToNea:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lJumpToNea
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lJumpToNea:

; 681  : 
; 682  : 	bool bResult = pkUnit->jumpToNearestValidPlot();

	mov	ecx, edi
	call	?jumpToNearestValidPlot@CvUnit@@QAE_NXZ	; CvUnit::jumpToNearestValidPlot

; 683  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 684  : 	return 1;

	mov	eax, 1
	pop	ebx

; 685  : }

	ret	0
?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lJumpToNearestValidPlot
_TEXT	ENDS
PUBLIC	?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatDamage
EXTRN	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z:PROC	; CvUnit::getCombatDamage
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bDefenderIsCity$ = -16					; size = 1
_bAttackerIsCity$ = -12					; size = 1
_bIncludeRand$ = -8					; size = 1
_iCurrentDamage$ = -4					; size = 4
_L$ = 8							; size = 4
?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCombatDamage, COMDAT

; 689  : {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi

; 690  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+24]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetCombat
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetCombat
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetCombat
	xor	bl, bl
$LN5@lGetCombat:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetCombat
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetCombat:

; 691  : 	const int iStrength = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 692  : 	const int iOpponentStrength = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 693  : 	const int iCurrentDamage = lua_tointeger(L, 4);

	push	4
	push	esi
	mov	ebp, eax
	call	_lua_tointeger

; 694  : 	const bool bIncludeRand = lua_toboolean(L, 5);

	push	5
	push	esi
	mov	DWORD PTR _iCurrentDamage$[esp+64], eax
	call	_lua_toboolean
	test	eax, eax
	setne	al

; 695  : 	const bool bAttackerIsCity = lua_toboolean(L, 6);

	push	6
	push	esi
	mov	BYTE PTR _bIncludeRand$[esp+72], al
	call	_lua_toboolean
	test	eax, eax
	setne	cl

; 696  : 	const bool bDefenderIsCity = lua_toboolean(L, 7);

	push	7
	push	esi
	mov	BYTE PTR _bAttackerIsCity$[esp+80], cl
	call	_lua_toboolean

; 697  : 
; 698  : 	const int iResult = pkUnit->getCombatDamage(iStrength, iOpponentStrength, iCurrentDamage, bIncludeRand, bAttackerIsCity, bDefenderIsCity);

	mov	ecx, DWORD PTR _bAttackerIsCity$[esp+80]
	add	esp, 48					; 00000030H
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bDefenderIsCity$[esp+32], dl
	mov	eax, DWORD PTR _bDefenderIsCity$[esp+32]
	mov	edx, DWORD PTR _bIncludeRand$[esp+32]
	push	eax
	mov	eax, DWORD PTR _iCurrentDamage$[esp+36]
	push	ecx
	push	edx
	push	eax
	push	ebp
	push	ebx
	mov	ecx, edi
	call	?getCombatDamage@CvUnit@@QBEHHHH_N00@Z	; CvUnit::getCombatDamage

; 699  : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 700  : 
; 701  : 	return 1;

	mov	eax, 1
	pop	ebx

; 702  : }

	add	esp, 16					; 00000010H
	ret	0
?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCombatDamage
_TEXT	ENDS
PUBLIC	?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAutomate
EXTRN	?CanAutomate@CvUnit@@QBE_NW4AutomateTypes@@_N@Z:PROC ; CvUnit::CanAutomate
; Function compile flags: /Ogtpy
;	COMDAT ?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAutomate, COMDAT

; 720  : {

	push	ebx
	push	ebp
	push	esi

; 721  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanAutoma
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanAutoma
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanAutoma
	xor	bl, bl
$LN5@lCanAutoma:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanAutoma
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanAutoma:

; 722  : 	const AutomateTypes eAutomate = (AutomateTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 723  : 	const bool bResult = pkUnit->CanAutomate(eAutomate);

	push	0
	push	eax
	mov	ecx, edi
	call	?CanAutomate@CvUnit@@QBE_NW4AutomateTypes@@_N@Z ; CvUnit::CanAutomate

; 724  : 
; 725  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 726  : 	return 1;

	mov	eax, 1
	pop	ebx

; 727  : }

	ret	0
?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAutomate
_TEXT	ENDS
PUBLIC	?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanRebaseAt
EXTRN	?canRebaseAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z:PROC	; CvUnit::canRebaseAt
; Function compile flags: /Ogtpy
;	COMDAT ?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225518 = -4					; size = 4
_L$ = 8							; size = 4
?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanRebaseAt, COMDAT

; 731  : {

	push	ecx
	push	ebx
	push	esi

; 732  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225518[esp+28], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanRebase
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanRebase
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225518[esp+16], eax
	test	eax, eax
	je	SHORT $LN5@lCanRebase
	xor	bl, bl
$LN5@lCanRebase:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanRebase
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanRebase:
	push	ebp

; 733  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanRebase
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanRebase
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanRebase
	xor	bl, bl
$LN14@lCanRebase:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	pop	ebp
	test	bl, bl
	je	SHORT $LN13@lCanRebase
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanRebase:

; 734  : 	const int iX = lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 735  : 	const int iY = lua_tointeger(L, 4);

	push	4
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 736  : 	const bool bResult = pkUnit->canRebaseAt(pkPlot,iX,iY);

	mov	ecx, DWORD PTR _pkInstance$225518[esp+32]
	add	esp, 16					; 00000010H
	push	eax
	push	ebx
	push	edi
	call	?canRebaseAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z ; CvUnit::canRebaseAt

; 737  : 
; 738  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi

; 739  : 	return 1;

	mov	eax, 1
	pop	ebx

; 740  : }

	pop	ecx
	ret	0
?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanRebaseAt
_TEXT	ENDS
PUBLIC	?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanScrap
EXTRN	?canScrap@CvUnit@@QBE_N_N@Z:PROC		; CvUnit::canScrap
; Function compile flags: /Ogtpy
;	COMDAT ?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanScrap, COMDAT

; 744  : {

	push	ebx
	push	ebp
	push	esi

; 745  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanScrap
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanScrap
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanScrap
	xor	bl, bl
$LN5@lCanScrap:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanScrap
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanScrap:

; 746  : 	const bool bResult = pkUnit->canScrap();

	push	0
	mov	ecx, edi
	call	?canScrap@CvUnit@@QBE_N_N@Z		; CvUnit::canScrap

; 747  : 
; 748  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 749  : 	return 1;

	mov	eax, 1
	pop	ebx

; 750  : }

	ret	0
?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanScrap
_TEXT	ENDS
PUBLIC	?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetScrapGold
EXTRN	?GetScrapGold@CvUnit@@QBEHXZ:PROC		; CvUnit::GetScrapGold
; Function compile flags: /Ogtpy
;	COMDAT ?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetScrapGold, COMDAT

; 754  : {

	push	ebx
	push	ebp
	push	esi

; 755  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetScrapG
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetScrapG
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetScrapG
	xor	bl, bl
$LN5@lGetScrapG:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetScrapG
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetScrapG:

; 756  : 	const int iResult = pkUnit->GetScrapGold();

	mov	ecx, edi
	call	?GetScrapGold@CvUnit@@QBEHXZ		; CvUnit::GetScrapGold

; 757  : 
; 758  : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 759  : 	return 1;

	mov	eax, 1
	pop	ebx

; 760  : }

	ret	0
?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetScrapGold
_TEXT	ENDS
PUBLIC	?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanGift
EXTRN	?canGift@CvUnit@@QBE_N_N0@Z:PROC		; CvUnit::canGift
; Function compile flags: /Ogtpy
;	COMDAT ?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bTestTransport$ = -8					; size = 1
_bTestVisible$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanGift, COMDAT

; 764  : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 765  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanGift
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanGift
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanGift
	xor	bl, bl
$LN5@lCanGift:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanGift
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanGift:

; 766  : 	const bool bTestVisible = luaL_optint(L, 2, 0);

	push	0
	push	2
	push	esi
	call	_luaL_optinteger

; 767  : 	const bool bTestTransport = luaL_optint(L, 3, 0);

	push	0
	test	eax, eax
	setne	al
	push	3
	push	esi
	mov	BYTE PTR _bTestVisible$[esp+48], al
	call	_luaL_optinteger
	add	esp, 24					; 00000018H
	test	eax, eax

; 768  : 	const bool bResult = pkUnit->canGift(bTestVisible, bTestTransport);

	mov	eax, DWORD PTR _bTestVisible$[esp+24]
	setne	cl
	mov	BYTE PTR _bTestTransport$[esp+24], cl
	mov	edx, DWORD PTR _bTestTransport$[esp+24]
	push	edx
	push	eax
	mov	ecx, edi
	call	?canGift@CvUnit@@QBE_N_N0@Z		; CvUnit::canGift

; 769  : 
; 770  : 	lua_pushboolean(L, bResult);

	movzx	ecx, al
	push	ecx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 771  : 	return 1;

	mov	eax, 1
	pop	ebx

; 772  : }

	add	esp, 8
	ret	0
?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanGift
_TEXT	ENDS
PUBLIC	?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDistanceGift
EXTRN	?CanDistanceGift@CvUnit@@QBE_NW4PlayerTypes@@@Z:PROC ; CvUnit::CanDistanceGift
; Function compile flags: /Ogtpy
;	COMDAT ?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDistanceGift, COMDAT

; 776  : {

	push	ebx
	push	ebp
	push	esi

; 777  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanDistan
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanDistan
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanDistan
	xor	bl, bl
$LN5@lCanDistan:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanDistan
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanDistan:

; 778  : 	const PlayerTypes eToPlayer = (PlayerTypes) lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 779  : 	const bool bResult = pkUnit->CanDistanceGift(eToPlayer);

	push	eax
	mov	ecx, edi
	call	?CanDistanceGift@CvUnit@@QBE_NW4PlayerTypes@@@Z ; CvUnit::CanDistanceGift

; 780  : 
; 781  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 782  : 	return 1;

	mov	eax, 1
	pop	ebx

; 783  : }

	ret	0
?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDistanceGift
_TEXT	ENDS
PUBLIC	?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanLoadUnit
EXTRN	?canLoadUnit@CvUnit@@QBE_NABV1@ABVCvPlot@@@Z:PROC ; CvUnit::canLoadUnit
; Function compile flags: /Ogtpy
;	COMDAT ?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225624 = -8					; size = 4
_pkInstance$225640 = -4					; size = 4
_L$ = 8							; size = 4
?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanLoadUnit, COMDAT

; 787  : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 788  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	xor	ebp, ebp
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225624[esp+36], ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN29@lCanLoadUn
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN29@lCanLoadUn
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225624[esp+24], eax
	cmp	eax, ebp
	je	SHORT $LN29@lCanLoadUn
	xor	bl, bl
$LN29@lCanLoadUn:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lCanLoadUn
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lCanLoadUn:

; 789  : 	CvUnit* pkLoadUnit = GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225640[esp+36], ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lCanLoadUn
	push	OFFSET $SG224203
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lCanLoadUn
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225640[esp+24], eax
	cmp	eax, ebp
	je	SHORT $LN15@lCanLoadUn
	xor	bl, bl
$LN15@lCanLoadUn:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN20@lCanLoadUn
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN20@lCanLoadUn:

; 790  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 3);

	push	esi
	call	_lua_gettop
	push	3
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN24@lCanLoadUn
	push	OFFSET $SG224163
	push	3
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN24@lCanLoadUn
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN24@lCanLoadUn
	xor	bl, bl
$LN24@lCanLoadUn:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN23@lCanLoadUn
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN23@lCanLoadUn:

; 791  : 	bool bResult = false;

	xor	al, al

; 792  : 	if(pkPlot && pkUnit)

	test	edi, edi
	je	SHORT $LN1@lCanLoadUn
	mov	ecx, DWORD PTR _pkInstance$225624[esp+24]
	test	ecx, ecx
	je	SHORT $LN1@lCanLoadUn

; 793  : 	{
; 794  : 		bResult = pkUnit->canLoadUnit(*pkLoadUnit, *pkPlot);

	mov	eax, DWORD PTR _pkInstance$225640[esp+24]
	push	edi
	push	eax
	call	?canLoadUnit@CvUnit@@QBE_NABV1@ABVCvPlot@@@Z ; CvUnit::canLoadUnit
$LN1@lCanLoadUn:

; 795  : 	}
; 796  : 
; 797  : 	lua_pushboolean(L, bResult);

	movzx	ecx, al
	push	ecx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 798  : 	return 1;

	mov	eax, 1
	pop	ebx

; 799  : }

	add	esp, 8
	ret	0
?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanLoadUnit
_TEXT	ENDS
PUBLIC	?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanLoad
EXTRN	?canLoad@CvUnit@@QBE_NABVCvPlot@@@Z:PROC	; CvUnit::canLoad
; Function compile flags: /Ogtpy
;	COMDAT ?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225671 = -4					; size = 4
_L$ = 8							; size = 4
?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanLoad, COMDAT

; 803  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 804  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225671[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lCanLoad
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lCanLoad
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225671[esp+20], eax
	test	eax, eax
	je	SHORT $LN6@lCanLoad
	xor	bl, bl
$LN6@lCanLoad:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lCanLoad
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lCanLoad:

; 805  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lCanLoad
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lCanLoad
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lCanLoad
	xor	bl, bl
$LN15@lCanLoad:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN14@lCanLoad
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lCanLoad:

; 806  : 
; 807  : 	bool bResult = false;

	xor	al, al

; 808  : 	if(pkPlot)

	test	edi, edi
	je	SHORT $LN1@lCanLoad

; 809  : 	{
; 810  : 		bResult = pkUnit->canLoad(*pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225671[esp+20]
	push	edi
	call	?canLoad@CvUnit@@QBE_NABVCvPlot@@@Z	; CvUnit::canLoad
$LN1@lCanLoad:

; 811  : 	}
; 812  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 813  : 	return 1;

	mov	eax, 1
	pop	ebx

; 814  : }

	pop	ecx
	ret	0
?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanLoad
_TEXT	ENDS
PUBLIC	?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanUnload
EXTRN	?canUnload@CvUnit@@QBE_NXZ:PROC			; CvUnit::canUnload
; Function compile flags: /Ogtpy
;	COMDAT ?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanUnload, COMDAT

; 818  : {

	push	ebx
	push	ebp
	push	esi

; 819  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanUnload
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanUnload
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanUnload
	xor	bl, bl
$LN5@lCanUnload:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanUnload
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanUnload:

; 820  : 	const bool bResult = pkUnit->canUnload();

	mov	ecx, edi
	call	?canUnload@CvUnit@@QBE_NXZ		; CvUnit::canUnload

; 821  : 
; 822  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 823  : 	return 1;

	mov	eax, 1
	pop	ebx

; 824  : }

	ret	0
?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanUnload
_TEXT	ENDS
PUBLIC	?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanUnloadAll
EXTRN	?canUnloadAll@CvUnit@@QBE_NXZ:PROC		; CvUnit::canUnloadAll
; Function compile flags: /Ogtpy
;	COMDAT ?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanUnloadAll, COMDAT

; 828  : {

	push	ebx
	push	ebp
	push	esi

; 829  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanUnload@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanUnload@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanUnload@2
	xor	bl, bl
$LN5@lCanUnload@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanUnload@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanUnload@2:

; 830  : 	const bool bResult = pkUnit->canUnloadAll();

	mov	ecx, edi
	call	?canUnloadAll@CvUnit@@QBE_NXZ		; CvUnit::canUnloadAll

; 831  : 
; 832  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 833  : 	return 1;

	mov	eax, 1
	pop	ebx

; 834  : }

	ret	0
?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanUnloadAll
_TEXT	ENDS
PUBLIC	?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanHold
EXTRN	?canHold@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canHold
; Function compile flags: /Ogtpy
;	COMDAT ?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225739 = -4					; size = 4
_L$ = 8							; size = 4
?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanHold, COMDAT

; 838  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 839  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225739[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanHold@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanHold@2
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225739[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanHold@2
	xor	bl, bl
$LN5@lCanHold@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanHold@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanHold@2:

; 840  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanHold@2
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanHold@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanHold@2
	xor	bl, bl
$LN14@lCanHold@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanHold@2
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanHold@2:

; 841  : 	const bool bResult = pkUnit->canHold(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225739[esp+20]
	push	edi
	call	?canHold@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canHold

; 842  : 
; 843  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 844  : 	return 1;

	mov	eax, 1
	pop	ebx

; 845  : }

	pop	ecx
	ret	0
?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanHold
_TEXT	ENDS
PUBLIC	?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanSleep
EXTRN	?canSleep@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canSleep
; Function compile flags: /Ogtpy
;	COMDAT ?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225769 = -4					; size = 4
_L$ = 8							; size = 4
?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanSleep, COMDAT

; 849  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 850  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225769[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanSleep
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanSleep
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225769[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanSleep
	xor	bl, bl
$LN5@lCanSleep:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanSleep
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanSleep:

; 851  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanSleep
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanSleep
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanSleep
	xor	bl, bl
$LN14@lCanSleep:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanSleep
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanSleep:

; 852  : 	const bool bResult = pkUnit->canSleep(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225769[esp+20]
	push	edi
	call	?canSleep@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canSleep

; 853  : 
; 854  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 855  : 	return 1;

	mov	eax, 1
	pop	ebx

; 856  : }

	pop	ecx
	ret	0
?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanSleep
_TEXT	ENDS
PUBLIC	?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanFortify
EXTRN	?canFortify@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canFortify
; Function compile flags: /Ogtpy
;	COMDAT ?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225799 = -4					; size = 4
_L$ = 8							; size = 4
?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanFortify, COMDAT

; 860  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 861  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225799[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanFortif
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanFortif
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225799[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanFortif
	xor	bl, bl
$LN5@lCanFortif:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanFortif
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanFortif:

; 862  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanFortif
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanFortif
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanFortif
	xor	bl, bl
$LN14@lCanFortif:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanFortif
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanFortif:

; 863  : 	const bool bResult = pkUnit->canFortify(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225799[esp+20]
	push	edi
	call	?canFortify@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canFortify

; 864  : 
; 865  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 866  : 	return 1;

	mov	eax, 1
	pop	ebx

; 867  : }

	pop	ecx
	ret	0
?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanFortify
_TEXT	ENDS
PUBLIC	?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirPatrol
EXTRN	?canAirPatrol@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canAirPatrol
; Function compile flags: /Ogtpy
;	COMDAT ?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225829 = -4					; size = 4
_L$ = 8							; size = 4
?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirPatrol, COMDAT

; 871  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 872  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225829[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanAirPat
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanAirPat
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225829[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanAirPat
	xor	bl, bl
$LN5@lCanAirPat:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanAirPat
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanAirPat:

; 873  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanAirPat
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanAirPat
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanAirPat
	xor	bl, bl
$LN14@lCanAirPat:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanAirPat
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanAirPat:

; 874  : 	const bool bResult = pkUnit->canAirPatrol(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225829[esp+20]
	push	edi
	call	?canAirPatrol@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canAirPatrol

; 875  : 
; 876  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 877  : 	return 1;

	mov	eax, 1
	pop	ebx

; 878  : }

	pop	ecx
	ret	0
?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirPatrol
_TEXT	ENDS
PUBLIC	?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetEmbarked
EXTRN	?setEmbarked@CvUnit@@QAEX_N@Z:PROC		; CvUnit::setEmbarked
; Function compile flags: /Ogtpy
;	COMDAT ?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bNewValue$ = -4					; size = 1
_L$ = 8							; size = 4
?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetEmbarked, COMDAT

; 892  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 893  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetEmbark
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetEmbark
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetEmbark
	xor	bl, bl
$LN5@lSetEmbark:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetEmbark
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetEmbark:

; 894  : 	const bool bNewValue = lua_toboolean(L, 2);

	push	2
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bNewValue$[esp+20], al

; 895  : 
; 896  : 	pkUnit->setEmbarked(bNewValue);

	mov	ecx, DWORD PTR _bNewValue$[esp+20]
	push	ecx
	mov	ecx, edi
	call	?setEmbarked@CvUnit@@QAEX_N@Z		; CvUnit::setEmbarked
	pop	edi
	pop	esi
	pop	ebp

; 897  : 	return 0;

	xor	eax, eax
	pop	ebx

; 898  : }

	pop	ecx
	ret	0
?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetEmbarked
_TEXT	ENDS
PUBLIC	?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanHeal
EXTRN	?canHeal@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canHeal
; Function compile flags: /Ogtpy
;	COMDAT ?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225878 = -4					; size = 4
_L$ = 8							; size = 4
?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanHeal, COMDAT

; 902  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 903  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225878[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanHeal
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanHeal
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225878[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanHeal
	xor	bl, bl
$LN5@lCanHeal:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanHeal
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanHeal:

; 904  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanHeal
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanHeal
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanHeal
	xor	bl, bl
$LN14@lCanHeal:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanHeal
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanHeal:

; 905  : 	const bool bResult = pkUnit->canHeal(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225878[esp+20]
	push	0
	push	edi
	call	?canHeal@CvUnit@@QBE_NPBVCvPlot@@_N@Z	; CvUnit::canHeal

; 906  : 
; 907  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 908  : 	return 1;

	mov	eax, 1
	pop	ebx

; 909  : }

	pop	ecx
	ret	0
?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanHeal
_TEXT	ENDS
PUBLIC	?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanSentry
EXTRN	?canSentry@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canSentry
; Function compile flags: /Ogtpy
;	COMDAT ?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225908 = -4					; size = 4
_L$ = 8							; size = 4
?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanSentry, COMDAT

; 913  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 914  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225908[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanSentry
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanSentry
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225908[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanSentry
	xor	bl, bl
$LN5@lCanSentry:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanSentry
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanSentry:

; 915  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanSentry
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanSentry
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanSentry
	xor	bl, bl
$LN14@lCanSentry:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanSentry
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanSentry:

; 916  : 	const bool bResult = pkUnit->canSentry(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225908[esp+20]
	push	edi
	call	?canSentry@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canSentry

; 917  : 
; 918  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 919  : 	return 1;

	mov	eax, 1
	pop	ebx

; 920  : }

	pop	ecx
	ret	0
?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanSentry
_TEXT	ENDS
PUBLIC	?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanEmbark
EXTRN	?canEmbark@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canEmbark
; Function compile flags: /Ogtpy
;	COMDAT ?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225938 = -4					; size = 4
_L$ = 8							; size = 4
?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanEmbark, COMDAT

; 924  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 925  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225938[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanEmbark
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanEmbark
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225938[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanEmbark
	xor	bl, bl
$LN5@lCanEmbark:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanEmbark
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanEmbark:

; 926  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanEmbark
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanEmbark
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanEmbark
	xor	bl, bl
$LN14@lCanEmbark:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanEmbark
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanEmbark:

; 927  : 	const bool bResult = pkUnit->canEmbark(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225938[esp+20]
	push	edi
	call	?canEmbark@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canEmbark

; 928  : 
; 929  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 930  : 	return 1;

	mov	eax, 1
	pop	ebx

; 931  : }

	pop	ecx
	ret	0
?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanEmbark
_TEXT	ENDS
PUBLIC	?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanDisembark
EXTRN	?canDisembark@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canDisembark
; Function compile flags: /Ogtpy
;	COMDAT ?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225968 = -4					; size = 4
_L$ = 8							; size = 4
?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDisembark, COMDAT

; 935  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 936  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225968[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanDisemb
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanDisemb
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225968[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanDisemb
	xor	bl, bl
$LN5@lCanDisemb:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanDisemb
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanDisemb:

; 937  : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanDisemb
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanDisemb
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanDisemb
	xor	bl, bl
$LN14@lCanDisemb:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanDisemb
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanDisemb:

; 938  : 	const bool bResult = pkUnit->canDisembark(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$225968[esp+20]
	push	edi
	call	?canDisembark@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canDisembark

; 939  : 
; 940  : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 941  : 	return 1;

	mov	eax, 1
	pop	ebx

; 942  : }

	pop	ecx
	ret	0
?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDisembark
_TEXT	ENDS
PUBLIC	?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanEmbarkOnto
EXTRN	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z:PROC ; CvUnit::canEmbarkOnto
EXTRN	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z:PROC	; luaL_optbool
; Function compile flags: /Ogtpy
;	COMDAT ?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$225998 = -8					; size = 4
_stack_size$226018 = -4					; size = 4
_bIsDestination$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanEmbarkOnto, COMDAT

; 946  : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 947  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	xor	ebp, ebp
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$225998[esp+36], ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN27@lCanEmbark@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN27@lCanEmbark@2
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$225998[esp+24], eax
	cmp	eax, ebp
	je	SHORT $LN27@lCanEmbark@2
	xor	bl, bl
$LN27@lCanEmbark@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lCanEmbark@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lCanEmbark@2:

; 948  : 	CvPlot* pkOriginPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	edi, eax
	mov	bl, 1
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lCanEmbark@2
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lCanEmbark@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	ebp, eax
	add	esp, 8
	test	ebp, ebp
	je	SHORT $LN15@lCanEmbark@2
	xor	bl, bl
$LN15@lCanEmbark@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN14@lCanEmbark@2
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lCanEmbark@2:

; 949  : 	CvPlot* pkTargetPlot = CvLuaPlot::GetInstance(L, 3);

	push	esi
	call	_lua_gettop
	push	3
	push	esi
	mov	DWORD PTR _stack_size$226018[esp+36], eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN22@lCanEmbark@2
	push	OFFSET $SG224163
	push	3
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN22@lCanEmbark@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN22@lCanEmbark@2
	xor	bl, bl
$LN22@lCanEmbark@2:
	mov	eax, DWORD PTR _stack_size$226018[esp+24]
	push	eax
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN21@lCanEmbark@2
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN21@lCanEmbark@2:

; 950  : 	bool bIsDestination = luaL_optbool(L, 4, true);		// Assume Lua is querying for a destination of the embark.  This will cause the test to fail if there is are stacking issues.

	push	1
	push	4
	push	esi
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool
	mov	BYTE PTR _bIsDestination$[esp+36], al
	add	esp, 12					; 0000000cH

; 951  : 	bool bResult = false;

	xor	al, al

; 952  : 	if(pkOriginPlot && pkTargetPlot)

	test	ebp, ebp
	je	SHORT $LN1@lCanEmbark@2
	test	edi, edi
	je	SHORT $LN1@lCanEmbark@2

; 953  : 	{
; 954  : 		bResult = pkUnit->canEmbarkOnto(*pkOriginPlot, *pkTargetPlot, false, bIsDestination);

	mov	ecx, DWORD PTR _bIsDestination$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$225998[esp+28]
	push	0
	push	edi
	push	ebp
	call	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z ; CvUnit::canEmbarkOnto
$LN1@lCanEmbark@2:

; 955  : 	}
; 956  : 
; 957  : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 958  : 	return 1;

	mov	eax, 1
	pop	ebx

; 959  : }

	add	esp, 8
	ret	0
?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanEmbarkOnto
_TEXT	ENDS
PUBLIC	?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDisembarkOnto
EXTRN	?canDisembarkOnto@CvUnit@@QBE_NABVCvPlot@@_N@Z:PROC ; CvUnit::canDisembarkOnto
; Function compile flags: /Ogtpy
;	COMDAT ?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226040 = -8					; size = 4
_bIsDestination$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDisembarkOnto, COMDAT

; 963  : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 964  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226040[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lCanDisemb@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lCanDisemb@2
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226040[esp+24], eax
	test	eax, eax
	je	SHORT $LN6@lCanDisemb@2
	xor	bl, bl
$LN6@lCanDisemb@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lCanDisemb@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lCanDisemb@2:

; 965  : 	CvPlot* pkTargetPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lCanDisemb@2
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lCanDisemb@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lCanDisemb@2
	xor	bl, bl
$LN15@lCanDisemb@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN14@lCanDisemb@2
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lCanDisemb@2:

; 966  : 	bool bIsDestination = luaL_optbool(L, 3, true);		// Assume Lua is querying for a destination of the dis-embark.  This will cause the test to fail if there is are stacking issues.

	push	1
	push	3
	push	esi
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool
	mov	BYTE PTR _bIsDestination$[esp+36], al
	add	esp, 12					; 0000000cH

; 967  : 
; 968  : 	bool bResult = false;

	xor	al, al

; 969  : 	if(pkTargetPlot)

	test	edi, edi
	je	SHORT $LN1@lCanDisemb@2

; 970  : 	{
; 971  : 		bResult = pkUnit->canDisembarkOnto(*pkTargetPlot, bIsDestination);	

	mov	eax, DWORD PTR _bIsDestination$[esp+24]
	mov	ecx, DWORD PTR _pkInstance$226040[esp+24]
	push	eax
	push	edi
	call	?canDisembarkOnto@CvUnit@@QBE_NABVCvPlot@@_N@Z ; CvUnit::canDisembarkOnto
$LN1@lCanDisemb@2:

; 972  : 	}
; 973  : 
; 974  : 	lua_pushboolean(L, bResult);

	movzx	ecx, al
	push	ecx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 975  : 	return 1;

	mov	eax, 1
	pop	ebx

; 976  : }

	add	esp, 8
	ret	0
?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDisembarkOnto
_TEXT	ENDS
PUBLIC	?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangeAttackIgnoreLOS
EXTRN	?IsRangeAttackIgnoreLOS@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsRangeAttackIgnoreLOS
; Function compile flags: /Ogtpy
;	COMDAT ?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsRangeAttackIgnoreLOS, COMDAT

; 1007 : 	return BasicLuaMethod(L, &CvUnit::IsRangeAttackIgnoreLOS);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?IsRangeAttackIgnoreLOS@CvUnit@@QBE_NXZ ; CvUnit::IsRangeAttackIgnoreLOS
	push	eax
	call	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
	add	esp, 8

; 1008 : }

	ret	0
?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsRangeAttackIgnoreLOS
_TEXT	ENDS
PUBLIC	?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirlift
EXTRN	?canAirlift@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canAirlift
; Function compile flags: /Ogtpy
;	COMDAT ?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226073 = -4					; size = 4
_L$ = 8							; size = 4
?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirlift, COMDAT

; 1012 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1013 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226073[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanAirlif
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanAirlif
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226073[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanAirlif
	xor	bl, bl
$LN5@lCanAirlif:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanAirlif
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanAirlif:

; 1014 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanAirlif
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanAirlif
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanAirlif
	xor	bl, bl
$LN14@lCanAirlif:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanAirlif
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanAirlif:

; 1015 : 	const bool bResult = pkUnit->canAirlift(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226073[esp+20]
	push	edi
	call	?canAirlift@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canAirlift

; 1016 : 
; 1017 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1018 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1019 : }

	pop	ecx
	ret	0
?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirlift
_TEXT	ENDS
PUBLIC	?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirliftAt
EXTRN	?canAirliftAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z:PROC	; CvUnit::canAirliftAt
; Function compile flags: /Ogtpy
;	COMDAT ?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226103 = -4					; size = 4
_L$ = 8							; size = 4
?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirliftAt, COMDAT

; 1023 : {

	push	ecx
	push	ebx
	push	esi

; 1024 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226103[esp+28], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanAirlif@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanAirlif@2
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226103[esp+16], eax
	test	eax, eax
	je	SHORT $LN5@lCanAirlif@2
	xor	bl, bl
$LN5@lCanAirlif@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanAirlif@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanAirlif@2:
	push	ebp

; 1025 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanAirlif@2
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanAirlif@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanAirlif@2
	xor	bl, bl
$LN14@lCanAirlif@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	pop	ebp
	test	bl, bl
	je	SHORT $LN13@lCanAirlif@2
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanAirlif@2:

; 1026 : 	const int x = lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 1027 : 	const int y = lua_tointeger(L, 4);

	push	4
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 1028 : 	const bool bResult = pkUnit->canAirliftAt(pkPlot, x, y);

	mov	ecx, DWORD PTR _pkInstance$226103[esp+32]
	add	esp, 16					; 00000010H
	push	eax
	push	ebx
	push	edi
	call	?canAirliftAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z ; CvUnit::canAirliftAt

; 1029 : 
; 1030 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi

; 1031 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1032 : }

	pop	ecx
	ret	0
?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirliftAt
_TEXT	ENDS
PUBLIC	?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNukeVictim
EXTRN	?isNukeVictim@CvUnit@@QBE_NPBVCvPlot@@W4TeamTypes@@@Z:PROC ; CvUnit::isNukeVictim
; Function compile flags: /Ogtpy
;	COMDAT ?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226133 = -4					; size = 4
_L$ = 8							; size = 4
?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNukeVictim, COMDAT

; 1036 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1037 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226133[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNukeVic
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNukeVic
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226133[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lIsNukeVic
	xor	bl, bl
$LN5@lIsNukeVic:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNukeVic
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsNukeVic:

; 1038 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lIsNukeVic
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lIsNukeVic
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lIsNukeVic
	xor	bl, bl
$LN14@lIsNukeVic:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lIsNukeVic
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lIsNukeVic:

; 1039 : 	const TeamTypes eTeam = (TeamTypes)lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 1040 : 	const bool bResult = pkUnit->isNukeVictim(pkPlot, eTeam);

	mov	ecx, DWORD PTR _pkInstance$226133[esp+28]
	add	esp, 8
	push	eax
	push	edi
	call	?isNukeVictim@CvUnit@@QBE_NPBVCvPlot@@W4TeamTypes@@@Z ; CvUnit::isNukeVictim

; 1041 : 
; 1042 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1043 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1044 : }

	pop	ecx
	ret	0
?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNukeVictim
_TEXT	ENDS
PUBLIC	?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanNuke
EXTRN	?canNuke@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canNuke
EXTRN	?plot@CvUnit@@QBEPAVCvPlot@@XZ:PROC		; CvUnit::plot
; Function compile flags: /Ogtpy
;	COMDAT ?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanNuke, COMDAT

; 1048 : {

	push	ebx
	push	ebp
	push	esi

; 1049 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanNuke
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanNuke
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanNuke
	xor	bl, bl
$LN5@lCanNuke:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanNuke
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanNuke:

; 1050 : 	const bool bResult = pkUnit->canNuke(pkUnit->plot());

	mov	ecx, edi
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	ecx, edi
	call	?canNuke@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canNuke

; 1051 : 
; 1052 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1053 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1054 : }

	ret	0
?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanNuke
_TEXT	ENDS
PUBLIC	?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanNukeAt
EXTRN	?canNukeAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z:PROC	; CvUnit::canNukeAt
; Function compile flags: /Ogtpy
;	COMDAT ?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanNukeAt, COMDAT

; 1058 : {

	push	ebx
	push	ebp
	push	esi

; 1059 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanNukeAt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanNukeAt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanNukeAt
	xor	bl, bl
$LN5@lCanNukeAt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanNukeAt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanNukeAt:

; 1060 : 	const int x = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 1061 : 	const int y = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger
	add	esp, 16					; 00000010H

; 1062 : 	const bool bResult = pkUnit->canNukeAt(pkUnit->plot(), x, y);

	push	eax
	push	ebx
	mov	ecx, edi
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	mov	ecx, edi
	call	?canNukeAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z	; CvUnit::canNukeAt

; 1063 : 
; 1064 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1065 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1066 : }

	ret	0
?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanNukeAt
_TEXT	ENDS
PUBLIC	?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanRangeStrike
EXTRN	?canRangeStrike@CvUnit@@QBE_NXZ:PROC		; CvUnit::canRangeStrike
; Function compile flags: /Ogtpy
;	COMDAT ?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanRangeStrike, COMDAT

; 1071 : 	return BasicLuaMethod(L, &CvUnit::canRangeStrike);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?canRangeStrike@CvUnit@@QBE_NXZ	; CvUnit::canRangeStrike
	push	eax
	call	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
	add	esp, 8

; 1072 : }

	ret	0
?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanRangeStrike
_TEXT	ENDS
PUBLIC	?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRangeStrikeAt
EXTRN	?canRangeStrikeAt@CvUnit@@QBE_NHH_N0@Z:PROC	; CvUnit::canRangeStrikeAt
; Function compile flags: /Ogtpy
;	COMDAT ?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bNoncombatAllowed$ = -8				; size = 1
_bNeedsWar$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanRangeStrikeAt, COMDAT

; 1076 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 1077 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanRangeS
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanRangeS
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanRangeS
	xor	bl, bl
$LN5@lCanRangeS:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanRangeS
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanRangeS:

; 1078 : 	const int x = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 1079 : 	const int y = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 1080 : 	const bool bNeedsWar = luaL_optbool(L, 4, true);

	push	1
	push	4
	push	esi
	mov	ebp, eax
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool

; 1081 : 	const bool bNoncombatAllowed = luaL_optbool(L, 5, true);

	push	1
	push	5
	push	esi
	mov	BYTE PTR _bNeedsWar$[esp+64], al
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool

; 1082 : 
; 1083 : 	const bool bResult = pkUnit->canRangeStrikeAt(x, y, bNeedsWar, bNoncombatAllowed);

	mov	ecx, DWORD PTR _bNeedsWar$[esp+64]
	add	esp, 40					; 00000028H
	mov	BYTE PTR _bNoncombatAllowed$[esp+24], al
	mov	eax, DWORD PTR _bNoncombatAllowed$[esp+24]
	push	eax
	push	ecx
	push	ebp
	push	ebx
	mov	ecx, edi
	call	?canRangeStrikeAt@CvUnit@@QBE_NHH_N0@Z	; CvUnit::canRangeStrikeAt

; 1084 : 
; 1085 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1086 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1087 : 
; 1088 : 	//return BasicLuaMethod(L, &CvUnit::canRangeStrikeAt);
; 1089 : }

	add	esp, 8
	ret	0
?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanRangeStrikeAt
_TEXT	ENDS
PUBLIC	?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanParadrop
EXTRN	?canParadrop@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canParadrop
; Function compile flags: /Ogtpy
;	COMDAT ?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226223 = -8					; size = 4
_bTestVisibility$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanParadrop, COMDAT

; 1121 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 1122 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226223[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanParadr
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanParadr
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226223[esp+24], eax
	test	eax, eax
	je	SHORT $LN5@lCanParadr
	xor	bl, bl
$LN5@lCanParadr:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanParadr
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanParadr:

; 1123 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanParadr
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanParadr
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanParadr
	xor	bl, bl
$LN14@lCanParadr:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanParadr
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanParadr:

; 1124 : 	bool bTestVisibility = lua_toboolean(L, 3);

	push	3
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisibility$[esp+24], al

; 1125 : 	const bool bResult = pkUnit->canParadrop(pkPlot, bTestVisibility);

	mov	ecx, DWORD PTR _bTestVisibility$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$226223[esp+28]
	push	edi
	call	?canParadrop@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canParadrop

; 1126 : 
; 1127 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1128 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1129 : }

	add	esp, 8
	ret	0
?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanParadrop
_TEXT	ENDS
PUBLIC	?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanParadropAt
EXTRN	?canParadropAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z:PROC ; CvUnit::canParadropAt
; Function compile flags: /Ogtpy
;	COMDAT ?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226253 = -4					; size = 4
_L$ = 8							; size = 4
?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanParadropAt, COMDAT

; 1133 : {

	push	ecx
	push	ebx
	push	esi

; 1134 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226253[esp+28], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanParadr@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanParadr@2
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226253[esp+16], eax
	test	eax, eax
	je	SHORT $LN5@lCanParadr@2
	xor	bl, bl
$LN5@lCanParadr@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanParadr@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanParadr@2:
	push	ebp

; 1135 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanParadr@2
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanParadr@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanParadr@2
	xor	bl, bl
$LN14@lCanParadr@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	pop	ebp
	test	bl, bl
	je	SHORT $LN13@lCanParadr@2
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanParadr@2:

; 1136 : 	const int x = lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 1137 : 	const int y = lua_tointeger(L, 4);

	push	4
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 1138 : 	const bool bResult = pkUnit->canParadropAt(pkPlot, x, y);

	mov	ecx, DWORD PTR _pkInstance$226253[esp+32]
	add	esp, 16					; 00000010H
	push	eax
	push	ebx
	push	edi
	call	?canParadropAt@CvUnit@@QBE_NPBVCvPlot@@HH@Z ; CvUnit::canParadropAt

; 1139 : 
; 1140 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi

; 1141 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1142 : }

	pop	ecx
	ret	0
?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanParadropAt
_TEXT	ENDS
PUBLIC	?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMakeTradeRoute
EXTRN	?canMakeTradeRoute@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC ; CvUnit::canMakeTradeRoute
; Function compile flags: /Ogtpy
;	COMDAT ?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226280 = -4					; size = 4
_L$ = 8							; size = 4
?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanMakeTradeRoute, COMDAT

; 1146 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1147 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226280[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanMakeTr
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanMakeTr
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226280[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanMakeTr
	xor	bl, bl
$LN5@lCanMakeTr:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanMakeTr
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanMakeTr:

; 1148 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanMakeTr
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanMakeTr
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanMakeTr
	xor	bl, bl
$LN14@lCanMakeTr:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanMakeTr
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanMakeTr:

; 1149 : 	const bool bResult = pkUnit->canMakeTradeRoute(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226280[esp+20]
	push	edi
	call	?canMakeTradeRoute@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canMakeTradeRoute

; 1150 : 
; 1151 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1152 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1153 : }

	pop	ecx
	ret	0
?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanMakeTradeRoute
_TEXT	ENDS
PUBLIC	?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMakeTradeRouteAt
EXTRN	?canMakeTradeRouteAt@CvUnit@@QBE_NPBVCvPlot@@HHW4TradeConnectionType@@@Z:PROC ; CvUnit::canMakeTradeRouteAt
; Function compile flags: /Ogtpy
;	COMDAT ?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226312 = -4					; size = 4
_L$ = 8							; size = 4
?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanMakeTradeRouteAt, COMDAT

; 1157 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1158 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226312[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanMakeTr@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanMakeTr@2
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226312[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanMakeTr@2
	xor	bl, bl
$LN5@lCanMakeTr@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanMakeTr@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanMakeTr@2:

; 1159 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanMakeTr@2
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanMakeTr@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanMakeTr@2
	xor	bl, bl
$LN14@lCanMakeTr@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanMakeTr@2
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanMakeTr@2:

; 1160 : 	const int x = lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 1161 : 	const int y = lua_tointeger(L, 4);

	push	4
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 1162 : 	TradeConnectionType eConnection = (TradeConnectionType)lua_tointeger(L, 5);

	push	5
	push	esi
	mov	ebp, eax
	call	_lua_tointeger

; 1163 : 	const bool bResult = pkUnit->canMakeTradeRouteAt(pkPlot, x, y, eConnection);

	mov	ecx, DWORD PTR _pkInstance$226312[esp+44]
	add	esp, 24					; 00000018H
	push	eax
	push	ebp
	push	ebx
	push	edi
	call	?canMakeTradeRouteAt@CvUnit@@QBE_NPBVCvPlot@@HHW4TradeConnectionType@@@Z ; CvUnit::canMakeTradeRouteAt

; 1164 : 
; 1165 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1166 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1167 : }

	pop	ecx
	ret	0
?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanMakeTradeRouteAt
_TEXT	ENDS
PUBLIC	?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExoticGoodsGoldAmount
EXTRN	?getExoticGoodsGoldAmount@CvUnit@@QAEHXZ:PROC	; CvUnit::getExoticGoodsGoldAmount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExoticGoodsGoldAmount, COMDAT

; 1171 : {

	push	ebx
	push	ebp
	push	esi

; 1172 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExotic
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExotic
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExotic
	xor	bl, bl
$LN5@lGetExotic:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExotic
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExotic:

; 1173 : 
; 1174 : 	const int iValue = pkUnit->getExoticGoodsGoldAmount();

	mov	ecx, edi
	call	?getExoticGoodsGoldAmount@CvUnit@@QAEHXZ ; CvUnit::getExoticGoodsGoldAmount

; 1175 : 	lua_pushinteger(L, iValue);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1176 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1177 : }

	ret	0
?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExoticGoodsGoldAmount
_TEXT	ENDS
PUBLIC	?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExoticGoodsXPAmount
EXTRN	?getExoticGoodsXPAmount@CvUnit@@QAEHXZ:PROC	; CvUnit::getExoticGoodsXPAmount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExoticGoodsXPAmount, COMDAT

; 1181 : {

	push	ebx
	push	ebp
	push	esi

; 1182 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExotic@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExotic@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExotic@2
	xor	bl, bl
$LN5@lGetExotic@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExotic@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExotic@2:

; 1183 : 
; 1184 : 	const int iValue = pkUnit->getExoticGoodsXPAmount();

	mov	ecx, edi
	call	?getExoticGoodsXPAmount@CvUnit@@QAEHXZ	; CvUnit::getExoticGoodsXPAmount

; 1185 : 	lua_pushinteger(L, iValue);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1186 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1187 : }

	ret	0
?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExoticGoodsXPAmount
_TEXT	ENDS
PUBLIC	?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanPillage
EXTRN	?canPillage@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canPillage
; Function compile flags: /Ogtpy
;	COMDAT ?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226381 = -4					; size = 4
_L$ = 8							; size = 4
?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanPillage, COMDAT

; 1191 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1192 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226381[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanPillag
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanPillag
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226381[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanPillag
	xor	bl, bl
$LN5@lCanPillag:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanPillag
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanPillag:

; 1193 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanPillag
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanPillag
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanPillag
	xor	bl, bl
$LN14@lCanPillag:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanPillag
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanPillag:

; 1194 : 	const bool bResult = pkUnit->canPillage(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226381[esp+20]
	push	edi
	call	?canPillage@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::canPillage

; 1195 : 
; 1196 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1197 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1198 : }

	pop	ecx
	ret	0
?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanPillage
_TEXT	ENDS
PUBLIC	?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsSelected
EXTRN	?IsSelected@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsSelected
; Function compile flags: /Ogtpy
;	COMDAT ?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsSelected, COMDAT

; 1202 : {

	push	ebx
	push	ebp
	push	esi

; 1203 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsSelecte
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsSelecte
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsSelecte
	xor	bl, bl
$LN5@lIsSelecte:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsSelecte
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsSelecte:

; 1204 : 	const bool bResult = pkUnit->IsSelected();

	mov	ecx, edi
	call	?IsSelected@CvUnit@@QBE_NXZ		; CvUnit::IsSelected

; 1205 : 
; 1206 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1207 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1208 : }

	ret	0
?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsSelected
_TEXT	ENDS
PUBLIC	?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanFound
EXTRN	?canFound@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canFound
; Function compile flags: /Ogtpy
;	COMDAT ?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226430 = -8					; size = 4
_bTestVisible$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanFound, COMDAT

; 1212 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 1213 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226430[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanFound
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanFound
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226430[esp+24], eax
	test	eax, eax
	je	SHORT $LN5@lCanFound
	xor	bl, bl
$LN5@lCanFound:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanFound
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanFound:

; 1214 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanFound
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanFound
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanFound
	xor	bl, bl
$LN14@lCanFound:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanFound
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanFound:

; 1215 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	push	esi
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[esp+24], al

; 1216 : 	const bool bResult = pkUnit->canFound(pkPlot, bTestVisible);

	mov	ecx, DWORD PTR _bTestVisible$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$226430[esp+28]
	push	edi
	call	?canFound@CvUnit@@QBE_NPBVCvPlot@@_N@Z	; CvUnit::canFound

; 1217 : 
; 1218 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1219 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1220 : }

	add	esp, 8
	ret	0
?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanFound
_TEXT	ENDS
PUBLIC	?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanJoin
EXTRN	?canJoin@CvUnit@@QBE_NPBVCvPlot@@W4SpecialistTypes@@@Z:PROC ; CvUnit::canJoin
; Function compile flags: /Ogtpy
;	COMDAT ?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226460 = -4					; size = 4
_L$ = 8							; size = 4
?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanJoin, COMDAT

; 1224 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1225 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226460[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanJoin
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanJoin
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226460[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanJoin
	xor	bl, bl
$LN5@lCanJoin:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanJoin
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanJoin:

; 1226 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanJoin
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanJoin
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanJoin
	xor	bl, bl
$LN14@lCanJoin:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanJoin
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanJoin:

; 1227 : 	const SpecialistTypes eSpecialist = (SpecialistTypes)lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 1228 : 	const bool bResult = pkUnit->canJoin(pkPlot, eSpecialist);

	mov	ecx, DWORD PTR _pkInstance$226460[esp+28]
	add	esp, 8
	push	eax
	push	edi
	call	?canJoin@CvUnit@@QBE_NPBVCvPlot@@W4SpecialistTypes@@@Z ; CvUnit::canJoin

; 1229 : 
; 1230 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1231 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1232 : }

	pop	ecx
	ret	0
?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanJoin
_TEXT	ENDS
PUBLIC	?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanConstruct
EXTRN	?canConstruct@CvUnit@@QBE_NPBVCvPlot@@W4BuildingTypes@@@Z:PROC ; CvUnit::canConstruct
; Function compile flags: /Ogtpy
;	COMDAT ?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226490 = -4					; size = 4
_L$ = 8							; size = 4
?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanConstruct, COMDAT

; 1236 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1237 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226490[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanConstr
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanConstr
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226490[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanConstr
	xor	bl, bl
$LN5@lCanConstr:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanConstr
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanConstr:

; 1238 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanConstr
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanConstr
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanConstr
	xor	bl, bl
$LN14@lCanConstr:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanConstr
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanConstr:

; 1239 : 	const BuildingTypes eBuilding = (BuildingTypes)lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 1240 : 	const bool bResult = pkUnit->canConstruct(pkPlot, eBuilding);

	mov	ecx, DWORD PTR _pkInstance$226490[esp+28]
	add	esp, 8
	push	eax
	push	edi
	call	?canConstruct@CvUnit@@QBE_NPBVCvPlot@@W4BuildingTypes@@@Z ; CvUnit::canConstruct

; 1241 : 
; 1242 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1243 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1244 : }

	pop	ecx
	ret	0
?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanConstruct
_TEXT	ENDS
PUBLIC	?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangeAttackOnlyInDomain
EXTRN	?IsRangeAttackOnlyInDomain@CvUnitEntry@@QBE_NXZ:PROC ; CvUnitEntry::IsRangeAttackOnlyInDomain
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ:PROC	; CvUnit::getUnitType
; Function compile flags: /Ogtpy
;	COMDAT ?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsRangeAttackOnlyInDomain, COMDAT

; 1247 : {

	push	ebx
	push	ebp
	push	esi

; 1248 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lIsRangeAt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lIsRangeAt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lIsRangeAt
	xor	bl, bl
$LN6@lIsRangeAt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lIsRangeAt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lIsRangeAt:

; 1249 : 	CvUnitEntry* pkUnitInfo = GC.getUnitInfo(pkUnit->getUnitType());

	mov	ecx, edi
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo

; 1250 : 
; 1251 : 	if(pkUnitInfo == NULL)

	test	eax, eax
	jne	SHORT $LN1@lIsRangeAt

; 1252 : 	{
; 1253 : 		luaL_error(L, "Could not find unit info (%d) for unit.", pkUnit->getUnitType());

	mov	ecx, edi
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType
	push	eax
	push	OFFSET $SG222140
	push	esi
	call	_luaL_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp

; 1254 : 		return 0;

	xor	eax, eax
	pop	ebx

; 1260 : }

	ret	0
$LN1@lIsRangeAt:

; 1255 : 	}
; 1256 : 
; 1257 : 	const bool bResult = pkUnitInfo->IsRangeAttackOnlyInDomain();

	mov	ecx, eax
	call	?IsRangeAttackOnlyInDomain@CvUnitEntry@@QBE_NXZ ; CvUnitEntry::IsRangeAttackOnlyInDomain

; 1258 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1259 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1260 : }

	ret	0
?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsRangeAttackOnlyInDomain
_TEXT	ENDS
PUBLIC	?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCityAttackOnly
EXTRN	?IsCityAttackOnly@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCityAttackOnly
; Function compile flags: /Ogtpy
;	COMDAT ?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCityAttackOnly, COMDAT

; 1263 : {

	push	ebx
	push	ebp
	push	esi

; 1264 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsCityAtt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsCityAtt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsCityAtt
	xor	bl, bl
$LN5@lIsCityAtt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsCityAtt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsCityAtt:

; 1265 : 	const bool bResult = pkUnit->IsCityAttackOnly();

	mov	ecx, edi
	call	?IsCityAttackOnly@CvUnit@@QBE_NXZ	; CvUnit::IsCityAttackOnly

; 1266 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1267 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1268 : }

	ret	0
?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCityAttackOnly
_TEXT	ENDS
PUBLIC	?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanDiscover
EXTRN	?canDiscover@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canDiscover
; Function compile flags: /Ogtpy
;	COMDAT ?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226558 = -4					; size = 4
_L$ = 8							; size = 4
?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanDiscover, COMDAT

; 1293 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1294 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226558[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanDiscov
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanDiscov
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226558[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanDiscov
	xor	bl, bl
$LN5@lCanDiscov:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanDiscov
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanDiscov:

; 1295 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanDiscov
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanDiscov
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanDiscov
	xor	bl, bl
$LN14@lCanDiscov:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanDiscov
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanDiscov:

; 1296 : 	const bool bResult = pkUnit->canDiscover(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226558[esp+20]
	push	0
	push	edi
	call	?canDiscover@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canDiscover

; 1297 : 
; 1298 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1299 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1300 : }

	pop	ecx
	ret	0
?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanDiscover
_TEXT	ENDS
PUBLIC	?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDiscoverAmount
EXTRN	?getDiscoverAmount@CvUnit@@QAEHXZ:PROC		; CvUnit::getDiscoverAmount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetDiscoverAmount, COMDAT

; 1304 : {

	push	ebx
	push	ebp
	push	esi

; 1305 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetDiscov
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetDiscov
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetDiscov
	xor	bl, bl
$LN5@lGetDiscov:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetDiscov
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetDiscov:

; 1306 : 
; 1307 : 	const int iResult = pkUnit->getDiscoverAmount();

	mov	ecx, edi
	call	?getDiscoverAmount@CvUnit@@QAEHXZ	; CvUnit::getDiscoverAmount

; 1308 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1309 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1310 : }

	ret	0
?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetDiscoverAmount
_TEXT	ENDS
PUBLIC	?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHurryProduction
EXTRN	?getHurryProduction@CvUnit@@QBEHPBVCvPlot@@@Z:PROC ; CvUnit::getHurryProduction
; Function compile flags: /Ogtpy
;	COMDAT ?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226607 = -4					; size = 4
_L$ = 8							; size = 4
?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetHurryProduction, COMDAT

; 1314 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1315 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226607[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetHurryP
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetHurryP
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226607[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lGetHurryP
	xor	bl, bl
$LN5@lGetHurryP:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetHurryP
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetHurryP:

; 1316 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lGetHurryP
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetHurryP
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lGetHurryP
	xor	bl, bl
$LN14@lGetHurryP:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lGetHurryP
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lGetHurryP:

; 1317 : 
; 1318 : 	const int iResult = pkUnit->getHurryProduction(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226607[esp+20]
	push	edi
	call	?getHurryProduction@CvUnit@@QBEHPBVCvPlot@@@Z ; CvUnit::getHurryProduction

; 1319 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1320 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1321 : }

	pop	ecx
	ret	0
?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetHurryProduction
_TEXT	ENDS
PUBLIC	?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetTradeGold
EXTRN	?getTradeGold@CvUnit@@QBEHPBVCvPlot@@@Z:PROC	; CvUnit::getTradeGold
; Function compile flags: /Ogtpy
;	COMDAT ?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226637 = -4					; size = 4
_L$ = 8							; size = 4
?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetTradeGold, COMDAT

; 1325 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1326 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226637[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetTradeG
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetTradeG
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226637[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lGetTradeG
	xor	bl, bl
$LN5@lGetTradeG:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetTradeG
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetTradeG:

; 1327 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lGetTradeG
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetTradeG
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lGetTradeG
	xor	bl, bl
$LN14@lGetTradeG:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lGetTradeG
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lGetTradeG:

; 1328 : 
; 1329 : 	const int iResult = pkUnit->getTradeGold(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226637[esp+20]
	push	edi
	call	?getTradeGold@CvUnit@@QBEHPBVCvPlot@@@Z	; CvUnit::getTradeGold

; 1330 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1331 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1332 : }

	pop	ecx
	ret	0
?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetTradeGold
_TEXT	ENDS
PUBLIC	?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTradeInfluence
EXTRN	?getTradeInfluence@CvUnit@@QBEHPBVCvPlot@@@Z:PROC ; CvUnit::getTradeInfluence
; Function compile flags: /Ogtpy
;	COMDAT ?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226667 = -4					; size = 4
_L$ = 8							; size = 4
?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetTradeInfluence, COMDAT

; 1336 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1337 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226667[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetTradeI
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetTradeI
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226667[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lGetTradeI
	xor	bl, bl
$LN5@lGetTradeI:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetTradeI
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetTradeI:

; 1338 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lGetTradeI
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetTradeI
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lGetTradeI
	xor	bl, bl
$LN14@lGetTradeI:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lGetTradeI
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lGetTradeI:

; 1339 : 
; 1340 : 	const int iResult = pkUnit->getTradeInfluence(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226667[esp+20]
	push	edi
	call	?getTradeInfluence@CvUnit@@QBEHPBVCvPlot@@@Z ; CvUnit::getTradeInfluence

; 1341 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1342 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1343 : }

	pop	ecx
	ret	0
?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetTradeInfluence
_TEXT	ENDS
PUBLIC	?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuyCityState
EXTRN	?canBuyCityState@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC ; CvUnit::canBuyCityState
; Function compile flags: /Ogtpy
;	COMDAT ?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226697 = -8					; size = 4
_bTestVisible$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanBuyCityState, COMDAT

; 1347 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 1348 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226697[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanBuyCit
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanBuyCit
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226697[esp+24], eax
	test	eax, eax
	je	SHORT $LN5@lCanBuyCit
	xor	bl, bl
$LN5@lCanBuyCit:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanBuyCit
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanBuyCit:

; 1349 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanBuyCit
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanBuyCit
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanBuyCit
	xor	bl, bl
$LN14@lCanBuyCit:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanBuyCit
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanBuyCit:

; 1350 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	push	esi
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[esp+24], al

; 1351 : 	const bool bResult = pkUnit->canBuyCityState(pkPlot, bTestVisible);

	mov	ecx, DWORD PTR _bTestVisible$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$226697[esp+28]
	push	edi
	call	?canBuyCityState@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canBuyCityState

; 1352 : 
; 1353 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1354 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1355 : }

	add	esp, 8
	ret	0
?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanBuyCityState
_TEXT	ENDS
PUBLIC	?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanTrade
EXTRN	?canTrade@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canTrade
; Function compile flags: /Ogtpy
;	COMDAT ?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226727 = -8					; size = 4
_bTestVisible$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanTrade, COMDAT

; 1359 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 1360 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226727[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanTrade
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanTrade
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226727[esp+24], eax
	test	eax, eax
	je	SHORT $LN5@lCanTrade
	xor	bl, bl
$LN5@lCanTrade:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanTrade
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanTrade:

; 1361 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanTrade
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanTrade
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanTrade
	xor	bl, bl
$LN14@lCanTrade:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanTrade
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanTrade:

; 1362 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	push	esi
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[esp+24], al

; 1363 : 	const bool bResult = pkUnit->canTrade(pkPlot, bTestVisible);

	mov	ecx, DWORD PTR _bTestVisible$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$226727[esp+28]
	push	edi
	call	?canTrade@CvUnit@@QBE_NPBVCvPlot@@_N@Z	; CvUnit::canTrade

; 1364 : 
; 1365 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1366 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1367 : }

	add	esp, 8
	ret	0
?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanTrade
_TEXT	ENDS
PUBLIC	?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanRepairFleet
EXTRN	?canRepairFleet@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC ; CvUnit::canRepairFleet
; Function compile flags: /Ogtpy
;	COMDAT ?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226757 = -8					; size = 4
_bTestVisible$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanRepairFleet, COMDAT

; 1371 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 1372 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226757[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanRepair
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanRepair
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226757[esp+24], eax
	test	eax, eax
	je	SHORT $LN5@lCanRepair
	xor	bl, bl
$LN5@lCanRepair:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanRepair
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanRepair:

; 1373 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanRepair
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanRepair
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanRepair
	xor	bl, bl
$LN14@lCanRepair:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanRepair
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanRepair:

; 1374 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	push	esi
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[esp+24], al

; 1375 : 	const bool bResult = pkUnit->canRepairFleet(pkPlot, bTestVisible);

	mov	ecx, DWORD PTR _bTestVisible$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$226757[esp+28]
	push	edi
	call	?canRepairFleet@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canRepairFleet

; 1376 : 
; 1377 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1378 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1379 : }

	add	esp, 8
	ret	0
?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanRepairFleet
_TEXT	ENDS
PUBLIC	?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuildSpaceship
EXTRN	?CanBuildSpaceship@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC ; CvUnit::CanBuildSpaceship
; Function compile flags: /Ogtpy
;	COMDAT ?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226787 = -8					; size = 4
_bTestVisible$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanBuildSpaceship, COMDAT

; 1383 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 1384 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226787[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanBuildS
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanBuildS
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226787[esp+24], eax
	test	eax, eax
	je	SHORT $LN5@lCanBuildS
	xor	bl, bl
$LN5@lCanBuildS:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanBuildS
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanBuildS:

; 1385 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanBuildS
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanBuildS
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanBuildS
	xor	bl, bl
$LN14@lCanBuildS:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanBuildS
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanBuildS:

; 1386 : 	const bool bTestVisible = luaL_optint(L, 3, 0);

	push	0
	push	3
	push	esi
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[esp+24], al

; 1387 : 	const bool bResult = pkUnit->CanBuildSpaceship(pkPlot, bTestVisible);

	mov	ecx, DWORD PTR _bTestVisible$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$226787[esp+28]
	push	edi
	call	?CanBuildSpaceship@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::CanBuildSpaceship

; 1388 : 
; 1389 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1390 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1391 : }

	add	esp, 8
	ret	0
?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanBuildSpaceship
_TEXT	ENDS
PUBLIC	?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanGoldenAge
EXTRN	?canGoldenAge@CvUnit@@QBE_NPBVCvPlot@@_N@Z:PROC	; CvUnit::canGoldenAge
; Function compile flags: /Ogtpy
;	COMDAT ?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226817 = -4					; size = 4
_L$ = 8							; size = 4
?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanGoldenAge, COMDAT

; 1395 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1396 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226817[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanGolden
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanGolden
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226817[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanGolden
	xor	bl, bl
$LN5@lCanGolden:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanGolden
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanGolden:

; 1397 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanGolden
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanGolden
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanGolden
	xor	bl, bl
$LN14@lCanGolden:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanGolden
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanGolden:

; 1398 : 	const bool bResult = pkUnit->canGoldenAge(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226817[esp+20]
	push	0
	push	edi
	call	?canGoldenAge@CvUnit@@QBE_NPBVCvPlot@@_N@Z ; CvUnit::canGoldenAge

; 1399 : 
; 1400 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1401 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1402 : }

	pop	ecx
	ret	0
?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanGoldenAge
_TEXT	ENDS
PUBLIC	?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGoldenAgeTurns
EXTRN	?GetGoldenAgeTurns@CvUnit@@QBEHXZ:PROC		; CvUnit::GetGoldenAgeTurns
; Function compile flags: /Ogtpy
;	COMDAT ?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetGoldenAgeTurns, COMDAT

; 1406 : {

	push	ebx
	push	ebp
	push	esi

; 1407 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetGolden
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetGolden
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetGolden
	xor	bl, bl
$LN5@lGetGolden:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetGolden
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetGolden:

; 1408 : 	const int iResult = pkUnit->GetGoldenAgeTurns();

	mov	ecx, edi
	call	?GetGoldenAgeTurns@CvUnit@@QBEHXZ	; CvUnit::GetGoldenAgeTurns

; 1409 : 
; 1410 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1411 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1412 : }

	ret	0
?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetGoldenAgeTurns
_TEXT	ENDS
PUBLIC	?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGivePoliciesCulture
EXTRN	?getGivePoliciesCulture@CvUnit@@QAEHXZ:PROC	; CvUnit::getGivePoliciesCulture
; Function compile flags: /Ogtpy
;	COMDAT ?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGivePoliciesCulture, COMDAT

; 1416 : {

	push	ebx
	push	ebp
	push	esi

; 1417 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetGivePo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetGivePo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetGivePo
	xor	bl, bl
$LN5@lGetGivePo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetGivePo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetGivePo:

; 1418 : 
; 1419 : 	const int iResult = pkUnit->getGivePoliciesCulture();

	mov	ecx, edi
	call	?getGivePoliciesCulture@CvUnit@@QAEHXZ	; CvUnit::getGivePoliciesCulture

; 1420 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1421 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1422 : }

	ret	0
?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGivePoliciesCulture
_TEXT	ENDS
PUBLIC	?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBlastTourism
EXTRN	?getBlastTourism@CvUnit@@QAEHXZ:PROC		; CvUnit::getBlastTourism
; Function compile flags: /Ogtpy
;	COMDAT ?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetBlastTourism, COMDAT

; 1426 : {

	push	ebx
	push	ebp
	push	esi

; 1427 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetBlastT
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetBlastT
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetBlastT
	xor	bl, bl
$LN5@lGetBlastT:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetBlastT
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetBlastT:

; 1428 : 
; 1429 : 	const int iResult = pkUnit->getBlastTourism();

	mov	ecx, edi
	call	?getBlastTourism@CvUnit@@QAEHXZ		; CvUnit::getBlastTourism

; 1430 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1431 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1432 : }

	ret	0
?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetBlastTourism
_TEXT	ENDS
PUBLIC	?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanBuild
EXTRN	?canBuild@CvUnit@@QBE_NPBVCvPlot@@W4BuildTypes@@_N2@Z:PROC ; CvUnit::canBuild
; Function compile flags: /Ogtpy
;	COMDAT ?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_stack_size$226913 = -8					; size = 4
_bTestGold$ = -8					; size = 1
_bTestVisible$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanBuild, COMDAT

; 1436 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 1437 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	xor	ebp, ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanBuild
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanBuild
	push	-1
	push	esi
	call	_lua_touserdata
	mov	ebp, eax
	add	esp, 8
	test	ebp, ebp
	je	SHORT $LN5@lCanBuild
	xor	bl, bl
$LN5@lCanBuild:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanBuild
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanBuild:

; 1438 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	DWORD PTR _stack_size$226913[esp+36], eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanBuild
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanBuild
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanBuild
	xor	bl, bl
$LN14@lCanBuild:
	mov	eax, DWORD PTR _stack_size$226913[esp+24]
	push	eax
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanBuild
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanBuild:

; 1439 : 	const BuildTypes eBuild = (BuildTypes)lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 1440 : 	const bool bTestVisible = luaL_optint(L, 4, 0);

	push	0
	push	4
	push	esi
	mov	ebx, eax
	call	_luaL_optinteger

; 1441 : 	const bool bTestGold = luaL_optint(L, 5, 1);

	push	1
	test	eax, eax
	setne	cl
	push	5
	push	esi
	mov	BYTE PTR _bTestVisible$[esp+56], cl
	call	_luaL_optinteger

; 1442 : 	const bool bResult = pkUnit->canBuild(pkPlot, eBuild, bTestVisible, bTestGold);

	mov	ecx, DWORD PTR _bTestVisible$[esp+56]
	add	esp, 32					; 00000020H
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bTestGold$[esp+24], dl
	mov	eax, DWORD PTR _bTestGold$[esp+24]
	push	eax
	push	ecx
	push	ebx
	push	edi
	mov	ecx, ebp
	call	?canBuild@CvUnit@@QBE_NPBVCvPlot@@W4BuildTypes@@_N2@Z ; CvUnit::canBuild

; 1443 : 
; 1444 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1445 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1446 : }

	add	esp, 8
	ret	0
?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanBuild
_TEXT	ENDS
PUBLIC	?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanLead
EXTRN	?canLead@CvUnit@@QBEHPBVCvPlot@@H@Z:PROC	; CvUnit::canLead
; Function compile flags: /Ogtpy
;	COMDAT ?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226934 = -4					; size = 4
_L$ = 8							; size = 4
?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanLead, COMDAT

; 1450 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1451 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226934[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanLead
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanLead
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226934[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanLead
	xor	bl, bl
$LN5@lCanLead:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanLead
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanLead:

; 1452 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanLead
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanLead
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanLead
	xor	bl, bl
$LN14@lCanLead:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanLead
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanLead:

; 1453 : 	const int iUnitId = lua_tointeger(L, 3);

	push	3
	push	esi
	call	_lua_tointeger

; 1454 : 
; 1455 : 	const bool bResult = pkUnit->canLead(pkPlot, iUnitId);

	mov	ecx, DWORD PTR _pkInstance$226934[esp+28]
	add	esp, 8
	push	eax
	push	edi
	call	?canLead@CvUnit@@QBEHPBVCvPlot@@H@Z	; CvUnit::canLead
	test	eax, eax
	setne	al

; 1456 : 
; 1457 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1458 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1459 : }

	pop	ecx
	ret	0
?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanLead
_TEXT	ENDS
PUBLIC	?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lLead
EXTRN	?lead@CvUnit@@QAE_NH@Z:PROC			; CvUnit::lead
; Function compile flags: /Ogtpy
;	COMDAT ?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lLead, COMDAT

; 1463 : {

	push	ebx
	push	ebp
	push	esi

; 1464 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lLead
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lLead
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lLead
	xor	bl, bl
$LN5@lLead:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lLead
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lLead:

; 1465 : 	const int iUnitId = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 1466 : 	const bool bResult = pkUnit->lead(iUnitId);

	push	eax
	mov	ecx, edi
	call	?lead@CvUnit@@QAE_NH@Z			; CvUnit::lead

; 1467 : 
; 1468 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1469 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1470 : }

	ret	0
?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lLead
_TEXT	ENDS
PUBLIC	?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanGiveExperience
EXTRN	?canGiveExperience@CvUnit@@QBEHPBVCvPlot@@@Z:PROC ; CvUnit::canGiveExperience
; Function compile flags: /Ogtpy
;	COMDAT ?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$226983 = -4					; size = 4
_L$ = 8							; size = 4
?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanGiveExperience, COMDAT

; 1474 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1475 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$226983[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanGiveEx
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanGiveEx
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$226983[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lCanGiveEx
	xor	bl, bl
$LN5@lCanGiveEx:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanGiveEx
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanGiveEx:

; 1476 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanGiveEx
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanGiveEx
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lCanGiveEx
	xor	bl, bl
$LN14@lCanGiveEx:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lCanGiveEx
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lCanGiveEx:

; 1477 : 
; 1478 : 	const int iResult = pkUnit->canGiveExperience(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$226983[esp+20]
	push	edi
	call	?canGiveExperience@CvUnit@@QBEHPBVCvPlot@@@Z ; CvUnit::canGiveExperience

; 1479 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1480 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1481 : }

	pop	ecx
	ret	0
?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanGiveExperience
_TEXT	ENDS
PUBLIC	?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGiveExperience
EXTRN	?giveExperience@CvUnit@@QAE_NXZ:PROC		; CvUnit::giveExperience
; Function compile flags: /Ogtpy
;	COMDAT ?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGiveExperience, COMDAT

; 1485 : {

	push	ebx
	push	ebp
	push	esi

; 1486 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGiveExper
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGiveExper
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGiveExper
	xor	bl, bl
$LN5@lGiveExper:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGiveExper
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGiveExper:

; 1487 : 	const bool bResult = pkUnit->giveExperience();

	mov	ecx, edi
	call	?giveExperience@CvUnit@@QAE_NXZ		; CvUnit::giveExperience

; 1488 : 
; 1489 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1490 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1491 : }

	ret	0
?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGiveExperience
_TEXT	ENDS
PUBLIC	?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanPromote
EXTRN	?canPromote@CvUnit@@QBE_NW4PromotionTypes@@H@Z:PROC ; CvUnit::canPromote
; Function compile flags: /Ogtpy
;	COMDAT ?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanPromote, COMDAT

; 1495 : {

	push	ebx
	push	ebp
	push	esi

; 1496 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanPromot
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanPromot
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanPromot
	xor	bl, bl
$LN5@lCanPromot:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanPromot
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanPromot:

; 1497 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 1498 : 	const int iLeaderUnitId = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger
	add	esp, 16					; 00000010H

; 1499 : 	const bool bResult = pkUnit->canPromote(ePromotion, iLeaderUnitId);

	push	eax
	push	ebx
	mov	ecx, edi
	call	?canPromote@CvUnit@@QBE_NW4PromotionTypes@@H@Z ; CvUnit::canPromote

; 1500 : 
; 1501 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1502 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1503 : }

	ret	0
?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanPromote
_TEXT	ENDS
PUBLIC	?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lPromote
EXTRN	?promote@CvUnit@@QAEXW4PromotionTypes@@H@Z:PROC	; CvUnit::promote
; Function compile flags: /Ogtpy
;	COMDAT ?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lPromote, COMDAT

; 1507 : {

	push	ebx
	push	ebp
	push	esi

; 1508 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lPromote
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lPromote
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lPromote
	xor	bl, bl
$LN5@lPromote:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lPromote
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lPromote:

; 1509 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 1510 : 	const int iLeaderUnitId = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger
	add	esp, 16					; 00000010H

; 1511 : 
; 1512 : 	pkUnit->promote(ePromotion, iLeaderUnitId);

	push	eax
	push	ebx
	mov	ecx, edi
	call	?promote@CvUnit@@QAEXW4PromotionTypes@@H@Z ; CvUnit::promote
	pop	edi
	pop	esi
	pop	ebp

; 1513 : 	return 0;

	xor	eax, eax
	pop	ebx

; 1514 : }

	ret	0
?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lPromote
_TEXT	ENDS
PUBLIC	?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUpgradeUnitType
EXTRN	?GetUpgradeUnitType@CvUnit@@QBE?AW4UnitTypes@@XZ:PROC ; CvUnit::GetUpgradeUnitType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUpgradeUnitType, COMDAT

; 1518 : {

	push	ebx
	push	ebp
	push	esi

; 1519 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUpgrad
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUpgrad
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUpgrad
	xor	bl, bl
$LN5@lGetUpgrad:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUpgrad
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUpgrad:

; 1520 : 
; 1521 : 	const int iResult = pkUnit->GetUpgradeUnitType();

	mov	ecx, edi
	call	?GetUpgradeUnitType@CvUnit@@QBE?AW4UnitTypes@@XZ ; CvUnit::GetUpgradeUnitType

; 1522 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1523 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1524 : }

	ret	0
?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUpgradeUnitType
_TEXT	ENDS
PUBLIC	?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lUpgradePrice
EXTRN	?upgradePrice@CvUnit@@QBEHW4UnitTypes@@@Z:PROC	; CvUnit::upgradePrice
; Function compile flags: /Ogtpy
;	COMDAT ?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lUpgradePrice, COMDAT

; 1528 : {

	push	ebx
	push	ebp
	push	esi

; 1529 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lUpgradePr
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lUpgradePr
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lUpgradePr
	xor	bl, bl
$LN5@lUpgradePr:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lUpgradePr
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lUpgradePr:

; 1530 : 	const UnitTypes eUnit = (UnitTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 1531 : 
; 1532 : 	const int iResult = pkUnit->upgradePrice(eUnit);

	push	eax
	mov	ecx, edi
	call	?upgradePrice@CvUnit@@QBEHW4UnitTypes@@@Z ; CvUnit::upgradePrice

; 1533 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1534 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1535 : }

	ret	0
?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lUpgradePrice
_TEXT	ENDS
PUBLIC	?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanUpgradeRightNow
EXTRN	?CanUpgradeRightNow@CvUnit@@QBE_N_N@Z:PROC	; CvUnit::CanUpgradeRightNow
; Function compile flags: /Ogtpy
;	COMDAT ?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bTestVisible$ = -4					; size = 1
_L$ = 8							; size = 4
?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanUpgradeRightNow, COMDAT

; 1538 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1539 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanUpgrad
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanUpgrad
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanUpgrad
	xor	bl, bl
$LN5@lCanUpgrad:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanUpgrad
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanUpgrad:

; 1540 : 	const bool bTestVisible = luaL_optint(L, 2, 0);

	push	0
	push	2
	push	esi
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bTestVisible$[esp+20], al

; 1541 : 	const bool bResult = pkUnit->CanUpgradeRightNow(bTestVisible);

	mov	ecx, DWORD PTR _bTestVisible$[esp+20]
	push	ecx
	mov	ecx, edi
	call	?CanUpgradeRightNow@CvUnit@@QBE_N_N@Z	; CvUnit::CanUpgradeRightNow

; 1542 : 
; 1543 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1544 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1545 : }

	pop	ecx
	ret	0
?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanUpgradeRightNow
_TEXT	ENDS
PUBLIC	?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumResourceNeededToUpgrade
EXTRN	?GetResourceQuantityRequirement@CvUnitEntry@@QBEHH@Z:PROC ; CvUnitEntry::GetResourceQuantityRequirement
; Function compile flags: /Ogtpy
;	COMDAT ?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetNumResourceNeededToUpgrade, COMDAT

; 1548 : {

	push	ebx
	push	ebp
	push	esi

; 1549 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetNumRes
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetNumRes
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lGetNumRes
	xor	bl, bl
$LN6@lGetNumRes:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetNumRes
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetNumRes:

; 1550 : 	const ResourceTypes eResource = (ResourceTypes) lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 1551 : 
; 1552 : 	const UnitTypes eUpgradeUnitType = pkUnit->GetUpgradeUnitType();

	mov	ecx, edi
	mov	ebx, eax
	call	?GetUpgradeUnitType@CvUnit@@QBE?AW4UnitTypes@@XZ ; CvUnit::GetUpgradeUnitType
	mov	edi, eax

; 1553 : 
; 1554 : 	CvUnitEntry* pkUnitInfo = GC.getUnitInfo(eUpgradeUnitType);

	push	edi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo

; 1555 : 	if(pkUnitInfo == NULL)

	test	eax, eax
	jne	SHORT $LN1@lGetNumRes

; 1556 : 	{
; 1557 : 		luaL_error(L, "Cannot find unit info (%d) for unit.", eUpgradeUnitType);

	push	edi
	push	OFFSET $SG222308
	push	esi
	call	_luaL_error
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp

; 1558 : 		return 0;

	xor	eax, eax
	pop	ebx

; 1565 : }

	ret	0
$LN1@lGetNumRes:

; 1559 : 	}
; 1560 : 
; 1561 : 	const int iResult = pkUnitInfo->GetResourceQuantityRequirement(eResource);

	push	ebx
	mov	ecx, eax
	call	?GetResourceQuantityRequirement@CvUnitEntry@@QBEHH@Z ; CvUnitEntry::GetResourceQuantityRequirement

; 1562 : 
; 1563 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1564 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1565 : }

	ret	0
?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetNumResourceNeededToUpgrade
_TEXT	ENDS
PUBLIC	?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHandicapType
EXTRN	?getHandicapType@CvUnit@@QBE?AW4HandicapTypes@@XZ:PROC ; CvUnit::getHandicapType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetHandicapType, COMDAT

; 1569 : {

	push	ebx
	push	ebp
	push	esi

; 1570 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetHandic
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetHandic
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetHandic
	xor	bl, bl
$LN5@lGetHandic:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetHandic
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetHandic:

; 1571 : 
; 1572 : 	const HandicapTypes eResult = pkUnit->getHandicapType();

	mov	ecx, edi
	call	?getHandicapType@CvUnit@@QBE?AW4HandicapTypes@@XZ ; CvUnit::getHandicapType

; 1573 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1574 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1575 : }

	ret	0
?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetHandicapType
_TEXT	ENDS
PUBLIC	?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCivilizationType
EXTRN	?getCivilizationType@CvUnit@@QBE?AW4CivilizationTypes@@XZ:PROC ; CvUnit::getCivilizationType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetCivilizationType, COMDAT

; 1579 : {

	push	ebx
	push	ebp
	push	esi

; 1580 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetCivili
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetCivili
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetCivili
	xor	bl, bl
$LN5@lGetCivili:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetCivili
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetCivili:

; 1581 : 
; 1582 : 	const CivilizationTypes eResult = pkUnit->getCivilizationType();

	mov	ecx, edi
	call	?getCivilizationType@CvUnit@@QBE?AW4CivilizationTypes@@XZ ; CvUnit::getCivilizationType

; 1583 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1584 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1585 : }

	ret	0
?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetCivilizationType
_TEXT	ENDS
PUBLIC	?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSpecialUnitType
EXTRN	?getSpecialUnitType@CvUnit@@QBE?AW4SpecialUnitTypes@@XZ:PROC ; CvUnit::getSpecialUnitType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetSpecialUnitType, COMDAT

; 1589 : {

	push	ebx
	push	ebp
	push	esi

; 1590 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetSpecia
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetSpecia
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetSpecia
	xor	bl, bl
$LN5@lGetSpecia:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetSpecia
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetSpecia:

; 1591 : 
; 1592 : 	const SpecialUnitTypes eResult = pkUnit->getSpecialUnitType();

	mov	ecx, edi
	call	?getSpecialUnitType@CvUnit@@QBE?AW4SpecialUnitTypes@@XZ ; CvUnit::getSpecialUnitType

; 1593 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1594 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1595 : }

	ret	0
?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetSpecialUnitType
_TEXT	ENDS
PUBLIC	?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCaptureUnitType
EXTRN	?getCaptureUnitType@CvUnit@@QBE?AW4UnitTypes@@W4CivilizationTypes@@@Z:PROC ; CvUnit::getCaptureUnitType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetCaptureUnitType, COMDAT

; 1599 : {

	push	ebx
	push	ebp
	push	esi

; 1600 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetCaptur
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetCaptur
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetCaptur
	xor	bl, bl
$LN5@lGetCaptur:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetCaptur
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetCaptur:

; 1601 : 	const CivilizationTypes eCivilization = (CivilizationTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 1602 : 
; 1603 : 	const UnitTypes eResult = pkUnit->getCaptureUnitType(eCivilization);

	push	eax
	mov	ecx, edi
	call	?getCaptureUnitType@CvUnit@@QBE?AW4UnitTypes@@W4CivilizationTypes@@@Z ; CvUnit::getCaptureUnitType

; 1604 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1605 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1606 : }

	ret	0
?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetCaptureUnitType
_TEXT	ENDS
PUBLIC	?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitCombatType
EXTRN	?getUnitCombatType@CvUnit@@QBE?AW4UnitCombatTypes@@XZ:PROC ; CvUnit::getUnitCombatType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitCombatType, COMDAT

; 1610 : {

	push	ebx
	push	ebp
	push	esi

; 1611 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnitCo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnitCo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnitCo
	xor	bl, bl
$LN5@lGetUnitCo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnitCo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnitCo:

; 1612 : 
; 1613 : 	const UnitCombatTypes eResult = pkUnit->getUnitCombatType();

	mov	ecx, edi
	call	?getUnitCombatType@CvUnit@@QBE?AW4UnitCombatTypes@@XZ ; CvUnit::getUnitCombatType

; 1614 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1615 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1616 : }

	ret	0
?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitCombatType
_TEXT	ENDS
PUBLIC	?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetUnitAIType
EXTRN	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ:PROC ; CvUnit::AI_getUnitAIType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitAIType, COMDAT

; 1620 : {

	push	ebx
	push	ebp
	push	esi

; 1621 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnitAI
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnitAI
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnitAI
	xor	bl, bl
$LN5@lGetUnitAI:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnitAI
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnitAI:

; 1622 : 
; 1623 : 	const UnitAITypes eResult = pkUnit->AI_getUnitAIType();

	mov	ecx, edi
	call	?AI_getUnitAIType@CvUnit@@QBE?AW4UnitAITypes@@XZ ; CvUnit::AI_getUnitAIType

; 1624 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1625 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1626 : }

	ret	0
?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitAIType
_TEXT	ENDS
PUBLIC	?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetUnitAIType
EXTRN	?AI_setUnitAIType@CvUnit@@QAEXW4UnitAITypes@@@Z:PROC ; CvUnit::AI_setUnitAIType
; Function compile flags: /Ogtpy
;	COMDAT ?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetUnitAIType, COMDAT

; 1630 : {

	push	ebx
	push	ebp
	push	esi

; 1631 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetUnitAI
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetUnitAI
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetUnitAI
	xor	bl, bl
$LN5@lSetUnitAI:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetUnitAI
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetUnitAI:

; 1632 : 	const UnitAITypes eUnitAI = (UnitAITypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 1633 : 	pkUnit->AI_setUnitAIType(eUnitAI);

	push	eax
	mov	ecx, edi
	call	?AI_setUnitAIType@CvUnit@@QAEXW4UnitAITypes@@@Z ; CvUnit::AI_setUnitAIType
	pop	edi
	pop	esi
	pop	ebp

; 1634 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1635 : }

	ret	0
?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetUnitAIType
_TEXT	ENDS
PUBLIC	?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetDomainType
EXTRN	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ:PROC ; CvUnit::getDomainType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetDomainType, COMDAT

; 1639 : {

	push	ebx
	push	ebp
	push	esi

; 1640 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetDomain
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetDomain
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetDomain
	xor	bl, bl
$LN5@lGetDomain:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetDomain
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetDomain:

; 1641 : 
; 1642 : 	const DomainTypes eResult = pkUnit->getDomainType();

	mov	ecx, edi
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType

; 1643 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1644 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1645 : }

	ret	0
?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetDomainType
_TEXT	ENDS
PUBLIC	?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetInvisibleType
EXTRN	?getInvisibleType@CvUnit@@QBE?BW4InvisibleTypes@@XZ:PROC ; CvUnit::getInvisibleType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetInvisibleType, COMDAT

; 1649 : {

	push	ebx
	push	ebp
	push	esi

; 1650 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetInvisi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetInvisi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetInvisi
	xor	bl, bl
$LN5@lGetInvisi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetInvisi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetInvisi:

; 1651 : 
; 1652 : 	const InvisibleTypes eResult = pkUnit->getInvisibleType();

	mov	ecx, edi
	call	?getInvisibleType@CvUnit@@QBE?BW4InvisibleTypes@@XZ ; CvUnit::getInvisibleType

; 1653 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1654 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1655 : }

	ret	0
?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetInvisibleType
_TEXT	ENDS
PUBLIC	?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSeeInvisibleType
EXTRN	?getSeeInvisibleType@CvUnit@@QBE?BW4InvisibleTypes@@XZ:PROC ; CvUnit::getSeeInvisibleType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetSeeInvisibleType, COMDAT

; 1659 : {

	push	ebx
	push	ebp
	push	esi

; 1660 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetSeeInv
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetSeeInv
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetSeeInv
	xor	bl, bl
$LN5@lGetSeeInv:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetSeeInv
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetSeeInv:

; 1661 : 
; 1662 : 	const InvisibleTypes eResult = pkUnit->getSeeInvisibleType();

	mov	ecx, edi
	call	?getSeeInvisibleType@CvUnit@@QBE?BW4InvisibleTypes@@XZ ; CvUnit::getSeeInvisibleType

; 1663 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1664 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1665 : }

	ret	0
?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetSeeInvisibleType
_TEXT	ENDS
PUBLIC	?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetDropRange
EXTRN	?getDropRange@CvUnit@@QBEHXZ:PROC		; CvUnit::getDropRange
; Function compile flags: /Ogtpy
;	COMDAT ?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetDropRange, COMDAT

; 1669 : {

	push	ebx
	push	ebp
	push	esi

; 1670 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetDropRa
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetDropRa
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetDropRa
	xor	bl, bl
$LN5@lGetDropRa:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetDropRa
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetDropRa:

; 1671 : 
; 1672 : 	const int eResult = pkUnit->getDropRange();

	mov	ecx, edi
	call	?getDropRange@CvUnit@@QBEHXZ		; CvUnit::getDropRange

; 1673 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1674 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1675 : }

	ret	0
?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetDropRange
_TEXT	ENDS
PUBLIC	?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lFlavorValue
EXTRN	?flavorValue@CvUnit@@QBEHW4FlavorTypes@@@Z:PROC	; CvUnit::flavorValue
; Function compile flags: /Ogtpy
;	COMDAT ?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFlavorValue, COMDAT

; 1679 : {

	push	ebx
	push	ebp
	push	esi

; 1680 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lFlavorVal
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lFlavorVal
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lFlavorVal
	xor	bl, bl
$LN5@lFlavorVal:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lFlavorVal
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lFlavorVal:

; 1681 : 	const FlavorTypes eFlavor = (FlavorTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 1682 : 
; 1683 : 	const int iResult = pkUnit->flavorValue(eFlavor);

	push	eax
	mov	ecx, edi
	call	?flavorValue@CvUnit@@QBEHW4FlavorTypes@@@Z ; CvUnit::flavorValue

; 1684 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1685 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1686 : }

	ret	0
?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFlavorValue
_TEXT	ENDS
PUBLIC	?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsBarbarian
EXTRN	?isBarbarian@CvUnit@@QBE_NXZ:PROC		; CvUnit::isBarbarian
; Function compile flags: /Ogtpy
;	COMDAT ?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsBarbarian, COMDAT

; 1690 : {

	push	ebx
	push	ebp
	push	esi

; 1691 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsBarbari
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsBarbari
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsBarbari
	xor	bl, bl
$LN5@lIsBarbari:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsBarbari
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsBarbari:

; 1692 : 	const bool bResult = pkUnit->isBarbarian();

	mov	ecx, edi
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian

; 1693 : 
; 1694 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1695 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1696 : }

	ret	0
?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsBarbarian
_TEXT	ENDS
PUBLIC	?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsHuman
EXTRN	?isHuman@CvUnit@@QBE_NXZ:PROC			; CvUnit::isHuman
; Function compile flags: /Ogtpy
;	COMDAT ?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsHuman, COMDAT

; 1701 : {

	push	ebx
	push	ebp
	push	esi

; 1702 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsHuman
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsHuman
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsHuman
	xor	bl, bl
$LN5@lIsHuman:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsHuman
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsHuman:

; 1703 : 	const bool bResult = pkUnit->isHuman();

	mov	ecx, edi
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman

; 1704 : 
; 1705 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1706 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1707 : }

	ret	0
?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsHuman
_TEXT	ENDS
PUBLIC	?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lVisibilityRange
EXTRN	?visibilityRange@CvUnit@@QBEHXZ:PROC		; CvUnit::visibilityRange
; Function compile flags: /Ogtpy
;	COMDAT ?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lVisibilityRange, COMDAT

; 1711 : {

	push	ebx
	push	ebp
	push	esi

; 1712 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lVisibilit
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lVisibilit
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lVisibilit
	xor	bl, bl
$LN5@lVisibilit:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lVisibilit
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lVisibilit:

; 1713 : 
; 1714 : 	const int iResult = pkUnit->visibilityRange();

	mov	ecx, edi
	call	?visibilityRange@CvUnit@@QBEHXZ		; CvUnit::visibilityRange

; 1715 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1716 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1717 : }

	ret	0
?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lVisibilityRange
_TEXT	ENDS
PUBLIC	?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lMaxMoves
EXTRN	?maxMoves@CvUnit@@QBEHXZ:PROC			; CvUnit::maxMoves
; Function compile flags: /Ogtpy
;	COMDAT ?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lMaxMoves, COMDAT

; 1721 : {

	push	ebx
	push	ebp
	push	esi

; 1722 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lMaxMoves
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lMaxMoves
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lMaxMoves
	xor	bl, bl
$LN5@lMaxMoves:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lMaxMoves
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lMaxMoves:

; 1723 : 
; 1724 : 	const int iResult = pkUnit->maxMoves();

	mov	ecx, edi
	call	?maxMoves@CvUnit@@QBEHXZ		; CvUnit::maxMoves

; 1725 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1726 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1727 : }

	ret	0
?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lMaxMoves
_TEXT	ENDS
PUBLIC	?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lMovesLeft
EXTRN	?movesLeft@CvUnit@@QBEHXZ:PROC			; CvUnit::movesLeft
; Function compile flags: /Ogtpy
;	COMDAT ?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lMovesLeft, COMDAT

; 1731 : {

	push	ebx
	push	ebp
	push	esi

; 1732 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lMovesLeft
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lMovesLeft
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lMovesLeft
	xor	bl, bl
$LN5@lMovesLeft:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lMovesLeft
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lMovesLeft:

; 1733 : 
; 1734 : 	const int iResult = pkUnit->movesLeft();

	mov	ecx, edi
	call	?movesLeft@CvUnit@@QBEHXZ		; CvUnit::movesLeft

; 1735 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1736 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1737 : }

	ret	0
?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lMovesLeft
_TEXT	ENDS
PUBLIC	?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanMove
EXTRN	?canMove@CvUnit@@QBE_NXZ:PROC			; CvUnit::canMove
; Function compile flags: /Ogtpy
;	COMDAT ?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanMove, COMDAT

; 1741 : {

	push	ebx
	push	ebp
	push	esi

; 1742 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanMove
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanMove
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanMove
	xor	bl, bl
$LN5@lCanMove:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanMove
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanMove:

; 1743 : 	const bool bResult = pkUnit->canMove();

	mov	ecx, edi
	call	?canMove@CvUnit@@QBE_NXZ		; CvUnit::canMove

; 1744 : 
; 1745 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1746 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1747 : }

	ret	0
?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanMove
_TEXT	ENDS
PUBLIC	?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lHasMoved
EXTRN	?hasMoved@CvUnit@@QBE_NXZ:PROC			; CvUnit::hasMoved
; Function compile flags: /Ogtpy
;	COMDAT ?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lHasMoved, COMDAT

; 1751 : {

	push	ebx
	push	ebp
	push	esi

; 1752 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lHasMoved
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lHasMoved
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lHasMoved
	xor	bl, bl
$LN5@lHasMoved:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lHasMoved
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lHasMoved:

; 1753 : 	const bool bResult = pkUnit->hasMoved();

	mov	ecx, edi
	call	?hasMoved@CvUnit@@QBE_NXZ		; CvUnit::hasMoved

; 1754 : 
; 1755 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1756 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1757 : }

	ret	0
?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lHasMoved
_TEXT	ENDS
PUBLIC	?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lRange
EXTRN	?GetRange@CvUnit@@QBEHXZ:PROC			; CvUnit::GetRange
; Function compile flags: /Ogtpy
;	COMDAT ?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lRange, COMDAT

; 1761 : {

	push	ebx
	push	ebp
	push	esi

; 1762 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lRange
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lRange
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lRange
	xor	bl, bl
$LN5@lRange:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lRange
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lRange:

; 1763 : 
; 1764 : 	const int iResult = pkUnit->GetRange();

	mov	ecx, edi
	call	?GetRange@CvUnit@@QBEHXZ		; CvUnit::GetRange

; 1765 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1766 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1767 : }

	ret	0
?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lRange
_TEXT	ENDS
PUBLIC	?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lNukeDamageLevel
EXTRN	?GetNukeDamageLevel@CvUnit@@QBEHXZ:PROC		; CvUnit::GetNukeDamageLevel
; Function compile flags: /Ogtpy
;	COMDAT ?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lNukeDamageLevel, COMDAT

; 1771 : {

	push	ebx
	push	ebp
	push	esi

; 1772 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lNukeDamag
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lNukeDamag
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lNukeDamag
	xor	bl, bl
$LN5@lNukeDamag:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lNukeDamag
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lNukeDamag:

; 1773 : 
; 1774 : 	const int iResult = pkUnit->GetNukeDamageLevel();

	mov	ecx, edi
	call	?GetNukeDamageLevel@CvUnit@@QBEHXZ	; CvUnit::GetNukeDamageLevel

; 1775 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1776 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1777 : }

	ret	0
?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lNukeDamageLevel
_TEXT	ENDS
PUBLIC	?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanBuildRoute
EXTRN	?canBuildRoute@CvUnit@@QBE_NXZ:PROC		; CvUnit::canBuildRoute
; Function compile flags: /Ogtpy
;	COMDAT ?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanBuildRoute, COMDAT

; 1781 : {

	push	ebx
	push	ebp
	push	esi

; 1782 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanBuildR
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanBuildR
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanBuildR
	xor	bl, bl
$LN5@lCanBuildR:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanBuildR
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanBuildR:

; 1783 : 	const bool bResult = pkUnit->canBuildRoute();

	mov	ecx, edi
	call	?canBuildRoute@CvUnit@@QBE_NXZ		; CvUnit::canBuildRoute

; 1784 : 
; 1785 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1786 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1787 : }

	ret	0
?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanBuildRoute
_TEXT	ENDS
PUBLIC	?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetBuildType
EXTRN	?getBuildType@CvUnit@@QBE?AW4BuildTypes@@XZ:PROC ; CvUnit::getBuildType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetBuildType, COMDAT

; 1791 : {

	push	ebx
	push	ebp
	push	esi

; 1792 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetBuildT
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetBuildT
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetBuildT
	xor	bl, bl
$LN5@lGetBuildT:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetBuildT
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetBuildT:

; 1793 : 
; 1794 : 	const BuildTypes eResult = pkUnit->getBuildType();

	mov	ecx, edi
	call	?getBuildType@CvUnit@@QBE?AW4BuildTypes@@XZ ; CvUnit::getBuildType

; 1795 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1796 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1797 : }

	ret	0
?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetBuildType
_TEXT	ENDS
PUBLIC	?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lWorkRate
EXTRN	?workRate@CvUnit@@QBEH_NW4BuildTypes@@@Z:PROC	; CvUnit::workRate
; Function compile flags: /Ogtpy
;	COMDAT ?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bMax$ = -4						; size = 1
_L$ = 8							; size = 4
?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lWorkRate, COMDAT

; 1801 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 1802 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lWorkRate
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lWorkRate
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lWorkRate
	xor	bl, bl
$LN5@lWorkRate:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lWorkRate
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lWorkRate:

; 1803 : 	const bool bMax = lua_toboolean(L, 2);

	push	2
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bMax$[esp+20], al

; 1804 : 
; 1805 : 	const int iResult = pkUnit->workRate(bMax);

	mov	ecx, DWORD PTR _bMax$[esp+20]
	push	-1
	push	ecx
	mov	ecx, edi
	call	?workRate@CvUnit@@QBEH_NW4BuildTypes@@@Z ; CvUnit::workRate

; 1806 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1807 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1808 : }

	pop	ecx
	ret	0
?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lWorkRate
_TEXT	ENDS
PUBLIC	?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNoBadGoodies
EXTRN	?isNoBadGoodies@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNoBadGoodies
; Function compile flags: /Ogtpy
;	COMDAT ?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNoBadGoodies, COMDAT

; 1812 : {

	push	ebx
	push	ebp
	push	esi

; 1813 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNoBadGo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNoBadGo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsNoBadGo
	xor	bl, bl
$LN5@lIsNoBadGo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNoBadGo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsNoBadGo:

; 1814 : 	const bool bResult = pkUnit->isNoBadGoodies();

	mov	ecx, edi
	call	?isNoBadGoodies@CvUnit@@QBE_NXZ		; CvUnit::isNoBadGoodies

; 1815 : 
; 1816 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1817 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1818 : }

	ret	0
?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNoBadGoodies
_TEXT	ENDS
PUBLIC	?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsOnlyDefensive
EXTRN	?isOnlyDefensive@CvUnit@@QBE_NXZ:PROC		; CvUnit::isOnlyDefensive
; Function compile flags: /Ogtpy
;	COMDAT ?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsOnlyDefensive, COMDAT

; 1822 : {

	push	ebx
	push	ebp
	push	esi

; 1823 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsOnlyDef
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsOnlyDef
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsOnlyDef
	xor	bl, bl
$LN5@lIsOnlyDef:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsOnlyDef
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsOnlyDef:

; 1824 : 	const bool bResult = pkUnit->isOnlyDefensive();

	mov	ecx, edi
	call	?isOnlyDefensive@CvUnit@@QBE_NXZ	; CvUnit::isOnlyDefensive

; 1825 : 
; 1826 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1827 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1828 : }

	ret	0
?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsOnlyDefensive
_TEXT	ENDS
PUBLIC	?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNoCapture
EXTRN	?isNoCapture@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNoCapture
; Function compile flags: /Ogtpy
;	COMDAT ?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNoCapture, COMDAT

; 1832 : {

	push	ebx
	push	ebp
	push	esi

; 1833 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNoCaptu
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNoCaptu
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsNoCaptu
	xor	bl, bl
$LN5@lIsNoCaptu:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNoCaptu
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsNoCaptu:

; 1834 : 	const bool bResult = pkUnit->isNoCapture();

	mov	ecx, edi
	call	?isNoCapture@CvUnit@@QBE_NXZ		; CvUnit::isNoCapture

; 1835 : 
; 1836 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1837 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1838 : }

	ret	0
?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNoCapture
_TEXT	ENDS
PUBLIC	?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRivalTerritory
EXTRN	?isRivalTerritory@CvUnit@@QBE_NXZ:PROC		; CvUnit::isRivalTerritory
; Function compile flags: /Ogtpy
;	COMDAT ?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsRivalTerritory, COMDAT

; 1842 : {

	push	ebx
	push	ebp
	push	esi

; 1843 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsRivalTe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsRivalTe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsRivalTe
	xor	bl, bl
$LN5@lIsRivalTe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsRivalTe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsRivalTe:

; 1844 : 	const bool bResult = pkUnit->isRivalTerritory();

	mov	ecx, edi
	call	?isRivalTerritory@CvUnit@@QBE_NXZ	; CvUnit::isRivalTerritory

; 1845 : 
; 1846 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1847 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1848 : }

	ret	0
?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsRivalTerritory
_TEXT	ENDS
PUBLIC	?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsFound
EXTRN	?isFound@CvUnit@@QBE_NXZ:PROC			; CvUnit::isFound
; Function compile flags: /Ogtpy
;	COMDAT ?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsFound, COMDAT

; 1852 : {

	push	ebx
	push	ebp
	push	esi

; 1853 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsFound
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsFound
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsFound
	xor	bl, bl
$LN5@lIsFound:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsFound
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsFound:

; 1854 : 	const bool bResult = pkUnit->isFound();

	mov	ecx, edi
	call	?isFound@CvUnit@@QBE_NXZ		; CvUnit::isFound

; 1855 : 
; 1856 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1857 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1858 : }

	ret	0
?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsFound
_TEXT	ENDS
PUBLIC	?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsWork
EXTRN	?IsWork@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsWork
; Function compile flags: /Ogtpy
;	COMDAT ?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsWork, COMDAT

; 1862 : {

	push	ebx
	push	ebp
	push	esi

; 1863 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsWork
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsWork
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsWork
	xor	bl, bl
$LN5@lIsWork:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsWork
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsWork:

; 1864 : 	const bool bResult = pkUnit->IsWork();

	mov	ecx, edi
	call	?IsWork@CvUnit@@QBE_NXZ			; CvUnit::IsWork

; 1865 : 
; 1866 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1867 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1868 : }

	ret	0
?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsWork
_TEXT	ENDS
PUBLIC	?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsGoldenAge
EXTRN	?isGoldenAge@CvUnit@@QBE_NXZ:PROC		; CvUnit::isGoldenAge
; Function compile flags: /Ogtpy
;	COMDAT ?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsGoldenAge, COMDAT

; 1872 : {

	push	ebx
	push	ebp
	push	esi

; 1873 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsGoldenA
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsGoldenA
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsGoldenA
	xor	bl, bl
$LN5@lIsGoldenA:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsGoldenA
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsGoldenA:

; 1874 : 	const bool bResult = pkUnit->isGoldenAge();

	mov	ecx, edi
	call	?isGoldenAge@CvUnit@@QBE_NXZ		; CvUnit::isGoldenAge

; 1875 : 	
; 1876 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1877 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1878 : }

	ret	0
?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsGoldenAge
_TEXT	ENDS
PUBLIC	?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearFriendlyMinor
EXTRN	?IsNearFriendlyMinor@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsNearFriendlyMinor
; Function compile flags: /Ogtpy
;	COMDAT ?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsNearFriendlyMinor, COMDAT

; 1883 : {

	push	ebx
	push	ebp
	push	esi

; 1884 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNearFri
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNearFri
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsNearFri
	xor	bl, bl
$LN5@lIsNearFri:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNearFri
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsNearFri:

; 1885 : 	const bool bResult = pkUnit->IsNearFriendlyMinor();

	mov	ecx, edi
	call	?IsNearFriendlyMinor@CvUnit@@QBE_NXZ	; CvUnit::IsNearFriendlyMinor

; 1886 : 
; 1887 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1888 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1889 : }

	ret	0
?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsNearFriendlyMinor
_TEXT	ENDS
PUBLIC	?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanCoexistWithEnemyUnit
EXTRN	?canCoexistWithEnemyUnit@CvUnit@@QBE_NW4TeamTypes@@@Z:PROC ; CvUnit::canCoexistWithEnemyUnit
; Function compile flags: /Ogtpy
;	COMDAT ?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanCoexistWithEnemyUnit, COMDAT

; 1894 : {

	push	ebx
	push	ebp
	push	esi

; 1895 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanCoexis
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanCoexis
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanCoexis
	xor	bl, bl
$LN5@lCanCoexis:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanCoexis
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanCoexis:

; 1896 : 	const TeamTypes eTeam = (TeamTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 1897 : 	const bool bResult = pkUnit->canCoexistWithEnemyUnit(eTeam);

	push	eax
	mov	ecx, edi
	call	?canCoexistWithEnemyUnit@CvUnit@@QBE_NW4TeamTypes@@@Z ; CvUnit::canCoexistWithEnemyUnit

; 1898 : 
; 1899 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1900 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1901 : }

	ret	0
?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanCoexistWithEnemyUnit
_TEXT	ENDS
PUBLIC	?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsGreatPerson
EXTRN	?IsGreatPerson@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsGreatPerson
; Function compile flags: /Ogtpy
;	COMDAT ?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsGreatPerson, COMDAT

; 1905 : {

	push	ebx
	push	ebp
	push	esi

; 1906 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsGreatPe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsGreatPe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsGreatPe
	xor	bl, bl
$LN5@lIsGreatPe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsGreatPe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsGreatPe:

; 1907 : 	const bool bResult = pkUnit->IsGreatPerson();

	mov	ecx, edi
	call	?IsGreatPerson@CvUnit@@QBE_NXZ		; CvUnit::IsGreatPerson

; 1908 : 
; 1909 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1910 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1911 : }

	ret	0
?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsGreatPerson
_TEXT	ENDS
PUBLIC	?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsFighting
EXTRN	?isFighting@CvUnit@@QBE_NXZ:PROC		; CvUnit::isFighting
; Function compile flags: /Ogtpy
;	COMDAT ?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsFighting, COMDAT

; 1915 : {

	push	ebx
	push	ebp
	push	esi

; 1916 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsFightin
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsFightin
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsFightin
	xor	bl, bl
$LN5@lIsFightin:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsFightin
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsFightin:

; 1917 : 	const bool bResult = pkUnit->isFighting();

	mov	ecx, edi
	call	?isFighting@CvUnit@@QBE_NXZ		; CvUnit::isFighting

; 1918 : 
; 1919 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1920 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1921 : }

	ret	0
?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsFighting
_TEXT	ENDS
PUBLIC	?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsAttacking
EXTRN	?isAttacking@CvUnit@@QBE_NXZ:PROC		; CvUnit::isAttacking
; Function compile flags: /Ogtpy
;	COMDAT ?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsAttacking, COMDAT

; 1925 : {

	push	ebx
	push	ebp
	push	esi

; 1926 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsAttacki
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsAttacki
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsAttacki
	xor	bl, bl
$LN5@lIsAttacki:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsAttacki
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsAttacki:

; 1927 : 	const bool bResult = pkUnit->isAttacking();

	mov	ecx, edi
	call	?isAttacking@CvUnit@@QBE_NXZ		; CvUnit::isAttacking

; 1928 : 
; 1929 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1930 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1931 : }

	ret	0
?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsAttacking
_TEXT	ENDS
PUBLIC	?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsDefending
EXTRN	?isDefending@CvUnit@@QBE_NXZ:PROC		; CvUnit::isDefending
; Function compile flags: /Ogtpy
;	COMDAT ?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsDefending, COMDAT

; 1935 : {

	push	ebx
	push	ebp
	push	esi

; 1936 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsDefendi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsDefendi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsDefendi
	xor	bl, bl
$LN5@lIsDefendi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsDefendi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsDefendi:

; 1937 : 	const bool bResult = pkUnit->isDefending();

	mov	ecx, edi
	call	?isDefending@CvUnit@@QBE_NXZ		; CvUnit::isDefending

; 1938 : 
; 1939 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1940 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1941 : }

	ret	0
?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsDefending
_TEXT	ENDS
PUBLIC	?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsInCombat
EXTRN	?isInCombat@CvUnit@@QBE_NXZ:PROC		; CvUnit::isInCombat
; Function compile flags: /Ogtpy
;	COMDAT ?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsInCombat, COMDAT

; 1945 : {

	push	ebx
	push	ebp
	push	esi

; 1946 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsInComba
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsInComba
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsInComba
	xor	bl, bl
$LN5@lIsInComba:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsInComba
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsInComba:

; 1947 : 	const bool bResult = pkUnit->isInCombat();

	mov	ecx, edi
	call	?isInCombat@CvUnit@@QBE_NXZ		; CvUnit::isInCombat

; 1948 : 
; 1949 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1950 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1951 : }

	ret	0
?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsInCombat
_TEXT	ENDS
PUBLIC	?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxHitPoints
EXTRN	?GetMaxHitPoints@CvUnit@@QBEHXZ:PROC		; CvUnit::GetMaxHitPoints
; Function compile flags: /Ogtpy
;	COMDAT ?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetMaxHitPoints, COMDAT

; 1955 : {

	push	ebx
	push	ebp
	push	esi

; 1956 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetMaxHit
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetMaxHit
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetMaxHit
	xor	bl, bl
$LN5@lGetMaxHit:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetMaxHit
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetMaxHit:

; 1957 : 
; 1958 : 	const int iResult = pkUnit->GetMaxHitPoints();

	mov	ecx, edi
	call	?GetMaxHitPoints@CvUnit@@QBEHXZ		; CvUnit::GetMaxHitPoints

; 1959 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1960 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1961 : }

	ret	0
?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetMaxHitPoints
_TEXT	ENDS
PUBLIC	?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCurrHitPoints
EXTRN	?GetCurrHitPoints@CvUnit@@QBEHXZ:PROC		; CvUnit::GetCurrHitPoints
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCurrHitPoints, COMDAT

; 1965 : {

	push	ebx
	push	ebp
	push	esi

; 1966 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetCurrHi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetCurrHi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetCurrHi
	xor	bl, bl
$LN5@lGetCurrHi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetCurrHi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetCurrHi:

; 1967 : 
; 1968 : 	const int iResult = pkUnit->GetCurrHitPoints();

	mov	ecx, edi
	call	?GetCurrHitPoints@CvUnit@@QBEHXZ	; CvUnit::GetCurrHitPoints

; 1969 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1970 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1971 : }

	ret	0
?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCurrHitPoints
_TEXT	ENDS
PUBLIC	?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsHurt
EXTRN	?IsHurt@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsHurt
; Function compile flags: /Ogtpy
;	COMDAT ?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsHurt, COMDAT

; 1975 : {

	push	ebx
	push	ebp
	push	esi

; 1976 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsHurt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsHurt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsHurt
	xor	bl, bl
$LN5@lIsHurt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsHurt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsHurt:

; 1977 : 	const bool bResult = pkUnit->IsHurt();

	mov	ecx, edi
	call	?IsHurt@CvUnit@@QBE_NXZ			; CvUnit::IsHurt

; 1978 : 
; 1979 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1980 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1981 : }

	ret	0
?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsHurt
_TEXT	ENDS
PUBLIC	?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsDead
EXTRN	?IsDead@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsDead
; Function compile flags: /Ogtpy
;	COMDAT ?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsDead, COMDAT

; 1985 : {

	push	ebx
	push	ebp
	push	esi

; 1986 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsDead
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsDead
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsDead
	xor	bl, bl
$LN5@lIsDead:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsDead
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsDead:

; 1987 : 	const bool bResult = pkUnit->IsDead();

	mov	ecx, edi
	call	?IsDead@CvUnit@@QBE_NXZ			; CvUnit::IsDead

; 1988 : 
; 1989 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1990 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1991 : }

	ret	0
?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsDead
_TEXT	ENDS
PUBLIC	?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsDelayedDeath
EXTRN	?isDelayedDeath@CvUnit@@QBE_NXZ:PROC		; CvUnit::isDelayedDeath
; Function compile flags: /Ogtpy
;	COMDAT ?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsDelayedDeath, COMDAT

; 1995 : {

	push	ebx
	push	ebp
	push	esi

; 1996 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsDelayed
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsDelayed
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsDelayed
	xor	bl, bl
$LN5@lIsDelayed:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsDelayed
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsDelayed:

; 1997 : 	const bool bResult = pkUnit->isDelayedDeath();

	mov	ecx, edi
	call	?isDelayedDeath@CvUnit@@QBE_NXZ		; CvUnit::isDelayedDeath

; 1998 : 
; 1999 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2000 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2001 : }

	ret	0
?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsDelayedDeath
_TEXT	ENDS
PUBLIC	?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetBaseCombatStrength
EXTRN	?SetBaseCombatStrength@CvUnit@@QAEXH@Z:PROC	; CvUnit::SetBaseCombatStrength
; Function compile flags: /Ogtpy
;	COMDAT ?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lSetBaseCombatStrength, COMDAT

; 2005 : {

	push	ebx
	push	ebp
	push	esi

; 2006 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetBaseCo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetBaseCo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetBaseCo
	xor	bl, bl
$LN5@lSetBaseCo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetBaseCo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetBaseCo:

; 2007 : 	const int iCombat = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2008 : 
; 2009 : 	pkUnit->SetBaseCombatStrength(iCombat);

	push	eax
	mov	ecx, edi
	call	?SetBaseCombatStrength@CvUnit@@QAEXH@Z	; CvUnit::SetBaseCombatStrength
	pop	edi
	pop	esi
	pop	ebp

; 2010 : 	return 0;

	xor	eax, eax
	pop	ebx

; 2011 : }

	ret	0
?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lSetBaseCombatStrength
_TEXT	ENDS
PUBLIC	?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBaseCombatStrength
EXTRN	?GetBaseCombatStrength@CvUnit@@QBEH_N@Z:PROC	; CvUnit::GetBaseCombatStrength
; Function compile flags: /Ogtpy
;	COMDAT ?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetBaseCombatStrength, COMDAT

; 2015 : {

	push	ebx
	push	ebp
	push	esi

; 2016 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetBaseCo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetBaseCo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetBaseCo
	xor	bl, bl
$LN5@lGetBaseCo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetBaseCo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetBaseCo:

; 2017 : 
; 2018 : 	const int iResult = pkUnit->GetBaseCombatStrength();

	push	0
	mov	ecx, edi
	call	?GetBaseCombatStrength@CvUnit@@QBEH_N@Z	; CvUnit::GetBaseCombatStrength

; 2019 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2020 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2021 : }

	ret	0
?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetBaseCombatStrength
_TEXT	ENDS
PUBLIC	?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsCanDefend
EXTRN	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::IsCanDefend
; Function compile flags: /Ogtpy
;	COMDAT ?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCanDefend, COMDAT

; 2035 : {

	push	ebx
	push	ebp
	push	esi

; 2036 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	xor	ebp, ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsCanDefe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsCanDefe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	ebp, eax
	add	esp, 8
	test	ebp, ebp
	je	SHORT $LN5@lIsCanDefe
	xor	bl, bl
$LN5@lIsCanDefe:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsCanDefe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsCanDefe:

; 2037 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebx, eax
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lIsCanDefe
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lIsCanDefe
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	edi, eax
$LN14@lIsCanDefe:
	push	ebx
	push	esi
	call	_lua_settop
	add	esp, 8

; 2038 : 	const bool bResult = pkUnit->IsCanDefend(pkPlot);

	push	edi
	mov	ecx, ebp
	call	?IsCanDefend@CvUnit@@QBE_NPBVCvPlot@@@Z	; CvUnit::IsCanDefend

; 2039 : 
; 2040 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2041 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2042 : }

	ret	0
?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCanDefend
_TEXT	ENDS
PUBLIC	?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackWithMove
EXTRN	?IsCanAttackWithMove@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsCanAttackWithMove
; Function compile flags: /Ogtpy
;	COMDAT ?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsCanAttackWithMove, COMDAT

; 2046 : {

	push	ebx
	push	ebp
	push	esi

; 2047 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsCanAtta
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsCanAtta
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsCanAtta
	xor	bl, bl
$LN5@lIsCanAtta:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsCanAtta
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsCanAtta:

; 2048 : 	const bool bResult = pkUnit->IsCanAttackWithMove();

	mov	ecx, edi
	call	?IsCanAttackWithMove@CvUnit@@QBE_NXZ	; CvUnit::IsCanAttackWithMove

; 2049 : 
; 2050 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2051 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2052 : }

	ret	0
?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsCanAttackWithMove
_TEXT	ENDS
PUBLIC	?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackRanged
EXTRN	?IsCanAttackRanged@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCanAttackRanged
; Function compile flags: /Ogtpy
;	COMDAT ?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCanAttackRanged, COMDAT

; 2056 : {

	push	ebx
	push	ebp
	push	esi

; 2057 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsCanAtta@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsCanAtta@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsCanAtta@2
	xor	bl, bl
$LN5@lIsCanAtta@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsCanAtta@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsCanAtta@2:

; 2058 : 	const bool bResult = pkUnit->IsCanAttackRanged();

	mov	ecx, edi
	call	?IsCanAttackRanged@CvUnit@@QBE_NXZ	; CvUnit::IsCanAttackRanged

; 2059 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2060 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2061 : }

	ret	0
?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCanAttackRanged
_TEXT	ENDS
PUBLIC	?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsCanAttack
EXTRN	?IsCanAttack@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCanAttack
; Function compile flags: /Ogtpy
;	COMDAT ?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCanAttack, COMDAT

; 2066 : {

	push	ebx
	push	ebp
	push	esi

; 2067 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsCanAtta@3
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsCanAtta@3
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsCanAtta@3
	xor	bl, bl
$LN5@lIsCanAtta@3:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsCanAtta@3
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsCanAtta@3:

; 2068 : 	const bool bResult = pkUnit->IsCanAttack();

	mov	ecx, edi
	call	?IsCanAttack@CvUnit@@QBE_NXZ		; CvUnit::IsCanAttack

; 2069 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2070 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2071 : }

	ret	0
?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCanAttack
_TEXT	ENDS
PUBLIC	?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackWithMoveNow
EXTRN	?IsCanAttackWithMoveNow@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsCanAttackWithMoveNow
; Function compile flags: /Ogtpy
;	COMDAT ?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsCanAttackWithMoveNow, COMDAT

; 2076 : {

	push	ebx
	push	ebp
	push	esi

; 2077 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsCanAtta@4
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsCanAtta@4
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsCanAtta@4
	xor	bl, bl
$LN5@lIsCanAtta@4:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsCanAtta@4
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsCanAtta@4:

; 2078 : 	const bool bResult = pkUnit->IsCanAttackWithMoveNow();

	mov	ecx, edi
	call	?IsCanAttackWithMoveNow@CvUnit@@QBE_NXZ	; CvUnit::IsCanAttackWithMoveNow

; 2079 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2080 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2081 : }

	ret	0
?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsCanAttackWithMoveNow
_TEXT	ENDS
PUBLIC	?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxAttackStrength
EXTRN	?GetMaxAttackStrength@CvUnit@@QBEHPBVCvPlot@@0PBV1@@Z:PROC ; CvUnit::GetMaxAttackStrength
; Function compile flags: /Ogtpy
;	COMDAT ?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228107 = -4					; size = 4
_L$ = 8							; size = 4
?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetMaxAttackStrength, COMDAT

; 2086 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 2087 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	xor	ebp, ebp
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228107[esp+32], ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetMaxAtt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetMaxAtt
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228107[esp+20], eax
	cmp	eax, ebp
	je	SHORT $LN5@lGetMaxAtt
	xor	bl, bl
$LN5@lGetMaxAtt:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetMaxAtt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetMaxAtt:

; 2088 : 	CvPlot* pkFromPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	edi, eax
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lGetMaxAtt
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetMaxAtt
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	ebp, eax
$LN14@lGetMaxAtt:
	push	edi
	push	esi
	call	_lua_settop

; 2089 : 	CvPlot* pToPlot = CvLuaPlot::GetInstance(L, 3, false);

	push	esi
	call	_lua_gettop
	push	3
	push	esi
	mov	ebx, eax
	xor	edi, edi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 5
	jne	SHORT $LN21@lGetMaxAtt
	push	OFFSET $SG224163
	push	3
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN21@lGetMaxAtt
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	edi, eax
$LN21@lGetMaxAtt:
	push	ebx
	push	esi
	call	_lua_settop

; 2090 : 	CvUnit* pkDefender = GetInstance(L, 4, false);

	push	0
	push	4
	push	esi
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance

; 2091 : 
; 2092 : 	const int iResult = pkUnit->GetMaxAttackStrength(pkFromPlot, pToPlot, pkDefender);

	mov	ecx, DWORD PTR _pkInstance$228107[esp+40]
	add	esp, 20					; 00000014H
	push	eax
	push	edi
	push	ebp
	call	?GetMaxAttackStrength@CvUnit@@QBEHPBVCvPlot@@0PBV1@@Z ; CvUnit::GetMaxAttackStrength

; 2093 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2094 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2095 : }

	pop	ecx
	ret	0
?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetMaxAttackStrength
_TEXT	ENDS
PUBLIC	?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxDefenseStrength
EXTRN	?GetMaxDefenseStrength@CvUnit@@QBEHPBVCvPlot@@PBV1@_N@Z:PROC ; CvUnit::GetMaxDefenseStrength
; Function compile flags: /Ogtpy
;	COMDAT ?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bFromRangedAttack$ = -4				; size = 1
_L$ = 8							; size = 4
?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetMaxDefenseStrength, COMDAT

; 2100 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 2101 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	xor	ebp, ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetMaxDef
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetMaxDef
	push	-1
	push	esi
	call	_lua_touserdata
	mov	ebp, eax
	add	esp, 8
	test	ebp, ebp
	je	SHORT $LN5@lGetMaxDef
	xor	bl, bl
$LN5@lGetMaxDef:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetMaxDef
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetMaxDef:

; 2102 : 	CvPlot* pInPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	edi, eax
	xor	ebx, ebx
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lGetMaxDef
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetMaxDef
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	ebx, eax
$LN14@lGetMaxDef:
	push	edi
	push	esi
	call	_lua_settop

; 2103 : 	CvUnit* pkAttacker = GetInstance(L, 3, false);

	push	0
	push	3
	push	esi
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance

; 2104 : 	bool bFromRangedAttack = luaL_optbool(L, 4, false);

	push	0
	push	4
	push	esi
	mov	edi, eax
	call	?luaL_optbool@@YA_NPAUlua_State@@H_N@Z	; luaL_optbool
	add	esp, 32					; 00000020H
	mov	BYTE PTR _bFromRangedAttack$[esp+20], al

; 2105 : 
; 2106 : 	const int iResult = pkUnit->GetMaxDefenseStrength(pInPlot, pkAttacker, bFromRangedAttack);

	mov	eax, DWORD PTR _bFromRangedAttack$[esp+20]
	push	eax
	push	edi
	push	ebx
	mov	ecx, ebp
	call	?GetMaxDefenseStrength@CvUnit@@QBEHPBVCvPlot@@PBV1@_N@Z ; CvUnit::GetMaxDefenseStrength

; 2107 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2108 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2109 : }

	pop	ecx
	ret	0
?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetMaxDefenseStrength
_TEXT	ENDS
PUBLIC	?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetEmbarkedUnitDefense
EXTRN	?GetEmbarkedUnitDefense@CvUnit@@QBEHXZ:PROC	; CvUnit::GetEmbarkedUnitDefense
; Function compile flags: /Ogtpy
;	COMDAT ?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetEmbarkedUnitDefense, COMDAT

; 2114 : {

	push	ebx
	push	ebp
	push	esi

; 2115 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetEmbark
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetEmbark
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetEmbark
	xor	bl, bl
$LN5@lGetEmbark:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetEmbark
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetEmbark:

; 2116 : 	const int iResult = pkUnit->GetEmbarkedUnitDefense();

	mov	ecx, edi
	call	?GetEmbarkedUnitDefense@CvUnit@@QBEHXZ	; CvUnit::GetEmbarkedUnitDefense

; 2117 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2118 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2119 : }

	ret	0
?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetEmbarkedUnitDefense
_TEXT	ENDS
PUBLIC	?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanSiege
EXTRN	?canSiege@CvUnit@@QBE_NW4TeamTypes@@@Z:PROC	; CvUnit::canSiege
; Function compile flags: /Ogtpy
;	COMDAT ?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lCanSiege, COMDAT

; 2124 : {

	push	ebx
	push	ebp
	push	esi

; 2125 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanSiege
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanSiege
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanSiege
	xor	bl, bl
$LN5@lCanSiege:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanSiege
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanSiege:

; 2126 : 	const TeamTypes eTeam = (TeamTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2127 : 	const bool bResult = pkUnit->canSiege(eTeam);

	push	eax
	mov	ecx, edi
	call	?canSiege@CvUnit@@QBE_NW4TeamTypes@@@Z	; CvUnit::canSiege

; 2128 : 
; 2129 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2130 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2131 : }

	ret	0
?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lCanSiege
_TEXT	ENDS
PUBLIC	?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyInMovementRange
EXTRN	?IsEnemyInMovementRange@CvUnit@@QAE_N_N0@Z:PROC	; CvUnit::IsEnemyInMovementRange
; Function compile flags: /Ogtpy
;	COMDAT ?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bOnlyCities$ = -8					; size = 1
_bOnlyFortified$ = -4					; size = 1
_L$ = 8							; size = 4
?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsEnemyInMovementRange, COMDAT

; 2135 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 2136 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsEnemyIn
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsEnemyIn
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsEnemyIn
	xor	bl, bl
$LN5@lIsEnemyIn:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsEnemyIn
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsEnemyIn:

; 2137 : 	const bool bOnlyFortified = lua_toboolean(L, 2);

	push	2
	push	esi
	call	_lua_toboolean
	test	eax, eax
	setne	al

; 2138 : 	const bool bOnlyCities = lua_toboolean(L, 3);

	push	3
	push	esi
	mov	BYTE PTR _bOnlyFortified$[esp+40], al
	call	_lua_toboolean
	add	esp, 16					; 00000010H
	test	eax, eax

; 2139 : 
; 2140 : 	lua_pushboolean(L, pkUnit->IsEnemyInMovementRange(bOnlyFortified, bOnlyCities));

	mov	eax, DWORD PTR _bOnlyFortified$[esp+24]
	setne	cl
	mov	BYTE PTR _bOnlyCities$[esp+24], cl
	mov	edx, DWORD PTR _bOnlyCities$[esp+24]
	push	edx
	push	eax
	mov	ecx, edi
	call	?IsEnemyInMovementRange@CvUnit@@QAE_N_N0@Z ; CvUnit::IsEnemyInMovementRange
	movzx	ecx, al
	push	ecx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2141 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2142 : }

	add	esp, 8
	ret	0
?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsEnemyInMovementRange
_TEXT	ENDS
PUBLIC	?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsTrade
EXTRN	?isTrade@CvUnit@@QBE_NXZ:PROC			; CvUnit::isTrade
; Function compile flags: /Ogtpy
;	COMDAT ?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsTrade, COMDAT

; 2146 : {

	push	ebx
	push	ebp
	push	esi

; 2147 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsTrade
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsTrade
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsTrade
	xor	bl, bl
$LN5@lIsTrade:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsTrade
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsTrade:

; 2148 : 	lua_pushboolean(L, pkUnit->isTrade());

	mov	ecx, edi
	call	?isTrade@CvUnit@@QBE_NXZ		; CvUnit::isTrade
	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2149 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2150 : }

	ret	0
?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsTrade
_TEXT	ENDS
PUBLIC	?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBaseRangedCombatStrength
EXTRN	?GetBaseRangedCombatStrength@CvUnit@@QBEHXZ:PROC ; CvUnit::GetBaseRangedCombatStrength
; Function compile flags: /Ogtpy
;	COMDAT ?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetBaseRangedCombatStrength, COMDAT

; 2155 : {

	push	ebx
	push	ebp
	push	esi

; 2156 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetBaseRa
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetBaseRa
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetBaseRa
	xor	bl, bl
$LN5@lGetBaseRa:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetBaseRa
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetBaseRa:

; 2157 : 
; 2158 : 	const int iResult = pkUnit->GetBaseRangedCombatStrength();

	mov	ecx, edi
	call	?GetBaseRangedCombatStrength@CvUnit@@QBEHXZ ; CvUnit::GetBaseRangedCombatStrength

; 2159 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2160 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2161 : }

	ret	0
?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetBaseRangedCombatStrength
_TEXT	ENDS
PUBLIC	?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxRangedCombatStrength
EXTRN	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z:PROC ; CvUnit::GetMaxRangedCombatStrength
; Function compile flags: /Ogtpy
;	COMDAT ?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228273 = -12				; size = 4
_bForRangedAttack$ = -8					; size = 1
_bAttacking$ = -4					; size = 1
_L$ = 8							; size = 4
?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetMaxRangedCombatStrength, COMDAT

; 2165 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi

; 2166 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+20]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228273[esp+40], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN19@lGetMaxRan
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN19@lGetMaxRan
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228273[esp+28], eax
	test	eax, eax
	je	SHORT $LN19@lGetMaxRan
	xor	bl, bl
$LN19@lGetMaxRan:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetMaxRan
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetMaxRan:

; 2167 : 	CvUnit* pkOther = GetInstance(L, 2, false);

	push	0
	push	2
	push	esi
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance

; 2168 : 	CvCity* pkCity = CvLuaCity::GetInstance(L, 3, false);

	push	esi
	mov	ebx, eax
	call	_lua_gettop
	push	3
	push	esi
	mov	ebp, eax
	xor	edi, edi
	call	_lua_type
	add	esp, 24					; 00000018H
	cmp	eax, 5
	jne	SHORT $LN14@lGetMaxRan
	push	OFFSET $SG224123
	push	3
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetMaxRan
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	edi, eax
$LN14@lGetMaxRan:
	push	ebp
	push	esi
	call	_lua_settop

; 2169 : 	const bool bAttacking = lua_toboolean(L, 4);

	push	4
	push	esi
	call	_lua_toboolean
	test	eax, eax
	setne	al

; 2170 : 	const bool bForRangedAttack = lua_toboolean(L, 5);

	push	5
	push	esi
	mov	BYTE PTR _bAttacking$[esp+52], al
	call	_lua_toboolean
	add	esp, 24					; 00000018H
	test	eax, eax

; 2171 : 
; 2172 : 	const int iResult = pkUnit->GetMaxRangedCombatStrength(pkOther, pkCity, bAttacking, bForRangedAttack);

	mov	eax, DWORD PTR _bAttacking$[esp+28]
	setne	cl
	mov	BYTE PTR _bForRangedAttack$[esp+28], cl
	mov	edx, DWORD PTR _bForRangedAttack$[esp+28]
	mov	ecx, DWORD PTR _pkInstance$228273[esp+28]
	push	edx
	push	eax
	push	edi
	push	ebx
	call	?GetMaxRangedCombatStrength@CvUnit@@QBEHPBV1@PBVCvCity@@_N2@Z ; CvUnit::GetMaxRangedCombatStrength

; 2173 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2174 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2175 : }

	add	esp, 12					; 0000000cH
	ret	0
?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetMaxRangedCombatStrength
_TEXT	ENDS
PUBLIC	?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetCombatLimit
EXTRN	?GetCombatLimit@CvUnit@@QBEHXZ:PROC		; CvUnit::GetCombatLimit
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCombatLimit, COMDAT

; 2179 : {

	push	ebx
	push	ebp
	push	esi

; 2180 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetCombat@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetCombat@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetCombat@2
	xor	bl, bl
$LN5@lGetCombat@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetCombat@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetCombat@2:

; 2181 : 
; 2182 : 	const int iResult = pkUnit->GetCombatLimit();

	mov	ecx, edi
	call	?GetCombatLimit@CvUnit@@QBEHXZ		; CvUnit::GetCombatLimit

; 2183 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2184 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2185 : }

	ret	0
?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCombatLimit
_TEXT	ENDS
PUBLIC	?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangedCombatLimit
EXTRN	?GetRangedCombatLimit@CvUnit@@QBEHXZ:PROC	; CvUnit::GetRangedCombatLimit
; Function compile flags: /Ogtpy
;	COMDAT ?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetRangedCombatLimit, COMDAT

; 2189 : {

	push	ebx
	push	ebp
	push	esi

; 2190 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetRanged
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetRanged
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetRanged
	xor	bl, bl
$LN5@lGetRanged:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetRanged
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetRanged:

; 2191 : 
; 2192 : 	const int iResult = pkUnit->GetRangedCombatLimit();

	mov	ecx, edi
	call	?GetRangedCombatLimit@CvUnit@@QBEHXZ	; CvUnit::GetRangedCombatLimit

; 2193 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2194 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2195 : }

	ret	0
?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetRangedCombatLimit
_TEXT	ENDS
PUBLIC	?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirAttack
EXTRN	?canAirAttack@CvUnit@@QBE_NXZ:PROC		; CvUnit::canAirAttack
; Function compile flags: /Ogtpy
;	COMDAT ?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirAttack, COMDAT

; 2199 : {

	push	ebx
	push	ebp
	push	esi

; 2200 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanAirAtt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanAirAtt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanAirAtt
	xor	bl, bl
$LN5@lCanAirAtt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanAirAtt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanAirAtt:

; 2201 : 	const bool bResult = pkUnit->canAirAttack();

	mov	ecx, edi
	call	?canAirAttack@CvUnit@@QBE_NXZ		; CvUnit::canAirAttack

; 2202 : 
; 2203 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2204 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2205 : }

	ret	0
?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirAttack
_TEXT	ENDS
PUBLIC	?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCanAirDefend
EXTRN	?canAirDefend@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC	; CvUnit::canAirDefend
; Function compile flags: /Ogtpy
;	COMDAT ?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanAirDefend, COMDAT

; 2209 : {

	push	ebx
	push	ebp
	push	esi

; 2210 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	xor	ebp, ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanAirDef
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanAirDef
	push	-1
	push	esi
	call	_lua_touserdata
	mov	ebp, eax
	add	esp, 8
	test	ebp, ebp
	je	SHORT $LN5@lCanAirDef
	xor	bl, bl
$LN5@lCanAirDef:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanAirDef
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanAirDef:

; 2211 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebx, eax
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lCanAirDef
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanAirDef
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	edi, eax
$LN14@lCanAirDef:
	push	ebx
	push	esi
	call	_lua_settop
	add	esp, 8

; 2212 : 	const bool bResult = pkUnit->canAirDefend(pkPlot);

	push	edi
	mov	ecx, ebp
	call	?canAirDefend@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canAirDefend

; 2213 : 
; 2214 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2215 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2216 : }

	ret	0
?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanAirDefend
_TEXT	ENDS
PUBLIC	?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAirCombatDamage
EXTRN	?GetAirCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z:PROC ; CvUnit::GetAirCombatDamage
; Function compile flags: /Ogtpy
;	COMDAT ?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228407 = -12				; size = 4
_pkInstance$228391 = -8					; size = 4
_bIncludeRand$ = -4					; size = 1
_L$ = 8							; size = 4
?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetAirCombatDamage, COMDAT

; 2220 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi

; 2221 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+20]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	xor	ebp, ebp
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228391[esp+40], ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN28@lGetAirCom
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN28@lGetAirCom
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228391[esp+28], eax
	cmp	eax, ebp
	je	SHORT $LN28@lGetAirCom
	xor	bl, bl
$LN28@lGetAirCom:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetAirCom
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetAirCom:

; 2222 : 	CvUnit* pkDefender = GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228407[esp+40], ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lGetAirCom
	push	OFFSET $SG224203
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetAirCom
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228407[esp+28], eax
	cmp	eax, ebp
	je	SHORT $LN14@lGetAirCom
	xor	bl, bl
$LN14@lGetAirCom:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN19@lGetAirCom
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN19@lGetAirCom:

; 2223 : 	CvCity* pkCity = CvLuaCity::GetInstance(L, 3);

	push	esi
	call	_lua_gettop
	push	3
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN23@lGetAirCom
	push	OFFSET $SG224123
	push	3
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN23@lGetAirCom
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN23@lGetAirCom
	xor	bl, bl
$LN23@lGetAirCom:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN22@lGetAirCom
	push	esi
	call	?HandleMissingInstance@CvLuaCity@@SAXPAUlua_State@@@Z ; CvLuaCity::HandleMissingInstance
	add	esp, 4
$LN22@lGetAirCom:

; 2224 : 	const bool bIncludeRand = lua_toboolean(L, 4);

	push	4
	push	esi
	call	_lua_toboolean

; 2225 : 
; 2226 : 	const int iResult = pkUnit->GetAirCombatDamage(pkDefender, pkCity, bIncludeRand);

	mov	edx, DWORD PTR _pkInstance$228407[esp+36]
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bIncludeRand$[esp+28], al
	mov	ecx, DWORD PTR _bIncludeRand$[esp+28]
	push	0
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$228391[esp+36]
	push	edi
	push	edx
	call	?GetAirCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z ; CvUnit::GetAirCombatDamage

; 2227 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2228 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2229 : }

	add	esp, 12					; 0000000cH
	ret	0
?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetAirCombatDamage
_TEXT	ENDS
PUBLIC	?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangeCombatDamage
EXTRN	?GetRangeCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z:PROC ; CvUnit::GetRangeCombatDamage
; Function compile flags: /Ogtpy
;	COMDAT ?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228438 = -8					; size = 4
_bIncludeRand$ = -4					; size = 1
_L$ = 8							; size = 4
?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetRangeCombatDamage, COMDAT

; 2233 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 2234 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228438[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN19@lGetRangeC
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN19@lGetRangeC
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228438[esp+24], eax
	test	eax, eax
	je	SHORT $LN19@lGetRangeC
	xor	bl, bl
$LN19@lGetRangeC:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetRangeC
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetRangeC:

; 2235 : 	CvUnit* pkDefender = GetInstance(L, 2, false);

	push	0
	push	2
	push	esi
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance

; 2236 : 	CvCity* pkCity = CvLuaCity::GetInstance(L, 3, false);

	push	esi
	mov	ebx, eax
	call	_lua_gettop
	push	3
	push	esi
	mov	ebp, eax
	xor	edi, edi
	call	_lua_type
	add	esp, 24					; 00000018H
	cmp	eax, 5
	jne	SHORT $LN14@lGetRangeC
	push	OFFSET $SG224123
	push	3
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetRangeC
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	edi, eax
$LN14@lGetRangeC:
	push	ebp
	push	esi
	call	_lua_settop

; 2237 : 	const bool bIncludeRand = lua_toboolean(L, 4);

	push	4
	push	esi
	call	_lua_toboolean
	add	esp, 16					; 00000010H
	test	eax, eax
	setne	al
	mov	BYTE PTR _bIncludeRand$[esp+24], al

; 2238 : 
; 2239 : 	const int iResult = pkUnit->GetRangeCombatDamage(pkDefender, pkCity, bIncludeRand);

	mov	ecx, DWORD PTR _bIncludeRand$[esp+24]
	push	0
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$228438[esp+32]
	push	edi
	push	ebx
	call	?GetRangeCombatDamage@CvUnit@@QBEHPBV1@PAVCvCity@@_NH@Z ; CvUnit::GetRangeCombatDamage

; 2240 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2241 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2242 : }

	add	esp, 8
	ret	0
?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetRangeCombatDamage
_TEXT	ENDS
PUBLIC	?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAirStrikeDefenseDamage
EXTRN	?GetAirStrikeDefenseDamage@CvUnit@@QBEHPBV1@_N@Z:PROC ; CvUnit::GetAirStrikeDefenseDamage
; Function compile flags: /Ogtpy
;	COMDAT ?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228469 = -8					; size = 4
_bIncludeRand$ = -4					; size = 1
_L$ = 8							; size = 4
?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetAirStrikeDefenseDamage, COMDAT

; 2246 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 2247 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228469[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetAirStr
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetAirStr
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228469[esp+24], eax
	test	eax, eax
	je	SHORT $LN5@lGetAirStr
	xor	bl, bl
$LN5@lGetAirStr:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetAirStr
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetAirStr:

; 2248 : 	CvUnit* pkAttacker = GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lGetAirStr
	push	OFFSET $SG224203
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetAirStr
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lGetAirStr
	xor	bl, bl
$LN14@lGetAirStr:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN19@lGetAirStr
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN19@lGetAirStr:

; 2249 : 	const bool bIncludeRand = lua_toboolean(L, 3);

	push	3
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bIncludeRand$[esp+24], al

; 2250 : 
; 2251 : 	const int iResult = pkUnit->GetAirStrikeDefenseDamage(pkAttacker, bIncludeRand);

	mov	ecx, DWORD PTR _bIncludeRand$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$228469[esp+28]
	push	edi
	call	?GetAirStrikeDefenseDamage@CvUnit@@QBEHPBV1@_N@Z ; CvUnit::GetAirStrikeDefenseDamage

; 2252 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2253 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2254 : }

	add	esp, 8
	ret	0
?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetAirStrikeDefenseDamage
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
PUBLIC	?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBestInterceptor
EXTRN	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z:PROC ; CvUnit::GetBestInterceptor
; Function compile flags: /Ogtpy
;	COMDAT ?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228504 = -12				; size = 4
_bVisibleInterceptorsOnly$ = -8				; size = 1
_bLandInterceptorsOnly$ = -4				; size = 1
_L$ = 8							; size = 4
?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetBestInterceptor, COMDAT

; 2258 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi

; 2259 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228504[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetBestIn
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetBestIn
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228504[esp+24], eax
	test	eax, eax
	je	SHORT $LN6@lGetBestIn
	xor	bl, bl
$LN6@lGetBestIn:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetBestIn
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetBestIn:
	push	ebp

; 2260 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lGetBestIn
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lGetBestIn
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lGetBestIn
	xor	bl, bl
$LN15@lGetBestIn:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	pop	ebp
	test	bl, bl
	je	SHORT $LN14@lGetBestIn
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lGetBestIn:

; 2261 : 	CvUnit* pkDefender = GetInstance(L, 3, false);

	push	0
	push	3
	push	esi
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance

; 2262 : 	const bool bLandInterceptorsOnly = lua_toboolean(L, 4);

	push	4
	push	esi
	mov	ebx, eax
	call	_lua_toboolean
	test	eax, eax
	setne	al

; 2263 : 	const bool bVisibleInterceptorsOnly = lua_toboolean(L, 5);

	push	5
	push	esi
	mov	BYTE PTR _bLandInterceptorsOnly$[esp+52], al
	call	_lua_toboolean
	add	esp, 28					; 0000001cH
	test	eax, eax
	setne	cl

; 2264 : 
; 2265 : 	CvUnit* pkBestUnit = 0;

	xor	eax, eax
	mov	BYTE PTR _bVisibleInterceptorsOnly$[esp+24], cl

; 2266 : 	if(pkPlot)

	test	edi, edi
	je	SHORT $LN1@lGetBestIn

; 2267 : 	{
; 2268 : 		pkBestUnit = pkUnit->GetBestInterceptor(*pkPlot, pkDefender, bLandInterceptorsOnly, bVisibleInterceptorsOnly);

	mov	edx, DWORD PTR _bVisibleInterceptorsOnly$[esp+24]
	mov	eax, DWORD PTR _bLandInterceptorsOnly$[esp+24]
	mov	ecx, DWORD PTR _pkInstance$228504[esp+24]
	push	edx
	push	eax
	push	ebx
	push	edi
	call	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z ; CvUnit::GetBestInterceptor
$LN1@lGetBestIn:

; 2269 : 	}
; 2270 : 
; 2271 : 	CvLuaUnit::Push(L, pkBestUnit);

	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
	add	esp, 8
	pop	edi
	pop	esi

; 2272 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2273 : }

	add	esp, 12					; 0000000cH
	ret	0
?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetBestInterceptor
_TEXT	ENDS
PUBLIC	?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetInterceptorCount
EXTRN	?GetInterceptorCount@CvUnit@@QBEHABVCvPlot@@PAV1@_N2@Z:PROC ; CvUnit::GetInterceptorCount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228541 = -12				; size = 4
_bVisibleInterceptorsOnly$ = -8				; size = 1
_bLandInterceptorsOnly$ = -4				; size = 1
_L$ = 8							; size = 4
?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetInterceptorCount, COMDAT

; 2277 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi

; 2278 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228541[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetInterc
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetInterc
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228541[esp+24], eax
	test	eax, eax
	je	SHORT $LN6@lGetInterc
	xor	bl, bl
$LN6@lGetInterc:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetInterc
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetInterc:
	push	ebp

; 2279 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lGetInterc
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lGetInterc
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lGetInterc
	xor	bl, bl
$LN15@lGetInterc:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	pop	ebp
	test	bl, bl
	je	SHORT $LN14@lGetInterc
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lGetInterc:

; 2280 : 	CvUnit* pkDefender = GetInstance(L, 3, false);

	push	0
	push	3
	push	esi
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance

; 2281 : 	const bool bLandInterceptorsOnly = lua_toboolean(L, 4);

	push	4
	push	esi
	mov	ebx, eax
	call	_lua_toboolean
	test	eax, eax
	setne	al

; 2282 : 	const bool bVisibleInterceptorsOnly = lua_toboolean(L, 5);

	push	5
	push	esi
	mov	BYTE PTR _bLandInterceptorsOnly$[esp+52], al
	call	_lua_toboolean
	add	esp, 28					; 0000001cH
	test	eax, eax
	setne	cl

; 2283 : 
; 2284 : 	int iCount  = 0;

	xor	eax, eax
	mov	BYTE PTR _bVisibleInterceptorsOnly$[esp+24], cl

; 2285 : 	if(pkPlot)

	test	edi, edi
	je	SHORT $LN1@lGetInterc

; 2286 : 	{
; 2287 : 		iCount = pkUnit->GetInterceptorCount(*pkPlot, pkDefender, bLandInterceptorsOnly, bVisibleInterceptorsOnly);

	mov	edx, DWORD PTR _bVisibleInterceptorsOnly$[esp+24]
	mov	eax, DWORD PTR _bLandInterceptorsOnly$[esp+24]
	mov	ecx, DWORD PTR _pkInstance$228541[esp+24]
	push	edx
	push	eax
	push	ebx
	push	edi
	call	?GetInterceptorCount@CvUnit@@QBEHABVCvPlot@@PAV1@_N2@Z ; CvUnit::GetInterceptorCount
$LN1@lGetInterc:

; 2288 : 	}
; 2289 : 
; 2290 : 	lua_pushinteger(L, iCount);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi

; 2291 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2292 : }

	add	esp, 12					; 0000000cH
	ret	0
?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetInterceptorCount
_TEXT	ENDS
PUBLIC	?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBestSeaPillageInterceptor
; Function compile flags: /Ogtpy
;	COMDAT ?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228571 = -4					; size = 4
_L$ = 8							; size = 4
?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetBestSeaPillageInterceptor, COMDAT

; 2296 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 2297 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228571[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetBestSe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetBestSe
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228571[esp+20], eax
	test	eax, eax
	je	SHORT $LN6@lGetBestSe
	xor	bl, bl
$LN6@lGetBestSe:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetBestSe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetBestSe:

; 2298 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lGetBestSe
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lGetBestSe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lGetBestSe
	xor	bl, bl
$LN15@lGetBestSe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN14@lGetBestSe
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lGetBestSe:

; 2299 : 
; 2300 : 	CvUnit* pkBestUnit = 0;

	xor	eax, eax

; 2301 : 	if(pkPlot)

	test	edi, edi
	je	SHORT $LN1@lGetBestSe

; 2302 : 	{
; 2303 : 		pkBestUnit = pkUnit->GetBestInterceptor(*pkPlot);

	mov	ecx, DWORD PTR _pkInstance$228571[esp+20]
	push	eax
	push	eax
	push	eax
	push	edi
	call	?GetBestInterceptor@CvUnit@@QBEPAV1@ABVCvPlot@@PAV1@_N2@Z ; CvUnit::GetBestInterceptor
$LN1@lGetBestSe:

; 2304 : 	}
; 2305 : 
; 2306 : 	CvLuaUnit::Push(L, pkBestUnit);

	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2307 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2308 : }

	pop	ecx
	ret	0
?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetBestSeaPillageInterceptor
_TEXT	ENDS
PUBLIC	?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCaptureChance
EXTRN	?GetCaptureChance@CvUnit@@QAEHPAV1@@Z:PROC	; CvUnit::GetCaptureChance
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$228608 = -8					; size = 4
_iChance$ = -4						; size = 4
_L$ = 8							; size = 4
?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCaptureChance, COMDAT

; 2312 : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 2313 : 	int iChance = 0;
; 2314 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	xor	ebp, ebp
	push	esi
	mov	DWORD PTR _iChance$[esp+28], ebp
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$228608[esp+36], ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetCaptur@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetCaptur@2
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$228608[esp+24], eax
	cmp	eax, ebp
	je	SHORT $LN6@lGetCaptur@2
	xor	bl, bl
$LN6@lGetCaptur@2:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetCaptur@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetCaptur@2:

; 2315 : 	CvUnit* pkEnemy = CvLuaUnit::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lGetCaptur@2
	push	OFFSET $SG224203
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lGetCaptur@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lGetCaptur@2
	xor	bl, bl
$LN15@lGetCaptur@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN20@lGetCaptur@2
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN20@lGetCaptur@2:

; 2316 : 
; 2317 : 	if(pkEnemy)

	test	edi, edi
	je	SHORT $LN22@lGetCaptur@2

; 2318 : 	{
; 2319 : 		iChance = pkUnit->GetCaptureChance(pkEnemy);

	mov	ecx, DWORD PTR _pkInstance$228608[esp+24]
	push	edi
	call	?GetCaptureChance@CvUnit@@QAEHPAV1@@Z	; CvUnit::GetCaptureChance
	jmp	SHORT $LN1@lGetCaptur@2
$LN22@lGetCaptur@2:
	mov	eax, DWORD PTR _iChance$[esp+24]
$LN1@lGetCaptur@2:

; 2320 : 	}
; 2321 : 
; 2322 : 	lua_pushinteger(L, iChance);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2323 : 
; 2324 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2325 : }

	add	esp, 8
	ret	0
?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCaptureChance
_TEXT	ENDS
PUBLIC	?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsAutomated
EXTRN	?IsAutomated@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsAutomated
; Function compile flags: /Ogtpy
;	COMDAT ?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsAutomated, COMDAT

; 2329 : {

	push	ebx
	push	ebp
	push	esi

; 2330 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsAutomat
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsAutomat
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsAutomat
	xor	bl, bl
$LN5@lIsAutomat:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsAutomat
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsAutomat:

; 2331 : 	const bool bResult = pkUnit->IsAutomated();

	mov	ecx, edi
	call	?IsAutomated@CvUnit@@QBE_NXZ		; CvUnit::IsAutomated

; 2332 : 
; 2333 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2334 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2335 : }

	ret	0
?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsAutomated
_TEXT	ENDS
PUBLIC	?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsWaiting
EXTRN	?isWaiting@CvUnit@@QBE_NXZ:PROC			; CvUnit::isWaiting
; Function compile flags: /Ogtpy
;	COMDAT ?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsWaiting, COMDAT

; 2339 : {

	push	ebx
	push	ebp
	push	esi

; 2340 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsWaiting
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsWaiting
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsWaiting
	xor	bl, bl
$LN5@lIsWaiting:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsWaiting
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsWaiting:

; 2341 : 	const bool bResult = pkUnit->isWaiting();

	mov	ecx, edi
	call	?isWaiting@CvUnit@@QBE_NXZ		; CvUnit::isWaiting

; 2342 : 
; 2343 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2344 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2345 : }

	ret	0
?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsWaiting
_TEXT	ENDS
PUBLIC	?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsFortifyable
EXTRN	?isFortifyable@CvUnit@@QBE_N_N@Z:PROC		; CvUnit::isFortifyable
; Function compile flags: /Ogtpy
;	COMDAT ?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsFortifyable, COMDAT

; 2349 : {

	push	ebx
	push	ebp
	push	esi

; 2350 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsFortify
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsFortify
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsFortify
	xor	bl, bl
$LN5@lIsFortify:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsFortify
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsFortify:

; 2351 : 	const bool bResult = pkUnit->isFortifyable();

	push	0
	mov	ecx, edi
	call	?isFortifyable@CvUnit@@QBE_N_N@Z	; CvUnit::isFortifyable

; 2352 : 
; 2353 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2354 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2355 : }

	ret	0
?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsFortifyable
_TEXT	ENDS
PUBLIC	?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEverFortifyable
EXTRN	?IsEverFortifyable@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsEverFortifyable
; Function compile flags: /Ogtpy
;	COMDAT ?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsEverFortifyable, COMDAT

; 2358 : {

	push	ebx
	push	ebp
	push	esi

; 2359 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsEverFor
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsEverFor
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsEverFor
	xor	bl, bl
$LN5@lIsEverFor:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsEverFor
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsEverFor:

; 2360 : 	const bool bResult = pkUnit->IsEverFortifyable();

	mov	ecx, edi
	call	?IsEverFortifyable@CvUnit@@QBE_NXZ	; CvUnit::IsEverFortifyable

; 2361 : 
; 2362 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2363 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2364 : }

	ret	0
?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsEverFortifyable
_TEXT	ENDS
PUBLIC	?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFortifyModifier
EXTRN	?fortifyModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::fortifyModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFortifyModifier, COMDAT

; 2368 : {

	push	ebx
	push	ebp
	push	esi

; 2369 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lFortifyMo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lFortifyMo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lFortifyMo
	xor	bl, bl
$LN5@lFortifyMo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lFortifyMo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lFortifyMo:

; 2370 : 
; 2371 : 	const int iResult = pkUnit->fortifyModifier();

	mov	ecx, edi
	call	?fortifyModifier@CvUnit@@QBEHXZ		; CvUnit::fortifyModifier

; 2372 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2373 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2374 : }

	ret	0
?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFortifyModifier
_TEXT	ENDS
PUBLIC	?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lExperienceNeeded
EXTRN	?experienceNeeded@CvUnit@@QBEHXZ:PROC		; CvUnit::experienceNeeded
; Function compile flags: /Ogtpy
;	COMDAT ?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lExperienceNeeded, COMDAT

; 2378 : {

	push	ebx
	push	ebp
	push	esi

; 2379 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lExperienc
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lExperienc
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lExperienc
	xor	bl, bl
$LN5@lExperienc:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lExperienc
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lExperienc:

; 2380 : 
; 2381 : 	const int iResult = pkUnit->experienceNeeded();

	mov	ecx, edi
	call	?experienceNeeded@CvUnit@@QBEHXZ	; CvUnit::experienceNeeded

; 2382 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2383 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2384 : }

	ret	0
?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lExperienceNeeded
_TEXT	ENDS
PUBLIC	?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lAttackXPValue
EXTRN	?attackXPValue@CvUnit@@QBEHXZ:PROC		; CvUnit::attackXPValue
; Function compile flags: /Ogtpy
;	COMDAT ?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lAttackXPValue, COMDAT

; 2388 : {

	push	ebx
	push	ebp
	push	esi

; 2389 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lAttackXPV
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lAttackXPV
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lAttackXPV
	xor	bl, bl
$LN5@lAttackXPV:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lAttackXPV
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lAttackXPV:

; 2390 : 
; 2391 : 	const int iResult = pkUnit->attackXPValue();

	mov	ecx, edi
	call	?attackXPValue@CvUnit@@QBEHXZ		; CvUnit::attackXPValue

; 2392 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2393 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2394 : }

	ret	0
?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lAttackXPValue
_TEXT	ENDS
PUBLIC	?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lDefenseXPValue
EXTRN	?defenseXPValue@CvUnit@@QBEHXZ:PROC		; CvUnit::defenseXPValue
; Function compile flags: /Ogtpy
;	COMDAT ?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lDefenseXPValue, COMDAT

; 2398 : {

	push	ebx
	push	ebp
	push	esi

; 2399 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lDefenseXP
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lDefenseXP
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lDefenseXP
	xor	bl, bl
$LN5@lDefenseXP:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lDefenseXP
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lDefenseXP:

; 2400 : 
; 2401 : 	const int iResult = pkUnit->defenseXPValue();

	mov	ecx, edi
	call	?defenseXPValue@CvUnit@@QBEHXZ		; CvUnit::defenseXPValue

; 2402 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2403 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2404 : }

	ret	0
?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lDefenseXPValue
_TEXT	ENDS
PUBLIC	?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lMaxXPValue
EXTRN	?maxXPValue@CvUnit@@QBEHXZ:PROC			; CvUnit::maxXPValue
; Function compile flags: /Ogtpy
;	COMDAT ?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lMaxXPValue, COMDAT

; 2408 : {

	push	ebx
	push	ebp
	push	esi

; 2409 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lMaxXPValu
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lMaxXPValu
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lMaxXPValu
	xor	bl, bl
$LN5@lMaxXPValu:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lMaxXPValu
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lMaxXPValu:

; 2410 : 
; 2411 : 	const int iResult = pkUnit->maxXPValue();

	mov	ecx, edi
	call	?maxXPValue@CvUnit@@QBEHXZ		; CvUnit::maxXPValue

; 2412 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2413 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2414 : }

	ret	0
?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lMaxXPValue
_TEXT	ENDS
PUBLIC	?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lFirstStrikes
EXTRN	?firstStrikes@CvUnit@@QBEHXZ:PROC		; CvUnit::firstStrikes
; Function compile flags: /Ogtpy
;	COMDAT ?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFirstStrikes, COMDAT

; 2418 : {

	push	ebx
	push	ebp
	push	esi

; 2419 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lFirstStri
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lFirstStri
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lFirstStri
	xor	bl, bl
$LN5@lFirstStri:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lFirstStri
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lFirstStri:

; 2420 : 
; 2421 : 	const int iResult = pkUnit->firstStrikes();

	mov	ecx, edi
	call	?firstStrikes@CvUnit@@QBEHXZ		; CvUnit::firstStrikes

; 2422 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2423 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2424 : }

	ret	0
?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFirstStrikes
_TEXT	ENDS
PUBLIC	?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChanceFirstStrikes
EXTRN	?chanceFirstStrikes@CvUnit@@QBEHXZ:PROC		; CvUnit::chanceFirstStrikes
; Function compile flags: /Ogtpy
;	COMDAT ?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lChanceFirstStrikes, COMDAT

; 2428 : {

	push	ebx
	push	ebp
	push	esi

; 2429 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lChanceFir
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lChanceFir
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lChanceFir
	xor	bl, bl
$LN5@lChanceFir:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lChanceFir
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lChanceFir:

; 2430 : 
; 2431 : 	const int iResult = pkUnit->chanceFirstStrikes();

	mov	ecx, edi
	call	?chanceFirstStrikes@CvUnit@@QBEHXZ	; CvUnit::chanceFirstStrikes

; 2432 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2433 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2434 : }

	ret	0
?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lChanceFirstStrikes
_TEXT	ENDS
PUBLIC	?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxFirstStrikes
EXTRN	?maxFirstStrikes@CvUnit@@QBEHXZ:PROC		; CvUnit::maxFirstStrikes
; Function compile flags: /Ogtpy
;	COMDAT ?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lMaxFirstStrikes, COMDAT

; 2438 : {

	push	ebx
	push	ebp
	push	esi

; 2439 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lMaxFirstS
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lMaxFirstS
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lMaxFirstS
	xor	bl, bl
$LN5@lMaxFirstS:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lMaxFirstS
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lMaxFirstS:

; 2440 : 
; 2441 : 	const int iResult = pkUnit->maxFirstStrikes();

	mov	ecx, edi
	call	?maxFirstStrikes@CvUnit@@QBEHXZ		; CvUnit::maxFirstStrikes

; 2442 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2443 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2444 : }

	ret	0
?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lMaxFirstStrikes
_TEXT	ENDS
PUBLIC	?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsRanged
EXTRN	?isRanged@CvUnit@@QBE_NXZ:PROC			; CvUnit::isRanged
; Function compile flags: /Ogtpy
;	COMDAT ?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsRanged, COMDAT

; 2448 : {

	push	ebx
	push	ebp
	push	esi

; 2449 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsRanged
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsRanged
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsRanged
	xor	bl, bl
$LN5@lIsRanged:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsRanged
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsRanged:

; 2450 : 	const bool bResult = pkUnit->isRanged();

	mov	ecx, edi
	call	?isRanged@CvUnit@@QBE_NXZ		; CvUnit::isRanged

; 2451 : 
; 2452 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2453 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2454 : }

	ret	0
?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsRanged
_TEXT	ENDS
PUBLIC	?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsMustSetUpToRangedAttack
EXTRN	?isMustSetUpToRangedAttack@CvUnit@@QBE_NXZ:PROC	; CvUnit::isMustSetUpToRangedAttack
; Function compile flags: /Ogtpy
;	COMDAT ?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsMustSetUpToRangedAttack, COMDAT

; 2458 : 	return BasicLuaMethod(L, &CvUnit::isMustSetUpToRangedAttack);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?isMustSetUpToRangedAttack@CvUnit@@QBE_NXZ ; CvUnit::isMustSetUpToRangedAttack
	push	eax
	call	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
	add	esp, 8

; 2459 : }

	ret	0
?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsMustSetUpToRangedAttack
_TEXT	ENDS
PUBLIC	?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsSetUpForRangedAttack
EXTRN	?isSetUpForRangedAttack@CvUnit@@QBE_NXZ:PROC	; CvUnit::isSetUpForRangedAttack
; Function compile flags: /Ogtpy
;	COMDAT ?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsSetUpForRangedAttack, COMDAT

; 2468 : 	return BasicLuaMethod(L, &CvUnit::isSetUpForRangedAttack);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?isSetUpForRangedAttack@CvUnit@@QBE_NXZ ; CvUnit::isSetUpForRangedAttack
	push	eax
	call	??$BasicLuaMethod@_N@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool>
	add	esp, 8

; 2469 : }

	ret	0
?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsSetUpForRangedAttack
_TEXT	ENDS
PUBLIC	?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lImmuneToFirstStrikes
EXTRN	?immuneToFirstStrikes@CvUnit@@QBE_NXZ:PROC	; CvUnit::immuneToFirstStrikes
; Function compile flags: /Ogtpy
;	COMDAT ?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lImmuneToFirstStrikes, COMDAT

; 2473 : {

	push	ebx
	push	ebp
	push	esi

; 2474 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lImmuneToF
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lImmuneToF
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lImmuneToF
	xor	bl, bl
$LN5@lImmuneToF:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lImmuneToF
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lImmuneToF:

; 2475 : 	const bool bResult = pkUnit->immuneToFirstStrikes();

	mov	ecx, edi
	call	?immuneToFirstStrikes@CvUnit@@QBE_NXZ	; CvUnit::immuneToFirstStrikes

; 2476 : 
; 2477 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2478 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2479 : }

	ret	0
?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lImmuneToFirstStrikes
_TEXT	ENDS
PUBLIC	?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lNoDefensiveBonus
EXTRN	?noDefensiveBonus@CvUnit@@QBE_NXZ:PROC		; CvUnit::noDefensiveBonus
; Function compile flags: /Ogtpy
;	COMDAT ?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lNoDefensiveBonus, COMDAT

; 2483 : {

	push	ebx
	push	ebp
	push	esi

; 2484 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lNoDefensi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lNoDefensi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lNoDefensi
	xor	bl, bl
$LN5@lNoDefensi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lNoDefensi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lNoDefensi:

; 2485 : 	const bool bResult = pkUnit->noDefensiveBonus();

	mov	ecx, edi
	call	?noDefensiveBonus@CvUnit@@QBE_NXZ	; CvUnit::noDefensiveBonus

; 2486 : 
; 2487 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2488 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2489 : }

	ret	0
?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lNoDefensiveBonus
_TEXT	ENDS
PUBLIC	?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIgnoreBuildingDefense
EXTRN	?ignoreBuildingDefense@CvUnit@@QBE_NXZ:PROC	; CvUnit::ignoreBuildingDefense
; Function compile flags: /Ogtpy
;	COMDAT ?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIgnoreBuildingDefense, COMDAT

; 2493 : {

	push	ebx
	push	ebp
	push	esi

; 2494 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIgnoreBui
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIgnoreBui
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIgnoreBui
	xor	bl, bl
$LN5@lIgnoreBui:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIgnoreBui
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIgnoreBui:

; 2495 : 	const bool bResult = pkUnit->ignoreBuildingDefense();

	mov	ecx, edi
	call	?ignoreBuildingDefense@CvUnit@@QBE_NXZ	; CvUnit::ignoreBuildingDefense

; 2496 : 
; 2497 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2498 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2499 : }

	ret	0
?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIgnoreBuildingDefense
_TEXT	ENDS
PUBLIC	?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveImpassable
EXTRN	?canMoveImpassable@CvUnit@@QBE_NXZ:PROC		; CvUnit::canMoveImpassable
; Function compile flags: /Ogtpy
;	COMDAT ?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanMoveImpassable, COMDAT

; 2503 : {

	push	ebx
	push	ebp
	push	esi

; 2504 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanMoveIm
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanMoveIm
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanMoveIm
	xor	bl, bl
$LN5@lCanMoveIm:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanMoveIm
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanMoveIm:

; 2505 : 	const bool bResult = pkUnit->canMoveImpassable();

	mov	ecx, edi
	call	?canMoveImpassable@CvUnit@@QBE_NXZ	; CvUnit::canMoveImpassable

; 2506 : 
; 2507 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2508 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2509 : }

	ret	0
?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanMoveImpassable
_TEXT	ENDS
PUBLIC	?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveAllTerrain
EXTRN	?canMoveAllTerrain@CvUnit@@QBE_NXZ:PROC		; CvUnit::canMoveAllTerrain
; Function compile flags: /Ogtpy
;	COMDAT ?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanMoveAllTerrain, COMDAT

; 2513 : {

	push	ebx
	push	ebp
	push	esi

; 2514 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanMoveAl
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanMoveAl
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanMoveAl
	xor	bl, bl
$LN5@lCanMoveAl:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanMoveAl
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanMoveAl:

; 2515 : 	const bool bResult = pkUnit->canMoveAllTerrain();

	mov	ecx, edi
	call	?canMoveAllTerrain@CvUnit@@QBE_NXZ	; CvUnit::canMoveAllTerrain

; 2516 : 
; 2517 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2518 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2519 : }

	ret	0
?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanMoveAllTerrain
_TEXT	ENDS
PUBLIC	?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlatMovementCost
EXTRN	?flatMovementCost@CvUnit@@QBE_NXZ:PROC		; CvUnit::flatMovementCost
; Function compile flags: /Ogtpy
;	COMDAT ?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFlatMovementCost, COMDAT

; 2523 : {

	push	ebx
	push	ebp
	push	esi

; 2524 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lFlatMovem
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lFlatMovem
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lFlatMovem
	xor	bl, bl
$LN5@lFlatMovem:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lFlatMovem
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lFlatMovem:

; 2525 : 	const bool bResult = pkUnit->flatMovementCost();

	mov	ecx, edi
	call	?flatMovementCost@CvUnit@@QBE_NXZ	; CvUnit::flatMovementCost

; 2526 : 
; 2527 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2528 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2529 : }

	ret	0
?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFlatMovementCost
_TEXT	ENDS
PUBLIC	?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIgnoreTerrainCost
EXTRN	?ignoreTerrainCost@CvUnit@@QBE_NXZ:PROC		; CvUnit::ignoreTerrainCost
; Function compile flags: /Ogtpy
;	COMDAT ?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIgnoreTerrainCost, COMDAT

; 2533 : {

	push	ebx
	push	ebp
	push	esi

; 2534 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIgnoreTer
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIgnoreTer
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIgnoreTer
	xor	bl, bl
$LN5@lIgnoreTer:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIgnoreTer
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIgnoreTer:

; 2535 : 	const bool bResult = pkUnit->ignoreTerrainCost();

	mov	ecx, edi
	call	?ignoreTerrainCost@CvUnit@@QBE_NXZ	; CvUnit::ignoreTerrainCost

; 2536 : 
; 2537 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2538 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2539 : }

	ret	0
?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIgnoreTerrainCost
_TEXT	ENDS
PUBLIC	?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNeverInvisible
EXTRN	?isNeverInvisible@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNeverInvisible
; Function compile flags: /Ogtpy
;	COMDAT ?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNeverInvisible, COMDAT

; 2543 : {

	push	ebx
	push	ebp
	push	esi

; 2544 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNeverIn
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNeverIn
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsNeverIn
	xor	bl, bl
$LN5@lIsNeverIn:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNeverIn
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsNeverIn:

; 2545 : 	const bool bResult = pkUnit->isNeverInvisible();

	mov	ecx, edi
	call	?isNeverInvisible@CvUnit@@QBE_NXZ	; CvUnit::isNeverInvisible

; 2546 : 
; 2547 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2548 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2549 : }

	ret	0
?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNeverInvisible
_TEXT	ENDS
PUBLIC	?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsInvisible
EXTRN	?isInvisible@CvUnit@@QBE_NW4TeamTypes@@_N1@Z:PROC ; CvUnit::isInvisible
; Function compile flags: /Ogtpy
;	COMDAT ?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bDebug$ = -4						; size = 1
_L$ = 8							; size = 4
?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsInvisible, COMDAT

; 2553 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 2554 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsInvisib
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsInvisib
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsInvisib
	xor	bl, bl
$LN5@lIsInvisib:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsInvisib
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsInvisib:

; 2555 : 	const TeamTypes eTeam = (TeamTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 2556 : 	const bool bDebug = lua_toboolean(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_toboolean

; 2557 : 	const int iCheckCargo = luaL_optint(L, 4, 0);

	push	0
	test	eax, eax
	setne	al
	push	4
	push	esi
	mov	BYTE PTR _bDebug$[esp+48], al
	call	_luaL_optinteger
	add	esp, 28					; 0000001cH

; 2558 : 	const bool bResult = pkUnit->isInvisible(eTeam, bDebug, iCheckCargo != 0);

	test	eax, eax
	mov	eax, DWORD PTR _bDebug$[esp+20]
	setne	cl
	movzx	edx, cl
	push	edx
	push	eax
	push	ebx
	mov	ecx, edi
	call	?isInvisible@CvUnit@@QBE_NW4TeamTypes@@_N1@Z ; CvUnit::isInvisible

; 2559 : 
; 2560 : 	lua_pushboolean(L, bResult);

	movzx	ecx, al
	push	ecx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2561 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2562 : }

	pop	ecx
	ret	0
?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsInvisible
_TEXT	ENDS
PUBLIC	?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyCityAdjacent
EXTRN	?IsEnemyCityAdjacent@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsEnemyCityAdjacent
; Function compile flags: /Ogtpy
;	COMDAT ?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsEnemyCityAdjacent, COMDAT

; 2566 : {

	push	ebx
	push	ebp
	push	esi

; 2567 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsEnemyCi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsEnemyCi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsEnemyCi
	xor	bl, bl
$LN5@lIsEnemyCi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsEnemyCi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsEnemyCi:

; 2568 : 	bool bResult = pkUnit->IsEnemyCityAdjacent();

	mov	ecx, edi
	call	?IsEnemyCityAdjacent@CvUnit@@QBE_NXZ	; CvUnit::IsEnemyCityAdjacent

; 2569 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2570 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2571 : }

	ret	0
?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsEnemyCityAdjacent
_TEXT	ENDS
PUBLIC	?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNukeImmune
EXTRN	?isNukeImmune@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNukeImmune
; Function compile flags: /Ogtpy
;	COMDAT ?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNukeImmune, COMDAT

; 2576 : {

	push	ebx
	push	ebp
	push	esi

; 2577 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNukeImm@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNukeImm@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsNukeImm@2
	xor	bl, bl
$LN5@lIsNukeImm@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNukeImm@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsNukeImm@2:

; 2578 : 	const bool bResult = pkUnit->isNukeImmune();

	mov	ecx, edi
	call	?isNukeImmune@CvUnit@@QBE_NXZ		; CvUnit::isNukeImmune

; 2579 : 
; 2580 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2581 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2582 : }

	ret	0
?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNukeImmune
_TEXT	ENDS
PUBLIC	?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxInterceptionProbability
EXTRN	?maxInterceptionProbability@CvUnit@@QBEHXZ:PROC	; CvUnit::maxInterceptionProbability
; Function compile flags: /Ogtpy
;	COMDAT ?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lMaxInterceptionProbability, COMDAT

; 2586 : {

	push	ebx
	push	ebp
	push	esi

; 2587 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lMaxInterc
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lMaxInterc
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lMaxInterc
	xor	bl, bl
$LN5@lMaxInterc:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lMaxInterc
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lMaxInterc:

; 2588 : 
; 2589 : 	const int iResult = pkUnit->maxInterceptionProbability();

	mov	ecx, edi
	call	?maxInterceptionProbability@CvUnit@@QBEHXZ ; CvUnit::maxInterceptionProbability

; 2590 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2591 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2592 : }

	ret	0
?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lMaxInterceptionProbability
_TEXT	ENDS
PUBLIC	?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCurrInterceptionProbability
EXTRN	?currInterceptionProbability@CvUnit@@QBEHXZ:PROC ; CvUnit::currInterceptionProbability
; Function compile flags: /Ogtpy
;	COMDAT ?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCurrInterceptionProbability, COMDAT

; 2596 : {

	push	ebx
	push	ebp
	push	esi

; 2597 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCurrInter
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCurrInter
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCurrInter
	xor	bl, bl
$LN5@lCurrInter:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCurrInter
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCurrInter:

; 2598 : 
; 2599 : 	const int iResult = pkUnit->currInterceptionProbability();

	mov	ecx, edi
	call	?currInterceptionProbability@CvUnit@@QBEHXZ ; CvUnit::currInterceptionProbability

; 2600 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2601 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2602 : }

	ret	0
?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCurrInterceptionProbability
_TEXT	ENDS
PUBLIC	?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lEvasionProbability
EXTRN	?evasionProbability@CvUnit@@QBEHXZ:PROC		; CvUnit::evasionProbability
; Function compile flags: /Ogtpy
;	COMDAT ?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lEvasionProbability, COMDAT

; 2606 : {

	push	ebx
	push	ebp
	push	esi

; 2607 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lEvasionPr
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lEvasionPr
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lEvasionPr
	xor	bl, bl
$LN5@lEvasionPr:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lEvasionPr
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lEvasionPr:

; 2608 : 
; 2609 : 	const int iResult = pkUnit->evasionProbability();

	mov	ecx, edi
	call	?evasionProbability@CvUnit@@QBEHXZ	; CvUnit::evasionProbability

; 2610 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2611 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2612 : }

	ret	0
?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lEvasionProbability
_TEXT	ENDS
PUBLIC	?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lWithdrawalProbability
EXTRN	?withdrawalProbability@CvUnit@@QBEHXZ:PROC	; CvUnit::withdrawalProbability
; Function compile flags: /Ogtpy
;	COMDAT ?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lWithdrawalProbability, COMDAT

; 2616 : {

	push	ebx
	push	ebp
	push	esi

; 2617 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lWithdrawa
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lWithdrawa
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lWithdrawa
	xor	bl, bl
$LN5@lWithdrawa:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lWithdrawa
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lWithdrawa:

; 2618 : 
; 2619 : 	const int iResult = pkUnit->withdrawalProbability();

	mov	ecx, edi
	call	?withdrawalProbability@CvUnit@@QBEHXZ	; CvUnit::withdrawalProbability

; 2620 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2621 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2622 : }

	ret	0
?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lWithdrawalProbability
_TEXT	ENDS
PUBLIC	?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAdjacentModifier
EXTRN	?GetAdjacentModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetAdjacentModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetAdjacentModifier, COMDAT

; 2626 : {

	push	ebx
	push	ebp
	push	esi

; 2627 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetAdjace
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetAdjace
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetAdjace
	xor	bl, bl
$LN5@lGetAdjace:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetAdjace
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetAdjace:

; 2628 : 
; 2629 : 	const int iResult = pkUnit->GetAdjacentModifier();

	mov	ecx, edi
	call	?GetAdjacentModifier@CvUnit@@QBEHXZ	; CvUnit::GetAdjacentModifier

; 2630 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2631 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2632 : }

	ret	0
?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetAdjacentModifier
_TEXT	ENDS
PUBLIC	?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAttackModifier
EXTRN	?getAttackModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::getAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetAttackModifier, COMDAT

; 2636 : {

	push	ebx
	push	ebp
	push	esi

; 2637 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetAttack
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetAttack
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetAttack
	xor	bl, bl
$LN5@lGetAttack:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetAttack
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetAttack:

; 2638 : 
; 2639 : 	const int iResult = pkUnit->getAttackModifier();

	mov	ecx, edi
	call	?getAttackModifier@CvUnit@@QBEHXZ	; CvUnit::getAttackModifier

; 2640 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2641 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2642 : }

	ret	0
?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetAttackModifier
_TEXT	ENDS
PUBLIC	?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDefenseModifier
EXTRN	?getDefenseModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::getDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetDefenseModifier, COMDAT

; 2646 : {

	push	ebx
	push	ebp
	push	esi

; 2647 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetDefens
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetDefens
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetDefens
	xor	bl, bl
$LN5@lGetDefens:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetDefens
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetDefens:

; 2648 : 
; 2649 : 	const int iResult = pkUnit->getDefenseModifier();

	mov	ecx, edi
	call	?getDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::getDefenseModifier

; 2650 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2651 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2652 : }

	ret	0
?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetDefenseModifier
_TEXT	ENDS
PUBLIC	?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangedAttackModifier
EXTRN	?GetRangedAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetRangedAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetRangedAttackModifier, COMDAT

; 2656 : {

	push	ebx
	push	ebp
	push	esi

; 2657 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetRanged@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetRanged@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetRanged@2
	xor	bl, bl
$LN5@lGetRanged@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetRanged@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetRanged@2:

; 2658 : 
; 2659 : 	const int iResult = pkUnit->GetRangedAttackModifier();

	mov	ecx, edi
	call	?GetRangedAttackModifier@CvUnit@@QBEHXZ	; CvUnit::GetRangedAttackModifier

; 2660 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2661 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2662 : }

	ret	0
?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetRangedAttackModifier
_TEXT	ENDS
PUBLIC	?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCityAttackModifier
EXTRN	?cityAttackModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::cityAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCityAttackModifier, COMDAT

; 2666 : {

	push	ebx
	push	ebp
	push	esi

; 2667 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCityAttac
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCityAttac
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCityAttac
	xor	bl, bl
$LN5@lCityAttac:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCityAttac
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCityAttac:

; 2668 : 
; 2669 : 	const int iResult = pkUnit->cityAttackModifier();

	mov	ecx, edi
	call	?cityAttackModifier@CvUnit@@QBEHXZ	; CvUnit::cityAttackModifier

; 2670 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2671 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2672 : }

	ret	0
?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCityAttackModifier
_TEXT	ENDS
PUBLIC	?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCityDefenseModifier
EXTRN	?cityDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::cityDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCityDefenseModifier, COMDAT

; 2676 : {

	push	ebx
	push	ebp
	push	esi

; 2677 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCityDefen
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCityDefen
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCityDefen
	xor	bl, bl
$LN5@lCityDefen:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCityDefen
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCityDefen:

; 2678 : 
; 2679 : 	const int iResult = pkUnit->cityDefenseModifier();

	mov	ecx, edi
	call	?cityDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::cityDefenseModifier

; 2680 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2681 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2682 : }

	ret	0
?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCityDefenseModifier
_TEXT	ENDS
PUBLIC	?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHillsAttackModifier
EXTRN	?hillsAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::hillsAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lHillsAttackModifier, COMDAT

; 2686 : {

	push	ebx
	push	ebp
	push	esi

; 2687 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lHillsAtta
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lHillsAtta
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lHillsAtta
	xor	bl, bl
$LN5@lHillsAtta:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lHillsAtta
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lHillsAtta:

; 2688 : 
; 2689 : 	const int iResult = pkUnit->hillsAttackModifier();

	mov	ecx, edi
	call	?hillsAttackModifier@CvUnit@@QBEHXZ	; CvUnit::hillsAttackModifier

; 2690 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2691 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2692 : }

	ret	0
?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lHillsAttackModifier
_TEXT	ENDS
PUBLIC	?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHeavyChargeDownhillModifier
EXTRN	?heavyChargeDownhillModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::heavyChargeDownhillModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lHeavyChargeDownhillModifier, COMDAT

; 2697 : {

	push	ebx
	push	ebp
	push	esi

; 2698 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lHeavyChar
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lHeavyChar
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lHeavyChar
	xor	bl, bl
$LN5@lHeavyChar:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lHeavyChar
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lHeavyChar:

; 2699 : 
; 2700 : 	const int iResult = pkUnit->heavyChargeDownhillModifier();

	mov	ecx, edi
	call	?heavyChargeDownhillModifier@CvUnit@@QBEHXZ ; CvUnit::heavyChargeDownhillModifier

; 2701 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2702 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2703 : }

	ret	0
?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lHeavyChargeDownhillModifier
_TEXT	ENDS
PUBLIC	?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHillsDefenseModifier
EXTRN	?hillsDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::hillsDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lHillsDefenseModifier, COMDAT

; 2708 : {

	push	ebx
	push	ebp
	push	esi

; 2709 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lHillsDefe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lHillsDefe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lHillsDefe
	xor	bl, bl
$LN5@lHillsDefe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lHillsDefe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lHillsDefe:

; 2710 : 
; 2711 : 	const int iResult = pkUnit->hillsDefenseModifier();

	mov	ecx, edi
	call	?hillsDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::hillsDefenseModifier

; 2712 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2713 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2714 : }

	ret	0
?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lHillsDefenseModifier
_TEXT	ENDS
PUBLIC	?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenAttackModifier
EXTRN	?openAttackModifier@CvUnit@@QBEHXZ:PROC		; CvUnit::openAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lOpenAttackModifier, COMDAT

; 2718 : {

	push	ebx
	push	ebp
	push	esi

; 2719 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lOpenAttac
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lOpenAttac
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lOpenAttac
	xor	bl, bl
$LN5@lOpenAttac:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lOpenAttac
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lOpenAttac:

; 2720 : 
; 2721 : 	const int iResult = pkUnit->openAttackModifier();

	mov	ecx, edi
	call	?openAttackModifier@CvUnit@@QBEHXZ	; CvUnit::openAttackModifier

; 2722 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2723 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2724 : }

	ret	0
?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lOpenAttackModifier
_TEXT	ENDS
PUBLIC	?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenRangedAttackModifier
EXTRN	?openRangedAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::openRangedAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lOpenRangedAttackModifier, COMDAT

; 2728 : {

	push	ebx
	push	ebp
	push	esi

; 2729 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lOpenRange
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lOpenRange
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lOpenRange
	xor	bl, bl
$LN5@lOpenRange:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lOpenRange
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lOpenRange:

; 2730 : 
; 2731 : 	const int iResult = pkUnit->openRangedAttackModifier();

	mov	ecx, edi
	call	?openRangedAttackModifier@CvUnit@@QBEHXZ ; CvUnit::openRangedAttackModifier

; 2732 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2733 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2734 : }

	ret	0
?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lOpenRangedAttackModifier
_TEXT	ENDS
PUBLIC	?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughAttackModifier
EXTRN	?roughAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::roughAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRoughAttackModifier, COMDAT

; 2738 : {

	push	ebx
	push	ebp
	push	esi

; 2739 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lRoughAtta
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lRoughAtta
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lRoughAtta
	xor	bl, bl
$LN5@lRoughAtta:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lRoughAtta
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lRoughAtta:

; 2740 : 
; 2741 : 	const int iResult = pkUnit->roughAttackModifier();

	mov	ecx, edi
	call	?roughAttackModifier@CvUnit@@QBEHXZ	; CvUnit::roughAttackModifier

; 2742 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2743 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2744 : }

	ret	0
?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRoughAttackModifier
_TEXT	ENDS
PUBLIC	?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughRangedAttackModifier
EXTRN	?roughRangedAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::roughRangedAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRoughRangedAttackModifier, COMDAT

; 2748 : {

	push	ebx
	push	ebp
	push	esi

; 2749 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lRoughRang
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lRoughRang
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lRoughRang
	xor	bl, bl
$LN5@lRoughRang:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lRoughRang
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lRoughRang:

; 2750 : 
; 2751 : 	const int iResult = pkUnit->roughRangedAttackModifier();

	mov	ecx, edi
	call	?roughRangedAttackModifier@CvUnit@@QBEHXZ ; CvUnit::roughRangedAttackModifier

; 2752 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2753 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2754 : }

	ret	0
?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRoughRangedAttackModifier
_TEXT	ENDS
PUBLIC	?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackFortifiedModifier
EXTRN	?attackFortifiedModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::attackFortifiedModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lAttackFortifiedModifier, COMDAT

; 2758 : {

	push	ebx
	push	ebp
	push	esi

; 2759 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lAttackFor
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lAttackFor
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lAttackFor
	xor	bl, bl
$LN5@lAttackFor:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lAttackFor
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lAttackFor:

; 2760 : 
; 2761 : 	const int iResult = pkUnit->attackFortifiedModifier();

	mov	ecx, edi
	call	?attackFortifiedModifier@CvUnit@@QBEHXZ	; CvUnit::attackFortifiedModifier

; 2762 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2763 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2764 : }

	ret	0
?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lAttackFortifiedModifier
_TEXT	ENDS
PUBLIC	?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackWoundedModifier
EXTRN	?attackWoundedModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::attackWoundedModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lAttackWoundedModifier, COMDAT

; 2768 : {

	push	ebx
	push	ebp
	push	esi

; 2769 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lAttackWou
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lAttackWou
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lAttackWou
	xor	bl, bl
$LN5@lAttackWou:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lAttackWou
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lAttackWou:

; 2770 : 
; 2771 : 	const int iResult = pkUnit->attackWoundedModifier();

	mov	ecx, edi
	call	?attackWoundedModifier@CvUnit@@QBEHXZ	; CvUnit::attackWoundedModifier

; 2772 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2773 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2774 : }

	ret	0
?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lAttackWoundedModifier
_TEXT	ENDS
PUBLIC	?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlankAttackModifier
EXTRN	?GetFlankAttackModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetFlankAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lFlankAttackModifier, COMDAT

; 2778 : {

	push	ebx
	push	ebp
	push	esi

; 2779 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lFlankAtta
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lFlankAtta
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lFlankAtta
	xor	bl, bl
$LN5@lFlankAtta:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lFlankAtta
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lFlankAtta:

; 2780 : 
; 2781 : 	const int iResult = pkUnit->GetFlankAttackModifier();

	mov	ecx, edi
	call	?GetFlankAttackModifier@CvUnit@@QBEHXZ	; CvUnit::GetFlankAttackModifier

; 2782 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2783 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2784 : }

	ret	0
?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lFlankAttackModifier
_TEXT	ENDS
PUBLIC	?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenDefenseModifier
EXTRN	?openDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::openDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lOpenDefenseModifier, COMDAT

; 2788 : {

	push	ebx
	push	ebp
	push	esi

; 2789 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lOpenDefen
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lOpenDefen
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lOpenDefen
	xor	bl, bl
$LN5@lOpenDefen:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lOpenDefen
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lOpenDefen:

; 2790 : 
; 2791 : 	const int iResult = pkUnit->openDefenseModifier();

	mov	ecx, edi
	call	?openDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::openDefenseModifier

; 2792 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2793 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2794 : }

	ret	0
?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lOpenDefenseModifier
_TEXT	ENDS
PUBLIC	?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughDefenseModifier
EXTRN	?roughDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::roughDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRoughDefenseModifier, COMDAT

; 2798 : {

	push	ebx
	push	ebp
	push	esi

; 2799 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lRoughDefe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lRoughDefe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lRoughDefe
	xor	bl, bl
$LN5@lRoughDefe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lRoughDefe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lRoughDefe:

; 2800 : 
; 2801 : 	const int iResult = pkUnit->roughDefenseModifier();

	mov	ecx, edi
	call	?roughDefenseModifier@CvUnit@@QBEHXZ	; CvUnit::roughDefenseModifier

; 2802 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2803 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2804 : }

	ret	0
?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRoughDefenseModifier
_TEXT	ENDS
PUBLIC	?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lTerrainAttackModifier
EXTRN	?terrainAttackModifier@CvUnit@@QBEHW4TerrainTypes@@@Z:PROC ; CvUnit::terrainAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lTerrainAttackModifier, COMDAT

; 2808 : {

	push	ebx
	push	ebp
	push	esi

; 2809 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lTerrainAt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lTerrainAt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lTerrainAt
	xor	bl, bl
$LN5@lTerrainAt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lTerrainAt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lTerrainAt:

; 2810 : 	const TerrainTypes eTerrain = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2811 : 
; 2812 : 	const int iResult = pkUnit->terrainAttackModifier(eTerrain);

	push	eax
	mov	ecx, edi
	call	?terrainAttackModifier@CvUnit@@QBEHW4TerrainTypes@@@Z ; CvUnit::terrainAttackModifier

; 2813 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2814 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2815 : }

	ret	0
?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lTerrainAttackModifier
_TEXT	ENDS
PUBLIC	?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lTerrainDefenseModifier
EXTRN	?terrainDefenseModifier@CvUnit@@QBEHW4TerrainTypes@@@Z:PROC ; CvUnit::terrainDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lTerrainDefenseModifier, COMDAT

; 2819 : {

	push	ebx
	push	ebp
	push	esi

; 2820 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lTerrainDe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lTerrainDe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lTerrainDe
	xor	bl, bl
$LN5@lTerrainDe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lTerrainDe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lTerrainDe:

; 2821 : 	const TerrainTypes eTerrain = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2822 : 
; 2823 : 	const int iResult = pkUnit->terrainDefenseModifier(eTerrain);

	push	eax
	mov	ecx, edi
	call	?terrainDefenseModifier@CvUnit@@QBEHW4TerrainTypes@@@Z ; CvUnit::terrainDefenseModifier

; 2824 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2825 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2826 : }

	ret	0
?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lTerrainDefenseModifier
_TEXT	ENDS
PUBLIC	?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFeatureAttackModifier
EXTRN	?featureAttackModifier@CvUnit@@QBEHW4FeatureTypes@@@Z:PROC ; CvUnit::featureAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lFeatureAttackModifier, COMDAT

; 2830 : {

	push	ebx
	push	ebp
	push	esi

; 2831 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lFeatureAt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lFeatureAt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lFeatureAt
	xor	bl, bl
$LN5@lFeatureAt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lFeatureAt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lFeatureAt:

; 2832 : 	const FeatureTypes eFeature = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2833 : 
; 2834 : 	const int iResult = pkUnit->featureAttackModifier(eFeature);

	push	eax
	mov	ecx, edi
	call	?featureAttackModifier@CvUnit@@QBEHW4FeatureTypes@@@Z ; CvUnit::featureAttackModifier

; 2835 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2836 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2837 : }

	ret	0
?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lFeatureAttackModifier
_TEXT	ENDS
PUBLIC	?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFeatureDefenseModifier
EXTRN	?featureDefenseModifier@CvUnit@@QBEHW4FeatureTypes@@@Z:PROC ; CvUnit::featureDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lFeatureDefenseModifier, COMDAT

; 2841 : {

	push	ebx
	push	ebp
	push	esi

; 2842 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lFeatureDe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lFeatureDe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lFeatureDe
	xor	bl, bl
$LN5@lFeatureDe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lFeatureDe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lFeatureDe:

; 2843 : 	const FeatureTypes eFeature = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2844 : 
; 2845 : 	const int iResult = pkUnit->featureDefenseModifier(eFeature);

	push	eax
	mov	ecx, edi
	call	?featureDefenseModifier@CvUnit@@QBEHW4FeatureTypes@@@Z ; CvUnit::featureDefenseModifier

; 2846 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2847 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2848 : }

	ret	0
?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lFeatureDefenseModifier
_TEXT	ENDS
PUBLIC	?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitClassAttackModifier
EXTRN	?unitClassAttackModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z:PROC ; CvUnit::unitClassAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lUnitClassAttackModifier, COMDAT

; 2852 : {

	push	ebx
	push	ebp
	push	esi

; 2853 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lUnitClass
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lUnitClass
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lUnitClass
	xor	bl, bl
$LN5@lUnitClass:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lUnitClass
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lUnitClass:

; 2854 : 	const UnitClassTypes eUnitClass = (UnitClassTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2855 : 
; 2856 : 	const int iResult = pkUnit->unitClassAttackModifier(eUnitClass);

	push	eax
	mov	ecx, edi
	call	?unitClassAttackModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z ; CvUnit::unitClassAttackModifier

; 2857 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2858 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2859 : }

	ret	0
?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lUnitClassAttackModifier
_TEXT	ENDS
PUBLIC	?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitClassDefenseModifier
EXTRN	?unitClassDefenseModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z:PROC ; CvUnit::unitClassDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lUnitClassDefenseModifier, COMDAT

; 2863 : {

	push	ebx
	push	ebp
	push	esi

; 2864 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lUnitClass@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lUnitClass@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lUnitClass@2
	xor	bl, bl
$LN5@lUnitClass@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lUnitClass@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lUnitClass@2:

; 2865 : 	const UnitClassTypes eUnitClass = (UnitClassTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2866 : 
; 2867 : 	const int iResult = pkUnit->unitClassDefenseModifier(eUnitClass);

	push	eax
	mov	ecx, edi
	call	?unitClassDefenseModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z ; CvUnit::unitClassDefenseModifier

; 2868 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2869 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2870 : }

	ret	0
?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lUnitClassDefenseModifier
_TEXT	ENDS
PUBLIC	?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitCombatModifier
EXTRN	?unitCombatModifier@CvUnit@@QBEHW4UnitCombatTypes@@@Z:PROC ; CvUnit::unitCombatModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lUnitCombatModifier, COMDAT

; 2874 : {

	push	ebx
	push	ebp
	push	esi

; 2875 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lUnitComba
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lUnitComba
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lUnitComba
	xor	bl, bl
$LN5@lUnitComba:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lUnitComba
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lUnitComba:

; 2876 : 	const UnitCombatTypes eUnitCombat = (UnitCombatTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2877 : 
; 2878 : 	const int iResult = pkUnit->unitCombatModifier(eUnitCombat);

	push	eax
	mov	ecx, edi
	call	?unitCombatModifier@CvUnit@@QBEHW4UnitCombatTypes@@@Z ; CvUnit::unitCombatModifier

; 2879 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2880 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2881 : }

	ret	0
?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lUnitCombatModifier
_TEXT	ENDS
PUBLIC	?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lDomainModifier
EXTRN	?domainModifier@CvUnit@@QBEHW4DomainTypes@@@Z:PROC ; CvUnit::domainModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lDomainModifier, COMDAT

; 2885 : {

	push	ebx
	push	ebp
	push	esi

; 2886 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lDomainMod
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lDomainMod
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lDomainMod
	xor	bl, bl
$LN5@lDomainMod:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lDomainMod
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lDomainMod:

; 2887 : 	const DomainTypes eDomain = (DomainTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2888 : 
; 2889 : 	const int iResult = pkUnit->domainModifier(eDomain);

	push	eax
	mov	ecx, edi
	call	?domainModifier@CvUnit@@QBEHW4DomainTypes@@@Z ; CvUnit::domainModifier

; 2890 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2891 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2892 : }

	ret	0
?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lDomainModifier
_TEXT	ENDS
PUBLIC	?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetStrategicResourceCombatPenalty
EXTRN	?GetStrategicResourceCombatPenalty@CvUnit@@QBEHXZ:PROC ; CvUnit::GetStrategicResourceCombatPenalty
; Function compile flags: /Ogtpy
;	COMDAT ?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetStrategicResourceCombatPenalty, COMDAT

; 2895 : {

	push	ebx
	push	ebp
	push	esi

; 2896 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetStrate
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetStrate
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetStrate
	xor	bl, bl
$LN5@lGetStrate:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetStrate
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetStrate:

; 2897 : 
; 2898 : 	const int iResult = pkUnit->GetStrategicResourceCombatPenalty();

	mov	ecx, edi
	call	?GetStrategicResourceCombatPenalty@CvUnit@@QBEHXZ ; CvUnit::GetStrategicResourceCombatPenalty

; 2899 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2900 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2901 : }

	ret	0
?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetStrategicResourceCombatPenalty
_TEXT	ENDS
PUBLIC	?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnhappinessCombatPenalty
EXTRN	?GetUnhappinessCombatPenalty@CvUnit@@QBEHXZ:PROC ; CvUnit::GetUnhappinessCombatPenalty
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUnhappinessCombatPenalty, COMDAT

; 2904 : {

	push	ebx
	push	ebp
	push	esi

; 2905 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnhapp
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnhapp
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnhapp
	xor	bl, bl
$LN5@lGetUnhapp:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnhapp
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnhapp:

; 2906 : 
; 2907 : 	const int iResult = pkUnit->GetUnhappinessCombatPenalty();

	mov	ecx, edi
	call	?GetUnhappinessCombatPenalty@CvUnit@@QBEHXZ ; CvUnit::GetUnhappinessCombatPenalty

; 2908 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2909 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2910 : }

	ret	0
?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUnhappinessCombatPenalty
_TEXT	ENDS
PUBLIC	?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAirSweepCombatMod
EXTRN	?GetAirSweepCombatModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetAirSweepCombatModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lAirSweepCombatMod, COMDAT

; 2915 : 	return BasicLuaMethod(L, &CvUnit::GetAirSweepCombatModifier);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?GetAirSweepCombatModifier@CvUnit@@QBEHXZ ; CvUnit::GetAirSweepCombatModifier
	push	eax
	call	??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
	add	esp, 8

; 2916 : }

	ret	0
?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lAirSweepCombatMod
_TEXT	ENDS
PUBLIC	?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCapitalDefenseModifier
EXTRN	?GetCapitalDefenseModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::GetCapitalDefenseModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCapitalDefenseModifier, COMDAT

; 2921 : 	return BasicLuaMethod(L, &CvUnit::GetCapitalDefenseModifier);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?GetCapitalDefenseModifier@CvUnit@@QBEHXZ ; CvUnit::GetCapitalDefenseModifier
	push	eax
	call	??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
	add	esp, 8

; 2922 : }

	ret	0
?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCapitalDefenseModifier
_TEXT	ENDS
PUBLIC	?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCapitalDefenseFalloff
EXTRN	?GetCapitalDefenseFalloff@CvUnit@@QBEHXZ:PROC	; CvUnit::GetCapitalDefenseFalloff
; Function compile flags: /Ogtpy
;	COMDAT ?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCapitalDefenseFalloff, COMDAT

; 2927 : 	return BasicLuaMethod(L, &CvUnit::GetCapitalDefenseFalloff);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?GetCapitalDefenseFalloff@CvUnit@@QBEHXZ ; CvUnit::GetCapitalDefenseFalloff
	push	eax
	call	??$BasicLuaMethod@H@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BEHXZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<int>
	add	esp, 8

; 2928 : }

	ret	0
?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCapitalDefenseFalloff
_TEXT	ENDS
PUBLIC	?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSpecialCargo
EXTRN	?specialCargo@CvUnit@@QBE?AW4SpecialUnitTypes@@XZ:PROC ; CvUnit::specialCargo
; Function compile flags: /Ogtpy
;	COMDAT ?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSpecialCargo, COMDAT

; 2932 : {

	push	ebx
	push	ebp
	push	esi

; 2933 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSpecialCa
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSpecialCa
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSpecialCa
	xor	bl, bl
$LN5@lSpecialCa:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSpecialCa
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSpecialCa:

; 2934 : 
; 2935 : 	const SpecialUnitTypes eResult = pkUnit->specialCargo();

	mov	ecx, edi
	call	?specialCargo@CvUnit@@QBE?AW4SpecialUnitTypes@@XZ ; CvUnit::specialCargo

; 2936 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2937 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2938 : }

	ret	0
?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSpecialCargo
_TEXT	ENDS
PUBLIC	?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lDomainCargo
EXTRN	?domainCargo@CvUnit@@QBE?AW4DomainTypes@@XZ:PROC ; CvUnit::domainCargo
; Function compile flags: /Ogtpy
;	COMDAT ?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lDomainCargo, COMDAT

; 2942 : {

	push	ebx
	push	ebp
	push	esi

; 2943 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lDomainCar
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lDomainCar
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lDomainCar
	xor	bl, bl
$LN5@lDomainCar:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lDomainCar
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lDomainCar:

; 2944 : 
; 2945 : 	const DomainTypes eResult = pkUnit->domainCargo();

	mov	ecx, edi
	call	?domainCargo@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::domainCargo

; 2946 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2947 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2948 : }

	ret	0
?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lDomainCargo
_TEXT	ENDS
PUBLIC	?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lCargoSpace
EXTRN	?cargoSpace@CvUnit@@QBEHXZ:PROC			; CvUnit::cargoSpace
; Function compile flags: /Ogtpy
;	COMDAT ?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCargoSpace, COMDAT

; 2952 : {

	push	ebx
	push	ebp
	push	esi

; 2953 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCargoSpac
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCargoSpac
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCargoSpac
	xor	bl, bl
$LN5@lCargoSpac:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCargoSpac
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCargoSpac:

; 2954 : 
; 2955 : 	const int iResult = pkUnit->cargoSpace();

	mov	ecx, edi
	call	?cargoSpace@CvUnit@@QBEHXZ		; CvUnit::cargoSpace

; 2956 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2957 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2958 : }

	ret	0
?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCargoSpace
_TEXT	ENDS
PUBLIC	?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeCargoSpace
EXTRN	?changeCargoSpace@CvUnit@@QAEXH@Z:PROC		; CvUnit::changeCargoSpace
; Function compile flags: /Ogtpy
;	COMDAT ?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeCargoSpace, COMDAT

; 2962 : {

	push	ebx
	push	ebp
	push	esi

; 2963 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lChangeCar
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lChangeCar
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lChangeCar
	xor	bl, bl
$LN5@lChangeCar:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lChangeCar
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lChangeCar:

; 2964 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 2965 : 
; 2966 : 	pkUnit->changeCargoSpace(iChange);

	push	eax
	mov	ecx, edi
	call	?changeCargoSpace@CvUnit@@QAEXH@Z	; CvUnit::changeCargoSpace
	pop	edi
	pop	esi
	pop	ebp

; 2967 : 	return 0;

	xor	eax, eax
	pop	ebx

; 2968 : }

	ret	0
?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeCargoSpace
_TEXT	ENDS
PUBLIC	?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsFull
EXTRN	?isFull@CvUnit@@QBE_NXZ:PROC			; CvUnit::isFull
; Function compile flags: /Ogtpy
;	COMDAT ?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsFull, COMDAT

; 2972 : {

	push	ebx
	push	ebp
	push	esi

; 2973 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsFull
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsFull
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsFull
	xor	bl, bl
$LN5@lIsFull:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsFull
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsFull:

; 2974 : 	const bool bResult = pkUnit->isFull();

	mov	ecx, edi
	call	?isFull@CvUnit@@QBE_NXZ			; CvUnit::isFull

; 2975 : 
; 2976 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2977 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2978 : }

	ret	0
?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsFull
_TEXT	ENDS
PUBLIC	?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCargoSpaceAvailable
EXTRN	?cargoSpaceAvailable@CvUnit@@QBEHW4SpecialUnitTypes@@W4DomainTypes@@@Z:PROC ; CvUnit::cargoSpaceAvailable
; Function compile flags: /Ogtpy
;	COMDAT ?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCargoSpaceAvailable, COMDAT

; 2982 : {

	push	ebx
	push	ebp
	push	esi

; 2983 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCargoSpac@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCargoSpac@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCargoSpac@2
	xor	bl, bl
$LN5@lCargoSpac@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCargoSpac@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCargoSpac@2:

; 2984 : 
; 2985 : 	const int iResult = pkUnit->cargoSpaceAvailable();

	push	-1
	push	-1
	mov	ecx, edi
	call	?cargoSpaceAvailable@CvUnit@@QBEHW4SpecialUnitTypes@@W4DomainTypes@@@Z ; CvUnit::cargoSpaceAvailable

; 2986 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2987 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2988 : }

	ret	0
?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCargoSpaceAvailable
_TEXT	ENDS
PUBLIC	?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lHasCargo
EXTRN	?hasCargo@CvUnit@@QBE_NXZ:PROC			; CvUnit::hasCargo
; Function compile flags: /Ogtpy
;	COMDAT ?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lHasCargo, COMDAT

; 2992 : {

	push	ebx
	push	ebp
	push	esi

; 2993 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lHasCargo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lHasCargo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lHasCargo
	xor	bl, bl
$LN5@lHasCargo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lHasCargo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lHasCargo:

; 2994 : 	const bool bResult = pkUnit->hasCargo();

	mov	ecx, edi
	call	?hasCargo@CvUnit@@QBE_NXZ		; CvUnit::hasCargo

; 2995 : 
; 2996 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2997 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2998 : }

	ret	0
?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lHasCargo
_TEXT	ENDS
PUBLIC	?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanCargoAllMove
EXTRN	?canCargoAllMove@CvUnit@@QBE_NXZ:PROC		; CvUnit::canCargoAllMove
; Function compile flags: /Ogtpy
;	COMDAT ?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanCargoAllMove, COMDAT

; 3002 : {

	push	ebx
	push	ebp
	push	esi

; 3003 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanCargoA
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanCargoA
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanCargoA
	xor	bl, bl
$LN5@lCanCargoA:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanCargoA
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanCargoA:

; 3004 : 	const bool bResult = pkUnit->canCargoAllMove();

	mov	ecx, edi
	call	?canCargoAllMove@CvUnit@@QBE_NXZ	; CvUnit::canCargoAllMove

; 3005 : 
; 3006 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3007 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3008 : }

	ret	0
?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanCargoAllMove
_TEXT	ENDS
PUBLIC	?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetUnitAICargo
EXTRN	?getUnitAICargo@CvUnit@@QBEHW4UnitAITypes@@@Z:PROC ; CvUnit::getUnitAICargo
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitAICargo, COMDAT

; 3012 : {

	push	ebx
	push	ebp
	push	esi

; 3013 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnitAI@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnitAI@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnitAI@2
	xor	bl, bl
$LN5@lGetUnitAI@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnitAI@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnitAI@2:

; 3014 : 	const UnitAITypes eUnitAI = (UnitAITypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 3015 : 
; 3016 : 	const int iResult = pkUnit->getUnitAICargo(eUnitAI);

	push	eax
	mov	ecx, edi
	call	?getUnitAICargo@CvUnit@@QBEHW4UnitAITypes@@@Z ; CvUnit::getUnitAICargo

; 3017 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3018 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3019 : }

	ret	0
?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitAICargo
_TEXT	ENDS
PUBLIC	?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHotKeyNumber
EXTRN	?getHotKeyNumber@CvUnit@@QAEHXZ:PROC		; CvUnit::getHotKeyNumber
; Function compile flags: /Ogtpy
;	COMDAT ?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetHotKeyNumber, COMDAT

; 3033 : {

	push	ebx
	push	ebp
	push	esi

; 3034 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetHotKey
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetHotKey
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetHotKey
	xor	bl, bl
$LN5@lGetHotKey:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetHotKey
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetHotKey:

; 3035 : 
; 3036 : 	const int iResult = pkUnit->getHotKeyNumber();

	mov	ecx, edi
	call	?getHotKeyNumber@CvUnit@@QAEHXZ		; CvUnit::getHotKeyNumber

; 3037 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3038 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3039 : }

	ret	0
?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetHotKeyNumber
_TEXT	ENDS
PUBLIC	?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetHotKeyNumber
EXTRN	?setHotKeyNumber@CvUnit@@QAEXH@Z:PROC		; CvUnit::setHotKeyNumber
; Function compile flags: /Ogtpy
;	COMDAT ?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetHotKeyNumber, COMDAT

; 3043 : {

	push	ebx
	push	ebp
	push	esi

; 3044 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetHotKey
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetHotKey
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetHotKey
	xor	bl, bl
$LN5@lSetHotKey:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetHotKey
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetHotKey:

; 3045 : 	const int iNewValue = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 3046 : 
; 3047 : 	pkUnit->setHotKeyNumber(iNewValue);

	push	eax
	mov	ecx, edi
	call	?setHotKeyNumber@CvUnit@@QAEXH@Z	; CvUnit::setHotKeyNumber
	pop	edi
	pop	esi
	pop	ebp

; 3048 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3049 : }

	ret	0
?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetHotKeyNumber
_TEXT	ENDS
PUBLIC	?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lSetXY
EXTRN	?setXY@CvUnit@@QAEXHH_N0000@Z:PROC		; CvUnit::setXY
; Function compile flags: /Ogtpy
;	COMDAT ?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bCheckPlotVisible$ = -16				; size = 1
_bShow$ = -12						; size = 1
_bUpdate$ = -8						; size = 1
_bGroup$ = -4						; size = 1
_L$ = 8							; size = 4
?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetXY, COMDAT

; 3073 : {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi

; 3074 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+24]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetXY
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetXY
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetXY
	xor	bl, bl
$LN5@lSetXY:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetXY
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetXY:

; 3075 : 	const int x = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 3076 : 	const int y = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 3077 : 	const bool bGroup = luaL_optint(L, 4, 0);

	push	0
	push	4
	push	esi
	mov	ebp, eax
	call	_luaL_optinteger

; 3078 : 	const bool bUpdate = luaL_optint(L, 5, 1);

	push	1
	test	eax, eax
	setne	al
	push	5
	push	esi
	mov	BYTE PTR _bGroup$[esp+72], al
	call	_luaL_optinteger

; 3079 : 	const bool bShow = luaL_optint(L, 6, 0);

	push	0
	test	eax, eax
	setne	cl
	push	6
	push	esi
	mov	BYTE PTR _bUpdate$[esp+84], cl
	call	_luaL_optinteger

; 3080 : 	const bool bCheckPlotVisible = luaL_optint(L, 7, 0);

	push	0
	test	eax, eax
	setne	dl
	push	7
	push	esi
	mov	BYTE PTR _bShow$[esp+96], dl
	call	_luaL_optinteger

; 3081 : 
; 3082 : 	pkUnit->setXY(x, y, bGroup, bUpdate, bShow, bCheckPlotVisible);

	mov	edx, DWORD PTR _bShow$[esp+96]
	add	esp, 64					; 00000040H
	test	eax, eax
	setne	al
	push	0
	mov	BYTE PTR _bCheckPlotVisible$[esp+36], al
	mov	ecx, DWORD PTR _bCheckPlotVisible$[esp+36]
	mov	eax, DWORD PTR _bUpdate$[esp+36]
	push	ecx
	mov	ecx, DWORD PTR _bGroup$[esp+40]
	push	edx
	push	eax
	push	ecx
	push	ebp
	push	ebx
	mov	ecx, edi
	call	?setXY@CvUnit@@QAEXHH_N0000@Z		; CvUnit::setXY
	pop	edi
	pop	esi
	pop	ebp

; 3083 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3084 : }

	add	esp, 16					; 00000010H
	ret	0
?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetXY
_TEXT	ENDS
PUBLIC	?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lAt
EXTRN	?at@CvUnit@@QBE_NHH@Z:PROC			; CvUnit::at
; Function compile flags: /Ogtpy
;	COMDAT ?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lAt, COMDAT

; 3088 : {

	push	ebx
	push	ebp
	push	esi

; 3089 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lAt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lAt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lAt
	xor	bl, bl
$LN5@lAt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lAt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lAt:

; 3090 : 	const int x = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 3091 : 	const int y = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger
	add	esp, 16					; 00000010H

; 3092 : 
; 3093 : 	const bool bResult = pkUnit->at(x, y);

	push	eax
	push	ebx
	mov	ecx, edi
	call	?at@CvUnit@@QBE_NHH@Z			; CvUnit::at

; 3094 : 
; 3095 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3096 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3097 : }

	ret	0
?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lAt
_TEXT	ENDS
PUBLIC	?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lAtPlot
EXTRN	?atPlot@CvUnit@@QBE_NABVCvPlot@@@Z:PROC		; CvUnit::atPlot
; Function compile flags: /Ogtpy
;	COMDAT ?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$229970 = -4					; size = 4
_L$ = 8							; size = 4
?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lAtPlot, COMDAT

; 3101 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 3102 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$229970[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lAtPlot
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lAtPlot
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$229970[esp+20], eax
	test	eax, eax
	je	SHORT $LN6@lAtPlot
	xor	bl, bl
$LN6@lAtPlot:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lAtPlot
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lAtPlot:

; 3103 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN15@lAtPlot
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN15@lAtPlot
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN15@lAtPlot
	xor	bl, bl
$LN15@lAtPlot:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN14@lAtPlot
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN14@lAtPlot:

; 3104 : 
; 3105 : 	bool bResult = false;

	xor	al, al

; 3106 : 	if(pkPlot)

	test	edi, edi
	je	SHORT $LN1@lAtPlot

; 3107 : 	{
; 3108 : 		bResult = pkUnit->atPlot(*pkPlot);

	mov	ecx, DWORD PTR _pkInstance$229970[esp+20]
	push	edi
	call	?atPlot@CvUnit@@QBE_NABVCvPlot@@@Z	; CvUnit::atPlot
$LN1@lAtPlot:

; 3109 : 	}
; 3110 : 
; 3111 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3112 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3113 : }

	pop	ecx
	ret	0
?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lAtPlot
_TEXT	ENDS
PUBLIC	?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetArea
EXTRN	?area@CvUnit@@QBEPAVCvArea@@XZ:PROC		; CvUnit::area
; Function compile flags: /Ogtpy
;	COMDAT ?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetArea, COMDAT

; 3132 : {

	push	ebx
	push	ebp
	push	esi

; 3133 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetArea
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetArea
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetArea
	xor	bl, bl
$LN5@lGetArea:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetArea
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetArea:

; 3134 : 
; 3135 : 	CvLuaArea::Push(L, pkUnit->area());

	mov	ecx, edi
	call	?area@CvUnit@@QBEPAVCvArea@@XZ		; CvUnit::area
	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaArea@@VCvArea@@@@SAXPAUlua_State@@PAVCvArea@@@Z ; CvLuaScopedInstance<CvLuaArea,CvArea>::Push
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3136 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3137 : }

	ret	0
?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetArea
_TEXT	ENDS
PUBLIC	?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetReconPlot
EXTRN	?getReconPlot@CvUnit@@QBEPAVCvPlot@@XZ:PROC	; CvUnit::getReconPlot
; Function compile flags: /Ogtpy
;	COMDAT ?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetReconPlot, COMDAT

; 3141 : {

	push	ebx
	push	ebp
	push	esi

; 3142 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetReconP
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetReconP
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetReconP
	xor	bl, bl
$LN5@lGetReconP:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetReconP
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetReconP:

; 3143 : 
; 3144 : 	CvPlot* pkPlot = pkUnit->getReconPlot();

	mov	ecx, edi
	call	?getReconPlot@CvUnit@@QBEPAVCvPlot@@XZ	; CvUnit::getReconPlot

; 3145 : 	CvLuaPlot::Push(L, pkPlot);

	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3146 : 
; 3147 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3148 : }

	ret	0
?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetReconPlot
_TEXT	ENDS
PUBLIC	?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetReconPlot
EXTRN	?setReconPlot@CvUnit@@QAEXPAVCvPlot@@@Z:PROC	; CvUnit::setReconPlot
; Function compile flags: /Ogtpy
;	COMDAT ?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$230038 = -4					; size = 4
_L$ = 8							; size = 4
?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetReconPlot, COMDAT

; 3152 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 3153 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$230038[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetReconP
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetReconP
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$230038[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lSetReconP
	xor	bl, bl
$LN5@lSetReconP:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetReconP
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetReconP:

; 3154 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lSetReconP
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lSetReconP
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lSetReconP
	xor	bl, bl
$LN14@lSetReconP:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN13@lSetReconP
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN13@lSetReconP:

; 3155 : 
; 3156 : 	pkUnit->setReconPlot(pkPlot);

	mov	ecx, DWORD PTR _pkInstance$230038[esp+20]
	push	edi
	call	?setReconPlot@CvUnit@@QAEXPAVCvPlot@@@Z	; CvUnit::setReconPlot
	pop	edi
	pop	esi
	pop	ebp

; 3157 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3158 : }

	pop	ecx
	ret	0
?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetReconPlot
_TEXT	ENDS
PUBLIC	?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGameTurnCreated
EXTRN	?getGameTurnCreated@CvUnit@@QBEHXZ:PROC		; CvUnit::getGameTurnCreated
; Function compile flags: /Ogtpy
;	COMDAT ?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGameTurnCreated, COMDAT

; 3162 : {

	push	ebx
	push	ebp
	push	esi

; 3163 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetGameTu
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetGameTu
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetGameTu
	xor	bl, bl
$LN5@lGetGameTu:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetGameTu
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetGameTu:

; 3164 : 
; 3165 : 	const int iResult = pkUnit->getGameTurnCreated();

	mov	ecx, edi
	call	?getGameTurnCreated@CvUnit@@QBEHXZ	; CvUnit::getGameTurnCreated

; 3166 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3167 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3168 : }

	ret	0
?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGameTurnCreated
_TEXT	ENDS
PUBLIC	?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLastMoveTurn
EXTRN	?getLastMoveTurn@CvUnit@@QBEHXZ:PROC		; CvUnit::getLastMoveTurn
; Function compile flags: /Ogtpy
;	COMDAT ?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetLastMoveTurn, COMDAT

; 3172 : {

	push	ebx
	push	ebp
	push	esi

; 3173 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetLastMo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetLastMo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetLastMo
	xor	bl, bl
$LN5@lGetLastMo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetLastMo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetLastMo:

; 3174 : 
; 3175 : 	const int iResult = pkUnit->getLastMoveTurn();

	mov	ecx, edi
	call	?getLastMoveTurn@CvUnit@@QBEHXZ		; CvUnit::getLastMoveTurn

; 3176 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3177 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3178 : }

	ret	0
?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetLastMoveTurn
_TEXT	ENDS
PUBLIC	?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetDamage
EXTRN	?getDamage@CvUnit@@QBEHXZ:PROC			; CvUnit::getDamage
; Function compile flags: /Ogtpy
;	COMDAT ?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetDamage, COMDAT

; 3182 : {

	push	ebx
	push	ebp
	push	esi

; 3183 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetDamage
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetDamage
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetDamage
	xor	bl, bl
$LN5@lGetDamage:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetDamage
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetDamage:

; 3184 : 
; 3185 : 	const int iResult = pkUnit->getDamage();

	mov	ecx, edi
	call	?getDamage@CvUnit@@QBEHXZ		; CvUnit::getDamage

; 3186 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3187 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3188 : }

	ret	0
?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetDamage
_TEXT	ENDS
PUBLIC	?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetDamage
EXTRN	?setDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z:PROC ; CvUnit::setDamage
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtpy
;	COMDAT ?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
tv171 = -4						; size = 4
_L$ = 8							; size = 4
?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetDamage, COMDAT

; 3192 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 3193 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN7@lSetDamage
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN7@lSetDamage
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN7@lSetDamage
	xor	bl, bl
$LN7@lSetDamage:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN12@lSetDamage
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN12@lSetDamage:

; 3194 : 	const int iNewValue = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 3195 : 	const PlayerTypes ePlayer = (lua_isnil(L, 3))? NO_PLAYER : (PlayerTypes)lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebp, eax
	call	_lua_type
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN3@lSetDamage
	or	ebx, -1
	jmp	SHORT $LN4@lSetDamage
$LN3@lSetDamage:
	push	3
	push	esi
	call	_lua_tointeger
	add	esp, 8
	mov	ebx, eax
$LN4@lSetDamage:

; 3196 : 	const bool bNotifyEntity = luaL_optint(L, 4, 1);

	push	1
	push	4
	push	esi
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al

; 3197 : 
; 3198 : 	pkUnit->setDamage(iNewValue, ePlayer, bNotifyEntity);

	movzx	eax, al
	push	0
	mov	DWORD PTR tv171[esp+24], eax
	push	ecx
	mov	ecx, edi
	fild	DWORD PTR tv171[esp+28]
	fstp	DWORD PTR [esp]
	push	ebx
	push	ebp
	call	?setDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::setDamage
	pop	edi
	pop	esi
	pop	ebp

; 3199 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3200 : }

	pop	ecx
	ret	0
?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetDamage
_TEXT	ENDS
PUBLIC	?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lChangeDamage
EXTRN	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z:PROC ; CvUnit::changeDamage
; Function compile flags: /Ogtpy
;	COMDAT ?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeDamage, COMDAT

; 3204 : {

	push	ebx
	push	ebp
	push	esi

; 3205 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN7@lChangeDam
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN7@lChangeDam
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN7@lChangeDam
	xor	bl, bl
$LN7@lChangeDam:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN12@lChangeDam
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN12@lChangeDam:

; 3206 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 3207 : 	const PlayerTypes ePlayer = (lua_isnil(L, 3))? NO_PLAYER : (PlayerTypes)lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_type
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN3@lChangeDam
	or	eax, -1
	jmp	SHORT $LN4@lChangeDam
$LN3@lChangeDam:
	push	3
	push	esi
	call	_lua_tointeger
	add	esp, 8
$LN4@lChangeDam:

; 3208 : 
; 3209 : 	pkUnit->changeDamage(iChange, ePlayer);

	push	0
	push	ecx
	mov	DWORD PTR [esp], 0
	push	eax
	push	ebx
	mov	ecx, edi
	call	?changeDamage@CvUnit@@QAEHHW4PlayerTypes@@MPBVCvString@@@Z ; CvUnit::changeDamage
	pop	edi
	pop	esi
	pop	ebp

; 3210 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3211 : }

	ret	0
?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeDamage
_TEXT	ENDS
PUBLIC	?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetMoves
EXTRN	?getMoves@CvUnit@@QBEHXZ:PROC			; CvUnit::getMoves
; Function compile flags: /Ogtpy
;	COMDAT ?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetMoves, COMDAT

; 3215 : {

	push	ebx
	push	ebp
	push	esi

; 3216 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetMoves
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetMoves
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetMoves
	xor	bl, bl
$LN5@lGetMoves:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetMoves
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetMoves:

; 3217 : 
; 3218 : 	const int iResult = pkUnit->getMoves();

	mov	ecx, edi
	call	?getMoves@CvUnit@@QBEHXZ		; CvUnit::getMoves

; 3219 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3220 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3221 : }

	ret	0
?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetMoves
_TEXT	ENDS
PUBLIC	?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetMoves
EXTRN	?setMoves@CvUnit@@QAEXH@Z:PROC			; CvUnit::setMoves
; Function compile flags: /Ogtpy
;	COMDAT ?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetMoves, COMDAT

; 3225 : {

	push	ebx
	push	ebp
	push	esi

; 3226 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetMoves
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetMoves
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetMoves
	xor	bl, bl
$LN5@lSetMoves:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetMoves
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetMoves:

; 3227 : 	const int iNewValue = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 3228 : 
; 3229 : 	pkUnit->setMoves(iNewValue);

	push	eax
	mov	ecx, edi
	call	?setMoves@CvUnit@@QAEXH@Z		; CvUnit::setMoves
	pop	edi
	pop	esi
	pop	ebp

; 3230 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3231 : }

	ret	0
?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetMoves
_TEXT	ENDS
PUBLIC	?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lChangeMoves
EXTRN	?changeMoves@CvUnit@@QAEXH@Z:PROC		; CvUnit::changeMoves
; Function compile flags: /Ogtpy
;	COMDAT ?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeMoves, COMDAT

; 3235 : {

	push	ebx
	push	ebp
	push	esi

; 3236 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lChangeMov
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lChangeMov
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lChangeMov
	xor	bl, bl
$LN5@lChangeMov:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lChangeMov
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lChangeMov:

; 3237 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 3238 : 
; 3239 : 	pkUnit->changeMoves(iChange);

	push	eax
	mov	ecx, edi
	call	?changeMoves@CvUnit@@QAEXH@Z		; CvUnit::changeMoves
	pop	edi
	pop	esi
	pop	ebp

; 3240 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3241 : }

	ret	0
?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeMoves
_TEXT	ENDS
PUBLIC	?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lFinishMoves
EXTRN	?finishMoves@CvUnit@@QAEXXZ:PROC		; CvUnit::finishMoves
; Function compile flags: /Ogtpy
;	COMDAT ?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lFinishMoves, COMDAT

; 3245 : {

	push	ebx
	push	ebp
	push	esi

; 3246 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lFinishMov
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lFinishMov
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lFinishMov
	xor	bl, bl
$LN5@lFinishMov:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lFinishMov
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lFinishMov:

; 3247 : 
; 3248 : 	pkUnit->finishMoves();

	mov	ecx, edi
	call	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves
	pop	edi
	pop	esi
	pop	ebp

; 3249 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3250 : }

	ret	0
?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lFinishMoves
_TEXT	ENDS
PUBLIC	?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsImmobile
EXTRN	?IsImmobile@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsImmobile
; Function compile flags: /Ogtpy
;	COMDAT ?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsImmobile, COMDAT

; 3254 : {

	push	ebx
	push	ebp
	push	esi

; 3255 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsImmobil@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsImmobil@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsImmobil@2
	xor	bl, bl
$LN5@lIsImmobil@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsImmobil@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsImmobil@2:

; 3256 : 
; 3257 : 	const bool bResult = pkUnit->IsImmobile();

	mov	ecx, edi
	call	?IsImmobile@CvUnit@@QBE_NXZ		; CvUnit::IsImmobile

; 3258 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3259 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3260 : }

	ret	0
?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsImmobile
_TEXT	ENDS
PUBLIC	?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetExperience
EXTRN	?getExperience@CvUnit@@QBEHXZ:PROC		; CvUnit::getExperience
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExperience, COMDAT

; 3264 : {

	push	ebx
	push	ebp
	push	esi

; 3265 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExperi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExperi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExperi
	xor	bl, bl
$LN5@lGetExperi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExperi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExperi:

; 3266 : 
; 3267 : 	const int iResult = pkUnit->getExperience();

	mov	ecx, edi
	call	?getExperience@CvUnit@@QBEHXZ		; CvUnit::getExperience

; 3268 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3269 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3270 : }

	ret	0
?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExperience
_TEXT	ENDS
PUBLIC	?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetExperience
EXTRN	?setExperience@CvUnit@@QAEXHH@Z:PROC		; CvUnit::setExperience
; Function compile flags: /Ogtpy
;	COMDAT ?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetExperience, COMDAT

; 3274 : {

	push	ebx
	push	ebp
	push	esi

; 3275 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetExperi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetExperi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetExperi
	xor	bl, bl
$LN5@lSetExperi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetExperi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetExperi:

; 3276 : 	const int iNewValue = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 3277 : 	const int iMax = luaL_optint(L, 3, -1);

	push	-1
	push	3
	push	esi
	mov	ebx, eax
	call	_luaL_optinteger
	add	esp, 20					; 00000014H

; 3278 : 
; 3279 : 	pkUnit->setExperience(iNewValue, iMax);

	push	eax
	push	ebx
	mov	ecx, edi
	call	?setExperience@CvUnit@@QAEXHH@Z		; CvUnit::setExperience
	pop	edi
	pop	esi
	pop	ebp

; 3280 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3281 : }

	ret	0
?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetExperience
_TEXT	ENDS
PUBLIC	?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeExperience
EXTRN	?changeExperience@CvUnit@@QAEXHH_N00@Z:PROC	; CvUnit::changeExperience
; Function compile flags: /Ogtpy
;	COMDAT ?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bUpdateGlobal$ = -12					; size = 1
_bInBorders$ = -8					; size = 1
_bFromCombat$ = -4					; size = 1
_L$ = 8							; size = 4
?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeExperience, COMDAT

; 3285 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi

; 3286 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+20]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lChangeExp
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lChangeExp
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lChangeExp
	xor	bl, bl
$LN5@lChangeExp:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lChangeExp
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lChangeExp:

; 3287 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 3288 : 	const int iMax = luaL_optint(L, 3, -1);

	push	-1
	push	3
	push	esi
	mov	ebx, eax
	call	_luaL_optinteger

; 3289 : 	const bool bFromCombat = luaL_optint(L, 4, 0);

	push	0
	push	4
	push	esi
	mov	ebp, eax
	call	_luaL_optinteger

; 3290 : 	const bool bInBorders = luaL_optint(L, 5, 0);

	push	0
	test	eax, eax
	setne	al
	push	5
	push	esi
	mov	BYTE PTR _bFromCombat$[esp+72], al
	call	_luaL_optinteger

; 3291 : 	const bool bUpdateGlobal = luaL_optint(L, 6, 0);

	push	0
	test	eax, eax
	setne	cl
	push	6
	push	esi
	mov	BYTE PTR _bInBorders$[esp+84], cl
	call	_luaL_optinteger

; 3292 : 
; 3293 : 	pkUnit->changeExperience(iChange, iMax, bFromCombat, bInBorders, bUpdateGlobal);

	mov	ecx, DWORD PTR _bInBorders$[esp+84]
	add	esp, 56					; 00000038H
	test	eax, eax
	setne	dl
	mov	BYTE PTR _bUpdateGlobal$[esp+28], dl
	mov	eax, DWORD PTR _bUpdateGlobal$[esp+28]
	mov	edx, DWORD PTR _bFromCombat$[esp+28]
	push	eax
	push	ecx
	push	edx
	push	ebp
	push	ebx
	mov	ecx, edi
	call	?changeExperience@CvUnit@@QAEXHH_N00@Z	; CvUnit::changeExperience
	pop	edi
	pop	esi
	pop	ebp

; 3294 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3295 : }

	add	esp, 12					; 0000000cH
	ret	0
?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeExperience
_TEXT	ENDS
PUBLIC	?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetLevel
EXTRN	?getLevel@CvUnit@@QBEHXZ:PROC			; CvUnit::getLevel
; Function compile flags: /Ogtpy
;	COMDAT ?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetLevel, COMDAT

; 3299 : {

	push	ebx
	push	ebp
	push	esi

; 3300 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetLevel
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetLevel
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetLevel
	xor	bl, bl
$LN5@lGetLevel:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetLevel
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetLevel:

; 3301 : 
; 3302 : 	const int iResult = pkUnit->getLevel();

	mov	ecx, edi
	call	?getLevel@CvUnit@@QBEHXZ		; CvUnit::getLevel

; 3303 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3304 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3305 : }

	ret	0
?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetLevel
_TEXT	ENDS
PUBLIC	?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetLevel
EXTRN	?setLevel@CvUnit@@QAEXH@Z:PROC			; CvUnit::setLevel
; Function compile flags: /Ogtpy
;	COMDAT ?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetLevel, COMDAT

; 3309 : {

	push	ebx
	push	ebp
	push	esi

; 3310 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetLevel
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetLevel
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetLevel
	xor	bl, bl
$LN5@lSetLevel:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetLevel
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetLevel:

; 3311 : 	const int iNewLevel = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 3312 : 
; 3313 : 	pkUnit->setLevel(iNewLevel);

	push	eax
	mov	ecx, edi
	call	?setLevel@CvUnit@@QAEXH@Z		; CvUnit::setLevel
	pop	edi
	pop	esi
	pop	ebp

; 3314 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3315 : }

	ret	0
?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetLevel
_TEXT	ENDS
PUBLIC	?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lChangeLevel
EXTRN	?changeLevel@CvUnit@@QAEXH@Z:PROC		; CvUnit::changeLevel
; Function compile flags: /Ogtpy
;	COMDAT ?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lChangeLevel, COMDAT

; 3319 : {

	push	ebx
	push	ebp
	push	esi

; 3320 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lChangeLev
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lChangeLev
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lChangeLev
	xor	bl, bl
$LN5@lChangeLev:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lChangeLev
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lChangeLev:

; 3321 : 	const int iChange = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 3322 : 
; 3323 : 	pkUnit->changeLevel(iChange);

	push	eax
	mov	ecx, edi
	call	?changeLevel@CvUnit@@QAEXH@Z		; CvUnit::changeLevel
	pop	edi
	pop	esi
	pop	ebp

; 3324 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3325 : }

	ret	0
?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lChangeLevel
_TEXT	ENDS
PUBLIC	?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFacingDirection
EXTRN	?getFacingDirection@CvUnit@@QBE?AW4DirectionTypes@@_N@Z:PROC ; CvUnit::getFacingDirection
; Function compile flags: /Ogtpy
;	COMDAT ?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bCheckLineOfSightProperty$ = -4			; size = 1
_L$ = 8							; size = 4
?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetFacingDirection, COMDAT

; 3329 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 3330 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetFacing
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetFacing
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetFacing
	xor	bl, bl
$LN5@lGetFacing:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetFacing
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetFacing:

; 3331 : 	const bool bCheckLineOfSightProperty = luaL_optint(L, 2, 0);

	push	0
	push	2
	push	esi
	call	_luaL_optinteger
	add	esp, 12					; 0000000cH
	test	eax, eax
	setne	al
	mov	BYTE PTR _bCheckLineOfSightProperty$[esp+20], al

; 3332 : 
; 3333 : 	const int iResult = pkUnit->getFacingDirection(bCheckLineOfSightProperty);

	mov	ecx, DWORD PTR _bCheckLineOfSightProperty$[esp+20]
	push	ecx
	mov	ecx, edi
	call	?getFacingDirection@CvUnit@@QBE?AW4DirectionTypes@@_N@Z ; CvUnit::getFacingDirection

; 3334 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3335 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3336 : }

	pop	ecx
	ret	0
?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetFacingDirection
_TEXT	ENDS
PUBLIC	?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRotateFacingDirectionClockwise
EXTRN	?rotateFacingDirectionClockwise@CvUnit@@QAEXXZ:PROC ; CvUnit::rotateFacingDirectionClockwise
; Function compile flags: /Ogtpy
;	COMDAT ?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRotateFacingDirectionClockwise, COMDAT

; 3340 : {

	push	ebx
	push	ebp
	push	esi

; 3341 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lRotateFac
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lRotateFac
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lRotateFac
	xor	bl, bl
$LN5@lRotateFac:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lRotateFac
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lRotateFac:

; 3342 : 
; 3343 : 	pkUnit->rotateFacingDirectionClockwise();

	mov	ecx, edi
	call	?rotateFacingDirectionClockwise@CvUnit@@QAEXXZ ; CvUnit::rotateFacingDirectionClockwise
	pop	edi
	pop	esi
	pop	ebp

; 3344 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3345 : }

	ret	0
?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRotateFacingDirectionClockwise
_TEXT	ENDS
PUBLIC	?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRotateFacingDirectionCounterClockwise
EXTRN	?rotateFacingDirectionCounterClockwise@CvUnit@@QAEXXZ:PROC ; CvUnit::rotateFacingDirectionCounterClockwise
; Function compile flags: /Ogtpy
;	COMDAT ?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lRotateFacingDirectionCounterClockwise, COMDAT

; 3349 : {

	push	ebx
	push	ebp
	push	esi

; 3350 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lRotateFac@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lRotateFac@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lRotateFac@2
	xor	bl, bl
$LN5@lRotateFac@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lRotateFac@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lRotateFac@2:

; 3351 : 
; 3352 : 	pkUnit->rotateFacingDirectionCounterClockwise();

	mov	ecx, edi
	call	?rotateFacingDirectionCounterClockwise@CvUnit@@QAEXXZ ; CvUnit::rotateFacingDirectionCounterClockwise
	pop	edi
	pop	esi
	pop	ebp

; 3353 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3354 : }

	ret	0
?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lRotateFacingDirectionCounterClockwise
_TEXT	ENDS
PUBLIC	?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetCargo
EXTRN	?getCargo@CvUnit@@QBEHXZ:PROC			; CvUnit::getCargo
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetCargo, COMDAT

; 3358 : {

	push	ebx
	push	ebp
	push	esi

; 3359 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetCargo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetCargo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetCargo
	xor	bl, bl
$LN5@lGetCargo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetCargo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetCargo:

; 3360 : 
; 3361 : 	const int iResult = pkUnit->getCargo();

	mov	ecx, edi
	call	?getCargo@CvUnit@@QBEHXZ		; CvUnit::getCargo

; 3362 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3363 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3364 : }

	ret	0
?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetCargo
_TEXT	ENDS
PUBLIC	?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFortifyTurns
EXTRN	?getFortifyTurns@CvUnit@@QBEHXZ:PROC		; CvUnit::getFortifyTurns
; Function compile flags: /Ogtpy
;	COMDAT ?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetFortifyTurns, COMDAT

; 3368 : {

	push	ebx
	push	ebp
	push	esi

; 3369 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetFortif
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetFortif
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetFortif
	xor	bl, bl
$LN5@lGetFortif:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetFortif
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetFortif:

; 3370 : 
; 3371 : 	const int iResult = pkUnit->getFortifyTurns();

	mov	ecx, edi
	call	?getFortifyTurns@CvUnit@@QBEHXZ		; CvUnit::getFortifyTurns

; 3372 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3373 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3374 : }

	ret	0
?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetFortifyTurns
_TEXT	ENDS
PUBLIC	?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetBlitzCount
EXTRN	?getBlitzCount@CvUnit@@QBEHXZ:PROC		; CvUnit::getBlitzCount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetBlitzCount, COMDAT

; 3378 : {

	push	ebx
	push	ebp
	push	esi

; 3379 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetBlitzC
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetBlitzC
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetBlitzC
	xor	bl, bl
$LN5@lGetBlitzC:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetBlitzC
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetBlitzC:

; 3380 : 
; 3381 : 	const int iResult = pkUnit->getBlitzCount();

	mov	ecx, edi
	call	?getBlitzCount@CvUnit@@QBEHXZ		; CvUnit::getBlitzCount

; 3382 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3383 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3384 : }

	ret	0
?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetBlitzCount
_TEXT	ENDS
PUBLIC	?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsBlitz
EXTRN	?isBlitz@CvUnit@@QBE_NXZ:PROC			; CvUnit::isBlitz
; Function compile flags: /Ogtpy
;	COMDAT ?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsBlitz, COMDAT

; 3388 : {

	push	ebx
	push	ebp
	push	esi

; 3389 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsBlitz
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsBlitz
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsBlitz
	xor	bl, bl
$LN5@lIsBlitz:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsBlitz
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsBlitz:

; 3390 : 	const bool bResult = pkUnit->isBlitz();

	mov	ecx, edi
	call	?isBlitz@CvUnit@@QBE_NXZ		; CvUnit::isBlitz

; 3391 : 
; 3392 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3393 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3394 : }

	ret	0
?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsBlitz
_TEXT	ENDS
PUBLIC	?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetAmphibCount
EXTRN	?getAmphibCount@CvUnit@@QBEHXZ:PROC		; CvUnit::getAmphibCount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetAmphibCount, COMDAT

; 3398 : {

	push	ebx
	push	ebp
	push	esi

; 3399 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetAmphib
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetAmphib
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetAmphib
	xor	bl, bl
$LN5@lGetAmphib:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetAmphib
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetAmphib:

; 3400 : 
; 3401 : 	const int iResult = pkUnit->getAmphibCount();

	mov	ecx, edi
	call	?getAmphibCount@CvUnit@@QBEHXZ		; CvUnit::getAmphibCount

; 3402 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3403 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3404 : }

	ret	0
?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetAmphibCount
_TEXT	ENDS
PUBLIC	?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsAmphib
EXTRN	?isAmphib@CvUnit@@QBE_NXZ:PROC			; CvUnit::isAmphib
; Function compile flags: /Ogtpy
;	COMDAT ?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsAmphib, COMDAT

; 3408 : {

	push	ebx
	push	ebp
	push	esi

; 3409 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsAmphib
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsAmphib
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsAmphib
	xor	bl, bl
$LN5@lIsAmphib:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsAmphib
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsAmphib:

; 3410 : 	const bool bResult = pkUnit->isAmphib();

	mov	ecx, edi
	call	?isAmphib@CvUnit@@QBE_NXZ		; CvUnit::isAmphib

; 3411 : 
; 3412 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3413 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3414 : }

	ret	0
?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsAmphib
_TEXT	ENDS
PUBLIC	?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRiverCrossingNoPenaltyCount
EXTRN	?getRiverCrossingNoPenaltyCount@CvUnit@@QBEHXZ:PROC ; CvUnit::getRiverCrossingNoPenaltyCount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetRiverCrossingNoPenaltyCount, COMDAT

; 3418 : {

	push	ebx
	push	ebp
	push	esi

; 3419 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetRiverC
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetRiverC
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetRiverC
	xor	bl, bl
$LN5@lGetRiverC:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetRiverC
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetRiverC:

; 3420 : 
; 3421 : 	const int iResult = pkUnit->getRiverCrossingNoPenaltyCount();

	mov	ecx, edi
	call	?getRiverCrossingNoPenaltyCount@CvUnit@@QBEHXZ ; CvUnit::getRiverCrossingNoPenaltyCount

; 3422 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3423 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3424 : }

	ret	0
?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetRiverCrossingNoPenaltyCount
_TEXT	ENDS
PUBLIC	?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRiverCrossingNoPenalty
EXTRN	?isRiverCrossingNoPenalty@CvUnit@@QBE_NXZ:PROC	; CvUnit::isRiverCrossingNoPenalty
; Function compile flags: /Ogtpy
;	COMDAT ?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsRiverCrossingNoPenalty, COMDAT

; 3428 : {

	push	ebx
	push	ebp
	push	esi

; 3429 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsRiverCr
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsRiverCr
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsRiverCr
	xor	bl, bl
$LN5@lIsRiverCr:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsRiverCr
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsRiverCr:

; 3430 : 	const bool bResult = pkUnit->isRiverCrossingNoPenalty();

	mov	ecx, edi
	call	?isRiverCrossingNoPenalty@CvUnit@@QBE_NXZ ; CvUnit::isRiverCrossingNoPenalty

; 3431 : 
; 3432 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3433 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3434 : }

	ret	0
?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsRiverCrossingNoPenalty
_TEXT	ENDS
PUBLIC	?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsEnemyRoute
EXTRN	?isEnemyRoute@CvUnit@@QBE_NXZ:PROC		; CvUnit::isEnemyRoute
; Function compile flags: /Ogtpy
;	COMDAT ?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsEnemyRoute, COMDAT

; 3438 : {

	push	ebx
	push	ebp
	push	esi

; 3439 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsEnemyRo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsEnemyRo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsEnemyRo
	xor	bl, bl
$LN5@lIsEnemyRo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsEnemyRo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsEnemyRo:

; 3440 : 	const bool bResult = pkUnit->isEnemyRoute();

	mov	ecx, edi
	call	?isEnemyRoute@CvUnit@@QBE_NXZ		; CvUnit::isEnemyRoute

; 3441 : 
; 3442 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3443 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3444 : }

	ret	0
?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsEnemyRoute
_TEXT	ENDS
PUBLIC	?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsAlwaysHeal
EXTRN	?isAlwaysHeal@CvUnit@@QBE_NXZ:PROC		; CvUnit::isAlwaysHeal
; Function compile flags: /Ogtpy
;	COMDAT ?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsAlwaysHeal, COMDAT

; 3448 : {

	push	ebx
	push	ebp
	push	esi

; 3449 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsAlwaysH
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsAlwaysH
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsAlwaysH
	xor	bl, bl
$LN5@lIsAlwaysH:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsAlwaysH
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsAlwaysH:

; 3450 : 	const bool bResult = pkUnit->isAlwaysHeal();

	mov	ecx, edi
	call	?isAlwaysHeal@CvUnit@@QBE_NXZ		; CvUnit::isAlwaysHeal

; 3451 : 
; 3452 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3453 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3454 : }

	ret	0
?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsAlwaysHeal
_TEXT	ENDS
PUBLIC	?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHealOutsideFriendly
EXTRN	?isHealOutsideFriendly@CvUnit@@QBE_NXZ:PROC	; CvUnit::isHealOutsideFriendly
; Function compile flags: /Ogtpy
;	COMDAT ?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsHealOutsideFriendly, COMDAT

; 3458 : {

	push	ebx
	push	ebp
	push	esi

; 3459 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsHealOut
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsHealOut
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsHealOut
	xor	bl, bl
$LN5@lIsHealOut:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsHealOut
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsHealOut:

; 3460 : 	const bool bResult = pkUnit->isHealOutsideFriendly();

	mov	ecx, edi
	call	?isHealOutsideFriendly@CvUnit@@QBE_NXZ	; CvUnit::isHealOutsideFriendly

; 3461 : 
; 3462 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3463 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3464 : }

	ret	0
?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsHealOutsideFriendly
_TEXT	ENDS
PUBLIC	?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHillsDoubleMove
EXTRN	?isHillsDoubleMove@CvUnit@@QBE_NXZ:PROC		; CvUnit::isHillsDoubleMove
; Function compile flags: /Ogtpy
;	COMDAT ?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsHillsDoubleMove, COMDAT

; 3468 : {

	push	ebx
	push	ebp
	push	esi

; 3469 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsHillsDo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsHillsDo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsHillsDo
	xor	bl, bl
$LN5@lIsHillsDo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsHillsDo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsHillsDo:

; 3470 : 	const bool bResult = pkUnit->isHillsDoubleMove();

	mov	ecx, edi
	call	?isHillsDoubleMove@CvUnit@@QBE_NXZ	; CvUnit::isHillsDoubleMove

; 3471 : 
; 3472 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3473 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3474 : }

	ret	0
?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsHillsDoubleMove
_TEXT	ENDS
PUBLIC	?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsGarrisoned
EXTRN	?IsGarrisoned@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsGarrisoned
; Function compile flags: /Ogtpy
;	COMDAT ?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsGarrisoned, COMDAT

; 3478 : {

	push	ebx
	push	ebp
	push	esi

; 3479 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsGarriso
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsGarriso
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsGarriso
	xor	bl, bl
$LN5@lIsGarriso:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsGarriso
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsGarriso:

; 3480 : 	const bool bResult = pkUnit->IsGarrisoned();

	mov	ecx, edi
	call	?IsGarrisoned@CvUnit@@QBE_NXZ		; CvUnit::IsGarrisoned

; 3481 : 
; 3482 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3483 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3484 : }

	ret	0
?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsGarrisoned
_TEXT	ENDS
PUBLIC	?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGarrisonedCity
EXTRN	?GetGarrisonedCity@CvUnit@@QAEPAVCvCity@@XZ:PROC ; CvUnit::GetGarrisonedCity
; Function compile flags: /Ogtpy
;	COMDAT ?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetGarrisonedCity, COMDAT

; 3488 : {

	push	ebx
	push	ebp
	push	esi

; 3489 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetGarris
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetGarris
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetGarris
	xor	bl, bl
$LN5@lGetGarris:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetGarris
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetGarris:

; 3490 : 	CvLuaCity::Push(L, pkUnit->GetGarrisonedCity());

	mov	ecx, edi
	call	?GetGarrisonedCity@CvUnit@@QAEPAVCvCity@@XZ ; CvUnit::GetGarrisonedCity
	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaCity@@VCvCity@@@@SAXPAUlua_State@@PAVCvCity@@@Z ; CvLuaScopedInstance<CvLuaCity,CvCity>::Push
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3491 : 
; 3492 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3493 : }

	ret	0
?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetGarrisonedCity
_TEXT	ENDS
PUBLIC	?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraVisibilityRange
EXTRN	?getExtraVisibilityRange@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraVisibilityRange
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraVisibilityRange, COMDAT

; 3497 : {

	push	ebx
	push	ebp
	push	esi

; 3498 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraV
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraV
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraV
	xor	bl, bl
$LN5@lGetExtraV:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraV
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraV:

; 3499 : 
; 3500 : 	const int iResult = pkUnit->getExtraVisibilityRange();

	mov	ecx, edi
	call	?getExtraVisibilityRange@CvUnit@@QBEHXZ	; CvUnit::getExtraVisibilityRange

; 3501 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3502 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3503 : }

	ret	0
?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraVisibilityRange
_TEXT	ENDS
PUBLIC	?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetExtraMoves
EXTRN	?getExtraMoves@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraMoves
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraMoves, COMDAT

; 3507 : {

	push	ebx
	push	ebp
	push	esi

; 3508 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraM
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraM
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraM
	xor	bl, bl
$LN5@lGetExtraM:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraM
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraM:

; 3509 : 
; 3510 : 	const int iResult = pkUnit->getExtraMoves();

	mov	ecx, edi
	call	?getExtraMoves@CvUnit@@QBEHXZ		; CvUnit::getExtraMoves

; 3511 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3512 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3513 : }

	ret	0
?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraMoves
_TEXT	ENDS
PUBLIC	?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraMoveDiscount
EXTRN	?getExtraMoveDiscount@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraMoveDiscount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraMoveDiscount, COMDAT

; 3517 : {

	push	ebx
	push	ebp
	push	esi

; 3518 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraM@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraM@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraM@2
	xor	bl, bl
$LN5@lGetExtraM@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraM@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraM@2:

; 3519 : 
; 3520 : 	const int iResult = pkUnit->getExtraMoveDiscount();

	mov	ecx, edi
	call	?getExtraMoveDiscount@CvUnit@@QBEHXZ	; CvUnit::getExtraMoveDiscount

; 3521 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3522 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3523 : }

	ret	0
?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraMoveDiscount
_TEXT	ENDS
PUBLIC	?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetExtraRange
EXTRN	?getExtraRange@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraRange
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraRange, COMDAT

; 3527 : {

	push	ebx
	push	ebp
	push	esi

; 3528 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraR
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraR
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraR
	xor	bl, bl
$LN5@lGetExtraR:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraR
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraR:

; 3529 : 
; 3530 : 	const int iResult = pkUnit->getExtraRange();

	mov	ecx, edi
	call	?getExtraRange@CvUnit@@QBEHXZ		; CvUnit::getExtraRange

; 3531 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3532 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3533 : }

	ret	0
?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraRange
_TEXT	ENDS
PUBLIC	?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraIntercept
EXTRN	?getExtraIntercept@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraIntercept
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraIntercept, COMDAT

; 3537 : {

	push	ebx
	push	ebp
	push	esi

; 3538 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraI
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraI
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraI
	xor	bl, bl
$LN5@lGetExtraI:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraI
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraI:

; 3539 : 
; 3540 : 	const int iResult = pkUnit->getExtraIntercept();

	mov	ecx, edi
	call	?getExtraIntercept@CvUnit@@QBEHXZ	; CvUnit::getExtraIntercept

; 3541 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3542 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3543 : }

	ret	0
?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraIntercept
_TEXT	ENDS
PUBLIC	?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraEvasion
EXTRN	?getExtraEvasion@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraEvasion
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraEvasion, COMDAT

; 3547 : {

	push	ebx
	push	ebp
	push	esi

; 3548 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraE
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraE
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraE
	xor	bl, bl
$LN5@lGetExtraE:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraE
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraE:

; 3549 : 
; 3550 : 	const int iResult = pkUnit->getExtraEvasion();

	mov	ecx, edi
	call	?getExtraEvasion@CvUnit@@QBEHXZ		; CvUnit::getExtraEvasion

; 3551 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3552 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3553 : }

	ret	0
?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraEvasion
_TEXT	ENDS
PUBLIC	?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFirstStrikes
EXTRN	?getExtraFirstStrikes@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraFirstStrikes
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraFirstStrikes, COMDAT

; 3557 : {

	push	ebx
	push	ebp
	push	esi

; 3558 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraF
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraF
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraF
	xor	bl, bl
$LN5@lGetExtraF:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraF
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraF:

; 3559 : 
; 3560 : 	const int iResult = pkUnit->getExtraFirstStrikes();

	mov	ecx, edi
	call	?getExtraFirstStrikes@CvUnit@@QBEHXZ	; CvUnit::getExtraFirstStrikes

; 3561 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3562 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3563 : }

	ret	0
?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraFirstStrikes
_TEXT	ENDS
PUBLIC	?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraChanceFirstStrikes
EXTRN	?getExtraChanceFirstStrikes@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraChanceFirstStrikes
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraChanceFirstStrikes, COMDAT

; 3567 : {

	push	ebx
	push	ebp
	push	esi

; 3568 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraC
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraC
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraC
	xor	bl, bl
$LN5@lGetExtraC:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraC
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraC:

; 3569 : 
; 3570 : 	const int iResult = pkUnit->getExtraChanceFirstStrikes();

	mov	ecx, edi
	call	?getExtraChanceFirstStrikes@CvUnit@@QBEHXZ ; CvUnit::getExtraChanceFirstStrikes

; 3571 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3572 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3573 : }

	ret	0
?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraChanceFirstStrikes
_TEXT	ENDS
PUBLIC	?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraWithdrawal
EXTRN	?getExtraWithdrawal@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraWithdrawal
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraWithdrawal, COMDAT

; 3577 : {

	push	ebx
	push	ebp
	push	esi

; 3578 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraW
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraW
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraW
	xor	bl, bl
$LN5@lGetExtraW:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraW
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraW:

; 3579 : 
; 3580 : 	const int iResult = pkUnit->getExtraWithdrawal();

	mov	ecx, edi
	call	?getExtraWithdrawal@CvUnit@@QBEHXZ	; CvUnit::getExtraWithdrawal

; 3581 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3582 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3583 : }

	ret	0
?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraWithdrawal
_TEXT	ENDS
PUBLIC	?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraEnemyHeal
EXTRN	?getExtraEnemyHeal@CvUnit@@QBEHXZ:PROC		; CvUnit::getExtraEnemyHeal
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetExtraEnemyHeal, COMDAT

; 3587 : {

	push	ebx
	push	ebp
	push	esi

; 3588 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraE@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraE@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraE@2
	xor	bl, bl
$LN5@lGetExtraE@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraE@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraE@2:

; 3589 : 
; 3590 : 	const int iResult = pkUnit->getExtraEnemyHeal();

	mov	ecx, edi
	call	?getExtraEnemyHeal@CvUnit@@QBEHXZ	; CvUnit::getExtraEnemyHeal

; 3591 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3592 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3593 : }

	ret	0
?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetExtraEnemyHeal
_TEXT	ENDS
PUBLIC	?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraNeutralHeal
EXTRN	?getExtraNeutralHeal@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraNeutralHeal
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraNeutralHeal, COMDAT

; 3597 : {

	push	ebx
	push	ebp
	push	esi

; 3598 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraN
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraN
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraN
	xor	bl, bl
$LN5@lGetExtraN:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraN
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraN:

; 3599 : 
; 3600 : 	const int iResult = pkUnit->getExtraNeutralHeal();

	mov	ecx, edi
	call	?getExtraNeutralHeal@CvUnit@@QBEHXZ	; CvUnit::getExtraNeutralHeal

; 3601 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3602 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3603 : }

	ret	0
?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraNeutralHeal
_TEXT	ENDS
PUBLIC	?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFriendlyHeal
EXTRN	?getExtraFriendlyHeal@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraFriendlyHeal
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraFriendlyHeal, COMDAT

; 3607 : {

	push	ebx
	push	ebp
	push	esi

; 3608 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraF@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraF@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraF@2
	xor	bl, bl
$LN5@lGetExtraF@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraF@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraF@2:

; 3609 : 
; 3610 : 	const int iResult = pkUnit->getExtraFriendlyHeal();

	mov	ecx, edi
	call	?getExtraFriendlyHeal@CvUnit@@QBEHXZ	; CvUnit::getExtraFriendlyHeal

; 3611 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3612 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3613 : }

	ret	0
?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraFriendlyHeal
_TEXT	ENDS
PUBLIC	?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSameTileHeal
EXTRN	?getSameTileHeal@CvUnit@@QBEHXZ:PROC		; CvUnit::getSameTileHeal
; Function compile flags: /Ogtpy
;	COMDAT ?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetSameTileHeal, COMDAT

; 3617 : {

	push	ebx
	push	ebp
	push	esi

; 3618 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetSameTi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetSameTi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetSameTi
	xor	bl, bl
$LN5@lGetSameTi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetSameTi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetSameTi:

; 3619 : 
; 3620 : 	const int iResult = pkUnit->getSameTileHeal();

	mov	ecx, edi
	call	?getSameTileHeal@CvUnit@@QBEHXZ		; CvUnit::getSameTileHeal

; 3621 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3622 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3623 : }

	ret	0
?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetSameTileHeal
_TEXT	ENDS
PUBLIC	?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAdjacentTileHeal
EXTRN	?getAdjacentTileHeal@CvUnit@@QBEHXZ:PROC	; CvUnit::getAdjacentTileHeal
; Function compile flags: /Ogtpy
;	COMDAT ?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetAdjacentTileHeal, COMDAT

; 3627 : {

	push	ebx
	push	ebp
	push	esi

; 3628 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetAdjace@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetAdjace@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetAdjace@2
	xor	bl, bl
$LN5@lGetAdjace@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetAdjace@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetAdjace@2:

; 3629 : 
; 3630 : 	const int iResult = pkUnit->getAdjacentTileHeal();

	mov	ecx, edi
	call	?getAdjacentTileHeal@CvUnit@@QBEHXZ	; CvUnit::getAdjacentTileHeal

; 3631 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3632 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3633 : }

	ret	0
?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetAdjacentTileHeal
_TEXT	ENDS
PUBLIC	?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCombatPercent
EXTRN	?getExtraCombatPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraCombatPercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraCombatPercent, COMDAT

; 3637 : {

	push	ebx
	push	ebp
	push	esi

; 3638 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraC@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraC@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraC@2
	xor	bl, bl
$LN5@lGetExtraC@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraC@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraC@2:

; 3639 : 
; 3640 : 	const int iResult = pkUnit->getExtraCombatPercent();

	mov	ecx, edi
	call	?getExtraCombatPercent@CvUnit@@QBEHXZ	; CvUnit::getExtraCombatPercent

; 3641 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3642 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3643 : }

	ret	0
?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraCombatPercent
_TEXT	ENDS
PUBLIC	?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFriendlyLandsModifier
EXTRN	?getFriendlyLandsModifier@CvUnit@@QBEHXZ:PROC	; CvUnit::getFriendlyLandsModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetFriendlyLandsModifier, COMDAT

; 3647 : {

	push	ebx
	push	ebp
	push	esi

; 3648 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetFriend
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetFriend
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetFriend
	xor	bl, bl
$LN5@lGetFriend:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetFriend
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetFriend:

; 3649 : 
; 3650 : 	const int iResult = pkUnit->getFriendlyLandsModifier();

	mov	ecx, edi
	call	?getFriendlyLandsModifier@CvUnit@@QBEHXZ ; CvUnit::getFriendlyLandsModifier

; 3651 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3652 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3653 : }

	ret	0
?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetFriendlyLandsModifier
_TEXT	ENDS
PUBLIC	?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFriendlyLandsAttackModifier
EXTRN	?getFriendlyLandsAttackModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::getFriendlyLandsAttackModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetFriendlyLandsAttackModifier, COMDAT

; 3657 : {

	push	ebx
	push	ebp
	push	esi

; 3658 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetFriend@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetFriend@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetFriend@2
	xor	bl, bl
$LN5@lGetFriend@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetFriend@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetFriend@2:

; 3659 : 
; 3660 : 	const int iResult = pkUnit->getFriendlyLandsAttackModifier();

	mov	ecx, edi
	call	?getFriendlyLandsAttackModifier@CvUnit@@QBEHXZ ; CvUnit::getFriendlyLandsAttackModifier

; 3661 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3662 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3663 : }

	ret	0
?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetFriendlyLandsAttackModifier
_TEXT	ENDS
PUBLIC	?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOutsideFriendlyLandsModifier
EXTRN	?getOutsideFriendlyLandsModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::getOutsideFriendlyLandsModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetOutsideFriendlyLandsModifier, COMDAT

; 3667 : {

	push	ebx
	push	ebp
	push	esi

; 3668 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetOutsid
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetOutsid
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetOutsid
	xor	bl, bl
$LN5@lGetOutsid:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetOutsid
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetOutsid:

; 3669 : 
; 3670 : 	const int iResult = pkUnit->getOutsideFriendlyLandsModifier();

	mov	ecx, edi
	call	?getOutsideFriendlyLandsModifier@CvUnit@@QBEHXZ ; CvUnit::getOutsideFriendlyLandsModifier

; 3671 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3672 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3673 : }

	ret	0
?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetOutsideFriendlyLandsModifier
_TEXT	ENDS
PUBLIC	?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGoldenAgeForeignAttackBonus
EXTRN	?getGoldenAgeForeignAttackBonus@CvUnit@@QBEHXZ:PROC ; CvUnit::getGoldenAgeForeignAttackBonus
; Function compile flags: /Ogtpy
;	COMDAT ?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGoldenAgeForeignAttackBonus, COMDAT

; 3678 : {

	push	ebx
	push	ebp
	push	esi

; 3679 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetGolden@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetGolden@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetGolden@2
	xor	bl, bl
$LN5@lGetGolden@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetGolden@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetGolden@2:

; 3680 : 
; 3681 : 	const int iResult = pkUnit->getGoldenAgeForeignAttackBonus();

	mov	ecx, edi
	call	?getGoldenAgeForeignAttackBonus@CvUnit@@QBEHXZ ; CvUnit::getGoldenAgeForeignAttackBonus

; 3682 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3683 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3684 : }

	ret	0
?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGoldenAgeForeignAttackBonus
_TEXT	ENDS
PUBLIC	?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatStrengthNearFriendlyMinor
EXTRN	?getCombatStrengthNearFriendlyMinor@CvUnit@@QBEHXZ:PROC ; CvUnit::getCombatStrengthNearFriendlyMinor
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetCombatStrengthNearFriendlyMinor, COMDAT

; 3690 : {

	push	ebx
	push	ebp
	push	esi

; 3691 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetCombat@3
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetCombat@3
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetCombat@3
	xor	bl, bl
$LN5@lGetCombat@3:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetCombat@3
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetCombat@3:

; 3692 : 
; 3693 : 	const int iResult = pkUnit->getCombatStrengthNearFriendlyMinor();

	mov	ecx, edi
	call	?getCombatStrengthNearFriendlyMinor@CvUnit@@QBEHXZ ; CvUnit::getCombatStrengthNearFriendlyMinor

; 3694 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3695 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3696 : }

	ret	0
?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetCombatStrengthNearFriendlyMinor
_TEXT	ENDS
PUBLIC	?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCityAttackPercent
EXTRN	?getExtraCityAttackPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraCityAttackPercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraCityAttackPercent, COMDAT

; 3701 : {

	push	ebx
	push	ebp
	push	esi

; 3702 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraC@3
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraC@3
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraC@3
	xor	bl, bl
$LN5@lGetExtraC@3:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraC@3
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraC@3:

; 3703 : 
; 3704 : 	const int iResult = pkUnit->getExtraCityAttackPercent();

	mov	ecx, edi
	call	?getExtraCityAttackPercent@CvUnit@@QBEHXZ ; CvUnit::getExtraCityAttackPercent

; 3705 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3706 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3707 : }

	ret	0
?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraCityAttackPercent
_TEXT	ENDS
PUBLIC	?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCityDefensePercent
EXTRN	?getExtraCityDefensePercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraCityDefensePercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraCityDefensePercent, COMDAT

; 3711 : {

	push	ebx
	push	ebp
	push	esi

; 3712 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraC@4
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraC@4
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraC@4
	xor	bl, bl
$LN5@lGetExtraC@4:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraC@4
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraC@4:

; 3713 : 
; 3714 : 	const int iResult = pkUnit->getExtraCityDefensePercent();

	mov	ecx, edi
	call	?getExtraCityDefensePercent@CvUnit@@QBEHXZ ; CvUnit::getExtraCityDefensePercent

; 3715 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3716 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3717 : }

	ret	0
?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraCityDefensePercent
_TEXT	ENDS
PUBLIC	?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraHillsAttackPercent
EXTRN	?getExtraHillsAttackPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraHillsAttackPercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraHillsAttackPercent, COMDAT

; 3721 : {

	push	ebx
	push	ebp
	push	esi

; 3722 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraH
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraH
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraH
	xor	bl, bl
$LN5@lGetExtraH:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraH
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraH:

; 3723 : 
; 3724 : 	const int iResult = pkUnit->getExtraHillsAttackPercent();

	mov	ecx, edi
	call	?getExtraHillsAttackPercent@CvUnit@@QBEHXZ ; CvUnit::getExtraHillsAttackPercent

; 3725 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3726 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3727 : }

	ret	0
?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraHillsAttackPercent
_TEXT	ENDS
PUBLIC	?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraHillsDefensePercent
EXTRN	?getExtraHillsDefensePercent@CvUnit@@QBEHXZ:PROC ; CvUnit::getExtraHillsDefensePercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraHillsDefensePercent, COMDAT

; 3731 : {

	push	ebx
	push	ebp
	push	esi

; 3732 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraH@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraH@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraH@2
	xor	bl, bl
$LN5@lGetExtraH@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraH@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraH@2:

; 3733 : 
; 3734 : 	const int iResult = pkUnit->getExtraHillsDefensePercent();

	mov	ecx, edi
	call	?getExtraHillsDefensePercent@CvUnit@@QBEHXZ ; CvUnit::getExtraHillsDefensePercent

; 3735 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3736 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3737 : }

	ret	0
?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraHillsDefensePercent
_TEXT	ENDS
PUBLIC	?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenAttackPercent
EXTRN	?getExtraOpenAttackPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraOpenAttackPercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraOpenAttackPercent, COMDAT

; 3741 : {

	push	ebx
	push	ebp
	push	esi

; 3742 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraO
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraO
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraO
	xor	bl, bl
$LN5@lGetExtraO:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraO
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraO:

; 3743 : 
; 3744 : 	const int iResult = pkUnit->getExtraOpenAttackPercent();

	mov	ecx, edi
	call	?getExtraOpenAttackPercent@CvUnit@@QBEHXZ ; CvUnit::getExtraOpenAttackPercent

; 3745 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3746 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3747 : }

	ret	0
?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraOpenAttackPercent
_TEXT	ENDS
PUBLIC	?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenRangedAttackMod
EXTRN	?getExtraOpenRangedAttackMod@CvUnit@@QBEHXZ:PROC ; CvUnit::getExtraOpenRangedAttackMod
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraOpenRangedAttackMod, COMDAT

; 3751 : {

	push	ebx
	push	ebp
	push	esi

; 3752 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraO@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraO@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraO@2
	xor	bl, bl
$LN5@lGetExtraO@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraO@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraO@2:

; 3753 : 
; 3754 : 	const int iResult = pkUnit->getExtraOpenRangedAttackMod();

	mov	ecx, edi
	call	?getExtraOpenRangedAttackMod@CvUnit@@QBEHXZ ; CvUnit::getExtraOpenRangedAttackMod

; 3755 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3756 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3757 : }

	ret	0
?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraOpenRangedAttackMod
_TEXT	ENDS
PUBLIC	?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRoughAttackPercent
EXTRN	?getExtraRoughAttackPercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraRoughAttackPercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraRoughAttackPercent, COMDAT

; 3761 : {

	push	ebx
	push	ebp
	push	esi

; 3762 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraR@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraR@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraR@2
	xor	bl, bl
$LN5@lGetExtraR@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraR@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraR@2:

; 3763 : 
; 3764 : 	const int iResult = pkUnit->getExtraRoughAttackPercent();

	mov	ecx, edi
	call	?getExtraRoughAttackPercent@CvUnit@@QBEHXZ ; CvUnit::getExtraRoughAttackPercent

; 3765 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3766 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3767 : }

	ret	0
?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraRoughAttackPercent
_TEXT	ENDS
PUBLIC	?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRoughRangedAttackMod
EXTRN	?getExtraRoughRangedAttackMod@CvUnit@@QBEHXZ:PROC ; CvUnit::getExtraRoughRangedAttackMod
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraRoughRangedAttackMod, COMDAT

; 3771 : {

	push	ebx
	push	ebp
	push	esi

; 3772 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraR@3
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraR@3
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraR@3
	xor	bl, bl
$LN5@lGetExtraR@3:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraR@3
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraR@3:

; 3773 : 
; 3774 : 	const int iResult = pkUnit->getExtraRoughRangedAttackMod();

	mov	ecx, edi
	call	?getExtraRoughRangedAttackMod@CvUnit@@QBEHXZ ; CvUnit::getExtraRoughRangedAttackMod

; 3775 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3776 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3777 : }

	ret	0
?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraRoughRangedAttackMod
_TEXT	ENDS
PUBLIC	?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraAttackFortifiedMod
EXTRN	?getExtraAttackFortifiedMod@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraAttackFortifiedMod
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraAttackFortifiedMod, COMDAT

; 3781 : {

	push	ebx
	push	ebp
	push	esi

; 3782 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraA
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraA
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraA
	xor	bl, bl
$LN5@lGetExtraA:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraA
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraA:

; 3783 : 
; 3784 : 	const int iResult = pkUnit->getExtraAttackFortifiedMod();

	mov	ecx, edi
	call	?getExtraAttackFortifiedMod@CvUnit@@QBEHXZ ; CvUnit::getExtraAttackFortifiedMod

; 3785 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3786 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3787 : }

	ret	0
?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraAttackFortifiedMod
_TEXT	ENDS
PUBLIC	?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraAttackWoundedMod
EXTRN	?getExtraAttackWoundedMod@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraAttackWoundedMod
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraAttackWoundedMod, COMDAT

; 3791 : {

	push	ebx
	push	ebp
	push	esi

; 3792 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraA@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraA@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraA@2
	xor	bl, bl
$LN5@lGetExtraA@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraA@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraA@2:

; 3793 : 
; 3794 : 	const int iResult = pkUnit->getExtraAttackWoundedMod();

	mov	ecx, edi
	call	?getExtraAttackWoundedMod@CvUnit@@QBEHXZ ; CvUnit::getExtraAttackWoundedMod

; 3795 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3796 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3797 : }

	ret	0
?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraAttackWoundedMod
_TEXT	ENDS
PUBLIC	?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenDefensePercent
EXTRN	?getExtraOpenDefensePercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExtraOpenDefensePercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraOpenDefensePercent, COMDAT

; 3801 : {

	push	ebx
	push	ebp
	push	esi

; 3802 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraO@3
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraO@3
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraO@3
	xor	bl, bl
$LN5@lGetExtraO@3:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraO@3
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraO@3:

; 3803 : 
; 3804 : 	const int iResult = pkUnit->getExtraOpenDefensePercent();

	mov	ecx, edi
	call	?getExtraOpenDefensePercent@CvUnit@@QBEHXZ ; CvUnit::getExtraOpenDefensePercent

; 3805 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3806 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3807 : }

	ret	0
?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraOpenDefensePercent
_TEXT	ENDS
PUBLIC	?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPillageChange
EXTRN	?getPillageChange@CvUnit@@QBEHXZ:PROC		; CvUnit::getPillageChange
; Function compile flags: /Ogtpy
;	COMDAT ?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetPillageChange, COMDAT

; 3811 : {

	push	ebx
	push	ebp
	push	esi

; 3812 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetPillag
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetPillag
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetPillag
	xor	bl, bl
$LN5@lGetPillag:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetPillag
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetPillag:

; 3813 : 	const int iResult = pkUnit->getPillageChange();

	mov	ecx, edi
	call	?getPillageChange@CvUnit@@QBEHXZ	; CvUnit::getPillageChange

; 3814 : 
; 3815 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3816 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3817 : }

	ret	0
?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetPillageChange
_TEXT	ENDS
PUBLIC	?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUpgradeDiscount
EXTRN	?getUpgradeDiscount@CvUnit@@QBEHXZ:PROC		; CvUnit::getUpgradeDiscount
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUpgradeDiscount, COMDAT

; 3821 : {

	push	ebx
	push	ebp
	push	esi

; 3822 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUpgrad@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUpgrad@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUpgrad@2
	xor	bl, bl
$LN5@lGetUpgrad@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUpgrad@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUpgrad@2:

; 3823 : 	const int iResult = pkUnit->getUpgradeDiscount();

	mov	ecx, edi
	call	?getUpgradeDiscount@CvUnit@@QBEHXZ	; CvUnit::getUpgradeDiscount

; 3824 : 
; 3825 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3826 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3827 : }

	ret	0
?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUpgradeDiscount
_TEXT	ENDS
PUBLIC	?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExperiencePercent
EXTRN	?getExperiencePercent@CvUnit@@QBEHXZ:PROC	; CvUnit::getExperiencePercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExperiencePercent, COMDAT

; 3831 : {

	push	ebx
	push	ebp
	push	esi

; 3832 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExperi@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExperi@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExperi@2
	xor	bl, bl
$LN5@lGetExperi@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExperi@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExperi@2:

; 3833 : 	const int iResult = pkUnit->getExperiencePercent();

	mov	ecx, edi
	call	?getExperiencePercent@CvUnit@@QBEHXZ	; CvUnit::getExperiencePercent

; 3834 : 
; 3835 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3836 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3837 : }

	ret	0
?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExperiencePercent
_TEXT	ENDS
PUBLIC	?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetKamikazePercent
EXTRN	?getKamikazePercent@CvUnit@@QBEHXZ:PROC		; CvUnit::getKamikazePercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetKamikazePercent, COMDAT

; 3841 : {

	push	ebx
	push	ebp
	push	esi

; 3842 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetKamika
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetKamika
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetKamika
	xor	bl, bl
$LN5@lGetKamika:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetKamika
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetKamika:

; 3843 : 	const int iResult = pkUnit->getKamikazePercent();

	mov	ecx, edi
	call	?getKamikazePercent@CvUnit@@QBEHXZ	; CvUnit::getKamikazePercent

; 3844 : 
; 3845 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3846 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3847 : }

	ret	0
?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetKamikazePercent
_TEXT	ENDS
PUBLIC	?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsOutOfAttacks
EXTRN	?isOutOfAttacks@CvUnit@@QBE_NXZ:PROC		; CvUnit::isOutOfAttacks
; Function compile flags: /Ogtpy
;	COMDAT ?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsOutOfAttacks, COMDAT

; 3851 : {

	push	ebx
	push	ebp
	push	esi

; 3852 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsOutOfAt
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsOutOfAt
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsOutOfAt
	xor	bl, bl
$LN5@lIsOutOfAt:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsOutOfAt
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsOutOfAt:

; 3853 : 	const bool bResult = pkUnit->isOutOfAttacks();

	mov	ecx, edi
	call	?isOutOfAttacks@CvUnit@@QBE_NXZ		; CvUnit::isOutOfAttacks

; 3854 : 
; 3855 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3856 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3857 : }

	ret	0
?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsOutOfAttacks
_TEXT	ENDS
PUBLIC	?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetMadeAttack
EXTRN	?setMadeAttack@CvUnit@@QAEX_N@Z:PROC		; CvUnit::setMadeAttack
; Function compile flags: /Ogtpy
;	COMDAT ?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bNewValue$ = -4					; size = 1
_L$ = 8							; size = 4
?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetMadeAttack, COMDAT

; 3861 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 3862 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetMadeAt@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetMadeAt@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetMadeAt@2
	xor	bl, bl
$LN5@lSetMadeAt@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetMadeAt@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetMadeAt@2:

; 3863 : 	const bool bNewValue = lua_toboolean(L, 2);

	push	2
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bNewValue$[esp+20], al

; 3864 : 
; 3865 : 	pkUnit->setMadeAttack(bNewValue);

	mov	ecx, DWORD PTR _bNewValue$[esp+20]
	push	ecx
	mov	ecx, edi
	call	?setMadeAttack@CvUnit@@QAEX_N@Z		; CvUnit::setMadeAttack
	pop	edi
	pop	esi
	pop	ebp

; 3866 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3867 : }

	pop	ecx
	ret	0
?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetMadeAttack
_TEXT	ENDS
PUBLIC	?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lisOutOfInterceptions
EXTRN	?isOutOfInterceptions@CvUnit@@QBE_NXZ:PROC	; CvUnit::isOutOfInterceptions
; Function compile flags: /Ogtpy
;	COMDAT ?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lisOutOfInterceptions, COMDAT

; 3871 : {

	push	ebx
	push	ebp
	push	esi

; 3872 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lisOutOfIn
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lisOutOfIn
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lisOutOfIn
	xor	bl, bl
$LN5@lisOutOfIn:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lisOutOfIn
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lisOutOfIn:

; 3873 : 	const bool bResult = pkUnit->isOutOfInterceptions();

	mov	ecx, edi
	call	?isOutOfInterceptions@CvUnit@@QBE_NXZ	; CvUnit::isOutOfInterceptions

; 3874 : 
; 3875 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3876 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3877 : }

	ret	0
?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lisOutOfInterceptions
_TEXT	ENDS
PUBLIC	?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetMadeInterception
EXTRN	?setMadeInterception@CvUnit@@QAEX_N@Z:PROC	; CvUnit::setMadeInterception
; Function compile flags: /Ogtpy
;	COMDAT ?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bNewValue$ = -4					; size = 1
_L$ = 8							; size = 4
?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lSetMadeInterception, COMDAT

; 3881 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 3882 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetMadeIn
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetMadeIn
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetMadeIn
	xor	bl, bl
$LN5@lSetMadeIn:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetMadeIn
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetMadeIn:

; 3883 : 	const bool bNewValue = lua_toboolean(L, 2);

	push	2
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bNewValue$[esp+20], al

; 3884 : 
; 3885 : 	pkUnit->setMadeInterception(bNewValue);

	mov	ecx, DWORD PTR _bNewValue$[esp+20]
	push	ecx
	mov	ecx, edi
	call	?setMadeInterception@CvUnit@@QAEX_N@Z	; CvUnit::setMadeInterception
	pop	edi
	pop	esi
	pop	ebp

; 3886 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3887 : }

	pop	ecx
	ret	0
?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lSetMadeInterception
_TEXT	ENDS
PUBLIC	?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPromotionReady
EXTRN	?isPromotionReady@CvUnit@@QBE_NXZ:PROC		; CvUnit::isPromotionReady
; Function compile flags: /Ogtpy
;	COMDAT ?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsPromotionReady, COMDAT

; 3891 : {

	push	ebx
	push	ebp
	push	esi

; 3892 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsPromoti
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsPromoti
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsPromoti
	xor	bl, bl
$LN5@lIsPromoti:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsPromoti
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsPromoti:

; 3893 : 	const bool bResult = pkUnit->isPromotionReady();

	mov	ecx, edi
	call	?isPromotionReady@CvUnit@@QBE_NXZ	; CvUnit::isPromotionReady

; 3894 : 
; 3895 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3896 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3897 : }

	ret	0
?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsPromotionReady
_TEXT	ENDS
PUBLIC	?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetPromotionReady
EXTRN	?setPromotionReady@CvUnit@@QAEX_N@Z:PROC	; CvUnit::setPromotionReady
; Function compile flags: /Ogtpy
;	COMDAT ?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bNewValue$ = -4					; size = 1
_L$ = 8							; size = 4
?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetPromotionReady, COMDAT

; 3901 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 3902 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetPromot
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetPromot
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetPromot
	xor	bl, bl
$LN5@lSetPromot:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetPromot
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetPromot:

; 3903 : 	const bool bNewValue = lua_toboolean(L, 2);

	push	2
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bNewValue$[esp+20], al

; 3904 : 
; 3905 : 	pkUnit->setPromotionReady(bNewValue);

	mov	ecx, DWORD PTR _bNewValue$[esp+20]
	push	ecx
	mov	ecx, edi
	call	?setPromotionReady@CvUnit@@QAEX_N@Z	; CvUnit::setPromotionReady
	pop	edi
	pop	esi
	pop	ebp

; 3906 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3907 : }

	pop	ecx
	ret	0
?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetPromotionReady
_TEXT	ENDS
PUBLIC	?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetVisualOwner
EXTRN	?getVisualOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@@Z:PROC ; CvUnit::getVisualOwner
; Function compile flags: /Ogtpy
;	COMDAT ?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetVisualOwner, COMDAT

; 3921 : {

	push	ebx
	push	ebp
	push	esi

; 3922 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetVisual
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetVisual
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetVisual
	xor	bl, bl
$LN5@lGetVisual:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetVisual
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetVisual:

; 3923 : 
; 3924 : 	const int iResult = pkUnit->getVisualOwner();

	push	-1
	mov	ecx, edi
	call	?getVisualOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@@Z ; CvUnit::getVisualOwner

; 3925 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3926 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3927 : }

	ret	0
?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetVisualOwner
_TEXT	ENDS
PUBLIC	?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetCombatOwner
EXTRN	?getCombatOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@ABVCvPlot@@@Z:PROC ; CvUnit::getCombatOwner
; Function compile flags: /Ogtpy
;	COMDAT ?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetCombatOwner, COMDAT

; 3931 : {

	push	ebx
	push	ebp
	push	esi

; 3932 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetCombat@4
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetCombat@4
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetCombat@4
	xor	bl, bl
$LN5@lGetCombat@4:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetCombat@4
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetCombat@4:

; 3933 : 	const TeamTypes eForTeam = (TeamTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 3934 : 
; 3935 : 	const int iResult = pkUnit->getCombatOwner(eForTeam, *(pkUnit->plot()));

	mov	ecx, edi
	mov	ebx, eax
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	push	ebx
	mov	ecx, edi
	call	?getCombatOwner@CvUnit@@QBE?AW4PlayerTypes@@W4TeamTypes@@ABVCvPlot@@@Z ; CvUnit::getCombatOwner

; 3936 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3937 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3938 : }

	ret	0
?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetCombatOwner
_TEXT	ENDS
PUBLIC	?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetOriginalOwner
EXTRN	?SetOriginalOwner@CvUnit@@QAEXW4PlayerTypes@@@Z:PROC ; CvUnit::SetOriginalOwner
; Function compile flags: /Ogtpy
;	COMDAT ?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetOriginalOwner, COMDAT

; 3948 : {

	push	ebx
	push	ebp
	push	esi

; 3949 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetOrigin
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetOrigin
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetOrigin
	xor	bl, bl
$LN5@lSetOrigin:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetOrigin
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetOrigin:

; 3950 : 	const PlayerTypes ePlayerType = (PlayerTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 3951 : 
; 3952 : 	pkUnit->SetOriginalOwner(ePlayerType);

	push	eax
	mov	ecx, edi
	call	?SetOriginalOwner@CvUnit@@QAEXW4PlayerTypes@@@Z ; CvUnit::SetOriginalOwner
	pop	edi
	pop	esi
	pop	ebp

; 3953 : 	return 0;

	xor	eax, eax
	pop	ebx

; 3954 : }

	ret	0
?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetOriginalOwner
_TEXT	ENDS
PUBLIC	?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetTeam
EXTRN	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ:PROC	; CvUnit::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetTeam, COMDAT

; 3958 : {

	push	ebx
	push	ebp
	push	esi

; 3959 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetTeam
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetTeam
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetTeam
	xor	bl, bl
$LN5@lGetTeam:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetTeam
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetTeam:

; 3960 : 
; 3961 : 	const int iResult = pkUnit->getTeam();

	mov	ecx, edi
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam

; 3962 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3963 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3964 : }

	ret	0
?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetTeam
_TEXT	ENDS
PUBLIC	?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetUnitType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitType, COMDAT

; 3968 : {

	push	ebx
	push	ebp
	push	esi

; 3969 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnitTy
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnitTy
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnitTy
	xor	bl, bl
$LN5@lGetUnitTy:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnitTy
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnitTy:

; 3970 : 
; 3971 : 	const UnitTypes eResult = pkUnit->getUnitType();

	mov	ecx, edi
	call	?getUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getUnitType

; 3972 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3973 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3974 : }

	ret	0
?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitType
_TEXT	ENDS
PUBLIC	?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitClassType
EXTRN	?getUnitClassType@CvUnit@@QBE?AW4UnitClassTypes@@XZ:PROC ; CvUnit::getUnitClassType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetUnitClassType, COMDAT

; 3978 : {

	push	ebx
	push	ebp
	push	esi

; 3979 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnitCl
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnitCl
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnitCl
	xor	bl, bl
$LN5@lGetUnitCl:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnitCl
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnitCl:

; 3980 : 
; 3981 : 	const UnitClassTypes eResult = pkUnit->getUnitClassType();

	mov	ecx, edi
	call	?getUnitClassType@CvUnit@@QBE?AW4UnitClassTypes@@XZ ; CvUnit::getUnitClassType

; 3982 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3983 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3984 : }

	ret	0
?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetUnitClassType
_TEXT	ENDS
PUBLIC	?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLeaderUnitType
EXTRN	?getLeaderUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ:PROC ; CvUnit::getLeaderUnitType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetLeaderUnitType, COMDAT

; 3988 : {

	push	ebx
	push	ebp
	push	esi

; 3989 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetLeader
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetLeader
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetLeader
	xor	bl, bl
$LN5@lGetLeader:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetLeader
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetLeader:

; 3990 : 
; 3991 : 	const UnitTypes eResult = pkUnit->getLeaderUnitType();

	mov	ecx, edi
	call	?getLeaderUnitType@CvUnit@@QBE?BW4UnitTypes@@XZ ; CvUnit::getLeaderUnitType

; 3992 : 	lua_pushinteger(L, eResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3993 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3994 : }

	ret	0
?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetLeaderUnitType
_TEXT	ENDS
PUBLIC	?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetLeaderUnitType
EXTRN	?setLeaderUnitType@CvUnit@@QAEXW4UnitTypes@@@Z:PROC ; CvUnit::setLeaderUnitType
; Function compile flags: /Ogtpy
;	COMDAT ?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetLeaderUnitType, COMDAT

; 3998 : {

	push	ebx
	push	ebp
	push	esi

; 3999 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetLeader
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetLeader
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetLeader
	xor	bl, bl
$LN5@lSetLeader:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetLeader
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetLeader:

; 4000 : 	const UnitTypes eLeaderUnitType = (UnitTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4001 : 
; 4002 : 	pkUnit->setLeaderUnitType(eLeaderUnitType);

	push	eax
	mov	ecx, edi
	call	?setLeaderUnitType@CvUnit@@QAEXW4UnitTypes@@@Z ; CvUnit::setLeaderUnitType
	pop	edi
	pop	esi
	pop	ebp

; 4003 : 	return 0;

	xor	eax, eax
	pop	ebx

; 4004 : }

	ret	0
?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetLeaderUnitType
_TEXT	ENDS
PUBLIC	?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearGreatGeneral
EXTRN	?IsNearGreatGeneral@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsNearGreatGeneral
; Function compile flags: /Ogtpy
;	COMDAT ?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsNearGreatGeneral, COMDAT

; 4008 : {

	push	ebx
	push	ebp
	push	esi

; 4009 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNearGre
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNearGre
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsNearGre
	xor	bl, bl
$LN5@lIsNearGre:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNearGre
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsNearGre:

; 4010 : 
; 4011 : 	const bool bResult = pkUnit->IsNearGreatGeneral();

	mov	ecx, edi
	call	?IsNearGreatGeneral@CvUnit@@QBE_NXZ	; CvUnit::IsNearGreatGeneral

; 4012 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4013 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4014 : }

	ret	0
?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsNearGreatGeneral
_TEXT	ENDS
PUBLIC	?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsStackedGreatGeneral
EXTRN	?IsStackedGreatGeneral@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsStackedGreatGeneral
; Function compile flags: /Ogtpy
;	COMDAT ?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsStackedGreatGeneral, COMDAT

; 4018 : {

	push	ebx
	push	ebp
	push	esi

; 4019 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsStacked
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsStacked
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsStacked
	xor	bl, bl
$LN5@lIsStacked:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsStacked
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsStacked:

; 4020 : 
; 4021 : 	const bool bResult = pkUnit->IsStackedGreatGeneral();

	mov	ecx, edi
	call	?IsStackedGreatGeneral@CvUnit@@QBE_NXZ	; CvUnit::IsStackedGreatGeneral

; 4022 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4023 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4024 : }

	ret	0
?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsStackedGreatGeneral
_TEXT	ENDS
PUBLIC	?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsIgnoreGreatGeneralBenefit
EXTRN	?IsIgnoreGreatGeneralBenefit@CvUnit@@QBE_NXZ:PROC ; CvUnit::IsIgnoreGreatGeneralBenefit
; Function compile flags: /Ogtpy
;	COMDAT ?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsIgnoreGreatGeneralBenefit, COMDAT

; 4028 : {

	push	ebx
	push	ebp
	push	esi

; 4029 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsIgnoreG@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsIgnoreG@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsIgnoreG@2
	xor	bl, bl
$LN5@lIsIgnoreG@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsIgnoreG@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsIgnoreG@2:

; 4030 : 
; 4031 : 	const bool bResult = pkUnit->IsIgnoreGreatGeneralBenefit();

	mov	ecx, edi
	call	?IsIgnoreGreatGeneralBenefit@CvUnit@@QBE_NXZ ; CvUnit::IsIgnoreGreatGeneralBenefit

; 4032 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4033 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4034 : }

	ret	0
?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsIgnoreGreatGeneralBenefit
_TEXT	ENDS
PUBLIC	?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetReverseGreatGeneralModifier
EXTRN	?GetReverseGreatGeneralModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::GetReverseGreatGeneralModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetReverseGreatGeneralModifier, COMDAT

; 4038 : {

	push	ebx
	push	ebp
	push	esi

; 4039 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetRevers
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetRevers
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetRevers
	xor	bl, bl
$LN5@lGetRevers:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetRevers
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetRevers:

; 4040 : 
; 4041 : 	const int bResult = pkUnit->GetReverseGreatGeneralModifier();

	mov	ecx, edi
	call	?GetReverseGreatGeneralModifier@CvUnit@@QBEHXZ ; CvUnit::GetReverseGreatGeneralModifier

; 4042 : 	lua_pushinteger(L, bResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4043 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4044 : }

	ret	0
?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetReverseGreatGeneralModifier
_TEXT	ENDS
PUBLIC	?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGreatGeneralCombatModifier
EXTRN	?GetGreatGeneralCombatModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::GetGreatGeneralCombatModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGreatGeneralCombatModifier, COMDAT

; 4048 : {

	push	ebx
	push	ebp
	push	esi

; 4049 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetGreatG
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetGreatG
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetGreatG
	xor	bl, bl
$LN5@lGetGreatG:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetGreatG
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetGreatG:

; 4050 : 
; 4051 : 	const int bResult = pkUnit->GetGreatGeneralCombatModifier();

	mov	ecx, edi
	call	?GetGreatGeneralCombatModifier@CvUnit@@QBEHXZ ; CvUnit::GetGreatGeneralCombatModifier

; 4052 : 	lua_pushinteger(L, bResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4053 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4054 : }

	ret	0
?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGreatGeneralCombatModifier
_TEXT	ENDS
PUBLIC	?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsNearSapper
EXTRN	?IsNearSapper@CvUnit@@QBE_NPBVCvCity@@@Z:PROC	; CvUnit::IsNearSapper
; Function compile flags: /Ogtpy
;	COMDAT ?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsNearSapper, COMDAT

; 4058 : {

	push	ebx
	push	ebp
	push	esi

; 4059 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	xor	ebp, ebp
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsNearSap
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsNearSap
	push	-1
	push	esi
	call	_lua_touserdata
	mov	ebp, eax
	add	esp, 8
	test	ebp, ebp
	je	SHORT $LN5@lIsNearSap
	xor	bl, bl
$LN5@lIsNearSap:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsNearSap
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsNearSap:

; 4060 : 	CvCity* pkCity = CvLuaCity::GetInstance(L, 2, false);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebx, eax
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lIsNearSap
	push	OFFSET $SG224123
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lIsNearSap
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	edi, eax
$LN14@lIsNearSap:
	push	ebx
	push	esi
	call	_lua_settop
	add	esp, 8

; 4061 : 
; 4062 : 	const bool bResult = pkUnit->IsNearSapper(pkCity);

	push	edi
	mov	ecx, ebp
	call	?IsNearSapper@CvUnit@@QBE_NPBVCvCity@@@Z ; CvUnit::IsNearSapper

; 4063 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4064 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4065 : }

	ret	0
?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsNearSapper
_TEXT	ENDS
PUBLIC	?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNearbyImprovementModifier
EXTRN	?GetNearbyImprovementModifier@CvUnit@@QBEHXZ:PROC ; CvUnit::GetNearbyImprovementModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetNearbyImprovementModifier, COMDAT

; 4069 : {

	push	ebx
	push	ebp
	push	esi

; 4070 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetNearby
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetNearby
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetNearby
	xor	bl, bl
$LN5@lGetNearby:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetNearby
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetNearby:

; 4071 : 
; 4072 : 	const int bResult = pkUnit->GetNearbyImprovementModifier();

	mov	ecx, edi
	call	?GetNearbyImprovementModifier@CvUnit@@QBEHXZ ; CvUnit::GetNearbyImprovementModifier

; 4073 : 	lua_pushinteger(L, bResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4074 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4075 : }

	ret	0
?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetNearbyImprovementModifier
_TEXT	ENDS
PUBLIC	?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFriendlyUnitAdjacent
EXTRN	?IsFriendlyUnitAdjacent@CvUnit@@QBE_N_N@Z:PROC	; CvUnit::IsFriendlyUnitAdjacent
; Function compile flags: /Ogtpy
;	COMDAT ?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bCombatUnit$ = -4					; size = 1
_L$ = 8							; size = 4
?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsFriendlyUnitAdjacent, COMDAT

; 4079 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 4080 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsFriendl
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsFriendl
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsFriendl
	xor	bl, bl
$LN5@lIsFriendl:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsFriendl
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsFriendl:

; 4081 : 	const bool bCombatUnit = lua_toboolean(L, 2);

	push	2
	push	esi
	call	_lua_toboolean
	add	esp, 8
	test	eax, eax
	setne	al
	mov	BYTE PTR _bCombatUnit$[esp+20], al

; 4082 : 
; 4083 : 	const bool bResult = pkUnit->IsFriendlyUnitAdjacent(bCombatUnit);

	mov	ecx, DWORD PTR _bCombatUnit$[esp+20]
	push	ecx
	mov	ecx, edi
	call	?IsFriendlyUnitAdjacent@CvUnit@@QBE_N_N@Z ; CvUnit::IsFriendlyUnitAdjacent

; 4084 : 	lua_pushboolean(L, bResult);

	movzx	edx, al
	push	edx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4085 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4086 : }

	pop	ecx
	ret	0
?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsFriendlyUnitAdjacent
_TEXT	ENDS
PUBLIC	?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumEnemyUnitsAdjacent
EXTRN	?GetNumEnemyUnitsAdjacent@CvUnit@@QBEHPBV1@@Z:PROC ; CvUnit::GetNumEnemyUnitsAdjacent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$231794 = -4					; size = 4
_L$ = 8							; size = 4
?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetNumEnemyUnitsAdjacent, COMDAT

; 4090 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 4091 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$231794[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetNumEne
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetNumEne
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$231794[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lGetNumEne
	xor	bl, bl
$LN5@lGetNumEne:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetNumEne
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetNumEne:

; 4092 : 	CvUnit* pkOtherUnit = CvLuaUnit::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lGetNumEne
	push	OFFSET $SG224203
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lGetNumEne
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lGetNumEne
	xor	bl, bl
$LN14@lGetNumEne:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN19@lGetNumEne
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN19@lGetNumEne:

; 4093 : 
; 4094 : 	const int iResult = pkUnit->GetNumEnemyUnitsAdjacent(pkOtherUnit);

	mov	ecx, DWORD PTR _pkInstance$231794[esp+20]
	push	edi
	call	?GetNumEnemyUnitsAdjacent@CvUnit@@QBEHPBV1@@Z ; CvUnit::GetNumEnemyUnitsAdjacent

; 4095 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4096 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4097 : }

	pop	ecx
	ret	0
?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetNumEnemyUnitsAdjacent
_TEXT	ENDS
PUBLIC	?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsCargo
EXTRN	?isCargo@CvUnit@@QBE_NXZ:PROC			; CvUnit::isCargo
; Function compile flags: /Ogtpy
;	COMDAT ?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsCargo, COMDAT

; 4111 : {

	push	ebx
	push	ebp
	push	esi

; 4112 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsCargo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsCargo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsCargo
	xor	bl, bl
$LN5@lIsCargo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsCargo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsCargo:

; 4113 : 	const bool bResult = pkUnit->isCargo();

	mov	ecx, edi
	call	?isCargo@CvUnit@@QBE_NXZ		; CvUnit::isCargo

; 4114 : 
; 4115 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4116 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4117 : }

	ret	0
?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsCargo
_TEXT	ENDS
PUBLIC	?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraDomainModifier
EXTRN	?getExtraDomainModifier@CvUnit@@QBEHW4DomainTypes@@@Z:PROC ; CvUnit::getExtraDomainModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraDomainModifier, COMDAT

; 4121 : {

	push	ebx
	push	ebp
	push	esi

; 4122 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraD
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraD
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraD
	xor	bl, bl
$LN5@lGetExtraD:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraD
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraD:

; 4123 : 	const DomainTypes eIndex = (DomainTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4124 : 
; 4125 : 	const int iResult = pkUnit->getExtraDomainModifier(eIndex);

	push	eax
	mov	ecx, edi
	call	?getExtraDomainModifier@CvUnit@@QBEHW4DomainTypes@@@Z ; CvUnit::getExtraDomainModifier

; 4126 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4127 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4128 : }

	ret	0
?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraDomainModifier
_TEXT	ENDS
PUBLIC	?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetName
EXTRN	?getName@CvUnit@@QBE?BVCvString@@XZ:PROC	; CvUnit::getName
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T231857 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetName, COMDAT

; 4132 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	push	esi

; 4133 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+48]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetName
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetName
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lGetName
	xor	bl, bl
$LN6@lGetName:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetName
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetName:

; 4134 : 
; 4135 : 	lua_pushstring(L, pkUnit->getName());

	lea	eax, DWORD PTR $T231857[esp+56]
	push	eax
	mov	ecx, edi
	call	?getName@CvUnit@@QBE?BVCvString@@XZ	; CvUnit::getName
	mov	ecx, eax
	mov	DWORD PTR __$EHRec$[esp+64], 0
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	esi
	call	_lua_pushstring
	add	esp, 8
	lea	ecx, DWORD PTR $T231857[esp+56]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4136 : 	return 1;
; 4137 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+56]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR $T231857[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetName
PUBLIC	?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetNameNoDesc
EXTRN	?getNameNoDesc@CvUnit@@QBE?BVCvString@@XZ:PROC	; CvUnit::getNameNoDesc
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_name$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetNameNoDesc, COMDAT

; 4140 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	push	esi

; 4141 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+48]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetNameNo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetNameNo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lGetNameNo
	xor	bl, bl
$LN6@lGetNameNo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetNameNo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetNameNo:

; 4142 : 	CvString name = pkUnit->getNameNoDesc();

	lea	eax, DWORD PTR _name$[esp+56]
	push	eax
	mov	ecx, edi
	call	?getNameNoDesc@CvUnit@@QBE?BVCvString@@XZ ; CvUnit::getNameNoDesc

; 4143 : 	lua_pushstring(L, name.c_str());

	lea	ecx, DWORD PTR _name$[esp+56]
	mov	DWORD PTR __$EHRec$[esp+64], 0
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	esi
	call	_lua_pushstring
	add	esp, 8

; 4144 : 	return 1;

	lea	ecx, DWORD PTR _name$[esp+56]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4145 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+56]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetNameNoDesc
PUBLIC	?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lHasName
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_name$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lHasName, COMDAT

; 4148 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	push	esi

; 4149 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+48]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lHasName
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lHasName
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lHasName
	xor	bl, bl
$LN6@lHasName:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lHasName
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lHasName:

; 4150 : 	CvString name = pkUnit->getNameNoDesc();

	lea	eax, DWORD PTR _name$[esp+56]
	push	eax
	mov	ecx, edi
	call	?getNameNoDesc@CvUnit@@QBE?BVCvString@@XZ ; CvUnit::getNameNoDesc

; 4151 : 	lua_pushboolean(L, !name.IsEmpty());

	lea	ecx, DWORD PTR _name$[esp+56]
	mov	DWORD PTR __$EHRec$[esp+64], 0
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	test	al, al
	jne	SHORT $LN15@lHasName
	lea	ecx, DWORD PTR _name$[esp+56]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	test	eax, eax
	je	SHORT $LN15@lHasName
	xor	eax, eax
	jmp	SHORT $LN16@lHasName
$LN15@lHasName:
	mov	eax, 1
$LN16@lHasName:
	xor	ecx, ecx
	test	al, al
	sete	cl
	push	ecx
	push	esi
	call	_lua_pushboolean
	add	esp, 8

; 4152 : 	return 1;

	lea	ecx, DWORD PTR _name$[esp+56]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4153 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+56]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lHasName
PUBLIC	?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetNameKey
EXTRN	?getNameKey@CvUnit@@QBEPBDXZ:PROC		; CvUnit::getNameKey
; Function compile flags: /Ogtpy
;	COMDAT ?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetNameKey, COMDAT

; 4157 : {

	push	ebx
	push	ebp
	push	esi

; 4158 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetNameKe
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetNameKe
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetNameKe
	xor	bl, bl
$LN5@lGetNameKe:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetNameKe
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetNameKe:

; 4159 : 
; 4160 : 	lua_pushstring(L, pkUnit->getNameKey());

	mov	ecx, edi
	call	?getNameKey@CvUnit@@QBEPBDXZ		; CvUnit::getNameKey
	push	eax
	push	esi
	call	_lua_pushstring
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4161 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4162 : }

	ret	0
?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetNameKey
_TEXT	ENDS
PUBLIC	?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetName
EXTRN	?setName@CvUnit@@QAEXVCvString@@@Z:PROC		; CvUnit::setName
EXTRN	_lua_tolstring:PROC
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T231985 = -44						; size = 4
_strName$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lSetName, COMDAT

; 4166 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	ebp
	push	esi

; 4167 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+52]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN7@lSetName
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN7@lSetName
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN7@lSetName
	xor	bl, bl
$LN7@lSetName:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN12@lSetName
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN12@lSetName:

; 4168 : 	CvString strName = lua_tostring(L, 2);

	push	0
	push	2
	push	esi
	call	_lua_tolstring
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN17@lSetName
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN17@lSetName:
	push	eax
	lea	ecx, DWORD PTR _strName$[esp+64]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z

; 4169 : 
; 4170 : 	pkUnit->setName(strName);

	sub	esp, 28					; 0000001cH
	lea	eax, DWORD PTR _strName$[esp+88]
	mov	DWORD PTR $T231985[esp+88], esp
	mov	ecx, esp
	push	eax
	mov	DWORD PTR __$EHRec$[esp+100], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, edi
	call	?setName@CvUnit@@QAEXVCvString@@@Z	; CvUnit::setName

; 4171 : 	return 0;

	lea	ecx, DWORD PTR _strName$[esp+60]
	mov	DWORD PTR __$EHRec$[esp+68], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4172 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+60]
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 44					; 0000002cH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _strName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lSetName
PUBLIC	?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsTerrainDoubleMove
EXTRN	?isTerrainDoubleMove@CvUnit@@QBE_NW4TerrainTypes@@@Z:PROC ; CvUnit::isTerrainDoubleMove
; Function compile flags: /Ogtpy
;	COMDAT ?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsTerrainDoubleMove, COMDAT

; 4176 : {

	push	ebx
	push	ebp
	push	esi

; 4177 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsTerrain
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsTerrain
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsTerrain
	xor	bl, bl
$LN5@lIsTerrain:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsTerrain
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsTerrain:

; 4178 : 	const TerrainTypes eIndex = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4179 : 	const bool bResult = pkUnit->isTerrainDoubleMove(eIndex);

	push	eax
	mov	ecx, edi
	call	?isTerrainDoubleMove@CvUnit@@QBE_NW4TerrainTypes@@@Z ; CvUnit::isTerrainDoubleMove

; 4180 : 
; 4181 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4182 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4183 : }

	ret	0
?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsTerrainDoubleMove
_TEXT	ENDS
PUBLIC	?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFeatureDoubleMove
EXTRN	?isFeatureDoubleMove@CvUnit@@QBE_NW4FeatureTypes@@@Z:PROC ; CvUnit::isFeatureDoubleMove
; Function compile flags: /Ogtpy
;	COMDAT ?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsFeatureDoubleMove, COMDAT

; 4187 : {

	push	ebx
	push	ebp
	push	esi

; 4188 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsFeature
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsFeature
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsFeature
	xor	bl, bl
$LN5@lIsFeature:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsFeature
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsFeature:

; 4189 : 	const FeatureTypes eIndex = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4190 : 	const bool bResult = pkUnit->isFeatureDoubleMove(eIndex);

	push	eax
	mov	ecx, edi
	call	?isFeatureDoubleMove@CvUnit@@QBE_NW4FeatureTypes@@@Z ; CvUnit::isFeatureDoubleMove

; 4191 : 
; 4192 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4193 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4194 : }

	ret	0
?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsFeatureDoubleMove
_TEXT	ENDS
PUBLIC	?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetScriptData
EXTRN	?getScriptData@CvUnit@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; CvUnit::getScriptData
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T232070 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetScriptData, COMDAT

; 4198 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	push	esi

; 4199 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+48]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetScript
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetScript
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lGetScript
	xor	bl, bl
$LN6@lGetScript:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetScript
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetScript:

; 4200 : 	const char* szScriptData = pkUnit->getScriptData().c_str();

	lea	eax, DWORD PTR $T232070[esp+56]
	push	eax
	mov	ecx, edi
	call	?getScriptData@CvUnit@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CvUnit::getScriptData
	mov	ecx, eax
	mov	DWORD PTR __$EHRec$[esp+64], 0
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	lea	ecx, DWORD PTR $T232070[esp+56]
	mov	edi, eax
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4201 : 
; 4202 : 	lua_pushstring(L, szScriptData);

	push	edi
	push	esi
	call	_lua_pushstring

; 4203 : 	return 1;
; 4204 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+64]
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR $T232070[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetScriptData
PUBLIC	?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lSetScriptData
EXTRN	?setScriptData@CvUnit@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CvUnit::setScriptData
; Function compile flags: /Ogtpy
;	COMDAT ?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T232097 = -4						; size = 4
_L$ = 8							; size = 4
?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetScriptData, COMDAT

; 4208 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 4209 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lSetScript
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lSetScript
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lSetScript
	xor	bl, bl
$LN6@lSetScript:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lSetScript
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lSetScript:

; 4210 : 	const char* strNewValue = lua_tostring(L, 2);

	push	0
	push	2
	push	esi
	call	_lua_tolstring

; 4211 : 
; 4212 : 	pkUnit->setScriptData(strNewValue);

	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR $T232097[esp+48], esp
	push	eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, edi
	call	?setScriptData@CvUnit@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvUnit::setScriptData

; 4213 : 	return 0;
; 4214 : }

	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	pop	ecx
	ret	0
?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetScriptData
_TEXT	ENDS
PUBLIC	?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetScenarioData
EXTRN	?getScenarioData@CvUnit@@QBEHXZ:PROC		; CvUnit::getScenarioData
; Function compile flags: /Ogtpy
;	COMDAT ?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetScenarioData, COMDAT

; 4218 : {

	push	ebx
	push	ebp
	push	esi

; 4219 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetScenar
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetScenar
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetScenar
	xor	bl, bl
$LN5@lGetScenar:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetScenar
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetScenar:

; 4220 : 	const int iData = pkUnit->getScenarioData();

	mov	ecx, edi
	call	?getScenarioData@CvUnit@@QBEHXZ		; CvUnit::getScenarioData

; 4221 : 
; 4222 : 	lua_pushinteger(L, iData);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4223 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4224 : }

	ret	0
?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetScenarioData
_TEXT	ENDS
PUBLIC	?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetScenarioData
EXTRN	?setScenarioData@CvUnit@@QAEXH@Z:PROC		; CvUnit::setScenarioData
; Function compile flags: /Ogtpy
;	COMDAT ?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetScenarioData, COMDAT

; 4228 : {

	push	ebx
	push	ebp
	push	esi

; 4229 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetScenar
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetScenar
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetScenar
	xor	bl, bl
$LN5@lSetScenar:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetScenar
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetScenar:

; 4230 : 	const int iNewData = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4231 : 
; 4232 : 	pkUnit->setScenarioData(iNewData);

	push	eax
	mov	ecx, edi
	call	?setScenarioData@CvUnit@@QAEXH@Z	; CvUnit::setScenarioData
	pop	edi
	pop	esi
	pop	ebp

; 4233 : 	return 0;

	xor	eax, eax
	pop	ebx

; 4234 : }

	ret	0
?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetScenarioData
_TEXT	ENDS
PUBLIC	?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraTerrainAttackPercent
EXTRN	?getExtraTerrainAttackPercent@CvUnit@@QBEHW4TerrainTypes@@@Z:PROC ; CvUnit::getExtraTerrainAttackPercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraTerrainAttackPercent, COMDAT

; 4238 : {

	push	ebx
	push	ebp
	push	esi

; 4239 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraT
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraT
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraT
	xor	bl, bl
$LN5@lGetExtraT:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraT
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraT:

; 4240 : 	const TerrainTypes eIndex = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4241 : 
; 4242 : 	const int iResult = pkUnit->getExtraTerrainAttackPercent(eIndex);

	push	eax
	mov	ecx, edi
	call	?getExtraTerrainAttackPercent@CvUnit@@QBEHW4TerrainTypes@@@Z ; CvUnit::getExtraTerrainAttackPercent

; 4243 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4244 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4245 : }

	ret	0
?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraTerrainAttackPercent
_TEXT	ENDS
PUBLIC	?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraTerrainDefensePercent
EXTRN	?getExtraTerrainDefensePercent@CvUnit@@QBEHW4TerrainTypes@@@Z:PROC ; CvUnit::getExtraTerrainDefensePercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraTerrainDefensePercent, COMDAT

; 4249 : {

	push	ebx
	push	ebp
	push	esi

; 4250 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraT@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraT@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraT@2
	xor	bl, bl
$LN5@lGetExtraT@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraT@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraT@2:

; 4251 : 	const TerrainTypes eIndex = (TerrainTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4252 : 
; 4253 : 	const int iResult = pkUnit->getExtraTerrainDefensePercent(eIndex);

	push	eax
	mov	ecx, edi
	call	?getExtraTerrainDefensePercent@CvUnit@@QBEHW4TerrainTypes@@@Z ; CvUnit::getExtraTerrainDefensePercent

; 4254 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4255 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4256 : }

	ret	0
?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraTerrainDefensePercent
_TEXT	ENDS
PUBLIC	?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFeatureAttackPercent
EXTRN	?getExtraFeatureAttackPercent@CvUnit@@QBEHW4FeatureTypes@@@Z:PROC ; CvUnit::getExtraFeatureAttackPercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraFeatureAttackPercent, COMDAT

; 4260 : {

	push	ebx
	push	ebp
	push	esi

; 4261 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraF@3
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraF@3
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraF@3
	xor	bl, bl
$LN5@lGetExtraF@3:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraF@3
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraF@3:

; 4262 : 	const FeatureTypes eIndex = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4263 : 
; 4264 : 	const int iResult = pkUnit->getExtraFeatureAttackPercent(eIndex);

	push	eax
	mov	ecx, edi
	call	?getExtraFeatureAttackPercent@CvUnit@@QBEHW4FeatureTypes@@@Z ; CvUnit::getExtraFeatureAttackPercent

; 4265 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4266 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4267 : }

	ret	0
?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraFeatureAttackPercent
_TEXT	ENDS
PUBLIC	?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFeatureDefensePercent
EXTRN	?getExtraFeatureDefensePercent@CvUnit@@QBEHW4FeatureTypes@@@Z:PROC ; CvUnit::getExtraFeatureDefensePercent
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraFeatureDefensePercent, COMDAT

; 4271 : {

	push	ebx
	push	ebp
	push	esi

; 4272 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraF@4
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraF@4
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraF@4
	xor	bl, bl
$LN5@lGetExtraF@4:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraF@4
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraF@4:

; 4273 : 	const FeatureTypes eIndex = (FeatureTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4274 : 
; 4275 : 	const int iResult = pkUnit->getExtraFeatureDefensePercent(eIndex);

	push	eax
	mov	ecx, edi
	call	?getExtraFeatureDefensePercent@CvUnit@@QBEHW4FeatureTypes@@@Z ; CvUnit::getExtraFeatureDefensePercent

; 4276 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4277 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4278 : }

	ret	0
?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraFeatureDefensePercent
_TEXT	ENDS
PUBLIC	?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraUnitCombatModifier
EXTRN	?getExtraUnitCombatModifier@CvUnit@@QBEHW4UnitCombatTypes@@@Z:PROC ; CvUnit::getExtraUnitCombatModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetExtraUnitCombatModifier, COMDAT

; 4282 : {

	push	ebx
	push	ebp
	push	esi

; 4283 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetExtraU
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetExtraU
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetExtraU
	xor	bl, bl
$LN5@lGetExtraU:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetExtraU
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetExtraU:

; 4284 : 	const UnitCombatTypes eIndex = (UnitCombatTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4285 : 
; 4286 : 	const int iResult = pkUnit->getExtraUnitCombatModifier(eIndex);

	push	eax
	mov	ecx, edi
	call	?getExtraUnitCombatModifier@CvUnit@@QBEHW4UnitCombatTypes@@@Z ; CvUnit::getExtraUnitCombatModifier

; 4287 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4288 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4289 : }

	ret	0
?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetExtraUnitCombatModifier
_TEXT	ENDS
PUBLIC	?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitClassModifier
EXTRN	?getUnitClassModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z:PROC ; CvUnit::getUnitClassModifier
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUnitClassModifier, COMDAT

; 4293 : {

	push	ebx
	push	ebp
	push	esi

; 4294 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnitCl@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnitCl@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnitCl@2
	xor	bl, bl
$LN5@lGetUnitCl@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnitCl@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnitCl@2:

; 4295 : 	const UnitClassTypes eIndex = (UnitClassTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4296 : 
; 4297 : 	const int iResult = pkUnit->getUnitClassModifier(eIndex);

	push	eax
	mov	ecx, edi
	call	?getUnitClassModifier@CvUnit@@QBEHW4UnitClassTypes@@@Z ; CvUnit::getUnitClassModifier

; 4298 : 	lua_pushinteger(L, iResult);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4299 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4300 : }

	ret	0
?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUnitClassModifier
_TEXT	ENDS
PUBLIC	?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAcquirePromotion
EXTRN	?canAcquirePromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z:PROC ; CvUnit::canAcquirePromotion
; Function compile flags: /Ogtpy
;	COMDAT ?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanAcquirePromotion, COMDAT

; 4304 : {

	push	ebx
	push	ebp
	push	esi

; 4305 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanAcquir
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanAcquir
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanAcquir
	xor	bl, bl
$LN5@lCanAcquir:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanAcquir
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanAcquir:

; 4306 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4307 : 	const bool bResult = pkUnit->canAcquirePromotion(ePromotion);

	push	eax
	mov	ecx, edi
	call	?canAcquirePromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z ; CvUnit::canAcquirePromotion

; 4308 : 
; 4309 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4310 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4311 : }

	ret	0
?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanAcquirePromotion
_TEXT	ENDS
PUBLIC	?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAcquirePromotionAny
EXTRN	?canAcquirePromotionAny@CvUnit@@QBE_NXZ:PROC	; CvUnit::canAcquirePromotionAny
; Function compile flags: /Ogtpy
;	COMDAT ?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanAcquirePromotionAny, COMDAT

; 4315 : {

	push	ebx
	push	ebp
	push	esi

; 4316 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lCanAcquir@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lCanAcquir@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lCanAcquir@2
	xor	bl, bl
$LN5@lCanAcquir@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanAcquir@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanAcquir@2:

; 4317 : 	const bool bResult = pkUnit->canAcquirePromotionAny();

	mov	ecx, edi
	call	?canAcquirePromotionAny@CvUnit@@QBE_NXZ	; CvUnit::canAcquirePromotionAny

; 4318 : 
; 4319 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4320 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4321 : }

	ret	0
?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanAcquirePromotionAny
_TEXT	ENDS
PUBLIC	?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPromotionValid
EXTRN	?isPromotionValid@CvUnit@@QBE_NW4PromotionTypes@@@Z:PROC ; CvUnit::isPromotionValid
; Function compile flags: /Ogtpy
;	COMDAT ?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsPromotionValid, COMDAT

; 4325 : {

	push	ebx
	push	ebp
	push	esi

; 4326 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsPromoti@2
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsPromoti@2
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsPromoti@2
	xor	bl, bl
$LN5@lIsPromoti@2:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsPromoti@2
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsPromoti@2:

; 4327 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4328 : 	const bool bResult = pkUnit->isPromotionValid(ePromotion);

	push	eax
	mov	ecx, edi
	call	?isPromotionValid@CvUnit@@QBE_NW4PromotionTypes@@@Z ; CvUnit::isPromotionValid

; 4329 : 
; 4330 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4331 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4332 : }

	ret	0
?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsPromotionValid
_TEXT	ENDS
PUBLIC	?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsHasPromotion
EXTRN	?isHasPromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z:PROC ; CvUnit::isHasPromotion
; Function compile flags: /Ogtpy
;	COMDAT ?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsHasPromotion, COMDAT

; 4336 : {

	push	ebx
	push	ebp
	push	esi

; 4337 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsHasProm
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsHasProm
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsHasProm
	xor	bl, bl
$LN5@lIsHasProm:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsHasProm
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsHasProm:

; 4338 : 	const PromotionTypes ePromotion = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4339 : 	const bool bResult = pkUnit->isHasPromotion(ePromotion);

	push	eax
	mov	ecx, edi
	call	?isHasPromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z ; CvUnit::isHasPromotion

; 4340 : 
; 4341 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4342 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4343 : }

	ret	0
?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsHasPromotion
_TEXT	ENDS
PUBLIC	?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetHasPromotion
EXTRN	?setHasPromotion@CvUnit@@QAEXW4PromotionTypes@@_N@Z:PROC ; CvUnit::setHasPromotion
; Function compile flags: /Ogtpy
;	COMDAT ?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bNewValue$ = -4					; size = 1
_L$ = 8							; size = 4
?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lSetHasPromotion, COMDAT

; 4347 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 4348 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetHasPro
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetHasPro
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetHasPro
	xor	bl, bl
$LN5@lSetHasPro:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetHasPro
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetHasPro:

; 4349 : 	const PromotionTypes eIndex = (PromotionTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 4350 : 	const bool bNewValue = lua_toboolean(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_toboolean
	add	esp, 16					; 00000010H
	test	eax, eax
	setne	al
	mov	BYTE PTR _bNewValue$[esp+20], al

; 4351 : 
; 4352 : 	pkUnit->setHasPromotion(eIndex, bNewValue);

	mov	ecx, DWORD PTR _bNewValue$[esp+20]
	push	ecx
	push	ebx
	mov	ecx, edi
	call	?setHasPromotion@CvUnit@@QAEXW4PromotionTypes@@_N@Z ; CvUnit::setHasPromotion
	pop	edi
	pop	esi
	pop	ebp

; 4353 : 	return 0;

	xor	eax, eax
	pop	ebx

; 4354 : }

	pop	ecx
	ret	0
?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lSetHasPromotion
_TEXT	ENDS
PUBLIC	?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetReligion
; Function compile flags: /Ogtpy
;	COMDAT ?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetReligion, COMDAT

; 4358 : {

	push	ebx
	push	ebp
	push	esi

; 4359 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetReligi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetReligi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetReligi
	xor	bl, bl
$LN5@lGetReligi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetReligi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetReligi:

; 4360 : 	ReligionTypes eReligion = pkUnit->GetReligionData()->GetReligion();

	mov	eax, DWORD PTR [edi+1888]

; 4361 : 	lua_pushinteger(L, (int)eReligion);

	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4362 : 
; 4363 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4364 : }

	ret	0
?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetReligion
_TEXT	ENDS
PUBLIC	?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetConversionStrength
EXTRN	?GetConversionStrength@CvUnit@@QBEHXZ:PROC	; CvUnit::GetConversionStrength
; Function compile flags: /Ogtpy
;	COMDAT ?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetConversionStrength, COMDAT

; 4368 : {

	push	ebx
	push	ebp
	push	esi

; 4369 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetConver
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetConver
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetConver
	xor	bl, bl
$LN5@lGetConver:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetConver
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetConver:

; 4370 : 	int iReligiousStrength = pkUnit->GetConversionStrength();

	mov	ecx, edi
	call	?GetConversionStrength@CvUnit@@QBEHXZ	; CvUnit::GetConversionStrength

; 4371 : 
; 4372 : 	lua_pushinteger(L, iReligiousStrength);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4373 : 
; 4374 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4375 : }

	ret	0
?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetConversionStrength
_TEXT	ENDS
PUBLIC	?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetSpreadsLeft
; Function compile flags: /Ogtpy
;	COMDAT ?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetSpreadsLeft, COMDAT

; 4379 : {

	push	ebx
	push	ebp
	push	esi

; 4380 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetSpread
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetSpread
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetSpread
	xor	bl, bl
$LN5@lGetSpread:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetSpread
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetSpread:

; 4381 : 	int iReligiousStrength = pkUnit->GetReligionData()->GetSpreadsLeft();
; 4382 : 	lua_pushinteger(L, iReligiousStrength);

	mov	eax, DWORD PTR [edi+1888]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4383 : 
; 4384 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4385 : }

	ret	0
?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetSpreadsLeft
_TEXT	ENDS
PUBLIC	?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumFollowersAfterSpread
EXTRN	?GetNumFollowersAfterSpread@CvUnit@@QBEHXZ:PROC	; CvUnit::GetNumFollowersAfterSpread
; Function compile flags: /Ogtpy
;	COMDAT ?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetNumFollowersAfterSpread, COMDAT

; 4389 : {

	push	ebx
	push	ebp
	push	esi

; 4390 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetNumFol
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetNumFol
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetNumFol
	xor	bl, bl
$LN5@lGetNumFol:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetNumFol
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetNumFol:

; 4391 : 	const int iData = pkUnit->GetNumFollowersAfterSpread();

	mov	ecx, edi
	call	?GetNumFollowersAfterSpread@CvUnit@@QBEHXZ ; CvUnit::GetNumFollowersAfterSpread

; 4392 : 
; 4393 : 	lua_pushinteger(L, iData);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4394 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4395 : }

	ret	0
?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetNumFollowersAfterSpread
_TEXT	ENDS
PUBLIC	?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMajorityReligionAfterSpread
EXTRN	?GetMajorityReligionAfterSpread@CvUnit@@QBE?AW4ReligionTypes@@XZ:PROC ; CvUnit::GetMajorityReligionAfterSpread
; Function compile flags: /Ogtpy
;	COMDAT ?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetMajorityReligionAfterSpread, COMDAT

; 4399 : {

	push	ebx
	push	ebp
	push	esi

; 4400 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetMajori
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetMajori
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetMajori
	xor	bl, bl
$LN5@lGetMajori:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetMajori
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetMajori:

; 4401 : 	const int iData = pkUnit->GetMajorityReligionAfterSpread();

	mov	ecx, edi
	call	?GetMajorityReligionAfterSpread@CvUnit@@QBE?AW4ReligionTypes@@XZ ; CvUnit::GetMajorityReligionAfterSpread

; 4402 : 
; 4403 : 	lua_pushinteger(L, iData);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4404 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4405 : }

	ret	0
?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetMajorityReligionAfterSpread
_TEXT	ENDS
PUBLIC	?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTourismBlastStrength
EXTRN	?GetTourismBlastStrength@CvUnit@@QBEHXZ:PROC	; CvUnit::GetTourismBlastStrength
; Function compile flags: /Ogtpy
;	COMDAT ?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetTourismBlastStrength, COMDAT

; 4409 : {

	push	ebx
	push	ebp
	push	esi

; 4410 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetTouris
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetTouris
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetTouris
	xor	bl, bl
$LN5@lGetTouris:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetTouris
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetTouris:

; 4411 : 	int iStrength = pkUnit->GetTourismBlastStrength();

	mov	ecx, edi
	call	?GetTourismBlastStrength@CvUnit@@QBEHXZ	; CvUnit::GetTourismBlastStrength

; 4412 : 
; 4413 : 	lua_pushinteger(L, iStrength);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4414 : 
; 4415 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4416 : }

	ret	0
?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetTourismBlastStrength
_TEXT	ENDS
PUBLIC	?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGreatWorkSlotType
EXTRN	?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z:PROC ; CultureHelpers::GetGreatWorkSlot
EXTRN	?GetGreatWork@CvUnit@@QBE?AW4GreatWorkType@@XZ:PROC ; CvUnit::GetGreatWork
; Function compile flags: /Ogtpy
;	COMDAT ?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetGreatWorkSlotType, COMDAT

; 4420 : {

	push	ebx
	push	ebp
	push	esi

; 4421 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetGreatW
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetGreatW
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetGreatW
	xor	bl, bl
$LN5@lGetGreatW:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetGreatW
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetGreatW:

; 4422 : 	const int iData = (int)CultureHelpers::GetGreatWorkSlot(pkUnit->GetGreatWork());

	mov	ecx, edi
	call	?GetGreatWork@CvUnit@@QBE?AW4GreatWorkType@@XZ ; CvUnit::GetGreatWork
	push	eax
	call	?GetGreatWorkSlot@CultureHelpers@@YA?AW4GreatWorkSlotType@@W4GreatWorkType@@@Z ; CultureHelpers::GetGreatWorkSlot

; 4423 : 
; 4424 : 	lua_pushinteger(L, iData);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp

; 4425 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4426 : }

	ret	0
?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetGreatWorkSlotType
_TEXT	ENDS
PUBLIC	?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lRangeStrike
EXTRN	?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z:PROC ; CvUnitCombat::AttackRanged
; Function compile flags: /Ogtpy
;	COMDAT ?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lRangeStrike, COMDAT

; 4430 : {

	push	ebx
	push	ebp
	push	esi

; 4431 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lRangeStri
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lRangeStri
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lRangeStri
	xor	bl, bl
$LN6@lRangeStri:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lRangeStri
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lRangeStri:

; 4432 : 	const int x = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 4433 : 	const int y = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger
	add	esp, 16					; 00000010H

; 4434 : 
; 4435 : 	if(pkUnit)

	test	edi, edi
	je	SHORT $LN13@lRangeStri

; 4436 : 		CvUnitCombat::AttackRanged(*pkUnit, x, y, CvUnitCombat::ATTACK_OPTION_NONE);

	push	0
	push	eax
	push	ebx
	push	edi
	call	?AttackRanged@CvUnitCombat@@SA?AW4ATTACK_RESULT@1@AAVCvUnit@@HHW4ATTACK_OPTION@1@@Z ; CvUnitCombat::AttackRanged
	add	esp, 16					; 00000010H
$LN13@lRangeStri:
	pop	edi
	pop	esi
	pop	ebp

; 4437 : 	return 0;

	xor	eax, eax
	pop	ebx

; 4438 : }

	ret	0
?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lRangeStrike
_TEXT	ENDS
PUBLIC	?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitFlagIconOffset
EXTRN	?GetUnitFlagIconOffset@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetUnitFlagIconOffset
EXTRN	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ:PROC	; CvUnit::getUnitInfo
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUnitFlagIconOffset, COMDAT

; 4442 : {

	push	ebx
	push	ebp
	push	esi

; 4443 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnitFl
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnitFl
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnitFl
	xor	bl, bl
$LN5@lGetUnitFl:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnitFl
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnitFl:

; 4444 : 	CvUnitEntry& unitInfo = pkUnit->getUnitInfo();

	mov	ecx, edi
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo

; 4445 : 	lua_pushinteger(L, unitInfo.GetUnitFlagIconOffset());

	mov	ecx, eax
	call	?GetUnitFlagIconOffset@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetUnitFlagIconOffset
	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4446 : 
; 4447 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4448 : }

	ret	0
?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUnitFlagIconOffset
_TEXT	ENDS
PUBLIC	?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitPortraitOffset
EXTRN	?GetUnitPortraitOffset@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetUnitPortraitOffset
; Function compile flags: /Ogtpy
;	COMDAT ?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetUnitPortraitOffset, COMDAT

; 4452 : {

	push	ebx
	push	ebp
	push	esi

; 4453 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetUnitPo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetUnitPo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetUnitPo
	xor	bl, bl
$LN5@lGetUnitPo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetUnitPo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetUnitPo:

; 4454 : 	CvUnitEntry& unitInfo = pkUnit->getUnitInfo();

	mov	ecx, edi
	call	?getUnitInfo@CvUnit@@QBEAAVCvUnitEntry@@XZ ; CvUnit::getUnitInfo

; 4455 : 	lua_pushinteger(L, unitInfo.GetUnitPortraitOffset());

	mov	ecx, eax
	call	?GetUnitPortraitOffset@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetUnitPortraitOffset
	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4456 : 
; 4457 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4458 : }

	ret	0
?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetUnitPortraitOffset
_TEXT	ENDS
PUBLIC	?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetActivityType
EXTRN	?GetActivityType@CvUnit@@QBE?AW4ActivityTypes@@XZ:PROC ; CvUnit::GetActivityType
; Function compile flags: /Ogtpy
;	COMDAT ?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetActivityType, COMDAT

; 4463 : {

	push	ebx
	push	ebp
	push	esi

; 4464 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetActivi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetActivi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lGetActivi
	xor	bl, bl
$LN6@lGetActivi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetActivi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetActivi:

; 4465 : 
; 4466 : 	int iActivityType = NO_ACTIVITY;

	or	eax, -1

; 4467 : 	if(pkUnit)

	test	edi, edi
	je	SHORT $LN1@lGetActivi

; 4468 : 	{
; 4469 : 		iActivityType = pkUnit->GetActivityType();

	mov	ecx, edi
	call	?GetActivityType@CvUnit@@QBE?AW4ActivityTypes@@XZ ; CvUnit::GetActivityType
$LN1@lGetActivi:

; 4470 : 	}
; 4471 : 	lua_pushinteger(L, iActivityType);

	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4472 : 
; 4473 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4474 : }

	ret	0
?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetActivityType
_TEXT	ENDS
PUBLIC	?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsReadyToMove
EXTRN	?ReadyToMove@CvUnit@@QBE_NXZ:PROC		; CvUnit::ReadyToMove
; Function compile flags: /Ogtpy
;	COMDAT ?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsReadyToMove, COMDAT

; 4479 : {

	push	ebx
	push	ebp
	push	esi

; 4480 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsReadyTo
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsReadyTo
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsReadyTo
	xor	bl, bl
$LN5@lIsReadyTo:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsReadyTo
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsReadyTo:

; 4481 : 	bool bResult = pkUnit->ReadyToMove();

	mov	ecx, edi
	call	?ReadyToMove@CvUnit@@QBE_NXZ		; CvUnit::ReadyToMove

; 4482 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4483 : 
; 4484 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4485 : }

	ret	0
?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsReadyToMove
_TEXT	ENDS
PUBLIC	?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lIsBusy
EXTRN	?IsBusy@CvUnit@@QBE_NXZ:PROC			; CvUnit::IsBusy
; Function compile flags: /Ogtpy
;	COMDAT ?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lIsBusy, COMDAT

; 4489 : {

	push	ebx
	push	ebp
	push	esi

; 4490 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsBusy
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsBusy
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsBusy
	xor	bl, bl
$LN5@lIsBusy:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsBusy
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsBusy:

; 4491 : 	bool bResult = pkUnit->IsBusy();

	mov	ecx, edi
	call	?IsBusy@CvUnit@@QBE_NXZ			; CvUnit::IsBusy

; 4492 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4493 : 
; 4494 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4495 : }

	ret	0
?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lIsBusy
_TEXT	ENDS
PUBLIC	?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lPushMission
EXTRN	?PushMission@CvUnit@@QAEXW4MissionTypes@@HHH_N1W4MissionAITypes@@PAVCvPlot@@PAV1@@Z:PROC ; CvUnit::PushMission
; Function compile flags: /Ogtpy
;	COMDAT ?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$232637 = -28				; size = 4
_stack_size$232646 = -24				; size = 4
_eMissionAI$ = -20					; size = 4
_bManual$ = -16						; size = 1
_bAppend$ = -12						; size = 1
_iFlags$ = -8						; size = 4
_iData2$ = -4						; size = 4
_L$ = 8							; size = 4
?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lPushMission, COMDAT

; 4500 : {

	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	push	esi

; 4501 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+36]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$232637[esp+56], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN19@lPushMissi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN19@lPushMissi
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$232637[esp+44], eax
	test	eax, eax
	je	SHORT $LN19@lPushMissi
	xor	bl, bl
$LN19@lPushMissi:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lPushMissi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lPushMissi:

; 4502 : 	const MissionTypes eMission = (MissionTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 4503 : 	const int iData1 = luaL_optint(L, 3, -1);

	push	-1
	push	3
	push	esi
	mov	ebx, eax
	call	_luaL_optinteger

; 4504 : 	const int iData2 = luaL_optint(L, 4, -1);

	push	-1
	push	4
	push	esi
	mov	ebp, eax
	call	_luaL_optinteger

; 4505 : 	const int iFlags = luaL_optint(L, 5, 0);

	push	0
	push	5
	push	esi
	mov	DWORD PTR _iData2$[esp+88], eax
	call	_luaL_optinteger

; 4506 : 	const bool bAppend = luaL_optint(L, 6, 0);

	push	0
	push	6
	push	esi
	mov	DWORD PTR _iFlags$[esp+100], eax
	call	_luaL_optinteger

; 4507 : 	const bool bManual = luaL_optint(L, 7, 0);

	push	0
	test	eax, eax
	setne	al
	push	7
	push	esi
	mov	BYTE PTR _bAppend$[esp+112], al
	call	_luaL_optinteger
	add	esp, 68					; 00000044H

; 4508 : 	const MissionAITypes eMissionAI = (MissionAITypes)luaL_optint(L, 8, NO_MISSIONAI);

	push	-1
	test	eax, eax
	setne	cl
	push	8
	push	esi
	mov	BYTE PTR _bManual$[esp+56], cl
	call	_luaL_optinteger

; 4509 : 	CvPlot* pkMissionAIPlot = CvLuaPlot::GetInstance(L, 9, false);

	push	esi
	mov	DWORD PTR _eMissionAI$[esp+60], eax
	call	_lua_gettop
	push	9
	push	esi
	mov	DWORD PTR _stack_size$232646[esp+68], eax
	xor	edi, edi
	call	_lua_type
	add	esp, 24					; 00000018H
	cmp	eax, 5
	jne	SHORT $LN14@lPushMissi
	push	OFFSET $SG224163
	push	9
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lPushMissi
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	edi, eax
$LN14@lPushMissi:
	mov	edx, DWORD PTR _stack_size$232646[esp+44]
	push	edx
	push	esi
	call	_lua_settop

; 4510 : 	CvUnit* pkMissionAIUnit = CvLuaUnit::GetInstance(L, 10, false);

	push	0
	push	10					; 0000000aH
	push	esi
	call	?GetInstance@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAPAVCvUnit@@PAUlua_State@@H_N@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::GetInstance

; 4511 : 
; 4512 : 	pkUnit->PushMission(eMission, iData1, iData2, iFlags, bAppend, bManual, eMissionAI, pkMissionAIPlot, pkMissionAIUnit);

	mov	ecx, DWORD PTR _bManual$[esp+64]
	mov	edx, DWORD PTR _bAppend$[esp+64]
	add	esp, 20					; 00000014H
	push	eax
	mov	eax, DWORD PTR _eMissionAI$[esp+48]
	push	edi
	push	eax
	mov	eax, DWORD PTR _iFlags$[esp+56]
	push	ecx
	mov	ecx, DWORD PTR _iData2$[esp+60]
	push	edx
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _pkInstance$232637[esp+72]
	push	ebp
	push	ebx
	call	?PushMission@CvUnit@@QAEXW4MissionTypes@@HHH_N1W4MissionAITypes@@PAVCvPlot@@PAV1@@Z ; CvUnit::PushMission
	pop	edi
	pop	esi
	pop	ebp

; 4513 : 
; 4514 : 	return 0;

	xor	eax, eax
	pop	ebx

; 4515 : };

	add	esp, 28					; 0000001cH
	ret	0
?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lPushMission
_TEXT	ENDS
PUBLIC	?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lPopMission
EXTRN	?PopMission@CvUnit@@QAEXXZ:PROC			; CvUnit::PopMission
; Function compile flags: /Ogtpy
;	COMDAT ?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lPopMission, COMDAT

; 4519 : {

	push	ebx
	push	ebp
	push	esi

; 4520 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lPopMissio
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lPopMissio
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lPopMissio
	xor	bl, bl
$LN5@lPopMissio:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lPopMissio
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lPopMissio:

; 4521 : 	pkUnit->PopMission();

	mov	ecx, edi
	call	?PopMission@CvUnit@@QAEXXZ		; CvUnit::PopMission
	pop	edi
	pop	esi
	pop	ebp

; 4522 : 
; 4523 : 	return 0;

	xor	eax, eax
	pop	ebx

; 4524 : };

	ret	0
?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lPopMission
_TEXT	ENDS
PUBLIC	?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lLastMissionPlot
EXTRN	?LastMissionPlot@CvUnit@@QAEPAVCvPlot@@XZ:PROC	; CvUnit::LastMissionPlot
; Function compile flags: /Ogtpy
;	COMDAT ?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lLastMissionPlot, COMDAT

; 4528 : {

	push	ebx
	push	ebp
	push	esi

; 4529 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lLastMissi
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lLastMissi
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lLastMissi
	xor	bl, bl
$LN5@lLastMissi:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lLastMissi
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lLastMissi:

; 4530 : 	CvPlot* pkPlot = pkUnit->LastMissionPlot();

	mov	ecx, edi
	call	?LastMissionPlot@CvUnit@@QAEPAVCvPlot@@XZ ; CvUnit::LastMissionPlot

; 4531 : 	CvLuaPlot::Push(L, pkPlot);

	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4532 : 
; 4533 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4534 : }

	ret	0
?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lLastMissionPlot
_TEXT	ENDS
PUBLIC	?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanStartMission
EXTRN	?CanStartMission@CvUnit@@QAE_NHHHPAVCvPlot@@_N@Z:PROC ; CvUnit::CanStartMission
; Function compile flags: /Ogtpy
;	COMDAT ?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$232706 = -12				; size = 4
_stack_size$232715 = -8					; size = 4
_bTestVisible$ = -8					; size = 1
_iData2$ = -4						; size = 4
_L$ = 8							; size = 4
?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lCanStartMission, COMDAT

; 4538 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi

; 4539 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+20]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$232706[esp+40], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN19@lCanStartM
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN19@lCanStartM
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$232706[esp+28], eax
	test	eax, eax
	je	SHORT $LN19@lCanStartM
	xor	bl, bl
$LN19@lCanStartM:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lCanStartM
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lCanStartM:

; 4540 : 	const int iMission = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 4541 : 	const int iData1 = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 4542 : 	const int iData2 = lua_tointeger(L, 4);

	push	4
	push	esi
	mov	ebp, eax
	call	_lua_tointeger

; 4543 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 5, false);

	push	esi
	mov	DWORD PTR _iData2$[esp+56], eax
	call	_lua_gettop
	push	5
	push	esi
	mov	DWORD PTR _stack_size$232715[esp+64], eax
	xor	edi, edi
	call	_lua_type
	add	esp, 36					; 00000024H
	cmp	eax, 5
	jne	SHORT $LN14@lCanStartM
	push	OFFSET $SG224163
	push	eax
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lCanStartM
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	edi, eax
$LN14@lCanStartM:
	mov	eax, DWORD PTR _stack_size$232715[esp+28]
	push	eax
	push	esi
	call	_lua_settop

; 4544 : 	const bool bTestVisible = luaL_optint(L, 6, 0);

	push	0
	push	6
	push	esi
	call	_luaL_optinteger

; 4545 : #ifndef AUI_WARNING_FIXES
; 4546 : 	const bool bUseCache = luaL_optint(L, 7, 0);

	push	0
	test	eax, eax
	setne	cl
	push	7
	push	esi
	mov	BYTE PTR _bTestVisible$[esp+60], cl
	call	_luaL_optinteger

; 4547 : #endif
; 4548 : 
; 4549 : 	const bool bResult = pkUnit->CanStartMission(iMission, iData1, iData2, pkPlot, bTestVisible);

	mov	edx, DWORD PTR _bTestVisible$[esp+60]
	mov	eax, DWORD PTR _iData2$[esp+60]
	mov	ecx, DWORD PTR _pkInstance$232706[esp+60]
	add	esp, 32					; 00000020H
	push	edx
	push	edi
	push	eax
	push	ebp
	push	ebx
	call	?CanStartMission@CvUnit@@QAE_NHHHPAVCvPlot@@_N@Z ; CvUnit::CanStartMission

; 4550 : 	lua_pushboolean(L, bResult);

	movzx	ecx, al
	push	ecx
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4551 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4552 : };

	add	esp, 12					; 0000000cH
	ret	0
?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lCanStartMission
_TEXT	ENDS
PUBLIC	?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHigherTechThan
EXTRN	?IsHigherTechThan@CvUnit@@QBE_NW4UnitTypes@@@Z:PROC ; CvUnit::IsHigherTechThan
; Function compile flags: /Ogtpy
;	COMDAT ?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsHigherTechThan, COMDAT

; 4579 : {

	push	ebx
	push	ebp
	push	esi

; 4580 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsHigherT
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsHigherT
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsHigherT
	xor	bl, bl
$LN5@lIsHigherT:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsHigherT
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsHigherT:

; 4581 : 	UnitTypes eOtherUnit = (UnitTypes)lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8

; 4582 : 	const bool bResult = pkUnit->IsHigherTechThan(eOtherUnit);

	push	eax
	mov	ecx, edi
	call	?IsHigherTechThan@CvUnit@@QBE_NW4UnitTypes@@@Z ; CvUnit::IsHigherTechThan

; 4583 : 
; 4584 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4585 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4586 : }

	ret	0
?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsHigherTechThan
_TEXT	ENDS
PUBLIC	?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsLargerCivThan
EXTRN	?IsLargerCivThan@CvUnit@@QBE_NPBV1@@Z:PROC	; CvUnit::IsLargerCivThan
; Function compile flags: /Ogtpy
;	COMDAT ?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_pkInstance$232756 = -4					; size = 4
_L$ = 8							; size = 4
?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsLargerCivThan, COMDAT

; 4590 : {

	push	ecx
	push	ebx
	push	ebp
	push	esi

; 4591 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+12]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$232756[esp+32], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsLargerC
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsLargerC
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$232756[esp+20], eax
	test	eax, eax
	je	SHORT $LN5@lIsLargerC
	xor	bl, bl
$LN5@lIsLargerC:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsLargerC
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsLargerC:

; 4592 : 	CvUnit* pkOtherUnit = CvLuaUnit::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lIsLargerC
	push	OFFSET $SG224203
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lIsLargerC
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN14@lIsLargerC
	xor	bl, bl
$LN14@lIsLargerC:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN19@lIsLargerC
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 8
$LN19@lIsLargerC:

; 4593 : 	const bool bResult = pkUnit->IsLargerCivThan(pkOtherUnit);

	mov	ecx, DWORD PTR _pkInstance$232756[esp+20]
	push	edi
	call	?IsLargerCivThan@CvUnit@@QBE_NPBV1@@Z	; CvUnit::IsLargerCivThan

; 4594 : 
; 4595 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4596 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4597 : }

	pop	ecx
	ret	0
?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsLargerCivThan
_TEXT	ENDS
PUBLIC	?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangedSupportFire
EXTRN	?isRangedSupportFire@CvUnit@@QBE_NXZ:PROC	; CvUnit::isRangedSupportFire
; Function compile flags: /Ogtpy
;	COMDAT ?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsRangedSupportFire, COMDAT

; 4601 : {

	push	ebx
	push	ebp
	push	esi

; 4602 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsRangedS
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsRangedS
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsRangedS
	xor	bl, bl
$LN5@lIsRangedS:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsRangedS
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsRangedS:

; 4603 : 	const bool bResult = pkUnit->isRangedSupportFire();

	mov	ecx, edi
	call	?isRangedSupportFire@CvUnit@@QBE_NXZ	; CvUnit::isRangedSupportFire

; 4604 : 
; 4605 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4606 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4607 : }

	ret	0
?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsRangedSupportFire
_TEXT	ENDS
PUBLIC	?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPlunderBlockedByOpposingTrait
EXTRN	?IsPlunderBlockedByOpposingTrait@CvUnit@@QBE_NXZ:PROC ; CvUnit::IsPlunderBlockedByOpposingTrait
; Function compile flags: /Ogtpy
;	COMDAT ?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsPlunderBlockedByOpposingTrait, COMDAT

; 4612 : {

	push	ebx
	push	ebp
	push	esi

; 4613 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsPlunder
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsPlunder
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsPlunder
	xor	bl, bl
$LN5@lIsPlunder:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsPlunder
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsPlunder:

; 4614 : 	const bool bResult = pkUnit->IsPlunderBlockedByOpposingTrait();

	mov	ecx, edi
	call	?IsPlunderBlockedByOpposingTrait@CvUnit@@QBE_NXZ ; CvUnit::IsPlunderBlockedByOpposingTrait

; 4615 : 
; 4616 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4617 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4618 : }

	ret	0
?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsPlunderBlockedByOpposingTrait
_TEXT	ENDS
PUBLIC	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
EXTRN	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ:PROC ; CvUnit::getDestructionNotification
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
;	COMDAT ??1?$FObjectHandle@VCvUnit@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ PROC		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 147  : 		if(m_target) 

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN4@FObjectHan

; 148  : 		{
; 149  : 			m_target->getDestructionNotification().removeTarget(*this);

	jmp	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN4@FObjectHan:

; 150  : 		}
; 151  : 	}

	ret	0
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ ENDP		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
_TEXT	ENDS
PUBLIC	??0?$FObjectHandle@VCvUnit@@@@QAE@PAVCvUnit@@@Z	; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FObjectHandle@VCvUnit@@@@QAE@PAVCvUnit@@@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
??0?$FObjectHandle@VCvUnit@@@@QAE@PAVCvUnit@@@Z PROC	; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 156  : 	{

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _target$[esp]
	mov	DWORD PTR [esi], ecx
	mov	BYTE PTR [esi+4], 0

; 157  : 		OBJECT_HANDLE_STACK;
; 158  : 		if(m_target)

	test	ecx, ecx
	je	SHORT $LN6@FObjectHan@2

; 159  : 		{
; 160  : 			m_target->getDestructionNotification().addTarget(*this);

	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN6@FObjectHan@2:

; 161  : 		}
; 162  : 	}

	mov	eax, esi
	pop	esi
	ret	4
??0?$FObjectHandle@VCvUnit@@@@QAE@PAVCvUnit@@@Z ENDP	; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>
_TEXT	ENDS
PUBLIC	??0?$FObjectHandle@VCvUnit@@@@QAE@ABV0@@Z	; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FObjectHandle@VCvUnit@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0?$FObjectHandle@VCvUnit@@@@QAE@ABV0@@Z PROC		; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 222  : 	{

	mov	eax, DWORD PTR _source$[esp-4]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi], ecx
	mov	dl, BYTE PTR [eax+4]
	mov	BYTE PTR [esi+4], dl

; 223  : 		OBJECT_HANDLE_STACK;
; 224  : 		if(m_target)

	test	ecx, ecx
	je	SHORT $LN6@FObjectHan@3

; 225  : 		{
; 226  : 			m_target->getDestructionNotification().addTarget(*this);

	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN6@FObjectHan@3:

; 227  : 		}
; 228  : 	}

	mov	eax, esi
	pop	esi
	ret	4
??0?$FObjectHandle@VCvUnit@@@@QAE@ABV0@@Z ENDP		; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>
_TEXT	ENDS
PUBLIC	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z$0
__ehfuncinfo$?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluascopedinstance.h
xdata$x	ENDS
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
_handle$ = 12						; size = 8
?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z PROC ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push, COMDAT

; 20   : 	{

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp

; 21   : 		Push(L, handle.pointer());

	mov	eax, DWORD PTR _handle$[esp+8]
	mov	ecx, DWORD PTR _L$[esp+8]
	push	eax
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+28], 0
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push

; 22   : 	}

	mov	ecx, DWORD PTR _handle$[esp+16]
	add	esp, 8
	mov	DWORD PTR __$EHRec$[esp+20], -1
	test	ecx, ecx
	je	SHORT $LN19@Push@4
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN19@Push@4:
	mov	ecx, DWORD PTR __$EHRec$[esp+12]
	mov	DWORD PTR fs:0, ecx
	add	esp, 12					; 0000000cH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z$0:
	lea	ecx, DWORD PTR _handle$[ebp-4]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z ENDP ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
PUBLIC	??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,int>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvluamethodwrapper.h
;	COMDAT ??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,int>, COMDAT

; 130  : {

	push	ebx
	push	ebp
	push	esi

; 131  : 	const int idx = Derived::GetStartingArgIndex();
; 132  : 	InstanceType* pkType = Derived::GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN7@BasicLuaMe@3
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN7@BasicLuaMe@3
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN7@BasicLuaMe@3
	xor	bl, bl
$LN7@BasicLuaMe@3:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN12@BasicLuaMe@3
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN12@BasicLuaMe@3:

; 133  : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)(CvLuaArgs::toValue<arg1>(L, idx)));

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8
	push	eax
	mov	ecx, edi
	call	DWORD PTR _func$[esp+16]
	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 134  : 
; 135  : 	return 1;

	mov	eax, 1
	pop	ebx

; 136  : }

	ret	0
??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,int>
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum CommandTypes,int,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum CommandTypes,int,int>, COMDAT

; 249  : {

	push	ebx
	push	ebp
	push	esi

; 250  : 	const int idx = Derived::GetStartingArgIndex();
; 251  : 	InstanceType* pkType = Derived::GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN7@BasicLuaMe@4
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN7@BasicLuaMe@4
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN7@BasicLuaMe@4
	xor	bl, bl
$LN7@BasicLuaMe@4:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN12@BasicLuaMe@4
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN12@BasicLuaMe@4:

; 252  : 	(pkType->*func)(CvLuaArgs::toValue<arg1>(L, idx), CvLuaArgs::toValue<arg2>(L, idx + 1), CvLuaArgs::toValue<arg3>(L, idx + 2));

	push	4
	push	esi
	call	_lua_tointeger
	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger
	add	esp, 16					; 00000010H
	push	ebx
	push	eax
	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8
	push	eax
	mov	ecx, edi
	call	DWORD PTR _func$[esp+24]
	pop	edi
	pop	esi
	pop	ebp

; 253  : 	return 0;

	xor	eax, eax
	pop	ebx

; 254  : }

	ret	0
??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum CommandTypes,int,int>
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,CvPlot const *>
; Function compile flags: /Ogtpy
;	COMDAT ??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,CvPlot const *>, COMDAT

; 78   : {

	push	ebx
	push	ebp
	push	esi

; 79   : 	const int idx = Derived::GetStartingArgIndex();
; 80   : 	InstanceType* pkType = Derived::GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN7@BasicLuaMe@5
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN7@BasicLuaMe@5
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN7@BasicLuaMe@5
	xor	bl, bl
$LN7@BasicLuaMe@5:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN12@BasicLuaMe@5
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN12@BasicLuaMe@5:

; 81   : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)(CvLuaArgs::toValue<arg1>(L, idx)));

	push	2
	push	esi
	call	_lua_tointeger
	add	esp, 8
	push	eax
	mov	ecx, edi
	call	DWORD PTR _func$[esp+16]
	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 82   : 
; 83   : 	return 1;

	mov	eax, 1
	pop	ebx

; 84   : }

	ret	0
??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,CvPlot const *>
_TEXT	ENDS
PUBLIC	??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum PlayerTypes>
; Function compile flags: /Ogtpy
;	COMDAT ??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_func$ = 12						; size = 4
??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z PROC ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum PlayerTypes>, COMDAT

; 69   : {

	push	ebx
	push	ebp
	push	esi

; 70   : 	InstanceType* pkType = Derived::GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@BasicLuaMe@6
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@BasicLuaMe@6
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@BasicLuaMe@6
	xor	bl, bl
$LN5@BasicLuaMe@6:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@BasicLuaMe@6
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@BasicLuaMe@6:

; 71   : 	CvLuaArgs::pushValue<ret>(L, (pkType->*func)());

	mov	ecx, edi
	call	DWORD PTR _func$[esp+12]
	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 72   : 
; 73   : 	return 1;

	mov	eax, 1
	pop	ebx

; 74   : }

	ret	0
??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z ENDP ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum PlayerTypes>
_TEXT	ENDS
PUBLIC	?isEmbarked@CvUnit@@QBE_NXZ			; CvUnit::isEmbarked
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvunit.h
;	COMDAT ?isEmbarked@CvUnit@@QBE_NXZ
_TEXT	SEGMENT
?isEmbarked@CvUnit@@QBE_NXZ PROC			; CvUnit::isEmbarked, COMDAT
; _this$ = ecx

; 257  : 		return m_bEmbarked;

	mov	al, BYTE PTR [ecx+1652]

; 258  : 	}

	ret	0
?isEmbarked@CvUnit@@QBE_NXZ ENDP			; CvUnit::isEmbarked
_TEXT	ENDS
PUBLIC	?GetID@CvUnit@@QBEHXZ				; CvUnit::GetID
; Function compile flags: /Ogtpy
;	COMDAT ?GetID@CvUnit@@QBEHXZ
_TEXT	SEGMENT
?GetID@CvUnit@@QBEHXZ PROC				; CvUnit::GetID, COMDAT
; _this$ = ecx

; 662  : 		return m_iID;

	mov	eax, DWORD PTR [ecx+100]

; 663  : 	}

	ret	0
?GetID@CvUnit@@QBEHXZ ENDP				; CvUnit::GetID
_TEXT	ENDS
PUBLIC	?getX@CvUnit@@QBEHXZ				; CvUnit::getX
; Function compile flags: /Ogtpy
;	COMDAT ?getX@CvUnit@@QBEHXZ
_TEXT	SEGMENT
?getX@CvUnit@@QBEHXZ PROC				; CvUnit::getX, COMDAT
; _this$ = ecx

; 673  : 		return m_iX.get();

	mov	eax, DWORD PTR [ecx+76]

; 674  : 	}

	ret	0
?getX@CvUnit@@QBEHXZ ENDP				; CvUnit::getX
_TEXT	ENDS
PUBLIC	?getY@CvUnit@@QBEHXZ				; CvUnit::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvUnit@@QBEHXZ
_TEXT	SEGMENT
?getY@CvUnit@@QBEHXZ PROC				; CvUnit::getY, COMDAT
; _this$ = ecx

; 678  : 		return m_iY.get();

	mov	eax, DWORD PTR [ecx+88]

; 679  : 	}

	ret	0
?getY@CvUnit@@QBEHXZ ENDP				; CvUnit::getY
_TEXT	ENDS
PUBLIC	?getOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ	; CvUnit::getOwner
; Function compile flags: /Ogtpy
;	COMDAT ?getOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ PROC		; CvUnit::getOwner, COMDAT
; _this$ = ecx

; 1046 : 		return m_eOwner.get();

	mov	eax, DWORD PTR [ecx+40]

; 1047 : 	}

	ret	0
?getOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ ENDP		; CvUnit::getOwner
_TEXT	ENDS
PUBLIC	?IsCombatUnit@CvUnit@@QBE_NXZ			; CvUnit::IsCombatUnit
; Function compile flags: /Ogtpy
;	COMDAT ?IsCombatUnit@CvUnit@@QBE_NXZ
_TEXT	SEGMENT
?IsCombatUnit@CvUnit@@QBE_NXZ PROC			; CvUnit::IsCombatUnit, COMDAT
; _this$ = ecx

; 1243 : 		return (m_iBaseCombat > 0);

	xor	eax, eax
	cmp	DWORD PTR [ecx+1044], eax
	setg	al

; 1244 : 	}

	ret	0
?IsCombatUnit@CvUnit@@QBE_NXZ ENDP			; CvUnit::IsCombatUnit
_TEXT	ENDS
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	mov	eax, DWORD PTR _iX$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4020]
	jge	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _iY$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4024]
	jge	SHORT $LN3@isPlot
	mov	eax, 1

; 161  : #endif
; 162  : 	}

	ret	8
$LN3@isPlot:

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	xor	eax, eax

; 161  : #endif
; 162  : 	}

	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
_TEXT	ENDS
PUBLIC	?plotNum@CvMap@@QBEHHH@Z			; CvMap::plotNum
; Function compile flags: /Ogtpy
;	COMDAT ?plotNum@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plotNum@CvMap@@QBEHHH@Z PROC				; CvMap::plotNum, COMDAT
; _this$ = ecx

; 183  : 		return ((iY * getGridWidth()) + iX);

	mov	eax, DWORD PTR [ecx+4020]
	imul	eax, DWORD PTR _iY$[esp-4]
	add	eax, DWORD PTR _iX$[esp-4]

; 184  : #endif
; 185  : 	}

	ret	8
?plotNum@CvMap@@QBEHHH@Z ENDP				; CvMap::plotNum
_TEXT	ENDS
PUBLIC	?plot@CvMap@@QBEPAVCvPlot@@HH@Z			; CvMap::plot
; Function compile flags: /Ogtpy
;	COMDAT ?plot@CvMap@@QBEPAVCvPlot@@HH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plot@CvMap@@QBEPAVCvPlot@@HH@Z PROC			; CvMap::plot, COMDAT
; _this$ = ecx

; 273  : 		if((iX == INVALID_PLOT_COORD) || (iY == INVALID_PLOT_COORD))

	mov	eax, DWORD PTR _iX$[esp-4]
	push	ebp
	cmp	eax, -2147483647			; 80000001H
	je	$LN1@plot
	mov	ebp, DWORD PTR _iY$[esp]
	cmp	ebp, -2147483647			; 80000001H
	je	$LN1@plot

; 276  : 		}
; 277  : 		int iMapX = coordRange(iX, getGridWidth(), isWrapX());

	cmp	BYTE PTR [ecx+4056], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR [ecx+4020]
	push	edi
	je	SHORT $LN11@plot
	test	eax, eax
	jge	SHORT $LN13@plot
	cdq
	idiv	esi
	mov	edi, edx
	add	edi, esi
	jmp	SHORT $LN15@plot
$LN13@plot:
	cmp	eax, esi
	jl	SHORT $LN11@plot
	cdq
	idiv	esi
	mov	edi, edx
	jmp	SHORT $LN15@plot
$LN11@plot:
	mov	edi, eax
$LN15@plot:

; 278  : 		int iMapY = coordRange(iY, getGridHeight(), isWrapY());

	cmp	BYTE PTR [ecx+4057], 0
	mov	ebx, DWORD PTR [ecx+4024]
	je	SHORT $LN40@plot
	test	ebp, ebp
	jge	SHORT $LN23@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN25@plot
$LN23@plot:
	cmp	ebp, ebx
	jl	SHORT $LN40@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	jmp	SHORT $LN25@plot
$LN40@plot:
	mov	edx, ebp
$LN25@plot:

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	test	edi, edi
	jl	SHORT $LN5@plot
	cmp	edi, esi
	jge	SHORT $LN5@plot
	test	edx, edx
	jl	SHORT $LN5@plot
	cmp	edx, ebx
	jge	SHORT $LN5@plot
	imul	esi, edx
	add	esi, edi
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ecx+4068]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp

; 280  : 	}

	ret	8
$LN5@plot:
	pop	edi
	pop	esi
	pop	ebx

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
$LN1@plot:

; 274  : 		{
; 275  : 			return NULL;

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
?plot@CvMap@@QBEPAVCvPlot@@HH@Z ENDP			; CvMap::plot
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAABQAVFAutoVariableBase@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Key
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAABQAVFAutoVariableBase@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAABQAVFAutoVariableBase@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Key, COMDAT

; 162  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

	mov	eax, DWORD PTR __Pnode$[esp-4]
	add	eax, 12					; 0000000cH

; 163  : 		}

	ret	0
?_Key@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@KAABQAVFAutoVariableBase@@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Root
; Function compile flags: /Ogtpy
;	COMDAT ?_Root@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Root, COMDAT
; _this$ = ecx

; 1325 : 		return (_Parent(_Myhead));

	mov	eax, DWORD PTR [ecx+4]
	add	eax, 4

; 1326 : 		}

	ret	0
?_Root@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Root
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator::iterator
; Function compile flags: /Ogtpy
;	COMDAT ??0iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 459  : 			{	// construct with node pointer _Pnode

	mov	eax, ecx
	mov	ecx, DWORD PTR __Pnode$[esp-4]
	mov	DWORD PTR [eax], ecx

; 460  : 			}

	ret	4
??0iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::max_size, COMDAT
; _this$ = ecx

; 606  : 		return (this->_Alval.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 607  : 		}

	ret	0
?max_size@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::max_size
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate
; Function compile flags: /Ogtpy
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1286 : 		_Nodeptr _Pnode = _Right(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[esp-4]
	mov	eax, DWORD PTR [edx+8]
	push	esi

; 1287 : 		_Right(_Wherenode) = _Left(_Pnode);

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], esi

; 1288 : 
; 1289 : 		if (!_Isnil(_Left(_Pnode)))

	mov	esi, DWORD PTR [eax]
	cmp	BYTE PTR [esi+17], 0
	jne	SHORT $LN5@Lrotate

; 1290 : 			_Parent(_Left(_Pnode)) = _Wherenode;

	mov	DWORD PTR [esi+4], edx
$LN5@Lrotate:

; 1291 : 		_Parent(_Pnode) = _Parent(_Wherenode);

	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi

; 1292 : 
; 1293 : 		if (_Wherenode == _Root())

	mov	ecx, DWORD PTR [ecx+4]
	pop	esi
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN4@Lrotate

; 1294 : 			_Root() = _Pnode;

	mov	DWORD PTR [ecx+4], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], eax

; 1302 : 		}

	ret	4
$LN4@Lrotate:

; 1295 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

	mov	ecx, DWORD PTR [edx+4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@Lrotate

; 1296 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [ecx], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], eax

; 1302 : 		}

	ret	4
$LN2@Lrotate:

; 1297 : 		else
; 1298 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [ecx+8], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], eax

; 1302 : 		}

	ret	4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate
; Function compile flags: /Ogtpy
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1330 : 		_Nodeptr _Pnode = _Left(_Wherenode);

	mov	edx, DWORD PTR __Wherenode$[esp-4]
	mov	eax, DWORD PTR [edx]
	push	esi

; 1331 : 		_Left(_Wherenode) = _Right(_Pnode);

	mov	esi, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], esi

; 1332 : 
; 1333 : 		if (!_Isnil(_Right(_Pnode)))

	mov	esi, DWORD PTR [eax+8]
	cmp	BYTE PTR [esi+17], 0
	jne	SHORT $LN5@Rrotate

; 1334 : 			_Parent(_Right(_Pnode)) = _Wherenode;

	mov	DWORD PTR [esi+4], edx
$LN5@Rrotate:

; 1335 : 		_Parent(_Pnode) = _Parent(_Wherenode);

	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi

; 1336 : 
; 1337 : 		if (_Wherenode == _Root())

	mov	ecx, DWORD PTR [ecx+4]
	pop	esi
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN4@Rrotate

; 1338 : 			_Root() = _Pnode;

	mov	DWORD PTR [ecx+4], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], eax

; 1346 : 		}

	ret	4
$LN4@Rrotate:

; 1339 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

	mov	ecx, DWORD PTR [edx+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@Rrotate

; 1340 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [ecx+8], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], eax

; 1346 : 		}

	ret	4
$LN2@Rrotate:

; 1341 : 		else
; 1342 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	DWORD PTR [ecx], eax

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

	mov	DWORD PTR [eax+8], edx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

	mov	DWORD PTR [edx+4], eax

; 1346 : 		}

	ret	4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 321  : 
; 322  :  #if _HAS_ITERATOR_DEBUGGING
; 323  : 			if (this->_Mycont == 0
; 324  : 				|| _Ptr == 0)
; 325  : 				{
; 326  : 				_DEBUG_ERROR("map/set iterator not decrementable");
; 327  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 				}
; 329  :  #else
; 330  : 			_SCL_SECURE_VALIDATE(this->_Has_container());
; 331  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 332  : 
; 333  : 			if (_Isnil(_Ptr))

	mov	eax, DWORD PTR [ecx]
	cmp	BYTE PTR [eax+17], 0
	je	SHORT $LN9@Dec

; 334  : 			{
; 335  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

	mov	eax, DWORD PTR [eax+8]

; 359  :  #if _HAS_ITERATOR_DEBUGGING
; 360  :  					{
; 361  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 362  : 					_SCL_SECURE_OUT_OF_RANGE;
; 363  : 					}
; 364  :  #elif _SECURE_SCL
; 365  : 					{
; 366  : 					_SCL_SECURE_OUT_OF_RANGE;
; 367  : 					}
; 368  :  #else
; 369  : 					return;	// begin() shouldn't be incremented, don't move
; 370  :  #endif
; 371  : 				else
; 372  : 					_Ptr = _Pnode;	// ==> parent if not head

	mov	DWORD PTR [ecx], eax

; 373  : 				}
; 374  : 			}

	ret	0
$LN9@Dec:

; 336  :    				if (_Isnil(_Ptr))
; 337  : #if _HAS_ITERATOR_DEBUGGING
; 338  : 				{
; 339  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 340  : 					_SCL_SECURE_OUT_OF_RANGE;
; 341  : 				}
; 342  : #elif _SECURE_SCL
; 343  : 				{
; 344  :     				_SCL_SECURE_OUT_OF_RANGE;
; 345  : 				}
; 346  : #else
; 347  : 				return;	// begin() shouldn't be incremented, don't move
; 348  : #endif
; 349  : 			}
; 350  : 			else if (!_Isnil(_Left(_Ptr)))

	mov	edx, DWORD PTR [eax]
	cmp	BYTE PTR [edx+17], 0
	jne	SHORT $LN43@Dec

; 351  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

	mov	eax, DWORD PTR [edx+8]
	cmp	BYTE PTR [eax+17], 0
	jne	SHORT $LN24@Dec
	npad	1
$LL25@Dec:
	mov	edx, eax
	mov	eax, DWORD PTR [edx+8]
	cmp	BYTE PTR [eax+17], 0
	je	SHORT $LL25@Dec
$LN24@Dec:
	mov	DWORD PTR [ecx], edx

; 373  : 				}
; 374  : 			}

	ret	0
$LN43@Dec:

; 352  : 			else
; 353  : 				{	// climb looking for left subtree
; 354  : 				_Nodeptr _Pnode;
; 355  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 356  : 					&& _Ptr == _Left(_Pnode))

	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+17], 0
	jne	SHORT $LN3@Dec
$LL4@Dec:
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN3@Dec

; 357  : 					_Ptr = _Pnode;	// ==> parent while left subtree

	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+17], 0
	je	SHORT $LL4@Dec
$LN3@Dec:

; 358  : 				if (_Isnil(_Ptr))

	mov	edx, DWORD PTR [ecx]
	cmp	BYTE PTR [edx+17], 0
	jne	SHORT $LN1@Dec

; 359  :  #if _HAS_ITERATOR_DEBUGGING
; 360  :  					{
; 361  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 362  : 					_SCL_SECURE_OUT_OF_RANGE;
; 363  : 					}
; 364  :  #elif _SECURE_SCL
; 365  : 					{
; 366  : 					_SCL_SECURE_OUT_OF_RANGE;
; 367  : 					}
; 368  :  #else
; 369  : 					return;	// begin() shouldn't be incremented, don't move
; 370  :  #endif
; 371  : 				else
; 372  : 					_Ptr = _Pnode;	// ==> parent if not head

	mov	DWORD PTR [ecx], eax
$LN1@Dec:

; 373  : 				}
; 374  : 			}

	ret	0
?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsActionRecommended
EXTRN	?isActionRecommended@CvUnit@@QAE_NH@Z:PROC	; CvUnit::isActionRecommended
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
;	COMDAT ?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lIsActionRecommended, COMDAT

; 542  : 	return BasicLuaMethod(L, &CvUnit::isActionRecommended);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?isActionRecommended@CvUnit@@QAE_NH@Z ; CvUnit::isActionRecommended
	push	eax
	call	??$BasicLuaMethod@_NH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AE_NH@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,int>
	add	esp, 8

; 543  : }

	ret	0
?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lIsActionRecommended
_TEXT	ENDS
PUBLIC	?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lDoCommand
EXTRN	?doCommand@CvUnit@@QAEXW4CommandTypes@@HH@Z:PROC ; CvUnit::doCommand
; Function compile flags: /Ogtpy
;	COMDAT ?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lDoCommand, COMDAT

; 576  : 	return BasicLuaMethod(L, &CvUnit::doCommand);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?doCommand@CvUnit@@QAEXW4CommandTypes@@HH@Z ; CvUnit::doCommand
	push	eax
	call	??$BasicLuaMethod@W4CommandTypes@@HH@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@AEXW4CommandTypes@@HH@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum CommandTypes,int,int>
	add	esp, 8

; 577  : }

	ret	0
?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lDoCommand
_TEXT	ENDS
PUBLIC	?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFireSupportUnit
EXTRN	?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z:PROC ; CvUnitCombat::GetFireSupportUnit
; Function compile flags: /Ogtpy
;	COMDAT ?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lGetFireSupportUnit, COMDAT

; 706  : {

	push	ebx
	push	ebp
	push	esi

; 707  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetFireSu
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetFireSu
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetFireSu
	xor	bl, bl
$LN5@lGetFireSu:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetFireSu
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetFireSu:

; 708  : 	const PlayerTypes eDefender = (PlayerTypes) lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 709  : 	const int iX = lua_tointeger(L, 3);

	push	3
	push	esi
	mov	ebx, eax
	call	_lua_tointeger

; 710  : 	const int iY = lua_tointeger(L, 4);

	push	4
	push	esi
	mov	ebp, eax
	call	_lua_tointeger

; 711  : 
; 712  : 	CvUnit* pkUnitToReturn = CvUnitCombat::GetFireSupportUnit(eDefender, iX, iY, pkUnit->getX(), pkUnit->getY());

	mov	ecx, DWORD PTR [edi+88]
	mov	edi, DWORD PTR [edi+76]
	push	ecx
	push	edi
	push	eax
	push	ebp
	push	ebx
	call	?GetFireSupportUnit@CvUnitCombat@@SAPAVCvUnit@@W4PlayerTypes@@HHHH@Z ; CvUnitCombat::GetFireSupportUnit

; 713  : 	CvLuaUnit::Push(L, pkUnitToReturn);

	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
	add	esp, 52					; 00000034H
	pop	edi
	pop	esi
	pop	ebp

; 714  : 
; 715  : 	return 1;

	mov	eax, 1
	pop	ebx

; 716  : }

	ret	0
?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lGetFireSupportUnit
_TEXT	ENDS
PUBLIC	?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsEmbarked
; Function compile flags: /Ogtpy
;	COMDAT ?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsEmbarked, COMDAT

; 882  : {

	push	ebx
	push	ebp
	push	esi

; 883  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsEmbarke
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsEmbarke
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsEmbarke
	xor	bl, bl
$LN5@lIsEmbarke:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsEmbarke
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsEmbarke:

; 884  : 	const bool bResult = pkUnit->isEmbarked();
; 885  : 
; 886  : 	lua_pushboolean(L, bResult);

	movzx	eax, BYTE PTR [edi+1652]
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 887  : 	return 1;

	mov	eax, 1
	pop	ebx

; 888  : }

	ret	0
?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsEmbarked
_TEXT	ENDS
PUBLIC	?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lEmbark
EXTRN	?embark@CvUnit@@QAEXPAVCvPlot@@@Z:PROC		; CvUnit::embark
; Function compile flags: /Ogtpy
;	COMDAT ?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_bSuccess$ = -5						; size = 1
_pkInstance$233431 = -4					; size = 4
_L$ = 8							; size = 4
?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lEmbark, COMDAT

; 980  : {

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi

; 981  : 	bool bSuccess = false;
; 982  : 
; 983  : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+16]
	push	edi
	push	esi
	mov	BYTE PTR _bSuccess$[esp+28], 0
	call	_lua_gettop
	push	1
	push	esi
	mov	edi, eax
	mov	bl, 1
	mov	DWORD PTR _pkInstance$233431[esp+36], 0
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN73@lEmbark
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN73@lEmbark
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	DWORD PTR _pkInstance$233431[esp+24], eax
	test	eax, eax
	je	SHORT $LN73@lEmbark
	xor	bl, bl
$LN73@lEmbark:
	push	edi
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN14@lEmbark
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN14@lEmbark:

; 984  : 	if(pkUnit != NULL)

	mov	edi, DWORD PTR _pkInstance$233431[esp+24]
	test	edi, edi
	je	$LN75@lEmbark

; 985  : 	{
; 986  : 		CvPlot* pkTargetPlot = NULL;
; 987  : 		if(lua_gettop(L) > 1)

	push	esi
	call	_lua_gettop
	add	esp, 4
	cmp	eax, 1
	jle	SHORT $LN3@lEmbark

; 988  : 			pkTargetPlot = CvLuaPlot::GetInstance(L, 2);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN18@lEmbark
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN18@lEmbark
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN18@lEmbark
	xor	bl, bl
$LN18@lEmbark:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN17@lEmbark
	push	esi
	call	?HandleMissingInstance@CvLuaPlot@@SAXPAUlua_State@@@Z ; CvLuaPlot::HandleMissingInstance
	add	esp, 4
$LN17@lEmbark:
	mov	ecx, edi

; 989  : 		else

	jmp	$LN35@lEmbark
$LN3@lEmbark:

; 990  : 			pkTargetPlot = GC.getMap().plot(pkUnit->getX(), pkUnit->getY());

	mov	eax, DWORD PTR _pkInstance$233431[esp+24]
	mov	eax, DWORD PTR [eax+76]
	mov	ebp, DWORD PTR [edi+88]
	cmp	eax, -2147483647			; 80000001H
	je	$LN75@lEmbark
	cmp	ebp, -2147483647			; 80000001H
	je	$LN75@lEmbark
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [edx+4056], 0
	mov	ecx, DWORD PTR [edx+4020]
	je	SHORT $LN43@lEmbark
	test	eax, eax
	jge	SHORT $LN45@lEmbark
	cdq
	idiv	ecx
	mov	edi, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	add	edi, ecx
	jmp	SHORT $LN47@lEmbark
$LN45@lEmbark:
	cmp	eax, ecx
	jl	SHORT $LN43@lEmbark
	cdq
	idiv	ecx
	mov	edi, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	jmp	SHORT $LN47@lEmbark
$LN43@lEmbark:
	mov	edi, eax
$LN47@lEmbark:
	cmp	BYTE PTR [edx+4057], 0
	mov	ebx, DWORD PTR [edx+4024]
	je	SHORT $LN74@lEmbark
	test	ebp, ebp
	jge	SHORT $LN55@lEmbark
	mov	eax, ebp
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN57@lEmbark
$LN55@lEmbark:
	cmp	ebp, ebx
	jl	SHORT $LN74@lEmbark
	mov	eax, ebp
	cdq
	idiv	ebx
	jmp	SHORT $LN57@lEmbark
$LN74@lEmbark:
	mov	edx, ebp
$LN57@lEmbark:
	test	edi, edi
	jl	SHORT $LN75@lEmbark
	cmp	edi, ecx
	jge	SHORT $LN75@lEmbark
	test	edx, edx
	jl	SHORT $LN75@lEmbark
	cmp	edx, ebx
	jge	SHORT $LN75@lEmbark
	imul	ecx, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	add	ecx, edi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [edx+4068]
$LN35@lEmbark:

; 991  : 
; 992  : 		if(pkTargetPlot != NULL)

	test	ecx, ecx
	je	SHORT $LN75@lEmbark

; 993  : 		{
; 994  : 			pkUnit->embark(pkTargetPlot);

	push	ecx
	mov	ecx, DWORD PTR _pkInstance$233431[esp+28]
	call	?embark@CvUnit@@QAEXPAVCvPlot@@@Z	; CvUnit::embark

; 995  : 			bSuccess = true;

	mov	al, 1
	jmp	SHORT $LN1@lEmbark
$LN75@lEmbark:
	mov	al, BYTE PTR _bSuccess$[esp+24]
$LN1@lEmbark:

; 996  : 		}
; 997  : 	}
; 998  : 
; 999  : 	lua_pushboolean(L, bSuccess);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 1000 : 
; 1001 : 	return 1;

	mov	eax, 1
	pop	ebx

; 1002 : }

	add	esp, 8
	ret	0
?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lEmbark
_TEXT	ENDS
PUBLIC	?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lIsCombatUnit
; Function compile flags: /Ogtpy
;	COMDAT ?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lIsCombatUnit, COMDAT

; 2025 : {

	push	ebx
	push	ebp
	push	esi

; 2026 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lIsCombatU
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lIsCombatU
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lIsCombatU
	xor	bl, bl
$LN5@lIsCombatU:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lIsCombatU
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lIsCombatU:

; 2027 : 	const bool bResult = pkUnit->IsCombatUnit();

	xor	eax, eax
	cmp	DWORD PTR [edi+1044], eax
	setg	al

; 2028 : 
; 2029 : 	lua_pushboolean(L, bResult);

	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 2030 : 	return 1;

	mov	eax, 1
	pop	ebx

; 2031 : }

	ret	0
?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lIsCombatUnit
_TEXT	ENDS
PUBLIC	?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSetUpForRangedAttack
EXTRN	?canSetUpForRangedAttack@CvUnit@@QBE_NPBVCvPlot@@@Z:PROC ; CvUnit::canSetUpForRangedAttack
; Function compile flags: /Ogtpy
;	COMDAT ?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lCanSetUpForRangedAttack, COMDAT

; 2463 : 	return BasicLuaMethod(L, &CvUnit::canSetUpForRangedAttack);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?canSetUpForRangedAttack@CvUnit@@QBE_NPBVCvPlot@@@Z ; CvUnit::canSetUpForRangedAttack
	push	eax
	call	??$BasicLuaMethod@_NPBVCvPlot@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE_NPBVCvPlot@@@Z@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<bool,CvPlot const *>
	add	esp, 8

; 2464 : }

	ret	0
?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lCanSetUpForRangedAttack
_TEXT	ENDS
PUBLIC	?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lGetID
; Function compile flags: /Ogtpy
;	COMDAT ?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetID, COMDAT

; 3023 : {

	push	ebx
	push	ebp
	push	esi

; 3024 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetID
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetID
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetID
	xor	bl, bl
$LN5@lGetID:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetID
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetID:

; 3025 : 
; 3026 : 	const int iResult = pkUnit->GetID();
; 3027 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR [edi+100]
	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3028 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3029 : }

	ret	0
?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetID
_TEXT	ENDS
PUBLIC	?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lGetX
; Function compile flags: /Ogtpy
;	COMDAT ?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetX, COMDAT

; 3053 : {

	push	ebx
	push	ebp
	push	esi

; 3054 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetX
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetX
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetX
	xor	bl, bl
$LN5@lGetX:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetX
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetX:

; 3055 : 
; 3056 : 	const int iResult = pkUnit->getX();
; 3057 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR [edi+76]
	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3058 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3059 : }

	ret	0
?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetX
_TEXT	ENDS
PUBLIC	?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z		; CvLuaUnit::lGetY
; Function compile flags: /Ogtpy
;	COMDAT ?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetY, COMDAT

; 3063 : {

	push	ebx
	push	ebp
	push	esi

; 3064 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetY
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetY
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetY
	xor	bl, bl
$LN5@lGetY:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetY
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetY:

; 3065 : 
; 3066 : 	const int iResult = pkUnit->getY();
; 3067 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR [edi+88]
	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3068 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3069 : }

	ret	0
?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetY
_TEXT	ENDS
PUBLIC	?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetPlot
; Function compile flags: /Ogtpy
;	COMDAT ?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetPlot, COMDAT

; 3117 : {

	push	ebx
	push	ebp
	push	esi

; 3118 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN6@lGetPlot
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN6@lGetPlot
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@lGetPlot
	xor	bl, bl
$LN6@lGetPlot:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN11@lGetPlot
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN11@lGetPlot:

; 3119 : 	if(!GC.getMap().isPlot(pkUnit->getX(), pkUnit->getY()))

	mov	eax, DWORD PTR [edi+76]
	mov	ecx, DWORD PTR [edi+88]
	test	eax, eax
	jl	SHORT $LN25@lGetPlot
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	eax, DWORD PTR [edx+4020]
	jge	SHORT $LN25@lGetPlot
	test	ecx, ecx
	jl	SHORT $LN25@lGetPlot
	cmp	ecx, DWORD PTR [edx+4024]
	jl	SHORT $LN1@lGetPlot
$LN25@lGetPlot:

; 3120 : 	{
; 3121 : 		CvAssertMsg(false, "pUnit plot is not valid. Pushing nil!")
; 3122 : 		lua_pushnil(L);

	push	esi
	call	_lua_pushnil
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp

; 3127 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3128 : }

	ret	0
$LN1@lGetPlot:

; 3123 : 		return 1;
; 3124 : 	}
; 3125 : 
; 3126 : 	CvLuaPlot::Push(L, pkUnit->plot());

	mov	ecx, edi
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	push	eax
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaPlot@@VCvPlot@@@@SAXPAUlua_State@@PAVCvPlot@@@Z ; CvLuaScopedInstance<CvLuaPlot,CvPlot>::Push
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3127 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3128 : }

	ret	0
?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetPlot
_TEXT	ENDS
PUBLIC	?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z	; CvLuaUnit::lGetOwner
; Function compile flags: /Ogtpy
;	COMDAT ?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC		; CvLuaUnit::lGetOwner, COMDAT

; 3911 : {

	push	ebx
	push	ebp
	push	esi

; 3912 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lGetOwner
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lGetOwner
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lGetOwner
	xor	bl, bl
$LN5@lGetOwner:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lGetOwner
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lGetOwner:

; 3913 : 
; 3914 : 	const int iResult = pkUnit->getOwner();
; 3915 : 	lua_pushinteger(L, iResult);

	mov	eax, DWORD PTR [edi+40]
	push	eax
	push	esi
	call	_lua_pushinteger
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 3916 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3917 : }

	ret	0
?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP		; CvLuaUnit::lGetOwner
_TEXT	ENDS
PUBLIC	?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOriginalOwner
EXTRN	?GetOriginalOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ:PROC ; CvUnit::GetOriginalOwner
; Function compile flags: /Ogtpy
;	COMDAT ?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetOriginalOwner, COMDAT

; 3943 : 	return BasicLuaMethod(L, &CvUnit::GetOriginalOwner);

	mov	eax, DWORD PTR _L$[esp-4]
	push	OFFSET ?GetOriginalOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ ; CvUnit::GetOriginalOwner
	push	eax
	call	??$BasicLuaMethod@W4PlayerTypes@@@?$CvLuaMethodWrapper@VCvLuaUnit@@VCvUnit@@@@KAHPAUlua_State@@P8CvUnit@@BE?AW4PlayerTypes@@XZ@Z ; CvLuaMethodWrapper<CvLuaUnit,CvUnit>::BasicLuaMethod<enum PlayerTypes>
	add	esp, 8

; 3944 : }

	ret	0
?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetOriginalOwner
_TEXT	ENDS
PUBLIC	?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTransportUnit
EXTRN	?getTransportUnit@CvUnit@@QAEPAV1@XZ:PROC	; CvUnit::getTransportUnit
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z$0
__ehfuncinfo$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
xdata$x	ENDS
;	COMDAT ?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T233786 = -24						; size = 4
_pkTransportUnit$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_L$ = 8							; size = 4
?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z PROC	; CvLuaUnit::lGetTransportUnit, COMDAT

; 4101 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi

; 4102 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+32]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN7@lGetTransp
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN7@lGetTransp
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN7@lGetTransp
	xor	bl, bl
$LN7@lGetTransp:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN12@lGetTransp
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN12@lGetTransp:

; 4103 : 	UnitHandle pkTransportUnit = pkUnit->getTransportUnit();

	mov	ecx, edi
	call	?getTransportUnit@CvUnit@@QAEPAV1@XZ	; CvUnit::getTransportUnit
	mov	edi, eax
	mov	DWORD PTR _pkTransportUnit$[esp+40], edi
	mov	BYTE PTR _pkTransportUnit$[esp+44], 0
	test	edi, edi
	je	SHORT $LN17@lGetTransp
	mov	ecx, edi
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN17@lGetTransp:

; 4104 : 
; 4105 : 	CvLuaUnit::Push(L, pkTransportUnit);

	sub	esp, 8
	mov	eax, esp
	mov	DWORD PTR __$EHRec$[esp+56], 0
	mov	DWORD PTR $T233786[esp+48], esp
	mov	DWORD PTR [eax], edi
	mov	BYTE PTR [eax+4], 0
	test	edi, edi
	je	SHORT $LN22@lGetTransp
	mov	ecx, edi
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN22@lGetTransp:
	push	esi
	call	?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@V?$FObjectHandle@VCvUnit@@@@@Z ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
	add	esp, 12					; 0000000cH

; 4106 : 	return 1;

	mov	DWORD PTR __$EHRec$[esp+48], -1
	test	edi, edi
	je	SHORT $LN29@lGetTransp
	mov	ecx, edi
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN29@lGetTransp:

; 4107 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 24					; 00000018H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z$0:
	lea	ecx, DWORD PTR _pkTransportUnit$[ebp]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP	; CvLuaUnit::lGetTransportUnit
PUBLIC	?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lExecuteSpecialExploreMove
EXTRN	?ExecuteSpecialExploreMove@CvHomelandAI@@QAE_NPAVCvUnit@@PAVCvPlot@@@Z:PROC ; CvHomelandAI::ExecuteSpecialExploreMove
EXTRN	?GetHomelandAI@CvPlayer@@QBEPAVCvHomelandAI@@XZ:PROC ; CvPlayer::GetHomelandAI
; Function compile flags: /Ogtpy
;	COMDAT ?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lExecuteSpecialExploreMove, COMDAT

; 4556 : {

	push	ebx
	push	ebp
	push	esi

; 4557 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+8]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lExecuteSp
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lExecuteSp
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lExecuteSp
	xor	bl, bl
$LN5@lExecuteSp:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lExecuteSp
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lExecuteSp:

; 4558 : 	CvPlot* pkPlot = CvLuaPlot::GetInstance(L, 2, false);

	push	esi
	call	_lua_gettop
	push	2
	push	esi
	mov	ebp, eax
	xor	ebx, ebx
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN14@lExecuteSp
	push	OFFSET $SG224163
	push	2
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN14@lExecuteSp
	push	-1
	push	esi
	call	_lua_touserdata
	add	esp, 8
	mov	ebx, eax
$LN14@lExecuteSp:
	push	ebp
	push	esi
	call	_lua_settop

; 4559 : 
; 4560 : 	CvPlayerAI& kPlayer = GET_PLAYER(pkUnit->getOwner());

	mov	ecx, DWORD PTR [edi+40]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	esp, 8

; 4561 : 
; 4562 : 	const bool bResult = kPlayer.GetHomelandAI()->ExecuteSpecialExploreMove(pkUnit, pkPlot);

	push	ebx
	push	edi
	call	?GetHomelandAI@CvPlayer@@QBEPAVCvHomelandAI@@XZ ; CvPlayer::GetHomelandAI
	mov	ecx, eax
	call	?ExecuteSpecialExploreMove@CvHomelandAI@@QAE_NPAVCvUnit@@PAVCvPlot@@@Z ; CvHomelandAI::ExecuteSpecialExploreMove

; 4563 : 	lua_pushboolean(L, bResult);

	movzx	eax, al
	push	eax
	push	esi
	call	_lua_pushboolean
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 4564 : 	return 1;

	mov	eax, 1
	pop	ebx

; 4565 : };

	ret	0
?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lExecuteSpecialExploreMove
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::begin, COMDAT
; _this$ = ecx

; 556  : 		return (_TREE_ITERATOR(_Lmost()));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 557  : 		}

	ret	4
?begin@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::begin
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Buynode
; Function compile flags: /Ogtpy
;	COMDAT ?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1409 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 1410 : 		_TRY_BEGIN
; 1411 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

	test	eax, eax
	je	SHORT $LN4@Buynode
	mov	ecx, DWORD PTR __Larg$[esp-4]
	mov	edx, DWORD PTR __Parg$[esp-4]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR __Rarg$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx]
	mov	dl, BYTE PTR __Carg$[esp-4]
	mov	DWORD PTR [eax+12], ecx
	mov	BYTE PTR [eax+16], dl
	mov	BYTE PTR [eax+17], 0
$LN4@Buynode:

; 1412 : 		_CATCH_ALL
; 1413 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1414 : 		_RERAISE;
; 1415 : 		_CATCH_END
; 1416 : 		return (_Wherenode);
; 1417 : 		}

	ret	20					; 00000014H
?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 286  : 			{	// predecrement

	push	esi
	mov	esi, ecx

; 287  : 			_Dec();

	call	?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec

; 288  : 			return (*this);

	mov	eax, esi
	pop	esi

; 289  : 			}

	ret	0
??Fconst_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::operator--
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z$2
__ehfuncinfo$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z
_TEXT	SEGMENT
$T233966 = -80						; size = 28
$T233965 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert, COMDAT
; _this$ = ecx

; 1187 : 		{	// add node with value next to _Wherenode, to left if _Addnode

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H
	push	edi
	mov	edi, ecx

; 1188 : 		if (max_size() - 1 <= _Mysize)

	cmp	DWORD PTR [edi+8], 1073741822		; 3ffffffeH
	jb	SHORT $LN17@Insert

; 1189 : 			_THROW(length_error, "map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T233966[esp+88]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T233965[esp+84]
	mov	DWORD PTR __$EHRec$[esp+92], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T233966[esp+84]
	push	eax
	lea	ecx, DWORD PTR $T233965[esp+100]
	mov	BYTE PTR __$EHRec$[esp+96], 1
	mov	DWORD PTR $T233965[esp+88], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T233965[esp+88]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+100], 0
	mov	DWORD PTR $T233965[esp+92], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN228@Insert:
$LN17@Insert:

; 1190 : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1191 : 			_Val, _Red);

	mov	edx, DWORD PTR __Val$[esp+80]
	mov	eax, DWORD PTR [edi+4]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR __Wherenode$[esp+92]
	push	0
	push	edx
	push	eax
	push	esi
	push	eax
	call	?_Buynode@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@PAU342@00ABQAVFAutoVariableBase@@D@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Buynode
	mov	ebp, eax

; 1192 : 
; 1193 : 		++_Mysize;
; 1194 : 		if (_Wherenode == _Myhead)

	mov	eax, DWORD PTR [edi+4]
	mov	ebx, 1
	add	DWORD PTR [edi+8], ebx
	cmp	esi, eax
	jne	SHORT $LN16@Insert

; 1195 : 			{	// first node in tree, just set head values
; 1196 : 			_Root() = _Newnode;

	mov	DWORD PTR [eax+4], ebp

; 1197 : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [eax], ebp
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [ecx+8], ebp
	jmp	SHORT $LN11@Insert
$LN16@Insert:

; 1198 : 			}
; 1199 : 		else if (_Addleft)

	cmp	BYTE PTR __Addleft$[esp+92], 0
	je	SHORT $LN14@Insert

; 1200 : 			{	// add to left of _Wherenode
; 1201 : 			_Left(_Wherenode) = _Newnode;

	mov	DWORD PTR [esi], ebp

; 1202 : 			if (_Wherenode == _Lmost())

	mov	eax, DWORD PTR [edi+4]
	cmp	esi, DWORD PTR [eax]
	jne	SHORT $LN11@Insert

; 1203 : 				_Lmost() = _Newnode;

	mov	DWORD PTR [eax], ebp

; 1204 : 			}
; 1205 : 		else

	jmp	SHORT $LN11@Insert
$LN14@Insert:

; 1206 : 			{	// add to right of _Wherenode
; 1207 : 			_Right(_Wherenode) = _Newnode;

	mov	DWORD PTR [esi+8], ebp

; 1208 : 			if (_Wherenode == _Rmost())

	mov	eax, DWORD PTR [edi+4]
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN11@Insert

; 1209 : 				_Rmost() = _Newnode;

	mov	DWORD PTR [eax+8], ebp
$LN11@Insert:

; 1210 : 			}
; 1211 : 
; 1212 : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

	mov	edx, DWORD PTR [ebp+4]
	cmp	BYTE PTR [edx+16], 0
	lea	eax, DWORD PTR [ebp+4]
	mov	esi, ebp
	jne	$LN9@Insert
	npad	5
$LL10@Insert:

; 1213 : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [edx]
	jne	SHORT $LN8@Insert

; 1214 : 				{	// fixup red-red in left subtree
; 1215 : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR [edx+8]

; 1216 : 				if (_Color(_Wherenode) == _Red)

	cmp	BYTE PTR [edx+16], 0
	jne	SHORT $LN7@Insert

; 1217 : 					{	// parent has two red children, blacken both
; 1218 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	BYTE PTR [ecx+16], bl

; 1219 : 					_Color(_Wherenode) = _Black;

	mov	BYTE PTR [edx+16], bl

; 1220 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+16], 0

; 1221 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [edx+4]

; 1222 : 					}
; 1223 : 				else

	jmp	$LN171@Insert
$LN7@Insert:

; 1224 : 					{	// parent has red and black children
; 1225 : 					if (_Pnode == _Right(_Parent(_Pnode)))

	cmp	esi, DWORD PTR [ecx+8]
	jne	SHORT $LN5@Insert

; 1226 : 						{	// rotate right child to left
; 1227 : 						_Pnode = _Parent(_Pnode);

	mov	esi, ecx

; 1228 : 						_Lrotate(_Pnode);

	push	esi
	mov	ecx, edi
	call	?_Lrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Lrotate
$LN5@Insert:

; 1229 : 						}
; 1230 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+16], bl

; 1231 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+16], 0

; 1232 : 					_Rrotate(_Parent(_Parent(_Pnode)));

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, edi
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate

; 1233 : 					}
; 1234 : 				}
; 1235 : 			else

	jmp	SHORT $LN171@Insert
$LN8@Insert:

; 1236 : 				{	// fixup red-red in right subtree
; 1237 : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR [edx]

; 1238 : 				if (_Color(_Wherenode) == _Red)

	cmp	BYTE PTR [edx+16], 0
	jne	SHORT $LN3@Insert

; 1239 : 					{	// parent has two red children, blacken both
; 1240 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	BYTE PTR [ecx+16], bl

; 1241 : 					_Color(_Wherenode) = _Black;

	mov	BYTE PTR [edx+16], bl

; 1242 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx+16], 0

; 1243 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [edx+4]

; 1244 : 					}
; 1245 : 				else

	jmp	SHORT $LN171@Insert
$LN3@Insert:

; 1246 : 					{	// parent has red and black children
; 1247 : 					if (_Pnode == _Left(_Parent(_Pnode)))

	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN1@Insert

; 1248 : 						{	// rotate left child to right
; 1249 : 						_Pnode = _Parent(_Pnode);

	mov	esi, ecx

; 1250 : 						_Rrotate(_Pnode);

	push	esi
	mov	ecx, edi
	call	?_Rrotate@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Rrotate
$LN1@Insert:

; 1251 : 						}
; 1252 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+16], bl

; 1253 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+16], 0

; 1254 : 					_Lrotate(_Parent(_Parent(_Pnode)));

	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx]
	cmp	BYTE PTR [edx+17], 0
	jne	SHORT $LN170@Insert
	mov	DWORD PTR [edx+4], eax
$LN170@Insert:
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN169@Insert
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN166@Insert
$LN169@Insert:
	mov	edx, DWORD PTR [eax+4]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN167@Insert
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN166@Insert
$LN167@Insert:
	mov	DWORD PTR [edx+8], ecx
$LN166@Insert:
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [eax+4], ecx
$LN171@Insert:
	mov	ecx, DWORD PTR [esi+4]
	cmp	BYTE PTR [ecx+16], 0
	lea	eax, DWORD PTR [esi+4]
	je	$LL10@Insert
$LN9@Insert:

; 1255 : 					}
; 1256 : 				}
; 1257 : 
; 1258 : 		_Color(_Root()) = _Black;	// root is always black

	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edx+4]

; 1259 : 		return (_TREE_ITERATOR(_Newnode));
; 1260 : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+96]
	mov	BYTE PTR [eax+16], bl
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+92]
	pop	esi
	mov	DWORD PTR [eax], ebp
	pop	ebp
	pop	ebx
	pop	edi
	mov	DWORD PTR fs:0, ecx
	add	esp, 80					; 00000050H
	ret	16					; 00000010H
$LN227@Insert:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z$0:
	lea	ecx, DWORD PTR $T233966[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z$2:
	lea	ecx, DWORD PTR $T233965[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+20]
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	add	edi, 12					; 0000000cH
	push	edi
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[esp+36], 0
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogtpy
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator::operator--
; Function compile flags: /Ogtpy
;	COMDAT ??Fiterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fiterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 487  : 			{	// predecrement

	push	esi
	mov	esi, ecx

; 488  : 			--(*(const_iterator *)this);

	call	?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec

; 489  : 			return (*this);

	mov	eax, esi
	pop	esi

; 490  : 			}

	ret	0
??Fiterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::iterator::operator--
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
$T234394 = 12						; size = 4
$T234392 = 12						; size = 4
__Where$198734 = 12					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z PROC ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert, COMDAT
; _this$ = ecx

; 630  : 		{	// try to insert node with value _Val

	push	ecx
	push	ebp

; 631  : 		_Nodeptr _Trynode = _Root();
; 632  : 		_Nodeptr _Wherenode = _Myhead;
; 633  : 		bool _Addleft = true;	// add to left of head if tree empty
; 634  : 		while (!_Isnil(_Trynode))

	mov	ebp, DWORD PTR __Val$[esp+4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [esi+4]
	cmp	BYTE PTR [eax+17], 0
	mov	cl, 1
	mov	BYTE PTR __Addleft$[esp+16], cl
	jne	SHORT $LN9@insert
	mov	edx, DWORD PTR [ebp]
	npad	1
$LL10@insert:

; 635  : 			{	// look for leaf to insert before (_Addleft) or after
; 636  : 			_Wherenode = _Trynode;
; 637  : 			_Addleft = _DEBUG_LT_PRED(this->comp,

	cmp	edx, DWORD PTR [eax+12]
	mov	esi, eax
	setb	cl
	mov	BYTE PTR __Addleft$[esp+16], cl

; 638  : 				this->_Kfn(_Val), _Key(_Trynode));
; 639  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

	test	cl, cl
	je	SHORT $LN13@insert
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN14@insert
$LN13@insert:
	mov	eax, DWORD PTR [eax+8]
$LN14@insert:

; 631  : 		_Nodeptr _Trynode = _Root();
; 632  : 		_Nodeptr _Wherenode = _Myhead;
; 633  : 		bool _Addleft = true;	// add to left of head if tree empty
; 634  : 		while (!_Isnil(_Trynode))

	cmp	BYTE PTR [eax+17], 0
	je	SHORT $LL10@insert
$LN9@insert:

; 640  : 			}
; 641  : 
; 642  : 		if (this->_Multi)
; 643  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));
; 644  : 		else
; 645  : 			{	// insert only if unique
; 646  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);

	mov	edx, esi
	mov	DWORD PTR __Where$198734[esp+12], edx

; 647  : 			if (!_Addleft)

	test	cl, cl
	je	SHORT $LN57@insert

; 648  : 				;	// need to test if insert after is okay
; 649  : 			else if (_Where == begin())

	mov	eax, DWORD PTR [edi+4]

; 650  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

	lea	ecx, DWORD PTR $T234392[esp+12]
	cmp	esi, DWORD PTR [eax]
	jne	SHORT $LN4@insert
	push	ebp
	push	esi
	push	1
	push	ecx
	mov	ecx, edi
	call	?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+12]
	pop	edi
	pop	esi
	mov	BYTE PTR [eax+4], 1

; 657  : 			else
; 658  : 				return (_Pairib(_Where, false));

	mov	DWORD PTR [eax], edx
	pop	ebp

; 659  : 			}
; 660  : 		}

	pop	ecx
	ret	8
$LN4@insert:

; 651  : 			else
; 652  : 				--_Where;	// need to test if insert before is okay

	call	?_Dec@const_iterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::const_iterator::_Dec
	mov	edx, DWORD PTR __Where$198734[esp+12]
$LN57@insert:

; 653  : 
; 654  : 			if (_DEBUG_LT_PRED(this->comp,

	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR [ebp]
	jae	SHORT $LN2@insert

; 655  : 				_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 656  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	ecx, DWORD PTR __Addleft$[esp+16]
	push	ebp
	push	esi
	push	ecx
	lea	edx, DWORD PTR $T234394[esp+24]
	push	edx
	mov	ecx, edi
	call	?_Insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::_Insert
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+12]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
	mov	BYTE PTR [eax+4], 1
	pop	ebp

; 659  : 			}
; 660  : 		}

	pop	ecx
	ret	8
$LN2@insert:

; 657  : 			else
; 658  : 				return (_Pairib(_Where, false));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+12]
	pop	edi
	pop	esi
	mov	BYTE PTR [eax+4], 0
	mov	DWORD PTR [eax], edx
	pop	ebp

; 659  : 			}
; 660  : 		}

	pop	ecx
	ret	8
?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ENDP ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert
_TEXT	ENDS
PUBLIC	?touch@FAutoArchive@@QAEXAAVFAutoVariableBase@@@Z ; FAutoArchive::touch
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fautoarchive.h
;	COMDAT ?touch@FAutoArchive@@QAEXAAVFAutoVariableBase@@@Z
_TEXT	SEGMENT
$T234524 = -8						; size = 8
$T234523 = 8						; size = 4
_dirtyVariable$ = 8					; size = 4
?touch@FAutoArchive@@QAEXAAVFAutoVariableBase@@@Z PROC	; FAutoArchive::touch, COMDAT
; _this$ = ecx

; 55   : 	{

	sub	esp, 8

; 56   : #ifdef FAUTOARCHIVE_DEBUG
; 57   : 		debugHelp(dirtyVariable);
; 58   : #endif//FAUTOARCHIVE_DEBUG
; 59   : 		m_deltas.insert(&dirtyVariable);

	mov	eax, DWORD PTR _dirtyVariable$[esp+4]
	lea	edx, DWORD PTR $T234523[esp+4]
	mov	DWORD PTR $T234523[esp+4], eax
	push	edx
	lea	eax, DWORD PTR $T234524[esp+12]
	push	eax
	add	ecx, 20					; 00000014H
	call	?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert

; 60   : 	}

	add	esp, 8
	ret	4
?touch@FAutoArchive@@QAEXAAVFAutoVariableBase@@@Z ENDP	; FAutoArchive::touch
_TEXT	ENDS
PUBLIC	?set@?$FAutoVariable@HVCvUnit@@@@QAEXABH@Z	; FAutoVariable<int,CvUnit>::set
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ?set@?$FAutoVariable@HVCvUnit@@@@QAEXABH@Z
_TEXT	SEGMENT
$T234533 = -8						; size = 8
$T234532 = 8						; size = 4
_source$ = 8						; size = 4
?set@?$FAutoVariable@HVCvUnit@@@@QAEXABH@Z PROC		; FAutoVariable<int,CvUnit>::set, COMDAT
; _this$ = ecx

; 225  : {

	sub	esp, 8
	push	esi
	mov	esi, ecx

; 226  : 	if(m_value != source)

	mov	eax, DWORD PTR [esi+4]
	push	edi
	mov	edi, DWORD PTR _source$[esp+12]
	cmp	eax, DWORD PTR [edi]
	je	SHORT $LN1@set

; 227  : 	{
; 228  : 		m_owner.touch(*this);

	lea	ecx, DWORD PTR $T234532[esp+12]
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	lea	edx, DWORD PTR $T234533[esp+20]
	push	edx
	add	ecx, 20					; 00000014H
	mov	DWORD PTR $T234532[esp+20], esi
	call	?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert

; 229  : 		m_value = source;

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi+4], eax
$LN1@set:
	pop	edi
	pop	esi

; 230  : 	}
; 231  : }

	add	esp, 8
	ret	4
?set@?$FAutoVariable@HVCvUnit@@@@QAEXABH@Z ENDP		; FAutoVariable<int,CvUnit>::set
_TEXT	ENDS
PUBLIC	??4?$FAutoVariable@HVCvUnit@@@@QAEAAHABH@Z	; FAutoVariable<int,CvUnit>::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$FAutoVariable@HVCvUnit@@@@QAEAAHABH@Z
_TEXT	SEGMENT
$T234551 = -8						; size = 8
$T234550 = 8						; size = 4
_rhs$ = 8						; size = 4
??4?$FAutoVariable@HVCvUnit@@@@QAEAAHABH@Z PROC		; FAutoVariable<int,CvUnit>::operator=, COMDAT
; _this$ = ecx

; 201  : {

	sub	esp, 8
	push	esi
	push	edi

; 202  : 	if(rhs != m_value)

	mov	edi, DWORD PTR _rhs$[esp+12]
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [ecx+4]
	je	SHORT $LN9@operator

; 203  : 	{
; 204  : 		set(rhs);

	mov	DWORD PTR $T234550[esp+12], ecx
	mov	ecx, DWORD PTR [ecx+8]
	lea	edx, DWORD PTR $T234550[esp+12]
	push	edx
	lea	eax, DWORD PTR $T234551[esp+20]
	push	eax
	add	ecx, 20					; 00000014H
	call	?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi], ecx
$LN9@operator:
	pop	edi

; 205  : 	}
; 206  : 	return m_value;

	mov	eax, esi
	pop	esi

; 207  : }

	add	esp, 8
	ret	4
??4?$FAutoVariable@HVCvUnit@@@@QAEAAHABH@Z ENDP		; FAutoVariable<int,CvUnit>::operator=
_TEXT	ENDS
PUBLIC	?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z	; CvUnit::SetDeployFromOperationTurn
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvunit.h
;	COMDAT ?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z
_TEXT	SEGMENT
$T234580 = -8						; size = 8
$T234579 = 8						; size = 4
_iTurn$ = 8						; size = 4
?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z PROC	; CvUnit::SetDeployFromOperationTurn, COMDAT
; _this$ = ecx

; 700  : 	{

	sub	esp, 8
	push	esi
	push	edi

; 701  : 		m_iDeployFromOperationTurn = iTurn;

	mov	edi, DWORD PTR _iTurn$[esp+12]
	cmp	edi, DWORD PTR [ecx+124]
	lea	esi, DWORD PTR [ecx+120]
	je	SHORT $LN6@SetDeployF
	lea	eax, DWORD PTR $T234579[esp+12]
	push	eax
	lea	ecx, DWORD PTR $T234580[esp+20]
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR $T234579[esp+20], esi
	call	?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert
	mov	DWORD PTR [esi+4], edi
$LN6@SetDeployF:
	pop	edi
	pop	esi

; 702  : 	};

	add	esp, 8
	ret	4
?SetDeployFromOperationTurn@CvUnit@@QAEXH@Z ENDP	; CvUnit::SetDeployFromOperationTurn
_TEXT	ENDS
PUBLIC	?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetDeployFromOperationTurn
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluaunit.cpp
;	COMDAT ?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z
_TEXT	SEGMENT
$T234639 = -12						; size = 4
$T234640 = -8						; size = 8
_L$ = 8							; size = 4
?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z PROC ; CvLuaUnit::lSetDeployFromOperationTurn, COMDAT

; 4569 : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi

; 4570 : 	CvUnit* pkUnit = GetInstance(L);

	mov	esi, DWORD PTR _L$[esp+20]
	push	edi
	push	esi
	call	_lua_gettop
	push	1
	push	esi
	mov	ebp, eax
	mov	bl, 1
	xor	edi, edi
	call	_lua_type
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	jne	SHORT $LN5@lSetDeploy
	push	OFFSET $SG224203
	push	1
	push	esi
	call	_lua_getfield
	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	cmp	eax, 2
	jne	SHORT $LN5@lSetDeploy
	push	-1
	push	esi
	call	_lua_touserdata
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN5@lSetDeploy
	xor	bl, bl
$LN5@lSetDeploy:
	push	ebp
	push	esi
	call	_lua_settop
	add	esp, 8
	test	bl, bl
	je	SHORT $LN10@lSetDeploy
	push	OFFSET $SG224209
	push	esi
	call	_luaL_error
	push	OFFSET $SG221232
	push	esi
	call	_luaL_error
	add	esp, 16					; 00000010H
$LN10@lSetDeploy:

; 4571 : 	int iTurn = lua_tointeger(L, 2);

	push	2
	push	esi
	call	_lua_tointeger

; 4572 : 
; 4573 : 	pkUnit->SetDeployFromOperationTurn(iTurn);

	mov	ebx, eax
	lea	esi, DWORD PTR [edi+120]
	add	esp, 8
	cmp	ebx, DWORD PTR [esi+4]
	je	SHORT $LN22@lSetDeploy
	lea	eax, DWORD PTR $T234639[esp+28]
	push	eax
	lea	ecx, DWORD PTR $T234640[esp+32]
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR $T234639[esp+36], esi
	call	?insert@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tset_traits@PAVFAutoVariableBase@@U?$less@PAVFAutoVariableBase@@@std@@V?$allocator@PAVFAutoVariableBase@@@3@$0A@@std@@@std@@_N@2@ABQAVFAutoVariableBase@@@Z ; std::_Tree<std::_Tset_traits<FAutoVariableBase *,std::less<FAutoVariableBase *>,std::allocator<FAutoVariableBase *>,0> >::insert
	mov	DWORD PTR [esi+4], ebx
$LN22@lSetDeploy:
	pop	edi
	pop	esi
	pop	ebp

; 4574 : 	return 0;

	xor	eax, eax
	pop	ebx

; 4575 : }

	add	esp, 12					; 0000000cH
	ret	0
?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ENDP ; CvLuaUnit::lSetDeployFromOperationTurn
_TEXT	ENDS
PUBLIC	?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z	; CvLuaUnit::PushMethods
EXTRN	_lua_pushcclosure:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_t$ = 12						; size = 4
?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z PROC	; CvLuaUnit::PushMethods, COMDAT

; 30   : {

	push	esi

; 31   : 	Method(IsNone);

	mov	esi, DWORD PTR _L$[esp]
	push	edi
	push	0
	push	OFFSET ?lIsNone@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNone
	push	esi
	call	_lua_pushcclosure
	mov	edi, DWORD PTR _t$[esp+16]
	push	OFFSET $SG221237
	push	edi
	push	esi
	call	_lua_setfield

; 32   : 	Method(Convert);

	push	0
	push	OFFSET ?lConvert@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lConvert
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221238
	push	edi
	push	esi
	call	_lua_setfield

; 33   : 	Method(Kill);

	push	0
	push	OFFSET ?lKill@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lKill
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221239
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 34   : 
; 35   : 	Method(IsActionRecommended);

	push	0
	push	OFFSET ?lIsActionRecommended@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsActionRecommended
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221240
	push	edi
	push	esi
	call	_lua_setfield

; 36   : 	Method(IsBetterDefenderThan);

	push	0
	push	OFFSET ?lIsBetterDefenderThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBetterDefenderThan
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221241
	push	edi
	push	esi
	call	_lua_setfield

; 37   : 
; 38   : 	Method(CanDoCommand);

	push	0
	push	OFFSET ?lCanDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDoCommand
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221242
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 39   : 	Method(DoCommand);

	push	0
	push	OFFSET ?lDoCommand@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lDoCommand
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221243
	push	edi
	push	esi
	call	_lua_setfield

; 40   : 
; 41   : 	Method(GetPathEndTurnPlot);

	push	0
	push	OFFSET ?lGetPathEndTurnPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPathEndTurnPlot
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221244
	push	edi
	push	esi
	call	_lua_setfield

; 42   : 	Method(GeneratePath);

	push	0
	push	OFFSET ?lGeneratePath@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGeneratePath
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221245
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 43   : 
; 44   : 	Method(CanEnterTerritory);

	push	0
	push	OFFSET ?lCanEnterTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanEnterTerritory
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221246
	push	edi
	push	esi
	call	_lua_setfield

; 45   : 	Method(GetDeclareWarRangeStrike);

	push	0
	push	OFFSET ?lGetDeclareWarRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDeclareWarRangeStrike
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221247
	push	edi
	push	esi
	call	_lua_setfield

; 46   : 	Method(CanMoveOrAttackInto);

	push	0
	push	OFFSET ?lCanMoveOrAttackInto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveOrAttackInto
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221248
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 47   : 	Method(CanMoveThrough);

	push	0
	push	OFFSET ?lCanMoveThrough@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveThrough
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221249
	push	edi
	push	esi
	call	_lua_setfield

; 48   : 	Method(JumpToNearestValidPlot);

	push	0
	push	OFFSET ?lJumpToNearestValidPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lJumpToNearestValidPlot
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221250
	push	edi
	push	esi
	call	_lua_setfield

; 49   : 
; 50   : 	Method(GetCombatDamage);

	push	0
	push	OFFSET ?lGetCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatDamage
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221251
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 51   : 	Method(GetFireSupportUnit);

	push	0
	push	OFFSET ?lGetFireSupportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFireSupportUnit
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221252
	push	edi
	push	esi
	call	_lua_setfield

; 52   : 
; 53   : 	Method(CanAutomate);

	push	0
	push	OFFSET ?lCanAutomate@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAutomate
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221253
	push	edi
	push	esi
	call	_lua_setfield

; 54   : 	Method(CanScrap);

	push	0
	push	OFFSET ?lCanScrap@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanScrap
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221254
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 55   : 	Method(GetScrapGold);

	push	0
	push	OFFSET ?lGetScrapGold@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetScrapGold
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221255
	push	edi
	push	esi
	call	_lua_setfield

; 56   : 	Method(CanGift);

	push	0
	push	OFFSET ?lCanGift@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanGift
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221256
	push	edi
	push	esi
	call	_lua_setfield

; 57   : 	Method(CanDistanceGift);

	push	0
	push	OFFSET ?lCanDistanceGift@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDistanceGift
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221257
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 58   : 	Method(CanLoadUnit);

	push	0
	push	OFFSET ?lCanLoadUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanLoadUnit
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221258
	push	edi
	push	esi
	call	_lua_setfield

; 59   : 	Method(CanLoad);

	push	0
	push	OFFSET ?lCanLoad@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanLoad
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221259
	push	edi
	push	esi
	call	_lua_setfield

; 60   : 	Method(CanUnload);

	push	0
	push	OFFSET ?lCanUnload@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanUnload
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221260
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 61   : 	Method(CanUnloadAll);

	push	0
	push	OFFSET ?lCanUnloadAll@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanUnloadAll
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221261
	push	edi
	push	esi
	call	_lua_setfield

; 62   : 	Method(CanHold);

	push	0
	push	OFFSET ?lCanHold@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanHold
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221262
	push	edi
	push	esi
	call	_lua_setfield

; 63   : 	Method(CanSleep);

	push	0
	push	OFFSET ?lCanSleep@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSleep
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221263
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 64   : 	Method(CanFortify);

	push	0
	push	OFFSET ?lCanFortify@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanFortify
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221264
	push	edi
	push	esi
	call	_lua_setfield

; 65   : 	Method(CanAirPatrol);

	push	0
	push	OFFSET ?lCanAirPatrol@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirPatrol
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221265
	push	edi
	push	esi
	call	_lua_setfield

; 66   : 	Method(IsEmbarked);

	push	0
	push	OFFSET ?lIsEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEmbarked
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221266
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 67   : 	Method(SetEmbarked);

	push	0
	push	OFFSET ?lSetEmbarked@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetEmbarked
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221267
	push	edi
	push	esi
	call	_lua_setfield

; 68   : 	Method(CanHeal);

	push	0
	push	OFFSET ?lCanHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanHeal
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221268
	push	edi
	push	esi
	call	_lua_setfield

; 69   : 	Method(CanSentry);

	push	0
	push	OFFSET ?lCanSentry@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSentry
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221269
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 70   : 	Method(CanEmbark);

	push	0
	push	OFFSET ?lCanEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanEmbark
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221270
	push	edi
	push	esi
	call	_lua_setfield

; 71   : 	Method(CanDisembark);

	push	0
	push	OFFSET ?lCanDisembark@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDisembark
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221271
	push	edi
	push	esi
	call	_lua_setfield

; 72   : 	Method(CanEmbarkOnto);

	push	0
	push	OFFSET ?lCanEmbarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanEmbarkOnto
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221272
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 73   : 	Method(CanDisembarkOnto);

	push	0
	push	OFFSET ?lCanDisembarkOnto@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDisembarkOnto
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221273
	push	edi
	push	esi
	call	_lua_setfield

; 74   : 	Method(CanRebaseAt);

	push	0
	push	OFFSET ?lCanRebaseAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRebaseAt
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221274
	push	edi
	push	esi
	call	_lua_setfield

; 75   : 	Method(Embark);

	push	0
	push	OFFSET ?lEmbark@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lEmbark
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221275
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 76   : 
; 77   : 	Method(IsRangeAttackIgnoreLOS);

	push	0
	push	OFFSET ?lIsRangeAttackIgnoreLOS@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangeAttackIgnoreLOS
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221276
	push	edi
	push	esi
	call	_lua_setfield

; 78   : 
; 79   : 	Method(CanAirlift);

	push	0
	push	OFFSET ?lCanAirlift@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirlift
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221277
	push	edi
	push	esi
	call	_lua_setfield

; 80   : 	Method(CanAirliftAt);

	push	0
	push	OFFSET ?lCanAirliftAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirliftAt
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221278
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 81   : 
; 82   : 	Method(IsNukeVictim);

	push	0
	push	OFFSET ?lIsNukeVictim@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNukeVictim
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221279
	push	edi
	push	esi
	call	_lua_setfield

; 83   : 	Method(CanNuke);

	push	0
	push	OFFSET ?lCanNuke@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanNuke
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221280
	push	edi
	push	esi
	call	_lua_setfield

; 84   : 	Method(CanNukeAt);

	push	0
	push	OFFSET ?lCanNukeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanNukeAt
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221281
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 85   : 
; 86   : 	Method(CanRangeStrike);

	push	0
	push	OFFSET ?lCanRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRangeStrike
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221282
	push	edi
	push	esi
	call	_lua_setfield

; 87   : 	Method(CanRangeStrikeAt);

	push	0
	push	OFFSET ?lCanRangeStrikeAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRangeStrikeAt
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221283
	push	edi
	push	esi
	call	_lua_setfield

; 88   : #ifdef DEL_RANGED_COUNTERATTACKS
; 89   : 	Method(CanEverRangeStrikeAt);
; 90   : 	Method(PlotValid);
; 91   : #endif
; 92   : 
; 93   : 	Method(CanParadrop);

	push	0
	push	OFFSET ?lCanParadrop@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanParadrop
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221284
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 94   : 	Method(CanParadropAt);

	push	0
	push	OFFSET ?lCanParadropAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanParadropAt
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221285
	push	edi
	push	esi
	call	_lua_setfield

; 95   : 
; 96   : 	Method(CanMakeTradeRoute);

	push	0
	push	OFFSET ?lCanMakeTradeRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMakeTradeRoute
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221286
	push	edi
	push	esi
	call	_lua_setfield

; 97   : 	Method(CanMakeTradeRouteAt);

	push	0
	push	OFFSET ?lCanMakeTradeRouteAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMakeTradeRouteAt
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221287
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 98   : 
; 99   : 	Method(GetExoticGoodsGoldAmount);

	push	0
	push	OFFSET ?lGetExoticGoodsGoldAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExoticGoodsGoldAmount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221288
	push	edi
	push	esi
	call	_lua_setfield

; 100  : 	Method(GetExoticGoodsXPAmount);

	push	0
	push	OFFSET ?lGetExoticGoodsXPAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExoticGoodsXPAmount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221289
	push	edi
	push	esi
	call	_lua_setfield

; 101  : 
; 102  : 	Method(CanPillage);

	push	0
	push	OFFSET ?lCanPillage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanPillage
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221290
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 103  : 
; 104  : 	Method(IsSelected);

	push	0
	push	OFFSET ?lIsSelected@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsSelected
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221291
	push	edi
	push	esi
	call	_lua_setfield

; 105  : 
; 106  : 	Method(CanFound);

	push	0
	push	OFFSET ?lCanFound@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanFound
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221292
	push	edi
	push	esi
	call	_lua_setfield

; 107  : 	Method(CanJoin);

	push	0
	push	OFFSET ?lCanJoin@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanJoin
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221293
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 108  : 	Method(CanConstruct);

	push	0
	push	OFFSET ?lCanConstruct@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanConstruct
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221294
	push	edi
	push	esi
	call	_lua_setfield

; 109  : 
; 110  : 	Method(CanDiscover);

	push	0
	push	OFFSET ?lCanDiscover@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanDiscover
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221295
	push	edi
	push	esi
	call	_lua_setfield

; 111  : 	Method(GetDiscoverAmount);

	push	0
	push	OFFSET ?lGetDiscoverAmount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDiscoverAmount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221296
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 112  : 	Method(GetHurryProduction);

	push	0
	push	OFFSET ?lGetHurryProduction@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHurryProduction
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221297
	push	edi
	push	esi
	call	_lua_setfield

; 113  : 	Method(GetTradeGold);

	push	0
	push	OFFSET ?lGetTradeGold@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTradeGold
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221298
	push	edi
	push	esi
	call	_lua_setfield

; 114  : 	Method(GetTradeInfluence);

	push	0
	push	OFFSET ?lGetTradeInfluence@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTradeInfluence
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221299
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 115  : 	Method(CanTrade);

	push	0
	push	OFFSET ?lCanTrade@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanTrade
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221300
	push	edi
	push	esi
	call	_lua_setfield

; 116  : 	Method(CanBuyCityState);

	push	0
	push	OFFSET ?lCanBuyCityState@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuyCityState
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221301
	push	edi
	push	esi
	call	_lua_setfield

; 117  : 	Method(CanRepairFleet);

	push	0
	push	OFFSET ?lCanRepairFleet@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanRepairFleet
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221302
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 118  : 	Method(CanBuildSpaceship);

	push	0
	push	OFFSET ?lCanBuildSpaceship@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuildSpaceship
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221303
	push	edi
	push	esi
	call	_lua_setfield

; 119  : 
; 120  : 	Method(CanGoldenAge);

	push	0
	push	OFFSET ?lCanGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanGoldenAge
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221304
	push	edi
	push	esi
	call	_lua_setfield

; 121  : 	Method(GetGoldenAgeTurns);

	push	0
	push	OFFSET ?lGetGoldenAgeTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGoldenAgeTurns
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221305
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 122  : 	Method(GetGivePoliciesCulture);

	push	0
	push	OFFSET ?lGetGivePoliciesCulture@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGivePoliciesCulture
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221306
	push	edi
	push	esi
	call	_lua_setfield

; 123  : 	Method(GetBlastTourism);

	push	0
	push	OFFSET ?lGetBlastTourism@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBlastTourism
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221307
	push	edi
	push	esi
	call	_lua_setfield

; 124  : 	Method(CanBuild);

	push	0
	push	OFFSET ?lCanBuild@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuild
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221308
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 125  : 	Method(CanLead);

	push	0
	push	OFFSET ?lCanLead@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanLead
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221309
	push	edi
	push	esi
	call	_lua_setfield

; 126  : 	Method(Lead);

	push	0
	push	OFFSET ?lLead@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lLead
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221310
	push	edi
	push	esi
	call	_lua_setfield

; 127  : 	Method(CanGiveExperience);

	push	0
	push	OFFSET ?lCanGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanGiveExperience
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221311
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 128  : 	Method(GiveExperience);

	push	0
	push	OFFSET ?lGiveExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGiveExperience
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221312
	push	edi
	push	esi
	call	_lua_setfield

; 129  : 
; 130  : 	Method(CanPromote);

	push	0
	push	OFFSET ?lCanPromote@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanPromote
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221313
	push	edi
	push	esi
	call	_lua_setfield

; 131  : 	Method(Promote);

	push	0
	push	OFFSET ?lPromote@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lPromote
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221314
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 132  : 
; 133  : 	Method(GetUpgradeUnitType);

	push	0
	push	OFFSET ?lGetUpgradeUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUpgradeUnitType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221315
	push	edi
	push	esi
	call	_lua_setfield

; 134  : 	Method(UpgradePrice);

	push	0
	push	OFFSET ?lUpgradePrice@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUpgradePrice
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221316
	push	edi
	push	esi
	call	_lua_setfield

; 135  : 	Method(CanUpgradeRightNow);

	push	0
	push	OFFSET ?lCanUpgradeRightNow@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanUpgradeRightNow
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221317
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 136  : 	Method(GetNumResourceNeededToUpgrade);

	push	0
	push	OFFSET ?lGetNumResourceNeededToUpgrade@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumResourceNeededToUpgrade
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221318
	push	edi
	push	esi
	call	_lua_setfield

; 137  : 
; 138  : 	Method(GetHandicapType);

	push	0
	push	OFFSET ?lGetHandicapType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHandicapType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221319
	push	edi
	push	esi
	call	_lua_setfield

; 139  : 	Method(GetCivilizationType);

	push	0
	push	OFFSET ?lGetCivilizationType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCivilizationType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221320
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 140  : 	Method(GetSpecialUnitType);

	push	0
	push	OFFSET ?lGetSpecialUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSpecialUnitType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221321
	push	edi
	push	esi
	call	_lua_setfield

; 141  : 	Method(GetCaptureUnitType);

	push	0
	push	OFFSET ?lGetCaptureUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCaptureUnitType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221322
	push	edi
	push	esi
	call	_lua_setfield

; 142  : 	Method(GetUnitCombatType);

	push	0
	push	OFFSET ?lGetUnitCombatType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitCombatType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221323
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 143  : 	Method(GetUnitAIType);

	push	0
	push	OFFSET ?lGetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitAIType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221324
	push	edi
	push	esi
	call	_lua_setfield

; 144  : 	Method(SetUnitAIType);

	push	0
	push	OFFSET ?lSetUnitAIType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetUnitAIType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221325
	push	edi
	push	esi
	call	_lua_setfield

; 145  : 	Method(GetDomainType);

	push	0
	push	OFFSET ?lGetDomainType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDomainType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221326
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 146  : 	Method(GetInvisibleType);

	push	0
	push	OFFSET ?lGetInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetInvisibleType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221327
	push	edi
	push	esi
	call	_lua_setfield

; 147  : 	Method(GetSeeInvisibleType);

	push	0
	push	OFFSET ?lGetSeeInvisibleType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSeeInvisibleType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221328
	push	edi
	push	esi
	call	_lua_setfield

; 148  : 	Method(GetDropRange);

	push	0
	push	OFFSET ?lGetDropRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDropRange
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221329
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 149  : 
; 150  : 	Method(FlavorValue);

	push	0
	push	OFFSET ?lFlavorValue@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlavorValue
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221330
	push	edi
	push	esi
	call	_lua_setfield

; 151  : 	Method(IsBarbarian);

	push	0
	push	OFFSET ?lIsBarbarian@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBarbarian
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221331
	push	edi
	push	esi
	call	_lua_setfield

; 152  : 
; 153  : 	Method(IsHuman);

	push	0
	push	OFFSET ?lIsHuman@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHuman
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221332
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 154  : 	Method(VisibilityRange);

	push	0
	push	OFFSET ?lVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lVisibilityRange
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221333
	push	edi
	push	esi
	call	_lua_setfield

; 155  : 
; 156  : 	Method(MaxMoves);

	push	0
	push	OFFSET ?lMaxMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxMoves
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221334
	push	edi
	push	esi
	call	_lua_setfield

; 157  : 	Method(MovesLeft);

	push	0
	push	OFFSET ?lMovesLeft@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMovesLeft
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221335
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 158  : 
; 159  : 	Method(CanMove);

	push	0
	push	OFFSET ?lCanMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMove
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221336
	push	edi
	push	esi
	call	_lua_setfield

; 160  : 	Method(HasMoved);

	push	0
	push	OFFSET ?lHasMoved@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHasMoved
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221337
	push	edi
	push	esi
	call	_lua_setfield

; 161  : 	Method(Range);

	push	0
	push	OFFSET ?lRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRange
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221338
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 162  : 	Method(NukeDamageLevel);

	push	0
	push	OFFSET ?lNukeDamageLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lNukeDamageLevel
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221339
	push	edi
	push	esi
	call	_lua_setfield

; 163  : 
; 164  : 	Method(CanBuildRoute);

	push	0
	push	OFFSET ?lCanBuildRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanBuildRoute
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221340
	push	edi
	push	esi
	call	_lua_setfield

; 165  : 	Method(GetBuildType);

	push	0
	push	OFFSET ?lGetBuildType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBuildType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221341
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 166  : 	Method(WorkRate);

	push	0
	push	OFFSET ?lWorkRate@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lWorkRate
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221342
	push	edi
	push	esi
	call	_lua_setfield

; 167  : 
; 168  : 	Method(IsNoBadGoodies);

	push	0
	push	OFFSET ?lIsNoBadGoodies@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNoBadGoodies
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221343
	push	edi
	push	esi
	call	_lua_setfield

; 169  : 	Method(IsOnlyDefensive);

	push	0
	push	OFFSET ?lIsOnlyDefensive@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsOnlyDefensive
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221344
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 170  : 
; 171  : 	Method(IsNoCapture);

	push	0
	push	OFFSET ?lIsNoCapture@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNoCapture
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221345
	push	edi
	push	esi
	call	_lua_setfield

; 172  : 	Method(IsRivalTerritory);

	push	0
	push	OFFSET ?lIsRivalTerritory@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRivalTerritory
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221346
	push	edi
	push	esi
	call	_lua_setfield

; 173  : 	Method(IsFound);

	push	0
	push	OFFSET ?lIsFound@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFound
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221347
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 174  : 	Method(IsWork);

	push	0
	push	OFFSET ?lIsWork@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsWork
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221348
	push	edi
	push	esi
	call	_lua_setfield

; 175  : 	Method(IsGoldenAge);

	push	0
	push	OFFSET ?lIsGoldenAge@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsGoldenAge
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221349
	push	edi
	push	esi
	call	_lua_setfield

; 176  : #ifdef NQ_COMBAT_STRENGTH_NEAR_FRIENDLY_MINOR
; 177  : 	Method(IsNearFriendlyMinor);

	push	0
	push	OFFSET ?lIsNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearFriendlyMinor
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221350
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 178  : #endif
; 179  : 	Method(CanCoexistWithEnemyUnit);

	push	0
	push	OFFSET ?lCanCoexistWithEnemyUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanCoexistWithEnemyUnit
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221351
	push	edi
	push	esi
	call	_lua_setfield

; 180  : 
; 181  : 	Method(IsGreatPerson);

	push	0
	push	OFFSET ?lIsGreatPerson@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsGreatPerson
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221352
	push	edi
	push	esi
	call	_lua_setfield

; 182  : 
; 183  : 	Method(IsFighting);

	push	0
	push	OFFSET ?lIsFighting@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFighting
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221353
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 184  : 	Method(IsAttacking);

	push	0
	push	OFFSET ?lIsAttacking@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsAttacking
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221354
	push	edi
	push	esi
	call	_lua_setfield

; 185  : 	Method(IsDefending);

	push	0
	push	OFFSET ?lIsDefending@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsDefending
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221355
	push	edi
	push	esi
	call	_lua_setfield

; 186  : 	Method(IsInCombat);

	push	0
	push	OFFSET ?lIsInCombat@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsInCombat
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221356
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 187  : 
; 188  : 	Method(GetMaxHitPoints);

	push	0
	push	OFFSET ?lGetMaxHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxHitPoints
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221357
	push	edi
	push	esi
	call	_lua_setfield

; 189  : 	Method(GetCurrHitPoints);

	push	0
	push	OFFSET ?lGetCurrHitPoints@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCurrHitPoints
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221358
	push	edi
	push	esi
	call	_lua_setfield

; 190  : 	Method(IsHurt);

	push	0
	push	OFFSET ?lIsHurt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHurt
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221359
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 191  : 	Method(IsDead);

	push	0
	push	OFFSET ?lIsDead@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsDead
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221360
	push	edi
	push	esi
	call	_lua_setfield

; 192  : 	Method(IsDelayedDeath);

	push	0
	push	OFFSET ?lIsDelayedDeath@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsDelayedDeath
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221361
	push	edi
	push	esi
	call	_lua_setfield

; 193  : 	Method(SetBaseCombatStrength);

	push	0
	push	OFFSET ?lSetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetBaseCombatStrength
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221362
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 194  : 	Method(GetBaseCombatStrength);

	push	0
	push	OFFSET ?lGetBaseCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBaseCombatStrength
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221363
	push	edi
	push	esi
	call	_lua_setfield

; 195  : 
; 196  : 	Method(GetMaxAttackStrength);

	push	0
	push	OFFSET ?lGetMaxAttackStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxAttackStrength
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221364
	push	edi
	push	esi
	call	_lua_setfield

; 197  : 	Method(GetMaxDefenseStrength);

	push	0
	push	OFFSET ?lGetMaxDefenseStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxDefenseStrength
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221365
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 198  : 	Method(GetEmbarkedUnitDefense);

	push	0
	push	OFFSET ?lGetEmbarkedUnitDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetEmbarkedUnitDefense
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221366
	push	edi
	push	esi
	call	_lua_setfield

; 199  : 
; 200  : 	Method(IsCombatUnit);

	push	0
	push	OFFSET ?lIsCombatUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCombatUnit
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221367
	push	edi
	push	esi
	call	_lua_setfield

; 201  : 	Method(IsCanDefend);

	push	0
	push	OFFSET ?lIsCanDefend@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanDefend
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221368
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 202  : 	Method(CanSiege);

	push	0
	push	OFFSET ?lCanSiege@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSiege
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221369
	push	edi
	push	esi
	call	_lua_setfield

; 203  : 	Method(IsCanAttackWithMove);

	push	0
	push	OFFSET ?lIsCanAttackWithMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackWithMove
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221370
	push	edi
	push	esi
	call	_lua_setfield

; 204  : 	Method(IsCanAttackRanged);

	push	0
	push	OFFSET ?lIsCanAttackRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackRanged
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221371
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 205  : 	Method(IsCanAttack);

	push	0
	push	OFFSET ?lIsCanAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttack
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221372
	push	edi
	push	esi
	call	_lua_setfield

; 206  : 	Method(IsCanAttackWithMoveNow);

	push	0
	push	OFFSET ?lIsCanAttackWithMoveNow@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCanAttackWithMoveNow
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221373
	push	edi
	push	esi
	call	_lua_setfield

; 207  : 	Method(IsEnemyInMovementRange);

	push	0
	push	OFFSET ?lIsEnemyInMovementRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyInMovementRange
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221374
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 208  : 
; 209  : 	Method(IsTrade);

	push	0
	push	OFFSET ?lIsTrade@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsTrade
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221375
	push	edi
	push	esi
	call	_lua_setfield

; 210  : 
; 211  : 	Method(GetBaseRangedCombatStrength);

	push	0
	push	OFFSET ?lGetBaseRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBaseRangedCombatStrength
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221376
	push	edi
	push	esi
	call	_lua_setfield

; 212  : 	Method(GetMaxRangedCombatStrength);

	push	0
	push	OFFSET ?lGetMaxRangedCombatStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMaxRangedCombatStrength
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221377
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 213  : 	Method(GetCombatLimit);

	push	0
	push	OFFSET ?lGetCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatLimit
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221378
	push	edi
	push	esi
	call	_lua_setfield

; 214  : 	Method(GetRangedCombatLimit);

	push	0
	push	OFFSET ?lGetRangedCombatLimit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangedCombatLimit
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221379
	push	edi
	push	esi
	call	_lua_setfield

; 215  : 	Method(CanAirAttack);

	push	0
	push	OFFSET ?lCanAirAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirAttack
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221380
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 216  : 	Method(CanAirDefend);

	push	0
	push	OFFSET ?lCanAirDefend@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAirDefend
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221381
	push	edi
	push	esi
	call	_lua_setfield

; 217  : 	Method(GetAirCombatDamage);

	push	0
	push	OFFSET ?lGetAirCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAirCombatDamage
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221382
	push	edi
	push	esi
	call	_lua_setfield

; 218  : 	Method(GetRangeCombatDamage);

	push	0
	push	OFFSET ?lGetRangeCombatDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangeCombatDamage
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221383
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 219  : 	Method(GetAirStrikeDefenseDamage);

	push	0
	push	OFFSET ?lGetAirStrikeDefenseDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAirStrikeDefenseDamage
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221384
	push	edi
	push	esi
	call	_lua_setfield

; 220  : 	Method(GetBestInterceptor);

	push	0
	push	OFFSET ?lGetBestInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBestInterceptor
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221385
	push	edi
	push	esi
	call	_lua_setfield

; 221  : 	Method(GetInterceptorCount);

	push	0
	push	OFFSET ?lGetInterceptorCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetInterceptorCount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221386
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 222  : 	Method(GetBestSeaPillageInterceptor);

	push	0
	push	OFFSET ?lGetBestSeaPillageInterceptor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBestSeaPillageInterceptor
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221387
	push	edi
	push	esi
	call	_lua_setfield

; 223  : 	Method(GetCaptureChance);

	push	0
	push	OFFSET ?lGetCaptureChance@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCaptureChance
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221388
	push	edi
	push	esi
	call	_lua_setfield

; 224  : 
; 225  : 	Method(IsAutomated);

	push	0
	push	OFFSET ?lIsAutomated@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsAutomated
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221389
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 226  : 	Method(IsWaiting);

	push	0
	push	OFFSET ?lIsWaiting@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsWaiting
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221390
	push	edi
	push	esi
	call	_lua_setfield

; 227  : 	Method(IsFortifyable);

	push	0
	push	OFFSET ?lIsFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFortifyable
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221391
	push	edi
	push	esi
	call	_lua_setfield

; 228  : 	Method(IsEverFortifyable);

	push	0
	push	OFFSET ?lIsEverFortifyable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEverFortifyable
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221392
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 229  : 	Method(FortifyModifier);

	push	0
	push	OFFSET ?lFortifyModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFortifyModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221393
	push	edi
	push	esi
	call	_lua_setfield

; 230  : 	Method(ExperienceNeeded);

	push	0
	push	OFFSET ?lExperienceNeeded@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lExperienceNeeded
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221394
	push	edi
	push	esi
	call	_lua_setfield

; 231  : 	Method(AttackXPValue);

	push	0
	push	OFFSET ?lAttackXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackXPValue
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221395
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 232  : 	Method(DefenseXPValue);

	push	0
	push	OFFSET ?lDefenseXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lDefenseXPValue
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221396
	push	edi
	push	esi
	call	_lua_setfield

; 233  : 	Method(MaxXPValue);

	push	0
	push	OFFSET ?lMaxXPValue@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxXPValue
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221397
	push	edi
	push	esi
	call	_lua_setfield

; 234  : 	Method(FirstStrikes);

	push	0
	push	OFFSET ?lFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFirstStrikes
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221398
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 235  : 	Method(ChanceFirstStrikes);

	push	0
	push	OFFSET ?lChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChanceFirstStrikes
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221399
	push	edi
	push	esi
	call	_lua_setfield

; 236  : 	Method(MaxFirstStrikes);

	push	0
	push	OFFSET ?lMaxFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxFirstStrikes
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221400
	push	edi
	push	esi
	call	_lua_setfield

; 237  : 	Method(IsRanged);

	push	0
	push	OFFSET ?lIsRanged@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRanged
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221401
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 238  : 	Method(IsMustSetUpToRangedAttack);

	push	0
	push	OFFSET ?lIsMustSetUpToRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsMustSetUpToRangedAttack
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221402
	push	edi
	push	esi
	call	_lua_setfield

; 239  : 	Method(CanSetUpForRangedAttack);

	push	0
	push	OFFSET ?lCanSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanSetUpForRangedAttack
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221403
	push	edi
	push	esi
	call	_lua_setfield

; 240  : 	Method(IsSetUpForRangedAttack);

	push	0
	push	OFFSET ?lIsSetUpForRangedAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsSetUpForRangedAttack
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221404
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 241  : 	Method(ImmuneToFirstStrikes);

	push	0
	push	OFFSET ?lImmuneToFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lImmuneToFirstStrikes
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221405
	push	edi
	push	esi
	call	_lua_setfield

; 242  : 	Method(NoDefensiveBonus);

	push	0
	push	OFFSET ?lNoDefensiveBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lNoDefensiveBonus
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221406
	push	edi
	push	esi
	call	_lua_setfield

; 243  : 	Method(IgnoreBuildingDefense);

	push	0
	push	OFFSET ?lIgnoreBuildingDefense@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIgnoreBuildingDefense
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221407
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 244  : 	Method(CanMoveImpassable);

	push	0
	push	OFFSET ?lCanMoveImpassable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveImpassable
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221408
	push	edi
	push	esi
	call	_lua_setfield

; 245  : 	Method(CanMoveAllTerrain);

	push	0
	push	OFFSET ?lCanMoveAllTerrain@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanMoveAllTerrain
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221409
	push	edi
	push	esi
	call	_lua_setfield

; 246  : 	Method(FlatMovementCost);

	push	0
	push	OFFSET ?lFlatMovementCost@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlatMovementCost
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221410
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 247  : 	Method(IgnoreTerrainCost);

	push	0
	push	OFFSET ?lIgnoreTerrainCost@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIgnoreTerrainCost
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221411
	push	edi
	push	esi
	call	_lua_setfield

; 248  : 	Method(IsNeverInvisible);

	push	0
	push	OFFSET ?lIsNeverInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNeverInvisible
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221412
	push	edi
	push	esi
	call	_lua_setfield

; 249  : 	Method(IsInvisible);

	push	0
	push	OFFSET ?lIsInvisible@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsInvisible
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221413
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 250  : 	Method(IsNukeImmune);

	push	0
	push	OFFSET ?lIsNukeImmune@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNukeImmune
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221414
	push	edi
	push	esi
	call	_lua_setfield

; 251  : 	Method(IsRangeAttackOnlyInDomain);

	push	0
	push	OFFSET ?lIsRangeAttackOnlyInDomain@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangeAttackOnlyInDomain
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221415
	push	edi
	push	esi
	call	_lua_setfield

; 252  : 	Method(IsCityAttackOnly);

	push	0
	push	OFFSET ?lIsCityAttackOnly@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCityAttackOnly
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221416
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 253  : 
; 254  : 	Method(MaxInterceptionProbability);

	push	0
	push	OFFSET ?lMaxInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lMaxInterceptionProbability
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221417
	push	edi
	push	esi
	call	_lua_setfield

; 255  : 	Method(CurrInterceptionProbability);

	push	0
	push	OFFSET ?lCurrInterceptionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCurrInterceptionProbability
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221418
	push	edi
	push	esi
	call	_lua_setfield

; 256  : 	Method(EvasionProbability);

	push	0
	push	OFFSET ?lEvasionProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lEvasionProbability
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221419
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 257  : 	Method(WithdrawalProbability);

	push	0
	push	OFFSET ?lWithdrawalProbability@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lWithdrawalProbability
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221420
	push	edi
	push	esi
	call	_lua_setfield

; 258  : 
; 259  : 	Method(GetAdjacentModifier);

	push	0
	push	OFFSET ?lGetAdjacentModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAdjacentModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221421
	push	edi
	push	esi
	call	_lua_setfield

; 260  : 	Method(GetAttackModifier);

	push	0
	push	OFFSET ?lGetAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221422
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 261  : 	Method(GetDefenseModifier);

	push	0
	push	OFFSET ?lGetDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221423
	push	edi
	push	esi
	call	_lua_setfield

; 262  : 	Method(GetRangedAttackModifier);

	push	0
	push	OFFSET ?lGetRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRangedAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221424
	push	edi
	push	esi
	call	_lua_setfield

; 263  : 	Method(CityAttackModifier);

	push	0
	push	OFFSET ?lCityAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCityAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221425
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 264  : 	Method(CityDefenseModifier);

	push	0
	push	OFFSET ?lCityDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCityDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221426
	push	edi
	push	esi
	call	_lua_setfield

; 265  : 	Method(HillsAttackModifier);

	push	0
	push	OFFSET ?lHillsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHillsAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221427
	push	edi
	push	esi
	call	_lua_setfield

; 266  : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 267  : 	Method(HeavyChargeDownhillModifier);

	push	0
	push	OFFSET ?lHeavyChargeDownhillModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHeavyChargeDownhillModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221428
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 268  : #endif
; 269  : 	Method(HillsDefenseModifier);

	push	0
	push	OFFSET ?lHillsDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHillsDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221429
	push	edi
	push	esi
	call	_lua_setfield

; 270  : 	Method(RoughAttackModifier);

	push	0
	push	OFFSET ?lRoughAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221430
	push	edi
	push	esi
	call	_lua_setfield

; 271  : 	Method(OpenAttackModifier);

	push	0
	push	OFFSET ?lOpenAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221431
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 272  : 	Method(OpenRangedAttackModifier);

	push	0
	push	OFFSET ?lOpenRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenRangedAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221432
	push	edi
	push	esi
	call	_lua_setfield

; 273  : 	Method(OpenDefenseModifier);

	push	0
	push	OFFSET ?lOpenDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lOpenDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221433
	push	edi
	push	esi
	call	_lua_setfield

; 274  : 	Method(RoughRangedAttackModifier);

	push	0
	push	OFFSET ?lRoughRangedAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughRangedAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221434
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 275  : 	Method(AttackFortifiedModifier);

	push	0
	push	OFFSET ?lAttackFortifiedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackFortifiedModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221435
	push	edi
	push	esi
	call	_lua_setfield

; 276  : 	Method(AttackWoundedModifier);

	push	0
	push	OFFSET ?lAttackWoundedModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAttackWoundedModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221436
	push	edi
	push	esi
	call	_lua_setfield

; 277  : 	Method(FlankAttackModifier);

	push	0
	push	OFFSET ?lFlankAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFlankAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221437
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 278  : 	Method(RoughDefenseModifier);

	push	0
	push	OFFSET ?lRoughDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRoughDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221438
	push	edi
	push	esi
	call	_lua_setfield

; 279  : 	Method(TerrainAttackModifier);

	push	0
	push	OFFSET ?lTerrainAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lTerrainAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221439
	push	edi
	push	esi
	call	_lua_setfield

; 280  : 	Method(TerrainDefenseModifier);

	push	0
	push	OFFSET ?lTerrainDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lTerrainDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221440
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 281  : 	Method(FeatureAttackModifier);

	push	0
	push	OFFSET ?lFeatureAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFeatureAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221441
	push	edi
	push	esi
	call	_lua_setfield

; 282  : 	Method(FeatureDefenseModifier);

	push	0
	push	OFFSET ?lFeatureDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFeatureDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221442
	push	edi
	push	esi
	call	_lua_setfield

; 283  : 	Method(UnitClassAttackModifier);

	push	0
	push	OFFSET ?lUnitClassAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitClassAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221443
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 284  : 	Method(UnitClassDefenseModifier);

	push	0
	push	OFFSET ?lUnitClassDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitClassDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221444
	push	edi
	push	esi
	call	_lua_setfield

; 285  : 	Method(UnitCombatModifier);

	push	0
	push	OFFSET ?lUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lUnitCombatModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221445
	push	edi
	push	esi
	call	_lua_setfield

; 286  : 	Method(DomainModifier);

	push	0
	push	OFFSET ?lDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lDomainModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221446
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 287  : 	Method(GetStrategicResourceCombatPenalty);

	push	0
	push	OFFSET ?lGetStrategicResourceCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetStrategicResourceCombatPenalty
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221447
	push	edi
	push	esi
	call	_lua_setfield

; 288  : 	Method(GetUnhappinessCombatPenalty);

	push	0
	push	OFFSET ?lGetUnhappinessCombatPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnhappinessCombatPenalty
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221448
	push	edi
	push	esi
	call	_lua_setfield

; 289  : 	Method(AirSweepCombatMod);

	push	0
	push	OFFSET ?lAirSweepCombatMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAirSweepCombatMod
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221449
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 290  : 	Method(CapitalDefenseModifier);

	push	0
	push	OFFSET ?lCapitalDefenseModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCapitalDefenseModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221450
	push	edi
	push	esi
	call	_lua_setfield

; 291  : 	Method(CapitalDefenseFalloff);

	push	0
	push	OFFSET ?lCapitalDefenseFalloff@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCapitalDefenseFalloff
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221451
	push	edi
	push	esi
	call	_lua_setfield

; 292  : 
; 293  : 	Method(SpecialCargo);

	push	0
	push	OFFSET ?lSpecialCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSpecialCargo
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221452
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 294  : 	Method(DomainCargo);

	push	0
	push	OFFSET ?lDomainCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lDomainCargo
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221453
	push	edi
	push	esi
	call	_lua_setfield

; 295  : 	Method(CargoSpace);

	push	0
	push	OFFSET ?lCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCargoSpace
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221454
	push	edi
	push	esi
	call	_lua_setfield

; 296  : 	Method(ChangeCargoSpace);

	push	0
	push	OFFSET ?lChangeCargoSpace@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeCargoSpace
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221455
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 297  : 	Method(IsFull);

	push	0
	push	OFFSET ?lIsFull@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFull
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221456
	push	edi
	push	esi
	call	_lua_setfield

; 298  : 	Method(CargoSpaceAvailable);

	push	0
	push	OFFSET ?lCargoSpaceAvailable@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCargoSpaceAvailable
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221457
	push	edi
	push	esi
	call	_lua_setfield

; 299  : 	Method(HasCargo);

	push	0
	push	OFFSET ?lHasCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHasCargo
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221458
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 300  : 	Method(CanCargoAllMove);

	push	0
	push	OFFSET ?lCanCargoAllMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanCargoAllMove
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221459
	push	edi
	push	esi
	call	_lua_setfield

; 301  : 	Method(GetUnitAICargo);

	push	0
	push	OFFSET ?lGetUnitAICargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitAICargo
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221460
	push	edi
	push	esi
	call	_lua_setfield

; 302  : 	Method(GetID);

	push	0
	push	OFFSET ?lGetID@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetID
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221461
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 303  : 
; 304  : 	Method(GetHotKeyNumber);

	push	0
	push	OFFSET ?lGetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetHotKeyNumber
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221462
	push	edi
	push	esi
	call	_lua_setfield

; 305  : 	Method(SetHotKeyNumber);

	push	0
	push	OFFSET ?lSetHotKeyNumber@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetHotKeyNumber
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221463
	push	edi
	push	esi
	call	_lua_setfield

; 306  : 
; 307  : 	Method(GetX);

	push	0
	push	OFFSET ?lGetX@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetX
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221464
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 308  : 	Method(GetY);

	push	0
	push	OFFSET ?lGetY@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetY
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221465
	push	edi
	push	esi
	call	_lua_setfield

; 309  : 	Method(SetXY);

	push	0
	push	OFFSET ?lSetXY@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetXY
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221466
	push	edi
	push	esi
	call	_lua_setfield

; 310  : 	Method(At);

	push	0
	push	OFFSET ?lAt@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAt
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221467
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 311  : 	Method(AtPlot);

	push	0
	push	OFFSET ?lAtPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lAtPlot
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221468
	push	edi
	push	esi
	call	_lua_setfield

; 312  : 	Method(GetPlot);

	push	0
	push	OFFSET ?lGetPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPlot
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221469
	push	edi
	push	esi
	call	_lua_setfield

; 313  : 	Method(GetArea);

	push	0
	push	OFFSET ?lGetArea@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetArea
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221470
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 314  : 	Method(GetReconPlot);

	push	0
	push	OFFSET ?lGetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetReconPlot
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221471
	push	edi
	push	esi
	call	_lua_setfield

; 315  : 	Method(SetReconPlot);

	push	0
	push	OFFSET ?lSetReconPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetReconPlot
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221472
	push	edi
	push	esi
	call	_lua_setfield

; 316  : 
; 317  : 	Method(GetGameTurnCreated);

	push	0
	push	OFFSET ?lGetGameTurnCreated@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGameTurnCreated
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221473
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 318  : 	Method(GetLastMoveTurn);

	push	0
	push	OFFSET ?lGetLastMoveTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLastMoveTurn
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221474
	push	edi
	push	esi
	call	_lua_setfield

; 319  : 
; 320  : 	Method(GetDamage);

	push	0
	push	OFFSET ?lGetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetDamage
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221475
	push	edi
	push	esi
	call	_lua_setfield

; 321  : 	Method(SetDamage);

	push	0
	push	OFFSET ?lSetDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetDamage
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221476
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 322  : 	Method(ChangeDamage);

	push	0
	push	OFFSET ?lChangeDamage@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeDamage
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221477
	push	edi
	push	esi
	call	_lua_setfield

; 323  : 	Method(GetMoves);

	push	0
	push	OFFSET ?lGetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMoves
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221478
	push	edi
	push	esi
	call	_lua_setfield

; 324  : 	Method(SetMoves);

	push	0
	push	OFFSET ?lSetMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetMoves
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221479
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 325  : 	Method(ChangeMoves);

	push	0
	push	OFFSET ?lChangeMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeMoves
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221480
	push	edi
	push	esi
	call	_lua_setfield

; 326  : 	Method(FinishMoves);

	push	0
	push	OFFSET ?lFinishMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lFinishMoves
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221481
	push	edi
	push	esi
	call	_lua_setfield

; 327  : 	Method(IsImmobile);

	push	0
	push	OFFSET ?lIsImmobile@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsImmobile
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221482
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 328  : 
; 329  : 	Method(GetExperience);

	push	0
	push	OFFSET ?lGetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExperience
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221483
	push	edi
	push	esi
	call	_lua_setfield

; 330  : 	Method(SetExperience);

	push	0
	push	OFFSET ?lSetExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetExperience
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221484
	push	edi
	push	esi
	call	_lua_setfield

; 331  : 	Method(ChangeExperience);

	push	0
	push	OFFSET ?lChangeExperience@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeExperience
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221485
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 332  : 	Method(GetLevel);

	push	0
	push	OFFSET ?lGetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLevel
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221486
	push	edi
	push	esi
	call	_lua_setfield

; 333  : 	Method(SetLevel);

	push	0
	push	OFFSET ?lSetLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetLevel
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221487
	push	edi
	push	esi
	call	_lua_setfield

; 334  : 	Method(ChangeLevel);

	push	0
	push	OFFSET ?lChangeLevel@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lChangeLevel
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221488
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 335  : 	Method(GetFacingDirection);

	push	0
	push	OFFSET ?lGetFacingDirection@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFacingDirection
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221489
	push	edi
	push	esi
	call	_lua_setfield

; 336  : 	Method(RotateFacingDirectionClockwise);

	push	0
	push	OFFSET ?lRotateFacingDirectionClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRotateFacingDirectionClockwise
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221490
	push	edi
	push	esi
	call	_lua_setfield

; 337  : 	Method(RotateFacingDirectionCounterClockwise);

	push	0
	push	OFFSET ?lRotateFacingDirectionCounterClockwise@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRotateFacingDirectionCounterClockwise
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221491
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 338  : 	Method(GetCargo);

	push	0
	push	OFFSET ?lGetCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCargo
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221492
	push	edi
	push	esi
	call	_lua_setfield

; 339  : 	Method(GetFortifyTurns);

	push	0
	push	OFFSET ?lGetFortifyTurns@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFortifyTurns
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221493
	push	edi
	push	esi
	call	_lua_setfield

; 340  : 	Method(GetBlitzCount);

	push	0
	push	OFFSET ?lGetBlitzCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetBlitzCount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221494
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 341  : 	Method(IsBlitz);

	push	0
	push	OFFSET ?lIsBlitz@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBlitz
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221495
	push	edi
	push	esi
	call	_lua_setfield

; 342  : 	Method(GetAmphibCount);

	push	0
	push	OFFSET ?lGetAmphibCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAmphibCount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221496
	push	edi
	push	esi
	call	_lua_setfield

; 343  : 	Method(IsAmphib);

	push	0
	push	OFFSET ?lIsAmphib@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsAmphib
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221497
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 344  : 	Method(GetRiverCrossingNoPenaltyCount);

	push	0
	push	OFFSET ?lGetRiverCrossingNoPenaltyCount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetRiverCrossingNoPenaltyCount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221498
	push	edi
	push	esi
	call	_lua_setfield

; 345  : 	Method(IsRiverCrossingNoPenalty);

	push	0
	push	OFFSET ?lIsRiverCrossingNoPenalty@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRiverCrossingNoPenalty
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221499
	push	edi
	push	esi
	call	_lua_setfield

; 346  : 	Method(IsEnemyRoute);

	push	0
	push	OFFSET ?lIsEnemyRoute@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyRoute
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221500
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 347  : 	Method(IsAlwaysHeal);

	push	0
	push	OFFSET ?lIsAlwaysHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsAlwaysHeal
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221501
	push	edi
	push	esi
	call	_lua_setfield

; 348  : 	Method(IsHealOutsideFriendly);

	push	0
	push	OFFSET ?lIsHealOutsideFriendly@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHealOutsideFriendly
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221502
	push	edi
	push	esi
	call	_lua_setfield

; 349  : 	Method(IsHillsDoubleMove);

	push	0
	push	OFFSET ?lIsHillsDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHillsDoubleMove
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221503
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 350  : 	Method(IsGarrisoned);

	push	0
	push	OFFSET ?lIsGarrisoned@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsGarrisoned
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221504
	push	edi
	push	esi
	call	_lua_setfield

; 351  : 	Method(GetGarrisonedCity);

	push	0
	push	OFFSET ?lGetGarrisonedCity@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGarrisonedCity
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221505
	push	edi
	push	esi
	call	_lua_setfield

; 352  : 
; 353  : 	Method(GetExtraVisibilityRange);

	push	0
	push	OFFSET ?lGetExtraVisibilityRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraVisibilityRange
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221506
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 354  : 	Method(GetExtraMoves);

	push	0
	push	OFFSET ?lGetExtraMoves@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraMoves
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221507
	push	edi
	push	esi
	call	_lua_setfield

; 355  : 	Method(GetExtraMoveDiscount);

	push	0
	push	OFFSET ?lGetExtraMoveDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraMoveDiscount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221508
	push	edi
	push	esi
	call	_lua_setfield

; 356  : 	Method(GetExtraRange);

	push	0
	push	OFFSET ?lGetExtraRange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRange
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221509
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 357  : 	Method(GetExtraIntercept);

	push	0
	push	OFFSET ?lGetExtraIntercept@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraIntercept
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221510
	push	edi
	push	esi
	call	_lua_setfield

; 358  : 	Method(GetExtraEvasion);

	push	0
	push	OFFSET ?lGetExtraEvasion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraEvasion
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221511
	push	edi
	push	esi
	call	_lua_setfield

; 359  : 	Method(GetExtraFirstStrikes);

	push	0
	push	OFFSET ?lGetExtraFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFirstStrikes
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221512
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 360  : 	Method(GetExtraChanceFirstStrikes);

	push	0
	push	OFFSET ?lGetExtraChanceFirstStrikes@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraChanceFirstStrikes
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221513
	push	edi
	push	esi
	call	_lua_setfield

; 361  : 	Method(GetExtraWithdrawal);

	push	0
	push	OFFSET ?lGetExtraWithdrawal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraWithdrawal
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221514
	push	edi
	push	esi
	call	_lua_setfield

; 362  : 	Method(GetExtraEnemyHeal);

	push	0
	push	OFFSET ?lGetExtraEnemyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraEnemyHeal
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221515
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 363  : 	Method(GetExtraNeutralHeal);

	push	0
	push	OFFSET ?lGetExtraNeutralHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraNeutralHeal
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221516
	push	edi
	push	esi
	call	_lua_setfield

; 364  : 	Method(GetExtraFriendlyHeal);

	push	0
	push	OFFSET ?lGetExtraFriendlyHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFriendlyHeal
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221517
	push	edi
	push	esi
	call	_lua_setfield

; 365  : 
; 366  : 	Method(GetSameTileHeal);

	push	0
	push	OFFSET ?lGetSameTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSameTileHeal
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221518
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 367  : 	Method(GetAdjacentTileHeal);

	push	0
	push	OFFSET ?lGetAdjacentTileHeal@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetAdjacentTileHeal
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221519
	push	edi
	push	esi
	call	_lua_setfield

; 368  : 
; 369  : 	Method(GetExtraCombatPercent);

	push	0
	push	OFFSET ?lGetExtraCombatPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCombatPercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221520
	push	edi
	push	esi
	call	_lua_setfield

; 370  : 	Method(GetFriendlyLandsModifier);

	push	0
	push	OFFSET ?lGetFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFriendlyLandsModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221521
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 371  : 	Method(GetFriendlyLandsAttackModifier);

	push	0
	push	OFFSET ?lGetFriendlyLandsAttackModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetFriendlyLandsAttackModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221522
	push	edi
	push	esi
	call	_lua_setfield

; 372  : 	Method(GetOutsideFriendlyLandsModifier);

	push	0
	push	OFFSET ?lGetOutsideFriendlyLandsModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOutsideFriendlyLandsModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221523
	push	edi
	push	esi
	call	_lua_setfield

; 373  : #ifdef NQ_GOLDEN_AGE_FOREIGN_ATTACK_BONUS
; 374  : 	Method(GetGoldenAgeForeignAttackBonus);

	push	0
	push	OFFSET ?lGetGoldenAgeForeignAttackBonus@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGoldenAgeForeignAttackBonus
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221524
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 375  : #endif
; 376  : #ifdef NQ_COMBAT_STRENGTH_NEAR_FRIENDLY_MINOR
; 377  : 	Method(GetCombatStrengthNearFriendlyMinor);

	push	0
	push	OFFSET ?lGetCombatStrengthNearFriendlyMinor@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatStrengthNearFriendlyMinor
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221525
	push	edi
	push	esi
	call	_lua_setfield

; 378  : #endif
; 379  : 	Method(GetExtraCityAttackPercent);

	push	0
	push	OFFSET ?lGetExtraCityAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCityAttackPercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221526
	push	edi
	push	esi
	call	_lua_setfield

; 380  : 	Method(GetExtraCityDefensePercent);

	push	0
	push	OFFSET ?lGetExtraCityDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraCityDefensePercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221527
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 381  : 	Method(GetExtraHillsAttackPercent);

	push	0
	push	OFFSET ?lGetExtraHillsAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraHillsAttackPercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221528
	push	edi
	push	esi
	call	_lua_setfield

; 382  : 	Method(GetExtraHillsDefensePercent);

	push	0
	push	OFFSET ?lGetExtraHillsDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraHillsDefensePercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221529
	push	edi
	push	esi
	call	_lua_setfield

; 383  : 
; 384  : 	Method(GetExtraOpenAttackPercent);

	push	0
	push	OFFSET ?lGetExtraOpenAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenAttackPercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221530
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 385  : 	Method(GetExtraOpenRangedAttackMod);

	push	0
	push	OFFSET ?lGetExtraOpenRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenRangedAttackMod
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221531
	push	edi
	push	esi
	call	_lua_setfield

; 386  : 	Method(GetExtraRoughAttackPercent);

	push	0
	push	OFFSET ?lGetExtraRoughAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRoughAttackPercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221532
	push	edi
	push	esi
	call	_lua_setfield

; 387  : 	Method(GetExtraRoughRangedAttackMod);

	push	0
	push	OFFSET ?lGetExtraRoughRangedAttackMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraRoughRangedAttackMod
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221533
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 388  : 	Method(GetExtraAttackFortifiedMod);

	push	0
	push	OFFSET ?lGetExtraAttackFortifiedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraAttackFortifiedMod
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221534
	push	edi
	push	esi
	call	_lua_setfield

; 389  : 	Method(GetExtraAttackWoundedMod);

	push	0
	push	OFFSET ?lGetExtraAttackWoundedMod@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraAttackWoundedMod
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221535
	push	edi
	push	esi
	call	_lua_setfield

; 390  : 	Method(GetExtraOpenDefensePercent);

	push	0
	push	OFFSET ?lGetExtraOpenDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraOpenDefensePercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221536
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 391  : 
; 392  : 	Method(GetPillageChange);

	push	0
	push	OFFSET ?lGetPillageChange@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetPillageChange
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221537
	push	edi
	push	esi
	call	_lua_setfield

; 393  : 	Method(GetUpgradeDiscount);

	push	0
	push	OFFSET ?lGetUpgradeDiscount@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUpgradeDiscount
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221538
	push	edi
	push	esi
	call	_lua_setfield

; 394  : 	Method(GetExperiencePercent);

	push	0
	push	OFFSET ?lGetExperiencePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExperiencePercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221539
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 395  : 	Method(GetKamikazePercent);

	push	0
	push	OFFSET ?lGetKamikazePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetKamikazePercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221540
	push	edi
	push	esi
	call	_lua_setfield

; 396  : 
; 397  : 
; 398  : 	Method(IsOutOfAttacks);

	push	0
	push	OFFSET ?lIsOutOfAttacks@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsOutOfAttacks
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221541
	push	edi
	push	esi
	call	_lua_setfield

; 399  : 	Method(SetMadeAttack);

	push	0
	push	OFFSET ?lSetMadeAttack@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetMadeAttack
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221542
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 400  : 	Method(isOutOfInterceptions);

	push	0
	push	OFFSET ?lisOutOfInterceptions@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lisOutOfInterceptions
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221543
	push	edi
	push	esi
	call	_lua_setfield

; 401  : 	Method(SetMadeInterception);

	push	0
	push	OFFSET ?lSetMadeInterception@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetMadeInterception
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221544
	push	edi
	push	esi
	call	_lua_setfield

; 402  : 
; 403  : 	Method(IsPromotionReady);

	push	0
	push	OFFSET ?lIsPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPromotionReady
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221545
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 404  : 	Method(SetPromotionReady);

	push	0
	push	OFFSET ?lSetPromotionReady@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetPromotionReady
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221546
	push	edi
	push	esi
	call	_lua_setfield

; 405  : 	Method(GetOwner);

	push	0
	push	OFFSET ?lGetOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOwner
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221547
	push	edi
	push	esi
	call	_lua_setfield

; 406  : 	Method(GetVisualOwner);

	push	0
	push	OFFSET ?lGetVisualOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetVisualOwner
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221548
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 407  : 	Method(GetCombatOwner);

	push	0
	push	OFFSET ?lGetCombatOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetCombatOwner
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221549
	push	edi
	push	esi
	call	_lua_setfield

; 408  : 	Method(GetOriginalOwner);

	push	0
	push	OFFSET ?lGetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetOriginalOwner
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221550
	push	edi
	push	esi
	call	_lua_setfield

; 409  : 	Method(SetOriginalOwner);

	push	0
	push	OFFSET ?lSetOriginalOwner@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetOriginalOwner
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221551
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 410  : 	Method(GetTeam);

	push	0
	push	OFFSET ?lGetTeam@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTeam
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221552
	push	edi
	push	esi
	call	_lua_setfield

; 411  : 	Method(GetUnitFlagIconOffset);

	push	0
	push	OFFSET ?lGetUnitFlagIconOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitFlagIconOffset
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221553
	push	edi
	push	esi
	call	_lua_setfield

; 412  : 	Method(GetUnitPortraitOffset);

	push	0
	push	OFFSET ?lGetUnitPortraitOffset@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitPortraitOffset
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221554
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 413  : 
; 414  : 	Method(GetUnitType);

	push	0
	push	OFFSET ?lGetUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221555
	push	edi
	push	esi
	call	_lua_setfield

; 415  : 	Method(GetUnitClassType);

	push	0
	push	OFFSET ?lGetUnitClassType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitClassType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221556
	push	edi
	push	esi
	call	_lua_setfield

; 416  : 	Method(GetLeaderUnitType);

	push	0
	push	OFFSET ?lGetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetLeaderUnitType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221557
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 417  : 	Method(SetLeaderUnitType);

	push	0
	push	OFFSET ?lSetLeaderUnitType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetLeaderUnitType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221558
	push	edi
	push	esi
	call	_lua_setfield

; 418  : 	Method(IsNearGreatGeneral);

	push	0
	push	OFFSET ?lIsNearGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearGreatGeneral
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221559
	push	edi
	push	esi
	call	_lua_setfield

; 419  : 	Method(IsStackedGreatGeneral);

	push	0
	push	OFFSET ?lIsStackedGreatGeneral@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsStackedGreatGeneral
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221560
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 420  : 	Method(IsIgnoreGreatGeneralBenefit);

	push	0
	push	OFFSET ?lIsIgnoreGreatGeneralBenefit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsIgnoreGreatGeneralBenefit
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221561
	push	edi
	push	esi
	call	_lua_setfield

; 421  : 	Method(GetReverseGreatGeneralModifier);

	push	0
	push	OFFSET ?lGetReverseGreatGeneralModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetReverseGreatGeneralModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221562
	push	edi
	push	esi
	call	_lua_setfield

; 422  : 	Method(GetGreatGeneralCombatModifier);

	push	0
	push	OFFSET ?lGetGreatGeneralCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGreatGeneralCombatModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221563
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 423  : 	Method(IsNearSapper);

	push	0
	push	OFFSET ?lIsNearSapper@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsNearSapper
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221564
	push	edi
	push	esi
	call	_lua_setfield

; 424  : 	Method(GetNearbyImprovementModifier);

	push	0
	push	OFFSET ?lGetNearbyImprovementModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNearbyImprovementModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221565
	push	edi
	push	esi
	call	_lua_setfield

; 425  : 	Method(IsFriendlyUnitAdjacent);

	push	0
	push	OFFSET ?lIsFriendlyUnitAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFriendlyUnitAdjacent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221566
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 426  : 	Method(GetNumEnemyUnitsAdjacent);

	push	0
	push	OFFSET ?lGetNumEnemyUnitsAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumEnemyUnitsAdjacent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221567
	push	edi
	push	esi
	call	_lua_setfield

; 427  : 	Method(IsEnemyCityAdjacent);

	push	0
	push	OFFSET ?lIsEnemyCityAdjacent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsEnemyCityAdjacent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221568
	push	edi
	push	esi
	call	_lua_setfield

; 428  : 
; 429  : 	Method(GetTransportUnit);

	push	0
	push	OFFSET ?lGetTransportUnit@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTransportUnit
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221569
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 430  : 	Method(IsCargo);

	push	0
	push	OFFSET ?lIsCargo@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsCargo
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221570
	push	edi
	push	esi
	call	_lua_setfield

; 431  : 
; 432  : 	Method(GetExtraDomainModifier);

	push	0
	push	OFFSET ?lGetExtraDomainModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraDomainModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221571
	push	edi
	push	esi
	call	_lua_setfield

; 433  : 
; 434  : 	Method(GetName);

	push	0
	push	OFFSET ?lGetName@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetName
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221572
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 435  : 	Method(GetNameNoDesc);

	push	0
	push	OFFSET ?lGetNameNoDesc@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNameNoDesc
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221573
	push	edi
	push	esi
	call	_lua_setfield

; 436  : 	Method(HasName);

	push	0
	push	OFFSET ?lHasName@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lHasName
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221574
	push	edi
	push	esi
	call	_lua_setfield

; 437  : 	Method(GetNameKey);

	push	0
	push	OFFSET ?lGetNameKey@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNameKey
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221575
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 438  : 	Method(SetName);

	push	0
	push	OFFSET ?lSetName@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetName
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221576
	push	edi
	push	esi
	call	_lua_setfield

; 439  : 	Method(IsTerrainDoubleMove);

	push	0
	push	OFFSET ?lIsTerrainDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsTerrainDoubleMove
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221577
	push	edi
	push	esi
	call	_lua_setfield

; 440  : 	Method(IsFeatureDoubleMove);

	push	0
	push	OFFSET ?lIsFeatureDoubleMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsFeatureDoubleMove
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221578
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 441  : 
; 442  : 	Method(GetScriptData);

	push	0
	push	OFFSET ?lGetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetScriptData
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221579
	push	edi
	push	esi
	call	_lua_setfield

; 443  : 	Method(SetScriptData);

	push	0
	push	OFFSET ?lSetScriptData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetScriptData
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221580
	push	edi
	push	esi
	call	_lua_setfield

; 444  : 	Method(GetScenarioData);

	push	0
	push	OFFSET ?lGetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetScenarioData
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221581
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 445  : 	Method(SetScenarioData);

	push	0
	push	OFFSET ?lSetScenarioData@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetScenarioData
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221582
	push	edi
	push	esi
	call	_lua_setfield

; 446  : 
; 447  : 	Method(GetExtraTerrainAttackPercent);

	push	0
	push	OFFSET ?lGetExtraTerrainAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraTerrainAttackPercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221583
	push	edi
	push	esi
	call	_lua_setfield

; 448  : 	Method(GetExtraTerrainDefensePercent);

	push	0
	push	OFFSET ?lGetExtraTerrainDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraTerrainDefensePercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221584
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 449  : 	Method(GetExtraFeatureAttackPercent);

	push	0
	push	OFFSET ?lGetExtraFeatureAttackPercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFeatureAttackPercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221585
	push	edi
	push	esi
	call	_lua_setfield

; 450  : 	Method(GetExtraFeatureDefensePercent);

	push	0
	push	OFFSET ?lGetExtraFeatureDefensePercent@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraFeatureDefensePercent
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221586
	push	edi
	push	esi
	call	_lua_setfield

; 451  : 	Method(GetExtraUnitCombatModifier);

	push	0
	push	OFFSET ?lGetExtraUnitCombatModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetExtraUnitCombatModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221587
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 452  : 	Method(GetUnitClassModifier);

	push	0
	push	OFFSET ?lGetUnitClassModifier@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetUnitClassModifier
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221588
	push	edi
	push	esi
	call	_lua_setfield

; 453  : 
; 454  : 	Method(CanAcquirePromotion);

	push	0
	push	OFFSET ?lCanAcquirePromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAcquirePromotion
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221589
	push	edi
	push	esi
	call	_lua_setfield

; 455  : 	Method(CanAcquirePromotionAny);

	push	0
	push	OFFSET ?lCanAcquirePromotionAny@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanAcquirePromotionAny
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221590
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 456  : 	Method(IsPromotionValid);

	push	0
	push	OFFSET ?lIsPromotionValid@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPromotionValid
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221591
	push	edi
	push	esi
	call	_lua_setfield

; 457  : 	Method(IsHasPromotion);

	push	0
	push	OFFSET ?lIsHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHasPromotion
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221592
	push	edi
	push	esi
	call	_lua_setfield

; 458  : 	Method(SetHasPromotion);

	push	0
	push	OFFSET ?lSetHasPromotion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetHasPromotion
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221593
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 459  : 
; 460  : 	Method(GetActivityType);

	push	0
	push	OFFSET ?lGetActivityType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetActivityType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221594
	push	edi
	push	esi
	call	_lua_setfield

; 461  : 	Method(IsReadyToMove);

	push	0
	push	OFFSET ?lIsReadyToMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsReadyToMove
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221595
	push	edi
	push	esi
	call	_lua_setfield

; 462  : 	Method(IsBusy);

	push	0
	push	OFFSET ?lIsBusy@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsBusy
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221596
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 463  : 
; 464  : 	Method(GetReligion);

	push	0
	push	OFFSET ?lGetReligion@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetReligion
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221597
	push	edi
	push	esi
	call	_lua_setfield

; 465  : 	Method(GetConversionStrength);

	push	0
	push	OFFSET ?lGetConversionStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetConversionStrength
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221598
	push	edi
	push	esi
	call	_lua_setfield

; 466  : 	Method(GetSpreadsLeft);

	push	0
	push	OFFSET ?lGetSpreadsLeft@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetSpreadsLeft
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221599
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 467  : 	Method(GetNumFollowersAfterSpread);

	push	0
	push	OFFSET ?lGetNumFollowersAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetNumFollowersAfterSpread
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221600
	push	edi
	push	esi
	call	_lua_setfield

; 468  : 	Method(GetMajorityReligionAfterSpread);

	push	0
	push	OFFSET ?lGetMajorityReligionAfterSpread@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetMajorityReligionAfterSpread
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221601
	push	edi
	push	esi
	call	_lua_setfield

; 469  : 
; 470  : 	Method(GetTourismBlastStrength);

	push	0
	push	OFFSET ?lGetTourismBlastStrength@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetTourismBlastStrength
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221602
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 471  : 
; 472  : 	Method(GetGreatWorkSlotType);

	push	0
	push	OFFSET ?lGetGreatWorkSlotType@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lGetGreatWorkSlotType
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221603
	push	edi
	push	esi
	call	_lua_setfield

; 473  : 
; 474  : 	// Helper Functions
; 475  : 	Method(RangeStrike);

	push	0
	push	OFFSET ?lRangeStrike@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lRangeStrike
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221604
	push	edi
	push	esi
	call	_lua_setfield

; 476  : 
; 477  : 	Method(PushMission);

	push	0
	push	OFFSET ?lPushMission@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lPushMission
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221605
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 478  : 	Method(PopMission);

	push	0
	push	OFFSET ?lPopMission@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lPopMission
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221606
	push	edi
	push	esi
	call	_lua_setfield

; 479  : 	Method(LastMissionPlot);

	push	0
	push	OFFSET ?lLastMissionPlot@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lLastMissionPlot
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221607
	push	edi
	push	esi
	call	_lua_setfield

; 480  : 	Method(CanStartMission);

	push	0
	push	OFFSET ?lCanStartMission@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lCanStartMission
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221608
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 481  : 
; 482  : 	Method(ExecuteSpecialExploreMove);

	push	0
	push	OFFSET ?lExecuteSpecialExploreMove@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lExecuteSpecialExploreMove
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221609
	push	edi
	push	esi
	call	_lua_setfield

; 483  : 
; 484  : 	Method(SetDeployFromOperationTurn);

	push	0
	push	OFFSET ?lSetDeployFromOperationTurn@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lSetDeployFromOperationTurn
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221610
	push	edi
	push	esi
	call	_lua_setfield

; 485  : 	Method(IsHigherTechThan);

	push	0
	push	OFFSET ?lIsHigherTechThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsHigherTechThan
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221611
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H

; 486  : 	Method(IsLargerCivThan);

	push	0
	push	OFFSET ?lIsLargerCivThan@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsLargerCivThan
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221612
	push	edi
	push	esi
	call	_lua_setfield

; 487  : 
; 488  : 	Method(IsRangedSupportFire);

	push	0
	push	OFFSET ?lIsRangedSupportFire@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsRangedSupportFire
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221613
	push	edi
	push	esi
	call	_lua_setfield

; 489  : #ifdef NQ_UNIT_IMMUNE_TO_PLUNDER_FROM_TRAIT
; 490  : 	Method(IsPlunderBlockedByOpposingTrait);

	push	0
	push	OFFSET ?lIsPlunderBlockedByOpposingTrait@CvLuaUnit@@KAHPAUlua_State@@@Z ; CvLuaUnit::lIsPlunderBlockedByOpposingTrait
	push	esi
	call	_lua_pushcclosure
	push	OFFSET $SG221614
	push	edi
	push	esi
	call	_lua_setfield
	add	esp, 72					; 00000048H
	pop	edi
	pop	esi

; 491  : #endif
; 492  : }

	ret	0
?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z ENDP	; CvLuaUnit::PushMethods
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\lua\cvluascopedinstance.h
_TEXT	ENDS
;	COMDAT ?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z
_TEXT	SEGMENT
_L$ = 8							; size = 4
_pkType$ = 12						; size = 4
?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z PROC ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push, COMDAT

; 39   : {

	push	edi

; 40   : 	//Pushing an instance involves more than just actually pushing a pointer into the
; 41   : 	//Lua stack.  There are some caching optimizations that are done as well as some
; 42   : 	//checks.
; 43   : 	//The first step is to load or create a global table <Typename> to store all member
; 44   : 	//methods and all pushed instances.  This conserves memory and offers faster pushing
; 45   : 	//speed.
; 46   : 	//If <Typename>.__instances[pkType] is not nil, return that value.
; 47   : 	//otherwise push a new instance and assign it to __instances.
; 48   : 
; 49   : 	//NOTE: Raw gets and sets are used as an optimization over using lua_[get,set]field
; 50   : 	if(pkType)

	mov	edi, DWORD PTR _pkType$[esp]
	test	edi, edi
	je	$LN4@Push@5
	push	ebx
	push	ebp
	push	esi

; 51   : 	{
; 52   : 		//const int t = lua_gettop(L);
; 53   : 
; 54   : 		lua_getglobal(L, Derived::GetTypeName());

	mov	esi, DWORD PTR _L$[esp+12]
	push	OFFSET $SG221617
	push	-10002					; ffffd8eeH
	push	esi
	call	_lua_getfield

; 55   : 		if(lua_isnil(L, -1))

	push	-1
	push	esi
	call	_lua_type
	add	esp, 20					; 00000014H
	test	eax, eax
	jne	$LN11@Push@5

; 56   : 		{
; 57   : 			//Typename wasn't found, time to build it.
; 58   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	push	esi
	call	_lua_settop

; 59   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 60   : 
; 61   : 			//Create weak __instances table.
; 62   : 			lua_pushstring(L, "__instances");

	push	OFFSET $SG224180
	push	esi
	call	_lua_pushstring

; 63   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 64   : 
; 65   : 			//Create __instances.mt
; 66   : 			lua_newtable(L);

	push	0
	push	0
	push	esi
	call	_lua_createtable

; 67   : 			lua_pushstring(L, "__mode");

	push	OFFSET $SG224181
	push	esi
	call	_lua_pushstring

; 68   : 			lua_pushstring(L, "v");

	push	OFFSET $SG224182
	push	esi
	call	_lua_pushstring
	add	esp, 68					; 00000044H

; 69   : 			lua_rawset(L, -3);				// mt.__mode = "v";

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 70   : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_setmetatable

; 71   : 
; 72   : 			lua_rawset(L, -3);				//type.__instances = t;

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 73   : 
; 74   : 
; 75   : 			lua_pushvalue(L, -1);

	push	-1
	push	esi
	call	_lua_pushvalue

; 76   : 			lua_setglobal(L, Derived::GetTypeName());

	push	OFFSET $SG221617
	push	-10002					; ffffd8eeH
	push	esi
	call	_lua_setfield

; 77   : 
; 78   : 			Derived::PushMethods(L, lua_gettop(L));

	push	esi
	call	_lua_gettop
	push	eax
	push	esi
	call	?PushMethods@CvLuaUnit@@SAXPAUlua_State@@H@Z ; CvLuaUnit::PushMethods
	add	esp, 56					; 00000038H
$LN11@Push@5:

; 79   : 		}
; 80   : 		const int type_index = lua_gettop(L);

	push	esi
	call	_lua_gettop

; 81   : 
; 82   : 		lua_pushstring(L, "__instances");

	push	OFFSET $SG224184
	push	esi
	mov	ebx, eax
	call	_lua_pushstring

; 83   : 		lua_rawget(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_rawget

; 84   : 
; 85   : 		const int instances_index = lua_gettop(L);

	push	esi
	call	_lua_gettop

; 86   : 
; 87   : 		lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	mov	ebp, eax
	call	_lua_pushlightuserdata

; 88   : 
; 89   : 		lua_rawget(L, -2);					//retrieve type.__instances[pkType]

	push	-2					; fffffffeH
	push	esi
	call	_lua_rawget

; 90   : 
; 91   : 		if(lua_isnil(L, -1))

	push	-1
	push	esi
	call	_lua_type
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	SHORT $LN2@Push@5

; 92   : 		{
; 93   : 			lua_pop(L, 1);

	push	-2					; fffffffeH
	push	esi
	call	_lua_settop

; 94   : 
; 95   : 			//Push new instance
; 96   : 			lua_createtable(L, 0, 1);

	push	1
	push	0
	push	esi
	call	_lua_createtable

; 97   : 			lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	call	_lua_pushlightuserdata

; 98   : 			lua_setfield(L, -2, "__instance");

	push	OFFSET $SG224187
	push	-2					; fffffffeH
	push	esi
	call	_lua_setfield

; 99   : 
; 100  : 			lua_createtable(L, 0, 1);			// create mt

	push	1
	push	0
	push	esi
	call	_lua_createtable

; 101  : 			lua_pushstring(L, "__index");

	push	OFFSET $SG224188
	push	esi
	call	_lua_pushstring

; 102  : 			lua_pushvalue(L, type_index);

	push	ebx
	push	esi
	call	_lua_pushvalue
	add	esp, 68					; 00000044H

; 103  : 			lua_rawset(L, -3);					// mt.__index = Type

	push	-3					; fffffffdH
	push	esi
	call	_lua_rawset

; 104  : 			lua_setmetatable(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_setmetatable

; 105  : 
; 106  : 			//Assign it in instances
; 107  : 			lua_pushlightuserdata(L, pkType);

	push	edi
	push	esi
	call	_lua_pushlightuserdata

; 108  : 			lua_pushvalue(L, -2);

	push	-2					; fffffffeH
	push	esi
	call	_lua_pushvalue

; 109  : 			lua_rawset(L, instances_index);				//__instances[pkType] = t;

	push	ebp
	push	esi
	call	_lua_rawset
	add	esp, 40					; 00000028H
$LN2@Push@5:

; 110  : 		}
; 111  : 
; 112  : 		//VERIFY(instances_index > type_index);
; 113  : 		lua_remove(L, instances_index);

	push	ebp
	push	esi
	call	_lua_remove

; 114  : 		lua_remove(L, type_index);

	push	ebx
	push	esi
	call	_lua_remove
	add	esp, 16					; 00000010H
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi

; 122  : 	}
; 123  : }

	ret	0
$LN4@Push@5:

; 115  : 
; 116  : 		//const int dt = lua_gettop(L);
; 117  : 		//VERIFY(dt == t + 1)
; 118  : 	}
; 119  : 	else
; 120  : 	{
; 121  : 		lua_pushnil(L);

	mov	eax, DWORD PTR _L$[esp]
	push	eax
	call	_lua_pushnil
	add	esp, 4
	pop	edi

; 122  : 	}
; 123  : }

	ret	0
?Push@?$CvLuaScopedInstance@VCvLuaUnit@@VCvUnit@@@@SAXPAUlua_State@@PAVCvUnit@@@Z ENDP ; CvLuaScopedInstance<CvLuaUnit,CvUnit>::Push
_TEXT	ENDS
END
