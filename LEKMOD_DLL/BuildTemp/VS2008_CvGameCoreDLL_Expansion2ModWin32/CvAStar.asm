; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Desktop\Cleanup (v1)\Lekmod Files\Lekmod DLL versions\v30\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvAStar.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
CONST	SEGMENT
$SG219413 DB	'.\CvAStar.cpp', 00H
	ORG $+2
$SG219419 DB	'.\CvAStar.cpp', 00H
	ORG $+2
$SG220560 DB	'Game Turn, Player, Unit, From X, From Y, To X, To Y, Inf'
	DB	'o, Checksum', 00H
$SG220561 DB	'AStar_GC.log', 00H
	ORG $+3
$SG220562 DB	'AStar_APP.log', 00H
	ORG $+2
$SG220563 DB	'?', 00H
	ORG $+2
$SG220564 DB	'%03d, %s, UnitID: %d, ', 00H
	ORG $+1
$SG220586 DB	'%d, %d, %d, %d, %d, %8x', 00H
CONST	ENDS
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	?wrapCoordDifference@@YAHHI_N@Z			; wrapCoordDifference
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?wrapCoordDifference@@YAHHI_N@Z
_TEXT	SEGMENT
_iDiff$ = 8						; size = 4
_uiRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?wrapCoordDifference@@YAHHI_N@Z PROC			; wrapCoordDifference, COMDAT

; 57   : 	if(bWrap)

	cmp	BYTE PTR _bWrap$[esp-4], 0
	mov	eax, DWORD PTR _iDiff$[esp-4]
	je	SHORT $LN5@wrapCoordD

; 58   : 	{
; 59   : 		if(iDiff > (int)(uiRange >> 1))		// Using an unsigned int so we can safely assume that value >> 1 == value / 2

	mov	edx, DWORD PTR _uiRange$[esp-4]
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN3@wrapCoordD

; 60   : 		{
; 61   : 			return (iDiff - (int)uiRange);

	sub	eax, edx

; 66   : 		}
; 67   : 	}
; 68   : 
; 69   : 	return iDiff;
; 70   : }

	ret	0
$LN3@wrapCoordD:

; 62   : 		}
; 63   : 		else if(iDiff < -(int)(uiRange >> 1))

	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN5@wrapCoordD

; 64   : 		{
; 65   : 			return (iDiff + (int)uiRange);

	add	eax, edx
$LN5@wrapCoordD:

; 66   : 		}
; 67   : 	}
; 68   : 
; 69   : 	return iDiff;
; 70   : }

	ret	0
?wrapCoordDifference@@YAHHI_N@Z ENDP			; wrapCoordDifference
_TEXT	ENDS
PUBLIC	?xToHexspaceX@@YAHHH@Z				; xToHexspaceX
; Function compile flags: /Ogtpy
;	COMDAT ?xToHexspaceX@@YAHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?xToHexspaceX@@YAHHH@Z PROC				; xToHexspaceX, COMDAT

; 86   : 	return iX - ((iY >= 0) ? (iY>>1) : ((iY - 1)/2));

	mov	ecx, DWORD PTR _iY$[esp-4]
	test	ecx, ecx
	jge	SHORT $LN5@xToHexspac
	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
	mov	ecx, eax
$LN5@xToHexspac:
	mov	eax, DWORD PTR _iX$[esp-4]
	sar	ecx, 1
	sub	eax, ecx

; 87   : }

	ret	0
?xToHexspaceX@@YAHHH@Z ENDP				; xToHexspaceX
_TEXT	ENDS
PUBLIC	??0CvAStar@@QAE@XZ				; CvAStar::CvAStar
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
;	COMDAT ??0CvAStar@@QAE@XZ
_TEXT	SEGMENT
??0CvAStar@@QAE@XZ PROC					; CvAStar::CvAStar, COMDAT
; _this$ = ecx

; 103  : {

	mov	eax, ecx

; 104  : 	udIsPathDest = NULL;

	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx

; 105  : 	udDestValid = NULL;

	mov	DWORD PTR [eax+4], ecx

; 106  : 	udHeuristic = NULL;

	mov	DWORD PTR [eax+8], ecx

; 107  : 	udCost = NULL;

	mov	DWORD PTR [eax+12], ecx

; 108  : 	udValid = NULL;

	mov	DWORD PTR [eax+16], ecx

; 109  : 	udNotifyChild = NULL;

	mov	DWORD PTR [eax+20], ecx

; 110  : 	udNotifyList = NULL;

	mov	DWORD PTR [eax+24], ecx

; 111  : 	udNumExtraChildrenFunc = NULL;

	mov	DWORD PTR [eax+28], ecx

; 112  : 	udGetExtraChildFunc = NULL;

	mov	DWORD PTR [eax+32], ecx

; 113  : 	udInitializeFunc = NULL;

	mov	DWORD PTR [eax+36], ecx

; 114  : 	udUninitializeFunc = NULL;

	mov	DWORD PTR [eax+40], ecx

; 115  : 
; 116  : 	m_pData = NULL;

	mov	DWORD PTR [eax+44], ecx

; 117  : 
; 118  : 	m_pOpen = NULL;

	mov	DWORD PTR [eax+84], ecx

; 119  : 	m_pOpenTail = NULL;

	mov	DWORD PTR [eax+88], ecx

; 120  : 	m_pClosed = NULL;

	mov	DWORD PTR [eax+92], ecx

; 121  : 	m_pBest = NULL;

	mov	DWORD PTR [eax+96], ecx

; 122  : 	m_pStackHead = NULL;

	mov	DWORD PTR [eax+100], ecx

; 123  : 
; 124  : 	m_ppaaNodes = NULL;

	mov	DWORD PTR [eax+104], ecx

; 125  : 
; 126  : 	m_bIsMPCacheSafe = false;

	mov	BYTE PTR [eax+79], cl

; 127  : 	m_bDataChangeInvalidatesCache = false;

	mov	BYTE PTR [eax+80], cl

; 128  : #ifdef AUI_WARNING_FIXES
; 129  : #ifdef AUI_ASTAR_TURN_LIMITER
; 130  : 	m_iMaxTurns = 0;
; 131  : #endif
; 132  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 133  : 	m_bIsMultiplayer = false;
; 134  : #endif
; 135  : #endif
; 136  : }

	ret	0
??0CvAStar@@QAE@XZ ENDP					; CvAStar::CvAStar
_TEXT	ENDS
PUBLIC	?DeInit@CvAStar@@QAEXXZ				; CvAStar::DeInit
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
;	COMDAT ?DeInit@CvAStar@@QAEXXZ
_TEXT	SEGMENT
?DeInit@CvAStar@@QAEXXZ PROC				; CvAStar::DeInit, COMDAT
; _this$ = ecx

; 148  : {

	push	esi
	mov	esi, ecx

; 149  : 	if(m_ppaaNodes != NULL)

	cmp	DWORD PTR [esi+104], 0
	je	SHORT $LN4@DeInit
	push	edi

; 150  : 	{
; 151  : 		for(int iI = 0; iI < m_iColumns; iI++)

	xor	edi, edi
	cmp	DWORD PTR [esi+48], edi
	jle	SHORT $LN1@DeInit
$LL3@DeInit:

; 152  : 		{
; 153  : #ifdef AUI_ASTAR_REMOVE_MALLOC
; 154  : 			SAFE_DELETE_ARRAY(m_ppaaNodes[iI]);
; 155  : 		}
; 156  : 
; 157  : 		SAFE_DELETE_ARRAY(m_ppaaNodes);
; 158  : #else
; 159  : 			FFREEALIGNED(m_ppaaNodes[iI]);

	mov	eax, DWORD PTR [esi+104]
	mov	ecx, DWORD PTR [eax+edi*4]
	push	ecx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	inc	edi
	add	esp, 4
	cmp	edi, DWORD PTR [esi+48]
	jl	SHORT $LL3@DeInit
$LN1@DeInit:

; 160  : 		}
; 161  : 
; 162  : 		FFREEALIGNED(m_ppaaNodes);

	mov	edx, DWORD PTR [esi+104]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4

; 163  : 		m_ppaaNodes=0;

	mov	DWORD PTR [esi+104], 0
	pop	edi
$LN4@DeInit:
	pop	esi

; 164  : #endif
; 165  : 	}
; 166  : }

	ret	0
?DeInit@CvAStar@@QAEXXZ ENDP				; CvAStar::DeInit
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?UpdateOpenNode@CvAStar@@IAEXPAVCvAStarNode@@@Z	; CvAStar::UpdateOpenNode
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
;	COMDAT ?UpdateOpenNode@CvAStar@@IAEXPAVCvAStarNode@@@Z
_TEXT	SEGMENT
_node$ = 8						; size = 4
?UpdateOpenNode@CvAStar@@IAEXPAVCvAStarNode@@@Z PROC	; CvAStar::UpdateOpenNode, COMDAT
; _this$ = ecx

; 852  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 853  : 	CvAStarNode* temp = node->m_pPrev;
; 854  : #else
; 855  : 	CvAStarNode* temp;
; 856  : #endif
; 857  : 
; 858  : 	FAssert(node->m_eCvAStarListType == CVASTARLIST_OPEN);
; 859  : 
; 860  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 861  : 	if (temp && (node->m_iTotalCost < temp->m_iTotalCost))
; 862  : 	{
; 863  : 		// have node free float for now
; 864  : 		temp->m_pNext = node->m_pNext;
; 865  : 		if (node->m_pNext)
; 866  : 		{
; 867  : 			node->m_pNext->m_pPrev = temp;
; 868  : 		}
; 869  : 		else
; 870  : 		{
; 871  : 			m_pOpenTail = temp;
; 872  : 		}
; 873  : #else
; 874  : 	if((node->m_pPrev != NULL) && (node->m_iTotalCost < node->m_pPrev->m_iTotalCost))

	mov	eax, DWORD PTR _node$[esp-4]
	mov	edx, DWORD PTR [eax+32]
	test	edx, edx
	je	SHORT $LN2@UpdateOpen
	push	esi
	mov	esi, DWORD PTR [eax]
	cmp	esi, DWORD PTR [edx]
	jge	SHORT $LN14@UpdateOpen

; 875  : 	{
; 876  : 		// have node free float for now
; 877  : 		node->m_pPrev->m_pNext = node->m_pNext;

	mov	esi, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], esi

; 878  : 		if(node->m_pNext)

	mov	edx, DWORD PTR [eax+28]
	test	edx, edx
	je	SHORT $LN8@UpdateOpen

; 879  : 		{
; 880  : 			node->m_pNext->m_pPrev = node->m_pPrev;

	mov	esi, DWORD PTR [eax+32]
	mov	DWORD PTR [edx+32], esi

; 881  : 		}
; 882  : 		else

	jmp	SHORT $LN7@UpdateOpen
$LN8@UpdateOpen:

; 883  : 		{
; 884  : 			m_pOpenTail = node->m_pPrev;

	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+88], edx
$LN7@UpdateOpen:

; 885  : 		}
; 886  : #endif
; 887  : 		// scoot down the list till we find where node goes (without connecting up as we go)
; 888  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 889  : 		temp = node->m_pPrev;

	mov	edx, DWORD PTR [eax+32]

; 890  : #endif
; 891  : 		while((temp != NULL) && (node->m_iTotalCost < temp->m_iTotalCost))

	test	edx, edx
	je	SHORT $LN4@UpdateOpen
	mov	esi, DWORD PTR [eax]
$LL6@UpdateOpen:
	cmp	esi, DWORD PTR [edx]
	jge	SHORT $LN5@UpdateOpen

; 892  : 		{
; 893  : 			temp = temp->m_pPrev;

	mov	edx, DWORD PTR [edx+32]
	test	edx, edx
	jne	SHORT $LL6@UpdateOpen
$LN4@UpdateOpen:

; 905  : 		}
; 906  : 		else
; 907  : 		{
; 908  : 			node->m_pNext = m_pOpen;

	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+28], edx

; 909  : 			node->m_pPrev = NULL;

	mov	DWORD PTR [eax+32], 0

; 910  : 			if(node->m_pNext)

	test	edx, edx
	je	SHORT $LN1@UpdateOpen

; 911  : 			{
; 912  : 				node->m_pNext->m_pPrev = node;

	mov	DWORD PTR [edx+32], eax
$LN1@UpdateOpen:

; 913  : 			}
; 914  : 			m_pOpen = node;

	mov	DWORD PTR [ecx+84], eax
$LN14@UpdateOpen:
	pop	esi
$LN2@UpdateOpen:

; 915  : 		}
; 916  : 	}
; 917  : }

	ret	4
$LN5@UpdateOpen:

; 894  : 		}
; 895  : 		// connect node up
; 896  : 		if(temp != NULL)
; 897  : 		{
; 898  : 			node->m_pNext = temp->m_pNext;

	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+28], ecx

; 899  : 			node->m_pPrev = temp;

	mov	DWORD PTR [eax+32], edx

; 900  : 			if(temp->m_pNext)

	mov	ecx, DWORD PTR [edx+28]
	test	ecx, ecx
	je	SHORT $LN3@UpdateOpen

; 901  : 			{
; 902  : 				temp->m_pNext->m_pPrev = node;

	mov	DWORD PTR [ecx+32], eax
$LN3@UpdateOpen:

; 903  : 			}
; 904  : 			temp->m_pNext = node;

	mov	DWORD PTR [edx+28], eax
	pop	esi

; 915  : 		}
; 916  : 	}
; 917  : }

	ret	4
?UpdateOpenNode@CvAStar@@IAEXPAVCvAStarNode@@@Z ENDP	; CvAStar::UpdateOpenNode
_TEXT	ENDS
PUBLIC	?Push@CvAStar@@IAEXPAVCvAStarNode@@@Z		; CvAStar::Push
; Function compile flags: /Ogtpy
;	COMDAT ?Push@CvAStar@@IAEXPAVCvAStarNode@@@Z
_TEXT	SEGMENT
_node$ = 8						; size = 4
?Push@CvAStar@@IAEXPAVCvAStarNode@@@Z PROC		; CvAStar::Push, COMDAT
; _this$ = ecx

; 985  : 	if(node->m_bOnStack)

	mov	eax, DWORD PTR _node$[esp-4]
	cmp	BYTE PTR [eax+86], 0
	jne	SHORT $LN4@Push

; 986  : 	{
; 987  : 		return;
; 988  : 	}
; 989  : 
; 990  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 991  : 	if(m_pStackHead == NULL)

	mov	edx, DWORD PTR [ecx+100]
	test	edx, edx
	jne	SHORT $LN2@Push

; 992  : 	{
; 993  : 		m_pStackHead = &(m_ppaaNodes[node->m_iX][node->m_iY]);

	movsx	edx, WORD PTR [eax+82]
	push	esi
	movsx	esi, WORD PTR [eax+80]
	push	edi
	mov	edi, DWORD PTR [ecx+104]
	lea	edx, DWORD PTR [edx+edx*2]
	shl	edx, 5
	add	edx, DWORD PTR [edi+esi*4]
	pop	edi
	mov	DWORD PTR [ecx+100], edx
	pop	esi

; 1001 : 	}
; 1002 : 
; 1003 : 	node->m_bOnStack = true;

	mov	BYTE PTR [eax+86], 1

; 1004 : }

	ret	4
$LN2@Push:

; 994  : 	}
; 995  : 	else
; 996  : #endif
; 997  : 	{
; 998  : 		FAssert(node->m_pStack == NULL);
; 999  : 		node->m_pStack = m_pStackHead;

	mov	DWORD PTR [eax+36], edx

; 1000 : 		m_pStackHead = node;

	mov	DWORD PTR [ecx+100], eax

; 1001 : 	}
; 1002 : 
; 1003 : 	node->m_bOnStack = true;

	mov	BYTE PTR [eax+86], 1
$LN4@Push:

; 1004 : }

	ret	4
?Push@CvAStar@@IAEXPAVCvAStarNode@@@Z ENDP		; CvAStar::Push
_TEXT	ENDS
PUBLIC	?Pop@CvAStar@@IAEPAVCvAStarNode@@XZ		; CvAStar::Pop
; Function compile flags: /Ogtpy
;	COMDAT ?Pop@CvAStar@@IAEPAVCvAStarNode@@XZ
_TEXT	SEGMENT
?Pop@CvAStar@@IAEPAVCvAStarNode@@XZ PROC		; CvAStar::Pop, COMDAT
; _this$ = ecx

; 1010 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 1011 : 	CvAStarNode* node;
; 1012 : #endif
; 1013 : 
; 1014 : 	if(m_pStackHead == NULL)

	mov	eax, DWORD PTR [ecx+100]
	xor	edx, edx
	cmp	eax, edx
	jne	SHORT $LN1@Pop

; 1015 : 	{
; 1016 : 		return NULL;

	xor	eax, eax

; 1028 : 
; 1029 : 	return node;
; 1030 : }

	ret	0
$LN1@Pop:
	push	esi

; 1017 : 	}
; 1018 : 
; 1019 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1020 : 	CvAStarNode* node = m_pStackHead;
; 1021 : #else
; 1022 : 	node = m_pStackHead;
; 1023 : #endif
; 1024 : 	m_pStackHead = m_pStackHead->m_pStack;

	mov	esi, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+100], esi

; 1025 : 	node->m_pStack = NULL;

	mov	DWORD PTR [eax+36], edx

; 1026 : 
; 1027 : 	node->m_bOnStack = false;

	mov	BYTE PTR [eax+86], dl
	pop	esi

; 1028 : 
; 1029 : 	return node;
; 1030 : }

	ret	0
?Pop@CvAStar@@IAEPAVCvAStarNode@@XZ ENDP		; CvAStar::Pop
_TEXT	ENDS
PUBLIC	?baseMoves@UnitPathCacheData@@QBEHW4DomainTypes@@@Z ; UnitPathCacheData::baseMoves
; Function compile flags: /Ogtpy
;	COMDAT ?baseMoves@UnitPathCacheData@@QBEHW4DomainTypes@@@Z
_TEXT	SEGMENT
_eType$ = 8						; size = 4
?baseMoves@UnitPathCacheData@@QBEHW4DomainTypes@@@Z PROC ; UnitPathCacheData::baseMoves, COMDAT
; _this$ = ecx

; 1051 : 	inline int baseMoves(DomainTypes eType) const { return m_aBaseMoves[eType]; }

	mov	eax, DWORD PTR _eType$[esp-4]
	mov	eax, DWORD PTR [ecx+eax*4]
	ret	4
?baseMoves@UnitPathCacheData@@QBEHW4DomainTypes@@@Z ENDP ; UnitPathCacheData::baseMoves
_TEXT	ENDS
PUBLIC	?maxMoves@UnitPathCacheData@@QBEHXZ		; UnitPathCacheData::maxMoves
; Function compile flags: /Ogtpy
;	COMDAT ?maxMoves@UnitPathCacheData@@QBEHXZ
_TEXT	SEGMENT
?maxMoves@UnitPathCacheData@@QBEHXZ PROC		; UnitPathCacheData::maxMoves, COMDAT
; _this$ = ecx

; 1052 : 	inline int maxMoves() const { return m_iMaxMoves; }

	mov	eax, DWORD PTR [ecx+20]
	ret	0
?maxMoves@UnitPathCacheData@@QBEHXZ ENDP		; UnitPathCacheData::maxMoves
_TEXT	ENDS
PUBLIC	?getOwner@UnitPathCacheData@@QBE?AW4PlayerTypes@@XZ ; UnitPathCacheData::getOwner
; Function compile flags: /Ogtpy
;	COMDAT ?getOwner@UnitPathCacheData@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@UnitPathCacheData@@QBE?AW4PlayerTypes@@XZ PROC ; UnitPathCacheData::getOwner, COMDAT
; _this$ = ecx

; 1053 : 	inline PlayerTypes getOwner() const { return m_ePlayerID; }

	mov	eax, DWORD PTR [ecx+24]
	ret	0
?getOwner@UnitPathCacheData@@QBE?AW4PlayerTypes@@XZ ENDP ; UnitPathCacheData::getOwner
_TEXT	ENDS
PUBLIC	?getTeam@UnitPathCacheData@@QBE?AW4TeamTypes@@XZ ; UnitPathCacheData::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@UnitPathCacheData@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@UnitPathCacheData@@QBE?AW4TeamTypes@@XZ PROC	; UnitPathCacheData::getTeam, COMDAT
; _this$ = ecx

; 1054 : 	inline TeamTypes getTeam() const { return m_eTeamID; }

	mov	eax, DWORD PTR [ecx+28]
	ret	0
?getTeam@UnitPathCacheData@@QBE?AW4TeamTypes@@XZ ENDP	; UnitPathCacheData::getTeam
_TEXT	ENDS
PUBLIC	?getDomainType@UnitPathCacheData@@QBE?AW4DomainTypes@@XZ ; UnitPathCacheData::getDomainType
; Function compile flags: /Ogtpy
;	COMDAT ?getDomainType@UnitPathCacheData@@QBE?AW4DomainTypes@@XZ
_TEXT	SEGMENT
?getDomainType@UnitPathCacheData@@QBE?AW4DomainTypes@@XZ PROC ; UnitPathCacheData::getDomainType, COMDAT
; _this$ = ecx

; 1055 : 	inline DomainTypes getDomainType() const { return m_eDomainType; }

	mov	eax, DWORD PTR [ecx+32]
	ret	0
?getDomainType@UnitPathCacheData@@QBE?AW4DomainTypes@@XZ ENDP ; UnitPathCacheData::getDomainType
_TEXT	ENDS
PUBLIC	?isHuman@UnitPathCacheData@@QBE_NXZ		; UnitPathCacheData::isHuman
; Function compile flags: /Ogtpy
;	COMDAT ?isHuman@UnitPathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?isHuman@UnitPathCacheData@@QBE_NXZ PROC		; UnitPathCacheData::isHuman, COMDAT
; _this$ = ecx

; 1056 : 	inline bool isHuman() const { return m_bIsHuman; }

	mov	al, BYTE PTR [ecx+36]
	ret	0
?isHuman@UnitPathCacheData@@QBE_NXZ ENDP		; UnitPathCacheData::isHuman
_TEXT	ENDS
PUBLIC	?IsAutomated@UnitPathCacheData@@QBE_NXZ		; UnitPathCacheData::IsAutomated
; Function compile flags: /Ogtpy
;	COMDAT ?IsAutomated@UnitPathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?IsAutomated@UnitPathCacheData@@QBE_NXZ PROC		; UnitPathCacheData::IsAutomated, COMDAT
; _this$ = ecx

; 1057 : 	inline bool IsAutomated() const { return m_bIsAutomated; }

	mov	al, BYTE PTR [ecx+37]
	ret	0
?IsAutomated@UnitPathCacheData@@QBE_NXZ ENDP		; UnitPathCacheData::IsAutomated
_TEXT	ENDS
PUBLIC	?IsImmobile@UnitPathCacheData@@QBE_NXZ		; UnitPathCacheData::IsImmobile
; Function compile flags: /Ogtpy
;	COMDAT ?IsImmobile@UnitPathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?IsImmobile@UnitPathCacheData@@QBE_NXZ PROC		; UnitPathCacheData::IsImmobile, COMDAT
; _this$ = ecx

; 1058 : 	inline bool IsImmobile() const { return m_bIsImmobile; }

	mov	al, BYTE PTR [ecx+38]
	ret	0
?IsImmobile@UnitPathCacheData@@QBE_NXZ ENDP		; UnitPathCacheData::IsImmobile
_TEXT	ENDS
PUBLIC	?isNoRevealMap@UnitPathCacheData@@QBE_NXZ	; UnitPathCacheData::isNoRevealMap
; Function compile flags: /Ogtpy
;	COMDAT ?isNoRevealMap@UnitPathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?isNoRevealMap@UnitPathCacheData@@QBE_NXZ PROC		; UnitPathCacheData::isNoRevealMap, COMDAT
; _this$ = ecx

; 1059 : 	inline bool isNoRevealMap() const { return m_bIsNoRevealMap; }

	mov	al, BYTE PTR [ecx+39]
	ret	0
?isNoRevealMap@UnitPathCacheData@@QBE_NXZ ENDP		; UnitPathCacheData::isNoRevealMap
_TEXT	ENDS
PUBLIC	?isEmbarked@UnitPathCacheData@@QBE_NXZ		; UnitPathCacheData::isEmbarked
; Function compile flags: /Ogtpy
;	COMDAT ?isEmbarked@UnitPathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?isEmbarked@UnitPathCacheData@@QBE_NXZ PROC		; UnitPathCacheData::isEmbarked, COMDAT
; _this$ = ecx

; 1061 : 	inline bool isEmbarked() const { return m_bIsEmbarked; }

	mov	al, BYTE PTR [ecx+41]
	ret	0
?isEmbarked@UnitPathCacheData@@QBE_NXZ ENDP		; UnitPathCacheData::isEmbarked
_TEXT	ENDS
PUBLIC	?IsCanAttack@UnitPathCacheData@@QBE_NXZ		; UnitPathCacheData::IsCanAttack
; Function compile flags: /Ogtpy
;	COMDAT ?IsCanAttack@UnitPathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?IsCanAttack@UnitPathCacheData@@QBE_NXZ PROC		; UnitPathCacheData::IsCanAttack, COMDAT
; _this$ = ecx

; 1062 : 	inline bool IsCanAttack() const { return m_bCanAttack; }

	mov	al, BYTE PTR [ecx+42]
	ret	0
?IsCanAttack@UnitPathCacheData@@QBE_NXZ ENDP		; UnitPathCacheData::IsCanAttack
_TEXT	ENDS
PUBLIC	?UnitPathUninitialize@@YAXPBXPAVCvAStar@@@Z	; UnitPathUninitialize
; Function compile flags: /Ogtpy
;	COMDAT ?UnitPathUninitialize@@YAXPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_pointer$ = 8						; size = 4
_finder$ = 12						; size = 4
?UnitPathUninitialize@@YAXPBXPAVCvAStar@@@Z PROC	; UnitPathUninitialize, COMDAT

; 1104 : 
; 1105 : }

	ret	0
?UnitPathUninitialize@@YAXPBXPAVCvAStar@@@Z ENDP	; UnitPathUninitialize
_TEXT	ENDS
PUBLIC	?StepCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; StepCost
; Function compile flags: /Ogtpy
;	COMDAT ?StepCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?StepCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; StepCost, COMDAT

; 3115 : 	return 1;

	mov	eax, 1

; 3116 : }

	ret	0
?StepCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; StepCost
_TEXT	ENDS
PUBLIC	?StepAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; StepAdd
; Function compile flags: /Ogtpy
;	COMDAT ?StepAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?StepAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; StepAdd, COMDAT

; 3260 : 	if(data == ASNC_INITIALADD)

	cmp	DWORD PTR _data$[esp-4], 0

; 3261 : 	{
; 3262 : 		node->m_iData1 = 0;

	mov	eax, DWORD PTR _node$[esp-4]
	jne	SHORT $LN2@StepAdd
	mov	DWORD PTR [eax+12], 0

; 3267 : 	}
; 3268 : 
; 3269 : 	FAssertMsg(node->m_iData1 >= 0, "node->m_iData1 is expected to be non-negative (invalid Index)");
; 3270 : 
; 3271 : 	return 1;

	mov	eax, 1

; 3272 : }

	ret	0
$LN2@StepAdd:

; 3263 : 	}
; 3264 : 	else
; 3265 : 	{
; 3266 : 		node->m_iData1 = (parent->m_iData1 + 1);

	mov	ecx, DWORD PTR _parent$[esp-4]
	mov	edx, DWORD PTR [ecx+12]
	inc	edx
	mov	DWORD PTR [eax+12], edx

; 3267 : 	}
; 3268 : 
; 3269 : 	FAssertMsg(node->m_iData1 >= 0, "node->m_iData1 is expected to be non-negative (invalid Index)");
; 3270 : 
; 3271 : 	return 1;

	mov	eax, 1

; 3272 : }

	ret	0
?StepAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; StepAdd
_TEXT	ENDS
PUBLIC	?InfluenceAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; InfluenceAdd
; Function compile flags: /Ogtpy
;	COMDAT ?InfluenceAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?InfluenceAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; InfluenceAdd, COMDAT

; 3424 : 	if(data == ASNC_INITIALADD)

	cmp	DWORD PTR _data$[esp-4], 0

; 3425 : 	{
; 3426 : 		node->m_iData1 = 0;

	mov	eax, DWORD PTR _node$[esp-4]
	jne	SHORT $LN2@InfluenceA
	mov	DWORD PTR [eax+12], 0

; 3431 : 	}
; 3432 : 
; 3433 : 	FAssertMsg(node->m_iData1 >= 0, "node->m_iData1 is expected to be non-negative (invalid Index)");
; 3434 : 
; 3435 : 	return 1;

	mov	eax, 1

; 3436 : }

	ret	0
$LN2@InfluenceA:

; 3427 : 	}
; 3428 : 	else
; 3429 : 	{
; 3430 : 		node->m_iData1 = (parent->m_iData1 + 1/*influenceCost(parent,node,data,pointer,finder)*/);

	mov	ecx, DWORD PTR _parent$[esp-4]
	mov	edx, DWORD PTR [ecx+12]
	inc	edx
	mov	DWORD PTR [eax+12], edx

; 3431 : 	}
; 3432 : 
; 3433 : 	FAssertMsg(node->m_iData1 >= 0, "node->m_iData1 is expected to be non-negative (invalid Index)");
; 3434 : 
; 3435 : 	return 1;

	mov	eax, 1

; 3436 : }

	ret	0
?InfluenceAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; InfluenceAdd
_TEXT	ENDS
PUBLIC	?GetPartialMoveNode@CvTwoLayerPathFinder@@QAEPAVCvAStarNode@@HH@Z ; CvTwoLayerPathFinder::GetPartialMoveNode
; Function compile flags: /Ogtpy
;	COMDAT ?GetPartialMoveNode@CvTwoLayerPathFinder@@QAEPAVCvAStarNode@@HH@Z
_TEXT	SEGMENT
_iCol$ = 8						; size = 4
_iRow$ = 12						; size = 4
?GetPartialMoveNode@CvTwoLayerPathFinder@@QAEPAVCvAStarNode@@HH@Z PROC ; CvTwoLayerPathFinder::GetPartialMoveNode, COMDAT
; _this$ = ecx

; 4057 : 	return &(m_ppaaPartialMoveNodes[iCol][iRow]);

	mov	eax, DWORD PTR _iRow$[esp-4]
	mov	ecx, DWORD PTR [ecx+628]
	mov	edx, DWORD PTR _iCol$[esp-4]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 5
	add	eax, DWORD PTR [ecx+edx*4]

; 4058 : }

	ret	8
?GetPartialMoveNode@CvTwoLayerPathFinder@@QAEPAVCvAStarNode@@HH@Z ENDP ; CvTwoLayerPathFinder::GetPartialMoveNode
_TEXT	ENDS
PUBLIC	?getTeam@TradePathCacheData@@QBEAAVCvTeam@@XZ	; TradePathCacheData::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@TradePathCacheData@@QBEAAVCvTeam@@XZ
_TEXT	SEGMENT
?getTeam@TradePathCacheData@@QBEAAVCvTeam@@XZ PROC	; TradePathCacheData::getTeam, COMDAT
; _this$ = ecx

; 5691 : 	inline CvTeam& getTeam() const { return *m_pTeam; }

	mov	eax, DWORD PTR [ecx]
	ret	0
?getTeam@TradePathCacheData@@QBEAAVCvTeam@@XZ ENDP	; TradePathCacheData::getTeam
_TEXT	ENDS
PUBLIC	?CanEmbarkAllWaterPassage@TradePathCacheData@@QBE_NXZ ; TradePathCacheData::CanEmbarkAllWaterPassage
; Function compile flags: /Ogtpy
;	COMDAT ?CanEmbarkAllWaterPassage@TradePathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?CanEmbarkAllWaterPassage@TradePathCacheData@@QBE_NXZ PROC ; TradePathCacheData::CanEmbarkAllWaterPassage, COMDAT
; _this$ = ecx

; 5692 : 	inline bool CanEmbarkAllWaterPassage() const { return m_bCanEmbarkAllWaterPassage; }

	mov	al, BYTE PTR [ecx+4]
	ret	0
?CanEmbarkAllWaterPassage@TradePathCacheData@@QBE_NXZ ENDP ; TradePathCacheData::CanEmbarkAllWaterPassage
_TEXT	ENDS
PUBLIC	?IsRiverTradeRoad@TradePathCacheData@@QBE_NXZ	; TradePathCacheData::IsRiverTradeRoad
; Function compile flags: /Ogtpy
;	COMDAT ?IsRiverTradeRoad@TradePathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?IsRiverTradeRoad@TradePathCacheData@@QBE_NXZ PROC	; TradePathCacheData::IsRiverTradeRoad, COMDAT
; _this$ = ecx

; 5693 : 	inline bool IsRiverTradeRoad() const { return m_bIsRiverTradeRoad; }

	mov	al, BYTE PTR [ecx+5]
	ret	0
?IsRiverTradeRoad@TradePathCacheData@@QBE_NXZ ENDP	; TradePathCacheData::IsRiverTradeRoad
_TEXT	ENDS
PUBLIC	?IsMoveFriendlyWoodsAsRoad@TradePathCacheData@@QBE_NXZ ; TradePathCacheData::IsMoveFriendlyWoodsAsRoad
; Function compile flags: /Ogtpy
;	COMDAT ?IsMoveFriendlyWoodsAsRoad@TradePathCacheData@@QBE_NXZ
_TEXT	SEGMENT
?IsMoveFriendlyWoodsAsRoad@TradePathCacheData@@QBE_NXZ PROC ; TradePathCacheData::IsMoveFriendlyWoodsAsRoad, COMDAT
; _this$ = ecx

; 5694 : 	inline bool IsMoveFriendlyWoodsAsRoad() const { return m_bIsMoveFriendlyWoodsAsRoad; }

	mov	al, BYTE PTR [ecx+6]
	ret	0
?IsMoveFriendlyWoodsAsRoad@TradePathCacheData@@QBE_NXZ ENDP ; TradePathCacheData::IsMoveFriendlyWoodsAsRoad
_TEXT	ENDS
PUBLIC	?TradePathUninitialize@@YAXPBXPAVCvAStar@@@Z	; TradePathUninitialize
; Function compile flags: /Ogtpy
;	COMDAT ?TradePathUninitialize@@YAXPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_pointer$ = 8						; size = 4
_finder$ = 12						; size = 4
?TradePathUninitialize@@YAXPBXPAVCvAStar@@@Z PROC	; TradePathUninitialize, COMDAT

; 5734 : 
; 5735 : }

	ret	0
?TradePathUninitialize@@YAXPBXPAVCvAStar@@@Z ENDP	; TradePathUninitialize
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@H$00@@QBEIXZ			; BaseVector<int,1>::size
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?size@?$BaseVector@H$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@H$00@@QBEIXZ PROC			; BaseVector<int,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@H$00@@QBEIXZ ENDP			; BaseVector<int,1>::size
_TEXT	ENDS
PUBLIC	??A?$BaseVector@PAVCvAStarNode@@$00@@QAEAAPAVCvAStarNode@@I@Z ; BaseVector<CvAStarNode *,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@PAVCvAStarNode@@$00@@QAEAAPAVCvAStarNode@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@PAVCvAStarNode@@$00@@QAEAAPAVCvAStarNode@@I@Z PROC ; BaseVector<CvAStarNode *,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 131  : 	};

	ret	4
??A?$BaseVector@PAVCvAStarNode@@$00@@QAEAAPAVCvAStarNode@@I@Z ENDP ; BaseVector<CvAStarNode *,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@VCvPathNode@@$00@@QAEAAVCvPathNode@@I@Z ; BaseVector<CvPathNode,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@VCvPathNode@@$00@@QAEAAVCvPathNode@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@VCvPathNode@@$00@@QAEAAVCvPathNode@@I@Z PROC ; BaseVector<CvPathNode,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 131  : 	};

	ret	4
??A?$BaseVector@VCvPathNode@@$00@@QAEAAVCvPathNode@@I@Z ENDP ; BaseVector<CvPathNode,1>::operator[]
_TEXT	ENDS
PUBLIC	?at@?$BaseVector@VCvPathNode@@$00@@QAEAAVCvPathNode@@I@Z ; BaseVector<CvPathNode,1>::at
; Function compile flags: /Ogtpy
;	COMDAT ?at@?$BaseVector@VCvPathNode@@$00@@QAEAAVCvPathNode@@I@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?at@?$BaseVector@VCvPathNode@@$00@@QAEAAVCvPathNode@@I@Z PROC ; BaseVector<CvPathNode,1>::at, COMDAT
; _this$ = ecx

; 145  : 	    FAssert(i < m_uiCurrSize);
; 146  : 		return m_pData[i];

	mov	eax, DWORD PTR _i$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 147  :     };

	ret	4
?at@?$BaseVector@VCvPathNode@@$00@@QAEAAVCvPathNode@@I@Z ENDP ; BaseVector<CvPathNode,1>::at
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@VCvPathNode@@$00@@QBEIXZ	; BaseVector<CvPathNode,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@VCvPathNode@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@VCvPathNode@@$00@@QBEIXZ PROC	; BaseVector<CvPathNode,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@VCvPathNode@@$00@@QBEIXZ ENDP	; BaseVector<CvPathNode,1>::size
_TEXT	ENDS
PUBLIC	?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ ; FObjectHandle<CvUnit>::pointer
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
;	COMDAT ?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ
_TEXT	SEGMENT
?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ PROC ; FObjectHandle<CvUnit>::pointer, COMDAT
; _this$ = ecx

; 78   : 		return m_target;

	mov	eax, DWORD PTR [ecx]

; 79   : 	}

	ret	0
?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ ENDP ; FObjectHandle<CvUnit>::pointer
_TEXT	ENDS
PUBLIC	??C?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ	; FObjectHandle<CvUnit>::operator->
; Function compile flags: /Ogtpy
;	COMDAT ??C?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ
_TEXT	SEGMENT
??C?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ PROC	; FObjectHandle<CvUnit>::operator->, COMDAT
; _this$ = ecx

; 88   : 		return m_target;

	mov	eax, DWORD PTR [ecx]

; 89   : 	}

	ret	0
??C?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ ENDP	; FObjectHandle<CvUnit>::operator->
_TEXT	ENDS
PUBLIC	??B?$FObjectHandle@VCvUnit@@@@QBE_NXZ		; FObjectHandle<CvUnit>::operator bool
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FObjectHandle@VCvUnit@@@@QBE_NXZ
_TEXT	SEGMENT
??B?$FObjectHandle@VCvUnit@@@@QBE_NXZ PROC		; FObjectHandle<CvUnit>::operator bool, COMDAT
; _this$ = ecx

; 108  : 		return m_target != 0;

	xor	eax, eax
	cmp	DWORD PTR [ecx], eax
	setne	al

; 109  : 	}

	ret	0
??B?$FObjectHandle@VCvUnit@@@@QBE_NXZ ENDP		; FObjectHandle<CvUnit>::operator bool
_TEXT	ENDS
PUBLIC	??0?$auto_ptr@VICvPlot1@@@std@@QAE@U?$auto_ptr_ref@VICvPlot1@@@1@@Z ; std::auto_ptr<ICvPlot1>::auto_ptr<ICvPlot1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??0?$auto_ptr@VICvPlot1@@@std@@QAE@U?$auto_ptr_ref@VICvPlot1@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$auto_ptr@VICvPlot1@@@std@@QAE@U?$auto_ptr_ref@VICvPlot1@@@1@@Z PROC ; std::auto_ptr<ICvPlot1>::auto_ptr<ICvPlot1>, COMDAT
; _this$ = ecx

; 669  : 	auto_ptr(auto_ptr_ref<_Ty> _Right) _THROW0()

	mov	eax, ecx

; 670  : 		{	// construct by assuming pointer from _Right auto_ptr_ref
; 671  : 		_Ty *_Ptr = _Right._Ref;
; 672  : 		_Right._Ref = 0;	// release old
; 673  : 		_Myptr = _Ptr;	// reset this

	mov	ecx, DWORD PTR __Right$[esp-4]
	mov	DWORD PTR [eax], ecx

; 674  : 		}

	ret	4
??0?$auto_ptr@VICvPlot1@@@std@@QAE@U?$auto_ptr_ref@VICvPlot1@@@1@@Z ENDP ; std::auto_ptr<ICvPlot1>::auto_ptr<ICvPlot1>
_TEXT	ENDS
PUBLIC	?get@?$auto_ptr@VICvPlot1@@@std@@QBEPAVICvPlot1@@XZ ; std::auto_ptr<ICvPlot1>::get
; Function compile flags: /Ogtpy
;	COMDAT ?get@?$auto_ptr@VICvPlot1@@@std@@QBEPAVICvPlot1@@XZ
_TEXT	SEGMENT
?get@?$auto_ptr@VICvPlot1@@@std@@QBEPAVICvPlot1@@XZ PROC ; std::auto_ptr<ICvPlot1>::get, COMDAT
; _this$ = ecx

; 750  : 		return (_Myptr);

	mov	eax, DWORD PTR [ecx]

; 751  : 		}

	ret	0
?get@?$auto_ptr@VICvPlot1@@@std@@QBEPAVICvPlot1@@XZ ENDP ; std::auto_ptr<ICvPlot1>::get
_TEXT	ENDS
PUBLIC	??0?$auto_ptr@VICvUnit1@@@std@@QAE@PAVICvUnit1@@@Z ; std::auto_ptr<ICvUnit1>::auto_ptr<ICvUnit1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$auto_ptr@VICvUnit1@@@std@@QAE@PAVICvUnit1@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$auto_ptr@VICvUnit1@@@std@@QAE@PAVICvUnit1@@@Z PROC	; std::auto_ptr<ICvUnit1>::auto_ptr<ICvUnit1>, COMDAT
; _this$ = ecx

; 661  : 		{	// construct from object pointer

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 662  : 		}

	ret	4
??0?$auto_ptr@VICvUnit1@@@std@@QAE@PAVICvUnit1@@@Z ENDP	; std::auto_ptr<ICvUnit1>::auto_ptr<ICvUnit1>
_TEXT	ENDS
PUBLIC	?get@?$auto_ptr@VICvUnit1@@@std@@QBEPAVICvUnit1@@XZ ; std::auto_ptr<ICvUnit1>::get
; Function compile flags: /Ogtpy
;	COMDAT ?get@?$auto_ptr@VICvUnit1@@@std@@QBEPAVICvUnit1@@XZ
_TEXT	SEGMENT
?get@?$auto_ptr@VICvUnit1@@@std@@QBEPAVICvUnit1@@XZ PROC ; std::auto_ptr<ICvUnit1>::get, COMDAT
; _this$ = ecx

; 750  : 		return (_Myptr);

	mov	eax, DWORD PTR [ecx]

; 751  : 		}

	ret	0
?get@?$auto_ptr@VICvUnit1@@@std@@QBEPAVICvUnit1@@XZ ENDP ; std::auto_ptr<ICvUnit1>::get
_TEXT	ENDS
PUBLIC	?addTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ; DestructionNotification<FObjectHandle<CvUnit> >::addTarget
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
;	COMDAT ?addTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
?addTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z PROC ; DestructionNotification<FObjectHandle<CvUnit> >::addTarget, COMDAT
; _this$ = ecx

; 52   : #ifdef TRACK_DESTRUCTION_NOTIFICATION
; 53   : 		m_targets.insert(&target);
; 54   : #endif
; 55   : 	}

	ret	4
?addTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ENDP ; DestructionNotification<FObjectHandle<CvUnit> >::addTarget
_TEXT	ENDS
PUBLIC	?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget
; Function compile flags: /Ogtpy
;	COMDAT ?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z PROC ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget, COMDAT
; _this$ = ecx

; 63   : #ifdef TRACK_DESTRUCTION_NOTIFICATION
; 64   : 		m_targets.erase(&target);
; 65   : #endif
; 66   : 	}

	ret	4
?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ENDP ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@VCvPathNode@@$00@@IAEXPAVCvPathNode@@I@Z ; BaseVector<CvPathNode,1>::Destroy
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Destroy@?$BaseVector@VCvPathNode@@$00@@IAEXPAVCvPathNode@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@VCvPathNode@@$00@@IAEXPAVCvPathNode@@I@Z PROC ; BaseVector<CvPathNode,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@VCvPathNode@@$00@@IAEXPAVCvPathNode@@I@Z ENDP ; BaseVector<CvPathNode,1>::Destroy
_TEXT	ENDS
PUBLIC	??_C@_0IJ@DONJGAGH@c?3?2users?2enormousapplepie?2deskto@ ; `string'
PUBLIC	?AllocAligned@FDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@SAPAXIIII@Z ; BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator::AllocAligned
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0IJ@DONJGAGH@c?3?2users?2enormousapplepie?2deskto@
CONST	SEGMENT
??_C@_0IJ@DONJGAGH@c?3?2users?2enormousapplepie?2deskto@ DB 'c:\users\eno'
	DB	'rmousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll ve'
	DB	'rsions\v30\lekmod_dll\fireplace\include\fireworks\FFastVector'
	DB	'.h', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?AllocAligned@FDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@SAPAXIIII@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
_nAlign$ = 12						; size = 4
_nAllocPool$ = 16					; size = 4
_nAllocSubID$ = 20					; size = 4
?AllocAligned@FDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@SAPAXIIII@Z PROC ; BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator::AllocAligned, COMDAT

; 85   : 			return FMALLOCALIGNED( nBytes, nAlign, nAllocPool, nAllocSubID );

	mov	DWORD PTR _nAllocSubID$[esp-4], 85	; 00000055H
	mov	DWORD PTR _nAllocPool$[esp-4], OFFSET ??_C@_0IJ@DONJGAGH@c?3?2users?2enormousapplepie?2deskto@
	jmp	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
?AllocAligned@FDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@SAPAXIIII@Z ENDP ; BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator::AllocAligned
_TEXT	ENDS
PUBLIC	?FreeAligned@FDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@SAXPAX@Z ; BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator::FreeAligned
; Function compile flags: /Ogtpy
;	COMDAT ?FreeAligned@FDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@SAXPAX@Z
_TEXT	SEGMENT
_pBlock$ = 8						; size = 4
?FreeAligned@FDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@SAXPAX@Z PROC ; BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator::FreeAligned, COMDAT

; 90   : 			FFREEALIGNED( pBlock );

	jmp	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
?FreeAligned@FDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@SAXPAX@Z ENDP ; BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator::FreeAligned
_TEXT	ENDS
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 3384 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN4@max
	mov	eax, ecx
$LN4@max:

; 3385 : 	}

	ret	0
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
PUBLIC	??$min@H@std@@YAABHABH0@Z			; std::min<int>
; Function compile flags: /Ogtpy
;	COMDAT ??$min@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YAABHABH0@Z PROC				; std::min<int>, COMDAT

; 3399 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Left$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN4@min
	mov	eax, ecx
$LN4@min:

; 3400 : 	}

	ret	0
??$min@H@std@@YAABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
PUBLIC	??$SAFE_DELETE_ARRAY@PAVCvAStarNode@@@@YAXAAPAPAVCvAStarNode@@@Z ; SAFE_DELETE_ARRAY<CvAStarNode *>
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffiretypes.h
;	COMDAT ??$SAFE_DELETE_ARRAY@PAVCvAStarNode@@@@YAXAAPAPAVCvAStarNode@@@Z
_TEXT	SEGMENT
_pkInstanceArray$ = 8					; size = 4
??$SAFE_DELETE_ARRAY@PAVCvAStarNode@@@@YAXAAPAPAVCvAStarNode@@@Z PROC ; SAFE_DELETE_ARRAY<CvAStarNode *>, COMDAT

; 311  : {

	push	esi

; 312  : 	delete[] pkInstanceArray;

	mov	esi, DWORD PTR _pkInstanceArray$[esp]
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 313  : 	pkInstanceArray = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 314  : };

	ret	0
??$SAFE_DELETE_ARRAY@PAVCvAStarNode@@@@YAXAAPAPAVCvAStarNode@@@Z ENDP ; SAFE_DELETE_ARRAY<CvAStarNode *>
_TEXT	ENDS
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 3399 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Left$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN4@min@2
	mov	eax, ecx
$LN4@min@2:

; 3400 : 	}

	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
PUBLIC	??0?$auto_ptr_ref@VICvPlot1@@@std@@QAE@PAVICvPlot1@@@Z ; std::auto_ptr_ref<ICvPlot1>::auto_ptr_ref<ICvPlot1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??0?$auto_ptr_ref@VICvPlot1@@@std@@QAE@PAVICvPlot1@@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$auto_ptr_ref@VICvPlot1@@@std@@QAE@PAVICvPlot1@@@Z PROC ; std::auto_ptr_ref<ICvPlot1>::auto_ptr_ref<ICvPlot1>, COMDAT
; _this$ = ecx

; 647  : 		{	// construct from generic pointer to auto_ptr ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Right$[esp-4]
	mov	DWORD PTR [eax], ecx

; 648  : 		}

	ret	4
??0?$auto_ptr_ref@VICvPlot1@@@std@@QAE@PAVICvPlot1@@@Z ENDP ; std::auto_ptr_ref<ICvPlot1>::auto_ptr_ref<ICvPlot1>
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??BCvString@@QBEPBDXZ				; CvString::operator char const *
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??BCvString@@QBEPBDXZ
_TEXT	SEGMENT
??BCvString@@QBEPBDXZ PROC				; CvString::operator char const *, COMDAT
; _this$ = ecx

; 31   : 	operator const char*() const 	{ return c_str(); }												

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
??BCvString@@QBEPBDXZ ENDP				; CvString::operator char const *
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CvString::operator=, COMDAT
; _this$ = ecx

; 38   : 	CvString& operator=( const std::string& s) { assign(s.c_str());	return *this; }	

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _s$[esp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CvString::operator=
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
_buf$ = -2048						; size = 2048
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	sub	esp, 2048				; 00000800H
	push	ebx
	push	ebp

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	mov	ebp, DWORD PTR _args$[esp+2052]
	push	esi
	push	edi
	lea	edi, DWORD PTR _buf$[esp+2064]
	mov	esi, 2047				; 000007ffH
	npad	6
$LL10@formatv:

; 194  : 	int len = 0;
; 195  : 	int attempts = 0;
; 196  : 	bool success = false;
; 197  : 	const int kMaxAttempts = 40;
; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;
; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	eax, DWORD PTR _fmt$[esp+2060]
	push	ebp
	push	eax
	push	esi
	push	edi
	mov	ebx, esi
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H

; 203  : 		attempts++;

	add	esi, 2048				; 00000800H

; 204  : 		success = (len>=0 && len<=maxlen);

	test	eax, eax
	jl	SHORT $LN13@formatv
	cmp	eax, ebx
	jle	SHORT $LN18@formatv
$LN13@formatv:

; 205  : 		if (!success)
; 206  : 		{
; 207  : 			if (pbuf!=buf)

	lea	ecx, DWORD PTR _buf$[esp+2064]
	xor	bl, bl
	cmp	edi, ecx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	lea	edx, DWORD PTR [esi+1]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	cmp	esi, 83967				; 000147ffH
	mov	edi, eax
	jl	SHORT $LL10@formatv

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@formatv:
	mov	ecx, DWORD PTR _out$[esp+2064]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 223  : 
; 224  : 	if (pbuf!=buf)

	lea	eax, DWORD PTR _buf$[esp+2064]
	cmp	edi, eax
	je	SHORT $LN20@formatv

; 225  : 		delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN20@formatv:
	pop	edi
	pop	esi
	pop	ebp

; 226  : 
; 227  : 	return success;

	mov	al, bl
	pop	ebx

; 228  : }

	add	esp, 2048				; 00000800H
	ret	0
$LN18@formatv:

; 204  : 		success = (len>=0 && len<=maxlen);

	mov	bl, 1

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)
; 220  : 		out = pbuf;

	push	edi

; 221  : 	else

	jmp	SHORT $LN21@formatv
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);
; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _lpszFormat$[esp+36]
	lea	eax, DWORD PTR _lpszFormat$[esp+40]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _result$[esp+48]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+60], 0
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);
; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR _this$[esp+36]
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	lea	ecx, DWORD PTR _result$[esp+40]
	mov	DWORD PTR __$EHRec$[esp+48], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??3ICvUnknown@@SGXPAX@Z				; ICvUnknown::operator delete
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
;	COMDAT ??3ICvUnknown@@SGXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3ICvUnknown@@SGXPAX@Z PROC				; ICvUnknown::operator delete, COMDAT

; 310  : 		if (p)

	mov	eax, DWORD PTR _p$[esp-4]
	test	eax, eax
	je	SHORT $LN1@operator

; 311  : 		{
; 312  : 			ICvUnknown* inst = (ICvUnknown*)(p);
; 313  : 			inst->Destroy();

	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _p$[esp-4], eax
	jmp	edx
$LN1@operator:

; 314  : 		}
; 315  : 	}

	ret	4
??3ICvUnknown@@SGXPAX@Z ENDP				; ICvUnknown::operator delete
_TEXT	ENDS
PUBLIC	??4CvPathNode@@QAEAAV0@ABVCvAStarNode@@@Z	; CvPathNode::operator=
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastarnode.h
;	COMDAT ??4CvPathNode@@QAEAAV0@ABVCvAStarNode@@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??4CvPathNode@@QAEAAV0@ABVCvAStarNode@@@Z PROC		; CvPathNode::operator=, COMDAT
; _this$ = ecx

; 267  : 	{

	mov	eax, ecx

; 268  : 		m_iX = rhs.m_iX;

	mov	ecx, DWORD PTR _rhs$[esp-4]
	movzx	edx, WORD PTR [ecx+80]
	mov	WORD PTR [eax+12], dx

; 269  : 		m_iY = rhs.m_iY;

	movzx	edx, WORD PTR [ecx+82]
	mov	WORD PTR [eax+14], dx

; 270  : 		m_iData1 = rhs.m_iData1;

	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx

; 271  : 		m_iData2 = rhs.m_iData2;

	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+4], ecx

; 272  : 		m_iFlags = 0;

	mov	DWORD PTR [eax+8], 0

; 273  : 		return *this;
; 274  : 	}

	ret	4
??4CvPathNode@@QAEAAV0@ABVCvAStarNode@@@Z ENDP		; CvPathNode::operator=
_TEXT	ENDS
PUBLIC	?getMap@CvGlobals@@QAEAAVCvMap@@XZ		; CvGlobals::getMap
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getMap@CvGlobals@@QAEAAVCvMap@@XZ
_TEXT	SEGMENT
?getMap@CvGlobals@@QAEAAVCvMap@@XZ PROC			; CvGlobals::getMap, COMDAT
; _this$ = ecx

; 175  : 		return *m_map;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+52]

; 176  : 	}

	ret	0
?getMap@CvGlobals@@QAEAAVCvMap@@XZ ENDP			; CvGlobals::getMap
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	?getMOVE_DENOMINATOR@CvGlobals@@QAEHXZ		; CvGlobals::getMOVE_DENOMINATOR
; Function compile flags: /Ogtpy
;	COMDAT ?getMOVE_DENOMINATOR@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMOVE_DENOMINATOR@CvGlobals@@QAEHXZ PROC		; CvGlobals::getMOVE_DENOMINATOR, COMDAT
; _this$ = ecx

; 5312 : 		return m_iMOVE_DENOMINATOR;

	mov	eax, DWORD PTR [ecx+6236]

; 5313 : 	}

	ret	0
?getMOVE_DENOMINATOR@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getMOVE_DENOMINATOR
_TEXT	ENDS
PUBLIC	?getPATH_DAMAGE_WEIGHT@CvGlobals@@QAEHXZ	; CvGlobals::getPATH_DAMAGE_WEIGHT
; Function compile flags: /Ogtpy
;	COMDAT ?getPATH_DAMAGE_WEIGHT@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getPATH_DAMAGE_WEIGHT@CvGlobals@@QAEHXZ PROC		; CvGlobals::getPATH_DAMAGE_WEIGHT, COMDAT
; _this$ = ecx

; 6020 : 		return m_iPATH_DAMAGE_WEIGHT;

	mov	eax, DWORD PTR [ecx+6944]

; 6021 : 	}

	ret	0
?getPATH_DAMAGE_WEIGHT@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getPATH_DAMAGE_WEIGHT
_TEXT	ENDS
PUBLIC	?getINFLUENCE_MOUNTAIN_COST@CvGlobals@@QAEHXZ	; CvGlobals::getINFLUENCE_MOUNTAIN_COST
; Function compile flags: /Ogtpy
;	COMDAT ?getINFLUENCE_MOUNTAIN_COST@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getINFLUENCE_MOUNTAIN_COST@CvGlobals@@QAEHXZ PROC	; CvGlobals::getINFLUENCE_MOUNTAIN_COST, COMDAT
; _this$ = ecx

; 6076 : 		return m_iINFLUENCE_MOUNTAIN_COST;

	mov	eax, DWORD PTR [ecx+7000]

; 6077 : 	}

	ret	0
?getINFLUENCE_MOUNTAIN_COST@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getINFLUENCE_MOUNTAIN_COST
_TEXT	ENDS
PUBLIC	?getINFLUENCE_HILL_COST@CvGlobals@@QAEHXZ	; CvGlobals::getINFLUENCE_HILL_COST
; Function compile flags: /Ogtpy
;	COMDAT ?getINFLUENCE_HILL_COST@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getINFLUENCE_HILL_COST@CvGlobals@@QAEHXZ PROC		; CvGlobals::getINFLUENCE_HILL_COST, COMDAT
; _this$ = ecx

; 6080 : 		return m_iINFLUENCE_HILL_COST;

	mov	eax, DWORD PTR [ecx+7004]

; 6081 : 	}

	ret	0
?getINFLUENCE_HILL_COST@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getINFLUENCE_HILL_COST
_TEXT	ENDS
PUBLIC	?getINFLUENCE_RIVER_COST@CvGlobals@@QAEHXZ	; CvGlobals::getINFLUENCE_RIVER_COST
; Function compile flags: /Ogtpy
;	COMDAT ?getINFLUENCE_RIVER_COST@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getINFLUENCE_RIVER_COST@CvGlobals@@QAEHXZ PROC		; CvGlobals::getINFLUENCE_RIVER_COST, COMDAT
; _this$ = ecx

; 6084 : 		return m_iINFLUENCE_RIVER_COST;

	mov	eax, DWORD PTR [ecx+7008]

; 6085 : 	}

	ret	0
?getINFLUENCE_RIVER_COST@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getINFLUENCE_RIVER_COST
_TEXT	ENDS
PUBLIC	?getUSE_FIRST_RING_INFLUENCE_TERRAIN_COST@CvGlobals@@QAEHXZ ; CvGlobals::getUSE_FIRST_RING_INFLUENCE_TERRAIN_COST
; Function compile flags: /Ogtpy
;	COMDAT ?getUSE_FIRST_RING_INFLUENCE_TERRAIN_COST@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getUSE_FIRST_RING_INFLUENCE_TERRAIN_COST@CvGlobals@@QAEHXZ PROC ; CvGlobals::getUSE_FIRST_RING_INFLUENCE_TERRAIN_COST, COMDAT
; _this$ = ecx

; 6088 : 		return m_iUSE_FIRST_RING_INFLUENCE_TERRAIN_COST;

	mov	eax, DWORD PTR [ecx+7012]

; 6089 : 	}

	ret	0
?getUSE_FIRST_RING_INFLUENCE_TERRAIN_COST@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getUSE_FIRST_RING_INFLUENCE_TERRAIN_COST
_TEXT	ENDS
PUBLIC	?getPLOT_UNIT_LIMIT@CvGlobals@@QAEHXZ		; CvGlobals::getPLOT_UNIT_LIMIT
; Function compile flags: /Ogtpy
;	COMDAT ?getPLOT_UNIT_LIMIT@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getPLOT_UNIT_LIMIT@CvGlobals@@QAEHXZ PROC		; CvGlobals::getPLOT_UNIT_LIMIT, COMDAT
; _this$ = ecx

; 6485 : 		return m_iPLOT_UNIT_LIMIT;

	mov	eax, DWORD PTR [ecx+7356]

; 6486 : 	}

	ret	0
?getPLOT_UNIT_LIMIT@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getPLOT_UNIT_LIMIT
_TEXT	ENDS
PUBLIC	?getMAX_HIT_POINTS@CvGlobals@@QAEHXZ		; CvGlobals::getMAX_HIT_POINTS
; Function compile flags: /Ogtpy
;	COMDAT ?getMAX_HIT_POINTS@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMAX_HIT_POINTS@CvGlobals@@QAEHXZ PROC		; CvGlobals::getMAX_HIT_POINTS, COMDAT
; _this$ = ecx

; 6497 : 		return m_iMAX_HIT_POINTS;

	mov	eax, DWORD PTR [ecx+7368]

; 6498 : 	}

	ret	0
?getMAX_HIT_POINTS@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getMAX_HIT_POINTS
_TEXT	ENDS
PUBLIC	?getRIVER_ATTACK_MODIFIER@CvGlobals@@QAEHXZ	; CvGlobals::getRIVER_ATTACK_MODIFIER
; Function compile flags: /Ogtpy
;	COMDAT ?getRIVER_ATTACK_MODIFIER@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getRIVER_ATTACK_MODIFIER@CvGlobals@@QAEHXZ PROC	; CvGlobals::getRIVER_ATTACK_MODIFIER, COMDAT
; _this$ = ecx

; 6517 : 		return m_iRIVER_ATTACK_MODIFIER;

	mov	eax, DWORD PTR [ecx+7388]

; 6518 : 	}

	ret	0
?getRIVER_ATTACK_MODIFIER@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getRIVER_ATTACK_MODIFIER
_TEXT	ENDS
PUBLIC	?getSHALLOW_WATER_TERRAIN@CvGlobals@@QAEHXZ	; CvGlobals::getSHALLOW_WATER_TERRAIN
; Function compile flags: /Ogtpy
;	COMDAT ?getSHALLOW_WATER_TERRAIN@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getSHALLOW_WATER_TERRAIN@CvGlobals@@QAEHXZ PROC	; CvGlobals::getSHALLOW_WATER_TERRAIN, COMDAT
; _this$ = ecx

; 7179 : 		return m_iSHALLOW_WATER_TERRAIN;

	mov	eax, DWORD PTR [ecx+8396]

; 7180 : 	}

	ret	0
?getSHALLOW_WATER_TERRAIN@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getSHALLOW_WATER_TERRAIN
_TEXT	ENDS
PUBLIC	?getPROMOTION_UNWELCOME_EVANGELIST@CvGlobals@@QAEHXZ ; CvGlobals::getPROMOTION_UNWELCOME_EVANGELIST
; Function compile flags: /Ogtpy
;	COMDAT ?getPROMOTION_UNWELCOME_EVANGELIST@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getPROMOTION_UNWELCOME_EVANGELIST@CvGlobals@@QAEHXZ PROC ; CvGlobals::getPROMOTION_UNWELCOME_EVANGELIST, COMDAT
; _this$ = ecx

; 7331 : 		return m_iPROMOTION_UNWELCOME_EVANGELIST;

	mov	eax, DWORD PTR [ecx+8560]

; 7332 : 	}

	ret	0
?getPROMOTION_UNWELCOME_EVANGELIST@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getPROMOTION_UNWELCOME_EVANGELIST
_TEXT	ENDS
PUBLIC	?getDLLIFace@CvGlobals@@QAEPAVICvEngineUtility4@@XZ ; CvGlobals::getDLLIFace
; Function compile flags: /Ogtpy
;	COMDAT ?getDLLIFace@CvGlobals@@QAEPAVICvEngineUtility4@@XZ
_TEXT	SEGMENT
?getDLLIFace@CvGlobals@@QAEPAVICvEngineUtility4@@XZ PROC ; CvGlobals::getDLLIFace, COMDAT
; _this$ = ecx

; 7703 : 		return m_pDLL;

	mov	eax, DWORD PTR [ecx+8564]

; 7704 : 	}

	ret	0
?getDLLIFace@CvGlobals@@QAEPAVICvEngineUtility4@@XZ ENDP ; CvGlobals::getDLLIFace
_TEXT	ENDS
PUBLIC	?GetEngineUserInterface@CvGlobals@@QAEPAVICvUserInterface2@@XZ ; CvGlobals::GetEngineUserInterface
; Function compile flags: /Ogtpy
;	COMDAT ?GetEngineUserInterface@CvGlobals@@QAEPAVICvUserInterface2@@XZ
_TEXT	SEGMENT
?GetEngineUserInterface@CvGlobals@@QAEPAVICvUserInterface2@@XZ PROC ; CvGlobals::GetEngineUserInterface, COMDAT
; _this$ = ecx

; 7713 : 		return m_pEngineUI;

	mov	eax, DWORD PTR [ecx+8568]

; 7714 : 	}

	ret	0
?GetEngineUserInterface@CvGlobals@@QAEPAVICvUserInterface2@@XZ ENDP ; CvGlobals::GetEngineUserInterface
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	?GetID@CvArea@@QBEHXZ				; CvArea::GetID
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvarea.h
;	COMDAT ?GetID@CvArea@@QBEHXZ
_TEXT	SEGMENT
?GetID@CvArea@@QBEHXZ PROC				; CvArea::GetID, COMDAT
; _this$ = ecx

; 54   : 		return m_iID;

	mov	eax, DWORD PTR [ecx+4]

; 55   : 	}

	ret	0
?GetID@CvArea@@QBEHXZ ENDP				; CvArea::GetID
_TEXT	ENDS
PUBLIC	?isAdjacentToLand_Cached@CvPlot@@QBE_NXZ	; CvPlot::isAdjacentToLand_Cached
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?isAdjacentToLand_Cached@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isAdjacentToLand_Cached@CvPlot@@QBE_NXZ PROC		; CvPlot::isAdjacentToLand_Cached, COMDAT
; _this$ = ecx

; 120  : 	bool isAdjacentToLand_Cached() const { return m_bIsAdjacentToLand; }

	mov	al, BYTE PTR [ecx+462]
	shr	al, 6
	and	al, 1
	ret	0
?isAdjacentToLand_Cached@CvPlot@@QBE_NXZ ENDP		; CvPlot::isAdjacentToLand_Cached
_TEXT	ENDS
PUBLIC	?isCity@CvPlot@@QBE_NXZ				; CvPlot::isCity
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Ogtpy
;	COMDAT ?isCity@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isCity@CvPlot@@QBE_NXZ PROC				; CvPlot::isCity, COMDAT
; _this$ = ecx

; 245  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN1@isCity
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@isCity

; 246  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID)) != NULL;

	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	neg	eax
	sbb	eax, eax
	neg	eax

; 249  : 	}

	ret	0
$LN1@isCity:

; 247  : 
; 248  : 		return false;

	xor	al, al

; 249  : 	}

	ret	0
?isCity@CvPlot@@QBE_NXZ ENDP				; CvPlot::isCity
_TEXT	ENDS
PUBLIC	?getX@CvPlot@@QBEHXZ				; CvPlot::getX
; Function compile flags: /Ogtpy
;	COMDAT ?getX@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getX@CvPlot@@QBEHXZ PROC				; CvPlot::getX, COMDAT
; _this$ = ecx

; 307  : 		return m_iX;

	movsx	eax, WORD PTR [ecx]

; 308  : 	}

	ret	0
?getX@CvPlot@@QBEHXZ ENDP				; CvPlot::getX
_TEXT	ENDS
PUBLIC	?getY@CvPlot@@QBEHXZ				; CvPlot::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getY@CvPlot@@QBEHXZ PROC				; CvPlot::getY, COMDAT
; _this$ = ecx

; 312  : 		return m_iY;

	movsx	eax, WORD PTR [ecx+2]

; 313  : 	}

	ret	0
?getY@CvPlot@@QBEHXZ ENDP				; CvPlot::getY
_TEXT	ENDS
PUBLIC	?getArea@CvPlot@@QBEHXZ				; CvPlot::getArea
; Function compile flags: /Ogtpy
;	COMDAT ?getArea@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getArea@CvPlot@@QBEHXZ PROC				; CvPlot::getArea, COMDAT
; _this$ = ecx

; 324  : 		return m_iArea;

	mov	eax, DWORD PTR [ecx+356]

; 325  : 	}

	ret	0
?getArea@CvPlot@@QBEHXZ ENDP				; CvPlot::getArea
_TEXT	ENDS
PUBLIC	?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ	; CvPlot::getOwner
; Function compile flags: /Ogtpy
;	COMDAT ?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ PROC		; CvPlot::getOwner, COMDAT
; _this$ = ecx

; 387  : 		return (PlayerTypes)m_eOwner;

	movsx	eax, BYTE PTR [ecx+4]

; 388  : 	}

	ret	0
?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ ENDP		; CvPlot::getOwner
_TEXT	ENDS
PUBLIC	?isWater@CvPlot@@QBE_NXZ			; CvPlot::isWater
; Function compile flags: /Ogtpy
;	COMDAT ?isWater@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isWater@CvPlot@@QBE_NXZ PROC				; CvPlot::isWater, COMDAT
; _this$ = ecx

; 409  : 		return (PlotTypes)m_ePlotType == PLOT_OCEAN;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], 3
	sete	al

; 410  : 	};

	ret	0
?isWater@CvPlot@@QBE_NXZ ENDP				; CvPlot::isWater
_TEXT	ENDS
PUBLIC	?isHills@CvPlot@@QBE_NXZ			; CvPlot::isHills
; Function compile flags: /Ogtpy
;	COMDAT ?isHills@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isHills@CvPlot@@QBE_NXZ PROC				; CvPlot::isHills, COMDAT
; _this$ = ecx

; 413  : 		return (PlotTypes)m_ePlotType == PLOT_HILLS;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], 1
	sete	al

; 414  : 	};

	ret	0
?isHills@CvPlot@@QBE_NXZ ENDP				; CvPlot::isHills
_TEXT	ENDS
PUBLIC	?isMountain@CvPlot@@QBE_NXZ			; CvPlot::isMountain
; Function compile flags: /Ogtpy
;	COMDAT ?isMountain@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isMountain@CvPlot@@QBE_NXZ PROC			; CvPlot::isMountain, COMDAT
; _this$ = ecx

; 422  : 		return (PlotTypes)m_ePlotType == PLOT_MOUNTAIN;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], al
	sete	al

; 423  : 	};

	ret	0
?isMountain@CvPlot@@QBE_NXZ ENDP			; CvPlot::isMountain
_TEXT	ENDS
PUBLIC	?isRiver@CvPlot@@QBE_NXZ			; CvPlot::isRiver
; Function compile flags: /Ogtpy
;	COMDAT ?isRiver@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isRiver@CvPlot@@QBE_NXZ PROC				; CvPlot::isRiver, COMDAT
; _this$ = ecx

; 426  : 		return m_iRiverCrossingCount > 0;

	xor	eax, eax
	cmp	BYTE PTR [ecx+457], al
	setg	al

; 427  : 	}

	ret	0
?isRiver@CvPlot@@QBE_NXZ ENDP				; CvPlot::isRiver
_TEXT	ENDS
PUBLIC	?getTerrainType@CvPlot@@QBE?AW4TerrainTypes@@XZ	; CvPlot::getTerrainType
; Function compile flags: /Ogtpy
;	COMDAT ?getTerrainType@CvPlot@@QBE?AW4TerrainTypes@@XZ
_TEXT	SEGMENT
?getTerrainType@CvPlot@@QBE?AW4TerrainTypes@@XZ PROC	; CvPlot::getTerrainType, COMDAT
; _this$ = ecx

; 431  : 		return (TerrainTypes)m_eTerrainType;

	movsx	eax, BYTE PTR [ecx+6]

; 432  : 	}

	ret	0
?getTerrainType@CvPlot@@QBE?AW4TerrainTypes@@XZ ENDP	; CvPlot::getTerrainType
_TEXT	ENDS
PUBLIC	?isImpassable@CvPlot@@QBE_NXZ			; CvPlot::isImpassable
; Function compile flags: /Ogtpy
;	COMDAT ?isImpassable@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isImpassable@CvPlot@@QBE_NXZ PROC			; CvPlot::isImpassable, COMDAT
; _this$ = ecx

; 444  : 		return m_bIsImpassable;

	mov	al, BYTE PTR [ecx+462]
	shr	al, 7

; 445  : 	}

	ret	0
?isImpassable@CvPlot@@QBE_NXZ ENDP			; CvPlot::isImpassable
_TEXT	ENDS
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
; Function compile flags: /Ogtpy
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN1@getPlotCit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 537  : 	}

	ret	0
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax

; 537  : 	}

	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
_TEXT	ENDS
PUBLIC	?getVisibilityCount@CvPlot@@QBEHW4TeamTypes@@@Z	; CvPlot::getVisibilityCount
; Function compile flags: /Ogtpy
;	COMDAT ?getVisibilityCount@CvPlot@@QBEHW4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?getVisibilityCount@CvPlot@@QBEHW4TeamTypes@@@Z PROC	; CvPlot::getVisibilityCount, COMDAT
; _this$ = ecx

; 588  : 		CvAssertMsg(eTeam >= 0, "eTeam is expected to be non-negative (invalid Index)");
; 589  : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is expected to be within maximum bounds (invalid Index)");
; 590  : 
; 591  : 		return m_aiVisibilityCount[eTeam];

	mov	eax, DWORD PTR [ecx+156]
	mov	ecx, DWORD PTR _eTeam$[esp-4]
	movsx	eax, WORD PTR [eax+ecx*2]

; 592  : 	}

	ret	4
?getVisibilityCount@CvPlot@@QBEHW4TeamTypes@@@Z ENDP	; CvPlot::getVisibilityCount
_TEXT	ENDS
PUBLIC	?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z		; CvPlot::PlotBoolField::GetBit
; Function compile flags: /Ogtpy
;	COMDAT ?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z
_TEXT	SEGMENT
_uiEntry$ = 8						; size = 4
?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z PROC		; CvPlot::PlotBoolField::GetBit, COMDAT
; _this$ = ecx

; 767  : 		{

	mov	edx, ecx

; 768  : 			const uint uiOffset = uiEntry/eSize;

	mov	ecx, DWORD PTR _uiEntry$[esp-4]
	push	esi
	mov	eax, ecx
	shr	eax, 5

; 769  : 			return m_dwBits[uiOffset] & 1<<(uiEntry-(eSize*uiOffset));

	mov	esi, eax
	shl	esi, 5
	sub	ecx, esi
	mov	esi, 1
	shl	esi, cl
	test	esi, DWORD PTR [edx+eax*4]
	pop	esi
	setne	al

; 770  : 		}

	ret	4
?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z ENDP		; CvPlot::PlotBoolField::GetBit
_TEXT	ENDS
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 88   : 	if(bWrap)

	cmp	BYTE PTR _bWrap$[esp-4], 0
	mov	eax, DWORD PTR _iCoord$[esp-4]
	je	SHORT $LN5@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)
; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	ecx, DWORD PTR _iRange$[esp-4]
	test	eax, eax
	jge	SHORT $LN3@coordRange
	cdq
	idiv	ecx
	mov	eax, edx
	add	eax, ecx

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	cmp	eax, ecx
	jl	SHORT $LN5@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	cdq
	idiv	ecx
	mov	eax, edx
$LN5@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
_TEXT	ENDS
PUBLIC	?getGridWidth@CvMap@@QBEHXZ			; CvMap::getGridWidth
; Function compile flags: /Ogtpy
;	COMDAT ?getGridWidth@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridWidth@CvMap@@QBEHXZ PROC			; CvMap::getGridWidth, COMDAT
; _this$ = ecx

; 198  : 		return m_iGridWidth;

	mov	eax, DWORD PTR [ecx+4020]

; 199  : 	}

	ret	0
?getGridWidth@CvMap@@QBEHXZ ENDP			; CvMap::getGridWidth
_TEXT	ENDS
PUBLIC	?getGridHeight@CvMap@@QBEHXZ			; CvMap::getGridHeight
; Function compile flags: /Ogtpy
;	COMDAT ?getGridHeight@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridHeight@CvMap@@QBEHXZ PROC			; CvMap::getGridHeight, COMDAT
; _this$ = ecx

; 206  : 		return m_iGridHeight;

	mov	eax, DWORD PTR [ecx+4024]

; 207  : 	}

	ret	0
?getGridHeight@CvMap@@QBEHXZ ENDP			; CvMap::getGridHeight
_TEXT	ENDS
PUBLIC	?isWrapX@CvMap@@QBE_NXZ				; CvMap::isWrapX
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapX@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapX@CvMap@@QBE_NXZ PROC				; CvMap::isWrapX, COMDAT
; _this$ = ecx

; 228  : 		return m_bWrapX;

	mov	al, BYTE PTR [ecx+4056]

; 229  : 	}

	ret	0
?isWrapX@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapX
_TEXT	ENDS
PUBLIC	?isWrapY@CvMap@@QBE_NXZ				; CvMap::isWrapY
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapY@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapY@CvMap@@QBE_NXZ PROC				; CvMap::isWrapY, COMDAT
; _this$ = ecx

; 233  : 		return m_bWrapY;

	mov	al, BYTE PTR [ecx+4057]

; 234  : 	}

	ret	0
?isWrapY@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapY
_TEXT	ENDS
PUBLIC	?GetBit@CvTacticalAnalysisCell@@QBE_NI@Z	; CvTacticalAnalysisCell::GetBit
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvtacticalanalysismap.h
;	COMDAT ?GetBit@CvTacticalAnalysisCell@@QBE_NI@Z
_TEXT	SEGMENT
_uiFlag$ = 8						; size = 4
?GetBit@CvTacticalAnalysisCell@@QBE_NI@Z PROC		; CvTacticalAnalysisCell::GetBit, COMDAT
; _this$ = ecx

; 83   : 	FBITFLAGS(uint);

	mov	eax, DWORD PTR [ecx]
	and	eax, DWORD PTR _uiFlag$[esp-4]
	neg	eax
	sbb	eax, eax
	neg	eax
	ret	4
?GetBit@CvTacticalAnalysisCell@@QBE_NI@Z ENDP		; CvTacticalAnalysisCell::GetBit
_TEXT	ENDS
PUBLIC	?IsRevealed@CvTacticalAnalysisCell@@QAE_NXZ	; CvTacticalAnalysisCell::IsRevealed
; Function compile flags: /Ogtpy
;	COMDAT ?IsRevealed@CvTacticalAnalysisCell@@QAE_NXZ
_TEXT	SEGMENT
?IsRevealed@CvTacticalAnalysisCell@@QAE_NXZ PROC	; CvTacticalAnalysisCell::IsRevealed, COMDAT
; _this$ = ecx

; 92   : 		return GetBit(TACTICAL_FLAG_REVEALED);

	mov	eax, DWORD PTR [ecx]
	and	eax, 1

; 93   : 	};

	ret	0
?IsRevealed@CvTacticalAnalysisCell@@QAE_NXZ ENDP	; CvTacticalAnalysisCell::IsRevealed
_TEXT	ENDS
PUBLIC	?IsVisible@CvTacticalAnalysisCell@@QAE_NXZ	; CvTacticalAnalysisCell::IsVisible
; Function compile flags: /Ogtpy
;	COMDAT ?IsVisible@CvTacticalAnalysisCell@@QAE_NXZ
_TEXT	SEGMENT
?IsVisible@CvTacticalAnalysisCell@@QAE_NXZ PROC		; CvTacticalAnalysisCell::IsVisible, COMDAT
; _this$ = ecx

; 100  : 		return GetBit(TACTICAL_FLAG_VISIBLE);

	mov	eax, DWORD PTR [ecx]
	shr	eax, 1
	and	eax, 1

; 101  : 	};

	ret	0
?IsVisible@CvTacticalAnalysisCell@@QAE_NXZ ENDP		; CvTacticalAnalysisCell::IsVisible
_TEXT	ENDS
PUBLIC	?IsFriendlyCity@CvTacticalAnalysisCell@@QAE_NXZ	; CvTacticalAnalysisCell::IsFriendlyCity
; Function compile flags: /Ogtpy
;	COMDAT ?IsFriendlyCity@CvTacticalAnalysisCell@@QAE_NXZ
_TEXT	SEGMENT
?IsFriendlyCity@CvTacticalAnalysisCell@@QAE_NXZ PROC	; CvTacticalAnalysisCell::IsFriendlyCity, COMDAT
; _this$ = ecx

; 156  : 		return GetBit(TACTICAL_FLAG_FRIENDLY_CITY);

	mov	eax, DWORD PTR [ecx]
	shr	eax, 8
	and	eax, 1

; 157  : 	};

	ret	0
?IsFriendlyCity@CvTacticalAnalysisCell@@QAE_NXZ ENDP	; CvTacticalAnalysisCell::IsFriendlyCity
_TEXT	ENDS
PUBLIC	?IsEnemyCity@CvTacticalAnalysisCell@@QAE_NXZ	; CvTacticalAnalysisCell::IsEnemyCity
; Function compile flags: /Ogtpy
;	COMDAT ?IsEnemyCity@CvTacticalAnalysisCell@@QAE_NXZ
_TEXT	SEGMENT
?IsEnemyCity@CvTacticalAnalysisCell@@QAE_NXZ PROC	; CvTacticalAnalysisCell::IsEnemyCity, COMDAT
; _this$ = ecx

; 164  : 		return GetBit(TACTICAL_FLAG_ENEMY_CITY);

	mov	eax, DWORD PTR [ecx]
	shr	eax, 9
	and	eax, 1

; 165  : 	};

	ret	0
?IsEnemyCity@CvTacticalAnalysisCell@@QAE_NXZ ENDP	; CvTacticalAnalysisCell::IsEnemyCity
_TEXT	ENDS
PUBLIC	?IsNeutralCity@CvTacticalAnalysisCell@@QAE_NXZ	; CvTacticalAnalysisCell::IsNeutralCity
; Function compile flags: /Ogtpy
;	COMDAT ?IsNeutralCity@CvTacticalAnalysisCell@@QAE_NXZ
_TEXT	SEGMENT
?IsNeutralCity@CvTacticalAnalysisCell@@QAE_NXZ PROC	; CvTacticalAnalysisCell::IsNeutralCity, COMDAT
; _this$ = ecx

; 172  : 		return GetBit(TACTICAL_FLAG_NEUTRAL_CITY);

	mov	eax, DWORD PTR [ecx]
	shr	eax, 10					; 0000000aH
	and	eax, 1

; 173  : 	};

	ret	0
?IsNeutralCity@CvTacticalAnalysisCell@@QAE_NXZ ENDP	; CvTacticalAnalysisCell::IsNeutralCity
_TEXT	ENDS
PUBLIC	?IsCity@CvTacticalAnalysisCell@@QAE_NXZ		; CvTacticalAnalysisCell::IsCity
; Function compile flags: /Ogtpy
;	COMDAT ?IsCity@CvTacticalAnalysisCell@@QAE_NXZ
_TEXT	SEGMENT
?IsCity@CvTacticalAnalysisCell@@QAE_NXZ PROC		; CvTacticalAnalysisCell::IsCity, COMDAT
; _this$ = ecx

; 180  : 		return IsFriendlyCity() || IsEnemyCity() || IsNeutralCity();

	mov	eax, DWORD PTR [ecx]
	mov	ecx, eax
	shr	ecx, 8
	test	cl, 1
	jne	SHORT $LN3@IsCity
	mov	edx, eax
	shr	edx, 9
	test	dl, 1
	jne	SHORT $LN3@IsCity
	shr	eax, 10					; 0000000aH
	test	al, 1
	jne	SHORT $LN3@IsCity
	xor	eax, eax

; 181  : 	}

	ret	0
$LN3@IsCity:

; 180  : 		return IsFriendlyCity() || IsEnemyCity() || IsNeutralCity();

	mov	eax, 1

; 181  : 	}

	ret	0
?IsCity@CvTacticalAnalysisCell@@QAE_NXZ ENDP		; CvTacticalAnalysisCell::IsCity
_TEXT	ENDS
PUBLIC	?IsWater@CvTacticalAnalysisCell@@QAE_NXZ	; CvTacticalAnalysisCell::IsWater
; Function compile flags: /Ogtpy
;	COMDAT ?IsWater@CvTacticalAnalysisCell@@QAE_NXZ
_TEXT	SEGMENT
?IsWater@CvTacticalAnalysisCell@@QAE_NXZ PROC		; CvTacticalAnalysisCell::IsWater, COMDAT
; _this$ = ecx

; 184  : 		return GetBit(TACTICAL_FLAG_WATER);

	mov	eax, DWORD PTR [ecx]
	shr	eax, 11					; 0000000bH
	and	eax, 1

; 185  : 	};

	ret	0
?IsWater@CvTacticalAnalysisCell@@QAE_NXZ ENDP		; CvTacticalAnalysisCell::IsWater
_TEXT	ENDS
PUBLIC	?IsUnclaimedTerritory@CvTacticalAnalysisCell@@QAE_NXZ ; CvTacticalAnalysisCell::IsUnclaimedTerritory
; Function compile flags: /Ogtpy
;	COMDAT ?IsUnclaimedTerritory@CvTacticalAnalysisCell@@QAE_NXZ
_TEXT	SEGMENT
?IsUnclaimedTerritory@CvTacticalAnalysisCell@@QAE_NXZ PROC ; CvTacticalAnalysisCell::IsUnclaimedTerritory, COMDAT
; _this$ = ecx

; 224  : 		return GetBit(TACTICAL_FLAG_UNCLAIMED_TERRITORY);

	movzx	eax, WORD PTR [ecx+2]
	and	eax, 1

; 225  : 	};

	ret	0
?IsUnclaimedTerritory@CvTacticalAnalysisCell@@QAE_NXZ ENDP ; CvTacticalAnalysisCell::IsUnclaimedTerritory
_TEXT	ENDS
PUBLIC	?GetEnemyMilitaryUnit@CvTacticalAnalysisCell@@QAEPAVCvUnit@@XZ ; CvTacticalAnalysisCell::GetEnemyMilitaryUnit
; Function compile flags: /Ogtpy
;	COMDAT ?GetEnemyMilitaryUnit@CvTacticalAnalysisCell@@QAEPAVCvUnit@@XZ
_TEXT	SEGMENT
?GetEnemyMilitaryUnit@CvTacticalAnalysisCell@@QAEPAVCvUnit@@XZ PROC ; CvTacticalAnalysisCell::GetEnemyMilitaryUnit, COMDAT
; _this$ = ecx

; 258  : 		return m_pEnemyMilitary;

	mov	eax, DWORD PTR [ecx+4]

; 259  : 	};

	ret	0
?GetEnemyMilitaryUnit@CvTacticalAnalysisCell@@QAEPAVCvUnit@@XZ ENDP ; CvTacticalAnalysisCell::GetEnemyMilitaryUnit
_TEXT	ENDS
PUBLIC	?GetCell@CvTacticalAnalysisMap@@QAEPAVCvTacticalAnalysisCell@@H@Z ; CvTacticalAnalysisMap::GetCell
; Function compile flags: /Ogtpy
;	COMDAT ?GetCell@CvTacticalAnalysisMap@@QAEPAVCvTacticalAnalysisCell@@H@Z
_TEXT	SEGMENT
_iPlotIndex$ = 8					; size = 4
?GetCell@CvTacticalAnalysisMap@@QAEPAVCvTacticalAnalysisCell@@H@Z PROC ; CvTacticalAnalysisMap::GetCell, COMDAT
; _this$ = ecx

; 630  : 		return &m_pPlots[iPlotIndex];

	mov	eax, DWORD PTR _iPlotIndex$[esp-4]
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR [ecx+12]

; 631  : 	};

	ret	4
?GetCell@CvTacticalAnalysisMap@@QAEPAVCvTacticalAnalysisCell@@H@Z ENDP ; CvTacticalAnalysisMap::GetCell
_TEXT	ENDS
PUBLIC	?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z		; CvTeam::getTeam
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvteam.h
;	COMDAT ?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z PROC		; CvTeam::getTeam, COMDAT

; 29   : 		CvAssertMsg(eTeam != NO_TEAM, "eTeam is not assigned a valid value");
; 30   : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is not assigned a valid value");
; 31   : 		return m_aTeams[eTeam];

	mov	eax, DWORD PTR _eTeam$[esp-4]
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams

; 32   : 	}

	ret	0
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z ENDP		; CvTeam::getTeam
_TEXT	ENDS
PUBLIC	?IsMoveFriendlyWoodsAsRoad@CvPlayerTraits@@QBE_NXZ ; CvPlayerTraits::IsMoveFriendlyWoodsAsRoad
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvtraitclasses.h
;	COMDAT ?IsMoveFriendlyWoodsAsRoad@CvPlayerTraits@@QBE_NXZ
_TEXT	SEGMENT
?IsMoveFriendlyWoodsAsRoad@CvPlayerTraits@@QBE_NXZ PROC	; CvPlayerTraits::IsMoveFriendlyWoodsAsRoad, COMDAT
; _this$ = ecx

; 716  : 		return m_bMoveFriendlyWoodsAsRoad;

	mov	al, BYTE PTR [ecx+325]

; 717  : 	};

	ret	0
?IsMoveFriendlyWoodsAsRoad@CvPlayerTraits@@QBE_NXZ ENDP	; CvPlayerTraits::IsMoveFriendlyWoodsAsRoad
_TEXT	ENDS
PUBLIC	?IsRiverTradeRoad@CvPlayerTraits@@QBE_NXZ	; CvPlayerTraits::IsRiverTradeRoad
; Function compile flags: /Ogtpy
;	COMDAT ?IsRiverTradeRoad@CvPlayerTraits@@QBE_NXZ
_TEXT	SEGMENT
?IsRiverTradeRoad@CvPlayerTraits@@QBE_NXZ PROC		; CvPlayerTraits::IsRiverTradeRoad, COMDAT
; _this$ = ecx

; 817  : 		return m_bRiverTradeRoad;

	mov	al, BYTE PTR [ecx+346]

; 818  : 	}

	ret	0
?IsRiverTradeRoad@CvPlayerTraits@@QBE_NXZ ENDP		; CvPlayerTraits::IsRiverTradeRoad
_TEXT	ENDS
PUBLIC	?GetLastNode@CvAStar@@QAEPAVCvAStarNode@@XZ	; CvAStar::GetLastNode
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.h
;	COMDAT ?GetLastNode@CvAStar@@QAEPAVCvAStarNode@@XZ
_TEXT	SEGMENT
?GetLastNode@CvAStar@@QAEPAVCvAStarNode@@XZ PROC	; CvAStar::GetLastNode, COMDAT
; _this$ = ecx

; 98   : 		return m_pBest;

	mov	eax, DWORD PTR [ecx+96]

; 99   : 	}

	ret	0
?GetLastNode@CvAStar@@QAEPAVCvAStarNode@@XZ ENDP	; CvAStar::GetLastNode
_TEXT	ENDS
PUBLIC	?IsPathDest@CvAStar@@QAE_NHH@Z			; CvAStar::IsPathDest
; Function compile flags: /Ogtpy
;	COMDAT ?IsPathDest@CvAStar@@QAE_NHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?IsPathDest@CvAStar@@QAE_NHH@Z PROC			; CvAStar::IsPathDest, COMDAT
; _this$ = ecx

; 124  : 		if(udIsPathDest && udIsPathDest(iX, iY, m_pData, this))

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN1@IsPathDest
	mov	edx, DWORD PTR _iY$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR [ecx+44]
	push	ecx
	mov	ecx, DWORD PTR _iX$[esp+4]
	push	edx
	push	ecx
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@IsPathDest

; 125  : 		{
; 126  : 			return TRUE;

	mov	al, 1

; 129  : 	}

	ret	8
$LN1@IsPathDest:

; 127  : 		}
; 128  : 		return FALSE;

	xor	al, al

; 129  : 	}

	ret	8
?IsPathDest@CvAStar@@QAE_NHH@Z ENDP			; CvAStar::IsPathDest
_TEXT	ENDS
PUBLIC	?GetStartX@CvAStar@@QAEHXZ			; CvAStar::GetStartX
; Function compile flags: /Ogtpy
;	COMDAT ?GetStartX@CvAStar@@QAEHXZ
_TEXT	SEGMENT
?GetStartX@CvAStar@@QAEHXZ PROC				; CvAStar::GetStartX, COMDAT
; _this$ = ecx

; 137  : 		return m_iXstart;

	mov	eax, DWORD PTR [ecx+56]

; 138  : 	}

	ret	0
?GetStartX@CvAStar@@QAEHXZ ENDP				; CvAStar::GetStartX
_TEXT	ENDS
PUBLIC	?GetStartY@CvAStar@@QAEHXZ			; CvAStar::GetStartY
; Function compile flags: /Ogtpy
;	COMDAT ?GetStartY@CvAStar@@QAEHXZ
_TEXT	SEGMENT
?GetStartY@CvAStar@@QAEHXZ PROC				; CvAStar::GetStartY, COMDAT
; _this$ = ecx

; 146  : 		return m_iYstart;

	mov	eax, DWORD PTR [ecx+60]

; 147  : 	}

	ret	0
?GetStartY@CvAStar@@QAEHXZ ENDP				; CvAStar::GetStartY
_TEXT	ENDS
PUBLIC	?GetDestX@CvAStar@@QAEHXZ			; CvAStar::GetDestX
; Function compile flags: /Ogtpy
;	COMDAT ?GetDestX@CvAStar@@QAEHXZ
_TEXT	SEGMENT
?GetDestX@CvAStar@@QAEHXZ PROC				; CvAStar::GetDestX, COMDAT
; _this$ = ecx

; 155  : 		return m_iXdest;

	mov	eax, DWORD PTR [ecx+64]

; 156  : 	}

	ret	0
?GetDestX@CvAStar@@QAEHXZ ENDP				; CvAStar::GetDestX
_TEXT	ENDS
PUBLIC	?GetDestY@CvAStar@@QAEHXZ			; CvAStar::GetDestY
; Function compile flags: /Ogtpy
;	COMDAT ?GetDestY@CvAStar@@QAEHXZ
_TEXT	SEGMENT
?GetDestY@CvAStar@@QAEHXZ PROC				; CvAStar::GetDestY, COMDAT
; _this$ = ecx

; 164  : 		return m_iYdest;

	mov	eax, DWORD PTR [ecx+68]

; 165  : 	}

	ret	0
?GetDestY@CvAStar@@QAEHXZ ENDP				; CvAStar::GetDestY
_TEXT	ENDS
PUBLIC	?GetInfo@CvAStar@@QAEHXZ			; CvAStar::GetInfo
; Function compile flags: /Ogtpy
;	COMDAT ?GetInfo@CvAStar@@QAEHXZ
_TEXT	SEGMENT
?GetInfo@CvAStar@@QAEHXZ PROC				; CvAStar::GetInfo, COMDAT
; _this$ = ecx

; 173  : 		return m_iInfo;

	mov	eax, DWORD PTR [ecx+72]

; 174  : 	}

	ret	0
?GetInfo@CvAStar@@QAEHXZ ENDP				; CvAStar::GetInfo
_TEXT	ENDS
PUBLIC	?SetData@CvAStar@@QAEXPBX@Z			; CvAStar::SetData
; Function compile flags: /Ogtpy
;	COMDAT ?SetData@CvAStar@@QAEXPBX@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?SetData@CvAStar@@QAEXPBX@Z PROC			; CvAStar::SetData, COMDAT
; _this$ = ecx

; 202  : 		if(m_bDataChangeInvalidatesCache && m_pData != pData)

	cmp	BYTE PTR [ecx+80], 0
	mov	eax, DWORD PTR _pData$[esp-4]
	je	SHORT $LN4@SetData
	cmp	DWORD PTR [ecx+44], eax

; 205  : 		m_pData = pData;

	mov	DWORD PTR [ecx+44], eax
	je	SHORT $LN1@SetData

; 203  : #endif
; 204  : 			m_bForceReset = true;

	mov	BYTE PTR [ecx+78], 1

; 206  : #ifdef AUI_ASTAR_TURN_LIMITER
; 207  : 		m_iMaxTurns = iMaxTurns;
; 208  : #endif
; 209  : 	}

	ret	4
$LN4@SetData:

; 205  : 		m_pData = pData;

	mov	DWORD PTR [ecx+44], eax
$LN1@SetData:

; 206  : #ifdef AUI_ASTAR_TURN_LIMITER
; 207  : 		m_iMaxTurns = iMaxTurns;
; 208  : #endif
; 209  : 	}

	ret	4
?SetData@CvAStar@@QAEXPBX@Z ENDP			; CvAStar::SetData
_TEXT	ENDS
PUBLIC	?GetScratchBuffer@CvAStar@@QAEPAXXZ		; CvAStar::GetScratchBuffer
; Function compile flags: /Ogtpy
;	COMDAT ?GetScratchBuffer@CvAStar@@QAEPAXXZ
_TEXT	SEGMENT
?GetScratchBuffer@CvAStar@@QAEPAXXZ PROC		; CvAStar::GetScratchBuffer, COMDAT
; _this$ = ecx

; 383  : 	void* GetScratchBuffer() { return &m_ScratchBuffer[0]; }

	lea	eax, DWORD PTR [ecx+116]
	ret	0
?GetScratchBuffer@CvAStar@@QAEPAXXZ ENDP		; CvAStar::GetScratchBuffer
_TEXT	ENDS
PUBLIC	?xRange@CvAStar@@IAEHH@Z			; CvAStar::xRange
; Function compile flags: /Ogtpy
;	COMDAT ?xRange@CvAStar@@IAEHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
?xRange@CvAStar@@IAEHH@Z PROC				; CvAStar::xRange, COMDAT
; _this$ = ecx

; 480  : 	if(m_bWrapX)

	cmp	BYTE PTR [ecx+76], 0

; 481  : 	{
; 482  : 		if(iX < 0)

	mov	eax, DWORD PTR _iX$[esp-4]
	je	SHORT $LN1@xRange

; 483  : 		{
; 484  : 			return (m_iColumns + (iX % m_iColumns));

	mov	ecx, DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $LN5@xRange
	cdq
	idiv	ecx
	mov	eax, edx
	add	eax, ecx

; 489  : 		}
; 490  : 		else
; 491  : 		{
; 492  : 			return iX;
; 493  : 		}
; 494  : 	}
; 495  : 	else
; 496  : 	{
; 497  : 		return iX;
; 498  : 	}
; 499  : }

	ret	4
$LN5@xRange:

; 485  : 		}
; 486  : 		else if(iX >= m_iColumns)

	cmp	eax, ecx
	jl	SHORT $LN1@xRange

; 487  : 		{
; 488  : 			return (iX % m_iColumns);

	cdq
	idiv	ecx
	mov	eax, edx
$LN1@xRange:

; 489  : 		}
; 490  : 		else
; 491  : 		{
; 492  : 			return iX;
; 493  : 		}
; 494  : 	}
; 495  : 	else
; 496  : 	{
; 497  : 		return iX;
; 498  : 	}
; 499  : }

	ret	4
?xRange@CvAStar@@IAEHH@Z ENDP				; CvAStar::xRange
_TEXT	ENDS
PUBLIC	?yRange@CvAStar@@IAEHH@Z			; CvAStar::yRange
; Function compile flags: /Ogtpy
;	COMDAT ?yRange@CvAStar@@IAEHH@Z
_TEXT	SEGMENT
_iY$ = 8						; size = 4
?yRange@CvAStar@@IAEHH@Z PROC				; CvAStar::yRange, COMDAT
; _this$ = ecx

; 508  : 	if(m_bWrapY)

	cmp	BYTE PTR [ecx+77], 0

; 509  : 	{
; 510  : 		if(iY < 0)

	mov	eax, DWORD PTR _iY$[esp-4]
	je	SHORT $LN1@yRange

; 511  : 		{
; 512  : 			return (m_iRows + (iY % m_iRows));

	mov	ecx, DWORD PTR [ecx+52]
	test	eax, eax
	jge	SHORT $LN5@yRange
	cdq
	idiv	ecx
	mov	eax, edx
	add	eax, ecx

; 517  : 		}
; 518  : 		else
; 519  : 		{
; 520  : 			return iY;
; 521  : 		}
; 522  : 	}
; 523  : 	else
; 524  : 	{
; 525  : 		return iY;
; 526  : 	}
; 527  : }

	ret	4
$LN5@yRange:

; 513  : 		}
; 514  : 		else if(iY >= m_iRows)

	cmp	eax, ecx
	jl	SHORT $LN1@yRange

; 515  : 		{
; 516  : 			return (iY % m_iRows);

	cdq
	idiv	ecx
	mov	eax, edx
$LN1@yRange:

; 517  : 		}
; 518  : 		else
; 519  : 		{
; 520  : 			return iY;
; 521  : 		}
; 522  : 	}
; 523  : 	else
; 524  : 	{
; 525  : 		return iY;
; 526  : 	}
; 527  : }

	ret	4
?yRange@CvAStar@@IAEHH@Z ENDP				; CvAStar::yRange
_TEXT	ENDS
PUBLIC	?isValid@CvAStar@@IAE_NHH@Z			; CvAStar::isValid
; Function compile flags: /Ogtpy
;	COMDAT ?isValid@CvAStar@@IAE_NHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isValid@CvAStar@@IAE_NHH@Z PROC			; CvAStar::isValid, COMDAT
; _this$ = ecx

; 536  : 	if((iX < 0) || (iX >= m_iColumns))

	mov	eax, DWORD PTR _iX$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isValid
	cmp	eax, DWORD PTR [ecx+48]
	jge	SHORT $LN3@isValid

; 539  : 	}
; 540  : 
; 541  : 	if((iY < 0) || (iY >= m_iRows))

	mov	eax, DWORD PTR _iY$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isValid
	cmp	eax, DWORD PTR [ecx+52]
	jge	SHORT $LN3@isValid

; 542  : 	{
; 543  : 		return false;
; 544  : 	}
; 545  : 
; 546  : 	return true;

	mov	al, 1

; 547  : }

	ret	8
$LN3@isValid:

; 537  : 	{
; 538  : 		return false;

	xor	al, al

; 547  : }

	ret	8
?isValid@CvAStar@@IAE_NHH@Z ENDP			; CvAStar::isValid
_TEXT	ENDS
PUBLIC	?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z ; CvAStar::udFunc
; Function compile flags: /Ogtpy
;	COMDAT ?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z
_TEXT	SEGMENT
_func$ = 8						; size = 4
_param1$ = 12						; size = 4
_param2$ = 16						; size = 4
_data$ = 20						; size = 4
_cb$ = 24						; size = 4
?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z PROC ; CvAStar::udFunc, COMDAT
; _this$ = ecx

; 552  : 	return (func) ? func(param1, param2, data, cb, this) : 1;

	mov	eax, DWORD PTR _func$[esp-4]
	test	eax, eax
	je	SHORT $LN3@udFunc
	mov	edx, DWORD PTR _data$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR _cb$[esp]
	push	ecx
	mov	ecx, DWORD PTR _param2$[esp+4]
	push	edx
	mov	edx, DWORD PTR _param1$[esp+8]
	push	ecx
	push	edx
	call	eax
	add	esp, 20					; 00000014H

; 553  : }

	ret	20					; 00000014H
$LN3@udFunc:

; 552  : 	return (func) ? func(param1, param2, data, cb, this) : 1;

	mov	eax, 1

; 553  : }

	ret	20					; 00000014H
?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z ENDP ; CvAStar::udFunc
_TEXT	ENDS
PUBLIC	??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z PROC ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 771  : 		}

	ret	4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ENDP ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEPAPAVCvAStarNode@@I@Z ; FStaticVector<CvAStarNode *,6,1,297,0>::Alloc
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Alloc@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEPAPAVCvAStarNode@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEPAPAVCvAStarNode@@I@Z PROC ; FStaticVector<CvAStarNode *,6,1,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 6
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0IJ@DONJGAGH@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 6
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEPAPAVCvAStarNode@@I@Z ENDP ; FStaticVector<CvAStarNode *,6,1,297,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@PAVCvAStarNode@@$00@@QAE@XZ	; BaseVector<CvAStarNode *,1>::~BaseVector<CvAStarNode *,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@PAVCvAStarNode@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@PAVCvAStarNode@@$00@@QAE@XZ PROC	; BaseVector<CvAStarNode *,1>::~BaseVector<CvAStarNode *,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@PAVCvAStarNode@@$00@@QAE@XZ ENDP	; BaseVector<CvAStarNode *,1>::~BaseVector<CvAStarNode *,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@PAVCvAStarNode@@$00@@IAE@XZ	; BaseVector<CvAStarNode *,1>::BaseVector<CvAStarNode *,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@PAVCvAStarNode@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@PAVCvAStarNode@@$00@@IAE@XZ PROC	; BaseVector<CvAStarNode *,1>::BaseVector<CvAStarNode *,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@PAVCvAStarNode@@$00@@IAE@XZ ENDP	; BaseVector<CvAStarNode *,1>::BaseVector<CvAStarNode *,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@PAVCvAStarNode@@$00@@IAEXPAPAVCvAStarNode@@I@Z ; BaseVector<CvAStarNode *,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@PAVCvAStarNode@@$00@@IAEXPAPAVCvAStarNode@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@PAVCvAStarNode@@$00@@IAEXPAPAVCvAStarNode@@I@Z PROC ; BaseVector<CvAStarNode *,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@PAVCvAStarNode@@$00@@IAEXPAPAVCvAStarNode@@I@Z ENDP ; BaseVector<CvAStarNode *,1>::Destroy
_TEXT	ENDS
PUBLIC	?get@?$FAutoVariable@W4PlayerTypes@@VCvUnit@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvUnit>::get
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ?get@?$FAutoVariable@W4PlayerTypes@@VCvUnit@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
?get@?$FAutoVariable@W4PlayerTypes@@VCvUnit@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvUnit>::get, COMDAT
; _this$ = ecx

; 177  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 178  : }

	ret	0
?get@?$FAutoVariable@W4PlayerTypes@@VCvUnit@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvUnit>::get
_TEXT	ENDS
PUBLIC	?get@?$FAutoVariable@HVCvUnit@@@@QBEABHXZ	; FAutoVariable<int,CvUnit>::get
; Function compile flags: /Ogtpy
;	COMDAT ?get@?$FAutoVariable@HVCvUnit@@@@QBEABHXZ
_TEXT	SEGMENT
?get@?$FAutoVariable@HVCvUnit@@@@QBEABHXZ PROC		; FAutoVariable<int,CvUnit>::get, COMDAT
; _this$ = ecx

; 177  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 178  : }

	ret	0
?get@?$FAutoVariable@HVCvUnit@@@@QBEABHXZ ENDP		; FAutoVariable<int,CvUnit>::get
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@HVCvUnit@@@@QBEABHXZ		; FAutoVariable<int,CvUnit>::operator int const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@HVCvUnit@@@@QBEABHXZ
_TEXT	SEGMENT
??B?$FAutoVariable@HVCvUnit@@@@QBEABHXZ PROC		; FAutoVariable<int,CvUnit>::operator int const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@HVCvUnit@@@@QBEABHXZ ENDP		; FAutoVariable<int,CvUnit>::operator int const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@_NVCvUnit@@@@QBEAB_NXZ	; FAutoVariable<bool,CvUnit>::operator bool const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@_NVCvUnit@@@@QBEAB_NXZ
_TEXT	SEGMENT
??B?$FAutoVariable@_NVCvUnit@@@@QBEAB_NXZ PROC		; FAutoVariable<bool,CvUnit>::operator bool const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@_NVCvUnit@@@@QBEAB_NXZ ENDP		; FAutoVariable<bool,CvUnit>::operator bool const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ		; FAutoVariable<int,CvCity>::operator int const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ
_TEXT	SEGMENT
??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ PROC		; FAutoVariable<int,CvCity>::operator int const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ ENDP		; FAutoVariable<int,CvCity>::operator int const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ		; FAutoVariable<char,CvPlot>::operator char const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ
_TEXT	SEGMENT
??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ PROC		; FAutoVariable<char,CvPlot>::operator char const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ ENDP		; FAutoVariable<char,CvPlot>::operator char const &
_TEXT	ENDS
PUBLIC	?dxWrap@@YAHH@Z					; dxWrap
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?dxWrap@@YAHH@Z
_TEXT	SEGMENT
_iDX$ = 8						; size = 4
?dxWrap@@YAHH@Z PROC					; dxWrap, COMDAT

; 74   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

	mov	edx, DWORD PTR [eax+4020]
	cmp	BYTE PTR [eax+4056], 0
	mov	eax, DWORD PTR _iDX$[esp-4]
	je	SHORT $LN13@dxWrap
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN11@dxWrap
	sub	eax, edx

; 76   : }

	ret	0

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

$LN11@dxWrap:
	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN13@dxWrap
	add	eax, edx
$LN13@dxWrap:

; 76   : }

	ret	0
?dxWrap@@YAHH@Z ENDP					; dxWrap
_TEXT	ENDS
PUBLIC	?dyWrap@@YAHH@Z					; dyWrap
; Function compile flags: /Ogtpy
;	COMDAT ?dyWrap@@YAHH@Z
_TEXT	SEGMENT
_iDY$ = 8						; size = 4
?dyWrap@@YAHH@Z PROC					; dyWrap, COMDAT

; 80   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

	mov	edx, DWORD PTR [eax+4024]
	cmp	BYTE PTR [eax+4057], 0
	mov	eax, DWORD PTR _iDY$[esp-4]
	je	SHORT $LN13@dyWrap
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN11@dyWrap
	sub	eax, edx

; 82   : }

	ret	0

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

$LN11@dyWrap:
	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN13@dyWrap
	add	eax, edx
$LN13@dyWrap:

; 82   : }

	ret	0
?dyWrap@@YAHH@Z ENDP					; dyWrap
_TEXT	ENDS
PUBLIC	?plotDistance@@YAHHHHH@Z			; plotDistance
; Function compile flags: /Ogtpy
;	COMDAT ?plotDistance@@YAHHHHH@Z
_TEXT	SEGMENT
_iDX$ = 8						; size = 4
_iX1$ = 8						; size = 4
_iY1$ = 12						; size = 4
_iDY$ = 16						; size = 4
_iX2$ = 16						; size = 4
_iY2$ = 20						; size = 4
?plotDistance@@YAHHHHH@Z PROC				; plotDistance, COMDAT

; 145  : 	int iDX;
; 146  : 	int iWrappedDX = dxWrap(iX2 - iX1);

	mov	eax, DWORD PTR _iX2$[esp-4]
	sub	eax, DWORD PTR _iX1$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebx+4056], 0
	mov	edx, DWORD PTR [ebx+4020]
	push	ebp
	push	esi
	je	SHORT $LN13@plotDistan
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN15@plotDistan
	sub	eax, edx
	jmp	SHORT $LN13@plotDistan
$LN15@plotDistan:
	neg	ecx
	cmp	eax, ecx
	lea	ecx, DWORD PTR [edx+eax]
	jl	SHORT $LN17@plotDistan
$LN13@plotDistan:
	mov	ecx, eax
$LN17@plotDistan:

; 147  : 	int iWrappedDY = dyWrap(iY2 - iY1);

	mov	eax, DWORD PTR _iY2$[esp+8]
	mov	esi, DWORD PTR [ebx+4024]
	push	edi
	mov	edi, DWORD PTR _iY1$[esp+12]
	sub	eax, edi
	cmp	BYTE PTR [ebx+4057], 0
	je	SHORT $LN27@plotDistan
	mov	edx, esi
	shr	edx, 1
	cmp	eax, edx
	jle	SHORT $LN29@plotDistan
	sub	eax, esi
	jmp	SHORT $LN27@plotDistan
$LN29@plotDistan:
	neg	edx
	cmp	eax, edx
	lea	ebp, DWORD PTR [esi+eax]
	jl	SHORT $LN31@plotDistan
$LN27@plotDistan:
	mov	ebp, eax
$LN31@plotDistan:

; 148  : 	int iDY = abs(iWrappedDY);

	mov	eax, ebp
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDY$[esp+12], eax

; 149  : 
; 150  : 	// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 151  : 	int iHX1 = xToHexspaceX(iX1, iY1);

	test	edi, edi
	jl	SHORT $LN35@plotDistan
	mov	eax, edi
	jmp	SHORT $LN59@plotDistan
$LN35@plotDistan:
	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
$LN59@plotDistan:
	mov	esi, DWORD PTR _iX1$[esp+12]
	sar	eax, 1
	sub	esi, eax

; 152  : 	int iHX2 = xToHexspaceX(iX1 + iWrappedDX, iY1 + iWrappedDY);

	lea	eax, DWORD PTR [edi+ebp]
	pop	edi
	test	eax, eax
	jge	SHORT $LN60@plotDistan
	dec	eax
	cdq
	sub	eax, edx
$LN60@plotDistan:

; 153  : 
; 154  : 	iDX = abs(dxWrap(iHX2 - iHX1));

	mov	edx, DWORD PTR [ebx+4020]
	sar	eax, 1
	sub	ecx, eax
	add	ecx, DWORD PTR _iX1$[esp+8]
	sub	ecx, esi
	cmp	BYTE PTR [ebx+4056], 0
	je	SHORT $LN49@plotDistan
	mov	eax, edx
	shr	eax, 1
	cmp	ecx, eax
	jle	SHORT $LN51@plotDistan
	mov	eax, ecx
	sub	eax, edx
	jmp	SHORT $LN53@plotDistan
$LN51@plotDistan:
	neg	eax
	cmp	ecx, eax
	lea	eax, DWORD PTR [edx+ecx]
	jl	SHORT $LN53@plotDistan
$LN49@plotDistan:
	mov	eax, ecx
$LN53@plotDistan:
	cdq
	xor	eax, edx
	sub	eax, edx

; 155  : 
; 156  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 157  : 	if (((iHX2 - iHX1) ^ (iWrappedDY)) >= 0)  // the signs match
; 158  : #else
; 159  : 	if((iHX2 - iHX1 >= 0) == (iWrappedDY >= 0))  // the signs match

	xor	edx, edx
	test	ecx, ecx
	setge	dl
	xor	ecx, ecx
	test	ebp, ebp
	setge	cl
	pop	esi
	pop	ebp
	mov	DWORD PTR _iDX$[esp], eax
	pop	ebx
	cmp	edx, ecx
	jne	SHORT $LN2@plotDistan

; 160  : #endif
; 161  : 	{
; 162  : 		return iDX + iDY;

	mov	edx, DWORD PTR _iDY$[esp-4]
	add	eax, edx

; 170  : #endif
; 171  : 	}
; 172  : }

	ret	0
$LN2@plotDistan:

; 163  : 	}
; 164  : 	else
; 165  : 	{
; 166  : #ifdef NQM_FAST_COMP
; 167  : 		return (MAX(iDX, iDY));
; 168  : #else
; 169  : 		return (std::max(iDX, iDY));

	cmp	eax, DWORD PTR _iDY$[esp-4]
	lea	eax, DWORD PTR _iDY$[esp-4]
	jl	SHORT $LN58@plotDistan
	lea	eax, DWORD PTR _iDX$[esp-4]
$LN58@plotDistan:
	mov	eax, DWORD PTR [eax]

; 170  : #endif
; 171  : 	}
; 172  : }

	ret	0
?plotDistance@@YAHHHHH@Z ENDP				; plotDistance
_TEXT	ENDS
PUBLIC	?directionXY@@YA?AW4DirectionTypes@@HHHH@Z	; directionXY
; Function compile flags: /Ogtpy
;	COMDAT ?directionXY@@YA?AW4DirectionTypes@@HHHH@Z
_TEXT	SEGMENT
_iSourceX$ = 8						; size = 4
_iSourceY$ = 12						; size = 4
_iDestX$ = 16						; size = 4
_iDestY$ = 20						; size = 4
?directionXY@@YA?AW4DirectionTypes@@HHHH@Z PROC		; directionXY, COMDAT

; 264  : {

	push	ebx

; 265  : 	int iSourceHexX = xToHexspaceX(iSourceX, iSourceY);

	mov	ebx, DWORD PTR _iSourceY$[esp]
	push	esi
	push	edi
	test	ebx, ebx
	jl	SHORT $LN17@directionX
	mov	eax, ebx
	jmp	SHORT $LN51@directionX
$LN17@directionX:
	lea	eax, DWORD PTR [ebx-1]
	cdq
	sub	eax, edx
$LN51@directionX:
	mov	esi, DWORD PTR _iSourceX$[esp+8]

; 266  : 	int iDestHexX = xToHexspaceX(iDestX, iDestY);

	mov	edi, DWORD PTR _iDestY$[esp+8]
	sar	eax, 1
	sub	esi, eax
	test	edi, edi
	jl	SHORT $LN21@directionX
	mov	eax, edi
	jmp	SHORT $LN52@directionX
$LN21@directionX:
	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
$LN52@directionX:

; 267  : 
; 268  : 	int iWrappedXOffset = dxWrap(iDestHexX - iSourceHexX);

	mov	ecx, DWORD PTR _iDestX$[esp+8]
	sar	eax, 1
	sub	ecx, eax
	sub	ecx, esi
	mov	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [esi+4056], 0
	mov	edx, DWORD PTR [esi+4020]
	je	SHORT $LN31@directionX
	mov	eax, edx
	shr	eax, 1
	cmp	ecx, eax
	jle	SHORT $LN33@directionX
	sub	ecx, edx
	jmp	SHORT $LN31@directionX
$LN33@directionX:
	neg	eax
	cmp	ecx, eax
	lea	eax, DWORD PTR [edx+ecx]
	jl	SHORT $LN35@directionX
$LN31@directionX:
	mov	eax, ecx
$LN35@directionX:

; 269  : 	int iWrappedYOffset = dyWrap(iDestY - iSourceY);

	sub	edi, ebx
	cmp	BYTE PTR [esi+4057], 0
	mov	edx, edi
	mov	edi, DWORD PTR [esi+4024]
	je	SHORT $LN45@directionX
	mov	esi, edi
	shr	esi, 1
	cmp	edx, esi
	jle	SHORT $LN47@directionX
	sub	edx, edi
	jmp	SHORT $LN45@directionX
$LN47@directionX:
	neg	esi
	cmp	edx, esi
	jge	SHORT $LN45@directionX
	add	edx, edi
$LN45@directionX:
	pop	edi
	pop	esi
	pop	ebx

; 270  : 
; 271  : 	if(iWrappedYOffset > 0)

	test	edx, edx
	jle	SHORT $LN53@directionX

; 272  : 	{
; 273  : 		if(iWrappedXOffset >= 0)

	xor	ecx, ecx
	test	eax, eax
	setge	cl
	dec	ecx
	and	ecx, 5
	mov	eax, ecx

; 300  : 		{
; 301  : 			return DIRECTION_SOUTHEAST;
; 302  : 		}
; 303  : 		else
; 304  : 		{
; 305  : 			return DIRECTION_SOUTHWEST;
; 306  : 		}
; 307  : 	}
; 308  : }

	ret	0
$LN53@directionX:

; 274  : 		{
; 275  : 			return DIRECTION_NORTHEAST;
; 276  : 		}
; 277  : 		else
; 278  : 		{
; 279  : 			return DIRECTION_NORTHWEST;
; 280  : 		}
; 281  : 	}
; 282  : 	else if(iWrappedYOffset == 0)

	jne	SHORT $LN8@directionX

; 283  : 	{
; 284  : 		if(iWrappedXOffset > 0)

	test	eax, eax
	jle	SHORT $LN7@directionX

; 285  : 		{
; 286  : 			return DIRECTION_EAST;

	mov	eax, 1

; 300  : 		{
; 301  : 			return DIRECTION_SOUTHEAST;
; 302  : 		}
; 303  : 		else
; 304  : 		{
; 305  : 			return DIRECTION_SOUTHWEST;
; 306  : 		}
; 307  : 	}
; 308  : }

	ret	0
$LN7@directionX:

; 287  : 		}
; 288  : 		else if(iWrappedXOffset == 0)

	neg	eax
	sbb	eax, eax
	and	eax, 5
	dec	eax

; 300  : 		{
; 301  : 			return DIRECTION_SOUTHEAST;
; 302  : 		}
; 303  : 		else
; 304  : 		{
; 305  : 			return DIRECTION_SOUTHWEST;
; 306  : 		}
; 307  : 	}
; 308  : }

	ret	0
$LN8@directionX:

; 289  : 		{
; 290  : 			return NO_DIRECTION;
; 291  : 		}
; 292  : 		else
; 293  : 		{
; 294  : 			return DIRECTION_WEST;
; 295  : 		}
; 296  : 	}
; 297  : 	else// if (iWrappedYOffset < 0)
; 298  : 	{
; 299  : 		if(iWrappedXOffset > 0)

	xor	edx, edx
	test	eax, eax
	setle	dl
	add	edx, 2
	mov	eax, edx

; 300  : 		{
; 301  : 			return DIRECTION_SOUTHEAST;
; 302  : 		}
; 303  : 		else
; 304  : 		{
; 305  : 			return DIRECTION_SOUTHWEST;
; 306  : 		}
; 307  : 	}
; 308  : }

	ret	0
?directionXY@@YA?AW4DirectionTypes@@HHHH@Z ENDP		; directionXY
_TEXT	ENDS
PUBLIC	?directionXY@@YA?AW4DirectionTypes@@PBVCvPlot@@0@Z ; directionXY
; Function compile flags: /Ogtpy
;	COMDAT ?directionXY@@YA?AW4DirectionTypes@@PBVCvPlot@@0@Z
_TEXT	SEGMENT
_pFromPlot$ = 8						; size = 4
_pToPlot$ = 12						; size = 4
?directionXY@@YA?AW4DirectionTypes@@PBVCvPlot@@0@Z PROC	; directionXY, COMDAT

; 312  : 	return directionXY(pFromPlot->getX(), pFromPlot->getY(),
; 313  : 	                   pToPlot->getX(), pToPlot->getY());

	mov	eax, DWORD PTR _pToPlot$[esp-4]
	movsx	ecx, WORD PTR [eax+2]
	movsx	edx, WORD PTR [eax]
	mov	eax, DWORD PTR _pFromPlot$[esp-4]
	push	ecx
	movsx	ecx, WORD PTR [eax+2]
	push	edx
	movsx	edx, WORD PTR [eax]
	push	ecx
	push	edx
	call	?directionXY@@YA?AW4DirectionTypes@@HHHH@Z ; directionXY
	add	esp, 16					; 00000010H

; 314  : 
; 315  : }

	ret	0
?directionXY@@YA?AW4DirectionTypes@@PBVCvPlot@@0@Z ENDP	; directionXY
_TEXT	ENDS
PUBLIC	??1CvAStar@@QAE@XZ				; CvAStar::~CvAStar
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
;	COMDAT ??1CvAStar@@QAE@XZ
_TEXT	SEGMENT
??1CvAStar@@QAE@XZ PROC					; CvAStar::~CvAStar, COMDAT
; _this$ = ecx

; 142  : 	DeInit();

	jmp	?DeInit@CvAStar@@QAEXXZ			; CvAStar::DeInit
??1CvAStar@@QAE@XZ ENDP					; CvAStar::~CvAStar
_TEXT	ENDS
PUBLIC	?GetBest@CvAStar@@IAEPAVCvAStarNode@@XZ		; CvAStar::GetBest
; Function compile flags: /Ogtpy
;	COMDAT ?GetBest@CvAStar@@IAEPAVCvAStarNode@@XZ
_TEXT	SEGMENT
?GetBest@CvAStar@@IAEPAVCvAStarNode@@XZ PROC		; CvAStar::GetBest, COMDAT
; _this$ = ecx

; 442  : {

	push	esi
	mov	esi, ecx
	push	edi

; 443  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 444  : 	CvAStarNode* temp;
; 445  : #endif
; 446  : 
; 447  : 	if(!m_pOpen)

	mov	edi, DWORD PTR [esi+84]
	test	edi, edi
	jne	SHORT $LN4@GetBest
	pop	edi

; 448  : 	{
; 449  : 		return NULL;

	xor	eax, eax
	pop	esi

; 485  : }

	ret	0
$LN4@GetBest:

; 450  : 	}
; 451  : 
; 452  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 453  : 	CvAStarNode* temp = m_pOpen;
; 454  : #else
; 455  : 	temp = m_pOpen;
; 456  : #endif
; 457  : 
; 458  : 	m_pOpen = temp->m_pNext;

	mov	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+84], eax

; 459  : 	if(m_pOpen != NULL)

	test	eax, eax
	je	SHORT $LN3@GetBest

; 460  : 	{
; 461  : 		m_pOpen->m_pPrev = NULL;

	mov	DWORD PTR [eax+32], 0

; 462  : 	}
; 463  : 	else

	jmp	SHORT $LN2@GetBest
$LN3@GetBest:

; 464  : 	{
; 465  : 		m_pOpenTail = NULL;

	mov	DWORD PTR [esi+88], 0
$LN2@GetBest:

; 466  : 	}
; 467  : 
; 468  : 	udFunc(udNotifyList, NULL, temp, ASNL_DELETEOPEN, m_pData);

	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN9@GetBest
	mov	ecx, DWORD PTR [esi+44]
	push	esi
	push	ecx
	push	2
	push	edi
	push	0
	call	eax
	add	esp, 20					; 00000014H
$LN9@GetBest:

; 469  : 
; 470  : 	temp->m_eCvAStarListType = CVASTARLIST_CLOSED;

	mov	DWORD PTR [edi+20], 1

; 471  : 
; 472  : 	temp->m_pNext = m_pClosed;

	mov	edx, DWORD PTR [esi+92]
	mov	DWORD PTR [edi+28], edx

; 473  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 474  : 	temp->m_pPrev = NULL;
; 475  : #endif
; 476  : 	if(m_pClosed != NULL)

	mov	eax, DWORD PTR [esi+92]
	test	eax, eax
	je	SHORT $LN1@GetBest

; 477  : 	{
; 478  : 		m_pClosed->m_pPrev = temp;

	mov	DWORD PTR [eax+32], edi
$LN1@GetBest:

; 479  : 	}
; 480  : 	m_pClosed = temp;
; 481  : 
; 482  : 	udFunc(udNotifyList, NULL, m_pClosed, ASNL_ADDCLOSED, m_pData);

	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+92], edi
	test	eax, eax
	je	SHORT $LN13@GetBest
	mov	ecx, DWORD PTR [esi+44]
	push	esi
	push	ecx
	push	3
	push	edi
	push	0
	call	eax
	add	esp, 20					; 00000014H
$LN13@GetBest:

; 483  : 
; 484  : 	return temp;

	mov	eax, edi
	pop	edi
	pop	esi

; 485  : }

	ret	0
?GetBest@CvAStar@@IAEPAVCvAStarNode@@XZ ENDP		; CvAStar::GetBest
_TEXT	ENDS
PUBLIC	?AddToOpen@CvAStar@@QAEXPAVCvAStarNode@@@Z	; CvAStar::AddToOpen
; Function compile flags: /Ogtpy
;	COMDAT ?AddToOpen@CvAStar@@QAEXPAVCvAStarNode@@@Z
_TEXT	SEGMENT
tv380 = -4						; size = 4
tv452 = 8						; size = 4
_addnode$ = 8						; size = 4
?AddToOpen@CvAStar@@QAEXPAVCvAStarNode@@@Z PROC		; CvAStar::AddToOpen, COMDAT
; _this$ = ecx

; 683  : {

	push	ecx
	push	ebx
	push	esi

; 684  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 685  : 	CvAStarNode* node;
; 686  : #endif
; 687  : 
; 688  : 	addnode->m_eCvAStarListType = CVASTARLIST_OPEN;

	mov	esi, DWORD PTR _addnode$[esp+8]
	xor	edx, edx
	mov	DWORD PTR [esi+20], edx

; 689  : 
; 690  : 	if(!m_pOpen)

	mov	ebx, DWORD PTR [ecx+84]
	cmp	ebx, edx
	jne	SHORT $LN21@AddToOpen

; 691  : 	{
; 692  : 		m_pOpen = addnode;

	mov	DWORD PTR [ecx+84], esi

; 693  : 		m_pOpenTail = addnode;

	mov	DWORD PTR [ecx+88], esi

; 694  : 		m_pOpen->m_pNext = NULL;

	mov	DWORD PTR [esi+28], edx

; 695  : 		m_pOpen->m_pPrev = NULL;

	mov	eax, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+32], edx

; 696  : 
; 697  : 		udFunc(udNotifyList, NULL, addnode, ASNL_STARTOPEN, m_pData);

	mov	eax, DWORD PTR [ecx+24]
	cmp	eax, edx
	je	$LN8@AddToOpen
	push	ecx
	mov	ecx, DWORD PTR [ecx+44]
	push	ecx
	push	1
	push	esi
	push	edx
	call	eax
	add	esp, 20					; 00000014H
	pop	esi
	pop	ebx

; 845  : 	}
; 846  : }

	pop	ecx
	ret	4
$LN21@AddToOpen:
	push	ebp

; 698  : 
; 699  : 		return;
; 700  : 	}
; 701  : #ifdef AUI_ASTAR_FIX_POSSIBLE_NULL_POINTERS
; 702  : 	else if (!m_pOpenTail)
; 703  : 	{
; 704  : 		CvAStarNode* temp = m_pOpen;
; 705  : 		while (temp->m_pNext)
; 706  : 		{
; 707  : 			temp = temp->m_pNext;
; 708  : 		}
; 709  : 		m_pOpenTail = temp;
; 710  : 	}
; 711  : 
; 712  : 	if (addnode->m_iTotalCost < m_pOpen->m_iTotalCost)
; 713  : #else
; 714  : 
; 715  : 	if(addnode->m_iTotalCost <= m_pOpen->m_iTotalCost)

	mov	ebp, DWORD PTR [ebx]
	push	edi
	mov	edi, DWORD PTR [esi]
	cmp	edi, ebp
	jg	SHORT $LN20@AddToOpen

; 716  : #endif
; 717  : 	{
; 718  : 		addnode->m_pNext = m_pOpen;

	mov	DWORD PTR [esi+28], ebx

; 719  : 		m_pOpen->m_pPrev = addnode;

	mov	eax, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+32], esi

; 720  : 		m_pOpen = addnode;
; 721  : 
; 722  : 		udFunc(udNotifyList, m_pOpen->m_pNext, m_pOpen, ASNL_STARTOPEN, m_pData);

	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [ecx+84], esi
	cmp	eax, edx
	je	$LN38@AddToOpen
	mov	edx, DWORD PTR [esi+28]
	push	ecx
	mov	ecx, DWORD PTR [ecx+44]
	push	ecx
	push	1
	push	esi
	push	edx
	call	eax
	add	esp, 20					; 00000014H
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx

; 845  : 	}
; 846  : }

	pop	ecx
	ret	4
$LN20@AddToOpen:

; 723  : 	}
; 724  : 	else if(addnode->m_iTotalCost >= m_pOpenTail->m_iTotalCost)

	mov	eax, DWORD PTR [ecx+88]
	mov	edx, DWORD PTR [eax]
	cmp	edi, edx
	jl	SHORT $LN18@AddToOpen

; 725  : 	{
; 726  : 		addnode->m_pPrev = m_pOpenTail;

	mov	DWORD PTR [esi+32], eax

; 727  : 		m_pOpenTail->m_pNext = addnode;

	mov	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax+28], esi

; 728  : 		m_pOpenTail = addnode;
; 729  : 
; 730  : 		udFunc(udNotifyList, addnode->m_pPrev, addnode, ASNL_ADDOPEN, m_pData);

	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [ecx+88], esi
	test	eax, eax
	je	$LN38@AddToOpen
	mov	edx, DWORD PTR [esi+32]
	push	ecx
	mov	ecx, DWORD PTR [ecx+44]
	push	ecx
	push	0
	push	esi
	push	edx
	call	eax
	add	esp, 20					; 00000014H
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx

; 845  : 	}
; 846  : }

	pop	ecx
	ret	4
$LN18@AddToOpen:

; 731  : 	}
; 732  : 	else if(abs(addnode->m_iTotalCost-m_pOpenTail->m_iTotalCost) < abs(addnode->m_iTotalCost-m_pOpen->m_iTotalCost))  //(addnode->m_iTotalCost > m_iOpenListAverage) // let's start at the end and work forwards

	mov	eax, edi
	sub	eax, edx
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR tv452[esp+16], eax
	mov	eax, edi
	sub	eax, ebp
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	edx, DWORD PTR tv452[esp+16]
	cmp	edx, eax
	jge	$LN16@AddToOpen

; 733  : 	{
; 734  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 735  : 		CvAStarNode* next = NULL;
; 736  : 		CvAStarNode* node = m_pOpenTail;
; 737  : #else
; 738  : 		CvAStarNode* next;
; 739  : 		node = m_pOpenTail;

	mov	ebx, DWORD PTR [ecx+88]
	mov	eax, ebx

; 740  : 		next = NULL;

	xor	edx, edx

; 741  : #endif
; 742  : 
; 743  : 		while(node)

	test	eax, eax
	je	SHORT $LN14@AddToOpen
$LL15@AddToOpen:

; 744  : 		{
; 745  : 			if(addnode->m_iTotalCost < node->m_iTotalCost)

	cmp	edi, DWORD PTR [eax]
	jge	SHORT $LN13@AddToOpen

; 746  : 			{
; 747  : 				next = node;

	mov	edx, eax

; 748  : 				node = node->m_pPrev;

	mov	eax, DWORD PTR [eax+32]
	test	eax, eax
	jne	SHORT $LL15@AddToOpen
$LN14@AddToOpen:

; 774  : 				}
; 775  : 
; 776  : 				return;
; 777  : 			}
; 778  : 		}
; 779  : 
; 780  : 		// we made it to the start of this list - insert it at the beginning - we shouldn't ever get here, but...
; 781  : 		next->m_pPrev = addnode;

	mov	DWORD PTR [edx+32], esi

; 782  : 		addnode->m_pNext = next;

	mov	DWORD PTR [esi+28], edx

; 783  : 		m_pOpen = addnode;
; 784  : 
; 785  : 		udFunc(udNotifyList, m_pOpen->m_pNext, m_pOpen, ASNL_STARTOPEN, m_pData);

	mov	edx, DWORD PTR [ecx+44]
	push	edx

; 843  : 
; 844  : 		udFunc(udNotifyList, prev, addnode, ASNL_ADDOPEN, m_pData);

	mov	edx, DWORD PTR [ecx+24]
	push	1
	mov	DWORD PTR [ecx+84], esi
	mov	eax, DWORD PTR [esi+28]
	push	esi
	push	eax
	push	edx
	call	?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z ; CvAStar::udFunc
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx

; 845  : 	}
; 846  : }

	pop	ecx
	ret	4
$LN13@AddToOpen:

; 749  : 			}
; 750  : 			else
; 751  : 			{
; 752  : 				if(next)

	test	edx, edx
	je	SHORT $LN11@AddToOpen

; 753  : 				{
; 754  : 					next->m_pPrev = addnode;

	mov	DWORD PTR [edx+32], esi

; 755  : 					addnode->m_pNext = next;

	mov	DWORD PTR [esi+28], edx

; 756  : 					addnode->m_pPrev = node;

	mov	DWORD PTR [esi+32], eax

; 757  : 					node->m_pNext = addnode;

	mov	DWORD PTR [eax+28], esi

; 758  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 759  : 					if(node->m_pNext == NULL)
; 760  : 					{
; 761  : 						m_pOpenTail = node;
; 762  : 					}
; 763  : #endif
; 764  : 
; 765  : 					udFunc(udNotifyList, addnode->m_pPrev, addnode, ASNL_ADDOPEN, m_pData);

	mov	eax, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR [esi+32]
	push	eax
	mov	eax, DWORD PTR [ecx+24]
	push	0
	push	esi
	push	edx
	push	eax

; 843  : 
; 844  : 		udFunc(udNotifyList, prev, addnode, ASNL_ADDOPEN, m_pData);

	call	?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z ; CvAStar::udFunc
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx

; 845  : 	}
; 846  : }

	pop	ecx
	ret	4
$LN11@AddToOpen:

; 766  : 				}
; 767  : 				else // we should just add it to the end of the list
; 768  : 				{
; 769  : 					addnode->m_pPrev = m_pOpenTail;

	mov	DWORD PTR [esi+32], ebx

; 770  : 					m_pOpenTail->m_pNext = addnode;

	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [edx+28], esi

; 771  : 					m_pOpenTail = addnode;
; 772  : 
; 773  : 					udFunc(udNotifyList, addnode->m_pPrev, addnode, ASNL_ADDOPEN, m_pData);

	mov	eax, DWORD PTR [ecx+44]
	push	eax
	mov	eax, DWORD PTR [ecx+24]
	push	0
	mov	DWORD PTR [ecx+88], esi
	mov	edx, DWORD PTR [esi+32]
	push	esi
	push	edx
	push	eax

; 843  : 
; 844  : 		udFunc(udNotifyList, prev, addnode, ASNL_ADDOPEN, m_pData);

	call	?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z ; CvAStar::udFunc
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx

; 845  : 	}
; 846  : }

	pop	ecx
	ret	4
$LN16@AddToOpen:

; 786  : 	}
; 787  : 	else // let's start at the beginning as it should be closer
; 788  : 	{
; 789  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 790  : 		CvAStarNode* node = m_pOpen;
; 791  : 		CvAStarNode* prev = NULL;
; 792  : #else
; 793  : 		CvAStarNode* prev;
; 794  : 		node = m_pOpen;

	mov	eax, ebx

; 795  : 		prev = NULL;

	xor	edx, edx
	npad	5
$LL7@AddToOpen:

; 796  : #endif
; 797  : 
; 798  : 		while(node)
; 799  : 		{
; 800  : #ifdef AUI_ASTAR_FIX_POSSIBLE_NULL_POINTERS
; 801  : 			if (addnode->m_iTotalCost >= node->m_iTotalCost)
; 802  : #else
; 803  : 			if(addnode->m_iTotalCost > node->m_iTotalCost)

	cmp	edi, DWORD PTR [eax]
	jle	SHORT $LN5@AddToOpen

; 804  : #endif
; 805  : 			{
; 806  : 				prev = node;

	mov	edx, eax

; 807  : 				node = node->m_pNext;

	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	jne	SHORT $LL7@AddToOpen

; 833  : 				}
; 834  : 
; 835  : 				return;
; 836  : 			}
; 837  : 		}
; 838  : 
; 839  : 		// we made it to the end of this list - insert it at the end - we shouldn't ever get here, but...
; 840  : 		prev->m_pNext = addnode;

	mov	DWORD PTR [edx+28], esi

; 841  : 		addnode->m_pPrev = prev;

	mov	DWORD PTR [esi+32], edx

; 842  : 		m_pOpenTail = addnode;

	mov	DWORD PTR [ecx+88], esi
$LN2@AddToOpen:

; 843  : 
; 844  : 		udFunc(udNotifyList, prev, addnode, ASNL_ADDOPEN, m_pData);

	mov	eax, DWORD PTR [ecx+44]
	push	eax
	push	0
	push	esi
	push	edx
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z ; CvAStar::udFunc
$LN38@AddToOpen:
	pop	edi
	pop	ebp
$LN8@AddToOpen:
	pop	esi
	pop	ebx

; 845  : 	}
; 846  : }

	pop	ecx
	ret	4
$LN5@AddToOpen:

; 808  : 			}
; 809  : 			else
; 810  : 			{
; 811  : 				if(prev)

	test	edx, edx
	je	SHORT $LN3@AddToOpen

; 812  : 				{
; 813  : 					prev->m_pNext = addnode;

	mov	DWORD PTR [edx+28], esi

; 814  : 					addnode->m_pPrev = prev;

	mov	DWORD PTR [esi+32], edx

; 815  : 					addnode->m_pNext = node;

	mov	DWORD PTR [esi+28], eax

; 816  : 					node->m_pPrev = addnode;
; 817  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 818  : 					if(node->m_pNext == NULL)

	cmp	DWORD PTR [eax+28], 0
	mov	DWORD PTR [eax+32], esi
	jne	SHORT $LN2@AddToOpen

; 819  : 					{
; 820  : 						m_pOpenTail = node;

	mov	DWORD PTR [ecx+88], eax

; 821  : 					}
; 822  : #endif
; 823  : 
; 824  : 					udFunc(udNotifyList, prev, addnode, ASNL_ADDOPEN, m_pData);
; 825  : 				}
; 826  : 				else

	jmp	SHORT $LN2@AddToOpen
$LN3@AddToOpen:

; 827  : 				{
; 828  : 					addnode->m_pNext = m_pOpen;

	mov	DWORD PTR [esi+28], ebx

; 829  : 					m_pOpen->m_pPrev = addnode;

	mov	eax, DWORD PTR [ecx+84]
	mov	DWORD PTR [eax+32], esi

; 830  : 					m_pOpen = addnode;
; 831  : 
; 832  : 					udFunc(udNotifyList, m_pOpen->m_pNext, m_pOpen, ASNL_STARTOPEN, m_pData);

	mov	edx, DWORD PTR [ecx+44]
	push	edx

; 843  : 
; 844  : 		udFunc(udNotifyList, prev, addnode, ASNL_ADDOPEN, m_pData);

	mov	edx, DWORD PTR [ecx+24]
	push	1
	mov	DWORD PTR [ecx+84], esi
	mov	eax, DWORD PTR [esi+28]
	push	esi
	push	eax
	push	edx
	call	?udFunc@CvAStar@@IAEHP6AHPAVCvAStarNode@@0HPBXPAV1@@Z00H1@Z ; CvAStar::udFunc
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx

; 845  : 	}
; 846  : }

	pop	ecx
	ret	4
?AddToOpen@CvAStar@@QAEXPAVCvAStarNode@@@Z ENDP		; CvAStar::AddToOpen
_TEXT	ENDS
PUBLIC	?UpdateParents@CvAStar@@IAEXPAVCvAStarNode@@@Z	; CvAStar::UpdateParents
; Function compile flags: /Ogtpy
;	COMDAT ?UpdateParents@CvAStar@@IAEXPAVCvAStarNode@@@Z
_TEXT	SEGMENT
_iNumChildren$ = 8					; size = 4
_node$ = 8						; size = 4
?UpdateParents@CvAStar@@IAEXPAVCvAStarNode@@@Z PROC	; CvAStar::UpdateParents, COMDAT
; _this$ = ecx

; 922  : {

	push	ebp

; 923  : 	CvAStarNode* kid;
; 924  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 925  : 	CvAStarNode* parent;
; 926  : #endif
; 927  : 	int iKnownCost;
; 928  : 	int iNumChildren;
; 929  : 	int i;
; 930  : 
; 931  : 	FAssert(m_pStackHead == NULL);
; 932  : 
; 933  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 934  : 	CvAStarNode* parent = node;
; 935  : #else
; 936  : 	parent = node;

	mov	ebp, DWORD PTR _node$[esp]
	push	edi
	mov	edi, ecx

; 937  : #endif
; 938  : 
; 939  : 	while(parent != NULL)

	test	ebp, ebp
	je	$LN32@UpdatePare
	push	ebx
	push	esi
$LL7@UpdatePare:

; 940  : 	{
; 941  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 942  : 		iNumChildren = parent->m_apChildren.size();
; 943  : #else
; 944  : 		iNumChildren = parent->m_iNumChildren;

	movsx	eax, WORD PTR [ebp+84]

; 945  : #endif
; 946  : 
; 947  : 		for(i = 0; i < iNumChildren; i++)

	xor	ebx, ebx
	mov	DWORD PTR _iNumChildren$[esp+12], eax
	test	eax, eax
	jle	$LN3@UpdatePare
$LL33@UpdatePare:

; 948  : 		{
; 949  : 			kid = parent->m_apChildren[i];

	mov	eax, DWORD PTR [ebp+40]
	mov	esi, DWORD PTR [eax+ebx*4]

; 950  : 
; 951  : 			iKnownCost = (parent->m_iKnownCost + udFunc(udCost, parent, kid, 0, m_pData));

	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [edi+44]
	test	eax, eax
	je	SHORT $LN14@UpdatePare
	push	edi
	push	ecx
	push	0
	push	esi
	push	ebp
	call	eax
	add	esp, 20					; 00000014H
	jmp	SHORT $LN15@UpdatePare
$LN14@UpdatePare:
	mov	eax, 1
$LN15@UpdatePare:
	mov	ecx, DWORD PTR [ebp+4]
	add	ecx, eax

; 952  : 
; 953  : 			if(iKnownCost < kid->m_iKnownCost)

	cmp	ecx, DWORD PTR [esi+4]
	jge	SHORT $LN4@UpdatePare

; 954  : 			{
; 955  : 				kid->m_iKnownCost = iKnownCost;
; 956  : 				kid->m_iTotalCost = kid->m_iKnownCost + kid->m_iHeuristicCost;

	mov	edx, DWORD PTR [esi+8]
	add	edx, ecx

; 957  : 				FAssert(parent->m_pParent != kid);
; 958  : 				kid->m_pParent = parent;
; 959  : 				if(kid->m_eCvAStarListType == CVASTARLIST_OPEN)

	cmp	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+24], ebp
	jne	SHORT $LN1@UpdatePare

; 960  : 				{
; 961  : 					UpdateOpenNode(kid);

	push	esi
	mov	ecx, edi
	call	?UpdateOpenNode@CvAStar@@IAEXPAVCvAStarNode@@@Z ; CvAStar::UpdateOpenNode
$LN1@UpdatePare:

; 962  : 				}
; 963  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 964  : 				else
; 965  : 				{
; 966  : 					Push(kid); // Kid cannot be a parent if it's in the open list, since adding children goes through GetBest(), which adds the node to the closed list
; 967  : 				}
; 968  : #endif
; 969  : 				udFunc(udNotifyChild, parent, kid, ASNC_PARENTADD_UP, m_pData);

	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN18@UpdatePare
	mov	ecx, DWORD PTR [edi+44]
	push	edi
	push	ecx
	push	3
	push	esi
	push	ebp
	call	eax
	add	esp, 20					; 00000014H
$LN18@UpdatePare:

; 970  : 
; 971  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 972  : 				Push(kid);

	cmp	BYTE PTR [esi+86], 0
	jne	SHORT $LN4@UpdatePare
	mov	eax, DWORD PTR [edi+100]
	test	eax, eax
	jne	SHORT $LN21@UpdatePare
	movsx	eax, WORD PTR [esi+82]
	movsx	edx, WORD PTR [esi+80]
	mov	ecx, DWORD PTR [edi+104]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 5
	add	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [edi+100], eax
	jmp	SHORT $LN20@UpdatePare
$LN21@UpdatePare:
	mov	DWORD PTR [esi+36], eax
	mov	DWORD PTR [edi+100], esi
$LN20@UpdatePare:
	mov	BYTE PTR [esi+86], 1
$LN4@UpdatePare:

; 945  : #endif
; 946  : 
; 947  : 		for(i = 0; i < iNumChildren; i++)

	inc	ebx
	cmp	ebx, DWORD PTR _iNumChildren$[esp+12]
	jl	$LL33@UpdatePare
$LN3@UpdatePare:

; 973  : #endif
; 974  : 			}
; 975  : 		}
; 976  : 
; 977  : 		parent = Pop();

	mov	ebp, DWORD PTR [edi+100]
	test	ebp, ebp
	je	SHORT $LN34@UpdatePare
	mov	ecx, DWORD PTR [ebp+36]
	mov	DWORD PTR [edi+100], ecx
	mov	DWORD PTR [ebp+36], 0
	mov	BYTE PTR [ebp+86], 0
	jmp	$LL7@UpdatePare
$LN34@UpdatePare:
	pop	esi
	pop	ebx
$LN32@UpdatePare:
	pop	edi
	pop	ebp

; 978  : 	}
; 979  : }

	ret	4
?UpdateParents@CvAStar@@IAEXPAVCvAStarNode@@@Z ENDP	; CvAStar::UpdateParents
_TEXT	ENDS
PUBLIC	?PathDest@@YAHHHPBXPAVCvAStar@@@Z		; PathDest
; Function compile flags: /Ogtpy
;	COMDAT ?PathDest@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?PathDest@@YAHHHPBXPAVCvAStar@@@Z PROC			; PathDest, COMDAT

; 1114 : 	if(iToX == finder->GetDestX() && iToY == finder->GetDestY())

	mov	eax, DWORD PTR _finder$[esp-4]
	mov	ecx, DWORD PTR _iToX$[esp-4]
	cmp	ecx, DWORD PTR [eax+64]
	jne	SHORT $LN2@PathDest
	mov	edx, DWORD PTR _iToY$[esp-4]
	cmp	edx, DWORD PTR [eax+68]
	jne	SHORT $LN2@PathDest

; 1115 : 	{
; 1116 : #ifdef AUI_WARNING_FIXES
; 1117 : 		return TRUE;
; 1118 : #else
; 1119 : 		return true;

	mov	eax, 1

; 1128 : #endif
; 1129 : 	}
; 1130 : }

	ret	0
$LN2@PathDest:

; 1120 : #endif
; 1121 : 	}
; 1122 : 	else
; 1123 : 	{
; 1124 : #ifdef AUI_WARNING_FIXES
; 1125 : 		return FALSE;
; 1126 : #else
; 1127 : 		return false;

	xor	eax, eax

; 1128 : #endif
; 1129 : 	}
; 1130 : }

	ret	0
?PathDest@@YAHHHPBXPAVCvAStar@@@Z ENDP			; PathDest
_TEXT	ENDS
PUBLIC	?PathHeuristic@@YAHHHHH@Z			; PathHeuristic
; Function compile flags: /Ogtpy
;	COMDAT ?PathHeuristic@@YAHHHHH@Z
_TEXT	SEGMENT
_iFromX$ = 8						; size = 4
_iFromY$ = 12						; size = 4
_iToX$ = 16						; size = 4
_iToY$ = 20						; size = 4
?PathHeuristic@@YAHHHHH@Z PROC				; PathHeuristic, COMDAT

; 1272 : 	return (plotDistance(iFromX, iFromY, iToX, iToY) * PATH_MOVEMENT_WEIGHT);

	mov	eax, DWORD PTR _iToY$[esp-4]
	mov	ecx, DWORD PTR _iToX$[esp-4]
	mov	edx, DWORD PTR _iFromY$[esp-4]
	push	eax
	mov	eax, DWORD PTR _iFromX$[esp]
	push	ecx
	push	edx
	push	eax
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	imul	eax, 1000				; 000003e8H
	add	esp, 16					; 00000010H

; 1273 : }

	ret	0
?PathHeuristic@@YAHHHHH@Z ENDP				; PathHeuristic
_TEXT	ENDS
PUBLIC	?StepHeuristic@@YAHHHHH@Z			; StepHeuristic
; Function compile flags: /Ogtpy
;	COMDAT ?StepHeuristic@@YAHHHHH@Z
_TEXT	SEGMENT
_iFromX$ = 8						; size = 4
_iFromY$ = 12						; size = 4
_iToX$ = 16						; size = 4
_iToY$ = 20						; size = 4
?StepHeuristic@@YAHHHHH@Z PROC				; StepHeuristic, COMDAT

; 3107 : 	return plotDistance(iFromX, iFromY, iToX, iToY);

	jmp	?plotDistance@@YAHHHHH@Z		; plotDistance
?StepHeuristic@@YAHHHHH@Z ENDP				; StepHeuristic
_TEXT	ENDS
PUBLIC	?InfluenceHeuristic@@YAHHHHH@Z			; InfluenceHeuristic
; Function compile flags: /Ogtpy
;	COMDAT ?InfluenceHeuristic@@YAHHHHH@Z
_TEXT	SEGMENT
_iFromX$ = 8						; size = 4
_iFromY$ = 12						; size = 4
_iToX$ = 16						; size = 4
_iToY$ = 20						; size = 4
?InfluenceHeuristic@@YAHHHHH@Z PROC			; InfluenceHeuristic, COMDAT

; 3314 : 	return plotDistance(iFromX, iFromY, iToX, iToY);

	jmp	?plotDistance@@YAHHHHH@Z		; plotDistance
?InfluenceHeuristic@@YAHHHHH@Z ENDP			; InfluenceHeuristic
_TEXT	ENDS
PUBLIC	??0CvTwoLayerPathFinder@@QAE@XZ			; CvTwoLayerPathFinder::CvTwoLayerPathFinder
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvTwoLayerPathFinder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvTwoLayerPathFinder@@QAE@XZ$0
__ehfuncinfo$??0CvTwoLayerPathFinder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvTwoLayerPathFinder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0CvTwoLayerPathFinder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -644						; size = 4
$T222762 = -640						; size = 628
__$EHRec$ = -12						; size = 12
??0CvTwoLayerPathFinder@@QAE@XZ PROC			; CvTwoLayerPathFinder::CvTwoLayerPathFinder, COMDAT
; _this$ = ecx

; 3989 : {

	push	-1
	push	__ehhandler$??0CvTwoLayerPathFinder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 632				; 00000278H
	push	ebx
	xor	ebx, ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+652], esi
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], ebx
	mov	DWORD PTR [esi+20], ebx
	mov	DWORD PTR [esi+24], ebx
	mov	DWORD PTR [esi+28], ebx
	mov	DWORD PTR [esi+32], ebx
	mov	DWORD PTR [esi+36], ebx
	mov	DWORD PTR [esi+40], ebx
	mov	DWORD PTR [esi+44], ebx
	mov	DWORD PTR [esi+84], ebx
	mov	DWORD PTR [esi+88], ebx
	mov	DWORD PTR [esi+92], ebx
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+100], ebx
	mov	DWORD PTR [esi+104], ebx
	mov	BYTE PTR [esi+79], bl
	mov	BYTE PTR [esi+80], bl

; 3990 : #ifdef AUI_WARNING_FIXES
; 3991 : 	this->CvAStar::CvAStar();
; 3992 : #else
; 3993 : 	CvAStar::CvAStar();

	lea	ecx, DWORD PTR $T222762[esp+652]
	mov	DWORD PTR __$EHRec$[esp+660], ebx
	mov	DWORD PTR $T222762[esp+652], ebx
	mov	DWORD PTR $T222762[esp+656], ebx
	mov	DWORD PTR $T222762[esp+660], ebx
	mov	DWORD PTR $T222762[esp+664], ebx
	mov	DWORD PTR $T222762[esp+668], ebx
	mov	DWORD PTR $T222762[esp+672], ebx
	mov	DWORD PTR $T222762[esp+676], ebx
	mov	DWORD PTR $T222762[esp+680], ebx
	mov	DWORD PTR $T222762[esp+684], ebx
	mov	DWORD PTR $T222762[esp+688], ebx
	mov	DWORD PTR $T222762[esp+692], ebx
	mov	DWORD PTR $T222762[esp+696], ebx
	mov	DWORD PTR $T222762[esp+736], ebx
	mov	DWORD PTR $T222762[esp+740], ebx
	mov	DWORD PTR $T222762[esp+744], ebx
	mov	DWORD PTR $T222762[esp+748], ebx
	mov	DWORD PTR $T222762[esp+752], ebx
	mov	DWORD PTR $T222762[esp+756], ebx
	mov	BYTE PTR $T222762[esp+731], bl
	mov	BYTE PTR $T222762[esp+732], bl
	call	?DeInit@CvAStar@@QAEXXZ			; CvAStar::DeInit

; 3994 : #endif
; 3995 : 	m_ppaaPartialMoveNodes = NULL;
; 3996 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+652]
	mov	DWORD PTR [esi+628], ebx
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 644				; 00000284H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvTwoLayerPathFinder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
__ehhandler$??0CvTwoLayerPathFinder@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0CvTwoLayerPathFinder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvTwoLayerPathFinder@@QAE@XZ ENDP			; CvTwoLayerPathFinder::CvTwoLayerPathFinder
PUBLIC	?GetPathLength@CvIgnoreUnitsPathFinder@@QAEHXZ	; CvIgnoreUnitsPathFinder::GetPathLength
; Function compile flags: /Ogtpy
;	COMDAT ?GetPathLength@CvIgnoreUnitsPathFinder@@QAEHXZ
_TEXT	SEGMENT
?GetPathLength@CvIgnoreUnitsPathFinder@@QAEHXZ PROC	; CvIgnoreUnitsPathFinder::GetPathLength, COMDAT
; _this$ = ecx

; 4384 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4385 : 	CvAStarNode* pNode = GetLastNode();
; 4386 : 	if (pNode != NULL)
; 4387 : 	{
; 4388 : 		return pNode->m_iData2;
; 4389 : 	}
; 4390 : 
; 4391 : 	return MAX_INT;
; 4392 : #else
; 4393 : 	int iPathDistance = MAX_INT;
; 4394 : 
; 4395 : 	CvAStarNode* pNode = GetLastNode();

	mov	ecx, DWORD PTR [ecx+96]
	mov	eax, 2147483647				; 7fffffffH

; 4396 : 	if(pNode != NULL)

	test	ecx, ecx
	je	SHORT $LN1@GetPathLen

; 4397 : 	{
; 4398 : 		iPathDistance = pNode->m_iData2;
; 4399 : 	}
; 4400 : 
; 4401 : 	return iPathDistance;

	mov	eax, DWORD PTR [ecx+16]
$LN1@GetPathLen:

; 4402 : #endif
; 4403 : }

	ret	0
?GetPathLength@CvIgnoreUnitsPathFinder@@QAEHXZ ENDP	; CvIgnoreUnitsPathFinder::GetPathLength
_TEXT	ENDS
PUBLIC	?TradeRouteHeuristic@@YAHHHHH@Z			; TradeRouteHeuristic
; Function compile flags: /Ogtpy
;	COMDAT ?TradeRouteHeuristic@@YAHHHHH@Z
_TEXT	SEGMENT
_iFromX$ = 8						; size = 4
_iFromY$ = 12						; size = 4
_iToX$ = 16						; size = 4
_iToY$ = 20						; size = 4
?TradeRouteHeuristic@@YAHHHHH@Z PROC			; TradeRouteHeuristic, COMDAT

; 5740 : 	return plotDistance(iFromX, iFromY, iToX, iToY) * 100;

	mov	eax, DWORD PTR _iToY$[esp-4]
	mov	ecx, DWORD PTR _iToX$[esp-4]
	mov	edx, DWORD PTR _iFromY$[esp-4]
	push	eax
	mov	eax, DWORD PTR _iFromX$[esp]
	push	ecx
	push	edx
	push	eax
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	imul	eax, 100				; 00000064H
	add	esp, 16					; 00000010H

; 5741 : }

	ret	0
?TradeRouteHeuristic@@YAHHHHH@Z ENDP			; TradeRouteHeuristic
_TEXT	ENDS
PUBLIC	?GetTurnDest@CvPathNodeArray@@QAEPBVCvPathNode@@H@Z ; CvPathNodeArray::GetTurnDest
; Function compile flags: /Ogtpy
;	COMDAT ?GetTurnDest@CvPathNodeArray@@QAEPBVCvPathNode@@H@Z
_TEXT	SEGMENT
_iTurn$ = 8						; size = 4
?GetTurnDest@CvPathNodeArray@@QAEPBVCvPathNode@@H@Z PROC ; CvPathNodeArray::GetTurnDest, COMDAT
; _this$ = ecx

; 6040 : 	for (uint i = size(); i--; )

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	je	SHORT $LN18@GetTurnDes
	mov	eax, edx
	shl	eax, 4
	add	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iTurn$[esp-4]
$LL6@GetTurnDes:
	dec	edx
	sub	eax, 16					; 00000010H

; 6041 : 	{
; 6042 : 		const CvPathNode& kNode = at(i);
; 6043 : 		if (i == 0)

	test	edx, edx
	je	SHORT $LN16@GetTurnDes

; 6047 : 				return &kNode;
; 6048 : 			return NULL;
; 6049 : 		}
; 6050 : 		else
; 6051 : 		{
; 6052 : 			// Is this node the correct turn and the next node is a turn after it?
; 6053 : 			if (kNode.m_iData2 == iTurn && at(i-1).m_iData2 > iTurn)

	cmp	DWORD PTR [eax+4], ecx
	jne	SHORT $LL6@GetTurnDes
	cmp	DWORD PTR [eax-12], ecx
	jle	SHORT $LL6@GetTurnDes

; 6059 : }

	ret	4
$LN16@GetTurnDes:

; 6044 : 		{
; 6045 : 			// Last node, only return it if it is the desired turn
; 6046 : 			if (kNode.m_iData2 == iTurn)

	xor	edx, edx
	cmp	DWORD PTR [eax+4], ecx
	setne	dl
	dec	edx
	and	eax, edx

; 6059 : }

	ret	4
$LN18@GetTurnDes:

; 6054 : 				return &kNode;
; 6055 : 		}
; 6056 : 	}
; 6057 : 
; 6058 : 	return NULL;

	xor	eax, eax

; 6059 : }

	ret	4
?GetTurnDest@CvPathNodeArray@@QAEPBVCvPathNode@@H@Z ENDP ; CvPathNodeArray::GetTurnDest
_TEXT	ENDS
PUBLIC	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
EXTRN	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ:PROC ; CvUnit::getDestructionNotification
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
;	COMDAT ??1?$FObjectHandle@VCvUnit@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ PROC		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 147  : 		if(m_target) 

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN4@FObjectHan

; 148  : 		{
; 149  : 			m_target->getDestructionNotification().removeTarget(*this);

	jmp	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN4@FObjectHan:

; 150  : 		}
; 151  : 	}

	ret	0
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ ENDP		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
_TEXT	ENDS
PUBLIC	??0?$FObjectHandle@VCvUnit@@@@QAE@ABV0@@Z	; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FObjectHandle@VCvUnit@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0?$FObjectHandle@VCvUnit@@@@QAE@ABV0@@Z PROC		; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 222  : 	{

	mov	eax, DWORD PTR _source$[esp-4]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi], ecx
	mov	dl, BYTE PTR [eax+4]
	mov	BYTE PTR [esi+4], dl

; 223  : 		OBJECT_HANDLE_STACK;
; 224  : 		if(m_target)

	test	ecx, ecx
	je	SHORT $LN6@FObjectHan@2

; 225  : 		{
; 226  : 			m_target->getDestructionNotification().addTarget(*this);

	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN6@FObjectHan@2:

; 227  : 		}
; 228  : 	}

	mov	eax, esi
	pop	esi
	ret	4
??0?$FObjectHandle@VCvUnit@@@@QAE@ABV0@@Z ENDP		; FObjectHandle<CvUnit>::FObjectHandle<CvUnit>
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>, COMDAT
; _this$ = ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN3@auto_ptr
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	call	edx
$LN3@auto_ptr:

; 722  : 		}

	ret	0
??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
_TEXT	ENDS
PUBLIC	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ PROC		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>, COMDAT
; _this$ = ecx

; 721  : 		delete _Myptr;

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN3@auto_ptr@2
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	eax
	call	edx
$LN3@auto_ptr@2:

; 722  : 		}

	ret	0
??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ ENDP		; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
_TEXT	ENDS
PUBLIC	?Alloc@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEPAVCvPathNode@@I@Z ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::Alloc
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Alloc@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEPAVCvPathNode@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEPAVCvPathNode@@I@Z PROC ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::Alloc, COMDAT
; _this$ = ecx

; 503  : 	T* Alloc( unsigned int uiSize ){

	push	esi

; 504  : 		if( uiSize > 0 ){

	mov	esi, DWORD PTR _uiSize$[esp]
	push	edi
	mov	edi, ecx
	test	esi, esi
	jbe	SHORT $LN1@Alloc@2

; 505  :             
; 506  :             T* pRet = (T*)FAST_VEC_ALLOC::AllocAligned( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	85					; 00000055H
	push	OFFSET ??_C@_0IJ@DONJGAGH@c?3?2users?2enormousapplepie?2deskto@
	mov	eax, esi
	shl	eax, 4
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 507  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [edi+8], esi
	pop	edi
	pop	esi

; 511  : 	};

	ret	4
$LN1@Alloc@2:
	pop	edi

; 508  : 			return pRet;
; 509  : 		}
; 510  : 		return NULL;

	xor	eax, eax
	pop	esi

; 511  : 	};

	ret	4
?Alloc@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEPAVCvPathNode@@I@Z ENDP ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::Alloc
_TEXT	ENDS
PUBLIC	?Free@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXPAVCvPathNode@@I@Z ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXPAVCvPathNode@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXPAVCvPathNode@@I@Z PROC ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::Free, COMDAT
; _this$ = ecx

; 516  : 		if( !bPODType) 
; 517  :             Destroy(pVal, uiNumElements);
; 518  : 
; 519  : 		FAST_VEC_ALLOC::FreeAligned( (void*)pVal );

	mov	eax, DWORD PTR _pVal$[esp-4]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx

; 520  : 	};

	ret	8
?Free@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXPAVCvPathNode@@I@Z ENDP ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::Free
_TEXT	ENDS
PUBLIC	??$?BVICvPlot1@@@?$auto_ptr@VICvPlot1@@@std@@QAE?AU?$auto_ptr_ref@VICvPlot1@@@1@XZ ; std::auto_ptr<ICvPlot1>::operator<ICvPlot1> std::auto_ptr_ref<ICvPlot1>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$?BVICvPlot1@@@?$auto_ptr@VICvPlot1@@@std@@QAE?AU?$auto_ptr_ref@VICvPlot1@@@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$?BVICvPlot1@@@?$auto_ptr@VICvPlot1@@@std@@QAE?AU?$auto_ptr_ref@VICvPlot1@@@1@XZ PROC ; std::auto_ptr<ICvPlot1>::operator<ICvPlot1> std::auto_ptr_ref<ICvPlot1>, COMDAT
; _this$ = ecx

; 684  : 		{	// convert to compatible auto_ptr_ref
; 685  : 		_Other *_Cvtptr = _Myptr;	// test implicit conversion
; 686  : 		auto_ptr_ref<_Other> _Ans(_Cvtptr);

	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 687  : 		_Myptr = 0;	// pass ownership to auto_ptr_ref

	mov	DWORD PTR [ecx], 0

; 688  : 		return (_Ans);
; 689  : 		}

	ret	4
??$?BVICvPlot1@@@?$auto_ptr@VICvPlot1@@@std@@QAE?AU?$auto_ptr_ref@VICvPlot1@@@1@XZ ENDP ; std::auto_ptr<ICvPlot1>::operator<ICvPlot1> std::auto_ptr_ref<ICvPlot1>
_TEXT	ENDS
PUBLIC	?isEmbarked@CvUnit@@QBE_NXZ			; CvUnit::isEmbarked
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvunit.h
;	COMDAT ?isEmbarked@CvUnit@@QBE_NXZ
_TEXT	SEGMENT
?isEmbarked@CvUnit@@QBE_NXZ PROC			; CvUnit::isEmbarked, COMDAT
; _this$ = ecx

; 257  : 		return m_bEmbarked;

	mov	al, BYTE PTR [ecx+1652]

; 258  : 	}

	ret	0
?isEmbarked@CvUnit@@QBE_NXZ ENDP			; CvUnit::isEmbarked
_TEXT	ENDS
PUBLIC	?GetID@CvUnit@@QBEHXZ				; CvUnit::GetID
; Function compile flags: /Ogtpy
;	COMDAT ?GetID@CvUnit@@QBEHXZ
_TEXT	SEGMENT
?GetID@CvUnit@@QBEHXZ PROC				; CvUnit::GetID, COMDAT
; _this$ = ecx

; 662  : 		return m_iID;

	mov	eax, DWORD PTR [ecx+100]

; 663  : 	}

	ret	0
?GetID@CvUnit@@QBEHXZ ENDP				; CvUnit::GetID
_TEXT	ENDS
PUBLIC	?getX@CvUnit@@QBEHXZ				; CvUnit::getX
; Function compile flags: /Ogtpy
;	COMDAT ?getX@CvUnit@@QBEHXZ
_TEXT	SEGMENT
?getX@CvUnit@@QBEHXZ PROC				; CvUnit::getX, COMDAT
; _this$ = ecx

; 673  : 		return m_iX.get();

	mov	eax, DWORD PTR [ecx+76]

; 674  : 	}

	ret	0
?getX@CvUnit@@QBEHXZ ENDP				; CvUnit::getX
_TEXT	ENDS
PUBLIC	?getY@CvUnit@@QBEHXZ				; CvUnit::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvUnit@@QBEHXZ
_TEXT	SEGMENT
?getY@CvUnit@@QBEHXZ PROC				; CvUnit::getY, COMDAT
; _this$ = ecx

; 678  : 		return m_iY.get();

	mov	eax, DWORD PTR [ecx+88]

; 679  : 	}

	ret	0
?getY@CvUnit@@QBEHXZ ENDP				; CvUnit::getY
_TEXT	ENDS
PUBLIC	?getOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ	; CvUnit::getOwner
; Function compile flags: /Ogtpy
;	COMDAT ?getOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ PROC		; CvUnit::getOwner, COMDAT
; _this$ = ecx

; 1046 : 		return m_eOwner.get();

	mov	eax, DWORD PTR [ecx+40]

; 1047 : 	}

	ret	0
?getOwner@CvUnit@@QBE?AW4PlayerTypes@@XZ ENDP		; CvUnit::getOwner
_TEXT	ENDS
PUBLIC	?IsCombatUnit@CvUnit@@QBE_NXZ			; CvUnit::IsCombatUnit
; Function compile flags: /Ogtpy
;	COMDAT ?IsCombatUnit@CvUnit@@QBE_NXZ
_TEXT	SEGMENT
?IsCombatUnit@CvUnit@@QBE_NXZ PROC			; CvUnit::IsCombatUnit, COMDAT
; _this$ = ecx

; 1243 : 		return (m_iBaseCombat > 0);

	xor	eax, eax
	cmp	DWORD PTR [ecx+1044], eax
	setg	al

; 1244 : 	}

	ret	0
?IsCombatUnit@CvUnit@@QBE_NXZ ENDP			; CvUnit::IsCombatUnit
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT
; _p$ = eax

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 302  : }

	ret	0
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1

; 302  : }

	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
PUBLIC	?getX@CvCity@@QBEHXZ				; CvCity::getX
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
;	COMDAT ?getX@CvCity@@QBEHXZ
_TEXT	SEGMENT
?getX@CvCity@@QBEHXZ PROC				; CvCity::getX, COMDAT
; _this$ = ecx

; 340  : 		return m_iX;

	mov	eax, DWORD PTR [ecx+96]

; 341  : 	}

	ret	0
?getX@CvCity@@QBEHXZ ENDP				; CvCity::getX
_TEXT	ENDS
PUBLIC	?getY@CvCity@@QBEHXZ				; CvCity::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvCity@@QBEHXZ
_TEXT	SEGMENT
?getY@CvCity@@QBEHXZ PROC				; CvCity::getY, COMDAT
; _this$ = ecx

; 345  : 		return m_iY;

	mov	eax, DWORD PTR [ecx+108]

; 346  : 	}

	ret	0
?getY@CvCity@@QBEHXZ ENDP				; CvCity::getY
_TEXT	ENDS
PUBLIC	?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ	; CvCity::getOwner
; Function compile flags: /Ogtpy
;	COMDAT ?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ PROC		; CvCity::getOwner, COMDAT
; _this$ = ecx

; 604  : 		return m_eOwner;

	mov	eax, DWORD PTR [ecx+84]

; 605  : 	}

	ret	0
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ ENDP		; CvCity::getOwner
_TEXT	ENDS
PUBLIC	?getTeam@CvPlayer@@SA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPlayer::getTeam
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
;	COMDAT ?getTeam@CvPlayer@@SA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayerID$ = 8						; size = 4
?getTeam@CvPlayer@@SA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPlayer::getTeam, COMDAT

; 1173 : 		return CvPreGame::teamType(ePlayerID);

	mov	eax, DWORD PTR _ePlayerID$[esp-4]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN3@getTeam
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 1174 : 	}

	ret	0

; 1173 : 		return CvPreGame::teamType(ePlayerID);

$LN3@getTeam:
	or	eax, -1

; 1174 : 	}

	ret	0
?getTeam@CvPlayer@@SA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPlayer::getTeam
_TEXT	ENDS
PUBLIC	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ		; CvPlayer::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ PROC		; CvPlayer::getTeam, COMDAT
; _this$ = ecx

; 1178 : 		return CvPreGame::teamType(m_eID);

	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN5@getTeam@2
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 1179 : 	}

	ret	0

; 1178 : 		return CvPreGame::teamType(m_eID);

$LN5@getTeam@2:
	or	eax, -1

; 1179 : 	}

	ret	0
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ ENDP		; CvPlayer::getTeam
_TEXT	ENDS
PUBLIC	?isVisible@CvPlot@@QBE_NW4TeamTypes@@@Z		; CvPlot::isVisible
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?isVisible@CvPlot@@QBE_NW4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?isVisible@CvPlot@@QBE_NW4TeamTypes@@@Z PROC		; CvPlot::isVisible, COMDAT
; _this$ = ecx

; 210  : 		if(eTeam == NO_TEAM)

	mov	eax, DWORD PTR _eTeam$[esp-4]
	cmp	eax, -1
	jne	SHORT $LN1@isVisible

; 211  : 			return false;

	xor	al, al

; 214  : 	}

	ret	4
$LN1@isVisible:

; 212  : 
; 213  : 		return ((getVisibilityCount(eTeam) > 0));

	mov	ecx, DWORD PTR [ecx+156]
	xor	edx, edx
	cmp	WORD PTR [ecx+eax*2], dx
	setg	dl
	mov	al, dl

; 214  : 	}

	ret	4
?isVisible@CvPlot@@QBE_NW4TeamTypes@@@Z ENDP		; CvPlot::isVisible
_TEXT	ENDS
PUBLIC	?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ		; CvPlot::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ PROC		; CvPlot::getTeam, COMDAT
; _this$ = ecx

; 232  : 		PlayerTypes playerID = getOwner();

	movsx	eax, BYTE PTR [ecx+4]

; 233  : 		if(playerID != NO_PLAYER)

	cmp	eax, -1
	je	SHORT $LN2@getTeam@3

; 234  : 		{
; 235  : 			return CvPlayer::getTeam(playerID);

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN2@getTeam@3
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 240  : 		}
; 241  : 	}

	ret	0
$LN2@getTeam@3:

; 236  : 		}
; 237  : 		else
; 238  : 		{
; 239  : 			return NO_TEAM;

	or	eax, -1

; 240  : 		}
; 241  : 	}

	ret	0
?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ ENDP		; CvPlot::getTeam
_TEXT	ENDS
PUBLIC	?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z		; CvPlot::isEnemyCity
EXTRN	?isEnemy@CvUnit@@QBE_NW4TeamTypes@@PBVCvPlot@@@Z:PROC ; CvUnit::isEnemy
EXTRN	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ:PROC	; CvCity::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z
_TEXT	SEGMENT
_kUnit$ = 8						; size = 4
?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z PROC		; CvPlot::isEnemyCity, COMDAT
; _this$ = ecx

; 252  : 	{

	push	esi
	mov	esi, ecx

; 253  : 		CvCity* pCity = getPlotCity();

	mov	eax, DWORD PTR [esi+104]
	test	eax, eax
	jl	SHORT $LN1@isEnemyCit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@isEnemyCit
	mov	ecx, DWORD PTR [esi+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 254  : 		if(pCity != NULL)

	test	eax, eax
	je	SHORT $LN1@isEnemyCit

; 255  : 			return kUnit.isEnemy(pCity->getTeam(), this);

	push	esi
	mov	ecx, eax
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	mov	ecx, DWORD PTR _kUnit$[esp+4]
	push	eax
	call	?isEnemy@CvUnit@@QBE_NW4TeamTypes@@PBVCvPlot@@@Z ; CvUnit::isEnemy
	pop	esi

; 258  : 	}

	ret	4
$LN1@isEnemyCit:

; 256  : 
; 257  : 		return false;

	xor	al, al
	pop	esi

; 258  : 	}

	ret	4
?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z ENDP		; CvPlot::isEnemyCity
_TEXT	ENDS
PUBLIC	?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ	; CvPlot::getFeatureType
; Function compile flags: /Ogtpy
;	COMDAT ?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ
_TEXT	SEGMENT
?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ PROC	; CvPlot::getFeatureType, COMDAT
; _this$ = ecx

; 435  : #ifdef AUI_WARNING_FIXES
; 436  : 		int f = m_eFeatureType;
; 437  : #else
; 438  : 		char f = m_eFeatureType;
; 439  : #endif
; 440  : 		return (FeatureTypes)f;

	movsx	eax, BYTE PTR [ecx+432]

; 441  : 	}

	ret	0
?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ ENDP	; CvPlot::getFeatureType
_TEXT	ENDS
PUBLIC	?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z	; CvPlot::isRevealed
; Function compile flags: /Ogtpy
;	COMDAT ?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z PROC		; CvPlot::isRevealed, COMDAT
; _this$ = ecx

; 620  : 	{

	mov	edx, ecx

; 621  : 		CvAssertMsg(eTeam >= 0, "eTeam is expected to be non-negative (invalid Index)");
; 622  : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is expected to be within maximum bounds (invalid Index)");
; 623  : 		return m_bfRevealed.GetBit(eTeam);

	mov	ecx, DWORD PTR _eTeam$[esp-4]
	push	esi
	mov	eax, ecx
	shr	eax, 5
	mov	esi, eax
	shl	esi, 5
	sub	ecx, esi
	mov	esi, 1
	shl	esi, cl
	test	esi, DWORD PTR [edx+eax*4+8]
	pop	esi
	setne	al

; 624  : 	}

	ret	4
?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z ENDP		; CvPlot::isRevealed
_TEXT	ENDS
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	mov	eax, DWORD PTR _iX$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4020]
	jge	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _iY$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4024]
	jge	SHORT $LN3@isPlot
	mov	eax, 1

; 161  : #endif
; 162  : 	}

	ret	8
$LN3@isPlot:

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	xor	eax, eax

; 161  : #endif
; 162  : 	}

	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
_TEXT	ENDS
PUBLIC	?plotNum@CvMap@@QBEHHH@Z			; CvMap::plotNum
; Function compile flags: /Ogtpy
;	COMDAT ?plotNum@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plotNum@CvMap@@QBEHHH@Z PROC				; CvMap::plotNum, COMDAT
; _this$ = ecx

; 183  : 		return ((iY * getGridWidth()) + iX);

	mov	eax, DWORD PTR [ecx+4020]
	imul	eax, DWORD PTR _iY$[esp-4]
	add	eax, DWORD PTR _iX$[esp-4]

; 184  : #endif
; 185  : 	}

	ret	8
?plotNum@CvMap@@QBEHHH@Z ENDP				; CvMap::plotNum
_TEXT	ENDS
PUBLIC	?plot@CvMap@@QBEPAVCvPlot@@HH@Z			; CvMap::plot
; Function compile flags: /Ogtpy
;	COMDAT ?plot@CvMap@@QBEPAVCvPlot@@HH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plot@CvMap@@QBEPAVCvPlot@@HH@Z PROC			; CvMap::plot, COMDAT
; _this$ = ecx

; 273  : 		if((iX == INVALID_PLOT_COORD) || (iY == INVALID_PLOT_COORD))

	mov	eax, DWORD PTR _iX$[esp-4]
	push	ebp
	cmp	eax, -2147483647			; 80000001H
	je	$LN1@plot
	mov	ebp, DWORD PTR _iY$[esp]
	cmp	ebp, -2147483647			; 80000001H
	je	$LN1@plot

; 276  : 		}
; 277  : 		int iMapX = coordRange(iX, getGridWidth(), isWrapX());

	cmp	BYTE PTR [ecx+4056], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR [ecx+4020]
	push	edi
	je	SHORT $LN11@plot
	test	eax, eax
	jge	SHORT $LN13@plot
	cdq
	idiv	esi
	mov	edi, edx
	add	edi, esi
	jmp	SHORT $LN15@plot
$LN13@plot:
	cmp	eax, esi
	jl	SHORT $LN11@plot
	cdq
	idiv	esi
	mov	edi, edx
	jmp	SHORT $LN15@plot
$LN11@plot:
	mov	edi, eax
$LN15@plot:

; 278  : 		int iMapY = coordRange(iY, getGridHeight(), isWrapY());

	cmp	BYTE PTR [ecx+4057], 0
	mov	ebx, DWORD PTR [ecx+4024]
	je	SHORT $LN40@plot
	test	ebp, ebp
	jge	SHORT $LN23@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN25@plot
$LN23@plot:
	cmp	ebp, ebx
	jl	SHORT $LN40@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	jmp	SHORT $LN25@plot
$LN40@plot:
	mov	edx, ebp
$LN25@plot:

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	test	edi, edi
	jl	SHORT $LN5@plot
	cmp	edi, esi
	jge	SHORT $LN5@plot
	test	edx, edx
	jl	SHORT $LN5@plot
	cmp	edx, ebx
	jge	SHORT $LN5@plot
	imul	esi, edx
	add	esi, edi
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ecx+4068]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp

; 280  : 	}

	ret	8
$LN5@plot:
	pop	edi
	pop	esi
	pop	ebx

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
$LN1@plot:

; 274  : 		{
; 275  : 			return NULL;

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
?plot@CvMap@@QBEPAVCvPlot@@HH@Z ENDP			; CvMap::plot
_TEXT	ENDS
PUBLIC	?plotCheckInvalid@CvMap@@QBEPAVCvPlot@@HH@Z	; CvMap::plotCheckInvalid
; Function compile flags: /Ogtpy
;	COMDAT ?plotCheckInvalid@CvMap@@QBEPAVCvPlot@@HH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plotCheckInvalid@CvMap@@QBEPAVCvPlot@@HH@Z PROC	; CvMap::plotCheckInvalid, COMDAT
; _this$ = ecx

; 282  : 	{

	push	esi

; 283  : 		if((iX == INVALID_PLOT_COORD) || (iY == INVALID_PLOT_COORD))

	mov	esi, DWORD PTR _iX$[esp]
	cmp	esi, -2147483647			; 80000001H
	je	SHORT $LN1@plotCheckI
	mov	edx, DWORD PTR _iY$[esp]
	cmp	edx, -2147483647			; 80000001H
	je	SHORT $LN1@plotCheckI

; 286  : 		}
; 287  : 		return &(m_pMapPlots[plotNum(iX, iY)]);

	mov	eax, DWORD PTR [ecx+4020]
	imul	eax, edx
	add	eax, esi
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]
	pop	esi

; 288  : 	}

	ret	8
$LN1@plotCheckI:

; 284  : 		{
; 285  : 			return NULL;

	xor	eax, eax
	pop	esi

; 288  : 	}

	ret	8
?plotCheckInvalid@CvMap@@QBEPAVCvPlot@@HH@Z ENDP	; CvMap::plotCheckInvalid
_TEXT	ENDS
PUBLIC	?plotUnchecked@CvMap@@QBEPAVCvPlot@@HH@Z	; CvMap::plotUnchecked
; Function compile flags: /Ogtpy
;	COMDAT ?plotUnchecked@CvMap@@QBEPAVCvPlot@@HH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plotUnchecked@CvMap@@QBEPAVCvPlot@@HH@Z PROC		; CvMap::plotUnchecked, COMDAT
; _this$ = ecx

; 292  : 		return &(m_pMapPlots[plotNum(iX, iY)]);

	mov	eax, DWORD PTR [ecx+4020]
	imul	eax, DWORD PTR _iY$[esp-4]
	add	eax, DWORD PTR _iX$[esp-4]
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]

; 293  : 	}

	ret	8
?plotUnchecked@CvMap@@QBEPAVCvPlot@@HH@Z ENDP		; CvMap::plotUnchecked
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvAStarNode *,6,1,297,0>::FStaticVector<CvAStarNode *,6,1,297,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvAStarNode *,6,1,297,0>::FStaticVector<CvAStarNode *,6,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 6
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvAStarNode *,6,1,297,0>::FStaticVector<CvAStarNode *,6,1,297,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@PAVCvAStarNode@@$00@@QAEXXZ	; BaseVector<CvAStarNode *,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@PAVCvAStarNode@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@PAVCvAStarNode@@$00@@QAEXXZ PROC	; BaseVector<CvAStarNode *,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@PAVCvAStarNode@@$00@@QAEXXZ ENDP	; BaseVector<CvAStarNode *,1>::clear
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXPAPAVCvAStarNode@@I@Z ; FStaticVector<CvAStarNode *,6,1,297,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXPAPAVCvAStarNode@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXPAPAVCvAStarNode@@I@Z PROC ; FStaticVector<CvAStarNode *,6,1,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXPAPAVCvAStarNode@@I@Z ENDP ; FStaticVector<CvAStarNode *,6,1,297,0>::Free
_TEXT	ENDS
PUBLIC	?UnitPathInitialize@@YAXPBXPAVCvAStar@@@Z	; UnitPathInitialize
EXTRN	?IsCanAttack@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsCanAttack
EXTRN	?CanEverEmbark@CvUnit@@QBE_NXZ:PROC		; CvUnit::CanEverEmbark
EXTRN	?isNoRevealMap@CvUnit@@QBE_NXZ:PROC		; CvUnit::isNoRevealMap
EXTRN	?IsImmobile@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsImmobile
EXTRN	?IsAutomated@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsAutomated
EXTRN	?isHuman@CvUnit@@QBE_NXZ:PROC			; CvUnit::isHuman
EXTRN	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ:PROC ; CvUnit::getDomainType
EXTRN	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ:PROC	; CvUnit::getTeam
EXTRN	?maxMoves@CvUnit@@QBEHXZ:PROC			; CvUnit::maxMoves
EXTRN	?baseMoves@CvUnit@@QBEHW4DomainTypes@@@Z:PROC	; CvUnit::baseMoves
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
;	COMDAT ?UnitPathInitialize@@YAXPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_pointer$ = 8						; size = 4
_finder$ = 12						; size = 4
?UnitPathInitialize@@YAXPBXPAVCvAStar@@@Z PROC		; UnitPathInitialize, COMDAT

; 1072 : {

	push	ebx

; 1073 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 1074 : 
; 1075 : 	UnitPathCacheData* pCacheData = reinterpret_cast<UnitPathCacheData*>(finder->GetScratchBuffer());

	mov	ebx, DWORD PTR _finder$[esp]
	push	esi
	push	edi

; 1076 : 
; 1077 : 	for (int i = 0; i < NUM_DOMAIN_TYPES; ++i)

	mov	edi, DWORD PTR _pointer$[esp+8]
	xor	esi, esi
	npad	3
$LL3@UnitPathIn:

; 1078 : 	{
; 1079 : 		pCacheData->m_aBaseMoves[i] = pUnit->baseMoves((DomainTypes)i);

	push	esi
	mov	ecx, edi
	call	?baseMoves@CvUnit@@QBEHW4DomainTypes@@@Z ; CvUnit::baseMoves
	mov	DWORD PTR [ebx+esi*4+116], eax
	inc	esi
	cmp	esi, 5
	jl	SHORT $LL3@UnitPathIn

; 1080 : 	}
; 1081 : 
; 1082 : 	pCacheData->m_iMaxMoves = pUnit->maxMoves();

	mov	ecx, edi
	call	?maxMoves@CvUnit@@QBEHXZ		; CvUnit::maxMoves
	mov	DWORD PTR [ebx+136], eax

; 1083 : 
; 1084 : 	pCacheData->m_ePlayerID = pUnit->getOwner();

	mov	eax, DWORD PTR [edi+40]

; 1085 : 	pCacheData->m_eTeamID = pUnit->getTeam();

	mov	ecx, edi
	mov	DWORD PTR [ebx+140], eax
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam

; 1086 : 	pCacheData->m_eDomainType = pUnit->getDomainType();

	mov	ecx, edi
	mov	DWORD PTR [ebx+144], eax
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType

; 1087 : 	pCacheData->m_bIsHuman = pUnit->isHuman();

	mov	ecx, edi
	mov	DWORD PTR [ebx+148], eax
	call	?isHuman@CvUnit@@QBE_NXZ		; CvUnit::isHuman

; 1088 : 	pCacheData->m_bIsAutomated = pUnit->IsAutomated();

	mov	ecx, edi
	mov	BYTE PTR [ebx+152], al
	call	?IsAutomated@CvUnit@@QBE_NXZ		; CvUnit::IsAutomated

; 1089 : 	pCacheData->m_bIsImmobile = pUnit->IsImmobile();

	mov	ecx, edi
	mov	BYTE PTR [ebx+153], al
	call	?IsImmobile@CvUnit@@QBE_NXZ		; CvUnit::IsImmobile

; 1090 : 	pCacheData->m_bIsNoRevealMap = pUnit->isNoRevealMap();

	mov	ecx, edi
	mov	BYTE PTR [ebx+154], al
	call	?isNoRevealMap@CvUnit@@QBE_NXZ		; CvUnit::isNoRevealMap

; 1091 : 	pCacheData->m_bCanEverEmbark = pUnit->CanEverEmbark();

	mov	ecx, edi
	mov	BYTE PTR [ebx+155], al
	call	?CanEverEmbark@CvUnit@@QBE_NXZ		; CvUnit::CanEverEmbark
	mov	BYTE PTR [ebx+156], al

; 1092 : 	pCacheData->m_bIsEmbarked = pUnit->isEmbarked();

	mov	cl, BYTE PTR [edi+1652]
	mov	BYTE PTR [ebx+157], cl

; 1093 : 	pCacheData->m_bCanAttack = pUnit->IsCanAttack();

	mov	ecx, edi
	call	?IsCanAttack@CvUnit@@QBE_NXZ		; CvUnit::IsCanAttack
	pop	edi
	pop	esi
	mov	BYTE PTR [ebx+158], al
	pop	ebx

; 1094 : #ifdef AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH
; 1095 : 	pCacheData->m_iBaseCombatStrengthConsideringDamage = 0;
; 1096 : 	if (!pCacheData->m_bIsHuman || pCacheData->m_bIsAutomated)
; 1097 : 		pCacheData->m_iBaseCombatStrengthConsideringDamage = pUnit->GetBaseCombatStrengthConsideringDamage();
; 1098 : #endif
; 1099 : }

	ret	0
?UnitPathInitialize@@YAXPBXPAVCvAStar@@@Z ENDP		; UnitPathInitialize
_TEXT	ENDS
PUBLIC	?PathDestValid@@YAHHHPBXPAVCvAStar@@@Z		; PathDestValid
EXTRN	?canMoveOrAttackInto@CvUnit@@QBE_NABVCvPlot@@E@Z:PROC ; CvUnit::canMoveOrAttackInto
EXTRN	?IsDeclareWar@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsDeclareWar
EXTRN	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC	; CvTeam::isAtWar
EXTRN	?isAdjacentToArea@CvPlot@@QBE_NH@Z:PROC		; CvPlot::isAdjacentToArea
EXTRN	?area@CvUnit@@QBEPAVCvArea@@XZ:PROC		; CvUnit::area
EXTRN	?GetPlotDanger@CvPlayer@@QBEHAAVCvPlot@@@Z:PROC	; CvPlayer::GetPlotDanger
EXTRN	?getArmyID@CvUnit@@QBEHXZ:PROC			; CvUnit::getArmyID
EXTRN	?IsAllowsWalkWater@CvPlot@@QBE_NXZ:PROC		; CvPlot::IsAllowsWalkWater
EXTRN	?plot@CvUnit@@QBEPAVCvPlot@@XZ:PROC		; CvUnit::plot
; Function compile flags: /Ogtpy
;	COMDAT ?PathDestValid@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_bMoveFlags$219726 = 8					; size = 1
_bAIControl$ = 8					; size = 1
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?PathDestValid@@YAHHHPBXPAVCvAStar@@@Z PROC		; PathDestValid, COMDAT

; 1141 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1142 : 	CvPlot* pToPlot = GC.getMap().plotCheckInvalid(iToX, iToY);
; 1143 : #else
; 1144 : 	CvUnit* pUnit;
; 1145 : 	CvPlot* pToPlot;
; 1146 : 	bool bAIControl;
; 1147 : 
; 1148 : 	pToPlot = GC.getMap().plotCheckInvalid(iToX, iToY);

	mov	edx, DWORD PTR _iToX$[esp-4]
	push	ebp
	push	esi
	push	edi
	cmp	edx, -2147483647			; 80000001H
	je	SHORT $LN31@PathDestVa
	mov	ecx, DWORD PTR _iToY$[esp+8]
	cmp	ecx, -2147483647			; 80000001H
	je	SHORT $LN31@PathDestVa
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	esi, DWORD PTR [eax+4020]
	imul	esi, ecx
	add	esi, edx
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [eax+4068]
	jmp	SHORT $LN33@PathDestVa
$LN31@PathDestVa:
	xor	esi, esi
$LN33@PathDestVa:

; 1149 : #endif
; 1150 : 	FAssert(pToPlot != NULL);
; 1151 : 
; 1152 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1153 : 	CvUnit* pUnit = (CvUnit*)pointer;
; 1154 : #else
; 1155 : 	pUnit = ((CvUnit*)pointer);
; 1156 : #endif
; 1157 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());

	mov	ebp, DWORD PTR _finder$[esp+8]

; 1158 : 
; 1159 : 	if(pToPlot == NULL || pUnit == NULL)

	test	esi, esi
	je	SHORT $LN22@PathDestVa
	mov	edi, DWORD PTR _pointer$[esp+8]
	test	edi, edi
	je	SHORT $LN22@PathDestVa

; 1160 : 		return FALSE;
; 1161 : 
; 1162 : 	if(pUnit->plot() == pToPlot)

	mov	ecx, edi
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	cmp	eax, esi
	jne	SHORT $LN24@PathDestVa
	pop	edi
	pop	esi

; 1163 : 	{
; 1164 : 		return TRUE;

	mov	eax, 1
	pop	ebp

; 1265 : }

	ret	0
$LN24@PathDestVa:

; 1165 : 	}
; 1166 : 
; 1167 : #ifndef AUI_ASTAR_FIX_PATH_VALID_PATH_PEAKS_FOR_NONHUMAN
; 1168 : 	if(pToPlot->isMountain() && (!pCacheData->isHuman() || pCacheData->IsAutomated()))

	mov	al, BYTE PTR [esi+5]
	test	al, al
	jne	SHORT $LN23@PathDestVa
	cmp	BYTE PTR [ebp+152], al
	je	SHORT $LN22@PathDestVa
	cmp	BYTE PTR [ebp+153], al
	je	SHORT $LN23@PathDestVa
$LN22@PathDestVa:
	pop	edi
	pop	esi

; 1169 : 	{
; 1170 : 		return FALSE;

	xor	eax, eax
	pop	ebp

; 1265 : }

	ret	0
$LN23@PathDestVa:

; 1171 : 	}
; 1172 : #endif
; 1173 : 
; 1174 : 	if(pCacheData->IsImmobile())

	cmp	BYTE PTR [ebp+154], 0

; 1175 : 	{
; 1176 : 		return FALSE;

	jne	SHORT $LN22@PathDestVa

; 1177 : 	}
; 1178 : 
; 1179 : 	if ((finder->GetInfo() & CvUnit::MOVEFLAG_STAY_ON_LAND) && (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater()))

	test	DWORD PTR [ebp+72], 256			; 00000100H
	je	SHORT $LN20@PathDestVa
	cmp	al, 3
	jne	SHORT $LN20@PathDestVa
	mov	ecx, esi
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al

; 1180 : 	{
; 1181 : 		return FALSE;

	je	SHORT $LN22@PathDestVa
$LN20@PathDestVa:

; 1182 : 	}
; 1183 : 
; 1184 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1185 : 	bool bAIControl = pCacheData->IsAutomated();
; 1186 : #else
; 1187 : 	bAIControl = pCacheData->IsAutomated();

	mov	al, BYTE PTR [ebp+153]
	mov	BYTE PTR _bAIControl$[esp+8], al

; 1188 : #endif
; 1189 : 
; 1190 : 	if(bAIControl)

	test	al, al
	je	SHORT $LN12@PathDestVa

; 1191 : 	{
; 1192 : #ifndef AUI_ASTAR_FIX_CONSIDER_DANGER_ONLY_PATH
; 1193 : 		if(!(finder->GetInfo() & MOVE_UNITS_IGNORE_DANGER))

	test	BYTE PTR [ebp+72], 8
	jne	SHORT $LN15@PathDestVa

; 1194 : 		{
; 1195 : 			if(!pUnit->IsCombatUnit() || pUnit->getArmyID() == FFreeList::INVALID_INDEX)

	cmp	DWORD PTR [edi+1044], 0
	jle	SHORT $LN16@PathDestVa
	mov	ecx, edi
	call	?getArmyID@CvUnit@@QBEHXZ		; CvUnit::getArmyID
	cmp	eax, -1
	jne	SHORT $LN15@PathDestVa
$LN16@PathDestVa:

; 1196 : 			{
; 1197 : #ifdef AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH
; 1198 : 				if (GET_PLAYER(pUnit->getOwner()).GetPlotDanger(*pToPlot) > pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 1199 : #else
; 1200 : 				if(GET_PLAYER(pUnit->getOwner()).GetPlotDanger(*pToPlot) > 0)

	mov	ecx, DWORD PTR [edi+40]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	esi
	call	?GetPlotDanger@CvPlayer@@QBEHAAVCvPlot@@@Z ; CvPlayer::GetPlotDanger
	test	eax, eax

; 1201 : #endif
; 1202 : 				{
; 1203 : 					return FALSE;

	jg	SHORT $LN22@PathDestVa
$LN15@PathDestVa:

; 1204 : 				}
; 1205 : 			}
; 1206 : 		}
; 1207 : #endif
; 1208 : 
; 1209 : 		if(pCacheData->getDomainType() == DOMAIN_LAND)

	cmp	DWORD PTR [ebp+148], 2
	jne	SHORT $LN12@PathDestVa

; 1210 : 		{
; 1211 : 			int iGroupAreaID = pUnit->area()->GetID();

	mov	ecx, edi
	call	?area@CvUnit@@QBEPAVCvArea@@XZ		; CvUnit::area
	mov	eax, DWORD PTR [eax+4]

; 1212 : 			if(pToPlot->getArea() != iGroupAreaID)

	cmp	DWORD PTR [esi+356], eax
	je	SHORT $LN12@PathDestVa

; 1213 : 			{
; 1214 : 				if(!(pToPlot->isAdjacentToArea(iGroupAreaID)) && !pUnit->CanEverEmbark())

	push	eax
	mov	ecx, esi
	call	?isAdjacentToArea@CvPlot@@QBE_NH@Z	; CvPlot::isAdjacentToArea
	test	al, al
	jne	SHORT $LN12@PathDestVa
	mov	ecx, edi
	call	?CanEverEmbark@CvUnit@@QBE_NXZ		; CvUnit::CanEverEmbark
	test	al, al

; 1215 : 				{
; 1216 : 					return FALSE;

	je	$LN22@PathDestVa
$LN12@PathDestVa:

; 1217 : 				}
; 1218 : 			}
; 1219 : 		}
; 1220 : 	}
; 1221 : 
; 1222 : 	TeamTypes eTeam = pCacheData->getTeam();

	mov	edi, DWORD PTR [ebp+144]
	push	ebx

; 1223 : 	bool bToPlotRevealed = pToPlot->isRevealed(eTeam);

	push	edi
	mov	ecx, esi
	call	?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z ; CvPlot::isRevealed
	mov	bl, al

; 1224 : 	if(!bToPlotRevealed)

	test	bl, bl
	jne	SHORT $LN91@PathDestVa

; 1225 : 	{
; 1226 : 		if(pCacheData->isNoRevealMap())

	cmp	BYTE PTR [ebp+155], al
	je	SHORT $LN7@PathDestVa
$LN93@PathDestVa:
	pop	ebx
	pop	edi
	pop	esi

; 1227 : 		{
; 1228 : 			return FALSE;

	xor	eax, eax
	pop	ebp

; 1265 : }

	ret	0
$LN91@PathDestVa:

; 1229 : 		}
; 1230 : 	}
; 1231 : 
; 1232 : 	if(bToPlotRevealed)
; 1233 : 	{
; 1234 : 		CvCity* pCity = pToPlot->getPlotCity();

	mov	ecx, esi
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity

; 1235 : 		if(pCity)

	test	eax, eax
	je	SHORT $LN7@PathDestVa

; 1236 : 		{
; 1237 : 			if(pCacheData->getOwner() != pCity->getOwner() && !GET_TEAM(eTeam).isAtWar(pCity->getTeam()) && !(finder->GetInfo() & MOVE_IGNORE_STACKING))

	mov	ecx, DWORD PTR [ebp+140]
	cmp	ecx, DWORD PTR [eax+84]
	je	SHORT $LN7@PathDestVa
	imul	edi, 2980				; 00000ba4H
	add	edi, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	ecx, eax
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, edi
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	jne	SHORT $LN7@PathDestVa
	test	BYTE PTR [ebp+72], 4

; 1238 : 			{
; 1239 : 				return FALSE;

	je	SHORT $LN93@PathDestVa
$LN7@PathDestVa:

; 1240 : 			}
; 1241 : 		}
; 1242 : 	}
; 1243 : 
; 1244 : 	if(bAIControl || bToPlotRevealed)

	cmp	BYTE PTR _bAIControl$[esp+12], 0
	jne	SHORT $LN5@PathDestVa
	test	bl, bl
	je	SHORT $LN1@PathDestVa
$LN5@PathDestVa:

; 1245 : 	{
; 1246 : 		// assume that we can change our embarking state
; 1247 : 		byte bMoveFlags = CvUnit::MOVEFLAG_DESTINATION | CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE;
; 1248 : 
; 1249 : 		if((pUnit->IsDeclareWar() || (finder->GetInfo() & MOVE_DECLARE_WAR)))

	mov	edi, DWORD PTR _pointer$[esp+12]
	mov	ecx, edi
	mov	BYTE PTR _bMoveFlags$219726[esp+12], 132 ; 00000084H
	call	?IsDeclareWar@CvUnit@@QBE_NXZ		; CvUnit::IsDeclareWar
	test	al, al
	jne	SHORT $LN3@PathDestVa
	test	BYTE PTR [ebp+72], 32			; 00000020H
	je	SHORT $LN4@PathDestVa
$LN3@PathDestVa:

; 1250 : 		{
; 1251 : 			bMoveFlags |= CvUnit::MOVEFLAG_ATTACK;

	mov	BYTE PTR _bMoveFlags$219726[esp+12], 133 ; 00000085H
$LN4@PathDestVa:

; 1252 : 		}
; 1253 : 
; 1254 : 		if(finder->GetInfo() & MOVE_IGNORE_STACKING)

	test	BYTE PTR [ebp+72], 4
	je	SHORT $LN2@PathDestVa

; 1255 : 		{
; 1256 : 			bMoveFlags |= CvUnit::MOVEFLAG_IGNORE_STACKING;

	or	BYTE PTR _bMoveFlags$219726[esp+12], 16	; 00000010H
$LN2@PathDestVa:

; 1257 : 		}
; 1258 : 
; 1259 : 		if(!(pUnit->canMoveOrAttackInto(*pToPlot, bMoveFlags)))

	mov	edx, DWORD PTR _bMoveFlags$219726[esp+12]
	push	edx
	push	esi
	mov	ecx, edi
	call	?canMoveOrAttackInto@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveOrAttackInto
	test	al, al

; 1260 : 		{
; 1261 : 			return FALSE;

	je	$LN93@PathDestVa
$LN1@PathDestVa:
	pop	ebx
	pop	edi
	pop	esi

; 1262 : 		}
; 1263 : 	}
; 1264 : 	return TRUE;

	mov	eax, 1
	pop	ebp

; 1265 : }

	ret	0
?PathDestValid@@YAHHHPBXPAVCvAStar@@@Z ENDP		; PathDestValid
_TEXT	ENDS
PUBLIC	?PathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathCost
EXTRN	?isRiverCrossingNoPenalty@CvUnit@@QBE_NXZ:PROC	; CvUnit::isRiverCrossingNoPenalty
EXTRN	?isRiverCrossing@CvPlot@@QBE_NW4DirectionTypes@@@Z:PROC ; CvPlot::isRiverCrossing
EXTRN	?isVisibleEnemyDefender@CvPlot@@QBE_NPBVCvUnit@@@Z:PROC ; CvPlot::isVisibleEnemyDefender
EXTRN	?defenseModifier@CvPlot@@QBEHW4TeamTypes@@_N1@Z:PROC ; CvPlot::defenseModifier
EXTRN	?noDefensiveBonus@CvUnit@@QBE_NXZ:PROC		; CvUnit::noDefensiveBonus
EXTRN	?getNumAdjacentNonrevealed@CvPlot@@QBEHW4TeamTypes@@@Z:PROC ; CvPlot::getNumAdjacentNonrevealed
EXTRN	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z:PROC ; CvTeam::IsAllowsOpenBordersToTeam
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?isHasPromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z:PROC ; CvUnit::isHasPromotion
EXTRN	?getNumFriendlyUnitsOfType@CvPlot@@QBEHPBVCvUnit@@_N@Z:PROC ; CvPlot::getNumFriendlyUnitsOfType
EXTRN	?getExtraMovePathCost@CvPlot@@QBEHXZ:PROC	; CvPlot::getExtraMovePathCost
EXTRN	?getTurnDamage@CvFeatureInfo@@QBEHXZ:PROC	; CvFeatureInfo::getTurnDamage
EXTRN	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z:PROC ; CvGlobals::getFeatureInfo
EXTRN	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z:PROC ; CvUnit::canEmbarkOnto
EXTRN	?MovementCost@CvUnitMovement@@SAHPBVCvUnit@@PBVCvPlot@@1HHH@Z:PROC ; CvUnitMovement::MovementCost
EXTRN	?IsSlowedByZOC@CvUnitMovement@@SA_NPBVCvUnit@@PBVCvPlot@@1@Z:PROC ; CvUnitMovement::IsSlowedByZOC
EXTRN	?ConsumesAllMoves@CvUnitMovement@@SA_NPBVCvUnit@@PBVCvPlot@@1@Z:PROC ; CvUnitMovement::ConsumesAllMoves
; Function compile flags: /Ogtpy
;	COMDAT ?PathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_eUnitTeam$ = -40					; size = 4
_iMovesLeft$ = -36					; size = 4
_kMap$ = -32						; size = 4
_eUnitDomain$ = -28					; size = 4
$T223318 = -24						; size = 4
$T223319 = -20						; size = 4
_iToPlotY$ = -16					; size = 4
_iToPlotX$ = -12					; size = 4
_iFromPlotY$ = -8					; size = 4
_iFromPlotX$ = -4					; size = 4
$T223329 = 8						; size = 4
$T223322 = 8						; size = 4
_bToPlotIsWater$ = 8					; size = 1
_parent$ = 8						; size = 4
tv966 = 12						; size = 4
$T223325 = 12						; size = 4
_bMaximizeExplore$ = 12					; size = 1
_node$ = 12						; size = 4
_data$ = 16						; size = 4
$T223326 = 20						; size = 4
_pointer$ = 20						; size = 4
_iCost$ = 24						; size = 4
_finder$ = 24						; size = 4
?PathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; PathCost, COMDAT

; 1278 : {

	sub	esp, 40					; 00000028H

; 1279 : 	CvMap& kMap = GC.getMap();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 1280 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 1281 : 	const CvPlot* pFromPlot = parent->m_pPlot;
; 1282 : 	const CvPlot* pToPlot = node->m_pPlot;
; 1283 : 
; 1284 : 	const int iFromPlotX = parent->m_iX;
; 1285 : 	const int iFromPlotY = parent->m_iY;
; 1286 : 	const int iToPlotX = node->m_iX;
; 1287 : 	const int iToPlotY = node->m_iY;
; 1288 : #else
; 1289 : 	int iFromPlotX = parent->m_iX;
; 1290 : 	int iFromPlotY = parent->m_iY;
; 1291 : 	CvPlot* pFromPlot = kMap.plotUnchecked(iFromPlotX, iFromPlotY);

	mov	eax, DWORD PTR [ecx+4020]
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _parent$[esp+52]
	movsx	ebx, WORD PTR [edi+82]
	movsx	edx, WORD PTR [edi+80]
	mov	esi, eax
	imul	esi, ebx
	add	esi, edx
	mov	DWORD PTR _iFromPlotX$[esp+56], edx
	imul	esi, 484				; 000001e4H

; 1292 : 
; 1293 : 	int iToPlotX = node->m_iX;

	mov	edx, DWORD PTR _node$[esp+52]
	mov	DWORD PTR _iFromPlotY$[esp+56], ebx
	movsx	ebx, WORD PTR [edx+80]

; 1294 : 	int iToPlotY = node->m_iY;

	movsx	edx, WORD PTR [edx+82]

; 1295 : 	CvPlot* pToPlot = kMap.plotUnchecked(iToPlotX, iToPlotY);
; 1296 : #endif
; 1297 : 
; 1298 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 1299 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());

	mov	ebp, DWORD PTR _finder$[esp+52]
	imul	eax, edx
	add	eax, ebx
	imul	eax, 484				; 000001e4H
	mov	DWORD PTR _kMap$[esp+56], ecx
	mov	ecx, DWORD PTR [ecx+4068]
	add	eax, ecx
	mov	DWORD PTR _iToPlotX$[esp+56], ebx
	mov	ebx, eax

; 1300 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1301 : 	bool bIsAIControl = !pCacheData->isHuman() || pCacheData->IsAutomated();
; 1302 : #endif
; 1303 : 
; 1304 : 	DomainTypes eUnitDomain = pCacheData->getDomainType();

	mov	eax, DWORD PTR [ebp+148]
	add	esi, ecx

; 1305 : 
; 1306 : 	CvAssertMsg(eUnitDomain != DOMAIN_AIR, "pUnit->getDomainType() is not expected to be equal with DOMAIN_AIR");
; 1307 : 
; 1308 : #if defined(AUI_ASTAR_MINOR_OPTIMIZATION) || defined (AUI_UNIT_FIX_HOVERING_EMBARK) || defined(AUI_UNIT_MOVEMENT_FIX_BAD_ALLOWS_WATER_WALK_CHECK)
; 1309 : 	bool bToPlotIsWater = !pToPlot->IsAllowsWalkWater();
; 1310 : 	bool bFromPlotIsWater = !pFromPlot->IsAllowsWalkWater();
; 1311 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 1312 : 	if (pUnit->IsHoveringUnit())
; 1313 : 	{
; 1314 : 		bToPlotIsWater = bToPlotIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 1315 : 		bFromPlotIsWater = bFromPlotIsWater && pFromPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 1316 : 	}
; 1317 : 	else
; 1318 : #endif
; 1319 : 	{
; 1320 : 		bToPlotIsWater = bToPlotIsWater && pToPlot->isWater();
; 1321 : 		bFromPlotIsWater = bFromPlotIsWater && pFromPlot->isWater();
; 1322 : 	}
; 1323 : 	int iBaseMoves = pCacheData->baseMoves(bFromPlotIsWater || pCacheData->isEmbarked() ? DOMAIN_SEA : pCacheData->getDomainType());
; 1324 : 	int iMaxMoves = iBaseMoves * GC.getMOVE_DENOMINATOR();
; 1325 : #else
; 1326 : 	bool bToPlotIsWater = pToPlot->isWater() && !pToPlot->IsAllowsWalkWater();

	cmp	BYTE PTR [ebx+5], 3
	mov	DWORD PTR _iToPlotY$[esp+56], edx
	mov	DWORD PTR _eUnitDomain$[esp+56], eax
	jne	SHORT $LN42@PathCost
	mov	ecx, ebx
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	mov	BYTE PTR _bToPlotIsWater$[esp+52], 1
	test	al, al
	je	SHORT $LN43@PathCost
$LN42@PathCost:
	mov	BYTE PTR _bToPlotIsWater$[esp+52], 0
$LN43@PathCost:

; 1327 : #endif
; 1328 : 	int iMax;
; 1329 : 	if(parent->m_iData1 > 0)

	mov	edi, DWORD PTR [edi+12]
	test	edi, edi

; 1330 : 	{
; 1331 : 		iMax = parent->m_iData1;
; 1332 : 	}
; 1333 : 	else

	jg	SHORT $LN35@PathCost

; 1334 : 	{
; 1335 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1336 : 		iMax = iMaxMoves;
; 1337 : #else
; 1338 : 		if (CvUnitMovement::ConsumesAllMoves(pUnit, pFromPlot, pToPlot) || CvUnitMovement::IsSlowedByZOC(pUnit, pFromPlot, pToPlot))

	mov	edi, DWORD PTR _pointer$[esp+52]
	push	ebx
	push	esi
	push	edi
	call	?ConsumesAllMoves@CvUnitMovement@@SA_NPBVCvUnit@@PBVCvPlot@@1@Z ; CvUnitMovement::ConsumesAllMoves
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN36@PathCost
	push	ebx
	push	esi
	push	edi
	call	?IsSlowedByZOC@CvUnitMovement@@SA_NPBVCvUnit@@PBVCvPlot@@1@Z ; CvUnitMovement::IsSlowedByZOC
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN36@PathCost

; 1344 : 		}
; 1345 : 		else
; 1346 : 			iMax = pCacheData->baseMoves(bToPlotIsWater?DOMAIN_SEA:DOMAIN_LAND) * GC.getMOVE_DENOMINATOR();

	xor	ecx, ecx
	cmp	BYTE PTR _bToPlotIsWater$[esp+52], cl
	setne	cl
	dec	ecx
	and	ecx, 2
	mov	edi, DWORD PTR [ebp+ecx*4+116]
	jmp	SHORT $LN230@PathCost
$LN36@PathCost:

; 1339 : 		{
; 1340 : 			// The movement would consume all moves, get the moves we will forfeit based on the source plot, rather than
; 1341 : 			// the destination plot.  This fixes issues where a land unit that has more movement points on water than on land
; 1342 : 			// would have a very high cost to move onto water if their first move of the turn was at the edge of the water.
; 1343 : 			iMax = pCacheData->baseMoves((pFromPlot->isWater() && !pFromPlot->IsAllowsWalkWater())?DOMAIN_SEA:DOMAIN_LAND) * GC.getMOVE_DENOMINATOR();

	cmp	BYTE PTR [esi+5], 3
	jne	SHORT $LN44@PathCost
	mov	ecx, esi
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN44@PathCost
	xor	eax, eax
	jmp	SHORT $LN45@PathCost
$LN44@PathCost:
	mov	eax, 2
$LN45@PathCost:
	mov	edi, DWORD PTR [ebp+eax*4+116]
$LN230@PathCost:
	imul	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
$LN35@PathCost:

; 1347 : #endif
; 1348 : 	}
; 1349 : 
; 1350 : 	// Get the cost of moving to the new plot, passing in our max moves or the moves we have left, in case the movementCost 
; 1351 : 	// method wants to burn all our remaining moves.  This is needed because our remaining moves for this segment of the path
; 1352 : 	// may be larger or smaller than the baseMoves if some moves have already been used or if the starting domain (LAND/SEA)
; 1353 : 	// of the path segment is different from the destination plot.
; 1354 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1355 : 	int iCost = CvUnitMovement::MovementCost(pUnit, pFromPlot, pToPlot, iBaseMoves, iMaxMoves, iMax);
; 1356 : #else
; 1357 : 	int iCost = CvUnitMovement::MovementCost(pUnit, pFromPlot, pToPlot, pCacheData->baseMoves((pToPlot->isWater() || pCacheData->isEmbarked())?DOMAIN_SEA:pCacheData->getDomainType()), pCacheData->maxMoves(), iMax);

	cmp	BYTE PTR [ebx+5], 3
	je	SHORT $LN46@PathCost
	cmp	BYTE PTR [ebp+157], 0
	jne	SHORT $LN46@PathCost
	mov	ecx, DWORD PTR [ebp+148]
	jmp	SHORT $LN47@PathCost
$LN46@PathCost:
	xor	ecx, ecx
$LN47@PathCost:
	mov	eax, DWORD PTR [ebp+136]
	mov	ecx, DWORD PTR [ebp+ecx*4+116]
	mov	edx, DWORD PTR _pointer$[esp+52]
	push	edi
	push	eax
	push	ecx
	push	ebx
	push	esi
	push	edx
	call	?MovementCost@CvUnitMovement@@SAHPBVCvUnit@@PBVCvPlot@@1HHH@Z ; CvUnitMovement::MovementCost

; 1358 : #endif
; 1359 : 
; 1360 : 	TeamTypes eUnitTeam = pCacheData->getTeam();

	mov	ecx, DWORD PTR [ebp+144]
	mov	DWORD PTR _eUnitTeam$[esp+80], ecx

; 1361 : #ifdef AUI_ASTAR_EXPLORE_UNITAITYPE_ALWAYS_MAXIMIZES_EXPLORE
; 1362 : 	bool bMaximizeExplore = finder->GetInfo() & MOVE_MAXIMIZE_EXPLORE || pUnit->AI_getUnitAIType() == UNITAI_EXPLORE || pUnit->AI_getUnitAIType() == UNITAI_EXPLORE_SEA;
; 1363 : #else
; 1364 : 	bool bMaximizeExplore = finder->GetInfo() & MOVE_MAXIMIZE_EXPLORE;

	mov	ecx, DWORD PTR [ebp+72]
	shr	ecx, 7
	and	cl, 1
	mov	BYTE PTR _bMaximizeExplore$[esp+76], cl

; 1365 : #endif
; 1366 : 
; 1367 : 	int iMovesLeft = iMax - iCost;

	mov	ecx, edi
	add	esp, 24					; 00000018H
	sub	ecx, eax
	mov	DWORD PTR _iMovesLeft$[esp+56], ecx

; 1368 : 	// Is the cost greater than our max?
; 1369 : 	if (iMovesLeft < 0)

	jns	SHORT $LN34@PathCost

; 1370 : 	{
; 1371 : 		// Yes, we will still let the move happen, but that is the end of the turn.
; 1372 : 		iCost = iMax;

	mov	eax, edi

; 1373 : 		iMovesLeft = 0;

	mov	DWORD PTR _iMovesLeft$[esp+56], 0

; 1374 : 	}
; 1375 : 
; 1376 : 	if(iMovesLeft == 0)

	jmp	SHORT $LN221@PathCost
$LN34@PathCost:
	cmp	DWORD PTR _iMovesLeft$[esp+56], 0
	jne	$LN33@PathCost
$LN221@PathCost:

; 1377 : 	{
; 1378 : 		iCost = (PATH_MOVEMENT_WEIGHT * iCost);

	imul	eax, 1000				; 000003e8H

; 1379 : 
; 1380 : #ifdef AUI_UNIT_MOVEMENT_FIX_BAD_ALLOWS_WATER_WALK_CHECK
; 1381 : 		if (eUnitDomain == DOMAIN_LAND && !bFromPlotIsWater && bToPlotIsWater && !pUnit->canEmbarkOnto(*pFromPlot, *pToPlot, true))
; 1382 : #else
; 1383 : 		if(eUnitDomain == DOMAIN_LAND && !pFromPlot->isWater() && bToPlotIsWater && !pUnit->canEmbarkOnto(*pFromPlot, *pToPlot, true))

	cmp	DWORD PTR _eUnitDomain$[esp+56], 2
	mov	DWORD PTR _iCost$[esp+52], eax
	jne	SHORT $LN223@PathCost
	cmp	BYTE PTR [esi+5], 3
	je	SHORT $LN223@PathCost
	cmp	BYTE PTR _bToPlotIsWater$[esp+52], 0
	je	SHORT $LN223@PathCost
	mov	ecx, DWORD PTR _pointer$[esp+52]
	push	0
	push	1
	push	ebx
	push	esi
	call	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z ; CvUnit::canEmbarkOnto
	test	al, al
	jne	SHORT $LN223@PathCost

; 1384 : #endif
; 1385 : 		{
; 1386 : 			iCost += PATH_INCORRECT_EMBARKING_WEIGHT;

	add	DWORD PTR _iCost$[esp+52], 1000000	; 000f4240H
$LN223@PathCost:

; 1387 : 		}
; 1388 : 
; 1389 : 		if(bMaximizeExplore)

	cmp	BYTE PTR _bMaximizeExplore$[esp+52], 0
	je	SHORT $LN30@PathCost

; 1390 : 		{
; 1391 : #ifdef AUI_ASTAR_FIX_MAXIMIZE_EXPLORE_UNHARDCODE_HILL_PREFERENCE
; 1392 : 			iCost += PATH_EXPLORE_NON_HILL_WEIGHT * (2 - pToPlot->seeFromLevel(eUnitTeam));
; 1393 : #else
; 1394 : 			if(!pToPlot->isHills())

	cmp	BYTE PTR [ebx+5], 1
	je	SHORT $LN30@PathCost

; 1395 : 			{
; 1396 : 				iCost += PATH_EXPLORE_NON_HILL_WEIGHT;

	add	DWORD PTR _iCost$[esp+52], 300		; 0000012cH
$LN30@PathCost:

; 1397 : 			}
; 1398 : #endif
; 1399 : 		}
; 1400 : 
; 1401 : 		// Damage caused by features (mods)
; 1402 : 		if(0 != GC.getPATH_DAMAGE_WEIGHT())

	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+6944, 0
	je	SHORT $LN27@PathCost

; 1403 : 		{
; 1404 : 			if(pToPlot->getFeatureType() != NO_FEATURE)

	mov	al, BYTE PTR [ebx+432]
	cmp	al, -1
	je	SHORT $LN224@PathCost

; 1405 : 			{
; 1406 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1407 : 				iCost += (GC.getPATH_DAMAGE_WEIGHT() * MAX(0, GC.getFeatureInfo(pToPlot->getFeatureType())->getTurnDamage())) / GC.getMAX_HIT_POINTS();
; 1408 : #else
; 1409 : 				iCost += (GC.getPATH_DAMAGE_WEIGHT() * std::max(0, GC.getFeatureInfo(pToPlot->getFeatureType())->getTurnDamage())) / GC.getMAX_HIT_POINTS();

	movsx	edx, al
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
	mov	ecx, eax
	call	?getTurnDamage@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getTurnDamage
	mov	DWORD PTR $T223318[esp+56], eax
	test	eax, eax
	mov	DWORD PTR $T223319[esp+56], 0
	lea	eax, DWORD PTR $T223318[esp+56]
	jg	SHORT $LN117@PathCost
	lea	eax, DWORD PTR $T223319[esp+56]
$LN117@PathCost:
	mov	eax, DWORD PTR [eax]
	imul	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6944
	cdq
	idiv	DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	add	DWORD PTR _iCost$[esp+52], eax
$LN224@PathCost:

; 1410 : #endif
; 1411 : 			}
; 1412 : 
; 1413 : 			if(pToPlot->getExtraMovePathCost() > 0)

	mov	ecx, ebx
	call	?getExtraMovePathCost@CvPlot@@QBEHXZ	; CvPlot::getExtraMovePathCost
	test	eax, eax
	jle	SHORT $LN27@PathCost

; 1414 : 			{
; 1415 : 				iCost += (PATH_MOVEMENT_WEIGHT * pToPlot->getExtraMovePathCost());

	mov	ecx, ebx
	call	?getExtraMovePathCost@CvPlot@@QBEHXZ	; CvPlot::getExtraMovePathCost
	imul	eax, 1000				; 000003e8H
	add	DWORD PTR _iCost$[esp+52], eax
$LN27@PathCost:

; 1416 : 			}
; 1417 : 		}
; 1418 : 
; 1419 : 		// Penalty for stacking
; 1420 : 		if(GC.getPLOT_UNIT_LIMIT() > 0 && !(finder->GetInfo() & MOVE_IGNORE_STACKING))

	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7356
	test	edi, edi
	jle	SHORT $LN225@PathCost
	test	BYTE PTR [ebp+72], 4
	jne	SHORT $LN225@PathCost

; 1421 : 		{
; 1422 : 			// Check to see if any units are present at this full-turn move plot... if the player can see what's there
; 1423 : 			if(pToPlot->getNumFriendlyUnitsOfType(pUnit) >= GC.getPLOT_UNIT_LIMIT())

	mov	eax, DWORD PTR _pointer$[esp+52]
	push	1
	push	eax
	mov	ecx, ebx
	call	?getNumFriendlyUnitsOfType@CvPlot@@QBEHPBVCvUnit@@_N@Z ; CvPlot::getNumFriendlyUnitsOfType
	cmp	eax, edi
	jl	SHORT $LN225@PathCost

; 1424 : 			{
; 1425 : 				iCost += PATH_STACKING_WEIGHT;

	add	DWORD PTR _iCost$[esp+52], 1000000	; 000f4240H
$LN225@PathCost:

; 1426 : 			}
; 1427 : 		}
; 1428 : 
; 1429 : 		// Penalty for ending a turn on a mountain
; 1430 : 		if(pToPlot->isMountain())

	cmp	BYTE PTR [ebx+5], 0
	jne	SHORT $LN226@PathCost

; 1431 : 		{
; 1432 : 			// We want to discourage AIs and automated units from exhausting their movement on a mountain, but if the unit is manually controlled by the human, let them do what they want.
; 1433 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1434 : 			if (bIsAIControl)
; 1435 : #else
; 1436 : 			if (!pCacheData->isHuman() || pCacheData->IsAutomated())

	cmp	BYTE PTR [ebp+152], 0
	je	SHORT $LN22@PathCost
	cmp	BYTE PTR [ebp+153], 0
	je	SHORT $LN226@PathCost
$LN22@PathCost:

; 1437 : #endif
; 1438 : 			{
; 1439 : 				iCost += PATH_END_TURN_MOUNTAIN_WEIGHT;

	add	DWORD PTR _iCost$[esp+52], 1000000	; 000f4240H
$LN226@PathCost:

; 1440 : 			}
; 1441 : #ifdef AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT
; 1442 : 			else
; 1443 : 			{
; 1444 : 				iCost += AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT + PATH_TERRITORY_WEIGHT;
; 1445 : 			}
; 1446 : #endif
; 1447 : 		}
; 1448 : 
; 1449 : 		if (pUnit->isHasPromotion((PromotionTypes)GC.getPROMOTION_UNWELCOME_EVANGELIST()))

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8560
	push	ecx
	mov	ecx, DWORD PTR _pointer$[esp+56]
	call	?isHasPromotion@CvUnit@@QBE_NW4PromotionTypes@@@Z ; CvUnit::isHasPromotion
	test	al, al
	je	$LN21@PathCost

; 1450 : 		{
; 1451 : 			// Avoid being in a territory that we are not welcome in, unless the human is manually controlling the unit.
; 1452 : #ifndef AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT
; 1453 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1454 : 			if (bIsAIControl)
; 1455 : #else
; 1456 : 			if (!pCacheData->isHuman() || pCacheData->IsAutomated())

	cmp	BYTE PTR [ebp+152], 0
	je	SHORT $LN19@PathCost
	cmp	BYTE PTR [ebp+153], 0
	je	$LN227@PathCost
$LN19@PathCost:

; 1457 : #endif
; 1458 : #endif
; 1459 : 			{
; 1460 : 				// Also, ignore the penalty if the destination of the path is in the same team's territory, no sense in avoiding a place we want to get to.				
; 1461 : 				PlayerTypes ePlotOwner = pToPlot->getOwner();
; 1462 : 				CvPlot* pDestPlot = (finder->GetDestX() >= 0 && finder->GetDestY() >= 0)?kMap.plotCheckInvalid(finder->GetDestX(), finder->GetDestY()):NULL;

	mov	ecx, DWORD PTR [ebp+64]
	movsx	edx, BYTE PTR [ebx+4]
	test	ecx, ecx
	jl	SHORT $LN48@PathCost
	mov	edi, DWORD PTR [ebp+68]
	test	edi, edi
	jl	SHORT $LN48@PathCost
	cmp	ecx, -2147483647			; 80000001H
	je	SHORT $LN48@PathCost
	cmp	edi, -2147483647			; 80000001H
	je	SHORT $LN48@PathCost
	mov	eax, DWORD PTR _kMap$[esp+56]
	mov	eax, DWORD PTR [eax+4020]
	imul	eax, edi
	add	eax, ecx
	mov	ecx, DWORD PTR _kMap$[esp+56]
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]
	jmp	SHORT $LN49@PathCost
$LN48@PathCost:
	xor	eax, eax
$LN49@PathCost:

; 1463 : 				if (!pDestPlot || pDestPlot->getOwner() != ePlotOwner)

	test	eax, eax
	je	SHORT $LN17@PathCost
	movsx	eax, BYTE PTR [eax+4]
	cmp	eax, edx
	je	$LN227@PathCost
$LN17@PathCost:

; 1464 : 				{
; 1465 : 					TeamTypes ePlotTeam = pToPlot->getTeam();

	cmp	edx, -1
	je	SHORT $LN159@PathCost
	cmp	edx, 63					; 0000003fH
	ja	SHORT $LN159@PathCost
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	eax, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN158@PathCost
$LN159@PathCost:
	or	edi, -1
$LN158@PathCost:

; 1466 : 					if (ePlotOwner != NO_PLAYER && !GET_PLAYER(ePlotOwner).isMinorCiv() && ePlotTeam != pCacheData->getTeam() && !GET_TEAM(ePlotTeam).IsAllowsOpenBordersToTeam(pCacheData->getTeam()))

	cmp	edx, -1
	je	SHORT $LN227@PathCost
	imul	edx, 63236				; 0000f704H
	add	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, edx
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	jne	SHORT $LN227@PathCost
	mov	eax, DWORD PTR [ebp+144]
	cmp	edi, eax
	je	SHORT $LN227@PathCost
	imul	edi, 2980				; 00000ba4H
	add	edi, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	eax
	mov	ecx, edi
	call	?IsAllowsOpenBordersToTeam@CvTeam@@QBE_NW4TeamTypes@@@Z ; CvTeam::IsAllowsOpenBordersToTeam
	test	al, al
	jne	SHORT $LN227@PathCost

; 1467 : 					{
; 1468 : #ifdef AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT
; 1469 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1470 : 						if (bIsAIControl)
; 1471 : #else
; 1472 : 						if (!pCacheData->isHuman() || pCacheData->IsAutomated())
; 1473 : #endif
; 1474 : 						{
; 1475 : 							iCost += PATH_END_TURN_MISSIONARY_OTHER_TERRITORY;
; 1476 : 						}
; 1477 : 						else
; 1478 : 						{
; 1479 : 							iCost += AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT + PATH_TERRITORY_WEIGHT;
; 1480 : 						}
; 1481 : #else
; 1482 : 						iCost += PATH_END_TURN_MISSIONARY_OTHER_TERRITORY;

	add	DWORD PTR _iCost$[esp+52], 150000	; 000249f0H

; 1483 : #endif
; 1484 : 					}
; 1485 : 				}
; 1486 : 			}
; 1487 : 		}
; 1488 : 		else

	jmp	SHORT $LN227@PathCost
$LN21@PathCost:

; 1489 : 		{
; 1490 : 			if(pToPlot->getTeam() != eUnitTeam)

	movsx	eax, BYTE PTR [ebx+4]
	cmp	eax, -1
	je	SHORT $LN180@PathCost
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN180@PathCost
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN179@PathCost
$LN180@PathCost:
	or	eax, -1
$LN179@PathCost:
	cmp	eax, DWORD PTR _eUnitTeam$[esp+56]
	je	SHORT $LN227@PathCost

; 1491 : 			{
; 1492 : 				iCost += PATH_TERRITORY_WEIGHT;

	add	DWORD PTR _iCost$[esp+52], 3

; 1493 : 			}
; 1494 : 		}
; 1495 : 
; 1496 : #if PATH_CITY_AVOID_WEIGHT != 0
; 1497 : 		if(pToPlot->getPlotCity() && !(pToPlot->getX() == finder->GetDestX() && pToPlot->getY() == finder->GetDestY()))
; 1498 : 		{
; 1499 : 			iCost += PATH_CITY_AVOID_WEIGHT; // slewis - this should be zeroed out currently
; 1500 : 		}
; 1501 : #endif
; 1502 : 	}
; 1503 : 	else

	jmp	SHORT $LN227@PathCost
$LN33@PathCost:

; 1504 : 	{
; 1505 : 		iCost = (PATH_MOVEMENT_WEIGHT * iCost);

	imul	eax, 1000				; 000003e8H
	mov	DWORD PTR _iCost$[esp+52], eax
$LN227@PathCost:

; 1506 : 	}
; 1507 : 
; 1508 : 	if(bMaximizeExplore)

	cmp	BYTE PTR _bMaximizeExplore$[esp+52], 0
	je	SHORT $LN228@PathCost

; 1509 : 	{
; 1510 : #ifdef AUI_ASTAR_FIX_MAXIMIZE_EXPLORE_CONSIDER_2ND_RING_NONREVEALED
; 1511 : 		int iUnseenPlots = pToPlot->getNumNonrevealedInRange(eUnitTeam, pToPlot->seeFromLevel(eUnitTeam));
; 1512 : #else
; 1513 : 		int iUnseenPlots = pToPlot->getNumAdjacentNonrevealed(eUnitTeam);

	mov	edi, DWORD PTR _eUnitTeam$[esp+56]
	push	edi
	mov	ecx, ebx
	call	?getNumAdjacentNonrevealed@CvPlot@@QBEHW4TeamTypes@@@Z ; CvPlot::getNumAdjacentNonrevealed

; 1514 : #endif
; 1515 : 		if(!pToPlot->isRevealed(eUnitTeam))

	mov	edx, edi
	shr	edx, 5
	mov	ecx, edx
	shl	ecx, 5
	mov	DWORD PTR tv966[esp+52], ecx
	mov	ecx, edi
	mov	edi, DWORD PTR tv966[esp+52]
	sub	ecx, edi
	mov	edi, 1
	shl	edi, cl
	test	edi, DWORD PTR [ebx+edx*4+8]
	jne	SHORT $LN11@PathCost

; 1516 : 		{
; 1517 : 			iUnseenPlots += 1;

	inc	eax
$LN11@PathCost:

; 1518 : 		}
; 1519 : 
; 1520 : 		iCost += (7 - iUnseenPlots) * PATH_EXPLORE_NON_REVEAL_WEIGHT;

	mov	ecx, 7
	sub	ecx, eax
	mov	eax, DWORD PTR _iCost$[esp+52]
	lea	edx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _iCost$[esp+52], ecx
$LN228@PathCost:

; 1521 : 	}
; 1522 : 
; 1523 : 	// If we are a land unit and we are moving through the water, make the cost a little higher so that
; 1524 : 	// we favor staying on land or getting back to land as quickly as possible because it is dangerous to
; 1525 : 	// be on the water.  Don't add this penalty if the unit is human controlled however, we will assume they want
; 1526 : 	// the best path, rather than the safest.
; 1527 : #ifdef AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT
; 1528 : 	if (eUnitDomain == DOMAIN_LAND && bToPlotIsWater)
; 1529 : 	{
; 1530 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1531 : 		if (bIsAIControl)
; 1532 : #else
; 1533 : 		if (!pCacheData->isHuman() || pCacheData->IsAutomated())
; 1534 : #endif
; 1535 : 		{
; 1536 : 			iCost += PATH_THROUGH_WATER;
; 1537 : 		}
; 1538 : 		else
; 1539 : 		{
; 1540 : 			iCost += AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT + PATH_TERRITORY_WEIGHT;
; 1541 : 		}
; 1542 : 	}
; 1543 : #else
; 1544 : 	if(eUnitDomain == DOMAIN_LAND && bToPlotIsWater && (!pCacheData->isHuman() || pCacheData->IsAutomated()))

	cmp	DWORD PTR _eUnitDomain$[esp+56], 2
	jne	SHORT $LN10@PathCost
	cmp	BYTE PTR _bToPlotIsWater$[esp+52], 0
	je	SHORT $LN10@PathCost
	cmp	BYTE PTR [ebp+152], 0
	je	SHORT $LN9@PathCost
	cmp	BYTE PTR [ebp+153], 0
	je	SHORT $LN10@PathCost
$LN9@PathCost:

; 1545 : 	{
; 1546 : 		iCost += PATH_THROUGH_WATER;

	add	DWORD PTR _iCost$[esp+52], 1000		; 000003e8H
$LN10@PathCost:

; 1547 : 	}
; 1548 : #endif
; 1549 : 
; 1550 : 	if(pUnit->IsCombatUnit())

	mov	edx, DWORD PTR _pointer$[esp+52]
	cmp	DWORD PTR [edx+1044], 0
	jle	$LN1@PathCost

; 1551 : 	{
; 1552 : #if defined(AUI_ASTAR_AVOID_RIVER_CROSSING_WHEN_ATTACKING) || defined(AUI_ASTAR_CONSIDER_DAMAGE_WHEN_ATTACKING)
; 1553 : 		bool bToPlotHasEnemy = pToPlot->isVisibleEnemyDefender(pUnit) || pToPlot->isEnemyCity(*pUnit);
; 1554 : 		if (iMovesLeft == 0 && !bToPlotHasEnemy)
; 1555 : #else
; 1556 : 		if(iMovesLeft == 0)

	cmp	DWORD PTR _iMovesLeft$[esp+56], 0
	jne	SHORT $LN229@PathCost

; 1557 : #endif
; 1558 : 		{
; 1559 : #ifdef AUI_ASTAR_FIX_DEFENSE_PENALTIES_CONSIDERED_FOR_UNITS_WITHOUT_DEFENSE_BONUS
; 1560 : 			int iDefenseBonus = pToPlot->defenseModifier(eUnitTeam, false);
; 1561 : 			if (iDefenseBonus > 0)
; 1562 : 			{
; 1563 : 				if (pUnit->noDefensiveBonus())
; 1564 : 					iDefenseBonus = 0;
; 1565 : 				else if (iDefenseBonus > 200)
; 1566 : 					iDefenseBonus = 200;
; 1567 : 			}
; 1568 : 			iCost += PATH_DEFENSE_WEIGHT * (200 - iDefenseBonus);
; 1569 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 1570 : 			iCost += (PATH_DEFENSE_WEIGHT * MAX(0, (200 - ((pUnit->noDefensiveBonus()) ? 0 : pToPlot->defenseModifier(eUnitTeam, false)))));
; 1571 : #else
; 1572 : 			iCost += (PATH_DEFENSE_WEIGHT * std::max(0, (200 - ((pUnit->noDefensiveBonus()) ? 0 : pToPlot->defenseModifier(eUnitTeam, false)))));

	mov	ecx, edx
	call	?noDefensiveBonus@CvUnit@@QBE_NXZ	; CvUnit::noDefensiveBonus
	test	al, al
	je	SHORT $LN50@PathCost
	xor	eax, eax
	jmp	SHORT $LN51@PathCost
$LN50@PathCost:
	mov	eax, DWORD PTR _eUnitTeam$[esp+56]
	push	0
	push	0
	push	eax
	mov	ecx, ebx
	call	?defenseModifier@CvPlot@@QBEHW4TeamTypes@@_N1@Z ; CvPlot::defenseModifier
$LN51@PathCost:
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	DWORD PTR $T223322[esp+52], ecx
	mov	DWORD PTR $T223325[esp+52], 0
	lea	eax, DWORD PTR $T223322[esp+52]
	test	ecx, ecx
	jg	SHORT $LN207@PathCost
	lea	eax, DWORD PTR $T223325[esp+52]
$LN207@PathCost:
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR _iCost$[esp+52]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _iCost$[esp+52], eax
$LN229@PathCost:

; 1573 : #endif
; 1574 : 		}
; 1575 : 
; 1576 : #if !defined(AUI_ASTAR_AVOID_RIVER_CROSSING_WHEN_ATTACKING) && !defined(AUI_ASTAR_CONSIDER_DAMAGE_WHEN_ATTACKING)
; 1577 : 		if(pCacheData->IsAutomated())

	cmp	BYTE PTR [ebp+153], 0
	je	$LN1@PathCost

; 1578 : #endif
; 1579 : 		{
; 1580 : 			if(pCacheData->IsCanAttack())

	cmp	BYTE PTR [ebp+158], 0
	je	$LN1@PathCost

; 1581 : 			{
; 1582 : 				if(finder->IsPathDest(iToPlotX, iToPlotY))

	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	$LN1@PathCost
	mov	ecx, DWORD PTR [ebp+44]
	mov	edi, DWORD PTR _iToPlotY$[esp+56]
	push	ebp
	mov	ebp, DWORD PTR _iToPlotX$[esp+60]
	push	ecx
	push	edi
	push	ebp
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN1@PathCost

; 1583 : 				{
; 1584 : #if defined(AUI_ASTAR_AVOID_RIVER_CROSSING_WHEN_ATTACKING) || defined(AUI_ASTAR_CONSIDER_DAMAGE_WHEN_ATTACKING)
; 1585 : 					if (bToPlotHasEnemy)
; 1586 : #else
; 1587 : 					if(pToPlot->isVisibleEnemyDefender(pUnit))

	mov	edx, DWORD PTR _pointer$[esp+52]
	push	edx
	mov	ecx, ebx
	call	?isVisibleEnemyDefender@CvPlot@@QBE_NPBVCvUnit@@@Z ; CvPlot::isVisibleEnemyDefender
	test	al, al
	je	$LN1@PathCost

; 1588 : #endif
; 1589 : 					{
; 1590 : #ifdef AUI_ASTAR_CONSIDER_DAMAGE_WHEN_ATTACKING
; 1591 : 						int iDealtDamage = 0;
; 1592 : 						int iSelfDamage = 0;
; 1593 : 						CvCity* pCity = pToPlot->getPlotCity();
; 1594 : 						if (pCity)
; 1595 : 						{
; 1596 : 							int iAttackerStrength = pUnit->GetMaxAttackStrength(pFromPlot, pToPlot, NULL);
; 1597 : 							int iDefenderStrength = pCity->getStrengthValue();
; 1598 : 
; 1599 : 							iDealtDamage = pUnit->getCombatDamage(iAttackerStrength, iDefenderStrength, pUnit->getDamage(), /*bIncludeRand*/ false, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ true);
; 1600 : 							iSelfDamage = pUnit->getCombatDamage(iDefenderStrength, iAttackerStrength, pCity->getDamage(), /*bIncludeRand*/ false, /*bAttackerIsCity*/ true, /*bDefenderIsCity*/ false);
; 1601 : 
; 1602 : 							// Will both the attacker die, and the city fall? If so, the unit wins
; 1603 : 							if (iDealtDamage + pCity->getDamage() >= pCity->GetMaxHitPoints())
; 1604 : 							{
; 1605 : 								if (pUnit->isNoCapture())
; 1606 : 									iDealtDamage = pCity->GetMaxHitPoints() - pCity->getDamage() - 1;
; 1607 : 								if (iSelfDamage >= pUnit->GetCurrHitPoints())
; 1608 : 									iSelfDamage = pUnit->GetCurrHitPoints() - 1;
; 1609 : 							}
; 1610 : 					}
; 1611 : 						else
; 1612 : 						{
; 1613 : 							CvUnit* pDefender = pToPlot->getVisibleEnemyDefender(pUnit);
; 1614 : 							if (pDefender && pDefender->IsCanDefend())
; 1615 : 							{
; 1616 : 								// handle the Zulu special thrown spear first attack
; 1617 : 								if (pUnit->isRangedSupportFire() && pUnit->canEverRangeStrikeAt(pToPlot->getX(), pToPlot->getY()))
; 1618 : 									iDealtDamage = pUnit->GetRangeCombatDamage(pDefender, /*pCity*/ NULL, /*bIncludeRand*/ false);
; 1619 : 
; 1620 : 								if (iDealtDamage < pDefender->GetCurrHitPoints())
; 1621 : 								{
; 1622 : 									int iAttackerStrength = pUnit->GetMaxAttackStrength(pFromPlot, pToPlot, pDefender);
; 1623 : 									int iDefenderStrength = pDefender->GetMaxDefenseStrength(pToPlot, pUnit);
; 1624 : 
; 1625 : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 1626 : 									bool isAttackingFromHigherElevation = 
; 1627 : 										((pUnit->plot()->isMountain() && !pDefender->plot()->isMountain()) || // attacking from mountain to non-mountain
; 1628 : 										(pUnit->plot()->isHills() && pDefender->plot()->isFlatlands())); // attacking from hills to flatlands
; 1629 : 									if ((pUnit->IsCanHeavyCharge() || (pUnit->GetHeavyChargeDownhill() > 0 && isAttackingFromHigherElevation))
; 1630 : 										&& !pDefender->CanFallBackFromMelee(*pUnit))
; 1631 : #else
; 1632 : 									if (pUnit->IsCanHeavyCharge() && !pDefender->CanFallBackFromMelee(*pUnit))
; 1633 : #endif
; 1634 : 										iAttackerStrength = (iAttackerStrength * 150) / 100;
; 1635 : 
; 1636 : 									iSelfDamage = pDefender->getCombatDamage(iDefenderStrength, iAttackerStrength, pDefender->getDamage() + iDealtDamage, /*bIncludeRand*/ false, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);
; 1637 : 									iDealtDamage = pUnit->getCombatDamage(iAttackerStrength, iDefenderStrength, pUnit->getDamage(), /*bIncludeRand*/ false, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);
; 1638 : 
; 1639 : 									// Will both units be killed by this? :o If so, take drastic corrective measures
; 1640 : 									if (iDealtDamage >= pDefender->GetCurrHitPoints() && iSelfDamage >= pUnit->GetCurrHitPoints())
; 1641 : 									{
; 1642 : 										// He who hath the least amount of damage survives with 1 HP left
; 1643 : 										if (iDealtDamage + pDefender->getDamage() > iSelfDamage + pUnit->getDamage())
; 1644 : 											iSelfDamage = pUnit->GetCurrHitPoints() - 1;
; 1645 : 										else
; 1646 : 											iDealtDamage = pDefender->GetCurrHitPoints() - 1;
; 1647 : 									}
; 1648 : 								}
; 1649 : 							}
; 1650 : 						}
; 1651 : 						if (iSelfDamage > pUnit->GetCurrHitPoints())
; 1652 : 							iSelfDamage = pUnit->GetMaxHitPoints();
; 1653 : 						if (iDealtDamage > GC.getMAX_HIT_POINTS())
; 1654 : 							iDealtDamage = GC.getMAX_HIT_POINTS();
; 1655 : 						iCost += iSelfDamage * PATH_DAMAGE_WEIGHT * pUnit->GetMaxHitPoints() / 100 + (GC.getMAX_HIT_POINTS() - iDealtDamage) * PATH_DAMAGE_WEIGHT / 10;
; 1656 : #elif defined(AUI_ASTAR_FIX_DEFENSE_PENALTIES_CONSIDERED_FOR_UNITS_WITHOUT_DEFENSE_BONUS)
; 1657 : 						int iDefenseBonus = pFromPlot->defenseModifier(eUnitTeam, false);
; 1658 : 						if (iDefenseBonus > 0)
; 1659 : 						{
; 1660 : 							if (pUnit->noDefensiveBonus())
; 1661 : 								iDefenseBonus = 0;
; 1662 : 							else if (iDefenseBonus > 200)
; 1663 : 								iDefenseBonus = 200;
; 1664 : 						}
; 1665 : 						iCost += PATH_DEFENSE_WEIGHT * (200 - iDefenseBonus);
; 1666 : #else
; 1667 : #if defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 1668 : 						iCost += (PATH_DEFENSE_WEIGHT * MAX(0, (200 - ((pUnit->noDefensiveBonus()) ? 0 : pFromPlot->defenseModifier(eUnitTeam, false)))));
; 1669 : #else
; 1670 : 						iCost += (PATH_DEFENSE_WEIGHT * std::max(0, (200 - ((pUnit->noDefensiveBonus()) ? 0 : pFromPlot->defenseModifier(eUnitTeam, false)))));

	mov	ebx, DWORD PTR _pointer$[esp+52]
	mov	ecx, ebx
	call	?noDefensiveBonus@CvUnit@@QBE_NXZ	; CvUnit::noDefensiveBonus
	test	al, al
	je	SHORT $LN52@PathCost
	xor	eax, eax
	jmp	SHORT $LN53@PathCost
$LN52@PathCost:
	mov	eax, DWORD PTR _eUnitTeam$[esp+56]
	push	0
	push	0
	push	eax
	mov	ecx, esi
	call	?defenseModifier@CvPlot@@QBEHW4TeamTypes@@_N1@Z ; CvPlot::defenseModifier
$LN53@PathCost:
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	DWORD PTR $T223326[esp+52], ecx
	mov	DWORD PTR $T223329[esp+52], 0
	lea	eax, DWORD PTR $T223326[esp+52]
	test	ecx, ecx
	jg	SHORT $LN218@PathCost
	lea	eax, DWORD PTR $T223329[esp+52]
$LN218@PathCost:
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR _iCost$[esp+52]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edx+ecx*2]

; 1671 : #endif
; 1672 : 
; 1673 : 						// I guess we may as well be the garrison
; 1674 : #if PATH_CITY_WEIGHT != 0
; 1675 : 						if(!(pFromPlot->isCity()))
; 1676 : 						{
; 1677 : 							iCost += PATH_CITY_WEIGHT;
; 1678 : 						}
; 1679 : #endif
; 1680 : 
; 1681 : 						if(pFromPlot->isRiverCrossing(directionXY(iFromPlotX, iFromPlotY, iToPlotX, iToPlotY)))

	mov	ecx, DWORD PTR _iFromPlotY$[esp+56]
	mov	edx, DWORD PTR _iFromPlotX$[esp+56]
	push	edi
	push	ebp
	push	ecx
	push	edx
	mov	DWORD PTR _iCost$[esp+68], eax
	call	?directionXY@@YA?AW4DirectionTypes@@HHHH@Z ; directionXY
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, esi
	call	?isRiverCrossing@CvPlot@@QBE_NW4DirectionTypes@@@Z ; CvPlot::isRiverCrossing
	test	al, al
	je	SHORT $LN1@PathCost

; 1682 : 						{
; 1683 : 							if(!(pUnit->isRiverCrossingNoPenalty()))

	mov	ecx, ebx
	call	?isRiverCrossingNoPenalty@CvUnit@@QBE_NXZ ; CvUnit::isRiverCrossingNoPenalty
	test	al, al
	jne	SHORT $LN1@PathCost

; 1684 : 							{
; 1685 : 								iCost += (PATH_RIVER_WEIGHT * -(GC.getRIVER_ATTACK_MODIFIER()));
; 1686 : 								iCost += (PATH_MOVEMENT_WEIGHT * iMovesLeft);

	mov	eax, DWORD PTR _iMovesLeft$[esp+56]
	lea	eax, DWORD PTR [eax+eax*4]
	add	eax, eax
	sub	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7388
	imul	eax, 100				; 00000064H
	add	DWORD PTR _iCost$[esp+52], eax
$LN1@PathCost:

; 1687 : 							}
; 1688 : 						}
; 1689 : #endif
; 1690 : 					}
; 1691 : 				}
; 1692 : 			}
; 1693 : 		}
; 1694 : 	}
; 1695 : 
; 1696 : 	FAssert(iCost != MAX_INT);
; 1697 : 
; 1698 : 	iCost += PATH_STEP_WEIGHT;

	mov	eax, DWORD PTR _iCost$[esp+52]
	pop	edi
	pop	esi
	pop	ebp
	add	eax, 2
	pop	ebx

; 1699 : 
; 1700 : 	FAssert(iCost > 0);
; 1701 : 
; 1702 : 	return iCost;
; 1703 : }

	add	esp, 40					; 00000028H
	ret	0
?PathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; PathCost
_TEXT	ENDS
PUBLIC	?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathValid
EXTRN	?canMoveThrough@CvUnit@@QBE_NABVCvPlot@@E@Z:PROC ; CvUnit::canMoveThrough
EXTRN	?atWar@@YA_NW4TeamTypes@@0@Z:PROC		; atWar
EXTRN	?isAdjacent@CvPlot@@QBE_NPBV1@@Z:PROC		; CvPlot::isAdjacent
EXTRN	?canMoveAllTerrain@CvUnit@@QBE_NXZ:PROC		; CvUnit::canMoveAllTerrain
EXTRN	?IsHoveringUnit@CvUnit@@QBE_NXZ:PROC		; CvUnit::IsHoveringUnit
EXTRN	?isOwned@CvPlot@@QBE_NXZ:PROC			; CvPlot::isOwned
EXTRN	?getBestDefender@CvPlot@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4PlayerTypes@@0PBVCvUnit@@_N222@Z:PROC ; CvPlot::getBestDefender
EXTRN	?isVisibleEnemyUnit@CvPlot@@QBE_NPBVCvUnit@@@Z:PROC ; CvPlot::isVisibleEnemyUnit
EXTRN	?canEnterTerrain@CvUnit@@QBE_NABVCvPlot@@E@Z:PROC ; CvUnit::canEnterTerrain
EXTRN	?getActiveTeam@CvGame@@QAE?AW4TeamTypes@@XZ:PROC ; CvGame::getActiveTeam
; Function compile flags: /Ogtpy
;	COMDAT ?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_bFirstRun$ = -77					; size = 1
_bFromPlotOwned$ = -76					; size = 1
_bAIControl$ = -75					; size = 1
_bIsHuman$ = -74					; size = 1
_bUnitIsCombat$ = -73					; size = 1
_iNumTurns$ = -72					; size = 4
_iFinderInfo$ = -68					; size = 4
_iFinderIgnoreStacking$ = -64				; size = 4
_iNodeX$ = -60						; size = 4
_iNodeY$ = -56						; size = 4
_eUnitTeam$ = -52					; size = 4
_eFromPlotTeam$ = -48					; size = 4
_unit_owner$ = -44					; size = 4
_iOldNumTurns$ = -40					; size = 4
_iUnitPlotLimit$ = -36					; size = 4
_theMap$ = -36						; size = 4
_pUnitPlot$ = -32					; size = 4
_kUnitTeam$ = -32					; size = 4
_iDestX$ = -28						; size = 4
_iDestY$ = -24						; size = 4
_iUnitX$ = -20						; size = 4
_iUnitY$ = -16						; size = 4
tv856 = -12						; size = 4
_unit_domain_type$ = -8					; size = 4
$T223707 = -8						; size = 8
_parent$ = 8						; size = 4
tv1027 = 12						; size = 4
_bPreviousNodeHostile$ = 12				; size = 1
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; PathValid, COMDAT

; 1708 : {

	sub	esp, 80					; 00000050H

; 1709 : #ifndef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1710 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 1711 : 	CvPlot* pToPlot = node->m_pPlot;
; 1712 : 	if (!pToPlot)
; 1713 : 		return FALSE;
; 1714 : #else
; 1715 : 	CvMap& theMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	ebx
	push	ebp
	push	esi

; 1716 : 
; 1717 : 	CvPlot* pToPlot = theMap.plotUnchecked(node->m_iX, node->m_iY);

	mov	esi, DWORD PTR _node$[esp+88]
	movsx	ebp, WORD PTR [esi+82]
	imul	ebp, DWORD PTR [eax+4020]
	movsx	ecx, WORD PTR [esi+80]
	add	ebp, ecx
	imul	ebp, 484				; 000001e4H
	add	ebp, DWORD PTR [eax+4068]
	mov	DWORD PTR _theMap$[esp+92], eax

; 1718 : #endif
; 1719 : 	PREFETCH_FASTAR_CVPLOT(reinterpret_cast<char*>(pToPlot));
; 1720 : #endif
; 1721 : 
; 1722 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 1723 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());

	mov	eax, DWORD PTR _finder$[esp+88]

; 1724 : 	TeamTypes eUnitTeam = pCacheData->getTeam();
; 1725 : 	PlayerTypes unit_owner = pCacheData->getOwner();

	mov	edx, DWORD PTR [eax+140]
	prefetcht0 BYTE PTR [ebp]
	prefetcht0 BYTE PTR [ebp+64]
	push	edi
	mov	edi, DWORD PTR [eax+144]
	mov	DWORD PTR _eUnitTeam$[esp+96], edi
	mov	DWORD PTR _unit_owner$[esp+96], edx

; 1726 : 
; 1727 : 	CvAssertMsg(eUnitTeam != NO_TEAM, "The unit's team should be a vaild value");
; 1728 : 	if (eUnitTeam == NO_TEAM)

	cmp	edi, -1
	jne	SHORT $LN55@PathValid

; 1729 : 	{
; 1730 : 		eUnitTeam = GC.getGame().getActiveTeam();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getActiveTeam@CvGame@@QAE?AW4TeamTypes@@XZ ; CvGame::getActiveTeam
	mov	edi, eax
	mov	DWORD PTR _eUnitTeam$[esp+96], eax
$LN55@PathValid:

; 1731 : 	}
; 1732 : 
; 1733 : 	CvTeam& kUnitTeam = GET_TEAM(eUnitTeam);

	mov	eax, edi
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	DWORD PTR _kUnitTeam$[esp+96], eax

; 1734 : 
; 1735 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1736 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 1737 : 	CvPlot* pToPlot = node->m_pPlot;
; 1738 : 	if (!pToPlot)
; 1739 : 		return FALSE;
; 1740 : #else
; 1741 : 	CvMap& theMap = GC.getMap();
; 1742 : 
; 1743 : 	CvPlot* pToPlot = theMap.plotUnchecked(node->m_iX, node->m_iY);
; 1744 : #endif
; 1745 : 	PREFETCH_FASTAR_CVPLOT(reinterpret_cast<char*>(pToPlot));
; 1746 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1747 : 	CvAStarNode& kToNodeCacheData = *node;
; 1748 : #else
; 1749 : 	CvPathNodeCacheData& kToNodeCacheData = node->m_kCostCacheData;
; 1750 : #endif
; 1751 : #endif
; 1752 : 
; 1753 : #ifdef AUI_ASTAR_FIX_PARENT_NODE_ALWAYS_VALID_OPTIMIZATION
; 1754 : 	// If this is the first node in the path, it is always valid (starting location)
; 1755 : 	if (parent == NULL)
; 1756 : 	{
; 1757 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1758 : 		// Cache values for this node that we will use in the loop
; 1759 : 		if (!kToNodeCacheData.bIsCalculated)
; 1760 : 		{
; 1761 : 			kToNodeCacheData.bIsCalculated = true;
; 1762 : 			kToNodeCacheData.bPlotVisibleToTeam = true;
; 1763 : 			kToNodeCacheData.bIsMountain = pToPlot->isMountain();
; 1764 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 1765 : 			kToNodeCacheData.bIsWater = !pToPlot->IsAllowsWalkWater();
; 1766 : 			if (pUnit->IsHoveringUnit())
; 1767 : 				kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 1768 : 			else
; 1769 : 				kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->isWater();
; 1770 : #else
; 1771 : 			kToNodeCacheData.bIsWater = (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater());
; 1772 : #endif
; 1773 : 			kToNodeCacheData.bCanEnterTerrain = true;
; 1774 : 			kToNodeCacheData.bIsRevealedToTeam = true;
; 1775 : 			kToNodeCacheData.bContainsOtherFriendlyTeamCity = false;
; 1776 : 			CvCity* pCity = pToPlot->getPlotCity();
; 1777 : 			if (pCity)
; 1778 : 			{
; 1779 : 				if (unit_owner != pCity->getOwner() && !kUnitTeam.isAtWar(pCity->getTeam()))
; 1780 : 					kToNodeCacheData.bContainsOtherFriendlyTeamCity = true;
; 1781 : 			}
; 1782 : 			kToNodeCacheData.bContainsEnemyCity = pToPlot->isEnemyCity(*pUnit);
; 1783 : 			kToNodeCacheData.iNumFriendlyUnitsOfType = pToPlot->getNumFriendlyUnitsOfType(pUnit);
; 1784 : 			kToNodeCacheData.bContainsVisibleEnemy = pToPlot->isVisibleEnemyUnit(pUnit);
; 1785 : 			kToNodeCacheData.bContainsVisibleEnemyDefender = pToPlot->getBestDefender(NO_PLAYER, unit_owner, pUnit).pointer() != NULL;
; 1786 : 		}
; 1787 : #endif
; 1788 : 		return TRUE;
; 1789 : 	}
; 1790 : #endif
; 1791 : 
; 1792 : 	// Cache values for this node that we will use in the loop
; 1793 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1794 : 	if (!kToNodeCacheData.bIsCalculated)
; 1795 : 	{
; 1796 : 		kToNodeCacheData.bPlotVisibleToTeam = pToPlot->isVisible(eUnitTeam);
; 1797 : 		kToNodeCacheData.bIsMountain = pToPlot->isMountain();
; 1798 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 1799 : 		kToNodeCacheData.bIsWater = !pToPlot->IsAllowsWalkWater();
; 1800 : 		if (pUnit->IsHoveringUnit())
; 1801 : 			kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 1802 : 		else
; 1803 : 			kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->isWater();
; 1804 : #else
; 1805 : 		kToNodeCacheData.bIsWater = (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater());
; 1806 : #endif
; 1807 : 		kToNodeCacheData.bIsRevealedToTeam = pToPlot->isRevealed(eUnitTeam);
; 1808 : 		kToNodeCacheData.bContainsOtherFriendlyTeamCity = false;
; 1809 : 		CvCity* pCity = pToPlot->getPlotCity();
; 1810 : 		if (pCity)
; 1811 : 		{
; 1812 : 			if (unit_owner != pCity->getOwner() && !kUnitTeam.isAtWar(pCity->getTeam()))
; 1813 : 				kToNodeCacheData.bContainsOtherFriendlyTeamCity = true;
; 1814 : 		}
; 1815 : 		kToNodeCacheData.bContainsEnemyCity = pToPlot->isEnemyCity(*pUnit);
; 1816 : 		if (kToNodeCacheData.bPlotVisibleToTeam)
; 1817 : 		{
; 1818 : 			kToNodeCacheData.iNumFriendlyUnitsOfType = pToPlot->getNumFriendlyUnitsOfType(pUnit);
; 1819 : 			kToNodeCacheData.bContainsVisibleEnemy = pToPlot->isVisibleEnemyUnit(pUnit);
; 1820 : 			kToNodeCacheData.bContainsVisibleEnemyDefender = pToPlot->getBestDefender(NO_PLAYER, unit_owner, pUnit).pointer() != NULL;
; 1821 : 		}
; 1822 : 		else
; 1823 : 		{
; 1824 : 			kToNodeCacheData.iNumFriendlyUnitsOfType = 0;
; 1825 : 			kToNodeCacheData.bContainsVisibleEnemy = false;
; 1826 : 			kToNodeCacheData.bContainsVisibleEnemyDefender = false;
; 1827 : 		}
; 1828 : 	}
; 1829 : #else
; 1830 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1831 : 	CvAStarNode& kToNodeCacheData = *node;
; 1832 : #else
; 1833 : 	CvPathNodeCacheData& kToNodeCacheData = node->m_kCostCacheData;
; 1834 : #endif
; 1835 : 	kToNodeCacheData.bPlotVisibleToTeam = pToPlot->isVisible(eUnitTeam);

	cmp	edi, -1
	jne	SHORT $LN79@PathValid
	xor	al, al
	jmp	SHORT $LN80@PathValid
$LN79@PathValid:
	mov	eax, DWORD PTR [ebp+156]
	cmp	WORD PTR [eax+edi*2], 0
	setg	al
$LN80@PathValid:
	mov	cl, BYTE PTR [esi+88]

; 1836 : 	kToNodeCacheData.iNumFriendlyUnitsOfType = pToPlot->getNumFriendlyUnitsOfType(pUnit);

	mov	ebx, DWORD PTR _pointer$[esp+92]
	xor	cl, al
	and	cl, 1
	xor	BYTE PTR [esi+88], cl
	push	1
	push	ebx
	mov	ecx, ebp
	call	?getNumFriendlyUnitsOfType@CvPlot@@QBEHPBVCvUnit@@_N@Z ; CvPlot::getNumFriendlyUnitsOfType
	mov	DWORD PTR [esi+92], eax

; 1837 : 	kToNodeCacheData.bIsMountain = pToPlot->isMountain();

	cmp	BYTE PTR [ebp+5], 0
	sete	dl
	add	dl, dl
	xor	dl, BYTE PTR [esi+88]
	and	dl, 2
	xor	BYTE PTR [esi+88], dl

; 1838 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 1839 : 	kToNodeCacheData.bIsWater = !pToPlot->IsAllowsWalkWater();
; 1840 : 	if (pUnit->IsHoveringUnit())
; 1841 : 		kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 1842 : 	else
; 1843 : 		kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->isWater();
; 1844 : #else
; 1845 : 	kToNodeCacheData.bIsWater = (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater());

	cmp	BYTE PTR [ebp+5], 3
	jne	SHORT $LN58@PathValid
	mov	ecx, ebp
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN58@PathValid
	mov	al, 1
	jmp	SHORT $LN59@PathValid
$LN58@PathValid:
	xor	al, al
$LN59@PathValid:
	add	al, al
	add	al, al
	xor	al, BYTE PTR [esi+88]

; 1846 : #endif
; 1847 : 	kToNodeCacheData.bCanEnterTerrain = pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE);

	push	128					; 00000080H
	and	al, 4
	xor	BYTE PTR [esi+88], al
	push	ebp
	mov	ecx, ebx
	call	?canEnterTerrain@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canEnterTerrain
	add	al, al
	add	al, al
	add	al, al
	xor	al, BYTE PTR [esi+88]
	and	al, 8
	xor	BYTE PTR [esi+88], al
	mov	dl, BYTE PTR [esi+88]

; 1848 : 	kToNodeCacheData.bIsRevealedToTeam = pToPlot->isRevealed(eUnitTeam);

	mov	eax, edi
	shr	eax, 5
	mov	ecx, eax
	shl	ecx, 5
	mov	DWORD PTR tv1027[esp+92], ecx
	mov	ecx, edi
	mov	edi, DWORD PTR tv1027[esp+92]
	sub	ecx, edi
	mov	edi, 1
	shl	edi, cl
	test	edi, DWORD PTR [ebp+eax*4+8]
	setne	al

; 1849 : 	kToNodeCacheData.bContainsOtherFriendlyTeamCity = false;

	and	al, 1
	shl	al, 4
	and	dl, 207					; 000000cfH
	or	al, dl
	mov	BYTE PTR [esi+88], al

; 1850 : 	CvCity* pCity = pToPlot->getPlotCity();

	mov	eax, DWORD PTR [ebp+104]
	test	eax, eax
	jl	SHORT $LN188@PathValid
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN188@PathValid
	mov	ecx, DWORD PTR [ebp+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 1851 : 	if(pCity)

	test	eax, eax
	je	SHORT $LN188@PathValid

; 1852 : 	{
; 1853 : 		if(unit_owner != pCity->getOwner() && !kUnitTeam.isAtWar(pCity->getTeam()))

	mov	edx, DWORD PTR _unit_owner$[esp+96]
	cmp	edx, DWORD PTR [eax+84]
	je	SHORT $LN188@PathValid
	mov	ecx, eax
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	mov	ecx, DWORD PTR _kUnitTeam$[esp+96]
	push	eax
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	jne	SHORT $LN188@PathValid

; 1854 : 			kToNodeCacheData.bContainsOtherFriendlyTeamCity = true;

	or	BYTE PTR [esi+88], 32			; 00000020H
$LN188@PathValid:

; 1855 : 	}
; 1856 : 	kToNodeCacheData.bContainsEnemyCity = pToPlot->isEnemyCity(*pUnit);

	mov	eax, DWORD PTR [ebp+104]
	test	eax, eax
	jl	SHORT $LN101@PathValid
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN101@PathValid
	mov	ecx, DWORD PTR [ebp+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	test	eax, eax
	je	SHORT $LN101@PathValid
	push	ebp
	mov	ecx, eax
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, ebx
	call	?isEnemy@CvUnit@@QBE_NW4TeamTypes@@PBVCvPlot@@@Z ; CvUnit::isEnemy
	jmp	SHORT $LN102@PathValid
$LN101@PathValid:
	xor	al, al
$LN102@PathValid:
	shl	al, 6
	xor	al, BYTE PTR [esi+88]

; 1857 : 	kToNodeCacheData.bContainsVisibleEnemy = pToPlot->isVisibleEnemyUnit(pUnit);

	push	ebx
	and	al, 64					; 00000040H
	xor	BYTE PTR [esi+88], al
	mov	ecx, ebp
	call	?isVisibleEnemyUnit@CvPlot@@QBE_NPBVCvUnit@@@Z ; CvPlot::isVisibleEnemyUnit
	mov	dl, BYTE PTR [esi+88]

; 1858 : 	kToNodeCacheData.bContainsVisibleEnemyDefender = pToPlot->getBestDefender(NO_PLAYER, unit_owner, pUnit).pointer() != NULL;

	push	0
	push	0
	push	0
	push	0
	shl	al, 7
	and	dl, 127					; 0000007fH
	or	dl, al
	mov	eax, DWORD PTR _unit_owner$[esp+112]
	push	ebx
	push	eax
	push	-1
	lea	ecx, DWORD PTR $T223707[esp+124]
	push	ecx
	mov	ecx, ebp
	mov	BYTE PTR [esi+88], dl
	call	?getBestDefender@CvPlot@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4PlayerTypes@@0PBVCvUnit@@_N222@Z ; CvPlot::getBestDefender
	cmp	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T223707[esp+96]
	setne	dl
	xor	dl, BYTE PTR [esi+89]
	and	dl, 1
	xor	BYTE PTR [esi+89], dl
	test	ecx, ecx
	je	SHORT $LN114@PathValid
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN114@PathValid:

; 1859 : #endif
; 1860 : 
; 1861 : #ifndef AUI_ASTAR_FIX_PARENT_NODE_ALWAYS_VALID_OPTIMIZATION
; 1862 : 	// If this is the first node in the path, it is always valid (starting location)
; 1863 : 	if (parent == NULL)

	cmp	DWORD PTR _parent$[esp+92], 0

; 1864 : 	{
; 1865 : 		return TRUE;

	je	$LN197@PathValid

; 1866 : 	}
; 1867 : #endif
; 1868 : 
; 1869 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 1870 : 	CvPlot* pFromPlot = parent->m_pPlot;
; 1871 : 	if (!pFromPlot)
; 1872 : 		return FALSE;
; 1873 : #else
; 1874 : 	CvPlot* pFromPlot = theMap.plotUnchecked(parent->m_iX, parent->m_iY);

	mov	eax, DWORD PTR _parent$[esp+92]
	movsx	edi, WORD PTR [eax+82]
	mov	ecx, DWORD PTR _theMap$[esp+96]
	imul	edi, DWORD PTR [ecx+4020]
	movsx	eax, WORD PTR [eax+80]

; 1875 : #endif
; 1876 : 	PREFETCH_FASTAR_CVPLOT(reinterpret_cast<char*>(pFromPlot));
; 1877 : 
; 1878 : 	// pulling invariants out of the loop
; 1879 : 	bool bAIControl = pCacheData->IsAutomated();
; 1880 : 	int iUnitX = pUnit->getX();

	mov	edx, DWORD PTR [ebx+76]
	add	edi, eax
	mov	eax, DWORD PTR _finder$[esp+92]
	imul	edi, 484				; 000001e4H
	add	edi, DWORD PTR [ecx+4068]
	movzx	ecx, BYTE PTR [eax+153]

; 1881 : 	int iUnitY = pUnit->getY();
; 1882 : 	DomainTypes unit_domain_type = pCacheData->getDomainType();
; 1883 : 	bool bUnitIsCombat           = pUnit->IsCombatUnit();

	cmp	DWORD PTR [ebx+1044], 0
	prefetcht0 BYTE PTR [edi]
	prefetcht0 BYTE PTR [edi+64]
	mov	BYTE PTR _bAIControl$[esp+96], cl
	mov	ecx, DWORD PTR [ebx+88]
	mov	DWORD PTR _iUnitY$[esp+96], ecx

; 1884 : 	bool bIsHuman				 = pCacheData->isHuman();

	movzx	ecx, BYTE PTR [eax+152]
	mov	DWORD PTR _iUnitX$[esp+96], edx
	mov	edx, DWORD PTR [eax+148]
	mov	DWORD PTR _unit_domain_type$[esp+96], edx

; 1885 : 	int iFinderInfo              = finder->GetInfo();

	mov	edx, DWORD PTR [eax+72]
	mov	BYTE PTR _bIsHuman$[esp+96], cl

; 1886 : 	CvPlot* pUnitPlot            = pUnit->plot();

	mov	ecx, ebx
	setg	BYTE PTR _bUnitIsCombat$[esp+96]
	mov	DWORD PTR _iFinderInfo$[esp+96], edx
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	DWORD PTR _pUnitPlot$[esp+96], eax

; 1887 : 	int iFinderIgnoreStacking    = iFinderInfo & MOVE_IGNORE_STACKING;

	mov	eax, DWORD PTR _iFinderInfo$[esp+96]
	and	eax, 4
	mov	DWORD PTR _iFinderIgnoreStacking$[esp+96], eax

; 1888 : 	int iUnitPlotLimit           = GC.getPLOT_UNIT_LIMIT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7356

; 1889 : 	bool bFromPlotOwned          = pFromPlot->isOwned();

	mov	ecx, edi
	mov	DWORD PTR _iUnitPlotLimit$[esp+96], eax
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	mov	BYTE PTR _bFromPlotOwned$[esp+96], al

; 1890 : 	TeamTypes eFromPlotTeam      = pFromPlot->getTeam();

	movsx	eax, BYTE PTR [edi+4]
	cmp	eax, -1
	je	SHORT $LN145@PathValid
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN152@PathValid
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _eFromPlotTeam$[esp+96], eax
	jmp	SHORT $LN144@PathValid
$LN152@PathValid:
	or	eax, -1
	mov	DWORD PTR _eFromPlotTeam$[esp+96], eax
	jmp	SHORT $LN144@PathValid
$LN145@PathValid:
	mov	DWORD PTR _eFromPlotTeam$[esp+96], -1
$LN144@PathValid:

; 1891 : 
; 1892 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1893 : 	if (!kToNodeCacheData.bIsCalculated)
; 1894 : 	{
; 1895 : 		if (bAIControl || kToNodeCacheData.bIsRevealedToTeam || !bIsHuman)
; 1896 : 			kToNodeCacheData.bCanEnterTerrain = pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE);
; 1897 : 		else
; 1898 : 			kToNodeCacheData.bCanEnterTerrain = true;
; 1899 : 		kToNodeCacheData.bIsCalculated = true;
; 1900 : 	}
; 1901 : #endif
; 1902 : 
; 1903 : 	// We have determined that this node is not the origin above (parent == NULL)
; 1904 : 	CvAStarNode* pNode = node;
; 1905 : 	bool bPreviousNodeHostile = false;
; 1906 : #ifndef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1907 : 	bool bPreviousVisibleToTeam = kToNodeCacheData.bPlotVisibleToTeam;
; 1908 : #endif
; 1909 : 	int iDestX = finder->GetDestX();

	mov	edx, DWORD PTR _finder$[esp+92]
	mov	ebx, DWORD PTR [edx+64]

; 1910 : 	int iDestY = finder->GetDestY();

	mov	edx, DWORD PTR [edx+68]
	mov	cl, BYTE PTR [esi+88]
	mov	DWORD PTR _iDestY$[esp+96], edx

; 1911 : 	int iNodeX = node->m_iX;

	movsx	edx, WORD PTR [esi+80]
	mov	DWORD PTR _iNodeX$[esp+96], edx

; 1912 : 	int iNodeY = node->m_iY;

	movsx	edx, WORD PTR [esi+82]
	mov	DWORD PTR _iNodeY$[esp+96], edx

; 1913 : 	int iOldNumTurns = -1;
; 1914 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 1915 : 	int iNumTurns;
; 1916 : #endif
; 1917 : 
; 1918 : 	// First run special case for checking "node" since it doesn't have a parent set yet
; 1919 : 	bool bFirstRun = true;
; 1920 : 
; 1921 : 	// Have to calculate this specially because the node passed into this function doesn't yet have data stored it in (hasn't reached pathAdd yet)
; 1922 : 	int iStartMoves = parent->m_iData1;
; 1923 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1924 : 	int iNumTurns = parent->m_iData2;
; 1925 : #else
; 1926 : 	iNumTurns = parent->m_iData2;

	mov	edx, DWORD PTR _parent$[esp+92]
	mov	DWORD PTR _iDestX$[esp+96], ebx
	mov	ebx, DWORD PTR [edx+16]
	and	cl, 1

; 1927 : #endif
; 1928 : #if defined(AUI_ASTAR_TURN_LIMITER)
; 1929 : 	int iMaxTurns = finder->GetMaxTurns();
; 1930 : #endif
; 1931 : 
; 1932 : 	if(iStartMoves == 0)

	cmp	DWORD PTR [edx+12], 0
	mov	eax, esi
	mov	BYTE PTR _bPreviousNodeHostile$[esp+92], 0
	mov	BYTE PTR _bFirstRun$[esp+96], 1
	mov	DWORD PTR _iNumTurns$[esp+96], ebx
	jne	SHORT $LN51@PathValid

; 1933 : 	{
; 1934 : 		iNumTurns++;

	inc	DWORD PTR _iNumTurns$[esp+96]
$LN51@PathValid:

; 1935 : 	}
; 1936 : 
; 1937 : 	iOldNumTurns = -1;

	or	ebx, -1
$LN199@PathValid:

; 1938 : 
; 1939 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 1940 : 	CvPlot* pPlot = NULL;
; 1941 : #endif
; 1942 : 
; 1943 : 	// Get a reference to the parent node cache data
; 1944 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1945 : 	CvAStarNode& kFromNodeCacheData = *parent;
; 1946 : #else
; 1947 : 	CvPathNodeCacheData& kFromNodeCacheData = parent->m_kCostCacheData;
; 1948 : #endif
; 1949 : 
; 1950 : 	// Loop through the current path until we find the path origin.
; 1951 : 	// This validates the path with the inclusion of the new path node.  We must do this because of the rules of where a unit can finish a turn.
; 1952 : 	// Please note that this can be an expensive loop as the path gets longer and longer, do as little work as possible in validating each node.  
; 1953 : 	// If there is an invariant value that needs to be fetched from the plot or unit for the node, please do the calculation and put it in the node's data cache.
; 1954 : 	while(pNode != NULL)
; 1955 : 	{
; 1956 : #ifdef AUI_ASTAR_TURN_LIMITER
; 1957 : 		if (iNumTurns > iMaxTurns)
; 1958 : 		{
; 1959 : 			return FALSE;  // Path is too long, terminate now
; 1960 : 		}
; 1961 : #endif
; 1962 : 		PREFETCH_FASTAR_NODE(pNode->m_pParent);

	mov	edx, DWORD PTR [eax+24]
	prefetcht0 BYTE PTR [edx]
	prefetcht0 BYTE PTR [edx+64]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _iOldNumTurns$[esp+96], ebx

; 1963 : 
; 1964 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 1965 : 		CvAStarNode& kNodeCacheData = *node;
; 1966 : #else
; 1967 : 		CvPathNodeCacheData& kNodeCacheData = pNode->m_kCostCacheData;
; 1968 : #endif
; 1969 : 		// This is a safeguard against the algorithm believing a plot to be impassable before actually knowing it (mid-search)
; 1970 : 		if(iOldNumTurns != -1 || (iDestX == iNodeX && iDestY == iNodeY))

	cmp	ebx, -1
	jne	SHORT $LN189@PathValid
	mov	edx, DWORD PTR _iNodeX$[esp+96]
	cmp	DWORD PTR _iDestX$[esp+96], edx
	jne	$LN179@PathValid
	mov	edx, DWORD PTR _iNodeY$[esp+96]
	cmp	DWORD PTR _iDestY$[esp+96], edx
	jne	$LN179@PathValid
$LN189@PathValid:

; 1971 : 		{
; 1972 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1973 : 			if (!kNodeCacheData.bCanEnterTerrain)
; 1974 : 			{
; 1975 : 				return FALSE;
; 1976 : 			}
; 1977 : #endif
; 1978 : 			// This plot is of greater distance than previously, so we know the unit is ending its turn here (pNode), or it's trying to attack through a unit (and might end up on this tile if an attack fails to kill the enemy)
; 1979 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1980 : 			if (iNumTurns != iOldNumTurns || bPreviousNodeHostile)
; 1981 : #else
; 1982 : 			if(iNumTurns != iOldNumTurns || bPreviousNodeHostile || !bPreviousVisibleToTeam)

	cmp	DWORD PTR _iNumTurns$[esp+96], ebx
	jne	SHORT $LN173@PathValid
	cmp	BYTE PTR _bPreviousNodeHostile$[esp+92], 0
	jne	SHORT $LN173@PathValid
	test	cl, cl
	jne	$LN179@PathValid
$LN173@PathValid:

; 1983 : #endif
; 1984 : 			{
; 1985 : 				// Don't count origin, or else a unit will block its own movement!
; 1986 : 				if(iNodeX != iUnitX || iNodeY != iUnitY)

	mov	ecx, DWORD PTR _iUnitX$[esp+96]
	cmp	DWORD PTR _iNodeX$[esp+96], ecx
	jne	SHORT $LN43@PathValid
	mov	edx, DWORD PTR _iUnitY$[esp+96]
	cmp	DWORD PTR _iNodeY$[esp+96], edx
	je	SHORT $LN179@PathValid
$LN43@PathValid:

; 1987 : 				{
; 1988 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 1989 : 					if (kNodeCacheData.bIsRevealedToTeam)
; 1990 : #else
; 1991 : 					if(kNodeCacheData.bPlotVisibleToTeam)

	mov	dl, BYTE PTR [eax+88]
	test	dl, 1
	je	SHORT $LN177@PathValid

; 1992 : #endif
; 1993 : 					{
; 1994 : 						// Check to see if any units are present at this full-turn move plot... if the player can see what's there
; 1995 : 						if(kNodeCacheData.iNumFriendlyUnitsOfType >= iUnitPlotLimit && !(iFinderIgnoreStacking))

	mov	ecx, DWORD PTR [eax+92]
	cmp	ecx, DWORD PTR _iUnitPlotLimit$[esp+96]
	jl	SHORT $LN174@PathValid
	cmp	DWORD PTR _iFinderIgnoreStacking$[esp+96], 0
	je	$LN166@PathValid
$LN174@PathValid:

; 1996 : 						{
; 1997 : 							return FALSE;
; 1998 : 						}
; 1999 : 
; 2000 : #ifndef AUI_ASTAR_FIX_PATH_VALID_PATH_PEAKS_FOR_NONHUMAN
; 2001 : 						if (kNodeCacheData.bIsMountain && !(iFinderIgnoreStacking) && (!bIsHuman || bAIControl))

	mov	cl, dl
	shr	cl, 1
	and	cl, 1
	je	SHORT $LN190@PathValid
	cmp	DWORD PTR _iFinderIgnoreStacking$[esp+96], 0
	jne	SHORT $LN190@PathValid
	cmp	BYTE PTR _bIsHuman$[esp+96], 0
	je	$LN166@PathValid
	cmp	BYTE PTR _bAIControl$[esp+96], 0
	jne	$LN166@PathValid
$LN190@PathValid:

; 2002 : 						{
; 2003 : 							return FALSE;
; 2004 : 						}
; 2005 : #endif
; 2006 : 
; 2007 : #ifndef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2008 : 						if(kNodeCacheData.bIsMountain && !kNodeCacheData.bCanEnterTerrain)

	test	cl, cl
	je	SHORT $LN176@PathValid
	test	dl, 8
	je	$LN166@PathValid
$LN176@PathValid:

; 2009 : 						{
; 2010 : 							return FALSE;
; 2011 : 						}
; 2012 : #endif
; 2013 : 
; 2014 : 						if ((iFinderInfo & CvUnit::MOVEFLAG_STAY_ON_LAND) && kNodeCacheData.bIsWater)

	test	DWORD PTR _iFinderInfo$[esp+96], 256	; 00000100H
	je	SHORT $LN177@PathValid
	test	dl, 4
	jne	$LN166@PathValid
$LN177@PathValid:

; 2015 : 						{
; 2016 : 							return FALSE;
; 2017 : 						}
; 2018 : #ifndef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2019 : 					}
; 2020 : 
; 2021 : 					if(kNodeCacheData.bIsRevealedToTeam)

	test	dl, 16					; 00000010H
	je	SHORT $LN179@PathValid

; 2022 : 					{
; 2023 : #endif
; 2024 : 						if (kNodeCacheData.bContainsOtherFriendlyTeamCity && !(iFinderIgnoreStacking))

	test	dl, 32					; 00000020H
	je	SHORT $LN179@PathValid
	cmp	DWORD PTR _iFinderIgnoreStacking$[esp+96], 0
	je	$LN166@PathValid
$LN179@PathValid:

; 2025 : 							return FALSE;
; 2026 : 					}
; 2027 : 				}
; 2028 : 			}
; 2029 : 		}
; 2030 : 
; 2031 : 		bPreviousNodeHostile = false;
; 2032 : 		if(kNodeCacheData.bContainsEnemyCity)

	mov	cl, BYTE PTR [eax+88]
	mov	BYTE PTR _bPreviousNodeHostile$[esp+92], 0
	test	cl, 64					; 00000040H

; 2033 : 		{
; 2034 : 			bPreviousNodeHostile = true;

	jne	SHORT $LN198@PathValid

; 2035 : 		}
; 2036 : 		// Prevents units from passing through one another on its way to attack another unit
; 2037 : 		else if(kNodeCacheData.bContainsVisibleEnemy)

	test	cl, cl
	jns	SHORT $LN31@PathValid

; 2038 : 		{
; 2039 : 			// except when attacking an unguarded civilian unit
; 2040 : 			if(kNodeCacheData.bContainsVisibleEnemyDefender)

	test	BYTE PTR [eax+89], 1
	je	SHORT $LN31@PathValid
$LN198@PathValid:

; 2041 : 			{
; 2042 : 				bPreviousNodeHostile = true;

	mov	BYTE PTR _bPreviousNodeHostile$[esp+92], 1
$LN31@PathValid:

; 2043 : 			}
; 2044 : 		}
; 2045 : 
; 2046 : #ifndef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2047 : 		bPreviousVisibleToTeam = kNodeCacheData.bPlotVisibleToTeam;

	and	cl, 1

; 2048 : #endif
; 2049 : 		// JON - Special case for the original node passed into this function because it's not yet linked to any parent
; 2050 : 		if(pNode == node && bFirstRun)

	cmp	eax, esi
	jne	SHORT $LN30@PathValid
	cmp	BYTE PTR _bFirstRun$[esp+96], 0
	je	SHORT $LN30@PathValid

; 2051 : 		{
; 2052 : 			pNode = parent;

	mov	eax, DWORD PTR _parent$[esp+92]

; 2053 : 			bFirstRun = false;

	mov	BYTE PTR _bFirstRun$[esp+96], 0

; 2054 : 		}
; 2055 : 		else

	jmp	SHORT $LN29@PathValid
$LN30@PathValid:

; 2056 : 		{
; 2057 : 			pNode = pNode->m_pParent;

	mov	eax, DWORD PTR [eax+24]
$LN29@PathValid:

; 2058 : 		}
; 2059 : 
; 2060 : 		if(pNode != NULL)

	test	eax, eax
	je	SHORT $LN49@PathValid

; 2061 : 		{
; 2062 : 			iNodeX = pNode->m_iX;

	movsx	edx, WORD PTR [eax+80]

; 2063 : 			iNodeY = pNode->m_iY;
; 2064 : 			iOldNumTurns = iNumTurns;

	mov	ebx, DWORD PTR _iNumTurns$[esp+96]
	mov	DWORD PTR _iNodeX$[esp+96], edx
	movsx	edx, WORD PTR [eax+82]
	mov	DWORD PTR _iNodeY$[esp+96], edx

; 2065 : 			iNumTurns = pNode->m_iData2;

	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _iNumTurns$[esp+96], edx
	jmp	$LN199@PathValid
$LN49@PathValid:

; 2066 : 		}
; 2067 : 	}
; 2068 : 
; 2069 : 	// slewis - moved this up so units can't move directly into the water. Not 100% sure this is the right solution.
; 2070 : 	if(unit_domain_type == DOMAIN_LAND)

	mov	eax, DWORD PTR _unit_domain_type$[esp+96]
	cmp	eax, 2
	jne	SHORT $LN25@PathValid

; 2071 : 	{
; 2072 : 		if(!kFromNodeCacheData.bIsWater && kToNodeCacheData.bIsWater && kToNodeCacheData.bIsRevealedToTeam && !pUnit->canEmbarkOnto(*pFromPlot, *pToPlot, true))

	mov	eax, DWORD PTR _parent$[esp+92]
	test	BYTE PTR [eax+88], 4
	jne	SHORT $LN184@PathValid
	mov	al, BYTE PTR [esi+88]
	test	al, 4
	je	SHORT $LN184@PathValid
	test	al, 16					; 00000010H
	je	SHORT $LN184@PathValid
	mov	ebx, DWORD PTR _pointer$[esp+92]
	push	0
	push	1
	push	ebp
	push	edi
	mov	ecx, ebx
	call	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z ; CvUnit::canEmbarkOnto
	test	al, al
	jne	SHORT $LN172@PathValid

; 2073 : 		{
; 2074 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 2075 : 			if (!pUnit->canMoveAllTerrain())
; 2076 : #else
; 2077 : 			if(!pUnit->IsHoveringUnit() && !pUnit->canMoveAllTerrain() && !pToPlot->IsAllowsWalkWater())

	mov	ecx, ebx
	call	?IsHoveringUnit@CvUnit@@QBE_NXZ		; CvUnit::IsHoveringUnit
	test	al, al
	jne	SHORT $LN172@PathValid
	mov	ecx, ebx
	call	?canMoveAllTerrain@CvUnit@@QBE_NXZ	; CvUnit::canMoveAllTerrain
	test	al, al
	jne	SHORT $LN172@PathValid
	mov	ecx, ebp
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN172@PathValid
$LN166@PathValid:
	pop	edi
	pop	esi
	pop	ebp

; 2078 : #endif
; 2079 : 			{
; 2080 : 				return FALSE;

	xor	eax, eax
	pop	ebx

; 2217 : }

	add	esp, 80					; 00000050H
	ret	0
$LN25@PathValid:

; 2081 : 			}
; 2082 : 		}
; 2083 : 	}
; 2084 : 
; 2085 : #ifndef AUI_ASTAR_FIX_RADAR
; 2086 : 	if(!bUnitIsCombat && unit_domain_type != DOMAIN_AIR)
; 2087 : 	{
; 2088 : 		const PlayerTypes eUnitPlayer = unit_owner;
; 2089 : 		const int iUnitCount = pToPlot->getNumUnits();
; 2090 : 		for(int iUnit = 0; iUnit < iUnitCount; ++iUnit)
; 2091 : 		{
; 2092 : 			const CvUnit* pToPlotUnit = pToPlot->getUnitByIndex(iUnit);
; 2093 : 			if(pToPlotUnit != NULL && pToPlotUnit->getOwner() != eUnitPlayer)
; 2094 : 			{
; 2095 : 				return FALSE; // Plot occupied by another player
; 2096 : 			}
; 2097 : 		}
; 2098 : 	}
; 2099 : #endif
; 2100 : 
; 2101 : 	// slewis - Added to catch when the unit is adjacent to an enemy unit while it is stacked with a friendly unit.
; 2102 : 	//          The logic above (with bPreviousNodeHostile) catches this problem with a path that's longer than one step
; 2103 : 	//          but does not catch when the path is only one step.
; 2104 : #ifdef AUI_ASTAR_FIX_RADAR
; 2105 : 	if (unit_domain_type != DOMAIN_AIR && pUnitPlot->isAdjacent(pToPlot) && kToNodeCacheData.bContainsVisibleEnemy && !(iFinderIgnoreStacking))

	cmp	eax, 1
	je	SHORT $LN185@PathValid
$LN184@PathValid:
	mov	ebx, DWORD PTR _pointer$[esp+92]
$LN172@PathValid:
	push	ebp
	mov	ebp, DWORD PTR _pUnitPlot$[esp+100]
	mov	ecx, ebp
	call	?isAdjacent@CvPlot@@QBE_NPBV1@@Z	; CvPlot::isAdjacent
	test	al, al
	je	SHORT $LN22@PathValid
	test	BYTE PTR [esi+88], 128			; 00000080H
	je	SHORT $LN22@PathValid
	cmp	DWORD PTR _iFinderIgnoreStacking$[esp+96], 0
	jne	SHORT $LN22@PathValid

; 2106 : #else
; 2107 : 	if(bUnitIsCombat && unit_domain_type != DOMAIN_AIR && pUnitPlot->isAdjacent(pToPlot) && kToNodeCacheData.bContainsVisibleEnemy && !(iFinderIgnoreStacking))
; 2108 : #endif
; 2109 : 	{
; 2110 : 		if(kToNodeCacheData.bContainsVisibleEnemyDefender)

	test	BYTE PTR [esi+89], 1
	je	SHORT $LN22@PathValid

; 2111 : 		{
; 2112 : 			if(pUnitPlot->getNumFriendlyUnitsOfType(pUnit) > iUnitPlotLimit)

	push	1
	push	ebx
	mov	ecx, ebp
	call	?getNumFriendlyUnitsOfType@CvPlot@@QBEHPBVCvUnit@@_N@Z ; CvPlot::getNumFriendlyUnitsOfType
	cmp	eax, DWORD PTR _iUnitPlotLimit$[esp+96]
	jle	SHORT $LN22@PathValid
	pop	edi
	pop	esi
	pop	ebp

; 2113 : 			{
; 2114 : 				return FALSE;

	xor	eax, eax
	pop	ebx

; 2217 : }

	add	esp, 80					; 00000050H
	ret	0
$LN185@PathValid:

; 2111 : 		{
; 2112 : 			if(pUnitPlot->getNumFriendlyUnitsOfType(pUnit) > iUnitPlotLimit)

	mov	ebx, DWORD PTR _pointer$[esp+92]
	mov	ebp, DWORD PTR _pUnitPlot$[esp+96]
$LN22@PathValid:

; 2115 : 			}
; 2116 : 		}
; 2117 : 	}
; 2118 : 
; 2119 : 	if(pUnitPlot == pFromPlot)

	cmp	ebp, edi

; 2120 : 	{
; 2121 : 		return TRUE;

	je	$LN197@PathValid

; 2122 : 	}
; 2123 : 
; 2124 : 	if(iFinderInfo & MOVE_TERRITORY_NO_UNEXPLORED)

	mov	al, BYTE PTR _iFinderInfo$[esp+96]

; 2125 : 	{
; 2126 : 		if(!(kFromNodeCacheData.bIsRevealedToTeam))

	mov	esi, DWORD PTR _parent$[esp+92]
	test	al, 1
	je	SHORT $LN17@PathValid
	test	BYTE PTR [esi+88], 16			; 00000010H

; 2127 : 		{
; 2128 : 			return FALSE;

	je	SHORT $LN166@PathValid

; 2129 : 		}
; 2130 : 
; 2131 : 		if(bFromPlotOwned)

	cmp	BYTE PTR _bFromPlotOwned$[esp+96], 0
	je	SHORT $LN17@PathValid

; 2132 : 		{
; 2133 : 			if(eFromPlotTeam != eUnitTeam)

	mov	ecx, DWORD PTR _eFromPlotTeam$[esp+96]
	cmp	ecx, DWORD PTR _eUnitTeam$[esp+96]

; 2134 : 			{
; 2135 : 				return FALSE;

	jne	$LN166@PathValid
$LN17@PathValid:

; 2136 : 			}
; 2137 : 		}
; 2138 : 	}
; 2139 : 
; 2140 : 	if(iFinderInfo & MOVE_TERRITORY_NO_ENEMY)

	test	al, 2
	je	SHORT $LN14@PathValid

; 2141 : 	{
; 2142 : 		if(bFromPlotOwned)

	cmp	BYTE PTR _bFromPlotOwned$[esp+96], 0
	je	SHORT $LN14@PathValid

; 2143 : 		{
; 2144 : 			if(atWar(eFromPlotTeam, eUnitTeam))

	mov	edx, DWORD PTR _eUnitTeam$[esp+96]
	mov	eax, DWORD PTR _eFromPlotTeam$[esp+96]
	push	edx
	push	eax
	call	?atWar@@YA_NW4TeamTypes@@0@Z		; atWar
	add	esp, 8
	test	al, al

; 2145 : 			{
; 2146 : 				return FALSE;

	jne	$LN166@PathValid

; 2143 : 		{
; 2144 : 			if(atWar(eFromPlotTeam, eUnitTeam))

	mov	al, BYTE PTR _iFinderInfo$[esp+96]
$LN14@PathValid:

; 2147 : 			}
; 2148 : 		}
; 2149 : 	}
; 2150 : 
; 2151 : 	if(bAIControl)

	cmp	BYTE PTR _bAIControl$[esp+96], 0
	je	SHORT $LN170@PathValid

; 2152 : 	{
; 2153 : 		if((parent->m_iData2 > 1) || (parent->m_iData1 == 0))

	cmp	DWORD PTR [esi+16], 1
	jg	SHORT $LN11@PathValid
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN196@PathValid
$LN11@PathValid:

; 2154 : 		{
; 2155 : 			if(!(iFinderInfo & MOVE_UNITS_IGNORE_DANGER))

	test	al, 8
	jne	SHORT $LN196@PathValid

; 2156 : 			{
; 2157 : 				if(!bUnitIsCombat || pUnit->getArmyID() == FFreeList::INVALID_INDEX)

	cmp	BYTE PTR _bUnitIsCombat$[esp+96], 0
	je	SHORT $LN8@PathValid
	mov	ecx, ebx
	call	?getArmyID@CvUnit@@QBEHXZ		; CvUnit::getArmyID
	cmp	eax, -1
	jne	SHORT $LN195@PathValid
$LN8@PathValid:

; 2158 : 				{
; 2159 : #ifdef AUI_ASTAR_FIX_CONSIDER_DANGER_USES_TO_PLOT_NOT_FROM_PLOT
; 2160 : #ifdef AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH
; 2161 : #ifdef AUI_ASTAR_FIX_CONSIDER_DANGER_ONLY_POSITIVE_DANGER_DELTA
; 2162 : 					if (GET_PLAYER(pUnit->getOwner()).GetPlotDanger(*pToPlot) > pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH &&
; 2163 : 						GET_PLAYER(pUnit->getOwner()).GetPlotDanger(*pFromPlot) <= pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 2164 : #else
; 2165 : 					if (GET_PLAYER(unit_owner).GetPlotDanger(*pToPlot) > pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 2166 : #endif
; 2167 : #elif defined(AUI_ASTAR_FIX_CONSIDER_DANGER_ONLY_POSITIVE_DANGER_DELTA)
; 2168 : 					if (GET_PLAYER(pUnit->getOwner()).GetPlotDanger(*pToPlot) > 0 && GET_PLAYER(pUnit->getOwner()).GetPlotDanger(*pFromPlot) <= 0)
; 2169 : #else
; 2170 : 					if (GET_PLAYER(unit_owner).GetPlotDanger(*pToPlot) > 0)
; 2171 : #endif
; 2172 : #elif defined(AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 2173 : 					if (GET_PLAYER(unit_owner).GetPlotDanger(*pFromPlot) > pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 2174 : #else
; 2175 : 					if(GET_PLAYER(unit_owner).GetPlotDanger(*pFromPlot) > 0)

	mov	eax, DWORD PTR _unit_owner$[esp+96]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	edi
	mov	ecx, eax
	call	?GetPlotDanger@CvPlayer@@QBEHAAVCvPlot@@@Z ; CvPlayer::GetPlotDanger
	test	eax, eax
	jle	SHORT $LN195@PathValid
	pop	edi
	pop	esi
	pop	ebp

; 2176 : #endif
; 2177 : 					{
; 2178 : 						return FALSE;

	xor	eax, eax
	pop	ebx

; 2217 : }

	add	esp, 80					; 00000050H
	ret	0
$LN170@PathValid:

; 2179 : 					}
; 2180 : 				}
; 2181 : 			}
; 2182 : 		}
; 2183 : 	}
; 2184 : 
; 2185 : 	// slewis - added AI check and embark check to prevent units from moving into unexplored areas
; 2186 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2187 : 	if (bAIControl || kFromNodeCacheData.bIsRevealedToTeam || !bIsHuman)
; 2188 : #else
; 2189 : 	if(bAIControl || kFromNodeCacheData.bIsRevealedToTeam || pCacheData->isEmbarked() || !bIsHuman)

	test	BYTE PTR [esi+88], 16			; 00000010H
	jne	SHORT $LN196@PathValid
	mov	ecx, DWORD PTR _finder$[esp+92]
	cmp	BYTE PTR [ecx+157], 0
	jne	SHORT $LN196@PathValid
	cmp	BYTE PTR _bIsHuman$[esp+96], 0
	jne	SHORT $LN197@PathValid
	jmp	SHORT $LN196@PathValid
$LN195@PathValid:
	mov	al, BYTE PTR _iFinderInfo$[esp+96]
$LN196@PathValid:

; 2190 : #endif
; 2191 : 	{
; 2192 : 		if(iFinderInfo & MOVE_UNITS_THROUGH_ENEMY)
; 2193 : 		{
; 2194 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2195 : 			if (!(pUnit->canMoveOrAttackInto(*pFromPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE, kFromNodeCacheData.bCanEnterTerrain, true)))
; 2196 : #else
; 2197 : 			if(!(pUnit->canMoveOrAttackInto(*pFromPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE)))

	push	128					; 00000080H
	mov	ecx, ebx
	push	edi
	test	al, 16					; 00000010H
	je	SHORT $LN4@PathValid
	call	?canMoveOrAttackInto@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveOrAttackInto
	test	al, al
	jne	SHORT $LN197@PathValid
	pop	edi
	pop	esi
	pop	ebp

; 2198 : #endif
; 2199 : 			{
; 2200 : 				return FALSE;

	xor	eax, eax
	pop	ebx

; 2217 : }

	add	esp, 80					; 00000050H
	ret	0
$LN4@PathValid:

; 2201 : 			}
; 2202 : 		}
; 2203 : 		else
; 2204 : 		{
; 2205 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2206 : 			if (!(pUnit->canMoveThrough(*pFromPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE, kFromNodeCacheData.bCanEnterTerrain, true)))
; 2207 : #else
; 2208 : 			if(!(pUnit->canMoveThrough(*pFromPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE)))

	call	?canMoveThrough@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveThrough
	test	al, al

; 2209 : #endif
; 2210 : 			{
; 2211 : 				return FALSE;

	je	$LN166@PathValid
$LN197@PathValid:
	pop	edi
	pop	esi
	pop	ebp

; 2212 : 			}
; 2213 : 		}
; 2214 : 	}
; 2215 : 
; 2216 : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 2217 : }

	add	esp, 80					; 00000050H
	ret	0
?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; PathValid
_TEXT	ENDS
PUBLIC	?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathAdd
EXTRN	?movesLeft@CvUnit@@QBEHXZ:PROC			; CvUnit::movesLeft
; Function compile flags: /Ogtpy
;	COMDAT ?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iMoves$ = -4						; size = 4
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_iTurns$ = 16						; size = 4
_data$ = 16						; size = 4
$T223973 = 20						; size = 4
_pointer$ = 20						; size = 4
$T223970 = 24						; size = 4
$T223967 = 24						; size = 4
_finder$ = 24						; size = 4
?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; PathAdd, COMDAT

; 2224 : {

	push	ecx

; 2225 : 	int iMoves = MAX_INT;
; 2226 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 2227 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());
; 2228 : 
; 2229 : 	int iTurns;
; 2230 : 
; 2231 : 	if(data == ASNC_INITIALADD)

	cmp	DWORD PTR _data$[esp], 0
	mov	DWORD PTR _iMoves$[esp+4], 2147483647	; 7fffffffH
	jne	SHORT $LN6@PathAdd

; 2232 : 	{
; 2233 : 		iTurns = 1;
; 2234 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2235 : 		iMoves = pUnit->movesLeft();
; 2236 : #else
; 2237 : 		iMoves = std::min(iMoves, pUnit->movesLeft());

	mov	ecx, DWORD PTR _pointer$[esp]
	mov	DWORD PTR _iTurns$[esp], 1
	call	?movesLeft@CvUnit@@QBEHXZ		; CvUnit::movesLeft
	mov	DWORD PTR $T223967[esp], eax
	cmp	eax, 2147483647				; 7fffffffH
	lea	eax, DWORD PTR $T223967[esp]
	jl	SHORT $LN18@PathAdd
	lea	eax, DWORD PTR _iMoves$[esp+4]
$LN18@PathAdd:
	mov	eax, DWORD PTR [eax]

; 2282 : 		}
; 2283 : #endif
; 2284 : 	}
; 2285 : 
; 2286 : 	FAssertMsg(iMoves >= 0, "iMoves is expected to be non-negative (invalid Index)");
; 2287 : 
; 2288 : 	node->m_iData1 = iMoves;

	mov	ecx, DWORD PTR _node$[esp]

; 2289 : 	node->m_iData2 = iTurns;

	mov	edx, DWORD PTR _iTurns$[esp]
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], edx

; 2290 : 
; 2291 : 	return 1;

	mov	eax, 1

; 2292 : }

	pop	ecx
	ret	0
$LN6@PathAdd:

; 2238 : #endif
; 2239 : 	}
; 2240 : 	else
; 2241 : 	{
; 2242 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 2243 : 		const CvPlot* pFromPlot = parent->m_pPlot;
; 2244 : 		const CvPlot* pToPlot = node->m_pPlot;
; 2245 : #else
; 2246 : 		CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 2247 : 		CvPlot* pFromPlot = kMap.plotUnchecked(parent->m_iX, parent->m_iY);

	mov	ecx, DWORD PTR [eax+4020]
	mov	edx, DWORD PTR [eax+4068]
	mov	eax, DWORD PTR _parent$[esp]
	push	ebx

; 2248 : 		CvPlot* pToPlot = kMap.plotUnchecked(node->m_iX, node->m_iY);

	mov	ebx, DWORD PTR _node$[esp+4]
	push	ebp
	push	esi
	movsx	esi, WORD PTR [eax+80]
	push	edi
	movsx	edi, WORD PTR [eax+82]
	imul	edi, ecx
	add	edi, esi
	movsx	esi, WORD PTR [ebx+82]
	imul	edi, 484				; 000001e4H

; 2249 : #endif
; 2250 : 
; 2251 : 		int iStartMoves = parent->m_iData1;

	mov	ebp, DWORD PTR [eax+12]
	imul	esi, ecx
	movsx	ecx, WORD PTR [ebx+80]
	add	esi, ecx
	imul	esi, 484				; 000001e4H
	add	edi, edx
	add	esi, edx

; 2252 : 		iTurns = parent->m_iData2;

	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _iTurns$[esp+16], edx

; 2253 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2254 : 		int iBaseMoves = pCacheData->baseMoves(((pFromPlot->isWater() && !pFromPlot->IsAllowsWalkWater()) || pCacheData->isEmbarked()) ? DOMAIN_SEA : pCacheData->getDomainType());
; 2255 : #endif
; 2256 : 
; 2257 : 		if(iStartMoves == 0)

	test	ebp, ebp
	jne	SHORT $LN4@PathAdd

; 2258 : 		{
; 2259 : 			iTurns++;

	inc	DWORD PTR _iTurns$[esp+16]

; 2260 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2261 : 			iStartMoves = iBaseMoves * GC.getMOVE_DENOMINATOR();
; 2262 : #else
; 2263 : 			iStartMoves = pCacheData->baseMoves((pToPlot->isWater() && !pToPlot->IsAllowsWalkWater()) ? DOMAIN_SEA : DOMAIN_LAND) * GC.getMOVE_DENOMINATOR();

	cmp	BYTE PTR [esi+5], 3
	jne	SHORT $LN9@PathAdd
	mov	ecx, esi
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN9@PathAdd
	xor	eax, eax
	jmp	SHORT $LN10@PathAdd
$LN9@PathAdd:
	mov	eax, 2
$LN10@PathAdd:
	mov	ecx, DWORD PTR _finder$[esp+16]
	mov	ebp, DWORD PTR [ecx+eax*4+116]
	imul	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
$LN4@PathAdd:

; 2264 : #endif
; 2265 : 		}
; 2266 : 
; 2267 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2268 : 		// We can just set maxMoves to the maximum integer value and use it for increased portability and no redundant checks, iMoves gets set to 0 anyway if it's negative
; 2269 : 		iMoves = iStartMoves - CvUnitMovement::MovementCost(pUnit, pFromPlot, pToPlot, iBaseMoves, MAX_INT, iStartMoves);
; 2270 : 		if (iMoves < 0)
; 2271 : 			iMoves = 0;
; 2272 : #else
; 2273 : 		// We can't use maxMoves, because that checks where the unit is currently, and we're plotting a path so we have to see
; 2274 : 		// what the max moves would be like if the unit was already at the desired location.
; 2275 : 		if (CvUnitMovement::ConsumesAllMoves(pUnit, pFromPlot, pToPlot) || CvUnitMovement::IsSlowedByZOC(pUnit, pFromPlot, pToPlot))

	mov	ebx, DWORD PTR _pointer$[esp+16]
	push	esi
	push	edi
	push	ebx
	call	?ConsumesAllMoves@CvUnitMovement@@SA_NPBVCvUnit@@PBVCvPlot@@1@Z ; CvUnitMovement::ConsumesAllMoves
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN2@PathAdd
	push	esi
	push	edi
	push	ebx
	call	?IsSlowedByZOC@CvUnitMovement@@SA_NPBVCvUnit@@PBVCvPlot@@1@Z ; CvUnitMovement::IsSlowedByZOC
	add	esp, 12					; 0000000cH
	test	al, al
	jne	SHORT $LN2@PathAdd

; 2278 : 		}
; 2279 : 		else
; 2280 : 		{
; 2281 : 			iMoves = std::min(iMoves, std::max(0, iStartMoves - CvUnitMovement::MovementCost(pUnit, pFromPlot, pToPlot, pCacheData->baseMoves((pToPlot->isWater() || pCacheData->isEmbarked())?DOMAIN_SEA:pCacheData->getDomainType()), pCacheData->maxMoves(), iStartMoves)));

	cmp	BYTE PTR [esi+5], 3
	mov	edx, DWORD PTR _finder$[esp+16]
	je	SHORT $LN11@PathAdd
	cmp	BYTE PTR [edx+157], al
	jne	SHORT $LN11@PathAdd
	mov	ecx, DWORD PTR [edx+148]
	jmp	SHORT $LN12@PathAdd
$LN11@PathAdd:
	xor	ecx, ecx
$LN12@PathAdd:
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR [edx+ecx*4+116]
	push	ebp
	push	eax
	push	ecx
	push	esi
	push	edi
	push	ebx
	call	?MovementCost@CvUnitMovement@@SAHPBVCvUnit@@PBVCvPlot@@1HHH@Z ; CvUnitMovement::MovementCost
	sub	ebp, eax
	add	esp, 24					; 00000018H
	mov	DWORD PTR $T223970[esp+16], ebp
	mov	DWORD PTR $T223973[esp+16], 0
	test	ebp, ebp
	jle	SHORT $LN51@PathAdd
	cmp	ebp, 2147483647				; 7fffffffH
	lea	eax, DWORD PTR $T223970[esp+16]
	jl	SHORT $LN56@PathAdd
	lea	eax, DWORD PTR _iMoves$[esp+20]
$LN56@PathAdd:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN59@PathAdd
$LN51@PathAdd:
	lea	eax, DWORD PTR $T223973[esp+16]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN59@PathAdd
$LN2@PathAdd:

; 2276 : 		{
; 2277 : 			iMoves = 0;

	xor	eax, eax
$LN59@PathAdd:

; 2282 : 		}
; 2283 : #endif
; 2284 : 	}
; 2285 : 
; 2286 : 	FAssertMsg(iMoves >= 0, "iMoves is expected to be non-negative (invalid Index)");
; 2287 : 
; 2288 : 	node->m_iData1 = iMoves;

	mov	ecx, DWORD PTR _node$[esp+16]

; 2289 : 	node->m_iData2 = iTurns;

	mov	edx, DWORD PTR _iTurns$[esp+16]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx+12], eax
	pop	ebx
	mov	DWORD PTR [ecx+16], edx

; 2290 : 
; 2291 : 	return 1;

	mov	eax, 1

; 2292 : }

	pop	ecx
	ret	0
?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; PathAdd
_TEXT	ENDS
PUBLIC	?PathNodeAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathNodeAdd
; Function compile flags: /Ogtpy
;	COMDAT ?PathNodeAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?PathNodeAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; PathNodeAdd, COMDAT

; 2298 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 2299 : 	CvAStarNode* pNode;
; 2300 : #endif
; 2301 : 
; 2302 : 	if(data == ASNL_ADDOPEN || data == ASNL_STARTOPEN)

	mov	eax, DWORD PTR _data$[esp-4]
	test	eax, eax
	je	SHORT $LN3@PathNodeAd
	cmp	eax, 1
	jne	$LN27@PathNodeAd
$LN3@PathNodeAd:
	push	esi

; 2303 : 	{
; 2304 : 		// Are there movement points left and we're worried about stacking or mountains?
; 2305 : #if defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES)
; 2306 : 		if (node->m_iData1 > 0 && !finder->IsPathDest(node->m_iX, node->m_iY) && (!(finder->GetInfo() & MOVE_IGNORE_STACKING) || node->m_pPlot->isMountain()))
; 2307 : #else
; 2308 : 		if(node->m_iData1 > 0 && !finder->IsPathDest(node->m_iX, node->m_iY) && (!(finder->GetInfo() & MOVE_IGNORE_STACKING) || GC.getMap().plotUnchecked(node->m_iX, node->m_iY)->isMountain()))

	mov	esi, DWORD PTR _node$[esp]
	cmp	DWORD PTR [esi+12], 0
	jle	$LN25@PathNodeAd
	movsx	ecx, WORD PTR [esi+82]
	movsx	edx, WORD PTR [esi+80]
	push	edi
	mov	edi, DWORD PTR _finder$[esp+4]
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN7@PathNodeAd
	push	ebp
	mov	ebp, DWORD PTR [edi+44]
	push	edi
	push	ebp
	push	ecx
	push	edx
	call	eax
	add	esp, 16					; 00000010H
	pop	ebp
	test	eax, eax
	jne	$LN28@PathNodeAd
$LN7@PathNodeAd:
	test	BYTE PTR [edi+72], 4
	je	SHORT $LN1@PathNodeAd
	movsx	eax, WORD PTR [esi+82]
	movsx	edx, WORD PTR [esi+80]
	mov	ecx, eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	imul	ecx, DWORD PTR [eax+4020]
	mov	eax, DWORD PTR [eax+4068]
	add	ecx, edx
	imul	ecx, 484				; 000001e4H
	cmp	BYTE PTR [ecx+eax+5], 0
	jne	SHORT $LN28@PathNodeAd
$LN1@PathNodeAd:

; 2309 : #endif
; 2310 : 		{
; 2311 : 			// Retrieve another node
; 2312 : #if defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 2313 : 			CvTwoLayerPathFinder* twoLayerFinder = static_cast<CvTwoLayerPathFinder*>(finder);
; 2314 : 			CvAStarNode* pNode = twoLayerFinder->GetPartialMoveNode(node->m_iX, node->m_iY);
; 2315 : #else
; 2316 : 			CvTwoLayerPathFinder* twoLayerFinder = static_cast<CvTwoLayerPathFinder*>(finder);
; 2317 : 			pNode = twoLayerFinder->GetPartialMoveNode(node->m_iX, node->m_iY);

	movsx	eax, WORD PTR [esi+82]
	movsx	ecx, WORD PTR [esi+80]
	mov	edx, DWORD PTR [edi+628]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 5
	add	eax, DWORD PTR [edx+ecx*4]

; 2318 : #endif
; 2319 : 			pNode->m_iData1 = 0;   // Zero out movement

	mov	DWORD PTR [eax+12], 0

; 2320 : 			pNode->m_iData2 = node->m_iData2;

	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], ecx

; 2321 : 			pNode->m_iHeuristicCost = node->m_iHeuristicCost;

	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx

; 2322 : 			pNode->m_iKnownCost = node->m_iKnownCost + (PATH_MOVEMENT_WEIGHT * node->m_iData1);

	mov	ecx, DWORD PTR [esi+12]
	imul	ecx, 1000				; 000003e8H
	add	ecx, DWORD PTR [esi+4]

; 2323 : 			pNode->m_iTotalCost = node->m_iTotalCost;
; 2324 : 			pNode->m_iX = node->m_iX;
; 2325 : 			pNode->m_iY = node->m_iY;
; 2326 : 			pNode->m_pParent = node->m_pParent;
; 2327 : 			pNode->m_eCvAStarListType = CVASTARLIST_OPEN;
; 2328 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2329 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2330 : 			pNode->bIsCalculated = node->bIsCalculated;
; 2331 : #endif
; 2332 : 			pNode->bPlotVisibleToTeam = node->bPlotVisibleToTeam;
; 2333 : 			pNode->bIsMountain = node->bIsMountain;
; 2334 : 			pNode->bIsWater = node->bIsWater;
; 2335 : 			pNode->bCanEnterTerrain = node->bCanEnterTerrain;
; 2336 : 			pNode->bIsRevealedToTeam = node->bIsRevealedToTeam;
; 2337 : 			pNode->bContainsOtherFriendlyTeamCity = node->bContainsOtherFriendlyTeamCity;
; 2338 : 			pNode->bContainsEnemyCity = node->bContainsEnemyCity;
; 2339 : 			pNode->bContainsVisibleEnemy = node->bContainsVisibleEnemy;
; 2340 : 			pNode->bContainsVisibleEnemyDefender = node->bContainsVisibleEnemyDefender;
; 2341 : #else
; 2342 : 			pNode->m_kCostCacheData = node->m_kCostCacheData;
; 2343 : #endif
; 2344 : 			finder->AddToOpen(pNode);

	push	eax
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	cx, WORD PTR [esi+80]
	mov	WORD PTR [eax+80], cx
	mov	dx, WORD PTR [esi+82]
	mov	WORD PTR [eax+82], dx
	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+20], 0
	mov	edx, DWORD PTR [esi+88]
	mov	DWORD PTR [eax+88], edx
	mov	ecx, DWORD PTR [esi+92]
	mov	DWORD PTR [eax+92], ecx
	mov	ecx, edi
	call	?AddToOpen@CvAStar@@QAEXPAVCvAStarNode@@@Z ; CvAStar::AddToOpen
$LN28@PathNodeAd:
	pop	edi
$LN25@PathNodeAd:
	pop	esi
$LN27@PathNodeAd:

; 2345 : 		}
; 2346 : 	}
; 2347 : 
; 2348 : 	return 1;

	mov	eax, 1

; 2349 : }

	ret	0
?PathNodeAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; PathNodeAdd
_TEXT	ENDS
PUBLIC	?IgnoreUnitsDestValid@@YAHHHPBXPAVCvAStar@@@Z	; IgnoreUnitsDestValid
EXTRN	?canEnterTerritory@CvUnit@@QBE_NW4TeamTypes@@_N11@Z:PROC ; CvUnit::canEnterTerritory
; Function compile flags: /Ogtpy
;	COMDAT ?IgnoreUnitsDestValid@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_bAIControl$ = 12					; size = 1
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?IgnoreUnitsDestValid@@YAHHHPBXPAVCvAStar@@@Z PROC	; IgnoreUnitsDestValid, COMDAT

; 2359 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2360 : 	CvPlot* pToPlot = GC.getMap().plotUnchecked(iToX, iToY);
; 2361 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 2362 : #else
; 2363 : 	CvUnit* pUnit;
; 2364 : 	CvPlot* pToPlot;
; 2365 : 	bool bAIControl;
; 2366 : 	CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 2367 : 
; 2368 : 	pToPlot = kMap.plotUnchecked(iToX, iToY);

	mov	ecx, DWORD PTR [eax+4020]
	mov	eax, DWORD PTR [eax+4068]
	push	ebx
	push	ebp

; 2369 : 
; 2370 : 	pUnit = ((CvUnit*)pointer);
; 2371 : #endif
; 2372 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());
; 2373 : 
; 2374 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2375 : 	CvPlot* pUnitPlot = pUnit->plot();
; 2376 : #else
; 2377 : 	CvPlot* pUnitPlot = kMap.plotUnchecked(pUnit->getX(), pUnit->getY());
; 2378 : #endif
; 2379 : 	if(pUnitPlot == pToPlot)

	mov	ebp, DWORD PTR _pointer$[esp+4]
	mov	edx, DWORD PTR [ebp+88]
	push	esi
	imul	edx, ecx
	add	edx, DWORD PTR [ebp+76]
	mov	ebx, DWORD PTR _finder$[esp+8]
	mov	esi, ecx
	imul	edx, 484				; 000001e4H
	imul	esi, DWORD PTR _iToY$[esp+8]
	add	esi, DWORD PTR _iToX$[esp+8]
	add	edx, eax
	imul	esi, 484				; 000001e4H
	add	esi, eax
	cmp	edx, esi
	jne	SHORT $LN15@IgnoreUnit
	pop	esi
	pop	ebp

; 2380 : 	{
; 2381 : 		return TRUE;

	mov	eax, 1
	pop	ebx

; 2444 : }

	ret	0
$LN15@IgnoreUnit:

; 2382 : 	}
; 2383 : 
; 2384 : 	if(pCacheData->IsImmobile())

	cmp	BYTE PTR [ebx+154], 0
	je	SHORT $LN14@IgnoreUnit
$LN12@IgnoreUnit:
	pop	esi
	pop	ebp

; 2385 : 	{
; 2386 : 		return FALSE;

	xor	eax, eax
	pop	ebx

; 2444 : }

	ret	0
$LN14@IgnoreUnit:

; 2387 : 	}
; 2388 : 
; 2389 : #ifndef AUI_ASTAR_FIX_PATH_VALID_PATH_PEAKS_FOR_NONHUMAN
; 2390 : 	if(pToPlot->isMountain() && (!pCacheData->isHuman() || pCacheData->IsAutomated()))

	mov	al, BYTE PTR [esi+5]
	test	al, al
	jne	SHORT $LN13@IgnoreUnit
	cmp	BYTE PTR [ebx+152], al
	je	SHORT $LN12@IgnoreUnit
	cmp	BYTE PTR [ebx+153], al

; 2391 : 	{
; 2392 : 		return FALSE;

	jne	SHORT $LN12@IgnoreUnit
$LN13@IgnoreUnit:

; 2393 : 	}
; 2394 : #endif
; 2395 : 
; 2396 : 	if ((finder->GetInfo() & CvUnit::MOVEFLAG_STAY_ON_LAND) && (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater()))

	test	DWORD PTR [ebx+72], 256			; 00000100H
	je	SHORT $LN11@IgnoreUnit
	cmp	al, 3
	jne	SHORT $LN11@IgnoreUnit
	mov	ecx, esi
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al

; 2397 : 	{
; 2398 : 		return FALSE;

	je	SHORT $LN12@IgnoreUnit
$LN11@IgnoreUnit:

; 2399 : 	}
; 2400 : 
; 2401 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2402 : 	bool bAIControl = pCacheData->IsAutomated();
; 2403 : #else
; 2404 : 	bAIControl = pCacheData->IsAutomated();

	mov	al, BYTE PTR [ebx+153]
	mov	BYTE PTR _bAIControl$[esp+8], al

; 2405 : #endif
; 2406 : 
; 2407 : 	if(bAIControl)

	test	al, al
	je	SHORT $LN7@IgnoreUnit

; 2408 : 	{
; 2409 : 		if(pCacheData->getDomainType() == DOMAIN_LAND)

	cmp	DWORD PTR [ebx+148], 2
	jne	SHORT $LN7@IgnoreUnit

; 2410 : 		{
; 2411 : 			int iGroupAreaID = pUnit->area()->GetID();

	mov	ecx, ebp
	call	?area@CvUnit@@QBEPAVCvArea@@XZ		; CvUnit::area
	mov	eax, DWORD PTR [eax+4]

; 2412 : 			if(pToPlot->getArea() != iGroupAreaID)

	cmp	DWORD PTR [esi+356], eax
	je	SHORT $LN7@IgnoreUnit

; 2413 : 			{
; 2414 : 				if(!(pToPlot->isAdjacentToArea(iGroupAreaID)))

	push	eax
	mov	ecx, esi
	call	?isAdjacentToArea@CvPlot@@QBE_NH@Z	; CvPlot::isAdjacentToArea
	test	al, al

; 2415 : 				{
; 2416 : 					return FALSE;

	je	SHORT $LN12@IgnoreUnit
$LN7@IgnoreUnit:
	push	edi

; 2417 : 				}
; 2418 : 			}
; 2419 : 		}
; 2420 : 	}
; 2421 : 
; 2422 : 	TeamTypes eUnitTeam = pUnit->getTeam();

	mov	ecx, ebp
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	mov	edi, eax

; 2423 : 
; 2424 : 	if(!pToPlot->isRevealed(eUnitTeam))

	shr	eax, 5
	mov	ecx, eax
	shl	ecx, 5
	mov	edx, ecx
	mov	ecx, edi
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	test	edx, DWORD PTR [esi+eax*4+8]
	jne	SHORT $LN5@IgnoreUnit

; 2425 : 	{
; 2426 : 		if(pCacheData->isNoRevealMap())

	cmp	BYTE PTR [ebx+155], 0

; 2427 : 		{
; 2428 : 			return FALSE;

	jne	SHORT $LN1@IgnoreUnit
$LN5@IgnoreUnit:

; 2429 : 		}
; 2430 : 	}
; 2431 : 
; 2432 : 	if(bAIControl || pToPlot->isRevealed(eUnitTeam))

	cmp	BYTE PTR _bAIControl$[esp+12], 0
	jne	SHORT $LN3@IgnoreUnit
	push	edi
	mov	ecx, esi
	call	?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z ; CvPlot::isRevealed
	test	al, al
	je	SHORT $LN2@IgnoreUnit
$LN3@IgnoreUnit:

; 2433 : 	{
; 2434 : #ifdef AUI_ASTAR_FIX_IGNORE_UNITS_PATHFINDER_TERRITORY_CHECK
; 2435 : 		if (!pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE) || !pUnit->canEnterTerritory(pToPlot->getTeam(), false, false, pUnit->IsDeclareWar() || (finder->GetInfo() & MOVE_DECLARE_WAR)))
; 2436 : #else
; 2437 : 		if(!pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE) || !pUnit->canEnterTerritory(eUnitTeam))

	push	128					; 00000080H
	push	esi
	mov	ecx, ebp
	call	?canEnterTerrain@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canEnterTerrain
	test	al, al
	je	SHORT $LN1@IgnoreUnit
	push	0
	push	0
	push	0
	push	edi
	mov	ecx, ebp
	call	?canEnterTerritory@CvUnit@@QBE_NW4TeamTypes@@_N11@Z ; CvUnit::canEnterTerritory
	test	al, al
	je	SHORT $LN1@IgnoreUnit
$LN2@IgnoreUnit:
	pop	edi
	pop	esi
	pop	ebp

; 2441 : 		}
; 2442 : 	}
; 2443 : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 2444 : }

	ret	0
$LN1@IgnoreUnit:
	pop	edi
	pop	esi
	pop	ebp

; 2438 : #endif
; 2439 : 		{
; 2440 : 			return FALSE;

	xor	eax, eax
	pop	ebx

; 2444 : }

	ret	0
?IgnoreUnitsDestValid@@YAHHHPBXPAVCvAStar@@@Z ENDP	; IgnoreUnitsDestValid
_TEXT	ENDS
PUBLIC	?IgnoreUnitsCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; IgnoreUnitsCost
EXTRN	?MovementCostNoZOC@CvUnitMovement@@SAHPBVCvUnit@@PBVCvPlot@@1HHH@Z:PROC ; CvUnitMovement::MovementCostNoZOC
; Function compile flags: /Ogtpy
;	COMDAT ?IgnoreUnitsCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iMovesLeft$ = -4					; size = 4
$T224247 = 8						; size = 4
$T224243 = 8						; size = 4
_iCost$ = 8						; size = 4
_parent$ = 8						; size = 4
_eUnitTeam$ = 12					; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
$T224248 = 20						; size = 4
_pointer$ = 20						; size = 4
$T224251 = 24						; size = 4
$T224244 = 24						; size = 4
$T224242 = 24						; size = 4
_finder$ = 24						; size = 4
?IgnoreUnitsCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; IgnoreUnitsCost, COMDAT

; 2450 : {

	push	ecx

; 2451 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 2452 : 	CvUnit* pUnit;
; 2453 : 	int iCost;
; 2454 : #endif
; 2455 : 	int iMax;
; 2456 : 
; 2457 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 2458 : 	const CvPlot* pFromPlot = parent->m_pPlot;
; 2459 : 	const CvPlot* pToPlot = node->m_pPlot;
; 2460 : #else
; 2461 : 	CvMap& kMap = GC.getMap();
; 2462 : 	int iFromPlotX = parent->m_iX;
; 2463 : 	int iFromPlotY = parent->m_iY;
; 2464 : 	CvPlot* pFromPlot = kMap.plotUnchecked(iFromPlotX, iFromPlotY);

	mov	edx, DWORD PTR _parent$[esp]
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	ecx, DWORD PTR [eax+4020]
	push	ebx

; 2465 : 
; 2466 : 	int iToPlotX = node->m_iX;
; 2467 : 	int iToPlotY = node->m_iY;
; 2468 : 	CvPlot* pToPlot = kMap.plotUnchecked(iToPlotX, iToPlotY);

	mov	ebx, DWORD PTR _node$[esp+4]
	push	ebp
	push	esi
	movsx	esi, WORD PTR [edx+80]
	push	edi
	movsx	edi, WORD PTR [edx+82]
	imul	edi, ecx
	add	edi, esi
	movsx	esi, WORD PTR [ebx+82]
	imul	edi, 484				; 000001e4H
	mov	eax, DWORD PTR [eax+4068]
	imul	esi, ecx
	movsx	ecx, WORD PTR [ebx+80]

; 2469 : #endif
; 2470 : 
; 2471 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2472 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 2473 : #else
; 2474 : 	pUnit = ((CvUnit*)pointer);
; 2475 : #endif
; 2476 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());
; 2477 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2478 : 	bool bIsAIControl = !pCacheData->isHuman() || pCacheData->IsAutomated();
; 2479 : #endif
; 2480 : 
; 2481 : 	CvAssertMsg(pUnit->getDomainType() != DOMAIN_AIR, "pUnit->getDomainType() is not expected to be equal with DOMAIN_AIR");
; 2482 : 
; 2483 : #if defined(AUI_ASTAR_MINOR_OPTIMIZATION) || defined (AUI_UNIT_FIX_HOVERING_EMBARK) || defined(AUI_UNIT_MOVEMENT_FIX_BAD_ALLOWS_WATER_WALK_CHECK)
; 2484 : 	bool bToPlotIsWater = !pToPlot->IsAllowsWalkWater();
; 2485 : 	bool bFromPlotIsWater = !pFromPlot->IsAllowsWalkWater();
; 2486 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 2487 : 	if (pUnit->IsHoveringUnit())
; 2488 : 	{
; 2489 : 		bToPlotIsWater = bToPlotIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 2490 : 		bFromPlotIsWater = bFromPlotIsWater && pFromPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 2491 : 	}
; 2492 : 	else
; 2493 : #endif
; 2494 : 	{
; 2495 : 		bToPlotIsWater = bToPlotIsWater && pToPlot->isWater();
; 2496 : 		bFromPlotIsWater = bFromPlotIsWater && pFromPlot->isWater();
; 2497 : 	}
; 2498 : 	int iBaseMoves = pCacheData->baseMoves(bFromPlotIsWater || pCacheData->isEmbarked() ? DOMAIN_SEA : pCacheData->getDomainType());
; 2499 : 	int iMaxMoves = iBaseMoves * GC.getMOVE_DENOMINATOR();
; 2500 : #endif
; 2501 : 
; 2502 : 	if(parent->m_iData1 > 0)

	mov	edx, DWORD PTR [edx+12]
	add	esi, ecx
	imul	esi, 484				; 000001e4H
	add	edi, eax
	add	esi, eax
	test	edx, edx
	jle	SHORT $LN26@IgnoreUnit@2

; 2503 : 	{
; 2504 : 		iMax = parent->m_iData1;
; 2505 : 	}
; 2506 : 	else

	mov	ecx, DWORD PTR _finder$[esp+16]
	mov	ebx, edx
	jmp	SHORT $LN25@IgnoreUnit@2
$LN26@IgnoreUnit@2:

; 2507 : 	{
; 2508 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2509 : 		iMax = iMaxMoves;
; 2510 : #else
; 2511 : 		iMax = pCacheData->baseMoves((pToPlot->isWater() && !pToPlot->IsAllowsWalkWater()) ? DOMAIN_SEA : DOMAIN_LAND) * GC.getMOVE_DENOMINATOR();

	cmp	BYTE PTR [esi+5], 3
	jne	SHORT $LN29@IgnoreUnit@2
	mov	ecx, esi
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN29@IgnoreUnit@2
	xor	eax, eax
	jmp	SHORT $LN30@IgnoreUnit@2
$LN29@IgnoreUnit@2:
	mov	eax, 2
$LN30@IgnoreUnit@2:
	mov	ecx, DWORD PTR _finder$[esp+16]
	mov	ebx, DWORD PTR [ecx+eax*4+116]
	imul	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
$LN25@IgnoreUnit@2:

; 2512 : #endif
; 2513 : 	}
; 2514 : 
; 2515 : 	// Get the cost of moving to the new plot, passing in our max moves or the moves we have left, in case the movementCost 
; 2516 : 	// method wants to burn all our remaining moves.  This is needed because our remaining moves for this segment of the path
; 2517 : 	// may be larger or smaller than the baseMoves if some moves have already been used or if the starting domain (LAND/SEA)
; 2518 : 	// of the path segment is different from the destination plot.
; 2519 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2520 : 	int iCost = CvUnitMovement::MovementCostNoZOC(pUnit, pFromPlot, pToPlot, iBaseMoves, iMaxMoves, iMax);
; 2521 : #else
; 2522 : 	iCost = CvUnitMovement::MovementCostNoZOC(pUnit, pFromPlot, pToPlot, pCacheData->baseMoves((pToPlot->isWater() || pCacheData->isEmbarked())?DOMAIN_SEA:pCacheData->getDomainType()), pCacheData->maxMoves(), iMax);

	cmp	BYTE PTR [esi+5], 3
	je	SHORT $LN31@IgnoreUnit@2
	cmp	BYTE PTR [ecx+157], 0
	jne	SHORT $LN31@IgnoreUnit@2
	mov	edx, DWORD PTR [ecx+148]
	jmp	SHORT $LN32@IgnoreUnit@2
$LN31@IgnoreUnit@2:
	xor	edx, edx
$LN32@IgnoreUnit@2:
	mov	eax, DWORD PTR [ecx+136]
	mov	ecx, DWORD PTR [ecx+edx*4+116]
	mov	edx, DWORD PTR _pointer$[esp+16]
	push	ebx
	push	eax
	push	ecx
	push	esi
	push	edi
	push	edx
	call	?MovementCostNoZOC@CvUnitMovement@@SAHPBVCvUnit@@PBVCvPlot@@1HHH@Z ; CvUnitMovement::MovementCostNoZOC

; 2523 : #endif
; 2524 : 
; 2525 : 	TeamTypes eUnitTeam = pUnit->getTeam();

	mov	ecx, DWORD PTR _pointer$[esp+40]
	add	esp, 24					; 00000018H
	mov	ebp, eax
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	mov	DWORD PTR _eUnitTeam$[esp+16], eax

; 2526 : 
; 2527 : 	int iMovesLeft = iMax - iCost;

	mov	eax, ebx
	sub	eax, ebp
	mov	DWORD PTR _iMovesLeft$[esp+20], eax

; 2528 : 	// Is the cost greater than our max?
; 2529 : 	if (iMovesLeft < 0)

	jns	SHORT $LN24@IgnoreUnit@2

; 2530 : 	{
; 2531 : 		// Yes, we will still let the move happen, but that is the end of the turn.
; 2532 : 		iCost = iMax;

	mov	ebp, ebx

; 2533 : 		iMovesLeft = 0;

	mov	DWORD PTR _iMovesLeft$[esp+20], 0

; 2534 : 	}
; 2535 : 
; 2536 : 	if(iMovesLeft == 0)

	jmp	SHORT $LN158@IgnoreUnit@2
$LN24@IgnoreUnit@2:
	test	eax, eax
	jne	$LN23@IgnoreUnit@2
$LN158@IgnoreUnit@2:

; 2537 : 	{
; 2538 : 		iCost = (PATH_MOVEMENT_WEIGHT * iCost);

	imul	ebp, 1000				; 000003e8H

; 2539 : 
; 2540 : #ifdef AUI_UNIT_MOVEMENT_FIX_BAD_ALLOWS_WATER_WALK_CHECK
; 2541 : 		if (pUnit->getDomainType() == DOMAIN_LAND && !bFromPlotIsWater && bToPlotIsWater && !pUnit->canEmbarkOnto(*pFromPlot, *pToPlot, true))
; 2542 : #else
; 2543 : 		if(!pFromPlot->isWater() && pToPlot->isWater() && !pUnit->canEmbarkOnto(*pFromPlot, *pToPlot, true))

	cmp	BYTE PTR [edi+5], 3
	mov	ebx, ebp
	mov	DWORD PTR _iCost$[esp+16], ebx
	je	SHORT $LN160@IgnoreUnit@2
	cmp	BYTE PTR [esi+5], 3
	jne	SHORT $LN160@IgnoreUnit@2
	mov	ecx, DWORD PTR _pointer$[esp+16]
	push	0
	push	1
	push	esi
	push	edi
	call	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z ; CvUnit::canEmbarkOnto
	test	al, al
	jne	SHORT $LN160@IgnoreUnit@2

; 2544 : #endif
; 2545 : 		{
; 2546 : 			iCost += PATH_INCORRECT_EMBARKING_WEIGHT;

	add	ebx, 1000000				; 000f4240H
	mov	DWORD PTR _iCost$[esp+16], ebx
$LN160@IgnoreUnit@2:

; 2547 : 		}
; 2548 : 
; 2549 : 		if(pToPlot->getTeam() != eUnitTeam)

	movsx	eax, BYTE PTR [esi+4]
	cmp	eax, -1
	je	SHORT $LN74@IgnoreUnit@2
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN74@IgnoreUnit@2
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN73@IgnoreUnit@2
$LN74@IgnoreUnit@2:
	or	eax, -1
$LN73@IgnoreUnit@2:
	cmp	eax, DWORD PTR _eUnitTeam$[esp+16]
	je	SHORT $LN21@IgnoreUnit@2

; 2550 : 		{
; 2551 : 			iCost += PATH_TERRITORY_WEIGHT;

	add	ebx, 3
	mov	DWORD PTR _iCost$[esp+16], ebx
$LN21@IgnoreUnit@2:

; 2552 : 		}
; 2553 : 
; 2554 : #ifdef AUI_ASTAR_EXPLORE_UNITAITYPE_ALWAYS_MAXIMIZES_EXPLORE
; 2555 : 		if (finder->GetInfo() & MOVE_MAXIMIZE_EXPLORE || pUnit->AI_getUnitAIType() == UNITAI_EXPLORE || pUnit->AI_getUnitAIType() == UNITAI_EXPLORE_SEA)
; 2556 : #else
; 2557 : 		if(finder->GetInfo() & MOVE_MAXIMIZE_EXPLORE)

	mov	ebp, DWORD PTR _finder$[esp+16]
	test	BYTE PTR [ebp+72], -128			; ffffff80H
	je	SHORT $LN19@IgnoreUnit@2

; 2558 : #endif
; 2559 : 		{
; 2560 : #ifdef AUI_ASTAR_FIX_MAXIMIZE_EXPLORE_UNHARDCODE_HILL_PREFERENCE
; 2561 : 			iCost += PATH_EXPLORE_NON_HILL_WEIGHT * pToPlot->seeFromLevel(eUnitTeam);
; 2562 : #else
; 2563 : 			if(!pToPlot->isHills())

	cmp	BYTE PTR [esi+5], 1
	je	SHORT $LN19@IgnoreUnit@2

; 2564 : 			{
; 2565 : 				iCost += PATH_EXPLORE_NON_HILL_WEIGHT;

	add	ebx, 300				; 0000012cH
	mov	DWORD PTR _iCost$[esp+16], ebx
$LN19@IgnoreUnit@2:

; 2566 : 			}
; 2567 : #endif
; 2568 : 		}
; 2569 : 
; 2570 : 		// Damage caused by features (mods)
; 2571 : 		if(0 != GC.getPATH_DAMAGE_WEIGHT())

	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+6944, 0
	je	SHORT $LN162@IgnoreUnit@2

; 2572 : 		{
; 2573 : 			if(pToPlot->getFeatureType() != NO_FEATURE)

	mov	al, BYTE PTR [esi+432]
	cmp	al, -1
	je	SHORT $LN17@IgnoreUnit@2

; 2574 : 			{
; 2575 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2576 : 				iCost += (GC.getPATH_DAMAGE_WEIGHT() * MAX(0, GC.getFeatureInfo(pToPlot->getFeatureType())->getTurnDamage())) / GC.getMAX_HIT_POINTS();
; 2577 : #else
; 2578 : 				iCost += (GC.getPATH_DAMAGE_WEIGHT() * std::max(0, GC.getFeatureInfo(pToPlot->getFeatureType())->getTurnDamage())) / GC.getMAX_HIT_POINTS();

	movsx	eax, al
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
	mov	ecx, eax
	call	?getTurnDamage@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getTurnDamage
	mov	DWORD PTR $T224242[esp+16], eax
	test	eax, eax
	mov	DWORD PTR $T224243[esp+16], 0
	lea	eax, DWORD PTR $T224242[esp+16]
	jg	SHORT $LN105@IgnoreUnit@2
	lea	eax, DWORD PTR $T224243[esp+16]
$LN105@IgnoreUnit@2:
	mov	eax, DWORD PTR [eax]
	imul	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6944
	cdq
	idiv	DWORD PTR ?gGlobals@@3VCvGlobals@@A+7368
	add	ebx, eax
	mov	DWORD PTR _iCost$[esp+16], ebx
$LN17@IgnoreUnit@2:

; 2579 : #endif
; 2580 : 			}
; 2581 : 
; 2582 : 			if(pToPlot->getExtraMovePathCost() > 0)

	mov	ecx, esi
	call	?getExtraMovePathCost@CvPlot@@QBEHXZ	; CvPlot::getExtraMovePathCost
	test	eax, eax
	jle	SHORT $LN162@IgnoreUnit@2

; 2583 : 			{
; 2584 : 				iCost += (PATH_MOVEMENT_WEIGHT * pToPlot->getExtraMovePathCost());

	mov	ecx, esi
	call	?getExtraMovePathCost@CvPlot@@QBEHXZ	; CvPlot::getExtraMovePathCost
	imul	eax, 1000				; 000003e8H
	add	ebx, eax
	mov	DWORD PTR _iCost$[esp+16], ebx
$LN162@IgnoreUnit@2:

; 2585 : 			}
; 2586 : 		}
; 2587 : 
; 2588 : 		if(pToPlot->getPlotCity() && !(pToPlot->getX() == finder->GetDestX() && pToPlot->getY() == finder->GetDestY()))

	mov	ecx, DWORD PTR [esi+104]
	test	ecx, ecx
	jl	SHORT $LN13@IgnoreUnit@2
	cmp	ecx, 64					; 00000040H
	jge	SHORT $LN13@IgnoreUnit@2
	mov	edx, DWORD PTR [esi+108]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	edx
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 2589 : 		{
; 2590 : 			iCost += PATH_CITY_AVOID_WEIGHT; // slewis - this should be zeroed out currently
; 2591 : 		}
; 2592 : 	}
; 2593 : 	else

	jmp	SHORT $LN13@IgnoreUnit@2
$LN23@IgnoreUnit@2:

; 2594 : 	{
; 2595 : 		iCost = (PATH_MOVEMENT_WEIGHT * iCost);

	imul	ebp, 1000				; 000003e8H
	mov	ebx, ebp
	mov	ebp, DWORD PTR _finder$[esp+16]
	mov	DWORD PTR _iCost$[esp+16], ebx
$LN13@IgnoreUnit@2:

; 2596 : 	}
; 2597 : 
; 2598 : #ifdef AUI_ASTAR_EXPLORE_UNITAITYPE_ALWAYS_MAXIMIZES_EXPLORE
; 2599 : 	if (finder->GetInfo() & MOVE_MAXIMIZE_EXPLORE || pUnit->AI_getUnitAIType() == UNITAI_EXPLORE || pUnit->AI_getUnitAIType() == UNITAI_EXPLORE_SEA)
; 2600 : #else
; 2601 : 	if(finder->GetInfo() & MOVE_MAXIMIZE_EXPLORE)

	test	BYTE PTR [ebp+72], -128			; ffffff80H
	je	SHORT $LN12@IgnoreUnit@2

; 2602 : #endif
; 2603 : 	{
; 2604 : #ifdef AUI_ASTAR_FIX_MAXIMIZE_EXPLORE_CONSIDER_2ND_RING_NONREVEALED
; 2605 : 		int iUnseenPlots = pToPlot->getNumNonrevealedInRange(eUnitTeam, pToPlot->seeFromLevel(eUnitTeam));
; 2606 : #else
; 2607 : 		int iUnseenPlots = pToPlot->getNumAdjacentNonrevealed(eUnitTeam);

	mov	eax, DWORD PTR _eUnitTeam$[esp+16]
	push	eax
	mov	ecx, esi
	call	?getNumAdjacentNonrevealed@CvPlot@@QBEHW4TeamTypes@@@Z ; CvPlot::getNumAdjacentNonrevealed

; 2608 : #endif
; 2609 : 		if(!pToPlot->isRevealed(eUnitTeam))

	mov	ecx, DWORD PTR _eUnitTeam$[esp+16]
	mov	edx, ecx
	shr	edx, 5
	mov	ebx, edx
	shl	ebx, 5
	sub	ecx, ebx
	mov	ebx, 1
	shl	ebx, cl
	test	ebx, DWORD PTR [esi+edx*4+8]
	jne	SHORT $LN11@IgnoreUnit@2

; 2610 : 		{
; 2611 : 			iUnseenPlots += 1;

	inc	eax
$LN11@IgnoreUnit@2:

; 2612 : 		}
; 2613 : 
; 2614 : 		iCost += (7 - iUnseenPlots) * PATH_EXPLORE_NON_REVEAL_WEIGHT;

	mov	edx, DWORD PTR _iCost$[esp+16]
	mov	ecx, 7
	sub	ecx, eax
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ebx, DWORD PTR [edx+ecx*2]
$LN12@IgnoreUnit@2:

; 2615 : 	}
; 2616 : 
; 2617 : 	// If we are a land unit and we are moving through the water, make the cost a little higher so that
; 2618 : 	// we favor staying on land or getting back to land as quickly as possible because it is dangerous to
; 2619 : 	// be on the water.  Don't add this penalty if the unit is human controlled however, we will assume they want
; 2620 : 	// the best path, rather than the safest.
; 2621 : #ifdef AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT
; 2622 : 	if (pCacheData->getDomainType() == DOMAIN_LAND && (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater()))
; 2623 : 	{
; 2624 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2625 : 		if (bIsAIControl)
; 2626 : #else
; 2627 : 		if (!pCacheData->isHuman() || pCacheData->IsAutomated())
; 2628 : #endif
; 2629 : 		{
; 2630 : 			iCost += PATH_THROUGH_WATER;
; 2631 : 		}
; 2632 : 		else
; 2633 : 		{
; 2634 : 			iCost += AUI_ASTAR_HUMAN_UNITS_GET_DIMINISHED_AVOID_WEIGHT + PATH_TERRITORY_WEIGHT;
; 2635 : 		}
; 2636 : 	}
; 2637 : #else
; 2638 : 	if(pCacheData->getDomainType() == DOMAIN_LAND && (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater()) && (!pCacheData->isHuman() || pUnit->IsAutomated()))

	cmp	DWORD PTR [ebp+148], 2
	jne	SHORT $LN163@IgnoreUnit@2
	cmp	BYTE PTR [esi+5], 3
	jne	SHORT $LN163@IgnoreUnit@2
	mov	ecx, esi
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN163@IgnoreUnit@2
	cmp	BYTE PTR [ebp+152], al
	je	SHORT $LN9@IgnoreUnit@2
	mov	ecx, DWORD PTR _pointer$[esp+16]
	call	?IsAutomated@CvUnit@@QBE_NXZ		; CvUnit::IsAutomated
	test	al, al
	je	SHORT $LN163@IgnoreUnit@2
$LN9@IgnoreUnit@2:

; 2639 : 	{
; 2640 : 		iCost += PATH_THROUGH_WATER;

	add	ebx, 1000				; 000003e8H
$LN163@IgnoreUnit@2:

; 2641 : 	}
; 2642 : #endif
; 2643 : 
; 2644 : 	if(pUnit->IsCombatUnit())

	mov	ecx, DWORD PTR _pointer$[esp+16]
	cmp	DWORD PTR [ecx+1044], 0
	jle	$LN1@IgnoreUnit@2

; 2645 : 	{
; 2646 : #if defined(AUI_ASTAR_AVOID_RIVER_CROSSING_WHEN_ATTACKING) || defined(AUI_ASTAR_CONSIDER_DAMAGE_WHEN_ATTACKING)
; 2647 : 		bool bToPlotHasEnemy = pToPlot->isVisibleEnemyDefender(pUnit) || pToPlot->isEnemyCity(*pUnit);
; 2648 : 		if (iMovesLeft == 0 && !bToPlotHasEnemy)
; 2649 : #else
; 2650 : 		if(iMovesLeft == 0)

	cmp	DWORD PTR _iMovesLeft$[esp+20], 0
	jne	SHORT $LN7@IgnoreUnit@2

; 2651 : #endif
; 2652 : 		{
; 2653 : #ifdef AUI_ASTAR_FIX_DEFENSE_PENALTIES_CONSIDERED_FOR_UNITS_WITHOUT_DEFENSE_BONUS
; 2654 : 			int iDefenseBonus = pToPlot->defenseModifier(eUnitTeam, false);
; 2655 : 			if (iDefenseBonus > 0)
; 2656 : 			{
; 2657 : 				if (pUnit->noDefensiveBonus())
; 2658 : 					iDefenseBonus = 0;
; 2659 : 				else if (iDefenseBonus > 200)
; 2660 : 					iDefenseBonus = 200;
; 2661 : 			}
; 2662 : 			iCost += PATH_DEFENSE_WEIGHT * (200 - iDefenseBonus);
; 2663 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 2664 : 			iCost += (PATH_DEFENSE_WEIGHT * MAX(0, (200 - ((pUnit->noDefensiveBonus()) ? 0 : pToPlot->defenseModifier(eUnitTeam, false)))));
; 2665 : #else
; 2666 : 			iCost += (PATH_DEFENSE_WEIGHT * std::max(0, (200 - ((pUnit->noDefensiveBonus()) ? 0 : pToPlot->defenseModifier(eUnitTeam, false)))));

	call	?noDefensiveBonus@CvUnit@@QBE_NXZ	; CvUnit::noDefensiveBonus
	test	al, al
	je	SHORT $LN33@IgnoreUnit@2
	xor	eax, eax
	jmp	SHORT $LN34@IgnoreUnit@2
$LN33@IgnoreUnit@2:
	mov	eax, DWORD PTR _eUnitTeam$[esp+16]
	push	0
	push	0
	push	eax
	mov	ecx, esi
	call	?defenseModifier@CvPlot@@QBEHW4TeamTypes@@_N1@Z ; CvPlot::defenseModifier
$LN34@IgnoreUnit@2:
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	DWORD PTR $T224244[esp+16], ecx
	mov	DWORD PTR $T224247[esp+16], 0
	lea	eax, DWORD PTR $T224244[esp+16]
	test	ecx, ecx
	jg	SHORT $LN140@IgnoreUnit@2
	lea	eax, DWORD PTR $T224247[esp+16]
$LN140@IgnoreUnit@2:
	mov	eax, DWORD PTR [eax]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ebx, DWORD PTR [ebx+ecx*2]
$LN7@IgnoreUnit@2:

; 2667 : #endif
; 2668 : 		}
; 2669 : 
; 2670 : #if !defined(AUI_ASTAR_AVOID_RIVER_CROSSING_WHEN_ATTACKING) && !defined(AUI_ASTAR_CONSIDER_DAMAGE_WHEN_ATTACKING)
; 2671 : 		if(pCacheData->IsAutomated())

	cmp	BYTE PTR [ebp+153], 0
	je	$LN1@IgnoreUnit@2

; 2672 : #endif
; 2673 : 		{
; 2674 : 			if(pCacheData->IsCanAttack())

	cmp	BYTE PTR [ebp+158], 0
	je	$LN1@IgnoreUnit@2

; 2675 : 			{
; 2676 : 				if(finder->IsPathDest(pToPlot->getX(), pToPlot->getY()))

	mov	eax, DWORD PTR [ebp]
	movsx	ecx, WORD PTR [esi+2]
	movsx	edx, WORD PTR [esi]
	test	eax, eax
	je	$LN1@IgnoreUnit@2
	push	ebp
	mov	ebp, DWORD PTR [ebp+44]
	push	ebp
	push	ecx
	push	edx
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN1@IgnoreUnit@2

; 2677 : 				{
; 2678 : #if defined(AUI_ASTAR_AVOID_RIVER_CROSSING_WHEN_ATTACKING) || defined(AUI_ASTAR_CONSIDER_DAMAGE_WHEN_ATTACKING)
; 2679 : 					if (bToPlotHasEnemy)
; 2680 : #else
; 2681 : 					if(pToPlot->isVisibleEnemyDefender(pUnit))

	mov	ebp, DWORD PTR _pointer$[esp+16]
	push	ebp
	mov	ecx, esi
	call	?isVisibleEnemyDefender@CvPlot@@QBE_NPBVCvUnit@@@Z ; CvPlot::isVisibleEnemyDefender
	test	al, al
	je	SHORT $LN1@IgnoreUnit@2

; 2682 : #endif
; 2683 : 					{
; 2684 : #ifdef AUI_ASTAR_CONSIDER_DAMAGE_WHEN_ATTACKING
; 2685 : 						int iDealtDamage = 0;
; 2686 : 						int iSelfDamage = 0;
; 2687 : 						CvCity* pCity = pToPlot->getPlotCity();
; 2688 : 						if (pCity)
; 2689 : 						{
; 2690 : 							int iAttackerStrength = pUnit->GetMaxAttackStrength(pFromPlot, pToPlot, NULL);
; 2691 : 							int iDefenderStrength = pCity->getStrengthValue();
; 2692 : 
; 2693 : 							iDealtDamage = pUnit->getCombatDamage(iAttackerStrength, iDefenderStrength, pUnit->getDamage(), /*bIncludeRand*/ false, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ true);
; 2694 : 							iSelfDamage = pUnit->getCombatDamage(iDefenderStrength, iAttackerStrength, pCity->getDamage(), /*bIncludeRand*/ false, /*bAttackerIsCity*/ true, /*bDefenderIsCity*/ false);
; 2695 : 
; 2696 : 							// Will both the attacker die, and the city fall? If so, the unit wins
; 2697 : 							if (iDealtDamage + pCity->getDamage() >= pCity->GetMaxHitPoints())
; 2698 : 							{
; 2699 : 								if (pUnit->isNoCapture())
; 2700 : 									iDealtDamage = pCity->GetMaxHitPoints() - pCity->getDamage() - 1;
; 2701 : 								if (iSelfDamage >= pUnit->GetCurrHitPoints())
; 2702 : 									iSelfDamage = pUnit->GetCurrHitPoints() - 1;
; 2703 : 							}
; 2704 : 						}
; 2705 : 						else
; 2706 : 						{
; 2707 : 							CvUnit* pDefender = pToPlot->getVisibleEnemyDefender(pUnit);
; 2708 : 							if (pDefender && pDefender->IsCanDefend())
; 2709 : 							{
; 2710 : 								// handle the Zulu special thrown spear first attack
; 2711 : 								if (pUnit->isRangedSupportFire() && pUnit->canEverRangeStrikeAt(pToPlot->getX(), pToPlot->getY()))
; 2712 : 									iDealtDamage = pUnit->GetRangeCombatDamage(pDefender, /*pCity*/ NULL, /*bIncludeRand*/ false);
; 2713 : 
; 2714 : 								if (iDealtDamage < pDefender->GetCurrHitPoints())
; 2715 : 								{
; 2716 : 									int iAttackerStrength = pUnit->GetMaxAttackStrength(pFromPlot, pToPlot, pDefender);
; 2717 : 									int iDefenderStrength = pDefender->GetMaxDefenseStrength(pToPlot, pUnit);
; 2718 : 
; 2719 : #ifdef NQ_HEAVY_CHARGE_DOWNHILL
; 2720 : 									bool isAttackingFromHigherElevation = 
; 2721 : 										((pUnit->plot()->isMountain() && !pDefender->plot()->isMountain()) || // attacking from mountain to non-mountain
; 2722 : 										(pUnit->plot()->isHills() && pDefender->plot()->isFlatlands())); // attacking from hills to flatlands
; 2723 : 									if ((pUnit->IsCanHeavyCharge() || (pUnit->GetHeavyChargeDownhill() > 0 && isAttackingFromHigherElevation))
; 2724 : 										&& !pDefender->CanFallBackFromMelee(*pUnit))
; 2725 : #else
; 2726 : 									if (pUnit->IsCanHeavyCharge() && !pDefender->CanFallBackFromMelee(*pUnit))
; 2727 : #endif
; 2728 : 										iAttackerStrength = (iAttackerStrength * 150) / 100;
; 2729 : 									iSelfDamage = pDefender->getCombatDamage(iDefenderStrength, iAttackerStrength, pDefender->getDamage() + iDealtDamage, /*bIncludeRand*/ false, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);
; 2730 : 									iDealtDamage = pUnit->getCombatDamage(iAttackerStrength, iDefenderStrength, pUnit->getDamage(), /*bIncludeRand*/ false, /*bAttackerIsCity*/ false, /*bDefenderIsCity*/ false);
; 2731 : 
; 2732 : 									// Will both units be killed by this? :o If so, take drastic corrective measures
; 2733 : 									if (iDealtDamage >= pDefender->GetCurrHitPoints() && iSelfDamage >= pUnit->GetCurrHitPoints())
; 2734 : 									{
; 2735 : 										// He who hath the least amount of damage survives with 1 HP left
; 2736 : 										if (iDealtDamage + pDefender->getDamage() > iSelfDamage + pUnit->getDamage())
; 2737 : 											iSelfDamage = pUnit->GetCurrHitPoints() - 1;
; 2738 : 										else
; 2739 : 											iDealtDamage = pDefender->GetCurrHitPoints() - 1;
; 2740 : 									}
; 2741 : 								}
; 2742 : 							}
; 2743 : 						}
; 2744 : 						if (iSelfDamage > pUnit->GetCurrHitPoints())
; 2745 : 							iSelfDamage = pUnit->GetMaxHitPoints();
; 2746 : 						if (iDealtDamage > GC.getMAX_HIT_POINTS())
; 2747 : 							iDealtDamage = GC.getMAX_HIT_POINTS();
; 2748 : 						iCost += iSelfDamage * PATH_DAMAGE_WEIGHT * pUnit->GetMaxHitPoints() / 100 + (GC.getMAX_HIT_POINTS() - iDealtDamage) * PATH_DAMAGE_WEIGHT / 10;
; 2749 : #else
; 2750 : #ifdef AUI_ASTAR_FIX_DEFENSE_PENALTIES_CONSIDERED_FOR_UNITS_WITHOUT_DEFENSE_BONUS
; 2751 : 						int iDefenseBonus = pFromPlot->defenseModifier(eUnitTeam, false);
; 2752 : 						if (iDefenseBonus > 0)
; 2753 : 						{
; 2754 : 							if (pUnit->noDefensiveBonus())
; 2755 : 								iDefenseBonus = 0;
; 2756 : 							else if (iDefenseBonus > 200)
; 2757 : 								iDefenseBonus = 200;
; 2758 : 						}
; 2759 : 						iCost += PATH_DEFENSE_WEIGHT * (200 - iDefenseBonus);
; 2760 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 2761 : 						iCost += (PATH_DEFENSE_WEIGHT * MAX(0, (200 - ((pUnit->noDefensiveBonus()) ? 0 : pFromPlot->defenseModifier(eUnitTeam, false)))));
; 2762 : #else
; 2763 : 						iCost += (PATH_DEFENSE_WEIGHT * std::max(0, (200 - ((pUnit->noDefensiveBonus()) ? 0 : pFromPlot->defenseModifier(eUnitTeam, false)))));

	mov	ecx, ebp
	call	?noDefensiveBonus@CvUnit@@QBE_NXZ	; CvUnit::noDefensiveBonus
	test	al, al
	je	SHORT $LN35@IgnoreUnit@2
	xor	eax, eax
	jmp	SHORT $LN36@IgnoreUnit@2
$LN35@IgnoreUnit@2:
	mov	edx, DWORD PTR _eUnitTeam$[esp+16]
	push	0
	push	0
	push	edx
	mov	ecx, edi
	call	?defenseModifier@CvPlot@@QBEHW4TeamTypes@@_N1@Z ; CvPlot::defenseModifier
$LN36@IgnoreUnit@2:
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	DWORD PTR $T224248[esp+16], ecx
	mov	DWORD PTR $T224251[esp+16], 0
	lea	eax, DWORD PTR $T224248[esp+16]
	test	ecx, ecx
	jg	SHORT $LN155@IgnoreUnit@2
	lea	eax, DWORD PTR $T224251[esp+16]
$LN155@IgnoreUnit@2:
	mov	eax, DWORD PTR [eax]
	lea	eax, DWORD PTR [eax+eax*4]

; 2764 : #endif
; 2765 : 
; 2766 : 						// I guess we may as well be the garrison
; 2767 : #if PATH_CITY_WEIGHT != 0
; 2768 : 						if(!(pFromPlot->isCity()))
; 2769 : 						{
; 2770 : 							iCost += PATH_CITY_WEIGHT;
; 2771 : 						}
; 2772 : #endif
; 2773 : 
; 2774 : 						if(!(pUnit->isRiverCrossingNoPenalty()))

	mov	ecx, ebp
	lea	ebx, DWORD PTR [ebx+eax*2]
	call	?isRiverCrossingNoPenalty@CvUnit@@QBE_NXZ ; CvUnit::isRiverCrossingNoPenalty
	test	al, al
	jne	SHORT $LN1@IgnoreUnit@2

; 2775 : 						{
; 2776 : 							if(pFromPlot->isRiverCrossing(directionXY(pFromPlot, pToPlot)))

	push	esi
	push	edi
	call	?directionXY@@YA?AW4DirectionTypes@@PBVCvPlot@@0@Z ; directionXY
	add	esp, 8
	push	eax
	mov	ecx, edi
	call	?isRiverCrossing@CvPlot@@QBE_NW4DirectionTypes@@@Z ; CvPlot::isRiverCrossing
	test	al, al
	je	SHORT $LN1@IgnoreUnit@2

; 2777 : 							{
; 2778 : 								iCost += (PATH_RIVER_WEIGHT * -(GC.getRIVER_ATTACK_MODIFIER()));
; 2779 : 								iCost += (PATH_MOVEMENT_WEIGHT * iMovesLeft);

	mov	eax, DWORD PTR _iMovesLeft$[esp+20]
	lea	ecx, DWORD PTR [eax+eax*4]
	add	ecx, ecx
	sub	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7388
	imul	ecx, 100				; 00000064H
	add	ebx, ecx
$LN1@IgnoreUnit@2:
	pop	edi
	pop	esi
	pop	ebp

; 2780 : 							}
; 2781 : 						}
; 2782 : #endif
; 2783 : 					}
; 2784 : 				}
; 2785 : 			}
; 2786 : 		}
; 2787 : 	}
; 2788 : 
; 2789 : 	FAssert(iCost != MAX_INT);
; 2790 : 
; 2791 : 	iCost += PATH_STEP_WEIGHT;

	lea	eax, DWORD PTR [ebx+2]
	pop	ebx

; 2792 : 
; 2793 : 	FAssert(iCost > 0);
; 2794 : 
; 2795 : 	return iCost;
; 2796 : }

	pop	ecx
	ret	0
?IgnoreUnitsCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; IgnoreUnitsCost
_TEXT	ENDS
PUBLIC	?IgnoreUnitsValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; IgnoreUnitsValid
; Function compile flags: /Ogtpy
;	COMDAT ?IgnoreUnitsValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?IgnoreUnitsValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; IgnoreUnitsValid, COMDAT

; 2803 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2804 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());
; 2805 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 2806 : 	TeamTypes eUnitTeam = pCacheData->getTeam();
; 2807 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 2808 : 	CvPlot* pToPlot = node->m_pPlot;
; 2809 : 	if (!pToPlot)
; 2810 : 		return FALSE;
; 2811 : #else
; 2812 : 	CvPlot* pToPlot = theMap.plotUnchecked(node->m_iX, node->m_iY);
; 2813 : #endif
; 2814 : 	bool bIsAIControl = !pCacheData->isHuman() || pCacheData->IsAutomated();
; 2815 : #else
; 2816 : 	CvUnit* pUnit;
; 2817 : 	CvPlot* pFromPlot;
; 2818 : 	CvPlot* pToPlot;
; 2819 : 	bool bAIControl;
; 2820 : #endif
; 2821 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2822 : 	PlayerTypes unit_owner = pUnit->getOwner();
; 2823 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2824 : 	CvAStarNode& kToNodeCacheData = *node;
; 2825 : #else
; 2826 : 	CvPathNodeCacheData& kToNodeCacheData = node->m_kCostCacheData;
; 2827 : #endif
; 2828 : #endif
; 2829 : 
; 2830 : 	if(parent == NULL)

	mov	edx, DWORD PTR _parent$[esp-4]
	test	edx, edx
	jne	SHORT $LN15@IgnoreUnit@3

; 2831 : 	{
; 2832 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2833 : 		// Cache values for this node that we will use when the node is checked again in the future
; 2834 : 		if (!kToNodeCacheData.bIsCalculated)
; 2835 : 		{
; 2836 : 			kToNodeCacheData.bIsCalculated = true;
; 2837 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 2838 : 			kToNodeCacheData.bIsWater = !pToPlot->IsAllowsWalkWater();
; 2839 : 			if (pUnit->IsHoveringUnit())
; 2840 : 				kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 2841 : 			else
; 2842 : 				kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->isWater();
; 2843 : #else
; 2844 : 			kToNodeCacheData.bIsWater = (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater());
; 2845 : #endif
; 2846 : 			kToNodeCacheData.bIsMountain = true;
; 2847 : 			kToNodeCacheData.bIsRevealedToTeam = true;
; 2848 : 			kToNodeCacheData.bCanEnterTerrain = true;
; 2849 : 		}
; 2850 : #endif
; 2851 : 		return TRUE;

	lea	eax, DWORD PTR [edx+1]

; 3004 : }

	ret	0
$LN15@IgnoreUnit@3:

; 2852 : 	}
; 2853 : 
; 2854 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2855 : 	// Cache values for this node that we will use when the node is checked again in the future
; 2856 : 	if (!kToNodeCacheData.bIsCalculated)
; 2857 : 	{
; 2858 : 		kToNodeCacheData.bIsCalculated = true;
; 2859 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 2860 : 		kToNodeCacheData.bIsWater = !pToPlot->IsAllowsWalkWater();
; 2861 : 		if (pUnit->IsHoveringUnit())
; 2862 : 			kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 2863 : 		else
; 2864 : 			kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->isWater();
; 2865 : #else
; 2866 : 		kToNodeCacheData.bIsWater = (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater());
; 2867 : #endif
; 2868 : 		// Recycling bIsMountain for Borders check (only for IgnoreUnits Pathfinder!)
; 2869 : #ifdef AUI_ASTAR_FIX_IGNORE_UNITS_PATHFINDER_TERRITORY_CHECK
; 2870 : 		kToNodeCacheData.bIsMountain = pUnit->canEnterTerritory(pToPlot->getTeam(), false, false, pUnit->IsDeclareWar() || (finder->GetInfo() & MOVE_DECLARE_WAR));
; 2871 : #else
; 2872 : 		kToNodeCacheData.bIsMountain = pUnit->canEnterTerritory(eUnitTeam);
; 2873 : #endif
; 2874 : 		kToNodeCacheData.bIsRevealedToTeam = pToPlot->isRevealed(eUnitTeam);
; 2875 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2876 : 		if (bIsAIControl || kToNodeCacheData.bIsRevealedToTeam)
; 2877 : #else
; 2878 : 		if (bAIControl || kToNodeCacheData.bIsRevealedToTeam || !bIsHuman)
; 2879 : #endif
; 2880 : 			kToNodeCacheData.bCanEnterTerrain = pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE);
; 2881 : 		else
; 2882 : 			kToNodeCacheData.bCanEnterTerrain = true;
; 2883 : 	}
; 2884 : 
; 2885 : #endif
; 2886 : 
; 2887 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2888 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 2889 : 	CvPlot* pFromPlot = parent->m_pPlot;
; 2890 : 	if (!pFromPlot)
; 2891 : 		return FALSE;
; 2892 : #else
; 2893 : 	CvPlot* pFromPlot = theMap.plotUnchecked(parent->m_iX, parent->m_iY);
; 2894 : #endif
; 2895 : 	CvPlot* pUnitPlot = pUnit->plot();
; 2896 : #else
; 2897 : 	CvMap& theMap = GC.getMap();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 2898 : 
; 2899 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 2900 : 	pFromPlot = parent->m_pPlot;
; 2901 : 	pToPlot = node->m_pPlot;
; 2902 : #else
; 2903 : 	pFromPlot = theMap.plotUnchecked(parent->m_iX, parent->m_iY);

	mov	eax, DWORD PTR [ecx+4020]
	push	ebx
	push	ebp
	push	esi
	movsx	esi, WORD PTR [edx+82]
	movsx	edx, WORD PTR [edx+80]
	imul	esi, eax
	mov	ecx, DWORD PTR [ecx+4068]
	add	esi, edx

; 2904 : 	pToPlot = theMap.plotUnchecked(node->m_iX, node->m_iY);

	mov	edx, DWORD PTR _node$[esp+8]
	imul	esi, 484				; 000001e4H
	movsx	ebp, WORD PTR [edx+82]
	movsx	edx, WORD PTR [edx+80]
	imul	ebp, eax
	push	edi

; 2905 : #endif
; 2906 : 
; 2907 : 	pUnit = ((CvUnit*)pointer);
; 2908 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());
; 2909 : 
; 2910 : 	TeamTypes eUnitTeam = pCacheData->getTeam();
; 2911 : 
; 2912 : 	CvPlot* pUnitPlot = theMap.plotUnchecked(pUnit->getX(), pUnit->getY());

	mov	edi, DWORD PTR _pointer$[esp+12]
	mov	edi, DWORD PTR [edi+88]
	imul	edi, eax
	mov	eax, DWORD PTR _pointer$[esp+12]
	add	edi, DWORD PTR [eax+76]
	add	ebp, edx
	mov	edx, DWORD PTR _finder$[esp+12]
	imul	ebp, 484				; 000001e4H
	imul	edi, 484				; 000001e4H
	mov	ebx, DWORD PTR [edx+144]
	add	esi, ecx
	add	ebp, ecx
	add	edi, ecx

; 2913 : #endif
; 2914 : 
; 2915 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2916 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2917 : 	CvAStarNode& kFromNodeCacheData = *parent;
; 2918 : #else
; 2919 : 	CvPathNodeCacheData& kFromNodeCacheData = parent->m_kCostCacheData;
; 2920 : #endif
; 2921 : #endif
; 2922 : 
; 2923 : 	// slewis - moved this up so units can't move directly into the water. Not 100% sure this is the right solution.
; 2924 : 	if(pCacheData->getDomainType() == DOMAIN_LAND)

	cmp	DWORD PTR [edx+148], 2
	jne	SHORT $LN76@IgnoreUnit@3

; 2925 : 	{
; 2926 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2927 : 		if (!kFromNodeCacheData.bIsWater && kToNodeCacheData.bIsWater && kToNodeCacheData.bIsRevealedToTeam && !pUnit->canEmbarkOnto(*pFromPlot, *pToPlot, true))
; 2928 : #else
; 2929 : 		if(!pFromPlot->isWater() && pToPlot->isWater() && pToPlot->isRevealed(eUnitTeam) && !pUnit->canEmbarkOnto(*pFromPlot, *pToPlot, true))

	mov	al, 3
	cmp	BYTE PTR [esi+5], al
	je	SHORT $LN76@IgnoreUnit@3
	cmp	BYTE PTR [ebp+5], al
	jne	SHORT $LN76@IgnoreUnit@3
	mov	eax, ebx
	shr	eax, 5
	mov	ecx, eax
	shl	ecx, 5
	mov	edx, ecx
	mov	ecx, ebx
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	test	edx, DWORD PTR [ebp+eax*4+8]
	je	SHORT $LN76@IgnoreUnit@3
	mov	ecx, DWORD PTR _pointer$[esp+12]
	push	0
	push	1
	push	ebp
	push	esi
	call	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z ; CvUnit::canEmbarkOnto
	test	al, al

; 2930 : #endif
; 2931 : 		{
; 2932 : 			return FALSE;

	je	$LN1@IgnoreUnit@3
$LN76@IgnoreUnit@3:

; 2933 : 		}
; 2934 : 	}
; 2935 : 
; 2936 : 	if(pUnitPlot == pFromPlot)

	cmp	edi, esi

; 2937 : 	{
; 2938 : 		return TRUE;

	je	$LN2@IgnoreUnit@3

; 2939 : 	}
; 2940 : 
; 2941 : 	if(finder->GetInfo() & MOVE_TERRITORY_NO_UNEXPLORED)

	mov	eax, DWORD PTR _finder$[esp+12]
	test	BYTE PTR [eax+72], 1
	je	SHORT $LN79@IgnoreUnit@3

; 2942 : 	{
; 2943 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2944 : 		if (!kFromNodeCacheData.bIsRevealedToTeam)
; 2945 : #else
; 2946 : 		if(!(pFromPlot->isRevealed(eUnitTeam)))

	mov	eax, ebx
	shr	eax, 5
	mov	ecx, eax
	shl	ecx, 5
	mov	edx, ecx
	mov	ecx, ebx
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	test	edx, DWORD PTR [esi+eax*4+8]

; 2947 : #endif
; 2948 : 		{
; 2949 : 			return FALSE;

	je	$LN1@IgnoreUnit@3

; 2950 : 		}
; 2951 : 
; 2952 : 		if(pFromPlot->isOwned())

	mov	ecx, esi
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	test	al, al
	je	SHORT $LN79@IgnoreUnit@3

; 2953 : 		{
; 2954 : 			if(pFromPlot->getTeam() != eUnitTeam)

	mov	ecx, esi
	call	?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ	; CvPlot::getTeam
	cmp	eax, ebx

; 2955 : 			{
; 2956 : 				return FALSE;

	jne	$LN1@IgnoreUnit@3
$LN79@IgnoreUnit@3:

; 2957 : 			}
; 2958 : 		}
; 2959 : 	}
; 2960 : 
; 2961 : 	if(finder->GetInfo() & MOVE_TERRITORY_NO_ENEMY)

	mov	eax, DWORD PTR _finder$[esp+12]
	test	BYTE PTR [eax+72], 2
	je	SHORT $LN80@IgnoreUnit@3

; 2962 : 	{
; 2963 : 		if(pFromPlot->isOwned())

	mov	ecx, esi
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	test	al, al
	je	SHORT $LN80@IgnoreUnit@3

; 2964 : 		{
; 2965 : 			if(atWar(pFromPlot->getTeam(), eUnitTeam))

	push	ebx
	mov	ecx, esi
	call	?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ	; CvPlot::getTeam
	push	eax
	call	?atWar@@YA_NW4TeamTypes@@0@Z		; atWar
	add	esp, 8
	test	al, al

; 2966 : 			{
; 2967 : 				return FALSE;

	jne	SHORT $LN1@IgnoreUnit@3
$LN80@IgnoreUnit@3:

; 2968 : 			}
; 2969 : 		}
; 2970 : 	}
; 2971 : 
; 2972 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 2973 : 	bAIControl = pUnit->IsAutomated();

	mov	ecx, DWORD PTR _pointer$[esp+12]
	call	?IsAutomated@CvUnit@@QBE_NXZ		; CvUnit::IsAutomated

; 2974 : #endif
; 2975 : 
; 2976 : 	// slewis - added AI check and embark check to prevent units from moving into unexplored areas
; 2977 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 2978 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2979 : 	if (bIsAIControl || kFromNodeCacheData.bIsRevealedToTeam || pCacheData->isEmbarked())
; 2980 : #else
; 2981 : 	if (bAIControl || !bIsHuman || kFromNodeCacheData.bIsRevealedToTeam || pCacheData->isEmbarked())
; 2982 : #endif
; 2983 : 	{
; 2984 : 		if (!kToNodeCacheData.bCanEnterTerrain || !kToNodeCacheData.bIsMountain) // Recycling bIsMountain for Borders check (only for IgnoreUnits Pathfinder!)
; 2985 : #else
; 2986 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 2987 : 	if (bIsAIControl || (pFromPlot->isRevealed(eUnitTeam) || pCacheData->isEmbarked()))
; 2988 : #else
; 2989 : 	if(bAIControl || (pFromPlot->isRevealed(eUnitTeam) || pCacheData->isEmbarked()) || !pCacheData->isHuman())

	test	al, al
	jne	SHORT $LN81@IgnoreUnit@3
	mov	eax, ebx
	shr	eax, 5
	mov	ecx, eax
	shl	ecx, 5
	mov	edx, ecx
	mov	ecx, ebx
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	test	edx, DWORD PTR [esi+eax*4+8]
	jne	SHORT $LN81@IgnoreUnit@3
	mov	eax, DWORD PTR _finder$[esp+12]
	cmp	BYTE PTR [eax+157], 0
	jne	SHORT $LN81@IgnoreUnit@3
	cmp	BYTE PTR [eax+152], 0
	jne	SHORT $LN2@IgnoreUnit@3
$LN81@IgnoreUnit@3:

; 2990 : #endif
; 2991 : 	{
; 2992 : #ifdef AUI_ASTAR_FIX_IGNORE_UNITS_PATHFINDER_TERRITORY_CHECK
; 2993 : 		if (!pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE) || !pUnit->canEnterTerritory(pToPlot->getTeam(), false, false, pUnit->IsDeclareWar() || (GetInfo() & MOVE_DECLARE_WAR)))
; 2994 : #else
; 2995 : 		if(!pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE) || !pUnit->canEnterTerritory(eUnitTeam))

	mov	esi, DWORD PTR _pointer$[esp+12]
	push	128					; 00000080H
	push	ebp
	mov	ecx, esi
	call	?canEnterTerrain@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canEnterTerrain
	test	al, al
	je	SHORT $LN1@IgnoreUnit@3
	push	0
	push	0
	push	0
	push	ebx
	mov	ecx, esi
	call	?canEnterTerritory@CvUnit@@QBE_NW4TeamTypes@@_N11@Z ; CvUnit::canEnterTerritory
	test	al, al
	je	SHORT $LN1@IgnoreUnit@3
$LN2@IgnoreUnit@3:
	pop	edi
	pop	esi
	pop	ebp

; 3000 : 		}
; 3001 : 	}
; 3002 : 
; 3003 : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 3004 : }

	ret	0
$LN1@IgnoreUnit@3:
	pop	edi
	pop	esi
	pop	ebp

; 2996 : #endif
; 2997 : #endif
; 2998 : 		{
; 2999 : 			return FALSE;

	xor	eax, eax
	pop	ebx

; 3004 : }

	ret	0
?IgnoreUnitsValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; IgnoreUnitsValid
_TEXT	ENDS
PUBLIC	?IgnoreUnitsPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; IgnoreUnitsPathAdd
; Function compile flags: /Ogtpy
;	COMDAT ?IgnoreUnitsPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iMoves$ = -4						; size = 4
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
$T224672 = 16						; size = 4
_data$ = 16						; size = 4
$T224669 = 20						; size = 4
$T224666 = 20						; size = 4
_pointer$ = 20						; size = 4
_iTurns$ = 24						; size = 4
_finder$ = 24						; size = 4
?IgnoreUnitsPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; IgnoreUnitsPathAdd, COMDAT

; 3009 : {

	push	ecx

; 3010 : 	int iTurns;
; 3011 : 
; 3012 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 3013 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());
; 3014 : 	int iMoves = MAX_INT;
; 3015 : 
; 3016 : 	if(data == ASNC_INITIALADD)

	cmp	DWORD PTR _data$[esp], 0
	push	ebx
	mov	ebx, DWORD PTR _finder$[esp+4]
	push	esi
	mov	DWORD PTR _iMoves$[esp+12], 2147483647	; 7fffffffH
	jne	SHORT $LN3@IgnoreUnit@4

; 3017 : 	{
; 3018 : 		iTurns = 1;
; 3019 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3020 : 		iMoves = pUnit->movesLeft();
; 3021 : #else
; 3022 : 		iMoves = std::min(iMoves, pUnit->movesLeft());

	mov	ecx, DWORD PTR _pointer$[esp+8]
	mov	esi, 1
	call	?movesLeft@CvUnit@@QBEHXZ		; CvUnit::movesLeft
	mov	DWORD PTR $T224666[esp+8], eax
	cmp	eax, 2147483647				; 7fffffffH
	lea	eax, DWORD PTR $T224666[esp+8]
	jl	$LN15@IgnoreUnit@4

; 3060 : #endif
; 3061 : 	}
; 3062 : 
; 3063 : 	FAssertMsg(iMoves >= 0, "iMoves is expected to be non-negative (invalid Index)");
; 3064 : 
; 3065 : 	node->m_iData1 = iMoves;

	mov	ecx, DWORD PTR _node$[esp+8]
	lea	eax, DWORD PTR _iMoves$[esp+12]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], eax

; 3066 : 	node->m_iData2 = iTurns;

	mov	DWORD PTR [ecx+16], esi

; 3067 : 
; 3068 : 	return 1;

	mov	eax, esi
	pop	esi
	pop	ebx

; 3069 : }

	pop	ecx
	ret	0
$LN3@IgnoreUnit@4:

; 3023 : #endif
; 3024 : 	}
; 3025 : 	else
; 3026 : 	{
; 3027 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3028 : 		CvPlot* pFromPlot = parent->m_pPlot;
; 3029 : 		CvPlot* pToPlot = node->m_pPlot;
; 3030 : #else
; 3031 : 		CvPlot* pFromPlot = GC.getMap().plotUnchecked(parent->m_iX, parent->m_iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	ecx, DWORD PTR [eax+4020]
	mov	edx, DWORD PTR [eax+4068]
	mov	eax, DWORD PTR _parent$[esp+8]
	movsx	esi, WORD PTR [eax+80]
	push	ebp

; 3032 : 		CvPlot* pToPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);

	mov	ebp, DWORD PTR _node$[esp+12]
	push	edi
	movsx	edi, WORD PTR [eax+82]
	imul	edi, ecx
	add	edi, esi
	movsx	esi, WORD PTR [ebp+82]
	imul	edi, 484				; 000001e4H
	imul	esi, ecx
	movsx	ecx, WORD PTR [ebp+80]

; 3033 : #endif
; 3034 : 
; 3035 : 		int iStartMoves = parent->m_iData1;

	mov	ebp, DWORD PTR [eax+12]
	add	esi, ecx
	imul	esi, 484				; 000001e4H
	add	edi, edx
	add	esi, edx

; 3036 : 		iTurns = parent->m_iData2;

	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _iTurns$[esp+16], edx

; 3037 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3038 : 		int iBaseMoves = pCacheData->baseMoves(((pFromPlot->isWater() && !pFromPlot->IsAllowsWalkWater()) || pCacheData->isEmbarked()) ? DOMAIN_SEA : pCacheData->getDomainType());
; 3039 : #endif
; 3040 : 
; 3041 : 		if(iStartMoves == 0)

	test	ebp, ebp
	jne	SHORT $LN1@IgnoreUnit@4

; 3042 : 		{
; 3043 : 			iTurns++;

	inc	DWORD PTR _iTurns$[esp+16]

; 3044 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3045 : 			iStartMoves = iBaseMoves * GC.getMOVE_DENOMINATOR();
; 3046 : #else
; 3047 : 			iStartMoves = pCacheData->baseMoves((pToPlot->isWater() && !pToPlot->IsAllowsWalkWater()) ? DOMAIN_SEA : DOMAIN_LAND) * GC.getMOVE_DENOMINATOR();

	cmp	BYTE PTR [esi+5], 3
	jne	SHORT $LN57@IgnoreUnit@4
	mov	ecx, esi
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN57@IgnoreUnit@4
	xor	eax, eax
	jmp	SHORT $LN7@IgnoreUnit@4
$LN57@IgnoreUnit@4:
	mov	eax, 2
$LN7@IgnoreUnit@4:
	mov	ebp, DWORD PTR [ebx+eax*4+116]
	imul	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6236
$LN1@IgnoreUnit@4:

; 3048 : #endif
; 3049 : 		}
; 3050 : 
; 3051 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3052 : 		// We can just set maxMoves to the maximum integer value and use it for increased portability and no redundant checks, iMoves gets set to 0 anyway if it's negative
; 3053 : 		iMoves = iStartMoves - CvUnitMovement::MovementCostNoZOC(pUnit, pFromPlot, pToPlot, iBaseMoves, MAX_INT, iStartMoves);
; 3054 : 		if (iMoves < 0)
; 3055 : 			iMoves = 0;
; 3056 : #else
; 3057 : 		// We can't use maxMoves, because that checks where the unit is currently, and we're plotting a path so we have to see
; 3058 : 		// what the max moves would be like if the unit was already at the desired location.
; 3059 : 		iMoves = std::min(iMoves, std::max(0, iStartMoves - CvUnitMovement::MovementCostNoZOC(pUnit, pFromPlot, pToPlot, pCacheData->baseMoves((pToPlot->isWater() || pCacheData->isEmbarked())?DOMAIN_SEA:pCacheData->getDomainType()), pCacheData->maxMoves())));

	cmp	BYTE PTR [esi+5], 3
	je	SHORT $LN8@IgnoreUnit@4
	cmp	BYTE PTR [ebx+157], 0
	jne	SHORT $LN8@IgnoreUnit@4
	mov	ecx, DWORD PTR [ebx+148]
	jmp	SHORT $LN9@IgnoreUnit@4
$LN8@IgnoreUnit@4:
	xor	ecx, ecx
$LN9@IgnoreUnit@4:
	mov	eax, DWORD PTR [ebx+136]
	mov	ecx, DWORD PTR [ebx+ecx*4+116]
	push	0
	push	eax
	mov	eax, DWORD PTR _pointer$[esp+24]
	push	ecx
	push	esi
	push	edi
	push	eax
	call	?MovementCostNoZOC@CvUnitMovement@@SAHPBVCvUnit@@PBVCvPlot@@1HHH@Z ; CvUnitMovement::MovementCostNoZOC
	sub	ebp, eax
	add	esp, 24					; 00000018H
	mov	DWORD PTR $T224669[esp+16], ebp
	mov	DWORD PTR $T224672[esp+16], 0
	test	ebp, ebp
	jle	SHORT $LN50@IgnoreUnit@4
	cmp	ebp, 2147483647				; 7fffffffH
	lea	eax, DWORD PTR $T224669[esp+16]
	jl	SHORT $LN55@IgnoreUnit@4
	lea	eax, DWORD PTR _iMoves$[esp+20]
$LN55@IgnoreUnit@4:
	mov	esi, DWORD PTR _iTurns$[esp+16]
	pop	edi
	pop	ebp
$LN15@IgnoreUnit@4:

; 3060 : #endif
; 3061 : 	}
; 3062 : 
; 3063 : 	FAssertMsg(iMoves >= 0, "iMoves is expected to be non-negative (invalid Index)");
; 3064 : 
; 3065 : 	node->m_iData1 = iMoves;

	mov	ecx, DWORD PTR _node$[esp+8]
	mov	eax, DWORD PTR [eax]

; 3066 : 	node->m_iData2 = iTurns;

	mov	DWORD PTR [ecx+16], esi
	pop	esi
	mov	DWORD PTR [ecx+12], eax

; 3067 : 
; 3068 : 	return 1;

	mov	eax, 1
	pop	ebx

; 3069 : }

	pop	ecx
	ret	0

; 3048 : #endif
; 3049 : 		}
; 3050 : 
; 3051 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3052 : 		// We can just set maxMoves to the maximum integer value and use it for increased portability and no redundant checks, iMoves gets set to 0 anyway if it's negative
; 3053 : 		iMoves = iStartMoves - CvUnitMovement::MovementCostNoZOC(pUnit, pFromPlot, pToPlot, iBaseMoves, MAX_INT, iStartMoves);
; 3054 : 		if (iMoves < 0)
; 3055 : 			iMoves = 0;
; 3056 : #else
; 3057 : 		// We can't use maxMoves, because that checks where the unit is currently, and we're plotting a path so we have to see
; 3058 : 		// what the max moves would be like if the unit was already at the desired location.
; 3059 : 		iMoves = std::min(iMoves, std::max(0, iStartMoves - CvUnitMovement::MovementCostNoZOC(pUnit, pFromPlot, pToPlot, pCacheData->baseMoves((pToPlot->isWater() || pCacheData->isEmbarked())?DOMAIN_SEA:pCacheData->getDomainType()), pCacheData->maxMoves())));

$LN50@IgnoreUnit@4:
	lea	eax, DWORD PTR $T224672[esp+16]
	jmp	SHORT $LN55@IgnoreUnit@4
?IgnoreUnitsPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; IgnoreUnitsPathAdd
_TEXT	ENDS
PUBLIC	?StepDestValid@@YAHHHPBXPAVCvAStar@@@Z		; StepDestValid
; Function compile flags: /Ogtpy
;	COMDAT ?StepDestValid@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?StepDestValid@@YAHHHPBXPAVCvAStar@@@Z PROC		; StepDestValid, COMDAT

; 3080 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 3081 : 	CvPlot* pFromPlot;
; 3082 : 	CvPlot* pToPlot;
; 3083 : #endif
; 3084 : 
; 3085 : 	CvMap& kMap = GC.getMap();
; 3086 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3087 : 	CvPlot* pFromPlot = kMap.plotUnchecked(finder->GetStartX(), finder->GetStartY());
; 3088 : 	CvPlot* pToPlot = kMap.plotUnchecked(iToX, iToY);
; 3089 : #else
; 3090 : 	pFromPlot = kMap.plotUnchecked(finder->GetStartX(), finder->GetStartY());
; 3091 : 	pToPlot = kMap.plotUnchecked(iToX, iToY);
; 3092 : #endif
; 3093 : 
; 3094 : 	if(pFromPlot->getArea() != pToPlot->getArea())

	mov	edx, DWORD PTR _finder$[esp-4]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	eax, DWORD PTR [ecx+4020]
	mov	ecx, DWORD PTR [ecx+4068]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [edx+60]
	imul	esi, eax
	imul	eax, DWORD PTR _iToY$[esp+4]
	add	esi, DWORD PTR [edx+56]
	add	eax, DWORD PTR _iToX$[esp+4]
	imul	esi, 484				; 000001e4H
	mov	edx, DWORD PTR [esi+ecx+356]
	imul	eax, 484				; 000001e4H
	xor	ebx, ebx
	cmp	edx, DWORD PTR [eax+ecx+356]
	pop	esi
	sete	bl
	mov	eax, ebx
	pop	ebx

; 3095 : 	{
; 3096 : 		return FALSE;
; 3097 : 	}
; 3098 : 
; 3099 : 	return TRUE;
; 3100 : }

	ret	0
?StepDestValid@@YAHHHPBXPAVCvAStar@@@Z ENDP		; StepDestValid
_TEXT	ENDS
PUBLIC	?StepValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; StepValid
EXTRN	?IsFriendlyTerritory@CvPlot@@QBE_NW4PlayerTypes@@@Z:PROC ; CvPlot::IsFriendlyTerritory
EXTRN	?getEmbarkedAllWaterPassage@CvTeam@@QBEHXZ:PROC	; CvTeam::getEmbarkedAllWaterPassage
; Function compile flags: /Ogtpy
;	COMDAT ?StepValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_eEnemy$ = 8						; size = 4
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?StepValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; StepValid, COMDAT

; 3123 : 	if(parent == NULL)

	mov	edx, DWORD PTR _parent$[esp-4]
	test	edx, edx
	jne	SHORT $LN9@StepValid

; 3124 : 	{
; 3125 : 		return TRUE;

	lea	eax, DWORD PTR [edx+1]

; 3187 : }

	ret	0
$LN9@StepValid:

; 3126 : 	}
; 3127 : 
; 3128 : 	int iFlags = finder->GetInfo();
; 3129 : 	PlayerTypes ePlayer = (PlayerTypes)(iFlags & 0xFF);

	mov	eax, DWORD PTR _finder$[esp-4]

; 3130 : 
; 3131 : 	PlayerTypes eEnemy = *(PlayerTypes*)pointer;

	mov	ecx, DWORD PTR _pointer$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax+72]
	mov	eax, DWORD PTR [ecx]
	push	ebp

; 3132 : 
; 3133 : 	CvPlayer& thisPlayer = GET_PLAYER(ePlayer);
; 3134 : 
; 3135 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3136 : 	CvPlot* pNewPlot = node->m_pPlot;
; 3137 : 	if (!pNewPlot)
; 3138 : 		return FALSE;
; 3139 : 	if (parent->m_pPlot && parent->m_pPlot->getArea() != pNewPlot->getArea())
; 3140 : #else
; 3141 : 	CvMap& kMap = GC.getMap();
; 3142 : 	CvPlot* pNewPlot = kMap.plotUnchecked(node->m_iX, node->m_iY);

	mov	ebp, DWORD PTR _node$[esp+4]
	push	esi
	movsx	esi, WORD PTR [ebp+82]
	movsx	ebp, WORD PTR [ebp+80]
	mov	DWORD PTR _eEnemy$[esp+8], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	ecx, DWORD PTR [eax+4020]
	imul	esi, ecx
	mov	eax, DWORD PTR [eax+4068]
	add	esi, ebp

; 3143 : 
; 3144 : 	if(kMap.plotUnchecked(parent->m_iX, parent->m_iY)->getArea() != pNewPlot->getArea())

	movsx	ebp, WORD PTR [edx+82]
	imul	esi, 484				; 000001e4H
	imul	ebp, ecx
	movsx	ecx, WORD PTR [edx+80]
	push	edi
	and	ebx, 255				; 000000ffH
	add	ebp, ecx
	mov	edi, ebx
	imul	ebp, 484				; 000001e4H
	mov	edx, DWORD PTR [eax+ebp+356]
	imul	edi, 63236				; 0000f704H
	add	edi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	esi, eax
	cmp	edx, DWORD PTR [esi+356]

; 3145 : #endif
; 3146 : 	{
; 3147 : 		return FALSE;

	jne	$LN6@StepValid

; 3148 : 	}
; 3149 : 
; 3150 : #ifdef AUI_ASTAR_FIX_STEP_VALID_CONSIDERS_MOUNTAINS
; 3151 : 	if (pNewPlot->isImpassable())
; 3152 : #else
; 3153 : 	if(pNewPlot->isImpassable() || pNewPlot->isMountain())

	test	BYTE PTR [esi+462], 128			; 00000080H
	jne	$LN6@StepValid
	cmp	BYTE PTR [esi+5], 0
	je	$LN6@StepValid

; 3157 : 	}
; 3158 : 
; 3159 : 	// Ocean hex and team can't navigate on oceans?
; 3160 : 	if (!GET_TEAM(thisPlayer.getTeam()).getEmbarkedAllWaterPassage())

	mov	eax, DWORD PTR [edi+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN42@StepValid
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN43@StepValid
$LN42@StepValid:
	or	eax, -1
$LN43@StepValid:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	ecx, eax
	call	?getEmbarkedAllWaterPassage@CvTeam@@QBEHXZ ; CvTeam::getEmbarkedAllWaterPassage
	test	eax, eax
	jne	SHORT $LN4@StepValid

; 3161 : 	{
; 3162 : 		if (pNewPlot->getTerrainType() == TERRAIN_OCEAN)

	cmp	BYTE PTR [esi+6], 6

; 3163 : 		{
; 3164 : 			return FALSE;

	je	SHORT $LN6@StepValid
$LN4@StepValid:

; 3165 : 		}
; 3166 : 	}
; 3167 : 
; 3168 : 	PlayerTypes ePlotOwnerPlayer = pNewPlot->getOwner();

	movsx	ebp, BYTE PTR [esi+4]

; 3169 : 	if (ePlotOwnerPlayer != NO_PLAYER && ePlotOwnerPlayer != eEnemy && !pNewPlot->IsFriendlyTerritory(ePlayer))

	cmp	ebp, -1
	je	SHORT $LN1@StepValid
	cmp	ebp, DWORD PTR _eEnemy$[esp+12]
	je	SHORT $LN1@StepValid
	push	ebx
	mov	ecx, esi
	call	?IsFriendlyTerritory@CvPlot@@QBE_NW4PlayerTypes@@@Z ; CvPlot::IsFriendlyTerritory
	test	al, al
	jne	SHORT $LN1@StepValid

; 3170 : 	{
; 3171 : 		CvPlayer& plotOwnerPlayer = GET_PLAYER(ePlotOwnerPlayer);

	imul	ebp, 63236				; 0000f704H
	add	ebp, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 3172 : 		bool bPlotOwnerIsMinor = plotOwnerPlayer.isMinorCiv();

	mov	ecx, ebp
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv

; 3173 : 
; 3174 : 		if(!bPlotOwnerIsMinor)

	test	al, al
	jne	SHORT $LN1@StepValid

; 3175 : 		{
; 3176 : 			TeamTypes eMyTeam = thisPlayer.getTeam();

	mov	ecx, edi
	call	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ	; CvPlayer::getTeam

; 3177 : 			TeamTypes ePlotOwnerTeam = plotOwnerPlayer.getTeam();

	mov	ecx, ebp
	mov	esi, eax
	call	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ	; CvPlayer::getTeam

; 3178 : 
; 3179 : 			if(!atWar(eMyTeam, ePlotOwnerTeam))

	push	eax
	push	esi
	call	?atWar@@YA_NW4TeamTypes@@0@Z		; atWar
	add	esp, 8
	test	al, al

; 3180 : 			{
; 3181 : 				return FALSE;

	je	SHORT $LN6@StepValid
$LN1@StepValid:
	pop	edi
	pop	esi
	pop	ebp

; 3182 : 			}
; 3183 : 		}
; 3184 : 	}
; 3185 : 
; 3186 : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 3187 : }

	ret	0
$LN6@StepValid:
	pop	edi
	pop	esi
	pop	ebp

; 3154 : #endif
; 3155 : 	{
; 3156 : 		return FALSE;

	xor	eax, eax
	pop	ebx

; 3187 : }

	ret	0
?StepValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; StepValid
_TEXT	ENDS
PUBLIC	?StepValidAnyArea@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; StepValidAnyArea
; Function compile flags: /Ogtpy
;	COMDAT ?StepValidAnyArea@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_eEnemy$ = 8						; size = 4
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?StepValidAnyArea@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; StepValidAnyArea, COMDAT

; 3194 : 	if(parent == NULL)

	cmp	DWORD PTR _parent$[esp-4], 0
	jne	SHORT $LN7@StepValidA

; 3195 : 	{
; 3196 : 		return TRUE;

	mov	eax, 1

; 3253 : }

	ret	0
$LN7@StepValidA:

; 3197 : 	}
; 3198 : 
; 3199 : 	int iFlags = finder->GetInfo();
; 3200 : 	PlayerTypes ePlayer = (PlayerTypes)(iFlags & 0xFF);
; 3201 : 
; 3202 : 	PlayerTypes eEnemy = *(PlayerTypes*)pointer;

	mov	ecx, DWORD PTR _pointer$[esp-4]
	mov	edx, DWORD PTR [ecx]

; 3203 : 
; 3204 : 	CvPlayer& thisPlayer = GET_PLAYER(ePlayer);
; 3205 : 
; 3206 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3207 : 	CvPlot* pNewPlot = node->m_pPlot;
; 3208 : 	if (!pNewPlot)
; 3209 : 		return FALSE;
; 3210 : #else
; 3211 : 	CvMap& kMap = GC.getMap();
; 3212 : 	CvPlot* pNewPlot = kMap.plotUnchecked(node->m_iX, node->m_iY);

	mov	ecx, DWORD PTR _node$[esp-4]
	mov	eax, DWORD PTR _finder$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax+72]
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	esi
	movsx	esi, WORD PTR [ecx+82]
	imul	esi, DWORD PTR [eax+4020]
	movsx	ecx, WORD PTR [ecx+80]
	add	esi, ecx
	push	edi
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [eax+4068]
	and	ebx, 255				; 000000ffH
	mov	edi, ebx
	imul	edi, 63236				; 0000f704H
	add	edi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 3213 : #endif
; 3214 : 
; 3215 : 	//if(kMap.plotUnchecked(parent->m_iX, parent->m_iY)->getArea() != pNewPlot->getArea())
; 3216 : 	//{
; 3217 : 	//	return FALSE;
; 3218 : 	//}
; 3219 : 
; 3220 : 	if(pNewPlot->isImpassable())

	test	BYTE PTR [esi+462], 128			; 00000080H
	mov	DWORD PTR _eEnemy$[esp+8], edx

; 3221 : 	{
; 3222 : 		return FALSE;

	jne	SHORT $LN45@StepValidA

; 3223 : 	}
; 3224 : 
; 3225 : 	// Ocean hex and team can't navigate on oceans?
; 3226 : 	if (!GET_TEAM(thisPlayer.getTeam()).getEmbarkedAllWaterPassage())

	mov	eax, DWORD PTR [edi+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN28@StepValidA
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN29@StepValidA
$LN28@StepValidA:
	or	eax, -1
$LN29@StepValidA:
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	mov	ecx, eax
	call	?getEmbarkedAllWaterPassage@CvTeam@@QBEHXZ ; CvTeam::getEmbarkedAllWaterPassage
	test	eax, eax
	jne	SHORT $LN4@StepValidA

; 3227 : 	{
; 3228 : 		if (pNewPlot->getTerrainType() == TERRAIN_OCEAN)

	cmp	BYTE PTR [esi+6], 6
	jne	SHORT $LN4@StepValidA
$LN45@StepValidA:
	pop	edi
	pop	esi

; 3229 : 		{
; 3230 : 			return FALSE;

	xor	eax, eax
	pop	ebx

; 3253 : }

	ret	0
$LN4@StepValidA:
	push	ebp

; 3231 : 		}
; 3232 : 	}
; 3233 : 
; 3234 : 	PlayerTypes ePlotOwnerPlayer = pNewPlot->getOwner();

	movsx	ebp, BYTE PTR [esi+4]

; 3235 : 	if (ePlotOwnerPlayer != NO_PLAYER && ePlotOwnerPlayer != eEnemy && !pNewPlot->IsFriendlyTerritory(ePlayer))

	cmp	ebp, -1
	je	SHORT $LN1@StepValidA
	cmp	ebp, DWORD PTR _eEnemy$[esp+12]
	je	SHORT $LN1@StepValidA
	push	ebx
	mov	ecx, esi
	call	?IsFriendlyTerritory@CvPlot@@QBE_NW4PlayerTypes@@@Z ; CvPlot::IsFriendlyTerritory
	test	al, al
	jne	SHORT $LN1@StepValidA

; 3236 : 	{
; 3237 : 		CvPlayer& plotOwnerPlayer = GET_PLAYER(ePlotOwnerPlayer);

	imul	ebp, 63236				; 0000f704H
	add	ebp, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 3238 : 		bool bPlotOwnerIsMinor = plotOwnerPlayer.isMinorCiv();

	mov	ecx, ebp
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv

; 3239 : 
; 3240 : 		if(!bPlotOwnerIsMinor)

	test	al, al
	jne	SHORT $LN1@StepValidA

; 3241 : 		{
; 3242 : 			TeamTypes eMyTeam = thisPlayer.getTeam();

	mov	ecx, edi
	call	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ	; CvPlayer::getTeam

; 3243 : 			TeamTypes ePlotOwnerTeam = plotOwnerPlayer.getTeam();

	mov	ecx, ebp
	mov	esi, eax
	call	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ	; CvPlayer::getTeam

; 3244 : 
; 3245 : 			if(!atWar(eMyTeam, ePlotOwnerTeam))

	push	eax
	push	esi
	call	?atWar@@YA_NW4TeamTypes@@0@Z		; atWar
	add	esp, 8
	test	al, al
	jne	SHORT $LN1@StepValidA
	pop	ebp
	pop	edi
	pop	esi

; 3246 : 			{
; 3247 : 				return FALSE;

	xor	eax, eax
	pop	ebx

; 3253 : }

	ret	0
$LN1@StepValidA:
	pop	ebp
	pop	edi
	pop	esi

; 3248 : 			}
; 3249 : 		}
; 3250 : 	}
; 3251 : 
; 3252 : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 3253 : }

	ret	0
?StepValidAnyArea@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; StepValidAnyArea
_TEXT	ENDS
PUBLIC	?InfluenceDestValid@@YAHHHPBXPAVCvAStar@@@Z	; InfluenceDestValid
; Function compile flags: /Ogtpy
;	COMDAT ?InfluenceDestValid@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?InfluenceDestValid@@YAHHHPBXPAVCvAStar@@@Z PROC	; InfluenceDestValid, COMDAT

; 3283 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 3284 : 	CvPlot* pFromPlot;
; 3285 : 	CvPlot* pToPlot;
; 3286 : #endif
; 3287 : 
; 3288 : 	CvMap& kMap = GC.getMap();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 3289 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3290 : 	CvPlot* pFromPlot = kMap.plotUnchecked(finder->GetStartX(), finder->GetStartY());
; 3291 : 	CvPlot* pToPlot = kMap.plotUnchecked(iToX, iToY);
; 3292 : #else
; 3293 : 	pFromPlot = kMap.plotUnchecked(finder->GetStartX(), finder->GetStartY());

	mov	eax, DWORD PTR [ecx+4020]
	mov	edx, DWORD PTR [ecx+4068]
	push	esi
	mov	esi, DWORD PTR _finder$[esp]
	mov	ecx, DWORD PTR [esi+60]
	imul	ecx, eax

; 3294 : 	pToPlot = kMap.plotUnchecked(iToX, iToY);

	imul	eax, DWORD PTR _iToY$[esp]
	add	ecx, DWORD PTR [esi+56]
	add	eax, DWORD PTR _iToX$[esp]

; 3295 : #endif
; 3296 : 
; 3297 : 	if(pointer)

	mov	esi, DWORD PTR _pointer$[esp]
	imul	ecx, 484				; 000001e4H
	imul	eax, 484				; 000001e4H
	add	ecx, edx
	add	eax, edx
	test	esi, esi
	je	SHORT $LN1@InfluenceD

; 3298 : 	{
; 3299 : 		int iRange = abs(*(int*)pointer);
; 3300 : 		if(plotDistance(pFromPlot->getX(),pFromPlot->getY(),pToPlot->getX(),pToPlot->getY()) > iRange)

	movsx	edx, WORD PTR [eax+2]
	movsx	eax, WORD PTR [eax]
	push	edx
	movsx	edx, WORD PTR [ecx+2]
	push	eax
	movsx	eax, WORD PTR [ecx]
	push	edx
	push	eax
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	mov	ecx, eax
	mov	eax, DWORD PTR [esi]
	cdq
	xor	eax, edx
	sub	eax, edx
	add	esp, 16					; 00000010H
	cmp	ecx, eax
	jle	SHORT $LN1@InfluenceD

; 3301 : 		{
; 3302 : 			return FALSE;

	xor	eax, eax
	pop	esi

; 3307 : }

	ret	0
$LN1@InfluenceD:

; 3303 : 		}
; 3304 : 	}
; 3305 : 
; 3306 : 	return TRUE;

	mov	eax, 1
	pop	esi

; 3307 : }

	ret	0
?InfluenceDestValid@@YAHHHPBXPAVCvAStar@@@Z ENDP	; InfluenceDestValid
_TEXT	ENDS
PUBLIC	?InfluenceCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; InfluenceCost
EXTRN	?getInfluenceCost@CvFeatureInfo@@QBEHXZ:PROC	; CvFeatureInfo::getInfluenceCost
EXTRN	?getInfluenceCost@CvTerrainInfo@@QBEHXZ:PROC	; CvTerrainInfo::getInfluenceCost
EXTRN	?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z:PROC ; CvGlobals::getTerrainInfo
; Function compile flags: /Ogtpy
;	COMDAT ?InfluenceCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_bDifferentOwner$ = -5					; size = 1
$T225067 = -4						; size = 4
$T225066 = -4						; size = 4
_iCost$ = 8						; size = 4
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?InfluenceCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; InfluenceCost, COMDAT

; 3320 : {

	sub	esp, 8
	push	ebx
	push	esi

; 3321 : 	int iCost = 0;
; 3322 : 	bool bDifferentOwner = false;
; 3323 : 	if(parent->m_pParent || GC.getUSE_FIRST_RING_INFLUENCE_TERRAIN_COST())

	mov	esi, DWORD PTR _parent$[esp+12]
	xor	ebx, ebx
	mov	BYTE PTR _bDifferentOwner$[esp+16], bl
	cmp	DWORD PTR [esi+24], ebx
	jne	SHORT $LN10@InfluenceC
	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+7012, ebx
	jne	SHORT $LN10@InfluenceC

; 3361 : 		}
; 3362 : 	}
; 3363 : 	else
; 3364 : 	{
; 3365 : 		iCost = 1;

	mov	ebx, 1
	jmp	$LN90@InfluenceC
$LN10@InfluenceC:

; 3324 : 	{
; 3325 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3326 : 		const CvPlot* pFromPlot = parent->m_pPlot;
; 3327 : 		const CvPlot* pToPlot = node->m_pPlot;
; 3328 : 		const CvPlot* pSourcePlot = GC.getMap().plotUnchecked(finder->GetStartX(), finder->GetStartY());
; 3329 : #else
; 3330 : 		CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 3331 : 		CvPlot* pFromPlot = kMap.plotUnchecked(parent->m_iX, parent->m_iY);

	mov	ecx, DWORD PTR [eax+4020]
	mov	edx, DWORD PTR [eax+4068]
	movsx	eax, WORD PTR [esi+80]
	push	ebp
	push	edi
	movsx	edi, WORD PTR [esi+82]

; 3332 : 		CvPlot* pToPlot = kMap.plotUnchecked(node->m_iX, node->m_iY);
; 3333 : 		CvPlot* pSourcePlot = kMap.plotUnchecked(finder->GetStartX(), finder->GetStartY());

	mov	ebp, DWORD PTR _finder$[esp+20]
	imul	edi, ecx
	add	edi, eax
	mov	eax, DWORD PTR _node$[esp+20]
	imul	edi, 484				; 000001e4H
	movsx	esi, WORD PTR [eax+82]
	movsx	eax, WORD PTR [eax+80]
	imul	esi, ecx
	add	esi, eax
	mov	eax, DWORD PTR [ebp+60]
	imul	esi, 484				; 000001e4H
	imul	eax, ecx
	add	eax, DWORD PTR [ebp+56]

; 3334 : #endif
; 3335 : 
; 3336 : 		int iRange = 0;
; 3337 : 		if(pointer)

	mov	ecx, DWORD PTR _pointer$[esp+20]
	imul	eax, 484				; 000001e4H
	add	edi, edx
	add	esi, edx
	add	eax, edx
	test	ecx, ecx
	je	SHORT $LN88@InfluenceC

; 3338 : 		{
; 3339 : 			iRange = *(int*)pointer;
; 3340 : 		}
; 3341 : 		if(iRange >= 0)

	cmp	DWORD PTR [ecx], ebx
	jl	SHORT $LN7@InfluenceC
$LN88@InfluenceC:

; 3342 : 		{
; 3343 : 			if(pToPlot->getOwner() != NO_PLAYER && pSourcePlot->getOwner() != NO_PLAYER && pToPlot->getOwner() != pSourcePlot->getOwner())

	mov	cl, BYTE PTR [esi+4]
	cmp	cl, -1
	je	SHORT $LN7@InfluenceC
	mov	al, BYTE PTR [eax+4]
	cmp	al, -1
	je	SHORT $LN7@InfluenceC
	cmp	cl, al
	je	SHORT $LN7@InfluenceC

; 3344 : 				bDifferentOwner = true;

	mov	BYTE PTR _bDifferentOwner$[esp+24], 1
$LN7@InfluenceC:

; 3345 : 		}
; 3346 : 
; 3347 : 		if(pFromPlot->isRiverCrossing(directionXY(pFromPlot, pToPlot)))

	movsx	ecx, WORD PTR [esi+2]
	movsx	edx, WORD PTR [esi]
	movsx	eax, WORD PTR [edi+2]
	push	ecx
	movsx	ecx, WORD PTR [edi]
	push	edx
	push	eax
	push	ecx
	call	?directionXY@@YA?AW4DirectionTypes@@HHHH@Z ; directionXY
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, edi
	call	?isRiverCrossing@CvPlot@@QBE_NW4DirectionTypes@@@Z ; CvPlot::isRiverCrossing
	pop	edi
	pop	ebp
	test	al, al
	je	SHORT $LN6@InfluenceC

; 3348 : 			iCost += GC.getINFLUENCE_RIVER_COST();

	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7008
$LN6@InfluenceC:

; 3349 : 
; 3350 : 		// Mountain Cost
; 3351 : 		if(pToPlot->isMountain())

	mov	al, BYTE PTR [esi+5]
	test	al, al
	jne	SHORT $LN5@InfluenceC

; 3352 : 			iCost += GC.getINFLUENCE_MOUNTAIN_COST();

	add	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7000

; 3353 : 		// Not a mountain - use the terrain cost
; 3354 : 		else

	jmp	SHORT $LN90@InfluenceC
$LN5@InfluenceC:

; 3355 : 		{
; 3356 : 			// Hill cost
; 3357 : 			if(pToPlot->isHills())

	cmp	al, 1
	jne	SHORT $LN3@InfluenceC

; 3358 : 				iCost += GC.getINFLUENCE_HILL_COST();

	add	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7004
$LN3@InfluenceC:

; 3359 : 			iCost += GC.getTerrainInfo(pToPlot->getTerrainType())->getInfluenceCost();

	movsx	eax, BYTE PTR [esi+6]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z ; CvGlobals::getTerrainInfo
	mov	ecx, eax
	call	?getInfluenceCost@CvTerrainInfo@@QBEHXZ	; CvTerrainInfo::getInfluenceCost
	add	ebx, eax

; 3360 : 			iCost += ((pToPlot->getFeatureType() == NO_FEATURE) ? 0 : GC.getFeatureInfo(pToPlot->getFeatureType())->getInfluenceCost());

	mov	al, BYTE PTR [esi+432]
	cmp	al, -1
	jne	SHORT $LN14@InfluenceC
	xor	eax, eax
	jmp	SHORT $LN15@InfluenceC
$LN14@InfluenceC:
	movsx	edx, al
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
	mov	ecx, eax
	call	?getInfluenceCost@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getInfluenceCost
$LN15@InfluenceC:
	add	ebx, eax
$LN90@InfluenceC:
	pop	esi
	mov	DWORD PTR _iCost$[esp+8], ebx

; 3366 : 	}
; 3367 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3368 : 	iCost = MAX(1, iCost);
; 3369 : 	iCost = MIN(3, iCost);
; 3370 : #else
; 3371 : 	iCost = std::max(1,iCost);

	cmp	ebx, 1
	mov	DWORD PTR $T225066[esp+12], 1
	pop	ebx
	lea	eax, DWORD PTR _iCost$[esp+4]
	jg	SHORT $LN83@InfluenceC
	lea	eax, DWORD PTR $T225066[esp+8]
$LN83@InfluenceC:
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _iCost$[esp+4], eax

; 3372 : 	iCost = std::min(3,iCost);

	cmp	eax, 3
	mov	DWORD PTR $T225067[esp+8], 3
	lea	eax, DWORD PTR _iCost$[esp+4]
	jl	SHORT $LN87@InfluenceC
	lea	eax, DWORD PTR $T225067[esp+8]
$LN87@InfluenceC:

; 3373 : #endif
; 3374 : 	if (bDifferentOwner)

	cmp	BYTE PTR _bDifferentOwner$[esp+8], 0
	mov	eax, DWORD PTR [eax]
	je	SHORT $LN1@InfluenceC

; 3375 : 	{
; 3376 : 		iCost += 15;

	add	eax, 15					; 0000000fH
$LN1@InfluenceC:

; 3377 : 	}
; 3378 : 	return iCost;
; 3379 : }

	add	esp, 8
	ret	0
?InfluenceCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; InfluenceCost
_TEXT	ENDS
PUBLIC	?InfluenceValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; InfluenceValid
; Function compile flags: /Ogtpy
;	COMDAT ?InfluenceValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?InfluenceValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; InfluenceValid, COMDAT

; 3386 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 3387 : 	CvPlot* pNewPlot;
; 3388 : #endif
; 3389 : 
; 3390 : 	if(parent == NULL)

	cmp	DWORD PTR _parent$[esp-4], 0

; 3391 : 	{
; 3392 : 		return TRUE;

	je	SHORT $LN1@InfluenceV

; 3393 : 	}
; 3394 : 
; 3395 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3396 : 	if (!node->m_pPlot)
; 3397 : 	{
; 3398 : 		return FALSE;
; 3399 : 	}
; 3400 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 3401 : 	if (!GC.getMap().isPlot(node->m_iX, node->m_iY))
; 3402 : 	{
; 3403 : 		return FALSE;
; 3404 : 	}
; 3405 : #else
; 3406 : 	pNewPlot = GC.getMap().plotCheckInvalid(node->m_iX, node->m_iY);

	mov	eax, DWORD PTR _node$[esp-4]
	movsx	ecx, WORD PTR [eax+80]
	movsx	edx, WORD PTR [eax+82]
	cmp	ecx, -2147483647			; 80000001H
	je	SHORT $LN15@InfluenceV
	cmp	edx, -2147483647			; 80000001H
	je	SHORT $LN15@InfluenceV
	push	esi
	mov	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	eax, DWORD PTR [esi+4020]
	imul	eax, edx
	add	eax, ecx
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [esi+4068]
	pop	esi

; 3407 : 
; 3408 : 	if(pNewPlot == NULL)

	jne	SHORT $LN1@InfluenceV
$LN15@InfluenceV:

; 3409 : 	{
; 3410 : 		return FALSE;

	xor	eax, eax

; 3417 : }

	ret	0
$LN1@InfluenceV:

; 3411 : 	}
; 3412 : #endif
; 3413 : 
; 3414 : 	// todo: a check to see if we are within the theoretical influence range would be great
; 3415 : 
; 3416 : 	return TRUE;

	mov	eax, 1

; 3417 : }

	ret	0
?InfluenceValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; InfluenceValid
_TEXT	ENDS
PUBLIC	?RouteGetExtraChild@@YAHPAVCvAStarNode@@HAAH1PAVCvAStar@@@Z ; RouteGetExtraChild
EXTRN	?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z:PROC ; CvCityConnections::GetCityFromIndex
EXTRN	?GetRouteInfo@CvCityConnections@@QAEPAURouteInfo@1@II@Z:PROC ; CvCityConnections::GetRouteInfo
EXTRN	?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z:PROC ; CvCityConnections::GetIndexFromCity
EXTRN	?GetCityConnections@CvPlayer@@QBEPAVCvCityConnections@@XZ:PROC ; CvPlayer::GetCityConnections
; Function compile flags: /Ogtpy
;	COMDAT ?RouteGetExtraChild@@YAHPAVCvAStarNode@@HAAH1PAVCvAStar@@@Z
_TEXT	SEGMENT
_pRouteInfo$220287 = 8					; size = 4
_node$ = 8						; size = 4
_iIndex$ = 12						; size = 4
_iX$ = 16						; size = 4
_iY$ = 20						; size = 4
_iValidCount$ = 24					; size = 4
_finder$ = 24						; size = 4
?RouteGetExtraChild@@YAHPAVCvAStarNode@@HAAH1PAVCvAStar@@@Z PROC ; RouteGetExtraChild, COMDAT

; 3443 : 	iX = -1;

	mov	eax, DWORD PTR _iX$[esp-4]

; 3444 : 	iY = -1;

	mov	ecx, DWORD PTR _iY$[esp-4]

; 3445 : 
; 3446 : 	PlayerTypes ePlayer = ((PlayerTypes)(finder->GetInfo() & 0xFF));

	mov	edx, DWORD PTR _finder$[esp-4]
	push	ebx
	mov	DWORD PTR [eax], -1
	push	ebp
	push	esi
	mov	DWORD PTR [ecx], -1
	mov	esi, DWORD PTR [edx+72]

; 3447 : 	CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);

	mov	ebx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	and	esi, 255				; 000000ffH
	imul	esi, 63236				; 0000f704H

; 3448 : 	TeamTypes eTeam = kPlayer.getTeam();

	mov	eax, DWORD PTR [esi+ebx+44]
	add	esi, ebx
	push	edi
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN23@RouteGetEx
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	ebp, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN24@RouteGetEx
$LN23@RouteGetEx:
	or	ebp, -1
$LN24@RouteGetEx:

; 3449 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3450 : 	const CvPlot* pPlot = node->m_pPlot;
; 3451 : #else
; 3452 : 	CvPlot* pPlot = GC.getMap().plotCheckInvalid(node->m_iX, node->m_iY);

	mov	eax, DWORD PTR _node$[esp+12]
	movsx	ecx, WORD PTR [eax+80]
	movsx	edx, WORD PTR [eax+82]
	cmp	ecx, -2147483647			; 80000001H
	je	$LN10@RouteGetEx
	cmp	edx, -2147483647			; 80000001H
	je	$LN10@RouteGetEx
	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	eax, DWORD PTR [edi+4020]
	imul	eax, edx
	add	eax, ecx
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [edi+4068]

; 3453 : #endif
; 3454 : 
; 3455 : 	if(!pPlot)
; 3456 : 	{
; 3457 : 		return 0;

	je	$LN10@RouteGetEx

; 3458 : 	}
; 3459 : 
; 3460 : 	CvCity* pCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR [eax+104]
	test	ecx, ecx
	jl	$LN10@RouteGetEx
	cmp	ecx, 64					; 00000040H
	jge	$LN10@RouteGetEx
	mov	eax, DWORD PTR [eax+108]
	imul	ecx, 63236				; 0000f704H
	add	ecx, ebx
	push	eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	edi, eax

; 3461 : 
; 3462 : 	// if there isn't a city there or the city isn't on our team
; 3463 : 	if(!pCity || pCity->getTeam() != eTeam)

	test	edi, edi
	je	SHORT $LN10@RouteGetEx
	mov	ecx, edi
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	cmp	eax, ebp
	jne	SHORT $LN10@RouteGetEx

; 3466 : 	}
; 3467 : 
; 3468 : 	int iValidCount = 0;
; 3469 : 	CvCityConnections* pCityConnections = kPlayer.GetCityConnections();

	mov	ecx, esi
	mov	DWORD PTR _iValidCount$[esp+12], 0
	call	?GetCityConnections@CvPlayer@@QBEPAVCvCityConnections@@XZ ; CvPlayer::GetCityConnections
	mov	esi, eax

; 3470 : 
; 3471 : 	uint uiFirstCityIndex = pCityConnections->GetIndexFromCity(pCity);

	push	edi
	mov	ecx, esi
	call	?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z ; CvCityConnections::GetIndexFromCity

; 3472 : 	for(uint uiSecondCityIndex = 0; uiSecondCityIndex < pCityConnections->m_aiCityPlotIDs.size(); uiSecondCityIndex++)

	xor	edi, edi
	mov	ebp, eax
	cmp	DWORD PTR [esi+16], edi
	jbe	SHORT $LN10@RouteGetEx
	npad	4
$LL59@RouteGetEx:

; 3473 : 	{
; 3474 : 		if(uiFirstCityIndex == uiSecondCityIndex)

	cmp	ebp, edi
	je	SHORT $LN8@RouteGetEx

; 3475 : 		{
; 3476 : 			continue;
; 3477 : 		}
; 3478 : 
; 3479 : 		CvCityConnections::RouteInfo* pRouteInfo = pCityConnections->GetRouteInfo(uiFirstCityIndex, uiSecondCityIndex);

	push	edi
	push	ebp
	mov	ecx, esi
	call	?GetRouteInfo@CvCityConnections@@QAEPAURouteInfo@1@II@Z ; CvCityConnections::GetRouteInfo
	mov	DWORD PTR _pRouteInfo$220287[esp+12], eax

; 3480 : 		if(!pRouteInfo)

	test	eax, eax
	je	SHORT $LN8@RouteGetEx

; 3481 : 		{
; 3482 : 			continue;
; 3483 : 		}
; 3484 : 
; 3485 : 		// get the two cities
; 3486 : 		CvCity* pFirstCity  = pCityConnections->GetCityFromIndex(uiFirstCityIndex);

	push	ebp
	mov	ecx, esi
	call	?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z ; CvCityConnections::GetCityFromIndex

; 3487 : 		CvCity* pSecondCity = pCityConnections->GetCityFromIndex(uiSecondCityIndex);

	push	edi
	mov	ecx, esi
	mov	ebx, eax
	call	?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z ; CvCityConnections::GetCityFromIndex

; 3488 : 
; 3489 : 		if(!pFirstCity || !pSecondCity)

	test	ebx, ebx
	je	SHORT $LN8@RouteGetEx
	test	eax, eax
	je	SHORT $LN8@RouteGetEx

; 3490 : 		{
; 3491 : 			continue;
; 3492 : 		}
; 3493 : 
; 3494 : 		if(pRouteInfo->m_cRouteState & CvCityConnections::HAS_WATER_ROUTE)

	mov	ecx, DWORD PTR _pRouteInfo$220287[esp+12]
	test	BYTE PTR [ecx], 2
	je	SHORT $LN8@RouteGetEx

; 3495 : 		{
; 3496 : 			if(iValidCount == iIndex)

	mov	edx, DWORD PTR _iValidCount$[esp+12]
	cmp	edx, DWORD PTR _iIndex$[esp+12]
	je	SHORT $LN54@RouteGetEx

; 3501 : 			}
; 3502 : 			iValidCount++;

	inc	DWORD PTR _iValidCount$[esp+12]
$LN8@RouteGetEx:

; 3472 : 	for(uint uiSecondCityIndex = 0; uiSecondCityIndex < pCityConnections->m_aiCityPlotIDs.size(); uiSecondCityIndex++)

	inc	edi
	cmp	edi, DWORD PTR [esi+16]
	jb	SHORT $LL59@RouteGetEx
$LN10@RouteGetEx:
	pop	edi
	pop	esi
	pop	ebp

; 3464 : 	{
; 3465 : 		return 0;

	xor	eax, eax
	pop	ebx

; 3503 : 		}
; 3504 : 	}
; 3505 : 
; 3506 : 	return 0;
; 3507 : }

	ret	0
$LN54@RouteGetEx:

; 3497 : 			{
; 3498 : 				iX = pSecondCity->getX();

	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _iX$[esp+12]
	pop	edi
	mov	DWORD PTR [edx], ecx

; 3499 : 				iY = pSecondCity->getY();

	mov	eax, DWORD PTR [eax+108]
	mov	ecx, DWORD PTR _iY$[esp+8]
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx], eax

; 3500 : 				return 1;

	mov	eax, 1
	pop	ebx

; 3503 : 		}
; 3504 : 	}
; 3505 : 
; 3506 : 	return 0;
; 3507 : }

	ret	0
?RouteGetExtraChild@@YAHPAVCvAStarNode@@HAAH1PAVCvAStar@@@Z ENDP ; RouteGetExtraChild
_TEXT	ENDS
PUBLIC	?RouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; RouteValid
EXTRN	?getBestRoute@CvPlayer@@QBE?AW4RouteTypes@@PAVCvPlot@@@Z:PROC ; CvPlayer::getBestRoute
EXTRN	?IsActiveQuestForPlayer@CvMinorCivAI@@QAE_NW4PlayerTypes@@W4MinorCivQuestTypes@@@Z:PROC ; CvMinorCivAI::IsActiveQuestForPlayer
EXTRN	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ:PROC ; CvPlayer::GetMinorCivAI
EXTRN	?IsRoutePillaged@CvPlot@@QBE_NXZ:PROC		; CvPlot::IsRoutePillaged
EXTRN	?getRouteType@CvPlot@@QBE?AW4RouteTypes@@XZ:PROC ; CvPlot::getRouteType
EXTRN	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ:PROC ; CvPlayer::GetPlayerTraits
; Function compile flags: /Ogtpy
;	COMDAT ?RouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_eRouteType$ = -4					; size = 4
_ePlotOwnerPlayer$220317 = 8				; size = 4
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?RouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; RouteValid, COMDAT

; 3513 : {

	push	ecx

; 3514 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 3515 : 	CvPlot* pNewPlot;
; 3516 : #endif
; 3517 : 
; 3518 : 	if(parent == NULL)

	cmp	DWORD PTR _parent$[esp], 0
	jne	SHORT $LN20@RouteValid

; 3519 : 	{
; 3520 : 		return TRUE;

	mov	eax, 1

; 3617 : 		{
; 3618 : 			return TRUE;
; 3619 : 		}
; 3620 : 	}
; 3621 : 
; 3622 : 	return FALSE;
; 3623 : }

	pop	ecx
	ret	0
$LN20@RouteValid:

; 3521 : 	}
; 3522 : 
; 3523 : 	int iFlags = finder->GetInfo();

	mov	eax, DWORD PTR _finder$[esp]

; 3524 : 	PlayerTypes ePlayer = (PlayerTypes)(iFlags & 0xFF);
; 3525 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3526 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3527 : 	const CvPlot* pNewPlot = node->m_pPlot;
; 3528 : #else
; 3529 : 	pNewPlot = node->m_pPlot;
; 3530 : #endif
; 3531 : 	if (!pNewPlot)
; 3532 : 		return FALSE;
; 3533 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 3534 : 	CvPlot* pNewPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);
; 3535 : #else
; 3536 : 	pNewPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR [eax+72]
	mov	eax, DWORD PTR _node$[esp+8]
	movsx	edx, WORD PTR [eax+80]
	push	esi
	movsx	esi, WORD PTR [eax+82]
	imul	esi, DWORD PTR [ecx+4020]
	mov	ebx, ebp
	push	edi
	and	ebx, 255				; 000000ffH
	add	esi, edx

; 3537 : #endif
; 3538 : 
; 3539 : 	CvPlayer& kPlayer = GET_PLAYER(ePlayer);

	mov	edi, ebx
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ecx+4068]
	imul	edi, 63236				; 0000f704H
	add	edi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 3540 : 	if((iFlags & MOVE_ROUTE_ALLOW_UNEXPLORED) == 0 && !(pNewPlot->isRevealed(kPlayer.getTeam())))

	test	ebp, 1073741824				; 40000000H
	jne	SHORT $LN68@RouteValid
	mov	eax, DWORD PTR [edi+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN39@RouteValid
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN40@RouteValid
$LN39@RouteValid:
	or	ecx, -1
$LN40@RouteValid:
	mov	eax, ecx
	shr	eax, 5
	mov	edx, eax
	shl	edx, 5
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	test	edx, DWORD PTR [esi+eax*4+8]

; 3541 : 	{
; 3542 : 		return FALSE;

	je	$LN8@RouteValid
$LN68@RouteValid:

; 3543 : 	}
; 3544 : 
; 3545 : 	if(kPlayer.GetPlayerTraits()->IsMoveFriendlyWoodsAsRoad())

	mov	ecx, edi
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits
	cmp	BYTE PTR [eax+325], 0
	je	SHORT $LN16@RouteValid

; 3546 : 	{
; 3547 : 		if(pNewPlot->getOwner() == ePlayer)

	movsx	eax, BYTE PTR [esi+4]
	cmp	eax, ebx
	jne	SHORT $LN16@RouteValid

; 3548 : 		{
; 3549 : 			if(pNewPlot->getFeatureType() == FEATURE_FOREST || pNewPlot->getFeatureType() == FEATURE_JUNGLE)

	mov	al, BYTE PTR [esi+432]
	cmp	al, 5
	je	SHORT $LN15@RouteValid
	cmp	al, 1
	jne	SHORT $LN16@RouteValid
$LN15@RouteValid:
	pop	edi
	pop	esi
	pop	ebp

; 3550 : 			{
; 3551 : 				return TRUE;

	mov	eax, 1
	pop	ebx

; 3617 : 		{
; 3618 : 			return TRUE;
; 3619 : 		}
; 3620 : 	}
; 3621 : 
; 3622 : 	return FALSE;
; 3623 : }

	pop	ecx
	ret	0
$LN16@RouteValid:

; 3552 : 			}
; 3553 : 		}
; 3554 : 	}
; 3555 : 
; 3556 : 	RouteTypes eRouteType = pNewPlot->getRouteType();

	mov	ecx, esi
	call	?getRouteType@CvPlot@@QBE?AW4RouteTypes@@XZ ; CvPlot::getRouteType
	mov	DWORD PTR _eRouteType$[esp+20], eax

; 3557 : 	if(eRouteType == NO_ROUTE)

	cmp	eax, -1

; 3558 : 	{
; 3559 : 		return FALSE;

	je	$LN8@RouteValid

; 3560 : 	}
; 3561 : 
; 3562 : 	if(pNewPlot->IsRoutePillaged())

	mov	ecx, esi
	call	?IsRoutePillaged@CvPlot@@QBE_NXZ	; CvPlot::IsRoutePillaged
	test	al, al

; 3563 : 	{
; 3564 : 		return FALSE;

	jne	SHORT $LN8@RouteValid

; 3565 : 	}
; 3566 : 
; 3567 : 	if(!pNewPlot->IsFriendlyTerritory(ePlayer))

	push	ebx
	mov	ecx, esi
	call	?IsFriendlyTerritory@CvPlot@@QBE_NW4PlayerTypes@@@Z ; CvPlot::IsFriendlyTerritory
	test	al, al
	jne	SHORT $LN69@RouteValid

; 3568 : 	{
; 3569 : 		PlayerTypes ePlotOwnerPlayer = pNewPlot->getOwner();

	movsx	esi, BYTE PTR [esi+4]
	mov	DWORD PTR _ePlotOwnerPlayer$220317[esp+16], esi

; 3570 : 		if(ePlotOwnerPlayer != NO_PLAYER)

	cmp	esi, -1
	je	SHORT $LN69@RouteValid

; 3571 : 		{
; 3572 : 			PlayerTypes eMajorPlayer = NO_PLAYER;
; 3573 : 			PlayerTypes eMinorPlayer = NO_PLAYER;
; 3574 : 			CvPlayer& kPlotOwner = GET_PLAYER(ePlotOwnerPlayer);

	imul	esi, 63236				; 0000f704H
	add	esi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 3575 : 			if(kPlayer.isMinorCiv() && !kPlotOwner.isMinorCiv())

	mov	ecx, edi
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN10@RouteValid
	mov	ecx, esi
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	jne	SHORT $LN10@RouteValid

; 3576 : 			{
; 3577 : 				eMajorPlayer = ePlotOwnerPlayer;

	mov	eax, DWORD PTR _ePlotOwnerPlayer$220317[esp+16]

; 3578 : 				eMinorPlayer = ePlayer;

	jmp	SHORT $LN7@RouteValid
$LN10@RouteValid:

; 3579 : 			}
; 3580 : 			else if(kPlotOwner.isMinorCiv() && !kPlayer.isMinorCiv())

	mov	ecx, esi
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN8@RouteValid
	mov	ecx, edi
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	jne	SHORT $LN8@RouteValid

; 3581 : 			{
; 3582 : 				eMajorPlayer = ePlayer;

	mov	eax, ebx

; 3583 : 				eMinorPlayer = ePlotOwnerPlayer;

	mov	ebx, DWORD PTR _ePlotOwnerPlayer$220317[esp+16]
$LN7@RouteValid:

; 3584 : 			}
; 3585 : 			else
; 3586 : 			{
; 3587 : 				return FALSE;
; 3588 : 			}
; 3589 : 
; 3590 : 			if(!GET_PLAYER(eMinorPlayer).GetMinorCivAI()->IsActiveQuestForPlayer(eMajorPlayer, MINOR_CIV_QUEST_ROUTE))

	imul	ebx, 63236				; 0000f704H
	add	ebx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	push	eax
	mov	ecx, ebx
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?IsActiveQuestForPlayer@CvMinorCivAI@@QAE_NW4PlayerTypes@@W4MinorCivQuestTypes@@@Z ; CvMinorCivAI::IsActiveQuestForPlayer
	test	al, al
	jne	SHORT $LN69@RouteValid
$LN8@RouteValid:
	pop	edi
	pop	esi
	pop	ebp

; 3591 : 			{
; 3592 : 				return FALSE;

	xor	eax, eax
	pop	ebx

; 3617 : 		{
; 3618 : 			return TRUE;
; 3619 : 		}
; 3620 : 	}
; 3621 : 
; 3622 : 	return FALSE;
; 3623 : }

	pop	ecx
	ret	0
$LN69@RouteValid:

; 3593 : 			}
; 3594 : 		}
; 3595 : 	}
; 3596 : 
; 3597 : 	if(finder->GetInfo() & MOVE_ANY_ROUTE)

	mov	ecx, DWORD PTR _finder$[esp+16]
	test	DWORD PTR [ecx+72], -2147483648		; 80000000H
	je	SHORT $LN5@RouteValid

; 3598 : 	{
; 3599 : 		// if the player can't build
; 3600 : 		if(kPlayer.getBestRoute() == NO_ROUTE)

	push	0
	mov	ecx, edi
	call	?getBestRoute@CvPlayer@@QBE?AW4RouteTypes@@PAVCvPlot@@@Z ; CvPlayer::getBestRoute
	xor	edx, edx
	cmp	eax, -1
	setne	dl
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	eax, edx

; 3617 : 		{
; 3618 : 			return TRUE;
; 3619 : 		}
; 3620 : 	}
; 3621 : 
; 3622 : 	return FALSE;
; 3623 : }

	pop	ecx
	ret	0
$LN5@RouteValid:

; 3601 : 		{
; 3602 : 			return FALSE;
; 3603 : 		}
; 3604 : 
; 3605 : 		if(eRouteType != NO_ROUTE)
; 3606 : 		{
; 3607 : 			return TRUE;
; 3608 : 		}
; 3609 : 	}
; 3610 : 	else
; 3611 : 	{
; 3612 : 		int iRoute = iFlags & 0xFF00;
; 3613 : 		iRoute = iRoute >> 8;
; 3614 : 		iRoute = iRoute - 1;
; 3615 : 		RouteTypes eRequiredRoute = (RouteTypes)(iRoute);
; 3616 : 		if(eRouteType == eRequiredRoute)

	sar	ebp, 8
	and	ebp, 255				; 000000ffH
	pop	edi
	dec	ebp
	xor	eax, eax
	cmp	DWORD PTR _eRouteType$[esp+16], ebp
	pop	esi
	pop	ebp
	sete	al
	pop	ebx

; 3617 : 		{
; 3618 : 			return TRUE;
; 3619 : 		}
; 3620 : 	}
; 3621 : 
; 3622 : 	return FALSE;
; 3623 : }

	pop	ecx
	ret	0
?RouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; RouteValid
_TEXT	ENDS
PUBLIC	?RouteGetNumExtraChildren@@YAHPAVCvAStarNode@@PAVCvAStar@@@Z ; RouteGetNumExtraChildren
EXTRN	?IsEmpty@CvCityConnections@@QAE_NXZ:PROC	; CvCityConnections::IsEmpty
; Function compile flags: /Ogtpy
;	COMDAT ?RouteGetNumExtraChildren@@YAHPAVCvAStarNode@@PAVCvAStar@@@Z
_TEXT	SEGMENT
_pRouteInfo$220359 = 8					; size = 4
_node$ = 8						; size = 4
_iResultNum$ = 12					; size = 4
_finder$ = 12						; size = 4
?RouteGetNumExtraChildren@@YAHPAVCvAStarNode@@PAVCvAStar@@@Z PROC ; RouteGetNumExtraChildren, COMDAT

; 3630 : 	PlayerTypes ePlayer = ((PlayerTypes)(finder->GetInfo() & 0xFF));

	mov	eax, DWORD PTR _finder$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax+72]
	and	edi, 255				; 000000ffH

; 3631 : 	CvPlayerAI& kPlayer = GET_PLAYER(ePlayer);

	imul	edi, 63236				; 0000f704H
	add	edi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 3632 : 	TeamTypes eTeam = kPlayer.getTeam();

	mov	eax, DWORD PTR [edi+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN25@RouteGetNu
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	ebx, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN26@RouteGetNu
$LN25@RouteGetNu:
	or	ebx, -1
$LN26@RouteGetNu:

; 3633 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3634 : 	const CvPlot* pPlot = node->m_pPlot;
; 3635 : #else
; 3636 : 	CvPlot* pPlot = GC.getMap().plotCheckInvalid(node->m_iX, node->m_iY);

	mov	eax, DWORD PTR _node$[esp+8]
	movsx	ecx, WORD PTR [eax+82]
	movsx	eax, WORD PTR [eax+80]
	cmp	eax, -2147483647			; 80000001H
	je	SHORT $LN51@RouteGetNu
	cmp	ecx, -2147483647			; 80000001H
	je	SHORT $LN51@RouteGetNu
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	esi, DWORD PTR [edx+4020]
	imul	esi, ecx
	add	esi, eax
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [edx+4068]

; 3637 : #endif
; 3638 : 
; 3639 : 	if(!pPlot)

	jne	SHORT $LN14@RouteGetNu
$LN51@RouteGetNu:
	pop	edi
	pop	esi

; 3640 : 	{
; 3641 : 		return 0;

	xor	eax, eax
	pop	ebx

; 3702 : }

	ret	0
$LN14@RouteGetNu:

; 3642 : 	}
; 3643 : 
; 3644 : 	// slewis - don't allow the minor civ to use harbors
; 3645 : 	if(kPlayer.isMinorCiv())

	mov	ecx, edi
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al

; 3646 : 	{
; 3647 : 		return 0;

	jne	SHORT $LN51@RouteGetNu

; 3648 : 	}
; 3649 : 
; 3650 : 	CvCityConnections* pCityConnections = kPlayer.GetCityConnections();

	mov	ecx, edi
	call	?GetCityConnections@CvPlayer@@QBEPAVCvCityConnections@@XZ ; CvPlayer::GetCityConnections
	mov	edi, eax

; 3651 : 	if(pCityConnections->IsEmpty())

	mov	ecx, edi
	call	?IsEmpty@CvCityConnections@@QAE_NXZ	; CvCityConnections::IsEmpty
	test	al, al

; 3652 : 	{
; 3653 : 		return 0;

	jne	SHORT $LN51@RouteGetNu

; 3654 : 	}
; 3655 : 
; 3656 : 	int iResultNum = 0;
; 3657 : 
; 3658 : 	CvCity* pCity = pPlot->getPlotCity();

	mov	eax, DWORD PTR [esi+104]
	mov	DWORD PTR _iResultNum$[esp+8], 0
	test	eax, eax
	jl	SHORT $LN51@RouteGetNu
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN51@RouteGetNu
	mov	ecx, DWORD PTR [esi+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	esi, eax

; 3659 : 
; 3660 : 	// if there isn't a city there or the city isn't on our team
; 3661 : 	if(!pCity || pCity->getTeam() != eTeam)

	test	esi, esi
	je	SHORT $LN51@RouteGetNu
	mov	ecx, esi
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	cmp	eax, ebx
	jne	SHORT $LN51@RouteGetNu
	push	ebp

; 3662 : 	{
; 3663 : 		return 0;
; 3664 : 	}
; 3665 : 
; 3666 : 	uint uiFirstCityIndex = pCityConnections->GetIndexFromCity(pCity);

	push	esi
	mov	ecx, edi
	call	?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z ; CvCityConnections::GetIndexFromCity
	mov	ebp, eax

; 3667 : 	if(uiFirstCityIndex >= pCityConnections->m_aiCityPlotIDs.size())

	mov	eax, DWORD PTR [edi+16]
	cmp	ebp, eax
	jb	SHORT $LN9@RouteGetNu
	pop	ebp
	pop	edi
	pop	esi

; 3668 : 	{
; 3669 : 		CvAssertMsg(false, "City index out of bounds");
; 3670 : 		return 0;

	xor	eax, eax
	pop	ebx

; 3702 : }

	ret	0
$LN9@RouteGetNu:

; 3671 : 	}
; 3672 : 
; 3673 : 	for(uint uiSecondCityIndex = 0; uiSecondCityIndex < pCityConnections->m_aiCityPlotIDs.size(); uiSecondCityIndex++)

	xor	esi, esi
	test	eax, eax
	jbe	SHORT $LN6@RouteGetNu
	npad	1
$LL54@RouteGetNu:

; 3674 : 	{
; 3675 : 		if(uiFirstCityIndex == uiSecondCityIndex)

	cmp	ebp, esi
	je	SHORT $LN7@RouteGetNu

; 3676 : 		{
; 3677 : 			continue;
; 3678 : 		}
; 3679 : 
; 3680 : 		CvCityConnections::RouteInfo* pRouteInfo = pCityConnections->GetRouteInfo(uiFirstCityIndex, uiSecondCityIndex);

	push	esi
	push	ebp
	mov	ecx, edi
	call	?GetRouteInfo@CvCityConnections@@QAEPAURouteInfo@1@II@Z ; CvCityConnections::GetRouteInfo
	mov	DWORD PTR _pRouteInfo$220359[esp+12], eax

; 3681 : 		if(!pRouteInfo)

	test	eax, eax
	je	SHORT $LN7@RouteGetNu

; 3682 : 		{
; 3683 : 			continue;
; 3684 : 		}
; 3685 : 
; 3686 : 		// get the two cities
; 3687 : 		CvCity* pFirstCity  = pCityConnections->GetCityFromIndex(uiFirstCityIndex);

	push	ebp
	mov	ecx, edi
	call	?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z ; CvCityConnections::GetCityFromIndex

; 3688 : 		CvCity* pSecondCity = pCityConnections->GetCityFromIndex(uiSecondCityIndex);

	push	esi
	mov	ecx, edi
	mov	ebx, eax
	call	?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z ; CvCityConnections::GetCityFromIndex

; 3689 : 
; 3690 : 		if(!pFirstCity || !pSecondCity)

	test	ebx, ebx
	je	SHORT $LN7@RouteGetNu
	test	eax, eax
	je	SHORT $LN7@RouteGetNu

; 3691 : 		{
; 3692 : 			continue;
; 3693 : 		}
; 3694 : 
; 3695 : 		if(pRouteInfo->m_cRouteState & CvCityConnections::HAS_WATER_ROUTE)

	mov	edx, DWORD PTR _pRouteInfo$220359[esp+12]
	test	BYTE PTR [edx], 2
	je	SHORT $LN7@RouteGetNu

; 3696 : 		{
; 3697 : 			iResultNum++;

	inc	DWORD PTR _iResultNum$[esp+12]
$LN7@RouteGetNu:

; 3671 : 	}
; 3672 : 
; 3673 : 	for(uint uiSecondCityIndex = 0; uiSecondCityIndex < pCityConnections->m_aiCityPlotIDs.size(); uiSecondCityIndex++)

	inc	esi
	cmp	esi, DWORD PTR [edi+16]
	jb	SHORT $LL54@RouteGetNu
$LN6@RouteGetNu:

; 3698 : 		}
; 3699 : 	}
; 3700 : 
; 3701 : 	return iResultNum;

	mov	eax, DWORD PTR _iResultNum$[esp+12]
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx

; 3702 : }

	ret	0
?RouteGetNumExtraChildren@@YAHPAVCvAStarNode@@PAVCvAStar@@@Z ENDP ; RouteGetNumExtraChildren
_TEXT	ENDS
PUBLIC	?WaterRouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; WaterRouteValid
; Function compile flags: /Ogtpy
;	COMDAT ?WaterRouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?WaterRouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; WaterRouteValid, COMDAT

; 3708 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 3709 : 	CvPlot* pNewPlot;
; 3710 : #endif
; 3711 : 
; 3712 : 	if(parent == NULL)

	cmp	DWORD PTR _parent$[esp-4], 0
	jne	SHORT $LN4@WaterRoute

; 3713 : 	{
; 3714 : 		return TRUE;

	mov	eax, 1

; 3746 : 	{
; 3747 : 		return TRUE;
; 3748 : 	}
; 3749 : 
; 3750 : 	return FALSE;
; 3751 : }

	ret	0
$LN4@WaterRoute:

; 3715 : 	}
; 3716 : 
; 3717 : 	PlayerTypes ePlayer = (PlayerTypes)(finder->GetInfo());
; 3718 : 	TeamTypes eTeam = GET_PLAYER(ePlayer).getTeam();

	mov	eax, DWORD PTR _finder$[esp-4]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	imul	ecx, 63236				; 0000f704H
	mov	eax, DWORD PTR [ecx+edx+44]
	push	edi
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN15@WaterRoute
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN16@WaterRoute
$LN15@WaterRoute:
	or	edi, -1
$LN16@WaterRoute:

; 3719 : 
; 3720 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3721 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3722 : 	const CvPlot* pNewPlot = node->m_pPlot;
; 3723 : #else
; 3724 : 	pNewPlot = node->m_pPlot;
; 3725 : #endif
; 3726 : 	if (!pNewPlot)
; 3727 : 		return FALSE;
; 3728 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 3729 : 	CvPlot* pNewPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);
; 3730 : #else
; 3731 : 	pNewPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);

	mov	eax, DWORD PTR _node$[esp]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	ebx
	push	esi
	movsx	esi, WORD PTR [eax+82]
	imul	esi, DWORD PTR [ecx+4020]
	movsx	eax, WORD PTR [eax+80]
	add	esi, eax
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ecx+4068]

; 3732 : #endif
; 3733 : 
; 3734 : 	if(!(pNewPlot->isRevealed(eTeam)))

	mov	eax, edi
	shr	eax, 5
	mov	ecx, eax
	shl	ecx, 5
	mov	ebx, ecx
	mov	ecx, edi
	sub	ecx, ebx
	mov	ebx, 1
	shl	ebx, cl
	test	ebx, DWORD PTR [esi+eax*4+8]
	jne	SHORT $LN3@WaterRoute
	pop	esi
	pop	ebx

; 3735 : 	{
; 3736 : 		return FALSE;

	xor	eax, eax
	pop	edi

; 3746 : 	{
; 3747 : 		return TRUE;
; 3748 : 	}
; 3749 : 
; 3750 : 	return FALSE;
; 3751 : }

	ret	0
$LN3@WaterRoute:

; 3737 : 	}
; 3738 : 
; 3739 : 	CvCity* pCity = pNewPlot->getPlotCity();

	mov	eax, DWORD PTR [esi+104]
	test	eax, eax
	jl	SHORT $LN2@WaterRoute
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN2@WaterRoute
	imul	eax, 63236				; 0000f704H
	add	eax, edx
	mov	edx, DWORD PTR [esi+108]
	push	edx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 3740 : 	if(pCity && pCity->getTeam() == eTeam)

	test	eax, eax
	je	SHORT $LN2@WaterRoute
	mov	ecx, eax
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	cmp	eax, edi
	jne	SHORT $LN2@WaterRoute
	pop	esi
	pop	ebx

; 3741 : 	{
; 3742 : 		return TRUE;

	mov	eax, 1
	pop	edi

; 3746 : 	{
; 3747 : 		return TRUE;
; 3748 : 	}
; 3749 : 
; 3750 : 	return FALSE;
; 3751 : }

	ret	0
$LN2@WaterRoute:

; 3743 : 	}
; 3744 : 
; 3745 : 	if(pNewPlot->isWater())

	xor	eax, eax
	cmp	BYTE PTR [esi+5], 3
	pop	esi
	pop	ebx
	sete	al
	pop	edi

; 3746 : 	{
; 3747 : 		return TRUE;
; 3748 : 	}
; 3749 : 
; 3750 : 	return FALSE;
; 3751 : }

	ret	0
?WaterRouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; WaterRouteValid
_TEXT	ENDS
PUBLIC	__real@3f000000
PUBLIC	?BuildRouteCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; BuildRouteCost
EXTRN	?GetBuilderAIScratchPadPlayer@CvPlot@@QBE?AW4PlayerTypes@@XZ:PROC ; CvPlot::GetBuilderAIScratchPadPlayer
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
EXTRN	?GetBuilderAIScratchPadTurn@CvPlot@@QBEFXZ:PROC	; CvPlot::GetBuilderAIScratchPadTurn
EXTRN	?getMovementCost@CvFeatureInfo@@QBEHXZ:PROC	; CvFeatureInfo::getMovementCost
EXTRN	?getMovementCost@CvTerrainInfo@@QBEHXZ:PROC	; CvTerrainInfo::getMovementCost
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse_excpt:PROC
;	COMDAT __real@3f000000
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
CONST	ENDS
;	COMDAT ?BuildRouteCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_iMaxValue$ = 12					; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
tv152 = 24						; size = 4
_finder$ = 24						; size = 4
?BuildRouteCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; BuildRouteCost, COMDAT

; 3757 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3758 : 	const CvPlot* pPlot = node->m_pPlot;
; 3759 : #else
; 3760 : 	CvPlot* pPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);

	mov	eax, DWORD PTR _node$[esp-4]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	ebx
	push	esi
	movsx	esi, WORD PTR [eax+82]
	imul	esi, DWORD PTR [ecx+4020]
	movsx	eax, WORD PTR [eax+80]
	add	esi, eax
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ecx+4068]

; 3761 : #endif
; 3762 : 	int iFlags = finder->GetInfo();

	mov	ecx, DWORD PTR _finder$[esp+4]
	push	edi
	mov	edi, DWORD PTR [ecx+72]

; 3763 : 	PlayerTypes ePlayer = (PlayerTypes)(iFlags & 0xFF);

	mov	ebx, edi

; 3764 : 	TeamTypes eTeam = GET_PLAYER(ePlayer).getTeam();
; 3765 : 
; 3766 : 	int iRoute = iFlags & 0xFF00;
; 3767 : 	iRoute = iRoute >> 8;
; 3768 : 	iRoute = iRoute - 1;
; 3769 : 	RouteTypes eRoute = (RouteTypes)(iRoute);
; 3770 : 
; 3771 : 	if(pPlot->getRouteType() != NO_ROUTE)

	mov	ecx, esi
	and	ebx, 255				; 000000ffH
	call	?getRouteType@CvPlot@@QBE?AW4RouteTypes@@XZ ; CvPlot::getRouteType
	cmp	eax, -1
	je	SHORT $LN4@BuildRoute

; 3772 : 	{
; 3773 : 		int iReturnValue = PATH_BUILD_ROUTE_EXISTING_ROUTE_WEIGHT;
; 3774 : 		if(pPlot->getRouteType() == eRoute)

	mov	ecx, esi
	mov	ebx, 10					; 0000000aH
	call	?getRouteType@CvPlot@@QBE?AW4RouteTypes@@XZ ; CvPlot::getRouteType
	sar	edi, 8
	and	edi, 255				; 000000ffH
	dec	edi
	cmp	eax, edi
	jne	SHORT $LN3@BuildRoute

; 3775 : 		{
; 3776 : 			iReturnValue = 1;

	mov	ebx, 1
$LN3@BuildRoute:
	pop	edi
	pop	esi

; 3777 : 		}
; 3778 : 		return iReturnValue;

	mov	eax, ebx
	pop	ebx

; 3814 : }

	ret	0
$LN4@BuildRoute:

; 3779 : 	}
; 3780 : 
; 3781 : 	int iMaxValue = 1500;
; 3782 : 
; 3783 : 	// if the plot is on a removable feature, it tends to be a good idea to build a road here
; 3784 : 	int iMovementCost = ((pPlot->getFeatureType() == NO_FEATURE) ? GC.getTerrainInfo(pPlot->getTerrainType())->getMovementCost() : GC.getFeatureInfo(pPlot->getFeatureType())->getMovementCost());

	mov	al, BYTE PTR [esi+432]
	mov	edi, 1500				; 000005dcH
	mov	DWORD PTR _iMaxValue$[esp+8], edi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	cmp	al, -1
	jne	SHORT $LN7@BuildRoute
	movsx	eax, BYTE PTR [esi+6]
	push	eax
	call	?getTerrainInfo@CvGlobals@@QAEPAVCvTerrainInfo@@W4TerrainTypes@@@Z ; CvGlobals::getTerrainInfo
	mov	ecx, eax
	call	?getMovementCost@CvTerrainInfo@@QBEHXZ	; CvTerrainInfo::getMovementCost
	jmp	SHORT $LN8@BuildRoute
$LN7@BuildRoute:
	movsx	edx, al
	push	edx
	call	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
	mov	ecx, eax
	call	?getMovementCost@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getMovementCost
$LN8@BuildRoute:

; 3785 : 
; 3786 : #ifdef AUI_ASTAR_FIX_BUILD_ROUTE_COST_CONSIDER_HILLS_MOVEMENT
; 3787 : 	// Hill cost, except for when a City is present here, then it just counts as flat land
; 3788 : 	if ((PlotTypes)pPlot->getPlotType() == PLOT_HILLS && !pPlot->isCity())
; 3789 : 	{
; 3790 : 		iMovementCost += GC.getHILLS_EXTRA_MOVEMENT();
; 3791 : 	}
; 3792 : #endif
; 3793 : 
; 3794 : 	// calculate the max value based on how much of a movement increase we get
; 3795 : 	if(iMovementCost + 1 != 0)

	lea	ecx, DWORD PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN2@BuildRoute

; 3796 : 	{
; 3797 : 		iMaxValue = iMaxValue / 2 + iMaxValue / (iMovementCost + 1);

	mov	eax, edi
	cdq
	idiv	ecx
	mov	edi, eax
	add	edi, 750				; 000002eeH
	mov	DWORD PTR _iMaxValue$[esp+8], edi
$LN2@BuildRoute:
	push	ebp

; 3798 : 	}
; 3799 : 
; 3800 : 	// if the tile already been tagged for building a road, then provide a discount
; 3801 : 	if(pPlot->GetBuilderAIScratchPadTurn() == GC.getGame().getGameTurn() && pPlot->GetBuilderAIScratchPadPlayer() == ePlayer)

	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	ecx, esi
	call	?GetBuilderAIScratchPadTurn@CvPlot@@QBEFXZ ; CvPlot::GetBuilderAIScratchPadTurn
	cwde
	mov	ecx, ebp
	mov	DWORD PTR tv152[esp+12], eax
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	pop	ebp
	cmp	DWORD PTR tv152[esp+8], eax
	jne	SHORT $LN1@BuildRoute
	mov	ecx, esi
	call	?GetBuilderAIScratchPadPlayer@CvPlot@@QBE?AW4PlayerTypes@@XZ ; CvPlot::GetBuilderAIScratchPadPlayer
	cmp	eax, ebx
	jne	SHORT $LN1@BuildRoute

; 3802 : 	{
; 3803 : 		iMaxValue = (int)(iMaxValue * PATH_BUILD_ROUTE_ALREADY_FLAGGED_DISCOUNT);

	fild	DWORD PTR _iMaxValue$[esp+8]
	fmul	DWORD PTR __real@3f000000
	call	__ftol2_sse_excpt
	mov	edi, eax
$LN1@BuildRoute:

; 3804 : 	}
; 3805 : 
; 3806 : #ifdef AUI_WORKER_INCA_HILLS
; 3807 : 	if (GET_PLAYER(ePlayer).GetPlayerTraits()->IsNoHillsImprovementMaintenance() && pPlot->isHills())
; 3808 : 	{
; 3809 : 		iMaxValue /= 2;
; 3810 : 	}
; 3811 : #endif
; 3812 : 
; 3813 : 	return iMaxValue;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 3814 : }

	ret	0
?BuildRouteCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; BuildRouteCost
_TEXT	ENDS
PUBLIC	?BuildRouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; BuildRouteValid
; Function compile flags: /Ogtpy
;	COMDAT ?BuildRouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?BuildRouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; BuildRouteValid, COMDAT

; 3820 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 3821 : 	CvPlot* pNewPlot;
; 3822 : #endif
; 3823 : 
; 3824 : 	if(parent == NULL)

	cmp	DWORD PTR _parent$[esp-4], 0
	jne	SHORT $LN11@BuildRoute@2

; 3825 : 	{
; 3826 : 		return TRUE;

	mov	eax, 1

; 3895 : }

	ret	0
$LN11@BuildRoute@2:

; 3827 : 	}
; 3828 : 
; 3829 : 	int iFlags = finder->GetInfo();
; 3830 : 	PlayerTypes ePlayer = (PlayerTypes)(iFlags & 0xFF);

	mov	eax, DWORD PTR _finder$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax+72]
	and	edi, 255				; 000000ffH

; 3831 : 
; 3832 : 	CvPlayer& thisPlayer = GET_PLAYER(ePlayer);

	mov	esi, edi
	imul	esi, 63236				; 0000f704H
	add	esi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 3833 : 	bool bThisPlayerIsMinor = thisPlayer.isMinorCiv();

	mov	ecx, esi
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv

; 3834 : 
; 3835 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3836 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 3837 : 	const CvPlot* pNewPlot = node->m_pPlot;
; 3838 : #else
; 3839 : 	pNewPlot = node->m_pPlot;
; 3840 : #endif
; 3841 : 	if (!pNewPlot)
; 3842 : 		return FALSE;
; 3843 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 3844 : 	CvPlot* pNewPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);
; 3845 : #else
; 3846 : 	pNewPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);

	mov	ecx, DWORD PTR _node$[esp+8]
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	bl, al
	movsx	eax, WORD PTR [ecx+82]
	imul	eax, DWORD PTR [edx+4020]
	movsx	ecx, WORD PTR [ecx+80]
	add	eax, ecx
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [edx+4068]

; 3847 : #endif
; 3848 : 	if(!bThisPlayerIsMinor && !(pNewPlot->isRevealed(thisPlayer.getTeam())))

	test	bl, bl
	jne	SHORT $LN10@BuildRoute@2
	mov	esi, DWORD PTR [esi+44]
	cmp	esi, 63					; 0000003fH
	ja	SHORT $LN30@BuildRoute@2
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx+esi*4]
	jmp	SHORT $LN31@BuildRoute@2
$LN30@BuildRoute@2:
	or	ecx, -1
$LN31@BuildRoute@2:
	mov	edx, ecx
	shr	edx, 5
	mov	esi, edx
	shl	esi, 5
	sub	ecx, esi
	mov	esi, 1
	shl	esi, cl
	test	esi, DWORD PTR [eax+edx*4+8]

; 3849 : 	{
; 3850 : 		return FALSE;

	je	SHORT $LN7@BuildRoute@2
$LN10@BuildRoute@2:

; 3851 : 	}
; 3852 : 
; 3853 : 	if(pNewPlot->isWater())

	mov	cl, BYTE PTR [eax+5]
	cmp	cl, 3

; 3854 : 	{
; 3855 : 		return FALSE;

	je	SHORT $LN7@BuildRoute@2

; 3856 : 	}
; 3857 : 
; 3858 : #ifdef AUI_ASTAR_FIX_STEP_VALID_CONSIDERS_MOUNTAINS
; 3859 : 	if (pNewPlot->isImpassable())
; 3860 : #else
; 3861 : 	if(pNewPlot->isImpassable() || pNewPlot->isMountain())

	test	BYTE PTR [eax+462], 128			; 00000080H
	jne	SHORT $LN7@BuildRoute@2
	test	cl, cl
	je	SHORT $LN7@BuildRoute@2

; 3865 : 	}
; 3866 : 
; 3867 : 	PlayerTypes ePlotOwnerPlayer = pNewPlot->getOwner();

	movsx	esi, BYTE PTR [eax+4]

; 3868 : 	if(ePlotOwnerPlayer != NO_PLAYER && !pNewPlot->IsFriendlyTerritory(ePlayer))

	cmp	esi, -1
	je	SHORT $LN1@BuildRoute@2
	push	edi
	mov	ecx, eax
	call	?IsFriendlyTerritory@CvPlot@@QBE_NW4PlayerTypes@@@Z ; CvPlot::IsFriendlyTerritory
	test	al, al
	jne	SHORT $LN1@BuildRoute@2

; 3869 : 	{
; 3870 : 		PlayerTypes eMajorPlayer = NO_PLAYER;
; 3871 : 		PlayerTypes eMinorPlayer = NO_PLAYER;
; 3872 : 		bool bPlotOwnerIsMinor = GET_PLAYER(ePlotOwnerPlayer).isMinorCiv();

	mov	ecx, esi
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv

; 3873 : 		if(bThisPlayerIsMinor && !bPlotOwnerIsMinor)

	test	bl, bl
	je	SHORT $LN5@BuildRoute@2
	test	al, al
	jne	SHORT $LN7@BuildRoute@2

; 3874 : 		{
; 3875 : 			eMajorPlayer = ePlotOwnerPlayer;

	mov	eax, esi

; 3876 : 			eMinorPlayer = ePlayer;

	jmp	SHORT $LN2@BuildRoute@2
$LN5@BuildRoute@2:

; 3877 : 		}
; 3878 : 		else if(bPlotOwnerIsMinor && !bThisPlayerIsMinor)

	test	al, al
	je	SHORT $LN7@BuildRoute@2

; 3879 : 		{
; 3880 : 			eMajorPlayer = ePlayer;

	mov	eax, edi

; 3881 : 			eMinorPlayer = ePlotOwnerPlayer;

	mov	edi, esi
$LN2@BuildRoute@2:

; 3882 : 		}
; 3883 : 		else
; 3884 : 		{
; 3885 : 			return FALSE;
; 3886 : 		}
; 3887 : 
; 3888 : 		if(!GET_PLAYER(eMinorPlayer).GetMinorCivAI()->IsActiveQuestForPlayer(eMajorPlayer, MINOR_CIV_QUEST_ROUTE))

	imul	edi, 63236				; 0000f704H
	add	edi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	push	eax
	mov	ecx, edi
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?IsActiveQuestForPlayer@CvMinorCivAI@@QAE_NW4PlayerTypes@@W4MinorCivQuestTypes@@@Z ; CvMinorCivAI::IsActiveQuestForPlayer
	test	al, al

; 3889 : 		{
; 3890 : 			return FALSE;

	je	SHORT $LN7@BuildRoute@2
$LN1@BuildRoute@2:
	pop	edi
	pop	esi

; 3891 : 		}
; 3892 : 	}
; 3893 : 
; 3894 : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 3895 : }

	ret	0
$LN7@BuildRoute@2:
	pop	edi
	pop	esi

; 3862 : #endif
; 3863 : 	{
; 3864 : 		return FALSE;

	xor	eax, eax
	pop	ebx

; 3895 : }

	ret	0
?BuildRouteValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; BuildRouteValid
_TEXT	ENDS
PUBLIC	?AreaValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; AreaValid
; Function compile flags: /Ogtpy
;	COMDAT ?AreaValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
tv250 = 8						; size = 4
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?AreaValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; AreaValid, COMDAT

; 3902 : 	if(parent == NULL)

	mov	edx, DWORD PTR _parent$[esp-4]
	test	edx, edx
	jne	SHORT $LN2@AreaValid

; 3903 : 	{
; 3904 : 		return TRUE;

	lea	eax, DWORD PTR [edx+1]

; 3928 : #endif
; 3929 : }

	ret	0
$LN2@AreaValid:

; 3905 : 	}
; 3906 : 
; 3907 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3908 : 	const CvPlot* pOldPlot = parent->m_pPlot;
; 3909 : 	const CvPlot* pNewPlot = node->m_pPlot;
; 3910 : 	if (!pOldPlot || !pNewPlot)
; 3911 : 	{
; 3912 : 		return FALSE;
; 3913 : 	}
; 3914 : 	if (pOldPlot->isImpassable() != pNewPlot->isImpassable())
; 3915 : 	{
; 3916 : 		return FALSE;
; 3917 : 	}
; 3918 : 
; 3919 : 	return (pOldPlot->isWater() == pNewPlot->isWater() ? TRUE : FALSE);
; 3920 : #else
; 3921 : 	CvMap& kMap = GC.getMap();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 3922 : 	if(kMap.plotUnchecked(parent->m_iX, parent->m_iY)->isImpassable() != kMap.plotUnchecked(node->m_iX, node->m_iY)->isImpassable())

	mov	eax, DWORD PTR [ecx+4020]
	push	ebx
	push	ebp
	movsx	ebp, WORD PTR [edx+80]
	push	esi
	mov	esi, DWORD PTR [ecx+4068]
	push	edi
	movsx	edi, WORD PTR [edx+82]
	mov	edx, DWORD PTR _node$[esp+12]
	movsx	ebx, WORD PTR [edx+82]
	movsx	edx, WORD PTR [edx+80]
	mov	DWORD PTR tv250[esp+12], ebx
	imul	ebx, eax
	imul	eax, edi
	add	ebx, edx
	imul	ebx, 484				; 000001e4H
	mov	bl, BYTE PTR [ebx+esi+462]
	add	eax, ebp
	imul	eax, 484				; 000001e4H
	xor	bl, BYTE PTR [eax+esi+462]
	test	bl, bl
	jns	SHORT $LN1@AreaValid
	pop	edi
	pop	esi
	pop	ebp

; 3923 : 	{
; 3924 : 		return FALSE;

	xor	eax, eax
	pop	ebx

; 3928 : #endif
; 3929 : }

	ret	0
$LN1@AreaValid:

; 3925 : 	}
; 3926 : 
; 3927 : 	return ((kMap.plotUnchecked(parent->m_iX, parent->m_iY)->isWater() == kMap.plotUnchecked(node->m_iX, node->m_iY)->isWater()) ? TRUE : FALSE);

	mov	eax, DWORD PTR [ecx+4020]
	mov	ecx, esi
	mov	esi, eax
	imul	esi, DWORD PTR tv250[esp+12]
	add	esi, edx
	imul	esi, 484				; 000001e4H
	mov	dl, 3
	cmp	BYTE PTR [esi+ecx+5], dl
	sete	bl
	imul	eax, edi
	add	eax, ebp
	imul	eax, 484				; 000001e4H
	cmp	BYTE PTR [eax+ecx+5], dl
	pop	edi
	sete	al
	xor	ecx, ecx
	cmp	al, bl
	sete	cl
	pop	esi
	pop	ebp
	pop	ebx
	mov	eax, ecx

; 3928 : #endif
; 3929 : }

	ret	0
?AreaValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; AreaValid
_TEXT	ENDS
PUBLIC	?JoinArea@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; JoinArea
EXTRN	?setArea@CvPlot@@QAEXH@Z:PROC			; CvPlot::setArea
; Function compile flags: /Ogtpy
;	COMDAT ?JoinArea@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?JoinArea@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; JoinArea, COMDAT

; 3936 : 	if(data == ASNL_ADDCLOSED)

	cmp	DWORD PTR _data$[esp-4], 3
	jne	SHORT $LN14@JoinArea

; 3937 : 	{
; 3938 : #if defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES)
; 3939 : 		node->m_pPlot->setArea(finder->GetInfo());
; 3940 : #else
; 3941 : 		GC.getMap().plotUnchecked(node->m_iX, node->m_iY)->setArea(finder->GetInfo());

	mov	eax, DWORD PTR _finder$[esp-4]
	mov	ecx, DWORD PTR [eax+72]
	mov	eax, DWORD PTR _node$[esp-4]
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	ecx
	movsx	ecx, WORD PTR [eax+82]
	imul	ecx, DWORD PTR [edx+4020]
	movsx	eax, WORD PTR [eax+80]
	add	ecx, eax
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [edx+4068]
	call	?setArea@CvPlot@@QAEXH@Z		; CvPlot::setArea
$LN14@JoinArea:

; 3942 : #endif
; 3943 : 	}
; 3944 : 
; 3945 : 	return 1;

	mov	eax, 1

; 3946 : }

	ret	0
?JoinArea@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; JoinArea
_TEXT	ENDS
PUBLIC	?LandmassValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; LandmassValid
; Function compile flags: /Ogtpy
;	COMDAT ?LandmassValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?LandmassValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; LandmassValid, COMDAT

; 3953 : 	if(parent == NULL)

	mov	edx, DWORD PTR _parent$[esp-4]
	test	edx, edx
	jne	SHORT $LN1@LandmassVa

; 3954 : 	{
; 3955 : 		return TRUE;

	lea	eax, DWORD PTR [edx+1]

; 3963 : #endif
; 3964 : }

	ret	0
$LN1@LandmassVa:

; 3956 : 	}
; 3957 : 
; 3958 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 3959 : 	return (parent->m_pPlot && node->m_pPlot && parent->m_pPlot->isWater() == node->m_pPlot->isWater() ? TRUE : FALSE);
; 3960 : #else
; 3961 : 	CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 3962 : 	return ((kMap.plotUnchecked(parent->m_iX, parent->m_iY)->isWater() == kMap.plotUnchecked(node->m_iX, node->m_iY)->isWater()) ? TRUE : FALSE);

	mov	ecx, DWORD PTR [eax+4020]
	mov	eax, DWORD PTR [eax+4068]
	push	ebx
	push	esi
	movsx	esi, WORD PTR [edx+82]
	movsx	edx, WORD PTR [edx+80]
	imul	esi, ecx
	add	esi, edx
	imul	esi, 484				; 000001e4H
	push	edi
	mov	dl, 3
	cmp	BYTE PTR [esi+eax+5], dl
	mov	esi, DWORD PTR _node$[esp+8]
	movsx	edi, WORD PTR [esi+82]
	sete	bl
	imul	edi, ecx
	movsx	ecx, WORD PTR [esi+80]
	add	edi, ecx
	imul	edi, 484				; 000001e4H
	cmp	BYTE PTR [edi+eax+5], dl
	pop	edi
	sete	dl
	xor	eax, eax
	cmp	bl, dl
	pop	esi
	sete	al
	pop	ebx

; 3963 : #endif
; 3964 : }

	ret	0
?LandmassValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; LandmassValid
_TEXT	ENDS
PUBLIC	?JoinLandmass@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; JoinLandmass
EXTRN	?setLandmass@CvPlot@@QAEXH@Z:PROC		; CvPlot::setLandmass
; Function compile flags: /Ogtpy
;	COMDAT ?JoinLandmass@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?JoinLandmass@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; JoinLandmass, COMDAT

; 3971 : 	if(data == ASNL_ADDCLOSED)

	cmp	DWORD PTR _data$[esp-4], 3
	jne	SHORT $LN14@JoinLandma

; 3972 : 	{
; 3973 : #if defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES)
; 3974 : 		node->m_pPlot->setLandmass(finder->GetInfo());
; 3975 : #else
; 3976 : 		GC.getMap().plotUnchecked(node->m_iX, node->m_iY)->setLandmass(finder->GetInfo());

	mov	eax, DWORD PTR _finder$[esp-4]
	mov	ecx, DWORD PTR [eax+72]
	mov	eax, DWORD PTR _node$[esp-4]
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	ecx
	movsx	ecx, WORD PTR [eax+82]
	imul	ecx, DWORD PTR [edx+4020]
	movsx	eax, WORD PTR [eax+80]
	add	ecx, eax
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [edx+4068]
	call	?setLandmass@CvPlot@@QAEXH@Z		; CvPlot::setLandmass
$LN14@JoinLandma:

; 3977 : #endif
; 3978 : 	}
; 3979 : 
; 3980 : 	return 1;

	mov	eax, 1

; 3981 : }

	ret	0
?JoinLandmass@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; JoinLandmass
_TEXT	ENDS
PUBLIC	?GetPathEndTurnPlot@CvTwoLayerPathFinder@@QBEPAVCvPlot@@XZ ; CvTwoLayerPathFinder::GetPathEndTurnPlot
; Function compile flags: /Ogtpy
;	COMDAT ?GetPathEndTurnPlot@CvTwoLayerPathFinder@@QBEPAVCvPlot@@XZ
_TEXT	SEGMENT
?GetPathEndTurnPlot@CvTwoLayerPathFinder@@QBEPAVCvPlot@@XZ PROC ; CvTwoLayerPathFinder::GetPathEndTurnPlot, COMDAT
; _this$ = ecx

; 4064 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4065 : 	CvAStarNode* pNode = m_pBest;
; 4066 : #else
; 4067 : 	CvAStarNode* pNode;
; 4068 : 
; 4069 : 	pNode = m_pBest;

	mov	ecx, DWORD PTR [ecx+96]

; 4070 : #endif
; 4071 : 
; 4072 : 	if(NULL != pNode)

	test	ecx, ecx
	je	SHORT $LN2@GetPathEnd

; 4073 : 	{
; 4074 : 		if((pNode->m_pParent == NULL) || (pNode->m_iData2 == 1))

	mov	eax, DWORD PTR [ecx+24]
	test	eax, eax
	je	SHORT $LN4@GetPathEnd
	mov	edx, 1
	cmp	DWORD PTR [ecx+16], edx
	je	SHORT $LN4@GetPathEnd
$LL3@GetPathEnd:

; 4075 : 		{
; 4076 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4077 : 			return pNode->m_pPlot;
; 4078 : #else
; 4079 : 			return GC.getMap().plotUnchecked(pNode->m_iX, pNode->m_iY);
; 4080 : #endif
; 4081 : 		}
; 4082 : 
; 4083 : 		while(pNode->m_pParent != NULL)
; 4084 : 		{
; 4085 : 			if(pNode->m_pParent->m_iData2 == 1)

	cmp	DWORD PTR [eax+16], edx
	je	SHORT $LN26@GetPathEnd

; 4091 : #endif
; 4092 : 			}
; 4093 : 
; 4094 : 			pNode = pNode->m_pParent;

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+24]
	test	eax, eax
	jne	SHORT $LL3@GetPathEnd
$LN2@GetPathEnd:

; 4095 : 		}
; 4096 : 	}
; 4097 : 
; 4098 : 	FAssert(false);
; 4099 : 
; 4100 : 	return NULL;

	xor	eax, eax

; 4101 : }

	ret	0
$LN26@GetPathEnd:

; 4086 : 			{
; 4087 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4088 : 				return pNode->m_pParent->m_pPlot;
; 4089 : #else
; 4090 : 				return GC.getMap().plotUnchecked(pNode->m_pParent->m_iX, pNode->m_pParent->m_iY);

	mov	ecx, DWORD PTR [ecx+24]
$LN4@GetPathEnd:
	movsx	eax, WORD PTR [ecx+82]
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	imul	eax, DWORD PTR [edx+4020]
	movsx	ecx, WORD PTR [ecx+80]
	add	eax, ecx
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [edx+4068]

; 4101 : }

	ret	0
?GetPathEndTurnPlot@CvTwoLayerPathFinder@@QBEPAVCvPlot@@XZ ENDP ; CvTwoLayerPathFinder::GetPathEndTurnPlot
_TEXT	ENDS
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z$2
__ehfuncinfo$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
xdata$x	ENDS
;	COMDAT ?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z
_TEXT	SEGMENT
_strBaseString$220556 = -96				; size = 28
_strOutBuf$220555 = -68					; size = 28
$T226037 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_pkUnit$ = 8						; size = 4
_strMsg$ = 12						; size = 4
?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z PROC	; LogPathGeneration, COMDAT

; 4106 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 84					; 00000054H
	push	ebp
	mov	ebp, DWORD PTR _pkUnit$[esp+96]

; 4107 : 	if(GC.getLogging() && GC.getAILogging() && pkUnit)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN1@LogPathGen
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN1@LogPathGen
	test	ebp, ebp
	je	$LN1@LogPathGen
	push	esi
	push	edi

; 4108 : 	{
; 4109 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$220555[esp+108]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4110 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$220556[esp+108]
	mov	DWORD PTR __$EHRec$[esp+116], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4111 : 
; 4112 : 		CvPlayer& kPlayer = GET_PLAYER(pkUnit->getOwner());

	mov	eax, DWORD PTR [ebp+40]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	BYTE PTR __$EHRec$[esp+116], 1

; 4113 : 		const char* pszPlayerName = kPlayer.getCivilizationShortDescription();

	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription

; 4114 : 		FILogFile* pLog = LOGFILEMGR.GetLog((gDLL->IsGameCoreThread())?"AStar_GC.log":"AStar_APP.log", FILogFile::kDontTimeStamp, "Game Turn, Player, Unit, From X, From Y, To X, To Y, Info, Checksum");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	edi, eax
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+928]
	call	edx
	mov	esi, OFFSET $SG220561
	test	al, al
	jne	SHORT $LN5@LogPathGen
	mov	esi, OFFSET $SG220562
$LN5@LogPathGen:
	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	edx, DWORD PTR [eax]
	push	OFFSET $SG220560
	push	1
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+12]
	push	esi
	call	eax
	mov	esi, eax

; 4115 : 
; 4116 : 		// Get the leading info for this line
; 4117 : 		strBaseString.Format("%03d, %s, UnitID: %d, ", GC.getGame().getElapsedGameTurns(), (pszPlayerName)?pszPlayerName:"?", pkUnit->GetID());

	test	edi, edi
	jne	SHORT $LN7@LogPathGen
	mov	edi, OFFSET $SG220563
$LN7@LogPathGen:
	mov	eax, DWORD PTR [ebp+100]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	eax
	push	edi
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$220556[esp+120]
	push	OFFSET $SG220564
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 4118 : 		strOutBuf = strBaseString + strMsg;

	mov	edx, DWORD PTR _strMsg$[esp+124]
	push	edx
	lea	eax, DWORD PTR _strBaseString$220556[esp+132]
	push	eax
	lea	ecx, DWORD PTR $T226037[esp+136]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 32					; 00000020H
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+116], 2
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$220555[esp+112]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T226037[esp+108]
	mov	BYTE PTR __$EHRec$[esp+116], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4119 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$220555[esp+108]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [esi]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	esi
	call	eax
	add	esp, 8

; 4120 : 	}

	lea	ecx, DWORD PTR _strBaseString$220556[esp+108]
	mov	BYTE PTR __$EHRec$[esp+116], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$220555[esp+108]
	mov	DWORD PTR __$EHRec$[esp+116], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	edi
	pop	esi
$LN1@LogPathGen:

; 4121 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+100]
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	add	esp, 96					; 00000060H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$220555[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$220556[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z$2:
	lea	ecx, DWORD PTR $T226037[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z ENDP	; LogPathGeneration
PUBLIC	?GetPathFirstPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@XZ ; CvIgnoreUnitsPathFinder::GetPathFirstPlot
EXTRN	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ:PROC ; CvGlobals::getIgnoreUnitsPathFinder
; Function compile flags: /Ogtpy
;	COMDAT ?GetPathFirstPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@XZ
_TEXT	SEGMENT
?GetPathFirstPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@XZ PROC ; CvIgnoreUnitsPathFinder::GetPathFirstPlot, COMDAT
; _this$ = ecx

; 4459 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4460 : 	CvAStarNode* pNode = GetLastNode();
; 4461 : #else
; 4462 : 	CvAStarNode* pNode;
; 4463 : 
; 4464 : 	pNode = GC.getIgnoreUnitsPathFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder
	mov	ecx, DWORD PTR [eax+96]

; 4465 : #endif
; 4466 : 
; 4467 : #ifndef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4468 : 	CvMap& kMap = GC.getMap();
; 4469 : #endif
; 4470 : 	if(pNode->m_pParent == NULL)

	cmp	DWORD PTR [ecx+24], 0
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	jne	SHORT $LL3@GetPathFir
$LN24@GetPathFir:

; 4471 : 	{
; 4472 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4473 : 		return pNode->m_pPlot;
; 4474 : #else
; 4475 : 		return kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);

	movsx	eax, WORD PTR [ecx+82]
	imul	eax, DWORD PTR [edx+4020]
	movsx	ecx, WORD PTR [ecx+80]
	add	eax, ecx
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [edx+4068]

; 4491 : 	}
; 4492 : 
; 4493 : 	FAssert(false);
; 4494 : 
; 4495 : 	return NULL;
; 4496 : }

	ret	0
$LL3@GetPathFir:

; 4476 : #endif
; 4477 : 	}
; 4478 : 
; 4479 : 	while(pNode != NULL)
; 4480 : 	{
; 4481 : 		if(pNode->m_pParent->m_pParent == NULL)

	mov	eax, DWORD PTR [ecx+24]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN24@GetPathFir

; 4482 : 		{
; 4483 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4484 : 			return pNode->m_pPlot;
; 4485 : #else
; 4486 : 			return kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);
; 4487 : #endif
; 4488 : 		}
; 4489 : 
; 4490 : 		pNode = pNode->m_pParent;

	mov	ecx, eax
	test	ecx, ecx
	jne	SHORT $LL3@GetPathFir

; 4491 : 	}
; 4492 : 
; 4493 : 	FAssert(false);
; 4494 : 
; 4495 : 	return NULL;
; 4496 : }

	ret	0
?GetPathFirstPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@XZ ENDP ; CvIgnoreUnitsPathFinder::GetPathFirstPlot
_TEXT	ENDS
PUBLIC	?GetPathEndTurnPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@XZ ; CvIgnoreUnitsPathFinder::GetPathEndTurnPlot
; Function compile flags: /Ogtpy
;	COMDAT ?GetPathEndTurnPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@XZ
_TEXT	SEGMENT
?GetPathEndTurnPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@XZ PROC ; CvIgnoreUnitsPathFinder::GetPathEndTurnPlot, COMDAT
; _this$ = ecx

; 4502 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4503 : 	CvAStarNode* pNode = GetLastNode();
; 4504 : #else
; 4505 : 	CvAStarNode* pNode;
; 4506 : 
; 4507 : 	pNode = GC.getIgnoreUnitsPathFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder
	mov	ecx, DWORD PTR [eax+96]

; 4508 : #endif
; 4509 : 
; 4510 : 	if(NULL != pNode)

	test	ecx, ecx
	je	SHORT $LN2@GetPathEnd@2

; 4511 : 	{
; 4512 : #ifndef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4513 : 		CvMap& kMap = GC.getMap();
; 4514 : #endif
; 4515 : 		if((pNode->m_pParent == NULL) || (pNode->m_iData2 == 1))

	mov	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	test	eax, eax
	je	SHORT $LN4@GetPathEnd@2
	cmp	DWORD PTR [ecx+16], 1
	je	SHORT $LN4@GetPathEnd@2
$LL3@GetPathEnd@2:

; 4516 : 		{
; 4517 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4518 : 			return pNode->m_pPlot;
; 4519 : #else
; 4520 : 			return kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);
; 4521 : #endif
; 4522 : 		}
; 4523 : 
; 4524 : 		while(pNode->m_pParent != NULL)
; 4525 : 		{
; 4526 : 			if(pNode->m_pParent->m_iData2 == 1)

	cmp	DWORD PTR [eax+16], 1
	je	SHORT $LN26@GetPathEnd@2

; 4532 : #endif
; 4533 : 			}
; 4534 : 
; 4535 : 			pNode = pNode->m_pParent;

	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+24]
	test	eax, eax
	jne	SHORT $LL3@GetPathEnd@2
$LN2@GetPathEnd@2:

; 4536 : 		}
; 4537 : 	}
; 4538 : 
; 4539 : 	FAssert(false);
; 4540 : 
; 4541 : 	return NULL;

	xor	eax, eax

; 4542 : }

	ret	0
$LN26@GetPathEnd@2:

; 4527 : 			{
; 4528 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4529 : 				return pNode->m_pParent->m_pPlot;
; 4530 : #else
; 4531 : 				return kMap.plotUnchecked(pNode->m_pParent->m_iX, pNode->m_pParent->m_iY);

	mov	ecx, DWORD PTR [ecx+24]
$LN4@GetPathEnd@2:
	movsx	eax, WORD PTR [ecx+82]
	imul	eax, DWORD PTR [edx+4020]
	movsx	ecx, WORD PTR [ecx+80]
	add	eax, ecx
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [edx+4068]

; 4542 : }

	ret	0
?GetPathEndTurnPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@XZ ENDP ; CvIgnoreUnitsPathFinder::GetPathEndTurnPlot
_TEXT	ENDS
PUBLIC	?GetLastPlot@CvIgnoreUnitsPathFinder@@QAEPAVCvPlot@@XZ ; CvIgnoreUnitsPathFinder::GetLastPlot
; Function compile flags: /Ogtpy
;	COMDAT ?GetLastPlot@CvIgnoreUnitsPathFinder@@QAEPAVCvPlot@@XZ
_TEXT	SEGMENT
_pNode$ = -8						; size = 4
_this$ = -4						; size = 4
?GetLastPlot@CvIgnoreUnitsPathFinder@@QAEPAVCvPlot@@XZ PROC ; CvIgnoreUnitsPathFinder::GetLastPlot, COMDAT
; _this$ = ecx

; 4547 : {

	sub	esp, 8
	mov	DWORD PTR _this$[esp+8], ecx
	push	esi

; 4548 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4549 : 	CvAStarNode* pNode = GetLastNode();
; 4550 : 	if (pNode != NULL)
; 4551 : 	{
; 4552 : 		// Save off node for future calls to GetPreviousPlot()
; 4553 : 		m_pCurNode = pNode;
; 4554 : 
; 4555 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4556 : 		return pNode->m_pPlot;
; 4557 : #else
; 4558 : 		return GC.getMap().plot(pNode->m_iX, pNode->m_iY);
; 4559 : #endif
; 4560 : 	}
; 4561 : 
; 4562 : 	return NULL;
; 4563 : #else
; 4564 : 	CvPlot* pPlot = NULL;
; 4565 : 
; 4566 : 	CvAStarNode* pNode = GC.getIgnoreUnitsPathFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _pNode$[esp+12], ecx

; 4567 : 	if(pNode != NULL)

	test	ecx, ecx
	je	$LN47@GetLastPlo

; 4568 : 	{
; 4569 : 		pPlot = GC.getMap().plot(pNode->m_iX, pNode->m_iY);

	movsx	eax, WORD PTR [ecx+80]
	push	ebx
	movsx	ebx, WORD PTR [ecx+82]
	push	ebp
	push	edi
	cmp	eax, -2147483647			; 80000001H
	je	$LN8@GetLastPlo
	cmp	ebx, -2147483647			; 80000001H
	je	$LN8@GetLastPlo
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	je	SHORT $LN18@GetLastPlo
	test	eax, eax
	jge	SHORT $LN20@GetLastPlo
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN22@GetLastPlo
$LN20@GetLastPlo:
	cmp	eax, ecx
	jl	SHORT $LN18@GetLastPlo
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN22@GetLastPlo
$LN18@GetLastPlo:
	mov	esi, eax
$LN22@GetLastPlo:
	cmp	BYTE PTR [ebp+4057], 0
	mov	edi, DWORD PTR [ebp+4024]
	je	SHORT $LN48@GetLastPlo
	test	ebx, ebx
	jge	SHORT $LN30@GetLastPlo
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN32@GetLastPlo
$LN30@GetLastPlo:
	cmp	ebx, edi
	jl	SHORT $LN48@GetLastPlo
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN32@GetLastPlo
$LN48@GetLastPlo:
	mov	edx, ebx
$LN32@GetLastPlo:
	test	esi, esi
	jl	SHORT $LN12@GetLastPlo
	cmp	esi, ecx
	jge	SHORT $LN12@GetLastPlo
	test	edx, edx
	jl	SHORT $LN12@GetLastPlo
	cmp	edx, edi
	jge	SHORT $LN12@GetLastPlo
	imul	ecx, edx

; 4570 : 
; 4571 : 		// Save off node for future calls to GetPreviousPlot()
; 4572 : 		m_pCurNode = pNode;

	mov	edx, DWORD PTR _this$[esp+24]
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]
	pop	edi
	pop	ebp
	mov	eax, ecx
	mov	ecx, DWORD PTR _pNode$[esp+16]
	pop	ebx
	mov	DWORD PTR [edx+628], ecx
	pop	esi

; 4576 : #endif
; 4577 : }

	add	esp, 8
	ret	0

; 4568 : 	{
; 4569 : 		pPlot = GC.getMap().plot(pNode->m_iX, pNode->m_iY);

$LN12@GetLastPlo:
	mov	ecx, DWORD PTR _pNode$[esp+24]
$LN8@GetLastPlo:

; 4570 : 
; 4571 : 		// Save off node for future calls to GetPreviousPlot()
; 4572 : 		m_pCurNode = pNode;

	mov	edx, DWORD PTR _this$[esp+24]
	pop	edi
	pop	ebp
	pop	ebx
	xor	eax, eax
	mov	DWORD PTR [edx+628], ecx
	pop	esi

; 4576 : #endif
; 4577 : }

	add	esp, 8
	ret	0
$LN47@GetLastPlo:

; 4573 : 	}
; 4574 : 
; 4575 : 	return pPlot;

	mov	eax, esi
	pop	esi

; 4576 : #endif
; 4577 : }

	add	esp, 8
	ret	0
?GetLastPlot@CvIgnoreUnitsPathFinder@@QAEPAVCvPlot@@XZ ENDP ; CvIgnoreUnitsPathFinder::GetLastPlot
_TEXT	ENDS
PUBLIC	?GetPreviousPlot@CvIgnoreUnitsPathFinder@@QAEPAVCvPlot@@XZ ; CvIgnoreUnitsPathFinder::GetPreviousPlot
; Function compile flags: /Ogtpy
;	COMDAT ?GetPreviousPlot@CvIgnoreUnitsPathFinder@@QAEPAVCvPlot@@XZ
_TEXT	SEGMENT
?GetPreviousPlot@CvIgnoreUnitsPathFinder@@QAEPAVCvPlot@@XZ PROC ; CvIgnoreUnitsPathFinder::GetPreviousPlot, COMDAT
; _this$ = ecx

; 4583 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 4584 : 	CvPlot* pPlot = NULL;
; 4585 : #endif
; 4586 : 
; 4587 : 	if(m_pCurNode != NULL)

	mov	edx, DWORD PTR [ecx+628]
	xor	eax, eax
	test	edx, edx
	je	$LN9@GetPreviou

; 4588 : 	{
; 4589 : 		m_pCurNode = m_pCurNode->m_pParent;

	mov	edx, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+628], edx

; 4590 : 
; 4591 : 		if(m_pCurNode != NULL)

	test	edx, edx
	je	$LN9@GetPreviou

; 4592 : 		{
; 4593 : #if defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES) && defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4594 : 			return m_pCurNode->m_pPlot;
; 4595 : #elif defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES)
; 4596 : 			pPlot = m_pCurNode->m_pPlot;
; 4597 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4598 : 			return GC.getMap().plot(m_pCurNode->m_iX, m_pCurNode->m_iY);
; 4599 : #else
; 4600 : 			pPlot = GC.getMap().plot(m_pCurNode->m_iX, m_pCurNode->m_iY);

	movsx	eax, WORD PTR [edx+80]
	push	ebx
	movsx	ebx, WORD PTR [edx+82]
	cmp	eax, -2147483647			; 80000001H
	je	$LN7@GetPreviou
	cmp	ebx, -2147483647			; 80000001H
	je	$LN7@GetPreviou
	push	ebp
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	push	esi
	je	SHORT $LN17@GetPreviou
	test	eax, eax
	jge	SHORT $LN19@GetPreviou
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN21@GetPreviou
$LN19@GetPreviou:
	cmp	eax, ecx
	jl	SHORT $LN17@GetPreviou
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN21@GetPreviou
$LN17@GetPreviou:
	mov	esi, eax
$LN21@GetPreviou:
	cmp	BYTE PTR [ebp+4057], 0
	push	edi
	mov	edi, DWORD PTR [ebp+4024]
	je	SHORT $LN48@GetPreviou
	test	ebx, ebx
	jge	SHORT $LN29@GetPreviou
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN31@GetPreviou
$LN29@GetPreviou:
	cmp	ebx, edi
	jl	SHORT $LN48@GetPreviou
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN31@GetPreviou
$LN48@GetPreviou:
	mov	edx, ebx
$LN31@GetPreviou:
	test	esi, esi
	jl	SHORT $LN11@GetPreviou
	cmp	esi, ecx
	jge	SHORT $LN11@GetPreviou
	test	edx, edx
	jl	SHORT $LN11@GetPreviou
	cmp	edx, edi
	jge	SHORT $LN11@GetPreviou
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ecx
	pop	ebx
$LN9@GetPreviou:

; 4601 : #endif
; 4602 : 		}
; 4603 : 	}
; 4604 : 
; 4605 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4606 : 	return NULL;
; 4607 : #else
; 4608 : 	return pPlot;
; 4609 : #endif
; 4610 : }

	ret	0

; 4592 : 		{
; 4593 : #if defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES) && defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4594 : 			return m_pCurNode->m_pPlot;
; 4595 : #elif defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES)
; 4596 : 			pPlot = m_pCurNode->m_pPlot;
; 4597 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4598 : 			return GC.getMap().plot(m_pCurNode->m_iX, m_pCurNode->m_iY);
; 4599 : #else
; 4600 : 			pPlot = GC.getMap().plot(m_pCurNode->m_iX, m_pCurNode->m_iY);

$LN11@GetPreviou:
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx

; 4601 : #endif
; 4602 : 		}
; 4603 : 	}
; 4604 : 
; 4605 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4606 : 	return NULL;
; 4607 : #else
; 4608 : 	return pPlot;
; 4609 : #endif
; 4610 : }

	ret	0

; 4592 : 		{
; 4593 : #if defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES) && defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4594 : 			return m_pCurNode->m_pPlot;
; 4595 : #elif defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES)
; 4596 : 			pPlot = m_pCurNode->m_pPlot;
; 4597 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4598 : 			return GC.getMap().plot(m_pCurNode->m_iX, m_pCurNode->m_iY);
; 4599 : #else
; 4600 : 			pPlot = GC.getMap().plot(m_pCurNode->m_iX, m_pCurNode->m_iY);

$LN7@GetPreviou:
	xor	eax, eax
	pop	ebx

; 4601 : #endif
; 4602 : 		}
; 4603 : 	}
; 4604 : 
; 4605 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4606 : 	return NULL;
; 4607 : #else
; 4608 : 	return pPlot;
; 4609 : #endif
; 4610 : }

	ret	0
?GetPreviousPlot@CvIgnoreUnitsPathFinder@@QAEPAVCvPlot@@XZ ENDP ; CvIgnoreUnitsPathFinder::GetPreviousPlot
_TEXT	ENDS
PUBLIC	?UIPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; UIPathValid
EXTRN	?getArea@CvUnit@@QBEHXZ:PROC			; CvUnit::getArea
EXTRN	?canMoveInto@CvUnit@@QBE_NABVCvPlot@@E@Z:PROC	; CvUnit::canMoveInto
EXTRN	?getNoRevealMapCount@CvUnit@@QBEHXZ:PROC	; CvUnit::getNoRevealMapCount
; Function compile flags: /Ogtpy
;	COMDAT ?UIPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
tv281 = 8						; size = 4
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?UIPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; UIPathValid, COMDAT

; 4615 : {

	push	ebp

; 4616 : 	if (parent == NULL)

	mov	ebp, DWORD PTR _parent$[esp]
	test	ebp, ebp
	jne	SHORT $LN12@UIPathVali

; 4617 : 	{
; 4618 : 		return TRUE;

	lea	eax, DWORD PTR [ebp+1]
	pop	ebp

; 4687 : 	{
; 4688 : 		return FALSE;
; 4689 : 	}
; 4690 : 
; 4691 : 	return TRUE;
; 4692 : }

	ret	0
$LN12@UIPathVali:
	push	ebx

; 4619 : 	}
; 4620 : 
; 4621 : 	if(node->m_iData2 > 3)

	mov	ebx, DWORD PTR _node$[esp+4]
	cmp	DWORD PTR [ebx+16], 3
	jle	SHORT $LN11@UIPathVali
	pop	ebx

; 4622 : 	{
; 4623 : 		return FALSE;

	xor	eax, eax
	pop	ebp

; 4687 : 	{
; 4688 : 		return FALSE;
; 4689 : 	}
; 4690 : 
; 4691 : 	return TRUE;
; 4692 : }

	ret	0
$LN11@UIPathVali:

; 4624 : 	}
; 4625 : 
; 4626 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4627 : 	const CvPlot* pToPlot = node->m_pPlot;
; 4628 : #else
; 4629 : 	CvPlot* pToPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	movsx	ecx, WORD PTR [ebx+80]
	push	esi
	movsx	esi, WORD PTR [ebx+82]
	imul	esi, DWORD PTR [eax+4020]
	add	esi, ecx
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [eax+4068]
	push	edi

; 4630 : #endif
; 4631 : 
; 4632 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 4633 : 
; 4634 : 	if(!pToPlot->isRevealed(pUnit->getTeam()))

	mov	edi, DWORD PTR _pointer$[esp+12]
	mov	ecx, edi
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	mov	edx, eax
	shr	edx, 5
	mov	ecx, edx
	shl	ecx, 5
	mov	DWORD PTR tv281[esp+12], ecx
	mov	ecx, eax
	mov	eax, DWORD PTR tv281[esp+12]
	sub	ecx, eax
	mov	eax, 1
	shl	eax, cl
	test	eax, DWORD PTR [esi+edx*4+8]
	jne	SHORT $LN9@UIPathVali

; 4635 : 	{
; 4636 : 		if(pUnit->getNoRevealMapCount() > 0)

	mov	ecx, edi
	call	?getNoRevealMapCount@CvUnit@@QBEHXZ	; CvUnit::getNoRevealMapCount
	test	eax, eax

; 4637 : 		{
; 4638 : 			return FALSE;

	jg	SHORT $LN37@UIPathVali
$LN9@UIPathVali:

; 4639 : 		}
; 4640 : 	}
; 4641 : 
; 4642 : #ifndef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 4643 : 	if(pToPlot->isVisible(pUnit->getTeam()) && pToPlot->isVisibleEnemyUnit(pUnit))

	mov	ecx, edi
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	cmp	eax, -1
	je	SHORT $LN7@UIPathVali
	mov	ecx, DWORD PTR [esi+156]
	cmp	WORD PTR [ecx+eax*2], 0
	setg	al
	test	al, al
	je	SHORT $LN7@UIPathVali
	push	edi
	mov	ecx, esi
	call	?isVisibleEnemyUnit@CvPlot@@QBE_NPBVCvUnit@@@Z ; CvPlot::isVisibleEnemyUnit
	test	al, al
	je	SHORT $LN7@UIPathVali

; 4644 : 	{
; 4645 : 		if (!pUnit->canMoveInto(*pToPlot, CvUnit::MOVEFLAG_ATTACK))

	push	1
	push	esi
	mov	ecx, edi
	call	?canMoveInto@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveInto
	test	al, al

; 4646 : 			return FALSE;

	je	SHORT $LN37@UIPathVali
$LN7@UIPathVali:

; 4647 : 	}
; 4648 : #endif
; 4649 : 
; 4650 : 	if(pUnit->getDomainType() == DOMAIN_LAND)

	mov	ecx, edi
	call	?getDomainType@CvUnit@@QBE?AW4DomainTypes@@XZ ; CvUnit::getDomainType
	cmp	eax, 2
	jne	SHORT $LN3@UIPathVali

; 4651 : 	{
; 4652 : 		int iGroupAreaID = pUnit->getArea();

	mov	ecx, edi
	call	?getArea@CvUnit@@QBEHXZ			; CvUnit::getArea

; 4653 : 		if(pToPlot->getArea() != iGroupAreaID)

	cmp	DWORD PTR [esi+356], eax
	je	SHORT $LN3@UIPathVali

; 4654 : 		{
; 4655 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 4656 : 			if (!pUnit->canMoveAllTerrain() && !pUnit->IsHoveringUnit() && !pToPlot->isAdjacentToArea(iGroupAreaID))
; 4657 : #else
; 4658 : 			if(!(pToPlot->isAdjacentToArea(iGroupAreaID)))

	push	eax
	mov	ecx, esi
	call	?isAdjacentToArea@CvPlot@@QBE_NH@Z	; CvPlot::isAdjacentToArea
	test	al, al
	jne	SHORT $LN3@UIPathVali

; 4659 : #endif
; 4660 : 			{
; 4661 : 				// antonjs: Added for Smoky Skies scenario. Allows move range to show correctly for airships,
; 4662 : 				// which move over land and sea plots equally (canMoveAllTerrain)
; 4663 : #ifndef AUI_UNIT_FIX_HOVERING_EMBARK		
; 4664 : 				if (!pUnit->canMoveAllTerrain())

	mov	ecx, edi
	call	?canMoveAllTerrain@CvUnit@@QBE_NXZ	; CvUnit::canMoveAllTerrain
	test	al, al

; 4665 : #endif
; 4666 : 				{
; 4667 : 					return FALSE;

	je	SHORT $LN37@UIPathVali
$LN3@UIPathVali:

; 4668 : 				}
; 4669 : 			}
; 4670 : 		}
; 4671 : 	}
; 4672 : 
; 4673 : 	if(!pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_ATTACK))

	push	1
	push	esi
	mov	ecx, edi
	call	?canEnterTerrain@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canEnterTerrain
	test	al, al
	jne	SHORT $LN2@UIPathVali
$LN37@UIPathVali:
	pop	edi
	pop	esi
	pop	ebx

; 4674 : 	{
; 4675 : 		return FALSE;

	xor	eax, eax
	pop	ebp

; 4687 : 	{
; 4688 : 		return FALSE;
; 4689 : 	}
; 4690 : 
; 4691 : 	return TRUE;
; 4692 : }

	ret	0
$LN2@UIPathVali:

; 4676 : 	}
; 4677 : 
; 4678 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 4679 : 	if (pToPlot->isVisible(pUnit->getTeam()) && pToPlot->isVisibleEnemyUnit(pUnit))
; 4680 : 	{
; 4681 : 		if (!pUnit->canMoveInto(*pToPlot, CvUnit::MOVEFLAG_ATTACK, true, true))
; 4682 : 			return FALSE;
; 4683 : 	}
; 4684 : #endif
; 4685 : 
; 4686 : 	if(!PathValid(parent,node,data,pointer,finder))

	mov	edx, DWORD PTR _finder$[esp+12]
	mov	eax, DWORD PTR _data$[esp+12]
	push	edx
	push	edi
	push	eax
	push	ebx
	push	ebp
	call	?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathValid
	add	esp, 20					; 00000014H
	pop	edi
	neg	eax
	pop	esi
	sbb	eax, eax
	pop	ebx
	neg	eax
	pop	ebp

; 4687 : 	{
; 4688 : 		return FALSE;
; 4689 : 	}
; 4690 : 
; 4691 : 	return TRUE;
; 4692 : }

	ret	0
?UIPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; UIPathValid
_TEXT	ENDS
PUBLIC	?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; UIPathAdd
EXTRN	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z:PROC ; CvGlobals::WrapPlotPointer
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z$1
__ehfuncinfo$?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
xdata$x	ENDS
;	COMDAT ?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_pDllPlot$220796 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_parent$ = 8						; size = 4
$T226483 = 12						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC	; UIPathAdd, COMDAT

; 4697 : {

	push	-1
	push	__ehhandler$?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx

; 4698 : 	PathAdd(parent, node, data, pointer, finder);

	mov	eax, DWORD PTR _finder$[esp+12]
	mov	ecx, DWORD PTR _pointer$[esp+12]
	mov	edx, DWORD PTR _data$[esp+12]
	push	esi
	mov	esi, DWORD PTR _node$[esp+16]
	push	eax
	mov	eax, DWORD PTR _parent$[esp+20]
	push	ecx
	push	edx
	push	esi
	push	eax
	call	?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathAdd
	add	esp, 20					; 00000014H

; 4699 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 4700 : 	if(node)

	test	esi, esi
	je	$LN65@UIPathAdd

; 4701 : #endif
; 4702 : 	{
; 4703 : 		if(node->m_iData2 < 2 /*&& node->m_eCvAStarListType == NO_CVASTARLIST*/)

	cmp	DWORD PTR [esi+16], 2
	jge	$LN65@UIPathAdd

; 4704 : 		{
; 4705 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4706 : 			CvPlot* pPlot = node->m_pPlot;
; 4707 : #else
; 4708 : 			CvPlot* pPlot = GC.getMap().plot(node->m_iX, node->m_iY);

	movsx	eax, WORD PTR [esi+80]
	push	ebx
	movsx	ebx, WORD PTR [esi+82]
	cmp	eax, -2147483647			; 80000001H
	je	$LN71@UIPathAdd
	cmp	ebx, -2147483647			; 80000001H
	je	$LN71@UIPathAdd
	push	ebp
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	dl, BYTE PTR [ebp+4056]
	mov	ecx, DWORD PTR [ebp+4020]
	test	dl, dl
	je	SHORT $LN20@UIPathAdd
	test	eax, eax
	jge	SHORT $LN22@UIPathAdd
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN24@UIPathAdd
$LN22@UIPathAdd:
	cmp	eax, ecx
	jl	SHORT $LN20@UIPathAdd
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN24@UIPathAdd
$LN20@UIPathAdd:
	mov	esi, eax
$LN24@UIPathAdd:
	mov	al, BYTE PTR [ebp+4057]
	push	edi
	mov	edi, DWORD PTR [ebp+4024]
	test	al, al
	je	SHORT $LN69@UIPathAdd
	test	ebx, ebx
	jge	SHORT $LN32@UIPathAdd
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN34@UIPathAdd
$LN32@UIPathAdd:
	cmp	ebx, edi
	jl	SHORT $LN69@UIPathAdd
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN34@UIPathAdd
$LN69@UIPathAdd:
	mov	edx, ebx
$LN34@UIPathAdd:
	test	esi, esi
	jl	SHORT $LN73@UIPathAdd
	cmp	esi, ecx
	jge	SHORT $LN73@UIPathAdd
	test	edx, edx
	jl	SHORT $LN73@UIPathAdd
	cmp	edx, edi
	jge	SHORT $LN73@UIPathAdd
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]

; 4709 : #endif
; 4710 : 			if(pPlot)

	test	ecx, ecx
	je	SHORT $LN73@UIPathAdd

; 4711 : 			{
; 4712 : 				auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pPlot);

	push	ecx
	lea	ecx, DWORD PTR $T226483[esp+32]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR _pDllPlot$220796[esp+32], esi
	mov	eax, DWORD PTR $T226483[esp+28]
	mov	DWORD PTR __$EHRec$[esp+40], 0
	test	eax, eax
	je	SHORT $LN56@UIPathAdd
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN56@UIPathAdd:

; 4713 : 				GC.GetEngineUserInterface()->AddHexToUIRange(pDllPlot.get());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+444]
	push	esi
	call	eax

; 4714 : 			}

	mov	DWORD PTR __$EHRec$[esp+40], -1
	test	esi, esi
	je	SHORT $LN73@UIPathAdd
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	call	edx
$LN73@UIPathAdd:
	pop	edi
	pop	ebp
$LN71@UIPathAdd:
	pop	ebx
$LN65@UIPathAdd:

; 4715 : 		}
; 4716 : 	}
; 4717 : 
; 4718 : 	return 1;
; 4719 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, 1
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z$1:
	lea	ecx, DWORD PTR _pDllPlot$220796[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__ehhandler$?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?UIPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP	; UIPathAdd
PUBLIC	?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; AttackPathAdd
EXTRN	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z:PROC ; CvGlobals::UnwrapUnitPointer
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
xdata$x	SEGMENT
__unwindtable$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z$2
__ehfuncinfo$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
xdata$x	ENDS
;	COMDAT ?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_pDllUnit$220872 = -20					; size = 4
_pDllPlot$220887 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_parent$ = 8						; size = 4
$T226659 = 12						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; AttackPathAdd, COMDAT

; 4723 : {

	mov	eax, DWORD PTR fs:0

; 4724 : 	PathAdd(parent, node, data, pointer, finder);

	mov	ecx, DWORD PTR _pointer$[esp-4]
	mov	edx, DWORD PTR _data$[esp-4]
	push	-1
	push	__ehhandler$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
	push	eax
	mov	eax, DWORD PTR _finder$[esp+8]
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	push	esi
	mov	esi, DWORD PTR _node$[esp+20]
	push	eax
	mov	eax, DWORD PTR _parent$[esp+24]
	push	ecx
	push	edx
	push	esi
	push	eax
	call	?PathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathAdd
	add	esp, 20					; 00000014H

; 4725 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4726 : 	if (node->m_iData2 < 2)
; 4727 : #else
; 4728 : 	if(node && node->m_iData2 < 2)

	test	esi, esi
	je	$LN83@AttackPath
	cmp	DWORD PTR [esi+16], 2
	jge	$LN83@AttackPath

; 4729 : #endif
; 4730 : 	{
; 4731 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4732 : 		CvPlot* pPlot = node->m_pPlot;
; 4733 : #else
; 4734 : 		CvPlot* pPlot = GC.getMap().plot(node->m_iX, node->m_iY);

	movsx	eax, WORD PTR [esi+80]
	push	ebx
	push	ebp
	movsx	ebp, WORD PTR [esi+82]
	push	edi
	cmp	eax, -2147483647			; 80000001H
	je	$LN12@AttackPath
	cmp	ebp, -2147483647			; 80000001H
	je	SHORT $LN12@AttackPath
	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	dl, BYTE PTR [ebx+4056]
	mov	ecx, DWORD PTR [ebx+4020]
	test	dl, dl
	je	SHORT $LN22@AttackPath
	test	eax, eax
	jge	SHORT $LN24@AttackPath
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN26@AttackPath
$LN24@AttackPath:
	cmp	eax, ecx
	jl	SHORT $LN22@AttackPath
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN26@AttackPath
$LN22@AttackPath:
	mov	esi, eax
$LN26@AttackPath:
	mov	al, BYTE PTR [ebx+4057]
	mov	edi, DWORD PTR [ebx+4024]
	test	al, al
	je	SHORT $LN85@AttackPath
	test	ebp, ebp
	jge	SHORT $LN34@AttackPath
	mov	eax, ebp
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN36@AttackPath
$LN34@AttackPath:
	cmp	ebp, edi
	jl	SHORT $LN85@AttackPath
	mov	eax, ebp
	cdq
	idiv	edi
	jmp	SHORT $LN36@AttackPath
$LN85@AttackPath:
	mov	edx, ebp
$LN36@AttackPath:
	test	esi, esi
	jl	SHORT $LN12@AttackPath
	cmp	esi, ecx
	jge	SHORT $LN12@AttackPath
	test	edx, edx
	jl	SHORT $LN12@AttackPath
	cmp	edx, edi
	jge	SHORT $LN12@AttackPath
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebx+4068]
	mov	esi, ecx
	jmp	SHORT $LN14@AttackPath
$LN12@AttackPath:
	xor	esi, esi
$LN14@AttackPath:

; 4735 : #endif
; 4736 : 
; 4737 : 		auto_ptr<ICvUnit1> pDllUnit(GC.GetEngineUserInterface()->GetHeadSelectedUnit());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	ebp, eax
	mov	DWORD PTR _pDllUnit$220872[esp+36], ebp

; 4738 : 		CvUnit* pUnit = GC.UnwrapUnitPointer(pDllUnit.get());

	push	ebp
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR __$EHRec$[esp+48], 0
	call	?UnwrapUnitPointer@CvGlobals@@QAEPAVCvUnit@@PAVICvUnit1@@@Z ; CvGlobals::UnwrapUnitPointer
	mov	edi, eax

; 4739 : 		CvAssertMsg(pUnit, "pUnit should be a value");
; 4740 : 
; 4741 : 		if(pUnit && pPlot)

	test	edi, edi
	je	$LN73@AttackPath
	test	esi, esi
	je	SHORT $LN73@AttackPath

; 4742 : 		{
; 4743 : 			if(pPlot->isVisible(pUnit->getTeam()) && (pPlot->isVisibleEnemyUnit(pUnit) || pPlot->isEnemyCity(*pUnit)))

	mov	ecx, edi
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	push	eax
	mov	ecx, esi
	call	?isVisible@CvPlot@@QBE_NW4TeamTypes@@@Z	; CvPlot::isVisible
	test	al, al
	je	SHORT $LN73@AttackPath
	push	edi
	mov	ecx, esi
	call	?isVisibleEnemyUnit@CvPlot@@QBE_NPBVCvUnit@@@Z ; CvPlot::isVisibleEnemyUnit
	test	al, al
	jne	SHORT $LN1@AttackPath
	push	edi
	mov	ecx, esi
	call	?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z	; CvPlot::isEnemyCity
	test	al, al
	je	SHORT $LN73@AttackPath
$LN1@AttackPath:

; 4744 : 			{
; 4745 : 				auto_ptr<ICvPlot1> pDllPlot = GC.WrapPlotPointer(pPlot);

	push	esi
	lea	ecx, DWORD PTR $T226659[esp+36]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?WrapPlotPointer@CvGlobals@@QAE?AV?$auto_ptr@VICvPlot1@@@std@@PAVCvPlot@@@Z ; CvGlobals::WrapPlotPointer
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR _pDllPlot$220887[esp+36], esi
	mov	eax, DWORD PTR $T226659[esp+32]
	mov	BYTE PTR __$EHRec$[esp+44], 1
	test	eax, eax
	je	SHORT $LN64@AttackPath
	mov	edx, DWORD PTR [eax]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN64@AttackPath:

; 4746 : 				GC.GetEngineUserInterface()->AddHexToUIRange(pDllPlot.get());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8568
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+444]
	push	esi
	call	eax

; 4747 : 			}

	mov	BYTE PTR __$EHRec$[esp+44], 0
	test	esi, esi
	je	SHORT $LN73@AttackPath
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	call	edx
$LN73@AttackPath:

; 4748 : 		}
; 4749 : 	}

	mov	DWORD PTR __$EHRec$[esp+44], -1
	test	ebp, ebp
	je	SHORT $LN82@AttackPath
	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ebp
	call	ecx
$LN82@AttackPath:
	pop	edi
	pop	ebp
	pop	ebx

; 4750 : 
; 4751 : 	return 1;

	mov	eax, 1
	pop	esi

; 4752 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	DWORD PTR fs:0, ecx
	add	esp, 20					; 00000014H
	ret	0
$LN83@AttackPath:
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	eax, 1
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 20					; 00000014H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z$0:
	lea	ecx, DWORD PTR _pDllUnit$220872[ebp]
	jmp	??1?$auto_ptr@VICvUnit1@@@std@@QAE@XZ	; std::auto_ptr<ICvUnit1>::~auto_ptr<ICvUnit1>
__unwindfunclet$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z$2:
	lea	ecx, DWORD PTR _pDllPlot$220887[ebp]
	jmp	??1?$auto_ptr@VICvPlot1@@@std@@QAE@XZ	; std::auto_ptr<ICvPlot1>::~auto_ptr<ICvPlot1>
__ehhandler$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AttackPathAdd@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; AttackPathAdd
PUBLIC	?AttackPathDestEval@@YAHHHPBXPAVCvAStar@@_N2@Z	; AttackPathDestEval
EXTRN	?IsFortifiedThisTurn@CvUnit@@QBE_NXZ:PROC	; CvUnit::IsFortifiedThisTurn
EXTRN	?getVisibleEnemyDefender@CvPlot@@QAEPAVCvUnit@@W4PlayerTypes@@@Z:PROC ; CvPlot::getVisibleEnemyDefender
; Function compile flags: /Ogtpy
;	COMDAT ?AttackPathDestEval@@YAHHHPBXPAVCvAStar@@_N2@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
_bOnlyFortified$ = 24					; size = 1
_bOnlyCity$ = 28					; size = 1
?AttackPathDestEval@@YAHHHPBXPAVCvAStar@@_N2@Z PROC	; AttackPathDestEval, COMDAT

; 4761 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 4762 : 	CvAssertMsg(pUnit, "pUnit should be a value");
; 4763 : 	CvPlot* pPlot = GC.getMap().plot(iToX, iToY);

	mov	eax, DWORD PTR _iToX$[esp-4]
	push	ebx
	push	ebp
	push	esi
	push	edi
	cmp	eax, -2147483647			; 80000001H
	je	$LN14@AttackPath@2
	mov	ebx, DWORD PTR _iToY$[esp+12]
	cmp	ebx, -2147483647			; 80000001H
	je	SHORT $LN14@AttackPath@2
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	je	SHORT $LN64@AttackPath@2
	test	eax, eax
	jge	SHORT $LN26@AttackPath@2
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN28@AttackPath@2
$LN26@AttackPath@2:
	cmp	eax, ecx
	jl	SHORT $LN64@AttackPath@2
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN28@AttackPath@2
$LN64@AttackPath@2:
	mov	esi, eax
$LN28@AttackPath@2:
	cmp	BYTE PTR [ebp+4057], 0
	mov	edi, DWORD PTR [ebp+4024]
	je	SHORT $LN65@AttackPath@2
	test	ebx, ebx
	jge	SHORT $LN36@AttackPath@2
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN38@AttackPath@2
$LN36@AttackPath@2:
	cmp	ebx, edi
	jl	SHORT $LN65@AttackPath@2
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN38@AttackPath@2
$LN65@AttackPath@2:
	mov	edx, ebx
$LN38@AttackPath@2:
	test	esi, esi
	jl	SHORT $LN14@AttackPath@2
	cmp	esi, ecx
	jge	SHORT $LN14@AttackPath@2
	test	edx, edx
	jl	SHORT $LN14@AttackPath@2
	cmp	edx, edi
	jge	SHORT $LN14@AttackPath@2
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]
	mov	esi, ecx
	jmp	SHORT $LN16@AttackPath@2
$LN14@AttackPath@2:
	xor	esi, esi
$LN16@AttackPath@2:

; 4764 : 	CvAStarNode* pNode = finder->GetLastNode();

	mov	eax, DWORD PTR _finder$[esp+12]

; 4765 : 
; 4766 : 	if(pPlot->isVisible(pUnit->getTeam()) && (pPlot->isVisibleEnemyUnit(pUnit) || pPlot->isEnemyCity(*pUnit)) && pNode && pNode->m_iData2 < 2)

	mov	edi, DWORD PTR _pointer$[esp+12]
	mov	ebx, DWORD PTR [eax+96]
	mov	ecx, edi
	call	?getTeam@CvUnit@@QBE?AW4TeamTypes@@XZ	; CvUnit::getTeam
	cmp	eax, -1
	je	$LN1@AttackPath@2
	mov	ecx, DWORD PTR [esi+156]
	cmp	WORD PTR [ecx+eax*2], 0
	setg	al
	test	al, al
	je	SHORT $LN1@AttackPath@2
	push	edi
	mov	ecx, esi
	call	?isVisibleEnemyUnit@CvPlot@@QBE_NPBVCvUnit@@@Z ; CvPlot::isVisibleEnemyUnit
	test	al, al
	jne	SHORT $LN8@AttackPath@2
	push	edi
	mov	ecx, esi
	call	?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z	; CvPlot::isEnemyCity
	test	al, al
	je	SHORT $LN1@AttackPath@2
$LN8@AttackPath@2:
	test	ebx, ebx
	je	SHORT $LN1@AttackPath@2
	cmp	DWORD PTR [ebx+16], 2
	jge	SHORT $LN1@AttackPath@2

; 4767 : 	{
; 4768 : 		if (pUnit->canMoveInto(*pPlot, CvUnit::MOVEFLAG_ATTACK))

	push	1
	push	esi
	mov	ecx, edi
	call	?canMoveInto@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveInto
	test	al, al
	je	SHORT $LN1@AttackPath@2

; 4769 : 		{
; 4770 : 			if(bOnlyFortified)

	cmp	BYTE PTR _bOnlyFortified$[esp+12], 0
	je	SHORT $LN6@AttackPath@2

; 4771 : 			{
; 4772 : 				CvUnit* pEnemyUnit = pPlot->getVisibleEnemyDefender(pUnit->getOwner());

	mov	edi, DWORD PTR [edi+40]
	push	edi
	mov	ecx, esi
	call	?getVisibleEnemyDefender@CvPlot@@QAEPAVCvUnit@@W4PlayerTypes@@@Z ; CvPlot::getVisibleEnemyDefender

; 4773 : 				if(pEnemyUnit && pEnemyUnit->IsFortifiedThisTurn())

	test	eax, eax
	je	SHORT $LN1@AttackPath@2
	mov	ecx, eax
	call	?IsFortifiedThisTurn@CvUnit@@QBE_NXZ	; CvUnit::IsFortifiedThisTurn
	test	al, al
	je	SHORT $LN1@AttackPath@2
$LN3@AttackPath@2:
	pop	edi
	pop	esi
	pop	ebp

; 4774 : 				{
; 4775 : 					return TRUE;

	mov	eax, 1
	pop	ebx

; 4793 : }

	ret	0
$LN6@AttackPath@2:

; 4776 : 				}
; 4777 : 			}
; 4778 : 			else if(bOnlyCity)

	cmp	BYTE PTR _bOnlyCity$[esp+12], 0
	je	SHORT $LN3@AttackPath@2

; 4779 : 			{
; 4780 : 				if(pPlot->isEnemyCity(*pUnit))

	push	edi
	mov	ecx, esi
	call	?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z	; CvPlot::isEnemyCity
	test	al, al
	je	SHORT $LN1@AttackPath@2
	pop	edi
	pop	esi
	pop	ebp

; 4781 : 				{
; 4782 : 					return TRUE;

	mov	eax, 1
	pop	ebx

; 4793 : }

	ret	0
$LN1@AttackPath@2:
	pop	edi
	pop	esi
	pop	ebp

; 4783 : 				}
; 4784 : 			}
; 4785 : 			else
; 4786 : 			{
; 4787 : 				return TRUE;
; 4788 : 			}
; 4789 : 		}
; 4790 : 	}
; 4791 : 
; 4792 : 	return FALSE;

	xor	eax, eax
	pop	ebx

; 4793 : }

	ret	0
?AttackPathDestEval@@YAHHHPBXPAVCvAStar@@_N2@Z ENDP	; AttackPathDestEval
_TEXT	ENDS
PUBLIC	?AttackPathDest@@YAHHHPBXPAVCvAStar@@@Z		; AttackPathDest
; Function compile flags: /Ogtpy
;	COMDAT ?AttackPathDest@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?AttackPathDest@@YAHHHPBXPAVCvAStar@@@Z PROC		; AttackPathDest, COMDAT

; 4803 : 	return AttackPathDestEval(iToX, iToY, pointer, finder, false, false);

	mov	eax, DWORD PTR _finder$[esp-4]
	mov	ecx, DWORD PTR _pointer$[esp-4]
	mov	edx, DWORD PTR _iToY$[esp-4]
	push	0
	push	0
	push	eax
	mov	eax, DWORD PTR _iToX$[esp+8]
	push	ecx
	push	edx
	push	eax
	call	?AttackPathDestEval@@YAHHHPBXPAVCvAStar@@_N2@Z ; AttackPathDestEval
	add	esp, 24					; 00000018H

; 4804 : }

	ret	0
?AttackPathDest@@YAHHHPBXPAVCvAStar@@@Z ENDP		; AttackPathDest
_TEXT	ENDS
PUBLIC	?AttackFortifiedPathDest@@YAHHHPBXPAVCvAStar@@@Z ; AttackFortifiedPathDest
; Function compile flags: /Ogtpy
;	COMDAT ?AttackFortifiedPathDest@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?AttackFortifiedPathDest@@YAHHHPBXPAVCvAStar@@@Z PROC	; AttackFortifiedPathDest, COMDAT

; 4814 : 	return AttackPathDestEval(iToX, iToY, pointer, finder, true, false);

	mov	eax, DWORD PTR _finder$[esp-4]
	mov	ecx, DWORD PTR _pointer$[esp-4]
	mov	edx, DWORD PTR _iToY$[esp-4]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR _iToX$[esp+8]
	push	ecx
	push	edx
	push	eax
	call	?AttackPathDestEval@@YAHHHPBXPAVCvAStar@@_N2@Z ; AttackPathDestEval
	add	esp, 24					; 00000018H

; 4815 : }

	ret	0
?AttackFortifiedPathDest@@YAHHHPBXPAVCvAStar@@@Z ENDP	; AttackFortifiedPathDest
_TEXT	ENDS
PUBLIC	?AttackCityPathDest@@YAHHHPBXPAVCvAStar@@@Z	; AttackCityPathDest
; Function compile flags: /Ogtpy
;	COMDAT ?AttackCityPathDest@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?AttackCityPathDest@@YAHHHPBXPAVCvAStar@@@Z PROC	; AttackCityPathDest, COMDAT

; 4825 : 	return AttackPathDestEval(iToX, iToY, pointer, finder, false, true);

	mov	eax, DWORD PTR _finder$[esp-4]
	mov	ecx, DWORD PTR _pointer$[esp-4]
	mov	edx, DWORD PTR _iToY$[esp-4]
	push	1
	push	0
	push	eax
	mov	eax, DWORD PTR _iToX$[esp+8]
	push	ecx
	push	edx
	push	eax
	call	?AttackPathDestEval@@YAHHHPBXPAVCvAStar@@_N2@Z ; AttackPathDestEval
	add	esp, 24					; 00000018H

; 4826 : }

	ret	0
?AttackCityPathDest@@YAHHHPBXPAVCvAStar@@@Z ENDP	; AttackCityPathDest
_TEXT	ENDS
PUBLIC	?TacticalAnalysisMapPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; TacticalAnalysisMapPathValid
EXTRN	?GetPlotIndex@CvPlot@@QBEHXZ:PROC		; CvPlot::GetPlotIndex
EXTRN	?GetTacticalAnalysisMap@CvGame@@QAEPAVCvTacticalAnalysisMap@@XZ:PROC ; CvGame::GetTacticalAnalysisMap
; Function compile flags: /Ogtpy
;	COMDAT ?TacticalAnalysisMapPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_bFirstRun$ = -73					; size = 1
_bFromPlotOwned$ = -72					; size = 1
_bAIControl$ = -71					; size = 1
_bIsHuman$ = -70					; size = 1
_bUnitIsCombat$ = -69					; size = 1
_iNumTurns$ = -68					; size = 4
_iFinderIgnoreStacking$ = -64				; size = 4
_eUnitTeam$ = -60					; size = 4
_iNodeY$ = -56						; size = 4
_eFromPlotTeam$ = -52					; size = 4
_unit_owner$ = -48					; size = 4
_iNodeX$ = -44						; size = 4
_iUnitPlotLimit$ = -40					; size = 4
_pUnitPlot$ = -36					; size = 4
_iFinderInfo$ = -32					; size = 4
_theMap$ = -32						; size = 4
_iDestX$ = -28						; size = 4
_iDestY$ = -24						; size = 4
_iUnitX$ = -20						; size = 4
_iUnitY$ = -16						; size = 4
tv929 = -12						; size = 4
_unit_domain_type$ = -8					; size = 4
$T227006 = -8						; size = 8
_parent$ = 8						; size = 4
_bPreviousNodeHostile$ = 12				; size = 1
_pTAMap$ = 12						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?TacticalAnalysisMapPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; TacticalAnalysisMapPathValid, COMDAT

; 4830 : {

	sub	esp, 76					; 0000004cH

; 4831 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4832 : 	CvPlot* pToPlot = node->m_pPlot;
; 4833 : 	if (!pToPlot)
; 4834 : 		return FALSE;
; 4835 : #else
; 4836 : 	CvMap& theMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	ebx
	push	ebp
	push	esi

; 4837 : 
; 4838 : 	CvPlot* pToPlot = theMap.plotUnchecked(node->m_iX, node->m_iY);

	mov	esi, DWORD PTR _node$[esp+84]
	movsx	ebx, WORD PTR [esi+82]
	imul	ebx, DWORD PTR [eax+4020]
	movsx	ecx, WORD PTR [esi+80]
	add	ebx, ecx

; 4839 : #endif
; 4840 : 	PREFETCH_FASTAR_CVPLOT(reinterpret_cast<char*>(pToPlot));
; 4841 : 
; 4842 : 	CvUnit* pUnit = ((CvUnit *)pointer);
; 4843 : 	const UnitPathCacheData* pCacheData = reinterpret_cast<const UnitPathCacheData*>(finder->GetScratchBuffer());

	mov	ecx, DWORD PTR _finder$[esp+84]
	imul	ebx, 484				; 000001e4H
	add	ebx, DWORD PTR [eax+4068]

; 4844 : 
; 4845 : 	TeamTypes eUnitTeam = pCacheData->getTeam();
; 4846 : 	PlayerTypes unit_owner = pCacheData->getOwner();

	mov	edx, DWORD PTR [ecx+140]
	prefetcht0 BYTE PTR [ebx]
	prefetcht0 BYTE PTR [ebx+64]
	mov	DWORD PTR _theMap$[esp+88], eax
	mov	eax, DWORD PTR [ecx+144]
	push	edi
	mov	DWORD PTR _eUnitTeam$[esp+92], eax
	mov	DWORD PTR _unit_owner$[esp+92], edx

; 4847 : 	CvAssertMsg(eUnitTeam != NO_TEAM, "The unit's team should be a vaild value");
; 4848 : 	if (eUnitTeam == NO_TEAM)

	cmp	eax, -1
	jne	SHORT $LN56@TacticalAn

; 4849 : 	{
; 4850 : 		eUnitTeam = GC.getGame().getActiveTeam();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getActiveTeam@CvGame@@QAE?AW4TeamTypes@@XZ ; CvGame::getActiveTeam
	mov	DWORD PTR _eUnitTeam$[esp+92], eax
$LN56@TacticalAn:

; 4851 : 	}
; 4852 : 
; 4853 : 	CvTeam& kUnitTeam = GET_TEAM(eUnitTeam);

	mov	ebp, DWORD PTR _eUnitTeam$[esp+92]

; 4854 : 
; 4855 : 	CvTacticalAnalysisMap* pTAMap = GC.getGame().GetTacticalAnalysisMap();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	imul	ebp, 2980				; 00000ba4H
	add	ebp, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	call	?GetTacticalAnalysisMap@CvGame@@QAEPAVCvTacticalAnalysisMap@@XZ ; CvGame::GetTacticalAnalysisMap
	mov	edi, eax

; 4856 : 	FAssert(pTAMap != NULL);
; 4857 : 	CvTacticalAnalysisCell* pToPlotCell = pTAMap->GetCell(pToPlot->GetPlotIndex());

	mov	ecx, ebx
	mov	DWORD PTR _pTAMap$[esp+88], edi
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	imul	eax, 44					; 0000002cH
	add	eax, DWORD PTR [edi+12]

; 4858 : 	FAssert(pToPlotCell != NULL);
; 4859 : 
; 4860 : #ifdef AUI_ASTAR_FIX_PARENT_NODE_ALWAYS_VALID_OPTIMIZATION
; 4861 : 	// If this is the first node in the path, it is always valid (starting location)
; 4862 : 	if (parent == NULL)
; 4863 : 	{
; 4864 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 4865 : 		// Cache values for this node that we will use in the loop
; 4866 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4867 : 		CvAStarNode& kToNodeCacheData = *node;
; 4868 : #else
; 4869 : 		CvPathNodeCacheData& kToNodeCacheData = node->m_kCostCacheData;
; 4870 : #endif
; 4871 : 		if (!kToNodeCacheData.bIsCalculated)
; 4872 : 		{
; 4873 : 			kToNodeCacheData.bIsCalculated = true;
; 4874 : 			kToNodeCacheData.bPlotVisibleToTeam = true;
; 4875 : 			kToNodeCacheData.iNumFriendlyUnitsOfType = pToPlot->getNumFriendlyUnitsOfType(pUnit);
; 4876 : 			kToNodeCacheData.bIsMountain = pToPlot->isMountain();
; 4877 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 4878 : 			kToNodeCacheData.bIsWater = !pToPlot->IsAllowsWalkWater();
; 4879 : 			if (pUnit->IsHoveringUnit())
; 4880 : 				kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 4881 : 			else
; 4882 : 				kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->isWater();
; 4883 : #else
; 4884 : 			kToNodeCacheData.bIsWater = pToPlotCell->IsWater();
; 4885 : #endif
; 4886 : 			kToNodeCacheData.bCanEnterTerrain = true;
; 4887 : 			kToNodeCacheData.bIsRevealedToTeam = true;
; 4888 : 			kToNodeCacheData.bContainsOtherFriendlyTeamCity = false;
; 4889 : 			CvCity* pCity = pToPlot->getPlotCity();
; 4890 : 			if (pCity)
; 4891 : 			{
; 4892 : 				if (unit_owner != pCity->getOwner() && !kUnitTeam.isAtWar(pCity->getTeam()))
; 4893 : 					kToNodeCacheData.bContainsOtherFriendlyTeamCity = true;
; 4894 : 			}
; 4895 : 			kToNodeCacheData.bContainsEnemyCity = pToPlot->isEnemyCity(*pUnit);
; 4896 : 			if (kToNodeCacheData.bPlotVisibleToTeam)
; 4897 : 			{
; 4898 : 				kToNodeCacheData.bContainsVisibleEnemy = pToPlotCell->GetEnemyMilitaryUnit() != NULL;
; 4899 : 				kToNodeCacheData.bContainsVisibleEnemyDefender = pToPlot->getBestDefender(NO_PLAYER, unit_owner, pUnit).pointer() != NULL;
; 4900 : 			}
; 4901 : 			else
; 4902 : 			{
; 4903 : 				kToNodeCacheData.bContainsVisibleEnemy = false;
; 4904 : 				kToNodeCacheData.bContainsVisibleEnemyDefender = false;
; 4905 : 			}
; 4906 : 		}
; 4907 : #endif
; 4908 : 		return TRUE;
; 4909 : 	}
; 4910 : #endif
; 4911 : 
; 4912 : 	// Cache the data for the node
; 4913 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4914 : 	CvAStarNode& kToNodeCacheData = *node;
; 4915 : #else
; 4916 : 	CvPathNodeCacheData& kToNodeCacheData = node->m_kCostCacheData;
; 4917 : #endif
; 4918 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 4919 : 	if (!kToNodeCacheData.bIsCalculated)
; 4920 : 	{
; 4921 : 		kToNodeCacheData.bPlotVisibleToTeam = pToPlotCell->IsVisible();
; 4922 : 		kToNodeCacheData.iNumFriendlyUnitsOfType = pToPlot->getNumFriendlyUnitsOfType(pUnit);
; 4923 : 		kToNodeCacheData.bIsMountain = pToPlot->isMountain();
; 4924 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 4925 : 		kToNodeCacheData.bIsWater = !pToPlot->IsAllowsWalkWater();
; 4926 : 		if (pUnit->IsHoveringUnit())
; 4927 : 			kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 4928 : 		else
; 4929 : 			kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->isWater();
; 4930 : #else
; 4931 : 		kToNodeCacheData.bIsWater = pToPlotCell->IsWater();
; 4932 : #endif
; 4933 : 		kToNodeCacheData.bIsRevealedToTeam = pToPlotCell->IsRevealed();
; 4934 : 		kToNodeCacheData.bContainsOtherFriendlyTeamCity = false;
; 4935 : 		if (pToPlotCell->IsCity())
; 4936 : 		{
; 4937 : 			CvCity* pCity = pToPlot->getPlotCity();
; 4938 : 			if (pCity)
; 4939 : 			{
; 4940 : 				if (unit_owner != pCity->getOwner() && !kUnitTeam.isAtWar(pCity->getTeam()))
; 4941 : 					kToNodeCacheData.bContainsOtherFriendlyTeamCity = true;
; 4942 : 			}
; 4943 : 		}
; 4944 : 		kToNodeCacheData.bContainsEnemyCity = pToPlotCell->IsEnemyCity();
; 4945 : 		if (kToNodeCacheData.bPlotVisibleToTeam)
; 4946 : 		{
; 4947 : 			kToNodeCacheData.bContainsVisibleEnemy = pToPlotCell->GetEnemyMilitaryUnit() != NULL;
; 4948 : 			kToNodeCacheData.bContainsVisibleEnemyDefender = pToPlot->getBestDefender(NO_PLAYER, unit_owner, pUnit).pointer() != NULL;
; 4949 : 		}
; 4950 : 		else
; 4951 : 		{
; 4952 : 			kToNodeCacheData.bContainsVisibleEnemy = false;
; 4953 : 			kToNodeCacheData.bContainsVisibleEnemyDefender = false;
; 4954 : 		}
; 4955 : 	}
; 4956 : #else
; 4957 : 	kToNodeCacheData.bPlotVisibleToTeam = pToPlotCell->IsVisible();
; 4958 : 	kToNodeCacheData.iNumFriendlyUnitsOfType = pToPlot->getNumFriendlyUnitsOfType(pUnit);

	mov	ecx, DWORD PTR _pointer$[esp+88]
	mov	edi, eax
	mov	eax, DWORD PTR [edi]
	shr	eax, 1
	xor	al, BYTE PTR [esi+88]
	push	1
	and	al, 1
	xor	BYTE PTR [esi+88], al
	push	ecx
	mov	ecx, ebx
	call	?getNumFriendlyUnitsOfType@CvPlot@@QBEHPBVCvUnit@@_N@Z ; CvPlot::getNumFriendlyUnitsOfType
	mov	DWORD PTR [esi+92], eax

; 4959 : 	kToNodeCacheData.bIsMountain = pToPlot->isMountain();

	cmp	BYTE PTR [ebx+5], 0

; 4960 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 4961 : 	kToNodeCacheData.bIsWater = !pToPlot->IsAllowsWalkWater();
; 4962 : 	if (pUnit->IsHoveringUnit())
; 4963 : 		kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->getTerrainType() == GC.getDEEP_WATER_TERRAIN();
; 4964 : 	else
; 4965 : 		kToNodeCacheData.bIsWater = kToNodeCacheData.bIsWater && pToPlot->isWater();
; 4966 : #else
; 4967 : 	kToNodeCacheData.bIsWater = pToPlotCell->IsWater();
; 4968 : #endif
; 4969 : 	kToNodeCacheData.bCanEnterTerrain = pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE);

	push	128					; 00000080H
	sete	dl
	add	dl, dl
	xor	dl, BYTE PTR [esi+88]
	push	ebx
	and	dl, 2
	xor	BYTE PTR [esi+88], dl
	mov	ecx, DWORD PTR [edi]
	mov	al, BYTE PTR [esi+88]
	shr	ecx, 11					; 0000000bH
	add	cl, cl
	add	cl, cl
	xor	cl, al
	and	cl, 4
	xor	cl, al
	mov	BYTE PTR [esi+88], cl
	mov	ecx, DWORD PTR _pointer$[esp+96]
	call	?canEnterTerrain@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canEnterTerrain
	add	al, al
	add	al, al
	add	al, al
	xor	al, BYTE PTR [esi+88]
	and	al, 8
	xor	BYTE PTR [esi+88], al

; 4970 : 	kToNodeCacheData.bIsRevealedToTeam = pToPlotCell->IsRevealed();
; 4971 : 	kToNodeCacheData.bContainsOtherFriendlyTeamCity = false;

	mov	dl, BYTE PTR [edi]
	mov	al, BYTE PTR [esi+88]
	and	dl, 1
	and	al, 207					; 000000cfH
	shl	dl, 4
	or	dl, al
	mov	BYTE PTR [esi+88], dl

; 4972 : 	if(pToPlotCell->IsCity())

	mov	eax, DWORD PTR [edi]
	mov	ecx, eax
	shr	ecx, 8
	test	cl, 1
	jne	SHORT $LN98@TacticalAn
	mov	edx, eax
	shr	edx, 9
	test	dl, 1
	jne	SHORT $LN98@TacticalAn
	shr	eax, 10					; 0000000aH
	test	al, 1
	je	SHORT $LN53@TacticalAn
$LN98@TacticalAn:

; 4973 : 	{
; 4974 : 		CvCity* pCity = pToPlot->getPlotCity();

	mov	eax, DWORD PTR [ebx+104]
	test	eax, eax
	jl	SHORT $LN53@TacticalAn
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN53@TacticalAn
	mov	ecx, DWORD PTR [ebx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 4975 : 		if(pCity)

	test	eax, eax
	je	SHORT $LN53@TacticalAn

; 4976 : 		{
; 4977 : 			if(unit_owner != pCity->getOwner() && !kUnitTeam.isAtWar(pCity->getTeam()))

	mov	edx, DWORD PTR _unit_owner$[esp+92]
	cmp	edx, DWORD PTR [eax+84]
	je	SHORT $LN53@TacticalAn
	mov	ecx, eax
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	push	eax
	mov	ecx, ebp
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	jne	SHORT $LN53@TacticalAn

; 4978 : 				kToNodeCacheData.bContainsOtherFriendlyTeamCity = true;

	or	BYTE PTR [esi+88], 32			; 00000020H
$LN53@TacticalAn:

; 4979 : 		}
; 4980 : 	}
; 4981 : 	kToNodeCacheData.bContainsEnemyCity = pToPlotCell->IsEnemyCity();

	mov	eax, DWORD PTR [edi]

; 4982 : 	kToNodeCacheData.bContainsVisibleEnemy = pToPlotCell->GetEnemyMilitaryUnit() != NULL;
; 4983 : 	kToNodeCacheData.bContainsVisibleEnemyDefender = pToPlot->getBestDefender(NO_PLAYER, unit_owner, pUnit).pointer() != NULL;

	mov	edx, DWORD PTR _pointer$[esp+88]
	shr	eax, 9
	shl	al, 6
	xor	al, BYTE PTR [esi+88]
	push	0
	and	al, 64					; 00000040H
	xor	BYTE PTR [esi+88], al
	cmp	DWORD PTR [edi+4], 0
	mov	al, BYTE PTR [esi+88]
	push	0
	setne	cl
	push	0
	shl	cl, 7
	push	0
	and	al, 127					; 0000007fH
	or	cl, al
	mov	eax, DWORD PTR _unit_owner$[esp+108]
	push	edx
	push	eax
	mov	BYTE PTR [esi+88], cl
	push	-1
	lea	ecx, DWORD PTR $T227006[esp+120]
	push	ecx
	mov	ecx, ebx
	call	?getBestDefender@CvPlot@@QAE?AV?$FObjectHandle@VCvUnit@@@@W4PlayerTypes@@0PBVCvUnit@@_N222@Z ; CvPlot::getBestDefender
	cmp	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T227006[esp+92]
	setne	dl
	xor	dl, BYTE PTR [esi+89]
	and	dl, 1
	xor	BYTE PTR [esi+89], dl
	test	ecx, ecx
	je	SHORT $LN132@TacticalAn
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN132@TacticalAn:

; 4984 : #endif
; 4985 : 
; 4986 : #ifndef AUI_ASTAR_FIX_PARENT_NODE_ALWAYS_VALID_OPTIMIZATION
; 4987 : 	// If this is the first node in the path, it is always valid (starting location)
; 4988 : 	if (parent == NULL)

	cmp	DWORD PTR _parent$[esp+88], 0

; 4989 : 	{
; 4990 : 		return TRUE;

	je	$LN210@TacticalAn

; 4991 : 	}
; 4992 : #endif
; 4993 : 
; 4994 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4995 : 	CvPlot* pFromPlot = parent->m_pPlot;
; 4996 : 	if (!pFromPlot)
; 4997 : 		return FALSE;
; 4998 : #else
; 4999 : 	CvPlot* pFromPlot = theMap.plotUnchecked(parent->m_iX, parent->m_iY);

	mov	ecx, DWORD PTR _parent$[esp+88]
	movsx	edi, WORD PTR [ecx+82]
	mov	eax, DWORD PTR _theMap$[esp+92]
	imul	edi, DWORD PTR [eax+4020]
	movsx	ecx, WORD PTR [ecx+80]
	add	edi, ecx
	imul	edi, 484				; 000001e4H
	add	edi, DWORD PTR [eax+4068]

; 5000 : #endif
; 5001 : 	PREFETCH_FASTAR_CVPLOT(reinterpret_cast<char*>(pFromPlot));

	prefetcht0 BYTE PTR [edi]
	prefetcht0 BYTE PTR [edi+64]

; 5002 : 
; 5003 : 	CvTacticalAnalysisCell* pFromPlotCell = pTAMap->GetCell(pFromPlot->GetPlotIndex());

	mov	ecx, edi
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	imul	eax, 44					; 0000002cH
	mov	edx, DWORD PTR _pTAMap$[esp+88]
	add	eax, DWORD PTR [edx+12]

; 5004 : 	FAssert(pFromPlotCell != NULL);
; 5005 : 
; 5006 : 	bool bAIControl = pUnit->IsAutomated();

	mov	ecx, DWORD PTR _pointer$[esp+88]
	mov	ebp, eax
	call	?IsAutomated@CvUnit@@QBE_NXZ		; CvUnit::IsAutomated

; 5007 : 
; 5008 : 	// pulling invariants out of the loop
; 5009 : 	int iUnitX = pUnit->getX();

	mov	ecx, DWORD PTR _pointer$[esp+88]

; 5010 : 	int iUnitY = pUnit->getY();

	mov	edx, DWORD PTR [ecx+88]

; 5011 : 	DomainTypes unit_domain_type = pCacheData->getDomainType();
; 5012 : 	bool bUnitIsCombat           = pUnit->IsCombatUnit();

	cmp	DWORD PTR [ecx+1044], 0
	mov	BYTE PTR _bAIControl$[esp+92], al
	mov	eax, DWORD PTR [ecx+76]
	mov	DWORD PTR _iUnitX$[esp+92], eax
	mov	eax, DWORD PTR _finder$[esp+88]
	mov	DWORD PTR _iUnitY$[esp+92], edx
	mov	edx, DWORD PTR [eax+148]
	mov	DWORD PTR _unit_domain_type$[esp+92], edx

; 5013 : 	bool bIsHuman				 = pCacheData->isHuman();

	mov	dl, BYTE PTR [eax+152]

; 5014 : 	int iFinderInfo              = finder->GetInfo();

	mov	eax, DWORD PTR [eax+72]
	setg	BYTE PTR _bUnitIsCombat$[esp+92]
	mov	BYTE PTR _bIsHuman$[esp+92], dl
	mov	DWORD PTR _iFinderInfo$[esp+92], eax

; 5015 : 	CvPlot* pUnitPlot            = pUnit->plot();

	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot

; 5016 : 	int iFinderIgnoreStacking    = iFinderInfo & MOVE_IGNORE_STACKING;
; 5017 : 	int iUnitPlotLimit           = GC.getPLOT_UNIT_LIMIT();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7356
	mov	DWORD PTR _pUnitPlot$[esp+92], eax
	mov	eax, DWORD PTR _iFinderInfo$[esp+92]
	and	eax, 4
	mov	DWORD PTR _iFinderIgnoreStacking$[esp+92], eax

; 5018 : 	bool bFromPlotOwned          = !pFromPlotCell->IsUnclaimedTerritory();

	mov	al, BYTE PTR [ebp+2]
	not	al
	and	al, 1
	mov	BYTE PTR _bFromPlotOwned$[esp+92], al

; 5019 : 	TeamTypes eFromPlotTeam      = pFromPlot->getTeam();

	movsx	eax, BYTE PTR [edi+4]
	mov	DWORD PTR _iUnitPlotLimit$[esp+92], ecx
	cmp	eax, -1
	je	SHORT $LN167@TacticalAn
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN174@TacticalAn
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _eFromPlotTeam$[esp+92], eax
	jmp	SHORT $LN166@TacticalAn
$LN174@TacticalAn:
	or	eax, -1
	mov	DWORD PTR _eFromPlotTeam$[esp+92], eax
	jmp	SHORT $LN166@TacticalAn
$LN167@TacticalAn:
	mov	DWORD PTR _eFromPlotTeam$[esp+92], -1
$LN166@TacticalAn:

; 5020 : 
; 5021 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 5022 : 	if (!kToNodeCacheData.bIsCalculated)
; 5023 : 	{
; 5024 : 		if (bAIControl || !bIsHuman || kToNodeCacheData.bIsRevealedToTeam)
; 5025 : 			kToNodeCacheData.bCanEnterTerrain = pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE);
; 5026 : 		else
; 5027 : 			kToNodeCacheData.bCanEnterTerrain = true;
; 5028 : 		kToNodeCacheData.bIsCalculated = true;
; 5029 : 	}
; 5030 : #endif
; 5031 : 
; 5032 : 	// We have determined that this node is not the origin above (parent == NULL)
; 5033 : 	CvAStarNode* pNode = node;
; 5034 : 	bool bPreviousNodeHostile = false;
; 5035 : 	int iDestX = finder->GetDestX();

	mov	ecx, DWORD PTR _finder$[esp+88]
	mov	edx, DWORD PTR [ecx+64]

; 5036 : 	int iDestY = finder->GetDestY();

	mov	ecx, DWORD PTR [ecx+68]

; 5037 : 	int iNodeX = node->m_iX;

	movsx	ebp, WORD PTR [esi+80]
	mov	DWORD PTR _iDestX$[esp+92], edx

; 5038 : 	int iNodeY = node->m_iY;

	movsx	edx, WORD PTR [esi+82]
	mov	DWORD PTR _iDestY$[esp+92], ecx

; 5039 : 	int iOldNumTurns = -1;
; 5040 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 5041 : 	int iNumTurns;
; 5042 : #endif
; 5043 : 	TeamTypes eTeam = eUnitTeam; // this may get modified later is eTEam == NO_TEAM
; 5044 : 
; 5045 : 	// First run special case for checking "node" since it doesn't have a parent set yet
; 5046 : 	bool bFirstRun = true;
; 5047 : 
; 5048 : 	// Have to calculate this specially because the node passed into this function doesn't yet have data stored it in (hasn't reached pathAdd yet)
; 5049 : 	int iStartMoves = parent->m_iData1;
; 5050 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 5051 : 	int iNumTurns = parent->m_iData2;
; 5052 : #else
; 5053 : 	iNumTurns = parent->m_iData2;

	mov	ecx, DWORD PTR _parent$[esp+88]

; 5054 : #endif
; 5055 : #if defined(AUI_ASTAR_TURN_LIMITER)
; 5056 : 	int iMaxTurns = finder->GetMaxTurns();
; 5057 : #endif
; 5058 : 
; 5059 : 	if(iStartMoves == 0)

	cmp	DWORD PTR [ecx+12], 0
	mov	DWORD PTR _iNodeY$[esp+92], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, esi
	mov	BYTE PTR _bPreviousNodeHostile$[esp+88], 0
	mov	DWORD PTR _iNodeX$[esp+92], ebp
	mov	BYTE PTR _bFirstRun$[esp+92], 1
	mov	DWORD PTR _iNumTurns$[esp+92], edx
	jne	SHORT $LN198@TacticalAn

; 5060 : 	{
; 5061 : 		iNumTurns++;

	inc	DWORD PTR _iNumTurns$[esp+92]
$LN198@TacticalAn:

; 5062 : 	}
; 5063 : 
; 5064 : 	iOldNumTurns = -1;

	or	ecx, -1
$LL50@TacticalAn:

; 5065 : 
; 5066 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 5067 : 	CvAStarNode& kFromNodeCacheData = *parent;
; 5068 : #else
; 5069 : 	CvPlot* pPlot = NULL;
; 5070 : 
; 5071 : 	// Get a reference to the parent node cache data
; 5072 : 	CvPathNodeCacheData& kFromNodeCacheData = parent->m_kCostCacheData;
; 5073 : #endif
; 5074 : 
; 5075 : 	// Loop through the current path until we find the path origin.
; 5076 : 	// This validates the path with the inclusion of the new path node.  We must do this because of the rules of where a unit can finish a turn.
; 5077 : 	// Please note that this can be an expensive loop as the path gets longer and longer, do as little work as possible in validating each node.  
; 5078 : 	// If there is an invariant value that needs to be fetched from the plot or unit for the node, please do the calculation and put it in the node's data cache.
; 5079 : 	while(pNode != NULL)
; 5080 : 	{
; 5081 : #ifdef AUI_ASTAR_TURN_LIMITER
; 5082 : 		if (iNumTurns > iMaxTurns)
; 5083 : 		{
; 5084 : 			return FALSE; // Path is too long, terminate now
; 5085 : 		}
; 5086 : #endif
; 5087 : 
; 5088 : 		PREFETCH_FASTAR_NODE(pNode->m_pParent);

	mov	edx, DWORD PTR [eax+24]
	prefetcht0 BYTE PTR [edx]
	prefetcht0 BYTE PTR [edx+64]
	add	edx, 64					; 00000040H

; 5089 : 
; 5090 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 5091 : 		CvAStarNode& kNodeCacheData = *pNode;
; 5092 : #else
; 5093 : 		CvPathNodeCacheData& kNodeCacheData = pNode->m_kCostCacheData;
; 5094 : #endif
; 5095 : 		// This is a safeguard against the algorithm believing a plot to be impassable before actually knowing it (mid-search)
; 5096 : 		if(iOldNumTurns != -1 || (iDestX == iNodeX && iDestY == iNodeY))

	cmp	ecx, -1
	jne	SHORT $LN205@TacticalAn
	cmp	DWORD PTR _iDestX$[esp+92], ebp
	jne	$LN203@TacticalAn
	mov	edx, DWORD PTR _iDestY$[esp+92]
	cmp	edx, DWORD PTR _iNodeY$[esp+92]
	jne	$LN203@TacticalAn
	mov	ebp, DWORD PTR _iNodeX$[esp+92]
$LN205@TacticalAn:

; 5097 : 		{
; 5098 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 5099 : 			if (!kNodeCacheData.bCanEnterTerrain)	// since this gets cached for each node anyway during buildup, it should be used whereever possible
; 5100 : 			{
; 5101 : 				return FALSE;
; 5102 : 			}
; 5103 : #endif
; 5104 : 			// This plot is of greater distance than previously, so we know the unit is ending its turn here (pNode), or it's trying to attack through a unit (and might end up on this tile if an attack fails to kill the enemy)
; 5105 : 			if(iNumTurns != iOldNumTurns || bPreviousNodeHostile)

	cmp	DWORD PTR _iNumTurns$[esp+92], ecx
	jne	SHORT $LN45@TacticalAn
	cmp	BYTE PTR _bPreviousNodeHostile$[esp+88], 0
	je	$LN203@TacticalAn
$LN45@TacticalAn:

; 5106 : 			{
; 5107 : 				// Don't count origin, or else a unit will block its own movement!
; 5108 : 				if(iNodeX != iUnitX || iNodeY != iUnitY)

	cmp	ebp, DWORD PTR _iUnitX$[esp+92]
	jne	SHORT $LN43@TacticalAn
	mov	ecx, DWORD PTR _iNodeY$[esp+92]
	cmp	ecx, DWORD PTR _iUnitY$[esp+92]
	je	SHORT $LN203@TacticalAn
$LN43@TacticalAn:

; 5109 : 				{
; 5110 : 					// PREFETCH_FASTAR_CVPLOT(reinterpret_cast<char*>(pPlot));
; 5111 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 5112 : 					if (kNodeCacheData.bIsRevealedToTeam)
; 5113 : #else
; 5114 : 					if(kNodeCacheData.bPlotVisibleToTeam)

	mov	cl, BYTE PTR [eax+88]
	test	cl, 1
	je	SHORT $LN207@TacticalAn

; 5115 : #endif
; 5116 : 					{
; 5117 : 						// Check to see if any units are present at this full-turn move plot... if the player can see what's there
; 5118 : 						if(kNodeCacheData.iNumFriendlyUnitsOfType >= iUnitPlotLimit && !(iFinderIgnoreStacking))

	mov	edx, DWORD PTR _iUnitPlotLimit$[esp+92]
	cmp	DWORD PTR [eax+92], edx
	jl	SHORT $LN41@TacticalAn
	cmp	DWORD PTR _iFinderIgnoreStacking$[esp+92], 0
	je	$LN190@TacticalAn
$LN41@TacticalAn:

; 5119 : 						{
; 5120 : 							return FALSE;
; 5121 : 						}
; 5122 : 
; 5123 : #ifndef AUI_ASTAR_FIX_PATH_VALID_PATH_PEAKS_FOR_NONHUMAN
; 5124 : 						if (kNodeCacheData.bIsMountain && !(iFinderIgnoreStacking) && (!bIsHuman || bAIControl))

	shr	cl, 1
	and	cl, 1
	je	SHORT $LN206@TacticalAn
	cmp	DWORD PTR _iFinderIgnoreStacking$[esp+92], 0
	jne	SHORT $LN206@TacticalAn
	cmp	BYTE PTR _bIsHuman$[esp+92], 0
	je	$LN190@TacticalAn
	cmp	BYTE PTR _bAIControl$[esp+92], 0
	jne	$LN190@TacticalAn
$LN206@TacticalAn:

; 5125 : 						{
; 5126 : 							return FALSE;
; 5127 : 						}
; 5128 : #endif
; 5129 : 
; 5130 : #ifndef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 5131 : 						if(kNodeCacheData.bIsMountain && !kNodeCacheData.bCanEnterTerrain)	// only doing canEnterTerrain on mountain plots because it is expensive, though it probably should always be called and some other checks in this loop could be removed.

	test	cl, cl
	je	SHORT $LN38@TacticalAn
	test	BYTE PTR [eax+88], 8
	je	$LN190@TacticalAn
$LN38@TacticalAn:

; 5132 : 						{
; 5133 : 							return FALSE;
; 5134 : 						}
; 5135 : #endif
; 5136 : 
; 5137 : 						if ((finder->GetInfo() & CvUnit::MOVEFLAG_STAY_ON_LAND) && kNodeCacheData.bIsWater)

	mov	ecx, DWORD PTR _finder$[esp+88]
	test	DWORD PTR [ecx+72], 256			; 00000100H
	je	SHORT $LN207@TacticalAn
	test	BYTE PTR [eax+88], 4
	jne	$LN190@TacticalAn
$LN207@TacticalAn:

; 5138 : 						{
; 5139 : 							return FALSE;
; 5140 : 						}
; 5141 : #ifndef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 5142 : 					}
; 5143 : 
; 5144 : 					if(kNodeCacheData.bIsRevealedToTeam)

	mov	cl, BYTE PTR [eax+88]
	test	cl, 16					; 00000010H
	je	SHORT $LN203@TacticalAn

; 5145 : 					{
; 5146 : #endif
; 5147 : 						if (kNodeCacheData.bContainsOtherFriendlyTeamCity && !(iFinderIgnoreStacking))

	test	cl, 32					; 00000020H
	je	SHORT $LN203@TacticalAn
	cmp	DWORD PTR _iFinderIgnoreStacking$[esp+92], 0
	je	$LN190@TacticalAn
$LN203@TacticalAn:

; 5148 : 							return FALSE;
; 5149 : 					}
; 5150 : 				}
; 5151 : 			}
; 5152 : 		}
; 5153 : 
; 5154 : 		bPreviousNodeHostile = false;
; 5155 : 		if(kNodeCacheData.bContainsEnemyCity)

	mov	cl, BYTE PTR [eax+88]
	mov	BYTE PTR _bPreviousNodeHostile$[esp+88], 0
	test	cl, 64					; 00000040H

; 5156 : 		{
; 5157 : 			bPreviousNodeHostile = true;

	jne	SHORT $LN211@TacticalAn

; 5158 : 		}
; 5159 : 		// Prevents units from passing through one another on its way to attack another unit
; 5160 : 		else if(kNodeCacheData.bContainsVisibleEnemy)

	test	cl, cl
	jns	SHORT $LN31@TacticalAn

; 5161 : 		{
; 5162 : 			// except when attacking an unguarded civilian unit
; 5163 : 			if(kNodeCacheData.bContainsVisibleEnemyDefender)

	test	BYTE PTR [eax+89], 1
	je	SHORT $LN31@TacticalAn
$LN211@TacticalAn:

; 5164 : 			{
; 5165 : 				bPreviousNodeHostile = true;

	mov	BYTE PTR _bPreviousNodeHostile$[esp+88], 1
$LN31@TacticalAn:

; 5166 : 			}
; 5167 : 		}
; 5168 : 
; 5169 : 		// JON - Special case for the original node passed into this function because it's not yet linked to any parent
; 5170 : 		if(pNode == node && bFirstRun)

	cmp	eax, esi
	jne	SHORT $LN30@TacticalAn
	cmp	BYTE PTR _bFirstRun$[esp+92], 0
	je	SHORT $LN30@TacticalAn

; 5171 : 		{
; 5172 : 			pNode = parent;

	mov	eax, DWORD PTR _parent$[esp+88]

; 5173 : 			bFirstRun = false;

	mov	BYTE PTR _bFirstRun$[esp+92], 0

; 5174 : 		}
; 5175 : 		else

	jmp	SHORT $LN29@TacticalAn
$LN30@TacticalAn:

; 5176 : 		{
; 5177 : 			pNode = pNode->m_pParent;

	mov	eax, DWORD PTR [eax+24]
$LN29@TacticalAn:

; 5178 : 		}
; 5179 : 
; 5180 : 		if(pNode != NULL)

	test	eax, eax
	je	SHORT $LN49@TacticalAn

; 5181 : 		{
; 5182 : 
; 5183 : 			iNodeX = pNode->m_iX;
; 5184 : 			iNodeY = pNode->m_iY;

	movsx	edx, WORD PTR [eax+82]
	movsx	ebp, WORD PTR [eax+80]

; 5185 : 			iOldNumTurns = iNumTurns;

	mov	ecx, DWORD PTR _iNumTurns$[esp+92]
	mov	DWORD PTR _iNodeY$[esp+92], edx

; 5186 : 			iNumTurns = pNode->m_iData2;

	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _iNodeX$[esp+92], ebp
	mov	DWORD PTR _iNumTurns$[esp+92], edx
	jmp	$LL50@TacticalAn
$LN49@TacticalAn:

; 5187 : 		}
; 5188 : 	}
; 5189 : 
; 5190 : 	// slewis - moved this up so units can't move directly into the water. Not 100% sure this is the right solution.
; 5191 : 	if(unit_domain_type == DOMAIN_LAND)

	mov	eax, DWORD PTR _unit_domain_type$[esp+92]
	cmp	eax, 2
	jne	SHORT $LN25@TacticalAn

; 5192 : 	{
; 5193 : 		if(!kFromNodeCacheData.bIsWater && kToNodeCacheData.bIsWater && kToNodeCacheData.bIsRevealedToTeam && !pUnit->canEmbarkOnto(*pFromPlot, *pToPlot, true))

	mov	eax, DWORD PTR _parent$[esp+88]
	test	BYTE PTR [eax+88], 4
	jne	SHORT $LN201@TacticalAn
	mov	al, BYTE PTR [esi+88]
	test	al, 4
	je	SHORT $LN201@TacticalAn
	test	al, 16					; 00000010H
	je	SHORT $LN201@TacticalAn
	mov	ebp, DWORD PTR _pointer$[esp+88]
	push	0
	push	1
	push	ebx
	push	edi
	mov	ecx, ebp
	call	?canEmbarkOnto@CvUnit@@QBE_NABVCvPlot@@0_N1@Z ; CvUnit::canEmbarkOnto
	test	al, al
	jne	SHORT $LN197@TacticalAn

; 5194 : 		{
; 5195 : #ifdef AUI_UNIT_FIX_HOVERING_EMBARK
; 5196 : 			if (!pUnit->canMoveAllTerrain())
; 5197 : #else
; 5198 : 			if(!pUnit->IsHoveringUnit() && !pUnit->canMoveAllTerrain() && !pToPlot->IsAllowsWalkWater())

	mov	ecx, ebp
	call	?IsHoveringUnit@CvUnit@@QBE_NXZ		; CvUnit::IsHoveringUnit
	test	al, al
	jne	SHORT $LN197@TacticalAn
	mov	ecx, ebp
	call	?canMoveAllTerrain@CvUnit@@QBE_NXZ	; CvUnit::canMoveAllTerrain
	test	al, al
	jne	SHORT $LN197@TacticalAn
	mov	ecx, ebx
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN197@TacticalAn
$LN190@TacticalAn:
	pop	edi
	pop	esi
	pop	ebp

; 5199 : #endif
; 5200 : 			{
; 5201 : 				return FALSE;

	xor	eax, eax
	pop	ebx

; 5338 : }

	add	esp, 76					; 0000004cH
	ret	0
$LN25@TacticalAn:

; 5202 : 			}
; 5203 : 		}
; 5204 : 	}
; 5205 : 
; 5206 : #ifndef AUI_ASTAR_FIX_RADAR
; 5207 : 	if(!bUnitIsCombat && unit_domain_type != DOMAIN_AIR)
; 5208 : 	{
; 5209 : 		const PlayerTypes eUnitPlayer = unit_owner;
; 5210 : 		const int iUnitCount = pToPlot->getNumUnits();
; 5211 : 		for(int iUnit = 0; iUnit < iUnitCount; ++iUnit)
; 5212 : 		{
; 5213 : 			const CvUnit* pToPlotUnit = pToPlot->getUnitByIndex(iUnit);
; 5214 : 			if(pToPlotUnit != NULL && pToPlotUnit->getOwner() != eUnitPlayer)
; 5215 : 			{
; 5216 : 				return FALSE; // Plot occupied by another player
; 5217 : 			}
; 5218 : 		}
; 5219 : 	}
; 5220 : #endif
; 5221 : 
; 5222 : 	// slewis - Added to catch when the unit is adjacent to an enemy unit while it is stacked with a friendly unit.
; 5223 : 	//          The logic above (with bPreviousNodeHostile) catches this problem with a path that's longer than one step
; 5224 : 	//          but does not catch when the path is only one step.
; 5225 : #ifdef AUI_ASTAR_FIX_RADAR
; 5226 : 	if (unit_domain_type != DOMAIN_AIR && pUnitPlot->isAdjacent(pToPlot) && kToNodeCacheData.bContainsVisibleEnemy && !(iFinderIgnoreStacking))

	cmp	eax, 1
	je	SHORT $LN202@TacticalAn
$LN201@TacticalAn:
	mov	ebp, DWORD PTR _pointer$[esp+88]
$LN197@TacticalAn:
	push	ebx
	mov	ebx, DWORD PTR _pUnitPlot$[esp+96]
	mov	ecx, ebx
	call	?isAdjacent@CvPlot@@QBE_NPBV1@@Z	; CvPlot::isAdjacent
	test	al, al
	je	SHORT $LN22@TacticalAn
	test	BYTE PTR [esi+88], 128			; 00000080H
	je	SHORT $LN22@TacticalAn
	cmp	DWORD PTR _iFinderIgnoreStacking$[esp+92], 0
	jne	SHORT $LN22@TacticalAn

; 5227 : #else
; 5228 : 	if(bUnitIsCombat && unit_domain_type != DOMAIN_AIR && pUnitPlot->isAdjacent(pToPlot) && kToNodeCacheData.bContainsVisibleEnemy && !(iFinderIgnoreStacking))
; 5229 : #endif
; 5230 : 	{
; 5231 : 		if(kToNodeCacheData.bContainsVisibleEnemyDefender)

	test	BYTE PTR [esi+89], 1
	je	SHORT $LN22@TacticalAn

; 5232 : 		{
; 5233 : 			if(pUnitPlot->getNumFriendlyUnitsOfType(pUnit) > iUnitPlotLimit)

	push	1
	push	ebp
	mov	ecx, ebx
	call	?getNumFriendlyUnitsOfType@CvPlot@@QBEHPBVCvUnit@@_N@Z ; CvPlot::getNumFriendlyUnitsOfType
	cmp	eax, DWORD PTR _iUnitPlotLimit$[esp+92]
	jle	SHORT $LN22@TacticalAn
	pop	edi
	pop	esi
	pop	ebp

; 5234 : 			{
; 5235 : 				return FALSE;

	xor	eax, eax
	pop	ebx

; 5338 : }

	add	esp, 76					; 0000004cH
	ret	0
$LN202@TacticalAn:

; 5232 : 		{
; 5233 : 			if(pUnitPlot->getNumFriendlyUnitsOfType(pUnit) > iUnitPlotLimit)

	mov	ebp, DWORD PTR _pointer$[esp+88]
	mov	ebx, DWORD PTR _pUnitPlot$[esp+92]
$LN22@TacticalAn:

; 5236 : 			}
; 5237 : 		}
; 5238 : 	}
; 5239 : 
; 5240 : 	if(pUnitPlot == pFromPlot)

	cmp	ebx, edi

; 5241 : 	{
; 5242 : 		return TRUE;

	je	$LN210@TacticalAn

; 5243 : 	}
; 5244 : 
; 5245 : 	if(iFinderInfo & MOVE_TERRITORY_NO_UNEXPLORED)

	mov	bl, BYTE PTR _iFinderInfo$[esp+92]
	test	bl, 1
	je	SHORT $LN199@TacticalAn

; 5246 : 	{
; 5247 : 		if(!kFromNodeCacheData.bIsRevealedToTeam)

	mov	ecx, DWORD PTR _parent$[esp+88]
	test	BYTE PTR [ecx+88], 16			; 00000010H

; 5248 : 		{
; 5249 : 			return FALSE;

	je	SHORT $LN190@TacticalAn

; 5250 : 		}
; 5251 : 
; 5252 : 		if(bFromPlotOwned)

	cmp	BYTE PTR _bFromPlotOwned$[esp+92], 0
	je	SHORT $LN199@TacticalAn

; 5253 : 		{
; 5254 : 			if(eFromPlotTeam != eUnitTeam)

	mov	edx, DWORD PTR _eFromPlotTeam$[esp+92]
	cmp	edx, DWORD PTR _eUnitTeam$[esp+92]

; 5255 : 			{
; 5256 : 				return FALSE;

	jne	$LN190@TacticalAn
$LN199@TacticalAn:

; 5257 : 			}
; 5258 : 		}
; 5259 : 	}
; 5260 : 
; 5261 : 	if(iFinderInfo & MOVE_TERRITORY_NO_ENEMY)

	test	bl, 2
	je	SHORT $LN14@TacticalAn

; 5262 : 	{
; 5263 : 		if(bFromPlotOwned)

	cmp	BYTE PTR _bFromPlotOwned$[esp+92], 0
	je	SHORT $LN14@TacticalAn

; 5264 : 		{
; 5265 : 			if(atWar(eFromPlotTeam, eUnitTeam))

	mov	eax, DWORD PTR _eUnitTeam$[esp+92]
	mov	ecx, DWORD PTR _eFromPlotTeam$[esp+92]
	push	eax
	push	ecx
	call	?atWar@@YA_NW4TeamTypes@@0@Z		; atWar
	add	esp, 8
	test	al, al

; 5266 : 			{
; 5267 : 				return FALSE;

	jne	$LN190@TacticalAn
$LN14@TacticalAn:

; 5268 : 			}
; 5269 : 		}
; 5270 : 	}
; 5271 : 
; 5272 : 	if(bAIControl)

	cmp	BYTE PTR _bAIControl$[esp+92], 0
	je	SHORT $LN194@TacticalAn

; 5273 : 	{
; 5274 : 		if((parent->m_iData2 > 1) || (parent->m_iData1 == 0))

	mov	eax, DWORD PTR _parent$[esp+88]
	cmp	DWORD PTR [eax+16], 1
	jg	SHORT $LN11@TacticalAn
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN209@TacticalAn
$LN11@TacticalAn:

; 5275 : 		{
; 5276 : 			if(!(iFinderInfo & MOVE_UNITS_IGNORE_DANGER))

	test	bl, 8
	jne	SHORT $LN209@TacticalAn

; 5277 : 			{
; 5278 : 				if(!bUnitIsCombat || pUnit->getArmyID() == FFreeList::INVALID_INDEX)

	cmp	BYTE PTR _bUnitIsCombat$[esp+92], 0
	je	SHORT $LN8@TacticalAn
	mov	ecx, ebp
	call	?getArmyID@CvUnit@@QBEHXZ		; CvUnit::getArmyID
	cmp	eax, -1
	jne	SHORT $LN209@TacticalAn
$LN8@TacticalAn:

; 5279 : 				{
; 5280 : #ifdef AUI_ASTAR_FIX_CONSIDER_DANGER_USES_TO_PLOT_NOT_FROM_PLOT
; 5281 : #ifdef AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH
; 5282 : #ifdef AUI_ASTAR_FIX_CONSIDER_DANGER_ONLY_POSITIVE_DANGER_DELTA
; 5283 : 					if (GET_PLAYER(unit_owner).GetPlotDanger(*pToPlot) > pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH &&
; 5284 : 						GET_PLAYER(unit_owner).GetPlotDanger(*pFromPlot) <= pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 5285 : #else
; 5286 : 					if (GET_PLAYER(unit_owner).GetPlotDanger(*pToPlot) > pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 5287 : #endif
; 5288 : #elif defined(AUI_ASTAR_FIX_CONSIDER_DANGER_ONLY_POSITIVE_DANGER_DELTA)
; 5289 : 					if (GET_PLAYER(unit_owner).GetPlotDanger(*pToPlot) > 0 && GET_PLAYER(pUnit->getOwner()).GetPlotDanger(*pFromPlot) <= 0)
; 5290 : #else
; 5291 : 					if (GET_PLAYER(unit_owner).GetPlotDanger(*pToPlot) > 0)
; 5292 : #endif
; 5293 : #elif defined(AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 5294 : 					if (GET_PLAYER(unit_owner).GetPlotDanger(*pFromPlot) > pCacheData->baseCombatStrengthConsideringDamage() * AUI_ASTAR_FIX_CONSIDER_DANGER_USES_COMBAT_STRENGTH)
; 5295 : #else
; 5296 : 					if(GET_PLAYER(unit_owner).GetPlotDanger(*pFromPlot) > 0)

	mov	eax, DWORD PTR _unit_owner$[esp+92]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	edi
	mov	ecx, eax
	call	?GetPlotDanger@CvPlayer@@QBEHAAVCvPlot@@@Z ; CvPlayer::GetPlotDanger
	test	eax, eax
	jle	SHORT $LN209@TacticalAn
	pop	edi
	pop	esi
	pop	ebp

; 5297 : #endif
; 5298 : 					{
; 5299 : 						return FALSE;

	xor	eax, eax
	pop	ebx

; 5338 : }

	add	esp, 76					; 0000004cH
	ret	0
$LN194@TacticalAn:

; 5300 : 					}
; 5301 : 				}
; 5302 : 			}
; 5303 : 		}
; 5304 : 	}
; 5305 : 
; 5306 : 	// slewis - added AI check and embark check to prevent units from moving into unexplored areas
; 5307 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 5308 : 	if (bAIControl || !bIsHuman || kFromNodeCacheData.bIsRevealedToTeam)
; 5309 : #else
; 5310 : 	if(bAIControl || !bIsHuman || kFromNodeCacheData.bIsRevealedToTeam || pCacheData->isEmbarked())

	cmp	BYTE PTR _bIsHuman$[esp+92], 0
	je	SHORT $LN209@TacticalAn
	mov	edx, DWORD PTR _parent$[esp+88]
	test	BYTE PTR [edx+88], 16			; 00000010H
	jne	SHORT $LN209@TacticalAn
	mov	eax, DWORD PTR _finder$[esp+88]
	cmp	BYTE PTR [eax+157], 0
	je	SHORT $LN210@TacticalAn
$LN209@TacticalAn:

; 5311 : #endif
; 5312 : 	{
; 5313 : 		if(iFinderInfo & MOVE_UNITS_THROUGH_ENEMY)
; 5314 : 		{
; 5315 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 5316 : 			if (!(pUnit->canMoveOrAttackInto(*pFromPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE, kFromNodeCacheData.bCanEnterTerrain, true)))
; 5317 : #else
; 5318 : 			if(!(pUnit->canMoveOrAttackInto(*pFromPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE)))

	push	128					; 00000080H
	mov	ecx, ebp
	push	edi
	test	bl, 16					; 00000010H
	je	SHORT $LN4@TacticalAn
	call	?canMoveOrAttackInto@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveOrAttackInto
	test	al, al
	jne	SHORT $LN210@TacticalAn
	pop	edi
	pop	esi
	pop	ebp

; 5319 : #endif
; 5320 : 			{
; 5321 : 				return FALSE;

	xor	eax, eax
	pop	ebx

; 5338 : }

	add	esp, 76					; 0000004cH
	ret	0
$LN4@TacticalAn:

; 5322 : 			}
; 5323 : 		}
; 5324 : 		else
; 5325 : 		{
; 5326 : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 5327 : 			if (!(pUnit->canMoveThrough(*pFromPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE, kFromNodeCacheData.bCanEnterTerrain, true)))
; 5328 : #else
; 5329 : 			if(!(pUnit->canMoveThrough(*pFromPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE)))

	call	?canMoveThrough@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canMoveThrough
	test	al, al

; 5330 : #endif
; 5331 : 			{
; 5332 : 				return FALSE;

	je	$LN190@TacticalAn
$LN210@TacticalAn:
	pop	edi
	pop	esi
	pop	ebp

; 5333 : 			}
; 5334 : 		}
; 5335 : 	}
; 5336 : 
; 5337 : 	return TRUE;

	mov	eax, 1
	pop	ebx

; 5338 : }

	add	esp, 76					; 0000004cH
	ret	0
?TacticalAnalysisMapPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; TacticalAnalysisMapPathValid
_TEXT	ENDS
PUBLIC	?FindValidDestinationDest@@YAHHHPBXPAVCvAStar@@@Z ; FindValidDestinationDest
EXTRN	?getNumVisibleEnemyDefenders@CvPlot@@QBEHPBVCvUnit@@@Z:PROC ; CvPlot::getNumVisibleEnemyDefenders
; Function compile flags: /Ogtpy
;	COMDAT ?FindValidDestinationDest@@YAHHHPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_iToX$ = 8						; size = 4
_iToY$ = 12						; size = 4
_pointer$ = 16						; size = 4
_finder$ = 20						; size = 4
?FindValidDestinationDest@@YAHHHPBXPAVCvAStar@@@Z PROC	; FindValidDestinationDest, COMDAT

; 5347 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 5348 : 	CvPlot* pToPlot = GC.getMap().plotUnchecked(iToX, iToY);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax+4020]
	imul	esi, DWORD PTR _iToY$[esp+4]
	add	esi, DWORD PTR _iToX$[esp+4]

; 5349 : 
; 5350 : 	if(pToPlot->getNumFriendlyUnitsOfType(pUnit) >= GC.getPLOT_UNIT_LIMIT())

	mov	ebx, DWORD PTR _pointer$[esp+4]
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [eax+4068]
	push	edi
	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7356
	push	1
	push	ebx
	mov	ecx, esi
	call	?getNumFriendlyUnitsOfType@CvPlot@@QBEHPBVCvUnit@@_N@Z ; CvPlot::getNumFriendlyUnitsOfType
	cmp	eax, edi
	jl	SHORT $LN3@FindValidD
$LN20@FindValidD:
	pop	edi
	pop	esi

; 5351 : 	{
; 5352 : #ifdef AUI_WARNING_FIXES
; 5353 : 		return FALSE;
; 5354 : #else
; 5355 : 		return false;

	xor	eax, eax
	pop	ebx

; 5381 : #endif
; 5382 : }

	ret	0
$LN3@FindValidD:

; 5356 : #endif
; 5357 : 	}
; 5358 : 
; 5359 : 	if(pToPlot->getNumVisibleEnemyDefenders(pUnit) > 0)

	push	ebx
	mov	ecx, esi
	call	?getNumVisibleEnemyDefenders@CvPlot@@QBEHPBVCvUnit@@@Z ; CvPlot::getNumVisibleEnemyDefenders
	test	eax, eax

; 5360 : 	{
; 5361 : #ifdef AUI_WARNING_FIXES
; 5362 : 		return FALSE;
; 5363 : #else
; 5364 : 		return false;

	jg	SHORT $LN20@FindValidD

; 5365 : #endif
; 5366 : 	}
; 5367 : 
; 5368 : 	// can't capture the unit with a non-combat unit
; 5369 : 	if(!pUnit->IsCombatUnit() && pToPlot->isVisibleEnemyUnit(pUnit))

	cmp	DWORD PTR [ebx+1044], 0
	jg	SHORT $LN1@FindValidD
	push	ebx
	mov	ecx, esi
	call	?isVisibleEnemyUnit@CvPlot@@QBE_NPBVCvUnit@@@Z ; CvPlot::isVisibleEnemyUnit
	test	al, al

; 5370 : 	{
; 5371 : #ifdef AUI_WARNING_FIXES
; 5372 : 		return FALSE;
; 5373 : 	}
; 5374 : 
; 5375 : 	return TRUE;
; 5376 : #else
; 5377 : 		return false;

	jne	SHORT $LN20@FindValidD
$LN1@FindValidD:
	pop	edi
	pop	esi

; 5378 : 	}
; 5379 : 
; 5380 : 	return true;

	mov	eax, 1
	pop	ebx

; 5381 : #endif
; 5382 : }

	ret	0
?FindValidDestinationDest@@YAHHHPBXPAVCvAStar@@@Z ENDP	; FindValidDestinationDest
_TEXT	ENDS
PUBLIC	?FindValidDestinationPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; FindValidDestinationPathValid
; Function compile flags: /Ogtpy
;	COMDAT ?FindValidDestinationPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?FindValidDestinationPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; FindValidDestinationPathValid, COMDAT

; 5387 : 	CvUnit* pUnit = ((CvUnit*)pointer);
; 5388 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 5389 : 	const CvPlot* pToPlot = node->m_pPlot;
; 5390 : 	if (!pToPlot)
; 5391 : 		return FALSE;
; 5392 : #else
; 5393 : 	CvPlot* pToPlot = GC.getMap().plotUnchecked(node->m_iX, node->m_iY);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	esi
	mov	esi, DWORD PTR _node$[esp]
	movsx	eax, WORD PTR [esi+82]
	imul	eax, DWORD PTR [ecx+4020]
	movsx	edx, WORD PTR [esi+80]
	add	eax, edx
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]
	push	edi

; 5394 : #endif
; 5395 : 
; 5396 : #ifdef AUI_ASTAR_FIX_FASTER_CHECKS
; 5397 : 	if (node->m_iData2 > 3)
; 5398 : 	{
; 5399 : 		return FALSE;
; 5400 : 	}
; 5401 : #endif
; 5402 : 
; 5403 : 	if(!pUnit->canEnterTerrain(*pToPlot, CvUnit::MOVEFLAG_PRETEND_CORRECT_EMBARK_STATE))

	mov	edi, DWORD PTR _pointer$[esp+4]
	push	128					; 00000080H
	push	eax
	mov	ecx, edi
	call	?canEnterTerrain@CvUnit@@QBE_NABVCvPlot@@E@Z ; CvUnit::canEnterTerrain
	test	al, al
	jne	SHORT $LN3@FindValidD@2
$LN14@FindValidD@2:
	pop	edi

; 5404 : 	{
; 5405 : 		return FALSE;

	xor	eax, eax
	pop	esi

; 5415 : 	{
; 5416 : 		return FALSE;
; 5417 : 	}
; 5418 : #endif
; 5419 : 
; 5420 : 	return TRUE;
; 5421 : }

	ret	0
$LN3@FindValidD@2:

; 5406 : 	}
; 5407 : 
; 5408 : 	if(!PathValid(parent,node,data,pointer,finder))

	mov	eax, DWORD PTR _finder$[esp+4]
	mov	ecx, DWORD PTR _data$[esp+4]
	mov	edx, DWORD PTR _parent$[esp+4]
	push	eax
	push	edi
	push	ecx
	push	esi
	push	edx
	call	?PathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; PathValid
	add	esp, 20					; 00000014H
	test	eax, eax

; 5409 : 	{
; 5410 : 		return FALSE;

	je	SHORT $LN14@FindValidD@2

; 5411 : 	}
; 5412 : 
; 5413 : #ifndef AUI_ASTAR_FIX_FASTER_CHECKS
; 5414 : 	if(node->m_iData2 > 3)

	xor	eax, eax
	cmp	DWORD PTR [esi+16], 3
	pop	edi
	setle	al
	pop	esi

; 5415 : 	{
; 5416 : 		return FALSE;
; 5417 : 	}
; 5418 : #endif
; 5419 : 
; 5420 : 	return TRUE;
; 5421 : }

	ret	0
?FindValidDestinationPathValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; FindValidDestinationPathValid
_TEXT	ENDS
PUBLIC	?TradePathInitialize@@YAXPBXPAVCvAStar@@@Z	; TradePathInitialize
EXTRN	?canEmbarkAllWaterPassage@CvTeam@@QBE_NXZ:PROC	; CvTeam::canEmbarkAllWaterPassage
; Function compile flags: /Ogtpy
;	COMDAT ?TradePathInitialize@@YAXPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_pointer$ = 8						; size = 4
_finder$ = 12						; size = 4
?TradePathInitialize@@YAXPBXPAVCvAStar@@@Z PROC		; TradePathInitialize, COMDAT

; 5699 : {

	push	esi

; 5700 : #ifdef AUI_ASTAR_TRADE_ROUTE_COST_TILE_OWNERSHIP_PREFS
; 5701 : 	PlayerTypes ePlayer = PlayerTypes(finder->GetInfo() & 0x7f);
; 5702 : 	PlayerTypes eToPlayer = (PlayerTypes)(finder->GetInfo() >> 8);
; 5703 : #else
; 5704 : 	PlayerTypes ePlayer = (PlayerTypes)finder->GetInfo();
; 5705 : #endif
; 5706 : 
; 5707 : 	TradePathCacheData* pCacheData = reinterpret_cast<TradePathCacheData*>(finder->GetScratchBuffer());

	mov	esi, DWORD PTR _finder$[esp]
	push	edi

; 5708 : 
; 5709 : 	CvPlayer& kPlayer = GET_PLAYER(ePlayer);

	mov	edi, DWORD PTR [esi+72]
	imul	edi, 63236				; 0000f704H
	add	edi, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 5710 : 	TeamTypes eTeam = kPlayer.getTeam();

	mov	eax, DWORD PTR [edi+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN15@TradePathI
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN16@TradePathI
$LN15@TradePathI:
	or	eax, -1
$LN16@TradePathI:

; 5711 : 	pCacheData->m_pTeam = &GET_TEAM(eTeam);

	mov	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	imul	eax, 2980				; 00000ba4H
	add	ecx, eax
	mov	DWORD PTR [esi+116], ecx

; 5712 : 	pCacheData->m_bCanEmbarkAllWaterPassage = pCacheData->m_pTeam->canEmbarkAllWaterPassage();

	call	?canEmbarkAllWaterPassage@CvTeam@@QBE_NXZ ; CvTeam::canEmbarkAllWaterPassage

; 5713 : 
; 5714 : 	CvPlayerTraits* pPlayerTraits = kPlayer.GetPlayerTraits();

	mov	ecx, edi
	mov	BYTE PTR [esi+120], al
	call	?GetPlayerTraits@CvPlayer@@QBEPAVCvPlayerTraits@@XZ ; CvPlayer::GetPlayerTraits

; 5715 : 	if (pPlayerTraits)

	xor	ecx, ecx
	cmp	eax, ecx
	je	SHORT $LN2@TradePathI

; 5716 : 	{
; 5717 : 		pCacheData->m_bIsRiverTradeRoad = pPlayerTraits->IsRiverTradeRoad();

	mov	dl, BYTE PTR [eax+346]
	mov	BYTE PTR [esi+121], dl

; 5718 : 		pCacheData->m_bIsMoveFriendlyWoodsAsRoad = pPlayerTraits->IsMoveFriendlyWoodsAsRoad();

	mov	al, BYTE PTR [eax+325]
	pop	edi
	mov	BYTE PTR [esi+122], al
	pop	esi

; 5724 : 	}
; 5725 : 
; 5726 : #ifdef AUI_ASTAR_TRADE_ROUTE_COST_TILE_OWNERSHIP_PREFS
; 5727 : 	pCacheData->m_pToPlayer = &GET_PLAYER(eToPlayer);
; 5728 : #endif
; 5729 : }

	ret	0
$LN2@TradePathI:
	pop	edi

; 5719 : 	}
; 5720 : 	else
; 5721 : 	{
; 5722 : 		pCacheData->m_bIsRiverTradeRoad = false;

	mov	BYTE PTR [esi+121], cl

; 5723 : 		pCacheData->m_bIsMoveFriendlyWoodsAsRoad = false;

	mov	BYTE PTR [esi+122], cl
	pop	esi

; 5724 : 	}
; 5725 : 
; 5726 : #ifdef AUI_ASTAR_TRADE_ROUTE_COST_TILE_OWNERSHIP_PREFS
; 5727 : 	pCacheData->m_pToPlayer = &GET_PLAYER(eToPlayer);
; 5728 : #endif
; 5729 : }

	ret	0
?TradePathInitialize@@YAXPBXPAVCvAStar@@@Z ENDP		; TradePathInitialize
_TEXT	ENDS
PUBLIC	?TradeRouteLandPathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; TradeRouteLandPathCost
; Function compile flags: /Ogtpy
;	COMDAT ?TradeRouteLandPathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?TradeRouteLandPathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; TradeRouteLandPathCost, COMDAT

; 5746 : 	PlayerTypes ePlayer = (PlayerTypes)finder->GetInfo();
; 5747 : 
; 5748 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 5749 : 	const CvPlot* pFromPlot = parent->m_pPlot;
; 5750 : 	const CvPlot* pToPlot = node->m_pPlot;
; 5751 : #else
; 5752 : 	CvMap& kMap = GC.getMap();
; 5753 : 	int iFromPlotX = parent->m_iX;
; 5754 : 	int iFromPlotY = parent->m_iY;
; 5755 : 	CvPlot* pFromPlot = kMap.plotUnchecked(iFromPlotX, iFromPlotY);

	mov	edx, DWORD PTR _parent$[esp-4]
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	ecx, DWORD PTR [eax+4020]
	push	ebx
	push	ebp
	push	esi
	movsx	esi, WORD PTR [edx+82]
	movsx	edx, WORD PTR [edx+80]
	imul	esi, ecx
	mov	eax, DWORD PTR [eax+4068]
	push	edi
	add	esi, edx

; 5756 : 
; 5757 : 	int iToPlotX = node->m_iX;
; 5758 : 	int iToPlotY = node->m_iY;
; 5759 : 	CvPlot* pToPlot = kMap.plotUnchecked(iToPlotX, iToPlotY);

	mov	edx, DWORD PTR _node$[esp+12]
	imul	esi, 484				; 000001e4H
	movsx	edi, WORD PTR [edx+82]
	imul	edi, ecx
	movsx	ecx, WORD PTR [edx+80]
	add	edi, ecx
	imul	edi, 484				; 000001e4H

; 5760 : #endif
; 5761 : 
; 5762 : 	int iBaseCost = 100;
; 5763 : 	int iCost = iBaseCost;
; 5764 : 
; 5765 : 	const TradePathCacheData* pCacheData = reinterpret_cast<const TradePathCacheData*>(finder->GetScratchBuffer());
; 5766 : 	FeatureTypes eFeature = pToPlot->getFeatureType();

	movsx	ebx, BYTE PTR [edi+eax+432]
	add	esi, eax
	add	edi, eax

; 5767 : 
; 5768 : 	// super duper low costs for moving along routes
; 5769 : 	if (pFromPlot->getRouteType() != NO_ROUTE && pToPlot->getRouteType() != NO_ROUTE)

	mov	ecx, esi
	mov	ebp, 100				; 00000064H
	call	?getRouteType@CvPlot@@QBE?AW4RouteTypes@@XZ ; CvPlot::getRouteType
	cmp	eax, -1
	je	SHORT $LN15@TradeRoute
	mov	ecx, edi
	call	?getRouteType@CvPlot@@QBE?AW4RouteTypes@@XZ ; CvPlot::getRouteType
	cmp	eax, -1
	je	SHORT $LN15@TradeRoute

; 5770 : 	{
; 5771 : 		iCost = iCost / 2;

	mov	ebp, 50					; 00000032H
	jmp	SHORT $LN4@TradeRoute
$LN15@TradeRoute:

; 5772 : 	}
; 5773 : 	//// super low costs for moving along rivers
; 5774 : 	else if (pCacheData->IsRiverTradeRoad() && pFromPlot->isRiver() && pToPlot->isRiver())

	mov	eax, DWORD PTR _finder$[esp+12]
	cmp	BYTE PTR [eax+121], 0
	je	SHORT $LN13@TradeRoute
	cmp	BYTE PTR [esi+457], 0
	jle	SHORT $LN13@TradeRoute
	cmp	BYTE PTR [edi+457], 0
	jle	SHORT $LN13@TradeRoute

; 5775 : 	{
; 5776 : 		iCost = iCost / 2;

	mov	ebp, 50					; 00000032H
	jmp	SHORT $LN4@TradeRoute
$LN13@TradeRoute:

; 5777 : 	}
; 5778 : 	// Iroquios ability
; 5779 : 	else if ((eFeature == FEATURE_FOREST || eFeature == FEATURE_JUNGLE) && pCacheData->IsMoveFriendlyWoodsAsRoad())

	cmp	ebx, 5
	je	SHORT $LN10@TradeRoute
	cmp	ebx, 1
	jne	SHORT $LN11@TradeRoute
$LN10@TradeRoute:
	cmp	BYTE PTR [eax+122], 0
	je	SHORT $LN11@TradeRoute

; 5780 : 	{
; 5781 : 		iCost = iCost / 2;

	mov	ebp, 50					; 00000032H

; 5782 : 	}
; 5783 : 	else

	jmp	SHORT $LN4@TradeRoute
$LN11@TradeRoute:

; 5784 : 	{
; 5785 : 		bool bFeaturePenalty = false;

	xor	al, al

; 5786 : 		if (eFeature == FEATURE_FOREST || eFeature == FEATURE_JUNGLE || eFeature == FEATURE_ICE)

	cmp	ebx, 5
	je	SHORT $LN7@TradeRoute
	cmp	ebx, 1
	je	SHORT $LN7@TradeRoute
	test	ebx, ebx
	jne	SHORT $LN8@TradeRoute
$LN7@TradeRoute:

; 5787 : 		{
; 5788 : 			bFeaturePenalty = true;

	mov	al, 1
$LN8@TradeRoute:

; 5789 : 		}
; 5790 : 
; 5791 : 		if (pToPlot->isHills() || bFeaturePenalty)

	cmp	BYTE PTR [edi+5], 1
	je	SHORT $LN5@TradeRoute
	test	al, al
	je	SHORT $LN6@TradeRoute
$LN5@TradeRoute:

; 5792 : 		{
; 5793 : 			iCost += 1;

	mov	ebp, 101				; 00000065H
$LN6@TradeRoute:

; 5794 : 		}
; 5795 : 
; 5796 : 		// extra cost for not going to an oasis! (this encourages routes to go through oasis)
; 5797 : 		if (eFeature != FEATURE_OASIS)

	cmp	ebx, 3
	je	SHORT $LN4@TradeRoute

; 5798 : 		{
; 5799 : 			iCost += 1;

	inc	ebp
$LN4@TradeRoute:

; 5800 : 		}
; 5801 : 	}
; 5802 : 
; 5803 : #ifdef AUI_ASTAR_TRADE_ROUTE_COST_TILE_OWNERSHIP_PREFS
; 5804 : 	if (pToPlot->isOwned())
; 5805 : 	{
; 5806 : 		if (pToPlot->getTeam() == pCacheData->getToPlayer().getTeam() || pToPlot->getTeam() == pCacheData->getTeam().GetID())
; 5807 : 		{
; 5808 : 			iCost /= 2;
; 5809 : 		}
; 5810 : 		else
; 5811 : 		{
; 5812 : 			iCost *= 2;
; 5813 : 			iCost += 1;
; 5814 : 		}
; 5815 : 	}
; 5816 : #endif
; 5817 : 
; 5818 : 	if (pToPlot->isWater() && !pToPlot->IsAllowsWalkWater())

	cmp	BYTE PTR [edi+5], 3
	jne	SHORT $LN3@TradeRoute
	mov	ecx, edi
	call	?IsAllowsWalkWater@CvPlot@@QBE_NXZ	; CvPlot::IsAllowsWalkWater
	test	al, al
	jne	SHORT $LN3@TradeRoute

; 5819 : 	{
; 5820 : 		iCost += 1000;

	add	ebp, 1000				; 000003e8H
$LN3@TradeRoute:

; 5821 : 	}
; 5822 : 	
; 5823 : 	// Penalty for ending a turn on a mountain
; 5824 : 	if(pToPlot->isImpassable() || pToPlot->isMountain())

	test	BYTE PTR [edi+462], 128			; 00000080H
	jne	SHORT $LN1@TradeRoute
	cmp	BYTE PTR [edi+5], 0
	jne	SHORT $LN56@TradeRoute
$LN1@TradeRoute:

; 5825 : 	{
; 5826 : 		iCost += 1000;

	add	ebp, 1000				; 000003e8H
$LN56@TradeRoute:
	pop	edi
	pop	esi

; 5827 : 	}
; 5828 : 
; 5829 : 	FAssert(iCost != MAX_INT);
; 5830 : 	FAssert(iCost > 0);
; 5831 : 
; 5832 : 	return iCost;

	mov	eax, ebp
	pop	ebp
	pop	ebx

; 5833 : }

	ret	0
?TradeRouteLandPathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; TradeRouteLandPathCost
_TEXT	ENDS
PUBLIC	?TradeRouteLandValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; TradeRouteLandValid
; Function compile flags: /Ogtpy
;	COMDAT ?TradeRouteLandValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?TradeRouteLandValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; TradeRouteLandValid, COMDAT

; 5837 : {

	push	esi

; 5838 : 	if(parent == NULL)

	mov	esi, DWORD PTR _parent$[esp]
	test	esi, esi
	jne	SHORT $LN5@TradeRoute@2
$LN32@TradeRoute@2:

; 5839 : 	{
; 5840 : 		return TRUE;

	mov	eax, 1
	pop	esi

; 5875 : }

	ret	0
$LN5@TradeRoute@2:

; 5841 : 	}
; 5842 : 
; 5843 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 5844 : 	const CvPlot* pOldPlot = parent->m_pPlot;
; 5845 : 	const CvPlot* pNewPlot = node->m_pPlot;
; 5846 : 	if (!pOldPlot || !pNewPlot)
; 5847 : 		return FALSE;
; 5848 : 
; 5849 : 	if (pOldPlot->getArea() != pNewPlot->getArea())
; 5850 : #else
; 5851 : 	CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 5852 : 	CvPlot* pNewPlot = kMap.plotUnchecked(node->m_iX, node->m_iY);

	mov	ecx, DWORD PTR [eax+4020]
	mov	edx, DWORD PTR [eax+4068]
	push	edi
	mov	edi, DWORD PTR _node$[esp+4]
	movsx	eax, WORD PTR [edi+82]
	movsx	edi, WORD PTR [edi+80]
	imul	eax, ecx
	add	eax, edi

; 5853 : 
; 5854 : 	if(kMap.plotUnchecked(parent->m_iX, parent->m_iY)->getArea() != pNewPlot->getArea())

	movsx	edi, WORD PTR [esi+82]
	imul	eax, 484				; 000001e4H
	imul	edi, ecx
	movsx	ecx, WORD PTR [esi+80]
	add	edi, ecx
	imul	edi, 484				; 000001e4H
	add	eax, edx
	mov	edx, DWORD PTR [edi+edx+356]
	pop	edi
	cmp	edx, DWORD PTR [eax+356]

; 5855 : #endif
; 5856 : 	{
; 5857 : 		return FALSE;

	jne	SHORT $LN1@TradeRoute@2

; 5858 : 	}
; 5859 : 
; 5860 : 	if (pNewPlot->isWater())

	mov	cl, BYTE PTR [eax+5]
	cmp	cl, 3

; 5861 : 	{
; 5862 : 		return FALSE;

	je	SHORT $LN1@TradeRoute@2

; 5863 : 	}
; 5864 : 
; 5865 : #ifdef AUI_ASTAR_FIX_STEP_VALID_CONSIDERS_MOUNTAINS
; 5866 : 	if (pNewPlot->isImpassable())
; 5867 : #else
; 5868 : 	if(pNewPlot->isMountain() || pNewPlot->isImpassable())

	test	cl, cl
	je	SHORT $LN1@TradeRoute@2
	test	BYTE PTR [eax+462], 128			; 00000080H

; 5872 : 	}
; 5873 : 
; 5874 : 	return TRUE;

	je	SHORT $LN32@TradeRoute@2
$LN1@TradeRoute@2:

; 5869 : #endif
; 5870 : 	{
; 5871 : 		return FALSE;

	xor	eax, eax
	pop	esi

; 5875 : }

	ret	0
?TradeRouteLandValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; TradeRouteLandValid
_TEXT	ENDS
PUBLIC	?TradeRouteWaterPathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; TradeRouteWaterPathCost
; Function compile flags: /Ogtpy
;	COMDAT ?TradeRouteWaterPathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?TradeRouteWaterPathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; TradeRouteWaterPathCost, COMDAT

; 5881 : #ifndef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 5882 : 	CvMap& kMap = GC.getMap();
; 5883 : #endif
; 5884 : 	const TradePathCacheData* pCacheData = reinterpret_cast<const TradePathCacheData*>(finder->GetScratchBuffer());
; 5885 : 
; 5886 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 5887 : 	const CvPlot* pFromPlot = parent->m_pPlot;
; 5888 : 	const CvPlot* pToPlot = node->m_pPlot;
; 5889 : #else
; 5890 : 	int iFromPlotX = parent->m_iX;
; 5891 : 	int iFromPlotY = parent->m_iY;
; 5892 : 	CvPlot* pFromPlot = kMap.plotUnchecked(iFromPlotX, iFromPlotY);

	mov	edx, DWORD PTR _parent$[esp-4]
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	ecx, DWORD PTR [eax+4020]
	push	ebp
	push	esi
	push	edi
	movsx	edi, WORD PTR [edx+82]
	movsx	edx, WORD PTR [edx+80]
	imul	edi, ecx
	mov	eax, DWORD PTR [eax+4068]
	add	edi, edx

; 5893 : 
; 5894 : 	int iToPlotX = node->m_iX;
; 5895 : 	int iToPlotY = node->m_iY;
; 5896 : 	CvPlot* pToPlot = kMap.plotUnchecked(iToPlotX, iToPlotY);

	mov	edx, DWORD PTR _node$[esp+8]
	imul	edi, 484				; 000001e4H
	movsx	esi, WORD PTR [edx+82]
	imul	esi, ecx
	movsx	ecx, WORD PTR [edx+80]
	add	esi, ecx
	imul	esi, 484				; 000001e4H
	add	esi, eax
	add	edi, eax

; 5897 : #endif
; 5898 : 
; 5899 : 	int iBaseCost = 100;
; 5900 : 	int iCost = iBaseCost;
; 5901 : 
; 5902 : 	if (!pToPlot->isCity())

	mov	eax, DWORD PTR [esi+104]
	mov	ebp, 100				; 00000064H
	test	eax, eax
	jl	SHORT $LN63@TradeRoute@3
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN63@TradeRoute@3
	mov	edx, DWORD PTR [esi+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	edx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	test	eax, eax
	setne	al
	test	al, al
	jne	SHORT $LN66@TradeRoute@3
$LN63@TradeRoute@3:

; 5903 : 	{
; 5904 : 		bool bIsAdjacentToLand = pFromPlot->isAdjacentToLand_Cached() && pToPlot->isAdjacentToLand_Cached();

	test	BYTE PTR [edi+462], 64			; 00000040H
	je	SHORT $LN11@TradeRoute@3
	test	BYTE PTR [esi+462], 64			; 00000040H
	jne	SHORT $LN7@TradeRoute@3
$LN11@TradeRoute@3:

; 5905 : 		if (!bIsAdjacentToLand)
; 5906 : 		{
; 5907 : 			iCost += 1;

	mov	ebp, 101				; 00000065H
$LN7@TradeRoute@3:

; 5908 : 		}
; 5909 : 
; 5910 : 		// if is enemy tile, avoid
; 5911 : 		TeamTypes eToPlotTeam = pToPlot->getTeam();

	movsx	eax, BYTE PTR [esi+4]
	cmp	eax, -1
	je	SHORT $LN67@TradeRoute@3
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN67@TradeRoute@3
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 5912 : 		if (eToPlotTeam != NO_TEAM && pCacheData->getTeam().isAtWar(eToPlotTeam))

	cmp	eax, -1
	je	SHORT $LN67@TradeRoute@3
	mov	ecx, DWORD PTR _finder$[esp+8]
	mov	ecx, DWORD PTR [ecx+116]
	push	eax
	call	?isAtWar@CvTeam@@QBE_NW4TeamTypes@@@Z	; CvTeam::isAtWar
	test	al, al
	je	SHORT $LN67@TradeRoute@3

; 5913 : 		{
; 5914 : 			iCost += 1000; // slewis - is this too prohibitive? Too cheap?

	add	ebp, 1000				; 000003e8H
$LN67@TradeRoute@3:

; 5915 : 		}
; 5916 : 
; 5917 : 		if (!pToPlot->isWater())

	cmp	BYTE PTR [esi+5], 3

; 5918 : 		{
; 5919 : 			iCost += 1000;
; 5920 : 		}
; 5921 : 		else

	jne	SHORT $LN68@TradeRoute@3

; 5922 : 		{
; 5923 : 			if (pToPlot->getTerrainType() != (TerrainTypes) GC.getSHALLOW_WATER_TERRAIN())	// Quicker isShallowWater test, since we already know the plot is water

	movsx	edx, BYTE PTR [esi+6]
	cmp	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8396
	je	SHORT $LN2@TradeRoute@3

; 5924 : 			{
; 5925 : 				if (!pCacheData->CanEmbarkAllWaterPassage())

	mov	eax, DWORD PTR _finder$[esp+8]
	cmp	BYTE PTR [eax+120], 0
	jne	SHORT $LN2@TradeRoute@3
$LN68@TradeRoute@3:

; 5926 : 				{
; 5927 : 					iCost += 1000;

	add	ebp, 1000				; 000003e8H
$LN2@TradeRoute@3:

; 5928 : 				}
; 5929 : 			}
; 5930 : 		}
; 5931 : 
; 5932 : 		if(pToPlot->isImpassable())

	test	BYTE PTR [esi+462], 128			; 00000080H
	je	SHORT $LN66@TradeRoute@3

; 5933 : 		{
; 5934 : 			iCost += 1000;

	add	ebp, 1000				; 000003e8H
$LN66@TradeRoute@3:
	pop	edi
	pop	esi

; 5935 : 		}
; 5936 : 	}
; 5937 : 
; 5938 : 	FAssert(iCost != MAX_INT);
; 5939 : 	FAssert(iCost > 0);
; 5940 : 
; 5941 : 	return iCost;

	mov	eax, ebp
	pop	ebp

; 5942 : }

	ret	0
?TradeRouteWaterPathCost@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; TradeRouteWaterPathCost
_TEXT	ENDS
PUBLIC	?TradeRouteWaterValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ; TradeRouteWaterValid
; Function compile flags: /Ogtpy
;	COMDAT ?TradeRouteWaterValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_node$ = 12						; size = 4
_data$ = 16						; size = 4
_pointer$ = 20						; size = 4
_finder$ = 24						; size = 4
?TradeRouteWaterValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z PROC ; TradeRouteWaterValid, COMDAT

; 5946 : {

	push	ebp

; 5947 : 	if(parent == NULL)

	mov	ebp, DWORD PTR _parent$[esp]
	test	ebp, ebp
	jne	SHORT $LN8@TradeRoute@4

; 5948 : 	{
; 5949 : 		return TRUE;

	lea	eax, DWORD PTR [ebp+1]
	pop	ebp

; 6000 : }

	ret	0
$LN8@TradeRoute@4:

; 5950 : 	}
; 5951 : 
; 5952 : 	const TradePathCacheData* pCacheData = reinterpret_cast<const TradePathCacheData*>(finder->GetScratchBuffer());
; 5953 : 
; 5954 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 5955 : 	const CvPlot* pNewPlot = node->m_pPlot;
; 5956 : 	if (!pNewPlot)
; 5957 : 		return FALSE;
; 5958 : #else
; 5959 : 	CvMap& kMap = GC.getMap();
; 5960 : 	CvPlot* pNewPlot = kMap.plotUnchecked(node->m_iX, node->m_iY);

	mov	eax, DWORD PTR _node$[esp]
	push	ebx
	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	esi
	movsx	esi, WORD PTR [eax+82]
	imul	esi, DWORD PTR [ebx+4020]
	movsx	eax, WORD PTR [eax+80]
	add	esi, eax
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ebx+4068]
	push	edi

; 5961 : #endif
; 5962 : 
; 5963 : 	if (!pNewPlot->isCity())

	mov	eax, DWORD PTR [esi+104]
	test	eax, eax
	jl	SHORT $LN46@TradeRoute@4
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN46@TradeRoute@4
	mov	ecx, DWORD PTR [esi+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	test	eax, eax
	setne	al
	test	al, al
	jne	SHORT $LN1@TradeRoute@4
$LN46@TradeRoute@4:

; 5964 : 	{
; 5965 : 		if (!pNewPlot->isWater())

	cmp	BYTE PTR [esi+5], 3

; 5966 : 		{
; 5967 : 			return FALSE;

	jne	SHORT $LN50@TradeRoute@4

; 5968 : 		}
; 5969 : 
; 5970 : 		if (pNewPlot->getTerrainType() != (TerrainTypes) GC.getSHALLOW_WATER_TERRAIN())	// Quicker shallow water test since we know that the plot is water already

	movsx	edx, BYTE PTR [esi+6]
	cmp	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8396
	je	SHORT $LN4@TradeRoute@4

; 5971 : 		{
; 5972 : 			if (!pCacheData->CanEmbarkAllWaterPassage())

	mov	eax, DWORD PTR _finder$[esp+12]
	cmp	BYTE PTR [eax+120], 0

; 5973 : 			{
; 5974 : 				return FALSE;

	je	SHORT $LN50@TradeRoute@4
$LN4@TradeRoute@4:

; 5975 : 			}
; 5976 : 		}
; 5977 : 
; 5978 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 5979 : 		const CvPlot* pParentPlot = parent->m_pPlot;
; 5980 : 		if (!pParentPlot)
; 5981 : 			return FALSE;
; 5982 : #else
; 5983 : 		CvPlot* pParentPlot = kMap.plotUnchecked(parent->m_iX, parent->m_iY);

	movsx	edi, WORD PTR [ebp+82]
	imul	edi, DWORD PTR [ebx+4020]
	movsx	ecx, WORD PTR [ebp+80]
	add	edi, ecx
	imul	edi, 484				; 000001e4H
	add	edi, DWORD PTR [ebx+4068]

; 5984 : #endif
; 5985 : 		if (!pParentPlot->isCity())

	mov	ecx, edi
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	test	al, al
	jne	SHORT $LN2@TradeRoute@4

; 5986 : 		{
; 5987 : 			if(pParentPlot->getArea() != pNewPlot->getArea())

	mov	edx, DWORD PTR [edi+356]
	cmp	edx, DWORD PTR [esi+356]

; 5988 : 			{
; 5989 : 				return FALSE;

	jne	SHORT $LN50@TradeRoute@4
$LN2@TradeRoute@4:

; 5990 : 			}
; 5991 : 		}
; 5992 : 
; 5993 : 		if(pNewPlot->isImpassable())

	test	BYTE PTR [esi+462], 128			; 00000080H
	je	SHORT $LN1@TradeRoute@4
$LN50@TradeRoute@4:
	pop	edi
	pop	esi
	pop	ebx

; 5994 : 		{
; 5995 : 			return FALSE;

	xor	eax, eax
	pop	ebp

; 6000 : }

	ret	0
$LN1@TradeRoute@4:
	pop	edi
	pop	esi
	pop	ebx

; 5996 : 		}
; 5997 : 	}
; 5998 : 
; 5999 : 	return TRUE;

	mov	eax, 1
	pop	ebp

; 6000 : }

	ret	0
?TradeRouteWaterValid@@YAHPAVCvAStarNode@@0HPBXPAVCvAStar@@@Z ENDP ; TradeRouteWaterValid
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvAStarNode *,6,1,297,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?GrowSize@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<CvAStarNode *,6,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN30@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN30@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN31@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN31@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 6
	jbe	SHORT $LN15@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0IJ@DONJGAGH@c?3?2users?2enormousapplepie?2deskto@
	lea	eax, DWORD PTR [ebp*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN14@GrowSize
$LN15@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 6
$LN14@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN33@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN33@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+36], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvAStarNode *,6,1,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	?SetSize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXI@Z ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::SetSize
; Function compile flags: /Ogtpy
;	COMDAT ?SetSize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXI@Z
_TEXT	SEGMENT
_nOld$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?SetSize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXI@Z PROC ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::SetSize, COMDAT
; _this$ = ecx

; 468  : 	void SetSize(unsigned int uiFit){

	push	ecx
	push	ebx

; 469  : 
; 470  : 		unsigned int nOld = m_uiCurrSize;
; 471  : 
; 472  : 		m_uiCurrSize = MIN( m_uiCurrSize, uiFit );

	mov	ebx, DWORD PTR _uiFit$[esp+4]
	push	ebp
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	push	edi
	lea	edi, DWORD PTR [esi+4]
	mov	DWORD PTR _nOld$[esp+20], eax
	cmp	ebx, eax
	lea	eax, DWORD PTR _uiFit$[esp+16]
	jb	SHORT $LN17@SetSize
	mov	eax, edi
$LN17@SetSize:
	mov	ecx, DWORD PTR [eax]

; 473  : 
; 474  : 		T* pTemp = NULL;

	xor	ebp, ebp
	mov	DWORD PTR [edi], ecx

; 475  : 		if( uiFit > 0 ){

	cmp	ebx, ebp
	jbe	SHORT $LN9@SetSize

; 476  : 			pTemp = Alloc(uiFit);

	push	85					; 00000055H
	push	OFFSET ??_C@_0IJ@DONJGAGH@c?3?2users?2enormousapplepie?2deskto@
	mov	edx, ebx
	shl	edx, 4
	push	4
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+8], ebx
	mov	ebp, eax

; 477  : 			if (pTemp)

	test	eax, eax
	je	SHORT $LN8@SetSize

; 478  : 			{
; 479  : 				if( bPODType ){
; 480  : 					memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [esi]
	shl	ecx, 4
	push	ecx
	push	edx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 481  : 				}else{
; 482  : 					for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 483  : 						new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 484  : 				}
; 485  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], ebx

; 491  : 				return;
; 492  : 			}
; 493  : 		}
; 494  : 		else

	jmp	SHORT $LN1@SetSize
$LN8@SetSize:

; 486  : 			}
; 487  : 			else
; 488  : 			{
; 489  : 				FAssertMsg2(0, "Failed to set array size from %u to %u", nOld, uiFit);
; 490  : 				m_uiCurrSize = nOld;

	mov	eax, DWORD PTR _nOld$[esp+20]
	mov	DWORD PTR [edi], eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 500  : 	};

	pop	ecx
	ret	4
$LN9@SetSize:

; 495  : 		{
; 496  : 			m_uiCurrMaxSize = 0;

	mov	DWORD PTR [esi+8], ebp
$LN1@SetSize:

; 497  : 		}
; 498  : 		Free(m_pData, nOld);

	mov	ecx, DWORD PTR [esi]
	push	ecx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
	pop	edi

; 499  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], ebp
	pop	esi
	pop	ebp
	pop	ebx

; 500  : 	};

	pop	ecx
	ret	4
?SetSize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXI@Z ENDP ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::SetSize
_TEXT	ENDS
PUBLIC	?clear@CvAStarNode@@QAEXXZ			; CvAStarNode::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastarnode.h
;	COMDAT ?clear@CvAStarNode@@QAEXXZ
_TEXT	SEGMENT
?clear@CvAStarNode@@QAEXXZ PROC				; CvAStarNode::clear, COMDAT
; _this$ = ecx

; 119  : 		m_iTotalCost = 0;

	xor	eax, eax

; 120  : 		m_iKnownCost = 0;
; 121  : 		m_iHeuristicCost = 0;
; 122  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 123  : 		bPlotVisibleToTeam = false;
; 124  : 		bIsMountain = false;
; 125  : 		bIsWater = false;
; 126  : 		bCanEnterTerrain = false;
; 127  : 		bIsRevealedToTeam = false;
; 128  : 		bContainsOtherFriendlyTeamCity = false;
; 129  : 		bContainsEnemyCity = false;
; 130  : 		bContainsVisibleEnemy = false;
; 131  : 		bContainsVisibleEnemyDefender = false;
; 132  : #else
; 133  : 		m_iNumChildren = 0;

	xor	edx, edx
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	WORD PTR [ecx+84], dx

; 134  : #endif
; 135  : 		m_iData1 = 0;

	mov	DWORD PTR [ecx+12], eax

; 136  : 		m_iData2 = 0;

	mov	DWORD PTR [ecx+16], eax

; 137  : 
; 138  : 		m_bOnStack = false;

	mov	BYTE PTR [ecx+86], al

; 139  : 
; 140  : 		m_eCvAStarListType = NO_CVASTARLIST;

	mov	DWORD PTR [ecx+20], -1

; 141  : 
; 142  : 		m_pParent = NULL;

	mov	DWORD PTR [ecx+24], eax

; 143  : 		m_pNext = NULL;

	mov	DWORD PTR [ecx+28], eax

; 144  : 		m_pPrev = NULL;

	mov	DWORD PTR [ecx+32], eax

; 145  : 		m_pStack = NULL;

	mov	DWORD PTR [ecx+36], eax

; 146  : 
; 147  : #ifdef AUI_ASTAR_FIX_CAN_ENTER_TERRAIN_NO_DUPLICATE_CALLS
; 148  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 149  : 		bIsCalculated = false;
; 150  : #else
; 151  : 		m_kCostCacheData.bIsCalculated = false;
; 152  : #endif
; 153  : #endif
; 154  : 
; 155  : 		m_apChildren.clear();

	mov	DWORD PTR [ecx+44], eax

; 156  : 	}

	ret	0
?clear@CvAStarNode@@QAEXXZ ENDP				; CvAStarNode::clear
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvAStarNode *,6,1,297,0>::~FStaticVector<CvAStarNode *,6,1,297,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvAStarNode *,6,1,297,0>::~FStaticVector<CvAStarNode *,6,1,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvAStarNode *,6,1,297,0>::~FStaticVector<CvAStarNode *,6,1,297,0>
_TEXT	ENDS
PUBLIC	??1CvAStarNode@@QAE@XZ				; CvAStarNode::~CvAStarNode
; Function compile flags: /Ogtpy
;	COMDAT ??1CvAStarNode@@QAE@XZ
_TEXT	SEGMENT
??1CvAStarNode@@QAE@XZ PROC				; CvAStarNode::~CvAStarNode, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx+40]
	add	ecx, 52					; 00000034H
	cmp	eax, ecx
	je	SHORT $LN6@CvAStarNod
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvAStarNod:
	ret	0
??1CvAStarNode@@QAE@XZ ENDP				; CvAStarNode::~CvAStarNode
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAEIABQAVCvAStarNode@@@Z ; FStaticVector<CvAStarNode *,6,1,297,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAEIABQAVCvAStarNode@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAEIABQAVCvAStarNode@@@Z PROC ; FStaticVector<CvAStarNode *,6,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+36], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvAStarNode *,6,1,297,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR _element$[esp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@QAEIABQAVCvAStarNode@@@Z ENDP ; FStaticVector<CvAStarNode *,6,1,297,0>::push_back
_TEXT	ENDS
PUBLIC	?setsize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@QAEXI@Z ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::setsize
; Function compile flags: /Ogtpy
;	COMDAT ?setsize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@QAEXI@Z
_TEXT	SEGMENT
_uiNewSize$ = 8						; size = 4
?setsize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@QAEXI@Z PROC ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::setsize, COMDAT
; _this$ = ecx

; 342  : 	void setsize( unsigned int uiNewSize ){

	push	esi
	push	edi

; 343  : 		SetSize(uiNewSize);

	mov	edi, DWORD PTR _uiNewSize$[esp+4]
	push	edi
	mov	esi, ecx
	call	?SetSize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXI@Z ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::SetSize

; 344  : 		m_uiCurrSize = MIN(uiNewSize, m_uiCurrMaxSize);

	cmp	DWORD PTR [esi+8], edi
	jae	SHORT $LN5@setsize
	mov	eax, DWORD PTR [esi+8]
	pop	edi
	mov	DWORD PTR [esi+4], eax
	pop	esi

; 345  : 	}

	ret	4

; 344  : 		m_uiCurrSize = MIN(uiNewSize, m_uiCurrMaxSize);

$LN5@setsize:
	lea	eax, DWORD PTR _uiNewSize$[esp+4]
	mov	ecx, DWORD PTR [eax]
	pop	edi
	mov	DWORD PTR [esi+4], ecx
	pop	esi

; 345  : 	}

	ret	4
?setsize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@QAEXI@Z ENDP ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::setsize
_TEXT	ENDS
PUBLIC	??0CvAStarNode@@QAE@XZ				; CvAStarNode::CvAStarNode
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastarnode.h
;	COMDAT ??0CvAStarNode@@QAE@XZ
_TEXT	SEGMENT
??0CvAStarNode@@QAE@XZ PROC				; CvAStarNode::CvAStarNode, COMDAT
; _this$ = ecx

; 83   : 	CvAStarNode()

	mov	eax, ecx
	mov	DWORD PTR [eax+48], 6
	xor	ecx, ecx
	mov	DWORD PTR [eax+44], ecx
	lea	edx, DWORD PTR [eax+52]
	mov	DWORD PTR [eax+40], edx

; 84   : 	{
; 85   : 		m_iX = -1;

	or	edx, -1
	mov	WORD PTR [eax+80], dx

; 86   : 		m_iY = -1;

	or	edx, edx
	mov	WORD PTR [eax+82], dx

; 87   : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 88   : 		m_pPlot = NULL;
; 89   : #endif
; 90   : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 91   : 		clear();
; 92   : #else
; 93   : 		m_iTotalCost = 0;
; 94   : 		m_iKnownCost = 0;
; 95   : 		m_iHeuristicCost = 0;
; 96   : 		m_iNumChildren = 0;

	xor	edx, edx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	WORD PTR [eax+84], dx

; 97   : 		m_iData1 = 0;

	mov	DWORD PTR [eax+12], ecx

; 98   : 		m_iData2 = 0;

	mov	DWORD PTR [eax+16], ecx

; 99   : 
; 100  : 		m_bOnStack = false;

	mov	BYTE PTR [eax+86], cl

; 101  : 
; 102  : 		m_eCvAStarListType = NO_CVASTARLIST;

	mov	DWORD PTR [eax+20], -1

; 103  : 
; 104  : 		m_pParent = NULL;

	mov	DWORD PTR [eax+24], ecx

; 105  : 		m_pNext = NULL;

	mov	DWORD PTR [eax+28], ecx

; 106  : 		m_pPrev = NULL;

	mov	DWORD PTR [eax+32], ecx

; 107  : 		m_pStack = NULL;

	mov	DWORD PTR [eax+36], ecx

; 108  : #endif
; 109  : #ifdef AUI_ASTAR_PRECALCULATE_NEIGHBORS_ON_INITIALIZE
; 110  : 		for (int iI = 0; iI < NUM_DIRECTION_TYPES; iI++)
; 111  : 		{
; 112  : 			m_apNeighbors[iI] = NULL;
; 113  : 		}
; 114  : #endif
; 115  : 	}

	ret	0
??0CvAStarNode@@QAE@XZ ENDP				; CvAStarNode::CvAStarNode
_TEXT	ENDS
PUBLIC	?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z ; CvAStar::Initialize
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z$0
__ehfuncinfo$?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
xdata$x	ENDS
;	COMDAT ?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z
_TEXT	SEGMENT
$T228000 = -28						; size = 4
_iI$ = -24						; size = 4
_iJ$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_iColumns$ = 8						; size = 4
_iRows$ = 12						; size = 4
_bWrapX$ = 16						; size = 1
_bWrapY$ = 20						; size = 1
_IsPathDestFunc$ = 24					; size = 4
_DestValidFunc$ = 28					; size = 4
_HeuristicFunc$ = 32					; size = 4
_CostFunc$ = 36						; size = 4
_ValidFunc$ = 40					; size = 4
_NotifyChildFunc$ = 44					; size = 4
_NotifyListFunc$ = 48					; size = 4
_NumExtraChildrenFunc$ = 52				; size = 4
_GetExtraChildFunc$ = 56				; size = 4
_InitializeFunc$ = 60					; size = 4
_UninitializeFunc$ = 64					; size = 4
_pData$ = 68						; size = 4
?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z PROC ; CvAStar::Initialize, COMDAT
; _this$ = ecx

; 171  : {

	push	-1
	mov	eax, DWORD PTR fs:0
	push	__ehhandler$?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	esi, ecx

; 172  : 	int iI, iJ;
; 173  : 
; 174  : 	DeInit();	// free old memory just in case

	call	?DeInit@CvAStar@@QAEXXZ			; CvAStar::DeInit

; 175  : 
; 176  : 	udIsPathDest = IsPathDestFunc;
; 177  : 	udDestValid = DestValidFunc;
; 178  : 	udHeuristic = HeuristicFunc;

	mov	edx, DWORD PTR _HeuristicFunc$[esp+40]
	mov	eax, DWORD PTR _IsPathDestFunc$[esp+40]
	mov	ecx, DWORD PTR _DestValidFunc$[esp+40]
	mov	DWORD PTR [esi+8], edx

; 179  : 	udCost = CostFunc;
; 180  : 	udValid = ValidFunc;
; 181  : 	udNotifyChild = NotifyChildFunc;

	mov	edx, DWORD PTR _NotifyChildFunc$[esp+40]
	mov	DWORD PTR [esi+4], ecx
	mov	ecx, DWORD PTR _ValidFunc$[esp+40]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR _CostFunc$[esp+40]
	mov	DWORD PTR [esi+20], edx

; 182  : 	udNotifyList = NotifyListFunc;
; 183  : 	udNumExtraChildrenFunc = NumExtraChildrenFunc;
; 184  : 	udGetExtraChildFunc = GetExtraChildFunc;

	mov	edx, DWORD PTR _GetExtraChildFunc$[esp+40]
	mov	DWORD PTR [esi+16], ecx
	mov	ecx, DWORD PTR _NumExtraChildrenFunc$[esp+40]
	mov	DWORD PTR [esi+12], eax
	mov	eax, DWORD PTR _NotifyListFunc$[esp+40]
	mov	DWORD PTR [esi+32], edx

; 185  : 	udInitializeFunc = InitializeFunc;
; 186  : 	udUninitializeFunc = UninitializeFunc;
; 187  : 
; 188  : 	m_pData = pData;

	mov	edx, DWORD PTR _pData$[esp+40]
	mov	DWORD PTR [esi+28], ecx
	mov	ecx, DWORD PTR _UninitializeFunc$[esp+40]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR _InitializeFunc$[esp+40]
	mov	DWORD PTR [esi+44], edx

; 189  : 
; 190  : 	m_iColumns = iColumns;
; 191  : 	m_iRows = iRows;
; 192  : 
; 193  : 	m_iXstart = -1;
; 194  : 	m_iYstart = -1;
; 195  : 	m_iXdest = -1;
; 196  : 	m_iYdest = -1;
; 197  : 	m_iInfo = 0;
; 198  : 
; 199  : 	m_bWrapX = bWrapX;

	mov	dl, BYTE PTR _bWrapX$[esp+40]

; 200  : 	m_bWrapY = bWrapY;
; 201  : 	m_bForceReset = false;
; 202  : 
; 203  : 	m_pOpen = NULL;
; 204  : 	m_pOpenTail = NULL;
; 205  : 	m_pClosed = NULL;
; 206  : 	m_pBest = NULL;
; 207  : 	m_pStackHead = NULL;
; 208  : 
; 209  : #ifdef AUI_ASTAR_REMOVE_MALLOC
; 210  : 	m_ppaaNodes = FNEW(CvAStarNode*[m_iColumns], c_eCiv5GameplayDLL, 0);
; 211  : #else
; 212  : 	m_ppaaNodes = reinterpret_cast<CvAStarNode**>(FMALLOCALIGNED(sizeof(CvAStarNode*)*m_iColumns, 64, c_eCiv5GameplayDLL, 0));

	push	212					; 000000d4H
	mov	DWORD PTR [esi+40], ecx
	mov	ecx, DWORD PTR _iRows$[esp+44]
	xor	ebx, ebx
	mov	DWORD PTR [esi+36], eax
	mov	eax, DWORD PTR _iColumns$[esp+44]
	push	OFFSET $SG219413
	or	ebp, -1
	mov	BYTE PTR [esi+76], dl
	mov	DWORD PTR [esi+52], ecx
	mov	cl, BYTE PTR _bWrapY$[esp+48]
	lea	edx, DWORD PTR [eax*4]
	push	64					; 00000040H
	push	edx
	mov	DWORD PTR [esi+48], eax
	mov	DWORD PTR [esi+56], ebp
	mov	DWORD PTR [esi+60], ebp
	mov	DWORD PTR [esi+64], ebp
	mov	DWORD PTR [esi+68], ebp
	mov	DWORD PTR [esi+72], ebx
	mov	BYTE PTR [esi+77], cl
	mov	BYTE PTR [esi+78], bl
	mov	DWORD PTR [esi+84], ebx
	mov	DWORD PTR [esi+88], ebx
	mov	DWORD PTR [esi+92], ebx
	mov	DWORD PTR [esi+96], ebx
	mov	DWORD PTR [esi+100], ebx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 213  : #endif
; 214  : 	for(iI = 0; iI < m_iColumns; iI++)

	xor	edi, edi
	cmp	DWORD PTR [esi+48], ebx
	mov	DWORD PTR [esi+104], eax
	jle	$LN4@Initialize
$LL6@Initialize:

; 215  : 	{
; 216  : #ifdef AUI_ASTAR_REMOVE_MALLOC
; 217  : 		m_ppaaNodes[iI] = FNEW(CvAStarNode[m_iRows], c_eCiv5GameplayDLL, 0);
; 218  : #else
; 219  : 		m_ppaaNodes[iI] = reinterpret_cast<CvAStarNode*>(FMALLOCALIGNED(sizeof(CvAStarNode)*m_iRows, 64, c_eCiv5GameplayDLL, 0));

	mov	eax, DWORD PTR [esi+52]
	push	219					; 000000dbH
	push	OFFSET $SG219419
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 5
	push	64					; 00000040H
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	mov	ecx, DWORD PTR [esi+104]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [ecx+edi*4], eax

; 220  : #endif
; 221  : 		for(iJ = 0; iJ < m_iRows; iJ++)

	xor	edx, edx
	cmp	DWORD PTR [esi+52], ebx
	jle	SHORT $LN5@Initialize

; 215  : 	{
; 216  : #ifdef AUI_ASTAR_REMOVE_MALLOC
; 217  : 		m_ppaaNodes[iI] = FNEW(CvAStarNode[m_iRows], c_eCiv5GameplayDLL, 0);
; 218  : #else
; 219  : 		m_ppaaNodes[iI] = reinterpret_cast<CvAStarNode*>(FMALLOCALIGNED(sizeof(CvAStarNode)*m_iRows, 64, c_eCiv5GameplayDLL, 0));

	xor	ecx, ecx
	npad	1
$LL3@Initialize:

; 222  : 		{
; 223  : #ifndef AUI_ASTAR_REMOVE_MALLOC
; 224  : 			new(&m_ppaaNodes[iI][iJ]) CvAStarNode();

	mov	eax, DWORD PTR [esi+104]
	mov	eax, DWORD PTR [eax+edi*4]
	add	eax, ecx
	je	SHORT $LN9@Initialize
	mov	DWORD PTR [eax+44], ebx
	mov	DWORD PTR [eax+48], 6
	lea	ebp, DWORD PTR [eax+52]
	mov	DWORD PTR [eax+40], ebp
	or	ebp, -1
	mov	WORD PTR [eax+80], bp
	or	ebp, ebp
	mov	WORD PTR [eax+82], bp
	xor	ebp, ebp
	mov	WORD PTR [eax+84], bp
	or	ebp, -1
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [eax+86], bl
	mov	DWORD PTR [eax+20], ebp
	mov	DWORD PTR [eax+24], ebx
	mov	DWORD PTR [eax+28], ebx
	mov	DWORD PTR [eax+32], ebx
	mov	DWORD PTR [eax+36], ebx
$LN9@Initialize:

; 225  : #endif
; 226  : 			m_ppaaNodes[iI][iJ].m_iX = iI;

	mov	eax, DWORD PTR [esi+104]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	WORD PTR [eax+ecx+80], di

; 227  : 			m_ppaaNodes[iI][iJ].m_iY = iJ;

	mov	eax, DWORD PTR [esi+104]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	WORD PTR [eax+ecx+82], dx
	inc	edx
	add	ecx, 96					; 00000060H
	cmp	edx, DWORD PTR [esi+52]
	mov	DWORD PTR __$EHRec$[esp+52], ebp
	jl	SHORT $LL3@Initialize
$LN5@Initialize:

; 213  : #endif
; 214  : 	for(iI = 0; iI < m_iColumns; iI++)

	inc	edi
	cmp	edi, DWORD PTR [esi+48]
	jl	$LL6@Initialize
$LN4@Initialize:

; 228  : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 229  : 			m_ppaaNodes[iI][iJ].m_pPlot = GC.getMap().plot(iI, iJ);
; 230  : #endif
; 231  : 		}
; 232  : 	}
; 233  : 
; 234  : #ifdef AUI_ASTAR_PRECALCULATE_NEIGHBORS_ON_INITIALIZE
; 235  : 	for (iI = 0; iI < m_iColumns; iI++)
; 236  : 		for (iJ = 0; iJ < m_iRows; iJ++)
; 237  : 			PrecalcNeighbors(&(m_ppaaNodes[iI][iJ]));
; 238  : #endif
; 239  : 
; 240  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 241  : 	m_bIsMultiplayer = GC.getGame().isNetworkMultiPlayer();
; 242  : #endif
; 243  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+44]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 28					; 0000001cH
	ret	64					; 00000040H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z$0:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR _iJ$[ebp]
	imul	edx, 96					; 00000060H
	mov	eax, DWORD PTR _iI$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR $T228000[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z:
	mov	eax, OFFSET __ehfuncinfo$?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z ENDP ; CvAStar::Initialize
PUBLIC	?LinkChild@CvAStar@@IAEXPAVCvAStarNode@@0@Z	; CvAStar::LinkChild
; Function compile flags: /Ogtpy
;	COMDAT ?LinkChild@CvAStar@@IAEXPAVCvAStarNode@@0@Z
_TEXT	SEGMENT
_node$ = 8						; size = 4
_check$ = 12						; size = 4
?LinkChild@CvAStar@@IAEXPAVCvAStarNode@@0@Z PROC	; CvAStar::LinkChild, COMDAT
; _this$ = ecx

; 607  : {

	push	ebx
	push	ebp

; 608  : #if defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 609  : 	int iKnownCost = node->m_iKnownCost + udFunc(udCost, node, check, 0, m_pData);
; 610  : #else
; 611  : 	int iKnownCost;
; 612  : 
; 613  : 	iKnownCost = node->m_iKnownCost + udFunc(udCost, node, check, 0, m_pData);

	mov	ebp, DWORD PTR _node$[esp+4]
	push	esi
	mov	esi, DWORD PTR _check$[esp+8]
	push	edi
	mov	edi, ecx
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [edi+44]
	test	eax, eax
	je	SHORT $LN13@LinkChild
	push	edi
	push	ecx
	push	0
	push	esi
	push	ebp
	call	eax
	add	esp, 20					; 00000014H
	jmp	SHORT $LN14@LinkChild
$LN13@LinkChild:
	mov	eax, 1
$LN14@LinkChild:
	mov	ebx, DWORD PTR [ebp+4]
	add	ebx, eax

; 614  : #endif
; 615  : 
; 616  : 	if(check->m_eCvAStarListType == CVASTARLIST_OPEN)

	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	jne	SHORT $LN8@LinkChild

; 617  : 	{
; 618  : 		node->m_apChildren.push_back(check);

	lea	ecx, DWORD PTR [ebp+40]
	mov	BYTE PTR [ecx+36], al
	mov	eax, DWORD PTR [ecx+8]
	cmp	DWORD PTR [ecx+4], eax
	jne	SHORT $LN15@LinkChild
	push	eax
	call	?GrowSize@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvAStarNode *,6,1,297,0>::GrowSize
$LN15@LinkChild:
	mov	eax, DWORD PTR [ebp+44]
	mov	ecx, DWORD PTR [ebp+40]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN18@LinkChild
	mov	DWORD PTR [eax], esi
$LN18@LinkChild:
	mov	eax, 1
	add	DWORD PTR [ebp+44], eax

; 619  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 620  : 		node->m_iNumChildren++;

	add	WORD PTR [ebp+84], ax

; 621  : #endif
; 622  : 
; 623  : 		if(iKnownCost < check->m_iKnownCost)

	cmp	ebx, DWORD PTR [esi+4]
	jge	$LN3@LinkChild

; 624  : 		{
; 625  : 			FAssert(node->m_pParent != check);
; 626  : 
; 627  : 			check->m_pParent = node;
; 628  : 			check->m_iKnownCost = iKnownCost;
; 629  : 			check->m_iTotalCost = iKnownCost + check->m_iHeuristicCost;

	mov	edx, DWORD PTR [esi+8]
	add	edx, ebx

; 630  : 
; 631  : 			UpdateOpenNode(check);

	push	esi
	mov	ecx, edi
	mov	DWORD PTR [esi+24], ebp
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi], edx
	call	?UpdateOpenNode@CvAStar@@IAEXPAVCvAStarNode@@@Z ; CvAStar::UpdateOpenNode

; 632  : 			udFunc(udNotifyChild, node, check, ASNC_OPENADD_UP, m_pData);

	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	$LN3@LinkChild
	mov	ecx, DWORD PTR [edi+44]
	push	edi
	push	ecx
	push	1
	push	esi
	push	ebp
	call	eax
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 676  : #endif
; 677  : 	}
; 678  : }

	ret	8
$LN8@LinkChild:

; 633  : 		}
; 634  : 	}
; 635  : 	else if(check->m_eCvAStarListType == CVASTARLIST_CLOSED)

	cmp	eax, 1
	jne	SHORT $LN5@LinkChild

; 636  : 	{
; 637  : 		node->m_apChildren.push_back(check);

	mov	eax, DWORD PTR [ebp+48]
	lea	ecx, DWORD PTR [ebp+40]
	mov	BYTE PTR [ecx+36], 0
	cmp	DWORD PTR [ecx+4], eax
	jne	SHORT $LN26@LinkChild
	push	eax
	call	?GrowSize@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvAStarNode *,6,1,297,0>::GrowSize
$LN26@LinkChild:
	mov	edx, DWORD PTR [ebp+44]
	mov	eax, DWORD PTR [ebp+40]
	lea	eax, DWORD PTR [eax+edx*4]
	test	eax, eax
	je	SHORT $LN29@LinkChild
	mov	DWORD PTR [eax], esi
$LN29@LinkChild:
	mov	eax, 1
	add	DWORD PTR [ebp+44], eax

; 638  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 639  : 		node->m_iNumChildren++;

	add	WORD PTR [ebp+84], ax

; 640  : #endif
; 641  : 
; 642  : 		if(iKnownCost < check->m_iKnownCost)

	cmp	ebx, DWORD PTR [esi+4]
	jge	$LN3@LinkChild

; 643  : 		{
; 644  : 			FAssert(node->m_pParent != check);
; 645  : 			check->m_pParent = node;
; 646  : 			check->m_iKnownCost = iKnownCost;
; 647  : 			check->m_iTotalCost = iKnownCost + check->m_iHeuristicCost;

	mov	ecx, DWORD PTR [esi+8]
	add	ecx, ebx
	mov	DWORD PTR [esi+24], ebp
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi], ecx

; 648  : 			udFunc(udNotifyChild, node, check, ASNC_CLOSEDADD_UP, m_pData);

	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN35@LinkChild
	mov	edx, DWORD PTR [edi+44]
	push	edi
	push	edx
	push	2
	push	esi
	push	ebp
	call	eax
	add	esp, 20					; 00000014H
$LN35@LinkChild:

; 649  : 
; 650  : 			UpdateParents(check);

	push	esi
	mov	ecx, edi
	call	?UpdateParents@CvAStar@@IAEXPAVCvAStarNode@@@Z ; CvAStar::UpdateParents
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 676  : #endif
; 677  : 	}
; 678  : }

	ret	8
$LN5@LinkChild:

; 651  : 		}
; 652  : 	}
; 653  : 	else
; 654  : 	{
; 655  : 		FAssert(check->m_eCvAStarListType == NO_CVASTARLIST);
; 656  : 		FAssert(node->m_pParent != check);
; 657  : 		check->m_pParent = node;

	mov	DWORD PTR [esi+24], ebp

; 658  : 		check->m_iKnownCost = iKnownCost;

	mov	DWORD PTR [esi+4], ebx

; 659  : 		if(udHeuristic == NULL)

	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	jne	SHORT $LN2@LinkChild

; 660  : 		{
; 661  : 			check->m_iHeuristicCost = 0;

	mov	DWORD PTR [esi+8], eax

; 662  : 		}
; 663  : 		else

	jmp	SHORT $LN1@LinkChild
$LN2@LinkChild:

; 664  : 		{
; 665  : 			check->m_iHeuristicCost = udHeuristic(check->m_iX, check->m_iY, m_iXdest, m_iYdest);

	mov	ecx, DWORD PTR [edi+68]
	mov	edx, DWORD PTR [edi+64]
	push	ecx
	movsx	ecx, WORD PTR [esi+82]
	push	edx
	movsx	edx, WORD PTR [esi+80]
	push	ecx
	push	edx
	call	eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+8], eax
$LN1@LinkChild:

; 666  : 		}
; 667  : 		check->m_iTotalCost = check->m_iKnownCost + check->m_iHeuristicCost;

	mov	eax, DWORD PTR [esi+8]
	add	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax

; 668  : 
; 669  : 		udFunc(udNotifyChild, node, check, ASNC_NEWADD, m_pData);

	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN39@LinkChild
	mov	ecx, DWORD PTR [edi+44]
	push	edi
	push	ecx
	push	4
	push	esi
	push	ebp
	call	eax
	add	esp, 20					; 00000014H
$LN39@LinkChild:

; 670  : 
; 671  : 		AddToOpen(check);

	push	esi
	mov	ecx, edi
	call	?AddToOpen@CvAStar@@QAEXPAVCvAStarNode@@@Z ; CvAStar::AddToOpen

; 672  : 
; 673  : 		node->m_apChildren.push_back(check);

	mov	eax, DWORD PTR [ebp+48]
	lea	edi, DWORD PTR [ebp+40]
	mov	BYTE PTR [edi+36], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN41@LinkChild
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@PAVCvAStarNode@@$05$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvAStarNode *,6,1,297,0>::GrowSize
$LN41@LinkChild:
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+edx*4]
	test	eax, eax
	je	SHORT $LN44@LinkChild
	mov	DWORD PTR [eax], esi
$LN44@LinkChild:
	mov	eax, 1
	add	DWORD PTR [edi+4], eax

; 674  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 675  : 		node->m_iNumChildren++;

	add	WORD PTR [ebp+84], ax
$LN3@LinkChild:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 676  : #endif
; 677  : 	}
; 678  : }

	ret	8
?LinkChild@CvAStar@@IAEXPAVCvAStarNode@@0@Z ENDP	; CvAStar::LinkChild
_TEXT	ENDS
PUBLIC	??_ECvAStarNode@@QAEPAXI@Z			; CvAStarNode::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Ogtpy
;	COMDAT ??_ECvAStarNode@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECvAStarNode@@QAEPAXI@Z PROC				; CvAStarNode::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $LN3@vector
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET ??1CvAStarNode@@QAE@XZ
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	96					; 00000060H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z
	test	bl, 1
	je	SHORT $LN2@vector
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$LN3@vector:
	mov	eax, DWORD PTR [esi+40]
	lea	ecx, DWORD PTR [esi+52]
	cmp	eax, ecx
	je	SHORT $LN11@vector
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN11@vector:
	test	bl, 1
	je	SHORT $LN1@vector
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_ECvAStarNode@@QAEPAXI@Z ENDP				; CvAStarNode::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?CopyPath@CvAStar@@SAXPBVCvAStarNode@@AAVCvPathNodeArray@@@Z ; CvAStar::CopyPath
; Function compile flags: /Ogtpy
;	COMDAT ?CopyPath@CvAStar@@SAXPBVCvAStarNode@@AAVCvPathNodeArray@@@Z
_TEXT	SEGMENT
$T228227 = 8						; size = 4
_pkEndNode$ = 8						; size = 4
_kPathArray$ = 12					; size = 4
?CopyPath@CvAStar@@SAXPBVCvAStarNode@@AAVCvPathNodeArray@@@Z PROC ; CvAStar::CopyPath, COMDAT

; 6007 : {

	push	ebp
	push	esi

; 6008 : 	if(pkEndNode != NULL)

	mov	esi, DWORD PTR _pkEndNode$[esp+4]
	xor	ebp, ebp
	cmp	esi, ebp
	je	$LN6@CopyPath

; 6009 : 	{
; 6010 : 		const CvAStarNode* pkNode = pkEndNode;
; 6011 : 
; 6012 : 		// Count the number of nodes
; 6013 : 		uint uiNodeCount = 1;
; 6014 : 
; 6015 : 		while(pkNode->m_pParent != NULL)

	mov	eax, DWORD PTR [esi+24]
	push	ebx
	push	edi
	lea	ebx, DWORD PTR [ebp+1]
	cmp	eax, ebp
	je	SHORT $LN4@CopyPath
	npad	4
$LL5@CopyPath:
	mov	eax, DWORD PTR [eax+24]

; 6016 : 		{
; 6017 : 			++uiNodeCount;

	inc	ebx
	cmp	eax, ebp
	jne	SHORT $LL5@CopyPath
$LN4@CopyPath:

; 6018 : 			pkNode = pkNode->m_pParent;
; 6019 : 		}
; 6020 : 
; 6021 : 		kPathArray.setsize(uiNodeCount);

	mov	edi, DWORD PTR _kPathArray$[esp+12]
	push	ebx
	mov	ecx, edi
	mov	DWORD PTR $T228227[esp+16], ebx
	call	?SetSize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXI@Z ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::SetSize
	cmp	DWORD PTR [edi+8], ebx
	lea	eax, DWORD PTR [edi+8]
	jb	SHORT $LN14@CopyPath
	lea	eax, DWORD PTR $T228227[esp+12]
$LN14@CopyPath:
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edi+4], eax

; 6022 : 
; 6023 : 		pkNode = pkEndNode;
; 6024 : 		kPathArray[0] = *pkNode;

	mov	cx, WORD PTR [esi+80]
	mov	eax, DWORD PTR [edi]
	mov	WORD PTR [eax+12], cx
	mov	dx, WORD PTR [esi+82]
	mov	WORD PTR [eax+14], dx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebp

; 6025 : 
; 6026 : 		uint uiIndex = 1;
; 6027 : 		while(pkNode->m_pParent != NULL)

	mov	ecx, DWORD PTR [esi+24]
	cmp	ecx, ebp
	je	SHORT $LN33@CopyPath

; 6018 : 			pkNode = pkNode->m_pParent;
; 6019 : 		}
; 6020 : 
; 6021 : 		kPathArray.setsize(uiNodeCount);

	mov	edx, 16					; 00000010H
$LL3@CopyPath:

; 6028 : 		{
; 6029 : 			pkNode = pkNode->m_pParent;
; 6030 : 			kPathArray[uiIndex++] = *pkNode;

	movzx	esi, WORD PTR [ecx+80]
	mov	eax, DWORD PTR [edi]
	add	eax, edx
	mov	WORD PTR [eax+12], si
	movzx	esi, WORD PTR [ecx+82]
	mov	WORD PTR [eax+14], si
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ebp
	mov	ecx, DWORD PTR [ecx+24]
	add	edx, 16					; 00000010H
	cmp	ecx, ebp
	jne	SHORT $LL3@CopyPath
$LN33@CopyPath:
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp

; 6035 : }

	ret	0
$LN6@CopyPath:

; 6031 : 		}
; 6032 : 	}
; 6033 : 	else
; 6034 : 		kPathArray.setsize(0);	// Setting the size to 0 rather than clearing so that the array data is not deleted.  Helps with memory thrashing.

	mov	esi, DWORD PTR _kPathArray$[esp+4]
	push	ebp
	mov	ecx, esi
	call	?SetSize@?$FFastVector@VCvPathNode@@$00$0A@$0A@UFDefaultFastVectorAllocator@?$BaseVector@VCvPathNode@@$00@@@@IAEXI@Z ; FFastVector<CvPathNode,1,0,0,BaseVector<CvPathNode,1>::FDefaultFastVectorAllocator>::SetSize
	mov	DWORD PTR [esi+4], ebp
	pop	esi
	pop	ebp

; 6035 : }

	ret	0
?CopyPath@CvAStar@@SAXPBVCvAStarNode@@AAVCvPathNodeArray@@@Z ENDP ; CvAStar::CopyPath
_TEXT	ENDS
PUBLIC	??$SAFE_DELETE_ARRAY@VCvAStarNode@@@@YAXAAPAVCvAStarNode@@@Z ; SAFE_DELETE_ARRAY<CvAStarNode>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\ffiretypes.h
;	COMDAT ??$SAFE_DELETE_ARRAY@VCvAStarNode@@@@YAXAAPAVCvAStarNode@@@Z
_TEXT	SEGMENT
_pkInstanceArray$ = 8					; size = 4
??$SAFE_DELETE_ARRAY@VCvAStarNode@@@@YAXAAPAVCvAStarNode@@@Z PROC ; SAFE_DELETE_ARRAY<CvAStarNode>, COMDAT

; 311  : {

	push	edi

; 312  : 	delete[] pkInstanceArray;

	mov	edi, DWORD PTR _pkInstanceArray$[esp]
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN27@SAFE_DELET
	mov	ecx, DWORD PTR [eax-4]
	push	esi
	lea	esi, DWORD PTR [eax-4]
	push	OFFSET ??1CvAStarNode@@QAE@XZ
	push	ecx
	push	96					; 00000060H
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	pop	esi
$LN27@SAFE_DELET:

; 313  : 	pkInstanceArray = NULL;

	mov	DWORD PTR [edi], 0
	pop	edi

; 314  : };

	ret	0
??$SAFE_DELETE_ARRAY@VCvAStarNode@@@@YAXAAPAVCvAStarNode@@@Z ENDP ; SAFE_DELETE_ARRAY<CvAStarNode>
_TEXT	ENDS
PUBLIC	?CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z	; CvAStar::CreateChildren
;	COMDAT ?s_CvAStarChildHexY@?1??CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z@4PAHA
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.h
_DATA	SEGMENT
?s_CvAStarChildHexY@?1??CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z@4PAHA DD 01H ; `CvAStar::CreateChildren'::`2'::s_CvAStarChildHexY
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
	DD	01H
_DATA	ENDS
;	COMDAT ?s_CvAStarChildHexX@?1??CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z@4PAHA
_DATA	SEGMENT
?s_CvAStarChildHexX@?1??CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z@4PAHA DD 00H ; `CvAStar::CreateChildren'::`2'::s_CvAStarChildHexX
	DD	01H
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
_DATA	ENDS
;	COMDAT ?CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z
_TEXT	SEGMENT
_y$ = -8						; size = 4
_x$ = -4						; size = 4
tv515 = 8						; size = 4
_iExtraChildren$219510 = 8				; size = 4
_node$ = 8						; size = 4
?CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z PROC	; CvAStar::CreateChildren, COMDAT
; _this$ = ecx

; 553  : {

	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _node$[esp+12]
	push	esi

; 554  : 	CvAStarNode* check;
; 555  : 	int range = 6;
; 556  : 	int x, y;
; 557  : 	int i;
; 558  : 
; 559  : 	static int s_CvAStarChildHexX[6] = { 0, 1,  1,  0, -1, -1, };
; 560  : 	static int s_CvAStarChildHexY[6] = { 1, 0, -1, -1,  0,  1, };
; 561  : 
; 562  : 	for(i = 0; i < range; i++)

	xor	ebx, ebx
	push	edi
	mov	esi, ecx
	mov	DWORD PTR tv515[esp+20], ebx
	jmp	SHORT $LN11@CreateChil
$LL62@CreateChil:
	mov	ebx, DWORD PTR tv515[esp+20]
$LN11@CreateChil:

; 563  : 	{
; 564  : 		x = node->m_iX - ((node->m_iY >= 0) ? (node->m_iY>>1) : ((node->m_iY - 1)/2));

	movzx	eax, WORD PTR [ebp+82]
	movsx	edi, ax
	test	ax, ax
	jl	SHORT $LN14@CreateChil
	mov	eax, edi
	jmp	SHORT $LN63@CreateChil
$LN14@CreateChil:
	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
$LN63@CreateChil:

; 565  : 		x += s_CvAStarChildHexX[i];

	movsx	edx, WORD PTR [ebp+80]
	mov	ecx, DWORD PTR ?s_CvAStarChildHexX@?1??CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z@4PAHA[ebx]
	sar	eax, 1
	add	ecx, edx
	sub	ecx, eax

; 566  : 		y = yRange(node->m_iY + s_CvAStarChildHexY[i]);

	mov	eax, DWORD PTR ?s_CvAStarChildHexY@?1??CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z@4PAHA[ebx]
	add	eax, edi
	cmp	BYTE PTR [esi+77], 0
	je	SHORT $LN23@CreateChil
	test	eax, eax
	jge	SHORT $LN22@CreateChil
	mov	ebx, DWORD PTR [esi+52]
	cdq
	idiv	ebx
	mov	edi, edx
	add	edi, ebx
	jmp	SHORT $LN18@CreateChil
$LN22@CreateChil:
	mov	edi, DWORD PTR [esi+52]
	cmp	eax, edi
	jl	SHORT $LN23@CreateChil
	cdq
	idiv	edi
	mov	edi, edx
	jmp	SHORT $LN18@CreateChil
$LN23@CreateChil:
	mov	edi, eax
$LN18@CreateChil:
	mov	DWORD PTR _y$[esp+24], edi

; 567  : 		x += ((y >= 0) ? (y>>1) : ((y - 1)/2));

	test	edi, edi
	jl	SHORT $LN16@CreateChil
	mov	eax, edi
	jmp	SHORT $LN64@CreateChil
$LN16@CreateChil:
	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
$LN64@CreateChil:
	sar	eax, 1
	add	ecx, eax

; 568  : 		x = xRange(x);

	cmp	BYTE PTR [esi+76], 0
	je	SHORT $LN31@CreateChil
	mov	ebx, DWORD PTR [esi+48]
	test	ecx, ecx
	jge	SHORT $LN30@CreateChil
	mov	eax, ecx
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN26@CreateChil
$LN30@CreateChil:
	cmp	ecx, ebx
	jl	SHORT $LN31@CreateChil
	mov	eax, ecx
	cdq
	idiv	ebx
	jmp	SHORT $LN26@CreateChil
$LN31@CreateChil:
	mov	edx, ecx
$LN26@CreateChil:

; 569  : 
; 570  : 		PREFETCH_FASTAR_NODE(&(m_ppaaNodes[x][y]));

	mov	eax, DWORD PTR [esi+104]
	mov	DWORD PTR _x$[esp+24], edx
	mov	eax, DWORD PTR [eax+edx*4]
	lea	ecx, DWORD PTR [edi+edi*2]
	shl	ecx, 5
	prefetcht0 BYTE PTR [eax+ecx]
	prefetcht0 BYTE PTR [eax+ecx+64]
	lea	ebx, DWORD PTR [eax+ecx]

; 571  : 		if(isValid(x, y))

	test	edx, edx
	jl	SHORT $LN10@CreateChil
	cmp	edx, DWORD PTR [esi+48]
	jge	SHORT $LN10@CreateChil
	test	edi, edi
	jl	SHORT $LN10@CreateChil
	cmp	edi, DWORD PTR [esi+52]
	jge	SHORT $LN10@CreateChil

; 572  : 		{
; 573  : 			check = &(m_ppaaNodes[x][y]);
; 574  : 
; 575  : 			if(udFunc(udValid, node, check, 0, m_pData))

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+44]
	test	eax, eax
	je	SHORT $LN59@CreateChil
	push	esi
	push	ecx
	push	0
	push	ebx
	push	ebp
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN10@CreateChil
$LN59@CreateChil:

; 576  : 			{
; 577  : 				LinkChild(node, check);

	push	ebx
	push	ebp
	mov	ecx, esi
	call	?LinkChild@CvAStar@@IAEXPAVCvAStarNode@@0@Z ; CvAStar::LinkChild
$LN10@CreateChil:
	mov	eax, DWORD PTR tv515[esp+20]
	add	eax, 4
	cmp	eax, 24					; 00000018H
	mov	DWORD PTR tv515[esp+20], eax
	jl	$LL62@CreateChil

; 578  : 			}
; 579  : 		}
; 580  : 	}
; 581  : 
; 582  : 	if(udNumExtraChildrenFunc && udGetExtraChildFunc)

	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	$LN3@CreateChil
	cmp	DWORD PTR [esi+32], 0
	je	$LN3@CreateChil

; 583  : 	{
; 584  : 		int iExtraChildren = udNumExtraChildrenFunc(node, this);

	push	esi
	push	ebp
	call	eax
	add	esp, 8

; 585  : 		for(int i = 0; i < iExtraChildren; i++)

	xor	ebx, ebx
	mov	DWORD PTR _iExtraChildren$219510[esp+20], eax
	test	eax, eax
	jle	SHORT $LN3@CreateChil
$LL5@CreateChil:

; 586  : 		{
; 587  : 			udGetExtraChildFunc(node, i, x, y, this);

	mov	eax, DWORD PTR [esi+32]
	push	esi
	lea	ecx, DWORD PTR _y$[esp+28]
	push	ecx
	lea	edx, DWORD PTR _x$[esp+32]
	push	edx
	push	ebx
	push	ebp
	call	eax

; 588  : 			PREFETCH_FASTAR_NODE(&(m_ppaaNodes[x][y]));

	mov	eax, DWORD PTR _y$[esp+44]
	mov	ecx, DWORD PTR _x$[esp+44]
	mov	edx, DWORD PTR [esi+104]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	edi, DWORD PTR [eax+eax*2]
	shl	edi, 5
	prefetcht0 BYTE PTR [edi+edx]
	prefetcht0 BYTE PTR [edi+edx+64]
	add	edi, edx
	add	esp, 20					; 00000014H

; 589  : 
; 590  : 			if(isValid(x, y))

	test	ecx, ecx
	jl	SHORT $LN4@CreateChil
	cmp	ecx, DWORD PTR [esi+48]
	jge	SHORT $LN4@CreateChil
	test	eax, eax
	jl	SHORT $LN4@CreateChil
	cmp	eax, DWORD PTR [esi+52]
	jge	SHORT $LN4@CreateChil

; 591  : 			{
; 592  : 				check = &(m_ppaaNodes[x][y]);
; 593  : 
; 594  : 				if(udFunc(udValid, node, check, 0, m_pData))

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+44]
	test	eax, eax
	je	SHORT $LN61@CreateChil
	push	esi
	push	ecx
	push	0
	push	edi
	push	ebp
	call	eax
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN4@CreateChil
$LN61@CreateChil:

; 595  : 				{
; 596  : 					LinkChild(node, check);

	push	edi
	push	ebp
	mov	ecx, esi
	call	?LinkChild@CvAStar@@IAEXPAVCvAStarNode@@0@Z ; CvAStar::LinkChild
$LN4@CreateChil:
	inc	ebx
	cmp	ebx, DWORD PTR _iExtraChildren$219510[esp+20]
	jl	SHORT $LL5@CreateChil
$LN3@CreateChil:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 597  : 				}
; 598  : 			}
; 599  : 		}
; 600  : 	}
; 601  : }

	add	esp, 8
	ret	4
?CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z ENDP	; CvAStar::CreateChildren
_TEXT	ENDS
PUBLIC	?DeInit@CvTwoLayerPathFinder@@QAEXXZ		; CvTwoLayerPathFinder::DeInit
; Function compile flags: /Ogtpy
;	COMDAT ?DeInit@CvTwoLayerPathFinder@@QAEXXZ
_TEXT	SEGMENT
?DeInit@CvTwoLayerPathFinder@@QAEXXZ PROC		; CvTwoLayerPathFinder::DeInit, COMDAT
; _this$ = ecx

; 4035 : {

	push	edi
	mov	edi, ecx

; 4036 : 	CvAStar::DeInit();

	call	?DeInit@CvAStar@@QAEXXZ			; CvAStar::DeInit

; 4037 : 
; 4038 : 	if(m_ppaaPartialMoveNodes != NULL)

	cmp	DWORD PTR [edi+628], 0
	je	SHORT $LN33@DeInit@2
	push	esi

; 4039 : 	{
; 4040 : 		for(int iI = 0; iI < m_iColumns; iI++)

	xor	esi, esi
	cmp	DWORD PTR [edi+48], esi
	jle	SHORT $LN1@DeInit@2
	push	ebx
	push	ebp
	npad	5
$LL3@DeInit@2:
	mov	eax, DWORD PTR [edi+628]
	lea	ebx, DWORD PTR [eax+esi*4]

; 4041 : 		{
; 4042 : 			SAFE_DELETE_ARRAY(m_ppaaPartialMoveNodes[iI]);

	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN9@DeInit@2
	mov	ecx, DWORD PTR [eax-4]
	lea	ebp, DWORD PTR [eax-4]
	push	OFFSET ??1CvAStarNode@@QAE@XZ
	push	ecx
	push	96					; 00000060H
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	push	ebp
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN9@DeInit@2:
	inc	esi
	mov	DWORD PTR [ebx], 0
	cmp	esi, DWORD PTR [edi+48]
	jl	SHORT $LL3@DeInit@2
	pop	ebp
	pop	ebx
$LN1@DeInit@2:

; 4043 : 		}
; 4044 : 
; 4045 : 		SAFE_DELETE_ARRAY(m_ppaaPartialMoveNodes);

	mov	edx, DWORD PTR [edi+628]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR [edi+628], 0
	pop	esi
$LN33@DeInit@2:
	pop	edi

; 4046 : 	}
; 4047 : }

	ret	0
?DeInit@CvTwoLayerPathFinder@@QAEXXZ ENDP		; CvTwoLayerPathFinder::DeInit
_TEXT	ENDS
PUBLIC	?Step@CvAStar@@IAEHXZ				; CvAStar::Step
; Function compile flags: /Ogtpy
;	COMDAT ?Step@CvAStar@@IAEHXZ
_TEXT	SEGMENT
?Step@CvAStar@@IAEHXZ PROC				; CvAStar::Step, COMDAT
; _this$ = ecx

; 420  : {

	push	esi
	mov	esi, ecx

; 421  : 	if((m_pBest = GetBest()) == NULL)

	call	?GetBest@CvAStar@@IAEPAVCvAStarNode@@XZ	; CvAStar::GetBest
	mov	DWORD PTR [esi+96], eax
	test	eax, eax
	jne	SHORT $LN3@Step
$LN10@Step:

; 422  : 	{
; 423  : 		return -1;

	or	eax, -1
	pop	esi

; 437  : }

	ret	0
$LN3@Step:

; 424  : 	}
; 425  : 
; 426  : 	CreateChildren(m_pBest); // needs to be done, even on the last node, to allow for re-use...

	push	eax
	mov	ecx, esi
	call	?CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z ; CvAStar::CreateChildren

; 427  : 
; 428  : 	if (m_pBest == NULL)	// There seems to be a case were this will come back NULL.

	mov	eax, DWORD PTR [esi+96]
	test	eax, eax

; 429  : 		return -1;

	je	SHORT $LN10@Step

; 430  : 
; 431  : 	if(IsPathDest(m_pBest->m_iX, m_pBest->m_iY))

	movsx	ecx, WORD PTR [eax+82]
	movsx	edx, WORD PTR [eax+80]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@Step
	push	esi
	mov	esi, DWORD PTR [esi+44]
	push	esi
	push	ecx
	push	edx
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN1@Step

; 432  : 	{
; 433  : 		return 1;

	mov	eax, 1
	pop	esi

; 437  : }

	ret	0
$LN1@Step:

; 434  : 	}
; 435  : 
; 436  : 	return 0;

	xor	eax, eax
	pop	esi

; 437  : }

	ret	0
?Step@CvAStar@@IAEHXZ ENDP				; CvAStar::Step
_TEXT	ENDS
PUBLIC	??1CvTwoLayerPathFinder@@QAE@XZ			; CvTwoLayerPathFinder::~CvTwoLayerPathFinder
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CvTwoLayerPathFinder@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvTwoLayerPathFinder@@QAE@XZ$0
__ehfuncinfo$??1CvTwoLayerPathFinder@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvTwoLayerPathFinder@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1CvTwoLayerPathFinder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvTwoLayerPathFinder@@QAE@XZ PROC			; CvTwoLayerPathFinder::~CvTwoLayerPathFinder, COMDAT
; _this$ = ecx

; 4001 : {

	push	-1
	push	__ehhandler$??1CvTwoLayerPathFinder@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	mov	DWORD PTR __$EHRec$[esp+28], 0

; 4002 : 	CvAStar::DeInit();

	call	?DeInit@CvAStar@@QAEXXZ			; CvAStar::DeInit

; 4003 : 
; 4004 : 	DeInit();

	mov	ecx, esi
	call	?DeInit@CvTwoLayerPathFinder@@QAEXXZ	; CvTwoLayerPathFinder::DeInit

; 4005 : }

	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	call	?DeInit@CvAStar@@QAEXXZ			; CvAStar::DeInit
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvTwoLayerPathFinder@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvAStar@@QAE@XZ			; CvAStar::~CvAStar
__ehhandler$??1CvTwoLayerPathFinder@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvTwoLayerPathFinder@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvTwoLayerPathFinder@@QAE@XZ ENDP			; CvTwoLayerPathFinder::~CvTwoLayerPathFinder
PUBLIC	?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z ; CvTwoLayerPathFinder::Initialize
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z$0
__ehfuncinfo$?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_iColumns$ = 8						; size = 4
_iRows$ = 12						; size = 4
_bWrapX$ = 16						; size = 1
_bWrapY$ = 20						; size = 1
_IsPathDestFunc$ = 24					; size = 4
_DestValidFunc$ = 28					; size = 4
_HeuristicFunc$ = 32					; size = 4
_CostFunc$ = 36						; size = 4
_ValidFunc$ = 40					; size = 4
_NotifyChildFunc$ = 44					; size = 4
_NotifyListFunc$ = 48					; size = 4
_InitializeFunc$ = 52					; size = 4
_UninitializeFunc$ = 56					; size = 4
$T228594 = 60						; size = 4
_pData$ = 60						; size = 4
?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z PROC ; CvTwoLayerPathFinder::Initialize, COMDAT
; _this$ = ecx

; 4010 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	esi, ecx

; 4011 : 	int iI, iJ;
; 4012 : 
; 4013 : 	DeInit();

	call	?DeInit@CvTwoLayerPathFinder@@QAEXXZ	; CvTwoLayerPathFinder::DeInit

; 4014 : 
; 4015 : 	CvAStar::Initialize(iColumns, iRows, bWrapX, bWrapY, IsPathDestFunc, DestValidFunc, HeuristicFunc, CostFunc, ValidFunc, NotifyChildFunc, NotifyListFunc, NULL, NULL, InitializeFunc, UninitializeFunc, pData);

	mov	eax, DWORD PTR _pData$[esp+24]
	mov	ecx, DWORD PTR _UninitializeFunc$[esp+24]
	mov	edx, DWORD PTR _InitializeFunc$[esp+24]
	push	eax
	mov	eax, DWORD PTR _NotifyListFunc$[esp+28]
	push	ecx
	mov	ecx, DWORD PTR _NotifyChildFunc$[esp+32]
	push	edx
	mov	edx, DWORD PTR _ValidFunc$[esp+36]
	push	0
	push	0
	push	eax
	mov	eax, DWORD PTR _CostFunc$[esp+48]
	push	ecx
	mov	ecx, DWORD PTR _HeuristicFunc$[esp+52]
	push	edx
	mov	edx, DWORD PTR _DestValidFunc$[esp+56]
	push	eax
	mov	eax, DWORD PTR _IsPathDestFunc$[esp+60]
	push	ecx
	mov	ecx, DWORD PTR _bWrapY$[esp+64]
	push	edx
	mov	edx, DWORD PTR _bWrapX$[esp+68]
	push	eax
	mov	eax, DWORD PTR _iRows$[esp+72]
	push	ecx
	mov	ecx, DWORD PTR _iColumns$[esp+76]
	push	edx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?Initialize@CvAStar@@QAEXHH_N0P6AHHHPBXPAV1@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AH52@ZP6AH5HAAH82@ZP6AX12@ZP6AX12@Z1@Z ; CvAStar::Initialize

; 4016 : 
; 4017 : 	m_ppaaPartialMoveNodes = FNEW(CvAStarNode*[m_iColumns], c_eCiv5GameplayDLL, 0);

	mov	eax, DWORD PTR [esi+48]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]

; 4018 : 	for(iI = 0; iI < m_iColumns; iI++)

	xor	edi, edi
	add	esp, 4
	cmp	DWORD PTR [esi+48], edi
	mov	DWORD PTR [esi+628], eax
	jle	$LN4@Initialize@2
	npad	2
$LL16@Initialize@2:

; 4019 : 	{
; 4020 : 		m_ppaaPartialMoveNodes[iI] = FNEW(CvAStarNode[m_iRows], c_eCiv5GameplayDLL, 0);

	mov	ebp, DWORD PTR [esi+52]
	xor	ecx, ecx
	mov	eax, ebp
	mov	edx, 96					; 00000060H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T228594[esp+24], eax
	xor	ebx, ebx
	mov	DWORD PTR __$EHRec$[esp+36], ebx
	cmp	eax, ebx
	je	SHORT $LN9@Initialize@2
	push	OFFSET ??1CvAStarNode@@QAE@XZ
	push	OFFSET ??0CvAStarNode@@QAE@XZ		; CvAStarNode::CvAStarNode
	push	ebp
	lea	ebx, DWORD PTR [eax+4]
	push	96					; 00000060H
	push	ebx
	mov	DWORD PTR [eax], ebp
	call	??_L@YGXPAXIHP6EX0@Z1@Z
$LN9@Initialize@2:
	mov	ecx, DWORD PTR [esi+628]

; 4021 : 		for(iJ = 0; iJ < m_iRows; iJ++)

	xor	eax, eax
	mov	DWORD PTR [ecx+edi*4], ebx
	cmp	DWORD PTR [esi+52], eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	jle	SHORT $LN5@Initialize@2

; 4019 : 	{
; 4020 : 		m_ppaaPartialMoveNodes[iI] = FNEW(CvAStarNode[m_iRows], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	npad	6
$LL3@Initialize@2:

; 4022 : 		{
; 4023 : 			m_ppaaPartialMoveNodes[iI][iJ].m_iX = iI;

	mov	edx, DWORD PTR [esi+628]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	WORD PTR [edx+ecx+80], di

; 4024 : 			m_ppaaPartialMoveNodes[iI][iJ].m_iY = iJ;

	mov	edx, DWORD PTR [esi+628]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	WORD PTR [edx+ecx+82], ax
	inc	eax
	add	ecx, 96					; 00000060H
	cmp	eax, DWORD PTR [esi+52]
	jl	SHORT $LL3@Initialize@2
$LN5@Initialize@2:

; 4018 : 	for(iI = 0; iI < m_iColumns; iI++)

	inc	edi
	cmp	edi, DWORD PTR [esi+48]
	jl	$LL16@Initialize@2
$LN4@Initialize@2:

; 4025 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4026 : 			m_ppaaPartialMoveNodes[iI][iJ].m_pPlot = GC.getMap().plot(iI, iJ);
; 4027 : #endif
; 4028 : 		}
; 4029 : 	}
; 4030 : };

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	56					; 00000038H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z$0:
	mov	eax, DWORD PTR $T228594[ebp-4]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z:
	mov	eax, OFFSET __ehfuncinfo$?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Initialize@CvTwoLayerPathFinder@@QAEXHH_N0P6AHHHPBXPAVCvAStar@@@Z3P6AHHHHH@ZP6AHPAVCvAStarNode@@5H12@Z666P6AX12@Z71@Z ENDP ; CvTwoLayerPathFinder::Initialize
PUBLIC	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z		; CvAStar::GeneratePath
EXTRN	?isNetworkMultiPlayer@CvGame@@QBE_NXZ:PROC	; CvGame::isNetworkMultiPlayer
; Function compile flags: /Ogtpy
;	COMDAT ?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z
_TEXT	SEGMENT
_iXstart$ = 8						; size = 4
_iYstart$ = 12						; size = 4
_iXdest$ = 16						; size = 4
_iYdest$ = 20						; size = 4
_iInfo$ = 24						; size = 4
_bReuse$ = 28						; size = 1
?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z PROC		; CvAStar::GeneratePath, COMDAT
; _this$ = ecx

; 248  : {

	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 249  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 250  : 	bool discardCacheForMPGame = m_bIsMultiplayer && !m_bIsMPCacheSafe;
; 251  : #else
; 252  : 	CvAStarNode* temp;
; 253  : 	int retval;
; 254  : 
; 255  : 	const CvGame& game = GC.getGame();
; 256  : 	bool isMultiplayer = game.isNetworkMultiPlayer();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	edi
	call	?isNetworkMultiPlayer@CvGame@@QBE_NXZ	; CvGame::isNetworkMultiPlayer

; 257  : 	bool discardCacheForMPGame = isMultiplayer && !m_bIsMPCacheSafe;

	xor	ebx, ebx
	test	al, al
	je	SHORT $LN28@GeneratePa
	cmp	BYTE PTR [esi+79], bl
	jne	SHORT $LN28@GeneratePa
	mov	cl, 1
	jmp	SHORT $LN29@GeneratePa
$LN28@GeneratePa:
	xor	cl, cl
$LN29@GeneratePa:

; 258  : #endif
; 259  : 
; 260  : 	if(m_bForceReset || (m_iXstart != iXstart) || (m_iYstart != iYstart) || (m_iInfo != iInfo) || discardCacheForMPGame)

	mov	eax, DWORD PTR _iInfo$[esp+12]
	mov	edi, DWORD PTR _iYstart$[esp+12]
	mov	ebp, DWORD PTR _iXstart$[esp+12]
	cmp	BYTE PTR [esi+78], bl
	jne	SHORT $LN24@GeneratePa
	cmp	DWORD PTR [esi+56], ebp
	jne	SHORT $LN24@GeneratePa
	cmp	DWORD PTR [esi+60], edi
	jne	SHORT $LN24@GeneratePa
	cmp	DWORD PTR [esi+72], eax
	jne	SHORT $LN24@GeneratePa
	cmp	cl, bl
	je	SHORT $LN97@GeneratePa
$LN24@GeneratePa:

; 261  : 		bReuse = false;

	mov	BYTE PTR _bReuse$[esp+12], bl
$LN97@GeneratePa:

; 262  : 
; 263  : 	m_iXdest = iXdest;

	mov	ecx, DWORD PTR _iXdest$[esp+12]

; 264  : 	m_iYdest = iYdest;
; 265  : 	m_iXstart = iXstart;
; 266  : 	m_iYstart = iYstart;
; 267  : 	m_iInfo = iInfo;

	mov	DWORD PTR [esi+72], eax

; 268  : 
; 269  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 270  : 	if (udInitializeFunc)

	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+64], ecx
	mov	ecx, DWORD PTR _iYdest$[esp+12]
	mov	DWORD PTR [esi+68], ecx
	mov	DWORD PTR [esi+56], ebp
	mov	DWORD PTR [esi+60], edi
	cmp	eax, ebx
	je	SHORT $LN23@GeneratePa

; 271  : 		udInitializeFunc(m_pData, this);

	mov	edx, DWORD PTR [esi+44]
	push	esi
	push	edx
	call	eax
	mov	ecx, DWORD PTR _iYdest$[esp+20]
	add	esp, 8
$LN23@GeneratePa:

; 272  : #endif
; 273  : 
; 274  : 	if(!isValid(iXstart, iYstart))

	cmp	ebp, ebx
	jl	SHORT $LN32@GeneratePa
	cmp	ebp, DWORD PTR [esi+48]
	jge	SHORT $LN32@GeneratePa
	cmp	edi, ebx
	jl	SHORT $LN32@GeneratePa
	cmp	edi, DWORD PTR [esi+52]
	jl	SHORT $LN22@GeneratePa
$LN32@GeneratePa:

; 275  : 	{
; 276  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 277  : 		if (udUninitializeFunc)

	mov	eax, DWORD PTR [esi+40]
	cmp	eax, ebx
	je	SHORT $LN21@GeneratePa

; 278  : 			udUninitializeFunc(m_pData, this);

	mov	ecx, DWORD PTR [esi+44]
	push	esi
	push	ecx
	call	eax
	add	esp, 8
$LN21@GeneratePa:
	pop	edi
	pop	esi
	pop	ebp

; 279  : #endif
; 280  : 		return false;

	xor	al, al
	pop	ebx

; 415  : }

	ret	24					; 00000018H
$LN22@GeneratePa:

; 281  : 	}
; 282  : 
; 283  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 284  : 	if (udInitializeFunc)
; 285  : 		udInitializeFunc(m_pData, this);
; 286  : 
; 287  : 	CvAStarNode* temp;
; 288  : #else
; 289  : 	PREFETCH_FASTAR_NODE(&(m_ppaaNodes[iXdest][iYdest]));

	mov	edx, DWORD PTR [esi+104]
	lea	eax, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR _iXdest$[esp+12]
	mov	edx, DWORD PTR [edx+ecx*4]
	shl	eax, 5
	prefetcht0 BYTE PTR [eax+edx]
	add	eax, edx
	prefetcht0 BYTE PTR [eax+64]
	add	eax, 64					; 00000040H

; 290  : #endif
; 291  : 
; 292  : 	if(!bReuse)

	cmp	BYTE PTR _bReuse$[esp+12], bl
	jne	$LN99@GeneratePa

; 293  : 	{
; 294  : 		// XXX should we just be doing a memset here?
; 295  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 296  : 		for (int iI = 0; iI < m_iColumns; iI++)
; 297  : 			for (int iJ = 0; iJ < m_iRows; iJ++)
; 298  : 				m_ppaaNodes[iI][iJ].clear();
; 299  : 		m_pClosed = NULL;
; 300  : #else
; 301  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 302  : 		if(m_pOpen)

	or	edx, -1
	cmp	DWORD PTR [esi+84], ebx
	je	SHORT $LN17@GeneratePa
$LL18@GeneratePa:

; 306  : 			{
; 307  : 				temp = m_pOpen->m_pNext;

	mov	eax, DWORD PTR [esi+84]
	mov	ecx, DWORD PTR [eax+28]

; 308  : 				m_pOpen->clear();

	xor	ebp, ebp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	WORD PTR [eax+84], bp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [eax+86], bl
	mov	DWORD PTR [eax+20], edx
	mov	DWORD PTR [eax+24], ebx
	mov	DWORD PTR [eax+28], ebx
	mov	DWORD PTR [eax+32], ebx
	mov	DWORD PTR [eax+36], ebx
	mov	DWORD PTR [eax+44], ebx

; 309  : 				m_pOpen = temp;

	mov	DWORD PTR [esi+84], ecx
	cmp	ecx, ebx
	jne	SHORT $LL18@GeneratePa

; 303  : #endif
; 304  : 		{
; 305  : 			while(m_pOpen)

	mov	ebp, DWORD PTR _iXstart$[esp+12]
$LN17@GeneratePa:

; 310  : 			}
; 311  : 		}
; 312  : 
; 313  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 314  : 		if(m_pClosed)

	cmp	DWORD PTR [esi+92], ebx
	je	SHORT $LN14@GeneratePa
$LL15@GeneratePa:

; 318  : 			{
; 319  : 				temp = m_pClosed->m_pNext;

	mov	eax, DWORD PTR [esi+92]
	mov	ecx, DWORD PTR [eax+28]

; 320  : 				m_pClosed->clear();

	xor	ebp, ebp
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	WORD PTR [eax+84], bp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [eax+86], bl
	mov	DWORD PTR [eax+20], edx
	mov	DWORD PTR [eax+24], ebx
	mov	DWORD PTR [eax+28], ebx
	mov	DWORD PTR [eax+32], ebx
	mov	DWORD PTR [eax+36], ebx
	mov	DWORD PTR [eax+44], ebx

; 321  : 				m_pClosed = temp;

	mov	DWORD PTR [esi+92], ecx
	cmp	ecx, ebx
	jne	SHORT $LL15@GeneratePa

; 315  : #endif
; 316  : 		{
; 317  : 			while(m_pClosed)

	mov	ebp, DWORD PTR _iXstart$[esp+12]
$LN14@GeneratePa:

; 322  : 			}
; 323  : 		}
; 324  : 
; 325  : 		PREFETCH_FASTAR_NODE(&(m_ppaaNodes[iXstart][iYstart]));

	mov	ecx, DWORD PTR [esi+104]
	mov	edx, DWORD PTR [ecx+ebp*4]
	lea	eax, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [ecx+ebp*4]
	shl	eax, 5
	prefetcht0 BYTE PTR [edx+eax]
	add	edx, eax
	prefetcht0 BYTE PTR [edx+64]
	add	edx, 64					; 00000040H

; 326  : #endif
; 327  : 
; 328  : 		m_pBest = NULL;

	mov	DWORD PTR [esi+96], ebx

; 329  : 		m_pStackHead = NULL;

	mov	DWORD PTR [esi+100], ebx

; 330  : 
; 331  : 		m_bForceReset = false;

	mov	BYTE PTR [esi+78], bl

; 332  : 
; 333  : 		temp = &(m_ppaaNodes[iXstart][iYstart]);

	mov	edi, DWORD PTR [ecx]
	add	edi, eax

; 334  : 
; 335  : #ifdef AUI_ASTAR_FIX_POSSIBLE_NULL_POINTERS
; 336  : 		temp->clear();
; 337  : #else
; 338  : 		temp->m_iKnownCost = 0;

	mov	DWORD PTR [edi+4], ebx

; 339  : #endif
; 340  : 		if(udHeuristic == NULL)

	mov	eax, DWORD PTR [esi+8]
	cmp	eax, ebx
	jne	SHORT $LN13@GeneratePa

; 341  : 		{
; 342  : 			temp->m_iHeuristicCost = 0;

	mov	DWORD PTR [edi+8], ebx

; 343  : 		}
; 344  : 		else

	jmp	SHORT $LN12@GeneratePa
$LN13@GeneratePa:

; 345  : 		{
; 346  : 			temp->m_iHeuristicCost = udHeuristic(m_iXstart, m_iYstart, m_iXdest, m_iYdest);

	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [esi+64]
	push	ecx
	mov	ecx, DWORD PTR [esi+60]
	push	edx
	mov	edx, DWORD PTR [esi+56]
	push	ecx
	push	edx
	call	eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR [edi+8], eax
$LN12@GeneratePa:

; 347  : 		}
; 348  : 		temp->m_iTotalCost = temp->m_iKnownCost + temp->m_iHeuristicCost;

	mov	eax, DWORD PTR [edi+8]
	add	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [edi], eax

; 349  : 
; 350  : 		m_pOpen = temp;
; 351  : 		m_pOpenTail = temp;
; 352  : 
; 353  : 		udFunc(udNotifyList, NULL, m_pOpen, ASNL_STARTOPEN, m_pData);

	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+84], edi
	mov	DWORD PTR [esi+88], edi
	cmp	eax, ebx
	je	SHORT $LN98@GeneratePa
	mov	ecx, DWORD PTR [esi+44]
	push	esi
	push	ecx
	push	1
	push	edi
	push	ebx
	call	eax
	add	esp, 20					; 00000014H
$LN98@GeneratePa:

; 354  : 		udFunc(udValid, NULL, temp, 0, m_pData);

	mov	eax, DWORD PTR [esi+16]
	cmp	eax, ebx
	je	SHORT $LN64@GeneratePa
	mov	edx, DWORD PTR [esi+44]
	push	esi
	push	edx
	push	ebx
	push	edi
	push	ebx
	call	eax
	add	esp, 20					; 00000014H
$LN64@GeneratePa:

; 355  : 		udFunc(udNotifyChild, NULL, temp, ASNC_INITIALADD, m_pData);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebx
	je	SHORT $LN99@GeneratePa
	mov	ecx, DWORD PTR [esi+44]
	push	esi
	push	ecx
	push	ebx
	push	edi
	push	ebx
	call	eax
	add	esp, 20					; 00000014H
$LN99@GeneratePa:

; 356  : 	}
; 357  : 
; 358  : 	if(udDestValid != NULL)

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	je	SHORT $LN10@GeneratePa

; 359  : 	{
; 360  : 		if(!udDestValid(iXdest, iYdest, m_pData, this))

	mov	edx, DWORD PTR [esi+44]
	mov	ecx, DWORD PTR _iYdest$[esp+12]
	push	esi
	push	edx
	mov	edx, DWORD PTR _iXdest$[esp+20]
	push	ecx
	push	edx
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax

; 361  : 		{
; 362  : 			if (udUninitializeFunc)
; 363  : 				udUninitializeFunc(m_pData, this);
; 364  : 			return false;

	je	$LN32@GeneratePa
$LN10@GeneratePa:

; 365  : 		}
; 366  : 	}
; 367  : 
; 368  : 	if(isValid(m_iXdest, m_iYdest))

	mov	ecx, DWORD PTR [esi+64]
	cmp	ecx, ebx
	mov	eax, DWORD PTR [esi+68]
	jl	SHORT $LL5@GeneratePa
	cmp	ecx, DWORD PTR [esi+48]
	jge	SHORT $LL5@GeneratePa
	cmp	eax, ebx
	jl	SHORT $LL5@GeneratePa
	cmp	eax, DWORD PTR [esi+52]
	jge	SHORT $LL5@GeneratePa

; 369  : 	{
; 370  : 		temp = &(m_ppaaNodes[m_iXdest][m_iYdest]);

	mov	edx, DWORD PTR [esi+104]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 5
	add	eax, DWORD PTR [edx+ecx*4]

; 371  : 
; 372  : 		if(temp->m_eCvAStarListType == CVASTARLIST_CLOSED)

	cmp	DWORD PTR [eax+20], 1
	jne	SHORT $LL5@GeneratePa

; 373  : 		{
; 374  : 			m_pBest = temp;

	mov	DWORD PTR [esi+96], eax
$LN3@GeneratePa:

; 408  : 	}
; 409  : 
; 410  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 411  : 	if (udUninitializeFunc)

	mov	eax, DWORD PTR [esi+40]
	cmp	eax, ebx
	je	SHORT $LN1@GeneratePa

; 412  : 		udUninitializeFunc(m_pData, this);

	mov	ecx, DWORD PTR [esi+44]
	push	esi
	push	ecx
	call	eax
	add	esp, 8
$LN1@GeneratePa:
	pop	edi
	pop	esi
	pop	ebp

; 413  : #endif
; 414  : 	return true;

	mov	al, 1
	pop	ebx

; 415  : }

	ret	24					; 00000018H
	npad	1
$LL5@GeneratePa:

; 389  : #endif
; 390  : 	{
; 391  : 		retval = Step();

	mov	ecx, esi
	call	?GetBest@CvAStar@@IAEPAVCvAStarNode@@XZ	; CvAStar::GetBest
	mov	DWORD PTR [esi+96], eax
	cmp	eax, ebx
	je	SHORT $LN92@GeneratePa
	push	eax
	mov	ecx, esi
	call	?CreateChildren@CvAStar@@IAEXPAVCvAStarNode@@@Z ; CvAStar::CreateChildren
	mov	eax, DWORD PTR [esi+96]
	cmp	eax, ebx
	je	SHORT $LN92@GeneratePa
	movsx	ecx, WORD PTR [eax+82]
	movsx	edx, WORD PTR [eax+80]
	mov	eax, DWORD PTR [esi]
	cmp	eax, ebx
	je	SHORT $LL5@GeneratePa
	mov	edi, DWORD PTR [esi+44]
	push	esi
	push	edi
	push	ecx
	push	edx
	call	eax
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LL5@GeneratePa

; 375  : 			if (udUninitializeFunc)
; 376  : 				udUninitializeFunc(m_pData, this);
; 377  : 			return true;
; 378  : 		}
; 379  : 	}
; 380  : 
; 381  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 382  : 	int retval = 0;
; 383  : 
; 384  : 	do
; 385  : #else
; 386  : 	retval = 0;
; 387  : 
; 388  : 	while(retval == 0)

	jmp	SHORT $LN3@GeneratePa
$LN92@GeneratePa:

; 392  : 	}
; 393  : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 394  : 	while (retval == 0);
; 395  : 
; 396  : 	if (udUninitializeFunc)
; 397  : 		udUninitializeFunc(m_pData, this);
; 398  : #endif
; 399  : 
; 400  : 	if(retval == -1)
; 401  : 	{
; 402  : 		assert(m_pBest == NULL);
; 403  : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 404  : 		if (udUninitializeFunc)

	mov	eax, DWORD PTR [esi+40]
	cmp	eax, ebx
	je	$LN21@GeneratePa

; 405  : 			udUninitializeFunc(m_pData, this);

	mov	edx, DWORD PTR [esi+44]
	push	esi
	push	edx
	call	eax
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp

; 406  : #endif
; 407  : 		return false;

	xor	al, al
	pop	ebx

; 415  : }

	ret	24					; 00000018H
?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z ENDP		; CvAStar::GeneratePath
_TEXT	ENDS
PUBLIC	?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z ; CvTwoLayerPathFinder::GenerateUnitPath
EXTRN	?Calc@FCRC@@QBEKPBXHK@Z:PROC			; FCRC::Calc
EXTRN	?g_CRC32@@3VFCRC@@A:BYTE			; g_CRC32
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z$0
__ehfuncinfo$?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
xdata$x	ENDS
;	COMDAT ?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z
_TEXT	SEGMENT
_strLogString$220579 = -40				; size = 28
__$EHRec$ = -12						; size = 12
_bResult$220577 = 8					; size = 1
_pkUnit$ = 8						; size = 4
_iXstart$ = 12						; size = 4
_iYstart$ = 16						; size = 4
_iXdest$ = 20						; size = 4
_iYdest$ = 24						; size = 4
_iInfo$ = 28						; size = 4
_bReuse$ = 32						; size = 1
?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z PROC ; CvTwoLayerPathFinder::GenerateUnitPath, COMDAT
; _this$ = ecx

; 4130 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	esi
	push	edi

; 4131 : 	if (pkUnit)

	mov	edi, DWORD PTR _pkUnit$[esp+44]
	mov	esi, ecx
	test	edi, edi
	je	$LN4@GenerateUn

; 4132 : 	{
; 4133 : 		CvAssert(gDLL->IsGameCoreThread() || !gDLL->IsGameCoreExecuting());
; 4134 : #ifdef AUI_ASTAR_TURN_LIMITER
; 4135 : 		SetData(pkUnit, iTargetTurns);
; 4136 : #else
; 4137 : 		SetData(pkUnit);

	cmp	BYTE PTR [esi+80], 0
	je	SHORT $LN8@GenerateUn
	cmp	DWORD PTR [esi+44], edi
	je	SHORT $LN8@GenerateUn
	mov	BYTE PTR [esi+78], 1
$LN8@GenerateUn:

; 4138 : #endif
; 4139 : 		bool bResult = GeneratePath(iXstart, iYstart, iXdest, iYdest, iInfo, bReuse);

	mov	eax, DWORD PTR _bReuse$[esp+44]
	mov	ecx, DWORD PTR _iXdest$[esp+44]
	mov	edx, DWORD PTR _iYstart$[esp+44]
	push	ebx
	mov	ebx, DWORD PTR _iYdest$[esp+48]
	push	ebp
	mov	ebp, DWORD PTR _iInfo$[esp+52]
	push	eax
	mov	eax, DWORD PTR _iXstart$[esp+56]
	push	ebp
	push	ebx
	push	ecx
	push	edx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR [esi+44], edi
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath

; 4140 : 		if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR _bResult$220577[esp+52], al
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN3@GenerateUn
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN3@GenerateUn

; 4141 : 		{
; 4142 : 			CvString strLogString;

	lea	ecx, DWORD PTR _strLogString$220579[esp+56]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4143 : 			uint uiChecksum = CRC_INIT;
; 4144 : 			// Loop through the nodes and make a checksum
; 4145 : 			CvAStarNode* pNode = GetLastNode();

	mov	esi, DWORD PTR [esi+96]
	or	eax, -1
	mov	DWORD PTR __$EHRec$[esp+64], 0

; 4146 : 
; 4147 : 			// Starting at the end, loop until we find a plot from this owner
; 4148 : 			while(pNode != NULL)

	test	esi, esi
	je	SHORT $LN1@GenerateUn
$LL2@GenerateUn:

; 4149 : 			{
; 4150 : 				// Just do the X/Y for now
; 4151 : 				uiChecksum = g_CRC32.Calc( &pNode->m_iX, sizeof( pNode->m_iX ), uiChecksum );

	push	eax
	push	2
	lea	ecx, DWORD PTR [esi+80]
	push	ecx
	mov	ecx, OFFSET ?g_CRC32@@3VFCRC@@A		; g_CRC32
	call	?Calc@FCRC@@QBEKPBXHK@Z			; FCRC::Calc

; 4152 : 				uiChecksum = g_CRC32.Calc( &pNode->m_iY, sizeof( pNode->m_iY ), uiChecksum );

	push	eax
	push	2
	lea	edx, DWORD PTR [esi+82]
	push	edx
	mov	ecx, OFFSET ?g_CRC32@@3VFCRC@@A		; g_CRC32
	call	?Calc@FCRC@@QBEKPBXHK@Z			; FCRC::Calc

; 4153 : 		
; 4154 : 				pNode = pNode->m_pParent;

	mov	esi, DWORD PTR [esi+24]
	test	esi, esi
	jne	SHORT $LL2@GenerateUn
$LN1@GenerateUn:

; 4155 : 			}
; 4156 : 
; 4157 : 			strLogString.Format("%d, %d, %d, %d, %d, %8x", iXstart, iYstart, iXdest, iYdest, iInfo, uiChecksum);

	mov	ecx, DWORD PTR _iYstart$[esp+52]
	mov	edx, DWORD PTR _iXstart$[esp+52]
	push	eax
	mov	eax, DWORD PTR _iXdest$[esp+56]
	push	ebp
	push	ebx
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR _strLogString$220579[esp+80]
	push	OFFSET $SG220586
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 4158 : 			LogPathGeneration(pkUnit, strLogString);

	lea	ecx, DWORD PTR _strLogString$220579[esp+88]
	push	ecx
	push	edi
	call	?LogPathGeneration@@YAXPBVCvUnit@@AAVCvString@@@Z ; LogPathGeneration
	add	esp, 40					; 00000028H

; 4159 : 		}

	lea	ecx, DWORD PTR _strLogString$220579[esp+56]
	mov	DWORD PTR __$EHRec$[esp+64], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@GenerateUn:

; 4160 : 		return bResult;

	mov	al, BYTE PTR _bResult$220577[esp+52]
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi

; 4161 : 	}
; 4162 : 	return false;
; 4163 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	28					; 0000001cH
$LN4@GenerateUn:
	mov	ecx, DWORD PTR __$EHRec$[esp+48]
	pop	edi
	xor	al, al
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z$0:
	lea	ecx, DWORD PTR _strLogString$220579[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GenerateUnitPath@CvTwoLayerPathFinder@@QAE_NPBVCvUnit@@HHHHH_N@Z ENDP ; CvTwoLayerPathFinder::GenerateUnitPath
PUBLIC	?GetStepDistanceBetweenPoints@CvStepPathFinder@@QAEHW4PlayerTypes@@0PAVCvPlot@@1@Z ; CvStepPathFinder::GetStepDistanceBetweenPoints
; Function compile flags: /Ogtpy
;	COMDAT ?GetStepDistanceBetweenPoints@CvStepPathFinder@@QAEHW4PlayerTypes@@0PAVCvPlot@@1@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_eEnemy$ = 12						; size = 4
_pStartPlot$ = 16					; size = 4
_pEndPlot$ = 20						; size = 4
?GetStepDistanceBetweenPoints@CvStepPathFinder@@QAEHW4PlayerTypes@@0PAVCvPlot@@1@Z PROC ; CvStepPathFinder::GetStepDistanceBetweenPoints, COMDAT
; _this$ = ecx

; 4172 : {

	push	esi
	mov	esi, ecx

; 4173 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 4174 : 	CvAStarNode* pPathfinderNode;
; 4175 : #endif
; 4176 : 
; 4177 : 	if(pStartPlot == NULL || pEndPlot == NULL || pStartPlot->getArea() != pEndPlot->getArea())

	mov	ecx, DWORD PTR _pStartPlot$[esp]
	test	ecx, ecx
	je	SHORT $LN3@GetStepDis
	mov	eax, DWORD PTR _pEndPlot$[esp]
	test	eax, eax
	je	SHORT $LN3@GetStepDis
	mov	edx, DWORD PTR [ecx+356]
	cmp	edx, DWORD PTR [eax+356]
	jne	SHORT $LN3@GetStepDis

; 4180 : 	}
; 4181 : 
; 4182 : 	SetData(&eEnemy);

	cmp	BYTE PTR [esi+80], 0
	je	SHORT $LN11@GetStepDis
	lea	edx, DWORD PTR _eEnemy$[esp]
	cmp	DWORD PTR [esi+44], edx
	je	SHORT $LN11@GetStepDis
	mov	BYTE PTR [esi+78], 1
$LN11@GetStepDis:
	push	ebx

; 4183 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4184 : 	if (GeneratePath(pStartPlot->getX(), pStartPlot->getY(), pEndPlot->getX(), pEndPlot->getY(), ePlayer, false))
; 4185 : 	{
; 4186 : 		CvAStarNode* pPathfinderNode = GetLastNode();
; 4187 : #else
; 4188 : 	bool bPathfinderSuccess = GeneratePath(pStartPlot->getX(), pStartPlot->getY(), pEndPlot->getX(), pEndPlot->getY(), ePlayer, false);

	mov	ebx, DWORD PTR _ePlayer$[esp+4]
	push	edi
	push	0
	lea	edx, DWORD PTR _eEnemy$[esp+12]
	mov	DWORD PTR [esi+44], edx
	movsx	edx, WORD PTR [eax+2]
	movsx	eax, WORD PTR [eax]
	movsx	edi, WORD PTR [ecx+2]
	movsx	ecx, WORD PTR [ecx]
	push	ebx
	push	edx
	push	eax
	push	edi
	push	ecx
	mov	ecx, esi
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	pop	edi
	pop	ebx

; 4189 : 	if(bPathfinderSuccess)

	test	al, al
	je	SHORT $LN3@GetStepDis

; 4190 : 	{
; 4191 : 		pPathfinderNode = GetLastNode();

	mov	esi, DWORD PTR [esi+96]

; 4192 : #endif
; 4193 : 
; 4194 : 		if(pPathfinderNode != NULL)

	test	esi, esi
	je	SHORT $LN3@GetStepDis

; 4195 : 		{
; 4196 : 			return pPathfinderNode->m_iData1;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 4197 : 		}
; 4198 : 	}
; 4199 : 
; 4200 : 	return -1;
; 4201 : }

	ret	16					; 00000010H
$LN3@GetStepDis:

; 4178 : 	{
; 4179 : 		return -1;

	or	eax, -1
	pop	esi

; 4197 : 		}
; 4198 : 	}
; 4199 : 
; 4200 : 	return -1;
; 4201 : }

	ret	16					; 00000010H
?GetStepDistanceBetweenPoints@CvStepPathFinder@@QAEHW4PlayerTypes@@0PAVCvPlot@@1@Z ENDP ; CvStepPathFinder::GetStepDistanceBetweenPoints
_TEXT	ENDS
PUBLIC	?DoesPathExist@CvStepPathFinder@@QAE_NW4PlayerTypes@@0PAVCvPlot@@1@Z ; CvStepPathFinder::DoesPathExist
; Function compile flags: /Ogtpy
;	COMDAT ?DoesPathExist@CvStepPathFinder@@QAE_NW4PlayerTypes@@0PAVCvPlot@@1@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_eEnemy$ = 12						; size = 4
_pStartPlot$ = 16					; size = 4
_pEndPlot$ = 20						; size = 4
?DoesPathExist@CvStepPathFinder@@QAE_NW4PlayerTypes@@0PAVCvPlot@@1@Z PROC ; CvStepPathFinder::DoesPathExist, COMDAT
; _this$ = ecx

; 4207 : 	if(pStartPlot == NULL || pEndPlot == NULL || pStartPlot->getArea() != pEndPlot->getArea())

	mov	edx, DWORD PTR _pStartPlot$[esp-4]
	push	esi
	test	edx, edx
	je	SHORT $LN1@DoesPathEx
	mov	eax, DWORD PTR _pEndPlot$[esp]
	test	eax, eax
	je	SHORT $LN1@DoesPathEx
	mov	esi, DWORD PTR [edx+356]
	cmp	esi, DWORD PTR [eax+356]
	jne	SHORT $LN1@DoesPathEx

; 4210 : 	}
; 4211 : 
; 4212 : 	SetData(&eEnemy);

	cmp	BYTE PTR [ecx+80], 0
	je	SHORT $LN9@DoesPathEx
	lea	esi, DWORD PTR _eEnemy$[esp]
	cmp	DWORD PTR [ecx+44], esi
	je	SHORT $LN9@DoesPathEx
	mov	BYTE PTR [ecx+78], 1
$LN9@DoesPathEx:
	push	ebx

; 4213 : 	return GeneratePath(pStartPlot->getX(), pStartPlot->getY(), pEndPlot->getX(), pEndPlot->getY(), ePlayer, false);

	mov	ebx, DWORD PTR _ePlayer$[esp+4]
	push	edi
	push	0
	lea	esi, DWORD PTR _eEnemy$[esp+12]
	mov	DWORD PTR [ecx+44], esi
	movsx	esi, WORD PTR [eax+2]
	movsx	eax, WORD PTR [eax]
	movsx	edi, WORD PTR [edx+2]
	movsx	edx, WORD PTR [edx]
	push	ebx
	push	esi
	push	eax
	push	edi
	push	edx
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	pop	edi
	pop	ebx
	pop	esi

; 4214 : }

	ret	16					; 00000010H
$LN1@DoesPathEx:

; 4208 : 	{
; 4209 : 		return false;

	xor	al, al
	pop	esi

; 4214 : }

	ret	16					; 00000010H
?DoesPathExist@CvStepPathFinder@@QAE_NW4PlayerTypes@@0PAVCvPlot@@1@Z ENDP ; CvStepPathFinder::DoesPathExist
_TEXT	ENDS
PUBLIC	?GetLastOwnedPlot@CvStepPathFinder@@QBEPAVCvPlot@@W4PlayerTypes@@0PAV2@1@Z ; CvStepPathFinder::GetLastOwnedPlot
EXTRN	?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ:PROC ; CvGlobals::getStepFinder
; Function compile flags: /Ogtpy
;	COMDAT ?GetLastOwnedPlot@CvStepPathFinder@@QBEPAVCvPlot@@W4PlayerTypes@@0PAV2@1@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_eEnemy$ = 12						; size = 4
_pStartPlot$ = 16					; size = 4
_pEndPlot$ = 20						; size = 4
?GetLastOwnedPlot@CvStepPathFinder@@QBEPAVCvPlot@@W4PlayerTypes@@0PAV2@1@Z PROC ; CvStepPathFinder::GetLastOwnedPlot, COMDAT
; _this$ = ecx

; 4220 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4221 : 	if (GC.getStepFinder().GetStepDistanceBetweenPoints(ePlayer, eEnemy, pStartPlot, pEndPlot) != -1)
; 4222 : #else
; 4223 : 	CvAStarNode* pNode;
; 4224 : 	int iNumSteps;
; 4225 : 
; 4226 : 	// Generate step path
; 4227 : 	iNumSteps = GC.getStepFinder().GetStepDistanceBetweenPoints(ePlayer, eEnemy, pStartPlot, pEndPlot);

	mov	eax, DWORD PTR _pEndPlot$[esp-4]
	mov	ecx, DWORD PTR _pStartPlot$[esp-4]
	mov	edx, DWORD PTR _eEnemy$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _ePlayer$[esp+8]
	push	eax
	push	ecx
	push	edx
	push	edi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ ; CvGlobals::getStepFinder
	mov	ecx, eax
	call	?GetStepDistanceBetweenPoints@CvStepPathFinder@@QAEHW4PlayerTypes@@0PAVCvPlot@@1@Z ; CvStepPathFinder::GetStepDistanceBetweenPoints

; 4228 : 	if(iNumSteps != -1)

	cmp	eax, -1
	je	SHORT $LN2@GetLastOwn

; 4229 : #endif
; 4230 : 	{
; 4231 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4232 : 		CvAStarNode* pNode = GetLastNode();
; 4233 : #else
; 4234 : 		pNode = GC.getStepFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ ; CvGlobals::getStepFinder
	mov	ecx, DWORD PTR [eax+96]

; 4235 : #endif
; 4236 : 
; 4237 : 		// Starting at the end, loop until we find a plot from this owner
; 4238 : #ifndef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4239 : 		CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 4240 : #endif
; 4241 : 		while(pNode != NULL)

	test	ecx, ecx
	je	SHORT $LN2@GetLastOwn
	mov	edx, DWORD PTR [eax+4020]
	mov	esi, DWORD PTR [eax+4068]
	npad	1
$LL3@GetLastOwn:

; 4242 : 		{
; 4243 : #if defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES) && defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4244 : 			CvPlot* currentPlot = pNode->m_pPlot;
; 4245 : #elif defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES)
; 4246 : 			CvPlot* currentPlot;
; 4247 : 			currentPlot = pNode->m_pPlot;
; 4248 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4249 : 			CvPlot* currentPlot = kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);
; 4250 : #else
; 4251 : 			CvPlot* currentPlot;
; 4252 : 			currentPlot = kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);

	movsx	eax, WORD PTR [ecx+82]
	movsx	ebx, WORD PTR [ecx+80]
	imul	eax, edx
	add	eax, ebx
	imul	eax, 484				; 000001e4H

; 4253 : #endif
; 4254 : 
; 4255 : 			// Check and see if this plot has the right owner
; 4256 : 			if(currentPlot->getOwner() == ePlayer)

	movsx	ebx, BYTE PTR [eax+esi+4]
	add	eax, esi
	cmp	ebx, edi
	je	SHORT $LN5@GetLastOwn

; 4257 : 			{
; 4258 : 				return currentPlot;
; 4259 : 			}
; 4260 : 
; 4261 : 			// Move to the previous plot on the path
; 4262 : 			pNode = pNode->m_pParent;

	mov	ecx, DWORD PTR [ecx+24]
	test	ecx, ecx
	jne	SHORT $LL3@GetLastOwn
$LN2@GetLastOwn:

; 4263 : 		}
; 4264 : 	}
; 4265 : 
; 4266 : 	return NULL;

	xor	eax, eax
$LN5@GetLastOwn:
	pop	edi
	pop	esi
	pop	ebx

; 4267 : }

	ret	16					; 00000010H
?GetLastOwnedPlot@CvStepPathFinder@@QBEPAVCvPlot@@W4PlayerTypes@@0PAV2@1@Z ENDP ; CvStepPathFinder::GetLastOwnedPlot
_TEXT	ENDS
PUBLIC	?GetXPlotsFromEnd@CvStepPathFinder@@QBEPAVCvPlot@@W4PlayerTypes@@0PAV2@1H_N@Z ; CvStepPathFinder::GetXPlotsFromEnd
; Function compile flags: /Ogtpy
;	COMDAT ?GetXPlotsFromEnd@CvStepPathFinder@@QBEPAVCvPlot@@W4PlayerTypes@@0PAV2@1H_N@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
_eEnemy$ = 12						; size = 4
_pStartPlot$ = 16					; size = 4
_iPathLen$ = 20						; size = 4
_pEndPlot$ = 20						; size = 4
_iPlotsFromEnd$ = 24					; size = 4
$T228945 = 28						; size = 4
_bLeaveEnemyTerritory$ = 28				; size = 1
?GetXPlotsFromEnd@CvStepPathFinder@@QBEPAVCvPlot@@W4PlayerTypes@@0PAV2@1H_N@Z PROC ; CvStepPathFinder::GetXPlotsFromEnd, COMDAT
; _this$ = ecx

; 4273 : #ifndef AUI_ASTAR_MINOR_OPTIMIZATION
; 4274 : 	CvAStarNode* pNode;
; 4275 : #endif
; 4276 : 	CvPlot* currentPlot = NULL;
; 4277 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4278 : 	// Generate step path
; 4279 : 	int iPathLen = GC.getStepFinder().GetStepDistanceBetweenPoints(ePlayer, eEnemy, pStartPlot, pEndPlot);
; 4280 : 	int iNumSteps = MIN(iPlotsFromEnd, iPathLen);
; 4281 : #else
; 4282 : 	int iNumSteps;
; 4283 : 	int iPathLen;
; 4284 : 
; 4285 : 	// Generate step path
; 4286 : 	iPathLen = GC.getStepFinder().GetStepDistanceBetweenPoints(ePlayer, eEnemy, pStartPlot, pEndPlot);

	mov	eax, DWORD PTR _pEndPlot$[esp-4]
	mov	ecx, DWORD PTR _pStartPlot$[esp-4]
	mov	edx, DWORD PTR _eEnemy$[esp-4]
	push	ebx
	push	ebp
	push	esi
	push	eax
	mov	eax, DWORD PTR _ePlayer$[esp+12]
	push	ecx
	push	edx
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ ; CvGlobals::getStepFinder
	mov	ecx, eax
	call	?GetStepDistanceBetweenPoints@CvStepPathFinder@@QAEHW4PlayerTypes@@0PAVCvPlot@@1@Z ; CvStepPathFinder::GetStepDistanceBetweenPoints
	mov	ebx, eax

; 4287 : 	iNumSteps = ::min(iPlotsFromEnd, iPathLen);

	cmp	ebx, DWORD PTR _iPlotsFromEnd$[esp+8]
	mov	DWORD PTR _iPathLen$[esp+8], ebx
	lea	eax, DWORD PTR _iPathLen$[esp+8]
	jl	SHORT $LN18@GetXPlotsF
	lea	eax, DWORD PTR _iPlotsFromEnd$[esp+8]
$LN18@GetXPlotsF:
	mov	ebp, DWORD PTR [eax]

; 4288 : #endif
; 4289 : 
; 4290 : 	if(iNumSteps != -1)

	cmp	ebp, -1
	je	$LN46@GetXPlotsF

; 4291 : 	{
; 4292 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4293 : 		CvAStarNode* pNode = GetLastNode();
; 4294 : #else
; 4295 : 		pNode = GC.getStepFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getStepFinder@CvGlobals@@QAEAAVCvStepPathFinder@@XZ ; CvGlobals::getStepFinder
	mov	ecx, DWORD PTR [eax+96]

; 4296 : #endif
; 4297 : 
; 4298 : 		if(pNode != NULL)

	test	ecx, ecx
	je	$LN46@GetXPlotsF

; 4299 : 		{
; 4300 : 			// Starting at the end, loop the correct number of times back
; 4301 : 			for(int i = 0; i < iNumSteps; i++)

	test	ebp, ebp
	jle	SHORT $LN8@GetXPlotsF
	mov	edx, ebp
$LL10@GetXPlotsF:

; 4302 : 			{
; 4303 : 				if(pNode->m_pParent != NULL)

	mov	eax, DWORD PTR [ecx+24]
	test	eax, eax
	je	SHORT $LN9@GetXPlotsF

; 4304 : 				{
; 4305 : 					// Move to the previous plot on the path
; 4306 : 					pNode = pNode->m_pParent;

	mov	ecx, eax
$LN9@GetXPlotsF:

; 4299 : 		{
; 4300 : 			// Starting at the end, loop the correct number of times back
; 4301 : 			for(int i = 0; i < iNumSteps; i++)

	sub	edx, 1
	jne	SHORT $LL10@GetXPlotsF
$LN8@GetXPlotsF:

; 4307 : 				}
; 4308 : 			}
; 4309 : 
; 4310 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4311 : 			currentPlot = pNode->m_pPlot;
; 4312 : #else
; 4313 : 			CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 4314 : 			currentPlot = kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);

	mov	esi, DWORD PTR [eax+4020]
	movsx	edx, WORD PTR [ecx+80]
	push	edi
	mov	edi, DWORD PTR [eax+4068]
	movsx	eax, WORD PTR [ecx+82]
	imul	eax, esi
	add	eax, edx
	imul	eax, 484				; 000001e4H
	add	eax, edi

; 4315 : #endif
; 4316 : 
; 4317 : 			// Was an enemy specified and we don't want this plot to be in enemy territory?
; 4318 : 			if (eEnemy != NO_PLAYER && bLeaveEnemyTerritory)

	cmp	DWORD PTR _eEnemy$[esp+12], -1
	je	SHORT $LN48@GetXPlotsF
	cmp	BYTE PTR _bLeaveEnemyTerritory$[esp+12], 0
	je	SHORT $LN48@GetXPlotsF

; 4319 : 			{
; 4320 : 				// Loop until we leave enemy territory
; 4321 : 				for (int i = 0; i < (iPathLen - iNumSteps) && currentPlot->getOwner() == eEnemy; i++)

	sub	ebx, ebp
	xor	edx, edx

; 4324 : 					{
; 4325 : 						// Move to the previous plot on the path
; 4326 : 						pNode = pNode->m_pParent;

	mov	DWORD PTR $T228945[esp+12], ebx
	test	ebx, ebx
	jle	SHORT $LN48@GetXPlotsF

; 4319 : 			{
; 4320 : 				// Loop until we leave enemy territory
; 4321 : 				for (int i = 0; i < (iPathLen - iNumSteps) && currentPlot->getOwner() == eEnemy; i++)

	mov	ebx, DWORD PTR _eEnemy$[esp+12]
$LL5@GetXPlotsF:
	movsx	ebp, BYTE PTR [eax+4]
	cmp	ebp, ebx
	jne	SHORT $LN48@GetXPlotsF

; 4322 : 				{
; 4323 : 					if (pNode->m_pParent != NULL)

	mov	ecx, DWORD PTR [ecx+24]
	test	ecx, ecx
	je	SHORT $LN48@GetXPlotsF

; 4327 : #ifdef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4328 : 						currentPlot = pNode->m_pPlot;
; 4329 : #else
; 4330 : 						currentPlot = kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);

	movsx	eax, WORD PTR [ecx+82]
	movsx	ebp, WORD PTR [ecx+80]
	imul	eax, esi
	add	eax, ebp
	imul	eax, 484				; 000001e4H
	inc	edx
	add	eax, edi
	cmp	edx, DWORD PTR $T228945[esp+12]
	jl	SHORT $LL5@GetXPlotsF
$LN48@GetXPlotsF:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 4343 : }

	ret	24					; 00000018H
$LN46@GetXPlotsF:

; 4331 : #endif
; 4332 : 					}
; 4333 : 					else
; 4334 : 					{
; 4335 : 						break;
; 4336 : 					}
; 4337 : 				}
; 4338 : 			}
; 4339 : 		}
; 4340 : 	}
; 4341 : 
; 4342 : 	return currentPlot;

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 4343 : }

	ret	24					; 00000018H
?GetXPlotsFromEnd@CvStepPathFinder@@QBEPAVCvPlot@@W4PlayerTypes@@0PAV2@1H_N@Z ENDP ; CvStepPathFinder::GetXPlotsFromEnd
_TEXT	ENDS
PUBLIC	?DoesPathExist@CvIgnoreUnitsPathFinder@@QAE_NAAVCvUnit@@PAVCvPlot@@1@Z ; CvIgnoreUnitsPathFinder::DoesPathExist
; Function compile flags: /Ogtpy
;	COMDAT ?DoesPathExist@CvIgnoreUnitsPathFinder@@QAE_NAAVCvUnit@@PAVCvPlot@@1@Z
_TEXT	SEGMENT
_unit$ = 8						; size = 4
_pStartPlot$ = 12					; size = 4
_pEndPlot$ = 16						; size = 4
?DoesPathExist@CvIgnoreUnitsPathFinder@@QAE_NAAVCvUnit@@PAVCvPlot@@1@Z PROC ; CvIgnoreUnitsPathFinder::DoesPathExist, COMDAT
; _this$ = ecx

; 4356 : {

	push	edi

; 4357 : 	m_pCurNode = NULL;
; 4358 : 
; 4359 : 	if(pStartPlot == NULL || pEndPlot == NULL)

	mov	edi, DWORD PTR _pStartPlot$[esp]
	mov	DWORD PTR [ecx+628], 0
	test	edi, edi
	je	SHORT $LN1@DoesPathEx@2
	mov	edx, DWORD PTR _pEndPlot$[esp]
	test	edx, edx
	je	SHORT $LN1@DoesPathEx@2

; 4362 : 	}
; 4363 : 
; 4364 : #if defined(AUI_ASTAR_TURN_LIMITER) && defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4365 : 	SetData(pUnit, iMaxTurns);
; 4366 : #elif defined(AUI_ASTAR_TURN_LIMITER)
; 4367 : 	SetData(&unit, iMaxTurns);
; 4368 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4369 : 	SetData(pUnit);
; 4370 : #else
; 4371 : 	SetData(&unit);

	cmp	BYTE PTR [ecx+80], 0
	mov	eax, DWORD PTR _unit$[esp]
	je	SHORT $LN5@DoesPathEx@2
	cmp	DWORD PTR [ecx+44], eax
	je	SHORT $LN5@DoesPathEx@2
	mov	BYTE PTR [ecx+78], 1
$LN5@DoesPathEx@2:
	push	esi
	mov	DWORD PTR [ecx+44], eax

; 4372 : #endif
; 4373 : 	return GeneratePath(pStartPlot->getX(), pStartPlot->getY(), pEndPlot->getX(), pEndPlot->getY(), 0, true /*bReuse*/);

	movsx	eax, WORD PTR [edx+2]
	movsx	edx, WORD PTR [edx]
	movsx	esi, WORD PTR [edi+2]
	movsx	edi, WORD PTR [edi]
	push	1
	push	0
	push	eax
	push	edx
	push	esi
	push	edi
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	pop	esi
	pop	edi

; 4374 : }

	ret	12					; 0000000cH
$LN1@DoesPathEx@2:

; 4360 : 	{
; 4361 : 		return false;

	xor	al, al
	pop	edi

; 4374 : }

	ret	12					; 0000000cH
?DoesPathExist@CvIgnoreUnitsPathFinder@@QAE_NAAVCvUnit@@PAVCvPlot@@1@Z ENDP ; CvIgnoreUnitsPathFinder::DoesPathExist
_TEXT	ENDS
PUBLIC	?GetLastOwnedPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@PAV2@0W4PlayerTypes@@@Z ; CvIgnoreUnitsPathFinder::GetLastOwnedPlot
; Function compile flags: /Ogtpy
;	COMDAT ?GetLastOwnedPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@PAV2@0W4PlayerTypes@@@Z
_TEXT	SEGMENT
_pStartPlot$ = 8					; size = 4
_pEndPlot$ = 12						; size = 4
_iOwner$ = 16						; size = 4
?GetLastOwnedPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@PAV2@0W4PlayerTypes@@@Z PROC ; CvIgnoreUnitsPathFinder::GetLastOwnedPlot, COMDAT
; _this$ = ecx

; 4409 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 4410 : 	// Generate path
; 4411 : 	if (GC.getIgnoreUnitsPathFinder().GeneratePath(pStartPlot->getX(), pStartPlot->getX(), pEndPlot->getX(), pEndPlot->getX(), 0, false))
; 4412 : 	{
; 4413 : 		CvAStarNode* pNode = GC.getIgnoreUnitsPathFinder().GetLastNode();
; 4414 : #else
; 4415 : 	CvAStarNode* pNode;
; 4416 : 
; 4417 : 	// Generate path
; 4418 : 	if(GC.getIgnoreUnitsPathFinder().GeneratePath(pStartPlot->getX(), pStartPlot->getX(), pEndPlot->getX(), pEndPlot->getX(), 0, false))

	mov	eax, DWORD PTR _pEndPlot$[esp-4]
	movsx	eax, WORD PTR [eax]
	mov	ecx, DWORD PTR _pStartPlot$[esp-4]
	movsx	ecx, WORD PTR [ecx]
	push	ebx
	push	esi
	push	edi
	push	0
	push	0
	push	eax
	push	eax
	push	ecx
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder
	mov	ecx, eax
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	test	al, al
	je	SHORT $LN2@GetLastOwn@2

; 4419 : 	{
; 4420 : 		pNode = GC.getIgnoreUnitsPathFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder
	mov	ecx, DWORD PTR [eax+96]

; 4421 : #endif
; 4422 : 
; 4423 : 		// Starting at the end, loop until we find a plot from this owner
; 4424 : #ifndef AUI_ASTAR_CACHE_PLOTS_AT_NODES
; 4425 : 		CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 4426 : #endif
; 4427 : 		while(pNode != NULL)

	test	ecx, ecx
	je	SHORT $LN2@GetLastOwn@2
	mov	edx, DWORD PTR [eax+4020]
	mov	esi, DWORD PTR [eax+4068]
	mov	edi, DWORD PTR _iOwner$[esp+8]
$LL3@GetLastOwn@2:

; 4428 : 		{
; 4429 : #if defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES) && defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4430 : 			CvPlot* currentPlot = pNode->m_pPlot;
; 4431 : #elif defined(AUI_ASTAR_CACHE_PLOTS_AT_NODES)
; 4432 : 			CvPlot* currentPlot;
; 4433 : 			currentPlot = pNode->m_pPlot;
; 4434 : #elif defined(AUI_ASTAR_MINOR_OPTIMIZATION)
; 4435 : 			CvPlot* currentPlot = kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);
; 4436 : #else
; 4437 : 			CvPlot* currentPlot;
; 4438 : 			currentPlot = kMap.plotUnchecked(pNode->m_iX, pNode->m_iY);

	movsx	eax, WORD PTR [ecx+82]
	movsx	ebx, WORD PTR [ecx+80]
	imul	eax, edx
	add	eax, ebx
	imul	eax, 484				; 000001e4H

; 4439 : #endif
; 4440 : 
; 4441 : 			// Check and see if this plot has the right owner
; 4442 : 			if(currentPlot->getOwner() == iOwner)

	movsx	ebx, BYTE PTR [eax+esi+4]
	add	eax, esi
	cmp	ebx, edi
	je	SHORT $LN5@GetLastOwn@2

; 4443 : 			{
; 4444 : 				return currentPlot;
; 4445 : 			}
; 4446 : 
; 4447 : 			// Move to the previous plot on the path
; 4448 : 			pNode = pNode->m_pParent;

	mov	ecx, DWORD PTR [ecx+24]
	test	ecx, ecx
	jne	SHORT $LL3@GetLastOwn@2
$LN2@GetLastOwn@2:

; 4449 : 		}
; 4450 : 	}
; 4451 : 
; 4452 : 	return NULL;

	xor	eax, eax
$LN5@GetLastOwn@2:
	pop	edi
	pop	esi
	pop	ebx

; 4453 : }

	ret	12					; 0000000cH
?GetLastOwnedPlot@CvIgnoreUnitsPathFinder@@QBEPAVCvPlot@@PAV2@0W4PlayerTypes@@@Z ENDP ; CvIgnoreUnitsPathFinder::GetLastOwnedPlot
_TEXT	ENDS
PUBLIC	?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z ; TurnsToReachTarget
EXTRN	?GetTacticalAnalysisMapFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ:PROC ; CvGlobals::GetTacticalAnalysisMapFinder
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z$0
__ehfuncinfo$?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
xdata$x	ENDS
;	COMDAT ?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_pUnit$ = 8						; size = 8
_pTarget$ = 16						; size = 4
_bReusePaths$ = 20					; size = 1
_bIgnoreUnits$ = 24					; size = 1
_bIgnoreStacking$ = 28					; size = 1
?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z PROC ; TurnsToReachTarget, COMDAT

; 5554 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	push	ebp
	push	esi
	push	edi

; 5555 : 	int rtnValue = MAX_INT;
; 5556 : 	CvAStarNode* pNode = NULL;
; 5557 : 
; 5558 : 	if(pTarget == pUnit->plot())

	mov	ecx, DWORD PTR _pUnit$[esp+24]
	mov	DWORD PTR __$EHRec$[esp+36], 0
	mov	ebx, 2147483647				; 7fffffffH
	call	?plot@CvUnit@@QBEPAVCvPlot@@XZ		; CvUnit::plot
	mov	esi, DWORD PTR _pTarget$[esp+24]

; 5559 : 	{
; 5560 : 		return 0;

	mov	ecx, DWORD PTR _pUnit$[esp+24]
	cmp	esi, eax
	jne	SHORT $LN11@TurnsToRea
	mov	DWORD PTR __$EHRec$[esp+36], -1
	test	ecx, ecx
	je	SHORT $LN20@TurnsToRea
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN20@TurnsToRea:
	xor	eax, eax

; 5674 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
$LN11@TurnsToRea:

; 5561 : 	}
; 5562 : 
; 5563 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 5564 : 	if (pUnit && pTarget)
; 5565 : #else
; 5566 : 	if(pUnit)

	test	ecx, ecx
	je	$LN1@TurnsToRea

; 5567 : #endif
; 5568 : 	{
; 5569 : #ifdef PATH_FINDER_LOGGING
; 5570 : 		CvString strBaseString;
; 5571 : 		cvStopWatch kTimer(strBaseString, "Pathfinder.csv");
; 5572 : #endif
; 5573 : 
; 5574 : #ifdef AUI_ASTAR_MINOR_OPTIMIZATION
; 5575 : 		int iFlags = 0;
; 5576 : 		if (bIgnoreStacking)
; 5577 : 		{
; 5578 : 			iFlags |= MOVE_IGNORE_STACKING;
; 5579 : 		}
; 5580 : 
; 5581 : 		CvAStar* pPathfinder = &GC.GetTacticalAnalysisMapFinder();
; 5582 : 		if (bIgnoreUnits)
; 5583 : 		{
; 5584 : 			pPathfinder = &GC.getIgnoreUnitsPathFinder();
; 5585 : 			iFlags |= MOVE_UNITS_IGNORE_DANGER;
; 5586 : 		}
; 5587 : #ifdef AUI_DANGER_PLOTS_REMADE
; 5588 : 		if (bForDanger)
; 5589 : 		{
; 5590 : 			pPathfinder = &GC.getDangerPathFinder();
; 5591 : 			iFlags |= MOVE_UNITS_IGNORE_DANGER;
; 5592 : 		}
; 5593 : #endif
; 5594 : 
; 5595 : #ifdef AUI_ASTAR_TURN_LIMITER
; 5596 : 		if (!pFromPlot)
; 5597 : 			pFromPlot = pUnit->plot();
; 5598 : 		pPathfinder->SetData(pUnit.pointer(), iTargetTurns);
; 5599 : #else
; 5600 : 		pPathfinder->SetData(pUnit.pointer());
; 5601 : #endif
; 5602 : 		if (pPathfinder->GeneratePath(pFromPlot->getX(), pFromPlot->getY(), pTarget->getX(), pTarget->getY(), iFlags, bReusePaths))
; 5603 : 		{
; 5604 : 			pNode = pPathfinder->GetLastNode();
; 5605 : 		}
; 5606 : #else
; 5607 : 		if(bIgnoreUnits)

	cmp	BYTE PTR _bIgnoreUnits$[esp+24], 0
	je	SHORT $LN9@TurnsToRea

; 5608 : 		{
; 5609 : #ifdef AUI_ASTAR_TURN_LIMITER
; 5610 : 			if (!pFromPlot)
; 5611 : 				pFromPlot = pUnit->plot();
; 5612 : 			GC.getIgnoreUnitsPathFinder().SetData(pUnit.pointer(), iTargetTurns);
; 5613 : 			if (GC.getIgnoreUnitsPathFinder().GeneratePath(pFromPlot->getX(), pFromPlot->getY(), pTarget->getX(), pTarget->getY(), 0, bReusePaths))
; 5614 : #else
; 5615 : 			GC.getIgnoreUnitsPathFinder().SetData(pUnit.pointer());

	mov	edi, ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder
	cmp	BYTE PTR [eax+80], 0
	je	SHORT $LN26@TurnsToRea
	cmp	DWORD PTR [eax+44], edi
	je	SHORT $LN26@TurnsToRea
	mov	BYTE PTR [eax+78], 1
$LN26@TurnsToRea:
	mov	DWORD PTR [eax+44], edi

; 5616 : 			if (GC.getIgnoreUnitsPathFinder().GeneratePath(pUnit->getX(), pUnit->getY(), pTarget->getX(), pTarget->getY(), 0, bReusePaths))

	movsx	eax, WORD PTR [esi+2]
	mov	edi, DWORD PTR _bReusePaths$[esp+24]
	movsx	ecx, WORD PTR [esi]
	mov	edx, DWORD PTR _pUnit$[esp+24]
	mov	esi, DWORD PTR [edx+88]
	mov	edx, DWORD PTR [edx+76]
	push	edi
	push	0
	push	eax
	push	ecx
	push	esi
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder
	mov	ecx, eax
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	test	al, al
	je	$LN78@TurnsToRea

; 5617 : #endif
; 5618 : 			{
; 5619 : 				pNode = GC.getIgnoreUnitsPathFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getIgnoreUnitsPathFinder@CvGlobals@@QAEAAVCvIgnoreUnitsPathFinder@@XZ ; CvGlobals::getIgnoreUnitsPathFinder

; 5620 : 			}
; 5621 : 		}
; 5622 : 		else

	jmp	$LN80@TurnsToRea
$LN9@TurnsToRea:

; 5623 : 		{
; 5624 : 			int iFlags = MOVE_UNITS_IGNORE_DANGER;
; 5625 : 			if(bIgnoreStacking)

	cmp	BYTE PTR _bIgnoreStacking$[esp+24], 0
	mov	edi, 8
	je	SHORT $LN6@TurnsToRea

; 5626 : 			{
; 5627 : 				iFlags |= MOVE_IGNORE_STACKING;

	mov	edi, 12					; 0000000cH
$LN6@TurnsToRea:

; 5628 : 			}
; 5629 : 
; 5630 : 			CvAssertMsg(pTarget != NULL, "Passed in a NULL destination to GeneratePath");
; 5631 : 			if(pTarget == NULL)

	test	esi, esi
	jne	SHORT $LN5@TurnsToRea

; 5632 : 			{
; 5633 : 				return false;

	mov	DWORD PTR __$EHRec$[esp+36], -1
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
	xor	eax, eax

; 5674 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
$LN5@TurnsToRea:

; 5634 : 			}
; 5635 : 
; 5636 : 			bool bSuccess;
; 5637 : 
; 5638 : #ifdef AUI_ASTAR_TURN_LIMITER
; 5639 : 			if (!pFromPlot)
; 5640 : 				pFromPlot = pUnit->plot();
; 5641 : 			GC.GetTacticalAnalysisMapFinder().SetData(pUnit.pointer(), iTargetTurns);
; 5642 : 			bSuccess = GC.GetTacticalAnalysisMapFinder().GeneratePath(pFromPlot->getX(), pFromPlot->getY(), pTarget->getX(), pTarget->getY(), iFlags, bReusePaths);
; 5643 : #else
; 5644 : 			GC.GetTacticalAnalysisMapFinder().SetData(pUnit.pointer());

	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetTacticalAnalysisMapFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::GetTacticalAnalysisMapFinder
	mov	ecx, eax
	call	?SetData@CvAStar@@QAEXPBX@Z		; CvAStar::SetData

; 5645 : 			bSuccess = GC.GetTacticalAnalysisMapFinder().GeneratePath(pUnit->getX(), pUnit->getY(), pTarget->getX(), pTarget->getY(), iFlags, bReusePaths);

	movsx	eax, WORD PTR [esi+2]
	mov	ebp, DWORD PTR _bReusePaths$[esp+24]
	movsx	ecx, WORD PTR [esi]
	mov	edx, DWORD PTR _pUnit$[esp+24]
	mov	esi, DWORD PTR [edx+88]
	mov	edx, DWORD PTR [edx+76]
	push	ebp
	push	edi
	push	eax
	push	ecx
	push	esi
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetTacticalAnalysisMapFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::GetTacticalAnalysisMapFinder
	mov	ecx, eax
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath

; 5646 : #endif
; 5647 : 			if(bSuccess)

	test	al, al
	je	SHORT $LN78@TurnsToRea

; 5648 : 			{
; 5649 : 				pNode = GC.GetTacticalAnalysisMapFinder().GetLastNode();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetTacticalAnalysisMapFinder@CvGlobals@@QAEAAVCvTwoLayerPathFinder@@XZ ; CvGlobals::GetTacticalAnalysisMapFinder
$LN80@TurnsToRea:
	mov	eax, DWORD PTR [eax+96]

; 5650 : 			}
; 5651 : 		}
; 5652 : #endif
; 5653 : 
; 5654 : 		if(pNode)

	test	eax, eax
	je	SHORT $LN78@TurnsToRea

; 5655 : 		{
; 5656 : 			rtnValue = pNode->m_iData2;

	mov	ebx, DWORD PTR [eax+16]

; 5657 : 			if(rtnValue == 1)

	cmp	ebx, 1
	jne	SHORT $LN78@TurnsToRea

; 5658 : 			{
; 5659 : 				if(pNode->m_iData1 > 0)

	cmp	DWORD PTR [eax+12], 0
	jle	SHORT $LN78@TurnsToRea

; 5660 : 				{
; 5661 : 					rtnValue = 0;

	xor	ebx, ebx
$LN78@TurnsToRea:
	mov	ecx, DWORD PTR _pUnit$[esp+24]
$LN1@TurnsToRea:

; 5662 : 				}
; 5663 : 			}
; 5664 : 		}
; 5665 : 
; 5666 : #ifdef PATH_FINDER_LOGGING
; 5667 : 		// NOTE: because I'm creating the string after the cvStopWatch, the time it takes to create the string will be in the timer.
; 5668 : 		strBaseString.Format("TurnsToReachTarget, Turn %03d, Player: %d, Unit: %d, From X: %d, Y: %d, To X: %d, Y: %d, reuse=%d, ignoreUnits=%d, ignoreStacking=%d, turns=%d", GC.getGame().getElapsedGameTurns(), (int)pUnit->getOwner(), pUnit->GetID(), pUnit->getX(), pUnit->getY(), pTarget->getX(), pTarget->getY(), bReusePaths?1:0, bIgnoreUnits?1:0, bIgnoreStacking?1:0, rtnValue);
; 5669 : 		kTimer.SetText(strBaseString);
; 5670 : #endif
; 5671 : 	}
; 5672 : 
; 5673 : 	return rtnValue;

	mov	DWORD PTR __$EHRec$[esp+36], -1
	test	ecx, ecx
	je	SHORT $LN75@TurnsToRea
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN75@TurnsToRea:

; 5674 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z$0:
	lea	ecx, DWORD PTR _pUnit$[ebp-4]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z:
	mov	eax, OFFSET __ehfuncinfo$?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z ENDP ; TurnsToReachTarget
PUBLIC	?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z ; CanReachInXTurns
;	COMDAT xdata$x
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z$0
__ehfuncinfo$?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\desktop\cleanup (v1)\lekmod files\lekmod dll versions\v30\lekmod_dll\cvgamecoredll_expansion2\cvastar.cpp
xdata$x	ENDS
;	COMDAT ?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_pUnit$ = 8						; size = 8
$T229170 = 16						; size = 4
_pTarget$ = 16						; size = 4
_iTurns$ = 20						; size = 4
_bIgnoreUnits$ = 24					; size = 1
_piTurns$ = 28						; size = 4
?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z PROC ; CanReachInXTurns, COMDAT

; 5490 : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	push	ebp
	push	esi
	push	edi

; 5491 : 	int iDistance;
; 5492 : 
; 5493 : 	if(!pTarget)

	mov	edi, DWORD PTR _pTarget$[esp+24]
	mov	DWORD PTR __$EHRec$[esp+36], 0
	test	edi, edi

; 5494 : 	{
; 5495 : 		return false;

	je	SHORT $LN64@CanReachIn

; 5496 : 	}
; 5497 : 
; 5498 : 	// Compare distance to movement rate
; 5499 : 	iDistance = plotDistance(pUnit->getX(), pUnit->getY(), pTarget->getX(), pTarget->getY());

	movsx	edx, WORD PTR [edi+2]
	mov	esi, DWORD PTR _pUnit$[esp+24]
	mov	eax, DWORD PTR [esi+88]
	mov	ecx, DWORD PTR [esi+76]
	push	edx
	movsx	edx, WORD PTR [edi]
	push	edx
	push	eax
	push	ecx
	call	?plotDistance@@YAHHHHH@Z		; plotDistance

; 5500 : 	// KWG: If the unit is a land unit that can embark, baseMoves() is only going to give correct value if the starting and ending locations
; 5501 : 	//		are in the same domain (LAND vs. SEA) and no transition occurs.
; 5502 : #ifdef AUI_ASTAR_TWEAKED_OPTIMIZED_BUT_CAN_STILL_USE_ROADS
; 5503 : 	int iBaseMoves = GetIncreasedMoveRangeForRoads(pUnit.pointer(), pUnit->baseMoves());
; 5504 : 	if (iTurns == 0 && iDistance >= iBaseMoves)
; 5505 : 	{
; 5506 : 		return false;
; 5507 : 	}
; 5508 : 
; 5509 : 	else if (iTurns > 0 && iDistance > (iBaseMoves * iTurns))
; 5510 : #else
; 5511 : 	if(iTurns == 0 && iDistance >= pUnit->baseMoves())

	mov	ebp, DWORD PTR _iTurns$[esp+40]
	add	esp, 16					; 00000010H
	mov	ebx, eax
	test	ebp, ebp
	jne	SHORT $LN63@CanReachIn
	push	-1
	mov	ecx, esi
	call	?baseMoves@CvUnit@@QBEHW4DomainTypes@@@Z ; CvUnit::baseMoves
	cmp	ebx, eax
	jl	SHORT $LN61@CanReachIn
$LN64@CanReachIn:

; 5512 : 	{
; 5513 : 		return false;

	mov	ecx, DWORD PTR _pUnit$[esp+24]
	mov	DWORD PTR __$EHRec$[esp+36], -1
	test	ecx, ecx
	je	SHORT $LN14@CanReachIn
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification

; 5494 : 	{
; 5495 : 		return false;

$LN14@CanReachIn:

; 5512 : 	{
; 5513 : 		return false;

	xor	al, al

; 5533 : 	}
; 5534 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
$LN63@CanReachIn:

; 5514 : 	}
; 5515 : 
; 5516 : 	else if(iTurns > 0 && iDistance > (pUnit->baseMoves() * iTurns))

	jle	SHORT $LN3@CanReachIn
	push	-1
	mov	ecx, esi
	call	?baseMoves@CvUnit@@QBEHW4DomainTypes@@@Z ; CvUnit::baseMoves
	imul	eax, ebp
	cmp	ebx, eax

; 5517 : #endif
; 5518 : 	{
; 5519 : 		return false;

	jg	SHORT $LN64@CanReachIn
$LN61@CanReachIn:
	mov	esi, DWORD PTR _pUnit$[esp+24]
$LN3@CanReachIn:

; 5520 : 	}
; 5521 : 
; 5522 : 	// Distance not too far, now use pathfinder
; 5523 : 	else
; 5524 : 	{
; 5525 : #ifdef AUI_ASTAR_TURN_LIMITER
; 5526 : 		int iTurnsCalculated = TurnsToReachTarget(pUnit, pTarget, true /*bReusePaths*/, bIgnoreUnits, false, iTurns);
; 5527 : #else
; 5528 : 		int iTurnsCalculated = TurnsToReachTarget(pUnit, pTarget, false /*bReusePaths*/, bIgnoreUnits);

	mov	eax, DWORD PTR _bIgnoreUnits$[esp+24]
	push	0
	push	eax
	push	0
	push	edi
	sub	esp, 8
	mov	eax, esp
	mov	DWORD PTR [eax], esi
	mov	cl, BYTE PTR _pUnit$[esp+52]
	mov	BYTE PTR [eax+4], cl
	mov	eax, esi
	mov	DWORD PTR $T229170[esp+48], esp
	test	eax, eax
	je	SHORT $LN49@CanReachIn
	mov	ecx, eax
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN49@CanReachIn:
	call	?TurnsToReachTarget@@YAHV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@_N22@Z ; TurnsToReachTarget

; 5529 : #endif
; 5530 : 		if (piTurns)

	mov	ecx, DWORD PTR _piTurns$[esp+48]
	add	esp, 24					; 00000018H
	test	ecx, ecx
	je	SHORT $LN1@CanReachIn

; 5531 : 			*piTurns = iTurnsCalculated;

	mov	DWORD PTR [ecx], eax
$LN1@CanReachIn:

; 5532 : 		return (iTurnsCalculated <= iTurns);

	mov	ecx, DWORD PTR _pUnit$[esp+24]
	cmp	eax, ebp
	setle	bl
	mov	DWORD PTR __$EHRec$[esp+36], -1
	test	ecx, ecx
	je	SHORT $LN54@CanReachIn
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN54@CanReachIn:

; 5533 : 	}
; 5534 : }

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	pop	esi
	pop	ebp
	mov	al, bl
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z$0:
	lea	ecx, DWORD PTR _pUnit$[ebp-4]
	jmp	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ	; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
__ehhandler$?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z:
	mov	eax, OFFSET __ehfuncinfo$?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CanReachInXTurns@@YA_NV?$FObjectHandle@VCvUnit@@@@PAVCvPlot@@H_NPAH@Z ENDP ; CanReachInXTurns
END
