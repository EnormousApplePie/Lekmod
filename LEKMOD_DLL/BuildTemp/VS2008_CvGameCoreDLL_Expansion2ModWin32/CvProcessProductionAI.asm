; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Documents\GitHub\Lekmod\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvProcessProductionAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG217596 DB	'%03d, ', 00H
	ORG $+1
$SG217600 DB	', ', 00H
	ORG $+1
$SG217601 DB	', ', 00H
	ORG $+1
$SG217608 DB	'Unknown', 00H
$SG217609 DB	'Process, %s, %d', 00H
CONST	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ PROC ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ ENDP ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@ DB 'c:\users\eno'
	DB	'rmousapplepie\documents\github\lekmod\lekmod_dll\fireplace\in'
	DB	'clude\fireworks\FFastVector.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 4
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 4
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??BCvString@@QBEPBDXZ				; CvString::operator char const *
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??BCvString@@QBEPBDXZ
_TEXT	SEGMENT
??BCvString@@QBEPBDXZ PROC				; CvString::operator char const *, COMDAT
; _this$ = ecx

; 31   : 	operator const char*() const 	{ return c_str(); }												

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
??BCvString@@QBEPBDXZ ENDP				; CvString::operator char const *
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@PBD@Z			; CvString::operator=
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@PBD@Z PROC				; CvString::operator=, COMDAT
; _this$ = ecx

; 37   : 	CvString& operator=( const char* s) { if (s) assign(s); else clear();	return *this; }	

	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, ecx
	test	eax, eax
	je	SHORT $LN2@operator
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
$LN2@operator:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@PBD@Z ENDP				; CvString::operator=
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CvString::operator=, COMDAT
; _this$ = ecx

; 38   : 	CvString& operator=( const std::string& s) { assign(s.c_str());	return *this; }	

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _s$[esp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CvString::operator=
_TEXT	ENDS
PUBLIC	?GetCString@CvString@@QBEPBDXZ			; CvString::GetCString
; Function compile flags: /Ogtpy
;	COMDAT ?GetCString@CvString@@QBEPBDXZ
_TEXT	SEGMENT
?GetCString@CvString@@QBEPBDXZ PROC			; CvString::GetCString, COMDAT
; _this$ = ecx

; 42   : 	const char* GetCString() const 	{ return c_str(); }

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetCString@CvString@@QBEPBDXZ ENDP			; CvString::GetCString
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
_buf$ = -2048						; size = 2048
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	sub	esp, 2048				; 00000800H
	push	ebx
	push	ebp

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	mov	ebp, DWORD PTR _args$[esp+2052]
	push	esi
	push	edi
	lea	edi, DWORD PTR _buf$[esp+2064]
	mov	esi, 2047				; 000007ffH
	npad	6
$LL10@formatv:

; 194  : 	int len = 0;
; 195  : 	int attempts = 0;
; 196  : 	bool success = false;
; 197  : 	const int kMaxAttempts = 40;
; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;
; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	eax, DWORD PTR _fmt$[esp+2060]
	push	ebp
	push	eax
	push	esi
	push	edi
	mov	ebx, esi
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H

; 203  : 		attempts++;

	add	esi, 2048				; 00000800H

; 204  : 		success = (len>=0 && len<=maxlen);

	test	eax, eax
	jl	SHORT $LN13@formatv
	cmp	eax, ebx
	jle	SHORT $LN18@formatv
$LN13@formatv:

; 205  : 		if (!success)
; 206  : 		{
; 207  : 			if (pbuf!=buf)

	lea	ecx, DWORD PTR _buf$[esp+2064]
	xor	bl, bl
	cmp	edi, ecx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	lea	edx, DWORD PTR [esi+1]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	cmp	esi, 83967				; 000147ffH
	mov	edi, eax
	jl	SHORT $LL10@formatv

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@formatv:
	mov	ecx, DWORD PTR _out$[esp+2064]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 223  : 
; 224  : 	if (pbuf!=buf)

	lea	eax, DWORD PTR _buf$[esp+2064]
	cmp	edi, eax
	je	SHORT $LN20@formatv

; 225  : 		delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN20@formatv:
	pop	edi
	pop	esi
	pop	ebp

; 226  : 
; 227  : 	return success;

	mov	al, bl
	pop	ebx

; 228  : }

	add	esp, 2048				; 00000800H
	ret	0
$LN18@formatv:

; 204  : 		success = (len>=0 && len<=maxlen);

	mov	bl, 1

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)
; 220  : 		out = pbuf;

	push	edi

; 221  : 	else

	jmp	SHORT $LN21@formatv
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);
; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _lpszFormat$[esp+36]
	lea	eax, DWORD PTR _lpszFormat$[esp+40]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _result$[esp+48]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+60], 0
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);
; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR _this$[esp+36]
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	lea	ecx, DWORD PTR _result$[esp+40]
	mov	DWORD PTR __$EHRec$[esp+48], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	?GetDescription@CvBaseInfo@@QBEPBDXZ		; CvBaseInfo::GetDescription
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
;	COMDAT ?GetDescription@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
?GetDescription@CvBaseInfo@@QBEPBDXZ PROC		; CvBaseInfo::GetDescription, COMDAT
; _this$ = ecx

; 64   : 		return m_strDescription.c_str();

	add	ecx, 36					; 00000024H
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetDescription@CvBaseInfo@@QBEPBDXZ ENDP		; CvBaseInfo::GetDescription
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV0@@Z			; CvString::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CvString@@QAEAAV0@ABV0@@Z PROC			; CvString::operator=, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV0@@Z ENDP			; CvString::operator=
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	??$?6H@FDataStream@@QAEAAV0@ABH@Z		; FDataStream::operator<<<int>
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?6H@FDataStream@@QAEAAV0@ABH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6H@FDataStream@@QAEAAV0@ABH@Z PROC			; FDataStream::operator<<<int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6H@FDataStream@@QAEAAV0@ABH@Z ENDP			; FDataStream::operator<<<int>
_TEXT	ENDS
PUBLIC	??$?5H@FDataStream@@QAEAAV0@AAH@Z		; FDataStream::operator>><int>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5H@FDataStream@@QAEAAV0@AAH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5H@FDataStream@@QAEAAV0@AAH@Z PROC			; FDataStream::operator>><int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5H@FDataStream@@QAEAAV0@AAH@Z ENDP			; FDataStream::operator>><int>
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??$?5I@FDataStream@@QAEAAV0@AAI@Z		; FDataStream::operator>><unsigned int>
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5I@FDataStream@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5I@FDataStream@@QAEAAV0@AAI@Z PROC			; FDataStream::operator>><unsigned int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5I@FDataStream@@QAEAAV0@AAI@Z ENDP			; FDataStream::operator>><unsigned int>
_TEXT	ENDS
PUBLIC	??$?6I@FDataStream@@QAEAAV0@ABI@Z		; FDataStream::operator<<<unsigned int>
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6I@FDataStream@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6I@FDataStream@@QAEAAV0@ABI@Z PROC			; FDataStream::operator<<<unsigned int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6I@FDataStream@@QAEAAV0@ABI@Z ENDP			; FDataStream::operator<<<unsigned int>
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z ; CvWeightedVector<int,4,1>::GetElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z PROC	; CvWeightedVector<int,4,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z ENDP	; CvWeightedVector<int,4,1>::GetElement
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@H$03$00@@QBEHI@Z	; CvWeightedVector<int,4,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@H$03$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -8						; size = 8
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@H$03$00@@QBEHI@Z PROC	; CvWeightedVector<int,4,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 8

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$[esp+8], edx

; 75   : 	}

	add	esp, 8
	ret	4
?GetWeight@?$CvWeightedVector@H$03$00@@QBEHI@Z ENDP	; CvWeightedVector<int,4,1>::GetWeight
_TEXT	ENDS
PUBLIC	?IncreaseWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z ; CvWeightedVector<int,4,1>::IncreaseWeight
; Function compile flags: /Ogtpy
;	COMDAT ?IncreaseWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?IncreaseWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z PROC ; CvWeightedVector<int,4,1>::IncreaseWeight, COMDAT
; _this$ = ecx

; 78   : 		m_pItems[iIndex].m_iWeight += iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	mov	edx, DWORD PTR _iWeight$[esp-4]
	add	DWORD PTR [eax+ecx*8+4], edx
	lea	eax, DWORD PTR [eax+ecx*8+4]

; 79   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 80   : 	}

	ret	8
?IncreaseWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z ENDP ; CvWeightedVector<int,4,1>::IncreaseWeight
_TEXT	ENDS
PUBLIC	?SetWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z	; CvWeightedVector<int,4,1>::SetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?SetWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?SetWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z PROC	; CvWeightedVector<int,4,1>::SetWeight, COMDAT
; _this$ = ecx

; 83   : 		m_pItems[iIndex].m_iWeight = iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iWeight$[esp-4]
	mov	edx, DWORD PTR _iIndex$[esp-4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 84   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 85   : 	}

	ret	8
?SetWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z ENDP	; CvWeightedVector<int,4,1>::SetWeight
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@H$03$00@@QAEHXZ	; CvWeightedVector<int,4,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@H$03$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@H$03$00@@QAEHXZ PROC		; CvWeightedVector<int,4,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@H$03$00@@QAEHXZ ENDP		; CvWeightedVector<int,4,1>::size
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free
_TEXT	ENDS
PUBLIC	?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ	; CvCity::getOwner
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
;	COMDAT ?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ PROC		; CvCity::getOwner, COMDAT
; _this$ = ecx

; 604  : 		return m_eOwner;

	mov	eax, DWORD PTR [ecx+84]

; 605  : 	}

	ret	0
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ ENDP		; CvCity::getOwner
_TEXT	ENDS
PUBLIC	?Write@CvProcessProductionAI@@QBEXAAVFDataStream@@@Z ; CvProcessProductionAI::Write
EXTRN	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z:PROC ; CvInfosSerializationHelper::WriteHashed
EXTRN	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z:PROC ; CvGlobals::getProcessInfo
EXTRN	?getNumProcessInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumProcessInfos
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvprocessproductionai.cpp
;	COMDAT ?Write@CvProcessProductionAI@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_uiVersion$ = -12					; size = 4
_elem$218098 = -8					; size = 8
$T218083 = 8						; size = 4
$T218082 = 8						; size = 4
_kStream$ = 8						; size = 4
?Write@CvProcessProductionAI@@QBEXAAVFDataStream@@@Z PROC ; CvProcessProductionAI::Write, COMDAT
; _this$ = ecx

; 75   : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi

; 76   : 	// Current version number
; 77   : 	uint uiVersion = 1;
; 78   : 	kStream << uiVersion;

	mov	edi, DWORD PTR _kStream$[esp+20]
	lea	eax, DWORD PTR _uiVersion$[esp+24]
	mov	ebx, ecx
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _uiVersion$[esp+28], 1
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 79   : 
; 80   : 	// Loop through writing each entry
; 81   : 	kStream << GC.getNumProcessInfos();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	lea	ecx, DWORD PTR $T218082[esp+20]
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR $T218082[esp+24], eax
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 82   : #ifdef AUI_WARNING_FIXES
; 83   : 	for (uint i = 0; i < GC.getNumProcessInfos(); i++)
; 84   : #else
; 85   : 	for(int i = 0; i < GC.getNumProcessInfos(); i++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	test	eax, eax
	jle	SHORT $LN1@Write
	npad	6
$LL3@Write:

; 86   : #endif
; 87   : 	{
; 88   : 		CvInfosSerializationHelper::WriteHashed(kStream, GC.getProcessInfo((ProcessTypes)i));

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z ; CvGlobals::getProcessInfo
	push	eax
	push	edi
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z ; CvInfosSerializationHelper::WriteHashed

; 89   : 		kStream << m_ProcessAIWeights.GetWeight(i);

	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR [eax+esi*8+4]
	mov	DWORD PTR $T218083[esp+28], eax
	add	esp, 8
	lea	eax, DWORD PTR $T218083[esp+20]
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _elem$218098[esp+28], edx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	cmp	esi, eax
	jl	SHORT $LL3@Write
$LN1@Write:
	pop	edi
	pop	esi
	pop	ebx

; 90   : 	}
; 91   : }

	add	esp, 12					; 0000000cH
	ret	4
?Write@CvProcessProductionAI@@QBEXAAVFDataStream@@@Z ENDP ; CvProcessProductionAI::Write
_TEXT	ENDS
PUBLIC	?AddFlavorWeights@CvProcessProductionAI@@QAEXW4FlavorTypes@@H@Z ; CvProcessProductionAI::AddFlavorWeights
EXTRN	?GetFlavorValue@CvProcessInfo@@QBEHH@Z:PROC	; CvProcessInfo::GetFlavorValue
; Function compile flags: /Ogtpy
;	COMDAT ?AddFlavorWeights@CvProcessProductionAI@@QAEXW4FlavorTypes@@H@Z
_TEXT	SEGMENT
_eFlavor$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?AddFlavorWeights@CvProcessProductionAI@@QAEXW4FlavorTypes@@H@Z PROC ; CvProcessProductionAI::AddFlavorWeights, COMDAT
; _this$ = ecx

; 95   : {

	push	esi
	push	edi
	mov	edi, ecx

; 96   : #ifdef AUI_WARNING_FIXES
; 97   : 	uint iProcess;
; 98   : #else
; 99   : 	int iProcess;
; 100  : #endif
; 101  : 	CvProcessInfo* entry(NULL);
; 102  : 
; 103  : 	// Loop through all projects
; 104  : 	for(iProcess = 0; iProcess < GC.getNumProcessInfos(); iProcess++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	test	eax, eax
	jle	SHORT $LN2@AddFlavorW
	push	ebx
	mov	ebx, DWORD PTR _iWeight$[esp+8]
	push	ebp
	mov	ebp, DWORD PTR _eFlavor$[esp+12]
	npad	2
$LL4@AddFlavorW:

; 105  : 	{
; 106  : 		entry = GC.getProcessInfo((ProcessTypes)iProcess);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z ; CvGlobals::getProcessInfo

; 107  : 		if (entry)

	test	eax, eax
	je	SHORT $LN3@AddFlavorW

; 108  : 		{
; 109  : 			// Set its weight by looking at project's weight for this flavor and using iWeight multiplier passed in
; 110  : 			m_ProcessAIWeights.IncreaseWeight(iProcess, entry->GetFlavorValue(eFlavor) * iWeight);

	push	ebp
	mov	ecx, eax
	call	?GetFlavorValue@CvProcessInfo@@QBEHH@Z	; CvProcessInfo::GetFlavorValue
	imul	eax, ebx
	mov	ecx, DWORD PTR [edi+4]
	add	DWORD PTR [ecx+esi*8+4], eax
	lea	ecx, DWORD PTR [ecx+esi*8+4]
$LN3@AddFlavorW:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	cmp	esi, eax
	jl	SHORT $LL4@AddFlavorW
	pop	ebp
	pop	ebx
$LN2@AddFlavorW:
	pop	edi
	pop	esi

; 111  : 		}
; 112  : 	}
; 113  : }

	ret	8
?AddFlavorWeights@CvProcessProductionAI@@QAEXW4FlavorTypes@@H@Z ENDP ; CvProcessProductionAI::AddFlavorWeights
_TEXT	ENDS
PUBLIC	?GetWeight@CvProcessProductionAI@@QAEHW4ProcessTypes@@@Z ; CvProcessProductionAI::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@CvProcessProductionAI@@QAEHW4ProcessTypes@@@Z
_TEXT	SEGMENT
_elem$218139 = -8					; size = 8
_eProject$ = 8						; size = 4
?GetWeight@CvProcessProductionAI@@QAEHW4ProcessTypes@@@Z PROC ; CvProcessProductionAI::GetWeight, COMDAT
; _this$ = ecx

; 117  : {

	sub	esp, 8

; 118  : 	return m_ProcessAIWeights.GetWeight(eProject);

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _eProject$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$218139[esp+8], edx

; 119  : }

	add	esp, 8
	ret	4
?GetWeight@CvProcessProductionAI@@QAEHW4ProcessTypes@@@Z ENDP ; CvProcessProductionAI::GetWeight
_TEXT	ENDS
PUBLIC	?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ ; CvProcessProductionAI::LogPossibleBuilds
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z:PROC ; CvCityStrategyAI::GetLogFileName
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$7
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$8
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$11
	DD	06H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$12
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvprocessproductionai.cpp
xdata$x	ENDS
;	COMDAT ?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ
_TEXT	SEGMENT
_playerName$217587 = -328				; size = 28
_strDesc$217589 = -300					; size = 28
_strBaseString$217585 = -272				; size = 28
_cityName$217588 = -244					; size = 28
_strTemp$217586 = -216					; size = 28
_strOutBuf$217584 = -188				; size = 28
$T218144 = -160						; size = 28
$T218143 = -160						; size = 28
_strLogName$217590 = -132				; size = 28
$T218150 = -104						; size = 28
$T218145 = -104						; size = 28
_elem$218328 = -76					; size = 8
$T218147 = -68						; size = 28
$T218146 = -40						; size = 28
__$EHRec$ = -12						; size = 12
?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ PROC	; CvProcessProductionAI::LogPossibleBuilds, COMDAT
; _this$ = ecx

; 124  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 316				; 0000013cH
	push	esi
	mov	esi, ecx

; 125  : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN6@LogPossibl
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN6@LogPossibl
	push	ebp

; 126  : 	{
; 127  : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$217584[esp+336]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	ebp, ebp

; 128  : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$217585[esp+336]
	mov	DWORD PTR __$EHRec$[esp+344], ebp
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 129  : 		CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$217586[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 1
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 130  : 		CvString playerName;

	lea	ecx, DWORD PTR _playerName$217587[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 2
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 131  : 		CvString cityName;

	lea	ecx, DWORD PTR _cityName$217588[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 3
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 132  : 		CvString strDesc;

	lea	ecx, DWORD PTR _strDesc$217589[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 4
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 133  : 		CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$217590[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 5
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 134  : 
; 135  : 		CvAssert(m_pCity);
; 136  : 		if(!m_pCity) return;

	mov	eax, DWORD PTR [esi]
	mov	BYTE PTR __$EHRec$[esp+344], 6
	cmp	eax, ebp
	jne	$LN5@LogPossibl
	lea	ecx, DWORD PTR _strLogName$217590[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 5
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strDesc$217589[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _cityName$217588[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _playerName$217587[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strTemp$217586[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBaseString$217585[esp+336]
	mov	BYTE PTR __$EHRec$[esp+344], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$217584[esp+336]
	mov	DWORD PTR __$EHRec$[esp+344], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	ebp
	pop	esi

; 162  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+328]
	mov	DWORD PTR fs:0, ecx
	add	esp, 328				; 00000148H
	ret	0
$LN5@LogPossibl:

; 137  : 
; 138  : 		// Find the name of this civ and city
; 139  : 		playerName = GET_PLAYER(m_pCity->getOwner()).getCivilizationShortDescription();

	mov	eax, DWORD PTR [eax+84]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	lea	ecx, DWORD PTR _playerName$217587[esp+336]
	cmp	eax, ebp
	je	SHORT $LN73@LogPossibl
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN72@LogPossibl
$LN73@LogPossibl:
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN72@LogPossibl:

; 140  : 		cityName = m_pCity->getName();

	mov	ecx, DWORD PTR [esi]
	push	ebx
	push	edi
	lea	eax, DWORD PTR $T218143[esp+344]
	push	eax
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	push	eax
	lea	ecx, DWORD PTR _cityName$217588[esp+348]
	mov	BYTE PTR __$EHRec$[esp+356], 7
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218143[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 6
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 141  : 
; 142  : 		// Open the log file
; 143  : 		FILogFile* pLog;
; 144  : 		pLog = LOGFILEMGR.GetLog(m_pCity->GetCityStrategyAI()->GetLogFileName(playerName, cityName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	lea	ecx, DWORD PTR _cityName$217588[esp+344]
	push	ecx
	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR _playerName$217587[esp+348]
	mov	edi, eax
	push	edx
	lea	eax, DWORD PTR $T218144[esp+352]
	push	eax
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z ; CvCityStrategyAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+352], 8
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [edi]
	push	ebp
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, edi
	call	eax
	lea	ecx, DWORD PTR $T218144[esp+344]
	mov	ebx, eax
	mov	BYTE PTR __$EHRec$[esp+352], 6
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 145  : 		CvAssert(pLog);
; 146  : 		if(!pLog) return;

	cmp	ebx, ebp
	je	$LN1@LogPossibl

; 147  : 
; 148  : 		// Get the leading info for this line
; 149  : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$217585[esp+348]
	push	OFFSET $SG217596
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 150  : 		strBaseString += playerName + ", " + cityName + ", ";

	mov	edi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	push	OFFSET $SG217601
	lea	edx, DWORD PTR _playerName$217587[esp+360]
	push	edx
	lea	eax, DWORD PTR $T218145[esp+364]
	push	eax
	call	edi
	lea	ecx, DWORD PTR _cityName$217588[esp+368]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T218146[esp+376]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+388], 9
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	push	OFFSET $SG217600
	push	eax
	lea	eax, DWORD PTR $T218147[esp+388]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+400], 10		; 0000000aH
	call	edi
	add	esp, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$217585[esp+348]
	mov	BYTE PTR __$EHRec$[esp+356], 11		; 0000000bH
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218147[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 10		; 0000000aH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218146[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 9
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218145[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 6
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 151  : 
; 152  : 		// Dump out the weight of each buildable item
; 153  : 		for(int iI = 0; iI < m_Buildables.size(); iI++)

	cmp	DWORD PTR [esi+56], ebp
	jle	$LN1@LogPossibl
$LL3@LogPossibl:
	mov	eax, DWORD PTR [esi+52]
	lea	edi, DWORD PTR [ebp*8]

; 154  : 		{
; 155  : 			CvProcessInfo* pProcessInfo = GC.getProcessInfo((ProcessTypes)m_Buildables.GetElement(iI));

	mov	ecx, DWORD PTR [eax+edi]
	add	eax, edi
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProcessInfo@CvGlobals@@QAEPAVCvProcessInfo@@W4ProcessTypes@@@Z ; CvGlobals::getProcessInfo

; 156  : 			strDesc = (pProcessInfo != NULL)? pProcessInfo->GetDescription() : "Unknown";

	test	eax, eax
	je	SHORT $LN9@LogPossibl
	lea	ecx, DWORD PTR [eax+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	test	eax, eax
	je	SHORT $LN120@LogPossibl
	push	eax
	lea	ecx, DWORD PTR _strDesc$217589[esp+348]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN119@LogPossibl
$LN9@LogPossibl:
	mov	eax, OFFSET $SG217608
	push	eax
	lea	ecx, DWORD PTR _strDesc$217589[esp+348]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN119@LogPossibl
$LN120@LogPossibl:
	lea	ecx, DWORD PTR _strDesc$217589[esp+344]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN119@LogPossibl:

; 157  : 			strTemp.Format("Process, %s, %d", strDesc.GetCString(), m_Buildables.GetWeight(iI));

	mov	eax, DWORD PTR [esi+52]
	mov	edx, DWORD PTR [edi+eax]
	mov	eax, DWORD PTR [edi+eax+4]
	push	eax
	lea	ecx, DWORD PTR _strDesc$217589[esp+348]
	mov	DWORD PTR _elem$218328[esp+348], edx
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	eax, DWORD PTR _strTemp$217586[esp+352]
	push	OFFSET $SG217609
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 158  : 			strOutBuf = strBaseString + strTemp;

	lea	ecx, DWORD PTR _strTemp$217586[esp+360]
	push	ecx
	lea	edx, DWORD PTR _strBaseString$217585[esp+364]
	push	edx
	lea	eax, DWORD PTR $T218150[esp+368]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 28					; 0000001cH
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+352], 12		; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$217584[esp+348]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	lea	ecx, DWORD PTR $T218150[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 6
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 159  : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$217584[esp+344]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	ebx
	call	edx
	inc	ebp
	add	esp, 8
	cmp	ebp, DWORD PTR [esi+56]
	jl	$LL3@LogPossibl
$LN1@LogPossibl:

; 160  : 		}
; 161  : 	}

	lea	ecx, DWORD PTR _strLogName$217590[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 5
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strDesc$217589[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _cityName$217588[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _playerName$217587[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strTemp$217586[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strBaseString$217585[esp+344]
	mov	BYTE PTR __$EHRec$[esp+352], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$217584[esp+344]
	mov	DWORD PTR __$EHRec$[esp+352], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	edi
	pop	ebx
	pop	ebp
$LN6@LogPossibl:

; 162  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+332]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 328				; 00000148H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$0:
	lea	ecx, DWORD PTR _strOutBuf$217584[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$1:
	lea	ecx, DWORD PTR _strBaseString$217585[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$2:
	lea	ecx, DWORD PTR _strTemp$217586[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$3:
	lea	ecx, DWORD PTR _playerName$217587[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$4:
	lea	ecx, DWORD PTR _cityName$217588[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$5:
	lea	ecx, DWORD PTR _strDesc$217589[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$6:
	lea	ecx, DWORD PTR _strLogName$217590[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$7:
	lea	ecx, DWORD PTR $T218143[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$8:
	lea	ecx, DWORD PTR $T218144[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$9:
	lea	ecx, DWORD PTR $T218145[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$10:
	lea	ecx, DWORD PTR $T218146[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$11:
	lea	ecx, DWORD PTR $T218147[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ$12:
	lea	ecx, DWORD PTR $T218150[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogPossibleBuilds@CvProcessProductionAI@@QAEXXZ ENDP	; CvProcessProductionAI::LogPossibleBuilds
PUBLIC	?clear@?$CvWeightedVector@H$03$00@@QAEXXZ	; CvWeightedVector<int,4,1>::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?clear@?$CvWeightedVector@H$03$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@H$03$00@@QAEXXZ PROC		; CvWeightedVector<int,4,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@H$03$00@@QAEXXZ ENDP		; CvWeightedVector<int,4,1>::clear
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN34@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 4
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize
$LN16@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 4
$LN15@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+44], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted:
	ret	0
??1?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
_TEXT	ENDS
PUBLIC	?resize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::resize
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?resize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEXI@Z
_TEXT	SEGMENT
_uiNewSize$ = 8						; size = 4
?resize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::resize, COMDAT
; _this$ = ecx

; 666  : 	{

	push	esi
	push	edi

; 667  : 		if( m_uiCurrMaxSize < uiNewSize ){

	mov	edi, DWORD PTR _uiNewSize$[esp+4]
	mov	esi, ecx
	cmp	DWORD PTR [esi+8], edi
	jae	SHORT $LN4@resize

; 668  : 			GrowSize(uiNewSize);

	push	edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN4@resize:

; 669  : 		}
; 670  : 		m_uiCurrSize = uiNewSize;

	mov	DWORD PTR [esi+4], edi
	pop	edi
	pop	esi

; 671  : 	};

	ret	4
?resize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::resize
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z	; CvProcessProductionAI::CvProcessProductionAI
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z$0
__ehfuncinfo$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvprocessproductionai.cpp
xdata$x	ENDS
;	COMDAT ??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z PROC	; CvProcessProductionAI::CvProcessProductionAI, COMDAT
; _this$ = ecx

; 18   : {

	push	-1
	push	__ehhandler$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR _pCity$[esp+12]
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [eax+16]
	mov	edx, 4
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+4], ecx
	lea	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [eax+52], ecx

; 19   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR [eax+56], 0
	mov	DWORD PTR [eax+60], edx
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__ehhandler$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvProcessProductionAI@@QAE@PAVCvCity@@@Z ENDP	; CvProcessProductionAI::CvProcessProductionAI
PUBLIC	??1CvProcessProductionAI@@QAE@XZ		; CvProcessProductionAI::~CvProcessProductionAI
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvProcessProductionAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvProcessProductionAI@@QAE@XZ$0
__ehfuncinfo$??1CvProcessProductionAI@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvProcessProductionAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvprocessproductionai.cpp
xdata$x	ENDS
;	COMDAT ??1CvProcessProductionAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvProcessProductionAI@@QAE@XZ PROC			; CvProcessProductionAI::~CvProcessProductionAI, COMDAT
; _this$ = ecx

; 23   : {

	push	-1
	push	__ehhandler$??1CvProcessProductionAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi

; 24   : }

	mov	eax, DWORD PTR [esi+52]
	lea	ecx, DWORD PTR [esi+64]
	mov	DWORD PTR __$EHRec$[esp+28], 0
	cmp	eax, ecx
	je	SHORT $LN10@CvProcessP
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN10@CvProcessP:
	mov	eax, DWORD PTR [esi+4]
	add	esi, 16					; 00000010H
	cmp	eax, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	pop	esi
	je	SHORT $LN27@CvProcessP
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN27@CvProcessP:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvProcessProductionAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__ehhandler$??1CvProcessProductionAI@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvProcessProductionAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvProcessProductionAI@@QAE@XZ ENDP			; CvProcessProductionAI::~CvProcessProductionAI
PUBLIC	?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z ; CvWeightedVector<int,4,1>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z PROC	; CvWeightedVector<int,4,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@2
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN5@push_back@2:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@2
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@2:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z ENDP	; CvWeightedVector<int,4,1>::push_back
_TEXT	ENDS
PUBLIC	?resize@?$CvWeightedVector@H$03$00@@QAEXI@Z	; CvWeightedVector<int,4,1>::resize
; Function compile flags: /Ogtpy
;	COMDAT ?resize@?$CvWeightedVector@H$03$00@@QAEXI@Z
_TEXT	SEGMENT
_uiNewSize$ = 8						; size = 4
?resize@?$CvWeightedVector@H$03$00@@QAEXI@Z PROC	; CvWeightedVector<int,4,1>::resize, COMDAT
; _this$ = ecx

; 121  : 	{

	push	esi
	push	edi

; 122  : 		m_pItems.resize(uiNewSize);

	mov	edi, DWORD PTR _uiNewSize$[esp+4]
	mov	esi, ecx
	cmp	DWORD PTR [esi+8], edi
	jae	SHORT $LN6@resize@2
	push	edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN6@resize@2:
	mov	DWORD PTR [esi+4], edi
	pop	edi
	pop	esi

; 123  : 	};

	ret	4
?resize@?$CvWeightedVector@H$03$00@@QAEXI@Z ENDP	; CvWeightedVector<int,4,1>::resize
_TEXT	ENDS
PUBLIC	?Reset@CvProcessProductionAI@@QAEXXZ		; CvProcessProductionAI::Reset
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvprocessproductionai.cpp
;	COMDAT ?Reset@CvProcessProductionAI@@QAEXXZ
_TEXT	SEGMENT
?Reset@CvProcessProductionAI@@QAEXXZ PROC		; CvProcessProductionAI::Reset, COMDAT
; _this$ = ecx

; 28   : {

	push	ebx
	push	esi
	mov	esi, ecx
	push	edi

; 29   : 	m_ProcessAIWeights.clear();

	xor	ebx, ebx

; 30   : 
; 31   : 	// Loop through reading each one and add an entry with 0 weight to our vector
; 32   : #ifdef AUI_WARNING_FIXES
; 33   : 	for (uint i = 0; i < GC.getNumProcessInfos(); i++)
; 34   : #else
; 35   : 	for (int i = 0; i < GC.getNumProcessInfos(); i++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR [esi+8], ebx
	xor	edi, edi
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	test	eax, eax
	jle	SHORT $LN1@Reset
	add	esi, 4
	npad	3
$LL3@Reset:

; 36   : #endif
; 37   : 	{
; 38   : 		m_ProcessAIWeights.push_back(i, 0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN20@Reset
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN20@Reset:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	cmp	eax, ebx
	je	SHORT $LN23@Reset
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
$LN23@Reset:
	inc	DWORD PTR [esi+4]
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	edi
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	cmp	edi, eax
	jl	SHORT $LL3@Reset
$LN1@Reset:
	pop	edi
	pop	esi
	pop	ebx

; 39   : 	}
; 40   : }

	ret	0
?Reset@CvProcessProductionAI@@QAEXXZ ENDP		; CvProcessProductionAI::Reset
_TEXT	ENDS
PUBLIC	?Read@CvProcessProductionAI@@QAEXAAVFDataStream@@@Z ; CvProcessProductionAI::Read
EXTRN	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z:PROC ; CvInfosSerializationHelper::ReadHashed
; Function compile flags: /Ogtpy
;	COMDAT ?Read@CvProcessProductionAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_iNumProcess$ = -12					; size = 4
_iWeight$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_i$217546 = 8						; size = 4
_kStream$ = 8						; size = 4
?Read@CvProcessProductionAI@@QAEXAAVFDataStream@@@Z PROC ; CvProcessProductionAI::Read, COMDAT
; _this$ = ecx

; 44   : {

	sub	esp, 12					; 0000000cH
	push	ebx

; 45   : 	// Version number to maintain backwards compatibility
; 46   : 	uint uiVersion;
; 47   : 	kStream >> uiVersion;

	mov	ebx, DWORD PTR _kStream$[esp+12]
	push	ebp
	push	esi
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+28]
	mov	ebp, ecx
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 48   : 
; 49   : 	int iWeight;
; 50   : 
; 51   : 	// Reset vector
; 52   : 	m_ProcessAIWeights.clear();
; 53   : 	m_ProcessAIWeights.resize(GC.getNumProcessInfos());

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR [ebp+8], 0
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	mov	esi, eax
	cmp	DWORD PTR [ebp+12], esi
	lea	edi, DWORD PTR [ebp+4]
	jae	SHORT $LN24@Read
	push	esi
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN24@Read:
	mov	DWORD PTR [edi+4], esi

; 54   : #ifdef AUI_WARNING_FIXES
; 55   : 	for (uint i = 0; i < GC.getNumProcessInfos(); i++)
; 56   : #else
; 57   : 	for(int i = 0; i < GC.getNumProcessInfos(); ++i)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	test	eax, eax
	jle	SHORT $LN5@Read
	npad	1
$LL7@Read:

; 58   : #endif
; 59   : 		m_ProcessAIWeights.SetWeight(i, 0);

	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [ecx+esi*8+4], 0
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumProcessInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumProcessInfos
	cmp	esi, eax
	jl	SHORT $LL7@Read
$LN5@Read:

; 60   : 
; 61   : 	// Loop through reading each one and adding it to our vector
; 62   : 	int iNumProcess;
; 63   : 	kStream >> iNumProcess;

	lea	edx, DWORD PTR _iNumProcess$[esp+28]
	push	edx
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 64   : 	for(int i = 0; i < iNumProcess; i++)

	cmp	DWORD PTR _iNumProcess$[esp+28], 0
	mov	DWORD PTR _i$217546[esp+24], 0
	jle	SHORT $LN2@Read
$LL47@Read:

; 65   : 	{
; 66   : 		int iType = CvInfosSerializationHelper::ReadHashed(kStream);

	push	0
	push	ebx
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	mov	esi, eax
	add	esp, 8

; 67   : 		kStream >> iWeight;

	lea	eax, DWORD PTR _iWeight$[esp+28]
	push	eax
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 68   : 		if (iType >= 0 && iType < m_ProcessAIWeights.size())

	test	esi, esi
	jl	SHORT $LN3@Read
	cmp	esi, DWORD PTR [ebp+8]
	jge	SHORT $LN3@Read

; 69   : 			m_ProcessAIWeights.SetWeight(iType, iWeight);

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR _iWeight$[esp+28]
	mov	DWORD PTR [ecx+esi*8+4], edx
$LN3@Read:
	mov	eax, DWORD PTR _i$217546[esp+24]
	inc	eax
	cmp	eax, DWORD PTR _iNumProcess$[esp+28]
	mov	DWORD PTR _i$217546[esp+24], eax
	jl	SHORT $LL47@Read
$LN2@Read:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 70   : 	}
; 71   : }

	add	esp, 12					; 0000000cH
	ret	4
?Read@CvProcessProductionAI@@QAEXAAVFDataStream@@@Z ENDP ; CvProcessProductionAI::Read
_TEXT	ENDS
END
