; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Documents\GitHub\Lekmod\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllNetLoadGameInfo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:$SG218005
_DATA	ENDS
CONST	SEGMENT
$SG218005 DB	'1.0.0', 00H
	ORG $+2
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvNetLoadGameInfo1 DD 047189636H
	DW	0a5d4H
	DW	04d0bH
	DB	0aaH
	DB	079H
	DB	0f9H
	DB	070H
	DB	065H
	DB	06fH
	DB	014H
	DB	0ebH
CONST	ENDS
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0ICvUnknown@@QAE@XZ				; ICvUnknown::ICvUnknown
PUBLIC	??_R4ICvUnknown@@6B@				; ICvUnknown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVICvUnknown@@@8				; ICvUnknown `RTTI Type Descriptor'
PUBLIC	??_R3ICvUnknown@@8				; ICvUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICvUnknown@@8				; ICvUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICvUnknown@@8			; ICvUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@ICvUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICvUnknown@@8 DD FLAT:??_R0?AVICvUnknown@@@8 ; ICvUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICvUnknown@@8
rdata$r	SEGMENT
??_R2ICvUnknown@@8 DD FLAT:??_R1A@?0A@EA@ICvUnknown@@8	; ICvUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ICvUnknown@@8
rdata$r	SEGMENT
??_R3ICvUnknown@@8 DD 00H				; ICvUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVICvUnknown@@@8
_DATA	SEGMENT
??_R0?AVICvUnknown@@@8 DD FLAT:??_7type_info@@6B@	; ICvUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVICvUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ICvUnknown@@6B@
rdata$r	SEGMENT
??_R4ICvUnknown@@6B@ DD 00H				; ICvUnknown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVICvUnknown@@@8
	DD	FLAT:??_R3ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:??_R4ICvUnknown@@6B@	; ICvUnknown::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ICvUnknown@@QAE@XZ
_TEXT	SEGMENT
??0ICvUnknown@@QAE@XZ PROC				; ICvUnknown::ICvUnknown, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	ret	0
??0ICvUnknown@@QAE@XZ ENDP				; ICvUnknown::ICvUnknown
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllNetLoadGameInfo@@QAEIXZ ; CvDllNetLoadGameInfo::IncrementReference
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllnetloadgameinfo.cpp
;	COMDAT ?IncrementReference@CvDllNetLoadGameInfo@@QAEIXZ
_TEXT	SEGMENT
?IncrementReference@CvDllNetLoadGameInfo@@QAEIXZ PROC	; CvDllNetLoadGameInfo::IncrementReference, COMDAT
; _this$ = ecx

; 37   : 	++m_uiRefCount;

	inc	DWORD PTR [ecx+20]

; 38   : 	return m_uiRefCount;

	mov	eax, DWORD PTR [ecx+20]

; 39   : }

	ret	0
?IncrementReference@CvDllNetLoadGameInfo@@QAEIXZ ENDP	; CvDllNetLoadGameInfo::IncrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllNetLoadGameInfo@@QAEIXZ	; CvDllNetLoadGameInfo::GetReferenceCount
; Function compile flags: /Ogtpy
;	COMDAT ?GetReferenceCount@CvDllNetLoadGameInfo@@QAEIXZ
_TEXT	SEGMENT
?GetReferenceCount@CvDllNetLoadGameInfo@@QAEIXZ PROC	; CvDllNetLoadGameInfo::GetReferenceCount, COMDAT
; _this$ = ecx

; 57   : 	return m_uiRefCount;

	mov	eax, DWORD PTR [ecx+20]

; 58   : }

	ret	0
?GetReferenceCount@CvDllNetLoadGameInfo@@QAEIXZ ENDP	; CvDllNetLoadGameInfo::GetReferenceCount
_TEXT	ENDS
PUBLIC	??3CvDllNetLoadGameInfo@@SAXPAX@Z		; CvDllNetLoadGameInfo::operator delete
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Ogtpy
;	COMDAT ??3CvDllNetLoadGameInfo@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllNetLoadGameInfo@@SAXPAX@Z PROC			; CvDllNetLoadGameInfo::operator delete, COMDAT

; 67   : 	CvDllGameContext::Free(p);

	jmp	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
??3CvDllNetLoadGameInfo@@SAXPAX@Z ENDP			; CvDllNetLoadGameInfo::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllNetLoadGameInfo@@SAPAXI@Z		; CvDllNetLoadGameInfo::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Ogtpy
;	COMDAT ??2CvDllNetLoadGameInfo@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllNetLoadGameInfo@@SAPAXI@Z PROC			; CvDllNetLoadGameInfo::operator new, COMDAT

; 72   : 	return CvDllGameContext::Allocate(bytes);

	jmp	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
??2CvDllNetLoadGameInfo@@SAPAXI@Z ENDP			; CvDllNetLoadGameInfo::operator new
_TEXT	ENDS
PUBLIC	?Commit@CvDllNetLoadGameInfo@@UAG_NXZ		; CvDllNetLoadGameInfo::Commit
EXTRN	?setAllSlotStatus@CvPreGame@@YAXABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z:PROC ; CvPreGame::setAllSlotStatus
; Function compile flags: /Ogtpy
;	COMDAT ?Commit@CvDllNetLoadGameInfo@@UAG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Commit@CvDllNetLoadGameInfo@@UAG_NXZ PROC		; CvDllNetLoadGameInfo::Commit, COMDAT

; 89   : 	CvPreGame::setAllSlotStatus(m_slotStatus);

	mov	eax, DWORD PTR _this$[esp-4]
	add	eax, 4
	push	eax
	call	?setAllSlotStatus@CvPreGame@@YAXABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ; CvPreGame::setAllSlotStatus
	add	esp, 4

; 90   : 	return true;

	mov	al, 1

; 91   : }

	ret	4
?Commit@CvDllNetLoadGameInfo@@UAG_NXZ ENDP		; CvDllNetLoadGameInfo::Commit
_TEXT	ENDS
PUBLIC	_IsEqualGUID
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v6.0a\include\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

	mov	ecx, DWORD PTR _rguid2$[esp-4]
	mov	edx, DWORD PTR _rguid1$[esp-4]
	mov	eax, 16					; 00000010H
	push	esi
	npad	2
$LL4@IsEqualGUI:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN5@IsEqualGUI
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL4@IsEqualGUI
	xor	eax, eax
	xor	edx, edx
	test	eax, eax
	sete	dl
	pop	esi
	mov	eax, edx

; 162  : }

	ret	0
$LN5@IsEqualGUI:

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

	movzx	eax, BYTE PTR [edx]
	movzx	esi, BYTE PTR [ecx]
	sub	eax, esi
	jne	SHORT $LN7@IsEqualGUI
	movzx	eax, BYTE PTR [edx+1]
	movzx	esi, BYTE PTR [ecx+1]
	sub	eax, esi
	jne	SHORT $LN7@IsEqualGUI
	movzx	eax, BYTE PTR [edx+2]
	movzx	esi, BYTE PTR [ecx+2]
	sub	eax, esi
	jne	SHORT $LN7@IsEqualGUI
	movzx	eax, BYTE PTR [edx+3]
	movzx	ecx, BYTE PTR [ecx+3]
	sub	eax, ecx
$LN7@IsEqualGUI:
	sar	eax, 31					; 0000001fH
	or	eax, 1
	xor	edx, edx
	test	eax, eax
	sete	dl
	pop	esi
	mov	eax, edx

; 162  : }

	ret	0
_IsEqualGUID ENDP
_TEXT	ENDS
PUBLIC	_==
; Function compile flags: /Ogtpy
;	COMDAT _==
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 194  :     return IsEqualGUID(guidOne,guidOther);

	jmp	_IsEqualGUID
_==	ENDP
_TEXT	ENDS
PUBLIC	?capacity@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?capacity@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN3@capacity
	xor	eax, eax

; 636  : 		}

	ret	0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+12]
	sub	eax, edx
	sar	eax, 2

; 636  : 		}

	ret	0
?capacity@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 727  : 		}

	ret	0
?size@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::size
_TEXT	ENDS
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >::~_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_empty@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >::~_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >::~_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??0?$allocator@W4SlotStatus@@@std@@QAE@XZ	; std::allocator<enum SlotStatus>::allocator<enum SlotStatus>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@W4SlotStatus@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@W4SlotStatus@@@std@@QAE@XZ PROC		; std::allocator<enum SlotStatus>::allocator<enum SlotStatus>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@W4SlotStatus@@@std@@QAE@XZ ENDP		; std::allocator<enum SlotStatus>::allocator<enum SlotStatus>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@I@Z ; std::allocator<enum SlotStatus>::deallocate
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ?deallocate@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@I@Z PROC ; std::allocator<enum SlotStatus>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@I@Z ENDP ; std::allocator<enum SlotStatus>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Container_base_aux_alloc_empty@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@V?$allocator@W4SlotStatus@@@1@@Z ; std::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??0?$_Container_base_aux_alloc_empty@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@V?$allocator@W4SlotStatus@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??0?$_Container_base_aux_alloc_empty@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@V?$allocator@W4SlotStatus@@@1@@Z PROC ; std::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >, COMDAT
; _this$ = ecx

; 618  : 	explicit _Container_base_aux_alloc_empty(_Alloc) { }

	mov	eax, ecx
	ret	4
??0?$_Container_base_aux_alloc_empty@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@V?$allocator@W4SlotStatus@@@1@@Z ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >::_Container_base_aux_alloc_empty<std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??0?$allocator@W4SlotStatus@@@std@@QAE@ABV01@@Z	; std::allocator<enum SlotStatus>::allocator<enum SlotStatus>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??0?$allocator@W4SlotStatus@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@W4SlotStatus@@@std@@QAE@ABV01@@Z PROC	; std::allocator<enum SlotStatus>::allocator<enum SlotStatus>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@W4SlotStatus@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<enum SlotStatus>::allocator<enum SlotStatus>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@W4SlotStatus@@@std@@QBEIXZ ; std::allocator<enum SlotStatus>::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$allocator@W4SlotStatus@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@W4SlotStatus@@@std@@QBEIXZ PROC	; std::allocator<enum SlotStatus>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 1073741823				; 3fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@W4SlotStatus@@@std@@QBEIXZ ENDP	; std::allocator<enum SlotStatus>::max_size
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@PAW4SlotStatus@@@Z ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@PAW4SlotStatus@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@PAW4SlotStatus@@@Z PROC ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >, COMDAT
; _this$ = ecx

; 84   : 	explicit _Vector_const_iterator(_Tptr _Ptr)

	mov	eax, ecx

; 85   : 		{	// construct with pointer _Ptr
; 86   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 87   : 		}

	ret	4
??0?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@PAW4SlotStatus@@@Z ENDP ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator==
; Function compile flags: /Ogtpy
;	COMDAT ??8?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator==, COMDAT
; _this$ = ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator==
_TEXT	ENDS
PUBLIC	?begin@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::begin, COMDAT
; _this$ = ecx

; 672  : 		return (const_iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 673  : 		}

	ret	4
?begin@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::end, COMDAT
; _this$ = ecx

; 682  : 		return (const_iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 683  : 		}

	ret	4
?end@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::end
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAW4SlotStatus@@PAW41@@std@@YA?AUrandom_access_iterator_tag@0@ABQAW4SlotStatus@@0@Z ; std::_Iter_random<enum SlotStatus *,enum SlotStatus *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAW4SlotStatus@@PAW41@@std@@YA?AUrandom_access_iterator_tag@0@ABQAW4SlotStatus@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAW4SlotStatus@@PAW41@@std@@YA?AUrandom_access_iterator_tag@0@ABQAW4SlotStatus@@0@Z PROC ; std::_Iter_random<enum SlotStatus *,enum SlotStatus *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAW4SlotStatus@@PAW41@@std@@YA?AUrandom_access_iterator_tag@0@ABQAW4SlotStatus@@0@Z ENDP ; std::_Iter_random<enum SlotStatus *,enum SlotStatus *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAW4SlotStatus@@PAW41@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAW4SlotStatus@@0@Z ; std::_Ptr_cat<enum SlotStatus *,enum SlotStatus *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAW4SlotStatus@@PAW41@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAW4SlotStatus@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAW4SlotStatus@@PAW41@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAW4SlotStatus@@0@Z PROC ; std::_Ptr_cat<enum SlotStatus *,enum SlotStatus *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAW4SlotStatus@@PAW41@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAW4SlotStatus@@0@Z ENDP ; std::_Ptr_cat<enum SlotStatus *,enum SlotStatus *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag>, COMDAT

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN1@Copy_opt
	push	esi
$LL3@Copy_opt:

; 2472 : 		*_Dest = *_First;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	add	ecx, 4
	add	eax, 4
	cmp	ecx, edx
	jne	SHORT $LL3@Copy_opt
	pop	esi
$LN1@Copy_opt:

; 2473 : 	return (_Dest);
; 2474 : 	}

	ret	0
??$_Copy_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??D?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEABW4SlotStatus@@XZ ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator*
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEABW4SlotStatus@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEABW4SlotStatus@@XZ PROC ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator*, COMDAT
; _this$ = ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());
; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR [ecx]

; 107  : 		}

	ret	0
??D?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEABW4SlotStatus@@XZ ENDP ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator*
_TEXT	ENDS
PUBLIC	??E?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator++
; Function compile flags: /Ogtpy
;	COMDAT ??E?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

	mov	eax, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);
; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

	add	DWORD PTR [eax], 4

; 126  : 		return (*this);
; 127  : 		}

	ret	0
??E?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator++
_TEXT	ENDS
PUBLIC	??R?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@QAEXABW4SlotStatus@@@Z ; SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >::operator()
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4SlotStatus@@@Z:PROC ; operator<<
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fstlcontainerserialization.h
;	COMDAT ??R?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@QAEXABW4SlotStatus@@@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??R?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@QAEXABW4SlotStatus@@@Z PROC ; SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >::operator(), COMDAT
; _this$ = ecx

; 75   : 		m_saveTo << i;

	mov	eax, DWORD PTR _i$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4SlotStatus@@@Z ; operator<<
	add	esp, 8

; 76   : 	}

	ret	4
??R?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@QAEXABW4SlotStatus@@@Z ENDP ; SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >::operator()
_TEXT	ENDS
PUBLIC	??G?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator-
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??G?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator-, COMDAT
; _this$ = ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));
; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[esp-4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 195  : 		}

	ret	4
??G?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator-
_TEXT	ENDS
PUBLIC	??Y?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+=
; Function compile flags: /Ogtpy
;	COMDAT ??Y?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	mov	eax, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());
; 161  : 		_SCL_SECURE_VALIDATE_RANGE(
; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);
; 164  : 		_Myptr += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*4]
	add	DWORD PTR [eax], edx

; 165  : 		return (*this);
; 166  : 		}

	ret	4
??Y?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+=
_TEXT	ENDS
PUBLIC	??$_Destroy@W4SlotStatus@@@std@@YAXPAW4SlotStatus@@@Z ; std::_Destroy<enum SlotStatus>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy@W4SlotStatus@@@std@@YAXPAW4SlotStatus@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@W4SlotStatus@@@std@@YAXPAW4SlotStatus@@@Z PROC ; std::_Destroy<enum SlotStatus>, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@W4SlotStatus@@@std@@YAXPAW4SlotStatus@@@Z ENDP ; std::_Destroy<enum SlotStatus>
_TEXT	ENDS
PUBLIC	??$_Fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z ; std::_Fill<enum SlotStatus *,enum SlotStatus>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z PROC ; std::_Fill<enum SlotStatus *,enum SlotStatus>, COMDAT

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@Fill
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL3@Fill:

; 3159 : 		*_First = _Val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL3@Fill
	pop	esi
$LN1@Fill:

; 3160 : 	}

	ret	0
??$_Fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z ENDP ; std::_Fill<enum SlotStatus *,enum SlotStatus>
_TEXT	ENDS
PUBLIC	??$_Move_cat@PAW4SlotStatus@@@std@@YA?AU_Undefined_move_tag@0@ABQAW4SlotStatus@@@Z ; std::_Move_cat<enum SlotStatus *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_cat@PAW4SlotStatus@@@std@@YA?AU_Undefined_move_tag@0@ABQAW4SlotStatus@@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAW4SlotStatus@@@std@@YA?AU_Undefined_move_tag@0@ABQAW4SlotStatus@@@Z PROC ; std::_Move_cat<enum SlotStatus *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAW4SlotStatus@@@std@@YA?AU_Undefined_move_tag@0@ABQAW4SlotStatus@@@Z ENDP ; std::_Move_cat<enum SlotStatus *>
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 371  : 		{	// construct from message string

	push	esi
	lea	eax, DWORD PTR __Message$[esp]
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@

; 372  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw
	push	esi
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-4]
	sub	ecx, 4
	sub	eax, 4
	mov	DWORD PTR [eax], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw
	pop	esi
$LN1@Copy_backw:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	eax, DWORD PTR __Message$[esp+16]
	push	eax
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[esp+32], 0
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 27   : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 30   : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 31   : 		}

	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 35   : 		return (_Str.c_str());

	add	ecx, 12					; 0000000cH
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN6@scalar@2
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@scalar@2:
	mov	eax, esi
	pop	esi
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	mov	eax, DWORD PTR __Message$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogtpy
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 110  : 		}

	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	pop	esi
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, esi
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN8@scalar@3
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN8@scalar@3:
	mov	eax, esi
	pop	esi
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?GetInterfaceId@ICvUnknown@@SG?AU_GUID@@XZ	; ICvUnknown::GetInterfaceId
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
;	COMDAT ?GetInterfaceId@ICvUnknown@@SG?AU_GUID@@XZ
_TEXT	SEGMENT
$T220524 = 8						; size = 4
?GetInterfaceId@ICvUnknown@@SG?AU_GUID@@XZ PROC		; ICvUnknown::GetInterfaceId, COMDAT

; 306  : 	static GUID DLLCALL GetInterfaceId(){ return guidICvUnknown; }

	mov	eax, DWORD PTR $T220524[esp-4]
	mov	ecx, DWORD PTR _guidICvUnknown
	mov	edx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	ret	4
?GetInterfaceId@ICvUnknown@@SG?AU_GUID@@XZ ENDP		; ICvUnknown::GetInterfaceId
_TEXT	ENDS
PUBLIC	?GetInterfaceId@ICvNetLoadGameInfo1@@SG?AU_GUID@@XZ ; ICvNetLoadGameInfo1::GetInterfaceId
; Function compile flags: /Ogtpy
;	COMDAT ?GetInterfaceId@ICvNetLoadGameInfo1@@SG?AU_GUID@@XZ
_TEXT	SEGMENT
$T220528 = 8						; size = 4
?GetInterfaceId@ICvNetLoadGameInfo1@@SG?AU_GUID@@XZ PROC ; ICvNetLoadGameInfo1::GetInterfaceId, COMDAT

; 530  : 	static GUID DLLCALL GetInterfaceId() { return guidICvNetLoadGameInfo1; }

	mov	eax, DWORD PTR $T220528[esp-4]
	mov	ecx, DWORD PTR _guidICvNetLoadGameInfo1
	mov	edx, DWORD PTR _guidICvNetLoadGameInfo1+4
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _guidICvNetLoadGameInfo1+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _guidICvNetLoadGameInfo1+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	ret	4
?GetInterfaceId@ICvNetLoadGameInfo1@@SG?AU_GUID@@XZ ENDP ; ICvNetLoadGameInfo1::GetInterfaceId
_TEXT	ENDS
PUBLIC	??$?5I@FDataStream@@QAEAAV0@AAI@Z		; FDataStream::operator>><unsigned int>
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5I@FDataStream@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5I@FDataStream@@QAEAAV0@AAI@Z PROC			; FDataStream::operator>><unsigned int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5I@FDataStream@@QAEAAV0@AAI@Z ENDP			; FDataStream::operator>><unsigned int>
_TEXT	ENDS
PUBLIC	??$?6I@FDataStream@@QAEAAV0@ABI@Z		; FDataStream::operator<<<unsigned int>
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6I@FDataStream@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6I@FDataStream@@QAEAAV0@ABI@Z PROC			; FDataStream::operator<<<unsigned int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6I@FDataStream@@QAEAAV0@ABI@Z ENDP			; FDataStream::operator<<<unsigned int>
_TEXT	ENDS
PUBLIC	??_7ICvNetLoadGameInfo1@@6B@			; ICvNetLoadGameInfo1::`vftable'
PUBLIC	??0ICvNetLoadGameInfo1@@QAE@XZ			; ICvNetLoadGameInfo1::ICvNetLoadGameInfo1
PUBLIC	??_R4ICvNetLoadGameInfo1@@6B@			; ICvNetLoadGameInfo1::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVICvNetLoadGameInfo1@@@8			; ICvNetLoadGameInfo1 `RTTI Type Descriptor'
PUBLIC	??_R3ICvNetLoadGameInfo1@@8			; ICvNetLoadGameInfo1::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICvNetLoadGameInfo1@@8			; ICvNetLoadGameInfo1::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICvNetLoadGameInfo1@@8		; ICvNetLoadGameInfo1::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@ICvNetLoadGameInfo1@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICvNetLoadGameInfo1@@8 DD FLAT:??_R0?AVICvNetLoadGameInfo1@@@8 ; ICvNetLoadGameInfo1::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICvNetLoadGameInfo1@@8
rdata$r	ENDS
;	COMDAT ??_R2ICvNetLoadGameInfo1@@8
rdata$r	SEGMENT
??_R2ICvNetLoadGameInfo1@@8 DD FLAT:??_R1A@?0A@EA@ICvNetLoadGameInfo1@@8 ; ICvNetLoadGameInfo1::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICvNetLoadGameInfo1@@8
rdata$r	SEGMENT
??_R3ICvNetLoadGameInfo1@@8 DD 00H			; ICvNetLoadGameInfo1::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICvNetLoadGameInfo1@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVICvNetLoadGameInfo1@@@8
_DATA	SEGMENT
??_R0?AVICvNetLoadGameInfo1@@@8 DD FLAT:??_7type_info@@6B@ ; ICvNetLoadGameInfo1 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVICvNetLoadGameInfo1@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ICvNetLoadGameInfo1@@6B@
rdata$r	SEGMENT
??_R4ICvNetLoadGameInfo1@@6B@ DD 00H			; ICvNetLoadGameInfo1::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVICvNetLoadGameInfo1@@@8
	DD	FLAT:??_R3ICvNetLoadGameInfo1@@8
rdata$r	ENDS
;	COMDAT ??_7ICvNetLoadGameInfo1@@6B@
CONST	SEGMENT
??_7ICvNetLoadGameInfo1@@6B@ DD FLAT:??_R4ICvNetLoadGameInfo1@@6B@ ; ICvNetLoadGameInfo1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ICvNetLoadGameInfo1@@QAE@XZ
_TEXT	SEGMENT
??0ICvNetLoadGameInfo1@@QAE@XZ PROC			; ICvNetLoadGameInfo1::ICvNetLoadGameInfo1, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7ICvNetLoadGameInfo1@@6B@
	ret	0
??0ICvNetLoadGameInfo1@@QAE@XZ ENDP			; ICvNetLoadGameInfo1::ICvNetLoadGameInfo1
_TEXT	ENDS
PUBLIC	?QueryInterface@CvDllNetLoadGameInfo@@UAGPAXU_GUID@@@Z ; CvDllNetLoadGameInfo::QueryInterface
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllnetloadgameinfo.cpp
;	COMDAT ?QueryInterface@CvDllNetLoadGameInfo@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
$T220546 = -16						; size = 16
$T220544 = -16						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllNetLoadGameInfo@@UAGPAXU_GUID@@@Z PROC ; CvDllNetLoadGameInfo::QueryInterface, COMDAT

; 24   : {

	sub	esp, 16					; 00000010H

; 25   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 26   : 	        guidInterface == ICvNetLoadGameInfo1::GetInterfaceId())

	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T220544[esp+20], ecx
	lea	ecx, DWORD PTR $T220544[esp+16]
	mov	DWORD PTR $T220544[esp+24], edx
	mov	DWORD PTR $T220544[esp+16], eax
	mov	eax, DWORD PTR _guidICvUnknown+12
	push	ecx
	lea	edx, DWORD PTR _guidInterface$[esp+16]
	push	edx
	mov	DWORD PTR $T220544[esp+36], eax
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@QueryInter
	mov	ecx, DWORD PTR _guidICvNetLoadGameInfo1+4
	mov	edx, DWORD PTR _guidICvNetLoadGameInfo1+8
	mov	eax, DWORD PTR _guidICvNetLoadGameInfo1
	mov	DWORD PTR $T220546[esp+20], ecx
	lea	ecx, DWORD PTR $T220546[esp+16]
	mov	DWORD PTR $T220546[esp+24], edx
	mov	DWORD PTR $T220546[esp+16], eax
	mov	eax, DWORD PTR _guidICvNetLoadGameInfo1+12
	push	ecx
	lea	edx, DWORD PTR _guidInterface$[esp+16]
	push	edx
	mov	DWORD PTR $T220546[esp+36], eax
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@QueryInter

; 29   : 		return this;
; 30   : 	}
; 31   : 
; 32   : 	return NULL;
; 33   : }

	add	esp, 16					; 00000010H
	ret	20					; 00000014H
$LN1@QueryInter:

; 27   : 	{
; 28   : 		IncrementReference();

	mov	eax, DWORD PTR _this$[esp+12]
	inc	DWORD PTR [eax+20]

; 29   : 		return this;
; 30   : 	}
; 31   : 
; 32   : 	return NULL;
; 33   : }

	add	esp, 16					; 00000010H
	ret	20					; 00000014H
?QueryInterface@CvDllNetLoadGameInfo@@UAGPAXU_GUID@@@Z ENDP ; CvDllNetLoadGameInfo::QueryInterface
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ ; std::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >::~_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Vector_val@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >::~_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Vector_val@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >::~_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@V?$allocator@W4SlotStatus@@@1@@Z ; std::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@V?$allocator@W4SlotStatus@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@V?$allocator@W4SlotStatus@@@1@@Z PROC ; std::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	mov	eax, ecx

; 426  : 		}

	ret	4
??0?$_Vector_val@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE@V?$allocator@W4SlotStatus@@@1@@Z ENDP ; std::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_val<enum SlotStatus,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::max_size
; Function compile flags: /Ogtpy
;	COMDAT ?max_size@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 732  : 		}

	ret	0
?max_size@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBEIXZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::max_size
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Xlen
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T220601 = -80						; size = 28
$T220600 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	-1
	push	__ehhandler$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 68					; 00000044H

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T220601[esp+84]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	lea	ecx, DWORD PTR $T220600[esp+80]
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	lea	eax, DWORD PTR $T220601[esp+80]
	push	eax
	lea	ecx, DWORD PTR $T220600[esp+96]
	mov	BYTE PTR __$EHRec$[esp+92], 1
	mov	DWORD PTR $T220600[esp+84], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T220600[esp+84]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+96], 0
	mov	DWORD PTR $T220600[esp+88], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN13@Xlen:
$LN12@Xlen:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T220601[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T220600[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Xlen
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	push	edi
	mov	edi, DWORD PTR ___that$[esp+20]
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	add	edi, 12					; 0000000cH
	push	edi
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR __$EHRec$[esp+36], 0
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogtpy
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@PAW4SlotStatus@@@Z ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
;	COMDAT ??0?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@PAW4SlotStatus@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@PAW4SlotStatus@@@Z PROC ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >, COMDAT
; _this$ = ecx

; 333  : 		{	// construct with pointer _Ptr

	mov	eax, ecx
	mov	ecx, DWORD PTR __Ptr$[esp-4]
	mov	DWORD PTR [eax], ecx

; 334  : 		}

	ret	4
??0?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@PAW4SlotStatus@@@Z ENDP ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??9?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator!=
; Function compile flags: /Ogtpy
;	COMDAT ??9?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator!=, COMDAT
; _this$ = ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Right$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator!=
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z ; stdext::unchecked_copy<enum SlotStatus *,enum SlotStatus *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z PROC ; stdext::unchecked_copy<enum SlotStatus *,enum SlotStatus *>, COMDAT

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN7@unchecked_
	push	esi
$LL9@unchecked_:
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	add	ecx, 4
	add	eax, 4
	cmp	ecx, edx
	jne	SHORT $LL9@unchecked_
	pop	esi
$LN7@unchecked_:

; 3607 : 	}

	ret	0
??$unchecked_copy@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z ENDP ; stdext::unchecked_copy<enum SlotStatus *,enum SlotStatus *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??$_Allocate@W4SlotStatus@@@std@@YAPAW4SlotStatus@@IPAW41@@Z ; std::_Allocate<enum SlotStatus>
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Allocate@W4SlotStatus@@@std@@YAPAW4SlotStatus@@IPAW41@@Z
_TEXT	SEGMENT
$T220680 = -12						; size = 12
$T220684 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@W4SlotStatus@@@std@@YAPAW4SlotStatus@@IPAW41@@Z PROC ; std::_Allocate<enum SlotStatus>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx*4]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 4
	jae	SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T220684[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T220680[esp+16]
	mov	DWORD PTR $T220684[esp+12], 0
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T220680[esp+16]
	push	ecx
	mov	DWORD PTR $T220680[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate:
$LN8@Allocate:
	int	3
??$_Allocate@W4SlotStatus@@@std@@YAPAW4SlotStatus@@IPAW41@@Z ENDP ; std::_Allocate<enum SlotStatus>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??0?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@QAE@AAVFDataStream@@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ; SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >::SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fstlcontainerserialization.h
;	COMDAT ??0?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@QAE@AAVFDataStream@@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z
_TEXT	SEGMENT
$T220694 = 8						; size = 4
_saveTo$ = 8						; size = 4
_container$ = 12					; size = 4
??0?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@QAE@AAVFDataStream@@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z PROC ; SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >::SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >, COMDAT
; _this$ = ecx

; 69   : 	{

	mov	eax, DWORD PTR _container$[esp-4]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _saveTo$[esp]
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi], ecx

; 70   : 		m_saveTo << container.size();

	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [eax+4]
	lea	eax, DWORD PTR $T220694[esp]
	sar	edx, 2
	push	eax
	mov	DWORD PTR $T220694[esp+4], edx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 71   : 	}

	mov	eax, esi
	pop	esi
	ret	8
??0?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@QAE@AAVFDataStream@@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ENDP ; SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >::SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const >
_TEXT	ENDS
PUBLIC	??$for_each@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@U?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@@std@@YA?AU?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@0@0U1@@Z ; std::for_each<std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >,SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$for_each@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@U?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@@std@@YA?AU?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@0@0U1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Func$ = 20						; size = 8
??$for_each@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@U?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@@std@@YA?AU?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@0@0U1@@Z PROC ; std::for_each<std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >,SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const > >, COMDAT

; 23   : 	{	// perform function for each element

	push	esi

; 24   : 	_DEBUG_RANGE(_First, _Last);
; 25   : 	_DEBUG_POINTER(_Func);
; 26   : 	_CHECKED_BASE_TYPE(_InIt) _ChkFirst(_CHECKED_BASE(_First));

	mov	esi, DWORD PTR __First$[esp]
	push	edi

; 27   : 	_CHECKED_BASE_TYPE(_InIt) _ChkLast(_CHECKED_BASE(_Last));

	mov	edi, DWORD PTR __Last$[esp+4]

; 28   : 	for (; _ChkFirst != _ChkLast; ++_ChkFirst)

	cmp	esi, edi
	je	SHORT $LN1@for_each
	npad	2
$LL6@for_each:

; 29   : 		_Func(*_ChkFirst);

	mov	eax, DWORD PTR __Func$[esp+4]
	push	esi
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4SlotStatus@@@Z ; operator<<
	add	esi, 4
	add	esp, 8
	cmp	esi, edi
	jne	SHORT $LL6@for_each
$LN1@for_each:

; 30   : 	return (_Func);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	ecx, DWORD PTR __Func$[esp+4]
	mov	edx, DWORD PTR __Func$[esp+8]
	pop	edi
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	pop	esi

; 31   : 	}

	ret	0
??$for_each@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@U?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@@std@@YA?AU?$SerializeFromSequenceContainer@$$CBW4SlotStatus@@$$CBV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@0@0U1@@Z ENDP ; std::for_each<std::_Vector_const_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >,SerializeFromSequenceContainer<enum SlotStatus const ,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > const > >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@@Z ; std::allocator<enum SlotStatus>::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@@Z PROC ; std::allocator<enum SlotStatus>::destroy, COMDAT
; _this$ = ecx

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	4
?destroy@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@@Z ENDP ; std::allocator<enum SlotStatus>::destroy
_TEXT	ENDS
PUBLIC	??Y?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	mov	eax, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [ecx*4]
	add	DWORD PTR [eax], edx

; 376  : 		return (*this);
; 377  : 		}

	ret	4
??Y?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+=
_TEXT	ENDS
PUBLIC	??$fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z ; std::fill<enum SlotStatus *,enum SlotStatus>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z PROC ; std::fill<enum SlotStatus *,enum SlotStatus>, COMDAT

; 3187 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@fill
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL5@fill:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL5@fill
	pop	esi
$LN3@fill:

; 3188 : 	}

	ret	0
??$fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z ENDP ; std::fill<enum SlotStatus *,enum SlotStatus>
_TEXT	ENDS
PUBLIC	??$_Move_backward_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Move_backward_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2753 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2754 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN5@Move_backw
	push	esi
$LL6@Move_backw:
	mov	esi, DWORD PTR [ecx-4]
	sub	ecx, 4
	sub	eax, 4
	mov	DWORD PTR [eax], esi
	cmp	ecx, edx
	jne	SHORT $LL6@Move_backw
	pop	esi
$LN5@Move_backw:

; 2755 : 	}

	ret	0
??$_Move_backward_opt@PAW4SlotStatus@@PAW41@Urandom_access_iterator_tag@std@@U_Undefined_move_tag@3@@std@@YAPAW4SlotStatus@@PAW41@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<enum SlotStatus *,enum SlotStatus *,std::random_access_iterator_tag,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??$_Construct@W4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@ABW41@@Z ; std::_Construct<enum SlotStatus,enum SlotStatus>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Construct@W4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@ABW41@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@W4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@ABW41@@Z PROC ; std::_Construct<enum SlotStatus,enum SlotStatus>, COMDAT

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@Construct:

; 53   : 	}

	ret	0
??$_Construct@W4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@ABW41@@Z ENDP ; std::_Construct<enum SlotStatus,enum SlotStatus>
_TEXT	ENDS
PUBLIC	?begin@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::begin
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?begin@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::begin, COMDAT
; _this$ = ecx

; 667  : 		return (iterator(_Myfirst));

	mov	ecx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 668  : 		}

	ret	4
?begin@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::end, COMDAT
; _this$ = ecx

; 677  : 		return (iterator(_Mylast));

	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], ecx

; 678  : 		}

	ret	4
?end@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@XZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::end
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@W4SlotStatus@@@std@@QAEPAW4SlotStatus@@I@Z ; std::allocator<enum SlotStatus>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@W4SlotStatus@@@std@@QAEPAW4SlotStatus@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@W4SlotStatus@@@std@@QAEPAW4SlotStatus@@I@Z PROC ; std::allocator<enum SlotStatus>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@W4SlotStatus@@@std@@YAPAW4SlotStatus@@IPAW41@@Z ; std::_Allocate<enum SlotStatus>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@W4SlotStatus@@@std@@QAEPAW4SlotStatus@@I@Z ENDP ; std::allocator<enum SlotStatus>::allocate
_TEXT	ENDS
PUBLIC	?_Make_iter@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Make_iter, COMDAT
; _this$ = ecx

; 687  : 		return (iterator(_Where._Myptr));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR __Where$[esp-4]
	mov	DWORD PTR [eax], ecx

; 688  : 		}

	ret	8
?_Make_iter@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Make_iter
_TEXT	ENDS
PUBLIC	??$?6W4SlotStatus@@@@YAAAVFDataStream@@AAV0@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ; operator<<<enum SlotStatus>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fstlcontainerserialization.h
;	COMDAT ??$?6W4SlotStatus@@@@YAAAVFDataStream@@AAV0@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
$T220835 = 12						; size = 4
_readFrom$ = 12						; size = 4
??$?6W4SlotStatus@@@@YAAAVFDataStream@@AAV0@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z PROC ; operator<<<enum SlotStatus>, COMDAT

; 198  : {

	push	ebx

; 199  : 	std::for_each(readFrom.begin(), readFrom.end(), SerializeFromSequenceContainer<const ElementType, const std::vector<ElementType> >(saveTo, readFrom));

	mov	ebx, DWORD PTR _saveTo$[esp]
	push	esi
	mov	esi, DWORD PTR _readFrom$[esp+4]
	mov	eax, DWORD PTR [esi+8]
	sub	eax, DWORD PTR [esi+4]
	push	edi
	lea	ecx, DWORD PTR $T220835[esp+8]
	sar	eax, 2
	push	ecx
	mov	ecx, ebx
	mov	DWORD PTR $T220835[esp+12], eax
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write
	mov	edi, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+4]
	cmp	esi, edi
	je	SHORT $LN34@operator
	npad	2
$LL22@operator:
	push	esi
	push	ebx
	call	??6@YAAAVFDataStream@@AAV0@ABW4SlotStatus@@@Z ; operator<<
	add	esi, 4
	add	esp, 8
	cmp	esi, edi
	jne	SHORT $LL22@operator
$LN34@operator:
	pop	edi
	pop	esi

; 200  : 	return saveTo;

	mov	eax, ebx
	pop	ebx

; 201  : }

	ret	0
??$?6W4SlotStatus@@@@YAAAVFDataStream@@AAV0@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ENDP ; operator<<<enum SlotStatus>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@0AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@0AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@0AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<enum SlotStatus> >, COMDAT

; 233  : 	for (; _First != _Last; ++_First)
; 234  : 		_Al.destroy(_First);
; 235  : 	}

	ret	0
??$_Destroy_range@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@0AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??H?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??H?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+, COMDAT
; _this$ = ecx

; 381  : 		_Myt _Tmp = *this;
; 382  : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Off$[esp-4]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	DWORD PTR [eax], edx

; 383  : 		}

	ret	8
??H?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<enum SlotStatus,std::allocator<enum SlotStatus> >::operator+
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z ; stdext::_Unchecked_move_backward<enum SlotStatus *,enum SlotStatus *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Unchecked_move_backward@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z PROC ; stdext::_Unchecked_move_backward<enum SlotStatus *,enum SlotStatus *>, COMDAT

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN11@Unchecked_
	push	esi
$LL12@Unchecked_:
	mov	esi, DWORD PTR [ecx-4]
	sub	ecx, 4
	sub	eax, 4
	mov	DWORD PTR [eax], esi
	cmp	ecx, edx
	jne	SHORT $LL12@Unchecked_
	pop	esi
$LN11@Unchecked_:

; 3697 : 	}

	ret	0
??$_Unchecked_move_backward@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z ENDP ; stdext::_Unchecked_move_backward<enum SlotStatus *,enum SlotStatus *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@ABW43@@Z ; std::allocator<enum SlotStatus>::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@ABW43@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@ABW43@@Z PROC ; std::allocator<enum SlotStatus>::construct, COMDAT
; _this$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	test	eax, eax
	je	SHORT $LN5@construct
	mov	ecx, DWORD PTR __Val$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN5@construct:

; 156  : 		}

	ret	8
?construct@?$allocator@W4SlotStatus@@@std@@QAEXPAW4SlotStatus@@ABW43@@Z ENDP ; std::allocator<enum SlotStatus>::construct
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >, COMDAT

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;
; 401  : 
; 402  : 	_TRY_BEGIN
; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	mov	ecx, DWORD PTR __Count$[esp-4]
	test	ecx, ecx
	jbe	SHORT $LN4@Uninit_fil
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	eax, DWORD PTR __First$[esp-4]
	push	esi
$LL6@Uninit_fil:

; 404  : 		_Al.construct(_First, _Val);

	test	eax, eax
	je	SHORT $LN5@Uninit_fil
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
$LN5@Uninit_fil:
	dec	ecx
	add	eax, 4
	test	ecx, ecx
	ja	SHORT $LL6@Uninit_fil
	pop	esi
$LN4@Uninit_fil:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)
; 407  : 		_Al.destroy(_Next);
; 408  : 	_RERAISE;
; 409  : 	_CATCH_END
; 410  : 	}

	ret	0
??$_Uninit_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	?Write@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z ; CvDllNetLoadGameInfo::Write
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllnetloadgameinfo.cpp
;	COMDAT ?Write@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?Write@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z PROC ; CvDllNetLoadGameInfo::Write, COMDAT

; 83   : 	kStream << m_slotStatus;

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR _kStream$[esp-4]
	add	eax, 4
	push	eax
	push	ecx
	call	??$?6W4SlotStatus@@@@YAAAVFDataStream@@AAV0@ABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ; operator<<<enum SlotStatus>
	add	esp, 8

; 84   : 	return true;

	mov	al, 1

; 85   : }

	ret	8
?Write@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z ENDP ; CvDllNetLoadGameInfo::Write
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE_NI@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Buy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Buy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE_NI@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	esi

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1104 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy
	pop	edi

; 1105 : 			return (false);

	xor	al, al
	pop	esi

; 1115 : 		}

	ret	4
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	cmp	edi, 1073741823				; 3fffffffH
	jbe	SHORT $LN2@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Xlen
$LN16@Buy:
$LN2@Buy:

; 1108 : 		else
; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@W4SlotStatus@@@std@@YAPAW4SlotStatus@@IPAW41@@Z ; std::_Allocate<enum SlotStatus>
	mov	DWORD PTR [esi+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	DWORD PTR [esi+8], eax
	add	esp, 8

; 1112 : 			_Myend = _Myfirst + _Capacity;

	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [esi+12], eax
	pop	edi

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
	pop	esi

; 1115 : 		}

	ret	4
$LN15@Buy:
?_Buy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@0AAV?$allocator@W4SlotStatus@@@0@@Z ; std::_Destroy_range<std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@0AAV?$allocator@W4SlotStatus@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@0AAV?$allocator@W4SlotStatus@@@0@@Z PROC ; std::_Destroy_range<std::allocator<enum SlotStatus> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@0AAV?$allocator@W4SlotStatus@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >, COMDAT

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;
; 128  : 
; 129  : 	_TRY_BEGIN
; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	ecx, edx
	je	SHORT $LN4@Uninit_cop
	push	esi
$LL6@Uninit_cop:

; 131  : 		_Al.construct(_Dest, *_First);

	test	eax, eax
	je	SHORT $LN5@Uninit_cop
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
$LN5@Uninit_cop:
	add	ecx, 4
	add	eax, 4
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_cop
	pop	esi
$LN4@Uninit_cop:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)
; 134  : 		_Al.destroy(_Next);
; 135  : 	_RERAISE;
; 136  : 	_CATCH_END
; 137  : 	return (_Dest);
; 138  : 	}

	ret	0
??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@std@@@Z ; stdext::unchecked_uninitialized_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
;	COMDAT ??$unchecked_uninitialized_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@std@@@Z
_TEXT	SEGMENT
$T221097 = -4						; size = 1
__Cat$221101 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >, COMDAT

; 940  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ecx

; 941  : 	_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 942  : 		_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T221097[esp+4], 0
	mov	eax, DWORD PTR $T221097[esp+4]
	mov	ecx, DWORD PTR __Cat$221101[esp+4]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Count$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >

; 943  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??0?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::vector<enum SlotStatus,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??0?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::vector<enum SlotStatus,std::allocator<enum SlotStatus> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	mov	eax, ecx

; 471  : 		_Buy(0);

	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 472  : 		}

	ret	0
??0?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::vector<enum SlotStatus,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXPAW4SlotStatus@@0@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?_Destroy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXPAW4SlotStatus@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXPAW4SlotStatus@@0@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Destroy, COMDAT
; _this$ = ecx

; 1119 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1120 : 		}

	ret	8
?_Destroy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXPAW4SlotStatus@@0@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXXZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Tidy
; Function compile flags: /Ogtpy
;	COMDAT ?_Tidy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXXZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);
; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 1135 : 		}

	ret	0
?_Tidy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXXZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@0@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::erase
; Function compile flags: /Ogtpy
;	COMDAT ?erase@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@0@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::erase, COMDAT
; _this$ = ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);
; 1030 : 		iterator _Last = _Make_iter(_Last_arg);
; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __Last_arg$[esp-4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	push	esi
	mov	esi, DWORD PTR __First_arg$[esp]
	mov	DWORD PTR [eax], esi
	cmp	esi, edx
	je	SHORT $LN1@erase
	push	edi

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	edi, DWORD PTR [ecx+8]
	cmp	edx, edi
	je	SHORT $LN26@erase
	push	ebx
	npad	4
$LL28@erase:
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [esi], ebx
	add	edx, 4
	add	esi, 4
	cmp	edx, edi
	jne	SHORT $LL28@erase
	pop	ebx
$LN26@erase:

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);
; 1049 : 			_Mylast = _Ptr;

	mov	DWORD PTR [ecx+8], esi
	pop	edi
$LN1@erase:
	pop	esi

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);
; 1055 : #endif
; 1056 : 		}

	ret	12					; 0000000cH
?erase@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@0@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::erase
_TEXT	ENDS
PUBLIC	??$unchecked_uninitialized_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$unchecked_uninitialized_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@std@@@Z
_TEXT	SEGMENT
$T221304 = -4						; size = 1
__Cat$221309 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T221304[esp+4], 0
	mov	eax, DWORD PTR $T221304[esp+4]
	mov	ecx, DWORD PTR __Cat$221309[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >

; 823  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$unchecked_uninitialized_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW43@IABW43@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ufill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Ufill@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW43@IABW43@@Z
_TEXT	SEGMENT
$T221321 = -4						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$221325 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW43@IABW43@@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	edx, DWORD PTR __Cat$221325[esp]
	push	esi
	mov	esi, DWORD PTR __Count$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+8]
	mov	BYTE PTR $T221321[esp+12], 0
	mov	eax, DWORD PTR $T221321[esp+12]
	push	eax
	mov	eax, DWORD PTR __Val$[esp+12]
	push	edx
	push	ecx
	push	eax
	push	esi
	push	edi
	call	??$_Uninit_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >
	add	esp, 24					; 00000018H

; 1255 : 		return (_Ptr + _Count);

	lea	eax, DWORD PTR [edi+esi*4]
	pop	edi
	pop	esi

; 1256 : 		}

	pop	ecx
	ret	12					; 0000000cH
?_Ufill@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW43@IABW43@@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ufill
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@U_Undefined_move_tag@3@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@U_Undefined_move_tag@3@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T221339 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$221343 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@U_Undefined_move_tag@3@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus>,std::_Undefined_move_tag>, COMDAT

; 206  : 	{	// move defaults to copy if there is not a more effecient way

	push	ecx

; 207  : 	return (_STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al));

	mov	ecx, DWORD PTR __Cat$221343[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T221339[esp+4], 0
	mov	eax, DWORD PTR $T221339[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >

; 208  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Uninit_move@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@U_Undefined_move_tag@3@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus>,std::_Undefined_move_tag>
_TEXT	ENDS
PUBLIC	??1?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::~vector<enum SlotStatus,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??1?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::~vector<enum SlotStatus,std::allocator<enum SlotStatus> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN6@vector
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN6@vector:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	pop	esi

; 560  : 		}

	ret	0
??1?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::~vector<enum SlotStatus,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEXXZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEXXZ PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::clear, COMDAT
; _this$ = ecx

; 1060 : 		erase(begin(), end());

	mov	edx, DWORD PTR [ecx+8]
	push	esi
	mov	esi, DWORD PTR [ecx+4]
	cmp	esi, edx
	je	SHORT $LN15@clear
	mov	eax, edx
	cmp	edx, edx
	je	SHORT $LN40@clear
	push	edi
$LL42@clear:
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR [esi], edi
	add	eax, 4
	add	esi, 4
	cmp	eax, edx
	jne	SHORT $LL42@clear
	pop	edi
$LN40@clear:
	mov	DWORD PTR [ecx+8], esi
$LN15@clear:
	pop	esi

; 1061 : 		}

	ret	0
?clear@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEXXZ ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::clear
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ucopy<enum SlotStatus *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ucopy@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z
_TEXT	SEGMENT
$T221532 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$221536 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ucopy<enum SlotStatus *>, COMDAT
; _this$ = ecx

; 1138 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1139 : 		{	// copy initializing [_First, _Last), using allocator
; 1140 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1141 : 			_Ptr, this->_Alval));

	mov	edx, DWORD PTR __Cat$221536[esp]
	mov	BYTE PTR $T221532[esp+4], 0
	mov	eax, DWORD PTR $T221532[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	edx
	mov	edx, DWORD PTR __First$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >

; 1142 : 		}

	add	esp, 28					; 0000001cH
	ret	12					; 0000000cH
??$_Ucopy@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ucopy<enum SlotStatus *>
_TEXT	ENDS
PUBLIC	??$_Unchecked_uninitialized_move@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@std@@@Z ; stdext::_Unchecked_uninitialized_move<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Unchecked_uninitialized_move@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@std@@@Z
_TEXT	SEGMENT
$T221568 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$221572 = 16					; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >, COMDAT

; 861  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 862  : 	return (_STD _Uninit_move(_CHECKED_BASE(_First),
; 863  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 864  : 		_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$221572[esp]
	mov	edx, DWORD PTR __Al$[esp]
	mov	BYTE PTR $T221568[esp+4], 0
	mov	eax, DWORD PTR $T221568[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+8]
	push	edx
	mov	edx, DWORD PTR __First$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >

; 865  : 	}

	add	esp, 28					; 0000001cH
	ret	0
??$_Unchecked_uninitialized_move@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@stdext@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >
_TEXT	ENDS
PUBLIC	??_7CvDllNetLoadGameInfo@@6B@			; CvDllNetLoadGameInfo::`vftable'
PUBLIC	??1CvDllNetLoadGameInfo@@QAE@XZ			; CvDllNetLoadGameInfo::~CvDllNetLoadGameInfo
PUBLIC	??_R4CvDllNetLoadGameInfo@@6B@			; CvDllNetLoadGameInfo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCvDllNetLoadGameInfo@@@8		; CvDllNetLoadGameInfo `RTTI Type Descriptor'
PUBLIC	??_R3CvDllNetLoadGameInfo@@8			; CvDllNetLoadGameInfo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CvDllNetLoadGameInfo@@8			; CvDllNetLoadGameInfo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CvDllNetLoadGameInfo@@8		; CvDllNetLoadGameInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Destroy@CvDllNetLoadGameInfo@@EAGXXZ		; CvDllNetLoadGameInfo::Destroy
PUBLIC	?Read@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z ; CvDllNetLoadGameInfo::Read
;	COMDAT ??_R1A@?0A@EA@CvDllNetLoadGameInfo@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
rdata$r	SEGMENT
??_R1A@?0A@EA@CvDllNetLoadGameInfo@@8 DD FLAT:??_R0?AVCvDllNetLoadGameInfo@@@8 ; CvDllNetLoadGameInfo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CvDllNetLoadGameInfo@@8
rdata$r	ENDS
;	COMDAT ??_R2CvDllNetLoadGameInfo@@8
rdata$r	SEGMENT
??_R2CvDllNetLoadGameInfo@@8 DD FLAT:??_R1A@?0A@EA@CvDllNetLoadGameInfo@@8 ; CvDllNetLoadGameInfo::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICvNetLoadGameInfo1@@8
	DD	FLAT:??_R1A@?0A@EA@ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CvDllNetLoadGameInfo@@8
rdata$r	SEGMENT
??_R3CvDllNetLoadGameInfo@@8 DD 00H			; CvDllNetLoadGameInfo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CvDllNetLoadGameInfo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCvDllNetLoadGameInfo@@@8
_DATA	SEGMENT
??_R0?AVCvDllNetLoadGameInfo@@@8 DD FLAT:??_7type_info@@6B@ ; CvDllNetLoadGameInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCvDllNetLoadGameInfo@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CvDllNetLoadGameInfo@@6B@
rdata$r	SEGMENT
??_R4CvDllNetLoadGameInfo@@6B@ DD 00H			; CvDllNetLoadGameInfo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCvDllNetLoadGameInfo@@@8
	DD	FLAT:??_R3CvDllNetLoadGameInfo@@8
rdata$r	ENDS
;	COMDAT ??_7CvDllNetLoadGameInfo@@6B@
CONST	SEGMENT
??_7CvDllNetLoadGameInfo@@6B@ DD FLAT:??_R4CvDllNetLoadGameInfo@@6B@ ; CvDllNetLoadGameInfo::`vftable'
	DD	FLAT:?QueryInterface@CvDllNetLoadGameInfo@@UAGPAXU_GUID@@@Z
	DD	FLAT:?Destroy@CvDllNetLoadGameInfo@@EAGXXZ
	DD	FLAT:?Read@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z
	DD	FLAT:?Write@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z
	DD	FLAT:?Commit@CvDllNetLoadGameInfo@@UAG_NXZ
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllnetloadgameinfo.cpp
CONST	ENDS
;	COMDAT ??1CvDllNetLoadGameInfo@@QAE@XZ
_TEXT	SEGMENT
??1CvDllNetLoadGameInfo@@QAE@XZ PROC			; CvDllNetLoadGameInfo::~CvDllNetLoadGameInfo, COMDAT
; _this$ = ecx

; 20   : {

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CvDllNetLoadGameInfo@@6B@

; 21   : }

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN9@CvDllNetLo
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN9@CvDllNetLo:
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	pop	esi
	ret	0
??1CvDllNetLoadGameInfo@@QAE@XZ ENDP			; CvDllNetLoadGameInfo::~CvDllNetLoadGameInfo
_TEXT	ENDS
PUBLIC	??_GCvDllNetLoadGameInfo@@QAEPAXI@Z		; CvDllNetLoadGameInfo::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCvDllNetLoadGameInfo@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCvDllNetLoadGameInfo@@QAEPAXI@Z PROC		; CvDllNetLoadGameInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CvDllNetLoadGameInfo@@6B@
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN11@scalar@4
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN11@scalar@4:
	test	BYTE PTR ___flags$[esp], 1
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	je	SHORT $LN15@scalar@4
	push	esi
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4
$LN15@scalar@4:
	mov	eax, esi
	pop	esi
	ret	4
??_GCvDllNetLoadGameInfo@@QAEPAXI@Z ENDP		; CvDllNetLoadGameInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??4?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::operator=
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??4?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::operator=, COMDAT
; _this$ = ecx

; 563  : 		{	// assign _Right

	push	esi
	push	edi

; 564  : 		if (this != &_Right)

	mov	edi, DWORD PTR __Right$[esp+4]
	mov	esi, ecx
	cmp	esi, edi
	je	SHORT $LN79@operator@2
	push	ebx

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	ebx, DWORD PTR [edi+8]
	push	ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	eax, ebx
	sub	eax, ebp
	sar	eax, 2
	test	eax, eax
	jne	SHORT $LN8@operator@2

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	cmp	edx, ecx
	je	SHORT $LN80@operator@2
	mov	eax, ecx
	cmp	ecx, ecx
	je	SHORT $LN53@operator@2
	npad	1
$LL55@operator@2:
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR [edx], edi
	add	eax, 4
	add	edx, 4
	cmp	eax, ecx
	jne	SHORT $LL55@operator@2
$LN53@operator@2:

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old
; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	DWORD PTR [esi+8], edx
$LN80@operator@2:
	pop	ebp
	pop	ebx
$LN79@operator@2:
	pop	edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, esi
	pop	esi

; 599  : 		}

	ret	4
$LN8@operator@2:

; 573  : 			else if (_Right.size() <= size())

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi+8]
	sub	edx, ecx
	sar	edx, 2
	cmp	eax, edx
	ja	SHORT $LN6@operator@2

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	push	ecx
	push	ebx
	push	ebp
	call	??$unchecked_copy@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z ; stdext::unchecked_copy<enum SlotStatus *,enum SlotStatus *>

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old
; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	eax, DWORD PTR [edi+8]
	sub	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [esi+4]
	add	esp, 12					; 0000000cH
	pop	ebp
	sar	eax, 2
	pop	ebx
	lea	edx, DWORD PTR [ecx+eax*4]
	pop	edi
	mov	DWORD PTR [esi+8], edx

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, esi
	pop	esi

; 599  : 		}

	ret	4
$LN6@operator@2:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	test	ecx, ecx
	jne	SHORT $LN68@operator@2
	xor	ebx, ebx
	jmp	SHORT $LN69@operator@2
$LN68@operator@2:
	mov	ebx, DWORD PTR [esi+12]
	sub	ebx, ecx
	sar	ebx, 2
$LN69@operator@2:
	cmp	eax, ebx
	ja	SHORT $LN4@operator@2

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	eax, ebp

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	push	ecx
	lea	ebx, DWORD PTR [eax+edx*4]
	push	ebx
	push	eax
	call	??$unchecked_copy@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z ; stdext::unchecked_copy<enum SlotStatus *,enum SlotStatus *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [edi+8]
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	push	ebx
	mov	ecx, esi
	call	??$_Ucopy@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ucopy<enum SlotStatus *>
	pop	ebp
	pop	ebx
	mov	DWORD PTR [esi+8], eax
	pop	edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, esi
	pop	esi

; 599  : 		}

	ret	4
$LN4@operator@2:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	test	ecx, ecx
	je	SHORT $LN72@operator@2

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);
; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN72@operator@2:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	eax, DWORD PTR [edi+8]
	sub	eax, DWORD PTR [edi+4]
	mov	ecx, esi
	sar	eax, 2
	push	eax
	call	?_Buy@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAE_NI@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Buy
	test	al, al
	je	$LN80@operator@2

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [edi+4]
	push	edx
	push	eax
	push	ecx
	mov	ecx, esi
	call	??$_Ucopy@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ucopy<enum SlotStatus *>
	pop	ebp
	pop	ebx
	mov	DWORD PTR [esi+8], eax
	pop	edi

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, esi
	pop	esi

; 599  : 		}

	ret	4
??4?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::operator=
_TEXT	ENDS
PUBLIC	??$_Umove@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Umove<enum SlotStatus *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Umove@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z
_TEXT	SEGMENT
$T221942 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$221945 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Umove<enum SlotStatus *>, COMDAT
; _this$ = ecx

; 1145 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1146 : 		{	// move initializing [_First, _Last), using allocator
; 1147 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1148 : 			_Ptr, this->_Alval));

	mov	edx, DWORD PTR __Cat$221945[esp]
	mov	BYTE PTR $T221942[esp+4], 0
	mov	eax, DWORD PTR $T221942[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	edx
	mov	edx, DWORD PTR __First$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR __Last$[esp+12]
	push	eax
	push	ecx
	push	edx
	call	??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >

; 1149 : 		}

	add	esp, 28					; 0000001cH
	ret	12					; 0000000cH
??$_Umove@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Umove<enum SlotStatus *>
_TEXT	ENDS
PUBLIC	??0CvDllNetLoadGameInfo@@QAE@XZ			; CvDllNetLoadGameInfo::CvDllNetLoadGameInfo
EXTRN	?GetSlotStatus@CvPreGame@@YAABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@XZ:PROC ; CvPreGame::GetSlotStatus
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0CvDllNetLoadGameInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvDllNetLoadGameInfo@@QAE@XZ$0
__ehfuncinfo$??0CvDllNetLoadGameInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvDllNetLoadGameInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllnetloadgameinfo.cpp
xdata$x	ENDS
;	COMDAT ??0CvDllNetLoadGameInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvDllNetLoadGameInfo@@QAE@XZ PROC			; CvDllNetLoadGameInfo::CvDllNetLoadGameInfo, COMDAT
; _this$ = ecx

; 15   : {

	push	-1
	push	__ehhandler$??0CvDllNetLoadGameInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	xor	eax, eax
	push	edi
	lea	edi, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], OFFSET ??_7CvDllNetLoadGameInfo@@6B@
	mov	DWORD PTR _this$[esp+24], esi
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR __$EHRec$[esp+32], eax
	mov	DWORD PTR [esi+20], 1

; 16   : 	m_slotStatus = CvPreGame::GetSlotStatus();

	call	?GetSlotStatus@CvPreGame@@YAABV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@XZ ; CvPreGame::GetSlotStatus
	push	eax
	mov	ecx, edi
	call	??4?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::operator=

; 17   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvDllNetLoadGameInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE@XZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::~vector<enum SlotStatus,std::allocator<enum SlotStatus> >
__ehhandler$??0CvDllNetLoadGameInfo@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0CvDllNetLoadGameInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvDllNetLoadGameInfo@@QAE@XZ ENDP			; CvDllNetLoadGameInfo::CvDllNetLoadGameInfo
PUBLIC	?DecrementReference@CvDllNetLoadGameInfo@@QAEIXZ ; CvDllNetLoadGameInfo::DecrementReference
; Function compile flags: /Ogtpy
;	COMDAT ?DecrementReference@CvDllNetLoadGameInfo@@QAEIXZ
_TEXT	SEGMENT
?DecrementReference@CvDllNetLoadGameInfo@@QAEIXZ PROC	; CvDllNetLoadGameInfo::DecrementReference, COMDAT
; _this$ = ecx

; 42   : {

	push	esi
	mov	esi, ecx

; 43   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 1
	jne	SHORT $LN2@DecrementR

; 44   : 	{
; 45   : 		delete this;

	mov	DWORD PTR [esi], OFFSET ??_7CvDllNetLoadGameInfo@@6B@
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN17@DecrementR
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN17@DecrementR:
	push	esi
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 46   : 		return 0;

	xor	eax, eax
	pop	esi

; 51   : 		return m_uiRefCount;
; 52   : 	}
; 53   : }

	ret	0
$LN2@DecrementR:

; 47   : 	}
; 48   : 	else
; 49   : 	{
; 50   : 		--m_uiRefCount;

	dec	eax
	mov	DWORD PTR [esi+20], eax
	pop	esi

; 51   : 		return m_uiRefCount;
; 52   : 	}
; 53   : }

	ret	0
?DecrementReference@CvDllNetLoadGameInfo@@QAEIXZ ENDP	; CvDllNetLoadGameInfo::DecrementReference
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllNetLoadGameInfo@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllNetLoadGameInfo@@EAGXXZ PROC		; CvDllNetLoadGameInfo::Destroy, COMDAT

; 61   : {

	push	esi

; 62   : 	DecrementReference();

	mov	esi, DWORD PTR _this$[esp]
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 1
	jne	SHORT $LN4@Destroy
	mov	DWORD PTR [esi], OFFSET ??_7CvDllNetLoadGameInfo@@6B@
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN19@Destroy
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN19@Destroy:
	push	esi
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4
	pop	esi

; 63   : }

	ret	4

; 62   : 	DecrementReference();

$LN4@Destroy:
	dec	eax
	mov	DWORD PTR [esi+20], eax
	pop	esi

; 63   : }

	ret	4
?Destroy@CvDllNetLoadGameInfo@@EAGXXZ ENDP		; CvDllNetLoadGameInfo::Destroy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z$2
__catchsym$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z$0
__unwindtable$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z$5
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z
_TEXT	SEGMENT
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Cat$222445 = 8					; size = 1
__Cat$222373 = 8					; size = 1
__Where$ = 8						; size = 4
__Tmp$219872 = 12					; size = 4
__Tmp$219862 = 12					; size = 4
__Newvec$219847 = 12					; size = 4
__Count$ = 12						; size = 4
tv515 = 16						; size = 4
$T222441 = 16						; size = 1
$T222369 = 16						; size = 1
__Val$ = 16						; size = 4
?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	push	ebx
	push	esi
	mov	esi, ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	edx, DWORD PTR [esi+4]
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	test	edx, edx
	jne	SHORT $LN29@Insert_n
	xor	ecx, ecx
	jmp	SHORT $LN30@Insert_n
$LN29@Insert_n:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, edx
	sar	eax, 2
	mov	ecx, eax
$LN30@Insert_n:

; 1162 : 
; 1163 : 		if (_Count == 0)

	mov	edi, DWORD PTR __Count$[ebp]
	test	edi, edi
	je	$LN1@Insert_n

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	ebx, DWORD PTR [esi+8]
	mov	eax, ebx
	sub	eax, edx
	sar	eax, 2
	mov	edx, 1073741823				; 3fffffffH
	sub	edx, eax
	cmp	edx, edi
	jae	SHORT $LN12@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@KAXXZ ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Xlen
$LN87@Insert_n:
$LN12@Insert_n:

; 1167 : 		else if (_Capacity < size() + _Count)

	lea	edx, DWORD PTR [eax+edi]
	cmp	ecx, edx
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, ecx
	shr	eax, 1
	mov	ebx, 1073741823				; 3fffffffH
	sub	ebx, eax
	cmp	ebx, ecx
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR __Capacity$[ebp], 0
	mov	ecx, DWORD PTR __Capacity$[ebp]
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	add	ecx, eax
	mov	DWORD PTR __Capacity$[ebp], ecx
$LN18@Insert_n:

; 1171 : 			if (_Capacity < size() + _Count)

	cmp	ecx, edx
	jae	SHORT $LN9@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	DWORD PTR __Capacity$[ebp], edx
	mov	ecx, edx
$LN9@Insert_n:

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	push	0
	push	ecx
	call	??$_Allocate@W4SlotStatus@@@std@@YAPAW4SlotStatus@@IPAW41@@Z ; std::_Allocate<enum SlotStatus>

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ebx, DWORD PTR __Where$[ebp]
	sub	ebx, DWORD PTR [esi+4]

; 1175 : 			int _Ncopied = 0;
; 1176 : 
; 1177 : 			_TRY_BEGIN
; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Val$[ebp]
	add	esp, 8
	push	ecx
	sar	ebx, 2
	push	edi
	lea	edx, DWORD PTR [eax+ebx*4]
	push	edx
	mov	ecx, esi
	mov	DWORD PTR __Newvec$219847[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	call	?_Ufill@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW43@IABW43@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ufill

; 1179 : 			++_Ncopied;
; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR __Cat$222373[ebp]
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR $T222369[ebp], 0
	mov	ecx, DWORD PTR $T222369[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Newvec$219847[ebp]
	push	edx
	mov	edx, DWORD PTR __Where$[ebp]
	push	esi
	push	ecx
	push	edx
	push	eax
	call	??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >

; 1182 : 			++_Ncopied;
; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR [esi+8]
	add	esp, 24					; 00000018H
	mov	BYTE PTR $T222441[ebp], 0
	mov	edx, DWORD PTR $T222441[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$222445[ebp]
	push	edx
	lea	ecx, DWORD PTR [ebx+edi]
	mov	ebx, DWORD PTR __Newvec$219847[ebp]
	push	esi
	lea	ecx, DWORD PTR [ebx+ecx*4]
	push	ecx
	push	eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Uninit_copy@PAW4SlotStatus@@PAW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAPAW4SlotStatus@@PAW41@00AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum SlotStatus *,enum SlotStatus *,std::allocator<enum SlotStatus> >

; 1192 : 			_CATCH_END
; 1193 : 
; 1194 : 			_Count += size();

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 2
	add	esp, 24					; 00000018H
	add	edi, ecx

; 1195 : 			if (_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN81@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);
; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN81@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	lea	eax, DWORD PTR [ebx+edx*4]

; 1206 : 			_Mylast = _Newvec + _Count;

	lea	ecx, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+4], ebx

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
__catch$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)
; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1188 : 			if (0 < _Ncopied)
; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Newvec$219847[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
__catch$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z$2:

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN88@Insert_n:
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, ebx
	sub	ecx, eax
	sar	ecx, 2
	cmp	ecx, edi
	jae	SHORT $LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$219862[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	lea	ecx, DWORD PTR [edi*4]
	mov	DWORD PTR tv515[ebp], ecx
	add	ecx, eax
	push	ecx
	push	ebx
	push	eax
	mov	ecx, esi
	call	??$_Umove@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Umove<enum SlotStatus *>

; 1215 : 
; 1216 : 			_TRY_BEGIN
; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	eax, DWORD PTR [esi+8]
	mov	ecx, eax
	sub	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR __Tmp$219862[ebp]
	sar	ecx, 2
	push	edx
	sub	edi, ecx
	push	edi
	push	eax
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+12], 2
	call	?_Ufill@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW43@IABW43@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Ufill

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1221 : 			_RERAISE;
; 1222 : 			_CATCH_END
; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR tv515[ebp]
	add	DWORD PTR [esi+8], eax
	mov	esi, DWORD PTR [esi+8]

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	lea	edx, DWORD PTR __Tmp$219862[ebp]
	push	edx
	sub	esi, eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	esi
	push	eax
	call	??$fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z ; std::fill<enum SlotStatus *,enum SlotStatus>
	add	esp, 12					; 0000000cH

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN3@Insert_n:

; 1232 : 			}
; 1233 : 		else
; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;
; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	lea	eax, DWORD PTR [edi*4]
	push	ebx
	mov	edi, ebx
	sub	edi, eax
	push	ebx
	push	edi
	mov	ecx, esi
	mov	DWORD PTR __Tmp$219872[ebp], edx
	mov	DWORD PTR tv515[ebp], eax
	call	??$_Umove@PAW4SlotStatus@@@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEPAW4SlotStatus@@PAW42@00@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Umove<enum SlotStatus *>

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	push	ebx
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR __Where$[ebp]
	push	edi
	push	eax
	call	??$_Unchecked_move_backward@PAW4SlotStatus@@PAW41@@stdext@@YAPAW4SlotStatus@@PAW41@00@Z ; stdext::_Unchecked_move_backward<enum SlotStatus *,enum SlotStatus *>

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR tv515[ebp]
	lea	ecx, DWORD PTR __Tmp$219872[ebp]
	push	ecx
	add	edx, eax
	push	edx
	push	eax
	call	??$fill@PAW4SlotStatus@@W41@@std@@YAXPAW4SlotStatus@@0ABW41@@Z ; std::fill<enum SlotStatus *,enum SlotStatus>
	add	esp, 24					; 00000018H
$LN1@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN86@Insert_n:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Insert_n
PUBLIC	?insert@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@ABW4SlotStatus@@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::insert
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@ABW4SlotStatus@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@ABW4SlotStatus@@@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	esi
	push	edi
	mov	edi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, eax
	test	ecx, -4					; fffffffcH
	mov	ecx, DWORD PTR __Where$[esp+4]
	jne	SHORT $LN3@insert
	xor	esi, esi
	jmp	SHORT $LN4@insert
$LN3@insert:
	mov	esi, ecx
	sub	esi, eax
	sar	esi, 2
$LN4@insert:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[esp+4]
	push	edx
	push	1
	push	ecx
	mov	ecx, edi
	call	?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	eax, DWORD PTR [edi+4]
	lea	ecx, DWORD PTR [eax+esi*4]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	pop	edi
	mov	DWORD PTR [eax], ecx
	pop	esi

; 879  : 		}

	ret	12					; 0000000cH
?insert@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAE?AV?$_Vector_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@V?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@ABW4SlotStatus@@@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::insert
_TEXT	ENDS
PUBLIC	?push_back@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEXABW4SlotStatus@@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEXABW4SlotStatus@@@Z
_TEXT	SEGMENT
$T222570 = -4						; size = 1
__Cat$222574 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEXABW4SlotStatus@@@Z PROC ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ecx
	push	esi
	mov	esi, ecx

; 810  : 		if (size() < capacity())

	mov	ecx, DWORD PTR [esi+4]
	push	edi
	test	ecx, ecx
	jne	SHORT $LN9@push_back
	xor	eax, eax
	jmp	SHORT $LN10@push_back
$LN9@push_back:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, ecx
	sar	eax, 2
$LN10@push_back:
	mov	edi, DWORD PTR [esi+8]
	mov	edx, edi
	sub	edx, ecx
	sar	edx, 2
	cmp	edx, eax
	jae	SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	ecx, DWORD PTR __Cat$222574[esp+8]
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	BYTE PTR $T222570[esp+12], 0
	mov	eax, DWORD PTR $T222570[esp+12]
	push	eax
	push	ecx
	push	esi
	push	edx
	push	1
	push	edi
	call	??$_Uninit_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >
	add	esp, 24					; 00000018H
	add	edi, 4
	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 824  : 		}

	pop	ecx
	ret	4
$LN2@push_back:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR __Val$[esp+8]
	push	eax
	push	1
	push	edi
	mov	ecx, esi
	call	?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Insert_n
	pop	edi
	pop	esi

; 824  : 		}

	pop	ecx
	ret	4
?push_back@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@QAEXABW4SlotStatus@@@Z ENDP ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::push_back
_TEXT	ENDS
PUBLIC	??$SerializeToSequenceContainer@W4SlotStatus@@V?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ; SerializeToSequenceContainer<enum SlotStatus,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > >
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4SlotStatus@@@Z:PROC ; operator>>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fstlcontainerserialization.h
;	COMDAT ??$SerializeToSequenceContainer@W4SlotStatus@@V?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z
_TEXT	SEGMENT
_v$219736 = -12						; size = 4
_i$ = -8						; size = 4
$T223065 = -4						; size = 1
_loadFrom$ = 8						; size = 4
__Cat$223068 = 12					; size = 1
_count$ = 12						; size = 4
_container$ = 12					; size = 4
??$SerializeToSequenceContainer@W4SlotStatus@@V?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z PROC ; SerializeToSequenceContainer<enum SlotStatus,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > >, COMDAT

; 83   : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi

; 84   : 	container.clear();

	mov	esi, DWORD PTR _container$[esp+16]
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	push	edi
	cmp	edx, ecx
	je	SHORT $LN20@SerializeT
	mov	eax, ecx
	cmp	ecx, ecx
	je	SHORT $LN45@SerializeT
	npad	6
$LL47@SerializeT:
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR [edx], edi
	add	eax, 4
	add	edx, 4
	cmp	eax, ecx
	jne	SHORT $LL47@SerializeT
$LN45@SerializeT:
	mov	DWORD PTR [esi+8], edx
$LN20@SerializeT:

; 85   : 	ContainerType::size_type count = 0;
; 86   : 	loadFrom >> count;

	mov	ecx, DWORD PTR _loadFrom$[esp+20]
	lea	eax, DWORD PTR _count$[esp+20]
	xor	ebx, ebx
	push	eax
	mov	DWORD PTR _count$[esp+24], ebx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 87   : 	ContainerType::size_type i = 0;
; 88   : 	for(i = 0; i < count; ++i)

	mov	DWORD PTR _i$[esp+24], ebx
	cmp	DWORD PTR _count$[esp+20], ebx
	jbe	SHORT $LN1@SerializeT
	push	ebp
	mov	ebp, DWORD PTR __Cat$223068[esp+24]
$LL104@SerializeT:

; 89   : 	{
; 90   : 		ElementType v;
; 91   : 		loadFrom >> v;

	mov	edx, DWORD PTR _loadFrom$[esp+24]
	lea	ecx, DWORD PTR _v$219736[esp+28]
	push	ecx
	push	edx
	call	??5@YAAAVFDataStream@@AAV0@AAW4SlotStatus@@@Z ; operator>>

; 92   : 		container.push_back(v);

	mov	ecx, DWORD PTR [esi+4]
	add	esp, 8
	cmp	ecx, ebx
	jne	SHORT $LN60@SerializeT
	xor	eax, eax
	jmp	SHORT $LN61@SerializeT
$LN60@SerializeT:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, ecx
	sar	eax, 2
$LN61@SerializeT:
	mov	edi, DWORD PTR [esi+8]
	mov	edx, edi
	sub	edx, ecx
	sar	edx, 2
	cmp	edx, eax
	jae	SHORT $LN53@SerializeT
	mov	BYTE PTR $T223065[esp+28], bl
	mov	eax, DWORD PTR $T223065[esp+28]
	push	eax
	push	ebp
	push	esi
	lea	ecx, DWORD PTR _v$219736[esp+40]
	push	ecx
	push	1
	push	edi
	call	??$_Uninit_fill_n@PAW4SlotStatus@@IW41@V?$allocator@W4SlotStatus@@@std@@@std@@YAXPAW4SlotStatus@@IABW41@AAV?$allocator@W4SlotStatus@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum SlotStatus *,unsigned int,enum SlotStatus,std::allocator<enum SlotStatus> >
	add	esp, 24					; 00000018H
	add	edi, 4
	mov	DWORD PTR [esi+8], edi
	jmp	SHORT $LN2@SerializeT
$LN53@SerializeT:
	lea	edx, DWORD PTR _v$219736[esp+28]
	push	edx
	push	1
	push	edi
	mov	ecx, esi
	call	?_Insert_n@?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@2@IABW4SlotStatus@@@Z ; std::vector<enum SlotStatus,std::allocator<enum SlotStatus> >::_Insert_n
$LN2@SerializeT:
	mov	eax, DWORD PTR _i$[esp+28]
	inc	eax
	mov	DWORD PTR _i$[esp+28], eax
	cmp	eax, DWORD PTR _count$[esp+24]
	jb	SHORT $LL104@SerializeT
	pop	ebp
$LN1@SerializeT:
	pop	edi
	pop	esi
	pop	ebx

; 93   : 	}
; 94   : }

	add	esp, 12					; 0000000cH
	ret	0
??$SerializeToSequenceContainer@W4SlotStatus@@V?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ENDP ; SerializeToSequenceContainer<enum SlotStatus,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > >
_TEXT	ENDS
PUBLIC	??$?5W4SlotStatus@@@@YAAAVFDataStream@@AAV0@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ; operator>><enum SlotStatus>
; Function compile flags: /Ogtpy
;	COMDAT ??$?5W4SlotStatus@@@@YAAAVFDataStream@@AAV0@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??$?5W4SlotStatus@@@@YAAAVFDataStream@@AAV0@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z PROC ; operator>><enum SlotStatus>, COMDAT

; 226  : 	// The functor needs to be instantiated to properly resize the container based 
; 227  : 	// on how many elements the stream says it should have before passing it along
; 228  : 	// to std::for_each
; 229  : 	SerializeToSequenceContainer<ElementType, std::vector<ElementType> >(loadFrom, writeTo);

	mov	eax, DWORD PTR _writeTo$[esp-4]
	push	esi
	mov	esi, DWORD PTR _loadFrom$[esp]
	push	eax
	push	esi
	call	??$SerializeToSequenceContainer@W4SlotStatus@@V?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ; SerializeToSequenceContainer<enum SlotStatus,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > >
	add	esp, 8

; 230  : 
; 231  : 	//std::for_each(writeTo.begin(), writeTo.end(), func);
; 232  : 	return loadFrom;

	mov	eax, esi
	pop	esi

; 233  : }

	ret	0
??$?5W4SlotStatus@@@@YAAAVFDataStream@@AAV0@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ENDP ; operator>><enum SlotStatus>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllnetloadgameinfo.cpp
_TEXT	ENDS
;	COMDAT ?Read@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_kStream$ = 12						; size = 4
?Read@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z PROC ; CvDllNetLoadGameInfo::Read, COMDAT

; 77   : 	kStream >> m_slotStatus;

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR _kStream$[esp-4]
	add	eax, 4
	push	eax
	push	ecx
	call	??$SerializeToSequenceContainer@W4SlotStatus@@V?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@@YAXAAVFDataStream@@AAV?$vector@W4SlotStatus@@V?$allocator@W4SlotStatus@@@std@@@std@@@Z ; SerializeToSequenceContainer<enum SlotStatus,std::vector<enum SlotStatus,std::allocator<enum SlotStatus> > >
	add	esp, 8

; 78   : 	return true;

	mov	al, 1

; 79   : }

	ret	8
?Read@CvDllNetLoadGameInfo@@UAG_NAAVFDataStream@@@Z ENDP ; CvDllNetLoadGameInfo::Read
_TEXT	ENDS
END
