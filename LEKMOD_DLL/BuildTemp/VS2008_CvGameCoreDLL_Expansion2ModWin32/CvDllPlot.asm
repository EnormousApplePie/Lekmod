; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Documents\GitHub\Lekmod\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllPlot.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:$SG217780
_DATA	ENDS
CONST	SEGMENT
$SG217780 DB	'1.0.0', 00H
	ORG $+2
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvPlot1 DD 0611993fcH
	DW	02a77H
	DW	044eeH
	DB	082H
	DB	0afH
	DB	028H
	DB	0aeH
	DB	038H
	DB	038H
	DB	08H
	DB	03H
CONST	ENDS
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0ICvUnknown@@QAE@XZ				; ICvUnknown::ICvUnknown
PUBLIC	??_R4ICvUnknown@@6B@				; ICvUnknown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVICvUnknown@@@8				; ICvUnknown `RTTI Type Descriptor'
PUBLIC	??_R3ICvUnknown@@8				; ICvUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICvUnknown@@8				; ICvUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICvUnknown@@8			; ICvUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__purecall:PROC
;	COMDAT ??_R1A@?0A@EA@ICvUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICvUnknown@@8 DD FLAT:??_R0?AVICvUnknown@@@8 ; ICvUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICvUnknown@@8
rdata$r	SEGMENT
??_R2ICvUnknown@@8 DD FLAT:??_R1A@?0A@EA@ICvUnknown@@8	; ICvUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ICvUnknown@@8
rdata$r	SEGMENT
??_R3ICvUnknown@@8 DD 00H				; ICvUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVICvUnknown@@@8
_DATA	SEGMENT
??_R0?AVICvUnknown@@@8 DD FLAT:??_7type_info@@6B@	; ICvUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVICvUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R4ICvUnknown@@6B@
rdata$r	SEGMENT
??_R4ICvUnknown@@6B@ DD 00H				; ICvUnknown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVICvUnknown@@@8
	DD	FLAT:??_R3ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:??_R4ICvUnknown@@6B@	; ICvUnknown::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ICvUnknown@@QAE@XZ
_TEXT	SEGMENT
??0ICvUnknown@@QAE@XZ PROC				; ICvUnknown::ICvUnknown, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	ret	0
??0ICvUnknown@@QAE@XZ ENDP				; ICvUnknown::ICvUnknown
_TEXT	ENDS
PUBLIC	??_7CvDllPlot@@6B@				; CvDllPlot::`vftable'
PUBLIC	??1CvDllPlot@@QAE@XZ				; CvDllPlot::~CvDllPlot
PUBLIC	??_R4CvDllPlot@@6B@				; CvDllPlot::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCvDllPlot@@@8				; CvDllPlot `RTTI Type Descriptor'
PUBLIC	??_R3CvDllPlot@@8				; CvDllPlot::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CvDllPlot@@8				; CvDllPlot::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CvDllPlot@@8			; CvDllPlot::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICvPlot1@@8			; ICvPlot1::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVICvPlot1@@@8				; ICvPlot1 `RTTI Type Descriptor'
PUBLIC	??_R3ICvPlot1@@8				; ICvPlot1::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICvPlot1@@8				; ICvPlot1::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CvDllPlot@@UAGPAXU_GUID@@@Z	; CvDllPlot::QueryInterface
PUBLIC	?Destroy@CvDllPlot@@EAGXXZ			; CvDllPlot::Destroy
PUBLIC	?GetTeam@CvDllPlot@@UBG?AW4TeamTypes@@XZ	; CvDllPlot::GetTeam
PUBLIC	?GetActiveFogOfWarMode@CvDllPlot@@UBG?AW4FogOfWarModeTypes@@XZ ; CvDllPlot::GetActiveFogOfWarMode
PUBLIC	?UpdateCenterUnit@CvDllPlot@@UAGXXZ		; CvDllPlot::UpdateCenterUnit
PUBLIC	?IsAdjacent@CvDllPlot@@UBG_NPAVICvPlot1@@@Z	; CvDllPlot::IsAdjacent
PUBLIC	?IsRiver@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsRiver
PUBLIC	?GetNeighboringPlot@CvDllPlot@@UBGPAVICvPlot1@@W4DirectionTypes@@@Z ; CvDllPlot::GetNeighboringPlot
PUBLIC	?GetBuildTime@CvDllPlot@@UBGHW4BuildTypes@@W4PlayerTypes@@@Z ; CvDllPlot::GetBuildTime
PUBLIC	?IsVisible@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z	; CvDllPlot::IsVisible
PUBLIC	?IsCity@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsCity
PUBLIC	?IsEnemyCity@CvDllPlot@@UBG_NPAVICvUnit1@@@Z	; CvDllPlot::IsEnemyCity
PUBLIC	?IsFighting@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsFighting
PUBLIC	?IsTradeRoute@CvDllPlot@@UBG_NW4PlayerTypes@@@Z	; CvDllPlot::IsTradeRoute
PUBLIC	?IsImpassable@CvDllPlot@@UBG_NXZ		; CvDllPlot::IsImpassable
PUBLIC	?GetPosition@CvDllPlot@@UBGXAAH0@Z		; CvDllPlot::GetPosition
PUBLIC	?IsNEOfRiver@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsNEOfRiver
PUBLIC	?IsWOfRiver@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsWOfRiver
PUBLIC	?IsNWOfRiver@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsNWOfRiver
PUBLIC	?GetRiverEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ ; CvDllPlot::GetRiverEFlowDirection
PUBLIC	?GetRiverSEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ ; CvDllPlot::GetRiverSEFlowDirection
PUBLIC	?GetRiverSWFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ ; CvDllPlot::GetRiverSWFlowDirection
PUBLIC	?GetOwner@CvDllPlot@@UBG?AW4PlayerTypes@@XZ	; CvDllPlot::GetOwner
PUBLIC	?GetPlotType@CvDllPlot@@UBG?AW4PlotTypes@@XZ	; CvDllPlot::GetPlotType
PUBLIC	?IsWater@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsWater
PUBLIC	?IsHills@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsHills
PUBLIC	?IsOpenGround@CvDllPlot@@UBG_NXZ		; CvDllPlot::IsOpenGround
PUBLIC	?IsMountain@CvDllPlot@@UBG_NXZ			; CvDllPlot::IsMountain
PUBLIC	?GetTerrainType@CvDllPlot@@UBG?AW4TerrainTypes@@XZ ; CvDllPlot::GetTerrainType
PUBLIC	?GetFeatureType@CvDllPlot@@UBG?AW4FeatureTypes@@XZ ; CvDllPlot::GetFeatureType
PUBLIC	?GetResourceType@CvDllPlot@@UBG?AW4ResourceTypes@@W4TeamTypes@@@Z ; CvDllPlot::GetResourceType
PUBLIC	?GetNumResource@CvDllPlot@@UBGHXZ		; CvDllPlot::GetNumResource
PUBLIC	?GetImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@XZ ; CvDllPlot::GetImprovementType
PUBLIC	?IsImprovementPillaged@CvDllPlot@@UBG_NXZ	; CvDllPlot::IsImprovementPillaged
PUBLIC	?GetWorldAnchor@CvDllPlot@@UBG?AW4GenericWorldAnchorTypes@@XZ ; CvDllPlot::GetWorldAnchor
PUBLIC	?GetWorldAnchorData@CvDllPlot@@UBGHXZ		; CvDllPlot::GetWorldAnchorData
PUBLIC	?GetRouteType@CvDllPlot@@UBG?AW4RouteTypes@@XZ	; CvDllPlot::GetRouteType
PUBLIC	?IsRoutePillaged@CvDllPlot@@UBG_NXZ		; CvDllPlot::IsRoutePillaged
PUBLIC	?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ	; CvDllPlot::GetPlotCity
PUBLIC	?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ	; CvDllPlot::GetWorkingCity
PUBLIC	?IsRevealed@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z	; CvDllPlot::IsRevealed
PUBLIC	?GetRevealedImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@W4TeamTypes@@_N@Z ; CvDllPlot::GetRevealedImprovementType
PUBLIC	?GetBuildProgress@CvDllPlot@@UBGHW4BuildTypes@@@Z ; CvDllPlot::GetBuildProgress
PUBLIC	?GetAnyBuildProgress@CvDllPlot@@UBG_NXZ		; CvDllPlot::GetAnyBuildProgress
PUBLIC	?UpdateLayout@CvDllPlot@@UAGX_N@Z		; CvDllPlot::UpdateLayout
PUBLIC	?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ	; CvDllPlot::GetCenterUnit
PUBLIC	?GetNumUnits@CvDllPlot@@UBGHXZ			; CvDllPlot::GetNumUnits
PUBLIC	?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z	; CvDllPlot::GetUnitByIndex
PUBLIC	?AddUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z	; CvDllPlot::AddUnit
PUBLIC	?RemoveUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z	; CvDllPlot::RemoveUnit
PUBLIC	?NextUnitNode@CvDllPlot@@UAGPAUIDInfo@@PAU2@@Z	; CvDllPlot::NextUnitNode
PUBLIC	?NextUnitNode@CvDllPlot@@UBGPBUIDInfo@@PBU2@@Z	; CvDllPlot::NextUnitNode
PUBLIC	?HeadUnitNode@CvDllPlot@@UAGPAUIDInfo@@XZ	; CvDllPlot::HeadUnitNode
PUBLIC	?GetPlotIndex@CvDllPlot@@UBGHXZ			; CvDllPlot::GetPlotIndex
PUBLIC	?GetContinentType@CvDllPlot@@UBGDXZ		; CvDllPlot::GetContinentType
PUBLIC	?GetSyncArchive@CvDllPlot@@UAGAAVFAutoArchive@@XZ ; CvDllPlot::GetSyncArchive
;	COMDAT ??_R2ICvPlot1@@8
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllplot.cpp
rdata$r	SEGMENT
??_R2ICvPlot1@@8 DD FLAT:??_R1A@?0A@EA@ICvPlot1@@8	; ICvPlot1::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICvPlot1@@8
rdata$r	SEGMENT
??_R3ICvPlot1@@8 DD 00H					; ICvPlot1::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICvPlot1@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVICvPlot1@@@8
_DATA	SEGMENT
??_R0?AVICvPlot1@@@8 DD FLAT:??_7type_info@@6B@		; ICvPlot1 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVICvPlot1@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICvPlot1@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICvPlot1@@8 DD FLAT:??_R0?AVICvPlot1@@@8	; ICvPlot1::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICvPlot1@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CvDllPlot@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CvDllPlot@@8 DD FLAT:??_R0?AVCvDllPlot@@@8 ; CvDllPlot::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CvDllPlot@@8
rdata$r	ENDS
;	COMDAT ??_R2CvDllPlot@@8
rdata$r	SEGMENT
??_R2CvDllPlot@@8 DD FLAT:??_R1A@?0A@EA@CvDllPlot@@8	; CvDllPlot::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICvPlot1@@8
	DD	FLAT:??_R1A@?0A@EA@ICvUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CvDllPlot@@8
rdata$r	SEGMENT
??_R3CvDllPlot@@8 DD 00H				; CvDllPlot::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CvDllPlot@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCvDllPlot@@@8
_DATA	SEGMENT
??_R0?AVCvDllPlot@@@8 DD FLAT:??_7type_info@@6B@	; CvDllPlot `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCvDllPlot@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CvDllPlot@@6B@
rdata$r	SEGMENT
??_R4CvDllPlot@@6B@ DD 00H				; CvDllPlot::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCvDllPlot@@@8
	DD	FLAT:??_R3CvDllPlot@@8
rdata$r	ENDS
;	COMDAT ??_7CvDllPlot@@6B@
CONST	SEGMENT
??_7CvDllPlot@@6B@ DD FLAT:??_R4CvDllPlot@@6B@		; CvDllPlot::`vftable'
	DD	FLAT:?QueryInterface@CvDllPlot@@UAGPAXU_GUID@@@Z
	DD	FLAT:?Destroy@CvDllPlot@@EAGXXZ
	DD	FLAT:?GetTeam@CvDllPlot@@UBG?AW4TeamTypes@@XZ
	DD	FLAT:?GetActiveFogOfWarMode@CvDllPlot@@UBG?AW4FogOfWarModeTypes@@XZ
	DD	FLAT:?UpdateCenterUnit@CvDllPlot@@UAGXXZ
	DD	FLAT:?IsAdjacent@CvDllPlot@@UBG_NPAVICvPlot1@@@Z
	DD	FLAT:?IsRiver@CvDllPlot@@UBG_NXZ
	DD	FLAT:?GetNeighboringPlot@CvDllPlot@@UBGPAVICvPlot1@@W4DirectionTypes@@@Z
	DD	FLAT:?GetBuildTime@CvDllPlot@@UBGHW4BuildTypes@@W4PlayerTypes@@@Z
	DD	FLAT:?IsVisible@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z
	DD	FLAT:?IsCity@CvDllPlot@@UBG_NXZ
	DD	FLAT:?IsEnemyCity@CvDllPlot@@UBG_NPAVICvUnit1@@@Z
	DD	FLAT:?IsFighting@CvDllPlot@@UBG_NXZ
	DD	FLAT:?IsTradeRoute@CvDllPlot@@UBG_NW4PlayerTypes@@@Z
	DD	FLAT:?IsImpassable@CvDllPlot@@UBG_NXZ
	DD	FLAT:?GetPosition@CvDllPlot@@UBGXAAH0@Z
	DD	FLAT:?IsNEOfRiver@CvDllPlot@@UBG_NXZ
	DD	FLAT:?IsWOfRiver@CvDllPlot@@UBG_NXZ
	DD	FLAT:?IsNWOfRiver@CvDllPlot@@UBG_NXZ
	DD	FLAT:?GetRiverEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ
	DD	FLAT:?GetRiverSEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ
	DD	FLAT:?GetRiverSWFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ
	DD	FLAT:?GetOwner@CvDllPlot@@UBG?AW4PlayerTypes@@XZ
	DD	FLAT:?GetPlotType@CvDllPlot@@UBG?AW4PlotTypes@@XZ
	DD	FLAT:?IsWater@CvDllPlot@@UBG_NXZ
	DD	FLAT:?IsHills@CvDllPlot@@UBG_NXZ
	DD	FLAT:?IsOpenGround@CvDllPlot@@UBG_NXZ
	DD	FLAT:?IsMountain@CvDllPlot@@UBG_NXZ
	DD	FLAT:?GetTerrainType@CvDllPlot@@UBG?AW4TerrainTypes@@XZ
	DD	FLAT:?GetFeatureType@CvDllPlot@@UBG?AW4FeatureTypes@@XZ
	DD	FLAT:?GetResourceType@CvDllPlot@@UBG?AW4ResourceTypes@@W4TeamTypes@@@Z
	DD	FLAT:?GetNumResource@CvDllPlot@@UBGHXZ
	DD	FLAT:?GetImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@XZ
	DD	FLAT:?IsImprovementPillaged@CvDllPlot@@UBG_NXZ
	DD	FLAT:?GetWorldAnchor@CvDllPlot@@UBG?AW4GenericWorldAnchorTypes@@XZ
	DD	FLAT:?GetWorldAnchorData@CvDllPlot@@UBGHXZ
	DD	FLAT:?GetRouteType@CvDllPlot@@UBG?AW4RouteTypes@@XZ
	DD	FLAT:?IsRoutePillaged@CvDllPlot@@UBG_NXZ
	DD	FLAT:?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ
	DD	FLAT:?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ
	DD	FLAT:?IsRevealed@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z
	DD	FLAT:?GetRevealedImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@W4TeamTypes@@_N@Z
	DD	FLAT:?GetBuildProgress@CvDllPlot@@UBGHW4BuildTypes@@@Z
	DD	FLAT:?GetAnyBuildProgress@CvDllPlot@@UBG_NXZ
	DD	FLAT:?UpdateLayout@CvDllPlot@@UAGX_N@Z
	DD	FLAT:?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ
	DD	FLAT:?GetNumUnits@CvDllPlot@@UBGHXZ
	DD	FLAT:?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z
	DD	FLAT:?AddUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z
	DD	FLAT:?RemoveUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z
	DD	FLAT:?NextUnitNode@CvDllPlot@@UAGPAUIDInfo@@PAU2@@Z
	DD	FLAT:?NextUnitNode@CvDllPlot@@UBGPBUIDInfo@@PBU2@@Z
	DD	FLAT:?HeadUnitNode@CvDllPlot@@UAGPAUIDInfo@@XZ
	DD	FLAT:?GetPlotIndex@CvDllPlot@@UBGHXZ
	DD	FLAT:?GetContinentType@CvDllPlot@@UBGDXZ
	DD	FLAT:?GetSyncArchive@CvDllPlot@@UAGAAVFAutoArchive@@XZ
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??1CvDllPlot@@QAE@XZ
_TEXT	SEGMENT
??1CvDllPlot@@QAE@XZ PROC				; CvDllPlot::~CvDllPlot, COMDAT
; _this$ = ecx

; 27   : {

	mov	DWORD PTR [ecx], OFFSET ??_7CvDllPlot@@6B@

; 28   : }

	ret	0
??1CvDllPlot@@QAE@XZ ENDP				; CvDllPlot::~CvDllPlot
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllPlot@@QAEIXZ		; CvDllPlot::IncrementReference
; Function compile flags: /Ogtpy
;	COMDAT ?IncrementReference@CvDllPlot@@QAEIXZ
_TEXT	SEGMENT
?IncrementReference@CvDllPlot@@QAEIXZ PROC		; CvDllPlot::IncrementReference, COMDAT
; _this$ = ecx

; 44   : 	++m_uiRefCount;

	inc	DWORD PTR [ecx+4]

; 45   : 	return m_uiRefCount;

	mov	eax, DWORD PTR [ecx+4]

; 46   : }

	ret	0
?IncrementReference@CvDllPlot@@QAEIXZ ENDP		; CvDllPlot::IncrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllPlot@@QAEIXZ		; CvDllPlot::GetReferenceCount
; Function compile flags: /Ogtpy
;	COMDAT ?GetReferenceCount@CvDllPlot@@QAEIXZ
_TEXT	SEGMENT
?GetReferenceCount@CvDllPlot@@QAEIXZ PROC		; CvDllPlot::GetReferenceCount, COMDAT
; _this$ = ecx

; 64   : 	return m_uiRefCount;

	mov	eax, DWORD PTR [ecx+4]

; 65   : }

	ret	0
?GetReferenceCount@CvDllPlot@@QAEIXZ ENDP		; CvDllPlot::GetReferenceCount
_TEXT	ENDS
PUBLIC	??3CvDllPlot@@SAXPAX@Z				; CvDllPlot::operator delete
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Ogtpy
;	COMDAT ??3CvDllPlot@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllPlot@@SAXPAX@Z PROC				; CvDllPlot::operator delete, COMDAT

; 74   : 	CvDllGameContext::Free(p);

	jmp	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
??3CvDllPlot@@SAXPAX@Z ENDP				; CvDllPlot::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllPlot@@SAPAXI@Z				; CvDllPlot::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Ogtpy
;	COMDAT ??2CvDllPlot@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllPlot@@SAPAXI@Z PROC				; CvDllPlot::operator new, COMDAT

; 79   : 	return CvDllGameContext::Allocate(bytes);

	jmp	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
??2CvDllPlot@@SAPAXI@Z ENDP				; CvDllPlot::operator new
_TEXT	ENDS
PUBLIC	?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ	; CvDllPlot::GetInstance
; Function compile flags: /Ogtpy
;	COMDAT ?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ
_TEXT	SEGMENT
?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ PROC		; CvDllPlot::GetInstance, COMDAT
; _this$ = ecx

; 84   : 	return m_pPlot;

	mov	eax, DWORD PTR [ecx+8]

; 85   : }

	ret	0
?GetInstance@CvDllPlot@@QAEPAVCvPlot@@XZ ENDP		; CvDllPlot::GetInstance
_TEXT	ENDS
EXTRN	?GetActiveFogOfWarMode@CvPlot@@QBE?AW4FogOfWarModeTypes@@XZ:PROC ; CvPlot::GetActiveFogOfWarMode
; Function compile flags: /Ogtpy
;	COMDAT ?GetActiveFogOfWarMode@CvDllPlot@@UBG?AW4FogOfWarModeTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetActiveFogOfWarMode@CvDllPlot@@UBG?AW4FogOfWarModeTypes@@XZ PROC ; CvDllPlot::GetActiveFogOfWarMode, COMDAT

; 94   : 	return m_pPlot->GetActiveFogOfWarMode();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetActiveFogOfWarMode@CvPlot@@QBE?AW4FogOfWarModeTypes@@XZ ; CvPlot::GetActiveFogOfWarMode

; 95   : }

	ret	4
?GetActiveFogOfWarMode@CvDllPlot@@UBG?AW4FogOfWarModeTypes@@XZ ENDP ; CvDllPlot::GetActiveFogOfWarMode
_TEXT	ENDS
EXTRN	?updateCenterUnit@CvPlot@@QAEXXZ:PROC		; CvPlot::updateCenterUnit
; Function compile flags: /Ogtpy
;	COMDAT ?UpdateCenterUnit@CvDllPlot@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?UpdateCenterUnit@CvDllPlot@@UAGXXZ PROC		; CvDllPlot::UpdateCenterUnit, COMDAT

; 99   : 	m_pPlot->updateCenterUnit();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?updateCenterUnit@CvPlot@@QAEXXZ	; CvPlot::updateCenterUnit

; 100  : }

	ret	4
?UpdateCenterUnit@CvDllPlot@@UAGXXZ ENDP		; CvDllPlot::UpdateCenterUnit
_TEXT	ENDS
EXTRN	?isAdjacent@CvPlot@@QBE_NPBV1@@Z:PROC		; CvPlot::isAdjacent
; Function compile flags: /Ogtpy
;	COMDAT ?IsAdjacent@CvDllPlot@@UBG_NPAVICvPlot1@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pPlot$ = 12						; size = 4
?IsAdjacent@CvDllPlot@@UBG_NPAVICvPlot1@@@Z PROC	; CvDllPlot::IsAdjacent, COMDAT

; 104  : 	CvPlot* pkPlot = (pPlot != NULL)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;

	mov	eax, DWORD PTR _pPlot$[esp-4]
	test	eax, eax
	je	SHORT $LN3@IsAdjacent
	mov	eax, DWORD PTR [eax+8]

; 105  : 	return m_pPlot->isAdjacent(pkPlot);

	push	eax
	mov	eax, DWORD PTR _this$[esp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isAdjacent@CvPlot@@QBE_NPBV1@@Z	; CvPlot::isAdjacent

; 106  : }

	ret	8
$LN3@IsAdjacent:

; 104  : 	CvPlot* pkPlot = (pPlot != NULL)? static_cast<CvDllPlot*>(pPlot)->GetInstance() : NULL;

	xor	eax, eax

; 105  : 	return m_pPlot->isAdjacent(pkPlot);

	push	eax
	mov	eax, DWORD PTR _this$[esp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isAdjacent@CvPlot@@QBE_NPBV1@@Z	; CvPlot::isAdjacent

; 106  : }

	ret	8
?IsAdjacent@CvDllPlot@@UBG_NPAVICvPlot1@@@Z ENDP	; CvDllPlot::IsAdjacent
_TEXT	ENDS
EXTRN	?getBuildTime@CvPlot@@QBEHW4BuildTypes@@W4PlayerTypes@@@Z:PROC ; CvPlot::getBuildTime
; Function compile flags: /Ogtpy
;	COMDAT ?GetBuildTime@CvDllPlot@@UBGHW4BuildTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eBuild$ = 12						; size = 4
_ePlayer$ = 16						; size = 4
?GetBuildTime@CvDllPlot@@UBGHW4BuildTypes@@W4PlayerTypes@@@Z PROC ; CvDllPlot::GetBuildTime, COMDAT

; 121  : 	return m_pPlot->getBuildTime(eBuild, ePlayer);

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	mov	ecx, DWORD PTR _eBuild$[esp-4]
	mov	edx, DWORD PTR _this$[esp-4]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [edx+8]
	call	?getBuildTime@CvPlot@@QBEHW4BuildTypes@@W4PlayerTypes@@@Z ; CvPlot::getBuildTime

; 122  : }

	ret	12					; 0000000cH
?GetBuildTime@CvDllPlot@@UBGHW4BuildTypes@@W4PlayerTypes@@@Z ENDP ; CvDllPlot::GetBuildTime
_TEXT	ENDS
EXTRN	?isFighting@CvPlot@@QBE_NXZ:PROC		; CvPlot::isFighting
; Function compile flags: /Ogtpy
;	COMDAT ?IsFighting@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsFighting@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsFighting, COMDAT

; 145  : 	return m_pPlot->isFighting();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?isFighting@CvPlot@@QBE_NXZ		; CvPlot::isFighting

; 146  : }

	ret	4
?IsFighting@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsFighting
_TEXT	ENDS
EXTRN	?IsTradeRoute@CvPlot@@QBE_NW4PlayerTypes@@@Z:PROC ; CvPlot::IsTradeRoute
; Function compile flags: /Ogtpy
;	COMDAT ?IsTradeRoute@CvDllPlot@@UBG_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_ePlayer$ = 12						; size = 4
?IsTradeRoute@CvDllPlot@@UBG_NW4PlayerTypes@@@Z PROC	; CvDllPlot::IsTradeRoute, COMDAT

; 150  : 	return m_pPlot->IsTradeRoute(ePlayer);

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	mov	ecx, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [ecx+8]
	push	eax
	call	?IsTradeRoute@CvPlot@@QBE_NW4PlayerTypes@@@Z ; CvPlot::IsTradeRoute

; 151  : }

	ret	8
?IsTradeRoute@CvDllPlot@@UBG_NW4PlayerTypes@@@Z ENDP	; CvDllPlot::IsTradeRoute
_TEXT	ENDS
PUBLIC	_IsEqualGUID
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v6.0a\include\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

	mov	ecx, DWORD PTR _rguid2$[esp-4]
	mov	edx, DWORD PTR _rguid1$[esp-4]
	mov	eax, 16					; 00000010H
	push	esi
	npad	2
$LL4@IsEqualGUI:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN5@IsEqualGUI
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL4@IsEqualGUI
	xor	eax, eax
	xor	edx, edx
	test	eax, eax
	sete	dl
	pop	esi
	mov	eax, edx

; 162  : }

	ret	0
$LN5@IsEqualGUI:

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

	movzx	eax, BYTE PTR [edx]
	movzx	esi, BYTE PTR [ecx]
	sub	eax, esi
	jne	SHORT $LN7@IsEqualGUI
	movzx	eax, BYTE PTR [edx+1]
	movzx	esi, BYTE PTR [ecx+1]
	sub	eax, esi
	jne	SHORT $LN7@IsEqualGUI
	movzx	eax, BYTE PTR [edx+2]
	movzx	esi, BYTE PTR [ecx+2]
	sub	eax, esi
	jne	SHORT $LN7@IsEqualGUI
	movzx	eax, BYTE PTR [edx+3]
	movzx	ecx, BYTE PTR [ecx+3]
	sub	eax, ecx
$LN7@IsEqualGUI:
	sar	eax, 31					; 0000001fH
	or	eax, 1
	xor	edx, edx
	test	eax, eax
	sete	dl
	pop	esi
	mov	eax, edx

; 162  : }

	ret	0
_IsEqualGUID ENDP
_TEXT	ENDS
EXTRN	?isNEOfRiver@CvPlot@@QBE_NXZ:PROC		; CvPlot::isNEOfRiver
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllplot.cpp
;	COMDAT ?IsNEOfRiver@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsNEOfRiver@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsNEOfRiver, COMDAT

; 166  : 	return m_pPlot->isNEOfRiver();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?isNEOfRiver@CvPlot@@QBE_NXZ		; CvPlot::isNEOfRiver

; 167  : }

	ret	4
?IsNEOfRiver@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsNEOfRiver
_TEXT	ENDS
PUBLIC	_==
; Function compile flags: /Ogtpy
; File c:\program files\microsoft sdks\windows\v6.0a\include\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 194  :     return IsEqualGUID(guidOne,guidOther);

	jmp	_IsEqualGUID
_==	ENDP
_TEXT	ENDS
EXTRN	?isWOfRiver@CvPlot@@QBE_NXZ:PROC		; CvPlot::isWOfRiver
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllplot.cpp
;	COMDAT ?IsWOfRiver@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsWOfRiver@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsWOfRiver, COMDAT

; 171  : 	return m_pPlot->isWOfRiver();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?isWOfRiver@CvPlot@@QBE_NXZ		; CvPlot::isWOfRiver

; 172  : }

	ret	4
?IsWOfRiver@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsWOfRiver
_TEXT	ENDS
EXTRN	?isNWOfRiver@CvPlot@@QBE_NXZ:PROC		; CvPlot::isNWOfRiver
; Function compile flags: /Ogtpy
;	COMDAT ?IsNWOfRiver@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsNWOfRiver@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsNWOfRiver, COMDAT

; 176  : 	return m_pPlot->isNWOfRiver();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?isNWOfRiver@CvPlot@@QBE_NXZ		; CvPlot::isNWOfRiver

; 177  : }

	ret	4
?IsNWOfRiver@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsNWOfRiver
_TEXT	ENDS
EXTRN	?getRiverEFlowDirection@CvPlot@@QBE?AW4FlowDirectionTypes@@XZ:PROC ; CvPlot::getRiverEFlowDirection
; Function compile flags: /Ogtpy
;	COMDAT ?GetRiverEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetRiverEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ PROC ; CvDllPlot::GetRiverEFlowDirection, COMDAT

; 181  : 	return m_pPlot->getRiverEFlowDirection();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getRiverEFlowDirection@CvPlot@@QBE?AW4FlowDirectionTypes@@XZ ; CvPlot::getRiverEFlowDirection

; 182  : }

	ret	4
?GetRiverEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ ENDP ; CvDllPlot::GetRiverEFlowDirection
_TEXT	ENDS
EXTRN	?getRiverSEFlowDirection@CvPlot@@QBE?AW4FlowDirectionTypes@@XZ:PROC ; CvPlot::getRiverSEFlowDirection
; Function compile flags: /Ogtpy
;	COMDAT ?GetRiverSEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetRiverSEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ PROC ; CvDllPlot::GetRiverSEFlowDirection, COMDAT

; 186  : 	return m_pPlot->getRiverSEFlowDirection();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getRiverSEFlowDirection@CvPlot@@QBE?AW4FlowDirectionTypes@@XZ ; CvPlot::getRiverSEFlowDirection

; 187  : }

	ret	4
?GetRiverSEFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ ENDP ; CvDllPlot::GetRiverSEFlowDirection
_TEXT	ENDS
EXTRN	?getRiverSWFlowDirection@CvPlot@@QBE?AW4FlowDirectionTypes@@XZ:PROC ; CvPlot::getRiverSWFlowDirection
; Function compile flags: /Ogtpy
;	COMDAT ?GetRiverSWFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetRiverSWFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ PROC ; CvDllPlot::GetRiverSWFlowDirection, COMDAT

; 191  : 	return m_pPlot->getRiverSWFlowDirection();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getRiverSWFlowDirection@CvPlot@@QBE?AW4FlowDirectionTypes@@XZ ; CvPlot::getRiverSWFlowDirection

; 192  : }

	ret	4
?GetRiverSWFlowDirection@CvDllPlot@@UBG?AW4FlowDirectionTypes@@XZ ENDP ; CvDllPlot::GetRiverSWFlowDirection
_TEXT	ENDS
EXTRN	?getResourceType@CvPlot@@QBE?AW4ResourceTypes@@W4TeamTypes@@@Z:PROC ; CvPlot::getResourceType
; Function compile flags: /Ogtpy
;	COMDAT ?GetResourceType@CvDllPlot@@UBG?AW4ResourceTypes@@W4TeamTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eTeam$ = 12						; size = 4
?GetResourceType@CvDllPlot@@UBG?AW4ResourceTypes@@W4TeamTypes@@@Z PROC ; CvDllPlot::GetResourceType, COMDAT

; 236  : 	return m_pPlot->getResourceType(eTeam);

	mov	eax, DWORD PTR _eTeam$[esp-4]
	mov	ecx, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [ecx+8]
	push	eax
	call	?getResourceType@CvPlot@@QBE?AW4ResourceTypes@@W4TeamTypes@@@Z ; CvPlot::getResourceType

; 237  : }

	ret	8
?GetResourceType@CvDllPlot@@UBG?AW4ResourceTypes@@W4TeamTypes@@@Z ENDP ; CvDllPlot::GetResourceType
_TEXT	ENDS
EXTRN	?getNumResource@CvPlot@@QBEHXZ:PROC		; CvPlot::getNumResource
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumResource@CvDllPlot@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumResource@CvDllPlot@@UBGHXZ PROC			; CvDllPlot::GetNumResource, COMDAT

; 241  : 	return m_pPlot->getNumResource();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getNumResource@CvPlot@@QBEHXZ		; CvPlot::getNumResource

; 242  : }

	ret	4
?GetNumResource@CvDllPlot@@UBGHXZ ENDP			; CvDllPlot::GetNumResource
_TEXT	ENDS
EXTRN	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ:PROC ; CvPlot::getImprovementType
; Function compile flags: /Ogtpy
;	COMDAT ?GetImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@XZ PROC ; CvDllPlot::GetImprovementType, COMDAT

; 246  : 	return m_pPlot->getImprovementType();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType

; 247  : }

	ret	4
?GetImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@XZ ENDP ; CvDllPlot::GetImprovementType
_TEXT	ENDS
EXTRN	?IsImprovementPillaged@CvPlot@@QBE_NXZ:PROC	; CvPlot::IsImprovementPillaged
; Function compile flags: /Ogtpy
;	COMDAT ?IsImprovementPillaged@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsImprovementPillaged@CvDllPlot@@UBG_NXZ PROC		; CvDllPlot::IsImprovementPillaged, COMDAT

; 251  : 	return m_pPlot->IsImprovementPillaged();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?IsImprovementPillaged@CvPlot@@QBE_NXZ	; CvPlot::IsImprovementPillaged

; 252  : }

	ret	4
?IsImprovementPillaged@CvDllPlot@@UBG_NXZ ENDP		; CvDllPlot::IsImprovementPillaged
_TEXT	ENDS
EXTRN	?GetWorldAnchor@CvPlot@@QBE?AW4GenericWorldAnchorTypes@@XZ:PROC ; CvPlot::GetWorldAnchor
; Function compile flags: /Ogtpy
;	COMDAT ?GetWorldAnchor@CvDllPlot@@UBG?AW4GenericWorldAnchorTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetWorldAnchor@CvDllPlot@@UBG?AW4GenericWorldAnchorTypes@@XZ PROC ; CvDllPlot::GetWorldAnchor, COMDAT

; 256  : 	return m_pPlot->GetWorldAnchor();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetWorldAnchor@CvPlot@@QBE?AW4GenericWorldAnchorTypes@@XZ ; CvPlot::GetWorldAnchor

; 257  : }

	ret	4
?GetWorldAnchor@CvDllPlot@@UBG?AW4GenericWorldAnchorTypes@@XZ ENDP ; CvDllPlot::GetWorldAnchor
_TEXT	ENDS
EXTRN	?GetWorldAnchorData@CvPlot@@QBEHXZ:PROC		; CvPlot::GetWorldAnchorData
; Function compile flags: /Ogtpy
;	COMDAT ?GetWorldAnchorData@CvDllPlot@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetWorldAnchorData@CvDllPlot@@UBGHXZ PROC		; CvDllPlot::GetWorldAnchorData, COMDAT

; 261  : 	return m_pPlot->GetWorldAnchorData();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetWorldAnchorData@CvPlot@@QBEHXZ	; CvPlot::GetWorldAnchorData

; 262  : }

	ret	4
?GetWorldAnchorData@CvDllPlot@@UBGHXZ ENDP		; CvDllPlot::GetWorldAnchorData
_TEXT	ENDS
EXTRN	?getRouteType@CvPlot@@QBE?AW4RouteTypes@@XZ:PROC ; CvPlot::getRouteType
; Function compile flags: /Ogtpy
;	COMDAT ?GetRouteType@CvDllPlot@@UBG?AW4RouteTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetRouteType@CvDllPlot@@UBG?AW4RouteTypes@@XZ PROC	; CvDllPlot::GetRouteType, COMDAT

; 266  : 	return m_pPlot->getRouteType();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getRouteType@CvPlot@@QBE?AW4RouteTypes@@XZ ; CvPlot::getRouteType

; 267  : }

	ret	4
?GetRouteType@CvDllPlot@@UBG?AW4RouteTypes@@XZ ENDP	; CvDllPlot::GetRouteType
_TEXT	ENDS
EXTRN	?IsRoutePillaged@CvPlot@@QBE_NXZ:PROC		; CvPlot::IsRoutePillaged
; Function compile flags: /Ogtpy
;	COMDAT ?IsRoutePillaged@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsRoutePillaged@CvDllPlot@@UBG_NXZ PROC		; CvDllPlot::IsRoutePillaged, COMDAT

; 271  : 	return m_pPlot->IsRoutePillaged();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?IsRoutePillaged@CvPlot@@QBE_NXZ	; CvPlot::IsRoutePillaged

; 272  : }

	ret	4
?IsRoutePillaged@CvDllPlot@@UBG_NXZ ENDP		; CvDllPlot::IsRoutePillaged
_TEXT	ENDS
EXTRN	??3CvDllCity@@SAXPAX@Z:PROC			; CvDllCity::operator delete
EXTRN	??0CvDllCity@@QAE@PAVCvCity@@@Z:PROC		; CvDllCity::CvDllCity
EXTRN	??2CvDllCity@@SAPAXI@Z:PROC			; CvDllCity::operator new
EXTRN	?getWorkingCity@CvPlot@@QBEPAVCvCity@@XZ:PROC	; CvPlot::getWorkingCity
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ$0
__ehfuncinfo$?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T219630 = 8						; size = 4
_this$ = 8						; size = 4
?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ PROC	; CvDllPlot::GetWorkingCity, COMDAT

; 281  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 282  : 	CvCity* pkCity = m_pPlot->getWorkingCity();

	mov	eax, DWORD PTR _this$[esp+8]
	mov	ecx, DWORD PTR [eax+8]
	push	esi
	call	?getWorkingCity@CvPlot@@QBEPAVCvCity@@XZ ; CvPlot::getWorkingCity
	mov	esi, eax

; 283  : 	return (NULL != pkCity)? new CvDllCity(pkCity) : NULL;

	test	esi, esi
	je	SHORT $LN5@GetWorking
	push	12					; 0000000cH
	call	??2CvDllCity@@SAPAXI@Z			; CvDllCity::operator new
	add	esp, 4
	mov	DWORD PTR $T219630[esp+12], eax
	mov	DWORD PTR __$EHRec$[esp+24], 0
	test	eax, eax
	je	SHORT $LN5@GetWorking
	push	esi
	mov	ecx, eax
	call	??0CvDllCity@@QAE@PAVCvCity@@@Z		; CvDllCity::CvDllCity

; 284  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
$LN5@GetWorking:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	xor	eax, eax
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ$0:
	mov	eax, DWORD PTR $T219630[ebp-4]
	push	eax
	call	??3CvDllCity@@SAXPAX@Z			; CvDllCity::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ:
	mov	eax, OFFSET __ehfuncinfo$?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetWorkingCity@CvDllPlot@@UBGPAVICvCity1@@XZ ENDP	; CvDllPlot::GetWorkingCity
EXTRN	?getRevealedImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@W4TeamTypes@@_N@Z:PROC ; CvPlot::getRevealedImprovementType
; Function compile flags: /Ogtpy
;	COMDAT ?GetRevealedImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@W4TeamTypes@@_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eTeam$ = 12						; size = 4
_bDebug$ = 16						; size = 1
?GetRevealedImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@W4TeamTypes@@_N@Z PROC ; CvDllPlot::GetRevealedImprovementType, COMDAT

; 293  : 	return m_pPlot->getRevealedImprovementType(eTeam, bDebug);

	mov	eax, DWORD PTR _bDebug$[esp-4]
	mov	ecx, DWORD PTR _eTeam$[esp-4]
	mov	edx, DWORD PTR _this$[esp-4]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [edx+8]
	call	?getRevealedImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@W4TeamTypes@@_N@Z ; CvPlot::getRevealedImprovementType

; 294  : }

	ret	12					; 0000000cH
?GetRevealedImprovementType@CvDllPlot@@UBG?AW4ImprovementTypes@@W4TeamTypes@@_N@Z ENDP ; CvDllPlot::GetRevealedImprovementType
_TEXT	ENDS
EXTRN	?getBuildProgress@CvPlot@@QBEHW4BuildTypes@@@Z:PROC ; CvPlot::getBuildProgress
; Function compile flags: /Ogtpy
;	COMDAT ?GetBuildProgress@CvDllPlot@@UBGHW4BuildTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eBuild$ = 12						; size = 4
?GetBuildProgress@CvDllPlot@@UBGHW4BuildTypes@@@Z PROC	; CvDllPlot::GetBuildProgress, COMDAT

; 298  : 	return m_pPlot->getBuildProgress(eBuild);

	mov	eax, DWORD PTR _eBuild$[esp-4]
	mov	ecx, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [ecx+8]
	push	eax
	call	?getBuildProgress@CvPlot@@QBEHW4BuildTypes@@@Z ; CvPlot::getBuildProgress

; 299  : }

	ret	8
?GetBuildProgress@CvDllPlot@@UBGHW4BuildTypes@@@Z ENDP	; CvDllPlot::GetBuildProgress
_TEXT	ENDS
EXTRN	?getAnyBuildProgress@CvPlot@@QBE_NXZ:PROC	; CvPlot::getAnyBuildProgress
; Function compile flags: /Ogtpy
;	COMDAT ?GetAnyBuildProgress@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetAnyBuildProgress@CvDllPlot@@UBG_NXZ PROC		; CvDllPlot::GetAnyBuildProgress, COMDAT

; 303  : 	return m_pPlot->getAnyBuildProgress();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getAnyBuildProgress@CvPlot@@QBE_NXZ	; CvPlot::getAnyBuildProgress

; 304  : }

	ret	4
?GetAnyBuildProgress@CvDllPlot@@UBG_NXZ ENDP		; CvDllPlot::GetAnyBuildProgress
_TEXT	ENDS
EXTRN	?updateLayout@CvPlot@@QAEX_N@Z:PROC		; CvPlot::updateLayout
; Function compile flags: /Ogtpy
;	COMDAT ?UpdateLayout@CvDllPlot@@UAGX_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_bDebug$ = 12						; size = 1
?UpdateLayout@CvDllPlot@@UAGX_N@Z PROC			; CvDllPlot::UpdateLayout, COMDAT

; 308  : 	return m_pPlot->updateLayout(bDebug);

	mov	eax, DWORD PTR _bDebug$[esp-4]
	mov	ecx, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [ecx+8]
	push	eax
	call	?updateLayout@CvPlot@@QAEX_N@Z		; CvPlot::updateLayout

; 309  : }

	ret	8
?UpdateLayout@CvDllPlot@@UAGX_N@Z ENDP			; CvDllPlot::UpdateLayout
_TEXT	ENDS
EXTRN	?getNumUnits@CvPlot@@QBEHXZ:PROC		; CvPlot::getNumUnits
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumUnits@CvDllPlot@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetNumUnits@CvDllPlot@@UBGHXZ PROC			; CvDllPlot::GetNumUnits, COMDAT

; 319  : #ifdef AUI_WARNING_FIXES
; 320  : 	return static_cast<const int>(m_pPlot->getNumUnits());
; 321  : #else
; 322  : 	return m_pPlot->getNumUnits();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getNumUnits@CvPlot@@QBEHXZ		; CvPlot::getNumUnits

; 323  : #endif
; 324  : }

	ret	4
?GetNumUnits@CvDllPlot@@UBGHXZ ENDP			; CvDllPlot::GetNumUnits
_TEXT	ENDS
EXTRN	??3CvDllUnit@@SAXPAX@Z:PROC			; CvDllUnit::operator delete
EXTRN	??0CvDllUnit@@QAE@PAVCvUnit@@@Z:PROC		; CvDllUnit::CvDllUnit
EXTRN	??2CvDllUnit@@SAPAXI@Z:PROC			; CvDllUnit::operator new
EXTRN	?getUnitByIndex@CvPlot@@QBEPAVCvUnit@@H@Z:PROC	; CvPlot::getUnitByIndex
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z$0
__ehfuncinfo$?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
$T219664 = 12						; size = 4
_iIndex$ = 12						; size = 4
?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z PROC	; CvDllPlot::GetUnitByIndex, COMDAT

; 327  : {

	mov	eax, DWORD PTR fs:0

; 328  : 	CvUnit* pkUnit = m_pPlot->getUnitByIndex(iIndex);

	mov	ecx, DWORD PTR _this$[esp-4]
	push	-1
	push	__ehhandler$?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	mov	eax, DWORD PTR _iIndex$[esp+8]
	mov	ecx, DWORD PTR [ecx+8]
	push	esi
	push	eax
	call	?getUnitByIndex@CvPlot@@QBEPAVCvUnit@@H@Z ; CvPlot::getUnitByIndex
	mov	esi, eax

; 329  : 	return (NULL != pkUnit)? new CvDllUnit(pkUnit) : NULL;

	test	esi, esi
	je	SHORT $LN5@GetUnitByI
	push	12					; 0000000cH
	call	??2CvDllUnit@@SAPAXI@Z			; CvDllUnit::operator new
	add	esp, 4
	mov	DWORD PTR $T219664[esp+12], eax
	mov	DWORD PTR __$EHRec$[esp+24], 0
	test	eax, eax
	je	SHORT $LN5@GetUnitByI
	push	esi
	mov	ecx, eax
	call	??0CvDllUnit@@QAE@PAVCvUnit@@@Z		; CvDllUnit::CvDllUnit

; 330  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	8
$LN5@GetUnitByI:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	xor	eax, eax
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z$0:
	mov	eax, DWORD PTR $T219664[ebp-4]
	push	eax
	call	??3CvDllUnit@@SAXPAX@Z			; CvDllUnit::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z:
	mov	eax, OFFSET __ehfuncinfo$?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetUnitByIndex@CvDllPlot@@UBGPAVICvUnit1@@H@Z ENDP	; CvDllPlot::GetUnitByIndex
EXTRN	?addUnit@CvPlot@@QAEXPAVCvUnit@@_N@Z:PROC	; CvPlot::addUnit
EXTRN	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ:PROC	; CvDllUnit::GetInstance
; Function compile flags: /Ogtpy
;	COMDAT ?AddUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pUnit$ = 12						; size = 4
_bUpdate$ = 16						; size = 1
?AddUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z PROC		; CvDllPlot::AddUnit, COMDAT

; 334  : 	CvUnit* pkUnit = (NULL != pUnit)? static_cast<CvDllUnit*>(pUnit)->GetInstance() : NULL;

	mov	ecx, DWORD PTR _pUnit$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@AddUnit
	call	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ ; CvDllUnit::GetInstance

; 335  : 	return m_pPlot->addUnit(pkUnit, bUpdate);

	mov	ecx, DWORD PTR _bUpdate$[esp-4]
	mov	edx, DWORD PTR _this$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR [edx+8]
	push	eax
	call	?addUnit@CvPlot@@QAEXPAVCvUnit@@_N@Z	; CvPlot::addUnit

; 336  : }

	ret	12					; 0000000cH
$LN3@AddUnit:

; 335  : 	return m_pPlot->addUnit(pkUnit, bUpdate);

	mov	ecx, DWORD PTR _bUpdate$[esp-4]
	mov	edx, DWORD PTR _this$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR [edx+8]
	xor	eax, eax
	push	eax
	call	?addUnit@CvPlot@@QAEXPAVCvUnit@@_N@Z	; CvPlot::addUnit

; 336  : }

	ret	12					; 0000000cH
?AddUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z ENDP		; CvDllPlot::AddUnit
_TEXT	ENDS
EXTRN	?removeUnit@CvPlot@@QAEXPAVCvUnit@@_N@Z:PROC	; CvPlot::removeUnit
; Function compile flags: /Ogtpy
;	COMDAT ?RemoveUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pUnit$ = 12						; size = 4
_bUpdate$ = 16						; size = 1
?RemoveUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z PROC	; CvDllPlot::RemoveUnit, COMDAT

; 340  : 	CvUnit* pkUnit = (NULL != pUnit)? static_cast<CvDllUnit*>(pUnit)->GetInstance() : NULL;

	mov	ecx, DWORD PTR _pUnit$[esp-4]
	test	ecx, ecx
	je	SHORT $LN3@RemoveUnit
	call	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ ; CvDllUnit::GetInstance

; 341  : 	return m_pPlot->removeUnit(pkUnit, bUpdate);

	mov	ecx, DWORD PTR _bUpdate$[esp-4]
	mov	edx, DWORD PTR _this$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR [edx+8]
	push	eax
	call	?removeUnit@CvPlot@@QAEXPAVCvUnit@@_N@Z	; CvPlot::removeUnit

; 342  : }

	ret	12					; 0000000cH
$LN3@RemoveUnit:

; 341  : 	return m_pPlot->removeUnit(pkUnit, bUpdate);

	mov	ecx, DWORD PTR _bUpdate$[esp-4]
	mov	edx, DWORD PTR _this$[esp-4]
	push	ecx
	mov	ecx, DWORD PTR [edx+8]
	xor	eax, eax
	push	eax
	call	?removeUnit@CvPlot@@QAEXPAVCvUnit@@_N@Z	; CvPlot::removeUnit

; 342  : }

	ret	12					; 0000000cH
?RemoveUnit@CvDllPlot@@UAGXPAVICvUnit1@@_N@Z ENDP	; CvDllPlot::RemoveUnit
_TEXT	ENDS
EXTRN	?nextUnitNode@CvPlot@@QBEPBUIDInfo@@PBU2@@Z:PROC ; CvPlot::nextUnitNode
; Function compile flags: /Ogtpy
;	COMDAT ?NextUnitNode@CvDllPlot@@UBGPBUIDInfo@@PBU2@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pNode$ = 12						; size = 4
?NextUnitNode@CvDllPlot@@UBGPBUIDInfo@@PBU2@@Z PROC	; CvDllPlot::NextUnitNode, COMDAT

; 346  : 	return m_pPlot->nextUnitNode(pNode);

	mov	eax, DWORD PTR _pNode$[esp-4]
	mov	ecx, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [ecx+8]
	push	eax
	call	?nextUnitNode@CvPlot@@QBEPBUIDInfo@@PBU2@@Z ; CvPlot::nextUnitNode

; 347  : }

	ret	8
?NextUnitNode@CvDllPlot@@UBGPBUIDInfo@@PBU2@@Z ENDP	; CvDllPlot::NextUnitNode
_TEXT	ENDS
EXTRN	?nextUnitNode@CvPlot@@QAEPAUIDInfo@@PAU2@@Z:PROC ; CvPlot::nextUnitNode
; Function compile flags: /Ogtpy
;	COMDAT ?NextUnitNode@CvDllPlot@@UAGPAUIDInfo@@PAU2@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pNode$ = 12						; size = 4
?NextUnitNode@CvDllPlot@@UAGPAUIDInfo@@PAU2@@Z PROC	; CvDllPlot::NextUnitNode, COMDAT

; 351  : 	return m_pPlot->nextUnitNode(pNode);

	mov	eax, DWORD PTR _pNode$[esp-4]
	mov	ecx, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [ecx+8]
	push	eax
	call	?nextUnitNode@CvPlot@@QAEPAUIDInfo@@PAU2@@Z ; CvPlot::nextUnitNode

; 352  : }

	ret	8
?NextUnitNode@CvDllPlot@@UAGPAUIDInfo@@PAU2@@Z ENDP	; CvDllPlot::NextUnitNode
_TEXT	ENDS
EXTRN	?headUnitNode@CvPlot@@QAEPAUIDInfo@@XZ:PROC	; CvPlot::headUnitNode
; Function compile flags: /Ogtpy
;	COMDAT ?HeadUnitNode@CvDllPlot@@UAGPAUIDInfo@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?HeadUnitNode@CvDllPlot@@UAGPAUIDInfo@@XZ PROC		; CvDllPlot::HeadUnitNode, COMDAT

; 356  : 	return m_pPlot->headUnitNode();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?headUnitNode@CvPlot@@QAEPAUIDInfo@@XZ	; CvPlot::headUnitNode

; 357  : }

	ret	4
?HeadUnitNode@CvDllPlot@@UAGPAUIDInfo@@XZ ENDP		; CvDllPlot::HeadUnitNode
_TEXT	ENDS
EXTRN	?GetPlotIndex@CvPlot@@QBEHXZ:PROC		; CvPlot::GetPlotIndex
; Function compile flags: /Ogtpy
;	COMDAT ?GetPlotIndex@CvDllPlot@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetPlotIndex@CvDllPlot@@UBGHXZ PROC			; CvDllPlot::GetPlotIndex, COMDAT

; 361  : 	return m_pPlot->GetPlotIndex();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex

; 362  : }

	ret	4
?GetPlotIndex@CvDllPlot@@UBGHXZ ENDP			; CvDllPlot::GetPlotIndex
_TEXT	ENDS
EXTRN	?GetContinentType@CvPlot@@QBEDXZ:PROC		; CvPlot::GetContinentType
; Function compile flags: /Ogtpy
;	COMDAT ?GetContinentType@CvDllPlot@@UBGDXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetContinentType@CvDllPlot@@UBGDXZ PROC		; CvDllPlot::GetContinentType, COMDAT

; 366  : #ifdef AUI_WARNING_FIXES
; 367  : 	return char(m_pPlot->GetContinentType());
; 368  : #else
; 369  : 	return m_pPlot->GetContinentType();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?GetContinentType@CvPlot@@QBEDXZ	; CvPlot::GetContinentType

; 370  : #endif
; 371  : }

	ret	4
?GetContinentType@CvDllPlot@@UBGDXZ ENDP		; CvDllPlot::GetContinentType
_TEXT	ENDS
EXTRN	?getSyncArchive@CvPlot@@QAEAAVFAutoArchive@@XZ:PROC ; CvPlot::getSyncArchive
; Function compile flags: /Ogtpy
;	COMDAT ?GetSyncArchive@CvDllPlot@@UAGAAVFAutoArchive@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetSyncArchive@CvDllPlot@@UAGAAVFAutoArchive@@XZ PROC	; CvDllPlot::GetSyncArchive, COMDAT

; 375  : 	return m_pPlot->getSyncArchive();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	call	?getSyncArchive@CvPlot@@QAEAAVFAutoArchive@@XZ ; CvPlot::getSyncArchive

; 376  : }

	ret	4
?GetSyncArchive@CvDllPlot@@UAGAAVFAutoArchive@@XZ ENDP	; CvDllPlot::GetSyncArchive
_TEXT	ENDS
PUBLIC	?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ ; FObjectHandle<CvUnit>::pointer
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
;	COMDAT ?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ
_TEXT	SEGMENT
?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ PROC ; FObjectHandle<CvUnit>::pointer, COMDAT
; _this$ = ecx

; 78   : 		return m_target;

	mov	eax, DWORD PTR [ecx]

; 79   : 	}

	ret	0
?pointer@?$FObjectHandle@VCvUnit@@@@QAEPAVCvUnit@@XZ ENDP ; FObjectHandle<CvUnit>::pointer
_TEXT	ENDS
PUBLIC	?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget
; Function compile flags: /Ogtpy
;	COMDAT ?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z
_TEXT	SEGMENT
_target$ = 8						; size = 4
?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z PROC ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget, COMDAT
; _this$ = ecx

; 63   : #ifdef TRACK_DESTRUCTION_NOTIFICATION
; 64   : 		m_targets.erase(&target);
; 65   : #endif
; 66   : 	}

	ret	4
?removeTarget@?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@QAEXABV?$FObjectHandle@VCvUnit@@@@@Z ENDP ; DestructionNotification<FObjectHandle<CvUnit> >::removeTarget
_TEXT	ENDS
PUBLIC	?GetInterfaceId@ICvUnknown@@SG?AU_GUID@@XZ	; ICvUnknown::GetInterfaceId
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvdllinterfaces.h
;	COMDAT ?GetInterfaceId@ICvUnknown@@SG?AU_GUID@@XZ
_TEXT	SEGMENT
$T219713 = 8						; size = 4
?GetInterfaceId@ICvUnknown@@SG?AU_GUID@@XZ PROC		; ICvUnknown::GetInterfaceId, COMDAT

; 306  : 	static GUID DLLCALL GetInterfaceId(){ return guidICvUnknown; }

	mov	eax, DWORD PTR $T219713[esp-4]
	mov	ecx, DWORD PTR _guidICvUnknown
	mov	edx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	ret	4
?GetInterfaceId@ICvUnknown@@SG?AU_GUID@@XZ ENDP		; ICvUnknown::GetInterfaceId
_TEXT	ENDS
PUBLIC	?GetInterfaceId@ICvPlot1@@SG?AU_GUID@@XZ	; ICvPlot1::GetInterfaceId
; Function compile flags: /Ogtpy
;	COMDAT ?GetInterfaceId@ICvPlot1@@SG?AU_GUID@@XZ
_TEXT	SEGMENT
$T219717 = 8						; size = 4
?GetInterfaceId@ICvPlot1@@SG?AU_GUID@@XZ PROC		; ICvPlot1::GetInterfaceId, COMDAT

; 1355 : 	static GUID DLLCALL GetInterfaceId() { return guidICvPlot1; }

	mov	eax, DWORD PTR $T219717[esp-4]
	mov	ecx, DWORD PTR _guidICvPlot1
	mov	edx, DWORD PTR _guidICvPlot1+4
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _guidICvPlot1+8
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _guidICvPlot1+12
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	ret	4
?GetInterfaceId@ICvPlot1@@SG?AU_GUID@@XZ ENDP		; ICvPlot1::GetInterfaceId
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	?isCity@CvPlot@@QBE_NXZ				; CvPlot::isCity
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?isCity@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isCity@CvPlot@@QBE_NXZ PROC				; CvPlot::isCity, COMDAT
; _this$ = ecx

; 245  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN1@isCity
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@isCity

; 246  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID)) != NULL;

	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	neg	eax
	sbb	eax, eax
	neg	eax

; 249  : 	}

	ret	0
$LN1@isCity:

; 247  : 
; 248  : 		return false;

	xor	al, al

; 249  : 	}

	ret	0
?isCity@CvPlot@@QBE_NXZ ENDP				; CvPlot::isCity
_TEXT	ENDS
PUBLIC	?getX@CvPlot@@QBEHXZ				; CvPlot::getX
; Function compile flags: /Ogtpy
;	COMDAT ?getX@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getX@CvPlot@@QBEHXZ PROC				; CvPlot::getX, COMDAT
; _this$ = ecx

; 307  : 		return m_iX;

	movsx	eax, WORD PTR [ecx]

; 308  : 	}

	ret	0
?getX@CvPlot@@QBEHXZ ENDP				; CvPlot::getX
_TEXT	ENDS
PUBLIC	?getY@CvPlot@@QBEHXZ				; CvPlot::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getY@CvPlot@@QBEHXZ PROC				; CvPlot::getY, COMDAT
; _this$ = ecx

; 312  : 		return m_iY;

	movsx	eax, WORD PTR [ecx+2]

; 313  : 	}

	ret	0
?getY@CvPlot@@QBEHXZ ENDP				; CvPlot::getY
_TEXT	ENDS
PUBLIC	?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ	; CvPlot::getOwner
; Function compile flags: /Ogtpy
;	COMDAT ?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ PROC		; CvPlot::getOwner, COMDAT
; _this$ = ecx

; 387  : 		return (PlayerTypes)m_eOwner;

	movsx	eax, BYTE PTR [ecx+4]

; 388  : 	}

	ret	0
?getOwner@CvPlot@@QBE?AW4PlayerTypes@@XZ ENDP		; CvPlot::getOwner
_TEXT	ENDS
PUBLIC	?getPlotType@CvPlot@@QBE?AW4PlotTypes@@XZ	; CvPlot::getPlotType
; Function compile flags: /Ogtpy
;	COMDAT ?getPlotType@CvPlot@@QBE?AW4PlotTypes@@XZ
_TEXT	SEGMENT
?getPlotType@CvPlot@@QBE?AW4PlotTypes@@XZ PROC		; CvPlot::getPlotType, COMDAT
; _this$ = ecx

; 405  : 		return (PlotTypes)m_ePlotType;

	movsx	eax, BYTE PTR [ecx+5]

; 406  : 	}

	ret	0
?getPlotType@CvPlot@@QBE?AW4PlotTypes@@XZ ENDP		; CvPlot::getPlotType
_TEXT	ENDS
PUBLIC	?isWater@CvPlot@@QBE_NXZ			; CvPlot::isWater
; Function compile flags: /Ogtpy
;	COMDAT ?isWater@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isWater@CvPlot@@QBE_NXZ PROC				; CvPlot::isWater, COMDAT
; _this$ = ecx

; 409  : 		return (PlotTypes)m_ePlotType == PLOT_OCEAN;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], 3
	sete	al

; 410  : 	};

	ret	0
?isWater@CvPlot@@QBE_NXZ ENDP				; CvPlot::isWater
_TEXT	ENDS
PUBLIC	?isHills@CvPlot@@QBE_NXZ			; CvPlot::isHills
; Function compile flags: /Ogtpy
;	COMDAT ?isHills@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isHills@CvPlot@@QBE_NXZ PROC				; CvPlot::isHills, COMDAT
; _this$ = ecx

; 413  : 		return (PlotTypes)m_ePlotType == PLOT_HILLS;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], 1
	sete	al

; 414  : 	};

	ret	0
?isHills@CvPlot@@QBE_NXZ ENDP				; CvPlot::isHills
_TEXT	ENDS
PUBLIC	?isOpenGround@CvPlot@@QBE_NXZ			; CvPlot::isOpenGround
; Function compile flags: /Ogtpy
;	COMDAT ?isOpenGround@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isOpenGround@CvPlot@@QBE_NXZ PROC			; CvPlot::isOpenGround, COMDAT
; _this$ = ecx

; 417  : 		if((PlotTypes)m_ePlotType == PLOT_HILLS || (PlotTypes)m_ePlotType == PLOT_MOUNTAIN || m_bRoughFeature) return false;

	mov	al, BYTE PTR [ecx+5]
	cmp	al, 1
	je	SHORT $LN1@isOpenGrou
	test	al, al
	je	SHORT $LN1@isOpenGrou
	test	BYTE PTR [ecx+462], 8
	jne	SHORT $LN1@isOpenGrou

; 418  : 		return true;

	mov	al, 1

; 419  : 	}

	ret	0
$LN1@isOpenGrou:

; 417  : 		if((PlotTypes)m_ePlotType == PLOT_HILLS || (PlotTypes)m_ePlotType == PLOT_MOUNTAIN || m_bRoughFeature) return false;

	xor	al, al

; 419  : 	}

	ret	0
?isOpenGround@CvPlot@@QBE_NXZ ENDP			; CvPlot::isOpenGround
_TEXT	ENDS
PUBLIC	?isMountain@CvPlot@@QBE_NXZ			; CvPlot::isMountain
; Function compile flags: /Ogtpy
;	COMDAT ?isMountain@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isMountain@CvPlot@@QBE_NXZ PROC			; CvPlot::isMountain, COMDAT
; _this$ = ecx

; 422  : 		return (PlotTypes)m_ePlotType == PLOT_MOUNTAIN;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], al
	sete	al

; 423  : 	};

	ret	0
?isMountain@CvPlot@@QBE_NXZ ENDP			; CvPlot::isMountain
_TEXT	ENDS
PUBLIC	?isRiver@CvPlot@@QBE_NXZ			; CvPlot::isRiver
; Function compile flags: /Ogtpy
;	COMDAT ?isRiver@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isRiver@CvPlot@@QBE_NXZ PROC				; CvPlot::isRiver, COMDAT
; _this$ = ecx

; 426  : 		return m_iRiverCrossingCount > 0;

	xor	eax, eax
	cmp	BYTE PTR [ecx+457], al
	setg	al

; 427  : 	}

	ret	0
?isRiver@CvPlot@@QBE_NXZ ENDP				; CvPlot::isRiver
_TEXT	ENDS
PUBLIC	?getTerrainType@CvPlot@@QBE?AW4TerrainTypes@@XZ	; CvPlot::getTerrainType
; Function compile flags: /Ogtpy
;	COMDAT ?getTerrainType@CvPlot@@QBE?AW4TerrainTypes@@XZ
_TEXT	SEGMENT
?getTerrainType@CvPlot@@QBE?AW4TerrainTypes@@XZ PROC	; CvPlot::getTerrainType, COMDAT
; _this$ = ecx

; 431  : 		return (TerrainTypes)m_eTerrainType;

	movsx	eax, BYTE PTR [ecx+6]

; 432  : 	}

	ret	0
?getTerrainType@CvPlot@@QBE?AW4TerrainTypes@@XZ ENDP	; CvPlot::getTerrainType
_TEXT	ENDS
PUBLIC	?isImpassable@CvPlot@@QBE_NXZ			; CvPlot::isImpassable
; Function compile flags: /Ogtpy
;	COMDAT ?isImpassable@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isImpassable@CvPlot@@QBE_NXZ PROC			; CvPlot::isImpassable, COMDAT
; _this$ = ecx

; 444  : 		return m_bIsImpassable;

	mov	al, BYTE PTR [ecx+462]
	shr	al, 7

; 445  : 	}

	ret	0
?isImpassable@CvPlot@@QBE_NXZ ENDP			; CvPlot::isImpassable
_TEXT	ENDS
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
; Function compile flags: /Ogtpy
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN1@getPlotCit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 537  : 	}

	ret	0
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax

; 537  : 	}

	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
_TEXT	ENDS
PUBLIC	?getVisibilityCount@CvPlot@@QBEHW4TeamTypes@@@Z	; CvPlot::getVisibilityCount
; Function compile flags: /Ogtpy
;	COMDAT ?getVisibilityCount@CvPlot@@QBEHW4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?getVisibilityCount@CvPlot@@QBEHW4TeamTypes@@@Z PROC	; CvPlot::getVisibilityCount, COMDAT
; _this$ = ecx

; 588  : 		CvAssertMsg(eTeam >= 0, "eTeam is expected to be non-negative (invalid Index)");
; 589  : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is expected to be within maximum bounds (invalid Index)");
; 590  : 
; 591  : 		return m_aiVisibilityCount[eTeam];

	mov	eax, DWORD PTR [ecx+156]
	mov	ecx, DWORD PTR _eTeam$[esp-4]
	movsx	eax, WORD PTR [eax+ecx*2]

; 592  : 	}

	ret	4
?getVisibilityCount@CvPlot@@QBEHW4TeamTypes@@@Z ENDP	; CvPlot::getVisibilityCount
_TEXT	ENDS
PUBLIC	?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z		; CvPlot::PlotBoolField::GetBit
; Function compile flags: /Ogtpy
;	COMDAT ?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z
_TEXT	SEGMENT
_uiEntry$ = 8						; size = 4
?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z PROC		; CvPlot::PlotBoolField::GetBit, COMDAT
; _this$ = ecx

; 767  : 		{

	mov	edx, ecx

; 768  : 			const uint uiOffset = uiEntry/eSize;

	mov	ecx, DWORD PTR _uiEntry$[esp-4]
	push	esi
	mov	eax, ecx
	shr	eax, 5

; 769  : 			return m_dwBits[uiOffset] & 1<<(uiEntry-(eSize*uiOffset));

	mov	esi, eax
	shl	esi, 5
	sub	ecx, esi
	mov	esi, 1
	shl	esi, cl
	test	esi, DWORD PTR [edx+eax*4]
	pop	esi
	setne	al

; 770  : 		}

	ret	4
?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z ENDP		; CvPlot::PlotBoolField::GetBit
_TEXT	ENDS
PUBLIC	??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z PROC ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 771  : 		}

	ret	4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ENDP ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ		; FAutoVariable<char,CvPlot>::operator char const &
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ
_TEXT	SEGMENT
??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ PROC		; FAutoVariable<char,CvPlot>::operator char const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ ENDP		; FAutoVariable<char,CvPlot>::operator char const &
_TEXT	ENDS
PUBLIC	??_7ICvPlot1@@6B@				; ICvPlot1::`vftable'
PUBLIC	??0ICvPlot1@@QAE@XZ				; ICvPlot1::ICvPlot1
PUBLIC	??_R4ICvPlot1@@6B@				; ICvPlot1::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICvPlot1@@6B@
rdata$r	SEGMENT
??_R4ICvPlot1@@6B@ DD 00H				; ICvPlot1::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVICvPlot1@@@8
	DD	FLAT:??_R3ICvPlot1@@8
rdata$r	ENDS
;	COMDAT ??_7ICvPlot1@@6B@
CONST	SEGMENT
??_7ICvPlot1@@6B@ DD FLAT:??_R4ICvPlot1@@6B@		; ICvPlot1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0ICvPlot1@@QAE@XZ
_TEXT	SEGMENT
??0ICvPlot1@@QAE@XZ PROC				; ICvPlot1::ICvPlot1, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET ??_7ICvPlot1@@6B@
	ret	0
??0ICvPlot1@@QAE@XZ ENDP				; ICvPlot1::ICvPlot1
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllplot.cpp
_TEXT	ENDS
;	COMDAT ?QueryInterface@CvDllPlot@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
$T219794 = -16						; size = 16
$T219792 = -16						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllPlot@@UAGPAXU_GUID@@@Z PROC	; CvDllPlot::QueryInterface, COMDAT

; 31   : {

	sub	esp, 16					; 00000010H

; 32   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 33   : 	        guidInterface == ICvPlot1::GetInterfaceId())

	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T219792[esp+20], ecx
	lea	ecx, DWORD PTR $T219792[esp+16]
	mov	DWORD PTR $T219792[esp+24], edx
	mov	DWORD PTR $T219792[esp+16], eax
	mov	eax, DWORD PTR _guidICvUnknown+12
	push	ecx
	lea	edx, DWORD PTR _guidInterface$[esp+16]
	push	edx
	mov	DWORD PTR $T219792[esp+36], eax
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@QueryInter
	mov	ecx, DWORD PTR _guidICvPlot1+4
	mov	edx, DWORD PTR _guidICvPlot1+8
	mov	eax, DWORD PTR _guidICvPlot1
	mov	DWORD PTR $T219794[esp+20], ecx
	lea	ecx, DWORD PTR $T219794[esp+16]
	mov	DWORD PTR $T219794[esp+24], edx
	mov	DWORD PTR $T219794[esp+16], eax
	mov	eax, DWORD PTR _guidICvPlot1+12
	push	ecx
	lea	edx, DWORD PTR _guidInterface$[esp+16]
	push	edx
	mov	DWORD PTR $T219794[esp+36], eax
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@QueryInter

; 36   : 		return this;
; 37   : 	}
; 38   : 
; 39   : 	return NULL;
; 40   : }

	add	esp, 16					; 00000010H
	ret	20					; 00000014H
$LN1@QueryInter:

; 34   : 	{
; 35   : 		IncrementReference();

	mov	eax, DWORD PTR _this$[esp+12]
	inc	DWORD PTR [eax+4]

; 36   : 		return this;
; 37   : 	}
; 38   : 
; 39   : 	return NULL;
; 40   : }

	add	esp, 16					; 00000010H
	ret	20					; 00000014H
?QueryInterface@CvDllPlot@@UAGPAXU_GUID@@@Z ENDP	; CvDllPlot::QueryInterface
_TEXT	ENDS
PUBLIC	??_GCvDllPlot@@QAEPAXI@Z			; CvDllPlot::`scalar deleting destructor'
; Function compile flags: /Ogtpy
;	COMDAT ??_GCvDllPlot@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCvDllPlot@@QAEPAXI@Z PROC				; CvDllPlot::`scalar deleting destructor', COMDAT
; _this$ = ecx
	test	BYTE PTR ___flags$[esp-4], 1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7CvDllPlot@@6B@
	je	SHORT $LN8@scalar
	push	esi
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4
$LN8@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GCvDllPlot@@QAEPAXI@Z ENDP				; CvDllPlot::`scalar deleting destructor'
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsRiver@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsRiver@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsRiver, COMDAT

; 110  : 	return m_pPlot->isRiver();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	BYTE PTR [ecx+457], al
	setg	al

; 111  : }

	ret	4
?IsRiver@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsRiver
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsCity@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsCity@CvDllPlot@@UBG_NXZ PROC				; CvDllPlot::IsCity, COMDAT

; 131  : 	return m_pPlot->isCity();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+104]
	test	eax, eax
	jl	SHORT $LN3@IsCity
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN3@IsCity
	mov	ecx, DWORD PTR [edx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	test	eax, eax
	setne	al

; 132  : }

	ret	4

; 131  : 	return m_pPlot->isCity();

$LN3@IsCity:
	xor	al, al

; 132  : }

	ret	4
?IsCity@CvDllPlot@@UBG_NXZ ENDP				; CvDllPlot::IsCity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsImpassable@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsImpassable@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsImpassable, COMDAT

; 155  : 	return m_pPlot->isImpassable();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR [ecx+462]
	shr	al, 7

; 156  : }

	ret	4
?IsImpassable@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsImpassable
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetPosition@CvDllPlot@@UBGXAAH0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iX$ = 12						; size = 4
_iY$ = 16						; size = 4
?GetPosition@CvDllPlot@@UBGXAAH0@Z PROC			; CvDllPlot::GetPosition, COMDAT

; 160  : 	iX = m_pPlot->getX();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, WORD PTR [ecx]
	mov	ecx, DWORD PTR _iX$[esp-4]
	mov	DWORD PTR [ecx], edx

; 161  : 	iY = m_pPlot->getY();

	mov	edx, DWORD PTR [eax+8]
	movsx	eax, WORD PTR [edx+2]
	mov	ecx, DWORD PTR _iY$[esp-4]
	mov	DWORD PTR [ecx], eax

; 162  : }

	ret	12					; 0000000cH
?GetPosition@CvDllPlot@@UBGXAAH0@Z ENDP			; CvDllPlot::GetPosition
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetOwner@CvDllPlot@@UBG?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetOwner@CvDllPlot@@UBG?AW4PlayerTypes@@XZ PROC	; CvDllPlot::GetOwner, COMDAT

; 196  : 	return m_pPlot->getOwner();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, BYTE PTR [ecx+4]

; 197  : }

	ret	4
?GetOwner@CvDllPlot@@UBG?AW4PlayerTypes@@XZ ENDP	; CvDllPlot::GetOwner
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetPlotType@CvDllPlot@@UBG?AW4PlotTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetPlotType@CvDllPlot@@UBG?AW4PlotTypes@@XZ PROC	; CvDllPlot::GetPlotType, COMDAT

; 201  : 	return m_pPlot->getPlotType();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, BYTE PTR [ecx+5]

; 202  : }

	ret	4
?GetPlotType@CvDllPlot@@UBG?AW4PlotTypes@@XZ ENDP	; CvDllPlot::GetPlotType
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsWater@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsWater@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsWater, COMDAT

; 206  : 	return m_pPlot->isWater();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	BYTE PTR [ecx+5], 3
	sete	al

; 207  : }

	ret	4
?IsWater@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsWater
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsHills@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsHills@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsHills, COMDAT

; 211  : 	return m_pPlot->isHills();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	BYTE PTR [ecx+5], 1
	sete	al

; 212  : }

	ret	4
?IsHills@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsHills
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsOpenGround@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsOpenGround@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsOpenGround, COMDAT

; 216  : 	return m_pPlot->isOpenGround();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR [ecx+5]
	cmp	al, 1
	je	SHORT $LN3@IsOpenGrou
	test	al, al
	je	SHORT $LN3@IsOpenGrou
	test	BYTE PTR [ecx+462], 8
	jne	SHORT $LN3@IsOpenGrou
	mov	al, 1

; 217  : }

	ret	4

; 216  : 	return m_pPlot->isOpenGround();

$LN3@IsOpenGrou:
	xor	al, al

; 217  : }

	ret	4
?IsOpenGround@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsOpenGround
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsMountain@CvDllPlot@@UBG_NXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsMountain@CvDllPlot@@UBG_NXZ PROC			; CvDllPlot::IsMountain, COMDAT

; 221  : 	return m_pPlot->isMountain();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	xor	eax, eax
	cmp	BYTE PTR [ecx+5], al
	sete	al

; 222  : }

	ret	4
?IsMountain@CvDllPlot@@UBG_NXZ ENDP			; CvDllPlot::IsMountain
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetTerrainType@CvDllPlot@@UBG?AW4TerrainTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetTerrainType@CvDllPlot@@UBG?AW4TerrainTypes@@XZ PROC	; CvDllPlot::GetTerrainType, COMDAT

; 226  : 	return m_pPlot->getTerrainType();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, BYTE PTR [ecx+6]

; 227  : }

	ret	4
?GetTerrainType@CvDllPlot@@UBG?AW4TerrainTypes@@XZ ENDP	; CvDllPlot::GetTerrainType
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
xdata$x	SEGMENT
__unwindtable$?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ$0
__ehfuncinfo$?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllplot.cpp
xdata$x	ENDS
;	COMDAT ?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T219910 = 8						; size = 4
_this$ = 8						; size = 4
?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ PROC		; CvDllPlot::GetPlotCity, COMDAT

; 275  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 276  : 	CvCity* pkCity = m_pPlot->getPlotCity();

	mov	eax, DWORD PTR _this$[esp+8]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [edx+104]
	push	esi
	test	eax, eax
	jl	SHORT $LN5@GetPlotCit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN5@GetPlotCit
	mov	ecx, DWORD PTR [edx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	esi, eax

; 277  : 	return (NULL != pkCity)? new CvDllCity(pkCity) : NULL;

	test	esi, esi
	je	SHORT $LN5@GetPlotCit
	push	12					; 0000000cH
	call	??2CvDllCity@@SAPAXI@Z			; CvDllCity::operator new
	add	esp, 4
	mov	DWORD PTR $T219910[esp+12], eax
	mov	DWORD PTR __$EHRec$[esp+24], 0
	test	eax, eax
	je	SHORT $LN5@GetPlotCit
	push	esi
	mov	ecx, eax
	call	??0CvDllCity@@QAE@PAVCvCity@@@Z		; CvDllCity::CvDllCity

; 278  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
$LN5@GetPlotCit:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	xor	eax, eax
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ$0:
	mov	eax, DWORD PTR $T219910[ebp-4]
	push	eax
	call	??3CvDllCity@@SAXPAX@Z			; CvDllCity::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ:
	mov	eax, OFFSET __ehfuncinfo$?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetPlotCity@CvDllPlot@@UBGPAVICvCity1@@XZ ENDP		; CvDllPlot::GetPlotCity
PUBLIC	??1?$FObjectHandle@VCvUnit@@@@QAE@XZ		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
EXTRN	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ:PROC ; CvUnit::getDestructionNotification
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
;	COMDAT ??1?$FObjectHandle@VCvUnit@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ PROC		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>, COMDAT
; _this$ = ecx

; 147  : 		if(m_target) 

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN4@FObjectHan

; 148  : 		{
; 149  : 			m_target->getDestructionNotification().removeTarget(*this);

	jmp	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN4@FObjectHan:

; 150  : 		}
; 151  : 	}

	ret	0
??1?$FObjectHandle@VCvUnit@@@@QAE@XZ ENDP		; FObjectHandle<CvUnit>::~FObjectHandle<CvUnit>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT
; _p$ = eax

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 302  : }

	ret	0
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1

; 302  : }

	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
PUBLIC	?getTeam@CvPlayer@@SA?AW4TeamTypes@@W4PlayerTypes@@@Z ; CvPlayer::getTeam
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
;	COMDAT ?getTeam@CvPlayer@@SA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayerID$ = 8						; size = 4
?getTeam@CvPlayer@@SA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPlayer::getTeam, COMDAT

; 1177 : 		return CvPreGame::teamType(ePlayerID);

	mov	eax, DWORD PTR _ePlayerID$[esp-4]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN3@getTeam
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 1178 : 	}

	ret	0

; 1177 : 		return CvPreGame::teamType(ePlayerID);

$LN3@getTeam:
	or	eax, -1

; 1178 : 	}

	ret	0
?getTeam@CvPlayer@@SA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPlayer::getTeam
_TEXT	ENDS
PUBLIC	?isVisible@CvPlot@@QBE_NW4TeamTypes@@_N@Z	; CvPlot::isVisible
EXTRN	?isDebugMode@CvGame@@QBE_NXZ:PROC		; CvGame::isDebugMode
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?isVisible@CvPlot@@QBE_NW4TeamTypes@@_N@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
_bDebug$ = 12						; size = 1
?isVisible@CvPlot@@QBE_NW4TeamTypes@@_N@Z PROC		; CvPlot::isVisible, COMDAT
; _this$ = ecx

; 197  : 		if(bDebug && GC.getGame().isDebugMode())

	cmp	BYTE PTR _bDebug$[esp-4], 0
	push	esi
	mov	esi, ecx
	je	SHORT $LN3@isVisible
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isDebugMode@CvGame@@QBE_NXZ		; CvGame::isDebugMode
	test	al, al
	je	SHORT $LN3@isVisible

; 198  : 			return true;

	mov	al, 1
	pop	esi

; 205  : 		}
; 206  : 	}

	ret	8
$LN3@isVisible:

; 199  : 		else
; 200  : 		{
; 201  : 			if(eTeam == NO_TEAM)

	mov	eax, DWORD PTR _eTeam$[esp]
	cmp	eax, -1
	jne	SHORT $LN1@isVisible

; 202  : 				return false;

	xor	al, al
	pop	esi

; 205  : 		}
; 206  : 	}

	ret	8
$LN1@isVisible:

; 203  : 
; 204  : 			return ((getVisibilityCount(eTeam) > 0));

	mov	ecx, DWORD PTR [esi+156]
	xor	edx, edx
	cmp	WORD PTR [ecx+eax*2], dx
	pop	esi
	setg	dl
	mov	al, dl

; 205  : 		}
; 206  : 	}

	ret	8
?isVisible@CvPlot@@QBE_NW4TeamTypes@@_N@Z ENDP		; CvPlot::isVisible
_TEXT	ENDS
PUBLIC	?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ		; CvPlot::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ PROC		; CvPlot::getTeam, COMDAT
; _this$ = ecx

; 232  : 		PlayerTypes playerID = getOwner();

	movsx	eax, BYTE PTR [ecx+4]

; 233  : 		if(playerID != NO_PLAYER)

	cmp	eax, -1
	je	SHORT $LN2@getTeam@2

; 234  : 		{
; 235  : 			return CvPlayer::getTeam(playerID);

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN2@getTeam@2
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 240  : 		}
; 241  : 	}

	ret	0
$LN2@getTeam@2:

; 236  : 		}
; 237  : 		else
; 238  : 		{
; 239  : 			return NO_TEAM;

	or	eax, -1

; 240  : 		}
; 241  : 	}

	ret	0
?getTeam@CvPlot@@QBE?AW4TeamTypes@@XZ ENDP		; CvPlot::getTeam
_TEXT	ENDS
PUBLIC	?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z		; CvPlot::isEnemyCity
EXTRN	?isEnemy@CvUnit@@QBE_NW4TeamTypes@@PBVCvPlot@@@Z:PROC ; CvUnit::isEnemy
EXTRN	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ:PROC	; CvCity::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z
_TEXT	SEGMENT
_kUnit$ = 8						; size = 4
?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z PROC		; CvPlot::isEnemyCity, COMDAT
; _this$ = ecx

; 252  : 	{

	push	esi
	mov	esi, ecx

; 253  : 		CvCity* pCity = getPlotCity();

	mov	eax, DWORD PTR [esi+104]
	test	eax, eax
	jl	SHORT $LN1@isEnemyCit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@isEnemyCit
	mov	ecx, DWORD PTR [esi+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 254  : 		if(pCity != NULL)

	test	eax, eax
	je	SHORT $LN1@isEnemyCit

; 255  : 			return kUnit.isEnemy(pCity->getTeam(), this);

	push	esi
	mov	ecx, eax
	call	?getTeam@CvCity@@QBE?AW4TeamTypes@@XZ	; CvCity::getTeam
	mov	ecx, DWORD PTR _kUnit$[esp+4]
	push	eax
	call	?isEnemy@CvUnit@@QBE_NW4TeamTypes@@PBVCvPlot@@@Z ; CvUnit::isEnemy
	pop	esi

; 258  : 	}

	ret	4
$LN1@isEnemyCit:

; 256  : 
; 257  : 		return false;

	xor	al, al
	pop	esi

; 258  : 	}

	ret	4
?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z ENDP		; CvPlot::isEnemyCity
_TEXT	ENDS
PUBLIC	?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ	; CvPlot::getFeatureType
; Function compile flags: /Ogtpy
;	COMDAT ?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ
_TEXT	SEGMENT
?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ PROC	; CvPlot::getFeatureType, COMDAT
; _this$ = ecx

; 435  : #ifdef AUI_WARNING_FIXES
; 436  : 		int f = m_eFeatureType;
; 437  : #else
; 438  : 		char f = m_eFeatureType;
; 439  : #endif
; 440  : 		return (FeatureTypes)f;

	movsx	eax, BYTE PTR [ecx+432]

; 441  : 	}

	ret	0
?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ ENDP	; CvPlot::getFeatureType
_TEXT	ENDS
PUBLIC	?isRevealed@CvPlot@@QBE_NW4TeamTypes@@_N@Z	; CvPlot::isRevealed
; Function compile flags: /Ogtpy
;	COMDAT ?isRevealed@CvPlot@@QBE_NW4TeamTypes@@_N@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
_bDebug$ = 12						; size = 1
?isRevealed@CvPlot@@QBE_NW4TeamTypes@@_N@Z PROC		; CvPlot::isRevealed, COMDAT
; _this$ = ecx

; 612  : 		if(bDebug && GC.getGame().isDebugMode())

	cmp	BYTE PTR _bDebug$[esp-4], 0
	push	esi
	mov	esi, ecx
	je	SHORT $LN1@isRevealed
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isDebugMode@CvGame@@QBE_NXZ		; CvGame::isDebugMode
	test	al, al
	je	SHORT $LN1@isRevealed

; 613  : 			return true;

	mov	al, 1
	pop	esi

; 617  : 	}

	ret	8
$LN1@isRevealed:

; 614  : 		CvAssertMsg(eTeam >= 0, "eTeam is expected to be non-negative (invalid Index)");
; 615  : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is expected to be within maximum bounds (invalid Index)");
; 616  : 		return m_bfRevealed.GetBit(eTeam);

	mov	ecx, DWORD PTR _eTeam$[esp]
	mov	eax, ecx
	shr	eax, 5
	mov	edx, eax
	shl	edx, 5
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	test	edx, DWORD PTR [esi+eax*4+8]
	pop	esi
	setne	al

; 617  : 	}

	ret	8
?isRevealed@CvPlot@@QBE_NW4TeamTypes@@_N@Z ENDP		; CvPlot::isRevealed
_TEXT	ENDS
PUBLIC	??0CvDllPlot@@QAE@PAVCvPlot@@@Z			; CvDllPlot::CvDllPlot
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllplot.cpp
;	COMDAT ??0CvDllPlot@@QAE@PAVCvPlot@@@Z
_TEXT	SEGMENT
_pPlot$ = 8						; size = 4
??0CvDllPlot@@QAE@PAVCvPlot@@@Z PROC			; CvDllPlot::CvDllPlot, COMDAT
; _this$ = ecx

; 22   : {

	mov	eax, ecx
	mov	ecx, DWORD PTR _pPlot$[esp-4]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllPlot@@6B@
	mov	DWORD PTR [eax+4], 1
	mov	DWORD PTR [eax+8], ecx

; 23   : 	FAssertMsg(pPlot != NULL, "SHOULD NOT HAPPEN");
; 24   : }

	ret	4
??0CvDllPlot@@QAE@PAVCvPlot@@@Z ENDP			; CvDllPlot::CvDllPlot
_TEXT	ENDS
PUBLIC	?DecrementReference@CvDllPlot@@QAEIXZ		; CvDllPlot::DecrementReference
; Function compile flags: /Ogtpy
;	COMDAT ?DecrementReference@CvDllPlot@@QAEIXZ
_TEXT	SEGMENT
?DecrementReference@CvDllPlot@@QAEIXZ PROC		; CvDllPlot::DecrementReference, COMDAT
; _this$ = ecx

; 50   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, 1
	jne	SHORT $LN2@DecrementR

; 51   : 	{
; 52   : 		delete this;

	push	ecx
	mov	DWORD PTR [ecx], OFFSET ??_7CvDllPlot@@6B@
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 53   : 		return 0;

	xor	eax, eax

; 58   : 		return m_uiRefCount;
; 59   : 	}
; 60   : }

	ret	0
$LN2@DecrementR:

; 54   : 	}
; 55   : 	else
; 56   : 	{
; 57   : 		--m_uiRefCount;

	dec	eax
	mov	DWORD PTR [ecx+4], eax

; 58   : 		return m_uiRefCount;
; 59   : 	}
; 60   : }

	ret	0
?DecrementReference@CvDllPlot@@QAEIXZ ENDP		; CvDllPlot::DecrementReference
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllPlot@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllPlot@@EAGXXZ PROC				; CvDllPlot::Destroy, COMDAT

; 69   : 	DecrementReference();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, 1
	jne	SHORT $LN4@Destroy
	push	eax
	mov	DWORD PTR [eax], OFFSET ??_7CvDllPlot@@6B@
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 70   : }

	ret	4

; 69   : 	DecrementReference();

$LN4@Destroy:
	dec	ecx
	mov	DWORD PTR [eax+4], ecx

; 70   : }

	ret	4
?Destroy@CvDllPlot@@EAGXXZ ENDP				; CvDllPlot::Destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetTeam@CvDllPlot@@UBG?AW4TeamTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetTeam@CvDllPlot@@UBG?AW4TeamTypes@@XZ PROC		; CvDllPlot::GetTeam, COMDAT

; 89   : 	return m_pPlot->getTeam();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, BYTE PTR [ecx+4]
	cmp	eax, -1
	je	SHORT $LN4@GetTeam
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN4@GetTeam
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [ecx+eax*4]

; 90   : }

	ret	4

; 89   : 	return m_pPlot->getTeam();

$LN4@GetTeam:
	or	eax, -1

; 90   : }

	ret	4
?GetTeam@CvDllPlot@@UBG?AW4TeamTypes@@XZ ENDP		; CvDllPlot::GetTeam
_TEXT	ENDS
EXTRN	?getNeighboringPlot@CvPlot@@QBEPAV1@W4DirectionTypes@@@Z:PROC ; CvPlot::getNeighboringPlot
; Function compile flags: /Ogtpy
;	COMDAT ?GetNeighboringPlot@CvDllPlot@@UBGPAVICvPlot1@@W4DirectionTypes@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eDirection$ = 12					; size = 4
?GetNeighboringPlot@CvDllPlot@@UBGPAVICvPlot1@@W4DirectionTypes@@@Z PROC ; CvDllPlot::GetNeighboringPlot, COMDAT

; 115  : 	CvPlot* pkPlot = m_pPlot->getNeighboringPlot(eDirection);

	mov	eax, DWORD PTR _eDirection$[esp-4]
	mov	ecx, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [ecx+8]
	push	esi
	push	eax
	call	?getNeighboringPlot@CvPlot@@QBEPAV1@W4DirectionTypes@@@Z ; CvPlot::getNeighboringPlot
	mov	esi, eax

; 116  : 	return (NULL != pkPlot)? new CvDllPlot(pkPlot) : NULL;

	test	esi, esi
	je	SHORT $LN5@GetNeighbo
	push	12					; 0000000cH
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@GetNeighbo
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax], OFFSET ??_7CvDllPlot@@6B@
	mov	DWORD PTR [eax+4], 1
	pop	esi

; 117  : }

	ret	8
$LN5@GetNeighbo:

; 116  : 	return (NULL != pkPlot)? new CvDllPlot(pkPlot) : NULL;

	xor	eax, eax
	pop	esi

; 117  : }

	ret	8
?GetNeighboringPlot@CvDllPlot@@UBGPAVICvPlot1@@W4DirectionTypes@@@Z ENDP ; CvDllPlot::GetNeighboringPlot
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsVisible@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eTeam$ = 12						; size = 4
_bDebug$ = 16						; size = 1
?IsVisible@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z PROC	; CvDllPlot::IsVisible, COMDAT

; 126  : 	return m_pPlot->isVisible(eTeam, bDebug);

	cmp	BYTE PTR _bDebug$[esp-4], 0
	mov	eax, DWORD PTR _this$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+8]
	je	SHORT $LN5@IsVisible
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isDebugMode@CvGame@@QBE_NXZ		; CvGame::isDebugMode
	test	al, al
	je	SHORT $LN5@IsVisible
	mov	al, 1
	pop	esi

; 127  : }

	ret	12					; 0000000cH

; 126  : 	return m_pPlot->isVisible(eTeam, bDebug);

$LN5@IsVisible:
	mov	eax, DWORD PTR _eTeam$[esp]
	cmp	eax, -1
	jne	SHORT $LN3@IsVisible
	xor	al, al
	pop	esi

; 127  : }

	ret	12					; 0000000cH

; 126  : 	return m_pPlot->isVisible(eTeam, bDebug);

$LN3@IsVisible:
	mov	ecx, DWORD PTR [esi+156]
	cmp	WORD PTR [ecx+eax*2], 0
	pop	esi
	setg	al

; 127  : }

	ret	12					; 0000000cH
?IsVisible@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z ENDP	; CvDllPlot::IsVisible
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsEnemyCity@CvDllPlot@@UBG_NPAVICvUnit1@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pUnit$ = 12						; size = 4
?IsEnemyCity@CvDllPlot@@UBG_NPAVICvUnit1@@@Z PROC	; CvDllPlot::IsEnemyCity, COMDAT

; 136  : 	CvUnit* pkUnit = (NULL != pUnit)? static_cast<CvDllUnit*>(pUnit)->GetInstance() : NULL;

	mov	ecx, DWORD PTR _pUnit$[esp-4]
	test	ecx, ecx
	je	SHORT $LN2@IsEnemyCit
	call	?GetInstance@CvDllUnit@@QAEPAVCvUnit@@XZ ; CvDllUnit::GetInstance

; 137  : 	if(pkUnit != NULL)

	test	eax, eax
	je	SHORT $LN2@IsEnemyCit

; 138  : 		return m_pPlot->isEnemyCity(*pkUnit);

	push	eax
	mov	eax, DWORD PTR _this$[esp]
	mov	ecx, DWORD PTR [eax+8]
	call	?isEnemyCity@CvPlot@@QBE_NABVCvUnit@@@Z	; CvPlot::isEnemyCity

; 141  : }

	ret	8
$LN2@IsEnemyCit:

; 139  : 	else
; 140  : 		return false;

	xor	al, al

; 141  : }

	ret	8
?IsEnemyCity@CvDllPlot@@UBG_NPAVICvUnit1@@@Z ENDP	; CvDllPlot::IsEnemyCity
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?GetFeatureType@CvDllPlot@@UBG?AW4FeatureTypes@@XZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetFeatureType@CvDllPlot@@UBG?AW4FeatureTypes@@XZ PROC	; CvDllPlot::GetFeatureType, COMDAT

; 231  : 	return m_pPlot->getFeatureType();

	mov	eax, DWORD PTR _this$[esp-4]
	mov	ecx, DWORD PTR [eax+8]
	movsx	eax, BYTE PTR [ecx+432]

; 232  : }

	ret	4
?GetFeatureType@CvDllPlot@@UBG?AW4FeatureTypes@@XZ ENDP	; CvDllPlot::GetFeatureType
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?IsRevealed@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_eTeam$ = 12						; size = 4
_bDebug$ = 16						; size = 1
?IsRevealed@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z PROC	; CvDllPlot::IsRevealed, COMDAT

; 288  : 	return m_pPlot->isRevealed(eTeam, bDebug);

	cmp	BYTE PTR _bDebug$[esp-4], 0
	mov	eax, DWORD PTR _this$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+8]
	je	SHORT $LN3@IsRevealed
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?isDebugMode@CvGame@@QBE_NXZ		; CvGame::isDebugMode
	test	al, al
	je	SHORT $LN3@IsRevealed
	mov	al, 1
	pop	esi

; 289  : }

	ret	12					; 0000000cH

; 288  : 	return m_pPlot->isRevealed(eTeam, bDebug);

$LN3@IsRevealed:
	mov	ecx, DWORD PTR _eTeam$[esp]
	mov	eax, ecx
	shr	eax, 5
	mov	edx, eax
	shl	edx, 5
	sub	ecx, edx
	mov	edx, 1
	shl	edx, cl
	test	edx, DWORD PTR [esi+eax*4+8]
	pop	esi
	setne	al

; 289  : }

	ret	12					; 0000000cH
?IsRevealed@CvDllPlot@@UBG_NW4TeamTypes@@_N@Z ENDP	; CvDllPlot::IsRevealed
_TEXT	ENDS
EXTRN	?getCenterUnit@CvPlot@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ:PROC ; CvPlot::getCenterUnit
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fobjecthandle.h
xdata$x	SEGMENT
__unwindtable$?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ$1
__ehfuncinfo$?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvdllplot.cpp
xdata$x	ENDS
;	COMDAT ?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ
_TEXT	SEGMENT
$T220224 = -20						; size = 8
__$EHRec$ = -12						; size = 12
$T220226 = 8						; size = 4
_this$ = 8						; size = 4
?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ PROC	; CvDllPlot::GetCenterUnit, COMDAT

; 312  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 313  : 	CvUnit* pkUnit = m_pPlot->getCenterUnit().pointer();

	mov	ecx, DWORD PTR _this$[esp+8]
	mov	ecx, DWORD PTR [ecx+8]
	sub	esp, 8
	push	esi
	lea	eax, DWORD PTR $T220224[esp+24]
	push	eax
	call	?getCenterUnit@CvPlot@@QAE?AV?$FObjectHandle@VCvUnit@@@@XZ ; CvPlot::getCenterUnit
	mov	ecx, DWORD PTR $T220224[esp+24]
	mov	esi, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@GetCenterU
	call	?getDestructionNotification@CvUnit@@QAEAAU?$DestructionNotification@V?$FObjectHandle@VCvUnit@@@@@@XZ ; CvUnit::getDestructionNotification
$LN14@GetCenterU:

; 314  : 	return (NULL != pkUnit)? new CvDllUnit(pkUnit) : NULL;

	test	esi, esi
	je	SHORT $LN5@GetCenterU
	push	12					; 0000000cH
	call	??2CvDllUnit@@SAPAXI@Z			; CvDllUnit::operator new
	add	esp, 4
	mov	DWORD PTR $T220226[esp+20], eax
	mov	DWORD PTR __$EHRec$[esp+32], 0
	test	eax, eax
	je	SHORT $LN5@GetCenterU
	push	esi
	mov	ecx, eax
	call	??0CvDllUnit@@QAE@PAVCvUnit@@@Z		; CvDllUnit::CvDllUnit
	pop	esi

; 315  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	DWORD PTR fs:0, ecx
	add	esp, 20					; 00000014H
	ret	4
$LN5@GetCenterU:
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	xor	eax, eax
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 20					; 00000014H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ$1:
	mov	eax, DWORD PTR $T220226[ebp-4]
	push	eax
	call	??3CvDllUnit@@SAXPAX@Z			; CvDllUnit::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ:
	mov	eax, OFFSET __ehfuncinfo$?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetCenterUnit@CvDllPlot@@UAGPAVICvUnit1@@XZ ENDP	; CvDllPlot::GetCenterUnit
END
