; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Documents\GitHub\Lekmod\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvBarbarians.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
PUBLIC	?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
_BSS	SEGMENT
?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA DD 01H DUP (?) ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA DD 01H DUP (?) ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
_BSS	ENDS
CONST	SEGMENT
$SG218397 DB	'Barb Spawn Rand call', 00H
	ORG $+3
$SG218548 DB	'Random roll to see if Barb Camp spawns this turn', 00H
	ORG $+3
$SG218556 DB	'Barb Camp Plot-Finding Roll - Coastal Bias 1', 00H
	ORG $+3
$SG218570 DB	'Barb Camp Plot-Finding Roll', 00H
$SG218610 DB	'Barb Camp Plot-Finding Roll - Coastal Bias 2', 00H
	ORG $+3
$SG218670 DB	'Barb Unit Selection', 00H
$SG218738 DB	'Barb Unit Location Spawn Roll', 00H
CONST	ENDS
PUBLIC	?wrapCoordDifference@@YAHHI_N@Z			; wrapCoordDifference
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?wrapCoordDifference@@YAHHI_N@Z
_TEXT	SEGMENT
_iDiff$ = 8						; size = 4
_uiRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?wrapCoordDifference@@YAHHI_N@Z PROC			; wrapCoordDifference, COMDAT

; 57   : 	if(bWrap)

	cmp	BYTE PTR _bWrap$[esp-4], 0
	mov	eax, DWORD PTR _iDiff$[esp-4]
	je	SHORT $LN5@wrapCoordD

; 58   : 	{
; 59   : 		if(iDiff > (int)(uiRange >> 1))		// Using an unsigned int so we can safely assume that value >> 1 == value / 2

	mov	edx, DWORD PTR _uiRange$[esp-4]
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN3@wrapCoordD

; 60   : 		{
; 61   : 			return (iDiff - (int)uiRange);

	sub	eax, edx

; 66   : 		}
; 67   : 	}
; 68   : 
; 69   : 	return iDiff;
; 70   : }

	ret	0
$LN3@wrapCoordD:

; 62   : 		}
; 63   : 		else if(iDiff < -(int)(uiRange >> 1))

	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN5@wrapCoordD

; 64   : 		{
; 65   : 			return (iDiff + (int)uiRange);

	add	eax, edx
$LN5@wrapCoordD:

; 66   : 		}
; 67   : 	}
; 68   : 
; 69   : 	return iDiff;
; 70   : }

	ret	0
?wrapCoordDifference@@YAHHI_N@Z ENDP			; wrapCoordDifference
_TEXT	ENDS
PUBLIC	?xToHexspaceX@@YAHHH@Z				; xToHexspaceX
; Function compile flags: /Ogtpy
;	COMDAT ?xToHexspaceX@@YAHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?xToHexspaceX@@YAHHH@Z PROC				; xToHexspaceX, COMDAT

; 86   : 	return iX - ((iY >= 0) ? (iY>>1) : ((iY - 1)/2));

	mov	ecx, DWORD PTR _iY$[esp-4]
	test	ecx, ecx
	jge	SHORT $LN5@xToHexspac
	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
	mov	ecx, eax
$LN5@xToHexspac:
	mov	eax, DWORD PTR _iX$[esp-4]
	sar	ecx, 1
	sub	eax, ecx

; 87   : }

	ret	0
?xToHexspaceX@@YAHHH@Z ENDP				; xToHexspaceX
_TEXT	ENDS
PUBLIC	?hexspaceXToX@@YAHHH@Z				; hexspaceXToX
; Function compile flags: /Ogtpy
;	COMDAT ?hexspaceXToX@@YAHHH@Z
_TEXT	SEGMENT
_iHexspaceX$ = 8					; size = 4
_iHexspaceY$ = 12					; size = 4
?hexspaceXToX@@YAHHH@Z PROC				; hexspaceXToX, COMDAT

; 91   : 	return iHexspaceX + ((iHexspaceY >= 0) ? (iHexspaceY>>1) : ((iHexspaceY - 1)/2));

	mov	eax, DWORD PTR _iHexspaceY$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@hexspaceXT
	mov	ecx, DWORD PTR _iHexspaceX$[esp-4]
	sar	eax, 1
	add	eax, ecx

; 92   : }

	ret	0
$LN3@hexspaceXT:

; 91   : 	return iHexspaceX + ((iHexspaceY >= 0) ? (iHexspaceY>>1) : ((iHexspaceY - 1)/2));

	dec	eax
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _iHexspaceX$[esp-4]
	sar	eax, 1
	add	eax, edx

; 92   : }

	ret	0
?hexspaceXToX@@YAHHH@Z ENDP				; hexspaceXToX
_TEXT	ENDS
PUBLIC	?DoBarbCampCleared@CvBarbarians@@SAXPAVCvPlot@@W4PlayerTypes@@@Z ; CvBarbarians::DoBarbCampCleared
EXTRN	?AddArchaeologicalRecord@CvPlot@@QAEXW4GreatWorkArtifactClass@@W4PlayerTypes@@1@Z:PROC ; CvPlot::AddArchaeologicalRecord
EXTRN	?getARTIFACT_BARBARIAN_CAMP@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ:PROC ; CvTypes::getARTIFACT_BARBARIAN_CAMP
EXTRN	?GetPlotIndex@CvPlot@@QBEHXZ:PROC		; CvPlot::GetPlotIndex
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvbarbarians.cpp
;	COMDAT ?DoBarbCampCleared@CvBarbarians@@SAXPAVCvPlot@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_pPlot$ = 8						; size = 4
_ePlayer$ = 12						; size = 4
?DoBarbCampCleared@CvBarbarians@@SAXPAVCvPlot@@W4PlayerTypes@@@Z PROC ; CvBarbarians::DoBarbCampCleared, COMDAT

; 73   : {

	push	esi

; 74   : 	m_aiPlotBarbCampSpawnCounter[pPlot->GetPlotIndex()] = -16;

	mov	esi, DWORD PTR _pPlot$[esp]
	mov	ecx, esi
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	edx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	mov	ecx, -16				; fffffff0H
	mov	WORD PTR [edx+eax*2], cx

; 75   : 
; 76   : 	pPlot->AddArchaeologicalRecord(CvTypes::getARTIFACT_BARBARIAN_CAMP(), ePlayer, NO_PLAYER);

	mov	eax, DWORD PTR _ePlayer$[esp]
	push	-1
	push	eax
	call	?getARTIFACT_BARBARIAN_CAMP@CvTypes@@YA?BW4GreatWorkArtifactClass@@XZ ; CvTypes::getARTIFACT_BARBARIAN_CAMP
	push	eax
	mov	ecx, esi
	call	?AddArchaeologicalRecord@CvPlot@@QAEXW4GreatWorkArtifactClass@@W4PlayerTypes@@1@Z ; CvPlot::AddArchaeologicalRecord
	pop	esi

; 77   : }

	ret	0
?DoBarbCampCleared@CvBarbarians@@SAXPAVCvPlot@@W4PlayerTypes@@@Z ENDP ; CvBarbarians::DoBarbCampCleared
_TEXT	ENDS
PUBLIC	?ShouldSpawnBarbFromCamp@CvBarbarians@@SA_NPAVCvPlot@@@Z ; CvBarbarians::ShouldSpawnBarbFromCamp
; Function compile flags: /Ogtpy
;	COMDAT ?ShouldSpawnBarbFromCamp@CvBarbarians@@SA_NPAVCvPlot@@@Z
_TEXT	SEGMENT
_pPlot$ = 8						; size = 4
?ShouldSpawnBarbFromCamp@CvBarbarians@@SA_NPAVCvPlot@@@Z PROC ; CvBarbarians::ShouldSpawnBarbFromCamp, COMDAT

; 96   : 	if (m_aiPlotBarbCampSpawnCounter[pPlot->GetPlotIndex()] == 0)

	mov	ecx, DWORD PTR _pPlot$[esp-4]
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	ecx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	cmp	WORD PTR [ecx+eax*2], 0
	sete	al

; 97   : 	{
; 98   : 		return true;
; 99   : 	}
; 100  : 
; 101  : 	return false;
; 102  : }

	ret	0
?ShouldSpawnBarbFromCamp@CvBarbarians@@SA_NPAVCvPlot@@@Z ENDP ; CvBarbarians::ShouldSpawnBarbFromCamp
_TEXT	ENDS
PUBLIC	?DoCampAttacked@CvBarbarians@@SAXPAVCvPlot@@@Z	; CvBarbarians::DoCampAttacked
; Function compile flags: /Ogtpy
;	COMDAT ?DoCampAttacked@CvBarbarians@@SAXPAVCvPlot@@@Z
_TEXT	SEGMENT
_pPlot$ = 8						; size = 4
?DoCampAttacked@CvBarbarians@@SAXPAVCvPlot@@@Z PROC	; CvBarbarians::DoCampAttacked, COMDAT

; 151  : {

	push	esi
	push	edi

; 152  : 	int iCounter = m_aiPlotBarbCampSpawnCounter[pPlot->GetPlotIndex()];

	mov	edi, DWORD PTR _pPlot$[esp+4]
	mov	ecx, edi
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex

; 153  : 
; 154  : 	// Halve the amount of time to spawn
; 155  : 	int iNewValue = iCounter / 2;

	mov	ecx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	movsx	eax, WORD PTR [ecx+eax*2]
	cdq
	sub	eax, edx
	mov	esi, eax

; 156  : 
; 157  : 	m_aiPlotBarbCampSpawnCounter[pPlot->GetPlotIndex()] = iNewValue;

	mov	ecx, edi
	sar	esi, 1
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	edx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	pop	edi
	mov	WORD PTR [edx+eax*2], si
	pop	esi

; 158  : }

	ret	0
?DoCampAttacked@CvBarbarians@@SAXPAVCvPlot@@@Z ENDP	; CvBarbarians::DoCampAttacked
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??A?$BaseVector@W4DirectionTypes@@$00@@QAEAAW4DirectionTypes@@I@Z ; BaseVector<enum DirectionTypes,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@W4DirectionTypes@@$00@@QAEAAW4DirectionTypes@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@W4DirectionTypes@@$00@@QAEAAW4DirectionTypes@@I@Z PROC ; BaseVector<enum DirectionTypes,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 131  : 	};

	ret	4
??A?$BaseVector@W4DirectionTypes@@$00@@QAEAAW4DirectionTypes@@I@Z ENDP ; BaseVector<enum DirectionTypes,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@W4DirectionTypes@@$00@@QBEIXZ ; BaseVector<enum DirectionTypes,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@W4DirectionTypes@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@W4DirectionTypes@@$00@@QBEIXZ PROC	; BaseVector<enum DirectionTypes,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@W4DirectionTypes@@$00@@QBEIXZ ENDP	; BaseVector<enum DirectionTypes,1>::size
_TEXT	ENDS
PUBLIC	??0?$ArrayWrapper@F@@QAE@HPAF@Z			; ArrayWrapper<short>::ArrayWrapper<short>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??0?$ArrayWrapper@F@@QAE@HPAF@Z
_TEXT	SEGMENT
_count$ = 8						; size = 4
_values$ = 12						; size = 4
??0?$ArrayWrapper@F@@QAE@HPAF@Z PROC			; ArrayWrapper<short>::ArrayWrapper<short>, COMDAT
; _this$ = ecx

; 378  : 		: m_values(values), m_count(count) {}

	mov	edx, DWORD PTR _count$[esp-4]
	mov	eax, ecx
	mov	ecx, DWORD PTR _values$[esp-4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	ret	8
??0?$ArrayWrapper@F@@QAE@HPAF@Z ENDP			; ArrayWrapper<short>::ArrayWrapper<short>
_TEXT	ENDS
PUBLIC	??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEPAW4DirectionTypes@@I@Z ; FStaticVector<enum DirectionTypes,6,1,297,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@ DB 'c:\users\eno'
	DB	'rmousapplepie\documents\github\lekmod\lekmod_dll\fireplace\in'
	DB	'clude\fireworks\FFastVector.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEPAW4DirectionTypes@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEPAW4DirectionTypes@@I@Z PROC ; FStaticVector<enum DirectionTypes,6,1,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 6
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 6
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEPAW4DirectionTypes@@I@Z ENDP ; FStaticVector<enum DirectionTypes,6,1,297,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@W4DirectionTypes@@$00@@QAE@XZ	; BaseVector<enum DirectionTypes,1>::~BaseVector<enum DirectionTypes,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@W4DirectionTypes@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@W4DirectionTypes@@$00@@QAE@XZ PROC	; BaseVector<enum DirectionTypes,1>::~BaseVector<enum DirectionTypes,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@W4DirectionTypes@@$00@@QAE@XZ ENDP	; BaseVector<enum DirectionTypes,1>::~BaseVector<enum DirectionTypes,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@W4DirectionTypes@@$00@@IAE@XZ	; BaseVector<enum DirectionTypes,1>::BaseVector<enum DirectionTypes,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@W4DirectionTypes@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@W4DirectionTypes@@$00@@IAE@XZ PROC	; BaseVector<enum DirectionTypes,1>::BaseVector<enum DirectionTypes,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@W4DirectionTypes@@$00@@IAE@XZ ENDP	; BaseVector<enum DirectionTypes,1>::BaseVector<enum DirectionTypes,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@W4DirectionTypes@@$00@@IAEXPAW4DirectionTypes@@I@Z ; BaseVector<enum DirectionTypes,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@W4DirectionTypes@@$00@@IAEXPAW4DirectionTypes@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@W4DirectionTypes@@$00@@IAEXPAW4DirectionTypes@@I@Z PROC ; BaseVector<enum DirectionTypes,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@W4DirectionTypes@@$00@@IAEXPAW4DirectionTypes@@I@Z ENDP ; BaseVector<enum DirectionTypes,1>::Destroy
_TEXT	ENDS
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 3384 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN4@max
	mov	eax, ecx
$LN4@max:

; 3385 : 	}

	ret	0
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
PUBLIC	??$min@H@std@@YAABHABH0@Z			; std::min<int>
; Function compile flags: /Ogtpy
;	COMDAT ??$min@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@H@std@@YAABHABH0@Z PROC				; std::min<int>, COMDAT

; 3399 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Left$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN4@min
	mov	eax, ecx
$LN4@min:

; 3400 : 	}

	ret	0
??$min@H@std@@YAABHABH0@Z ENDP				; std::min<int>
_TEXT	ENDS
PUBLIC	??$SAFE_DELETE_ARRAY@F@@YAXAAPAF@Z		; SAFE_DELETE_ARRAY<short>
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffiretypes.h
;	COMDAT ??$SAFE_DELETE_ARRAY@F@@YAXAAPAF@Z
_TEXT	SEGMENT
_pkInstanceArray$ = 8					; size = 4
??$SAFE_DELETE_ARRAY@F@@YAXAAPAF@Z PROC			; SAFE_DELETE_ARRAY<short>, COMDAT

; 311  : {

	push	esi

; 312  : 	delete[] pkInstanceArray;

	mov	esi, DWORD PTR _pkInstanceArray$[esp]
	mov	eax, DWORD PTR [esi]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 313  : 	pkInstanceArray = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 314  : };

	ret	0
??$SAFE_DELETE_ARRAY@F@@YAXAAPAF@Z ENDP			; SAFE_DELETE_ARRAY<short>
_TEXT	ENDS
PUBLIC	?getArray@?$ArrayWrapper@F@@QAEPAFXZ		; ArrayWrapper<short>::getArray
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ?getArray@?$ArrayWrapper@F@@QAEPAFXZ
_TEXT	SEGMENT
?getArray@?$ArrayWrapper@F@@QAEPAFXZ PROC		; ArrayWrapper<short>::getArray, COMDAT
; _this$ = ecx

; 382  : 		return m_values;

	mov	eax, DWORD PTR [ecx]

; 383  : 	}

	ret	0
?getArray@?$ArrayWrapper@F@@QAEPAFXZ ENDP		; ArrayWrapper<short>::getArray
_TEXT	ENDS
PUBLIC	?getArray@?$ArrayWrapper@F@@QBEPBFXZ		; ArrayWrapper<short>::getArray
; Function compile flags: /Ogtpy
;	COMDAT ?getArray@?$ArrayWrapper@F@@QBEPBFXZ
_TEXT	SEGMENT
?getArray@?$ArrayWrapper@F@@QBEPBFXZ PROC		; ArrayWrapper<short>::getArray, COMDAT
; _this$ = ecx

; 386  : 		return m_values;

	mov	eax, DWORD PTR [ecx]

; 387  : 	}

	ret	0
?getArray@?$ArrayWrapper@F@@QBEPBFXZ ENDP		; ArrayWrapper<short>::getArray
_TEXT	ENDS
PUBLIC	?getCount@?$ArrayWrapper@F@@QBEHXZ		; ArrayWrapper<short>::getCount
; Function compile flags: /Ogtpy
;	COMDAT ?getCount@?$ArrayWrapper@F@@QBEHXZ
_TEXT	SEGMENT
?getCount@?$ArrayWrapper@F@@QBEHXZ PROC			; ArrayWrapper<short>::getCount, COMDAT
; _this$ = ecx

; 391  : 		return m_count;

	mov	eax, DWORD PTR [ecx+4]

; 392  : 	}

	ret	0
?getCount@?$ArrayWrapper@F@@QBEHXZ ENDP			; ArrayWrapper<short>::getCount
_TEXT	ENDS
PUBLIC	??$?5F@FDataStream@@QAEAAV0@AAF@Z		; FDataStream::operator>><short>
EXTRN	?Read@FDataStream@@IAEXAAF@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5F@FDataStream@@QAEAAV0@AAF@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5F@FDataStream@@QAEAAV0@AAF@Z PROC			; FDataStream::operator>><short>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAF@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5F@FDataStream@@QAEAAV0@AAF@Z ENDP			; FDataStream::operator>><short>
_TEXT	ENDS
PUBLIC	??$?6F@FDataStream@@QAEAAV0@ABF@Z		; FDataStream::operator<<<short>
EXTRN	?Write@FDataStream@@IAEXABF@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6F@FDataStream@@QAEAAV0@ABF@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6F@FDataStream@@QAEAAV0@ABF@Z PROC			; FDataStream::operator<<<short>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABF@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6F@FDataStream@@QAEAAV0@ABF@Z ENDP			; FDataStream::operator<<<short>
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?getMap@CvGlobals@@QAEAAVCvMap@@XZ		; CvGlobals::getMap
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getMap@CvGlobals@@QAEAAVCvMap@@XZ
_TEXT	SEGMENT
?getMap@CvGlobals@@QAEAAVCvMap@@XZ PROC			; CvGlobals::getMap, COMDAT
; _this$ = ecx

; 175  : 		return *m_map;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+52]

; 176  : 	}

	ret	0
?getMap@CvGlobals@@QAEAAVCvMap@@XZ ENDP			; CvGlobals::getMap
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	?getPlotDirectionX@CvGlobals@@QAEPAHXZ		; CvGlobals::getPlotDirectionX
; Function compile flags: /Ogtpy
;	COMDAT ?getPlotDirectionX@CvGlobals@@QAEPAHXZ
_TEXT	SEGMENT
?getPlotDirectionX@CvGlobals@@QAEPAHXZ PROC		; CvGlobals::getPlotDirectionX, COMDAT
; _this$ = ecx

; 191  : 		return m_aiPlotDirectionX;

	lea	eax, DWORD PTR [ecx+112]

; 192  : 	}

	ret	0
?getPlotDirectionX@CvGlobals@@QAEPAHXZ ENDP		; CvGlobals::getPlotDirectionX
_TEXT	ENDS
PUBLIC	?getPlotDirectionY@CvGlobals@@QAEPAHXZ		; CvGlobals::getPlotDirectionY
; Function compile flags: /Ogtpy
;	COMDAT ?getPlotDirectionY@CvGlobals@@QAEPAHXZ
_TEXT	SEGMENT
?getPlotDirectionY@CvGlobals@@QAEPAHXZ PROC		; CvGlobals::getPlotDirectionY, COMDAT
; _this$ = ecx

; 195  : 		return m_aiPlotDirectionY;

	lea	eax, DWORD PTR [ecx+136]

; 196  : 	}

	ret	0
?getPlotDirectionY@CvGlobals@@QAEPAHXZ ENDP		; CvGlobals::getPlotDirectionY
_TEXT	ENDS
PUBLIC	?getNUM_UNIT_AND_TECH_PREREQS@CvGlobals@@QAEHXZ	; CvGlobals::getNUM_UNIT_AND_TECH_PREREQS
; Function compile flags: /Ogtpy
;	COMDAT ?getNUM_UNIT_AND_TECH_PREREQS@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getNUM_UNIT_AND_TECH_PREREQS@CvGlobals@@QAEHXZ PROC	; CvGlobals::getNUM_UNIT_AND_TECH_PREREQS, COMDAT
; _this$ = ecx

; 5352 : 		return m_iNUM_UNIT_AND_TECH_PREREQS;

	mov	eax, DWORD PTR [ecx+6276]

; 5353 : 	}

	ret	0
?getNUM_UNIT_AND_TECH_PREREQS@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getNUM_UNIT_AND_TECH_PREREQS
_TEXT	ENDS
PUBLIC	?getBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD@CvGlobals@@QAEHXZ ; CvGlobals::getBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD
; Function compile flags: /Ogtpy
;	COMDAT ?getBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD@CvGlobals@@QAEHXZ PROC ; CvGlobals::getBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD, COMDAT
; _this$ = ecx

; 6108 : 		return m_iBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD;

	mov	eax, DWORD PTR [ecx+7032]

; 6109 : 	}

	ret	0
?getBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD
_TEXT	ENDS
PUBLIC	?getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING@CvGlobals@@QAEHXZ ; CvGlobals::getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING
; Function compile flags: /Ogtpy
;	COMDAT ?getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING@CvGlobals@@QAEHXZ PROC ; CvGlobals::getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING, COMDAT
; _this$ = ecx

; 6112 : 		return m_iBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING;

	mov	eax, DWORD PTR [ecx+7036]

; 6113 : 	}

	ret	0
?getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING
_TEXT	ENDS
PUBLIC	?getBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL@CvGlobals@@QAEHXZ ; CvGlobals::getBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL
; Function compile flags: /Ogtpy
;	COMDAT ?getBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL@CvGlobals@@QAEHXZ PROC ; CvGlobals::getBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL, COMDAT
; _this$ = ecx

; 6116 : 		return m_iBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL;

	mov	eax, DWORD PTR [ecx+7040]

; 6117 : 	}

	ret	0
?getBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL
_TEXT	ENDS
PUBLIC	?getBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP@CvGlobals@@QAEHXZ ; CvGlobals::getBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP
; Function compile flags: /Ogtpy
;	COMDAT ?getBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP@CvGlobals@@QAEHXZ PROC ; CvGlobals::getBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP, COMDAT
; _this$ = ecx

; 6120 : 		return m_iBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP;

	mov	eax, DWORD PTR [ecx+7044]

; 6121 : 	}

	ret	0
?getBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP
_TEXT	ENDS
PUBLIC	?getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL@CvGlobals@@QAEHXZ ; CvGlobals::getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL
; Function compile flags: /Ogtpy
;	COMDAT ?getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL@CvGlobals@@QAEHXZ PROC ; CvGlobals::getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL, COMDAT
; _this$ = ecx

; 6124 : 		return m_iBARBARIAN_CAMP_COASTAL_SPAWN_ROLL;

	mov	eax, DWORD PTR [ecx+7048]

; 6125 : 	}

	ret	0
?getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL
_TEXT	ENDS
PUBLIC	?getBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN@CvGlobals@@QAEHXZ ; CvGlobals::getBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN
; Function compile flags: /Ogtpy
;	COMDAT ?getBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN@CvGlobals@@QAEHXZ PROC ; CvGlobals::getBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN, COMDAT
; _this$ = ecx

; 6132 : 		return m_iBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN;

	mov	eax, DWORD PTR [ecx+7056]

; 6133 : 	}

	ret	0
?getBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN
_TEXT	ENDS
PUBLIC	?getMAX_BARBARIANS_FROM_CAMP_NEARBY@CvGlobals@@QAEHXZ ; CvGlobals::getMAX_BARBARIANS_FROM_CAMP_NEARBY
; Function compile flags: /Ogtpy
;	COMDAT ?getMAX_BARBARIANS_FROM_CAMP_NEARBY@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMAX_BARBARIANS_FROM_CAMP_NEARBY@CvGlobals@@QAEHXZ PROC ; CvGlobals::getMAX_BARBARIANS_FROM_CAMP_NEARBY, COMDAT
; _this$ = ecx

; 6136 : 		return m_iMAX_BARBARIANS_FROM_CAMP_NEARBY;

	mov	eax, DWORD PTR [ecx+7060]

; 6137 : 	}

	ret	0
?getMAX_BARBARIANS_FROM_CAMP_NEARBY@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getMAX_BARBARIANS_FROM_CAMP_NEARBY
_TEXT	ENDS
PUBLIC	?getMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE@CvGlobals@@QAEHXZ ; CvGlobals::getMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE
; Function compile flags: /Ogtpy
;	COMDAT ?getMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE@CvGlobals@@QAEHXZ PROC ; CvGlobals::getMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE, COMDAT
; _this$ = ecx

; 6140 : 		return m_iMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE;

	mov	eax, DWORD PTR [ecx+7064]

; 6141 : 	}

	ret	0
?getMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE@CvGlobals@@QAEHXZ ENDP ; CvGlobals::getMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE
_TEXT	ENDS
PUBLIC	?getBARBARIAN_CAMP_IMPROVEMENT@CvGlobals@@QAEHXZ ; CvGlobals::getBARBARIAN_CAMP_IMPROVEMENT
; Function compile flags: /Ogtpy
;	COMDAT ?getBARBARIAN_CAMP_IMPROVEMENT@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getBARBARIAN_CAMP_IMPROVEMENT@CvGlobals@@QAEHXZ PROC	; CvGlobals::getBARBARIAN_CAMP_IMPROVEMENT, COMDAT
; _this$ = ecx

; 7355 : 		return m_iBARBARIAN_CAMP_IMPROVEMENT;

	mov	eax, DWORD PTR [ecx+8548]

; 7356 : 	}

	ret	0
?getBARBARIAN_CAMP_IMPROVEMENT@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getBARBARIAN_CAMP_IMPROVEMENT
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	?isCity@CvPlot@@QBE_NXZ				; CvPlot::isCity
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?isCity@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isCity@CvPlot@@QBE_NXZ PROC				; CvPlot::isCity, COMDAT
; _this$ = ecx

; 245  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN1@isCity
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@isCity

; 246  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID)) != NULL;

	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	neg	eax
	sbb	eax, eax
	neg	eax

; 249  : 	}

	ret	0
$LN1@isCity:

; 247  : 
; 248  : 		return false;

	xor	al, al

; 249  : 	}

	ret	0
?isCity@CvPlot@@QBE_NXZ ENDP				; CvPlot::isCity
_TEXT	ENDS
PUBLIC	?getX@CvPlot@@QBEHXZ				; CvPlot::getX
; Function compile flags: /Ogtpy
;	COMDAT ?getX@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getX@CvPlot@@QBEHXZ PROC				; CvPlot::getX, COMDAT
; _this$ = ecx

; 307  : 		return m_iX;

	movsx	eax, WORD PTR [ecx]

; 308  : 	}

	ret	0
?getX@CvPlot@@QBEHXZ ENDP				; CvPlot::getX
_TEXT	ENDS
PUBLIC	?getY@CvPlot@@QBEHXZ				; CvPlot::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getY@CvPlot@@QBEHXZ PROC				; CvPlot::getY, COMDAT
; _this$ = ecx

; 312  : 		return m_iY;

	movsx	eax, WORD PTR [ecx+2]

; 313  : 	}

	ret	0
?getY@CvPlot@@QBEHXZ ENDP				; CvPlot::getY
_TEXT	ENDS
PUBLIC	?getArea@CvPlot@@QBEHXZ				; CvPlot::getArea
; Function compile flags: /Ogtpy
;	COMDAT ?getArea@CvPlot@@QBEHXZ
_TEXT	SEGMENT
?getArea@CvPlot@@QBEHXZ PROC				; CvPlot::getArea, COMDAT
; _this$ = ecx

; 324  : 		return m_iArea;

	mov	eax, DWORD PTR [ecx+356]

; 325  : 	}

	ret	0
?getArea@CvPlot@@QBEHXZ ENDP				; CvPlot::getArea
_TEXT	ENDS
PUBLIC	?isWater@CvPlot@@QBE_NXZ			; CvPlot::isWater
; Function compile flags: /Ogtpy
;	COMDAT ?isWater@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isWater@CvPlot@@QBE_NXZ PROC				; CvPlot::isWater, COMDAT
; _this$ = ecx

; 409  : 		return (PlotTypes)m_ePlotType == PLOT_OCEAN;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], 3
	sete	al

; 410  : 	};

	ret	0
?isWater@CvPlot@@QBE_NXZ ENDP				; CvPlot::isWater
_TEXT	ENDS
PUBLIC	?isMountain@CvPlot@@QBE_NXZ			; CvPlot::isMountain
; Function compile flags: /Ogtpy
;	COMDAT ?isMountain@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isMountain@CvPlot@@QBE_NXZ PROC			; CvPlot::isMountain, COMDAT
; _this$ = ecx

; 422  : 		return (PlotTypes)m_ePlotType == PLOT_MOUNTAIN;

	xor	eax, eax
	cmp	BYTE PTR [ecx+5], al
	sete	al

; 423  : 	};

	ret	0
?isMountain@CvPlot@@QBE_NXZ ENDP			; CvPlot::isMountain
_TEXT	ENDS
PUBLIC	?isImpassable@CvPlot@@QBE_NXZ			; CvPlot::isImpassable
; Function compile flags: /Ogtpy
;	COMDAT ?isImpassable@CvPlot@@QBE_NXZ
_TEXT	SEGMENT
?isImpassable@CvPlot@@QBE_NXZ PROC			; CvPlot::isImpassable, COMDAT
; _this$ = ecx

; 444  : 		return m_bIsImpassable;

	mov	al, BYTE PTR [ecx+462]
	shr	al, 7

; 445  : 	}

	ret	0
?isImpassable@CvPlot@@QBE_NXZ ENDP			; CvPlot::isImpassable
_TEXT	ENDS
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
; Function compile flags: /Ogtpy
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN1@getPlotCit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 537  : 	}

	ret	0
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax

; 537  : 	}

	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
_TEXT	ENDS
PUBLIC	?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z		; CvPlot::PlotBoolField::GetBit
; Function compile flags: /Ogtpy
;	COMDAT ?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z
_TEXT	SEGMENT
_uiEntry$ = 8						; size = 4
?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z PROC		; CvPlot::PlotBoolField::GetBit, COMDAT
; _this$ = ecx

; 767  : 		{

	mov	edx, ecx

; 768  : 			const uint uiOffset = uiEntry/eSize;

	mov	ecx, DWORD PTR _uiEntry$[esp-4]
	push	esi
	mov	eax, ecx
	shr	eax, 5

; 769  : 			return m_dwBits[uiOffset] & 1<<(uiEntry-(eSize*uiOffset));

	mov	esi, eax
	shl	esi, 5
	sub	ecx, esi
	mov	esi, 1
	shl	esi, cl
	test	esi, DWORD PTR [edx+eax*4]
	pop	esi
	setne	al

; 770  : 		}

	ret	4
?GetBit@PlotBoolField@CvPlot@@QBE_NI@Z ENDP		; CvPlot::PlotBoolField::GetBit
_TEXT	ENDS
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 88   : 	if(bWrap)

	cmp	BYTE PTR _bWrap$[esp-4], 0
	mov	eax, DWORD PTR _iCoord$[esp-4]
	je	SHORT $LN5@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)
; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	ecx, DWORD PTR _iRange$[esp-4]
	test	eax, eax
	jge	SHORT $LN3@coordRange
	cdq
	idiv	ecx
	mov	eax, edx
	add	eax, ecx

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	cmp	eax, ecx
	jl	SHORT $LN5@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	cdq
	idiv	ecx
	mov	eax, edx
$LN5@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
_TEXT	ENDS
PUBLIC	?numPlots@CvMap@@QBEHXZ				; CvMap::numPlots
; Function compile flags: /Ogtpy
;	COMDAT ?numPlots@CvMap@@QBEHXZ
_TEXT	SEGMENT
?numPlots@CvMap@@QBEHXZ PROC				; CvMap::numPlots, COMDAT
; _this$ = ecx

; 170  : 		return m_iGridSize;

	mov	eax, DWORD PTR [ecx+4028]

; 171  : 	}

	ret	0
?numPlots@CvMap@@QBEHXZ ENDP				; CvMap::numPlots
_TEXT	ENDS
PUBLIC	?getGridWidth@CvMap@@QBEHXZ			; CvMap::getGridWidth
; Function compile flags: /Ogtpy
;	COMDAT ?getGridWidth@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridWidth@CvMap@@QBEHXZ PROC			; CvMap::getGridWidth, COMDAT
; _this$ = ecx

; 198  : 		return m_iGridWidth;

	mov	eax, DWORD PTR [ecx+4020]

; 199  : 	}

	ret	0
?getGridWidth@CvMap@@QBEHXZ ENDP			; CvMap::getGridWidth
_TEXT	ENDS
PUBLIC	?getGridHeight@CvMap@@QBEHXZ			; CvMap::getGridHeight
; Function compile flags: /Ogtpy
;	COMDAT ?getGridHeight@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridHeight@CvMap@@QBEHXZ PROC			; CvMap::getGridHeight, COMDAT
; _this$ = ecx

; 206  : 		return m_iGridHeight;

	mov	eax, DWORD PTR [ecx+4024]

; 207  : 	}

	ret	0
?getGridHeight@CvMap@@QBEHXZ ENDP			; CvMap::getGridHeight
_TEXT	ENDS
PUBLIC	?isWrapX@CvMap@@QBE_NXZ				; CvMap::isWrapX
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapX@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapX@CvMap@@QBE_NXZ PROC				; CvMap::isWrapX, COMDAT
; _this$ = ecx

; 228  : 		return m_bWrapX;

	mov	al, BYTE PTR [ecx+4056]

; 229  : 	}

	ret	0
?isWrapX@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapX
_TEXT	ENDS
PUBLIC	?isWrapY@CvMap@@QBE_NXZ				; CvMap::isWrapY
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapY@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapY@CvMap@@QBE_NXZ PROC				; CvMap::isWrapY, COMDAT
; _this$ = ecx

; 233  : 		return m_bWrapY;

	mov	al, BYTE PTR [ecx+4057]

; 234  : 	}

	ret	0
?isWrapY@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapY
_TEXT	ENDS
PUBLIC	?plotByIndex@CvMap@@QBEPAVCvPlot@@H@Z		; CvMap::plotByIndex
; Function compile flags: /Ogtpy
;	COMDAT ?plotByIndex@CvMap@@QBEPAVCvPlot@@H@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?plotByIndex@CvMap@@QBEPAVCvPlot@@H@Z PROC		; CvMap::plotByIndex, COMDAT
; _this$ = ecx

; 263  : 		return (((iIndex >= 0) && (iIndex < (numPlots()))) ? &(m_pMapPlots[iIndex]) : NULL);

	mov	eax, DWORD PTR _iIndex$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@plotByInde
	cmp	eax, DWORD PTR [ecx+4028]
	jge	SHORT $LN3@plotByInde
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]

; 264  : 	}

	ret	4
$LN3@plotByInde:

; 263  : 		return (((iIndex >= 0) && (iIndex < (numPlots()))) ? &(m_pMapPlots[iIndex]) : NULL);

	xor	eax, eax

; 264  : 	}

	ret	4
?plotByIndex@CvMap@@QBEPAVCvPlot@@H@Z ENDP		; CvMap::plotByIndex
_TEXT	ENDS
PUBLIC	?plotByIndexUnchecked@CvMap@@QBEPAVCvPlot@@H@Z	; CvMap::plotByIndexUnchecked
; Function compile flags: /Ogtpy
;	COMDAT ?plotByIndexUnchecked@CvMap@@QBEPAVCvPlot@@H@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?plotByIndexUnchecked@CvMap@@QBEPAVCvPlot@@H@Z PROC	; CvMap::plotByIndexUnchecked, COMDAT
; _this$ = ecx

; 268  : 		return &m_pMapPlots[iIndex];

	mov	eax, DWORD PTR _iIndex$[esp-4]
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]

; 269  : 	}

	ret	4
?plotByIndexUnchecked@CvMap@@QBEPAVCvPlot@@H@Z ENDP	; CvMap::plotByIndexUnchecked
_TEXT	ENDS
PUBLIC	?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z		; CvTeam::getTeam
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvteam.h
;	COMDAT ?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z PROC		; CvTeam::getTeam, COMDAT

; 29   : 		CvAssertMsg(eTeam != NO_TEAM, "eTeam is not assigned a valid value");
; 30   : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is not assigned a valid value");
; 31   : 		return m_aTeams[eTeam];

	mov	eax, DWORD PTR _eTeam$[esp-4]
	imul	eax, 2984				; 00000ba8H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams

; 32   : 	}

	ret	0
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z ENDP		; CvTeam::getTeam
_TEXT	ENDS
PUBLIC	??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z PROC ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 771  : 		}

	ret	4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ENDP ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ		; FAutoVariable<char,CvPlot>::operator char const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ
_TEXT	SEGMENT
??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ PROC		; FAutoVariable<char,CvPlot>::operator char const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@DVCvPlot@@@@QBEABDXZ ENDP		; FAutoVariable<char,CvPlot>::operator char const &
_TEXT	ENDS
PUBLIC	??$?5I@FDataStream@@QAEAAV0@AAI@Z		; FDataStream::operator>><unsigned int>
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5I@FDataStream@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5I@FDataStream@@QAEAAV0@AAI@Z PROC			; FDataStream::operator>><unsigned int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5I@FDataStream@@QAEAAV0@AAI@Z ENDP			; FDataStream::operator>><unsigned int>
_TEXT	ENDS
PUBLIC	??$?6I@FDataStream@@QAEAAV0@ABI@Z		; FDataStream::operator<<<unsigned int>
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6I@FDataStream@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6I@FDataStream@@QAEAAV0@ABI@Z PROC			; FDataStream::operator<<<unsigned int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6I@FDataStream@@QAEAAV0@ABI@Z ENDP			; FDataStream::operator<<<unsigned int>
_TEXT	ENDS
PUBLIC	?dxWrap@@YAHH@Z					; dxWrap
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?dxWrap@@YAHH@Z
_TEXT	SEGMENT
_iDX$ = 8						; size = 4
?dxWrap@@YAHH@Z PROC					; dxWrap, COMDAT

; 74   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

	mov	edx, DWORD PTR [eax+4020]
	cmp	BYTE PTR [eax+4056], 0
	mov	eax, DWORD PTR _iDX$[esp-4]
	je	SHORT $LN13@dxWrap
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN11@dxWrap
	sub	eax, edx

; 76   : }

	ret	0

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

$LN11@dxWrap:
	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN13@dxWrap
	add	eax, edx
$LN13@dxWrap:

; 76   : }

	ret	0
?dxWrap@@YAHH@Z ENDP					; dxWrap
_TEXT	ENDS
PUBLIC	?dyWrap@@YAHH@Z					; dyWrap
; Function compile flags: /Ogtpy
;	COMDAT ?dyWrap@@YAHH@Z
_TEXT	SEGMENT
_iDY$ = 8						; size = 4
?dyWrap@@YAHH@Z PROC					; dyWrap, COMDAT

; 80   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

	mov	edx, DWORD PTR [eax+4024]
	cmp	BYTE PTR [eax+4057], 0
	mov	eax, DWORD PTR _iDY$[esp-4]
	je	SHORT $LN13@dyWrap
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN11@dyWrap
	sub	eax, edx

; 82   : }

	ret	0

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

$LN11@dyWrap:
	neg	ecx
	cmp	eax, ecx
	jge	SHORT $LN13@dyWrap
	add	eax, edx
$LN13@dyWrap:

; 82   : }

	ret	0
?dyWrap@@YAHH@Z ENDP					; dyWrap
_TEXT	ENDS
PUBLIC	?plotDistance@@YAHHHHH@Z			; plotDistance
; Function compile flags: /Ogtpy
;	COMDAT ?plotDistance@@YAHHHHH@Z
_TEXT	SEGMENT
_iDX$ = 8						; size = 4
_iX1$ = 8						; size = 4
_iY1$ = 12						; size = 4
_iDY$ = 16						; size = 4
_iX2$ = 16						; size = 4
_iY2$ = 20						; size = 4
?plotDistance@@YAHHHHH@Z PROC				; plotDistance, COMDAT

; 145  : 	int iDX;
; 146  : 	int iWrappedDX = dxWrap(iX2 - iX1);

	mov	eax, DWORD PTR _iX2$[esp-4]
	sub	eax, DWORD PTR _iX1$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebx+4056], 0
	mov	edx, DWORD PTR [ebx+4020]
	push	ebp
	push	esi
	je	SHORT $LN13@plotDistan
	mov	ecx, edx
	shr	ecx, 1
	cmp	eax, ecx
	jle	SHORT $LN15@plotDistan
	sub	eax, edx
	jmp	SHORT $LN13@plotDistan
$LN15@plotDistan:
	neg	ecx
	cmp	eax, ecx
	lea	ecx, DWORD PTR [edx+eax]
	jl	SHORT $LN17@plotDistan
$LN13@plotDistan:
	mov	ecx, eax
$LN17@plotDistan:

; 147  : 	int iWrappedDY = dyWrap(iY2 - iY1);

	mov	eax, DWORD PTR _iY2$[esp+8]
	mov	esi, DWORD PTR [ebx+4024]
	push	edi
	mov	edi, DWORD PTR _iY1$[esp+12]
	sub	eax, edi
	cmp	BYTE PTR [ebx+4057], 0
	je	SHORT $LN27@plotDistan
	mov	edx, esi
	shr	edx, 1
	cmp	eax, edx
	jle	SHORT $LN29@plotDistan
	sub	eax, esi
	jmp	SHORT $LN27@plotDistan
$LN29@plotDistan:
	neg	edx
	cmp	eax, edx
	lea	ebp, DWORD PTR [esi+eax]
	jl	SHORT $LN31@plotDistan
$LN27@plotDistan:
	mov	ebp, eax
$LN31@plotDistan:

; 148  : 	int iDY = abs(iWrappedDY);

	mov	eax, ebp
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDY$[esp+12], eax

; 149  : 
; 150  : 	// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 151  : 	int iHX1 = xToHexspaceX(iX1, iY1);

	test	edi, edi
	jl	SHORT $LN35@plotDistan
	mov	eax, edi
	jmp	SHORT $LN59@plotDistan
$LN35@plotDistan:
	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
$LN59@plotDistan:
	mov	esi, DWORD PTR _iX1$[esp+12]
	sar	eax, 1
	sub	esi, eax

; 152  : 	int iHX2 = xToHexspaceX(iX1 + iWrappedDX, iY1 + iWrappedDY);

	lea	eax, DWORD PTR [edi+ebp]
	pop	edi
	test	eax, eax
	jge	SHORT $LN60@plotDistan
	dec	eax
	cdq
	sub	eax, edx
$LN60@plotDistan:

; 153  : 
; 154  : 	iDX = abs(dxWrap(iHX2 - iHX1));

	mov	edx, DWORD PTR [ebx+4020]
	sar	eax, 1
	sub	ecx, eax
	add	ecx, DWORD PTR _iX1$[esp+8]
	sub	ecx, esi
	cmp	BYTE PTR [ebx+4056], 0
	je	SHORT $LN49@plotDistan
	mov	eax, edx
	shr	eax, 1
	cmp	ecx, eax
	jle	SHORT $LN51@plotDistan
	mov	eax, ecx
	sub	eax, edx
	jmp	SHORT $LN53@plotDistan
$LN51@plotDistan:
	neg	eax
	cmp	ecx, eax
	lea	eax, DWORD PTR [edx+ecx]
	jl	SHORT $LN53@plotDistan
$LN49@plotDistan:
	mov	eax, ecx
$LN53@plotDistan:
	cdq
	xor	eax, edx
	sub	eax, edx

; 155  : 
; 156  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 157  : 	if (((iHX2 - iHX1) ^ (iWrappedDY)) >= 0)  // the signs match
; 158  : #else
; 159  : 	if((iHX2 - iHX1 >= 0) == (iWrappedDY >= 0))  // the signs match

	xor	edx, edx
	test	ecx, ecx
	setge	dl
	xor	ecx, ecx
	test	ebp, ebp
	setge	cl
	pop	esi
	pop	ebp
	mov	DWORD PTR _iDX$[esp], eax
	pop	ebx
	cmp	edx, ecx
	jne	SHORT $LN2@plotDistan

; 160  : #endif
; 161  : 	{
; 162  : 		return iDX + iDY;

	mov	edx, DWORD PTR _iDY$[esp-4]
	add	eax, edx

; 170  : #endif
; 171  : 	}
; 172  : }

	ret	0
$LN2@plotDistan:

; 163  : 	}
; 164  : 	else
; 165  : 	{
; 166  : #ifdef NQM_FAST_COMP
; 167  : 		return (MAX(iDX, iDY));
; 168  : #else
; 169  : 		return (std::max(iDX, iDY));

	cmp	eax, DWORD PTR _iDY$[esp-4]
	lea	eax, DWORD PTR _iDY$[esp-4]
	jl	SHORT $LN58@plotDistan
	lea	eax, DWORD PTR _iDX$[esp-4]
$LN58@plotDistan:
	mov	eax, DWORD PTR [eax]

; 170  : #endif
; 171  : 	}
; 172  : }

	ret	0
?plotDistance@@YAHHHHH@Z ENDP				; plotDistance
_TEXT	ENDS
PUBLIC	?CanBarbariansSpawn@CvBarbarians@@CA_NXZ	; CvBarbarians::CanBarbariansSpawn
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvbarbarians.cpp
;	COMDAT ?CanBarbariansSpawn@CvBarbarians@@CA_NXZ
_TEXT	SEGMENT
?CanBarbariansSpawn@CvBarbarians@@CA_NXZ PROC		; CvBarbarians::CanBarbariansSpawn, COMDAT

; 83   : 	CvGame& kGame = GC.getGame();
; 84   : 	if (kGame.getElapsedGameTurns() < 10)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	cmp	eax, 10					; 0000000aH
	setge	al

; 85   : 	{
; 86   : 		return false;
; 87   : 	}
; 88   : 
; 89   : 	return true;
; 90   : }

	ret	0
?CanBarbariansSpawn@CvBarbarians@@CA_NXZ ENDP		; CvBarbarians::CanBarbariansSpawn
_TEXT	ENDS
PUBLIC	?DoCampActivationNotice@CvBarbarians@@CAXPAVCvPlot@@@Z ; CvBarbarians::DoCampActivationNotice
EXTRN	?getBarbPercent@CvGameSpeedInfo@@QBEHXZ:PROC	; CvGameSpeedInfo::getBarbPercent
EXTRN	?getGameSpeedInfo@CvGlobals@@QAEPAVCvGameSpeedInfo@@W4GameSpeedTypes@@@Z:PROC ; CvGlobals::getGameSpeedInfo
EXTRN	?getGameSpeedType@CvGame@@QBE?AW4GameSpeedTypes@@XZ:PROC ; CvGame::getGameSpeedType
EXTRN	?getBarbSpawnMod@CvHandicapInfo@@QBEHXZ:PROC	; CvHandicapInfo::getBarbSpawnMod
EXTRN	?getHandicapInfo@CvGlobals@@QAEPAVCvHandicapInfo@@W4HandicapTypes@@@Z:PROC ; CvGlobals::getHandicapInfo
EXTRN	?getHandicapType@CvGame@@QBE?AW4HandicapTypes@@XZ:PROC ; CvGame::getHandicapType
EXTRN	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z:PROC ; CvGame::isOption
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
; Function compile flags: /Ogtpy
;	COMDAT ?DoCampActivationNotice@CvBarbarians@@CAXPAVCvPlot@@@Z
_TEXT	SEGMENT
_iNumUnitsSpawned$ = -8					; size = 4
$T219460 = -4						; size = 4
_pPlot$ = 8						; size = 4
?DoCampActivationNotice@CvBarbarians@@CAXPAVCvPlot@@@Z PROC ; CvBarbarians::DoCampActivationNotice, COMDAT

; 107  : {

	sub	esp, 8
	push	ebx
	push	esi
	push	edi

; 108  : 	CvGame& kGame = GC.getGame();

	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48

; 109  : 	// Default to between 8 and 12 turns per spawn
; 110  : 	int iNumTurnsToSpawn = 8 + kGame.getJonRandNum(5, "Barb Spawn Rand call");

	push	OFFSET $SG218397
	push	5
	mov	ecx, edi
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	mov	esi, eax

; 111  : 
; 112  : 	// Raging
; 113  : 	if (kGame.isOption(GAMEOPTION_RAGING_BARBARIANS))

	push	2
	mov	ecx, edi
	add	esi, 8
	call	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z ; CvGame::isOption
	test	al, al
	je	SHORT $LN3@DoCampActi

; 114  : 		iNumTurnsToSpawn /= 2;

	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
$LN3@DoCampActi:

; 115  : 
; 116  : 	// Num Units Spawned
; 117  : 	int iNumUnitsSpawned = m_aiPlotBarbCampNumUnitsSpawned[pPlot->GetPlotIndex()];

	mov	ebx, DWORD PTR _pPlot$[esp+16]
	mov	ecx, ebx
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	ecx, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	movsx	eax, WORD PTR [ecx+eax*2]
	mov	DWORD PTR _iNumUnitsSpawned$[esp+20], eax

; 118  : 
; 119  : 	// Reduce turns between spawn if we've pumped out more guys (meaning we're further into the game)
; 120  : 	iNumTurnsToSpawn -= min(3, iNumUnitsSpawned);	// -1 turns if we've spawned one Unit, -3 turns if we've spawned three

	cmp	eax, 3
	mov	DWORD PTR $T219460[esp+20], 3
	lea	eax, DWORD PTR _iNumUnitsSpawned$[esp+20]
	jl	SHORT $LN11@DoCampActi
	lea	eax, DWORD PTR $T219460[esp+20]
$LN11@DoCampActi:
	sub	esi, DWORD PTR [eax]

; 121  : 
; 122  : 	// Increment # of barbs spawned from this camp
; 123  : 	m_aiPlotBarbCampNumUnitsSpawned[pPlot->GetPlotIndex()]++;	// This starts at -1 so when a camp is first created it will bump up to 0, which is correct

	mov	ecx, ebx
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	edx, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	inc	WORD PTR [edx+eax*2]
	lea	eax, DWORD PTR [edx+eax*2]

; 124  : 
; 125  : 	//// If it's too early to spawn then add in a small amount to delay things a bit - between 3 and 6 extra turns
; 126  : 	//if (CanBarbariansSpawn())
; 127  : 	//{
; 128  : 	//	iNumTurnsToSpawn += 3;
; 129  : 	//	iNumTurnsToSpawn += auto_ptr<ICvGame1> pGame = GameCore::GetGame();\n.getJonRandNum(4, "Early game Barb Spawn Rand call");
; 130  : 	//}
; 131  : 
; 132  : 	// Difficulty level can add time between spawns (e.g. Settler is +8 turns)
; 133  : 	CvHandicapInfo* pHandicapInfo = GC.getHandicapInfo(kGame.getHandicapType());

	mov	ecx, edi
	call	?getHandicapType@CvGame@@QBE?AW4HandicapTypes@@XZ ; CvGame::getHandicapType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getHandicapInfo@CvGlobals@@QAEPAVCvHandicapInfo@@W4HandicapTypes@@@Z ; CvGlobals::getHandicapInfo

; 134  : 	if (pHandicapInfo)

	test	eax, eax
	je	SHORT $LN2@DoCampActi

; 135  : 		iNumTurnsToSpawn += pHandicapInfo->getBarbSpawnMod();

	mov	ecx, eax
	call	?getBarbSpawnMod@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getBarbSpawnMod
	add	esi, eax
$LN2@DoCampActi:

; 136  : 
; 137  : 	// Game Speed can increase or decrease amount of time between spawns (ranges from 67 on Quick to 400 on Marathon)
; 138  : 	CvGameSpeedInfo* pGameSpeedInfo = GC.getGameSpeedInfo(kGame.getGameSpeedType());

	mov	ecx, edi
	call	?getGameSpeedType@CvGame@@QBE?AW4GameSpeedTypes@@XZ ; CvGame::getGameSpeedType
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getGameSpeedInfo@CvGlobals@@QAEPAVCvGameSpeedInfo@@W4GameSpeedTypes@@@Z ; CvGlobals::getGameSpeedInfo

; 139  : 	if (pGameSpeedInfo)

	test	eax, eax
	je	SHORT $LN1@DoCampActi

; 140  : 	{
; 141  : 		iNumTurnsToSpawn *= pGameSpeedInfo->getBarbPercent();

	mov	ecx, eax
	call	?getBarbPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getBarbPercent
	mov	ecx, eax
	imul	ecx, esi

; 142  : 		iNumTurnsToSpawn /= 100;

	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	esi, eax
$LN1@DoCampActi:

; 143  : 	}
; 144  : 
; 145  : 	m_aiPlotBarbCampSpawnCounter[pPlot->GetPlotIndex()] = iNumTurnsToSpawn;

	mov	ecx, ebx
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	ecx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	pop	edi
	mov	WORD PTR [ecx+eax*2], si
	pop	esi
	pop	ebx

; 146  : }

	add	esp, 8
	ret	0
?DoCampActivationNotice@CvBarbarians@@CAXPAVCvPlot@@@Z ENDP ; CvBarbarians::DoCampActivationNotice
_TEXT	ENDS
PUBLIC	?BeginTurn@CvBarbarians@@SAXXZ			; CvBarbarians::BeginTurn
EXTRN	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ:PROC ; CvPlot::getImprovementType
EXTRN	?GetBarbarianCampImprovementType@CvGame@@QAE?AW4ImprovementTypes@@XZ:PROC ; CvGame::GetBarbarianCampImprovementType
; Function compile flags: /Ogtpy
;	COMDAT ?BeginTurn@CvBarbarians@@SAXXZ
_TEXT	SEGMENT
_eCamp$ = -4						; size = 4
?BeginTurn@CvBarbarians@@SAXXZ PROC			; CvBarbarians::BeginTurn, COMDAT

; 163  : {

	push	ecx

; 164  : 	CvGame &kGame = GC.getGame();
; 165  : 	const ImprovementTypes eCamp = kGame.GetBarbarianCampImprovementType();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	ebx
	push	ebp
	push	esi
	call	?GetBarbarianCampImprovementType@CvGame@@QAE?AW4ImprovementTypes@@XZ ; CvGame::GetBarbarianCampImprovementType

; 166  : 
; 167  : 	CvMap& kMap = GC.getMap();

	mov	ebx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 168  : 	int iWorldNumPlots = kMap.numPlots();

	mov	ebp, DWORD PTR [ebx+4028]

; 169  : 	for (int iPlotLoop = 0; iPlotLoop < iWorldNumPlots; iPlotLoop++)

	xor	esi, esi
	mov	DWORD PTR _eCamp$[esp+16], eax
	test	ebp, ebp
	jle	SHORT $LN6@BeginTurn
	push	edi
	xor	edi, edi
	npad	8
$LL26@BeginTurn:

; 170  : 	{
; 171  : 		if (m_aiPlotBarbCampSpawnCounter[iPlotLoop] > 0)

	mov	ecx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	movzx	eax, WORD PTR [ecx+esi*2]
	test	ax, ax
	jle	SHORT $LN5@BeginTurn

; 172  : 		{
; 173  : 			// No Camp here any more
; 174  : 			CvPlot* pPlot = kMap.plotByIndex(iPlotLoop);

	test	esi, esi
	jl	SHORT $LN19@BeginTurn
	cmp	esi, DWORD PTR [ebx+4028]
	jge	SHORT $LN19@BeginTurn
	mov	ecx, DWORD PTR [ebx+4068]
	add	ecx, edi
	jmp	SHORT $LN20@BeginTurn
$LN19@BeginTurn:
	xor	ecx, ecx
$LN20@BeginTurn:

; 175  : 
; 176  : 			if (pPlot->getImprovementType() != eCamp)

	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, DWORD PTR _eCamp$[esp+20]
	je	SHORT $LN4@BeginTurn

; 177  : 			{
; 178  : 				m_aiPlotBarbCampSpawnCounter[iPlotLoop] = -1;

	mov	ecx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	or	eax, -1
	mov	WORD PTR [ecx+esi*2], ax

; 179  : 				m_aiPlotBarbCampNumUnitsSpawned[iPlotLoop] = -1;

	or	edx, eax
	mov	eax, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	mov	WORD PTR [eax+esi*2], dx

; 180  : 			}
; 181  : 			else

	jmp	SHORT $LN7@BeginTurn
$LN4@BeginTurn:

; 169  : 	for (int iPlotLoop = 0; iPlotLoop < iWorldNumPlots; iPlotLoop++)

	mov	eax, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter

; 182  : 			{
; 183  : 				m_aiPlotBarbCampSpawnCounter[iPlotLoop]--;

	dec	WORD PTR [eax+esi*2]

; 184  : 			}

	jmp	SHORT $LN7@BeginTurn
$LN5@BeginTurn:

; 185  : 		}
; 186  : 
; 187  : 		// Counter is negative, meaning a camp was cleared here recently and isn't allowed to respawn in the area for a while
; 188  : 		else if (m_aiPlotBarbCampSpawnCounter[iPlotLoop] < -1)

	cmp	ax, -1
	jge	SHORT $LN7@BeginTurn

; 189  : 		{
; 190  : 			m_aiPlotBarbCampSpawnCounter[iPlotLoop]++;

	inc	WORD PTR [ecx+esi*2]
$LN7@BeginTurn:

; 169  : 	for (int iPlotLoop = 0; iPlotLoop < iWorldNumPlots; iPlotLoop++)

	inc	esi
	add	edi, 484				; 000001e4H
	cmp	esi, ebp
	jl	SHORT $LL26@BeginTurn
	pop	edi
$LN6@BeginTurn:
	pop	esi
	pop	ebp
	pop	ebx

; 191  : 		}
; 192  : 	}
; 193  : }

	pop	ecx
	ret	0
?BeginTurn@CvBarbarians@@SAXXZ ENDP			; CvBarbarians::BeginTurn
_TEXT	ENDS
PUBLIC	?MapInit@CvBarbarians@@SAXH@Z			; CvBarbarians::MapInit
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogtpy
;	COMDAT ?MapInit@CvBarbarians@@SAXH@Z
_TEXT	SEGMENT
_iWorldNumPlots$ = 8					; size = 4
?MapInit@CvBarbarians@@SAXH@Z PROC			; CvBarbarians::MapInit, COMDAT

; 198  : 	if (m_aiPlotBarbCampSpawnCounter != NULL)

	mov	eax, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	test	eax, eax
	je	SHORT $LN11@MapInit

; 199  : 	{
; 200  : 		SAFE_DELETE_ARRAY(m_aiPlotBarbCampSpawnCounter);

	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA, 0 ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
$LN11@MapInit:

; 201  : 	}
; 202  : 	if (m_aiPlotBarbCampNumUnitsSpawned != NULL)

	mov	eax, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	test	eax, eax
	je	SHORT $LN13@MapInit

; 203  : 	{
; 204  : 		SAFE_DELETE_ARRAY(m_aiPlotBarbCampNumUnitsSpawned);

	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	xor	eax, eax
	mov	DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA, eax ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
$LN13@MapInit:
	push	esi

; 205  : 	}
; 206  : 	
; 207  : 	int iI;
; 208  : 
; 209  : 	if (iWorldNumPlots > 0)

	mov	esi, DWORD PTR _iWorldNumPlots$[esp]
	test	esi, esi
	jle	$LN1@MapInit

; 210  : 	{
; 211  : 		if (m_aiPlotBarbCampSpawnCounter == NULL)

	cmp	DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA, 0 ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	jne	SHORT $LN5@MapInit

; 212  : 		{
; 213  : #ifdef AUI_WARNING_FIXES
; 214  : 			m_aiPlotBarbCampSpawnCounter = FNEW(int[iWorldNumPlots], c_eCiv5GameplayDLL, 0);
; 215  : #else
; 216  : 			m_aiPlotBarbCampSpawnCounter = FNEW(short[iWorldNumPlots], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	eax, esi
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	mov	DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA, eax ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	mov	eax, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	add	esp, 4
$LN5@MapInit:

; 217  : #endif
; 218  : 		}
; 219  : 		if (m_aiPlotBarbCampNumUnitsSpawned == NULL)

	test	eax, eax
	jne	SHORT $LN4@MapInit

; 220  : 		{
; 221  : #ifdef AUI_WARNING_FIXES
; 222  : 			m_aiPlotBarbCampNumUnitsSpawned = FNEW(int[iWorldNumPlots], c_eCiv5GameplayDLL, 0);
; 223  : #else
; 224  : 			m_aiPlotBarbCampNumUnitsSpawned = FNEW(short[iWorldNumPlots], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	eax, esi
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA, eax ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
$LN4@MapInit:

; 225  : #endif
; 226  : 		}
; 227  : 
; 228  : 		// Default values
; 229  : 		for (iI = 0; iI < iWorldNumPlots; ++iI)

	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN1@MapInit
	npad	6
$LL17@MapInit:

; 230  : 		{
; 231  : 			m_aiPlotBarbCampSpawnCounter[iI] = -1;

	mov	edx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	or	ecx, -1
	mov	WORD PTR [edx+eax*2], cx

; 232  : 			m_aiPlotBarbCampNumUnitsSpawned[iI] = -1;

	mov	edx, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	or	ecx, ecx
	mov	WORD PTR [edx+eax*2], cx
	inc	eax
	cmp	eax, esi
	jl	SHORT $LL17@MapInit
$LN1@MapInit:
	pop	esi

; 233  : 		}
; 234  : 	}
; 235  : }

	ret	0
?MapInit@CvBarbarians@@SAXH@Z ENDP			; CvBarbarians::MapInit
_TEXT	ENDS
PUBLIC	?Uninit@CvBarbarians@@SAXXZ			; CvBarbarians::Uninit
; Function compile flags: /Ogtpy
;	COMDAT ?Uninit@CvBarbarians@@SAXXZ
_TEXT	SEGMENT
?Uninit@CvBarbarians@@SAXXZ PROC			; CvBarbarians::Uninit, COMDAT

; 241  : 	if (m_aiPlotBarbCampSpawnCounter != NULL)

	mov	eax, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	test	eax, eax
	je	SHORT $LN5@Uninit

; 242  : 	{
; 243  : 		SAFE_DELETE_ARRAY(m_aiPlotBarbCampSpawnCounter);

	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA, 0 ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
$LN5@Uninit:

; 244  : 	}
; 245  : 
; 246  : 	if (m_aiPlotBarbCampNumUnitsSpawned != NULL)

	mov	eax, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	test	eax, eax
	je	SHORT $LN7@Uninit

; 247  : 	{
; 248  : 		SAFE_DELETE_ARRAY(m_aiPlotBarbCampNumUnitsSpawned);

	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA, 0 ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
$LN7@Uninit:

; 249  : 	}
; 250  : }

	ret	0
?Uninit@CvBarbarians@@SAXXZ ENDP			; CvBarbarians::Uninit
_TEXT	ENDS
PUBLIC	?GetRandomBarbarianUnitType@CvBarbarians@@CA?AW4UnitTypes@@PAVCvArea@@W4UnitAITypes@@@Z ; CvBarbarians::GetRandomBarbarianUnitType
EXTRN	?GetUnitAIType@CvUnitEntry@@QBE_NH@Z:PROC	; CvUnitEntry::GetUnitAIType
EXTRN	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z:PROC	; CvTeamTechs::HasTech
EXTRN	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ:PROC ; CvTeam::GetTeamTechs
EXTRN	?GetPrereqAndTechs@CvUnitEntry@@QBEHH@Z:PROC	; CvUnitEntry::GetPrereqAndTechs
EXTRN	?canTrain@CvPlayer@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z:PROC ; CvPlayer::canTrain
EXTRN	?GetDomainType@CvUnitEntry@@QBEHXZ:PROC		; CvUnitEntry::GetDomainType
EXTRN	?isWater@CvArea@@QBE_NXZ:PROC			; CvArea::isWater
EXTRN	?IsOnlyDefensive@CvPromotionEntry@@QBE_NXZ:PROC	; CvPromotionEntry::IsOnlyDefensive
EXTRN	?GetFreePromotions@CvUnitEntry@@QBE_NH@Z:PROC	; CvUnitEntry::GetFreePromotions
EXTRN	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z:PROC ; CvGlobals::getPromotionInfo
EXTRN	?getNumPromotionInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumPromotionInfos
EXTRN	?GetRange@CvUnitEntry@@QBEHXZ:PROC		; CvUnitEntry::GetRange
EXTRN	?GetCombat@CvUnitEntry@@QBEHXZ:PROC		; CvUnitEntry::GetCombat
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
EXTRN	?getCivilizationUnits@CvCivilizationInfo@@QBEHH@Z:PROC ; CvCivilizationInfo::getCivilizationUnits
EXTRN	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ:PROC ; CvPlayer::getCivilizationInfo
EXTRN	?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z:PROC ; CvGlobals::getUnitClassInfo
EXTRN	?getNumUnitClassInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumUnitClassInfos
; Function compile flags: /Ogtpy
;	COMDAT ?GetRandomBarbarianUnitType@CvBarbarians@@CA?AW4UnitTypes@@PAVCvArea@@W4UnitAITypes@@@Z
_TEXT	SEGMENT
_iBestValue$ = -24					; size = 4
_iUnitClassLoop$218623 = -20				; size = 4
_eBestUnit$ = -16					; size = 4
_kBarbarianPlayer$ = -12				; size = 4
_kGame$ = -8						; size = 4
_eLoopUnit$218631 = -4					; size = 4
_pArea$ = 8						; size = 4
_eUnitAI$ = 12						; size = 4
?GetRandomBarbarianUnitType@CvBarbarians@@CA?AW4UnitTypes@@PAVCvArea@@W4UnitAITypes@@@Z PROC ; CvBarbarians::GetRandomBarbarianUnitType, COMDAT

; 568  : {

	sub	esp, 24					; 00000018H

; 569  : 	UnitTypes eBestUnit = NO_UNIT;
; 570  : 	int iBestValue = 0;
; 571  : 	int iValue = 0;
; 572  : 
; 573  : 	CvPlayerAI& kBarbarianPlayer = GET_PLAYER(BARBARIAN_PLAYER);
; 574  : 
; 575  : 	CvGame &kGame = GC.getGame();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	esi
	push	edi
	xor	esi, esi
	add	eax, 3983868				; 003cc9fcH
	mov	DWORD PTR _kGame$[esp+32], ecx
	or	edi, -1

; 576  : 
; 577  : #ifdef AUI_WARNING_FIXES
; 578  : 	for (uint iUnitClassLoop = 0; iUnitClassLoop < GC.getNumUnitClassInfos(); iUnitClassLoop++)
; 579  : #else
; 580  : 	for(int iUnitClassLoop = 0; iUnitClassLoop < GC.getNumUnitClassInfos(); iUnitClassLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _eBestUnit$[esp+32], edi
	mov	DWORD PTR _iBestValue$[esp+32], esi
	mov	DWORD PTR _kBarbarianPlayer$[esp+32], eax
	mov	DWORD PTR _iUnitClassLoop$218623[esp+32], esi
	call	?getNumUnitClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitClassInfos
	test	eax, eax
	jle	$LN53@GetRandomB
	push	ebx
	push	ebp
$LL60@GetRandomB:

; 581  : #endif
; 582  : 	{
; 583  : 		bool bValid = false;
; 584  : 		CvUnitClassInfo* pkUnitClassInfo = GC.getUnitClassInfo((UnitClassTypes)iUnitClassLoop);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z ; CvGlobals::getUnitClassInfo

; 585  : 		if(pkUnitClassInfo == NULL)

	test	eax, eax
	je	$LN29@GetRandomB

; 586  : 			continue;
; 587  : 
; 588  : 		const UnitTypes eLoopUnit = ((UnitTypes)(kBarbarianPlayer.getCivilizationInfo().getCivilizationUnits(iUnitClassLoop)));

	mov	ecx, DWORD PTR _kBarbarianPlayer$[esp+40]
	push	esi
	call	?getCivilizationInfo@CvPlayer@@QBEAAVCvCivilizationInfo@@XZ ; CvPlayer::getCivilizationInfo
	mov	ecx, eax
	call	?getCivilizationUnits@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationUnits
	mov	ebx, eax
	mov	DWORD PTR _eLoopUnit$218631[esp+40], ebx

; 589  : 		if(eLoopUnit != NO_UNIT)

	cmp	ebx, -1
	je	$LN29@GetRandomB

; 590  : 		{
; 591  : 			CvUnitEntry* pkUnitInfo = GC.getUnitInfo(eLoopUnit);

	push	ebx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	ebp, eax

; 592  : 			if(pkUnitInfo == NULL)

	test	ebp, ebp
	je	$LN29@GetRandomB

; 593  : 			{
; 594  : 				continue;
; 595  : 			}
; 596  : 
; 597  : 			CvUnitEntry& kUnit = *pkUnitInfo;
; 598  : 
; 599  : 			bValid = (kUnit.GetCombat() > 0);

	mov	ecx, ebp
	call	?GetCombat@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCombat
	test	eax, eax
	setg	al

; 600  : 			if(bValid)

	test	al, al
	je	$LN29@GetRandomB

; 601  : 			{
; 602  : 				// Unit has combat strength, make sure it isn't only defensive (and with no ranged combat ability)
; 603  : 				if(kUnit.GetRange() == 0)

	mov	ecx, ebp
	call	?GetRange@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetRange
	test	eax, eax
	jne	SHORT $LN61@GetRandomB

; 604  : 				{
; 605  : #ifdef AUI_WARNING_FIXES
; 606  : 					for (uint iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)
; 607  : #else
; 608  : 					for(int iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	esi, esi
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	test	eax, eax
	jle	SHORT $LN61@GetRandomB
	npad	7
$LL58@GetRandomB:

; 609  : #endif
; 610  : 					{
; 611  : 						const PromotionTypes ePromotion = static_cast<PromotionTypes>(iLoop);
; 612  : 						CvPromotionEntry* pkPromotionInfo = GC.getPromotionInfo(ePromotion);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	edi, eax

; 613  : 						if(pkPromotionInfo)

	test	edi, edi
	je	SHORT $LN21@GetRandomB

; 614  : 						{
; 615  : 							if(kUnit.GetFreePromotions(iLoop))

	push	esi
	mov	ecx, ebp
	call	?GetFreePromotions@CvUnitEntry@@QBE_NH@Z ; CvUnitEntry::GetFreePromotions
	test	al, al
	je	SHORT $LN21@GetRandomB

; 616  : 							{
; 617  : 								if(pkPromotionInfo->IsOnlyDefensive())

	mov	ecx, edi
	call	?IsOnlyDefensive@CvPromotionEntry@@QBE_NXZ ; CvPromotionEntry::IsOnlyDefensive
	test	al, al
	jne	$LN29@GetRandomB
$LN21@GetRandomB:

; 604  : 				{
; 605  : #ifdef AUI_WARNING_FIXES
; 606  : 					for (uint iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)
; 607  : #else
; 608  : 					for(int iLoop = 0; iLoop < GC.getNumPromotionInfos(); iLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	esi
	call	?getNumPromotionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumPromotionInfos
	cmp	esi, eax
	jl	SHORT $LL58@GetRandomB
$LN61@GetRandomB:

; 618  : 								{
; 619  : 									bValid = false;
; 620  : 									break;
; 621  : 								}
; 622  : 							}
; 623  : 						}
; 624  : 					}
; 625  : 				}
; 626  : 			}
; 627  : 
; 628  : 			if(bValid)
; 629  : 			{
; 630  : 				if(pArea->isWater() && kUnit.GetDomainType() != DOMAIN_SEA)

	mov	esi, DWORD PTR _pArea$[esp+36]
	mov	ecx, esi
	call	?isWater@CvArea@@QBE_NXZ		; CvArea::isWater
	test	al, al
	je	SHORT $LN15@GetRandomB
	mov	ecx, ebp
	call	?GetDomainType@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetDomainType
	test	eax, eax

; 631  : 				{
; 632  : 					bValid = false;

	jne	$LN29@GetRandomB
$LN15@GetRandomB:

; 633  : 				}
; 634  : 				else if(!pArea->isWater() && kUnit.GetDomainType() != DOMAIN_LAND)

	mov	ecx, esi
	call	?isWater@CvArea@@QBE_NXZ		; CvArea::isWater
	test	al, al
	jne	SHORT $LN13@GetRandomB
	mov	ecx, ebp
	call	?GetDomainType@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetDomainType
	cmp	eax, 2

; 635  : 				{
; 636  : 					bValid = false;
; 637  : 				}
; 638  : 			}
; 639  : 
; 640  : 			if(bValid)

	jne	$LN29@GetRandomB
$LN13@GetRandomB:

; 641  : 			{
; 642  : 				if(!GET_PLAYER(BARBARIAN_PLAYER).canTrain(eLoopUnit))

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	push	0
	push	0
	push	0
	push	0
	add	ecx, 3983868				; 003cc9fcH
	push	ebx
	call	?canTrain@CvPlayer@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z ; CvPlayer::canTrain
	test	al, al

; 643  : 				{
; 644  : 					bValid = false;
; 645  : 				}
; 646  : 			}
; 647  : 
; 648  : 			if(bValid)

	je	$LN29@GetRandomB

; 649  : 			{
; 650  : 				bool bFound = false;
; 651  : 				bool bRequires = false;
; 652  : 				for(int i = 0; i < GC.getNUM_UNIT_AND_TECH_PREREQS(); ++i)

	xor	esi, esi
	xor	bl, bl
	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+6276, esi
	jle	SHORT $LN4@GetRandomB
$LL9@GetRandomB:

; 653  : 				{
; 654  : 					TechTypes eTech = (TechTypes) kUnit.GetPrereqAndTechs(i);

	push	esi
	mov	ecx, ebp
	call	?GetPrereqAndTechs@CvUnitEntry@@QBEHH@Z	; CvUnitEntry::GetPrereqAndTechs

; 655  : 
; 656  : 					if(NO_TECH != eTech)

	cmp	eax, -1
	je	SHORT $LN8@GetRandomB

; 657  : 					{
; 658  : 						bRequires = true;
; 659  : 
; 660  : 						if(GET_TEAM(BARBARIAN_TEAM).GetTeamTechs()->HasTech(eTech))

	mov	ecx, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	add	ecx, 187992				; 0002de58H
	push	eax
	mov	bl, 1
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	test	al, al
	jne	SHORT $LN4@GetRandomB
$LN8@GetRandomB:

; 649  : 			{
; 650  : 				bool bFound = false;
; 651  : 				bool bRequires = false;
; 652  : 				for(int i = 0; i < GC.getNUM_UNIT_AND_TECH_PREREQS(); ++i)

	inc	esi
	cmp	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6276
	jl	SHORT $LL9@GetRandomB

; 661  : 						{
; 662  : 							bFound = true;
; 663  : 							break;
; 664  : 						}
; 665  : 					}
; 666  : 				}
; 667  : 
; 668  : 				if(bRequires && !bFound)

	test	bl, bl

; 669  : 				{
; 670  : 					bValid = false;
; 671  : 				}
; 672  : 			}
; 673  : 
; 674  : 			if(bValid)

	jne	SHORT $LN29@GetRandomB
$LN4@GetRandomB:

; 675  : 			{
; 676  : 				iValue = (1 + kGame.getJonRandNum(1000, "Barb Unit Selection"));

	mov	ecx, DWORD PTR _kGame$[esp+40]
	push	OFFSET $SG218670
	push	1000					; 000003e8H
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 677  : 
; 678  : 				if(kUnit.GetUnitAIType(eUnitAI))

	mov	edx, DWORD PTR _eUnitAI$[esp+36]
	mov	esi, eax
	push	edx
	mov	ecx, ebp
	inc	esi
	call	?GetUnitAIType@CvUnitEntry@@QBE_NH@Z	; CvUnitEntry::GetUnitAIType
	test	al, al
	je	SHORT $LN2@GetRandomB

; 679  : 				{
; 680  : 					iValue += 200;

	add	esi, 200				; 000000c8H
$LN2@GetRandomB:

; 681  : 				}
; 682  : 
; 683  : 				if(iValue > iBestValue)

	cmp	esi, DWORD PTR _iBestValue$[esp+40]
	jle	SHORT $LN29@GetRandomB

; 684  : 				{
; 685  : 					eBestUnit = eLoopUnit;

	mov	eax, DWORD PTR _eLoopUnit$218631[esp+40]
	mov	DWORD PTR _eBestUnit$[esp+40], eax

; 686  : 					iBestValue = iValue;

	mov	DWORD PTR _iBestValue$[esp+40], esi
$LN29@GetRandomB:
	mov	esi, DWORD PTR _iUnitClassLoop$218623[esp+40]
	inc	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _iUnitClassLoop$218623[esp+40], esi
	call	?getNumUnitClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitClassInfos
	cmp	esi, eax
	jl	$LL60@GetRandomB

; 687  : 				}
; 688  : 			}
; 689  : 		}
; 690  : 	}
; 691  : 
; 692  : 	return eBestUnit;

	mov	eax, DWORD PTR _eBestUnit$[esp+40]
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi

; 693  : }

	add	esp, 24					; 00000018H
	ret	0
$LN53@GetRandomB:

; 687  : 				}
; 688  : 			}
; 689  : 		}
; 690  : 	}
; 691  : 
; 692  : 	return eBestUnit;

	mov	eax, edi
	pop	edi
	pop	esi

; 693  : }

	add	esp, 24					; 00000018H
	ret	0
?GetRandomBarbarianUnitType@CvBarbarians@@CA?AW4UnitTypes@@PAVCvArea@@W4UnitAITypes@@@Z ENDP ; CvBarbarians::GetRandomBarbarianUnitType
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum DirectionTypes,6,1,297,0>::FStaticVector<enum DirectionTypes,6,1,297,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<enum DirectionTypes,6,1,297,0>::FStaticVector<enum DirectionTypes,6,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 6
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<enum DirectionTypes,6,1,297,0>::FStaticVector<enum DirectionTypes,6,1,297,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@W4DirectionTypes@@$00@@QAEXXZ ; BaseVector<enum DirectionTypes,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@W4DirectionTypes@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@W4DirectionTypes@@$00@@QAEXXZ PROC	; BaseVector<enum DirectionTypes,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@W4DirectionTypes@@$00@@QAEXXZ ENDP	; BaseVector<enum DirectionTypes,1>::clear
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXPAW4DirectionTypes@@I@Z ; FStaticVector<enum DirectionTypes,6,1,297,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXPAW4DirectionTypes@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXPAW4DirectionTypes@@I@Z PROC ; FStaticVector<enum DirectionTypes,6,1,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXPAW4DirectionTypes@@I@Z ENDP ; FStaticVector<enum DirectionTypes,6,1,297,0>::Free
_TEXT	ENDS
PUBLIC	??$?5F@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@F@@@Z ; operator>><short>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5F@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@F@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_v$ = 12						; size = 4
??$?5F@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@F@@@Z PROC ; operator>><short>, COMDAT

; 516  : 	int i = 0;
; 517  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[esp-4]
	push	esi

; 518  : 	ValueType * values = v.getArray();

	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, DWORD PTR [eax+4]

; 519  : 	for(i = 0; i < count; ++i)

	test	edi, edi
	jle	SHORT $LN14@operator
	push	ebx
	mov	ebx, DWORD PTR _loadFrom$[esp+8]
$LL3@operator:

; 520  : 	{
; 521  : 		loadFrom >> values[i];

	push	esi
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAF@Z		; FDataStream::Read
	add	esi, 2
	sub	edi, 1
	jne	SHORT $LL3@operator

; 522  : 	}
; 523  : 	return loadFrom;

	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi

; 524  : }

	ret	0
$LN14@operator:

; 522  : 	}
; 523  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[esp+4]
	pop	edi
	pop	esi

; 524  : }

	ret	0
??$?5F@@YAAAVFDataStream@@AAV0@AAV?$ArrayWrapper@F@@@Z ENDP ; operator>><short>
_TEXT	ENDS
PUBLIC	??$?6F@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@F@@@Z ; operator<<<short>
; Function compile flags: /Ogtpy
;	COMDAT ??$?6F@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@F@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_v$ = 12						; size = 4
??$?6F@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@F@@@Z PROC ; operator<<<short>, COMDAT

; 503  : 	int i = 0;
; 504  : 	int count = v.getCount();

	mov	eax, DWORD PTR _v$[esp-4]
	push	esi

; 505  : 	const ValueType * values = v.getArray();

	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, DWORD PTR [eax+4]

; 506  : 	for(i = 0; i < count; ++i)

	test	edi, edi
	jle	SHORT $LN14@operator@2
	push	ebx
	mov	ebx, DWORD PTR _saveTo$[esp+8]
$LL3@operator@2:

; 507  : 	{
; 508  : 		saveTo << values[i];

	push	esi
	mov	ecx, ebx
	call	?Write@FDataStream@@IAEXABF@Z		; FDataStream::Write
	add	esi, 2
	sub	edi, 1
	jne	SHORT $LL3@operator@2

; 509  : 	}
; 510  : 	return saveTo;

	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi

; 511  : }

	ret	0
$LN14@operator@2:

; 509  : 	}
; 510  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[esp+4]
	pop	edi
	pop	esi

; 511  : }

	ret	0
??$?6F@@YAAAVFDataStream@@AAV0@ABV?$ArrayWrapper@F@@@Z ENDP ; operator<<<short>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT
; _p$ = eax

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 302  : }

	ret	0
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1

; 302  : }

	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
PUBLIC	?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ	; CvCity::getOwner
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
;	COMDAT ?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ PROC		; CvCity::getOwner, COMDAT
; _this$ = ecx

; 604  : 		return m_eOwner;

	mov	eax, DWORD PTR [ecx+84]

; 605  : 	}

	ret	0
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ ENDP		; CvCity::getOwner
_TEXT	ENDS
PUBLIC	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ		; CvPlayer::getTeam
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
;	COMDAT ?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ PROC		; CvPlayer::getTeam, COMDAT
; _this$ = ecx

; 1178 : 		return CvPreGame::teamType(m_eID);

	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN5@getTeam
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 1179 : 	}

	ret	0

; 1178 : 		return CvPreGame::teamType(m_eID);

$LN5@getTeam:
	or	eax, -1

; 1179 : 	}

	ret	0
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ ENDP		; CvPlayer::getTeam
_TEXT	ENDS
PUBLIC	?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ	; CvPlot::getFeatureType
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ
_TEXT	SEGMENT
?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ PROC	; CvPlot::getFeatureType, COMDAT
; _this$ = ecx

; 435  : #ifdef AUI_WARNING_FIXES
; 436  : 		int f = m_eFeatureType;
; 437  : #else
; 438  : 		char f = m_eFeatureType;
; 439  : #endif
; 440  : 		return (FeatureTypes)f;

	movsx	eax, BYTE PTR [ecx+432]

; 441  : 	}

	ret	0
?getFeatureType@CvPlot@@QBE?AW4FeatureTypes@@XZ ENDP	; CvPlot::getFeatureType
_TEXT	ENDS
PUBLIC	?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z	; CvPlot::isRevealed
; Function compile flags: /Ogtpy
;	COMDAT ?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z PROC		; CvPlot::isRevealed, COMDAT
; _this$ = ecx

; 620  : 	{

	mov	edx, ecx

; 621  : 		CvAssertMsg(eTeam >= 0, "eTeam is expected to be non-negative (invalid Index)");
; 622  : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is expected to be within maximum bounds (invalid Index)");
; 623  : 		return m_bfRevealed.GetBit(eTeam);

	mov	ecx, DWORD PTR _eTeam$[esp-4]
	push	esi
	mov	eax, ecx
	shr	eax, 5
	mov	esi, eax
	shl	esi, 5
	sub	ecx, esi
	mov	esi, 1
	shl	esi, cl
	test	esi, DWORD PTR [edx+eax*4+8]
	pop	esi
	setne	al

; 624  : 	}

	ret	4
?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z ENDP		; CvPlot::isRevealed
_TEXT	ENDS
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	mov	eax, DWORD PTR _iX$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4020]
	jge	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _iY$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4024]
	jge	SHORT $LN3@isPlot
	mov	eax, 1

; 161  : #endif
; 162  : 	}

	ret	8
$LN3@isPlot:

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	xor	eax, eax

; 161  : #endif
; 162  : 	}

	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
_TEXT	ENDS
PUBLIC	?plotNum@CvMap@@QBEHHH@Z			; CvMap::plotNum
; Function compile flags: /Ogtpy
;	COMDAT ?plotNum@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plotNum@CvMap@@QBEHHH@Z PROC				; CvMap::plotNum, COMDAT
; _this$ = ecx

; 183  : 		return ((iY * getGridWidth()) + iX);

	mov	eax, DWORD PTR [ecx+4020]
	imul	eax, DWORD PTR _iY$[esp-4]
	add	eax, DWORD PTR _iX$[esp-4]

; 184  : #endif
; 185  : 	}

	ret	8
?plotNum@CvMap@@QBEHHH@Z ENDP				; CvMap::plotNum
_TEXT	ENDS
PUBLIC	?plot@CvMap@@QBEPAVCvPlot@@HH@Z			; CvMap::plot
; Function compile flags: /Ogtpy
;	COMDAT ?plot@CvMap@@QBEPAVCvPlot@@HH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plot@CvMap@@QBEPAVCvPlot@@HH@Z PROC			; CvMap::plot, COMDAT
; _this$ = ecx

; 273  : 		if((iX == INVALID_PLOT_COORD) || (iY == INVALID_PLOT_COORD))

	mov	eax, DWORD PTR _iX$[esp-4]
	push	ebp
	cmp	eax, -2147483647			; 80000001H
	je	$LN1@plot
	mov	ebp, DWORD PTR _iY$[esp]
	cmp	ebp, -2147483647			; 80000001H
	je	$LN1@plot

; 276  : 		}
; 277  : 		int iMapX = coordRange(iX, getGridWidth(), isWrapX());

	cmp	BYTE PTR [ecx+4056], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR [ecx+4020]
	push	edi
	je	SHORT $LN11@plot
	test	eax, eax
	jge	SHORT $LN13@plot
	cdq
	idiv	esi
	mov	edi, edx
	add	edi, esi
	jmp	SHORT $LN15@plot
$LN13@plot:
	cmp	eax, esi
	jl	SHORT $LN11@plot
	cdq
	idiv	esi
	mov	edi, edx
	jmp	SHORT $LN15@plot
$LN11@plot:
	mov	edi, eax
$LN15@plot:

; 278  : 		int iMapY = coordRange(iY, getGridHeight(), isWrapY());

	cmp	BYTE PTR [ecx+4057], 0
	mov	ebx, DWORD PTR [ecx+4024]
	je	SHORT $LN40@plot
	test	ebp, ebp
	jge	SHORT $LN23@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN25@plot
$LN23@plot:
	cmp	ebp, ebx
	jl	SHORT $LN40@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	jmp	SHORT $LN25@plot
$LN40@plot:
	mov	edx, ebp
$LN25@plot:

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	test	edi, edi
	jl	SHORT $LN5@plot
	cmp	edi, esi
	jge	SHORT $LN5@plot
	test	edx, edx
	jl	SHORT $LN5@plot
	cmp	edx, ebx
	jge	SHORT $LN5@plot
	imul	esi, edx
	add	esi, edi
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ecx+4068]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp

; 280  : 	}

	ret	8
$LN5@plot:
	pop	edi
	pop	esi
	pop	ebx

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
$LN1@plot:

; 274  : 		{
; 275  : 			return NULL;

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
?plot@CvMap@@QBEPAVCvPlot@@HH@Z ENDP			; CvMap::plot
_TEXT	ENDS
PUBLIC	?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ; plotDirection
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_eDirection$ = 16					; size = 4
?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z PROC ; plotDirection, COMDAT

; 194  : 	if(eDirection == NO_DIRECTION)

	mov	ecx, DWORD PTR _eDirection$[esp-4]
	push	ebx
	push	ebp
	push	esi
	push	edi
	cmp	ecx, -1
	jne	$LN2@plotDirect

; 195  : 	{
; 196  : 		return GC.getMap().plot(iX, iY);

	mov	eax, DWORD PTR _iX$[esp+12]
	cmp	eax, -2147483647			; 80000001H
	je	$LN59@plotDirect
	mov	ebx, DWORD PTR _iY$[esp+12]
	cmp	ebx, -2147483647			; 80000001H
	je	$LN59@plotDirect
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	je	SHORT $LN99@plotDirect
	test	eax, eax
	jge	SHORT $LN19@plotDirect
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN21@plotDirect
$LN19@plotDirect:
	cmp	eax, ecx
	jl	SHORT $LN99@plotDirect
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN21@plotDirect
$LN99@plotDirect:
	mov	esi, eax
$LN21@plotDirect:
	cmp	BYTE PTR [ebp+4057], 0
	mov	edi, DWORD PTR [ebp+4024]
	je	SHORT $LN101@plotDirect
	test	ebx, ebx
	jge	SHORT $LN29@plotDirect
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN31@plotDirect
$LN29@plotDirect:
	cmp	ebx, edi
	jl	SHORT $LN101@plotDirect
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN31@plotDirect
$LN101@plotDirect:
	mov	edx, ebx
$LN31@plotDirect:
	test	esi, esi
	jl	$LN59@plotDirect
	cmp	esi, ecx
	jge	$LN59@plotDirect
	test	edx, edx
	jl	$LN59@plotDirect
	cmp	edx, edi
	jge	$LN59@plotDirect
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ecx
	pop	ebx

; 209  : 	}
; 210  : }

	ret	0
$LN2@plotDirect:

; 197  : 	}
; 198  : 	else
; 199  : 	{
; 200  : 		// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 201  : 		iX = xToHexspaceX(iX , iY);

	mov	esi, DWORD PTR _iY$[esp+12]
	test	esi, esi
	jl	SHORT $LN47@plotDirect
	mov	eax, esi
	jmp	SHORT $LN103@plotDirect
$LN47@plotDirect:
	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
$LN103@plotDirect:

; 202  : 		iX += GC.getPlotDirectionX()[eDirection];

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A[ecx*4+112]
	mov	edi, DWORD PTR _iX$[esp+12]
	sar	eax, 1
	sub	edx, eax
	add	edi, edx

; 203  : 		iY += GC.getPlotDirectionY()[eDirection];

	add	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A[ecx*4+136]

; 204  : 
; 205  : 		// convert from hex-space coordinates to the storage array
; 206  : 		iX = hexspaceXToX(iX, iY);

	js	SHORT $LN55@plotDirect
	mov	eax, esi
	jmp	SHORT $LN104@plotDirect
$LN55@plotDirect:
	lea	eax, DWORD PTR [esi-1]
	cdq
	sub	eax, edx
$LN104@plotDirect:
	sar	eax, 1
	add	edi, eax

; 207  : 
; 208  : 		return GC.getMap().plot(iX, iY);

	cmp	edi, -2147483647			; 80000001H
	je	$LN59@plotDirect
	cmp	esi, -2147483647			; 80000001H
	je	$LN59@plotDirect
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	je	SHORT $LN69@plotDirect
	test	edi, edi
	jge	SHORT $LN71@plotDirect
	mov	eax, edi
	cdq
	idiv	ecx
	mov	edi, edx
	add	edi, ecx
	jmp	SHORT $LN69@plotDirect
$LN71@plotDirect:
	cmp	edi, ecx
	jl	SHORT $LN69@plotDirect
	mov	eax, edi
	cdq
	idiv	ecx
	mov	edi, edx
$LN69@plotDirect:
	cmp	BYTE PTR [ebp+4057], 0
	mov	ebx, DWORD PTR [ebp+4024]
	je	SHORT $LN100@plotDirect
	test	esi, esi
	jge	SHORT $LN81@plotDirect
	mov	eax, esi
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN83@plotDirect
$LN81@plotDirect:
	cmp	esi, ebx
	jl	SHORT $LN100@plotDirect
	mov	eax, esi
	cdq
	idiv	ebx
	jmp	SHORT $LN83@plotDirect
$LN100@plotDirect:
	mov	edx, esi
$LN83@plotDirect:
	test	edi, edi
	jl	SHORT $LN59@plotDirect
	cmp	edi, ecx
	jge	SHORT $LN59@plotDirect
	test	edx, edx
	jl	SHORT $LN59@plotDirect
	cmp	edx, ebx
	jge	SHORT $LN59@plotDirect
	imul	ecx, edx
	add	ecx, edi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ecx
	pop	ebx

; 209  : 	}
; 210  : }

	ret	0

; 207  : 
; 208  : 		return GC.getMap().plot(iX, iY);

$LN59@plotDirect:
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx

; 209  : 	}
; 210  : }

	ret	0
?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ENDP ; plotDirection
_TEXT	ENDS
PUBLIC	?plotXY@@YAPAVCvPlot@@HHHH@Z			; plotXY
; Function compile flags: /Ogtpy
;	COMDAT ?plotXY@@YAPAVCvPlot@@HHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_iDX$ = 16						; size = 4
_iDY$ = 20						; size = 4
?plotXY@@YAPAVCvPlot@@HHHH@Z PROC			; plotXY, COMDAT

; 214  : 	// convert the start coord to hex-space coordinates
; 215  : 	int iStartHexX = xToHexspaceX(iX, iY);

	mov	ecx, DWORD PTR _iY$[esp-4]
	test	ecx, ecx
	jl	SHORT $LN5@plotXY
	mov	eax, ecx
	jmp	SHORT $LN55@plotXY
$LN5@plotXY:
	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
$LN55@plotXY:
	push	esi

; 216  : 
; 217  : 	int iPlotHexX = iStartHexX + iDX;

	mov	esi, DWORD PTR _iX$[esp]
	sar	eax, 1
	sub	esi, eax

; 218  : 	int iPlotY = iY + iDY; // Y is the same in both coordinate systems

	mov	eax, DWORD PTR _iDY$[esp]
	add	esi, DWORD PTR _iDX$[esp]
	push	edi
	lea	edi, DWORD PTR [ecx+eax]

; 219  : 
; 220  : 	// convert from hex-space coordinates to the storage array
; 221  : 	iPlotHexX = hexspaceXToX(iPlotHexX, iPlotY);

	test	edi, edi
	jl	SHORT $LN9@plotXY
	mov	eax, edi
	jmp	SHORT $LN56@plotXY
$LN9@plotXY:
	lea	eax, DWORD PTR [edi-1]
	cdq
	sub	eax, edx
$LN56@plotXY:
	sar	eax, 1
	add	esi, eax

; 222  : 
; 223  : 	return GC.getMap().plot(iPlotHexX , iPlotY);

	cmp	esi, -2147483647			; 80000001H
	je	$LN13@plotXY
	cmp	edi, -2147483647			; 80000001H
	je	$LN13@plotXY
	push	ebp
	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	BYTE PTR [ebp+4056], 0
	mov	ecx, DWORD PTR [ebp+4020]
	je	SHORT $LN23@plotXY
	test	esi, esi
	jge	SHORT $LN25@plotXY
	mov	eax, esi
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN23@plotXY
$LN25@plotXY:
	cmp	esi, ecx
	jl	SHORT $LN23@plotXY
	mov	eax, esi
	cdq
	idiv	ecx
	mov	esi, edx
$LN23@plotXY:
	cmp	BYTE PTR [ebp+4057], 0
	push	ebx
	mov	ebx, DWORD PTR [ebp+4024]
	je	SHORT $LN52@plotXY
	test	edi, edi
	jge	SHORT $LN35@plotXY
	mov	eax, edi
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN37@plotXY
$LN35@plotXY:
	cmp	edi, ebx
	jl	SHORT $LN52@plotXY
	mov	eax, edi
	cdq
	idiv	ebx
	jmp	SHORT $LN37@plotXY
$LN52@plotXY:
	mov	edx, edi
$LN37@plotXY:
	test	esi, esi
	jl	SHORT $LN17@plotXY
	cmp	esi, ecx
	jge	SHORT $LN17@plotXY
	test	edx, edx
	jl	SHORT $LN17@plotXY
	cmp	edx, ebx
	jge	SHORT $LN17@plotXY
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [ebp+4068]
	pop	ebx
	pop	ebp
	pop	edi
	mov	eax, ecx
	pop	esi

; 224  : }

	ret	0

; 222  : 
; 223  : 	return GC.getMap().plot(iPlotHexX , iPlotY);

$LN17@plotXY:
	pop	ebx
	pop	ebp
	pop	edi
	xor	eax, eax
	pop	esi

; 224  : }

	ret	0

; 222  : 
; 223  : 	return GC.getMap().plot(iPlotHexX , iPlotY);

$LN13@plotXY:
	pop	edi
	xor	eax, eax
	pop	esi

; 224  : }

	ret	0
?plotXY@@YAPAVCvPlot@@HHHH@Z ENDP			; plotXY
_TEXT	ENDS
PUBLIC	?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z	; plotXYWithRangeCheck
; Function compile flags: /Ogtpy
;	COMDAT ?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_iDX$ = 16						; size = 4
_iDY$ = 20						; size = 4
_iRange$ = 24						; size = 4
?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z PROC	; plotXYWithRangeCheck, COMDAT

; 234  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 235  : 	// I'm assuming iDX and iDY are in hex-space
; 236  : 	if (hexDistance(iDX, iDY) > iRange)
; 237  : #else
; 238  : 	int hexRange;
; 239  : 
; 240  : 	// I'm assuming iDX and iDY are in hex-space
; 241  : 	if((iDX >= 0) == (iDY >= 0))  // the signs match

	mov	edx, DWORD PTR _iDX$[esp-4]
	xor	eax, eax
	test	edx, edx
	setge	al
	xor	ecx, ecx
	push	esi
	mov	esi, DWORD PTR _iDY$[esp]
	test	esi, esi
	setge	cl
	cmp	eax, ecx

; 242  : 	{
; 243  : 		int iAbsDX = iDX >= 0 ? iDX : -iDX;

	mov	ecx, edx
	jne	SHORT $LN3@plotXYWith
	test	edx, edx
	jge	SHORT $LN7@plotXYWith
	neg	ecx
$LN7@plotXYWith:

; 244  : 		int iAbsDY = iDY >= 0 ? iDY : -iDY;

	mov	eax, esi
	test	esi, esi
	jge	SHORT $LN9@plotXYWith
	neg	eax
$LN9@plotXYWith:

; 245  : 		hexRange = iAbsDX + iAbsDY;

	add	eax, ecx

; 246  : 	}
; 247  : 	else

	jmp	SHORT $LN14@plotXYWith
$LN3@plotXYWith:

; 248  : 	{
; 249  : 		int iAbsDX = iDX >= 0 ? iDX : -iDX;

	test	edx, edx
	jge	SHORT $LN11@plotXYWith
	neg	ecx
$LN11@plotXYWith:

; 250  : 		int iAbsDY = iDY >= 0 ? iDY : -iDY;

	mov	eax, esi
	test	esi, esi
	jge	SHORT $LN13@plotXYWith
	neg	eax
$LN13@plotXYWith:

; 251  : 		hexRange = iAbsDX >= iAbsDY ? iAbsDX : iAbsDY;

	cmp	ecx, eax
	jl	SHORT $LN14@plotXYWith
	mov	eax, ecx
$LN14@plotXYWith:

; 252  : 	}
; 253  : 
; 254  : 	if(hexRange > iRange)

	cmp	eax, DWORD PTR _iRange$[esp]
	jle	SHORT $LN1@plotXYWith

; 255  : #endif
; 256  : 	{
; 257  : 		return NULL;

	xor	eax, eax
	pop	esi

; 261  : }

	ret	0
$LN1@plotXYWith:

; 258  : 	}
; 259  : 
; 260  : 	return plotXY(iX, iY, iDX, iDY);

	mov	eax, DWORD PTR _iX$[esp]
	push	esi
	push	edx
	mov	edx, DWORD PTR _iY$[esp+8]
	push	edx
	push	eax
	call	?plotXY@@YAPAVCvPlot@@HHHH@Z		; plotXY
	add	esp, 16					; 00000010H
	pop	esi

; 261  : }

	ret	0
?plotXYWithRangeCheck@@YAPAVCvPlot@@HHHHH@Z ENDP	; plotXYWithRangeCheck
_TEXT	ENDS
PUBLIC	?IsPlotValidForBarbCamp@CvBarbarians@@CA_NPAVCvPlot@@@Z ; CvBarbarians::IsPlotValidForBarbCamp
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvbarbarians.cpp
;	COMDAT ?IsPlotValidForBarbCamp@CvBarbarians@@CA_NPAVCvPlot@@@Z
_TEXT	SEGMENT
_iDX$218367 = -16					; size = 4
_iDY$ = -12						; size = 4
_iPlotX$ = -8						; size = 4
_iPlotY$ = -4						; size = 4
_kMap$ = 8						; size = 4
_pPlot$ = 8						; size = 4
?IsPlotValidForBarbCamp@CvBarbarians@@CA_NPAVCvPlot@@@Z PROC ; CvBarbarians::IsPlotValidForBarbCamp, COMDAT

; 26   : {

	sub	esp, 16					; 00000010H

; 27   : 	int iRange = 4;
; 28   : 	int iDY;
; 29   : 
; 30   : #ifdef AUI_HEXSPACE_DX_LOOPS
; 31   : 	int iMaxDX, iDX;
; 32   : 	CvPlot* pLoopPlot;
; 33   : 	for (iDY = -iRange; iDY <= iRange; iDY++)
; 34   : 	{
; 35   : 		iMaxDX = iRange - MAX(0, iDY);
; 36   : 		for (iDX = -iRange - MIN(0, iDY); iDX <= iMaxDX; iDX++) // MIN() and MAX() stuff is to reduce loops (hexspace!)
; 37   : 		{
; 38   : 			// No need for range check because loops are set up properly
; 39   : 			pLoopPlot = plotXY(pPlot->getX(), pPlot->getY(), iDX, iDY);
; 40   : #else
; 41   : 	int iPlotX = pPlot->getX();

	mov	eax, DWORD PTR _pPlot$[esp+12]
	push	ebx
	push	ebp
	push	esi
	movsx	esi, WORD PTR [eax]
	push	edi

; 42   : 	int iPlotY = pPlot->getY();

	movsx	edi, WORD PTR [eax+2]

; 43   : 
; 44   : 	CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _iPlotX$[esp+32], esi
	mov	DWORD PTR _iPlotY$[esp+32], edi
	mov	DWORD PTR _kMap$[esp+28], eax

; 45   : 	for (int iDX = -(iRange); iDX <= iRange; iDX++)

	mov	DWORD PTR _iDX$218367[esp+32], -4	; fffffffcH
	npad	5
$LL65@IsPlotVali:

; 46   : 	{
; 47   : 		for (iDY = -(iRange); iDY <= iRange; iDY++)
; 48   : 		{
; 49   : 			int iLoopPlotX = iPlotX + iDX;

	mov	ecx, DWORD PTR _iDX$218367[esp+32]
	mov	DWORD PTR _iDY$[esp+32], -4		; fffffffcH
	lea	ebp, DWORD PTR [ecx+esi]
	lea	ebx, DWORD PTR [edi-4]
$LL6@IsPlotVali:

; 50   : 			int iLoopPlotY = iPlotY + iDY;
; 51   : 
; 52   : 			// Cut off corners
; 53   : 			if (plotDistance(iPlotX, iPlotY, iLoopPlotX, iLoopPlotY) > iRange)

	push	ebx
	push	ebp
	push	edi
	push	esi
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	cmp	eax, 4
	jg	$LN5@IsPlotVali

; 54   : 				continue;
; 55   : 
; 56   : 			// If the counter is below -1 that means a camp was cleared recently
; 57   : 			CvPlot* pLoopPlot = kMap.plot(iLoopPlotX, iLoopPlotY);

	cmp	ebp, -2147483647			; 80000001H
	je	$LN5@IsPlotVali
	cmp	ebx, -2147483647			; 80000001H
	je	$LN5@IsPlotVali
	mov	edi, DWORD PTR _kMap$[esp+28]
	cmp	BYTE PTR [edi+4056], 0
	mov	ecx, DWORD PTR [edi+4020]
	je	SHORT $LN62@IsPlotVali
	test	ebp, ebp
	jge	SHORT $LN30@IsPlotVali
	mov	eax, ebp
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN32@IsPlotVali
$LN30@IsPlotVali:
	cmp	ebp, ecx
	jl	SHORT $LN62@IsPlotVali
	mov	eax, ebp
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN32@IsPlotVali
$LN62@IsPlotVali:
	mov	esi, ebp
$LN32@IsPlotVali:
	mov	edx, DWORD PTR _kMap$[esp+28]
	cmp	BYTE PTR [edx+4057], 0
	mov	edi, DWORD PTR [edi+4024]
	je	SHORT $LN63@IsPlotVali
	test	ebx, ebx
	jge	SHORT $LN40@IsPlotVali
	mov	eax, ebx
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN42@IsPlotVali
$LN40@IsPlotVali:
	cmp	ebx, edi
	jl	SHORT $LN63@IsPlotVali
	mov	eax, ebx
	cdq
	idiv	edi
	jmp	SHORT $LN42@IsPlotVali
$LN63@IsPlotVali:
	mov	edx, ebx
$LN42@IsPlotVali:
	test	esi, esi
	jl	SHORT $LN64@IsPlotVali
	cmp	esi, ecx
	jge	SHORT $LN64@IsPlotVali
	test	edx, edx
	jl	SHORT $LN64@IsPlotVali
	cmp	edx, edi
	jge	SHORT $LN64@IsPlotVali
	mov	eax, DWORD PTR _kMap$[esp+28]
	imul	ecx, edx
	add	ecx, esi
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [eax+4068]

; 58   : #endif
; 59   : 			if (pLoopPlot)

	test	ecx, ecx
	je	SHORT $LN64@IsPlotVali

; 60   : 			{
; 61   : 				if (m_aiPlotBarbCampSpawnCounter[pLoopPlot->GetPlotIndex()] < -1)

	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	ecx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	cmp	WORD PTR [ecx+eax*2], -1
	jl	SHORT $LN58@IsPlotVali
$LN64@IsPlotVali:
	mov	esi, DWORD PTR _iPlotX$[esp+32]
	mov	edi, DWORD PTR _iPlotY$[esp+32]
$LN5@IsPlotVali:
	mov	eax, DWORD PTR _iDY$[esp+32]
	inc	eax
	inc	ebx
	cmp	eax, 4
	mov	DWORD PTR _iDY$[esp+32], eax
	jle	$LL6@IsPlotVali
	mov	eax, DWORD PTR _iDX$218367[esp+32]
	inc	eax
	cmp	eax, 4
	mov	DWORD PTR _iDX$218367[esp+32], eax
	jle	$LL65@IsPlotVali
	pop	edi
	pop	esi
	pop	ebp

; 63   : 			}
; 64   : 		}
; 65   : 	}
; 66   : 
; 67   : 	return true;

	mov	al, 1
	pop	ebx

; 68   : }

	add	esp, 16					; 00000010H
	ret	0
$LN58@IsPlotVali:
	pop	edi
	pop	esi
	pop	ebp

; 62   : 					return false;

	xor	al, al
	pop	ebx

; 68   : }

	add	esp, 16					; 00000010H
	ret	0
?IsPlotValidForBarbCamp@CvBarbarians@@CA_NPAVCvPlot@@@Z ENDP ; CvBarbarians::IsPlotValidForBarbCamp
_TEXT	ENDS
PUBLIC	?Read@CvBarbarians@@SAXAAVFDataStream@@I@Z	; CvBarbarians::Read
; Function compile flags: /Ogtpy
;	COMDAT ?Read@CvBarbarians@@SAXAAVFDataStream@@I@Z
_TEXT	SEGMENT
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
_uiParentVersion$ = 12					; size = 4
?Read@CvBarbarians@@SAXAAVFDataStream@@I@Z PROC		; CvBarbarians::Read, COMDAT

; 259  : {

	push	ecx
	push	ebx

; 260  : 	// Version number to maintain backwards compatibility
; 261  : 	uint uiVersion = 0;
; 262  : 
; 263  : 	kStream >> uiVersion;	

	mov	ebx, DWORD PTR _kStream$[esp+4]
	push	esi
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+16]
	push	eax
	mov	ecx, ebx
	mov	DWORD PTR _uiVersion$[esp+20], 0
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 264  : 
; 265  : 	int iWorldNumPlots = GC.getMap().numPlots();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	edi, DWORD PTR [ecx+4028]

; 266  : 	MapInit(iWorldNumPlots);	// Map will have been initialized/unserialized by now so this is ok.

	push	edi
	call	?MapInit@CvBarbarians@@SAXH@Z		; CvBarbarians::MapInit

; 267  : 
; 268  : #ifdef AUI_WARNING_FIXES
; 269  : 	ArrayWrapper<int> kWrapper1(iWorldNumPlots, m_aiPlotBarbCampSpawnCounter);
; 270  : 	kStream >> kWrapper1;
; 271  : 	ArrayWrapper<int> kWrapper2(iWorldNumPlots, m_aiPlotBarbCampNumUnitsSpawned);
; 272  : 	kStream >> kWrapper2;
; 273  : #else
; 274  : 	kStream >> ArrayWrapper<short>(iWorldNumPlots, m_aiPlotBarbCampSpawnCounter);

	mov	esi, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	add	esp, 4
	test	edi, edi
	jle	SHORT $LN11@Read
	push	ebp
	mov	ebp, edi
	npad	2
$LL13@Read:
	push	esi
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAF@Z		; FDataStream::Read
	add	esi, 2
	sub	ebp, 1
	jne	SHORT $LL13@Read
	pop	ebp
$LN11@Read:

; 275  : 	kStream >> ArrayWrapper<short>(iWorldNumPlots, m_aiPlotBarbCampNumUnitsSpawned);

	mov	esi, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	test	edi, edi
	jle	SHORT $LN24@Read
	npad	5
$LL26@Read:
	push	esi
	mov	ecx, ebx
	call	?Read@FDataStream@@IAEXAAF@Z		; FDataStream::Read
	add	esi, 2
	sub	edi, 1
	jne	SHORT $LL26@Read
$LN24@Read:
	pop	edi
	pop	esi
	pop	ebx

; 276  : #endif
; 277  : }

	pop	ecx
	ret	0
?Read@CvBarbarians@@SAXAAVFDataStream@@I@Z ENDP		; CvBarbarians::Read
_TEXT	ENDS
PUBLIC	?Write@CvBarbarians@@SAXAAVFDataStream@@@Z	; CvBarbarians::Write
; Function compile flags: /Ogtpy
;	COMDAT ?Write@CvBarbarians@@SAXAAVFDataStream@@@Z
_TEXT	SEGMENT
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvBarbarians@@SAXAAVFDataStream@@@Z PROC		; CvBarbarians::Write, COMDAT

; 282  : {

	push	ecx
	push	ebx
	push	esi
	push	edi

; 283  : 	// Current version number
; 284  : 	uint uiVersion = 1;
; 285  : 	kStream << uiVersion;

	mov	edi, DWORD PTR _kStream$[esp+12]
	lea	eax, DWORD PTR _uiVersion$[esp+16]
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _uiVersion$[esp+20], 1
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 286  : 
; 287  : 	int iWorldNumPlots = GC.getMap().numPlots();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	ebx, DWORD PTR [ecx+4028]

; 288  : #ifdef AUI_WARNING_FIXES
; 289  : 	ArrayWrapper<int> kWrapper1(iWorldNumPlots, m_aiPlotBarbCampSpawnCounter);
; 290  : 	kStream << kWrapper1;
; 291  : 	ArrayWrapper<int> kWrapper2(iWorldNumPlots, m_aiPlotBarbCampNumUnitsSpawned);
; 292  : 	kStream << kWrapper2;
; 293  : #else
; 294  : 	kStream << ArrayWrapper<short>(iWorldNumPlots, m_aiPlotBarbCampSpawnCounter);

	mov	esi, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	test	ebx, ebx
	jle	SHORT $LN11@Write
	push	ebp
	mov	ebp, ebx
$LL13@Write:
	push	esi
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABF@Z		; FDataStream::Write
	add	esi, 2
	sub	ebp, 1
	jne	SHORT $LL13@Write
	pop	ebp
$LN11@Write:

; 295  : 	kStream << ArrayWrapper<short>(iWorldNumPlots, m_aiPlotBarbCampNumUnitsSpawned);

	mov	esi, DWORD PTR ?m_aiPlotBarbCampNumUnitsSpawned@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampNumUnitsSpawned
	test	ebx, ebx
	jle	SHORT $LN24@Write
$LL26@Write:
	push	esi
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABF@Z		; FDataStream::Write
	add	esi, 2
	sub	ebx, 1
	jne	SHORT $LL26@Write
$LN24@Write:
	pop	edi
	pop	esi
	pop	ebx

; 296  : #endif
; 297  : }

	pop	ecx
	ret	0
?Write@CvBarbarians@@SAXAAVFDataStream@@@Z ENDP		; CvBarbarians::Write
_TEXT	ENDS
PUBLIC	?DoCamps@CvBarbarians@@SAXXZ			; CvBarbarians::DoCamps
EXTRN	?updateDeferredFog@CvMap@@QAEXXZ:PROC		; CvMap::updateDeferredFog
EXTRN	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ:PROC ; CvGame::getActivePlayer
EXTRN	?setRevealedImprovementType@CvPlot@@QAE_NW4TeamTypes@@W4ImprovementTypes@@@Z:PROC ; CvPlot::setRevealedImprovementType
EXTRN	?IsAlwaysSeeBarbCamps@CvPlayer@@QBE_NXZ:PROC	; CvPlayer::IsAlwaysSeeBarbCamps
EXTRN	?initUnit@CvPlayer@@QAEPAVCvUnit@@W4UnitTypes@@HHW4UnitAITypes@@W4DirectionTypes@@_N3HH@Z:PROC ; CvPlayer::initUnit
EXTRN	?GetDefaultUnitAIType@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetDefaultUnitAIType
EXTRN	?setImprovementType@CvPlot@@QAEXW4ImprovementTypes@@W4PlayerTypes@@@Z:PROC ; CvPlot::setImprovementType
EXTRN	?isCapital@CvCity@@QBE_NXZ:PROC			; CvCity::isCapital
EXTRN	?isNoImprovement@CvFeatureInfo@@QBE_NXZ:PROC	; CvFeatureInfo::isNoImprovement
EXTRN	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z:PROC ; CvGlobals::getFeatureInfo
EXTRN	?getNumImprovements@CvArea@@QBEHW4ImprovementTypes@@@Z:PROC ; CvArea::getNumImprovements
EXTRN	?area@CvPlot@@QBEPAVCvArea@@XZ:PROC		; CvPlot::area
EXTRN	?isCoastalLand@CvPlot@@QBE_NH@Z:PROC		; CvPlot::isCoastalLand
EXTRN	?getNumTiles@CvArea@@QBEHXZ:PROC		; CvArea::getNumTiles
EXTRN	?getArea@CvMap@@QAEPAVCvArea@@H@Z:PROC		; CvMap::getArea
EXTRN	?getResourceType@CvPlot@@QBE?AW4ResourceTypes@@W4TeamTypes@@@Z:PROC ; CvPlot::getResourceType
EXTRN	?isOwned@CvPlot@@QBE_NXZ:PROC			; CvPlot::isOwned
EXTRN	?getLandPlots@CvMap@@QAEHXZ:PROC		; CvMap::getLandPlots
EXTRN	?getFogTilesPerBarbarianCamp@CvWorldInfo@@QBEHXZ:PROC ; CvWorldInfo::getFogTilesPerBarbarianCamp
EXTRN	?getWorldInfo@CvMap@@QBEABVCvWorldInfo@@XZ:PROC	; CvMap::getWorldInfo
EXTRN	?isVisibleToCivTeam@CvPlot@@QBE_NXZ:PROC	; CvPlot::isVisibleToCivTeam
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
xdata$x	SEGMENT
__unwindtable$?DoCamps@CvBarbarians@@SAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DoCamps@CvBarbarians@@SAXXZ$0
__ehfuncinfo$?DoCamps@CvBarbarians@@SAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?DoCamps@CvBarbarians@@SAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvbarbarians.cpp
xdata$x	ENDS
;	COMDAT ?DoCamps@CvBarbarians@@SAXXZ
_TEXT	SEGMENT
_bWantsCoastal$218555 = -98				; size = 1
_bAlwaysRevealedBarbCamp$ = -97				; size = 1
_iMaxDistanceToLook$218559 = -96			; size = 4
_iNumCampsInExistence$ = -96				; size = 4
_eCamp$ = -92						; size = 4
_iNumCampsToAdd$218542 = -88				; size = 4
_iNumNotVisiblePlots$ = -88				; size = 4
_iCampTargetNum$218541 = -84				; size = 4
_iDY$218562 = -80					; size = 4
_iDX$218561 = -76					; size = 4
_kGame$ = -72						; size = 4
_kMap$218531 = -68					; size = 4
_iNumLandPlots$218554 = -64				; size = 4
_iNumPlots$218552 = -60					; size = 4
_iPlayerCapitalMinDistance$218557 = -56			; size = 4
_iBarbCampMinDistance$218558 = -52			; size = 4
tv783 = -48						; size = 4
$T220568 = -48						; size = 4
_iCount$218550 = -44					; size = 4
_strBuffer$218565 = -40					; size = 28
__$EHRec$ = -12						; size = 12
?DoCamps@CvBarbarians@@SAXXZ PROC			; CvBarbarians::DoCamps, COMDAT

; 301  : {

	push	-1
	push	__ehhandler$?DoCamps@CvBarbarians@@SAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H

; 302  : 	CvGame& kGame = GC.getGame();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48

; 303  : 
; 304  : 	if(kGame.isOption(GAMEOPTION_NO_BARBARIANS))

	push	1
	mov	DWORD PTR _kGame$[esp+104], ecx
	call	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z ; CvGame::isOption
	test	al, al
	jne	$LN1@DoCamps

; 305  : 	{
; 306  : 		return;
; 307  : 	}
; 308  : 
; 309  : 	int iNumNotVisiblePlots = 0;
; 310  : 	int iNumCampsInExistence = 0;
; 311  : 	CvPlot* pLoopPlot;
; 312  : 
; 313  : 	ImprovementTypes eCamp = (ImprovementTypes)GC.getBARBARIAN_CAMP_IMPROVEMENT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8548
	push	edi
	xor	edi, edi
	mov	DWORD PTR _iNumNotVisiblePlots$[esp+104], edi
	mov	DWORD PTR _iNumCampsInExistence$[esp+104], edi
	mov	DWORD PTR _eCamp$[esp+104], eax

; 314  : 
; 315  : 	bool bAlwaysRevealedBarbCamp = false;

	mov	BYTE PTR _bAlwaysRevealedBarbCamp$[esp+104], 0

; 316  : 
; 317  : 	// Is there an appropriate Improvement to place as a Barb Camp?
; 318  : 	if(eCamp != NO_IMPROVEMENT)

	cmp	eax, -1
	je	$LN180@DoCamps
	push	ebx
	push	ebp

; 319  : 	{
; 320  : 		CvMap& kMap = GC.getMap();

	mov	ebp, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 321  : 		// Figure out how many Nonvisible tiles we have to base # of camps to spawn on
; 322  : #ifdef AUI_WARNING_FIXES
; 323  : 		for (uint iI = 0; iI < kMap.numPlots(); iI++)
; 324  : #else
; 325  : 		for(int iI = 0; iI < kMap.numPlots(); iI++)

	mov	eax, DWORD PTR [ebp+4028]
	cmp	eax, edi
	push	esi
	mov	DWORD PTR _kMap$218531[esp+116], ebp
	jle	SHORT $LN48@DoCamps

; 319  : 	{
; 320  : 		CvMap& kMap = GC.getMap();

	xor	ebx, ebx
	npad	4
$LL50@DoCamps:

; 326  : #endif
; 327  : 		{
; 328  : 			pLoopPlot = kMap.plotByIndexUnchecked(iI);

	mov	esi, DWORD PTR [ebp+4068]
	add	esi, ebx

; 329  : 
; 330  : 			// See how many camps we already have
; 331  : 			if(pLoopPlot->getImprovementType() == eCamp)

	mov	ecx, esi
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, DWORD PTR _eCamp$[esp+116]
	jne	SHORT $LN174@DoCamps

; 332  : 			{
; 333  : 				iNumCampsInExistence++;

	inc	DWORD PTR _iNumCampsInExistence$[esp+116]
$LN174@DoCamps:

; 334  : 			}
; 335  : 
; 336  : 			if(!pLoopPlot->isWater())

	cmp	BYTE PTR [esi+5], 3
	je	SHORT $LN49@DoCamps

; 337  : 			{
; 338  : 				if(!pLoopPlot->isVisibleToCivTeam())

	mov	ecx, esi
	call	?isVisibleToCivTeam@CvPlot@@QBE_NXZ	; CvPlot::isVisibleToCivTeam
	test	al, al
	jne	SHORT $LN49@DoCamps

; 339  : 				{
; 340  : 					iNumNotVisiblePlots++;

	inc	DWORD PTR _iNumNotVisiblePlots$[esp+116]
$LN49@DoCamps:

; 321  : 		// Figure out how many Nonvisible tiles we have to base # of camps to spawn on
; 322  : #ifdef AUI_WARNING_FIXES
; 323  : 		for (uint iI = 0; iI < kMap.numPlots(); iI++)
; 324  : #else
; 325  : 		for(int iI = 0; iI < kMap.numPlots(); iI++)

	inc	edi
	add	ebx, 484				; 000001e4H
	cmp	edi, DWORD PTR [ebp+4028]
	jl	SHORT $LL50@DoCamps
	xor	edi, edi
$LN48@DoCamps:

; 341  : 				}
; 342  : 			}
; 343  : 		}
; 344  : 
; 345  : 		int iNumValidCampPlots;
; 346  : 
; 347  : 		iNumValidCampPlots = iNumNotVisiblePlots;
; 348  : 
; 349  : 		int iFogTilesPerBarbarianCamp = kMap.getWorldInfo().getFogTilesPerBarbarianCamp();

	mov	ecx, ebp
	call	?getWorldInfo@CvMap@@QBEABVCvWorldInfo@@XZ ; CvMap::getWorldInfo
	mov	ecx, eax
	call	?getFogTilesPerBarbarianCamp@CvWorldInfo@@QBEHXZ ; CvWorldInfo::getFogTilesPerBarbarianCamp
	mov	ecx, eax

; 350  : 		int iCampTargetNum = (iFogTilesPerBarbarianCamp != 0)? iNumValidCampPlots / iFogTilesPerBarbarianCamp : 0;//getHandicapInfo().getFogTilesPerBarbarianCamp();

	cmp	ecx, edi
	je	SHORT $LN55@DoCamps
	mov	eax, DWORD PTR _iNumNotVisiblePlots$[esp+116]
	cdq
	idiv	ecx
	mov	DWORD PTR _iCampTargetNum$218541[esp+116], eax
	jmp	SHORT $LN56@DoCamps
$LN55@DoCamps:
	mov	DWORD PTR _iCampTargetNum$218541[esp+116], edi
$LN56@DoCamps:

; 351  : 		int iNumCampsToAdd = iCampTargetNum - iNumCampsInExistence;

	mov	esi, DWORD PTR _iCampTargetNum$218541[esp+116]
	sub	esi, DWORD PTR _iNumCampsInExistence$[esp+116]

; 352  : 
; 353  : 		int iMaxCampsThisArea;
; 354  : 
; 355  : 		if(iNumCampsToAdd > 0 && GC.getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING() > 0) // slewis - added the barbarian chance for the FoR scenario

	test	esi, esi
	jle	$LN181@DoCamps
	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+7036, 0
	jle	$LN181@DoCamps

; 356  : 		{
; 357  : 			// First turn of the game add 1/3 of the Target number of Camps
; 358  : 			if(kGame.getElapsedGameTurns() == 0)

	mov	edi, DWORD PTR _kGame$[esp+116]
	mov	ecx, edi
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	test	eax, eax
	jne	SHORT $LN43@DoCamps

; 359  : 			{
; 360  : 				iNumCampsToAdd *= /*33*/ GC.getBARBARIAN_CAMP_FIRST_TURN_PERCENT_OF_TARGET_TO_ADD();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7032
	imul	ecx, esi

; 361  : 				iNumCampsToAdd /= 100;

	mov	eax, 1374389535				; 51eb851fH
	imul	ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR _iNumCampsToAdd$218542[esp+116], eax

; 362  : 			}
; 363  : 			// Every other turn of the game there's a 1 in 2 chance of adding a new camp if we're still below the target
; 364  : 			else

	jmp	SHORT $LN41@DoCamps
$LN43@DoCamps:

; 365  : 			{
; 366  : 				if(kGame.getJonRandNum(/*2*/ GC.getBARBARIAN_CAMP_ODDS_OF_NEW_CAMP_SPAWNING(), "Random roll to see if Barb Camp spawns this turn") > 0)

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7036
	push	OFFSET $SG218548
	push	eax
	mov	ecx, edi
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	mov	DWORD PTR _iNumCampsToAdd$218542[esp+116], ecx
$LN41@DoCamps:

; 367  : 				{
; 368  : 					iNumCampsToAdd = 1;
; 369  : 				}
; 370  : 				else
; 371  : 				{
; 372  : 					iNumCampsToAdd = 0;
; 373  : 				}
; 374  : 			}
; 375  : 
; 376  : 			// Don't want to get stuck in an infinite or almost so loop
; 377  : 			int iCount = 0;
; 378  : 			int iPlotIndex = -1;
; 379  : 			int iNumPlots = kMap.numPlots();

	mov	edx, DWORD PTR [ebp+4028]

; 380  : 
; 381  : 			UnitTypes eBestUnit;
; 382  : 
; 383  : 			int iNumLandPlots = kMap.getLandPlots();

	mov	ecx, ebp
	xor	esi, esi
	mov	DWORD PTR _iNumPlots$218552[esp+116], edx
	call	?getLandPlots@CvMap@@QAEHXZ		; CvMap::getLandPlots
	mov	DWORD PTR _iNumLandPlots$218554[esp+116], eax

; 384  : 
; 385  : 			// Do a random roll to bias in favor of Coastal land Tiles so that the Barbs will spawn Boats :) - required 1/6 of the time
; 386  : 			bool bWantsCoastal = kGame.getJonRandNum(/*6*/ GC.getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL(), "Barb Camp Plot-Finding Roll - Coastal Bias 1") == 0 ? true : false;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7048
	push	OFFSET $SG218556
	push	eax
	mov	ecx, edi
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 387  : 
; 388  : 			int iPlayerCapitalMinDistance = /*4*/ GC.getBARBARIAN_CAMP_MINIMUM_DISTANCE_CAPITAL();
; 389  : 			int iBarbCampMinDistance = /*7*/ GC.getBARBARIAN_CAMP_MINIMUM_DISTANCE_ANOTHER_CAMP();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7044
	test	eax, eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7040
	sete	BYTE PTR _bWantsCoastal$218555[esp+116]

; 390  : 			int iMaxDistanceToLook = iPlayerCapitalMinDistance > iBarbCampMinDistance ? iPlayerCapitalMinDistance : iBarbCampMinDistance;

	cmp	eax, ecx
	mov	DWORD PTR _iPlayerCapitalMinDistance$218557[esp+116], eax
	mov	DWORD PTR _iBarbCampMinDistance$218558[esp+116], ecx
	jle	SHORT $LN57@DoCamps
	mov	ebx, eax
	mov	DWORD PTR _iMaxDistanceToLook$218559[esp+116], ebx
	jmp	SHORT $LN58@DoCamps
$LN57@DoCamps:
	mov	DWORD PTR _iMaxDistanceToLook$218559[esp+116], ecx
	mov	ebx, ecx
$LN58@DoCamps:

; 391  : 			int iPlotDistance;
; 392  : 
; 393  : 			int iDX, iDY;
; 394  : 			CvPlot* pNearbyCampPlot;
; 395  : 			bool bSomethingTooClose;
; 396  : 
; 397  : 			CvString strBuffer;

	lea	ecx, DWORD PTR _strBuffer$218565[esp+116]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[esp+124], 0
	jmp	SHORT $LN39@DoCamps
	npad	10
$LL177@DoCamps:
	mov	edi, DWORD PTR _kGame$[esp+116]
$LN39@DoCamps:

; 398  : 
; 399  : 			int iPlayerLoop;
; 400  : 
; 401  : 			// Find Plots to put the Camps
; 402  : 			do
; 403  : 			{
; 404  : 				iCount++;
; 405  : 
; 406  : 				iPlotIndex = kGame.getJonRandNum(iNumPlots, "Barb Camp Plot-Finding Roll");

	mov	ecx, DWORD PTR _iNumPlots$218552[esp+116]
	push	OFFSET $SG218570
	push	ecx
	inc	esi
	mov	ecx, edi
	mov	DWORD PTR _iCount$218550[esp+124], esi
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 407  : 
; 408  : 				pLoopPlot = kMap.plotByIndex(iPlotIndex);

	test	eax, eax
	jl	SHORT $LN91@DoCamps
	cmp	eax, DWORD PTR [ebp+4028]
	jge	SHORT $LN91@DoCamps
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ebp+4068]
	mov	edi, eax
	jmp	SHORT $LN92@DoCamps
$LN91@DoCamps:
	xor	edi, edi
$LN92@DoCamps:

; 409  : 
; 410  : 				// Plot must be valid (not Water, nonvisible)
; 411  : 				if(!pLoopPlot->isWater())

	mov	al, BYTE PTR [edi+5]
	cmp	al, 3
	je	$LN38@DoCamps

; 412  : 				{
; 413  : 					if(!pLoopPlot->isImpassable() && !pLoopPlot->isMountain())

	test	BYTE PTR [edi+462], 128			; 00000080H
	jne	$LN38@DoCamps
	test	al, al
	je	$LN38@DoCamps

; 414  : 					{
; 415  : 						if(!pLoopPlot->isOwned() && !pLoopPlot->isVisibleToCivTeam())

	mov	ecx, edi
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	test	al, al
	jne	$LN38@DoCamps
	mov	ecx, edi
	call	?isVisibleToCivTeam@CvPlot@@QBE_NXZ	; CvPlot::isVisibleToCivTeam
	test	al, al
	jne	$LN38@DoCamps

; 416  : 						{
; 417  : 							// JON: NO RESOURCES FOR NOW, MAY REPLACE WITH SOMETHING COOLER
; 418  : 							if(pLoopPlot->getResourceType() == NO_RESOURCE)

	push	-1
	mov	ecx, edi
	call	?getResourceType@CvPlot@@QBE?AW4ResourceTypes@@W4TeamTypes@@@Z ; CvPlot::getResourceType
	cmp	eax, -1
	jne	$LN38@DoCamps

; 419  : 							{
; 420  : 								// No camps on 1-tile islands
; 421  : 								if(kMap.getArea(pLoopPlot->getArea())->getNumTiles() > 1)

	mov	eax, DWORD PTR [edi+356]
	push	eax
	mov	ecx, ebp
	call	?getArea@CvMap@@QAEPAVCvArea@@H@Z	; CvMap::getArea
	mov	ecx, eax
	call	?getNumTiles@CvArea@@QBEHXZ		; CvArea::getNumTiles
	cmp	eax, 1
	jle	$LN38@DoCamps

; 422  : 								{
; 423  : 									if(pLoopPlot->isCoastalLand() || !bWantsCoastal)

	push	-1
	mov	ecx, edi
	call	?isCoastalLand@CvPlot@@QBE_NH@Z		; CvPlot::isCoastalLand
	test	al, al
	jne	SHORT $LN30@DoCamps
	cmp	BYTE PTR _bWantsCoastal$218555[esp+116], al
	jne	$LN38@DoCamps
$LN30@DoCamps:

; 424  : 									{
; 425  : 										// Max Camps for this area
; 426  : 										iMaxCampsThisArea = iCampTargetNum * pLoopPlot->area()->getNumTiles() / iNumLandPlots;

	mov	ecx, edi
	call	?area@CvPlot@@QBEPAVCvArea@@XZ		; CvPlot::area
	mov	ecx, eax
	call	?getNumTiles@CvArea@@QBEHXZ		; CvArea::getNumTiles
	imul	eax, DWORD PTR _iCampTargetNum$218541[esp+116]
	cdq
	idiv	DWORD PTR _iNumLandPlots$218554[esp+116]

; 427  : 										// Add 1 just in case the above algorithm rounded something off
; 428  : 										iMaxCampsThisArea++;
; 429  : 
; 430  : 										// Already enough Camps in this Area?
; 431  : 										if(pLoopPlot->area()->getNumImprovements(eCamp) <= iMaxCampsThisArea)

	mov	edx, DWORD PTR _eCamp$[esp+116]
	push	edx
	mov	ecx, edi
	mov	esi, eax
	inc	esi
	call	?area@CvPlot@@QBEPAVCvArea@@XZ		; CvPlot::area
	mov	ecx, eax
	call	?getNumImprovements@CvArea@@QBEHW4ImprovementTypes@@@Z ; CvArea::getNumImprovements
	cmp	eax, esi
	jg	$LN38@DoCamps

; 432  : 										{
; 433  : 											// Don't look at Tiles that already have a Camp
; 434  : 											if(pLoopPlot->getImprovementType() == NO_IMPROVEMENT)

	mov	ecx, edi
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, -1
	jne	$LN38@DoCamps

; 435  : 											{
; 436  : 												// Don't look at Tiles that can't have an improvement
; 437  : 												if(pLoopPlot->getFeatureType() == NO_FEATURE || !GC.getFeatureInfo(pLoopPlot->getFeatureType())->isNoImprovement())

	mov	al, BYTE PTR [edi+432]
	cmp	al, -1
	je	SHORT $LN171@DoCamps
	movsx	eax, al
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getFeatureInfo@CvGlobals@@QAEPAVCvFeatureInfo@@W4FeatureTypes@@@Z ; CvGlobals::getFeatureInfo
	mov	ecx, eax
	call	?isNoImprovement@CvFeatureInfo@@QBE_NXZ	; CvFeatureInfo::isNoImprovement
	test	al, al
	jne	$LN38@DoCamps
$LN171@DoCamps:

; 438  : 												{
; 439  : 													bSomethingTooClose = false;
; 440  : 
; 441  : #ifdef AUI_HEXSPACE_DX_LOOPS
; 442  : 													int iMaxDX;
; 443  : 													for (iDY = -(iMaxDistanceToLook); iDY <= iMaxDistanceToLook; iDY++)
; 444  : 													{
; 445  : 														iMaxDX = iMaxDistanceToLook - MAX(0, iDY);
; 446  : 														for (iDX = -(iMaxDistanceToLook) - MIN(0, iDY); iDX <= iMaxDX; iDX++) // MIN() and MAX() stuff is to reduce loops (hexspace!)
; 447  : #else
; 448  : 													// Look at nearby Plots to make sure another camp isn't too close
; 449  : 													for(iDX = -(iMaxDistanceToLook); iDX <= iMaxDistanceToLook; iDX++)

	mov	ecx, ebx
	neg	ecx
	mov	eax, ecx
	cmp	eax, ebx
	mov	DWORD PTR tv783[esp+116], ecx
	mov	DWORD PTR _iDX$218561[esp+116], ecx
	jg	$LN170@DoCamps
$LL25@DoCamps:

; 450  : 													{
; 451  : 														for(iDY = -(iMaxDistanceToLook); iDY <= iMaxDistanceToLook; iDY++)

	cmp	ecx, ebx
	mov	DWORD PTR _iDY$218562[esp+116], ecx
	jg	$LN20@DoCamps
	jmp	SHORT $LN22@DoCamps
	npad	2
$LL172@DoCamps:
	mov	ecx, DWORD PTR _iDY$218562[esp+116]
$LN22@DoCamps:

; 452  : #endif
; 453  : 														{
; 454  : 															pNearbyCampPlot = plotXY(pLoopPlot->getX(), pLoopPlot->getY(), iDX, iDY);

	movsx	ebp, WORD PTR [edi+2]
	movsx	ebx, WORD PTR [edi]
	push	ecx
	push	eax
	push	ebp
	push	ebx
	call	?plotXY@@YAPAVCvPlot@@HHHH@Z		; plotXY
	mov	esi, eax
	add	esp, 16					; 00000010H

; 455  : 
; 456  : 															if(pNearbyCampPlot != NULL)

	test	esi, esi
	je	SHORT $LN21@DoCamps

; 457  : 															{
; 458  : #ifdef AUI_FIX_HEX_DISTANCE_INSTEAD_OF_PLOT_DISTANCE
; 459  : 																iPlotDistance = hexDistance(iDX, iDY);
; 460  : #else
; 461  : 																iPlotDistance = plotDistance(pNearbyCampPlot->getX(), pNearbyCampPlot->getY(), pLoopPlot->getX(), pLoopPlot->getY());

	movsx	ecx, WORD PTR [esi+2]
	movsx	edx, WORD PTR [esi]
	push	ebp
	push	ebx
	push	ecx
	push	edx
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	mov	ebx, eax
	add	esp, 16					; 00000010H

; 462  : #endif
; 463  : 
; 464  : 																// Can't be too close to a player
; 465  : 																if(iPlotDistance <= iPlayerCapitalMinDistance)

	cmp	ebx, DWORD PTR _iPlayerCapitalMinDistance$218557[esp+116]
	jg	SHORT $LN15@DoCamps

; 466  : 																{
; 467  : 																	if(pNearbyCampPlot->isCity())

	mov	ecx, esi
	call	?isCity@CvPlot@@QBE_NXZ			; CvPlot::isCity
	test	al, al
	je	SHORT $LN15@DoCamps

; 468  : 																	{
; 469  : 																		if(pNearbyCampPlot->getPlotCity()->isCapital())

	mov	ecx, esi
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	mov	ecx, eax
	call	?isCapital@CvCity@@QBE_NXZ		; CvCity::isCapital
	test	al, al
	je	SHORT $LN15@DoCamps

; 470  : 																		{
; 471  : 																			// Only care about Majors' capitals
; 472  : 																			if(pNearbyCampPlot->getPlotCity()->getOwner() < MAX_MAJOR_CIVS)

	mov	ecx, esi
	call	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ	; CvPlot::getPlotCity
	cmp	DWORD PTR [eax+84], 22			; 00000016H
	jl	$LN173@DoCamps
$LN15@DoCamps:

; 473  : 																			{
; 474  : 																				bSomethingTooClose = true;
; 475  : 																				break;
; 476  : 																			}
; 477  : 																		}
; 478  : 																	}
; 479  : 																}
; 480  : 
; 481  : 																// Can't be too close to another Camp
; 482  : 																if(iPlotDistance <= iBarbCampMinDistance)

	cmp	ebx, DWORD PTR _iBarbCampMinDistance$218558[esp+116]
	jg	SHORT $LN21@DoCamps

; 483  : 																{
; 484  : 																	if(pNearbyCampPlot->getImprovementType() == eCamp)

	mov	ecx, esi
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, DWORD PTR _eCamp$[esp+116]
	je	$LN173@DoCamps
$LN21@DoCamps:

; 450  : 													{
; 451  : 														for(iDY = -(iMaxDistanceToLook); iDY <= iMaxDistanceToLook; iDY++)

	mov	eax, DWORD PTR _iDY$218562[esp+116]
	inc	eax
	cmp	eax, DWORD PTR _iMaxDistanceToLook$218559[esp+116]
	mov	DWORD PTR _iDY$218562[esp+116], eax
	mov	eax, DWORD PTR _iDX$218561[esp+116]
	jle	$LL172@DoCamps
	mov	ecx, DWORD PTR tv783[esp+116]
	mov	ebp, DWORD PTR _kMap$218531[esp+116]
	mov	ebx, DWORD PTR _iMaxDistanceToLook$218559[esp+116]
$LN20@DoCamps:
	inc	eax
	cmp	eax, ebx
	mov	DWORD PTR _iDX$218561[esp+116], eax
	jle	$LL25@DoCamps
$LN170@DoCamps:

; 485  : 																	{
; 486  : 																		bSomethingTooClose = true;
; 487  : 																		break;
; 488  : 																	}
; 489  : 																}
; 490  : 															}
; 491  : 														}
; 492  : 														if(bSomethingTooClose)
; 493  : 														{
; 494  : 															break;
; 495  : 														}
; 496  : 													}
; 497  : 
; 498  : 													// Found a camp too close, check another Plot
; 499  : 													if(bSomethingTooClose)
; 500  : 														continue;
; 501  : 
; 502  : 													// Last check
; 503  : 													if(!CvBarbarians::IsPlotValidForBarbCamp(pLoopPlot))

	push	edi
	call	?IsPlotValidForBarbCamp@CvBarbarians@@CA_NPAVCvPlot@@@Z ; CvBarbarians::IsPlotValidForBarbCamp
	add	esp, 4
	test	al, al
	je	$LN38@DoCamps

; 504  : 														continue;
; 505  : 
; 506  : 													pLoopPlot->setImprovementType(eCamp);

	mov	eax, DWORD PTR _eCamp$[esp+116]
	push	-1
	push	eax
	mov	ecx, edi
	call	?setImprovementType@CvPlot@@QAEXW4ImprovementTypes@@W4PlayerTypes@@@Z ; CvPlot::setImprovementType

; 507  : 													DoCampActivationNotice(pLoopPlot);

	push	edi
	call	?DoCampActivationNotice@CvBarbarians@@CAXPAVCvPlot@@@Z ; CvBarbarians::DoCampActivationNotice

; 508  : 
; 509  : 													eBestUnit = GetRandomBarbarianUnitType(kMap.getArea(pLoopPlot->getArea()), UNITAI_DEFENSE);

	mov	eax, DWORD PTR [edi+356]
	add	esp, 4
	push	6
	push	eax
	mov	ecx, ebp
	call	?getArea@CvMap@@QAEPAVCvArea@@H@Z	; CvMap::getArea
	push	eax
	call	?GetRandomBarbarianUnitType@CvBarbarians@@CA?AW4UnitTypes@@PAVCvArea@@W4UnitAITypes@@@Z ; CvBarbarians::GetRandomBarbarianUnitType
	mov	esi, eax
	add	esp, 8

; 510  : 
; 511  : 													if(eBestUnit != NO_UNIT)

	cmp	esi, -1
	je	SHORT $LN9@DoCamps

; 512  : 													{
; 513  : #ifdef AUI_WARNING_FIXES
; 514  : 														CvUnitEntry* pUnitInfo = GC.getUnitInfo(eBestUnit);
; 515  : 														if (pUnitInfo)
; 516  : 															GET_PLAYER(BARBARIAN_PLAYER).initUnit(eBestUnit, pLoopPlot->getX(), pLoopPlot->getY(), (UnitAITypes)pUnitInfo->GetDefaultUnitAIType());
; 517  : #else
; 518  : 														GET_PLAYER(BARBARIAN_PLAYER).initUnit(eBestUnit, pLoopPlot->getX(), pLoopPlot->getY(), (UnitAITypes) GC.getUnitInfo(eBestUnit)->GetDefaultUnitAIType());

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	movsx	ebx, WORD PTR [edi+2]
	movsx	ebp, WORD PTR [edi]
	push	0
	push	0
	push	1
	push	0
	add	ecx, 3983868				; 003cc9fcH
	push	-1
	mov	DWORD PTR $T220568[esp+136], ecx
	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	ecx, eax
	call	?GetDefaultUnitAIType@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetDefaultUnitAIType
	mov	ecx, DWORD PTR $T220568[esp+136]
	push	eax
	push	ebx
	push	ebp
	push	esi
	call	?initUnit@CvPlayer@@QAEPAVCvUnit@@W4UnitTypes@@HHW4UnitAITypes@@W4DirectionTypes@@_N3HH@Z ; CvPlayer::initUnit
$LN9@DoCamps:

; 519  : #endif
; 520  : 													}
; 521  : 
; 522  : 													// If we should update Camp visibility (for Policy), do so
; 523  : 													PlayerTypes ePlayer;
; 524  : 													TeamTypes eTeam;
; 525  : 													for(iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)

	xor	ebp, ebp
	xor	esi, esi
	npad	7
$LL8@DoCamps:

; 526  : 													{
; 527  : 														ePlayer = (PlayerTypes) iPlayerLoop;
; 528  : 														eTeam = GET_PLAYER(ePlayer).getTeam();

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR [esi+edx+44]
	lea	ecx, DWORD PTR [esi+edx]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN141@DoCamps
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN142@DoCamps
$LN141@DoCamps:
	or	ebx, -1
$LN142@DoCamps:

; 529  : 
; 530  : 														if(GET_PLAYER(ePlayer).IsAlwaysSeeBarbCamps())

	call	?IsAlwaysSeeBarbCamps@CvPlayer@@QBE_NXZ	; CvPlayer::IsAlwaysSeeBarbCamps
	test	al, al
	je	SHORT $LN7@DoCamps

; 531  : 														{
; 532  : 															if(pLoopPlot->isRevealed(eTeam))

	push	ebx
	mov	ecx, edi
	call	?isRevealed@CvPlot@@QBE_NW4TeamTypes@@@Z ; CvPlot::isRevealed
	test	al, al
	je	SHORT $LN7@DoCamps

; 533  : 															{
; 534  : 																pLoopPlot->setRevealedImprovementType(eTeam, eCamp);

	mov	eax, DWORD PTR _eCamp$[esp+116]
	push	eax
	push	ebx
	mov	ecx, edi
	call	?setRevealedImprovementType@CvPlot@@QAE_NW4TeamTypes@@W4ImprovementTypes@@@Z ; CvPlot::setRevealedImprovementType

; 535  : 																if(GC.getGame().getActivePlayer() == ePlayer)

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getActivePlayer@CvGame@@QBE?AW4PlayerTypes@@XZ ; CvGame::getActivePlayer
	cmp	eax, ebp
	jne	SHORT $LN7@DoCamps

; 536  : 																	bAlwaysRevealedBarbCamp = true;

	mov	BYTE PTR _bAlwaysRevealedBarbCamp$[esp+116], 1
$LN7@DoCamps:

; 519  : #endif
; 520  : 													}
; 521  : 
; 522  : 													// If we should update Camp visibility (for Policy), do so
; 523  : 													PlayerTypes ePlayer;
; 524  : 													TeamTypes eTeam;
; 525  : 													for(iPlayerLoop = 0; iPlayerLoop < MAX_MAJOR_CIVS; iPlayerLoop++)

	add	esi, 63236				; 0000f704H
	inc	ebp
	cmp	esi, 1391192				; 00153a58H
	jl	SHORT $LL8@DoCamps

; 537  : 															}
; 538  : 														}
; 539  : 													}
; 540  : 
; 541  : 													// Add another Unit adjacent to the Camp to stir up some trouble (JON: Disabled for now 09/12/09)
; 542  : 													//doSpawnBarbarianUnit(pLoopPlot);
; 543  : 
; 544  : 													iNumCampsToAdd--;
; 545  : 
; 546  : 													// Seed the next Camp for Coast or not
; 547  : 													bWantsCoastal = kGame.getJonRandNum(/*5*/ GC.getBARBARIAN_CAMP_COASTAL_SPAWN_ROLL(), "Barb Camp Plot-Finding Roll - Coastal Bias 2") == 0 ? true : false;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7048
	dec	DWORD PTR _iNumCampsToAdd$218542[esp+116]
	push	OFFSET $SG218610
	push	ecx
	mov	ecx, DWORD PTR _kGame$[esp+124]
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	test	eax, eax
	sete	BYTE PTR _bWantsCoastal$218555[esp+116]
$LN173@DoCamps:
	mov	ebx, DWORD PTR _iMaxDistanceToLook$218559[esp+116]
	mov	ebp, DWORD PTR _kMap$218531[esp+116]
$LN38@DoCamps:

; 548  : 												}
; 549  : 											}
; 550  : 										}
; 551  : 									}
; 552  : 								}
; 553  : 							}
; 554  : 						}
; 555  : 					}
; 556  : 				}
; 557  : 			}
; 558  : 			while(iNumCampsToAdd > 0 && iCount < iNumLandPlots);

	cmp	DWORD PTR _iNumCampsToAdd$218542[esp+116], 0
	jle	SHORT $LN2@DoCamps
	mov	esi, DWORD PTR _iCount$218550[esp+116]
	cmp	esi, DWORD PTR _iNumLandPlots$218554[esp+116]
	jl	$LL177@DoCamps
$LN2@DoCamps:

; 559  : 		}

	lea	ecx, DWORD PTR _strBuffer$218565[esp+116]
	mov	DWORD PTR __$EHRec$[esp+124], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 560  : 	}
; 561  : 
; 562  : 	if(bAlwaysRevealedBarbCamp)

	cmp	BYTE PTR _bAlwaysRevealedBarbCamp$[esp+116], 0
	je	SHORT $LN181@DoCamps

; 563  : 		GC.getMap().updateDeferredFog();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	call	?updateDeferredFog@CvMap@@QAEXXZ	; CvMap::updateDeferredFog
$LN181@DoCamps:
	pop	esi
	pop	ebp
	pop	ebx
$LN180@DoCamps:
	pop	edi
$LN1@DoCamps:

; 564  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+100]
	mov	DWORD PTR fs:0, ecx
	add	esp, 100				; 00000064H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DoCamps@CvBarbarians@@SAXXZ$0:
	lea	ecx, DWORD PTR _strBuffer$218565[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?DoCamps@CvBarbarians@@SAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?DoCamps@CvBarbarians@@SAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DoCamps@CvBarbarians@@SAXXZ ENDP			; CvBarbarians::DoCamps
PUBLIC	??1?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum DirectionTypes,6,1,297,0>::~FStaticVector<enum DirectionTypes,6,1,297,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<enum DirectionTypes,6,1,297,0>::~FStaticVector<enum DirectionTypes,6,1,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<enum DirectionTypes,6,1,297,0>::~FStaticVector<enum DirectionTypes,6,1,297,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum DirectionTypes,6,1,297,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<enum DirectionTypes,6,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN30@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN30@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN31@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN31@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 6
	jbe	SHORT $LN15@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [ebp*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN14@GrowSize
$LN15@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 6
$LN14@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN33@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN33@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+36], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<enum DirectionTypes,6,1,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAEIABW4DirectionTypes@@@Z ; FStaticVector<enum DirectionTypes,6,1,297,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAEIABW4DirectionTypes@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAEIABW4DirectionTypes@@@Z PROC ; FStaticVector<enum DirectionTypes,6,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+36], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum DirectionTypes,6,1,297,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR _element$[esp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAEIABW4DirectionTypes@@@Z ENDP ; FStaticVector<enum DirectionTypes,6,1,297,0>::push_back
_TEXT	ENDS
PUBLIC	?DoSpawnBarbarianUnit@CvBarbarians@@SAXPAVCvPlot@@_N1@Z ; CvBarbarians::DoSpawnBarbarianUnit
EXTRN	?isLake@CvPlot@@QBE_NXZ:PROC			; CvPlot::isLake
EXTRN	?isBarbarian@CvUnit@@QBE_NXZ:PROC		; CvUnit::isBarbarian
EXTRN	?getUnitByIndex@CvPlot@@QBEPAVCvUnit@@H@Z:PROC	; CvPlot::getUnitByIndex
EXTRN	?getNumUnits@CvPlot@@QBEHXZ:PROC		; CvPlot::getNumUnits
EXTRN	?finishMoves@CvUnit@@QAEXXZ:PROC		; CvUnit::finishMoves
EXTRN	?GetNumCombatUnits@CvPlot@@QAEHXZ:PROC		; CvPlot::GetNumCombatUnits
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvbarbarians.cpp
;	COMDAT ?DoSpawnBarbarianUnit@CvBarbarians@@SAXPAVCvPlot@@_N1@Z
_TEXT	SEGMENT
_bCanSpawnBoats$218723 = -29				; size = 1
tv627 = -28						; size = 4
_iRange$ = -24						; size = 4
tv642 = -20						; size = 4
_iNumNearbyUnits$ = -16					; size = 4
_kGame$ = -12						; size = 4
tv466 = -8						; size = 4
tv462 = -4						; size = 4
_eDirection$ = -4					; size = 4
_pPlot$ = 8						; size = 4
_bIgnoreMaxBarbarians$ = 12				; size = 1
_bFinishMoves$ = 16					; size = 1
?DoSpawnBarbarianUnit@CvBarbarians@@SAXPAVCvPlot@@_N1@Z PROC ; CvBarbarians::DoSpawnBarbarianUnit, COMDAT

; 736  : {

	sub	esp, 32					; 00000020H

; 737  : 	int iNumNearbyUnits;
; 738  : #ifdef AUI_WARNING_FIXES
; 739  : 	uint iNearbyUnitLoop;
; 740  : #else
; 741  : 	int iNearbyUnitLoop;
; 742  : #endif
; 743  : 	int iRange = GC.getMAX_BARBARIANS_FROM_CAMP_NEARBY_RANGE();
; 744  : 	int iX;
; 745  : 	int iY;
; 746  : 	CvPlot* pNearbyPlot;
; 747  : 	DirectionTypes eDirection;
; 748  : 
; 749  : 	CvGame& kGame = GC.getGame();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	push	ebx
	push	esi

; 750  : 
; 751  : 	if (pPlot == 0)

	mov	esi, DWORD PTR _pPlot$[esp+36]
	push	edi
	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7064
	xor	ebx, ebx
	mov	DWORD PTR _iRange$[esp+44], edi
	mov	DWORD PTR _kGame$[esp+44], eax
	cmp	esi, ebx
	je	$LN1@DoSpawnBar

; 752  : 		return;
; 753  : 
; 754  : 	// is this camp empty - first priority is to fill it
; 755  : 	if (pPlot && pPlot->GetNumCombatUnits() == 0)

	mov	ecx, esi
	call	?GetNumCombatUnits@CvPlot@@QAEHXZ	; CvPlot::GetNumCombatUnits
	test	eax, eax
	jne	SHORT $LN30@DoSpawnBar

; 756  : 	{
; 757  : 		UnitTypes eUnit;
; 758  : 		eUnit = GetRandomBarbarianUnitType(GC.getMap().getArea(pPlot->getArea()), UNITAI_FAST_ATTACK);

	mov	eax, DWORD PTR [esi+356]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	5
	push	eax
	call	?getArea@CvMap@@QAEPAVCvArea@@H@Z	; CvMap::getArea
	push	eax
	call	?GetRandomBarbarianUnitType@CvBarbarians@@CA?AW4UnitTypes@@PAVCvArea@@W4UnitAITypes@@@Z ; CvBarbarians::GetRandomBarbarianUnitType
	add	esp, 8

; 759  : 
; 760  : 		if (eUnit != NO_UNIT)

	cmp	eax, -1
	je	SHORT $LN30@DoSpawnBar

; 761  : 		{
; 762  : 			CvUnit* pUnit = GET_PLAYER(BARBARIAN_PLAYER).initUnit(eUnit, pPlot->getX(), pPlot->getY(), UNITAI_FAST_ATTACK);

	movsx	edx, WORD PTR [esi+2]
	movsx	esi, WORD PTR [esi]
	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ebx
	push	ebx
	push	1
	push	ebx
	push	-1
	push	5
	push	edx
	push	esi
	add	ecx, 3983868				; 003cc9fcH
	push	eax
	call	?initUnit@CvPlayer@@QAEPAVCvUnit@@W4UnitTypes@@HHW4UnitAITypes@@W4DirectionTypes@@_N3HH@Z ; CvPlayer::initUnit
	pop	edi
	pop	esi

; 763  : 			pUnit->finishMoves();

	mov	ecx, eax
	pop	ebx

; 875  : 				}
; 876  : 			}
; 877  : 		}
; 878  : 	}
; 879  : }

	add	esp, 32					; 00000020H

; 763  : 			pUnit->finishMoves();

	jmp	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves
$LN30@DoSpawnBar:

; 764  : 			return;
; 765  : 		}
; 766  : 	}
; 767  : 
; 768  : 	m_aeValidBarbSpawnDirections.clear();

	mov	DWORD PTR ?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A+4, ebx

; 769  : 
; 770  : 	// Look at nearby Plots to see if there are already too many Barbs nearby
; 771  : 	iNumNearbyUnits = 0;

	mov	DWORD PTR _iNumNearbyUnits$[esp+44], ebx

; 772  : 
; 773  : #ifdef AUI_HEXSPACE_DX_LOOPS
; 774  : 	int iMaxDX;
; 775  : 	for (iY = -iRange; iY <= iRange; iY++)
; 776  : 	{
; 777  : 		iMaxDX = iRange - MAX(0, iY);
; 778  : 		for (iX = -iRange - MIN(0, iY); iX <= iMaxDX; iX++) // MIN() and MAX() stuff is to reduce loops (hexspace!)
; 779  : 		{
; 780  : 			// No need for range check because loops are set up properly
; 781  : 			pNearbyPlot = plotXY(pPlot->getX(), pPlot->getY(), iX, iY);
; 782  : #else
; 783  : 	for(iX = -iRange; iX <= iRange; iX++)

	mov	ebx, edi
	neg	ebx
	push	ebp
	mov	ebp, ebx
	cmp	ebp, edi
	mov	DWORD PTR tv462[esp+48], ebx
	jg	$LN27@DoSpawnBar
	mov	ecx, ebp
	neg	ecx
	mov	DWORD PTR tv642[esp+48], ecx
	npad	6
$LL29@DoSpawnBar:

; 784  : 	{
; 785  : 		for(iY = -iRange; iY <= iRange; iY++)

	cmp	ebx, edi
	jg	$LN28@DoSpawnBar

; 786  : 		{
; 787  : 			// Cut off the corners of the area we're looking at that we don't want
; 788  : 			pNearbyPlot = plotXYWithRangeCheck(pPlot->getX(), pPlot->getY(), iX, iY, iRange);

	xor	edx, edx
	test	ebp, ebp
	setge	dl
	mov	edi, ebx
	neg	edi
	mov	DWORD PTR tv627[esp+48], edi
	mov	DWORD PTR tv466[esp+48], edx
	npad	5
$LL26@DoSpawnBar:
	xor	eax, eax
	test	ebx, ebx
	setge	al
	cmp	DWORD PTR tv466[esp+48], eax
	jne	SHORT $LN63@DoSpawnBar
	test	ebp, ebp
	jl	SHORT $LN66@DoSpawnBar
	mov	ecx, ebp
$LN66@DoSpawnBar:
	mov	eax, ebx
	test	ebx, ebx
	jge	SHORT $LN69@DoSpawnBar
	mov	eax, edi
$LN69@DoSpawnBar:
	add	eax, ecx
	jmp	SHORT $LN74@DoSpawnBar
$LN63@DoSpawnBar:
	test	ebp, ebp
	jl	SHORT $LN70@DoSpawnBar
	mov	ecx, ebp
$LN70@DoSpawnBar:
	mov	eax, ebx
	test	ebx, ebx
	jge	SHORT $LN73@DoSpawnBar
	mov	eax, edi
$LN73@DoSpawnBar:
	cmp	ecx, eax
	jl	SHORT $LN74@DoSpawnBar
	mov	eax, ecx
$LN74@DoSpawnBar:
	cmp	eax, DWORD PTR _iRange$[esp+48]
	jg	SHORT $LN25@DoSpawnBar
	mov	eax, DWORD PTR _pPlot$[esp+44]
	movsx	ecx, WORD PTR [eax+2]
	movsx	edx, WORD PTR [eax]
	push	ebx
	push	ebp
	push	ecx
	push	edx
	call	?plotXY@@YAPAVCvPlot@@HHHH@Z		; plotXY
	mov	esi, eax
	add	esp, 16					; 00000010H

; 789  : #endif
; 790  : 
; 791  : 			if(pNearbyPlot != NULL)

	test	esi, esi
	je	SHORT $LN25@DoSpawnBar

; 792  : 			{
; 793  : 				if(pNearbyPlot->getNumUnits() > 0)

	mov	ecx, esi
	call	?getNumUnits@CvPlot@@QBEHXZ		; CvPlot::getNumUnits
	test	eax, eax
	jle	SHORT $LN25@DoSpawnBar

; 794  : 				{
; 795  : 					for(iNearbyUnitLoop = 0; iNearbyUnitLoop < pNearbyPlot->getNumUnits(); iNearbyUnitLoop++)

	mov	ecx, esi
	xor	edi, edi
	call	?getNumUnits@CvPlot@@QBEHXZ		; CvPlot::getNumUnits
	test	eax, eax
	jle	SHORT $LN128@DoSpawnBar
	npad	2
$LL21@DoSpawnBar:

; 796  : 					{
; 797  : 						const CvUnit* const unit = pNearbyPlot->getUnitByIndex(iNearbyUnitLoop);

	push	edi
	mov	ecx, esi
	call	?getUnitByIndex@CvPlot@@QBEPAVCvUnit@@H@Z ; CvPlot::getUnitByIndex

; 798  : #ifdef AUI_WARNING_FIXES
; 799  : 						if (unit && unit->isBarbarian())
; 800  : #else
; 801  : 						if(unit && pNearbyPlot->getUnitByIndex(iNearbyUnitLoop)->isBarbarian())

	test	eax, eax
	je	SHORT $LN20@DoSpawnBar
	push	edi
	mov	ecx, esi
	call	?getUnitByIndex@CvPlot@@QBEPAVCvUnit@@H@Z ; CvPlot::getUnitByIndex
	mov	ecx, eax
	call	?isBarbarian@CvUnit@@QBE_NXZ		; CvUnit::isBarbarian
	test	al, al
	je	SHORT $LN20@DoSpawnBar

; 802  : #endif
; 803  : 						{
; 804  : 							iNumNearbyUnits++;

	inc	DWORD PTR _iNumNearbyUnits$[esp+48]
$LN20@DoSpawnBar:

; 794  : 				{
; 795  : 					for(iNearbyUnitLoop = 0; iNearbyUnitLoop < pNearbyPlot->getNumUnits(); iNearbyUnitLoop++)

	mov	ecx, esi
	inc	edi
	call	?getNumUnits@CvPlot@@QBEHXZ		; CvPlot::getNumUnits
	cmp	edi, eax
	jl	SHORT $LL21@DoSpawnBar
$LN128@DoSpawnBar:
	mov	edi, DWORD PTR tv627[esp+48]
$LN25@DoSpawnBar:

; 784  : 	{
; 785  : 		for(iY = -iRange; iY <= iRange; iY++)

	mov	ecx, DWORD PTR tv642[esp+48]
	inc	ebx
	dec	edi
	cmp	ebx, DWORD PTR _iRange$[esp+48]
	mov	DWORD PTR tv627[esp+48], edi
	jle	$LL26@DoSpawnBar
	mov	edi, DWORD PTR _iRange$[esp+48]
	mov	ebx, DWORD PTR tv462[esp+48]
$LN28@DoSpawnBar:
	inc	ebp
	dec	ecx
	cmp	ebp, edi
	mov	DWORD PTR tv642[esp+48], ecx
	jle	$LL29@DoSpawnBar
$LN27@DoSpawnBar:

; 805  : 						}
; 806  : 					}
; 807  : 				}
; 808  : 			}
; 809  : 		}
; 810  : 	}
; 811  : 
; 812  : 	if(iNumNearbyUnits <= /*2*/ GC.getMAX_BARBARIANS_FROM_CAMP_NEARBY() || bIgnoreMaxBarbarians)

	mov	eax, DWORD PTR _iNumNearbyUnits$[esp+48]
	cmp	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7060
	jle	SHORT $LN16@DoSpawnBar
	cmp	BYTE PTR _bIgnoreMaxBarbarians$[esp+44], 0
	je	$LN132@DoSpawnBar
$LN16@DoSpawnBar:

; 813  : 	{
; 814  : 		CvPlot* pLoopPlot;
; 815  : 
; 816  : 		// Barbs only get boats after some period of time has passed
; 817  : 		bool bCanSpawnBoats = kGame.getElapsedGameTurns() > /*30*/ GC.getBARBARIAN_NAVAL_UNIT_START_TURN_SPAWN();

	mov	ecx, DWORD PTR _kGame$[esp+48]
	mov	esi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7056
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	cmp	eax, esi
	setg	BYTE PTR _bCanSpawnBoats$218723[esp+48]

; 818  : 
; 819  : 		// Look to see if adjacent Tiles are valid locations to spawn a Unit
; 820  : 		for(int iDirectionLoop = 0; iDirectionLoop < NUM_DIRECTION_TYPES; iDirectionLoop++)

	xor	edi, edi
	mov	bl, 3
	npad	2
$LL15@DoSpawnBar:

; 821  : 		{
; 822  : 			eDirection = (DirectionTypes) iDirectionLoop;
; 823  : 			pLoopPlot = plotDirection(pPlot->getX(), pPlot->getY(), eDirection);

	mov	ebp, DWORD PTR _pPlot$[esp+44]
	movsx	ecx, WORD PTR [ebp+2]
	movsx	edx, WORD PTR [ebp]
	push	edi
	push	ecx
	push	edx
	mov	DWORD PTR _eDirection$[esp+60], edi
	call	?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ; plotDirection
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 824  : 
; 825  : 			if(pLoopPlot != NULL)

	test	esi, esi
	je	SHORT $LN14@DoSpawnBar

; 826  : 			{
; 827  : 				if(pLoopPlot->getNumUnits() == 0)

	mov	ecx, esi
	call	?getNumUnits@CvPlot@@QBEHXZ		; CvPlot::getNumUnits
	test	eax, eax
	jne	SHORT $LN14@DoSpawnBar

; 828  : 				{
; 829  : 					if(!pLoopPlot->isImpassable() && !pLoopPlot->isMountain())

	test	BYTE PTR [esi+462], 128			; 00000080H
	jne	SHORT $LN14@DoSpawnBar
	cmp	BYTE PTR [esi+5], al
	je	SHORT $LN14@DoSpawnBar

; 830  : 					{
; 831  : 						if(!pLoopPlot->isCity())

	mov	eax, DWORD PTR [esi+104]
	test	eax, eax
	jl	SHORT $LN126@DoSpawnBar
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN126@DoSpawnBar
	mov	ecx, DWORD PTR [esi+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	test	eax, eax
	setne	al
	test	al, al
	jne	SHORT $LN14@DoSpawnBar
$LN126@DoSpawnBar:

; 832  : 						{
; 833  : 							if(!pLoopPlot->isLake())

	mov	ecx, esi
	call	?isLake@CvPlot@@QBE_NXZ			; CvPlot::isLake
	test	al, al
	jne	SHORT $LN14@DoSpawnBar

; 834  : 							{
; 835  : 								// Water Tiles are only valid when the Barbs have the proper Tech
; 836  : 								if(!pLoopPlot->isWater() || bCanSpawnBoats)

	cmp	BYTE PTR [esi+5], bl
	jne	SHORT $LN6@DoSpawnBar
	cmp	BYTE PTR _bCanSpawnBoats$218723[esp+48], al
	je	SHORT $LN14@DoSpawnBar
$LN6@DoSpawnBar:

; 837  : 								{
; 838  : 									m_aeValidBarbSpawnDirections.push_back(eDirection);

	lea	edx, DWORD PTR _eDirection$[esp+48]
	push	edx
	mov	ecx, OFFSET ?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A ; CvBarbarians::m_aeValidBarbSpawnDirections
	call	?push_back@?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@QAEIABW4DirectionTypes@@@Z ; FStaticVector<enum DirectionTypes,6,1,297,0>::push_back
$LN14@DoSpawnBar:
	inc	edi
	cmp	edi, 6
	jl	$LL15@DoSpawnBar

; 839  : 								}
; 840  : 							}
; 841  : 						}
; 842  : 					}
; 843  : 				}
; 844  : 			}
; 845  : 		}
; 846  : 
; 847  : 		// Any valid locations?
; 848  : 		if(m_aeValidBarbSpawnDirections.size() > 0)

	mov	eax, DWORD PTR ?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A+4
	test	eax, eax
	jbe	$LN132@DoSpawnBar

; 849  : 		{
; 850  : 			int iIndex = kGame.getJonRandNum(m_aeValidBarbSpawnDirections.size(), "Barb Unit Location Spawn Roll");

	mov	ecx, DWORD PTR _kGame$[esp+48]
	push	OFFSET $SG218738
	push	eax
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum

; 851  : 			eDirection = (DirectionTypes) m_aeValidBarbSpawnDirections[iIndex];

	mov	ecx, DWORD PTR ?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A
	mov	eax, DWORD PTR [ecx+eax*4]

; 852  : 			CvPlot* pSpawnPlot = plotDirection(pPlot->getX(), pPlot->getY(), eDirection);

	movsx	edx, WORD PTR [ebp+2]
	push	eax
	movsx	eax, WORD PTR [ebp]
	push	edx
	push	eax
	call	?plotDirection@@YAPAVCvPlot@@HHW4DirectionTypes@@@Z ; plotDirection

; 853  : 			UnitAITypes eUnitAI;
; 854  : 			UnitTypes eUnit;
; 855  : 
; 856  : 			// Naval Barbs
; 857  : 			if(pSpawnPlot->isWater())

	xor	ecx, ecx
	add	esp, 12					; 0000000cH
	mov	esi, eax
	cmp	BYTE PTR [esi+5], bl

; 858  : 			{
; 859  : 				eUnitAI = UNITAI_ATTACK_SEA;
; 860  : 			}
; 861  : 			// Land Barbs
; 862  : 			else
; 863  : 			{
; 864  : 				eUnitAI = UNITAI_FAST_ATTACK;
; 865  : 			}
; 866  : 
; 867  : 			eUnit = GetRandomBarbarianUnitType(GC.getMap().getArea(pSpawnPlot->getArea()), eUnitAI);

	mov	eax, DWORD PTR [esi+356]
	setne	cl
	dec	ecx
	and	ecx, 13					; 0000000dH
	add	ecx, 5
	mov	edi, ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	push	edi
	push	eax
	call	?getArea@CvMap@@QAEPAVCvArea@@H@Z	; CvMap::getArea
	push	eax
	call	?GetRandomBarbarianUnitType@CvBarbarians@@CA?AW4UnitTypes@@PAVCvArea@@W4UnitAITypes@@@Z ; CvBarbarians::GetRandomBarbarianUnitType
	add	esp, 8

; 868  : 
; 869  : 			if(eUnit != NO_UNIT)

	cmp	eax, -1
	je	SHORT $LN132@DoSpawnBar

; 870  : 			{
; 871  : 				CvUnit* pUnit = GET_PLAYER(BARBARIAN_PLAYER).initUnit(eUnit, pSpawnPlot->getX(), pSpawnPlot->getY(), eUnitAI);

	movsx	edx, WORD PTR [esi+2]
	movsx	esi, WORD PTR [esi]
	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	0
	push	0
	push	1
	push	0
	push	-1
	push	edi
	push	edx
	push	esi
	add	ecx, 3983868				; 003cc9fcH
	push	eax
	call	?initUnit@CvPlayer@@QAEPAVCvUnit@@W4UnitTypes@@HHW4UnitAITypes@@W4DirectionTypes@@_N3HH@Z ; CvPlayer::initUnit

; 872  : 				if (bFinishMoves)

	cmp	BYTE PTR _bFinishMoves$[esp+44], 0
	je	SHORT $LN132@DoSpawnBar
	pop	ebp
	pop	edi
	pop	esi

; 873  : 				{
; 874  : 					pUnit->finishMoves();

	mov	ecx, eax
	pop	ebx

; 875  : 				}
; 876  : 			}
; 877  : 		}
; 878  : 	}
; 879  : }

	add	esp, 32					; 00000020H

; 873  : 				{
; 874  : 					pUnit->finishMoves();

	jmp	?finishMoves@CvUnit@@QAEXXZ		; CvUnit::finishMoves
$LN132@DoSpawnBar:
	pop	ebp
$LN1@DoSpawnBar:
	pop	edi
	pop	esi
	pop	ebx

; 875  : 				}
; 876  : 			}
; 877  : 		}
; 878  : 	}
; 879  : }

	add	esp, 32					; 00000020H
	ret	0
?DoSpawnBarbarianUnit@CvBarbarians@@SAXPAVCvPlot@@_N1@Z ENDP ; CvBarbarians::DoSpawnBarbarianUnit
_TEXT	ENDS
PUBLIC	?DoUnits@CvBarbarians@@SAXXZ			; CvBarbarians::DoUnits
; Function compile flags: /Ogtpy
;	COMDAT ?DoUnits@CvBarbarians@@SAXXZ
_TEXT	SEGMENT
_eCamp$ = -4						; size = 4
?DoUnits@CvBarbarians@@SAXXZ PROC			; CvBarbarians::DoUnits, COMDAT

; 697  : {

	push	ecx

; 698  : 	CvGame& kGame = GC.getGame();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48

; 699  : 
; 700  : 	if(kGame.isOption(GAMEOPTION_NO_BARBARIANS))

	push	1
	call	?isOption@CvGame@@QBE_NW4GameOptionTypes@@@Z ; CvGame::isOption
	test	al, al
	jne	SHORT $LN3@DoUnits

; 701  : 	{
; 702  : 		return;
; 703  : 	}
; 704  : 
; 705  : 	if(!CanBarbariansSpawn())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN3@DoUnits

; 706  : 	{
; 707  : 		return;
; 708  : 	}
; 709  : 
; 710  : 	ImprovementTypes eCamp = (ImprovementTypes)GC.getBARBARIAN_CAMP_IMPROVEMENT();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8548
	push	ebp
	push	edi

; 711  : 
; 712  : 	CvMap& kMap = GC.getMap();

	mov	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52

; 713  : #ifdef AUI_WARNING_FIXES
; 714  : 	for (uint iPlotLoop = 0; iPlotLoop < kMap.numPlots(); iPlotLoop++)
; 715  : #else
; 716  : 	for(int iPlotLoop = 0; iPlotLoop < kMap.numPlots(); iPlotLoop++)

	xor	ebp, ebp
	cmp	DWORD PTR [edi+4028], ebp
	mov	DWORD PTR _eCamp$[esp+12], eax
	jle	SHORT $LN32@DoUnits
	push	ebx
	push	esi
	xor	ebx, ebx
$LL5@DoUnits:

; 717  : #endif
; 718  : 	{
; 719  : 		CvPlot* pLoopPlot = kMap.plotByIndexUnchecked(iPlotLoop);

	mov	esi, DWORD PTR [edi+4068]
	add	esi, ebx

; 720  : 
; 721  : 		// Found a Camp to spawn near
; 722  : 		if(pLoopPlot->getImprovementType() == eCamp)

	mov	ecx, esi
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, DWORD PTR _eCamp$[esp+20]
	jne	SHORT $LN4@DoUnits

; 723  : 		{
; 724  : 			if(ShouldSpawnBarbFromCamp(pLoopPlot))

	mov	ecx, esi
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	ecx, DWORD PTR ?m_aiPlotBarbCampSpawnCounter@CvBarbarians@@0PAFA ; CvBarbarians::m_aiPlotBarbCampSpawnCounter
	cmp	WORD PTR [ecx+eax*2], 0
	jne	SHORT $LN4@DoUnits

; 725  : 			{
; 726  : 				DoSpawnBarbarianUnit(pLoopPlot, false, false);

	push	0
	push	0
	push	esi
	call	?DoSpawnBarbarianUnit@CvBarbarians@@SAXPAVCvPlot@@_N1@Z ; CvBarbarians::DoSpawnBarbarianUnit

; 727  : 				DoCampActivationNotice(pLoopPlot);

	push	esi
	call	?DoCampActivationNotice@CvBarbarians@@CAXPAVCvPlot@@@Z ; CvBarbarians::DoCampActivationNotice
	add	esp, 16					; 00000010H
$LN4@DoUnits:
	inc	ebp
	add	ebx, 484				; 000001e4H
	cmp	ebp, DWORD PTR [edi+4028]
	jl	SHORT $LL5@DoUnits
	pop	esi
	pop	ebx
$LN32@DoUnits:
	pop	edi
	pop	ebp
$LN3@DoUnits:

; 728  : 			}
; 729  : 		}
; 730  : 	}
; 731  : }

	pop	ecx
	ret	0
?DoUnits@CvBarbarians@@SAXXZ ENDP			; CvBarbarians::DoUnits
_TEXT	ENDS
PUBLIC	?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A ; CvBarbarians::m_aeValidBarbSpawnDirections
EXTRN	_atexit:PROC
_DATA	SEGMENT
?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A DD FLAT:?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A+12 ; CvBarbarians::m_aeValidBarbSpawnDirections
	DB	4 DUP(00H)
	DD	06H
; Function compile flags: /Ogtpy
_DATA	ENDS
;	COMDAT ??__E?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A@@YAXXZ
text$yc	SEGMENT
??__E?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A@@YAXXZ PROC ; `dynamic initializer for 'CvBarbarians::m_aeValidBarbSpawnDirections'', COMDAT

; 22   : FStaticVector<DirectionTypes, 6, true, c_eCiv5GameplayDLL, 0> CvBarbarians::m_aeValidBarbSpawnDirections;

	push	OFFSET ??__F?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A@@YAXXZ ; `dynamic atexit destructor for 'CvBarbarians::m_aeValidBarbSpawnDirections''
	call	_atexit
	pop	ecx
	ret	0
??__E?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CvBarbarians::m_aeValidBarbSpawnDirections''
; Function compile flags: /Ogtpy
text$yc	ENDS
;	COMDAT ??__F?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A@@YAXXZ
text$yd	SEGMENT
??__F?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CvBarbarians::m_aeValidBarbSpawnDirections'', COMDAT
	mov	eax, DWORD PTR ?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A
	cmp	eax, OFFSET ?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A+12
	je	SHORT $LN5@m_aeValidB
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN5@m_aeValidB:
	ret	0
??__F?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CvBarbarians::m_aeValidBarbSpawnDirections''
text$yd	ENDS
CRT$XCU	SEGMENT
?m_aeValidBarbSpawnDirections$initializer$@CvBarbarians@@0P6AXXZA DD FLAT:??__E?m_aeValidBarbSpawnDirections@CvBarbarians@@0V?$FStaticVector@W4DirectionTypes@@$05$00$0BCJ@$0A@@@A@@YAXXZ ; CvBarbarians::m_aeValidBarbSpawnDirections$initializer$
CRT$XCU	ENDS
END
