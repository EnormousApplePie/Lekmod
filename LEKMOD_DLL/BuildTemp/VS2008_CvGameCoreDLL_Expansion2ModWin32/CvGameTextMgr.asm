; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Documents\GitHub\Lekmod\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvGameTextMgr.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG217593 DB	'%04d', 00H
	ORG $+3
$SG217594 DB	'%04d', 00H
	ORG $+3
$SG217595 DB	'TXT_KEY_TIME_BC_SAVE', 00H
	ORG $+3
$SG217603 DB	'TXT_KEY_TIME_BC', 00H
$SG217612 DB	'%04d', 00H
	ORG $+3
$SG217613 DB	'%04d', 00H
	ORG $+3
$SG217614 DB	'TXT_KEY_TIME_AD_SAVE', 00H
	ORG $+3
$SG217617 DB	'TXT_KEY_TIME_AD', 00H
$SG217630 DB	'%04d', 00H
	ORG $+3
$SG217631 DB	'0001', 00H
	ORG $+3
$SG217632 DB	'TXT_KEY_TIME_AD_SAVE', 00H
	ORG $+3
$SG217635 DB	'TXT_KEY_TIME_AD', 00H
$SG217648 DB	'Months', 00H
	ORG $+1
$SG217650 DB	'Seasons', 00H
$SG217662 DB	'Months', 00H
	ORG $+1
$SG217669 DB	'-', 00H
	ORG $+2
$SG217674 DB	', ', 00H
	ORG $+1
$SG217678 DB	'TXT_KEY_TIME_TURN', 00H
	ORG $+2
$SG217682 DB	'Seasons', 00H
$SG217688 DB	'-', 00H
	ORG $+2
$SG217694 DB	', ', 00H
	ORG $+1
$SG217698 DB	'Months', 00H
	ORG $+1
$SG217704 DB	'-', 00H
	ORG $+2
$SG217710 DB	', ', 00H
	ORG $+1
$SG217713 DB	'TXT_KEY_TIME_WEEK', 00H
	ORG $+2
$SG217717 DB	'Months', 00H
	ORG $+1
$SG217725 DB	'-', 00H
	ORG $+2
$SG217726 DB	'-', 00H
	ORG $+2
$SG217733 DB	', ', 00H
	ORG $+1
$SG217734 DB	', ', 00H
CONST	ENDS
PUBLIC	??1SingleResult@Database@@UAE@XZ		; Database::SingleResult::~SingleResult
EXTRN	__imp_??1Results@Database@@UAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1SingleResult@Database@@UAE@XZ
_TEXT	SEGMENT
??1SingleResult@Database@@UAE@XZ PROC			; Database::SingleResult::~SingleResult, COMDAT
; _this$ = ecx
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
??1SingleResult@Database@@UAE@XZ ENDP			; Database::SingleResult::~SingleResult
_TEXT	ENDS
PUBLIC	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBD@Z:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvlocalization\include\cvlocalization.h
;	COMDAT ??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z PROC	; operator<<<char const *>, COMDAT

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR _s$[esp]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 492  : 	return s;

	mov	eax, esi
	pop	esi

; 493  : }

	ret	0
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ENDP	; operator<<<char const *>
_TEXT	ENDS
PUBLIC	??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z	; operator<<<int>
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NH@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z PROC	; operator<<<int>, COMDAT

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[esp-4]
	mov	ecx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR _s$[esp]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NH@Z

; 492  : 	return s;

	mov	eax, esi
	pop	esi

; 493  : }

	ret	0
??$?6H@@YAAAVString@Localization@@AAV01@ABH@Z ENDP	; operator<<<int>
_TEXT	ENDS
PUBLIC	??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z ; operator<<<5>
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBDI@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z PROC ; operator<<<5>, COMDAT

; 498  : 	s.PushArgument(val, N - 1);

	mov	eax, DWORD PTR _val$[esp-4]
	push	esi
	mov	esi, DWORD PTR _s$[esp]
	push	4
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBDI@Z

; 499  : 	return s;

	mov	eax, esi
	pop	esi

; 500  : }

	ret	0
??$?6$04@@YAAAVString@Localization@@AAV01@AAY04$$CBD@Z ENDP ; operator<<<5>
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0CvString@@QAE@PBD@Z				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0CvString@@QAE@PBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??0CvString@@QAE@PBD@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 25   : 	CvString(const char* s) : std::string(s ? s : "") {CvAssertMsg(s != NULL, "Passing NULL to std::string; possible heap corruption!");}

	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, ecx
	test	eax, eax
	jne	SHORT $LN4@CvString
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@CvString:
	push	eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@PBD@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??0CvString@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??0CvString@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CvString::CvString, COMDAT
; _this$ = ecx

; 26   : 	CvString(const std::string& s): std::string(s) {}

	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CvString::operator=, COMDAT
; _this$ = ecx

; 38   : 	CvString& operator=( const std::string& s) { assign(s.c_str());	return *this; }	

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _s$[esp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CvString::operator=
_TEXT	ENDS
PUBLIC	?GetCString@CvString@@QBEPBDXZ			; CvString::GetCString
; Function compile flags: /Ogtpy
;	COMDAT ?GetCString@CvString@@QBEPBDXZ
_TEXT	SEGMENT
?GetCString@CvString@@QBEPBDXZ PROC			; CvString::GetCString, COMDAT
; _this$ = ecx

; 42   : 	const char* GetCString() const 	{ return c_str(); }

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetCString@CvString@@QBEPBDXZ ENDP			; CvString::GetCString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
_buf$ = -2048						; size = 2048
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	sub	esp, 2048				; 00000800H
	push	ebx
	push	ebp

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	mov	ebp, DWORD PTR _args$[esp+2052]
	push	esi
	push	edi
	lea	edi, DWORD PTR _buf$[esp+2064]
	mov	esi, 2047				; 000007ffH
	npad	6
$LL10@formatv:

; 194  : 	int len = 0;
; 195  : 	int attempts = 0;
; 196  : 	bool success = false;
; 197  : 	const int kMaxAttempts = 40;
; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;
; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	eax, DWORD PTR _fmt$[esp+2060]
	push	ebp
	push	eax
	push	esi
	push	edi
	mov	ebx, esi
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H

; 203  : 		attempts++;

	add	esi, 2048				; 00000800H

; 204  : 		success = (len>=0 && len<=maxlen);

	test	eax, eax
	jl	SHORT $LN13@formatv
	cmp	eax, ebx
	jle	SHORT $LN18@formatv
$LN13@formatv:

; 205  : 		if (!success)
; 206  : 		{
; 207  : 			if (pbuf!=buf)

	lea	ecx, DWORD PTR _buf$[esp+2064]
	xor	bl, bl
	cmp	edi, ecx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	lea	edx, DWORD PTR [esi+1]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	cmp	esi, 83967				; 000147ffH
	mov	edi, eax
	jl	SHORT $LL10@formatv

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@formatv:
	mov	ecx, DWORD PTR _out$[esp+2064]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 223  : 
; 224  : 	if (pbuf!=buf)

	lea	eax, DWORD PTR _buf$[esp+2064]
	cmp	edi, eax
	je	SHORT $LN20@formatv

; 225  : 		delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN20@formatv:
	pop	edi
	pop	esi
	pop	ebp

; 226  : 
; 227  : 	return success;

	mov	al, bl
	pop	ebx

; 228  : }

	add	esp, 2048				; 00000800H
	ret	0
$LN18@formatv:

; 204  : 		success = (len>=0 && len<=maxlen);

	mov	bl, 1

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)
; 220  : 		out = pbuf;

	push	edi

; 221  : 	else

	jmp	SHORT $LN21@formatv
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	?format@CvString@@SA?AV1@PBDZZ			; CvString::format
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?format@CvString@@SA?AV1@PBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?format@CvString@@SA?AV1@PBDZZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?format@CvString@@SA?AV1@PBDZZ$0
__ehfuncinfo$?format@CvString@@SA?AV1@PBDZZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?format@CvString@@SA?AV1@PBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?format@CvString@@SA?AV1@PBDZZ
_TEXT	SEGMENT
$T218012 = -44						; size = 4
_result$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_fmt$ = 12						; size = 4
?format@CvString@@SA?AV1@PBDZZ PROC			; CvString::format, COMDAT

; 243  : {

	push	-1
	push	__ehhandler$?format@CvString@@SA?AV1@PBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	esi

; 244  : 	std::string result;

	lea	ecx, DWORD PTR _result$[esp+48]
	mov	DWORD PTR $T218012[esp+48], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 245  : 	va_list args;
; 246  : 	va_start(args,fmt);
; 247  : 	formatv(result,fmt,args);

	mov	ecx, DWORD PTR _fmt$[esp+44]
	lea	eax, DWORD PTR _fmt$[esp+48]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _result$[esp+56]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+68], 1
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv

; 248  : 	va_end(args);
; 249  : 	return CvString(result);

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+56]
	add	esp, 12					; 0000000cH
	lea	eax, DWORD PTR _result$[esp+48]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	lea	ecx, DWORD PTR _result$[esp+48]
	mov	DWORD PTR $T218012[esp+48], 1
	mov	BYTE PTR __$EHRec$[esp+56], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 250  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+48]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 44					; 0000002cH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?format@CvString@@SA?AV1@PBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?format@CvString@@SA?AV1@PBDZZ$1:
	mov	eax, DWORD PTR $T218012[ebp]
	and	eax, 1
	je	$LN5@format
	and	DWORD PTR $T218012[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@format:
	ret	0
__ehhandler$?format@CvString@@SA?AV1@PBDZZ:
	mov	eax, OFFSET __ehfuncinfo$?format@CvString@@SA?AV1@PBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?format@CvString@@SA?AV1@PBDZZ ENDP			; CvString::format
PUBLIC	?GetDescription@CvBaseInfo@@QBEPBDXZ		; CvBaseInfo::GetDescription
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
;	COMDAT ?GetDescription@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
?GetDescription@CvBaseInfo@@QBEPBDXZ PROC		; CvBaseInfo::GetDescription, COMDAT
; _this$ = ecx

; 64   : 		return m_strDescription.c_str();

	add	ecx, 36					; 00000024H
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetDescription@CvBaseInfo@@QBEPBDXZ ENDP		; CvBaseInfo::GetDescription
_TEXT	ENDS
PUBLIC	?getWEEKS_PER_MONTHS@CvGlobals@@QAEHXZ		; CvGlobals::getWEEKS_PER_MONTHS
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getWEEKS_PER_MONTHS@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getWEEKS_PER_MONTHS@CvGlobals@@QAEHXZ PROC		; CvGlobals::getWEEKS_PER_MONTHS, COMDAT
; _this$ = ecx

; 5260 : 		return m_iWEEKS_PER_MONTHS;

	mov	eax, DWORD PTR [ecx+6184]

; 5261 : 	}

	ret	0
?getWEEKS_PER_MONTHS@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getWEEKS_PER_MONTHS
_TEXT	ENDS
PUBLIC	?getHIDDEN_START_TURN_OFFSET@CvGlobals@@QAEHXZ	; CvGlobals::getHIDDEN_START_TURN_OFFSET
; Function compile flags: /Ogtpy
;	COMDAT ?getHIDDEN_START_TURN_OFFSET@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getHIDDEN_START_TURN_OFFSET@CvGlobals@@QAEHXZ PROC	; CvGlobals::getHIDDEN_START_TURN_OFFSET, COMDAT
; _this$ = ecx

; 5264 : 		return m_iHIDDEN_START_TURN_OFFSET;

	mov	eax, DWORD PTR [ecx+6188]

; 5265 : 	}

	ret	0
?getHIDDEN_START_TURN_OFFSET@CvGlobals@@QAEHXZ ENDP	; CvGlobals::getHIDDEN_START_TURN_OFFSET
_TEXT	ENDS
PUBLIC	?GetGameDatabase@CvGlobals@@QAEPAVConnection@Database@@XZ ; CvGlobals::GetGameDatabase
; Function compile flags: /Ogtpy
;	COMDAT ?GetGameDatabase@CvGlobals@@QAEPAVConnection@Database@@XZ
_TEXT	SEGMENT
?GetGameDatabase@CvGlobals@@QAEPAVConnection@Database@@XZ PROC ; CvGlobals::GetGameDatabase, COMDAT
; _this$ = ecx

; 9745 : 	return m_pGameDatabase;

	mov	eax, DWORD PTR [ecx+912]

; 9746 : }

	ret	0
?GetGameDatabase@CvGlobals@@QAEPAVConnection@Database@@XZ ENDP ; CvGlobals::GetGameDatabase
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV0@@Z			; CvString::operator=
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4CvString@@QAEAAV0@ABV0@@Z PROC			; CvString::operator=, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV0@@Z ENDP			; CvString::operator=
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@ABV0@@Z			; CvString::CvString
; Function compile flags: /Ogtpy
;	COMDAT ??0CvString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CvString@@QAE@ABV0@@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@ABV0@@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	lea	ecx, DWORD PTR [esi+232]
	mov	DWORD PTR __$EHRec$[esp+28], 7
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+204]
	mov	BYTE PTR __$EHRec$[esp+28], 6
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+176]
	mov	BYTE PTR __$EHRec$[esp+28], 5
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+148]
	mov	BYTE PTR __$EHRec$[esp+28], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+120]
	mov	BYTE PTR __$EHRec$[esp+28], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+92]
	mov	BYTE PTR __$EHRec$[esp+28], 2
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+64]
	mov	BYTE PTR __$EHRec$[esp+28], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+36]
	mov	BYTE PTR __$EHRec$[esp+28], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR __$EHRec$[esp+28], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
EXTRN	__imp_??1String@Localization@@UAE@XZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z:PROC
EXTRN	__imp_?Lookup@Localization@@YA?AVString@1@PBD@Z:PROC
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$0
__ehfuncinfo$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
_TEXT	SEGMENT
_bytes$ = -100						; size = 4
$T218115 = -96						; size = 4
_text$ = -92						; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z PROC ; GetLocalizedText<char const *,char const *>, COMDAT

; 514  : {

	push	-1
	push	__ehhandler$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[esp+96]
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	ecx, DWORD PTR _text$[esp+116]
	xor	ebx, ebx
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+128], ebx
	mov	DWORD PTR $T218115[esp+120], ebx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg1$[esp+108]
	mov	eax, DWORD PTR [edx]
	mov	esi, DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z
	push	eax
	lea	ecx, DWORD PTR _text$[esp+116]
	mov	DWORD PTR __$EHRec$[esp+124], 1
	call	esi
	mov	ecx, DWORD PTR _arg2$[esp+108]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _text$[esp+116]
	call	esi

; 517  : 
; 518  : 	size_t bytes = 0;
; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[esp+116]
	push	eax
	lea	ecx, DWORD PTR _text$[esp+120]
	mov	DWORD PTR _bytes$[esp+120], ebx
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z

; 520  : 	CvString str;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+108]
	mov	ecx, esi
	mov	edi, eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 521  : 	str.assign(szComposedString, bytes);
; 522  : 	return str;

	mov	ecx, DWORD PTR _bytes$[esp+112]
	push	ecx
	push	edi
	mov	ecx, esi
	mov	DWORD PTR $T218115[esp+120], 1
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
	lea	ecx, DWORD PTR _text$[esp+112]
	mov	BYTE PTR __$EHRec$[esp+120], bl
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+112]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 100				; 00000064H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z$1:
	mov	eax, DWORD PTR $T218115[ebp]
	and	eax, 1
	je	$LN5@GetLocaliz
	and	DWORD PTR $T218115[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetLocaliz:
	ret	0
__ehhandler$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z:
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ENDP ; GetLocalizedText<char const *,char const *>
PUBLIC	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z	; GetLocalizedText<int>
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$0
__ehfuncinfo$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
_TEXT	SEGMENT
_bytes$ = -100						; size = 4
$T218138 = -96						; size = 4
_text$ = -92						; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z PROC	; GetLocalizedText<int>, COMDAT

; 501  : {

	push	-1
	push	__ehhandler$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H

; 502  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[esp+96]
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	ecx, DWORD PTR _text$[esp+116]
	xor	ebx, ebx
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+128], ebx
	mov	DWORD PTR $T218138[esp+120], ebx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 503  : 	text << arg1;

	mov	edx, DWORD PTR _arg1$[esp+108]
	push	edx
	lea	ecx, DWORD PTR _text$[esp+116]
	mov	DWORD PTR __$EHRec$[esp+124], 1
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NH@Z

; 504  : 
; 505  : 	size_t bytes = 0;
; 506  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	eax, DWORD PTR _bytes$[esp+116]
	push	eax
	lea	ecx, DWORD PTR _text$[esp+120]
	mov	DWORD PTR _bytes$[esp+120], ebx
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z

; 507  : 	CvString str;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+108]
	mov	ecx, esi
	mov	edi, eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 508  : 	str.assign(szComposedString, bytes);
; 509  : 	return str;

	mov	ecx, DWORD PTR _bytes$[esp+112]
	push	ecx
	push	edi
	mov	ecx, esi
	mov	DWORD PTR $T218138[esp+120], 1
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
	lea	ecx, DWORD PTR _text$[esp+112]
	mov	BYTE PTR __$EHRec$[esp+120], bl
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 510  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+112]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 100				; 00000064H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z$1:
	mov	eax, DWORD PTR $T218138[ebp]
	and	eax, 1
	je	$LN5@GetLocaliz@2
	and	DWORD PTR $T218138[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetLocaliz@2:
	ret	0
__ehhandler$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z:
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ENDP	; GetLocalizedText<int>
PUBLIC	??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z ; GetLocalizedText<char const [5],char const *>
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$0
__ehfuncinfo$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z
_TEXT	SEGMENT
_bytes$ = -100						; size = 4
$T218158 = -96						; size = 4
_text$ = -92						; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z PROC ; GetLocalizedText<char const [5],char const *>, COMDAT

; 514  : {

	push	-1
	push	__ehhandler$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 88					; 00000058H

; 515  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[esp+96]
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	ecx, DWORD PTR _text$[esp+116]
	xor	ebx, ebx
	push	ecx
	mov	DWORD PTR __$EHRec$[esp+128], ebx
	mov	DWORD PTR $T218158[esp+120], ebx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 516  : 	text << arg1 << arg2;

	mov	edx, DWORD PTR _arg1$[esp+108]
	push	4
	push	edx
	lea	ecx, DWORD PTR _text$[esp+120]
	mov	DWORD PTR __$EHRec$[esp+128], 1
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBDI@Z
	mov	eax, DWORD PTR _arg2$[esp+108]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _text$[esp+116]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 517  : 
; 518  : 	size_t bytes = 0;
; 519  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[esp+116]
	push	edx
	lea	ecx, DWORD PTR _text$[esp+120]
	mov	DWORD PTR _bytes$[esp+120], ebx
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z

; 520  : 	CvString str;

	mov	esi, DWORD PTR ___$ReturnUdt$[esp+108]
	mov	ecx, esi
	mov	edi, eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 521  : 	str.assign(szComposedString, bytes);
; 522  : 	return str;

	mov	eax, DWORD PTR _bytes$[esp+112]
	push	eax
	push	edi
	mov	ecx, esi
	mov	DWORD PTR $T218158[esp+120], 1
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
	lea	ecx, DWORD PTR _text$[esp+112]
	mov	BYTE PTR __$EHRec$[esp+120], bl
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ

; 523  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+112]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 100				; 00000064H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z$1:
	mov	eax, DWORD PTR $T218158[ebp]
	and	eax, 1
	je	$LN5@GetLocaliz@3
	and	DWORD PTR $T218158[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp-4]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN5@GetLocaliz@3:
	ret	0
__ehhandler$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z:
	mov	eax, OFFSET __ehfuncinfo$??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z ENDP ; GetLocalizedText<char const [5],char const *>
PUBLIC	?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setYearStr
EXTRN	?getTurnYearForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z:PROC ; getTurnYearForGame
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$10
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvgametextmgr.cpp
xdata$x	ENDS
;	COMDAT ?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
_TEXT	SEGMENT
$T218187 = -132						; size = 4
$T218179 = -132						; size = 4
$T218191 = -128						; size = 4
$T218185 = -128						; size = 4
$T218181 = -128						; size = 4
$T218186 = -124						; size = 28
$T218183 = -124						; size = 28
$T218192 = -96						; size = 28
$T218188 = -96						; size = 28
$T218182 = -96						; size = 28
$T218193 = -68						; size = 28
$T218190 = -68						; size = 28
$T218189 = -68						; size = 28
$T218184 = -68						; size = 28
$T218180 = -68						; size = 28
$T218194 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_strString$ = 8						; size = 4
_iGameTurn$ = 12					; size = 4
_bSave$ = 16						; size = 1
_eCalendar$ = 20					; size = 4
_iStartYear$ = 24					; size = 4
_eSpeed$ = 28						; size = 4
?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z PROC ; CvGameTextMgr::setYearStr, COMDAT

; 22   : {

	mov	eax, DWORD PTR fs:0

; 23   : 	int iTurnYear = getTurnYearForGame(iGameTurn, iStartYear, eCalendar, eSpeed);

	mov	ecx, DWORD PTR _eCalendar$[esp-4]
	mov	edx, DWORD PTR _iStartYear$[esp-4]
	push	-1
	push	__ehhandler$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	push	eax
	mov	eax, DWORD PTR _eSpeed$[esp+8]
	mov	DWORD PTR fs:0, esp
	sub	esp, 120				; 00000078H
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _iGameTurn$[esp+140]
	push	eax
	push	ecx
	push	edx
	push	edi
	call	?getTurnYearForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z ; getTurnYearForGame
	mov	esi, eax
	add	esp, 16					; 00000010H

; 24   : 
; 25   : 	if(iTurnYear < 0)

	test	esi, esi
	jge	$LN80@setYearStr

; 26   : 	{
; 27   : 		if(bSave)

	cmp	BYTE PTR _bSave$[esp+140], 0
	je	$LN9@setYearStr

; 28   : 		{
; 29   : 			strString = GetLocalizedText("TXT_KEY_TIME_BC_SAVE", CvString::format("%04d", -iTurnYear).GetCString(), CvString::format("%04d", iGameTurn).GetCString());

	push	edi
	lea	eax, DWORD PTR $T218180[esp+148]
	push	OFFSET $SG217593
	push	eax
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	mov	DWORD PTR __$EHRec$[esp+152], 0
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	neg	esi
	push	esi
	lea	ecx, DWORD PTR $T218182[esp+148]
	push	OFFSET $SG217594
	push	ecx
	mov	DWORD PTR $T218179[esp+156], eax
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	bl, 1
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+152], bl
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	lea	edx, DWORD PTR $T218179[esp+144]
	push	edx
	mov	DWORD PTR $T218181[esp+148], eax
	lea	eax, DWORD PTR $T218181[esp+148]
	push	eax
	lea	ecx, DWORD PTR $T218183[esp+152]
	push	OFFSET $SG217595
	push	ecx
	call	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _strString$[esp+140]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+156], 2
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218183[esp+144]
	mov	BYTE PTR __$EHRec$[esp+152], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218182[esp+144]
	mov	BYTE PTR __$EHRec$[esp+152], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218180[esp+144]

; 30   : 		}
; 31   : 		else

	jmp	$LN81@setYearStr
$LN9@setYearStr:

; 32   : 		{
; 33   : 			strString = GetLocalizedText("TXT_KEY_TIME_BC", -(iTurnYear));

	neg	esi
	push	esi
	lea	edx, DWORD PTR $T218184[esp+148]
	push	OFFSET $SG217603
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _strString$[esp+140]
	push	eax
	mov	DWORD PTR __$EHRec$[esp+156], 3
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218184[esp+144]

; 34   : 		}

	jmp	$LN81@setYearStr
$LN80@setYearStr:

; 35   : 	}
; 36   : 	else if(iTurnYear > 0)

	jle	$LN6@setYearStr

; 37   : 	{
; 38   : 		if(bSave)

	cmp	BYTE PTR _bSave$[esp+140], 0
	je	$LN5@setYearStr

; 39   : 		{
; 40   : 			strString = GetLocalizedText("TXT_KEY_TIME_AD_SAVE", CvString::format("%04d", iTurnYear).GetCString(), CvString::format("%04d", iGameTurn).GetCString());

	push	edi
	lea	eax, DWORD PTR $T218186[esp+148]
	push	OFFSET $SG217612
	push	eax
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	mov	DWORD PTR __$EHRec$[esp+152], 4
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	esi
	lea	ecx, DWORD PTR $T218188[esp+148]
	push	OFFSET $SG217613
	push	ecx
	mov	DWORD PTR $T218185[esp+156], eax
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	bl, 5
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+152], bl
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	lea	edx, DWORD PTR $T218185[esp+144]
	push	edx
	mov	DWORD PTR $T218187[esp+148], eax
	lea	eax, DWORD PTR $T218187[esp+148]
	push	eax
	lea	ecx, DWORD PTR $T218189[esp+152]
	push	OFFSET $SG217614
	push	ecx
	call	??$GetLocalizedText@PBDPBD@@YA?AVCvString@@PBDABQBD1@Z ; GetLocalizedText<char const *,char const *>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _strString$[esp+140]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+156], 6
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218189[esp+144]
	mov	BYTE PTR __$EHRec$[esp+152], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218188[esp+144]
	mov	BYTE PTR __$EHRec$[esp+152], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218186[esp+144]

; 41   : 		}
; 42   : 		else

	jmp	$LN81@setYearStr
$LN5@setYearStr:

; 43   : 		{
; 44   : 			strString = GetLocalizedText("TXT_KEY_TIME_AD", iTurnYear);

	push	esi
	lea	edx, DWORD PTR $T218190[esp+148]
	push	OFFSET $SG217617
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _strString$[esp+140]
	push	eax
	mov	DWORD PTR __$EHRec$[esp+156], 7
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218190[esp+144]

; 45   : 		}
; 46   : 	}
; 47   : 	else

	jmp	$LN81@setYearStr
$LN6@setYearStr:

; 48   : 	{
; 49   : 		if(bSave)

	cmp	BYTE PTR _bSave$[esp+140], 0
	je	SHORT $LN2@setYearStr

; 50   : 		{
; 51   : 			strString = GetLocalizedText("TXT_KEY_TIME_AD_SAVE", "0001", CvString::format("%04d", iGameTurn).GetCString());

	push	edi
	lea	eax, DWORD PTR $T218192[esp+148]
	push	OFFSET $SG217630
	push	eax
	call	?format@CvString@@SA?AV1@PBDZZ		; CvString::format
	add	esp, 12					; 0000000cH
	mov	ebx, 8
	mov	ecx, eax
	mov	DWORD PTR __$EHRec$[esp+152], ebx
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	lea	ecx, DWORD PTR $T218191[esp+144]
	push	ecx
	push	OFFSET $SG217631
	lea	edx, DWORD PTR $T218193[esp+152]
	push	OFFSET $SG217632
	push	edx
	mov	DWORD PTR $T218191[esp+160], eax
	call	??$GetLocalizedText@$$BY04$$CBDPBD@@YA?AVCvString@@PBDAAY04$$CBDABQBD@Z ; GetLocalizedText<char const [5],char const *>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _strString$[esp+140]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+156], 9
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218193[esp+144]
	mov	BYTE PTR __$EHRec$[esp+152], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218192[esp+144]

; 52   : 		}
; 53   : 		else

	jmp	SHORT $LN81@setYearStr
$LN2@setYearStr:

; 54   : 		{
; 55   : 			strString = GetLocalizedText("TXT_KEY_TIME_AD", 1);

	push	1
	lea	eax, DWORD PTR $T218194[esp+148]
	push	OFFSET $SG217635
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _strString$[esp+140]
	push	eax
	mov	DWORD PTR __$EHRec$[esp+156], 10	; 0000000aH
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218194[esp+144]
$LN81@setYearStr:
	mov	DWORD PTR __$EHRec$[esp+152], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 56   : 		}
; 57   : 	}
; 58   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+144]
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 132				; 00000084H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$0:
	lea	ecx, DWORD PTR $T218180[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$1:
	lea	ecx, DWORD PTR $T218182[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$2:
	lea	ecx, DWORD PTR $T218183[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$3:
	lea	ecx, DWORD PTR $T218184[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$4:
	lea	ecx, DWORD PTR $T218186[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$5:
	lea	ecx, DWORD PTR $T218188[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$6:
	lea	ecx, DWORD PTR $T218189[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$7:
	lea	ecx, DWORD PTR $T218190[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$8:
	lea	ecx, DWORD PTR $T218192[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$9:
	lea	ecx, DWORD PTR $T218193[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$10:
	lea	ecx, DWORD PTR $T218194[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ENDP ; CvGameTextMgr::setYearStr
PUBLIC	?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setDateStr
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDXZ:PROC
EXTRN	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z:PROC ; CvBaseInfo::CacheResult
EXTRN	__imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z:PROC
EXTRN	??0CvBaseInfo@@QAE@XZ:PROC			; CvBaseInfo::CvBaseInfo
EXTRN	__imp_??0SingleResult@Database@@QAE@PBD@Z:PROC
EXTRN	?getTurnMonthForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z:PROC ; getTurnMonthForGame
EXTRN	__imp_?Count@Connection@Database@@QAEHPBD_N@Z:PROC
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z DD 019930522H
	DD	02bH
	DD	FLAT:__unwindtable$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$10
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$16
	DD	0dH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$18
	DD	012H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$19
	DD	013H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$20
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$21
	DD	015H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$22
	DD	016H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$23
	DD	017H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$24
	DD	018H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$25
	DD	016H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$26
	DD	01aH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$27
	DD	01bH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$28
	DD	01cH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$29
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$30
	DD	01H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$31
	DD	01fH
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$32
	DD	020H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$33
	DD	021H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$34
	DD	022H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$35
	DD	023H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$36
	DD	024H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$37
	DD	020H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$38
	DD	026H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$39
	DD	027H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$40
	DD	028H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$41
	DD	029H
	DD	FLAT:__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$42
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvgametextmgr.cpp
xdata$x	ENDS
;	COMDAT ?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
_TEXT	SEGMENT
_iNumSeasons$ = -1372					; size = 4
_strYearBuffer$ = -1368					; size = 28
_kResult$217716 = -1340					; size = 64
_kResult$217697 = -1340					; size = 64
_kResult$217681 = -1340					; size = 64
_kResult$217660 = -1340					; size = 64
_strWeekBuffer$ = -1276					; size = 28
_strMonth$217665 = -1248				; size = 28
$T218319 = -1220					; size = 28
$T218323 = -1192					; size = 28
$T218322 = -1164					; size = 28
$T218308 = -1136					; size = 28
$T218321 = -1108					; size = 28
$T218310 = -1080					; size = 28
$T218325 = -1052					; size = 28
$T218312 = -1024					; size = 28
$T218330 = -996						; size = 28
$T218317 = -968						; size = 28
$T218329 = -940						; size = 28
$T218315 = -912						; size = 28
$T218328 = -884						; size = 28
$T218320 = -856						; size = 28
$T218327 = -828						; size = 28
$T218318 = -800						; size = 28
$T218326 = -772						; size = 28
$T218309 = -744						; size = 28
$T218335 = -716						; size = 28
$T218313 = -688						; size = 28
$T218334 = -660						; size = 28
$T218316 = -632						; size = 28
$T218333 = -604						; size = 28
$T218306 = -576						; size = 28
$T218332 = -548						; size = 28
$T218307 = -520						; size = 28
$T218331 = -492						; size = 28
$T218314 = -464						; size = 28
$T218305 = -436						; size = 28
$T218311 = -408						; size = 28
$T218324 = -380						; size = 28
_kCalendarInfo$217715 = -352				; size = 260
_kMonthInfo$217696 = -352				; size = 260
_kSeasonInfo$217680 = -352				; size = 260
_kInfo$217661 = -352					; size = 260
_lstrMonth$217663 = -92					; size = 80
__$EHRec$ = -12						; size = 12
_strString$ = 8						; size = 4
_iGameTurn$ = 12					; size = 4
_bSave$ = 16						; size = 1
_eCalendar$ = 20					; size = 4
_iStartYear$ = 24					; size = 4
_eSpeed$ = 28						; size = 4
?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z PROC ; CvGameTextMgr::setDateStr, COMDAT

; 61   : {

	push	-1
	push	__ehhandler$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 1360				; 00000550H
	push	ebx
	push	ebp
	push	esi
	push	edi

; 62   : 	CvString strYearBuffer;

	lea	ecx, DWORD PTR _strYearBuffer$[esp+1388]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 63   : 	CvString strWeekBuffer;

	lea	ecx, DWORD PTR _strWeekBuffer$[esp+1388]
	mov	DWORD PTR __$EHRec$[esp+1396], 0
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 64   : 
; 65   : 	int iTempGameTurn = iGameTurn + GC.getHIDDEN_START_TURN_OFFSET();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6188
	mov	eax, DWORD PTR _iGameTurn$[esp+1384]

; 66   : 
; 67   : 	setYearStr(strYearBuffer, iTempGameTurn, bSave, eCalendar, iStartYear, eSpeed);

	mov	edx, DWORD PTR _eSpeed$[esp+1384]
	mov	ebp, DWORD PTR _eCalendar$[esp+1384]
	mov	ebx, DWORD PTR _bSave$[esp+1384]
	push	edx
	lea	esi, DWORD PTR [ecx+eax]
	mov	eax, DWORD PTR _iStartYear$[esp+1388]
	push	eax
	push	ebp
	push	ebx
	lea	ecx, DWORD PTR _strYearBuffer$[esp+1404]
	push	esi
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+1420], 1
	call	?setYearStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ; CvGameTextMgr::setYearStr

; 68   : 
; 69   : 	const int iNumMonths = DB.Count("Months");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	add	esp, 24					; 00000018H
	push	1
	push	OFFSET $SG217648
	call	DWORD PTR __imp_?Count@Connection@Database@@QAEHPBD_N@Z

; 70   : 	const int iNumSeasons = DB.Count("Seasons");

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	push	1
	push	OFFSET $SG217650
	mov	edi, eax
	call	DWORD PTR __imp_?Count@Connection@Database@@QAEHPBD_N@Z
	mov	DWORD PTR _iNumSeasons$[esp+1388], eax

; 71   : 
; 72   : 	switch(eCalendar)

	cmp	ebp, 6
	ja	$LN1@setDateStr
	jmp	DWORD PTR $LN165@setDateStr[ebp*4]
$LN17@setDateStr:

; 73   : 	{
; 74   : 	case CALENDAR_DEFAULT:
; 75   : 	{
; 76   : 		int iTurnMonth = getTurnMonthForGame(iTempGameTurn, iStartYear, eCalendar, eSpeed);

	mov	edx, DWORD PTR _eSpeed$[esp+1384]
	mov	eax, DWORD PTR _iStartYear$[esp+1384]
	push	edx
	push	0
	push	eax
	push	esi
	call	?getTurnMonthForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z ; getTurnMonthForGame

; 77   : 		if(0 == (getTurnMonthForGame(iTempGameTurn + 1, iStartYear, eCalendar, eSpeed) - iTurnMonth) % iNumMonths)

	mov	ecx, DWORD PTR _eSpeed$[esp+1400]
	mov	edx, DWORD PTR _iStartYear$[esp+1400]
	push	ecx
	push	0
	push	edx
	inc	esi
	push	esi
	mov	ebp, eax
	call	?getTurnMonthForGame@@YAHHHW4CalendarTypes@@W4GameSpeedTypes@@@Z ; getTurnMonthForGame
	sub	eax, ebp
	cdq
	idiv	edi
	add	esp, 32					; 00000020H
	test	edx, edx
	jne	SHORT $LN16@setDateStr

; 78   : 		{
; 79   : 			strString = strYearBuffer;

	mov	ecx, DWORD PTR _strString$[esp+1384]
	lea	eax, DWORD PTR _strYearBuffer$[esp+1388]
	push	eax
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 80   : 		}
; 81   : 		else

	jmp	$LN1@setDateStr
$LN16@setDateStr:

; 82   : 		{
; 83   : 			int iMonth = iTurnMonth % iNumMonths;

	mov	eax, ebp
	cdq
	idiv	edi

; 84   : 
; 85   : 			Database::SingleResult kResult;

	push	0
	lea	ecx, DWORD PTR _kResult$217660[esp+1392]
	mov	esi, edx
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z

; 86   : 			CvBaseInfo kInfo;

	lea	ecx, DWORD PTR _kInfo$217661[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 2
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo

; 87   : 			DB.SelectAt(kResult, "Months", iMonth);

	push	esi
	push	OFFSET $SG217662
	lea	ecx, DWORD PTR _kResult$217660[esp+1396]
	push	ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	BYTE PTR __$EHRec$[esp+1408], 3
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z

; 88   : 			kInfo.CacheResult(kResult);

	lea	edx, DWORD PTR _kResult$217660[esp+1388]
	push	edx
	lea	ecx, DWORD PTR _kInfo$217661[esp+1392]
	call	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult

; 89   : 
; 90   : 			Localization::String lstrMonth = Localization::Lookup(kInfo.GetDescription());

	lea	ecx, DWORD PTR _kInfo$217661[esp+1424]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	eax, DWORD PTR _lstrMonth$217663[esp+1392]
	push	eax
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8

; 91   : 			CvString strMonth = lstrMonth.toUTF8();

	lea	ecx, DWORD PTR _lstrMonth$217663[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 4
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strMonth$217665[esp+1392]
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	BYTE PTR __$EHRec$[esp+1396], 5

; 92   : 
; 93   : 			if(bSave)

	test	bl, bl
	je	SHORT $LN14@setDateStr

; 94   : 			{
; 95   : 				strString = (strYearBuffer + "-" + strMonth);

	push	OFFSET $SG217669
	lea	ecx, DWORD PTR _strYearBuffer$[esp+1392]
	push	ecx
	lea	edx, DWORD PTR $T218305[esp+1396]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	lea	ecx, DWORD PTR _strMonth$217665[esp+1400]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T218306[esp+1408]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1420], 6
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 7
	call	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
	lea	ecx, DWORD PTR $T218306[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 6
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218305[esp+1388]

; 96   : 			}
; 97   : 			else

	jmp	$LN160@setDateStr
$LN14@setDateStr:

; 98   : 			{
; 99   : 				strString = (strMonth + CvString(", ") + strYearBuffer);

	push	OFFSET $SG217674
	lea	ecx, DWORD PTR $T218307[esp+1392]
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	esi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	push	eax
	lea	eax, DWORD PTR _strMonth$217665[esp+1392]
	push	eax
	lea	ecx, DWORD PTR $T218308[esp+1396]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+1408], 8
	call	esi
	lea	edx, DWORD PTR _strYearBuffer$[esp+1400]
	push	edx
	push	eax
	lea	eax, DWORD PTR $T218309[esp+1408]
	mov	bl, 9
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1420], bl
	call	esi
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 10	; 0000000aH
	call	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
	lea	ecx, DWORD PTR $T218309[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218308[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 8
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218307[esp+1388]
$LN160@setDateStr:
	mov	BYTE PTR __$EHRec$[esp+1396], 5
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 100  : 			}
; 101  : 		}

	lea	ecx, DWORD PTR _strMonth$217665[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _lstrMonth$217663[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 3
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	lea	ecx, DWORD PTR _kInfo$217661[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 2
	call	??1CvBaseInfo@@QAE@XZ
	lea	ecx, DWORD PTR _kResult$217660[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 1
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ

; 102  : 	}
; 103  : 	break;

	jmp	$LN1@setDateStr
$LN12@setDateStr:

; 104  : 	case CALENDAR_YEARS:
; 105  : 	case CALENDAR_BI_YEARLY:
; 106  : 		strString = strYearBuffer;

	lea	ecx, DWORD PTR _strYearBuffer$[esp+1388]
	push	ecx
	mov	ecx, DWORD PTR _strString$[esp+1388]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 107  : 		break;

	jmp	$LN1@setDateStr
$LN11@setDateStr:

; 108  : 
; 109  : 	case CALENDAR_TURNS:
; 110  : 		strString = GetLocalizedText("TXT_KEY_TIME_TURN", (iTempGameTurn + 1));

	inc	esi
	push	esi
	lea	edx, DWORD PTR $T218310[esp+1392]
	push	OFFSET $SG217678
	push	edx
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 11	; 0000000bH
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218310[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 111  : 		break;

	jmp	$LN1@setDateStr
$LN10@setDateStr:

; 112  : 
; 113  : 	case CALENDAR_SEASONS:
; 114  : 	{
; 115  : 		CvBaseInfo kSeasonInfo;

	lea	ecx, DWORD PTR _kSeasonInfo$217680[esp+1388]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo

; 116  : 		Database::SingleResult kResult;

	push	0
	lea	ecx, DWORD PTR _kResult$217681[esp+1392]
	mov	BYTE PTR __$EHRec$[esp+1400], 12	; 0000000cH
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z

; 117  : 		DB.SelectAt(kResult, "Seasons", iTempGameTurn % iNumSeasons);

	mov	eax, esi
	cdq
	idiv	DWORD PTR _iNumSeasons$[esp+1388]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	lea	eax, DWORD PTR _kResult$217681[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 13	; 0000000dH
	push	edx
	push	OFFSET $SG217682
	push	eax
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z

; 118  : 		kSeasonInfo.CacheResult(kResult);

	lea	ecx, DWORD PTR _kResult$217681[esp+1388]
	push	ecx
	lea	ecx, DWORD PTR _kSeasonInfo$217680[esp+1392]
	call	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult

; 119  : 		const char* Desc = kSeasonInfo.GetDescription();

	lea	ecx, DWORD PTR _kSeasonInfo$217680[esp+1424]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	esi, eax

; 120  : 		if(bSave)

	test	bl, bl
	je	$LN9@setDateStr

; 121  : 		{
; 122  : 			strString = (strYearBuffer + "-" + CvString(Desc));

	push	esi
	lea	ecx, DWORD PTR $T218311[esp+1392]
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	esi, eax
	push	OFFSET $SG217688
	lea	edx, DWORD PTR _strYearBuffer$[esp+1392]
	push	edx
	lea	eax, DWORD PTR $T218312[esp+1396]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1408], 14	; 0000000eH
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	push	esi
	push	eax
	lea	ecx, DWORD PTR $T218313[esp+1408]
	mov	bl, 15					; 0000000fH
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+1420], bl
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 16	; 00000010H
	call	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
	lea	ecx, DWORD PTR $T218313[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218312[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 14	; 0000000eH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218311[esp+1388]

; 123  : 		}
; 124  : 		else

	jmp	$LN161@setDateStr
$LN9@setDateStr:

; 125  : 		{
; 126  : 			strString = (CvString(Desc) + CvString(", ") + strYearBuffer);

	push	OFFSET $SG217694
	lea	ecx, DWORD PTR $T218314[esp+1392]
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	edi, eax
	push	esi
	lea	ecx, DWORD PTR $T218315[esp+1392]
	mov	BYTE PTR __$EHRec$[esp+1400], 17	; 00000011H
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	esi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	push	edi
	push	eax
	lea	edx, DWORD PTR $T218316[esp+1396]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1408], 18	; 00000012H
	call	esi
	lea	ecx, DWORD PTR _strYearBuffer$[esp+1400]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T218317[esp+1408]
	mov	bl, 19					; 00000013H
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1420], bl
	call	esi
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 20	; 00000014H
	call	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
	lea	ecx, DWORD PTR $T218317[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218316[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 18	; 00000012H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218315[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 17	; 00000011H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218314[esp+1388]
$LN161@setDateStr:
	mov	BYTE PTR __$EHRec$[esp+1396], 13	; 0000000dH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 127  : 		}
; 128  : 	}

	mov	BYTE PTR __$EHRec$[esp+1396], 12	; 0000000cH

; 129  : 
; 130  : 	break;

	jmp	$LN162@setDateStr
$LN7@setDateStr:

; 131  : 
; 132  : 	case CALENDAR_MONTHS:
; 133  : 	{
; 134  : 		CvBaseInfo kMonthInfo;

	lea	ecx, DWORD PTR _kMonthInfo$217696[esp+1388]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo

; 135  : 		Database::SingleResult kResult;

	push	0
	lea	ecx, DWORD PTR _kResult$217697[esp+1392]
	mov	BYTE PTR __$EHRec$[esp+1400], 21	; 00000015H
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z

; 136  : 		DB.SelectAt(kResult, "Months", iTempGameTurn % iNumMonths);

	mov	eax, esi
	cdq
	idiv	edi
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	lea	eax, DWORD PTR _kResult$217697[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 22	; 00000016H
	push	edx
	push	OFFSET $SG217698
	push	eax
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z

; 137  : 		kMonthInfo.CacheResult(kResult);

	lea	ecx, DWORD PTR _kResult$217697[esp+1388]
	push	ecx
	lea	ecx, DWORD PTR _kMonthInfo$217696[esp+1392]
	call	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult

; 138  : 
; 139  : 		const char* Descr = kMonthInfo.GetDescription();

	lea	ecx, DWORD PTR _kMonthInfo$217696[esp+1424]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	esi, eax

; 140  : 
; 141  : 		if(bSave)

	test	bl, bl
	je	$LN6@setDateStr

; 142  : 		{
; 143  : 			strString = (strYearBuffer + "-" + CvString(Descr));

	push	esi
	lea	ecx, DWORD PTR $T218318[esp+1392]
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	esi, eax
	push	OFFSET $SG217704
	lea	edx, DWORD PTR _strYearBuffer$[esp+1392]
	push	edx
	lea	eax, DWORD PTR $T218319[esp+1396]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1408], 23	; 00000017H
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	push	esi
	push	eax
	lea	ecx, DWORD PTR $T218320[esp+1408]
	mov	bl, 24					; 00000018H
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+1420], bl
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 25	; 00000019H
	call	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
	lea	ecx, DWORD PTR $T218320[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218319[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 23	; 00000017H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218318[esp+1388]

; 144  : 		}
; 145  : 		else

	jmp	$LN163@setDateStr
$LN6@setDateStr:

; 146  : 		{
; 147  : 			strString = (CvString(Descr) + CvString(", ") + strYearBuffer);

	push	OFFSET $SG217710
	lea	ecx, DWORD PTR $T218321[esp+1392]
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	edi, eax
	push	esi
	lea	ecx, DWORD PTR $T218322[esp+1392]
	mov	BYTE PTR __$EHRec$[esp+1400], 26	; 0000001aH
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	esi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	push	edi
	push	eax
	lea	edx, DWORD PTR $T218323[esp+1396]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1408], 27	; 0000001bH
	call	esi
	lea	ecx, DWORD PTR _strYearBuffer$[esp+1400]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T218324[esp+1408]
	mov	bl, 28					; 0000001cH
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1420], bl
	call	esi
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 29	; 0000001dH
	call	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
	lea	ecx, DWORD PTR $T218324[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218323[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 27	; 0000001bH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218322[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 26	; 0000001aH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218321[esp+1388]
$LN163@setDateStr:
	mov	BYTE PTR __$EHRec$[esp+1396], 22	; 00000016H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 148  : 		}
; 149  : 	}

	mov	BYTE PTR __$EHRec$[esp+1396], 21	; 00000015H

; 150  : 
; 151  : 
; 152  : 	break;

	jmp	$LN162@setDateStr
$LN4@setDateStr:

; 153  : 
; 154  : 	case CALENDAR_WEEKS:
; 155  : 	{
; 156  : 		strWeekBuffer = GetLocalizedText("TXT_KEY_TIME_WEEK", ((iTempGameTurn % GC.getWEEKS_PER_MONTHS()) + 1));

	mov	eax, esi
	cdq
	idiv	DWORD PTR ?gGlobals@@3VCvGlobals@@A+6184
	lea	eax, DWORD PTR $T218325[esp+1388]
	inc	edx
	push	edx
	push	OFFSET $SG217713
	push	eax
	call	??$GetLocalizedText@H@@YA?AVCvString@@PBDH@Z ; GetLocalizedText<int>
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _strWeekBuffer$[esp+1392]
	mov	BYTE PTR __$EHRec$[esp+1400], 30	; 0000001eH
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T218325[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 157  : 
; 158  : 		const int idx = (iTempGameTurn / GC.getWEEKS_PER_MONTHS()) % iNumMonths;

	mov	eax, esi
	cdq
	idiv	DWORD PTR ?gGlobals@@3VCvGlobals@@A+6184

; 159  : 
; 160  : 		CvBaseInfo kCalendarInfo;

	lea	ecx, DWORD PTR _kCalendarInfo$217715[esp+1388]
	cdq
	idiv	edi
	mov	esi, edx
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo

; 161  : 		Database::SingleResult kResult;

	push	0
	lea	ecx, DWORD PTR _kResult$217716[esp+1392]
	mov	BYTE PTR __$EHRec$[esp+1400], 31	; 0000001fH
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z

; 162  : 
; 163  : 		DB.SelectAt(kResult, "Months", idx);

	push	esi
	push	OFFSET $SG217717
	lea	ecx, DWORD PTR _kResult$217716[esp+1396]
	push	ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	BYTE PTR __$EHRec$[esp+1408], 32	; 00000020H
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBDH@Z

; 164  : 		kCalendarInfo.CacheResult(kResult);

	lea	edx, DWORD PTR _kResult$217716[esp+1388]
	push	edx
	lea	ecx, DWORD PTR _kCalendarInfo$217715[esp+1392]
	call	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult

; 165  : 
; 166  : 		const char* Descr = kCalendarInfo.GetDescription();

	lea	ecx, DWORD PTR _kCalendarInfo$217715[esp+1424]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 167  : 
; 168  : 
; 169  : 		if(bSave)
; 170  : 		{
; 171  : 			strString = (strYearBuffer + "-" + CvString(Descr) + "-" + strWeekBuffer);

	push	eax
	test	bl, bl
	je	$LN3@setDateStr
	lea	ecx, DWORD PTR $T218326[esp+1392]
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	esi, eax
	mov	edi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	push	OFFSET $SG217726
	lea	eax, DWORD PTR _strYearBuffer$[esp+1392]
	push	eax
	lea	ecx, DWORD PTR $T218327[esp+1396]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+1408], 33	; 00000021H
	call	edi
	push	esi
	mov	esi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	push	eax
	lea	edx, DWORD PTR $T218328[esp+1408]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1420], 34	; 00000022H
	call	esi
	push	OFFSET $SG217725
	push	eax
	lea	eax, DWORD PTR $T218329[esp+1420]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1432], 35	; 00000023H
	call	edi
	lea	ecx, DWORD PTR _strWeekBuffer$[esp+1424]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T218330[esp+1432]
	mov	bl, 36					; 00000024H
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1444], bl
	call	esi
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 37	; 00000025H
	call	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
	lea	ecx, DWORD PTR $T218330[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218329[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 35	; 00000023H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218328[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 34	; 00000022H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218327[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 33	; 00000021H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218326[esp+1388]

; 172  : 		}
; 173  : 		else

	jmp	$LN164@setDateStr
$LN3@setDateStr:

; 174  : 		{
; 175  : 			strString = (strWeekBuffer + ", " + CvString(Descr) + ", " + strYearBuffer);

	lea	ecx, DWORD PTR $T218331[esp+1392]
	call	??0CvString@@QAE@PBD@Z			; CvString::CvString
	mov	esi, eax
	mov	edi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	push	OFFSET $SG217734
	lea	eax, DWORD PTR _strWeekBuffer$[esp+1392]
	push	eax
	lea	ecx, DWORD PTR $T218332[esp+1396]
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+1408], 38	; 00000026H
	call	edi
	push	esi
	mov	esi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	push	eax
	lea	edx, DWORD PTR $T218333[esp+1408]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1420], 39	; 00000027H
	call	esi
	push	OFFSET $SG217733
	push	eax
	lea	eax, DWORD PTR $T218334[esp+1420]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1432], 40	; 00000028H
	call	edi
	lea	ecx, DWORD PTR _strYearBuffer$[esp+1424]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T218335[esp+1432]
	mov	bl, 41					; 00000029H
	push	edx
	mov	BYTE PTR __$EHRec$[esp+1444], bl
	call	esi
	add	esp, 48					; 00000030H
	mov	ecx, DWORD PTR _strString$[esp+1384]
	push	eax
	mov	BYTE PTR __$EHRec$[esp+1400], 42	; 0000002aH
	call	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
	lea	ecx, DWORD PTR $T218335[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218334[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 40	; 00000028H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218333[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 39	; 00000027H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218332[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 38	; 00000026H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T218331[esp+1388]
$LN164@setDateStr:
	mov	BYTE PTR __$EHRec$[esp+1396], 32	; 00000020H
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 176  : 		}
; 177  : 	}

	mov	BYTE PTR __$EHRec$[esp+1396], 31	; 0000001fH
$LN162@setDateStr:
	lea	ecx, DWORD PTR _kResult$217716[esp+1388]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	lea	ecx, DWORD PTR _kCalendarInfo$217715[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 1
	call	??1CvBaseInfo@@QAE@XZ
$LN1@setDateStr:

; 178  : 	break;
; 179  : 
; 180  : 	default:
; 181  : 		CvAssert(false);
; 182  : 	}
; 183  : }

	lea	ecx, DWORD PTR _strWeekBuffer$[esp+1388]
	mov	BYTE PTR __$EHRec$[esp+1396], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strYearBuffer$[esp+1388]
	mov	DWORD PTR __$EHRec$[esp+1396], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+1388]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 1372				; 0000055cH
	ret	0
	npad	2
$LN165@setDateStr:
	DD	$LN17@setDateStr
	DD	$LN12@setDateStr
	DD	$LN12@setDateStr
	DD	$LN11@setDateStr
	DD	$LN10@setDateStr
	DD	$LN7@setDateStr
	DD	$LN4@setDateStr
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$0:
	lea	ecx, DWORD PTR _strYearBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$1:
	lea	ecx, DWORD PTR _strWeekBuffer$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$2:
	lea	ecx, DWORD PTR _kResult$217660[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$3:
	lea	ecx, DWORD PTR _kInfo$217661[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$4:
	lea	ecx, DWORD PTR _lstrMonth$217663[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$5:
	lea	ecx, DWORD PTR _strMonth$217665[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$6:
	lea	ecx, DWORD PTR $T218305[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$7:
	lea	ecx, DWORD PTR $T218306[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$8:
	lea	ecx, DWORD PTR $T218307[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$9:
	lea	ecx, DWORD PTR $T218308[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$10:
	lea	ecx, DWORD PTR $T218309[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$11:
	lea	ecx, DWORD PTR $T218310[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$12:
	lea	ecx, DWORD PTR _kSeasonInfo$217680[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$13:
	lea	ecx, DWORD PTR _kResult$217681[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$14:
	lea	ecx, DWORD PTR $T218311[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$15:
	lea	ecx, DWORD PTR $T218312[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$16:
	lea	ecx, DWORD PTR $T218313[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$17:
	lea	ecx, DWORD PTR $T218314[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$18:
	lea	ecx, DWORD PTR $T218315[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$19:
	lea	ecx, DWORD PTR $T218316[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$20:
	lea	ecx, DWORD PTR $T218317[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$21:
	lea	ecx, DWORD PTR _kMonthInfo$217696[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$22:
	lea	ecx, DWORD PTR _kResult$217697[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$23:
	lea	ecx, DWORD PTR $T218318[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$24:
	lea	ecx, DWORD PTR $T218319[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$25:
	lea	ecx, DWORD PTR $T218320[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$26:
	lea	ecx, DWORD PTR $T218321[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$27:
	lea	ecx, DWORD PTR $T218322[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$28:
	lea	ecx, DWORD PTR $T218323[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$29:
	lea	ecx, DWORD PTR $T218324[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$30:
	lea	ecx, DWORD PTR $T218325[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$31:
	lea	ecx, DWORD PTR _kCalendarInfo$217715[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$32:
	lea	ecx, DWORD PTR _kResult$217716[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$33:
	lea	ecx, DWORD PTR $T218326[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$34:
	lea	ecx, DWORD PTR $T218327[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$35:
	lea	ecx, DWORD PTR $T218328[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$36:
	lea	ecx, DWORD PTR $T218329[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$37:
	lea	ecx, DWORD PTR $T218330[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$38:
	lea	ecx, DWORD PTR $T218331[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$39:
	lea	ecx, DWORD PTR $T218332[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$40:
	lea	ecx, DWORD PTR $T218333[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$41:
	lea	ecx, DWORD PTR $T218334[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z$42:
	lea	ecx, DWORD PTR $T218335[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setDateStr@CvGameTextMgr@@SAXAAVCvString@@H_NW4CalendarTypes@@HW4GameSpeedTypes@@@Z ENDP ; CvGameTextMgr::setDateStr
END
