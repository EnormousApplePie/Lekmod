; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Documents\GitHub\Lekmod\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvCityConnections.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	?Uninit@CvCityConnections@@QAEXXZ		; CvCityConnections::Uninit
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcityconnections.cpp
;	COMDAT ?Uninit@CvCityConnections@@QAEXXZ
_TEXT	SEGMENT
?Uninit@CvCityConnections@@QAEXXZ PROC			; CvCityConnections::Uninit, COMDAT
; _this$ = ecx

; 78   : {

	push	esi
	mov	esi, ecx

; 79   : 	m_pPlayer = NULL;
; 80   : 	if(m_aRouteInfos)

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [esi], 0
	test	eax, eax
	je	SHORT $LN1@Uninit

; 81   : 	{
; 82   : 		delete [] m_aRouteInfos;

	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 83   : 		m_aRouteInfos = NULL;

	mov	DWORD PTR [esi+8], 0
$LN1@Uninit:
	pop	esi

; 84   : 	}
; 85   : #ifdef AUI_WARNING_FIXES
; 86   : 	m_uiRouteInfosDimension = 0;
; 87   : #endif
; 88   : }

	ret	0
?Uninit@CvCityConnections@@QAEXXZ ENDP			; CvCityConnections::Uninit
_TEXT	ENDS
PUBLIC	?GetRouteInfo@CvCityConnections@@QAEPAURouteInfo@1@II@Z ; CvCityConnections::GetRouteInfo
; Function compile flags: /Ogtpy
;	COMDAT ?GetRouteInfo@CvCityConnections@@QAEPAURouteInfo@1@II@Z
_TEXT	SEGMENT
_uiFirstCityIndex$ = 8					; size = 4
_uiSecondCityIndex$ = 12				; size = 4
?GetRouteInfo@CvCityConnections@@QAEPAURouteInfo@1@II@Z PROC ; CvCityConnections::GetRouteInfo, COMDAT
; _this$ = ecx

; 197  : 	if(uiFirstCityIndex >= m_uiRouteInfosDimension || uiSecondCityIndex >= m_uiRouteInfosDimension)

	mov	eax, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR _uiFirstCityIndex$[esp]
	cmp	esi, eax
	jae	SHORT $LN1@GetRouteIn
	mov	edx, DWORD PTR _uiSecondCityIndex$[esp]
	cmp	edx, eax
	jae	SHORT $LN1@GetRouteIn

; 200  : 	}
; 201  : 
; 202  : 	return &(m_aRouteInfos[uiFirstCityIndex * m_uiRouteInfosDimension + uiSecondCityIndex]);

	mov	ecx, DWORD PTR [ecx+8]
	imul	eax, esi
	add	eax, edx
	lea	eax, DWORD PTR [ecx+eax*2]
	pop	esi

; 203  : }

	ret	8
$LN1@GetRouteIn:

; 198  : 	{
; 199  : 		return NULL;

	xor	eax, eax
	pop	esi

; 203  : }

	ret	8
?GetRouteInfo@CvCityConnections@@QAEPAURouteInfo@1@II@Z ENDP ; CvCityConnections::GetRouteInfo
_TEXT	ENDS
PUBLIC	?ResetRouteInfo@CvCityConnections@@QAEXXZ	; CvCityConnections::ResetRouteInfo
; Function compile flags: /Ogtpy
;	COMDAT ?ResetRouteInfo@CvCityConnections@@QAEXXZ
_TEXT	SEGMENT
?ResetRouteInfo@CvCityConnections@@QAEXXZ PROC		; CvCityConnections::ResetRouteInfo, COMDAT
; _this$ = ecx

; 208  : 	RouteInfo* pRouteInfo = NULL;
; 209  : 	for(uint ui = 0; ui < m_uiRouteInfosDimension; ui++)

	mov	eax, DWORD PTR [ecx+4]
	push	esi
	xor	esi, esi
	test	eax, eax
	jbe	SHORT $LN5@ResetRoute
	push	ebx
	push	edi
	or	bl, -1
	npad	1
$LL7@ResetRoute:

; 210  : 	{
; 211  : 		for(uint ui2 = 0; ui2 < m_uiRouteInfosDimension; ui2++)

	xor	edx, edx
	test	eax, eax
	jbe	SHORT $LN6@ResetRoute
$LL4@ResetRoute:

; 212  : 		{
; 213  : 			pRouteInfo = GetRouteInfo(ui, ui2);

	cmp	esi, eax
	jae	SHORT $LN3@ResetRoute
	cmp	edx, eax
	jae	SHORT $LN3@ResetRoute
	mov	edi, DWORD PTR [ecx+8]
	imul	eax, esi
	add	eax, edx
	lea	eax, DWORD PTR [edi+eax*2]

; 214  : 			if(!pRouteInfo)

	test	eax, eax
	je	SHORT $LN3@ResetRoute

; 215  : 			{
; 216  : 				continue;
; 217  : 			}
; 218  : 
; 219  : 			pRouteInfo->m_cRouteState = 0;

	mov	BYTE PTR [eax], 0

; 220  : 			pRouteInfo->m_cPassEval = -1;

	mov	BYTE PTR [eax+1], bl
$LN3@ResetRoute:
	mov	eax, DWORD PTR [ecx+4]
	inc	edx
	cmp	edx, eax
	jb	SHORT $LL4@ResetRoute
$LN6@ResetRoute:

; 208  : 	RouteInfo* pRouteInfo = NULL;
; 209  : 	for(uint ui = 0; ui < m_uiRouteInfosDimension; ui++)

	mov	eax, DWORD PTR [ecx+4]
	inc	esi
	cmp	esi, eax
	jb	SHORT $LL7@ResetRoute
	pop	edi
	pop	ebx
$LN5@ResetRoute:
	pop	esi

; 221  : 		}
; 222  : 	}
; 223  : }

	ret	0
?ResetRouteInfo@CvCityConnections@@QAEXXZ ENDP		; CvCityConnections::ResetRouteInfo
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtpy
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	edi
	mov	edi, DWORD PTR ___n$[esp]
	sub	edi, 1
	js	SHORT $LN1@vector
	push	ebx
	mov	ebx, DWORD PTR ___f$[esp+4]
	push	ebp
	mov	ebp, DWORD PTR ___s$[esp+8]
	push	esi
	mov	esi, DWORD PTR ___t$[esp+12]
	npad	7
$LL2@vector:
	mov	ecx, esi
	call	ebx
	add	esi, ebp
	sub	edi, 1
	jns	SHORT $LL2@vector
	pop	esi
	pop	ebp
	pop	ebx
$LN1@vector:
	pop	edi
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??A?$BaseVector@H$00@@QAEAAHI@Z			; BaseVector<int,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@H$00@@QAEAAHI@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@H$00@@QAEAAHI@Z PROC			; BaseVector<int,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 131  : 	};

	ret	4
??A?$BaseVector@H$00@@QAEAAHI@Z ENDP			; BaseVector<int,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@H$00@@QBEABHI@Z			; BaseVector<int,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@H$00@@QBEABHI@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@H$00@@QBEABHI@Z PROC			; BaseVector<int,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 137  : 	};

	ret	4
??A?$BaseVector@H$00@@QBEABHI@Z ENDP			; BaseVector<int,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@H$00@@QBEIXZ			; BaseVector<int,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@H$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@H$00@@QBEIXZ PROC			; BaseVector<int,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@H$00@@QBEIXZ ENDP			; BaseVector<int,1>::size
_TEXT	ENDS
PUBLIC	??A?$BaseVector@W4BuildingTypes@@$00@@QAEAAW4BuildingTypes@@I@Z ; BaseVector<enum BuildingTypes,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@W4BuildingTypes@@$00@@QAEAAW4BuildingTypes@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@W4BuildingTypes@@$00@@QAEAAW4BuildingTypes@@I@Z PROC ; BaseVector<enum BuildingTypes,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 131  : 	};

	ret	4
??A?$BaseVector@W4BuildingTypes@@$00@@QAEAAW4BuildingTypes@@I@Z ENDP ; BaseVector<enum BuildingTypes,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@W4BuildingTypes@@$00@@QBEIXZ	; BaseVector<enum BuildingTypes,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@W4BuildingTypes@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@W4BuildingTypes@@$00@@QBEIXZ PROC	; BaseVector<enum BuildingTypes,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@W4BuildingTypes@@$00@@QBEIXZ ENDP	; BaseVector<enum BuildingTypes,1>::size
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAEAAUPlotRouteInfo@CvCityConnections@@I@Z ; BaseVector<CvCityConnections::PlotRouteInfo,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAEAAUPlotRouteInfo@CvCityConnections@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAEAAUPlotRouteInfo@CvCityConnections@@I@Z PROC ; BaseVector<CvCityConnections::PlotRouteInfo,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAEAAUPlotRouteInfo@CvCityConnections@@I@Z ENDP ; BaseVector<CvCityConnections::PlotRouteInfo,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QBEIXZ ; BaseVector<CvCityConnections::PlotRouteInfo,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QBEIXZ PROC ; BaseVector<CvCityConnections::PlotRouteInfo,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QBEIXZ ENDP ; BaseVector<CvCityConnections::PlotRouteInfo,1>::size
_TEXT	ENDS
PUBLIC	??A?$BaseVector@PAVCvCity@@$00@@QAEAAPAVCvCity@@I@Z ; BaseVector<CvCity *,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@PAVCvCity@@$00@@QAEAAPAVCvCity@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@PAVCvCity@@$00@@QAEAAPAVCvCity@@I@Z PROC ; BaseVector<CvCity *,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 131  : 	};

	ret	4
??A?$BaseVector@PAVCvCity@@$00@@QAEAAPAVCvCity@@I@Z ENDP ; BaseVector<CvCity *,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@PAVCvCity@@$00@@QBEIXZ	; BaseVector<CvCity *,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@PAVCvCity@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@PAVCvCity@@$00@@QBEIXZ PROC		; BaseVector<CvCity *,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@PAVCvCity@@$00@@QBEIXZ ENDP		; BaseVector<CvCity *,1>::size
_TEXT	ENDS
PUBLIC	??1?$BaseVector@H$00@@QAE@XZ			; BaseVector<int,1>::~BaseVector<int,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@H$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@H$00@@QAE@XZ PROC			; BaseVector<int,1>::~BaseVector<int,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@H$00@@QAE@XZ ENDP			; BaseVector<int,1>::~BaseVector<int,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@H$00@@IAE@XZ			; BaseVector<int,1>::BaseVector<int,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@H$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@H$00@@IAE@XZ PROC			; BaseVector<int,1>::BaseVector<int,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@H$00@@IAE@XZ ENDP			; BaseVector<int,1>::BaseVector<int,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@H$00@@IAEXPAHI@Z		; BaseVector<int,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@H$00@@IAEXPAHI@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@H$00@@IAEXPAHI@Z PROC		; BaseVector<int,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@H$00@@IAEXPAHI@Z ENDP		; BaseVector<int,1>::Destroy
_TEXT	ENDS
PUBLIC	??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEPAHI@Z ; FStaticVector<int,64,1,297,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
CONST	SEGMENT
??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@ DB 'c:\users\eno'
	DB	'rmousapplepie\documents\github\lekmod\lekmod_dll\fireplace\in'
	DB	'clude\fireworks\FFastVector.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEPAHI@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEPAHI@Z PROC ; FStaticVector<int,64,1,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 64					; 00000040H
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 64			; 00000040H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEPAHI@Z ENDP ; FStaticVector<int,64,1,297,0>::Alloc
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXPAHI@Z ; FStaticVector<int,64,1,297,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXPAHI@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXPAHI@Z PROC ; FStaticVector<int,64,1,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXPAHI@Z ENDP ; FStaticVector<int,64,1,297,0>::Free
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEPAW4BuildingTypes@@I@Z ; FStaticVector<enum BuildingTypes,10,1,297,0>::Alloc
; Function compile flags: /Ogtpy
;	COMDAT ?Alloc@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEPAW4BuildingTypes@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEPAW4BuildingTypes@@I@Z PROC ; FStaticVector<enum BuildingTypes,10,1,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 10					; 0000000aH
	jbe	SHORT $LN2@Alloc@2

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@2:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 10			; 0000000aH
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEPAW4BuildingTypes@@I@Z ENDP ; FStaticVector<enum BuildingTypes,10,1,297,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@W4BuildingTypes@@$00@@QAE@XZ	; BaseVector<enum BuildingTypes,1>::~BaseVector<enum BuildingTypes,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@W4BuildingTypes@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@W4BuildingTypes@@$00@@QAE@XZ PROC	; BaseVector<enum BuildingTypes,1>::~BaseVector<enum BuildingTypes,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@W4BuildingTypes@@$00@@QAE@XZ ENDP	; BaseVector<enum BuildingTypes,1>::~BaseVector<enum BuildingTypes,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@W4BuildingTypes@@$00@@IAE@XZ	; BaseVector<enum BuildingTypes,1>::BaseVector<enum BuildingTypes,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@W4BuildingTypes@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@W4BuildingTypes@@$00@@IAE@XZ PROC	; BaseVector<enum BuildingTypes,1>::BaseVector<enum BuildingTypes,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@W4BuildingTypes@@$00@@IAE@XZ ENDP	; BaseVector<enum BuildingTypes,1>::BaseVector<enum BuildingTypes,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@W4BuildingTypes@@$00@@IAEXPAW4BuildingTypes@@I@Z ; BaseVector<enum BuildingTypes,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@W4BuildingTypes@@$00@@IAEXPAW4BuildingTypes@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@W4BuildingTypes@@$00@@IAEXPAW4BuildingTypes@@I@Z PROC ; BaseVector<enum BuildingTypes,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@W4BuildingTypes@@$00@@IAEXPAW4BuildingTypes@@I@Z ENDP ; BaseVector<enum BuildingTypes,1>::Destroy
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEPAUPlotRouteInfo@CvCityConnections@@I@Z ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::Alloc
; Function compile flags: /Ogtpy
;	COMDAT ?Alloc@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEPAUPlotRouteInfo@CvCityConnections@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEPAUPlotRouteInfo@CvCityConnections@@I@Z PROC ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 100				; 00000064H
	jbe	SHORT $LN2@Alloc@3

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@3:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 100			; 00000064H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEPAUPlotRouteInfo@CvCityConnections@@I@Z ENDP ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAE@XZ ; BaseVector<CvCityConnections::PlotRouteInfo,1>::~BaseVector<CvCityConnections::PlotRouteInfo,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAE@XZ PROC ; BaseVector<CvCityConnections::PlotRouteInfo,1>::~BaseVector<CvCityConnections::PlotRouteInfo,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAE@XZ ENDP ; BaseVector<CvCityConnections::PlotRouteInfo,1>::~BaseVector<CvCityConnections::PlotRouteInfo,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@IAE@XZ ; BaseVector<CvCityConnections::PlotRouteInfo,1>::BaseVector<CvCityConnections::PlotRouteInfo,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@IAE@XZ PROC ; BaseVector<CvCityConnections::PlotRouteInfo,1>::BaseVector<CvCityConnections::PlotRouteInfo,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@IAE@XZ ENDP ; BaseVector<CvCityConnections::PlotRouteInfo,1>::BaseVector<CvCityConnections::PlotRouteInfo,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@IAEXPAUPlotRouteInfo@CvCityConnections@@I@Z ; BaseVector<CvCityConnections::PlotRouteInfo,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@IAEXPAUPlotRouteInfo@CvCityConnections@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@IAEXPAUPlotRouteInfo@CvCityConnections@@I@Z PROC ; BaseVector<CvCityConnections::PlotRouteInfo,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@IAEXPAUPlotRouteInfo@CvCityConnections@@I@Z ENDP ; BaseVector<CvCityConnections::PlotRouteInfo,1>::Destroy
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEPAPAVCvCity@@I@Z ; FStaticVector<CvCity *,64,1,297,0>::Alloc
; Function compile flags: /Ogtpy
;	COMDAT ?Alloc@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEPAPAVCvCity@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEPAPAVCvCity@@I@Z PROC ; FStaticVector<CvCity *,64,1,297,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 64					; 00000040H
	jbe	SHORT $LN2@Alloc@4

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [edi*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@4:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 64			; 00000040H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEPAPAVCvCity@@I@Z ENDP ; FStaticVector<CvCity *,64,1,297,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@PAVCvCity@@$00@@QAE@XZ		; BaseVector<CvCity *,1>::~BaseVector<CvCity *,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@PAVCvCity@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@PAVCvCity@@$00@@QAE@XZ PROC		; BaseVector<CvCity *,1>::~BaseVector<CvCity *,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@PAVCvCity@@$00@@QAE@XZ ENDP		; BaseVector<CvCity *,1>::~BaseVector<CvCity *,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@PAVCvCity@@$00@@IAE@XZ		; BaseVector<CvCity *,1>::BaseVector<CvCity *,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@PAVCvCity@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@PAVCvCity@@$00@@IAE@XZ PROC		; BaseVector<CvCity *,1>::BaseVector<CvCity *,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@PAVCvCity@@$00@@IAE@XZ ENDP		; BaseVector<CvCity *,1>::BaseVector<CvCity *,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@PAVCvCity@@$00@@IAEXPAPAVCvCity@@I@Z ; BaseVector<CvCity *,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@PAVCvCity@@$00@@IAEXPAPAVCvCity@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@PAVCvCity@@$00@@IAEXPAPAVCvCity@@I@Z PROC ; BaseVector<CvCity *,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@PAVCvCity@@$00@@IAEXPAPAVCvCity@@I@Z ENDP ; BaseVector<CvCity *,1>::Destroy
_TEXT	ENDS
PUBLIC	?getMap@CvGlobals@@QAEAAVCvMap@@XZ		; CvGlobals::getMap
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getMap@CvGlobals@@QAEAAVCvMap@@XZ
_TEXT	SEGMENT
?getMap@CvGlobals@@QAEAAVCvMap@@XZ PROC			; CvGlobals::getMap, COMDAT
; _this$ = ecx

; 175  : 		return *m_map;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+52]

; 176  : 	}

	ret	0
?getMap@CvGlobals@@QAEAAVCvMap@@XZ ENDP			; CvGlobals::getMap
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ		; CvPlot::getPlotCity
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplot.h
;	COMDAT ?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ PROC		; CvPlot::getPlotCity, COMDAT
; _this$ = ecx

; 533  : 		if((m_plotCity.eOwner >= 0) && m_plotCity.eOwner < MAX_PLAYERS)

	mov	eax, DWORD PTR [ecx+104]
	test	eax, eax
	jl	SHORT $LN1@getPlotCit
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN1@getPlotCit

; 534  : 			return (GET_PLAYER((PlayerTypes)m_plotCity.eOwner).getCity(m_plotCity.iID));

	mov	ecx, DWORD PTR [ecx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity

; 537  : 	}

	ret	0
$LN1@getPlotCit:

; 535  : 
; 536  : 		return NULL;

	xor	eax, eax

; 537  : 	}

	ret	0
?getPlotCity@CvPlot@@QBEPAVCvCity@@XZ ENDP		; CvPlot::getPlotCity
_TEXT	ENDS
PUBLIC	?coordRange@@YAHHH_N@Z				; coordRange
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?coordRange@@YAHHH_N@Z
_TEXT	SEGMENT
_iCoord$ = 8						; size = 4
_iRange$ = 12						; size = 4
_bWrap$ = 16						; size = 1
?coordRange@@YAHHH_N@Z PROC				; coordRange, COMDAT

; 88   : 	if(bWrap)

	cmp	BYTE PTR _bWrap$[esp-4], 0
	mov	eax, DWORD PTR _iCoord$[esp-4]
	je	SHORT $LN5@coordRange

; 89   : 	{
; 90   : 		if(iCoord < 0)
; 91   : 		{
; 92   : 			return (iRange + (iCoord % iRange));

	mov	ecx, DWORD PTR _iRange$[esp-4]
	test	eax, eax
	jge	SHORT $LN3@coordRange
	cdq
	idiv	ecx
	mov	eax, edx
	add	eax, ecx

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
$LN3@coordRange:

; 93   : 		}
; 94   : 		else if(iCoord >= iRange)

	cmp	eax, ecx
	jl	SHORT $LN5@coordRange

; 95   : 		{
; 96   : 			return (iCoord % iRange);

	cdq
	idiv	ecx
	mov	eax, edx
$LN5@coordRange:

; 97   : 		}
; 98   : 	}
; 99   : 
; 100  : 	return iCoord;
; 101  : }

	ret	0
?coordRange@@YAHHH_N@Z ENDP				; coordRange
_TEXT	ENDS
PUBLIC	?numPlots@CvMap@@QBEHXZ				; CvMap::numPlots
; Function compile flags: /Ogtpy
;	COMDAT ?numPlots@CvMap@@QBEHXZ
_TEXT	SEGMENT
?numPlots@CvMap@@QBEHXZ PROC				; CvMap::numPlots, COMDAT
; _this$ = ecx

; 170  : 		return m_iGridSize;

	mov	eax, DWORD PTR [ecx+4028]

; 171  : 	}

	ret	0
?numPlots@CvMap@@QBEHXZ ENDP				; CvMap::numPlots
_TEXT	ENDS
PUBLIC	?getGridWidth@CvMap@@QBEHXZ			; CvMap::getGridWidth
; Function compile flags: /Ogtpy
;	COMDAT ?getGridWidth@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridWidth@CvMap@@QBEHXZ PROC			; CvMap::getGridWidth, COMDAT
; _this$ = ecx

; 198  : 		return m_iGridWidth;

	mov	eax, DWORD PTR [ecx+4020]

; 199  : 	}

	ret	0
?getGridWidth@CvMap@@QBEHXZ ENDP			; CvMap::getGridWidth
_TEXT	ENDS
PUBLIC	?getGridHeight@CvMap@@QBEHXZ			; CvMap::getGridHeight
; Function compile flags: /Ogtpy
;	COMDAT ?getGridHeight@CvMap@@QBEHXZ
_TEXT	SEGMENT
?getGridHeight@CvMap@@QBEHXZ PROC			; CvMap::getGridHeight, COMDAT
; _this$ = ecx

; 206  : 		return m_iGridHeight;

	mov	eax, DWORD PTR [ecx+4024]

; 207  : 	}

	ret	0
?getGridHeight@CvMap@@QBEHXZ ENDP			; CvMap::getGridHeight
_TEXT	ENDS
PUBLIC	?isWrapX@CvMap@@QBE_NXZ				; CvMap::isWrapX
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapX@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapX@CvMap@@QBE_NXZ PROC				; CvMap::isWrapX, COMDAT
; _this$ = ecx

; 228  : 		return m_bWrapX;

	mov	al, BYTE PTR [ecx+4056]

; 229  : 	}

	ret	0
?isWrapX@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapX
_TEXT	ENDS
PUBLIC	?isWrapY@CvMap@@QBE_NXZ				; CvMap::isWrapY
; Function compile flags: /Ogtpy
;	COMDAT ?isWrapY@CvMap@@QBE_NXZ
_TEXT	SEGMENT
?isWrapY@CvMap@@QBE_NXZ PROC				; CvMap::isWrapY, COMDAT
; _this$ = ecx

; 233  : 		return m_bWrapY;

	mov	al, BYTE PTR [ecx+4057]

; 234  : 	}

	ret	0
?isWrapY@CvMap@@QBE_NXZ ENDP				; CvMap::isWrapY
_TEXT	ENDS
PUBLIC	?plotByIndex@CvMap@@QBEPAVCvPlot@@H@Z		; CvMap::plotByIndex
; Function compile flags: /Ogtpy
;	COMDAT ?plotByIndex@CvMap@@QBEPAVCvPlot@@H@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?plotByIndex@CvMap@@QBEPAVCvPlot@@H@Z PROC		; CvMap::plotByIndex, COMDAT
; _this$ = ecx

; 263  : 		return (((iIndex >= 0) && (iIndex < (numPlots()))) ? &(m_pMapPlots[iIndex]) : NULL);

	mov	eax, DWORD PTR _iIndex$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@plotByInde
	cmp	eax, DWORD PTR [ecx+4028]
	jge	SHORT $LN3@plotByInde
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]

; 264  : 	}

	ret	4
$LN3@plotByInde:

; 263  : 		return (((iIndex >= 0) && (iIndex < (numPlots()))) ? &(m_pMapPlots[iIndex]) : NULL);

	xor	eax, eax

; 264  : 	}

	ret	4
?plotByIndex@CvMap@@QBEPAVCvPlot@@H@Z ENDP		; CvMap::plotByIndex
_TEXT	ENDS
PUBLIC	?GetLastNode@CvAStar@@QAEPAVCvAStarNode@@XZ	; CvAStar::GetLastNode
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvastar.h
;	COMDAT ?GetLastNode@CvAStar@@QAEPAVCvAStarNode@@XZ
_TEXT	SEGMENT
?GetLastNode@CvAStar@@QAEPAVCvAStarNode@@XZ PROC	; CvAStar::GetLastNode, COMDAT
; _this$ = ecx

; 98   : 		return m_pBest;

	mov	eax, DWORD PTR [ecx+96]

; 99   : 	}

	ret	0
?GetLastNode@CvAStar@@QAEPAVCvAStarNode@@XZ ENDP	; CvAStar::GetLastNode
_TEXT	ENDS
PUBLIC	??0RouteInfo@CvCityConnections@@QAE@XZ		; CvCityConnections::RouteInfo::RouteInfo
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcityconnections.h
;	COMDAT ??0RouteInfo@CvCityConnections@@QAE@XZ
_TEXT	SEGMENT
??0RouteInfo@CvCityConnections@@QAE@XZ PROC		; CvCityConnections::RouteInfo::RouteInfo, COMDAT
; _this$ = ecx

; 68   : 		{

	mov	eax, ecx
	mov	BYTE PTR [eax], 0
	mov	BYTE PTR [eax+1], 0

; 69   : 		}

	ret	0
??0RouteInfo@CvCityConnections@@QAE@XZ ENDP		; CvCityConnections::RouteInfo::RouteInfo
_TEXT	ENDS
PUBLIC	??0PlotRouteInfo@CvCityConnections@@QAE@XZ	; CvCityConnections::PlotRouteInfo::PlotRouteInfo
; Function compile flags: /Ogtpy
;	COMDAT ??0PlotRouteInfo@CvCityConnections@@QAE@XZ
_TEXT	SEGMENT
??0PlotRouteInfo@CvCityConnections@@QAE@XZ PROC		; CvCityConnections::PlotRouteInfo::PlotRouteInfo, COMDAT
; _this$ = ecx

; 115  : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], -1
	mov	BYTE PTR [eax+4], 0

; 116  : 		}

	ret	0
??0PlotRouteInfo@CvCityConnections@@QAE@XZ ENDP		; CvCityConnections::PlotRouteInfo::PlotRouteInfo
_TEXT	ENDS
PUBLIC	??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z PROC ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 771  : 		}

	ret	4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ENDP ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
_TEXT	ENDS
PUBLIC	??$?6H@FDataStream@@QAEAAV0@ABH@Z		; FDataStream::operator<<<int>
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?6H@FDataStream@@QAEAAV0@ABH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6H@FDataStream@@QAEAAV0@ABH@Z PROC			; FDataStream::operator<<<int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6H@FDataStream@@QAEAAV0@ABH@Z ENDP			; FDataStream::operator<<<int>
_TEXT	ENDS
PUBLIC	??$?5H@FDataStream@@QAEAAV0@AAH@Z		; FDataStream::operator>><int>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5H@FDataStream@@QAEAAV0@AAH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5H@FDataStream@@QAEAAV0@AAH@Z PROC			; FDataStream::operator>><int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5H@FDataStream@@QAEAAV0@AAH@Z ENDP			; FDataStream::operator>><int>
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ		; FAutoVariable<int,CvCity>::operator int const &
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ
_TEXT	SEGMENT
??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ PROC		; FAutoVariable<int,CvCity>::operator int const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@HVCvCity@@@@QBEABHXZ ENDP		; FAutoVariable<int,CvCity>::operator int const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ	; FAutoVariable<bool,CvPlayer>::operator bool const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ
_TEXT	SEGMENT
??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ PROC	; FAutoVariable<bool,CvPlayer>::operator bool const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ ENDP	; FAutoVariable<bool,CvPlayer>::operator bool const &
_TEXT	ENDS
PUBLIC	??$?5I@FDataStream@@QAEAAV0@AAI@Z		; FDataStream::operator>><unsigned int>
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5I@FDataStream@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5I@FDataStream@@QAEAAV0@AAI@Z PROC			; FDataStream::operator>><unsigned int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5I@FDataStream@@QAEAAV0@AAI@Z ENDP			; FDataStream::operator>><unsigned int>
_TEXT	ENDS
PUBLIC	??$?6I@FDataStream@@QAEAAV0@ABI@Z		; FDataStream::operator<<<unsigned int>
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6I@FDataStream@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6I@FDataStream@@QAEAAV0@ABI@Z PROC			; FDataStream::operator<<<unsigned int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6I@FDataStream@@QAEAAV0@ABI@Z ENDP			; FDataStream::operator<<<unsigned int>
_TEXT	ENDS
PUBLIC	??$?5D@FDataStream@@QAEAAV0@AAD@Z		; FDataStream::operator>><char>
EXTRN	?Read@FDataStream@@IAEXAAD@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5D@FDataStream@@QAEAAV0@AAD@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5D@FDataStream@@QAEAAV0@AAD@Z PROC			; FDataStream::operator>><char>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAD@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5D@FDataStream@@QAEAAV0@AAD@Z ENDP			; FDataStream::operator>><char>
_TEXT	ENDS
PUBLIC	??$?6D@FDataStream@@QAEAAV0@ABD@Z		; FDataStream::operator<<<char>
EXTRN	?Write@FDataStream@@IAEXABD@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6D@FDataStream@@QAEAAV0@ABD@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6D@FDataStream@@QAEAAV0@ABD@Z PROC			; FDataStream::operator<<<char>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABD@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6D@FDataStream@@QAEAAV0@ABD@Z ENDP			; FDataStream::operator<<<char>
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABURouteInfo@CvCityConnections@@@Z ; operator<<
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcityconnections.cpp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABURouteInfo@CvCityConnections@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABURouteInfo@CvCityConnections@@@Z PROC ; operator<<, COMDAT

; 22   : 	saveTo << readFrom.m_cRouteState;

	mov	eax, DWORD PTR _readFrom$[esp-4]
	push	esi
	mov	esi, DWORD PTR _saveTo$[esp]
	push	eax
	mov	ecx, esi
	call	?Write@FDataStream@@IAEXABD@Z		; FDataStream::Write

; 23   : 	return saveTo;

	mov	eax, esi
	pop	esi

; 24   : }

	ret	0
??6@YAAAVFDataStream@@AAV0@ABURouteInfo@CvCityConnections@@@Z ENDP ; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAURouteInfo@CvCityConnections@@@Z ; operator>>
; Function compile flags: /Ogtpy
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAURouteInfo@CvCityConnections@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAURouteInfo@CvCityConnections@@@Z PROC ; operator>>, COMDAT

; 28   : 	loadFrom >> writeTo.m_cRouteState;

	mov	eax, DWORD PTR _writeTo$[esp-4]
	push	esi
	mov	esi, DWORD PTR _loadFrom$[esp]
	push	eax
	mov	ecx, esi
	call	?Read@FDataStream@@IAEXAAD@Z		; FDataStream::Read

; 29   : 	return loadFrom;

	mov	eax, esi
	pop	esi

; 30   : }

	ret	0
??5@YAAAVFDataStream@@AAV0@AAURouteInfo@CvCityConnections@@@Z ENDP ; operator>>
_TEXT	ENDS
PUBLIC	?Write@CvCityConnections@@QBEXAAVFDataStream@@@Z ; CvCityConnections::Write
; Function compile flags: /Ogtpy
;	COMDAT ?Write@CvCityConnections@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_uiVersion$ = -4					; size = 4
$T221707 = 8						; size = 4
_kStream$ = 8						; size = 4
?Write@CvCityConnections@@QBEXAAVFDataStream@@@Z PROC	; CvCityConnections::Write, COMDAT
; _this$ = ecx

; 119  : {

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 120  : 	// Current version number
; 121  : 	uint uiVersion = 1;
; 122  : 	kStream << uiVersion;

	mov	edi, DWORD PTR _kStream$[esp+16]
	lea	eax, DWORD PTR _uiVersion$[esp+20]
	mov	esi, ecx
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _uiVersion$[esp+24], 1
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 123  : 
; 124  : 	kStream << m_uiRouteInfosDimension;

	lea	ebp, DWORD PTR [esi+4]
	push	ebp
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 125  : 	for(uint ui = 0; ui < m_uiRouteInfosDimension * m_uiRouteInfosDimension; ui++)

	mov	ebp, DWORD PTR [ebp]
	mov	ecx, ebp
	imul	ecx, ebp
	xor	ebx, ebx
	test	ecx, ecx
	jbe	SHORT $LN4@Write
	npad	8
$LL6@Write:

; 126  : 	{
; 127  : 		kStream << m_aRouteInfos[ui].m_cPassEval;

	mov	edx, DWORD PTR [esi+8]
	lea	ebp, DWORD PTR [ebx+ebx]
	lea	eax, DWORD PTR [edx+ebp+1]
	push	eax
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABD@Z		; FDataStream::Write
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, ebp

; 128  : 		kStream << m_aRouteInfos[ui].m_cRouteState;

	push	ecx
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABD@Z		; FDataStream::Write
	mov	eax, DWORD PTR [esi+4]
	mov	edx, eax
	imul	edx, eax
	inc	ebx
	cmp	ebx, edx
	jb	SHORT $LL6@Write
$LN4@Write:

; 129  : 	}
; 130  : 
; 131  : 	kStream << m_aiCityPlotIDs.size();

	mov	eax, DWORD PTR [esi+16]
	lea	ecx, DWORD PTR $T221707[esp+16]
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR $T221707[esp+20], eax
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 132  : 	for(uint ui = 0; ui < m_aiCityPlotIDs.size(); ui++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+16], ebx
	jbe	SHORT $LN1@Write
$LL3@Write:
	mov	edx, DWORD PTR [esi+12]
	lea	eax, DWORD PTR [edx+ebx*4]

; 133  : 	{
; 134  : 		kStream << m_aiCityPlotIDs[ui];

	push	eax
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	ebx
	cmp	ebx, DWORD PTR [esi+16]
	jb	SHORT $LL3@Write
$LN1@Write:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 135  : 	}
; 136  : }

	pop	ecx
	ret	4
?Write@CvCityConnections@@QBEXAAVFDataStream@@@Z ENDP	; CvCityConnections::Write
_TEXT	ENDS
PUBLIC	?IsEmpty@CvCityConnections@@QAE_NXZ		; CvCityConnections::IsEmpty
; Function compile flags: /Ogtpy
;	COMDAT ?IsEmpty@CvCityConnections@@QAE_NXZ
_TEXT	SEGMENT
?IsEmpty@CvCityConnections@@QAE_NXZ PROC		; CvCityConnections::IsEmpty, COMDAT
; _this$ = ecx

; 448  : 	if(m_aiCityPlotIDs.size() > 0)

	cmp	DWORD PTR [ecx+16], 0
	setbe	al

; 449  : 	{
; 450  : 		return false;
; 451  : 	}
; 452  : 	else
; 453  : 	{
; 454  : 		return true;
; 455  : 	}
; 456  : }

	ret	0
?IsEmpty@CvCityConnections@@QAE_NXZ ENDP		; CvCityConnections::IsEmpty
_TEXT	ENDS
PUBLIC	?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z ; CvCityConnections::GetIndexFromCity
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Ogtpy
;	COMDAT ?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z
_TEXT	SEGMENT
_pCity$ = 8						; size = 4
?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z PROC ; CvCityConnections::GetIndexFromCity, COMDAT
; _this$ = ecx

; 460  : {

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 461  : 	CvCity* pOtherCity = NULL;
; 462  : 	for(uint ui = 0; ui < m_aiCityPlotIDs.size(); ui++)

	xor	esi, esi
	cmp	DWORD PTR [edi+16], esi
	jbe	SHORT $LN3@GetIndexFr
	mov	ebx, DWORD PTR _pCity$[esp+8]
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
$LL5@GetIndexFr:

; 463  : 	{
; 464  : 		int iPlotIndex = m_aiCityPlotIDs[ui];

	mov	eax, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [eax+esi*4]

; 465  : 		CvPlot* pPlot = GC.getMap().plotByIndex(iPlotIndex);

	test	eax, eax
	jl	SHORT $LN4@GetIndexFr
	cmp	eax, DWORD PTR [ecx+4028]
	jge	SHORT $LN4@GetIndexFr
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]
	mov	edx, eax

; 466  : 		CvAssertMsg(pPlot, "invalid plot. whut??");
; 467  : 		if(pPlot)

	je	SHORT $LN4@GetIndexFr

; 468  : 		{
; 469  : 			pOtherCity = pPlot->getPlotCity();

	mov	eax, DWORD PTR [edx+104]
	test	eax, eax
	jl	SHORT $LN20@GetIndexFr
	cmp	eax, 64					; 00000040H
	jge	SHORT $LN20@GetIndexFr
	mov	ecx, DWORD PTR [edx+108]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ecx
	mov	ecx, eax
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	jmp	SHORT $LN21@GetIndexFr
$LN20@GetIndexFr:
	xor	eax, eax
$LN21@GetIndexFr:

; 470  : 			CvAssertMsg(pOtherCity, "No city on this plot. Whut?");
; 471  : 
; 472  : 			if(pOtherCity == pCity)

	cmp	eax, ebx
	je	SHORT $LN26@GetIndexFr
$LN4@GetIndexFr:

; 461  : 	CvCity* pOtherCity = NULL;
; 462  : 	for(uint ui = 0; ui < m_aiCityPlotIDs.size(); ui++)

	inc	esi
	cmp	esi, DWORD PTR [edi+16]
	jb	SHORT $LL5@GetIndexFr
$LN3@GetIndexFr:
	pop	edi
	pop	esi

; 475  : 			}
; 476  : 		}
; 477  : 	}
; 478  : 
; 479  : 	CvAssertMsg(false, "City not found");
; 480  : 	return UINT_MAX;

	or	eax, -1
	pop	ebx

; 481  : }

	ret	4
$LN26@GetIndexFr:
	pop	edi

; 473  : 			{
; 474  : 				return ui;

	mov	eax, esi
	pop	esi
	pop	ebx

; 481  : }

	ret	4
?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z ENDP ; CvCityConnections::GetIndexFromCity
_TEXT	ENDS
PUBLIC	?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z ; CvCityConnections::GetCityFromIndex
; Function compile flags: /Ogtpy
;	COMDAT ?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z PROC ; CvCityConnections::GetCityFromIndex, COMDAT
; _this$ = ecx

; 485  : 	int iPlotIndex = m_aiCityPlotIDs[iIndex];

	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	mov	eax, DWORD PTR [eax+ecx*4]

; 486  : 	CvPlot* pPlot = GC.getMap().plotByIndex(iPlotIndex);

	test	eax, eax
	jl	SHORT $LN14@GetCityFro
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	eax, DWORD PTR [ecx+4028]
	jge	SHORT $LN14@GetCityFro
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]

; 487  : 	CvAssertMsg(pPlot, "invalid plot. whut??");
; 488  : 
; 489  : 	if(!pPlot) return 0;

	test	eax, eax
	je	SHORT $LN14@GetCityFro

; 490  : 
; 491  : 	CvCity* pCity = pPlot->getPlotCity();

	mov	ecx, DWORD PTR [eax+104]
	test	ecx, ecx
	jl	SHORT $LN14@GetCityFro
	cmp	ecx, 64					; 00000040H
	jge	SHORT $LN14@GetCityFro
	mov	edx, DWORD PTR [eax+108]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	DWORD PTR _iIndex$[esp-4], edx
	jmp	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
$LN14@GetCityFro:
	xor	eax, eax

; 492  : 	CvAssertMsg(pCity, "No city on this plot. Whut?");
; 493  : 
; 494  : 	return pCity;
; 495  : }

	ret	4
?GetCityFromIndex@CvCityConnections@@QAEPAVCvCity@@H@Z ENDP ; CvCityConnections::GetCityFromIndex
_TEXT	ENDS
PUBLIC	?GetNumConnectableCities@CvCityConnections@@QAEIXZ ; CvCityConnections::GetNumConnectableCities
; Function compile flags: /Ogtpy
;	COMDAT ?GetNumConnectableCities@CvCityConnections@@QAEIXZ
_TEXT	SEGMENT
?GetNumConnectableCities@CvCityConnections@@QAEIXZ PROC	; CvCityConnections::GetNumConnectableCities, COMDAT
; _this$ = ecx

; 499  : 	return m_aiCityPlotIDs.size();

	mov	eax, DWORD PTR [ecx+16]

; 500  : }

	ret	0
?GetNumConnectableCities@CvCityConnections@@QAEIXZ ENDP	; CvCityConnections::GetNumConnectableCities
_TEXT	ENDS
PUBLIC	?UpdatePlotRouteStates@CvCityConnections@@IAEXXZ ; CvCityConnections::UpdatePlotRouteStates
; Function compile flags: /Ogtpy
;	COMDAT ?UpdatePlotRouteStates@CvCityConnections@@IAEXXZ
_TEXT	SEGMENT
?UpdatePlotRouteStates@CvCityConnections@@IAEXXZ PROC	; CvCityConnections::UpdatePlotRouteStates, COMDAT
; _this$ = ecx

; 580  : {

	push	esi
	mov	esi, ecx

; 581  : 	for(uint ui = 0; ui < m_aPlotRouteInfos.size(); ui++)

	xor	eax, eax
	cmp	DWORD PTR [esi+344], eax
	jbe	SHORT $LN3@UpdatePlot
	npad	3
$LL5@UpdatePlot:

; 582  : 	{
; 583  : 		if(m_aPlotRouteInfos[ui].m_bPlotRouteState & CONNECTION)

	mov	ecx, DWORD PTR [esi+340]
	lea	edx, DWORD PTR [ecx+eax*8+4]
	mov	cl, BYTE PTR [edx]
	and	cl, 1
	add	cl, cl
	inc	eax
	mov	BYTE PTR [edx], cl
	cmp	eax, DWORD PTR [esi+344]
	jb	SHORT $LL5@UpdatePlot
$LN3@UpdatePlot:
	pop	esi

; 584  : 		{
; 585  : 			m_aPlotRouteInfos[ui].m_bPlotRouteState = CONNECTION_LAST_TURN;
; 586  : 		}
; 587  : 		else
; 588  : 		{
; 589  : 			m_aPlotRouteInfos[ui].m_bPlotRouteState = NO_CONNECTION;
; 590  : 		}
; 591  : 	}
; 592  : }

	ret	0
?UpdatePlotRouteStates@CvCityConnections@@IAEXXZ ENDP	; CvCityConnections::UpdatePlotRouteStates
_TEXT	ENDS
PUBLIC	?ResizeRouteInfo@CvCityConnections@@IAEXI@Z	; CvCityConnections::ResizeRouteInfo
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ResizeRouteInfo@CvCityConnections@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ResizeRouteInfo@CvCityConnections@@IAEXI@Z$0
__ehfuncinfo$?ResizeRouteInfo@CvCityConnections@@IAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ResizeRouteInfo@CvCityConnections@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?ResizeRouteInfo@CvCityConnections@@IAEXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T221857 = 8						; size = 4
_uiNewSize$ = 8						; size = 4
?ResizeRouteInfo@CvCityConnections@@IAEXI@Z PROC	; CvCityConnections::ResizeRouteInfo, COMDAT
; _this$ = ecx

; 650  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?ResizeRouteInfo@CvCityConnections@@IAEXI@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 651  : 	if(m_aRouteInfos)

	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $LN1@ResizeRout

; 652  : 	{
; 653  : 		delete [] m_aRouteInfos;

	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 654  : 		m_aRouteInfos = NULL;

	mov	DWORD PTR [edi+8], 0
$LN1@ResizeRout:

; 655  : 	}
; 656  : 
; 657  : 	m_aRouteInfos = new RouteInfo[uiNewSize * uiNewSize];

	mov	ebp, DWORD PTR _uiNewSize$[esp+24]
	mov	esi, ebp
	imul	esi, ebp
	xor	ecx, ecx
	mov	eax, esi
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR $T221857[esp+24], ebx
	xor	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], eax
	cmp	ebx, eax
	je	SHORT $LN4@ResizeRout
	push	OFFSET ??0RouteInfo@CvCityConnections@@QAE@XZ ; CvCityConnections::RouteInfo::RouteInfo
	push	esi
	push	2
	push	ebx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	DWORD PTR [edi+8], ebx
	jmp	SHORT $LN8@ResizeRout
$LN4@ResizeRout:
	mov	DWORD PTR [edi+8], eax
$LN8@ResizeRout:

; 658  : 	CvAssertMsg(m_aRouteInfos, "m_aRouteInfo null");
; 659  : 	m_uiRouteInfosDimension = uiNewSize;
; 660  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	DWORD PTR [edi+4], ebp
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ResizeRouteInfo@CvCityConnections@@IAEXI@Z$0:
	mov	eax, DWORD PTR $T221857[ebp-4]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?ResizeRouteInfo@CvCityConnections@@IAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?ResizeRouteInfo@CvCityConnections@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ResizeRouteInfo@CvCityConnections@@IAEXI@Z ENDP	; CvCityConnections::ResizeRouteInfo
PUBLIC	?clear@?$BaseVector@H$00@@QAEXXZ		; BaseVector<int,1>::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?clear@?$BaseVector@H$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@H$00@@QAEXXZ PROC			; BaseVector<int,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@H$00@@QAEXXZ ENDP			; BaseVector<int,1>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ	; FStaticVector<int,64,1,297,0>::FStaticVector<int,64,1,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ PROC	; FStaticVector<int,64,1,297,0>::FStaticVector<int,64,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 64			; 00000040H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ ENDP	; FStaticVector<int,64,1,297,0>::FStaticVector<int,64,1,297,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ	; FStaticVector<int,64,1,297,0>::~FStaticVector<int,64,1,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ PROC	; FStaticVector<int,64,1,297,0>::~FStaticVector<int,64,1,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ ENDP	; FStaticVector<int,64,1,297,0>::~FStaticVector<int,64,1,297,0>
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum BuildingTypes,10,1,297,0>::FStaticVector<enum BuildingTypes,10,1,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<enum BuildingTypes,10,1,297,0>::FStaticVector<enum BuildingTypes,10,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 10			; 0000000aH
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<enum BuildingTypes,10,1,297,0>::FStaticVector<enum BuildingTypes,10,1,297,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@W4BuildingTypes@@$00@@QAEXXZ ; BaseVector<enum BuildingTypes,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@W4BuildingTypes@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@W4BuildingTypes@@$00@@QAEXXZ PROC	; BaseVector<enum BuildingTypes,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@W4BuildingTypes@@$00@@QAEXXZ ENDP	; BaseVector<enum BuildingTypes,1>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 100			; 00000064H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAEXXZ ; BaseVector<CvCityConnections::PlotRouteInfo,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAEXXZ PROC ; BaseVector<CvCityConnections::PlotRouteInfo,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UPlotRouteInfo@CvCityConnections@@$00@@QAEXXZ ENDP ; BaseVector<CvCityConnections::PlotRouteInfo,1>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvCity *,64,1,297,0>::FStaticVector<CvCity *,64,1,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvCity *,64,1,297,0>::FStaticVector<CvCity *,64,1,297,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 64			; 00000040H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvCity *,64,1,297,0>::FStaticVector<CvCity *,64,1,297,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,64,1,297,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<int,64,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN30@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN30@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN31@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN31@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 64					; 00000040H
	jbe	SHORT $LN15@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [ebp*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN14@GrowSize
$LN15@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 64			; 00000040H
$LN14@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN33@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN33@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+268], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<int,64,1,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXPAW4BuildingTypes@@I@Z ; FStaticVector<enum BuildingTypes,10,1,297,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXPAW4BuildingTypes@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXPAW4BuildingTypes@@I@Z PROC ; FStaticVector<enum BuildingTypes,10,1,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@2

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@2:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXPAW4BuildingTypes@@I@Z ENDP ; FStaticVector<enum BuildingTypes,10,1,297,0>::Free
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXPAUPlotRouteInfo@CvCityConnections@@I@Z ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXPAUPlotRouteInfo@CvCityConnections@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXPAUPlotRouteInfo@CvCityConnections@@I@Z PROC ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@3

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@3:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXPAUPlotRouteInfo@CvCityConnections@@I@Z ENDP ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::Free
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXPAPAVCvCity@@I@Z ; FStaticVector<CvCity *,64,1,297,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXPAPAVCvCity@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXPAPAVCvCity@@I@Z PROC ; FStaticVector<CvCity *,64,1,297,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@4

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@4:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXPAPAVCvCity@@I@Z ENDP ; FStaticVector<CvCity *,64,1,297,0>::Free
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT
; _p$ = eax

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 302  : }

	ret	0
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1

; 302  : }

	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
PUBLIC	?getX@CvCity@@QBEHXZ				; CvCity::getX
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
;	COMDAT ?getX@CvCity@@QBEHXZ
_TEXT	SEGMENT
?getX@CvCity@@QBEHXZ PROC				; CvCity::getX, COMDAT
; _this$ = ecx

; 340  : 		return m_iX;

	mov	eax, DWORD PTR [ecx+96]

; 341  : 	}

	ret	0
?getX@CvCity@@QBEHXZ ENDP				; CvCity::getX
_TEXT	ENDS
PUBLIC	?getY@CvCity@@QBEHXZ				; CvCity::getY
; Function compile flags: /Ogtpy
;	COMDAT ?getY@CvCity@@QBEHXZ
_TEXT	SEGMENT
?getY@CvCity@@QBEHXZ PROC				; CvCity::getY, COMDAT
; _this$ = ecx

; 345  : 		return m_iY;

	mov	eax, DWORD PTR [ecx+108]

; 346  : 	}

	ret	0
?getY@CvCity@@QBEHXZ ENDP				; CvCity::getY
_TEXT	ENDS
PUBLIC	?isAlive@CvPlayer@@QBE_NXZ			; CvPlayer::isAlive
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
;	COMDAT ?isAlive@CvPlayer@@QBE_NXZ
_TEXT	SEGMENT
?isAlive@CvPlayer@@QBE_NXZ PROC				; CvPlayer::isAlive, COMDAT
; _this$ = ecx

; 1092 : 		return m_bAlive;

	mov	al, BYTE PTR [ecx+2256]

; 1093 : 	}

	ret	0
?isAlive@CvPlayer@@QBE_NXZ ENDP				; CvPlayer::isAlive
_TEXT	ENDS
PUBLIC	?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ		; CvPlayer::GetID
; Function compile flags: /Ogtpy
;	COMDAT ?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ PROC		; CvPlayer::GetID, COMDAT
; _this$ = ecx

; 1168 : 		return m_eID;

	mov	eax, DWORD PTR [ecx+44]

; 1169 : 	}

	ret	0
?GetID@CvPlayer@@QBE?AW4PlayerTypes@@XZ ENDP		; CvPlayer::GetID
_TEXT	ENDS
PUBLIC	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ		; CvPlayer::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ PROC		; CvPlayer::getTeam, COMDAT
; _this$ = ecx

; 1178 : 		return CvPreGame::teamType(m_eID);

	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN5@getTeam
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 1179 : 	}

	ret	0

; 1178 : 		return CvPreGame::teamType(m_eID);

$LN5@getTeam:
	or	eax, -1

; 1179 : 	}

	ret	0
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ ENDP		; CvPlayer::getTeam
_TEXT	ENDS
PUBLIC	?isPlot@CvMap@@QBEHHH@Z				; CvMap::isPlot
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvmap.h
;	COMDAT ?isPlot@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?isPlot@CvMap@@QBEHHH@Z PROC				; CvMap::isPlot, COMDAT
; _this$ = ecx

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	mov	eax, DWORD PTR _iX$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4020]
	jge	SHORT $LN3@isPlot
	mov	eax, DWORD PTR _iY$[esp-4]
	test	eax, eax
	jl	SHORT $LN3@isPlot
	cmp	eax, DWORD PTR [ecx+4024]
	jge	SHORT $LN3@isPlot
	mov	eax, 1

; 161  : #endif
; 162  : 	}

	ret	8
$LN3@isPlot:

; 157  : #ifdef AUI_WARNING_FIXES
; 158  : 		return ((iX >= 0) && (uint(iX) < getGridWidth()) && (iY >= 0) && (uint(iY) < getGridHeight()));
; 159  : #else
; 160  : 		return ((iX >= 0) && (iX < getGridWidth()) && (iY >= 0) && (iY < getGridHeight()));

	xor	eax, eax

; 161  : #endif
; 162  : 	}

	ret	8
?isPlot@CvMap@@QBEHHH@Z ENDP				; CvMap::isPlot
_TEXT	ENDS
PUBLIC	?plotNum@CvMap@@QBEHHH@Z			; CvMap::plotNum
; Function compile flags: /Ogtpy
;	COMDAT ?plotNum@CvMap@@QBEHHH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plotNum@CvMap@@QBEHHH@Z PROC				; CvMap::plotNum, COMDAT
; _this$ = ecx

; 183  : 		return ((iY * getGridWidth()) + iX);

	mov	eax, DWORD PTR [ecx+4020]
	imul	eax, DWORD PTR _iY$[esp-4]
	add	eax, DWORD PTR _iX$[esp-4]

; 184  : #endif
; 185  : 	}

	ret	8
?plotNum@CvMap@@QBEHHH@Z ENDP				; CvMap::plotNum
_TEXT	ENDS
PUBLIC	?plot@CvMap@@QBEPAVCvPlot@@HH@Z			; CvMap::plot
; Function compile flags: /Ogtpy
;	COMDAT ?plot@CvMap@@QBEPAVCvPlot@@HH@Z
_TEXT	SEGMENT
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
?plot@CvMap@@QBEPAVCvPlot@@HH@Z PROC			; CvMap::plot, COMDAT
; _this$ = ecx

; 273  : 		if((iX == INVALID_PLOT_COORD) || (iY == INVALID_PLOT_COORD))

	mov	eax, DWORD PTR _iX$[esp-4]
	push	ebp
	cmp	eax, -2147483647			; 80000001H
	je	$LN1@plot
	mov	ebp, DWORD PTR _iY$[esp]
	cmp	ebp, -2147483647			; 80000001H
	je	$LN1@plot

; 276  : 		}
; 277  : 		int iMapX = coordRange(iX, getGridWidth(), isWrapX());

	cmp	BYTE PTR [ecx+4056], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR [ecx+4020]
	push	edi
	je	SHORT $LN11@plot
	test	eax, eax
	jge	SHORT $LN13@plot
	cdq
	idiv	esi
	mov	edi, edx
	add	edi, esi
	jmp	SHORT $LN15@plot
$LN13@plot:
	cmp	eax, esi
	jl	SHORT $LN11@plot
	cdq
	idiv	esi
	mov	edi, edx
	jmp	SHORT $LN15@plot
$LN11@plot:
	mov	edi, eax
$LN15@plot:

; 278  : 		int iMapY = coordRange(iY, getGridHeight(), isWrapY());

	cmp	BYTE PTR [ecx+4057], 0
	mov	ebx, DWORD PTR [ecx+4024]
	je	SHORT $LN40@plot
	test	ebp, ebp
	jge	SHORT $LN23@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	add	edx, ebx
	jmp	SHORT $LN25@plot
$LN23@plot:
	cmp	ebp, ebx
	jl	SHORT $LN40@plot
	mov	eax, ebp
	cdq
	idiv	ebx
	jmp	SHORT $LN25@plot
$LN40@plot:
	mov	edx, ebp
$LN25@plot:

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	test	edi, edi
	jl	SHORT $LN5@plot
	cmp	edi, esi
	jge	SHORT $LN5@plot
	test	edx, edx
	jl	SHORT $LN5@plot
	cmp	edx, ebx
	jge	SHORT $LN5@plot
	imul	esi, edx
	add	esi, edi
	imul	esi, 484				; 000001e4H
	add	esi, DWORD PTR [ecx+4068]
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp

; 280  : 	}

	ret	8
$LN5@plot:
	pop	edi
	pop	esi
	pop	ebx

; 279  : 		return ((isPlot(iMapX, iMapY)) ? &(m_pMapPlots[plotNum(iMapX, iMapY)]) : NULL);

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
$LN1@plot:

; 274  : 		{
; 275  : 			return NULL;

	xor	eax, eax
	pop	ebp

; 280  : 	}

	ret	8
?plot@CvMap@@QBEPAVCvPlot@@HH@Z ENDP			; CvMap::plot
_TEXT	ENDS
PUBLIC	?ResetCityPlotIDs@CvCityConnections@@QAEXXZ	; CvCityConnections::ResetCityPlotIDs
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcityconnections.cpp
;	COMDAT ?ResetCityPlotIDs@CvCityConnections@@QAEXXZ
_TEXT	SEGMENT
?ResetCityPlotIDs@CvCityConnections@@QAEXXZ PROC	; CvCityConnections::ResetCityPlotIDs, COMDAT
; _this$ = ecx

; 442  : 	m_aiCityPlotIDs.clear();

	mov	DWORD PTR [ecx+16], 0

; 443  : }

	ret	0
?ResetCityPlotIDs@CvCityConnections@@QAEXXZ ENDP	; CvCityConnections::ResetCityPlotIDs
_TEXT	ENDS
PUBLIC	?ShouldConnectToOtherPlayer@CvCityConnections@@QAE_NW4PlayerTypes@@@Z ; CvCityConnections::ShouldConnectToOtherPlayer
EXTRN	?IsWantToRouteConnectToMinor@CvDiplomacyAI@@QAE_NW4PlayerTypes@@@Z:PROC ; CvDiplomacyAI::IsWantToRouteConnectToMinor
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
EXTRN	?IsActiveQuestForPlayer@CvMinorCivAI@@QAE_NW4PlayerTypes@@W4MinorCivQuestTypes@@@Z:PROC ; CvMinorCivAI::IsActiveQuestForPlayer
EXTRN	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ:PROC ; CvPlayer::GetMinorCivAI
EXTRN	?isHuman@CvPlayer@@QBE_NXZ:PROC			; CvPlayer::isHuman
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?isBarbarian@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isBarbarian
; Function compile flags: /Ogtpy
;	COMDAT ?ShouldConnectToOtherPlayer@CvCityConnections@@QAE_NW4PlayerTypes@@@Z
_TEXT	SEGMENT
_eOtherPlayer$ = 8					; size = 4
?ShouldConnectToOtherPlayer@CvCityConnections@@QAE_NW4PlayerTypes@@@Z PROC ; CvCityConnections::ShouldConnectToOtherPlayer, COMDAT
; _this$ = ecx

; 504  : {

	push	esi

; 505  : 	bool result = false;
; 506  : 
; 507  : 	// shouldn't be able to connect to yourself
; 508  : 	if(m_pPlayer->GetID() == eOtherPlayer)

	mov	esi, DWORD PTR _eOtherPlayer$[esp]
	push	edi
	mov	edi, ecx
	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax+44], esi

; 509  : 	{
; 510  : 		return false;

	je	SHORT $LN45@ShouldConn

; 511  : 	}
; 512  : 
; 513  : 	if(!GET_PLAYER(eOtherPlayer).isAlive())

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	imul	esi, 63236				; 0000f704H
	add	ecx, esi
	cmp	BYTE PTR [ecx+2256], 0

; 514  : 	{
; 515  : 		return false;

	je	SHORT $LN45@ShouldConn

; 516  : 	}
; 517  : 
; 518  : 	if(GET_PLAYER(eOtherPlayer).isBarbarian())

	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	test	al, al

; 519  : 	{
; 520  : 		return false;

	jne	SHORT $LN45@ShouldConn

; 521  : 	}
; 522  : 
; 523  : 	CvPlayer* pOtherPlayer = &(GET_PLAYER(eOtherPlayer));

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 524  : 
; 525  : 	// only majors and minors should connect to each other at this point.
; 526  : 	bool bMajorMinor = m_pPlayer->isMinorCiv() != pOtherPlayer->isMinorCiv();

	mov	ecx, DWORD PTR [edi]
	push	ebx
	add	esi, edx
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	mov	ecx, esi
	mov	bl, al
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	cmp	bl, al
	pop	ebx

; 527  : 	if(!bMajorMinor)
; 528  : 	{
; 529  : 		return false;

	je	SHORT $LN45@ShouldConn

; 530  : 	}
; 531  : 
; 532  : 	if(m_pPlayer->isMinorCiv())

	mov	ecx, DWORD PTR [edi]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	test	al, al
	je	SHORT $LN8@ShouldConn

; 533  : 	{
; 534  : 		CvPlayer* pMajorCiv = pOtherPlayer;
; 535  : 
; 536  : 		// If the major is a human, don't decide a connection to a minor is desirable on their behalf
; 537  : 		if(pMajorCiv->isHuman())

	mov	ecx, esi
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al

; 538  : 		{
; 539  : 			return false;

	jne	SHORT $LN45@ShouldConn

; 540  : 		}
; 541  : 
; 542  : 		if(!m_pPlayer->GetMinorCivAI()->IsActiveQuestForPlayer(pMajorCiv->GetID(), MINOR_CIV_QUEST_ROUTE))

	mov	esi, DWORD PTR [esi+44]
	mov	ecx, DWORD PTR [edi]
	push	0
	push	esi
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?IsActiveQuestForPlayer@CvMinorCivAI@@QAE_NW4PlayerTypes@@W4MinorCivQuestTypes@@@Z ; CvMinorCivAI::IsActiveQuestForPlayer
	test	al, al
	jne	SHORT $LN1@ShouldConn
$LN45@ShouldConn:
	pop	edi

; 543  : 		{
; 544  : 			return false;

	xor	al, al
	pop	esi

; 577  : }

	ret	4
$LN8@ShouldConn:

; 545  : 		}
; 546  : 
; 547  : 		result = true;
; 548  : 	}
; 549  : 	else // player is a major
; 550  : 	{
; 551  : 		CvPlayer* pMinorPlayer = pOtherPlayer;
; 552  : 		if(!pMinorPlayer->isAlive())

	cmp	BYTE PTR [esi+2256], 0

; 553  : 		{
; 554  : 			return false;

	je	SHORT $LN45@ShouldConn

; 555  : 		}
; 556  : 
; 557  : 		// If the major is a human, don't decide a connection to a minor is desirable on their behalf
; 558  : 		if(m_pPlayer->isHuman())

	mov	ecx, DWORD PTR [edi]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	test	al, al

; 559  : 		{
; 560  : 			return false;

	jne	SHORT $LN45@ShouldConn

; 561  : 		}
; 562  : 
; 563  : 		if(!m_pPlayer->GetDiplomacyAI()->IsWantToRouteConnectToMinor(pMinorPlayer->GetID()))

	mov	eax, DWORD PTR [esi+44]
	mov	ecx, DWORD PTR [edi]
	push	eax
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?IsWantToRouteConnectToMinor@CvDiplomacyAI@@QAE_NW4PlayerTypes@@@Z ; CvDiplomacyAI::IsWantToRouteConnectToMinor
	test	al, al

; 564  : 		{
; 565  : 			return false;

	je	SHORT $LN45@ShouldConn

; 566  : 		}
; 567  : 
; 568  : 		if(!pMinorPlayer->GetMinorCivAI()->IsActiveQuestForPlayer(m_pPlayer->GetID(), MINOR_CIV_QUEST_ROUTE))

	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+44]
	push	0
	push	eax
	mov	ecx, esi
	call	?GetMinorCivAI@CvPlayer@@QBEPAVCvMinorCivAI@@XZ ; CvPlayer::GetMinorCivAI
	mov	ecx, eax
	call	?IsActiveQuestForPlayer@CvMinorCivAI@@QAE_NW4PlayerTypes@@W4MinorCivQuestTypes@@@Z ; CvMinorCivAI::IsActiveQuestForPlayer
	test	al, al
	jne	SHORT $LN1@ShouldConn
	pop	edi
	pop	esi

; 577  : }

	ret	4
$LN1@ShouldConn:
	pop	edi

; 569  : 		{
; 570  : 			return false;
; 571  : 		}
; 572  : 
; 573  : 		result = true;
; 574  : 	}
; 575  : 
; 576  : 	return result;

	mov	al, 1
	pop	esi

; 577  : }

	ret	4
?ShouldConnectToOtherPlayer@CvCityConnections@@QAE_NW4PlayerTypes@@@Z ENDP ; CvCityConnections::ShouldConnectToOtherPlayer
_TEXT	ENDS
PUBLIC	?BroadcastPlotRouteStateChanges@CvCityConnections@@IAEXXZ ; CvCityConnections::BroadcastPlotRouteStateChanges
EXTRN	?SetTradeRoute@CvPlot@@QAEXW4PlayerTypes@@_N@Z:PROC ; CvPlot::SetTradeRoute
; Function compile flags: /Ogtpy
;	COMDAT ?BroadcastPlotRouteStateChanges@CvCityConnections@@IAEXXZ
_TEXT	SEGMENT
?BroadcastPlotRouteStateChanges@CvCityConnections@@IAEXXZ PROC ; CvCityConnections::BroadcastPlotRouteStateChanges, COMDAT
; _this$ = ecx

; 595  : {

	push	esi
	push	edi
	mov	esi, ecx

; 596  : 	for(uint ui = 0; ui < m_aPlotRouteInfos.size(); ui++)

	xor	edi, edi
	cmp	DWORD PTR [esi+344], edi
	jbe	$LN5@BroadcastP
$LL7@BroadcastP:
	mov	eax, DWORD PTR [esi+340]

; 597  : 	{
; 598  : 		if(m_aPlotRouteInfos[ui].m_bPlotRouteState & CONNECTION_LAST_TURN)

	mov	cl, BYTE PTR [eax+edi*8+4]
	lea	eax, DWORD PTR [eax+edi*8]
	test	cl, 2
	je	SHORT $LN4@BroadcastP

; 599  : 		{
; 600  : 			if(!(m_aPlotRouteInfos[ui].m_bPlotRouteState & CONNECTION))

	test	cl, 1
	jne	SHORT $LN6@BroadcastP

; 601  : 			{
; 602  : 				// indicate removed route
; 603  : 				CvPlot* pPlot = GC.getMap().plotByIndex(m_aPlotRouteInfos[ui].m_iPlotIndex);

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jl	SHORT $LN22@BroadcastP
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	eax, DWORD PTR [ecx+4028]
	jge	SHORT $LN22@BroadcastP
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]

; 604  : 				pPlot->SetTradeRoute(m_pPlayer->GetID(), false);

	push	0

; 605  : 			}
; 606  : 		}
; 607  : 		else

	jmp	SHORT $LN48@BroadcastP

; 601  : 			{
; 602  : 				// indicate removed route
; 603  : 				CvPlot* pPlot = GC.getMap().plotByIndex(m_aPlotRouteInfos[ui].m_iPlotIndex);

$LN22@BroadcastP:
	xor	eax, eax

; 604  : 				pPlot->SetTradeRoute(m_pPlayer->GetID(), false);

	push	eax

; 605  : 			}
; 606  : 		}
; 607  : 		else

	jmp	SHORT $LN48@BroadcastP
$LN4@BroadcastP:

; 608  : 		{
; 609  : 			if(m_aPlotRouteInfos[ui].m_bPlotRouteState & CONNECTION)

	test	cl, 1
	je	SHORT $LN6@BroadcastP

; 610  : 			{
; 611  : 				// broadcast new connected trade route
; 612  : 				CvPlot* pPlot = GC.getMap().plotByIndex(m_aPlotRouteInfos[ui].m_iPlotIndex);

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jl	SHORT $LN38@BroadcastP
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	cmp	eax, DWORD PTR [ecx+4028]
	jge	SHORT $LN38@BroadcastP
	imul	eax, 484				; 000001e4H
	add	eax, DWORD PTR [ecx+4068]
	jmp	SHORT $LN39@BroadcastP
$LN38@BroadcastP:
	xor	eax, eax
$LN39@BroadcastP:

; 613  : 				pPlot->SetTradeRoute(m_pPlayer->GetID(), true);

	push	1
$LN48@BroadcastP:
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	ecx, eax
	call	?SetTradeRoute@CvPlot@@QAEXW4PlayerTypes@@_N@Z ; CvPlot::SetTradeRoute
$LN6@BroadcastP:
	inc	edi
	cmp	edi, DWORD PTR [esi+344]
	jb	$LL7@BroadcastP
$LN5@BroadcastP:
	pop	edi
	pop	esi

; 614  : 			}
; 615  : 		}
; 616  : 	}
; 617  : }

	ret	0
?BroadcastPlotRouteStateChanges@CvCityConnections@@IAEXXZ ENDP ; CvCityConnections::BroadcastPlotRouteStateChanges
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAEIABH@Z ; FStaticVector<int,64,1,297,0>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAEIABH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAEIABH@Z PROC ; FStaticVector<int,64,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+268], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,64,1,297,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR _element$[esp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAEIABH@Z ENDP ; FStaticVector<int,64,1,297,0>::push_back
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum BuildingTypes,10,1,297,0>::~FStaticVector<enum BuildingTypes,10,1,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<enum BuildingTypes,10,1,297,0>::~FStaticVector<enum BuildingTypes,10,1,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@2:

; 619  : 	};

	ret	0
??1?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<enum BuildingTypes,10,1,297,0>::~FStaticVector<enum BuildingTypes,10,1,297,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::~FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::~FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@3:

; 619  : 	};

	ret	0
??1?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::~FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvCity *,64,1,297,0>::~FStaticVector<CvCity *,64,1,297,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ PROC ; FStaticVector<CvCity *,64,1,297,0>::~FStaticVector<CvCity *,64,1,297,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@4
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@4:

; 619  : 	};

	ret	0
??1?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ ENDP ; FStaticVector<CvCity *,64,1,297,0>::~FStaticVector<CvCity *,64,1,297,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum BuildingTypes,10,1,297,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<enum BuildingTypes,10,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN30@GrowSize@2
	mov	DWORD PTR [esi+8], 1
$LN30@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@2
	npad	6
$LL8@GrowSize@2:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN31@GrowSize@2

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@2

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@2
$LN31@GrowSize@2:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@2:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 10					; 0000000aH
	jbe	SHORT $LN15@GrowSize@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [ebp*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN14@GrowSize@2
$LN15@GrowSize@2:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 10			; 0000000aH
$LN14@GrowSize@2:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN33@GrowSize@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN33@GrowSize@2:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+52], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<enum BuildingTypes,10,1,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN30@GrowSize@3
	mov	DWORD PTR [esi+8], 1
$LN30@GrowSize@3:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@3
	npad	6
$LL8@GrowSize@3:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN31@GrowSize@3

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@3

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@3
$LN31@GrowSize@3:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@3:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 100				; 00000064H
	jbe	SHORT $LN15@GrowSize@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN14@GrowSize@3
$LN15@GrowSize@3:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 100			; 00000064H
$LN14@GrowSize@3:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN33@GrowSize@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN33@GrowSize@3:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+812], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvCity *,64,1,297,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXI@Z PROC ; FStaticVector<CvCity *,64,1,297,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN30@GrowSize@4
	mov	DWORD PTR [esi+8], 1
$LN30@GrowSize@4:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@4
	npad	6
$LL8@GrowSize@4:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN31@GrowSize@4

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@4

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@4
$LN31@GrowSize@4:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@4:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 64					; 00000040H
	jbe	SHORT $LN15@GrowSize@4
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [ebp*4]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN14@GrowSize@4
$LN15@GrowSize@4:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 64			; 00000040H
$LN14@GrowSize@4:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN33@GrowSize@4
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN33@GrowSize@4:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+268], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvCity *,64,1,297,0>::GrowSize
_TEXT	ENDS
PUBLIC	??0CvCityConnections@@QAE@XZ			; CvCityConnections::CvCityConnections
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcityconnections.cpp
xdata$x	SEGMENT
__unwindtable$??0CvCityConnections@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvCityConnections@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvCityConnections@@QAE@XZ$1
__ehfuncinfo$??0CvCityConnections@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvCityConnections@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0CvCityConnections@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvCityConnections@@QAE@XZ PROC			; CvCityConnections::CvCityConnections, COMDAT
; _this$ = ecx

; 34   : {

	push	-1
	push	__ehhandler$??0CvCityConnections@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	eax, ecx
	xor	edx, edx
	lea	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], 64			; 00000040H
	mov	DWORD PTR [eax+12], ecx
	lea	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR [eax+288], edx
	mov	DWORD PTR [eax+292], 10			; 0000000aH
	mov	DWORD PTR [eax+284], ecx
	lea	ecx, DWORD PTR [eax+352]
	mov	DWORD PTR [eax+340], ecx

; 35   : 	m_aRouteInfos = NULL;
; 36   : 	Uninit();
; 37   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR [eax+344], edx
	mov	DWORD PTR [eax+348], 100		; 00000064H
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvCityConnections@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,64,1,297,0>::~FStaticVector<int,64,1,297,0>
__unwindfunclet$??0CvCityConnections@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	jmp	??1?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum BuildingTypes,10,1,297,0>::~FStaticVector<enum BuildingTypes,10,1,297,0>
__ehhandler$??0CvCityConnections@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0CvCityConnections@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvCityConnections@@QAE@XZ ENDP			; CvCityConnections::CvCityConnections
PUBLIC	??1CvCityConnections@@QAE@XZ			; CvCityConnections::~CvCityConnections
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvCityConnections@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCityConnections@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvCityConnections@@QAE@XZ$1
__ehfuncinfo$??1CvCityConnections@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvCityConnections@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcityconnections.cpp
xdata$x	ENDS
;	COMDAT ??1CvCityConnections@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvCityConnections@@QAE@XZ PROC			; CvCityConnections::~CvCityConnections, COMDAT
; _this$ = ecx

; 41   : {

	push	-1
	push	__ehhandler$??1CvCityConnections@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi

; 42   : 	Uninit();

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR __$EHRec$[esp+28], 1
	mov	DWORD PTR [esi], 0
	test	eax, eax
	je	SHORT $LN6@CvCityConn
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR [esi+8], 0
$LN6@CvCityConn:

; 43   : }

	mov	eax, DWORD PTR [esi+340]
	lea	ecx, DWORD PTR [esi+352]
	cmp	eax, ecx
	je	SHORT $LN11@CvCityConn
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN11@CvCityConn:
	mov	eax, DWORD PTR [esi+284]
	lea	edx, DWORD PTR [esi+296]
	mov	BYTE PTR __$EHRec$[esp+28], 0
	cmp	eax, edx
	je	SHORT $LN25@CvCityConn
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@CvCityConn:
	mov	eax, DWORD PTR [esi+12]
	add	esi, 24					; 00000018H
	cmp	eax, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	pop	esi
	je	SHORT $LN39@CvCityConn
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN39@CvCityConn:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvCityConnections@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<int,64,1,297,0>::~FStaticVector<int,64,1,297,0>
__unwindfunclet$??1CvCityConnections@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	jmp	??1?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<enum BuildingTypes,10,1,297,0>::~FStaticVector<enum BuildingTypes,10,1,297,0>
__ehhandler$??1CvCityConnections@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvCityConnections@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvCityConnections@@QAE@XZ ENDP			; CvCityConnections::~CvCityConnections
PUBLIC	?Read@CvCityConnections@@QAEXAAVFDataStream@@@Z	; CvCityConnections::Read
; Function compile flags: /Ogtpy
;	COMDAT ?Read@CvCityConnections@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_iValue$220709 = -8					; size = 4
_uiVersion$ = -4					; size = 4
_iNumCityIDs$ = 8					; size = 4
_kStream$ = 8						; size = 4
?Read@CvCityConnections@@QAEXAAVFDataStream@@@Z PROC	; CvCityConnections::Read, COMDAT
; _this$ = ecx

; 92   : {

	sub	esp, 8
	push	ebx
	push	ebp

; 93   : 	// Version number to maintain backwards compatibility
; 94   : 	uint uiVersion;
; 95   : 	kStream >> uiVersion;

	mov	ebp, DWORD PTR _kStream$[esp+12]
	push	esi
	push	edi
	lea	eax, DWORD PTR _uiVersion$[esp+24]
	mov	esi, ecx
	push	eax
	mov	ecx, ebp
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 96   : 
; 97   : 	kStream >> m_uiRouteInfosDimension;

	lea	ebx, DWORD PTR [esi+4]
	push	ebx
	mov	ecx, ebp
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 98   : 	ResizeRouteInfo(m_uiRouteInfosDimension);

	mov	ecx, DWORD PTR [ebx]
	push	ecx
	mov	ecx, esi
	call	?ResizeRouteInfo@CvCityConnections@@IAEXI@Z ; CvCityConnections::ResizeRouteInfo

; 99   : 	for(uint ui = 0; ui < m_uiRouteInfosDimension * m_uiRouteInfosDimension; ui++)

	mov	ebx, DWORD PTR [ebx]
	mov	edx, ebx
	imul	edx, ebx
	xor	edi, edi
	test	edx, edx
	jbe	SHORT $LN4@Read
	npad	5
$LL6@Read:

; 100  : 	{
; 101  : 		kStream >> m_aRouteInfos[ui].m_cPassEval;

	mov	eax, DWORD PTR [esi+8]
	lea	ebx, DWORD PTR [edi+edi]
	lea	ecx, DWORD PTR [eax+ebx+1]
	push	ecx
	mov	ecx, ebp
	call	?Read@FDataStream@@IAEXAAD@Z		; FDataStream::Read
	mov	edx, DWORD PTR [esi+8]
	add	edx, ebx

; 102  : 		kStream >> m_aRouteInfos[ui].m_cRouteState;

	push	edx
	mov	ecx, ebp
	call	?Read@FDataStream@@IAEXAAD@Z		; FDataStream::Read
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, eax
	imul	ecx, eax
	inc	edi
	cmp	edi, ecx
	jb	SHORT $LL6@Read
$LN4@Read:

; 103  : 	}
; 104  : 
; 105  : 	// read in city ids
; 106  : 	int iNumCityIDs;
; 107  : 	kStream >> iNumCityIDs;

	lea	edx, DWORD PTR _iNumCityIDs$[esp+20]
	push	edx
	mov	ecx, ebp
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 108  : 	m_aiCityPlotIDs.clear();
; 109  : 	for(int i = 0; i < iNumCityIDs; i++)

	xor	edi, edi
	cmp	DWORD PTR _iNumCityIDs$[esp+20], edi
	mov	DWORD PTR [esi+16], 0
	jle	SHORT $LN1@Read
	add	esi, 12					; 0000000cH
	npad	6
$LL3@Read:

; 110  : 	{
; 111  : 		int iValue;
; 112  : 		kStream >> iValue;

	lea	eax, DWORD PTR _iValue$220709[esp+24]
	push	eax
	mov	ecx, ebp
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 113  : 		m_aiCityPlotIDs.push_back(iValue);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+268], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN29@Read
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,64,1,297,0>::GrowSize
$LN29@Read:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	test	eax, eax
	je	SHORT $LN32@Read
	mov	ecx, DWORD PTR _iValue$220709[esp+24]
	mov	DWORD PTR [eax], ecx
$LN32@Read:
	inc	DWORD PTR [esi+4]
	inc	edi
	cmp	edi, DWORD PTR _iNumCityIDs$[esp+20]
	jl	SHORT $LL3@Read
$LN1@Read:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 114  : 	}
; 115  : }

	add	esp, 8
	ret	4
?Read@CvCityConnections@@QAEXAAVFDataStream@@@Z ENDP	; CvCityConnections::Read
_TEXT	ENDS
PUBLIC	?UpdateCityPlotIDs@CvCityConnections@@QAEXXZ	; CvCityConnections::UpdateCityPlotIDs
EXTRN	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ:PROC	; CvPlayer::getCapitalCity
EXTRN	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::nextCity
EXTRN	?GetPlotIndex@CvPlot@@QBEHXZ:PROC		; CvPlot::GetPlotIndex
EXTRN	?plot@CvCity@@QBEPAVCvPlot@@XZ:PROC		; CvCity::plot
EXTRN	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::firstCity
; Function compile flags: /Ogtpy
;	COMDAT ?UpdateCityPlotIDs@CvCityConnections@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_ui$220736 = -8						; size = 4
_iLoop$ = -4						; size = 4
?UpdateCityPlotIDs@CvCityConnections@@QAEXXZ PROC	; CvCityConnections::UpdateCityPlotIDs, COMDAT
; _this$ = ecx

; 154  : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi

; 155  : 	ResetCityPlotIDs();

	xor	ebx, ebx
	push	edi
	mov	edi, ecx
	mov	DWORD PTR _this$[esp+28], edi
	mov	DWORD PTR [edi+16], ebx

; 156  : 	int iIndex = 0;
; 157  : 	int iLoop;
; 158  : 	CvCity* pLoopCity;
; 159  : 
; 160  : 	for(uint ui = 0; ui < MAX_CIV_PLAYERS; ui++)

	mov	DWORD PTR _ui$220736[esp+28], ebx
	xor	ebp, ebp
	npad	8
$LL11@UpdateCity:

; 161  : 	{
; 162  : 		PlayerTypes ePlayer = (PlayerTypes)ui;
; 163  : 		if(GET_PLAYER(ePlayer).isBarbarian())

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [eax+ebp]
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	test	al, al
	jne	$LN10@UpdateCity

; 164  : 		{
; 165  : 			continue;
; 166  : 		}
; 167  : 
; 168  : 		TeamTypes ePlayerTeam = GET_PLAYER(ePlayer).getTeam();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	eax, DWORD PTR [ecx+ebp+44]
	mov	esi, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	add	ecx, ebp
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN32@UpdateCity
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN33@UpdateCity
$LN32@UpdateCity:
	or	eax, -1
$LN33@UpdateCity:

; 169  : 		TeamTypes eMyPlayerTeam = m_pPlayer->getTeam();

	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+44]
	cmp	edx, 63					; 0000003fH
	ja	SHORT $LN41@UpdateCity
	mov	esi, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi+edx*4]
	jmp	SHORT $LN42@UpdateCity
$LN41@UpdateCity:
	or	edx, -1
$LN42@UpdateCity:

; 170  : 
; 171  : 		if(ePlayerTeam == eMyPlayerTeam)

	cmp	eax, edx
	jne	SHORT $LN7@UpdateCity

; 172  : 		{
; 173  : 			// player's city
; 174  : 			for(pLoopCity = GET_PLAYER(ePlayer).firstCity(&iLoop); pLoopCity != NULL; pLoopCity = GET_PLAYER(ePlayer).nextCity(&iLoop))

	push	ebx
	lea	eax, DWORD PTR _iLoop$[esp+32]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	cmp	eax, ebx
	je	$LN10@UpdateCity
	lea	esi, DWORD PTR [edi+12]
$LL6@UpdateCity:

; 175  : 			{
; 176  : 				CvAssertMsg(pLoopCity->plot(), "pLoopCity does not have a plot. What??");
; 177  : 				int iPlotIndex = pLoopCity->plot()->GetPlotIndex();

	mov	ecx, eax
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	ecx, eax
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex
	mov	edi, eax

; 178  : 				m_aiCityPlotIDs.push_back(iPlotIndex);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+268], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN50@UpdateCity
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,64,1,297,0>::GrowSize
$LN50@UpdateCity:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN53@UpdateCity
	mov	DWORD PTR [eax], edi
$LN53@UpdateCity:
	inc	DWORD PTR [esi+4]
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ebx
	lea	edx, DWORD PTR _iLoop$[esp+32]
	lea	ecx, DWORD PTR [eax+ebp]
	push	edx
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	cmp	eax, ebx
	jne	SHORT $LL6@UpdateCity

; 179  : 				iIndex++;
; 180  : 			}
; 181  : 		}
; 182  : 		else if(ShouldConnectToOtherPlayer(ePlayer))

	jmp	SHORT $LN72@UpdateCity
$LN7@UpdateCity:
	mov	eax, DWORD PTR _ui$220736[esp+28]
	push	eax
	mov	ecx, edi
	call	?ShouldConnectToOtherPlayer@CvCityConnections@@QAE_NW4PlayerTypes@@@Z ; CvCityConnections::ShouldConnectToOtherPlayer
	test	al, al
	je	SHORT $LN10@UpdateCity

; 183  : 		{
; 184  : 			CvCity* pOtherCapital = GET_PLAYER(ePlayer).getCapitalCity();

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, ebp
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity

; 185  : 			if(pOtherCapital)

	cmp	eax, ebx
	je	SHORT $LN10@UpdateCity

; 186  : 			{
; 187  : 				int iPlotIndex = pOtherCapital->plot()->GetPlotIndex();

	mov	ecx, eax
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	mov	ecx, eax
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex

; 188  : 				m_aiCityPlotIDs.push_back(iPlotIndex);

	mov	esi, DWORD PTR _this$[esp+28]
	add	esi, 12					; 0000000cH
	mov	edi, eax
	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+268], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN59@UpdateCity
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@H$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<int,64,1,297,0>::GrowSize
$LN59@UpdateCity:
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+edx*4]
	cmp	eax, ebx
	je	SHORT $LN62@UpdateCity
	mov	DWORD PTR [eax], edi
$LN62@UpdateCity:
	inc	DWORD PTR [esi+4]
$LN72@UpdateCity:
	mov	edi, DWORD PTR _this$[esp+28]
$LN10@UpdateCity:

; 156  : 	int iIndex = 0;
; 157  : 	int iLoop;
; 158  : 	CvCity* pLoopCity;
; 159  : 
; 160  : 	for(uint ui = 0; ui < MAX_CIV_PLAYERS; ui++)

	inc	DWORD PTR _ui$220736[esp+28]
	add	ebp, 63236				; 0000f704H
	cmp	ebp, 3983868				; 003cc9fcH
	jb	$LL11@UpdateCity
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 189  : 				iIndex++;
; 190  : 			}
; 191  : 		}
; 192  : 	}
; 193  : }

	add	esp, 12					; 0000000cH
	ret	0
?UpdateCityPlotIDs@CvCityConnections@@QAEXXZ ENDP	; CvCityConnections::UpdateCityPlotIDs
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAEIABW4BuildingTypes@@@Z ; FStaticVector<enum BuildingTypes,10,1,297,0>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAEIABW4BuildingTypes@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAEIABW4BuildingTypes@@@Z PROC ; FStaticVector<enum BuildingTypes,10,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+52], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum BuildingTypes,10,1,297,0>::GrowSize
$LN1@push_back@2:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN4@push_back@2
	mov	edx, DWORD PTR _element$[esp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN4@push_back@2:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@QAEIABW4BuildingTypes@@@Z ENDP ; FStaticVector<enum BuildingTypes,10,1,297,0>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAEIABUPlotRouteInfo@CvCityConnections@@@Z ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAEIABUPlotRouteInfo@CvCityConnections@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAEIABUPlotRouteInfo@CvCityConnections@@@Z PROC ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+812], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@3

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::GrowSize
$LN1@push_back@3:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back@3
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back@3:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@QAEIABUPlotRouteInfo@CvCityConnections@@@Z ENDP ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAEIABQAVCvCity@@@Z ; FStaticVector<CvCity *,64,1,297,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAEIABQAVCvCity@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAEIABQAVCvCity@@@Z PROC ; FStaticVector<CvCity *,64,1,297,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+268], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@4

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvCity *,64,1,297,0>::GrowSize
$LN1@push_back@4:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN4@push_back@4
	mov	edx, DWORD PTR _element$[esp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
$LN4@push_back@4:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAEIABQAVCvCity@@@Z ENDP ; FStaticVector<CvCity *,64,1,297,0>::push_back
_TEXT	ENDS
PUBLIC	?Init@CvCityConnections@@QAEXPAVCvPlayer@@@Z	; CvCityConnections::Init
EXTRN	?AllowsWaterRoutes@CvBuildingEntry@@QBE_NXZ:PROC ; CvBuildingEntry::AllowsWaterRoutes
EXTRN	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z:PROC ; CvBuildingXMLEntries::GetEntry
EXTRN	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ:PROC ; CvBuildingXMLEntries::GetNumBuildings
EXTRN	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ:PROC ; CvGlobals::GetGameBuildings
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcityconnections.cpp
;	COMDAT ?Init@CvCityConnections@@QAEXPAVCvPlayer@@@Z
_TEXT	SEGMENT
_pkBuildingEntries$ = -4				; size = 4
_pPlayer$ = 8						; size = 4
?Init@CvCityConnections@@QAEXPAVCvPlayer@@@Z PROC	; CvCityConnections::Init, COMDAT
; _this$ = ecx

; 47   : {

	push	ecx
	push	ebx
	push	ebp
	push	edi
	mov	edi, ecx

; 48   : 	CvBuildingXMLEntries* pkBuildingEntries = GC.GetGameBuildings();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	DWORD PTR _pkBuildingEntries$[esp+16], eax

; 49   : 	m_pPlayer = pPlayer;

	mov	eax, DWORD PTR _pPlayer$[esp+12]

; 50   : 
; 51   : 	m_uiRouteInfosDimension = 64;
; 52   : 	m_aRouteInfos = NULL;

	xor	ebx, ebx

; 53   : 	ResizeRouteInfo(m_uiRouteInfosDimension);

	push	64					; 00000040H
	mov	ecx, edi
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], 64			; 00000040H
	mov	DWORD PTR [edi+8], ebx
	call	?ResizeRouteInfo@CvCityConnections@@IAEXI@Z ; CvCityConnections::ResizeRouteInfo

; 54   : 
; 55   : 	m_aBuildingsAllowWaterRoutes.clear();
; 56   : #ifdef AUI_WARNING_FIXES
; 57   : 	for (uint i = 0; i < GC.GetGameBuildings()->GetNumBuildings(); i++)
; 58   : #else
; 59   : 	for(int i = 0; i < GC.GetGameBuildings()->GetNumBuildings(); i++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR [edi+288], ebx
	xor	ebp, ebp
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	test	eax, eax
	jle	SHORT $LN33@Init
	push	esi
	npad	3
$LL35@Init:

; 60   : #endif
; 61   : 	{
; 62   : 		const BuildingTypes eBuilding = static_cast<BuildingTypes>(i);
; 63   : 		CvBuildingEntry* pkBuildingInfo = pkBuildingEntries->GetEntry(eBuilding);

	mov	ecx, DWORD PTR _pkBuildingEntries$[esp+20]
	push	ebp
	call	?GetEntry@CvBuildingXMLEntries@@QAEPAVCvBuildingEntry@@H@Z ; CvBuildingXMLEntries::GetEntry

; 64   : 		if(pkBuildingInfo)

	cmp	eax, ebx
	je	SHORT $LN4@Init

; 65   : 		{
; 66   : 			if(pkBuildingInfo->AllowsWaterRoutes())

	mov	ecx, eax
	call	?AllowsWaterRoutes@CvBuildingEntry@@QBE_NXZ ; CvBuildingEntry::AllowsWaterRoutes
	test	al, al
	je	SHORT $LN4@Init

; 67   : 			{
; 68   : 				m_aBuildingsAllowWaterRoutes.push_back(eBuilding);

	mov	eax, DWORD PTR [edi+292]
	lea	esi, DWORD PTR [edi+284]
	mov	BYTE PTR [esi+52], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN16@Init
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@W4BuildingTypes@@$09$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<enum BuildingTypes,10,1,297,0>::GrowSize
$LN16@Init:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, ebx
	je	SHORT $LN19@Init
	mov	DWORD PTR [eax], ebp
$LN19@Init:
	inc	DWORD PTR [esi+4]
$LN4@Init:

; 54   : 
; 55   : 	m_aBuildingsAllowWaterRoutes.clear();
; 56   : #ifdef AUI_WARNING_FIXES
; 57   : 	for (uint i = 0; i < GC.GetGameBuildings()->GetNumBuildings(); i++)
; 58   : #else
; 59   : 	for(int i = 0; i < GC.GetGameBuildings()->GetNumBuildings(); i++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	ebp
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	ebp, eax
	jl	SHORT $LL35@Init
	pop	esi
$LN33@Init:

; 69   : 			}
; 70   : 		}
; 71   : 	}
; 72   : 
; 73   : 	m_aPlotRouteInfos.clear();

	mov	DWORD PTR [edi+344], ebx
	pop	edi
	pop	ebp
	pop	ebx

; 74   : }

	pop	ecx
	ret	4
?Init@CvCityConnections@@QAEXPAVCvPlayer@@@Z ENDP	; CvCityConnections::Init
_TEXT	ENDS
PUBLIC	?ConnectPlotRoute@CvCityConnections@@IAEXPAVCvPlot@@@Z ; CvCityConnections::ConnectPlotRoute
; Function compile flags: /Ogtpy
;	COMDAT ?ConnectPlotRoute@CvCityConnections@@IAEXPAVCvPlot@@@Z
_TEXT	SEGMENT
_info$221111 = -8					; size = 8
_iPlotIndex$ = 8					; size = 4
_pPlot$ = 8						; size = 4
?ConnectPlotRoute@CvCityConnections@@IAEXPAVCvPlot@@@Z PROC ; CvCityConnections::ConnectPlotRoute, COMDAT
; _this$ = ecx

; 620  : {

	sub	esp, 8
	push	ebp
	push	esi
	mov	ebp, ecx

; 621  : 	int iPlotIndex = pPlot->GetPlotIndex();

	mov	ecx, DWORD PTR _pPlot$[esp+12]
	push	edi
	call	?GetPlotIndex@CvPlot@@QBEHXZ		; CvPlot::GetPlotIndex

; 622  : 	uint uiTargetIndex = MAX_UNSIGNED_INT;
; 623  : 
; 624  : 	for(uint ui = 0; ui < m_aPlotRouteInfos.size(); ui++)

	mov	ecx, DWORD PTR [ebp+344]
	mov	esi, eax
	or	edi, -1
	xor	eax, eax
	mov	DWORD PTR _iPlotIndex$[esp+16], esi
	test	ecx, ecx
	jbe	SHORT $LN5@ConnectPlo

; 621  : 	int iPlotIndex = pPlot->GetPlotIndex();

	mov	edx, DWORD PTR [ebp+340]
	npad	4
$LL7@ConnectPlo:

; 625  : 	{
; 626  : 		if(m_aPlotRouteInfos[ui].m_iPlotIndex == iPlotIndex)

	cmp	DWORD PTR [edx], esi
	je	SHORT $LN36@ConnectPlo

; 629  : 			break;
; 630  : 		}
; 631  : 		else if(uiTargetIndex == MAX_UNSIGNED_INT && m_aPlotRouteInfos[ui].m_bPlotRouteState == NO_CONNECTION)

	cmp	edi, -1
	jne	SHORT $LN6@ConnectPlo
	cmp	BYTE PTR [edx+4], 0
	jne	SHORT $LN6@ConnectPlo

; 632  : 		{
; 633  : 			uiTargetIndex = ui;

	mov	edi, eax
$LN6@ConnectPlo:

; 622  : 	uint uiTargetIndex = MAX_UNSIGNED_INT;
; 623  : 
; 624  : 	for(uint ui = 0; ui < m_aPlotRouteInfos.size(); ui++)

	inc	eax
	add	edx, 8
	cmp	eax, ecx
	jb	SHORT $LL7@ConnectPlo

; 625  : 	{
; 626  : 		if(m_aPlotRouteInfos[ui].m_iPlotIndex == iPlotIndex)

	jmp	SHORT $LN5@ConnectPlo
$LN36@ConnectPlo:

; 627  : 		{
; 628  : 			uiTargetIndex = ui;

	mov	edi, eax
$LN5@ConnectPlo:

; 634  : 		}
; 635  : 	}
; 636  : 
; 637  : 	if(uiTargetIndex >= m_aPlotRouteInfos.size())

	cmp	edi, ecx
	jb	SHORT $LN1@ConnectPlo

; 638  : 	{
; 639  : 		uiTargetIndex = m_aPlotRouteInfos.size();
; 640  : 		PlotRouteInfo info;
; 641  : 		m_aPlotRouteInfos.push_back(info);

	mov	eax, DWORD PTR [ebp+348]
	lea	esi, DWORD PTR [ebp+340]
	push	ebx
	or	ebx, -1
	mov	edi, ecx
	mov	BYTE PTR _info$221111[esp+28], 0
	mov	BYTE PTR [esi+812], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN22@ConnectPlo
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UPlotRouteInfo@CvCityConnections@@$0GE@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvCityConnections::PlotRouteInfo,100,1,297,0>::GrowSize
$LN22@ConnectPlo:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN25@ConnectPlo
	mov	edx, DWORD PTR _info$221111[esp+28]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], edx
$LN25@ConnectPlo:
	inc	DWORD PTR [esi+4]

; 642  : 		m_aPlotRouteInfos[uiTargetIndex].m_bPlotRouteState = 0;

	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR _iPlotIndex$[esp+20]
	mov	BYTE PTR [eax+edi*8+4], 0
	pop	ebx
$LN1@ConnectPlo:

; 643  : 	}
; 644  : 
; 645  : 	m_aPlotRouteInfos[uiTargetIndex].m_iPlotIndex = iPlotIndex;

	mov	ecx, DWORD PTR [ebp+340]
	mov	DWORD PTR [ecx+edi*8], esi

; 646  : 	m_aPlotRouteInfos[uiTargetIndex].m_bPlotRouteState |= CONNECTION;

	mov	edx, DWORD PTR [ebp+340]
	or	BYTE PTR [edx+edi*8+4], 1
	lea	eax, DWORD PTR [edx+edi*8+4]
	pop	edi
	pop	esi
	pop	ebp

; 647  : }

	add	esp, 8
	ret	4
?ConnectPlotRoute@CvCityConnections@@IAEXPAVCvPlot@@@Z ENDP ; CvCityConnections::ConnectPlotRoute
_TEXT	ENDS
PUBLIC	__real@3fc00000
PUBLIC	__real@4f800000
PUBLIC	?UpdateRouteInfo@CvCityConnections@@QAEXXZ	; CvCityConnections::UpdateRouteInfo
EXTRN	?isCapital@CvCity@@QBE_NXZ:PROC			; CvCity::isCapital
EXTRN	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z:PROC	; CvAStar::GeneratePath
EXTRN	?GetWaterRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ:PROC ; CvGlobals::GetWaterRouteFinder
EXTRN	?IsBlockaded@CvCity@@QBE_NXZ:PROC		; CvCity::IsBlockaded
EXTRN	?getRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ:PROC ; CvGlobals::getRouteFinder
EXTRN	?GetNumActiveBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z:PROC ; CvCityBuildings::GetNumActiveBuilding
EXTRN	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ:PROC ; CvCity::GetCityBuildings
EXTRN	?SetRouteToCapitalConnected@CvCity@@QAEX_N@Z:PROC ; CvCity::SetRouteToCapitalConnected
EXTRN	?getBestRoute@CvPlayer@@QBE?AW4RouteTypes@@PAVCvPlot@@@Z:PROC ; CvPlayer::getBestRoute
EXTRN	__fltused:DWORD
;	COMDAT __real@3fc00000
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?UpdateRouteInfo@CvCityConnections@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UpdateRouteInfo@CvCityConnections@@QAEXXZ$0
__ehfuncinfo$?UpdateRouteInfo@CvCityConnections@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?UpdateRouteInfo@CvCityConnections@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcityconnections.cpp
xdata$x	ENDS
;	COMDAT ?UpdateRouteInfo@CvCityConnections@@QAEXXZ
_TEXT	SEGMENT
_bAnyRouteFound$220999 = -330				; size = 1
_bFirstCityHasHarbor$220986 = -330			; size = 1
_bAllowWaterRoutes$ = -329				; size = 1
tv1253 = -328						; size = 2
_bSecondCityHasHarbor$220987 = -328			; size = 1
_pSecondCity$220965 = -328				; size = 4
_pNode$221013 = -324					; size = 4
_pRouteInfo$220978 = -324				; size = 4
tv1251 = -320						; size = 4
_iPass$220957 = -320					; size = 4
_pFirstCity$220964 = -316				; size = 4
_uiFirstCityIndex$220967 = -312				; size = 4
_ui$220932 = -312					; size = 4
tv1249 = -308						; size = 4
_uiSecondCityIndex$220972 = -308			; size = 4
_eBestRouteType$ = -304					; size = 4
_pkLandRouteFinder$220966 = -300			; size = 4
tv1255 = -296						; size = 4
tv1247 = -296						; size = 8
_iFirstCityArrayIndex$220971 = -296			; size = 4
_iLoop$ = -288						; size = 4
_vpCities$ = -284					; size = 272
__$EHRec$ = -12						; size = 12
?UpdateRouteInfo@CvCityConnections@@QAEXXZ PROC		; CvCityConnections::UpdateRouteInfo, COMDAT
; _this$ = ecx

; 226  : {

	push	-1
	push	__ehhandler$?UpdateRouteInfo@CvCityConnections@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebx, ecx

; 227  : 	RouteTypes eBestRouteType = m_pPlayer->getBestRoute();

	mov	ecx, DWORD PTR [ebx]
	xor	ebp, ebp
	push	ebp
	call	?getBestRoute@CvPlayer@@QBE?AW4RouteTypes@@PAVCvPlot@@@Z ; CvPlayer::getBestRoute
	mov	DWORD PTR _eBestRouteType$[esp+348], eax

; 228  : 
; 229  : 	// build city list
; 230  : 	FStaticVector<CvCity*, SAFE_ESTIMATE_NUM_CITIES, true, c_eCiv5GameplayDLL, 0> vpCities;

	lea	eax, DWORD PTR _vpCities$[esp+360]
	mov	DWORD PTR _vpCities$[esp+352], ebp
	mov	DWORD PTR _vpCities$[esp+356], 64	; 00000040H
	mov	DWORD PTR _vpCities$[esp+348], eax

; 231  : 	CvCity* pLoopCity = NULL;
; 232  : 	int iLoop;
; 233  : 
; 234  : 	bool bAllowWaterRoutes = false;
; 235  : 
; 236  : 	// add all the cities we control and those that we want to connect to
; 237  : 	for(uint ui = 0; ui < MAX_CIV_PLAYERS; ui++)

	xor	esi, esi
	xor	ecx, ecx
	mov	DWORD PTR __$EHRec$[esp+356], ebp
	mov	BYTE PTR _bAllowWaterRoutes$[esp+348], 0
	mov	DWORD PTR _ui$220932[esp+348], esi
	mov	DWORD PTR tv1251[esp+348], ecx
	npad	5
$LL57@UpdateRout:

; 238  : 	{
; 239  : 		PlayerTypes ePlayer = (PlayerTypes)ui;
; 240  : 		if(GET_PLAYER(ePlayer).isBarbarian())

	mov	edx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, edx
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	test	al, al
	jne	$LN56@UpdateRout

; 241  : 		{
; 242  : 			continue;
; 243  : 		}
; 244  : 
; 245  : 		if(ePlayer == m_pPlayer->GetID())

	mov	ecx, DWORD PTR [ebx]
	cmp	esi, DWORD PTR [ecx+44]
	jne	$LN53@UpdateRout

; 246  : 		{
; 247  : 			// player's city
; 248  : 			for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	ebp
	lea	eax, DWORD PTR _iLoop$[esp+352]
	push	eax
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	edi, eax
	cmp	edi, ebp
	je	$LN56@UpdateRout
	npad	11
$LL273@UpdateRout:

; 249  : 			{
; 250  : 				vpCities.push_back(pLoopCity);

	mov	eax, DWORD PTR _vpCities$[esp+356]
	mov	BYTE PTR _vpCities$[esp+616], 0
	cmp	DWORD PTR _vpCities$[esp+352], eax
	jne	SHORT $LN75@UpdateRout
	push	eax
	lea	ecx, DWORD PTR _vpCities$[esp+352]
	call	?GrowSize@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvCity *,64,1,297,0>::GrowSize
$LN75@UpdateRout:
	mov	ecx, DWORD PTR _vpCities$[esp+348]
	mov	edx, DWORD PTR _vpCities$[esp+352]
	lea	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, ebp
	je	SHORT $LN78@UpdateRout
	mov	DWORD PTR [eax], edi
$LN78@UpdateRout:
	inc	DWORD PTR _vpCities$[esp+352]

; 251  : 				pLoopCity->SetRouteToCapitalConnected(false);

	push	ebp
	mov	ecx, edi
	call	?SetRouteToCapitalConnected@CvCity@@QAEX_N@Z ; CvCity::SetRouteToCapitalConnected

; 252  : 
; 253  : 				if(!bAllowWaterRoutes)

	cmp	BYTE PTR _bAllowWaterRoutes$[esp+348], 0
	jne	SHORT $LN51@UpdateRout

; 254  : 				{
; 255  : 					for(uint uiBuildingTypes = 0; uiBuildingTypes < m_aBuildingsAllowWaterRoutes.size(); uiBuildingTypes++)

	xor	esi, esi
	cmp	DWORD PTR [ebx+288], ebp
	jbe	SHORT $LN51@UpdateRout
	npad	6
$LL48@UpdateRout:
	mov	eax, DWORD PTR [ebx+284]

; 256  : 					{
; 257  : 						if(pLoopCity->GetCityBuildings()->GetNumActiveBuilding(m_aBuildingsAllowWaterRoutes[uiBuildingTypes]) > 0)

	mov	ecx, DWORD PTR [eax+esi*4]
	lea	eax, DWORD PTR [eax+esi*4]
	push	ecx
	mov	ecx, edi
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumActiveBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumActiveBuilding
	test	eax, eax
	jle	SHORT $LN47@UpdateRout

; 258  : 						{
; 259  : 							bAllowWaterRoutes = true;

	mov	BYTE PTR _bAllowWaterRoutes$[esp+348], 1
$LN47@UpdateRout:

; 254  : 				{
; 255  : 					for(uint uiBuildingTypes = 0; uiBuildingTypes < m_aBuildingsAllowWaterRoutes.size(); uiBuildingTypes++)

	inc	esi
	cmp	esi, DWORD PTR [ebx+288]
	jb	SHORT $LL48@UpdateRout
$LN51@UpdateRout:

; 246  : 		{
; 247  : 			// player's city
; 248  : 			for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	mov	ecx, DWORD PTR [ebx]
	push	ebp
	lea	edx, DWORD PTR _iLoop$[esp+352]
	push	edx
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	edi, eax
	cmp	edi, ebp
	jne	$LL273@UpdateRout

; 260  : 						}
; 261  : 					}
; 262  : 				}
; 263  : 			}
; 264  : 		}
; 265  : 		else if(ShouldConnectToOtherPlayer(ePlayer))

	jmp	SHORT $LN56@UpdateRout
$LN53@UpdateRout:
	push	esi
	mov	ecx, ebx
	call	?ShouldConnectToOtherPlayer@CvCityConnections@@QAE_NW4PlayerTypes@@@Z ; CvCityConnections::ShouldConnectToOtherPlayer
	test	al, al
	je	SHORT $LN56@UpdateRout

; 266  : 		{
; 267  : 			CvCity* pOtherCapital = GET_PLAYER(ePlayer).getCapitalCity();

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	mov	ecx, DWORD PTR tv1251[esp+348]
	add	ecx, eax
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	esi, eax

; 268  : 			if(pOtherCapital)

	cmp	esi, ebp
	je	SHORT $LN56@UpdateRout

; 269  : 			{
; 270  : 				vpCities.push_back(pOtherCapital);

	mov	eax, DWORD PTR _vpCities$[esp+356]
	mov	BYTE PTR _vpCities$[esp+616], 0
	cmp	DWORD PTR _vpCities$[esp+352], eax
	jne	SHORT $LN88@UpdateRout
	push	eax
	lea	ecx, DWORD PTR _vpCities$[esp+352]
	call	?GrowSize@?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@IAEXI@Z ; FStaticVector<CvCity *,64,1,297,0>::GrowSize
$LN88@UpdateRout:
	mov	edx, DWORD PTR _vpCities$[esp+348]
	mov	eax, DWORD PTR _vpCities$[esp+352]
	lea	eax, DWORD PTR [edx+eax*4]
	cmp	eax, ebp
	je	SHORT $LN91@UpdateRout
	mov	DWORD PTR [eax], esi
$LN91@UpdateRout:
	inc	DWORD PTR _vpCities$[esp+352]
$LN56@UpdateRout:

; 231  : 	CvCity* pLoopCity = NULL;
; 232  : 	int iLoop;
; 233  : 
; 234  : 	bool bAllowWaterRoutes = false;
; 235  : 
; 236  : 	// add all the cities we control and those that we want to connect to
; 237  : 	for(uint ui = 0; ui < MAX_CIV_PLAYERS; ui++)

	mov	ecx, DWORD PTR tv1251[esp+348]
	mov	esi, DWORD PTR _ui$220932[esp+348]
	add	ecx, 63236				; 0000f704H
	inc	esi
	mov	DWORD PTR _ui$220932[esp+348], esi
	mov	DWORD PTR tv1251[esp+348], ecx
	cmp	ecx, 3983868				; 003cc9fcH
	jb	$LL57@UpdateRout

; 271  : 			}
; 272  : 		}
; 273  : 	}
; 274  : 
; 275  : 	if(vpCities.size() > m_uiRouteInfosDimension)

	mov	eax, DWORD PTR [ebx+4]
	cmp	DWORD PTR _vpCities$[esp+352], eax
	jbe	SHORT $LN41@UpdateRout

; 276  : 	{
; 277  : 		ResizeRouteInfo((uint)((float)m_uiRouteInfosDimension * 1.5f));

	mov	DWORD PTR tv1255[esp+348], eax
	fild	DWORD PTR tv1255[esp+348]
	test	eax, eax
	jge	SHORT $LN280@UpdateRout
	fadd	DWORD PTR __real@4f800000
$LN280@UpdateRout:
	fmul	DWORD PTR __real@3fc00000
	fnstcw	WORD PTR tv1253[esp+348]
	movzx	eax, WORD PTR tv1253[esp+348]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv1249[esp+348], eax
	fldcw	WORD PTR tv1249[esp+348]
	fistp	QWORD PTR tv1247[esp+348]
	mov	ecx, DWORD PTR tv1247[esp+348]
	push	ecx
	mov	ecx, ebx
	fldcw	WORD PTR tv1253[esp+352]
	call	?ResizeRouteInfo@CvCityConnections@@IAEXI@Z ; CvCityConnections::ResizeRouteInfo
$LN41@UpdateRout:

; 278  : 	}
; 279  : 	ResetRouteInfo();

	mov	ecx, ebx
	call	?ResetRouteInfo@CvCityConnections@@QAEXXZ ; CvCityConnections::ResetRouteInfo

; 280  : 
; 281  : 	// if the player can't build any routes, then we don't need to check this
; 282  : 	if(eBestRouteType == NO_ROUTE && !bAllowWaterRoutes)

	or	eax, -1
	cmp	DWORD PTR _eBestRouteType$[esp+348], eax
	jne	SHORT $LN271@UpdateRout
	cmp	BYTE PTR _bAllowWaterRoutes$[esp+348], 0
	jne	SHORT $LN271@UpdateRout

; 283  : 	{
; 284  : 		return;

	mov	DWORD PTR __$EHRec$[esp+356], eax
	mov	eax, DWORD PTR _vpCities$[esp+348]
	lea	edx, DWORD PTR _vpCities$[esp+360]
	cmp	eax, edx
	jmp	$LN281@UpdateRout
$LN271@UpdateRout:

; 285  : 	}
; 286  : 
; 287  : 	// pass 0 = can cities connect via water routes
; 288  : 	// pass 1 = can cities connect via land and water routes
; 289  : #ifdef AUI_WARNING_FIXES
; 290  : 	for (char iPass = 0; iPass < 2; iPass++)
; 291  : #else
; 292  : 	for(int iPass = 0; iPass < 2; iPass++)

	xor	eax, eax
	mov	DWORD PTR _iPass$220957[esp+348], eax
	jmp	SHORT $LN39@UpdateRout
	npad	4
$LL272@UpdateRout:
	mov	eax, DWORD PTR _iPass$220957[esp+348]
$LN39@UpdateRout:

; 293  : #endif
; 294  : 	{
; 295  : 		if(iPass == 0 && !bAllowWaterRoutes)  // if in the first pass, we can't embark, skip

	test	eax, eax
	jne	SHORT $LN36@UpdateRout
	cmp	BYTE PTR _bAllowWaterRoutes$[esp+348], al

; 296  : 		{
; 297  : 			continue;
; 298  : 		}
; 299  : 		else if(iPass == 1 && eBestRouteType == NO_ROUTE)  // if in the second pass, we can't build a road, skip

	jmp	SHORT $LN282@UpdateRout
$LN36@UpdateRout:
	cmp	eax, 1
	jne	SHORT $LN275@UpdateRout
	cmp	DWORD PTR _eBestRouteType$[esp+348], -1
$LN282@UpdateRout:
	je	$LN38@UpdateRout
$LN275@UpdateRout:

; 300  : 		{
; 301  : 			continue;
; 302  : 		}
; 303  : 
; 304  : 		CvCity* pFirstCity = NULL;
; 305  : 		CvCity* pSecondCity = NULL;
; 306  : 
; 307  : 		CvAStar* pkLandRouteFinder;
; 308  : 		pkLandRouteFinder = &GC.getRouteFinder();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ ; CvGlobals::getRouteFinder

; 309  : 
; 310  : 		for(uint uiFirstCityIndex = 0; uiFirstCityIndex < vpCities.size(); uiFirstCityIndex++)

	xor	esi, esi
	mov	DWORD PTR _pkLandRouteFinder$220966[esp+348], eax
	mov	DWORD PTR _uiFirstCityIndex$220967[esp+348], esi
	cmp	DWORD PTR _vpCities$[esp+352], esi
	jbe	$LN38@UpdateRout
	npad	4
$LL277@UpdateRout:

; 311  : 		{
; 312  : 			pFirstCity = vpCities[uiFirstCityIndex];

	mov	eax, DWORD PTR _vpCities$[esp+348]
	mov	eax, DWORD PTR [eax+esi*4]

; 313  : 			int iFirstCityArrayIndex = GetIndexFromCity(pFirstCity);

	push	eax
	mov	ecx, ebx
	mov	DWORD PTR _pFirstCity$220964[esp+352], eax
	call	?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z ; CvCityConnections::GetIndexFromCity

; 314  : 
; 315  : 			for(uint uiSecondCityIndex = 0; uiSecondCityIndex < vpCities.size(); uiSecondCityIndex++)

	mov	ecx, DWORD PTR _vpCities$[esp+352]
	mov	edi, eax
	xor	eax, eax
	mov	DWORD PTR _iFirstCityArrayIndex$220971[esp+348], edi
	mov	DWORD PTR _uiSecondCityIndex$220972[esp+348], eax
	test	ecx, ecx
	jbe	$LN32@UpdateRout
	jmp	SHORT $LN30@UpdateRout
	npad	3
$LL274@UpdateRout:
	mov	edi, DWORD PTR _iFirstCityArrayIndex$220971[esp+348]
$LN30@UpdateRout:

; 316  : 			{
; 317  : 				// same city! ignore
; 318  : 				if(uiSecondCityIndex == uiFirstCityIndex)

	cmp	eax, esi
	je	$LN29@UpdateRout

; 319  : 				{
; 320  : 					continue;
; 321  : 				}
; 322  : 				pSecondCity = vpCities[uiSecondCityIndex];

	mov	ecx, DWORD PTR _vpCities$[esp+348]
	mov	ebp, DWORD PTR [ecx+eax*4]

; 323  : 				int iSecondCityArrayIndex = GetIndexFromCity(pSecondCity);

	push	ebp
	mov	ecx, ebx
	mov	DWORD PTR _pSecondCity$220965[esp+352], ebp
	call	?GetIndexFromCity@CvCityConnections@@QAEIPAVCvCity@@@Z ; CvCityConnections::GetIndexFromCity

; 324  : 
; 325  : 				RouteInfo* pRouteInfo = GetRouteInfo(iFirstCityArrayIndex, iSecondCityArrayIndex);

	mov	ecx, DWORD PTR [ebx+4]
	cmp	edi, ecx
	jae	SHORT $LN119@UpdateRout
	cmp	eax, ecx
	jae	SHORT $LN119@UpdateRout
	mov	esi, DWORD PTR [ebx+8]
	mov	edx, ecx
	imul	edx, edi
	add	edx, eax
	lea	esi, DWORD PTR [esi+edx*2]
	jmp	SHORT $LN283@UpdateRout
$LN119@UpdateRout:
	xor	esi, esi
$LN283@UpdateRout:
	mov	DWORD PTR _pRouteInfo$220978[esp+348], esi

; 326  : 				RouteInfo* pInverseRouteInfo = GetRouteInfo(iSecondCityArrayIndex, iFirstCityArrayIndex);

	cmp	eax, ecx
	jae	SHORT $LN123@UpdateRout
	cmp	edi, ecx
	jae	SHORT $LN123@UpdateRout
	imul	ecx, eax
	mov	eax, DWORD PTR [ebx+8]
	add	ecx, edi
	lea	eax, DWORD PTR [eax+ecx*2]
	jmp	SHORT $LN125@UpdateRout
$LN123@UpdateRout:
	xor	eax, eax
$LN125@UpdateRout:

; 327  : 
; 328  : 				// bail if either are null
; 329  : 				if(!pRouteInfo || !pInverseRouteInfo)

	test	esi, esi
	je	$LN29@UpdateRout
	test	eax, eax
	je	$LN29@UpdateRout

; 330  : 				{
; 331  : 					continue;
; 332  : 				}
; 333  : 
; 334  : 				// if the route has already been evaluated, copy the data
; 335  : 				if(pInverseRouteInfo->m_cPassEval > iPass)

	mov	dl, BYTE PTR [eax+1]
	mov	ecx, DWORD PTR _iPass$220957[esp+348]
	movsx	edi, dl
	cmp	edi, ecx
	jle	SHORT $LN24@UpdateRout

; 336  : 				{
; 337  : 					pRouteInfo->m_cPassEval = pInverseRouteInfo->m_cPassEval;

	mov	BYTE PTR [esi+1], dl

; 338  : 					pRouteInfo->m_cRouteState = pInverseRouteInfo->m_cRouteState;

	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [esi], cl

; 339  : 					continue;

	jmp	$LN29@UpdateRout
$LN24@UpdateRout:

; 340  : 				}
; 341  : 
; 342  : 				// this path already has an existing route (usually water)
; 343  : 				//if(pRouteInfo->m_cRouteState & (HAS_ANY_ROUTE | HAS_BEST_ROUTE | HAS_WATER_ROUTE))
; 344  : 				//{
; 345  : 				//	continue;
; 346  : 				//}
; 347  : 
; 348  : 				pRouteInfo->m_cPassEval = iPass + 1;

	mov	dl, cl
	inc	dl
	mov	BYTE PTR [esi+1], dl

; 349  : 
; 350  : 				if(iPass == 0)  // check water route

	test	ecx, ecx
	jne	$LN23@UpdateRout

; 351  : 				{
; 352  : 					// if either city is blockaded, don't consider a water connection
; 353  : 					if(pFirstCity->IsBlockaded() || pSecondCity->IsBlockaded())

	mov	ecx, DWORD PTR _pFirstCity$220964[esp+348]
	call	?IsBlockaded@CvCity@@QBE_NXZ		; CvCity::IsBlockaded
	test	al, al
	jne	$LN29@UpdateRout
	mov	ecx, ebp
	call	?IsBlockaded@CvCity@@QBE_NXZ		; CvCity::IsBlockaded
	test	al, al
	jne	$LN29@UpdateRout

; 354  : 					{
; 355  : 						continue;
; 356  : 					}
; 357  : 
; 358  : 					bool bFirstCityHasHarbor = false;
; 359  : 					bool bSecondCityHasHarbor = false;
; 360  : 
; 361  : 					// Loop through adding the available buildings
; 362  : 					for(int i = 0; i < (int)m_aBuildingsAllowWaterRoutes.size(); i++)

	xor	edi, edi
	cmp	DWORD PTR [ebx+288], edi
	mov	BYTE PTR _bFirstCityHasHarbor$220986[esp+348], al
	mov	BYTE PTR _bSecondCityHasHarbor$220987[esp+348], al
	jle	$LN29@UpdateRout
$LL20@UpdateRout:
	mov	eax, DWORD PTR [ebx+284]

; 363  : 					{
; 364  : 						if(pFirstCity->GetCityBuildings()->GetNumActiveBuilding(m_aBuildingsAllowWaterRoutes[i]) > 0)

	mov	ecx, DWORD PTR _pFirstCity$220964[esp+348]
	lea	esi, DWORD PTR [edi*4]
	add	eax, esi
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumActiveBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumActiveBuilding
	test	eax, eax
	jle	SHORT $LN17@UpdateRout

; 365  : 						{
; 366  : 							bFirstCityHasHarbor = true;

	mov	BYTE PTR _bFirstCityHasHarbor$220986[esp+348], 1
$LN17@UpdateRout:

; 354  : 					{
; 355  : 						continue;
; 356  : 					}
; 357  : 
; 358  : 					bool bFirstCityHasHarbor = false;
; 359  : 					bool bSecondCityHasHarbor = false;
; 360  : 
; 361  : 					// Loop through adding the available buildings
; 362  : 					for(int i = 0; i < (int)m_aBuildingsAllowWaterRoutes.size(); i++)

	mov	eax, DWORD PTR [ebx+284]

; 367  : 						}
; 368  : 
; 369  : 						if(pSecondCity->GetCityBuildings()->GetNumActiveBuilding(m_aBuildingsAllowWaterRoutes[i]) > 0)

	mov	ecx, DWORD PTR [eax+esi]
	add	eax, esi
	push	ecx
	mov	ecx, ebp
	call	?GetCityBuildings@CvCity@@QBEPAVCvCityBuildings@@XZ ; CvCity::GetCityBuildings
	mov	ecx, eax
	call	?GetNumActiveBuilding@CvCityBuildings@@QBEHW4BuildingTypes@@@Z ; CvCityBuildings::GetNumActiveBuilding
	test	eax, eax
	jle	SHORT $LN19@UpdateRout

; 370  : 						{
; 371  : 							bSecondCityHasHarbor = true;

	mov	BYTE PTR _bSecondCityHasHarbor$220987[esp+348], 1
$LN19@UpdateRout:

; 354  : 					{
; 355  : 						continue;
; 356  : 					}
; 357  : 
; 358  : 					bool bFirstCityHasHarbor = false;
; 359  : 					bool bSecondCityHasHarbor = false;
; 360  : 
; 361  : 					// Loop through adding the available buildings
; 362  : 					for(int i = 0; i < (int)m_aBuildingsAllowWaterRoutes.size(); i++)

	inc	edi
	cmp	edi, DWORD PTR [ebx+288]
	jl	SHORT $LL20@UpdateRout

; 372  : 						}
; 373  : 					}
; 374  : 
; 375  : 					if(bFirstCityHasHarbor && bSecondCityHasHarbor)

	cmp	BYTE PTR _bFirstCityHasHarbor$220986[esp+348], 0
	je	$LN29@UpdateRout
	cmp	BYTE PTR _bSecondCityHasHarbor$220987[esp+348], 0
	je	$LN29@UpdateRout

; 376  : 					{
; 377  : 						if(GC.GetWaterRouteFinder().GeneratePath(pFirstCity->getX(), pFirstCity->getY(), pSecondCity->getX(), pSecondCity->getY(), m_pPlayer->GetID(), true))

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [ebp+108]
	mov	edx, DWORD PTR [ebp+96]
	mov	edi, DWORD PTR _pFirstCity$220964[esp+348]
	mov	esi, DWORD PTR [edi+108]
	mov	edi, DWORD PTR [edi+96]
	push	1
	push	eax
	push	ecx
	push	edx
	push	esi
	push	edi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetWaterRouteFinder@CvGlobals@@QAEAAVCvAStar@@XZ ; CvGlobals::GetWaterRouteFinder
	mov	ecx, eax
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	test	al, al
	je	$LN29@UpdateRout

; 378  : 						{
; 379  : 							pRouteInfo->m_cRouteState |= HAS_ANY_ROUTE | HAS_WATER_ROUTE;

	mov	eax, DWORD PTR _pRouteInfo$220978[esp+348]
	or	BYTE PTR [eax], 3

; 380  : 						}
; 381  : 					}
; 382  : 				}

	jmp	$LN29@UpdateRout
$LN23@UpdateRout:

; 383  : 				else if(iPass == 1)  // check land route

	cmp	ecx, 1
	jne	$LN29@UpdateRout

; 384  : 				{
; 385  : 					bool bAnyRouteFound = false;
; 386  : 					bool bBestRouteFound = false;
; 387  : 
; 388  : 					// assuming that there are fewer than 256 players
; 389  : 					int iRouteValue = eBestRouteType + 1;

	mov	eax, DWORD PTR _eBestRouteType$[esp+348]

; 390  : 					int iPathfinderFlags = (iRouteValue << 8);
; 391  : 
; 392  : 					if(pkLandRouteFinder->GeneratePath(pFirstCity->getX(), pFirstCity->getY(), pSecondCity->getX(), pSecondCity->getY(), iPathfinderFlags | m_pPlayer->GetID(), true))

	mov	ecx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ecx+44]
	mov	esi, DWORD PTR _pSecondCity$220965[esp+348]
	mov	edx, DWORD PTR [esi+108]
	mov	esi, DWORD PTR [esi+96]
	mov	ebp, DWORD PTR _pFirstCity$220964[esp+348]
	mov	edi, DWORD PTR [ebp+108]
	mov	ebp, DWORD PTR [ebp+96]
	inc	eax
	push	1
	shl	eax, 8
	or	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _pkLandRouteFinder$220966[esp+356]
	push	edx
	push	esi
	push	edi
	push	ebp
	mov	BYTE PTR _bAnyRouteFound$220999[esp+372], 0
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	test	al, al
	je	SHORT $LN266@UpdateRout

; 401  : 						{
; 402  : 							bAnyRouteFound = true;
; 403  : 						}
; 404  : 					}
; 405  : 
; 406  : 					if(bBestRouteFound)
; 407  : 					{
; 408  : 						pRouteInfo->m_cRouteState |= HAS_BEST_ROUTE | HAS_ANY_ROUTE;

	mov	eax, DWORD PTR _pRouteInfo$220978[esp+348]
	or	BYTE PTR [eax], 5
	mov	BYTE PTR _bAnyRouteFound$220999[esp+348], 1
	jmp	SHORT $LN6@UpdateRout
$LN266@UpdateRout:

; 393  : 					{
; 394  : 						bAnyRouteFound = true;
; 395  : 						bBestRouteFound = true;
; 396  : 					}
; 397  : 
; 398  : 					if(!bBestRouteFound)
; 399  : 					{
; 400  : 						if(pkLandRouteFinder->GeneratePath(pFirstCity->getX(), pFirstCity->getY(), pSecondCity->getX(), pSecondCity->getY(), MOVE_ANY_ROUTE | m_pPlayer->GetID(), true))

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [edx+44]
	mov	edx, DWORD PTR _pSecondCity$220965[esp+348]
	mov	ecx, DWORD PTR [edx+108]
	mov	edx, DWORD PTR [edx+96]
	mov	edi, DWORD PTR _pFirstCity$220964[esp+348]
	mov	esi, DWORD PTR [edi+108]
	mov	edi, DWORD PTR [edi+96]
	push	1
	or	eax, -2147483648			; 80000000H
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _pkLandRouteFinder$220966[esp+360]
	push	edx
	push	esi
	push	edi
	call	?GeneratePath@CvAStar@@QAE_NHHHHH_N@Z	; CvAStar::GeneratePath
	test	al, al
	je	SHORT $LN6@UpdateRout

; 409  : 					}
; 410  : 					else if(bAnyRouteFound)
; 411  : 					{
; 412  : 						pRouteInfo->m_cRouteState |= HAS_ANY_ROUTE;

	mov	eax, DWORD PTR _pRouteInfo$220978[esp+348]
	or	BYTE PTR [eax], 1
	mov	BYTE PTR _bAnyRouteFound$220999[esp+348], 1
$LN6@UpdateRout:

; 413  : 					}
; 414  : 
; 415  : 					// walk through the nodes for plot route info
; 416  : 					if(pFirstCity->isCapital() || pSecondCity->isCapital())

	mov	ecx, DWORD PTR _pFirstCity$220964[esp+348]
	call	?isCapital@CvCity@@QBE_NXZ		; CvCity::isCapital
	test	al, al
	jne	SHORT $LN4@UpdateRout
	mov	ecx, DWORD PTR _pSecondCity$220965[esp+348]
	call	?isCapital@CvCity@@QBE_NXZ		; CvCity::isCapital
	test	al, al
	je	$LN29@UpdateRout
$LN4@UpdateRout:

; 417  : 					{
; 418  : 						if(bAnyRouteFound)

	cmp	BYTE PTR _bAnyRouteFound$220999[esp+348], 0
	je	$LN29@UpdateRout

; 419  : 						{
; 420  : 							CvPlot* pPlot = NULL;
; 421  : 							CvAStarNode* pNode = pkLandRouteFinder->GetLastNode();

	mov	eax, DWORD PTR _pkLandRouteFinder$220966[esp+348]
	mov	esi, DWORD PTR [eax+96]
	mov	DWORD PTR _pNode$221013[esp+348], esi

; 422  : 							while(pNode)

	test	esi, esi
	je	$LN1@UpdateRout
$LL2@UpdateRout:

; 423  : 							{
; 424  : 								pPlot = GC.getMap().plot(pNode->m_iX, pNode->m_iY);

	movsx	eax, WORD PTR [esi+80]
	movsx	ebp, WORD PTR [esi+82]
	cmp	eax, -2147483647			; 80000001H
	je	$LN197@UpdateRout
	cmp	ebp, -2147483647			; 80000001H
	je	$LN197@UpdateRout
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	dl, BYTE PTR [ecx+4056]
	mov	ecx, DWORD PTR [ecx+4020]
	test	dl, dl
	je	SHORT $LN207@UpdateRout
	test	eax, eax
	jge	SHORT $LN209@UpdateRout
	cdq
	idiv	ecx
	mov	esi, edx
	add	esi, ecx
	jmp	SHORT $LN211@UpdateRout
$LN209@UpdateRout:
	cmp	eax, ecx
	jl	SHORT $LN207@UpdateRout
	cdq
	idiv	ecx
	mov	esi, edx
	jmp	SHORT $LN211@UpdateRout
$LN207@UpdateRout:
	mov	esi, eax
$LN211@UpdateRout:
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	al, BYTE PTR [edx+4057]
	mov	edi, DWORD PTR [edx+4024]
	test	al, al
	je	SHORT $LN217@UpdateRout
	test	ebp, ebp
	jge	SHORT $LN219@UpdateRout
	mov	eax, ebp
	cdq
	idiv	edi
	add	edx, edi
	jmp	SHORT $LN221@UpdateRout
$LN219@UpdateRout:
	cmp	ebp, edi
	jl	SHORT $LN217@UpdateRout
	mov	eax, ebp
	cdq
	idiv	edi
	jmp	SHORT $LN221@UpdateRout
$LN217@UpdateRout:
	mov	edx, ebp
$LN221@UpdateRout:
	test	esi, esi
	jl	SHORT $LN201@UpdateRout
	cmp	esi, ecx
	jge	SHORT $LN201@UpdateRout
	test	edx, edx
	jl	SHORT $LN201@UpdateRout
	cmp	edx, edi
	jge	SHORT $LN201@UpdateRout
	imul	ecx, edx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	add	ecx, esi
	mov	esi, DWORD PTR _pNode$221013[esp+348]
	imul	ecx, 484				; 000001e4H
	add	ecx, DWORD PTR [edx+4068]
	jmp	SHORT $LN199@UpdateRout
$LN201@UpdateRout:
	mov	esi, DWORD PTR _pNode$221013[esp+348]
$LN197@UpdateRout:
	xor	ecx, ecx
$LN199@UpdateRout:

; 425  : 								ConnectPlotRoute(pPlot);

	push	ecx
	mov	ecx, ebx
	call	?ConnectPlotRoute@CvCityConnections@@IAEXPAVCvPlot@@@Z ; CvCityConnections::ConnectPlotRoute

; 426  : 								pNode = pNode->m_pParent;

	mov	esi, DWORD PTR [esi+24]
	mov	DWORD PTR _pNode$221013[esp+348], esi
	test	esi, esi
	jne	$LL2@UpdateRout
$LN1@UpdateRout:

; 427  : 							}
; 428  : 
; 429  : 							pFirstCity->SetRouteToCapitalConnected(true);

	mov	ecx, DWORD PTR _pFirstCity$220964[esp+348]
	push	1
	call	?SetRouteToCapitalConnected@CvCity@@QAEX_N@Z ; CvCity::SetRouteToCapitalConnected

; 430  : 							pSecondCity->SetRouteToCapitalConnected(true);

	mov	ecx, DWORD PTR _pSecondCity$220965[esp+348]
	push	1
	call	?SetRouteToCapitalConnected@CvCity@@QAEX_N@Z ; CvCity::SetRouteToCapitalConnected
$LN29@UpdateRout:
	mov	eax, DWORD PTR _uiSecondCityIndex$220972[esp+348]
	mov	ecx, DWORD PTR _vpCities$[esp+352]
	mov	esi, DWORD PTR _uiFirstCityIndex$220967[esp+348]
	inc	eax
	mov	DWORD PTR _uiSecondCityIndex$220972[esp+348], eax
	cmp	eax, ecx
	jb	$LL274@UpdateRout
$LN32@UpdateRout:

; 309  : 
; 310  : 		for(uint uiFirstCityIndex = 0; uiFirstCityIndex < vpCities.size(); uiFirstCityIndex++)

	inc	esi
	mov	DWORD PTR _uiFirstCityIndex$220967[esp+348], esi
	cmp	esi, ecx
	jb	$LL277@UpdateRout
$LN38@UpdateRout:

; 285  : 	}
; 286  : 
; 287  : 	// pass 0 = can cities connect via water routes
; 288  : 	// pass 1 = can cities connect via land and water routes
; 289  : #ifdef AUI_WARNING_FIXES
; 290  : 	for (char iPass = 0; iPass < 2; iPass++)
; 291  : #else
; 292  : 	for(int iPass = 0; iPass < 2; iPass++)

	mov	eax, DWORD PTR _iPass$220957[esp+348]
	inc	eax
	cmp	eax, 2
	mov	DWORD PTR _iPass$220957[esp+348], eax
	jl	$LL272@UpdateRout

; 431  : 						}
; 432  : 					}
; 433  : 				}
; 434  : 			}
; 435  : 		}
; 436  : 	}
; 437  : }

	mov	eax, DWORD PTR _vpCities$[esp+348]
	lea	ecx, DWORD PTR _vpCities$[esp+360]
	mov	DWORD PTR __$EHRec$[esp+356], -1
	cmp	eax, ecx
$LN281@UpdateRout:
	je	SHORT $LN237@UpdateRout
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN237@UpdateRout:
	mov	ecx, DWORD PTR __$EHRec$[esp+348]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 332				; 0000014cH
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UpdateRouteInfo@CvCityConnections@@QAEXXZ$0:
	lea	ecx, DWORD PTR _vpCities$[ebp]
	jmp	??1?$FStaticVector@PAVCvCity@@$0EA@$00$0BCJ@$0A@@@QAE@XZ ; FStaticVector<CvCity *,64,1,297,0>::~FStaticVector<CvCity *,64,1,297,0>
__ehhandler$?UpdateRouteInfo@CvCityConnections@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?UpdateRouteInfo@CvCityConnections@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?UpdateRouteInfo@CvCityConnections@@QAEXXZ ENDP		; CvCityConnections::UpdateRouteInfo
PUBLIC	?Update@CvCityConnections@@QAEXXZ		; CvCityConnections::Update
; Function compile flags: /Ogtpy
;	COMDAT ?Update@CvCityConnections@@QAEXXZ
_TEXT	SEGMENT
?Update@CvCityConnections@@QAEXXZ PROC			; CvCityConnections::Update, COMDAT
; _this$ = ecx

; 140  : {

	push	esi
	mov	esi, ecx

; 141  : 	if(m_pPlayer->isBarbarian())

	mov	ecx, DWORD PTR [esi]
	call	?isBarbarian@CvPlayer@@QBE_NXZ		; CvPlayer::isBarbarian
	test	al, al
	jne	SHORT $LN2@Update

; 142  : 	{
; 143  : 		return;
; 144  : 	}
; 145  : 
; 146  : 	UpdatePlotRouteStates();

	mov	ecx, esi
	call	?UpdatePlotRouteStates@CvCityConnections@@IAEXXZ ; CvCityConnections::UpdatePlotRouteStates

; 147  : 	UpdateCityPlotIDs();

	mov	ecx, esi
	call	?UpdateCityPlotIDs@CvCityConnections@@QAEXXZ ; CvCityConnections::UpdateCityPlotIDs

; 148  : 	UpdateRouteInfo();

	mov	ecx, esi
	call	?UpdateRouteInfo@CvCityConnections@@QAEXXZ ; CvCityConnections::UpdateRouteInfo

; 149  : 	BroadcastPlotRouteStateChanges();

	mov	ecx, esi
	pop	esi
	jmp	?BroadcastPlotRouteStateChanges@CvCityConnections@@IAEXXZ ; CvCityConnections::BroadcastPlotRouteStateChanges
$LN2@Update:
	pop	esi

; 150  : }

	ret	0
?Update@CvCityConnections@@QAEXXZ ENDP			; CvCityConnections::Update
_TEXT	ENDS
END
