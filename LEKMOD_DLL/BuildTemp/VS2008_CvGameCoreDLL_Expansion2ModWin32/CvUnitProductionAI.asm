; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	s:\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvUnitProductionAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG217990 DB	'LOAD ERROR: Unit Type not found', 00H
$SG218074 DB	'%03d, ', 00H
	ORG $+1
$SG218078 DB	', ', 00H
	ORG $+1
$SG218079 DB	', ', 00H
	ORG $+1
$SG218087 DB	'Unknown Unit', 00H
	ORG $+3
$SG218090 DB	'Unit, %s, %d', 00H
	ORG $+3
$SG218094 DB	'Special request for unit of type: %s, %s, %d', 00H
CONST	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax*8]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@XZ ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@XZ PROC ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@XZ ENDP ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@ DB 's:\lekmod_d'
	DB	'll\fireplace\include\fireworks\FFastVector.h', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 90					; 0000005aH
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 90			; 0000005aH
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@ABU01@@Z ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@H$0FK@$00@@QBE_NABU01@@Z ; CvWeightedVector<int,90,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??MWeightedElement@?$CvWeightedVector@H$0FK@$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@H$0FK@$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<int,90,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@H$0FK@$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<int,90,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\utility
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z ; std::_Dist_type<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\xutility
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::swap<CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\utility
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::swap<CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::swap<CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap
	npad	1
$LL3@Push_heap:
	cmp	DWORD PTR [esi+eax*8+4], ebx
	jle	SHORT $LN1@Push_heap

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	edx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [esi+ecx*8+4], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap
$LN1@Push_heap:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	pop	edi
	mov	DWORD PTR [esi+ecx*8+4], ebx
	mov	DWORD PTR [esi+ecx*8], eax
	pop	esi
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Iter_random<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw
	push	esi
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw
	pop	esi
$LN1@Copy_backw:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	?StringData@FStringAData@FStringA@@QAEPADXZ	; FStringA::FStringAData::StringData
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\fstringa.inl
;	COMDAT ?StringData@FStringAData@FStringA@@QAEPADXZ
_TEXT	SEGMENT
?StringData@FStringAData@FStringA@@QAEPADXZ PROC	; FStringA::FStringAData::StringData, COMDAT
; _this$ = ecx

; 1067 : 	return ( ( LPSTR )( this + 1 ) );

	lea	eax, DWORD PTR [ecx+12]

; 1068 : }

	ret	0
?StringData@FStringAData@FStringA@@QAEPADXZ ENDP	; FStringA::FStringAData::StringData
_TEXT	ENDS
PUBLIC	?GetData@FStringA@@IBEPAUFStringAData@1@XZ	; FStringA::GetData
; Function compile flags: /Ogtpy
;	COMDAT ?GetData@FStringA@@IBEPAUFStringAData@1@XZ
_TEXT	SEGMENT
?GetData@FStringA@@IBEPAUFStringAData@1@XZ PROC		; FStringA::GetData, COMDAT
; _this$ = ecx

; 1077 : 	assert( m_pszString != NULL );
; 1078 : 
; 1079 : 	return ( ( ( FStringAData* )m_pszString ) - 1 );

	mov	eax, DWORD PTR [ecx]
	sub	eax, 12					; 0000000cH

; 1080 : }

	ret	0
?GetData@FStringA@@IBEPAUFStringAData@1@XZ ENDP		; FStringA::GetData
_TEXT	ENDS
PUBLIC	?Init@FStringA@@IAEXXZ				; FStringA::Init
EXTRN	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ:PROC ; FStringA_GetStringInitData
; Function compile flags: /Ogtpy
;	COMDAT ?Init@FStringA@@IAEXXZ
_TEXT	SEGMENT
?Init@FStringA@@IAEXXZ PROC				; FStringA::Init, COMDAT
; _this$ = ecx

; 1084 : {

	push	esi
	mov	esi, ecx

; 1085 : #ifdef		_NDS
; 1086 : 	static int strEmpty[] = { FIXED, 0 };	// Empty string
; 1087 : 
; 1088 : 	m_pszString = (LPSTR)&strEmpty[1];
; 1089 : #else	//	_NDS
; 1090 : 	m_pszString = FStringA_GetStringInitData()->StringData();

	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	add	eax, 12					; 0000000cH
	mov	DWORD PTR [esi], eax
	pop	esi

; 1091 : #endif	//	_NDS
; 1092 : }

	ret	0
?Init@FStringA@@IAEXXZ ENDP				; FStringA::Init
_TEXT	ENDS
PUBLIC	?Release@FStringA@@IAEXPAUFStringAData@1@@Z	; FStringA::Release
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
;	COMDAT ?Release@FStringA@@IAEXPAUFStringAData@1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Release@FStringA@@IAEXPAUFStringAData@1@@Z PROC	; FStringA::Release, COMDAT
; _this$ = ecx

; 1105 : {

	push	esi

; 1106 : 	FSTRING_CHECK_BUFFER;
; 1107 : 	if ( pkData && ( pkData != FStringA_GetStringInitData() ) && !pkData->m_bFixed )

	mov	esi, DWORD PTR _pkData$[esp]
	test	esi, esi
	je	SHORT $LN1@Release
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	cmp	esi, eax
	je	SHORT $LN1@Release
	cmp	WORD PTR [esi+10], 0
	jne	SHORT $LN1@Release

; 1108 : 	{
; 1109 : #ifdef		ENABLE_FSTRING_STATS
; 1110 : 		extern uint g_uiFStringBytesCurrent;
; 1111 : 		g_uiFStringBytesCurrent -= sizeof ( FStringAData ) + ( sizeof ( char ) * pkData->m_iAllocLength + 1 );
; 1112 : #endif	//	ENABLE_FSTRING_STATS
; 1113 : 
; 1114 : 		// Free any memory associated with the string
; 1115 : 		delete [] ( byte* )pkData;

	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Release:
	pop	esi

; 1116 : 	}
; 1117 : }

	ret	4
?Release@FStringA@@IAEXPAUFStringAData@1@@Z ENDP	; FStringA::Release
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@XZ				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??0CvString@@QAE@XZ
_TEXT	SEGMENT
??0CvString@@QAE@XZ PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 23   : 	CvString() {}

	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, esi
	pop	esi
	ret	0
??0CvString@@QAE@XZ ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??0CvString@@QAE@PBD@Z				; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0CvString@@QAE@PBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??0CvString@@QAE@PBD@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx

; 25   : 	CvString(const char* s) : std::string(s ? s : "") {CvAssertMsg(s != NULL, "Passing NULL to std::string; possible heap corruption!");}

	mov	eax, DWORD PTR _s$[esp-4]
	push	esi
	mov	esi, ecx
	test	eax, eax
	jne	SHORT $LN4@CvString
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@CvString:
	push	eax
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@PBD@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	??BCvString@@QBEPBDXZ				; CvString::operator char const *
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??BCvString@@QBEPBDXZ
_TEXT	SEGMENT
??BCvString@@QBEPBDXZ PROC				; CvString::operator char const *, COMDAT
; _this$ = ecx

; 31   : 	operator const char*() const 	{ return c_str(); }												

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
??BCvString@@QBEPBDXZ ENDP				; CvString::operator char const *
_TEXT	ENDS
PUBLIC	??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvString::operator=
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CvString::operator=, COMDAT
; _this$ = ecx

; 38   : 	CvString& operator=( const std::string& s) { assign(s.c_str());	return *this; }	

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _s$[esp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	eax, esi
	pop	esi
	ret	4
??4CvString@@QAEAAV0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CvString::operator=
_TEXT	ENDS
PUBLIC	?GetCString@CvString@@QBEPBDXZ			; CvString::GetCString
; Function compile flags: /Ogtpy
;	COMDAT ?GetCString@CvString@@QBEPBDXZ
_TEXT	SEGMENT
?GetCString@CvString@@QBEPBDXZ PROC			; CvString::GetCString, COMDAT
; _this$ = ecx

; 42   : 	const char* GetCString() const 	{ return c_str(); }

	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetCString@CvString@@QBEPBDXZ ENDP			; CvString::GetCString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
_buf$ = -2048						; size = 2048
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	sub	esp, 2048				; 00000800H
	push	ebx
	push	ebp

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	mov	ebp, DWORD PTR _args$[esp+2052]
	push	esi
	push	edi
	lea	edi, DWORD PTR _buf$[esp+2064]
	mov	esi, 2047				; 000007ffH
	npad	6
$LL10@formatv:

; 194  : 	int len = 0;
; 195  : 	int attempts = 0;
; 196  : 	bool success = false;
; 197  : 	const int kMaxAttempts = 40;
; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;
; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	eax, DWORD PTR _fmt$[esp+2060]
	push	ebp
	push	eax
	push	esi
	push	edi
	mov	ebx, esi
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H

; 203  : 		attempts++;

	add	esi, 2048				; 00000800H

; 204  : 		success = (len>=0 && len<=maxlen);

	test	eax, eax
	jl	SHORT $LN13@formatv
	cmp	eax, ebx
	jle	SHORT $LN18@formatv
$LN13@formatv:

; 205  : 		if (!success)
; 206  : 		{
; 207  : 			if (pbuf!=buf)

	lea	ecx, DWORD PTR _buf$[esp+2064]
	xor	bl, bl
	cmp	edi, ecx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	lea	edx, DWORD PTR [esi+1]
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	cmp	esi, 83967				; 000147ffH
	mov	edi, eax
	jl	SHORT $LL10@formatv

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN21@formatv:
	mov	ecx, DWORD PTR _out$[esp+2064]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 223  : 
; 224  : 	if (pbuf!=buf)

	lea	eax, DWORD PTR _buf$[esp+2064]
	cmp	edi, eax
	je	SHORT $LN20@formatv

; 225  : 		delete [] pbuf;

	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN20@formatv:
	pop	edi
	pop	esi
	pop	ebp

; 226  : 
; 227  : 	return success;

	mov	al, bl
	pop	ebx

; 228  : }

	add	esp, 2048				; 00000800H
	ret	0
$LN18@formatv:

; 204  : 		success = (len>=0 && len<=maxlen);

	mov	bl, 1

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)
; 220  : 		out = pbuf;

	push	edi

; 221  : 	else

	jmp	SHORT $LN21@formatv
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -40						; size = 28
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);
; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _lpszFormat$[esp+36]
	lea	eax, DWORD PTR _lpszFormat$[esp+40]
	push	eax
	push	ecx
	lea	edx, DWORD PTR _result$[esp+48]
	push	edx
	mov	DWORD PTR __$EHRec$[esp+60], 0
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);
; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[esp+40]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR _this$[esp+36]
	push	eax
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	lea	ecx, DWORD PTR _result$[esp+40]
	mov	DWORD PTR __$EHRec$[esp+48], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	?GetDescription@CvBaseInfo@@QBEPBDXZ		; CvBaseInfo::GetDescription
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
;	COMDAT ?GetDescription@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
?GetDescription@CvBaseInfo@@QBEPBDXZ PROC		; CvBaseInfo::GetDescription, COMDAT
; _this$ = ecx

; 64   : 		return m_strDescription.c_str();

	add	ecx, 36					; 00000024H
	jmp	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
?GetDescription@CvBaseInfo@@QBEPBDXZ ENDP		; CvBaseInfo::GetDescription
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@ABV0@@Z			; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??0CvString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CvString@@QAE@ABV0@@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@ABV0@@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??$?6H@FDataStream@@QAEAAV0@ABH@Z		; FDataStream::operator<<<int>
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?6H@FDataStream@@QAEAAV0@ABH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6H@FDataStream@@QAEAAV0@ABH@Z PROC			; FDataStream::operator<<<int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6H@FDataStream@@QAEAAV0@ABH@Z ENDP			; FDataStream::operator<<<int>
_TEXT	ENDS
PUBLIC	??$?5H@FDataStream@@QAEAAV0@AAH@Z		; FDataStream::operator>><int>
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
;	COMDAT ??$?5H@FDataStream@@QAEAAV0@AAH@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5H@FDataStream@@QAEAAV0@AAH@Z PROC			; FDataStream::operator>><int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5H@FDataStream@@QAEAAV0@AAH@Z ENDP			; FDataStream::operator>><int>
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??$?5I@FDataStream@@QAEAAV0@AAI@Z		; FDataStream::operator>><unsigned int>
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\fdatastream.h
;	COMDAT ??$?5I@FDataStream@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?5I@FDataStream@@QAEAAV0@AAI@Z PROC			; FDataStream::operator>><unsigned int>, COMDAT
; _this$ = ecx

; 260  : 	// If the compiler produces an error here complaining about 
; 261  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 262  : 	// it could not find a specialization for the type supplied
; 263  : 	// in scope. If a specialization exists, be sure to include
; 264  : 	// the header (FStlContainerSerialization.h, for example), 
; 265  : 	// if not, implement :
; 266  : 	// FDataStream & operator>>(FDataStream &, YourCustomType &)
; 267  : 	Read( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 268  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 269  : }

	ret	4
??$?5I@FDataStream@@QAEAAV0@AAI@Z ENDP			; FDataStream::operator>><unsigned int>
_TEXT	ENDS
PUBLIC	??$?6I@FDataStream@@QAEAAV0@ABI@Z		; FDataStream::operator<<<unsigned int>
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Ogtpy
;	COMDAT ??$?6I@FDataStream@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_kData$ = 8						; size = 4
??$?6I@FDataStream@@QAEAAV0@ABI@Z PROC			; FDataStream::operator<<<unsigned int>, COMDAT
; _this$ = ecx

; 246  : 	// If the compiler produces an error here complaining about 
; 247  : 	// YouMustImplementASerializeOperatorForThisTypeError then
; 248  : 	// it could not find a specialization for the type supplied
; 249  : 	// in scope. If a specialization exists, be sure to include
; 250  : 	// the header (FStlContainerSerialization.h, for example), 
; 251  : 	// if not, implement :
; 252  : 	// FDataStream & operator<<(FDataStream &, YourCustomType &)
; 253  : 	Write( kData );

	mov	eax, DWORD PTR _kData$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 254  : 	return ( *this );

	mov	eax, esi
	pop	esi

; 255  : }

	ret	4
??$?6I@FDataStream@@QAEAAV0@ABI@Z ENDP			; FDataStream::operator<<<unsigned int>
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@H$0FK@$00@@QBEABHI@Z ; CvWeightedVector<int,90,1>::GetElement
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?GetElement@?$CvWeightedVector@H$0FK@$00@@QBEABHI@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@H$0FK@$00@@QBEABHI@Z PROC ; CvWeightedVector<int,90,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@H$0FK@$00@@QBEABHI@Z ENDP ; CvWeightedVector<int,90,1>::GetElement
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@H$0FK@$00@@QBEHI@Z ; CvWeightedVector<int,90,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@H$0FK@$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -8						; size = 8
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@H$0FK@$00@@QBEHI@Z PROC	; CvWeightedVector<int,90,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 8

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$[esp+8], edx

; 75   : 	}

	add	esp, 8
	ret	4
?GetWeight@?$CvWeightedVector@H$0FK@$00@@QBEHI@Z ENDP	; CvWeightedVector<int,90,1>::GetWeight
_TEXT	ENDS
PUBLIC	?IncreaseWeight@?$CvWeightedVector@H$0FK@$00@@QAEXIH@Z ; CvWeightedVector<int,90,1>::IncreaseWeight
; Function compile flags: /Ogtpy
;	COMDAT ?IncreaseWeight@?$CvWeightedVector@H$0FK@$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?IncreaseWeight@?$CvWeightedVector@H$0FK@$00@@QAEXIH@Z PROC ; CvWeightedVector<int,90,1>::IncreaseWeight, COMDAT
; _this$ = ecx

; 78   : 		m_pItems[iIndex].m_iWeight += iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	mov	edx, DWORD PTR _iWeight$[esp-4]
	add	DWORD PTR [eax+ecx*8+4], edx
	lea	eax, DWORD PTR [eax+ecx*8+4]

; 79   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 80   : 	}

	ret	8
?IncreaseWeight@?$CvWeightedVector@H$0FK@$00@@QAEXIH@Z ENDP ; CvWeightedVector<int,90,1>::IncreaseWeight
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@H$0FK@$00@@QAEHXZ	; CvWeightedVector<int,90,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@H$0FK@$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@H$0FK@$00@@QAEHXZ PROC		; CvWeightedVector<int,90,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@H$0FK@$00@@QAEHXZ ENDP		; CvWeightedVector<int,90,1>::size
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 90			; 0000005aH
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Free
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::iter_swap<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	jle	SHORT $LN10@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN10@Med3:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+4]
	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [eax+4]
	jle	SHORT $LN19@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3
	mov	edi, DWORD PTR [edx]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	pop	ebx
$LN19@Med3:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN28@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN28@Med3:
	pop	edi
	pop	esi

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	edx, DWORD PTR __Hole$[esp-4]

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp+4]
	lea	eax, DWORD PTR [edx+edx+2]
	cmp	eax, esi
	push	edi
	mov	edi, edx
	jge	SHORT $LN14@Adjust_hea
	npad	7
$LL5@Adjust_hea:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [ecx+eax*8+4]
	cmp	ebx, DWORD PTR [ecx+eax*8-4]
	jle	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [ecx+edx*8], ebx
	mov	ebx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], ebx
	mov	edx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea
$LN14@Adjust_hea:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	edx, DWORD PTR [esi-1]
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	esi, DWORD PTR __Val$[esp+8]
	sub	esp, 8
	mov	eax, esp
	push	edi
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Val$[esp+24]
	push	edx
	push	ecx
	mov	DWORD PTR [eax+4], esi
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_
	push	esi
$LL8@unchecked_:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_
	pop	esi
$LN7@unchecked_:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 8
___formal$ = 28						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR __Last$[esp+4]
	sub	ecx, eax
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??0FStringA@@QAE@XZ				; FStringA::FStringA
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\fstringa.inl
;	COMDAT ??0FStringA@@QAE@XZ
_TEXT	SEGMENT
??0FStringA@@QAE@XZ PROC				; FStringA::FStringA, COMDAT
; _this$ = ecx

; 85   : {

	push	esi
	mov	esi, ecx

; 86   : 	Init();

	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	add	eax, 12					; 0000000cH
	mov	DWORD PTR [esi], eax

; 87   : }

	mov	eax, esi
	pop	esi
	ret	0
??0FStringA@@QAE@XZ ENDP				; FStringA::FStringA
_TEXT	ENDS
PUBLIC	?Release@FStringA@@QAEXXZ			; FStringA::Release
; Function compile flags: /Ogtpy
;	COMDAT ?Release@FStringA@@QAEXXZ
_TEXT	SEGMENT
?Release@FStringA@@QAEXXZ PROC				; FStringA::Release, COMDAT
; _this$ = ecx

; 1096 : {

	push	esi
	push	edi
	mov	edi, ecx

; 1097 : 	Release( GetData() );

	mov	esi, DWORD PTR [edi]
	sub	esi, 12					; 0000000cH
	je	SHORT $LN5@Release@2
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	cmp	esi, eax
	je	SHORT $LN5@Release@2
	cmp	WORD PTR [esi+10], 0
	jne	SHORT $LN5@Release@2
	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN5@Release@2:

; 1098 : 	m_pszString = NULL;

	mov	DWORD PTR [edi], 0

; 1099 : 	Init();

	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	add	eax, 12					; 0000000cH
	mov	DWORD PTR [edi], eax
	pop	edi
	pop	esi

; 1100 : }

	ret	0
?Release@FStringA@@QAEXXZ ENDP				; FStringA::Release
_TEXT	ENDS
PUBLIC	?SetFixedBuffer@FStringA@@QAEXPAUFStringAData@1@@Z ; FStringA::SetFixedBuffer
; Function compile flags: /Ogtpy
;	COMDAT ?SetFixedBuffer@FStringA@@QAEXPAUFStringAData@1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?SetFixedBuffer@FStringA@@QAEXPAUFStringAData@1@@Z PROC	; FStringA::SetFixedBuffer, COMDAT
; _this$ = ecx

; 1122 : {

	push	ebx

; 1123 : 	assert( pkData != NULL );
; 1124 : 	if(!pkData) return;

	mov	ebx, DWORD PTR _pkData$[esp]
	push	edi
	mov	edi, ecx
	test	ebx, ebx
	je	SHORT $LN2@SetFixedBu
	push	esi

; 1125 : 	assert( pkData->m_bFixed == 1 );
; 1126 : 	assert( pkData->m_iAllocLength > 0 );
; 1127 : 	Release();

	mov	esi, DWORD PTR [edi]
	sub	esi, 12					; 0000000cH
	je	SHORT $LN8@SetFixedBu
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	cmp	esi, eax
	je	SHORT $LN8@SetFixedBu
	cmp	WORD PTR [esi+10], 0
	jne	SHORT $LN8@SetFixedBu
	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN8@SetFixedBu:
	mov	DWORD PTR [edi], 0
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData

; 1128 : 	m_pszString = pkData->StringData();

	add	ebx, 12					; 0000000cH
	mov	DWORD PTR [edi], ebx
	pop	esi
$LN2@SetFixedBu:
	pop	edi
	pop	ebx

; 1129 : }

	ret	4
?SetFixedBuffer@FStringA@@QAEXPAUFStringAData@1@@Z ENDP	; FStringA::SetFixedBuffer
_TEXT	ENDS
PUBLIC	?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ	; CvCity::getOwner
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
;	COMDAT ?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ PROC		; CvCity::getOwner, COMDAT
; _this$ = ecx

; 604  : 		return m_eOwner;

	mov	eax, DWORD PTR [ecx+84]

; 605  : 	}

	ret	0
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ ENDP		; CvCity::getOwner
_TEXT	ENDS
PUBLIC	?AddFlavorWeights@CvUnitProductionAI@@QAEXW4FlavorTypes@@H@Z ; CvUnitProductionAI::AddFlavorWeights
EXTRN	?GetFlavorValue@CvUnitEntry@@QBEHH@Z:PROC	; CvUnitEntry::GetFlavorValue
EXTRN	?GetEntry@CvUnitXMLEntries@@QAEPAVCvUnitEntry@@H@Z:PROC ; CvUnitXMLEntries::GetEntry
EXTRN	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ:PROC	; CvUnitXMLEntries::GetNumUnits
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvunitproductionai.cpp
;	COMDAT ?AddFlavorWeights@CvUnitProductionAI@@QAEXW4FlavorTypes@@H@Z
_TEXT	SEGMENT
_eFlavor$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?AddFlavorWeights@CvUnitProductionAI@@QAEXW4FlavorTypes@@H@Z PROC ; CvUnitProductionAI::AddFlavorWeights, COMDAT
; _this$ = ecx

; 161  : {

	push	esi
	push	edi
	mov	edi, ecx

; 162  : 	// Loop through all units
; 163  : #ifdef AUI_WARNING_FIXES
; 164  : 	for (uint iUnit = 0; iUnit < m_pUnits->GetNumUnits(); iUnit++)
; 165  : #else
; 166  : 	for(int iUnit = 0; iUnit < m_pUnits->GetNumUnits(); iUnit++)

	mov	ecx, DWORD PTR [edi+4]
	xor	esi, esi
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	test	eax, eax
	jle	SHORT $LN2@AddFlavorW
	push	ebx
	mov	ebx, DWORD PTR _iWeight$[esp+8]
	push	ebp
	mov	ebp, DWORD PTR _eFlavor$[esp+12]
	npad	4
$LL4@AddFlavorW:

; 167  : #endif
; 168  : 	{
; 169  : 		CvUnitEntry* entry = m_pUnits->GetEntry(iUnit);

	mov	ecx, DWORD PTR [edi+4]
	push	esi
	call	?GetEntry@CvUnitXMLEntries@@QAEPAVCvUnitEntry@@H@Z ; CvUnitXMLEntries::GetEntry

; 170  : 		if(entry)

	test	eax, eax
	je	SHORT $LN3@AddFlavorW

; 171  : 		{
; 172  : 			// Set its weight by looking at unit's weight for this flavor and using iWeight multiplier passed in
; 173  : 			m_UnitAIWeights.IncreaseWeight(iUnit, entry->GetFlavorValue(eFlavor) * iWeight);

	push	ebp
	mov	ecx, eax
	call	?GetFlavorValue@CvUnitEntry@@QBEHH@Z	; CvUnitEntry::GetFlavorValue
	imul	eax, ebx
	mov	ecx, DWORD PTR [edi+8]
	add	DWORD PTR [ecx+esi*8+4], eax
	lea	ecx, DWORD PTR [ecx+esi*8+4]
$LN3@AddFlavorW:
	mov	ecx, DWORD PTR [edi+4]
	inc	esi
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	cmp	esi, eax
	jl	SHORT $LL4@AddFlavorW
	pop	ebp
	pop	ebx
$LN2@AddFlavorW:
	pop	edi
	pop	esi

; 174  : 		}
; 175  : 	}
; 176  : }

	ret	8
?AddFlavorWeights@CvUnitProductionAI@@QAEXW4FlavorTypes@@H@Z ENDP ; CvUnitProductionAI::AddFlavorWeights
_TEXT	ENDS
PUBLIC	?GetWeight@CvUnitProductionAI@@QAEHW4UnitTypes@@@Z ; CvUnitProductionAI::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@CvUnitProductionAI@@QAEHW4UnitTypes@@@Z
_TEXT	SEGMENT
_elem$219327 = -8					; size = 8
_eUnit$ = 8						; size = 4
?GetWeight@CvUnitProductionAI@@QAEHW4UnitTypes@@@Z PROC	; CvUnitProductionAI::GetWeight, COMDAT
; _this$ = ecx

; 180  : {

	sub	esp, 8

; 181  : 	return m_UnitAIWeights.GetWeight(eUnit);

	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _eUnit$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$219327[esp+8], edx

; 182  : }

	add	esp, 8
	ret	4
?GetWeight@CvUnitProductionAI@@QAEHW4UnitTypes@@@Z ENDP	; CvUnitProductionAI::GetWeight
_TEXT	ENDS
PUBLIC	?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z ; CvUnitProductionAI::LogPossibleBuilds
EXTRN	?getUnitAIString@@YAXAAVCvString@@W4UnitAITypes@@@Z:PROC ; getUnitAIString
EXTRN	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ:PROC ; CvGlobals::GetGameUnits
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z:PROC ; CvCityStrategyAI::GetLogFileName
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
;	COMDAT xdata$x
; File s:\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$6
	DD	03H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$11
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvunitproductionai.cpp
xdata$x	ENDS
;	COMDAT ?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z
_TEXT	SEGMENT
_pLog$218071 = -276					; size = 4
_elem$219469 = -272					; size = 8
_elem$219439 = -272					; size = 8
_strTemp$218093 = -264					; size = 28
$T219332 = -264						; size = 28
_strTempString$218092 = -236				; size = 28
$T219333 = -236						; size = 28
_strDesc$218086 = -208					; size = 28
$T219334 = -208						; size = 28
_strOutBuf$218084 = -180				; size = 28
_strBaseString$218073 = -152				; size = 28
_strTemp$218089 = -124					; size = 28
_playerName$218068 = -96				; size = 28
_cityName$218069 = -68					; size = 28
$T219331 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_eUnitAIType$ = 8					; size = 4
?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z PROC ; CvUnitProductionAI::LogPossibleBuilds, COMDAT
; _this$ = ecx

; 243  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 264				; 00000108H
	push	esi
	mov	esi, ecx

; 244  : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	test	al, al
	je	$LN6@LogPossibl
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	test	al, al
	je	$LN6@LogPossibl

; 245  : 	{
; 246  : 		// Find the name of this civ and city
; 247  : 		CvString playerName = GET_PLAYER(m_pCity->getOwner()).getCivilizationShortDescription();

	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+84]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	ebx
	push	ebp
	push	edi
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	xor	ebp, ebp
	cmp	eax, ebp
	jne	SHORT $LN32@LogPossibl
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN32@LogPossibl:
	push	eax
	lea	ecx, DWORD PTR _playerName$218068[esp+296]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z

; 248  : 		CvString cityName = m_pCity->getName();

	lea	ecx, DWORD PTR _cityName$218069[esp+292]
	push	ecx
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR __$EHRec$[esp+304], ebp
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	BYTE PTR __$EHRec$[esp+300], 1

; 249  : 
; 250  : 		// Open the log file
; 251  : 		FILogFile* pLog = LOGFILEMGR.GetLog(m_pCity->GetCityStrategyAI()->GetLogFileName(playerName, cityName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	lea	edx, DWORD PTR _cityName$218069[esp+292]
	mov	edi, eax
	push	edx
	lea	eax, DWORD PTR _playerName$218068[esp+296]
	push	eax
	lea	ecx, DWORD PTR $T219331[esp+300]
	push	ecx
	mov	ecx, DWORD PTR [esi]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?GetLogFileName@CvCityStrategyAI@@QBE?AVCvString@@AAV2@0@Z ; CvCityStrategyAI::GetLogFileName
	mov	ecx, eax
	mov	BYTE PTR __$EHRec$[esp+300], 2
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	edx, DWORD PTR [edi]
	push	ebp
	push	1
	push	eax
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, edi
	call	eax
	lea	ecx, DWORD PTR $T219331[esp+292]
	mov	DWORD PTR _pLog$218071[esp+292], eax
	mov	BYTE PTR __$EHRec$[esp+300], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 252  : 
; 253  : 		// Get the leading info for this line
; 254  : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$218073[esp+292]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 255  : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	BYTE PTR __$EHRec$[esp+300], 3
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	lea	ecx, DWORD PTR _strBaseString$218073[esp+296]
	push	OFFSET $SG218074
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format

; 256  : 		strBaseString += playerName + ", " + cityName + ", ";

	mov	edi, DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	push	OFFSET $SG218079
	lea	edx, DWORD PTR _playerName$218068[esp+308]
	push	edx
	lea	eax, DWORD PTR $T219332[esp+312]
	push	eax
	call	edi
	lea	ecx, DWORD PTR _cityName$218069[esp+316]
	push	ecx
	push	eax
	lea	edx, DWORD PTR $T219333[esp+324]
	push	edx
	mov	BYTE PTR __$EHRec$[esp+336], 4
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	push	OFFSET $SG218078
	push	eax
	lea	eax, DWORD PTR $T219334[esp+336]
	mov	bl, 5
	push	eax
	mov	BYTE PTR __$EHRec$[esp+348], bl
	call	edi
	add	esp, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR _strBaseString$218073[esp+296]
	mov	BYTE PTR __$EHRec$[esp+304], 6
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	lea	ecx, DWORD PTR $T219334[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], bl
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T219333[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 4
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR $T219332[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 257  : 
; 258  : 
; 259  : 		// Dump out the weight of each buildable item
; 260  : 		for(int iI = 0; iI < m_Buildables.size(); iI++)

	mov	eax, DWORD PTR [esi+748]
	test	eax, eax
	jle	$LN3@LogPossibl
	mov	ebx, DWORD PTR _eUnitAIType$[esp+288]
	npad	4
$LL5@LogPossibl:

; 261  : 		{
; 262  : 			CvString strOutBuf = strBaseString;

	lea	ecx, DWORD PTR _strBaseString$218073[esp+292]
	push	ecx
	lea	ecx, DWORD PTR _strOutBuf$218084[esp+296]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR [esi+744]
	lea	edi, DWORD PTR [ebp*8]

; 263  : 
; 264  : 			CvUnitEntry* pUnitEntry = GC.GetGameUnits()->GetEntry(m_Buildables.GetElement(iI));

	mov	edx, DWORD PTR [eax+edi]
	add	eax, edi
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	BYTE PTR __$EHRec$[esp+304], 7
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetEntry@CvUnitXMLEntries@@QAEPAVCvUnitEntry@@H@Z ; CvUnitXMLEntries::GetEntry

; 265  : 
; 266  : 			CvString strDesc = (pUnitEntry != NULL)? pUnitEntry->GetDescription() : "Unknown Unit";

	test	eax, eax
	je	$LN9@LogPossibl
	lea	ecx, DWORD PTR [eax+36]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	test	eax, eax
	jne	SHORT $LN60@LogPossibl
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN60@LogPossibl:
	push	eax
	lea	ecx, DWORD PTR _strDesc$218086[esp+296]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[esp+300], 8

; 267  : 			if(eUnitAIType == NO_UNITAI)

	cmp	ebx, -1
	jne	SHORT $LN2@LogPossibl

; 268  : 			{
; 269  : 				CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$218089[esp+292]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 270  : 				strTemp.Format("Unit, %s, %d", strDesc.GetCString(), m_Buildables.GetWeight(iI));

	mov	eax, DWORD PTR [esi+744]
	mov	ecx, DWORD PTR [eax+edi]
	mov	eax, DWORD PTR [eax+edi+4]
	mov	DWORD PTR _elem$219439[esp+292], ecx
	push	eax
	lea	ecx, DWORD PTR _strDesc$218086[esp+296]
	mov	BYTE PTR __$EHRec$[esp+304], 9
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	edx, DWORD PTR _strTemp$218089[esp+300]
	push	OFFSET $SG218090
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 16					; 00000010H

; 271  : 				strOutBuf += strTemp;

	lea	eax, DWORD PTR _strTemp$218089[esp+292]
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$218084[esp+296]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 272  : 			}

	lea	ecx, DWORD PTR _strTemp$218089[esp+292]

; 273  : 			else

	jmp	$LN119@LogPossibl
$LN9@LogPossibl:

; 265  : 
; 266  : 			CvString strDesc = (pUnitEntry != NULL)? pUnitEntry->GetDescription() : "Unknown Unit";

	mov	eax, OFFSET $SG218087
	jmp	$LN60@LogPossibl
$LN2@LogPossibl:

; 274  : 			{
; 275  : 				CvString strTempString;

	lea	ecx, DWORD PTR _strTempString$218092[esp+292]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 276  : 				getUnitAIString(strTempString, eUnitAIType);

	lea	ecx, DWORD PTR _strTempString$218092[esp+292]
	push	ebx
	push	ecx
	mov	BYTE PTR __$EHRec$[esp+308], 10		; 0000000aH
	call	?getUnitAIString@@YAXAAVCvString@@W4UnitAITypes@@@Z ; getUnitAIString
	add	esp, 8

; 277  : 
; 278  : 				CvString strTemp;

	lea	ecx, DWORD PTR _strTemp$218093[esp+292]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 279  : 				strTemp.Format("Special request for unit of type: %s, %s, %d", strTempString.GetCString(), strDesc.GetCString(), m_Buildables.GetWeight(iI));

	mov	eax, DWORD PTR [esi+744]
	mov	edx, DWORD PTR [eax+edi]
	mov	edi, DWORD PTR [eax+edi+4]
	lea	ecx, DWORD PTR _strDesc$218086[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 11		; 0000000bH
	mov	DWORD PTR _elem$219469[esp+292], edx
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	edi
	push	eax
	lea	ecx, DWORD PTR _strTempString$218092[esp+300]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	eax, DWORD PTR _strTemp$218093[esp+304]
	push	OFFSET $SG218094
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 20					; 00000014H

; 280  : 				strOutBuf += strTemp;

	lea	ecx, DWORD PTR _strTemp$218093[esp+292]
	push	ecx
	lea	ecx, DWORD PTR _strOutBuf$218084[esp+296]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z

; 281  : 			}

	lea	ecx, DWORD PTR _strTemp$218093[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 10		; 0000000aH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strTempString$218092[esp+292]
$LN119@LogPossibl:
	mov	BYTE PTR __$EHRec$[esp+300], 8
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 282  : 
; 283  : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$218084[esp+292]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	ecx, DWORD PTR _pLog$218071[esp+292]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	ecx
	call	eax
	add	esp, 8

; 284  : 		}

	lea	ecx, DWORD PTR _strDesc$218086[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 7
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _strOutBuf$218084[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 3
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	inc	ebp
	cmp	ebp, DWORD PTR [esi+748]
	jl	$LL5@LogPossibl
$LN3@LogPossibl:

; 285  : 	}

	lea	ecx, DWORD PTR _strBaseString$218073[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _cityName$218069[esp+292]
	mov	BYTE PTR __$EHRec$[esp+300], 0
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	lea	ecx, DWORD PTR _playerName$218068[esp+292]
	mov	DWORD PTR __$EHRec$[esp+300], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	pop	edi
	pop	ebp
	pop	ebx
$LN6@LogPossibl:

; 286  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+280]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 276				; 00000114H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$0:
	lea	ecx, DWORD PTR _playerName$218068[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$1:
	lea	ecx, DWORD PTR _cityName$218069[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$2:
	lea	ecx, DWORD PTR $T219331[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$3:
	lea	ecx, DWORD PTR _strBaseString$218073[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$4:
	lea	ecx, DWORD PTR $T219332[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$5:
	lea	ecx, DWORD PTR $T219333[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$6:
	lea	ecx, DWORD PTR $T219334[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$7:
	lea	ecx, DWORD PTR _strOutBuf$218084[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$8:
	lea	ecx, DWORD PTR _strDesc$218086[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$9:
	lea	ecx, DWORD PTR _strTemp$218089[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$10:
	lea	ecx, DWORD PTR _strTempString$218092[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z$11:
	lea	ecx, DWORD PTR _strTemp$218093[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z ENDP ; CvUnitProductionAI::LogPossibleBuilds
PUBLIC	?clear@?$CvWeightedVector@H$0FK@$00@@QAEXXZ	; CvWeightedVector<int,90,1>::clear
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?clear@?$CvWeightedVector@H$0FK@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@H$0FK@$00@@QAEXXZ PROC	; CvWeightedVector<int,90,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@H$0FK@$00@@QAEXXZ ENDP	; CvWeightedVector<int,90,1>::clear
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::~FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::~FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::~FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN34@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 90					; 0000005aH
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize
$LN16@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 90			; 0000005aH
$LN15@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+732], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\fstringa.inl
;	COMDAT ??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z PROC ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>, COMDAT
; _this$ = ecx

; 58   : {

	push	ebx
	push	ebp

; 59   : 	assert( nLENGTH > 0 );
; 60   : 	m_kStringData.m_bLocked = 0;
; 61   : 	m_kStringData.m_bFixed = 1;
; 62   : 	m_kStringData.m_iAllocLength = nLENGTH;
; 63   : 	m_kStringData.m_iDataLength = 0;
; 64   : 	m_szStringBuffer[ 0 ] = 0;
; 65   : 	str.SetFixedBuffer( &m_kStringData );

	mov	ebp, DWORD PTR _str$[esp+4]
	push	esi
	mov	esi, ecx
	xor	eax, eax
	mov	ecx, 1
	lea	ebx, DWORD PTR [esi+12]
	push	edi
	mov	WORD PTR [esi+8], ax
	mov	WORD PTR [esi+10], cx
	mov	DWORD PTR [esi], 64			; 00000040H
	mov	DWORD PTR [esi+4], eax
	mov	BYTE PTR [ebx], al
	mov	edi, DWORD PTR [ebp]
	sub	edi, 12					; 0000000cH
	je	SHORT $LN19@FStringAFi
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	cmp	edi, eax
	je	SHORT $LN19@FStringAFi
	cmp	WORD PTR [edi+10], 0
	jne	SHORT $LN19@FStringAFi
	push	edi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN19@FStringAFi:
	mov	DWORD PTR [ebp], 0
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	pop	edi

; 66   : }

	mov	eax, esi
	pop	esi
	mov	DWORD PTR [ebp], ebx
	pop	ebp
	pop	ebx
	ret	4
??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ENDP ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Median<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	edi, 4
	lea	ebx, DWORD PTR [eax*8]
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	sub	ebx, edi
	sar	ebx, 3

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap
	npad	3
$LL2@Make_heap:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [edi+esi*8-8]
	sub	esp, 8
	mov	eax, esp
	dec	esi
	push	ebx
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+esi*8+4]
	push	esi
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H
	test	esi, esi
	jg	SHORT $LL2@Make_heap
$LN1@Make_heap:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp

; 2968 : 	if (_First != _Last)

	mov	ebp, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	cmp	edi, ebp
	je	SHORT $LN6@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+8]
	cmp	edx, ebp
	je	SHORT $LN6@Insertion_
	push	ebx
	push	esi
$LL7@Insertion_:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+4]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edx]
	mov	ecx, edx
	jle	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, edx
	cmp	edi, edx
	je	SHORT $LN21@Insertion_
	npad	7
$LL22@Insertion_:
	mov	ecx, DWORD PTR [eax-8]
	sub	eax, 8
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+12], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_
$LN21@Insertion_:

; 2977 : 				*_First = _Val;

	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-8]
	jle	SHORT $LN1@Insertion_
$LL3@Insertion_:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ecx, eax
	sub	eax, 8
	cmp	esi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Last$[esp+12]
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], esi
$LN4@Insertion_:
	add	edx, 8
	cmp	edx, ebp
	jne	SHORT $LL7@Insertion_
	pop	esi
	pop	ebx
$LN6@Insertion_:
	pop	edi
	pop	ebp

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax-8]
	push	edi
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 8
	mov	edx, esp
	sub	eax, 8
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	pop	edi
	pop	esi
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??1FStringA@@QAE@XZ				; FStringA::~FStringA
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\fstringa.inl
;	COMDAT ??1FStringA@@QAE@XZ
_TEXT	SEGMENT
??1FStringA@@QAE@XZ PROC				; FStringA::~FStringA, COMDAT
; _this$ = ecx

; 151  : {

	push	esi
	push	edi
	mov	edi, ecx

; 152  : 	Release();

	mov	esi, DWORD PTR [edi]
	sub	esi, 12					; 0000000cH
	je	SHORT $LN7@FStringA
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	cmp	esi, eax
	je	SHORT $LN7@FStringA
	cmp	WORD PTR [esi+10], 0
	jne	SHORT $LN7@FStringA
	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN7@FStringA:
	mov	DWORD PTR [edi], 0
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	add	eax, 12					; 0000000cH
	mov	DWORD PTR [edi], eax
	pop	edi
	pop	esi

; 153  : }

	ret	0
??1FStringA@@QAE@XZ ENDP				; FStringA::~FStringA
_TEXT	ENDS
PUBLIC	?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z ; CvUnitProductionAI::Write
EXTRN	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z:PROC ; CvInfosSerializationHelper::WriteHashed
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z$0
__ehfuncinfo$?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvunitproductionai.cpp
xdata$x	ENDS
;	COMDAT ?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_sTemp$ = -112						; size = 4
_uiVersion$ = -108					; size = 4
$T219807 = -104						; size = 4
$T219808 = -100						; size = 4
_elem$219845 = -96					; size = 8
_FStringFixedBuffer_sTemp$ = -88			; size = 76
__$EHRec$ = -12						; size = 12
_iNumUnits$218013 = 8					; size = 4
_kStream$ = 8						; size = 4
?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z PROC	; CvUnitProductionAI::Write, COMDAT
; _this$ = ecx

; 117  : {

	push	-1
	push	__ehhandler$?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 100				; 00000064H
	push	ebx
	push	esi
	push	edi
	mov	ebx, ecx

; 118  : 	FStringFixedBuffer(sTemp, 64);

	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _sTemp$[esp+124], eax
	lea	eax, DWORD PTR _sTemp$[esp+124]
	push	eax
	lea	ecx, DWORD PTR _FStringFixedBuffer_sTemp$[esp+128]
	mov	DWORD PTR __$EHRec$[esp+136], 0
	call	??0?$FStringAFixedBuffer@$0EA@@FStringA@@QAE@AAV1@@Z ; FStringA::FStringAFixedBuffer<64>::FStringAFixedBuffer<64>

; 119  : 
; 120  : 	// Current version number
; 121  : 	uint uiVersion = 1;
; 122  : 	kStream << uiVersion;

	mov	edi, DWORD PTR _kStream$[esp+120]
	lea	ecx, DWORD PTR _uiVersion$[esp+124]
	push	ecx
	mov	ecx, edi
	mov	DWORD PTR _uiVersion$[esp+128], 1
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 123  : 
; 124  : 	if(m_pUnits)

	mov	ecx, DWORD PTR [ebx+4]
	test	ecx, ecx
	je	SHORT $LN4@Write

; 125  : 	{
; 126  : #ifdef AUI_WARNING_FIXES
; 127  : 		uint iNumUnits = m_pUnits->GetNumUnits();
; 128  : 		kStream << iNumUnits;
; 129  : 
; 130  : 		// Loop through writing each entry
; 131  : 		for (uint iI = 0; iI < iNumUnits; iI++)
; 132  : #else
; 133  : 		int iNumUnits = m_pUnits->GetNumUnits();

	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits

; 134  : 		kStream << iNumUnits;

	lea	edx, DWORD PTR _iNumUnits$218013[esp+120]
	push	edx
	mov	ecx, edi
	mov	DWORD PTR _iNumUnits$218013[esp+124], eax
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 135  : 
; 136  : 		// Loop through writing each entry
; 137  : 		for(int iI = 0; iI < iNumUnits; iI++)

	xor	esi, esi
	cmp	DWORD PTR _iNumUnits$218013[esp+120], esi
	jle	SHORT $LN4@Write
	npad	9
$LL6@Write:

; 138  : #endif
; 139  : 		{
; 140  : 			const UnitTypes eUnit = static_cast<UnitTypes>(iI);
; 141  : 			CvUnitEntry* pkUnitInfo = GC.getUnitInfo(eUnit);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo

; 142  : 			if(pkUnitInfo)

	test	eax, eax
	je	SHORT $LN3@Write

; 143  : 			{
; 144  : 				CvInfosSerializationHelper::WriteHashed(kStream, pkUnitInfo);

	push	eax
	push	edi
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z ; CvInfosSerializationHelper::WriteHashed

; 145  : 				kStream << m_UnitAIWeights.GetWeight(iI);

	mov	eax, DWORD PTR [ebx+8]
	mov	ecx, DWORD PTR [eax+esi*8]
	mov	eax, DWORD PTR [eax+esi*8+4]
	add	esp, 8
	lea	edx, DWORD PTR $T219807[esp+124]
	mov	DWORD PTR _elem$219845[esp+124], ecx
	mov	DWORD PTR $T219807[esp+124], eax
	push	edx

; 146  : 			}
; 147  : 			else

	jmp	SHORT $LN47@Write
$LN3@Write:

; 148  : 			{
; 149  : 				kStream << (int)0;

	lea	eax, DWORD PTR $T219808[esp+124]
	mov	DWORD PTR $T219808[esp+124], 0
	push	eax
$LN47@Write:
	mov	ecx, edi
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
	inc	esi
	cmp	esi, DWORD PTR _iNumUnits$218013[esp+120]
	jl	SHORT $LL6@Write
$LN4@Write:

; 150  : 			}
; 151  : 		}
; 152  : 	}
; 153  : 	else
; 154  : 	{
; 155  : 		CvAssertMsg(m_pUnits != NULL, "Unit Production AI init failure: unit entries are NULL");
; 156  : 	}
; 157  : }

	mov	esi, DWORD PTR _sTemp$[esp+124]
	add	esi, -12				; fffffff4H
	mov	DWORD PTR __$EHRec$[esp+132], -1
	je	SHORT $LN37@Write
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	cmp	esi, eax
	je	SHORT $LN37@Write
	cmp	WORD PTR [esi+10], 0
	jne	SHORT $LN37@Write
	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN37@Write:
	call	?FStringA_GetStringInitData@@YAPAUFStringAData@FStringA@@XZ ; FStringA_GetStringInitData
	mov	ecx, DWORD PTR __$EHRec$[esp+124]
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 112				; 00000070H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z$0:
	lea	ecx, DWORD PTR _sTemp$[ebp]
	jmp	??1FStringA@@QAE@XZ			; FStringA::~FStringA
__ehhandler$?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Write@CvUnitProductionAI@@QBEXAAVFDataStream@@@Z ENDP	; CvUnitProductionAI::Write
PUBLIC	??0?$CvWeightedVector@H$0FK@$00@@QAE@XZ		; CvWeightedVector<int,90,1>::CvWeightedVector<int,90,1>
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0?$CvWeightedVector@H$0FK@$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@H$0FK@$00@@QAE@XZ PROC		; CvWeightedVector<int,90,1>::CvWeightedVector<int,90,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 90			; 0000005aH
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@H$0FK@$00@@QAE@XZ ENDP		; CvWeightedVector<int,90,1>::CvWeightedVector<int,90,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ		; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ PROC		; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted:
	ret	0
??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ ENDP		; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::push_back
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+732], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Tmp$220098 = -24					; size = 8
__Tmp$220027 = -16					; size = 8
__Tmp$220053 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 24					; 00000018H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+24]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+28]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	push	edi
	sar	eax, 1
	lea	edi, DWORD PTR [ebx+eax*8]

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-8]
	push	eax
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Median<CvWeightedVector<int,90,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+8]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_
$LL27@Unguarded_:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	jl	SHORT $LN99@Unguarded_
	jg	SHORT $LN99@Unguarded_

; 3033 : 		--_Pfirst;

	sub	ecx, 8
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_
$LN99@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR [ecx+4]
	npad	1
$LL25@Unguarded_:
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_
	jg	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	add	esi, 8
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	ebx, ecx
$LL23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+36]
	jae	SHORT $LN103@Unguarded_
	npad	6
$LL21@Unguarded_:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+4]
	cmp	edx, edi
	jl	SHORT $LN20@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 8
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_
	mov	ebp, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$220027[esp+44], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	edx, DWORD PTR __Tmp$220027[esp+44]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
$LN20@Unguarded_:
	add	eax, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jb	SHORT $LL21@Unguarded_
$LN103@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	ebx, DWORD PTR __First$[esp+36]
	jbe	SHORT $LN115@Unguarded_
	lea	edx, DWORD PTR [ebx-8]
$LL14@Unguarded_:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [ecx+4]
	cmp	ebp, edi
	jl	SHORT $LN13@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 8
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_
	mov	ebp, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$220053[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$220053[esp+44]
	mov	DWORD PTR [edx+4], edi
$LN13@Unguarded_:
	sub	ebx, 8
	sub	edx, 8
	cmp	DWORD PTR __First$[esp+36], ebx
	jb	SHORT $LL14@Unguarded_
$LN111@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebx, DWORD PTR __First$[esp+36]
$LN115@Unguarded_:
	jne	SHORT $LN6@Unguarded_
	cmp	eax, DWORD PTR __Last$[esp+36]
	je	$LN105@Unguarded_

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi
$LN64@Unguarded_:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	edi, ecx
	add	esi, 8
	add	ecx, 8
	add	eax, 8
	cmp	edi, edx
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR __Tmp$220098[esp+40], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$220098[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	edi, DWORD PTR __Tmp$220098[esp+40]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$220098[esp+44]
	mov	DWORD PTR [edx+4], edi
	jmp	$LL23@Unguarded_
$LN6@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	ebx, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN3@Unguarded_
	sub	ecx, 8
	cmp	ebx, ecx
	je	SHORT $LN78@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edi
$LN78@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 8
	cmp	ecx, esi
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebx
	je	SHORT $LN92@Unguarded_
	mov	ebp, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edi
$LN92@Unguarded_:
	add	eax, 8

; 3076 : 		}

	jmp	$LL23@Unguarded_
$LN105@Unguarded_:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+36]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::make_heap<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::make_heap<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -8					; fffffff8H
	cmp	edx, 8
	jle	SHORT $LN1@make_heap

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::pop_heap<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	edx, eax
	push	esi
	sub	edx, ecx
	mov	esi, edx
	and	esi, -8					; fffffff8H
	cmp	esi, 8
	push	edi
	jle	SHORT $LN12@pop_heap

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax-8]
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], ebx
	mov	ebx, DWORD PTR [ecx+4]
	sub	esp, 8
	mov	DWORD PTR [eax-4], ebx
	mov	eax, esp
	add	edx, -8					; fffffff8H
	sar	edx, 3
	push	edx
	push	0
	push	ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN12@pop_heap:

; 2099 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z ; CvUnitProductionAI::CvUnitProductionAI
;	COMDAT xdata$x
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z$0
__ehfuncinfo$??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvunitproductionai.cpp
xdata$x	ENDS
;	COMDAT ??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
_pUnits$ = 12						; size = 4
??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z PROC ; CvUnitProductionAI::CvUnitProductionAI, COMDAT
; _this$ = ecx

; 21   : {

	push	-1
	push	__ehhandler$??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	edx, DWORD PTR _pUnits$[esp+12]
	mov	eax, ecx
	mov	ecx, DWORD PTR _pCity$[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	lea	ecx, DWORD PTR [eax+20]
	mov	edx, 90					; 0000005aH
	mov	DWORD PTR [eax+12], 0
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+8], ecx
	lea	ecx, DWORD PTR [eax+756]
	mov	DWORD PTR [eax+744], ecx

; 22   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR [eax+748], 0
	mov	DWORD PTR [eax+752], edx
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ	; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>
__ehhandler$??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvUnitProductionAI@@QAE@PAVCvCity@@PAVCvUnitXMLEntries@@@Z ENDP ; CvUnitProductionAI::CvUnitProductionAI
PUBLIC	??1CvUnitProductionAI@@QAE@XZ			; CvUnitProductionAI::~CvUnitProductionAI
;	COMDAT xdata$x
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvUnitProductionAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvUnitProductionAI@@QAE@XZ$0
__ehfuncinfo$??1CvUnitProductionAI@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvUnitProductionAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvunitproductionai.cpp
xdata$x	ENDS
;	COMDAT ??1CvUnitProductionAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvUnitProductionAI@@QAE@XZ PROC			; CvUnitProductionAI::~CvUnitProductionAI, COMDAT
; _this$ = ecx

; 26   : {

	push	-1
	push	__ehhandler$??1CvUnitProductionAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi

; 27   : }

	mov	eax, DWORD PTR [esi+744]
	lea	ecx, DWORD PTR [esi+756]
	mov	DWORD PTR __$EHRec$[esp+28], 0
	cmp	eax, ecx
	je	SHORT $LN10@CvUnitProd
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN10@CvUnitProd:
	mov	eax, DWORD PTR [esi+8]
	add	esi, 20					; 00000014H
	cmp	eax, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	pop	esi
	je	SHORT $LN27@CvUnitProd
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN27@CvUnitProd:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvUnitProductionAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ	; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>
__ehhandler$??1CvUnitProductionAI@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvUnitProductionAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvUnitProductionAI@@QAE@XZ ENDP			; CvUnitProductionAI::~CvUnitProductionAI
PUBLIC	?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z ; CvWeightedVector<int,90,1>::push_back
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z PROC ; CvWeightedVector<int,90,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+732], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@2
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
$LN5@push_back@2:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@2
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@2:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z ENDP ; CvWeightedVector<int,90,1>::push_back
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	mov	eax, ecx
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap
	mov	ebx, 8
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	lea	esi, DWORD PTR [ecx-8]
	jle	SHORT $LN2@Sort_heap
$LN24@Sort_heap:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 8
	mov	DWORD PTR [esi+4], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [ebx+esi-8]
	sar	ecx, 3
	push	ecx
	push	0
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN2@Sort_heap:
	sub	esi, 8
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 3
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap
$LN1@Sort_heap:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?Reset@CvUnitProductionAI@@QAEXXZ		; CvUnitProductionAI::Reset
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvunitproductionai.cpp
;	COMDAT ?Reset@CvUnitProductionAI@@QAEXXZ
_TEXT	SEGMENT
?Reset@CvUnitProductionAI@@QAEXXZ PROC			; CvUnitProductionAI::Reset, COMDAT
; _this$ = ecx

; 31   : {

	push	ebx
	push	ebp
	mov	ebp, ecx

; 32   : 	CvAssertMsg(m_pUnits != NULL, "Unit Production AI init failure: unit entries are NULL");
; 33   : 
; 34   : 	m_UnitAIWeights.clear();

	xor	ebx, ebx
	mov	DWORD PTR [ebp+12], ebx

; 35   : 
; 36   : 	// Loop through reading each one and add an entry with 0 weight to our vector
; 37   : 	if(m_pUnits)

	mov	ecx, DWORD PTR [ebp+4]
	cmp	ecx, ebx
	je	SHORT $LN1@Reset
	push	edi

; 38   : 	{
; 39   : #ifdef AUI_WARNING_FIXES
; 40   : 		for (uint i = 0; i < m_pUnits->GetNumUnits(); i++)
; 41   : #else
; 42   : 		for(int i = 0; i < m_pUnits->GetNumUnits(); i++)

	xor	edi, edi
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	test	eax, eax
	jle	SHORT $LN33@Reset
	push	esi
	lea	esi, DWORD PTR [ebp+8]
$LL3@Reset:

; 43   : #endif
; 44   : 		{
; 45   : 			m_UnitAIWeights.push_back(i, 0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+732], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN21@Reset
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
$LN21@Reset:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	cmp	eax, ebx
	je	SHORT $LN24@Reset
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
$LN24@Reset:
	inc	DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ebp+4]
	inc	edi
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	cmp	edi, eax
	jl	SHORT $LL3@Reset
	pop	esi
$LN33@Reset:
	pop	edi
$LN1@Reset:
	pop	ebp
	pop	ebx

; 46   : 		}
; 47   : 	}
; 48   : }

	ret	0
?Reset@CvUnitProductionAI@@QAEXXZ ENDP			; CvUnitProductionAI::Reset
_TEXT	ENDS
PUBLIC	?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z ; CvUnitProductionAI::Read
EXTRN	?LogMessage@CvGlobals@@QAEXPBD@Z:PROC		; CvGlobals::LogMessage
EXTRN	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z:PROC ; CvInfosSerializationHelper::ReadHashed
;	COMDAT xdata$x
; File s:\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z$0
__ehfuncinfo$?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvunitproductionai.cpp
xdata$x	ENDS
;	COMDAT ?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_bValid$217984 = -53					; size = 1
_iNumEntries$217978 = -52				; size = 4
_iWeight$ = -48						; size = 4
_uiVersion$ = -44					; size = 4
_szError$217989 = -40					; size = 28
__$EHRec$ = -12						; size = 12
_kStream$ = 8						; size = 4
?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z PROC	; CvUnitProductionAI::Read, COMDAT
; _this$ = ecx

; 52   : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 44					; 0000002cH
	push	ebx
	push	ebp
	push	esi

; 53   : 	// Version number to maintain backwards compatibility
; 54   : 	uint uiVersion;
; 55   : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[esp+68]
	mov	ebp, ecx
	mov	ecx, DWORD PTR _kStream$[esp+64]
	push	eax
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 56   : 
; 57   : 	int iWeight;
; 58   : 
; 59   : 	// Reset vector
; 60   : 	m_UnitAIWeights.clear();

	xor	ebx, ebx
	lea	esi, DWORD PTR [ebp+8]
	mov	DWORD PTR [esi+4], ebx

; 61   : 
; 62   : 	// Loop through reading each one and adding it to our vector
; 63   : 	if(m_pUnits)

	mov	ecx, DWORD PTR [ebp+4]
	cmp	ecx, ebx
	je	$LN6@Read
	push	edi

; 64   : 	{
; 65   : #ifdef AUI_WARNING_FIXES
; 66   : 		for (uint i = 0; i < m_pUnits->GetNumUnits(); i++)
; 67   : #else
; 68   : 		for(int i = 0; i < m_pUnits->GetNumUnits(); i++)

	xor	edi, edi
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	test	eax, eax
	jle	SHORT $LN9@Read
	npad	6
$LL11@Read:

; 69   : #endif
; 70   : 		{
; 71   : 			m_UnitAIWeights.push_back(i, 0);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+732], bl
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN32@Read
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
$LN32@Read:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	cmp	eax, ebx
	je	SHORT $LN35@Read
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
$LN35@Read:
	inc	DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ebp+4]
	inc	edi
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	cmp	edi, eax
	jl	SHORT $LL11@Read
$LN9@Read:

; 72   : 		}
; 73   : 
; 74   : #ifdef AUI_WARNING_FIXES
; 75   : 		uint iNumEntries;
; 76   : 		int iType;
; 77   : 
; 78   : 		kStream >> iNumEntries;
; 79   : 
; 80   : 		for (uint iI = 0; iI < iNumEntries; iI++)
; 81   : #else
; 82   : 		int iNumEntries;
; 83   : 		int iType;
; 84   : 
; 85   : 		kStream >> iNumEntries;

	mov	ecx, DWORD PTR _kStream$[esp+68]
	lea	eax, DWORD PTR _iNumEntries$217978[esp+72]
	push	eax
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 86   : 
; 87   : 		for(int iI = 0; iI < iNumEntries; iI++)

	cmp	DWORD PTR _iNumEntries$217978[esp+72], ebx
	jle	$LN63@Read
	or	ebp, -1
$LL8@Read:

; 88   : #endif
; 89   : 		{
; 90   : 			bool bValid = true;
; 91   : 			iType = CvInfosSerializationHelper::ReadHashed(kStream, &bValid);

	mov	edx, DWORD PTR _kStream$[esp+68]
	lea	ecx, DWORD PTR _bValid$217984[esp+72]
	push	ecx
	push	edx
	mov	BYTE PTR _bValid$217984[esp+80], 1
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	mov	edi, eax
	add	esp, 8

; 92   : 			if(iType != -1 || !bValid)

	cmp	edi, ebp
	jne	SHORT $LN4@Read
	cmp	BYTE PTR _bValid$217984[esp+72], 0
	jne	SHORT $LN7@Read
$LN4@Read:

; 93   : 			{
; 94   : 				kStream >> iWeight;

	mov	ecx, DWORD PTR _kStream$[esp+68]
	lea	eax, DWORD PTR _iWeight$[esp+72]
	push	eax
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 95   : 				if(iType != -1)

	cmp	edi, ebp
	je	SHORT $LN3@Read

; 96   : 				{
; 97   : 					m_UnitAIWeights.IncreaseWeight(iType, iWeight);

	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _iWeight$[esp+72]
	add	DWORD PTR [ecx+edi*8+4], edx
	lea	eax, DWORD PTR [ecx+edi*8+4]

; 98   : 				}
; 99   : 				else

	jmp	SHORT $LN7@Read
$LN3@Read:

; 100  : 				{
; 101  : 					CvString szError;

	lea	ecx, DWORD PTR _szError$217989[esp+72]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 102  : 					szError.Format("LOAD ERROR: Unit Type not found");

	lea	eax, DWORD PTR _szError$217989[esp+72]
	push	OFFSET $SG217990
	push	eax
	mov	DWORD PTR __$EHRec$[esp+88], 0
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 103  : 					GC.LogMessage(szError.GetCString());

	lea	ecx, DWORD PTR _szError$217989[esp+72]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?LogMessage@CvGlobals@@QAEXPBD@Z	; CvGlobals::LogMessage

; 104  : 					CvAssertMsg(false, szError);
; 105  : 				}

	lea	ecx, DWORD PTR _szError$217989[esp+72]
	mov	DWORD PTR __$EHRec$[esp+80], ebp
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN7@Read:
	inc	ebx
	cmp	ebx, DWORD PTR _iNumEntries$217978[esp+72]
	jl	$LL8@Read
$LN63@Read:
	pop	edi
$LN6@Read:

; 106  : 			}
; 107  : 		}
; 108  : 	}
; 109  : 	else
; 110  : 	{
; 111  : 		CvAssertMsg(m_pUnits != NULL, "Unit Production AI init failure: unit entries are NULL");
; 112  : 	}
; 113  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+68]
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 56					; 00000038H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z$0:
	lea	ecx, DWORD PTR _szError$217989[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Read@CvUnitProductionAI@@QAEXAAVFDataStream@@@Z ENDP	; CvUnitProductionAI::Read
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z
_TEXT	SEGMENT
__Mid$218252 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort:
	test	esi, esi
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$218252[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,90,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$218252[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$218252[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -8					; fffffff8H
	and	edx, -8					; fffffff8H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$218252[esp+36]
$LN26@Sort:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort
$LN25@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -8					; fffffff8H
	cmp	eax, 8
	jle	SHORT $LN10@Sort
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::sort<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::sort<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 3
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::sort<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@H$0FK@$00@@QAEXXZ	; CvWeightedVector<int,90,1>::SortItems
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?SortItems@?$CvWeightedVector@H$0FK@$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@H$0FK@$00@@QAEXXZ PROC	; CvWeightedVector<int,90,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@H$0FK@$00@@QAEXXZ ENDP	; CvWeightedVector<int,90,1>::SortItems
_TEXT	ENDS
PUBLIC	?RecommendUnit@CvUnitProductionAI@@QAE?AW4UnitTypes@@W4UnitAITypes@@@Z ; CvUnitProductionAI::RecommendUnit
EXTRN	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z:PROC ; CityStrategyAIHelpers::ReweightByTurnsLeft
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4UnitTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?GetUnitAIType@CvUnitEntry@@QBE_NH@Z:PROC	; CvUnitEntry::GetUnitAIType
EXTRN	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z:PROC ; CvCity::canTrain
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvunitproductionai.cpp
;	COMDAT ?RecommendUnit@CvUnitProductionAI@@QAE?AW4UnitTypes@@W4UnitAITypes@@@Z
_TEXT	SEGMENT
_elem$220843 = -8					; size = 8
_eUnitAIType$ = 8					; size = 4
?RecommendUnit@CvUnitProductionAI@@QAE?AW4UnitTypes@@W4UnitAITypes@@@Z PROC ; CvUnitProductionAI::RecommendUnit, COMDAT
; _this$ = ecx

; 186  : {

	sub	esp, 8
	push	ebx

; 187  : #ifdef AUI_WARNING_FIXES
; 188  : 	uint iUnitLoop;
; 189  : #else
; 190  : 	int iUnitLoop;
; 191  : #endif
; 192  : 	int iWeight;
; 193  : 	int iTurnsLeft;
; 194  : 
; 195  : 	if(eUnitAIType <= NO_UNITAI)

	mov	ebx, DWORD PTR _eUnitAIType$[esp+8]
	cmp	ebx, -1
	push	ebp
	mov	ebp, ecx

; 196  : 	{
; 197  : 		return NO_UNIT;

	jle	$LN2@RecommendU
	push	edi

; 198  : 	}
; 199  : 
; 200  : 	// Reset list of all the possible units
; 201  : 	m_Buildables.clear();

	xor	edi, edi

; 202  : 
; 203  : 	// Loop through adding the available units
; 204  : 	for(iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR [ebp+748], edi
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	test	eax, eax
	jle	$LN7@RecommendU
	push	esi
	npad	9
$LL62@RecommendU:

; 205  : 	{
; 206  : 		const UnitTypes eUnit = static_cast<UnitTypes>(iUnitLoop);
; 207  : 		CvUnitEntry* pkUnitInfo = GC.getUnitInfo(eUnit);

	push	edi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	esi, eax

; 208  : 		if(pkUnitInfo)

	test	esi, esi
	je	SHORT $LN8@RecommendU

; 209  : 		{
; 210  : 			// Make sure this unit can be built now
; 211  : 			if(m_pCity->canTrain(eUnit))

	mov	ecx, DWORD PTR [ebp]
	push	0
	push	0
	push	0
	push	0
	push	0
	push	edi
	call	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z ; CvCity::canTrain
	test	al, al
	je	SHORT $LN8@RecommendU

; 212  : 			{
; 213  : 				// Make sure it matches the requested unit AI type
; 214  : 				if(eUnitAIType == NO_UNITAI || pkUnitInfo->GetUnitAIType(eUnitAIType))

	push	ebx
	mov	ecx, esi
	call	?GetUnitAIType@CvUnitEntry@@QBE_NH@Z	; CvUnitEntry::GetUnitAIType
	test	al, al
	je	SHORT $LN8@RecommendU

; 215  : 				{
; 216  : 					// Update weight based on turns to construct
; 217  : 					iTurnsLeft = m_pCity->getProductionTurnsLeft(eUnit, 0);

	mov	ecx, DWORD PTR [ebp]
	push	0
	push	edi
	call	?getProductionTurnsLeft@CvCity@@QBEHW4UnitTypes@@H@Z ; CvCity::getProductionTurnsLeft

; 218  : 					iWeight = CityStrategyAIHelpers::ReweightByTurnsLeft(m_UnitAIWeights.GetWeight(eUnit), iTurnsLeft);

	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ecx+edi*8]
	mov	ecx, DWORD PTR [ecx+edi*8+4]
	push	eax
	push	ecx
	mov	DWORD PTR _elem$220843[esp+32], edx

; 219  : 					m_Buildables.push_back(iUnitLoop, iWeight);

	lea	esi, DWORD PTR [ebp+744]
	call	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z ; CityStrategyAIHelpers::ReweightByTurnsLeft
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+8]
	add	esp, 8
	mov	BYTE PTR [esi+732], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN33@RecommendU
	push	eax
	mov	ecx, esi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
$LN33@RecommendU:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN36@RecommendU
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
$LN36@RecommendU:
	inc	DWORD PTR [esi+4]
	mov	ebx, DWORD PTR _eUnitAIType$[esp+20]
$LN8@RecommendU:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	edi
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	cmp	edi, eax
	jl	$LL62@RecommendU
	pop	esi
$LN7@RecommendU:

; 220  : 				}
; 221  : 			}
; 222  : 		}
; 223  : 
; 224  : 	}
; 225  : 
; 226  : 	// Sort items and grab the first one
; 227  : 	if(m_Buildables.size() > 0)

	cmp	DWORD PTR [ebp+748], 0
	pop	edi
	jle	SHORT $LN2@RecommendU

; 228  : 	{
; 229  : 		m_Buildables.SortItems();

	mov	eax, DWORD PTR [ebp+744]
	mov	edx, DWORD PTR [ebp+748]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 230  : 		LogPossibleBuilds(eUnitAIType);

	push	ebx
	mov	ecx, ebp
	call	?LogPossibleBuilds@CvUnitProductionAI@@QAEXW4UnitAITypes@@@Z ; CvUnitProductionAI::LogPossibleBuilds

; 231  : 		return (UnitTypes)m_Buildables.GetElement(0);

	mov	eax, DWORD PTR [ebp+744]
	mov	eax, DWORD PTR [eax]
	pop	ebp
	pop	ebx

; 238  : 	}
; 239  : }

	add	esp, 8
	ret	4
$LN2@RecommendU:
	pop	ebp

; 232  : 	}
; 233  : 
; 234  : 	// Unless we didn't find any
; 235  : 	else
; 236  : 	{
; 237  : 		return NO_UNIT;

	or	eax, -1
	pop	ebx

; 238  : 	}
; 239  : }

	add	esp, 8
	ret	4
?RecommendUnit@CvUnitProductionAI@@QAE?AW4UnitTypes@@W4UnitAITypes@@@Z ENDP ; CvUnitProductionAI::RecommendUnit
_TEXT	ENDS
END
