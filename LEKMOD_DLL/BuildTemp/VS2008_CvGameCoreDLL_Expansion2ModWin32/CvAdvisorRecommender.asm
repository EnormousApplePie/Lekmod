; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\EnormousApplePie\Documents\GitHub\Lekmod\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvAdvisorRecommender.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG218490 DB	'FLAVOR_CITY_DEFENSE', 00H
$SG218494 DB	'FLAVOR_NAVAL_GROWTH', 00H
$SG218498 DB	'FLAVOR_NAVAL_TILE_IMPROVEMENT', 00H
	ORG $+2
$SG218502 DB	'FLAVOR_EXPANSION', 00H
	ORG $+3
$SG218506 DB	'FLAVOR_GROWTH', 00H
	ORG $+2
$SG218510 DB	'FLAVOR_TILE_IMPROVEMENT', 00H
$SG218514 DB	'FLAVOR_INFRASTRUCTURE', 00H
	ORG $+2
$SG218518 DB	'FLAVOR_PRODUCTION', 00H
	ORG $+2
$SG218522 DB	'FLAVOR_GOLD', 00H
$SG218526 DB	'FLAVOR_CULTURE', 00H
	ORG $+1
$SG218530 DB	'FLAVOR_HAPPINESS', 00H
	ORG $+3
$SG218534 DB	'FLAVOR_WONDER', 00H
	ORG $+2
$SG218538 DB	'FLAVOR_WATER_CONNECTION', 00H
$SG218542 DB	'FLAVOR_OFFENSE', 00H
	ORG $+1
$SG218546 DB	'FLAVOR_DEFENSE', 00H
	ORG $+1
$SG218550 DB	'FLAVOR_CITY_DEFENSE', 00H
$SG218554 DB	'FLAVOR_MILITARY_TRAINING', 00H
	ORG $+3
$SG218558 DB	'FLAVOR_RECON', 00H
	ORG $+3
$SG218562 DB	'FLAVOR_RANGED', 00H
	ORG $+2
$SG218566 DB	'FLAVOR_MOBILE', 00H
	ORG $+2
$SG218570 DB	'FLAVOR_NAVAL', 00H
	ORG $+3
$SG218574 DB	'FLAVOR_NAVAL_RECON', 00H
	ORG $+1
$SG218578 DB	'FLAVOR_AIR', 00H
	ORG $+1
$SG218582 DB	'FLAVOR_INFRASTRUCTURE', 00H
	ORG $+2
$SG218586 DB	'FLAVOR_PRODUCTION', 00H
	ORG $+2
$SG218590 DB	'FLAVOR_NUKE', 00H
$SG218594 DB	'FLAVOR_CITY_DEFENSE', 00H
$SG218598 DB	'FLAVOR_RECON', 00H
	ORG $+3
$SG218602 DB	'FLAVOR_NAVAL_RECON', 00H
	ORG $+1
$SG218606 DB	'FLAVOR_GREAT_PEOPLE', 00H
$SG218610 DB	'FLAVOR_WONDER', 00H
	ORG $+2
$SG218614 DB	'FLAVOR_RELIGION', 00H
$SG218618 DB	'FLAVOR_DIPLOMACY', 00H
	ORG $+3
$SG218622 DB	'FLAVOR_NUKE', 00H
$SG218626 DB	'FLAVOR_CITY_DEFENSE', 00H
$SG218630 DB	'FLAVOR_NAVAL_TILE_IMPROVEMENT', 00H
	ORG $+2
$SG218634 DB	'FLAVOR_TILE_IMPROVEMENT', 00H
$SG218638 DB	'FLAVOR_RECON', 00H
	ORG $+3
$SG218642 DB	'FLAVOR_NAVAL_RECON', 00H
	ORG $+1
$SG218646 DB	'FLAVOR_AIR', 00H
	ORG $+1
$SG218650 DB	'FLAVOR_SCIENCE', 00H
	ORG $+1
$SG218654 DB	'FLAVOR_SPACESHIP', 00H
	ORG $+3
$SG218658 DB	'FLAVOR_NUKE', 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Ogtpy
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	edi
	mov	edi, DWORD PTR ___n$[esp]
	sub	edi, 1
	js	SHORT $LN1@vector
	push	ebx
	mov	ebx, DWORD PTR ___f$[esp+4]
	push	ebp
	mov	ebp, DWORD PTR ___s$[esp+8]
	push	esi
	mov	esi, DWORD PTR ___t$[esp+12]
	npad	7
$LL2@vector:
	mov	ecx, esi
	call	ebx
	add	esi, ebp
	sub	edi, 1
	jns	SHORT $LL2@vector
	pop	esi
	pop	ebp
	pop	ebx
$LN1@vector:
	pop	edi
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?Uninit@CvAdvisorRecommender@@QAEXXZ		; CvAdvisorRecommender::Uninit
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
;	COMDAT ?Uninit@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
?Uninit@CvAdvisorRecommender@@QAEXXZ PROC		; CvAdvisorRecommender::Uninit, COMDAT
; _this$ = ecx

; 32   : }

	ret	0
?Uninit@CvAdvisorRecommender@@QAEXXZ ENDP		; CvAdvisorRecommender::Uninit
_TEXT	ENDS
PUBLIC	?IsUnitRecommended@CvAdvisorRecommender@@QAE_NW4UnitTypes@@W4AdvisorTypes@@@Z ; CvAdvisorRecommender::IsUnitRecommended
; Function compile flags: /Ogtpy
;	COMDAT ?IsUnitRecommended@CvAdvisorRecommender@@QAE_NW4UnitTypes@@W4AdvisorTypes@@@Z
_TEXT	SEGMENT
_eUnit$ = 8						; size = 4
_eAdvisor$ = 12						; size = 4
?IsUnitRecommended@CvAdvisorRecommender@@QAE_NW4UnitTypes@@W4AdvisorTypes@@@Z PROC ; CvAdvisorRecommender::IsUnitRecommended, COMDAT
; _this$ = ecx

; 172  : 	if(m_aRecommendedBuilds[eAdvisor].m_eBuildableType == CITY_BUILDABLE_UNIT && (UnitTypes)m_aRecommendedBuilds[eAdvisor].m_iIndex == eUnit)

	mov	eax, DWORD PTR _eAdvisor$[esp-4]
	lea	eax, DWORD PTR [eax+eax*2]
	cmp	DWORD PTR [ecx+eax*4], 2
	lea	eax, DWORD PTR [ecx+eax*4]
	jne	SHORT $LN2@IsUnitReco
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _eUnit$[esp-4]
	jne	SHORT $LN2@IsUnitReco

; 173  : 	{
; 174  : 		return true;

	mov	al, 1

; 179  : 	}
; 180  : }

	ret	8
$LN2@IsUnitReco:

; 175  : 	}
; 176  : 	else
; 177  : 	{
; 178  : 		return false;

	xor	al, al

; 179  : 	}
; 180  : }

	ret	8
?IsUnitRecommended@CvAdvisorRecommender@@QAE_NW4UnitTypes@@W4AdvisorTypes@@@Z ENDP ; CvAdvisorRecommender::IsUnitRecommended
_TEXT	ENDS
PUBLIC	?IsBuildingRecommended@CvAdvisorRecommender@@QAE_NW4BuildingTypes@@W4AdvisorTypes@@@Z ; CvAdvisorRecommender::IsBuildingRecommended
; Function compile flags: /Ogtpy
;	COMDAT ?IsBuildingRecommended@CvAdvisorRecommender@@QAE_NW4BuildingTypes@@W4AdvisorTypes@@@Z
_TEXT	SEGMENT
_eBuilding$ = 8						; size = 4
_eAdvisor$ = 12						; size = 4
?IsBuildingRecommended@CvAdvisorRecommender@@QAE_NW4BuildingTypes@@W4AdvisorTypes@@@Z PROC ; CvAdvisorRecommender::IsBuildingRecommended, COMDAT
; _this$ = ecx

; 184  : 	if(m_aRecommendedBuilds[eAdvisor].m_eBuildableType == CITY_BUILDABLE_BUILDING && (BuildingTypes)m_aRecommendedBuilds[eAdvisor].m_iIndex == eBuilding)

	mov	eax, DWORD PTR _eAdvisor$[esp-4]
	lea	eax, DWORD PTR [eax+eax*2]
	cmp	DWORD PTR [ecx+eax*4], 1
	lea	eax, DWORD PTR [ecx+eax*4]
	jne	SHORT $LN2@IsBuilding
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _eBuilding$[esp-4]
	jne	SHORT $LN2@IsBuilding

; 185  : 	{
; 186  : 		return true;

	mov	al, 1

; 191  : 	}
; 192  : }

	ret	8
$LN2@IsBuilding:

; 187  : 	}
; 188  : 	else
; 189  : 	{
; 190  : 		return false;

	xor	al, al

; 191  : 	}
; 192  : }

	ret	8
?IsBuildingRecommended@CvAdvisorRecommender@@QAE_NW4BuildingTypes@@W4AdvisorTypes@@@Z ENDP ; CvAdvisorRecommender::IsBuildingRecommended
_TEXT	ENDS
PUBLIC	?IsProjectRecommended@CvAdvisorRecommender@@QAE_NW4ProjectTypes@@W4AdvisorTypes@@@Z ; CvAdvisorRecommender::IsProjectRecommended
; Function compile flags: /Ogtpy
;	COMDAT ?IsProjectRecommended@CvAdvisorRecommender@@QAE_NW4ProjectTypes@@W4AdvisorTypes@@@Z
_TEXT	SEGMENT
_eProject$ = 8						; size = 4
_eAdvisor$ = 12						; size = 4
?IsProjectRecommended@CvAdvisorRecommender@@QAE_NW4ProjectTypes@@W4AdvisorTypes@@@Z PROC ; CvAdvisorRecommender::IsProjectRecommended, COMDAT
; _this$ = ecx

; 196  : 	if(m_aRecommendedBuilds[eAdvisor].m_eBuildableType == CITY_BUILDABLE_PROJECT && (ProjectTypes)m_aRecommendedBuilds[eAdvisor].m_iIndex == eProject)

	mov	eax, DWORD PTR _eAdvisor$[esp-4]
	lea	eax, DWORD PTR [eax+eax*2]
	cmp	DWORD PTR [ecx+eax*4], 3
	lea	eax, DWORD PTR [ecx+eax*4]
	jne	SHORT $LN2@IsProjectR
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _eProject$[esp-4]
	jne	SHORT $LN2@IsProjectR

; 197  : 	{
; 198  : 		return true;

	mov	al, 1

; 203  : 	}
; 204  : }

	ret	8
$LN2@IsProjectR:

; 199  : 	}
; 200  : 	else
; 201  : 	{
; 202  : 		return false;

	xor	al, al

; 203  : 	}
; 204  : }

	ret	8
?IsProjectRecommended@CvAdvisorRecommender@@QAE_NW4ProjectTypes@@W4AdvisorTypes@@@Z ENDP ; CvAdvisorRecommender::IsProjectRecommended
_TEXT	ENDS
PUBLIC	?IsTechRecommended@CvAdvisorRecommender@@QAE_NW4TechTypes@@W4AdvisorTypes@@@Z ; CvAdvisorRecommender::IsTechRecommended
; Function compile flags: /Ogtpy
;	COMDAT ?IsTechRecommended@CvAdvisorRecommender@@QAE_NW4TechTypes@@W4AdvisorTypes@@@Z
_TEXT	SEGMENT
_eTech$ = 8						; size = 4
_eAdvisor$ = 12						; size = 4
?IsTechRecommended@CvAdvisorRecommender@@QAE_NW4TechTypes@@W4AdvisorTypes@@@Z PROC ; CvAdvisorRecommender::IsTechRecommended, COMDAT
; _this$ = ecx

; 309  : 	return (m_aRecommendedTechs[eAdvisor] == eTech);

	mov	edx, DWORD PTR _eAdvisor$[esp-4]
	mov	ecx, DWORD PTR [ecx+edx*4+48]
	xor	eax, eax
	cmp	ecx, DWORD PTR _eTech$[esp-4]
	sete	al

; 310  : }

	ret	8
?IsTechRecommended@CvAdvisorRecommender@@QAE_NW4TechTypes@@W4AdvisorTypes@@@Z ENDP ; CvAdvisorRecommender::IsTechRecommended
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax*8]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ PROC ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@XZ ENDP ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@XZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@XZ PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@XZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@XZ PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax*8]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0FA@$00@@QAE@XZ ; CvWeightedVector<int,80,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0FA@$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@H$0FA@$00@@QAE@XZ PROC ; CvWeightedVector<int,80,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@H$0FA@$00@@QAE@XZ ENDP ; CvWeightedVector<int,80,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 129  : 		FAssert(ui < m_uiCurrSize);
; 130  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 131  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR _ui$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
CONST	SEGMENT
??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@ DB 'c:\users\eno'
	DB	'rmousapplepie\documents\github\lekmod\lekmod_dll\fireplace\in'
	DB	'clude\fireworks\FFastVector.h', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 4
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 4
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@H$03$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<int,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::Alloc
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 80					; 00000050H
	jbe	SHORT $LN2@Alloc@2

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@2:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 80			; 00000050H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0FA@$00@@QAE@ABU01@@Z ; CvWeightedVector<int,80,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0FA@$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@H$0FA@$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<int,80,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@H$0FA@$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<int,80,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::Alloc
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 50					; 00000032H
	jbe	SHORT $LN2@Alloc@3

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	mov	eax, edi
	shl	eax, 4
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@3:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 50			; 00000032H
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@ABU01@@Z ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::Alloc
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 4
	jbe	SHORT $LN2@Alloc@4

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	mov	eax, edi
	shl	eax, 4
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc@4:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 4
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@ABU01@@Z ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??$max@H@std@@YAABHABH0@Z			; std::max<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$max@H@std@@YAABHABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@H@std@@YAABHABH0@Z PROC				; std::max<int>, COMDAT

; 3384 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN4@max
	mov	eax, ecx
$LN4@max:

; 3385 : 	}

	ret	0
??$max@H@std@@YAABHABH0@Z ENDP				; std::max<int>
_TEXT	ENDS
PUBLIC	??$implicit_cast@PAVCvGame@@PAV1@@detail@fastdelegate@@YAPAVCvGame@@PAV2@@Z ; fastdelegate::detail::implicit_cast<CvGame *,CvGame *>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$implicit_cast@PAVCvGame@@PAV1@@detail@fastdelegate@@YAPAVCvGame@@PAV2@@Z
_TEXT	SEGMENT
_input$ = 8						; size = 4
??$implicit_cast@PAVCvGame@@PAV1@@detail@fastdelegate@@YAPAVCvGame@@PAV2@@Z PROC ; fastdelegate::detail::implicit_cast<CvGame *,CvGame *>, COMDAT

; 153  : 	return input;

	mov	eax, DWORD PTR _input$[esp-4]

; 154  : }

	ret	0
??$implicit_cast@PAVCvGame@@PAV1@@detail@fastdelegate@@YAPAVCvGame@@PAV2@@Z ENDP ; fastdelegate::detail::implicit_cast<CvGame *,CvGame *>
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@H$03$00@@QBE_NABU01@@Z ; CvWeightedVector<int,4,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??MWeightedElement@?$CvWeightedVector@H$03$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@H$03$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<int,4,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@H$03$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<int,4,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@H$0FA@$00@@QBE_NABU01@@Z ; CvWeightedVector<int,80,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
;	COMDAT ??MWeightedElement@?$CvWeightedVector@H$0FA@$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@H$0FA@$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<int,80,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@H$0FA@$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<int,80,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBE_NABU01@@Z ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
;	COMDAT ??MWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBE_NABU01@@Z ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
;	COMDAT ??MWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>::pair<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::pair<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>::pair<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::pair<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>::pair<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::pair<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>::pair<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::pair<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>::pair<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::pair<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>::pair<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::pair<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>::pair<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::pair<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>::pair<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::pair<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>::pair<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::pair<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>::pair<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$Convert@VCvGame@@P81@AEHHPBD@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SAPAVGenericClass@12@PAVCvGame@@P84@AEHHPBD@ZAAP8312@AEXXZ@Z ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<CvGame,int (__thiscall CvGame::*)(int,char const *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$Convert@VCvGame@@P81@AEHHPBD@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SAPAVGenericClass@12@PAVCvGame@@P84@AEHHPBD@ZAAP8312@AEXXZ@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
_function_to_bind$ = 12					; size = 4
_bound_func$ = 16					; size = 4
??$Convert@VCvGame@@P81@AEHHPBD@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SAPAVGenericClass@12@PAVCvGame@@P84@AEHHPBD@ZAAP8312@AEXXZ@Z PROC ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<CvGame,int (__thiscall CvGame::*)(int,char const *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>, COMDAT

; 306  : 			GenericMemFuncType &bound_func) {
; 307  : #if defined __DMC__  
; 308  : 		// Digital Mars doesn't allow you to cast between abitrary PMF's, 
; 309  : 		// even though the standard says you can. The 32-bit compiler lets you
; 310  : 		// static_cast through an int, but the DOS compiler doesn't.
; 311  : 		bound_func = horrible_cast<GenericMemFuncType>(function_to_bind);
; 312  : #else 
; 313  :         bound_func = reinterpret_cast<GenericMemFuncType>(function_to_bind);

	mov	eax, DWORD PTR _bound_func$[esp-4]
	mov	ecx, DWORD PTR _function_to_bind$[esp-4]
	mov	DWORD PTR [eax], ecx

; 314  : #endif
; 315  :         return reinterpret_cast<GenericClass *>(pthis);

	mov	eax, DWORD PTR _pthis$[esp-4]

; 316  : 	}

	ret	0
??$Convert@VCvGame@@P81@AEHHPBD@ZP8GenericClass@detail@fastdelegate@@AEXXZ@?$SimplifyMemFunc@$03@detail@fastdelegate@@SAPAVGenericClass@12@PAVCvGame@@P84@AEHHPBD@ZAAP8312@AEXXZ@Z ENDP ; fastdelegate::detail::SimplifyMemFunc<4>::Convert<CvGame,int (__thiscall CvGame::*)(int,char const *),void (__thiscall fastdelegate::detail::GenericClass::*)(void)>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; std::_Dist_type<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$03$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$03$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z ; std::_Dist_type<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ; std::_Dist_type<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z ; std::_Dist_type<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::swap<CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::swap<CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::swap<CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::swap<CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::swap<CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap@2

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap@2:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::swap<CvWeightedVector<int,80,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::swap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::swap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap@3

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	ebx
	mov	ebx, DWORD PTR [eax+12]
	push	ebp

; 21   : 
; 22   : 		_Left = _Right;

	mov	ebp, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx+12], ebx
	pop	ebx
$LN1@swap@3:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::swap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::swap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::swap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap@4

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	ebx
	mov	ebx, DWORD PTR [eax+12]
	push	ebp

; 21   : 
; 22   : 		_Left = _Right;

	mov	ebp, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx+12], ebx
	pop	ebx
$LN1@swap@4:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::swap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap
	npad	1
$LL3@Push_heap:
	cmp	DWORD PTR [esi+eax*8+4], ebx
	jle	SHORT $LN1@Push_heap

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	edx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [esi+ecx*8+4], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap
$LN1@Push_heap:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	pop	edi
	mov	DWORD PTR [esi+ecx*8+4], ebx
	mov	DWORD PTR [esi+ecx*8], eax
	pop	esi
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Iter_random<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw
	push	esi
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw
	pop	esi
$LN1@Copy_backw:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap@2
	npad	1
$LL3@Push_heap@2:
	cmp	DWORD PTR [esi+eax*8+4], ebx
	jle	SHORT $LN1@Push_heap@2

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	edx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [esi+ecx*8+4], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap@2
$LN1@Push_heap@2:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	pop	edi
	mov	DWORD PTR [esi+ecx*8+4], ebx
	mov	DWORD PTR [esi+ecx*8], eax
	pop	esi
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Iter_random<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw@2
	push	esi
$LL2@Copy_backw@2:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw@2
	pop	esi
$LN1@Copy_backw@2:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 16
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+12]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap@3
	push	ebp
$LL3@Push_heap@3:
	mov	edx, eax
	shl	edx, 4
	add	edx, esi
	cmp	DWORD PTR [edx+12], ebx
	jle	SHORT $LN10@Push_heap@3

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	ebp, DWORD PTR [edx]
	shl	ecx, 4
	add	ecx, esi
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap@3
$LN10@Push_heap@3:
	pop	ebp
$LN1@Push_heap@3:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	mov	edx, DWORD PTR __Val$[esp+12]
	shl	ecx, 4
	add	ecx, esi
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val$[esp+16]
	pop	edi
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], eax
	pop	esi
	mov	DWORD PTR [ecx+12], ebx
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Iter_random<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw@3
	push	esi
$LL2@Copy_backw@3:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-16]
	sub	ecx, 16					; 00000010H
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw@3
	pop	esi
$LN1@Copy_backw@3:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 16
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+12]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap@4
	push	ebp
$LL3@Push_heap@4:
	mov	edx, eax
	shl	edx, 4
	add	edx, esi
	cmp	DWORD PTR [edx+12], ebx
	jle	SHORT $LN10@Push_heap@4

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	ebp, DWORD PTR [edx]
	shl	ecx, 4
	add	ecx, esi
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap@4
$LN10@Push_heap@4:
	pop	ebp
$LN1@Push_heap@4:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	mov	edx, DWORD PTR __Val$[esp+12]
	shl	ecx, 4
	add	ecx, esi
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR __Val$[esp+16]
	pop	edi
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], eax
	pop	esi
	mov	DWORD PTR [ecx+12], ebx
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Iter_random<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw@4
	push	esi
$LL2@Copy_backw@4:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-16]
	sub	ecx, 16					; 00000010H
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw@4
	pop	esi
$LN1@Copy_backw@4:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	?getNumFlavorTypes@CvGlobals@@QAEHXZ		; CvGlobals::getNumFlavorTypes
; Function compile flags: /Ogtpy
;	COMDAT ?getNumFlavorTypes@CvGlobals@@QAEHXZ
_TEXT	SEGMENT
?getNumFlavorTypes@CvGlobals@@QAEHXZ PROC		; CvGlobals::getNumFlavorTypes, COMDAT
; _this$ = ecx

; 804  : 		return m_iNumFlavorTypes;

	mov	eax, DWORD PTR [ecx+1764]

; 805  : 	}

	ret	0
?getNumFlavorTypes@CvGlobals@@QAEHXZ ENDP		; CvGlobals::getNumFlavorTypes
_TEXT	ENDS
PUBLIC	?getFlavorTypes@CvGlobals@@QAEAAVCvString@@W4FlavorTypes@@@Z ; CvGlobals::getFlavorTypes
; Function compile flags: /Ogtpy
;	COMDAT ?getFlavorTypes@CvGlobals@@QAEAAVCvString@@W4FlavorTypes@@@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?getFlavorTypes@CvGlobals@@QAEAAVCvString@@W4FlavorTypes@@@Z PROC ; CvGlobals::getFlavorTypes, COMDAT
; _this$ = ecx

; 812  : 		CvAssert(e > -1); /*CvAssert(e < GC.getNumFlavorTypes())*/;
; 813  : 		return m_paszFlavorTypes[e];

	mov	eax, DWORD PTR _e$[esp-4]
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
	mov	eax, DWORD PTR [ecx+1760]
	lea	eax, DWORD PTR [eax+edx*4]

; 814  : 	}

	ret	4
?getFlavorTypes@CvGlobals@@QAEAAVCvString@@W4FlavorTypes@@@Z ENDP ; CvGlobals::getFlavorTypes
_TEXT	ENDS
PUBLIC	?getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT@CvGlobals@@QAEMXZ ; CvGlobals::getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT
EXTRN	__fltused:DWORD
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT@CvGlobals@@QAEMXZ PROC ; CvGlobals::getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT, COMDAT
; _this$ = ecx

; 7020 : 		return m_fAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT;

	fld	DWORD PTR [ecx+8008]

; 7021 : 	}

	ret	0
?getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT@CvGlobals@@QAEMXZ ENDP ; CvGlobals::getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT
_TEXT	ENDS
PUBLIC	?getAI_RESEARCH_WEIGHT_BASE_MOD@CvGlobals@@QAEMXZ ; CvGlobals::getAI_RESEARCH_WEIGHT_BASE_MOD
; Function compile flags: /Ogtpy
;	COMDAT ?getAI_RESEARCH_WEIGHT_BASE_MOD@CvGlobals@@QAEMXZ
_TEXT	SEGMENT
?getAI_RESEARCH_WEIGHT_BASE_MOD@CvGlobals@@QAEMXZ PROC	; CvGlobals::getAI_RESEARCH_WEIGHT_BASE_MOD, COMDAT
; _this$ = ecx

; 7024 : 		return m_fAI_RESEARCH_WEIGHT_BASE_MOD;

	fld	DWORD PTR [ecx+8012]

; 7025 : 	}

	ret	0
?getAI_RESEARCH_WEIGHT_BASE_MOD@CvGlobals@@QAEMXZ ENDP	; CvGlobals::getAI_RESEARCH_WEIGHT_BASE_MOD
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	??0CvString@@QAE@ABV0@@Z			; CvString::CvString
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??0CvString@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0CvString@@QAE@ABV0@@Z PROC				; CvString::CvString, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, esi
	pop	esi
	ret	4
??0CvString@@QAE@ABV0@@Z ENDP				; CvString::CvString
_TEXT	ENDS
PUBLIC	??0DelegateMemento@fastdelegate@@QAE@XZ		; fastdelegate::DelegateMemento::DelegateMemento
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??0DelegateMemento@fastdelegate@@QAE@XZ
_TEXT	SEGMENT
??0DelegateMemento@fastdelegate@@QAE@XZ PROC		; fastdelegate::DelegateMemento::DelegateMemento, COMDAT
; _this$ = ecx

; 579  : 	DelegateMemento() : m_pthis(0), m_pFunction(0) {};

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0DelegateMemento@fastdelegate@@QAE@XZ ENDP		; fastdelegate::DelegateMemento::DelegateMemento
_TEXT	ENDS
PUBLIC	?clear@DelegateMemento@fastdelegate@@QAEXXZ	; fastdelegate::DelegateMemento::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@DelegateMemento@fastdelegate@@QAEXXZ
_TEXT	SEGMENT
?clear@DelegateMemento@fastdelegate@@QAEXXZ PROC	; fastdelegate::DelegateMemento::clear, COMDAT
; _this$ = ecx

; 580  : 	void clear() {	m_pthis=0; m_pFunction=0;	}

	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@DelegateMemento@fastdelegate@@QAEXXZ ENDP	; fastdelegate::DelegateMemento::clear
_TEXT	ENDS
PUBLIC	?SetMementoFrom@DelegateMemento@fastdelegate@@IAEXABV12@@Z ; fastdelegate::DelegateMemento::SetMementoFrom
; Function compile flags: /Ogtpy
;	COMDAT ?SetMementoFrom@DelegateMemento@fastdelegate@@IAEXABV12@@Z
_TEXT	SEGMENT
_right$ = 8						; size = 4
?SetMementoFrom@DelegateMemento@fastdelegate@@IAEXABV12@@Z PROC ; fastdelegate::DelegateMemento::SetMementoFrom, COMDAT
; _this$ = ecx

; 637  : 		m_pFunction = right.m_pFunction;

	mov	eax, DWORD PTR _right$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 638  : 		m_pthis = right.m_pthis;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 639  : #if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
; 640  : 		m_pStaticFunction = right.m_pStaticFunction;
; 641  : #endif
; 642  : 	}

	ret	4
?SetMementoFrom@DelegateMemento@fastdelegate@@IAEXABV12@@Z ENDP ; fastdelegate::DelegateMemento::SetMementoFrom
_TEXT	ENDS
PUBLIC	??0CvCityBuildable@@QAE@XZ			; CvCityBuildable::CvCityBuildable
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcitystrategyai.h
;	COMDAT ??0CvCityBuildable@@QAE@XZ
_TEXT	SEGMENT
??0CvCityBuildable@@QAE@XZ PROC				; CvCityBuildable::CvCityBuildable, COMDAT
; _this$ = ecx

; 119  : 	{

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx

; 120  : 	}

	ret	0
??0CvCityBuildable@@QAE@XZ ENDP				; CvCityBuildable::CvCityBuildable
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvCity@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvCity>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z ; CvAdvisorRecommender::AdvisorInterestInFlavor
EXTRN	__imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z:PROC
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z$0
__ehfuncinfo$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
xdata$x	ENDS
;	COMDAT ?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z
_TEXT	SEGMENT
_strFlavorName$ = -40					; size = 28
__$EHRec$ = -12						; size = 12
_eAdvisor$ = 8						; size = 4
_eFlavor$ = 12						; size = 4
?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z PROC ; CvAdvisorRecommender::AdvisorInterestInFlavor, COMDAT
; _this$ = ecx

; 313  : {

	push	-1
	push	__ehhandler$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH

; 314  : 	CvString strFlavorName = GC.getFlavorTypes(eFlavor);

	mov	eax, DWORD PTR _eFlavor$[esp+36]
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1760
	lea	ecx, DWORD PTR [eax*8]
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]
	push	esi
	push	eax
	lea	ecx, DWORD PTR _strFlavorName$[esp+48]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 315  : 
; 316  : 	switch(eAdvisor)

	mov	eax, DWORD PTR _eAdvisor$[esp+40]
	mov	DWORD PTR __$EHRec$[esp+52], 0
	cmp	eax, 3
	ja	$LN1@AdvisorInt
	jmp	DWORD PTR $LN239@AdvisorInt[eax*4]
$LN86@AdvisorInt:

; 317  : 	{
; 318  : 	case ADVISOR_ECONOMIC:
; 319  : 		if(strFlavorName == "FLAVOR_CITY_DEFENSE")

	mov	esi, DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218490
	push	eax
	call	esi
	add	esp, 8

; 320  : 		{
; 321  : 			return 1;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	je	SHORT $LN85@AdvisorInt
$LN230@AdvisorInt:
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 1
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN85@AdvisorInt:

; 322  : 		}
; 323  : 		else if(strFlavorName == "FLAVOR_NAVAL_GROWTH")

	push	OFFSET $SG218494
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 324  : 		{
; 325  : 			return 10;

	jne	$LN231@AdvisorInt

; 326  : 		}
; 327  : 		else if(strFlavorName == "FLAVOR_NAVAL_TILE_IMPROVEMENT")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218498
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 328  : 		{
; 329  : 			return 10;

	jne	$LN231@AdvisorInt

; 330  : 		}
; 331  : 		else if(strFlavorName == "FLAVOR_EXPANSION")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218502
	push	eax
	call	esi
	add	esp, 8

; 332  : 		{
; 333  : 			return 10;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	je	SHORT $LN79@AdvisorInt
$LN232@AdvisorInt:
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 10					; 0000000aH
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN79@AdvisorInt:

; 334  : 		}
; 335  : 		else if(strFlavorName == "FLAVOR_GROWTH")

	push	OFFSET $SG218506
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 336  : 		{
; 337  : 			return 10;

	jne	$LN231@AdvisorInt

; 338  : 		}
; 339  : 		else if(strFlavorName == "FLAVOR_TILE_IMPROVEMENT")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218510
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 340  : 		{
; 341  : 			return 10;

	jne	$LN231@AdvisorInt

; 342  : 		}
; 343  : 		else if(strFlavorName == "FLAVOR_INFRASTRUCTURE")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218514
	push	eax
	call	esi
	add	esp, 8

; 344  : 		{
; 345  : 			return 5;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	je	SHORT $LN73@AdvisorInt
$LN233@AdvisorInt:
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 5
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN73@AdvisorInt:

; 346  : 		}
; 347  : 		else if(strFlavorName == "FLAVOR_PRODUCTION")

	push	OFFSET $SG218518
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 348  : 		{
; 349  : 			return 10;

	jne	$LN231@AdvisorInt

; 350  : 		}
; 351  : 		else if(strFlavorName == "FLAVOR_GOLD")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218522
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 352  : 		{
; 353  : 			return 10;

	jne	$LN231@AdvisorInt

; 354  : 		}
; 355  : 		else if(strFlavorName == "FLAVOR_CULTURE")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218526
	push	eax
	call	esi
	add	esp, 8

; 356  : 		{
; 357  : 			return 10;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	jne	$LN232@AdvisorInt

; 358  : 		}
; 359  : 		else if(strFlavorName == "FLAVOR_HAPPINESS")

	push	OFFSET $SG218530
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 360  : 		{
; 361  : 			return 10;

	jne	$LN231@AdvisorInt

; 362  : 		}
; 363  : 		else if(strFlavorName == "FLAVOR_WONDER")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218534
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 364  : 		{
; 365  : 			return 5;

	jne	SHORT $LN234@AdvisorInt

; 366  : 		}
; 367  : 		else if(strFlavorName == "FLAVOR_WATER_CONNECTION")

	push	OFFSET $SG218538
$LN235@AdvisorInt:
	lea	eax, DWORD PTR _strFlavorName$[esp+48]
	push	eax
	call	esi
	add	esp, 8
	test	al, al
	je	$LN1@AdvisorInt
$LN234@AdvisorInt:

; 368  : 		{
; 369  : 			return 5;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 5
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN60@AdvisorInt:

; 370  : 		}
; 371  : 
; 372  : 		break;
; 373  : 	case ADVISOR_MILITARY:
; 374  : 		if(strFlavorName == "FLAVOR_OFFENSE")

	mov	esi, DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218542
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 375  : 		{
; 376  : 			return 10;

	jne	$LN231@AdvisorInt

; 377  : 		}
; 378  : 		else if(strFlavorName == "FLAVOR_DEFENSE")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218546
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 379  : 		{
; 380  : 			return 10;

	jne	$LN231@AdvisorInt

; 381  : 		}
; 382  : 		else if(strFlavorName == "FLAVOR_CITY_DEFENSE")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218550
	push	eax
	call	esi
	add	esp, 8

; 383  : 		{
; 384  : 			return 5;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	jne	$LN233@AdvisorInt

; 385  : 		}
; 386  : 		else if(strFlavorName == "FLAVOR_MILITARY_TRAINING")

	push	OFFSET $SG218554
	push	ecx
	call	esi
	add	esp, 8
	test	al, al
	je	SHORT $LN53@AdvisorInt
$LN236@AdvisorInt:

; 387  : 		{
; 388  : 			return 7;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 7
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN53@AdvisorInt:

; 389  : 		}
; 390  : 		else if(strFlavorName == "FLAVOR_RECON")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218558
	push	edx
	call	esi
	add	esp, 8
	test	al, al
	je	SHORT $LN51@AdvisorInt
$LN237@AdvisorInt:

; 391  : 		{
; 392  : 			return 3;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 3
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN51@AdvisorInt:

; 393  : 		}
; 394  : 		else if(strFlavorName == "FLAVOR_RANGED")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218562
	push	eax
	call	esi
	add	esp, 8

; 395  : 		{
; 396  : 			return 10;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	jne	$LN232@AdvisorInt

; 397  : 		}
; 398  : 		else if(strFlavorName == "FLAVOR_MOBILE")

	push	OFFSET $SG218566
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 399  : 		{
; 400  : 			return 7;

	jne	$LN236@AdvisorInt

; 401  : 		}
; 402  : 		else if(strFlavorName == "FLAVOR_NAVAL")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218570
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 403  : 		{
; 404  : 			return 10;

	jne	$LN231@AdvisorInt

; 405  : 		}
; 406  : 		else if(strFlavorName == "FLAVOR_NAVAL_RECON")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218574
	push	eax
	call	esi
	add	esp, 8

; 407  : 		{
; 408  : 			return 3;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	je	SHORT $LN43@AdvisorInt
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 3
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN43@AdvisorInt:

; 409  : 		}
; 410  : 		else if(strFlavorName == "FLAVOR_AIR")

	push	OFFSET $SG218578
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 411  : 		{
; 412  : 			return 10;

	jne	SHORT $LN231@AdvisorInt

; 413  : 		}
; 414  : 		else if(strFlavorName == "FLAVOR_INFRASTRUCTURE")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218582
	push	edx
	call	esi
	add	esp, 8
	test	al, al
	je	SHORT $LN39@AdvisorInt
$LN238@AdvisorInt:

; 415  : 		{
; 416  : 			return 1;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 1
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN39@AdvisorInt:

; 417  : 		}
; 418  : 		else if(strFlavorName == "FLAVOR_PRODUCTION")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218586
	push	eax
	call	esi
	add	esp, 8

; 419  : 		{
; 420  : 			return 1;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	jne	$LN230@AdvisorInt

; 421  : 		}
; 422  : 		else if(strFlavorName == "FLAVOR_NUKE")

	push	OFFSET $SG218590
	push	ecx
	call	esi
	add	esp, 8
	test	al, al
	je	$LN1@AdvisorInt
$LN231@AdvisorInt:

; 423  : 		{
; 424  : 			return 10;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, 10					; 0000000aH
	pop	esi

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
$LN34@AdvisorInt:

; 425  : 		}
; 426  : 		break;
; 427  : 	case ADVISOR_FOREIGN:
; 428  : 		if(strFlavorName == "FLAVOR_CITY_DEFENSE")

	mov	esi, DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218594
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 429  : 		{
; 430  : 			return 1;

	jne	$LN238@AdvisorInt

; 431  : 		}
; 432  : 		else if(strFlavorName == "FLAVOR_RECON")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218598
	push	eax
	call	esi
	add	esp, 8

; 433  : 		{
; 434  : 			return 10;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	jne	$LN232@AdvisorInt

; 435  : 		}
; 436  : 		else if(strFlavorName == "FLAVOR_NAVAL_RECON")

	push	OFFSET $SG218602
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 437  : 		{
; 438  : 			return 10;

	jne	SHORT $LN231@AdvisorInt

; 439  : 		}
; 440  : 		else if(strFlavorName == "FLAVOR_GREAT_PEOPLE")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218606
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 441  : 		{
; 442  : 			return 5;

	jne	$LN234@AdvisorInt

; 443  : 		}
; 444  : 		else if(strFlavorName == "FLAVOR_WONDER")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218610
	push	eax
	call	esi
	add	esp, 8

; 445  : 		{
; 446  : 			return 5;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	jne	$LN233@AdvisorInt

; 447  : 		}
; 448  : 		else if(strFlavorName == "FLAVOR_RELIGION")

	push	OFFSET $SG218614
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 449  : 		{
; 450  : 			return 10;

	jne	$LN231@AdvisorInt

; 451  : 		}
; 452  : 		else if(strFlavorName == "FLAVOR_DIPLOMACY")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218618
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 453  : 		{
; 454  : 			return 10;

	jne	$LN231@AdvisorInt

; 455  : 		}
; 456  : 		else if(strFlavorName == "FLAVOR_NUKE")

	push	OFFSET $SG218622

; 457  : 		{
; 458  : 			return 5;

	jmp	$LN235@AdvisorInt
$LN18@AdvisorInt:

; 459  : 		}
; 460  : 		break;
; 461  : 	case ADVISOR_SCIENCE:
; 462  : 		if(strFlavorName == "FLAVOR_CITY_DEFENSE")

	mov	esi, DWORD PTR __imp_??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218626
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 463  : 		{
; 464  : 			return 1;

	jne	$LN238@AdvisorInt

; 465  : 		}
; 466  : 		else if(strFlavorName == "FLAVOR_NAVAL_TILE_IMPROVEMENT")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218630
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 467  : 		{
; 468  : 			return 1;

	jne	$LN238@AdvisorInt

; 469  : 		}
; 470  : 		else if(strFlavorName == "FLAVOR_TILE_IMPROVEMENT")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218634
	push	eax
	call	esi
	add	esp, 8

; 471  : 		{
; 472  : 			return 1;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	jne	$LN230@AdvisorInt

; 473  : 		}
; 474  : 		else if(strFlavorName == "FLAVOR_RECON")

	push	OFFSET $SG218638
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 475  : 		{
; 476  : 			return 3;

	jne	$LN237@AdvisorInt

; 477  : 		}
; 478  : 		else if(strFlavorName == "FLAVOR_NAVAL_RECON")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218642
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 479  : 		{
; 480  : 			return 3;

	jne	$LN237@AdvisorInt

; 481  : 		}
; 482  : 		else if(strFlavorName == "FLAVOR_AIR")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218646
	push	eax
	call	esi
	add	esp, 8

; 483  : 		{
; 484  : 			return 5;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	test	al, al
	jne	$LN233@AdvisorInt

; 485  : 		}
; 486  : 		else if(strFlavorName == "FLAVOR_SCIENCE")

	push	OFFSET $SG218650
	push	ecx
	call	esi
	add	esp, 8
	test	al, al

; 487  : 		{
; 488  : 			return 10;

	jne	$LN231@AdvisorInt

; 489  : 		}
; 490  : 		else if(strFlavorName == "FLAVOR_SPACESHIP")

	lea	edx, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218654
	push	edx
	call	esi
	add	esp, 8
	test	al, al

; 491  : 		{
; 492  : 			return 10;

	jne	$LN231@AdvisorInt

; 493  : 		}
; 494  : 		else if(strFlavorName == "FLAVOR_NUKE")

	lea	eax, DWORD PTR _strFlavorName$[esp+44]
	push	OFFSET $SG218658
	push	eax
	call	esi
	add	esp, 8
	test	al, al

; 495  : 		{
; 496  : 			return 3;

	jne	$LN237@AdvisorInt
$LN1@AdvisorInt:

; 497  : 		}
; 498  : 		break;
; 499  : 	}
; 500  : 
; 501  : 	return 0;

	lea	ecx, DWORD PTR _strFlavorName$[esp+44]
	mov	DWORD PTR __$EHRec$[esp+52], -1
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 502  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+44]
	xor	eax, eax
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	ret	8
	npad	3
$LN239@AdvisorInt:
	DD	$LN60@AdvisorInt
	DD	$LN86@AdvisorInt
	DD	$LN34@AdvisorInt
	DD	$LN18@AdvisorInt
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z$0:
	lea	ecx, DWORD PTR _strFlavorName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z:
	mov	eax, OFFSET __ehfuncinfo$?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z ENDP ; CvAdvisorRecommender::AdvisorInterestInFlavor
PUBLIC	?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z ; CvAdvisorRecommender::FindUnassignedAdvisorForTech
EXTRN	?GetFlavorValue@CvTechEntry@@QBEHH@Z:PROC	; CvTechEntry::GetFlavorValue
EXTRN	?GetEntry@CvTechXMLEntries@@QAEPAVCvTechEntry@@H@Z:PROC ; CvTechXMLEntries::GetEntry
EXTRN	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ:PROC ; CvPlayerTechs::GetTechs
EXTRN	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ:PROC ; CvPlayer::GetPlayerTechs
; Function compile flags: /Ogtpy
;	COMDAT ?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z
_TEXT	SEGMENT
_aiAdvisorValues$ = -16					; size = 16
_pTechEntry$ = 8					; size = 4
_ePlayer$ = 8						; size = 4
_eTech$ = 12						; size = 4
?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z PROC ; CvAdvisorRecommender::FindUnassignedAdvisorForTech, COMDAT
; _this$ = ecx

; 505  : {

	sub	esp, 16					; 00000010H

; 506  : 	int aiAdvisorValues[NUM_ADVISOR_TYPES];
; 507  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 508  : 	{
; 509  : 		aiAdvisorValues[ui] = 0;
; 510  : 	}
; 511  : 
; 512  : 	CvTechEntry* pTechEntry = GET_PLAYER(ePlayer).GetPlayerTechs()->GetTechs()->GetEntry(eTech);

	mov	eax, DWORD PTR _eTech$[esp+12]
	push	ebx
	push	ebp
	mov	ebp, ecx
	mov	ecx, DWORD PTR _ePlayer$[esp+20]
	imul	ecx, 63236				; 0000f704H
	add	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	esi
	push	edi
	xor	edi, edi
	xor	ebx, ebx
	push	eax
	mov	DWORD PTR _aiAdvisorValues$[esp+36], ebx
	mov	DWORD PTR _aiAdvisorValues$[esp+40], edi
	mov	DWORD PTR _aiAdvisorValues$[esp+44], edi
	mov	DWORD PTR _aiAdvisorValues$[esp+48], edi
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	ecx, eax
	call	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ ; CvPlayerTechs::GetTechs
	mov	ecx, eax
	call	?GetEntry@CvTechXMLEntries@@QAEPAVCvTechEntry@@H@Z ; CvTechXMLEntries::GetEntry
	mov	esi, eax
	mov	DWORD PTR _pTechEntry$[esp+28], esi

; 513  : 	if(pTechEntry == NULL)

	cmp	esi, edi
	jne	SHORT $LN13@FindUnassi
	pop	edi
	pop	esi
	pop	ebp

; 514  : 	{
; 515  : 		//Should never happen.
; 516  : 		return NO_ADVISOR_TYPE;

	or	eax, -1
	pop	ebx

; 549  : 		}
; 550  : 	}
; 551  : 
; 552  : 	return eWinningAdvisor;
; 553  : }

	add	esp, 16					; 00000010H
	ret	8
$LN13@FindUnassi:

; 517  : 	}
; 518  : 
; 519  : 	for(int i = 0; i < GC.getNumFlavorTypes(); i++)

	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764, edi
	jle	SHORT $LN10@FindUnassi
$LL12@FindUnassi:

; 520  : 	{
; 521  : 		FlavorTypes eFlavor = (FlavorTypes)i;
; 522  : 		int iTechFlavorValue = pTechEntry->GetFlavorValue(eFlavor);

	push	edi
	mov	ecx, esi
	call	?GetFlavorValue@CvTechEntry@@QBEHH@Z	; CvTechEntry::GetFlavorValue
	mov	ebx, eax

; 523  : 		if(iTechFlavorValue <= 0)

	test	ebx, ebx
	jle	SHORT $LN11@FindUnassi

; 524  : 		{
; 525  : 			continue;
; 526  : 		}
; 527  : 
; 528  : 		for(uint uiAdvisor = 0; uiAdvisor < NUM_ADVISOR_TYPES; uiAdvisor++)

	xor	esi, esi
$LL8@FindUnassi:

; 529  : 		{
; 530  : 			AdvisorTypes eAdvisor = (AdvisorTypes)uiAdvisor;
; 531  : 			aiAdvisorValues[uiAdvisor] += iTechFlavorValue * AdvisorInterestInFlavor(eAdvisor, eFlavor);

	push	edi
	push	esi
	mov	ecx, ebp
	call	?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z ; CvAdvisorRecommender::AdvisorInterestInFlavor
	imul	eax, ebx
	add	DWORD PTR _aiAdvisorValues$[esp+esi*4+32], eax
	inc	esi
	cmp	esi, 4
	jb	SHORT $LL8@FindUnassi

; 524  : 		{
; 525  : 			continue;
; 526  : 		}
; 527  : 
; 528  : 		for(uint uiAdvisor = 0; uiAdvisor < NUM_ADVISOR_TYPES; uiAdvisor++)

	mov	esi, DWORD PTR _pTechEntry$[esp+28]
$LN11@FindUnassi:

; 517  : 	}
; 518  : 
; 519  : 	for(int i = 0; i < GC.getNumFlavorTypes(); i++)

	inc	edi
	cmp	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	jl	SHORT $LL12@FindUnassi
	mov	ebx, DWORD PTR _aiAdvisorValues$[esp+32]
	xor	edi, edi
$LN10@FindUnassi:

; 532  : 		}
; 533  : 	}
; 534  : 
; 535  : 	AdvisorTypes eWinningAdvisor = NO_ADVISOR_TYPE;

	or	esi, -1

; 536  : 	int iHighestValue = 0;

	xor	ecx, ecx
	mov	eax, esi

; 537  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 538  : 	{
; 539  : 		// skip this advisor if already assigned
; 540  : 		if(m_aRecommendedTechs[ui] != NO_TECH)

	cmp	DWORD PTR [ebp+48], esi
	jne	SHORT $LN4@FindUnassi

; 541  : 		{
; 542  : 			continue;
; 543  : 		}
; 544  : 
; 545  : 		if(aiAdvisorValues[ui] > iHighestValue)

	cmp	ebx, edi
	jle	SHORT $LN4@FindUnassi

; 546  : 		{
; 547  : 			eWinningAdvisor = (AdvisorTypes)ui;

	xor	eax, eax

; 548  : 			iHighestValue = aiAdvisorValues[ui];

	mov	ecx, ebx
$LN4@FindUnassi:

; 537  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 538  : 	{
; 539  : 		// skip this advisor if already assigned
; 540  : 		if(m_aRecommendedTechs[ui] != NO_TECH)

	cmp	DWORD PTR [ebp+52], esi
	jne	SHORT $LN37@FindUnassi

; 541  : 		{
; 542  : 			continue;
; 543  : 		}
; 544  : 
; 545  : 		if(aiAdvisorValues[ui] > iHighestValue)

	mov	edx, DWORD PTR _aiAdvisorValues$[esp+36]
	cmp	edx, ecx
	jle	SHORT $LN37@FindUnassi

; 546  : 		{
; 547  : 			eWinningAdvisor = (AdvisorTypes)ui;

	mov	eax, 1

; 548  : 			iHighestValue = aiAdvisorValues[ui];

	mov	ecx, edx
$LN37@FindUnassi:

; 537  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 538  : 	{
; 539  : 		// skip this advisor if already assigned
; 540  : 		if(m_aRecommendedTechs[ui] != NO_TECH)

	cmp	DWORD PTR [ebp+56], esi
	jne	SHORT $LN39@FindUnassi

; 541  : 		{
; 542  : 			continue;
; 543  : 		}
; 544  : 
; 545  : 		if(aiAdvisorValues[ui] > iHighestValue)

	mov	edx, DWORD PTR _aiAdvisorValues$[esp+40]
	cmp	edx, ecx
	jle	SHORT $LN39@FindUnassi

; 546  : 		{
; 547  : 			eWinningAdvisor = (AdvisorTypes)ui;

	mov	eax, 2

; 548  : 			iHighestValue = aiAdvisorValues[ui];

	mov	ecx, edx
$LN39@FindUnassi:

; 537  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 538  : 	{
; 539  : 		// skip this advisor if already assigned
; 540  : 		if(m_aRecommendedTechs[ui] != NO_TECH)

	cmp	DWORD PTR [ebp+60], esi
	jne	SHORT $LN17@FindUnassi

; 541  : 		{
; 542  : 			continue;
; 543  : 		}
; 544  : 
; 545  : 		if(aiAdvisorValues[ui] > iHighestValue)

	cmp	DWORD PTR _aiAdvisorValues$[esp+44], ecx
	jle	SHORT $LN17@FindUnassi

; 546  : 		{
; 547  : 			eWinningAdvisor = (AdvisorTypes)ui;

	mov	eax, 3
$LN17@FindUnassi:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 549  : 		}
; 550  : 	}
; 551  : 
; 552  : 	return eWinningAdvisor;
; 553  : }

	add	esp, 16					; 00000010H
	ret	8
?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z ENDP ; CvAdvisorRecommender::FindUnassignedAdvisorForTech
_TEXT	ENDS
PUBLIC	?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z ; CvAdvisorRecommender::FindUnassignedAdvisorForBuildable
EXTRN	?GetFlavorValue@CvProjectEntry@@QBEHH@Z:PROC	; CvProjectEntry::GetFlavorValue
EXTRN	?GetFlavorValue@CvUnitEntry@@QBEHH@Z:PROC	; CvUnitEntry::GetFlavorValue
EXTRN	?GetFlavorValue@CvBuildingEntry@@QBEHH@Z:PROC	; CvBuildingEntry::GetFlavorValue
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
EXTRN	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z:PROC ; CvGlobals::getProjectInfo
; Function compile flags: /Ogtpy
;	COMDAT ?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z
_TEXT	SEGMENT
_pBuilding$ = -28					; size = 4
_pUnit$ = -24						; size = 4
_pProject$ = -20					; size = 4
_aiAdvisorValues$ = -16					; size = 16
___formal$ = 8						; size = 4
_buildable$ = 12					; size = 4
?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z PROC ; CvAdvisorRecommender::FindUnassignedAdvisorForBuildable, COMDAT
; _this$ = ecx

; 560  : {

	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	mov	ebp, ecx

; 561  : 	int aiAdvisorValues[NUM_ADVISOR_TYPES];
; 562  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 563  : 	{
; 564  : 		aiAdvisorValues[ui] = 0;
; 565  : 	}
; 566  : 
; 567  : 	CvBuildingEntry* pBuilding = NULL;
; 568  : 	CvUnitEntry*     pUnit     = NULL;
; 569  : 	CvProjectEntry*  pProject  = NULL;
; 570  : 	switch(buildable.m_eBuildableType)

	mov	ecx, DWORD PTR _buildable$[esp+32]
	mov	eax, DWORD PTR [ecx]
	push	esi
	xor	esi, esi
	xor	ebx, ebx
	sub	eax, 1
	mov	DWORD PTR _aiAdvisorValues$[esp+40], esi
	mov	DWORD PTR _aiAdvisorValues$[esp+44], ebx
	mov	DWORD PTR _aiAdvisorValues$[esp+48], esi
	mov	DWORD PTR _aiAdvisorValues$[esp+52], esi
	mov	DWORD PTR _pBuilding$[esp+40], esi
	mov	DWORD PTR _pUnit$[esp+40], esi
	mov	DWORD PTR _pProject$[esp+40], esi
	je	SHORT $LN19@FindUnassi@2
	sub	eax, 1
	je	SHORT $LN20@FindUnassi@2
	sub	eax, 1
	jne	SHORT $LN21@FindUnassi@2

; 577  : 		break;
; 578  : 	case CITY_BUILDABLE_PROJECT:
; 579  : 		pProject = GC.getProjectInfo((ProjectTypes)buildable.m_iIndex);

	mov	eax, DWORD PTR [ecx+4]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getProjectInfo@CvGlobals@@QAEPAVCvProjectEntry@@W4ProjectTypes@@@Z ; CvGlobals::getProjectInfo
	mov	DWORD PTR _pProject$[esp+40], eax

; 580  : 		break;

	jmp	SHORT $LN21@FindUnassi@2
$LN20@FindUnassi@2:

; 571  : 	{
; 572  : 	case CITY_BUILDABLE_UNIT:
; 573  : 		pUnit = GC.getUnitInfo((UnitTypes)buildable.m_iIndex);

	mov	ecx, DWORD PTR [ecx+4]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pUnit$[esp+40], eax

; 574  : 		break;

	jmp	SHORT $LN21@FindUnassi@2
$LN19@FindUnassi@2:

; 575  : 	case CITY_BUILDABLE_BUILDING:
; 576  : 		pBuilding = GC.getBuildingInfo((BuildingTypes)buildable.m_iIndex);

	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pBuilding$[esp+40], eax
$LN21@FindUnassi@2:
	push	edi

; 581  : 	}
; 582  : 
; 583  : 	for(int i = 0; i < GC.getNumFlavorTypes(); i++)

	xor	edi, edi
	cmp	DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764, ebx
	jle	SHORT $LN15@FindUnassi@2
$LL53@FindUnassi@2:

; 584  : 	{
; 585  : 		FlavorTypes eFlavor = (FlavorTypes)i;
; 586  : 		int iFlavorValue = 0;
; 587  : 		if(pBuilding)

	mov	ecx, DWORD PTR _pBuilding$[esp+44]
	test	ecx, ecx
	je	SHORT $LN14@FindUnassi@2

; 588  : 		{
; 589  : 			iFlavorValue = pBuilding->GetFlavorValue(eFlavor);

	push	edi
	call	?GetFlavorValue@CvBuildingEntry@@QBEHH@Z ; CvBuildingEntry::GetFlavorValue
	jmp	SHORT $LN54@FindUnassi@2
$LN14@FindUnassi@2:

; 590  : #ifdef AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS
; 591  : 			CvPlayer* pPlayer = pCity->GetPlayer();
; 592  : 			CvPlayerPolicies* pPlayerPolicies = NULL;
; 593  : 			if (pPlayer)
; 594  : 				pPlayerPolicies = pPlayer->GetPlayerPolicies();
; 595  : 			if (pPlayerPolicies)
; 596  : 			{
; 597  : 				for (int iI = 0; iI < GC.getNumPolicyInfos(); iI++)
; 598  : 				{
; 599  : 					PolicyTypes ePolicy = static_cast<PolicyTypes>(iI);
; 600  : 					CvPolicyEntry* pPolicy = GC.getPolicyInfo(ePolicy);
; 601  : 					if (pPolicy && pPlayerPolicies->HasPolicy(ePolicy))
; 602  : 					{
; 603  : 						iFlavorValue += pPolicy->GetBuildingClassFlavorChanges(pBuilding->GetBuildingClassType(), eFlavor);
; 604  : 					}
; 605  : 				}
; 606  : 			}
; 607  : #endif
; 608  : #ifdef AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS
; 609  : 			const CvReligion* pReligion = GC.getGame().GetGameReligions()->GetReligion(pCity->GetCityReligions()->GetReligiousMajority(), pCity->getOwner());
; 610  : 			if (pReligion)
; 611  : 			{
; 612  : 				pReligion->m_Beliefs.GetBuildingClassFlavorChange(static_cast<BuildingClassTypes>(pBuilding->GetBuildingClassType()), eFlavor);
; 613  : 			}
; 614  : #endif
; 615  : 		}
; 616  : 		else if(pUnit)

	mov	ecx, DWORD PTR _pUnit$[esp+44]
	test	ecx, ecx
	je	SHORT $LN12@FindUnassi@2

; 617  : 		{
; 618  : 			iFlavorValue = pUnit->GetFlavorValue(eFlavor);

	push	edi
	call	?GetFlavorValue@CvUnitEntry@@QBEHH@Z	; CvUnitEntry::GetFlavorValue
	jmp	SHORT $LN54@FindUnassi@2
$LN12@FindUnassi@2:

; 619  : 		}
; 620  : 		else if(pProject)

	mov	ecx, DWORD PTR _pProject$[esp+44]
	test	ecx, ecx
	je	SHORT $LN16@FindUnassi@2

; 621  : 		{
; 622  : 			iFlavorValue = pProject->GetFlavorValue(eFlavor);

	push	edi
	call	?GetFlavorValue@CvProjectEntry@@QBEHH@Z	; CvProjectEntry::GetFlavorValue
$LN54@FindUnassi@2:
	mov	ebx, eax

; 623  : 		}
; 624  : 
; 625  : 		if(iFlavorValue <= 0)

	test	ebx, ebx
	jle	SHORT $LN16@FindUnassi@2

; 626  : 		{
; 627  : 			continue;
; 628  : 		}
; 629  : 
; 630  : 		for(uint uiAdvisor = 0; uiAdvisor < NUM_ADVISOR_TYPES; uiAdvisor++)

	xor	esi, esi
$LL8@FindUnassi@2:

; 631  : 		{
; 632  : 			AdvisorTypes eAdvisor = (AdvisorTypes)uiAdvisor;
; 633  : 			aiAdvisorValues[uiAdvisor] += iFlavorValue * AdvisorInterestInFlavor(eAdvisor, eFlavor);

	push	edi
	push	esi
	mov	ecx, ebp
	call	?AdvisorInterestInFlavor@CvAdvisorRecommender@@QAEHW4AdvisorTypes@@W4FlavorTypes@@@Z ; CvAdvisorRecommender::AdvisorInterestInFlavor
	imul	eax, ebx
	add	DWORD PTR _aiAdvisorValues$[esp+esi*4+44], eax
	inc	esi
	cmp	esi, 4
	jb	SHORT $LL8@FindUnassi@2
$LN16@FindUnassi@2:

; 581  : 	}
; 582  : 
; 583  : 	for(int i = 0; i < GC.getNumFlavorTypes(); i++)

	inc	edi
	cmp	edi, DWORD PTR ?gGlobals@@3VCvGlobals@@A+1764
	jl	SHORT $LL53@FindUnassi@2
	mov	ebx, DWORD PTR _aiAdvisorValues$[esp+48]
	mov	esi, DWORD PTR _aiAdvisorValues$[esp+44]
$LN15@FindUnassi@2:

; 634  : 		}
; 635  : 	}
; 636  : 
; 637  : 	AdvisorTypes eWinningAdvisor = NO_ADVISOR_TYPE;
; 638  : 	int iHighestValue = 0;

	xor	ecx, ecx
	or	eax, -1
	pop	edi

; 639  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 640  : 	{
; 641  : 		// skip this advisor if already assigned
; 642  : 		if(m_aRecommendedBuilds[ui].m_eBuildableType != NOT_A_CITY_BUILDABLE)

	cmp	DWORD PTR [ebp], ecx
	jne	SHORT $LN4@FindUnassi@2

; 643  : 		{
; 644  : 			continue;
; 645  : 		}
; 646  : 
; 647  : 		if(aiAdvisorValues[ui] > iHighestValue)

	test	esi, esi
	jle	SHORT $LN4@FindUnassi@2

; 648  : 		{
; 649  : 			eWinningAdvisor = (AdvisorTypes)ui;

	xor	eax, eax

; 650  : 			iHighestValue = aiAdvisorValues[ui];

	mov	ecx, esi
$LN4@FindUnassi@2:

; 639  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 640  : 	{
; 641  : 		// skip this advisor if already assigned
; 642  : 		if(m_aRecommendedBuilds[ui].m_eBuildableType != NOT_A_CITY_BUILDABLE)

	cmp	DWORD PTR [ebp+12], 0
	jne	SHORT $LN44@FindUnassi@2

; 643  : 		{
; 644  : 			continue;
; 645  : 		}
; 646  : 
; 647  : 		if(aiAdvisorValues[ui] > iHighestValue)

	cmp	ebx, ecx
	jle	SHORT $LN44@FindUnassi@2

; 648  : 		{
; 649  : 			eWinningAdvisor = (AdvisorTypes)ui;

	mov	eax, 1

; 650  : 			iHighestValue = aiAdvisorValues[ui];

	mov	ecx, ebx
$LN44@FindUnassi@2:

; 639  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 640  : 	{
; 641  : 		// skip this advisor if already assigned
; 642  : 		if(m_aRecommendedBuilds[ui].m_eBuildableType != NOT_A_CITY_BUILDABLE)

	cmp	DWORD PTR [ebp+24], 0
	jne	SHORT $LN52@FindUnassi@2

; 643  : 		{
; 644  : 			continue;
; 645  : 		}
; 646  : 
; 647  : 		if(aiAdvisorValues[ui] > iHighestValue)

	mov	edx, DWORD PTR _aiAdvisorValues$[esp+48]
	cmp	edx, ecx
	jle	SHORT $LN52@FindUnassi@2

; 648  : 		{
; 649  : 			eWinningAdvisor = (AdvisorTypes)ui;

	mov	eax, 2

; 650  : 			iHighestValue = aiAdvisorValues[ui];

	mov	ecx, edx
$LN52@FindUnassi@2:
	cmp	DWORD PTR [ebp+36], 0
	pop	esi
	pop	ebp
	pop	ebx
	jne	SHORT $LN48@FindUnassi@2

; 643  : 		{
; 644  : 			continue;
; 645  : 		}
; 646  : 
; 647  : 		if(aiAdvisorValues[ui] > iHighestValue)

	cmp	DWORD PTR _aiAdvisorValues$[esp+40], ecx
	jle	SHORT $LN48@FindUnassi@2

; 648  : 		{
; 649  : 			eWinningAdvisor = (AdvisorTypes)ui;

	mov	eax, 3
$LN48@FindUnassi@2:

; 651  : 		}
; 652  : 	}
; 653  : 
; 654  : 	return eWinningAdvisor;
; 655  : 
; 656  : }

	add	esp, 28					; 0000001cH
	ret	8
?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z ENDP ; CvAdvisorRecommender::FindUnassignedAdvisorForBuildable
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z ; CvWeightedVector<int,4,1>::GetElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z PROC	; CvWeightedVector<int,4,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@H$03$00@@QBEABHI@Z ENDP	; CvWeightedVector<int,4,1>::GetElement
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@H$03$00@@QBEHI@Z	; CvWeightedVector<int,4,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@H$03$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -8						; size = 8
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@H$03$00@@QBEHI@Z PROC	; CvWeightedVector<int,4,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 8

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$[esp+8], edx

; 75   : 	}

	add	esp, 8
	ret	4
?GetWeight@?$CvWeightedVector@H$03$00@@QBEHI@Z ENDP	; CvWeightedVector<int,4,1>::GetWeight
_TEXT	ENDS
PUBLIC	?SetWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z	; CvWeightedVector<int,4,1>::SetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?SetWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?SetWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z PROC	; CvWeightedVector<int,4,1>::SetWeight, COMDAT
; _this$ = ecx

; 83   : 		m_pItems[iIndex].m_iWeight = iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iWeight$[esp-4]
	mov	edx, DWORD PTR _iIndex$[esp-4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 84   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 85   : 	}

	ret	8
?SetWeight@?$CvWeightedVector@H$03$00@@QAEXIH@Z ENDP	; CvWeightedVector<int,4,1>::SetWeight
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@H$03$00@@QAEHXZ	; CvWeightedVector<int,4,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@H$03$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@H$03$00@@QAEHXZ PROC		; CvWeightedVector<int,4,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@H$03$00@@QAEHXZ ENDP		; CvWeightedVector<int,4,1>::size
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@H$0FA@$00@@QBEABHI@Z ; CvWeightedVector<int,80,1>::GetElement
; Function compile flags: /Ogtpy
;	COMDAT ?GetElement@?$CvWeightedVector@H$0FA@$00@@QBEABHI@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@H$0FA@$00@@QBEABHI@Z PROC ; CvWeightedVector<int,80,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@H$0FA@$00@@QBEABHI@Z ENDP ; CvWeightedVector<int,80,1>::GetElement
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@H$0FA@$00@@QBEHI@Z ; CvWeightedVector<int,80,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@H$0FA@$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -8						; size = 8
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@H$0FA@$00@@QBEHI@Z PROC	; CvWeightedVector<int,80,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 8

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp+4]
	mov	edx, DWORD PTR [eax+ecx*8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+ecx*8+4]
	mov	DWORD PTR _elem$[esp+8], edx

; 75   : 	}

	add	esp, 8
	ret	4
?GetWeight@?$CvWeightedVector@H$0FA@$00@@QBEHI@Z ENDP	; CvWeightedVector<int,80,1>::GetWeight
_TEXT	ENDS
PUBLIC	?SetWeight@?$CvWeightedVector@H$0FA@$00@@QAEXIH@Z ; CvWeightedVector<int,80,1>::SetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?SetWeight@?$CvWeightedVector@H$0FA@$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?SetWeight@?$CvWeightedVector@H$0FA@$00@@QAEXIH@Z PROC	; CvWeightedVector<int,80,1>::SetWeight, COMDAT
; _this$ = ecx

; 83   : 		m_pItems[iIndex].m_iWeight = iWeight;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iWeight$[esp-4]
	mov	edx, DWORD PTR _iIndex$[esp-4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 84   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 85   : 	}

	ret	8
?SetWeight@?$CvWeightedVector@H$0FA@$00@@QAEXIH@Z ENDP	; CvWeightedVector<int,80,1>::SetWeight
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@H$0FA@$00@@QAEHXZ	; CvWeightedVector<int,80,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@H$0FA@$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@H$0FA@$00@@QAEHXZ PROC		; CvWeightedVector<int,80,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@H$0FA@$00@@QAEHXZ ENDP		; CvWeightedVector<int,80,1>::size
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBEABUCvCityBuildable@@I@Z ; CvWeightedVector<CvCityBuildable,50,1>::GetElement
; Function compile flags: /Ogtpy
;	COMDAT ?GetElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBEABUCvCityBuildable@@I@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBEABUCvCityBuildable@@I@Z PROC ; CvWeightedVector<CvCityBuildable,50,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR _iIndex$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBEABUCvCityBuildable@@I@Z ENDP ; CvWeightedVector<CvCityBuildable,50,1>::GetElement
_TEXT	ENDS
PUBLIC	?SetWeight@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXIH@Z ; CvWeightedVector<CvCityBuildable,50,1>::SetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?SetWeight@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?SetWeight@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXIH@Z PROC ; CvWeightedVector<CvCityBuildable,50,1>::SetWeight, COMDAT
; _this$ = ecx

; 83   : 		m_pItems[iIndex].m_iWeight = iWeight;

	mov	eax, DWORD PTR _iIndex$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR _iWeight$[esp-4]
	shl	eax, 4
	mov	DWORD PTR [eax+ecx+12], edx

; 84   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 85   : 	}

	ret	8
?SetWeight@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXIH@Z ENDP ; CvWeightedVector<CvCityBuildable,50,1>::SetWeight
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEHXZ ; CvWeightedVector<CvCityBuildable,50,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEHXZ PROC ; CvWeightedVector<CvCityBuildable,50,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEHXZ ENDP ; CvWeightedVector<CvCityBuildable,50,1>::size
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBEABUCvCityBuildable@@I@Z ; CvWeightedVector<CvCityBuildable,4,1>::GetElement
; Function compile flags: /Ogtpy
;	COMDAT ?GetElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBEABUCvCityBuildable@@I@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBEABUCvCityBuildable@@I@Z PROC ; CvWeightedVector<CvCityBuildable,4,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR _iIndex$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBEABUCvCityBuildable@@I@Z ENDP ; CvWeightedVector<CvCityBuildable,4,1>::GetElement
_TEXT	ENDS
PUBLIC	?SetWeight@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXIH@Z ; CvWeightedVector<CvCityBuildable,4,1>::SetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?SetWeight@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXIH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?SetWeight@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXIH@Z PROC ; CvWeightedVector<CvCityBuildable,4,1>::SetWeight, COMDAT
; _this$ = ecx

; 83   : 		m_pItems[iIndex].m_iWeight = iWeight;

	mov	eax, DWORD PTR _iIndex$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR _iWeight$[esp-4]
	shl	eax, 4
	mov	DWORD PTR [eax+ecx+12], edx

; 84   : 		CvAssertMsg(m_pItems[iIndex].m_iWeight >= 0, "Weight should not be negative.");
; 85   : 	}

	ret	8
?SetWeight@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXIH@Z ENDP ; CvWeightedVector<CvCityBuildable,4,1>::SetWeight
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEHXZ ; CvWeightedVector<CvCityBuildable,4,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEHXZ PROC ; CvWeightedVector<CvCityBuildable,4,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEHXZ ENDP ; CvWeightedVector<CvCityBuildable,4,1>::size
_TEXT	ENDS
PUBLIC	??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAE@XZ ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAE@XZ
_TEXT	SEGMENT
??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAE@XZ PROC ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAE@XZ ENDP ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 80			; 00000050H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<int,80,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 50			; 00000032H
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ PROC ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ENDP ; CvWeightedVector<CvCityBuildable,50,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEXXZ ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEXXZ PROC ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::clear, COMDAT
; _this$ = ecx

; 121  : 		Destroy(m_pData, m_uiCurrSize);
; 122  : 		m_uiCurrSize = 0;

	mov	DWORD PTR [ecx+4], 0

; 123  : 	};

	ret	0
?clear@?$BaseVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$00@@QAEXXZ ENDP ; BaseVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,1>::clear
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ PROC ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ENDP ; CvWeightedVector<CvCityBuildable,4,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	?clear@?$FastDelegate2@HPBDH@fastdelegate@@QAEXXZ ; fastdelegate::FastDelegate2<int,char const *,int>::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ?clear@?$FastDelegate2@HPBDH@fastdelegate@@QAEXXZ
_TEXT	SEGMENT
?clear@?$FastDelegate2@HPBDH@fastdelegate@@QAEXXZ PROC	; fastdelegate::FastDelegate2<int,char const *,int>::clear, COMDAT
; _this$ = ecx

; 1101 : 	void clear() { m_Closure.clear();}

	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
	ret	0
?clear@?$FastDelegate2@HPBDH@fastdelegate@@QAEXXZ ENDP	; fastdelegate::FastDelegate2<int,char const *,int>::clear
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::Free
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@2

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@2:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::Free
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@3

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@3:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::Free
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::Free
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free@4

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free@4:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::Free
_TEXT	ENDS
PUBLIC	??$CopyFrom@V?$FastDelegate2@HPBDH@fastdelegate@@@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAV?$FastDelegate2@HPBDH@2@ABVDelegateMemento@2@@Z ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::CopyFrom<fastdelegate::FastDelegate2<int,char const *,int> >
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$CopyFrom@V?$FastDelegate2@HPBDH@fastdelegate@@@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAV?$FastDelegate2@HPBDH@2@ABVDelegateMemento@2@@Z
_TEXT	SEGMENT
_pParent$ = 8						; size = 4
_right$ = 12						; size = 4
??$CopyFrom@V?$FastDelegate2@HPBDH@fastdelegate@@@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAV?$FastDelegate2@HPBDH@2@ABVDelegateMemento@2@@Z PROC ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::CopyFrom<fastdelegate::FastDelegate2<int,char const *,int> >, COMDAT
; _this$ = ecx

; 763  : #endif
; 764  : 		SetMementoFrom(right);

	mov	eax, DWORD PTR _right$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax

; 765  : 	}

	ret	8
??$CopyFrom@V?$FastDelegate2@HPBDH@fastdelegate@@@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAV?$FastDelegate2@HPBDH@2@ABVDelegateMemento@2@@Z ENDP ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::CopyFrom<fastdelegate::FastDelegate2<int,char const *,int> >
_TEXT	ENDS
PUBLIC	??$bindmemfunc@VCvGame@@P81@AEHHPBD@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAVCvGame@@P83@AEHHPBD@Z@Z ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::bindmemfunc<CvGame,int (__thiscall CvGame::*)(int,char const *)>
; Function compile flags: /Ogtpy
;	COMDAT ??$bindmemfunc@VCvGame@@P81@AEHHPBD@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAVCvGame@@P83@AEHHPBD@Z@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
_function_to_bind$ = 12					; size = 4
??$bindmemfunc@VCvGame@@P81@AEHHPBD@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAVCvGame@@P83@AEHHPBD@Z@Z PROC ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::bindmemfunc<CvGame,int (__thiscall CvGame::*)(int,char const *)>, COMDAT
; _this$ = ecx

; 673  : 		m_pthis = SimplifyMemFunc< sizeof(function_to_bind) >
; 674  : 			::Convert(pthis, function_to_bind, m_pFunction);

	mov	eax, DWORD PTR _function_to_bind$[esp-4]
	mov	edx, DWORD PTR _pthis$[esp-4]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx], edx

; 675  : #if !defined(FASTDELEGATE_USESTATICFUNCTIONHACK)
; 676  : 		m_pStaticFunction = 0;
; 677  : #endif
; 678  : 	}

	ret	8
??$bindmemfunc@VCvGame@@P81@AEHHPBD@Z@?$ClosurePtr@P8GenericClass@detail@fastdelegate@@AEHHPBD@ZP6AHH0@ZP6AHH0@Z@detail@fastdelegate@@QAEXPAVCvGame@@P83@AEHHPBD@Z@Z ENDP ; fastdelegate::detail::ClosurePtr<int (__thiscall fastdelegate::detail::GenericClass::*)(int,char const *),int (__cdecl*)(int,char const *),int (__cdecl*)(int,char const *)>::bindmemfunc<CvGame,int (__thiscall CvGame::*)(int,char const *)>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::iter_swap<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::iter_swap<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap@2
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap@2:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::iter_swap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap@3
	mov	edx, DWORD PTR [eax]
	push	ebx
	mov	ebx, DWORD PTR [eax+12]
	push	ebp
	mov	ebp, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx+12], ebx
	pop	ebx
$LN3@iter_swap@3:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::iter_swap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap@4
	mov	edx, DWORD PTR [eax]
	push	ebx
	mov	ebx, DWORD PTR [eax+12]
	push	ebp
	mov	ebp, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx+12], ebx
	pop	ebx
$LN3@iter_swap@4:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	jle	SHORT $LN10@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN10@Med3:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+4]
	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [eax+4]
	jle	SHORT $LN19@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3
	mov	edi, DWORD PTR [edx]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	pop	ebx
$LN19@Med3:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN28@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN28@Med3:
	pop	edi
	pop	esi

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	edx, DWORD PTR __Hole$[esp-4]

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp+4]
	lea	eax, DWORD PTR [edx+edx+2]
	cmp	eax, esi
	push	edi
	mov	edi, edx
	jge	SHORT $LN14@Adjust_hea
	npad	7
$LL5@Adjust_hea:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [ecx+eax*8+4]
	cmp	ebx, DWORD PTR [ecx+eax*8-4]
	jle	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [ecx+edx*8], ebx
	mov	ebx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], ebx
	mov	edx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea
$LN14@Adjust_hea:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	edx, DWORD PTR [esi-1]
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	esi, DWORD PTR __Val$[esp+8]
	sub	esp, 8
	mov	eax, esp
	push	edi
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Val$[esp+24]
	push	edx
	push	ecx
	mov	DWORD PTR [eax+4], esi
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_
	push	esi
$LL8@unchecked_:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_
	pop	esi
$LN7@unchecked_:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	jle	SHORT $LN10@Med3@2

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3@2
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN10@Med3@2:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+4]
	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [eax+4]
	jle	SHORT $LN19@Med3@2

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3@2
	mov	edi, DWORD PTR [edx]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	pop	ebx
$LN19@Med3@2:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN28@Med3@2

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3@2
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN28@Med3@2:
	pop	edi
	pop	esi

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	edx, DWORD PTR __Hole$[esp-4]

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp+4]
	lea	eax, DWORD PTR [edx+edx+2]
	cmp	eax, esi
	push	edi
	mov	edi, edx
	jge	SHORT $LN14@Adjust_hea@2
	npad	7
$LL5@Adjust_hea@2:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [ecx+eax*8+4]
	cmp	ebx, DWORD PTR [ecx+eax*8-4]
	jle	SHORT $LN2@Adjust_hea@2

; 2062 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea@2:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [ecx+edx*8], ebx
	mov	ebx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], ebx
	mov	edx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea@2
$LN14@Adjust_hea@2:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea@2

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	edx, DWORD PTR [esi-1]
$LN1@Adjust_hea@2:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	esi, DWORD PTR __Val$[esp+8]
	sub	esp, 8
	mov	eax, esp
	push	edi
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Val$[esp+24]
	push	edx
	push	ecx
	mov	DWORD PTR [eax+4], esi
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_@2
	push	esi
$LL8@unchecked_@2:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_@2
	pop	esi
$LN7@unchecked_@2:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z
_TEXT	SEGMENT
tv173 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax+12]
	cmp	ebx, DWORD PTR [ecx+12]
	push	ebp
	push	esi
	push	edi
	jle	SHORT $LN10@Med3@3

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3@3
	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	mov	DWORD PTR [ecx+12], ebx
$LN10@Med3@3:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+12]
	mov	esi, DWORD PTR [edx+12]
	cmp	esi, DWORD PTR [eax+12]
	mov	DWORD PTR tv173[esp+12], esi
	jle	SHORT $LN19@Med3@3

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3@3
	mov	ebp, DWORD PTR [eax]
	mov	esi, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ebp
	mov	ebp, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ebp
	mov	edx, DWORD PTR tv173[esp+12]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], edx
$LN19@Med3@3:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	ebx, DWORD PTR [eax+12]
	cmp	ebx, DWORD PTR [ecx+12]
	jle	SHORT $LN28@Med3@3

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3@3
	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	mov	DWORD PTR [ecx+12], ebx
$LN28@Med3@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 16
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx
	push	ebp
	push	esi

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	esi, DWORD PTR __First$[esp+8]
	push	edi
	mov	edi, DWORD PTR __Bottom$[esp+12]
	lea	edx, DWORD PTR [ecx+ecx+2]
	cmp	edx, edi
	mov	ebx, ecx
	jge	SHORT $LN14@Adjust_hea@3
	npad	6
$LL5@Adjust_hea@3:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, edx
	shl	eax, 4
	mov	ebp, DWORD PTR [eax+esi+12]
	add	eax, esi
	cmp	ebp, DWORD PTR [eax-4]
	jle	SHORT $LN2@Adjust_hea@3

; 2062 : 			--_Idx;

	dec	edx
$LN2@Adjust_hea@3:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	eax, edx
	shl	eax, 4
	mov	ebp, DWORD PTR [eax+esi]
	add	eax, esi
	shl	ecx, 4
	add	ecx, esi
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, edx
	lea	edx, DWORD PTR [edx+edx+2]
	cmp	edx, edi
	jl	SHORT $LL5@Adjust_hea@3
$LN14@Adjust_hea@3:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea@3

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, edi
	shl	edx, 4
	lea	eax, DWORD PTR [edx+esi-16]
	mov	edx, DWORD PTR [eax]
	shl	ecx, 4
	add	ecx, esi
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	ecx, DWORD PTR [edi-1]
$LN1@Adjust_hea@3:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	edx, DWORD PTR __Val$[esp+12]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR __Val$[esp+32]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __Val$[esp+36]
	push	ebx
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR __Val$[esp+44]
	push	ecx
	push	esi
	mov	DWORD PTR [eax+12], edx
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_@3
	push	esi
$LL8@unchecked_@3:
	mov	esi, DWORD PTR [ecx-16]
	sub	ecx, 16					; 00000010H
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_@3
	pop	esi
$LN7@unchecked_@3:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z
_TEXT	SEGMENT
tv173 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z PROC ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax+12]
	cmp	ebx, DWORD PTR [ecx+12]
	push	ebp
	push	esi
	push	edi
	jle	SHORT $LN10@Med3@4

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3@4
	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	mov	DWORD PTR [ecx+12], ebx
$LN10@Med3@4:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+12]
	mov	esi, DWORD PTR [edx+12]
	cmp	esi, DWORD PTR [eax+12]
	mov	DWORD PTR tv173[esp+12], esi
	jle	SHORT $LN19@Med3@4

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3@4
	mov	ebp, DWORD PTR [eax]
	mov	esi, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ebp
	mov	ebp, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ebp
	mov	edx, DWORD PTR tv173[esp+12]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], edx
$LN19@Med3@4:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	ebx, DWORD PTR [eax+12]
	cmp	ebx, DWORD PTR [ecx+12]
	jle	SHORT $LN28@Med3@4

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3@4
	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx+8], edi
	mov	DWORD PTR [ecx+12], ebx
$LN28@Med3@4:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 16
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx
	push	ebp
	push	esi

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	esi, DWORD PTR __First$[esp+8]
	push	edi
	mov	edi, DWORD PTR __Bottom$[esp+12]
	lea	edx, DWORD PTR [ecx+ecx+2]
	cmp	edx, edi
	mov	ebx, ecx
	jge	SHORT $LN14@Adjust_hea@4
	npad	6
$LL5@Adjust_hea@4:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, edx
	shl	eax, 4
	mov	ebp, DWORD PTR [eax+esi+12]
	add	eax, esi
	cmp	ebp, DWORD PTR [eax-4]
	jle	SHORT $LN2@Adjust_hea@4

; 2062 : 			--_Idx;

	dec	edx
$LN2@Adjust_hea@4:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	eax, edx
	shl	eax, 4
	mov	ebp, DWORD PTR [eax+esi]
	add	eax, esi
	shl	ecx, 4
	add	ecx, esi
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, edx
	lea	edx, DWORD PTR [edx+edx+2]
	cmp	edx, edi
	jl	SHORT $LL5@Adjust_hea@4
$LN14@Adjust_hea@4:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea@4

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, edi
	shl	edx, 4
	lea	eax, DWORD PTR [edx+esi-16]
	mov	edx, DWORD PTR [eax]
	shl	ecx, 4
	add	ecx, esi
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	ecx, DWORD PTR [edi-1]
$LN1@Adjust_hea@4:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	edx, DWORD PTR __Val$[esp+12]
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR __Val$[esp+32]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __Val$[esp+36]
	push	ebx
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR __Val$[esp+44]
	push	ecx
	push	esi
	mov	DWORD PTR [eax+12], edx
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_@4
	push	esi
$LL8@unchecked_@4:
	mov	esi, DWORD PTR [ecx-16]
	sub	ecx, 16					; 00000010H
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_@4
	pop	esi
$LN7@unchecked_@4:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 8
___formal$ = 28						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR __Last$[esp+4]
	sub	ecx, eax
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 8
___formal$ = 28						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR __Last$[esp+4]
	sub	ecx, eax
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 16
___formal$ = 36						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+16]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR __Val$[esp+20]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR __Val$[esp+24]
	mov	DWORD PTR [ecx+12], edx
	mov	ecx, DWORD PTR __Last$[esp+12]
	sub	ecx, eax
	sar	ecx, 4
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 16
___formal$ = 36						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+16]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR __Val$[esp+20]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR __Val$[esp+24]
	mov	DWORD PTR [ecx+12], edx
	mov	ecx, DWORD PTR __Last$[esp+12]
	sub	ecx, eax
	sar	ecx, 4
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ	; CvCity::getOwner
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvcity.h
;	COMDAT ?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ
_TEXT	SEGMENT
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ PROC		; CvCity::getOwner, COMDAT
; _this$ = ecx

; 604  : 		return m_eOwner;

	mov	eax, DWORD PTR [ecx+84]

; 605  : 	}

	ret	0
?getOwner@CvCity@@QBE?AW4PlayerTypes@@XZ ENDP		; CvCity::getOwner
_TEXT	ENDS
PUBLIC	?clear@?$CvWeightedVector@H$03$00@@QAEXXZ	; CvWeightedVector<int,4,1>::clear
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?clear@?$CvWeightedVector@H$03$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@H$03$00@@QAEXXZ PROC		; CvWeightedVector<int,4,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@H$03$00@@QAEXXZ ENDP		; CvWeightedVector<int,4,1>::clear
_TEXT	ENDS
PUBLIC	?clear@?$CvWeightedVector@H$0FA@$00@@QAEXXZ	; CvWeightedVector<int,80,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$CvWeightedVector@H$0FA@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@H$0FA@$00@@QAEXXZ PROC	; CvWeightedVector<int,80,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@H$0FA@$00@@QAEXXZ ENDP	; CvWeightedVector<int,80,1>::clear
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBEHI@Z ; CvWeightedVector<CvCityBuildable,50,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -16						; size = 16
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBEHI@Z PROC ; CvWeightedVector<CvCityBuildable,50,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 16					; 00000010H

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR _iIndex$[esp+12]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _elem$[esp+16], ecx
	mov	ecx, DWORD PTR [eax+8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _elem$[esp+20], edx
	mov	DWORD PTR _elem$[esp+24], ecx

; 75   : 	}

	add	esp, 16					; 00000010H
	ret	4
?GetWeight@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QBEHI@Z ENDP ; CvWeightedVector<CvCityBuildable,50,1>::GetWeight
_TEXT	ENDS
PUBLIC	?clear@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXXZ ; CvWeightedVector<CvCityBuildable,50,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXXZ PROC ; CvWeightedVector<CvCityBuildable,50,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXXZ ENDP ; CvWeightedVector<CvCityBuildable,50,1>::clear
_TEXT	ENDS
PUBLIC	?GetWeight@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBEHI@Z ; CvWeightedVector<CvCityBuildable,4,1>::GetWeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetWeight@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBEHI@Z
_TEXT	SEGMENT
_elem$ = -16						; size = 16
_iIndex$ = 8						; size = 4
?GetWeight@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBEHI@Z PROC ; CvWeightedVector<CvCityBuildable,4,1>::GetWeight, COMDAT
; _this$ = ecx

; 70   : 	{

	sub	esp, 16					; 00000010H

; 71   : 		WeightedElement elem;
; 72   : 		assert(iIndex < m_pItems.size());
; 73   : 		elem = m_pItems[iIndex];

	mov	eax, DWORD PTR _iIndex$[esp+12]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _elem$[esp+16], ecx
	mov	ecx, DWORD PTR [eax+8]

; 74   : 		return elem.m_iWeight;

	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _elem$[esp+20], edx
	mov	DWORD PTR _elem$[esp+24], ecx

; 75   : 	}

	add	esp, 16					; 00000010H
	ret	4
?GetWeight@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QBEHI@Z ENDP ; CvWeightedVector<CvCityBuildable,4,1>::GetWeight
_TEXT	ENDS
PUBLIC	?clear@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXXZ ; CvWeightedVector<CvCityBuildable,4,1>::clear
; Function compile flags: /Ogtpy
;	COMDAT ?clear@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXXZ
_TEXT	SEGMENT
?clear@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXXZ PROC ; CvWeightedVector<CvCityBuildable,4,1>::clear, COMDAT
; _this$ = ecx

; 116  : 		m_pItems.clear();

	mov	DWORD PTR [ecx+4], 0

; 117  : 	};

	ret	0
?clear@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXXZ ENDP ; CvWeightedVector<CvCityBuildable,4,1>::clear
_TEXT	ENDS
PUBLIC	??0?$FastDelegate2@HPBDH@fastdelegate@@QAE@XZ	; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??0?$FastDelegate2@HPBDH@fastdelegate@@QAE@XZ
_TEXT	SEGMENT
??0?$FastDelegate2@HPBDH@fastdelegate@@QAE@XZ PROC	; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int>, COMDAT
; _this$ = ecx

; 1041 : 	FastDelegate2() { clear(); }

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0?$FastDelegate2@HPBDH@fastdelegate@@QAE@XZ ENDP	; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int>
_TEXT	ENDS
PUBLIC	??4?$FastDelegate2@HPBDH@fastdelegate@@QAEXABV01@@Z ; fastdelegate::FastDelegate2<int,char const *,int>::operator=
; Function compile flags: /Ogtpy
;	COMDAT ??4?$FastDelegate2@HPBDH@fastdelegate@@QAEXABV01@@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
??4?$FastDelegate2@HPBDH@fastdelegate@@QAEXABV01@@Z PROC ; fastdelegate::FastDelegate2<int,char const *,int>::operator=, COMDAT
; _this$ = ecx

; 1045 : 		m_Closure.CopyFrom(this, x.m_Closure); }

	mov	eax, DWORD PTR _x$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
	ret	4
??4?$FastDelegate2@HPBDH@fastdelegate@@QAEXABV01@@Z ENDP ; fastdelegate::FastDelegate2<int,char const *,int>::operator=
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::~FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::~FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@2:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::~FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@3:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec@4
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec@4:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN34@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 4
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize
$LN16@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 4
$LN15@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+44], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize@2
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@2
	npad	6
$LL8@GrowSize@2:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize@2

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@2

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@2
$LN34@GrowSize@2:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@2:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 80					; 00000050H
	jbe	SHORT $LN16@GrowSize@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize@2
$LN16@GrowSize@2:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 80			; 00000050H
$LN15@GrowSize@2:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize@2:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+652], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize@3
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize@3:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@3
	npad	6
$LL8@GrowSize@3:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize@3

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@3

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@3
$LN34@GrowSize@3:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@3:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 50					; 00000032H
	jbe	SHORT $LN16@GrowSize@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	mov	eax, ebp
	shl	eax, 4
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize@3
$LN16@GrowSize@3:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 50			; 00000032H
$LN15@GrowSize@3:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	shl	ecx, 4
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize@3:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+812], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize@4
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize@4:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize@4
	npad	6
$LL8@GrowSize@4:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize@4

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize@4

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize@4
$LN34@GrowSize@4:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize@4:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 4
	jbe	SHORT $LN16@GrowSize@4
	push	798					; 0000031eH
	push	OFFSET ??_C@_0GH@ECFAPJEJ@c?3?2users?2enormousapplepie?2docume@
	mov	eax, ebp
	shl	eax, 4
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize@4
$LN16@GrowSize@4:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 4
$LN15@GrowSize@4:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	shl	ecx, 4
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize@4
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize@4:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+76], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	??$?0VCvGame@@V0@@?$FastDelegate2@HPBDH@fastdelegate@@QAE@PAVCvGame@@P82@AEHHPBD@Z@Z ; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int><CvGame,CvGame>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$?0VCvGame@@V0@@?$FastDelegate2@HPBDH@fastdelegate@@QAE@PAVCvGame@@P82@AEHHPBD@Z@Z
_TEXT	SEGMENT
_pthis$ = 8						; size = 4
_function_to_bind$ = 12					; size = 4
??$?0VCvGame@@V0@@?$FastDelegate2@HPBDH@fastdelegate@@QAE@PAVCvGame@@P82@AEHHPBD@Z@Z PROC ; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int><CvGame,CvGame>, COMDAT
; _this$ = ecx

; 1057 : 		m_Closure.bindmemfunc(detail::implicit_cast<X*>(pthis), function_to_bind); }

	mov	edx, DWORD PTR _pthis$[esp-4]
	mov	eax, ecx
	mov	ecx, DWORD PTR _function_to_bind$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], edx
	ret	8
??$?0VCvGame@@V0@@?$FastDelegate2@HPBDH@fastdelegate@@QAE@PAVCvGame@@P82@AEHHPBD@Z@Z ENDP ; fastdelegate::FastDelegate2<int,char const *,int>::FastDelegate2<int,char const *,int><CvGame,CvGame>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	edi, 4
	lea	ebx, DWORD PTR [eax*8]
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	sub	ebx, edi
	sar	ebx, 3

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap
	npad	3
$LL2@Make_heap:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [edi+esi*8-8]
	sub	esp, 8
	mov	eax, esp
	dec	esi
	push	ebx
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+esi*8+4]
	push	esi
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
	test	esi, esi
	jg	SHORT $LL2@Make_heap
$LN1@Make_heap:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp

; 2968 : 	if (_First != _Last)

	mov	ebp, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	cmp	edi, ebp
	je	SHORT $LN6@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+8]
	cmp	edx, ebp
	je	SHORT $LN6@Insertion_
	push	ebx
	push	esi
$LL7@Insertion_:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+4]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edx]
	mov	ecx, edx
	jle	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, edx
	cmp	edi, edx
	je	SHORT $LN21@Insertion_
	npad	7
$LL22@Insertion_:
	mov	ecx, DWORD PTR [eax-8]
	sub	eax, 8
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+12], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_
$LN21@Insertion_:

; 2977 : 				*_First = _Val;

	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-8]
	jle	SHORT $LN1@Insertion_
$LL3@Insertion_:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ecx, eax
	sub	eax, 8
	cmp	esi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Last$[esp+12]
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], esi
$LN4@Insertion_:
	add	edx, 8
	cmp	edx, ebp
	jne	SHORT $LL7@Insertion_
	pop	esi
	pop	ebx
$LN6@Insertion_:
	pop	edi
	pop	ebp

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Median<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median@2

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	edi, 4
	lea	ebx, DWORD PTR [eax*8]
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median@2:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Med3<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	sub	ebx, edi
	sar	ebx, 3

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap@2
	npad	3
$LL2@Make_heap@2:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [edi+esi*8-8]
	sub	esp, 8
	mov	eax, esp
	dec	esi
	push	ebx
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+esi*8+4]
	push	esi
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 20					; 00000014H
	test	esi, esi
	jg	SHORT $LL2@Make_heap@2
$LN1@Make_heap@2:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp

; 2968 : 	if (_First != _Last)

	mov	ebp, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	cmp	edi, ebp
	je	SHORT $LN6@Insertion_@2

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+8]
	cmp	edx, ebp
	je	SHORT $LN6@Insertion_@2
	push	ebx
	push	esi
$LL7@Insertion_@2:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+4]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edx]
	mov	ecx, edx
	jle	SHORT $LN5@Insertion_@2

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, edx
	cmp	edi, edx
	je	SHORT $LN21@Insertion_@2
	npad	7
$LL22@Insertion_@2:
	mov	ecx, DWORD PTR [eax-8]
	sub	eax, 8
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+12], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_@2
$LN21@Insertion_@2:

; 2977 : 				*_First = _Val;

	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@2
$LN5@Insertion_@2:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-8]
	jle	SHORT $LN1@Insertion_@2
$LL3@Insertion_@2:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ecx, eax
	sub	eax, 8
	cmp	esi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_@2

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Last$[esp+12]
$LN1@Insertion_@2:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], esi
$LN4@Insertion_@2:
	add	edx, 8
	cmp	edx, ebp
	jne	SHORT $LL7@Insertion_@2
	pop	esi
	pop	ebx
$LN6@Insertion_@2:
	pop	edi
	pop	ebp

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Median<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z PROC ; std::_Median<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 4
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median@3

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	eax, 4
	shl	edi, 5
	mov	ebx, eax
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median@3:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	ebp
	mov	ebp, DWORD PTR __First$[esp+4]
	sub	ebx, ebp
	sar	ebx, 4

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	push	esi
	sub	eax, edx
	push	edi
	mov	edi, eax
	sar	edi, 1
	test	edi, edi
	jle	SHORT $LN1@Make_heap@3
	mov	esi, edi
	shl	esi, 4
	add	esi, ebp
$LL2@Make_heap@3:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [esi-16]
	sub	esi, 16					; 00000010H
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	push	ebx
	dec	edi
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	push	edi
	push	ebp
	mov	DWORD PTR [eax+12], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 28					; 0000001cH
	test	edi, edi
	jg	SHORT $LL2@Make_heap@3
$LN1@Make_heap@3:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z
_TEXT	SEGMENT
__Val$220151 = -16					; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __Last$[esp-4]
	sub	esp, 16					; 00000010H
	push	edi
	mov	edi, DWORD PTR __First$[esp+16]
	cmp	edi, eax
	je	$LN6@Insertion_@3

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+16]
	cmp	edx, eax
	je	$LN6@Insertion_@3
	push	ebx
	push	ebp
	push	esi
$LL7@Insertion_@3:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+12]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+12]
	mov	ebp, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edx]
	mov	eax, edx
	mov	DWORD PTR __Val$220151[esp+36], ebp
	mov	DWORD PTR __Val$220151[esp+40], ecx
	jle	SHORT $LN5@Insertion_@3

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	cmp	edi, edx
	je	SHORT $LN21@Insertion_@3
$LL22@Insertion_@3:
	mov	ecx, DWORD PTR [eax-16]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [eax+16], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+20], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+24], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+28], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_@3
$LN21@Insertion_@3:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __Val$220151[esp+40]
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], ebp
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@3
$LN5@Insertion_@3:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	ecx, DWORD PTR [edx-16]
	jle	SHORT $LN1@Insertion_@3
$LL3@Insertion_@3:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	eax, ecx
	sub	ecx, 16					; 00000010H
	cmp	esi, DWORD PTR [ecx+12]
	jg	SHORT $LL3@Insertion_@3

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Val$220151[esp+36]
$LN1@Insertion_@3:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	ecx, DWORD PTR __Val$220151[esp+40]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], esi
$LN4@Insertion_@3:
	add	edx, 16					; 00000010H
	cmp	edx, DWORD PTR __Last$[esp+28]
	jne	$LL7@Insertion_@3
	pop	esi
	pop	ebp
	pop	ebx
$LN6@Insertion_@3:
	pop	edi

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	add	esp, 16					; 00000010H
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Median<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z PROC ; std::_Median<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 4
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median@4

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	eax, 4
	shl	edi, 5
	mov	ebx, eax
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median@4:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ENDP ; std::_Median<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	ebp
	mov	ebp, DWORD PTR __First$[esp+4]
	sub	ebx, ebp
	sar	ebx, 4

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	push	esi
	sub	eax, edx
	push	edi
	mov	edi, eax
	sar	edi, 1
	test	edi, edi
	jle	SHORT $LN1@Make_heap@4
	mov	esi, edi
	shl	esi, 4
	add	esi, ebp
$LL2@Make_heap@4:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [esi-16]
	sub	esi, 16					; 00000010H
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	push	ebx
	dec	edi
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	push	edi
	push	ebp
	mov	DWORD PTR [eax+12], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 28					; 0000001cH
	test	edi, edi
	jg	SHORT $LL2@Make_heap@4
$LN1@Make_heap@4:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z
_TEXT	SEGMENT
__Val$220216 = -16					; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __Last$[esp-4]
	sub	esp, 16					; 00000010H
	push	edi
	mov	edi, DWORD PTR __First$[esp+16]
	cmp	edi, eax
	je	$LN6@Insertion_@4

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+16]
	cmp	edx, eax
	je	$LN6@Insertion_@4
	push	ebx
	push	ebp
	push	esi
$LL7@Insertion_@4:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+12]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+12]
	mov	ebp, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+8]
	mov	ebx, DWORD PTR [edx]
	mov	eax, edx
	mov	DWORD PTR __Val$220216[esp+36], ebp
	mov	DWORD PTR __Val$220216[esp+40], ecx
	jle	SHORT $LN5@Insertion_@4

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	cmp	edi, edx
	je	SHORT $LN21@Insertion_@4
$LL22@Insertion_@4:
	mov	ecx, DWORD PTR [eax-16]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [eax+16], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+20], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+24], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+28], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_@4
$LN21@Insertion_@4:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __Val$220216[esp+40]
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], ebp
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@4
$LN5@Insertion_@4:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	ecx, DWORD PTR [edx-16]
	jle	SHORT $LN1@Insertion_@4
$LL3@Insertion_@4:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ebp
	mov	eax, ecx
	sub	ecx, 16					; 00000010H
	cmp	esi, DWORD PTR [ecx+12]
	jg	SHORT $LL3@Insertion_@4

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Val$220216[esp+36]
$LN1@Insertion_@4:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	ecx, DWORD PTR __Val$220216[esp+40]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], esi
$LN4@Insertion_@4:
	add	edx, 16					; 00000010H
	cmp	edx, DWORD PTR __Last$[esp+28]
	jne	$LL7@Insertion_@4
	pop	esi
	pop	ebp
	pop	ebx
$LN6@Insertion_@4:
	pop	edi

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	add	esp, 16					; 00000010H
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax-8]
	push	edi
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 8
	mov	edx, esp
	sub	eax, 8
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	pop	edi
	pop	esi
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax-8]
	push	edi
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 8
	mov	edx, esp
	sub	eax, 8
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	pop	edi
	pop	esi
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	ebx
	mov	ebx, DWORD PTR [eax-8]
	push	ebp
	mov	ebp, DWORD PTR [eax-4]
	push	esi
	mov	esi, DWORD PTR [eax-16]
	push	edi
	mov	edi, DWORD PTR [eax-12]
	mov	DWORD PTR [eax-16], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-12], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	sub	eax, 16					; 00000010H
	sar	eax, 4
	push	eax
	mov	DWORD PTR [edx], esi
	push	0
	mov	DWORD PTR [edx+4], edi
	push	ecx
	mov	DWORD PTR [edx+8], ebx
	mov	DWORD PTR [edx+12], ebp
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2090 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	ebx
	mov	ebx, DWORD PTR [eax-8]
	push	ebp
	mov	ebp, DWORD PTR [eax-4]
	push	esi
	mov	esi, DWORD PTR [eax-16]
	push	edi
	mov	edi, DWORD PTR [eax-12]
	mov	DWORD PTR [eax-16], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-12], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 16					; 00000010H
	mov	edx, esp
	sub	eax, 16					; 00000010H
	sar	eax, 4
	push	eax
	mov	DWORD PTR [edx], esi
	push	0
	mov	DWORD PTR [edx+4], edi
	push	ecx
	mov	DWORD PTR [edx+8], ebx
	mov	DWORD PTR [edx+12], ebp
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 28					; 0000001cH

; 2090 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	?ResetCity@CvAdvisorRecommender@@QAEXXZ		; CvAdvisorRecommender::ResetCity
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
;	COMDAT ?ResetCity@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
?ResetCity@CvAdvisorRecommender@@QAEXXZ PROC		; CvAdvisorRecommender::ResetCity, COMDAT
; _this$ = ecx

; 42   : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 43   : 	{
; 44   : 		m_aRecommendedBuilds[ui].m_eBuildableType = NOT_A_CITY_BUILDABLE;
; 45   : 		m_aRecommendedBuilds[ui].m_iIndex = -1;

	or	eax, -1
	xor	edx, edx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 46   : 		m_aRecommendedBuilds[ui].m_iTurnsToConstruct = -1;

	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+44], eax

; 47   : 	}
; 48   : 
; 49   : 	m_aCityBuildables.clear();

	mov	DWORD PTR [ecx+772], edx

; 50   : 	m_aFinalRoundBuildables.clear();

	mov	DWORD PTR [ecx+1588], edx

; 51   : }

	ret	0
?ResetCity@CvAdvisorRecommender@@QAEXXZ ENDP		; CvAdvisorRecommender::ResetCity
_TEXT	ENDS
PUBLIC	?ResetTechs@CvAdvisorRecommender@@QAEXXZ	; CvAdvisorRecommender::ResetTechs
; Function compile flags: /Ogtpy
;	COMDAT ?ResetTechs@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
?ResetTechs@CvAdvisorRecommender@@QAEXXZ PROC		; CvAdvisorRecommender::ResetTechs, COMDAT
; _this$ = ecx

; 208  : 	for(uint ui = 0; ui < NUM_ADVISOR_TYPES; ui++)
; 209  : 	{
; 210  : 		m_aRecommendedTechs[ui] = NO_TECH;

	or	eax, -1
	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [ecx+52], eax
	mov	DWORD PTR [ecx+56], eax
	mov	DWORD PTR [ecx+60], eax

; 211  : 	}
; 212  : 
; 213  : 	m_aResearchableTechs.clear();

	xor	eax, eax
	mov	DWORD PTR [ecx+68], eax

; 214  : 	m_aFinalRoundTechs.clear();

	mov	DWORD PTR [ecx+724], eax

; 215  : }

	ret	0
?ResetTechs@CvAdvisorRecommender@@QAEXXZ ENDP		; CvAdvisorRecommender::ResetTechs
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::CvWeightedVector<int,4,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted:
	ret	0
??1?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@H$0FA@$00@@QAE@XZ		; CvWeightedVector<int,80,1>::CvWeightedVector<int,80,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$CvWeightedVector@H$0FA@$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@H$0FA@$00@@QAE@XZ PROC		; CvWeightedVector<int,80,1>::CvWeightedVector<int,80,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 80			; 00000050H
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@H$0FA@$00@@QAE@XZ ENDP		; CvWeightedVector<int,80,1>::CvWeightedVector<int,80,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ		; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ PROC		; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted@2
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted@2:
	ret	0
??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ ENDP		; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,50,1>::CvWeightedVector<CvCityBuildable,50,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ PROC ; CvWeightedVector<CvCityBuildable,50,1>::CvWeightedVector<CvCityBuildable,50,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 50			; 00000032H
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ENDP ; CvWeightedVector<CvCityBuildable,50,1>::CvWeightedVector<CvCityBuildable,50,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ PROC ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted@3
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted@3:
	ret	0
??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ENDP ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,4,1>::CvWeightedVector<CvCityBuildable,4,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ PROC ; CvWeightedVector<CvCityBuildable,4,1>::CvWeightedVector<CvCityBuildable,4,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 4
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ENDP ; CvWeightedVector<CvCityBuildable,4,1>::CvWeightedVector<CvCityBuildable,4,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,4,1>::~CvWeightedVector<CvCityBuildable,4,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ PROC ; CvWeightedVector<CvCityBuildable,4,1>::~CvWeightedVector<CvCityBuildable,4,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted@4
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted@4:
	ret	0
??1?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAE@XZ ENDP ; CvWeightedVector<CvCityBuildable,4,1>::~CvWeightedVector<CvCityBuildable,4,1>
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+652], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize
$LN1@push_back@2:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back@2
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back@2:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+812], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@3

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN1@push_back@3:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	shl	eax, 4
	add	eax, DWORD PTR [esi]
	je	SHORT $LN4@push_back@3
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN4@push_back@3:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+76], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back@4

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN1@push_back@4:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	shl	eax, 4
	add	eax, DWORD PTR [esi]
	je	SHORT $LN4@push_back@4
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN4@push_back@4:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\eventsystem\fastdelegate.h
;	COMDAT ??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_func$ = 16						; size = 4
??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z PROC ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>, COMDAT

; 2031 : 	return FastDelegate2<Param1, Param2, FASTDLGT_RETTYPE>(x, func);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	mov	ecx, DWORD PTR _func$[esp-4]
	mov	edx, DWORD PTR _x$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], edx

; 2032 : }

	ret	0
??$MakeDelegate@VCvGame@@V1@HPBDH@fastdelegate@@YA?AV?$FastDelegate2@HPBDH@0@PAVCvGame@@P82@AEHHPBD@Z@Z ENDP ; fastdelegate::MakeDelegate<CvGame,CvGame,int,char const *,int>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__Tmp$224177 = -24					; size = 8
__Tmp$224106 = -16					; size = 8
__Tmp$224132 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 24					; 00000018H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+24]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+28]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	push	edi
	sar	eax, 1
	lea	edi, DWORD PTR [ebx+eax*8]

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-8]
	push	eax
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+8]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_
$LL27@Unguarded_:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	jl	SHORT $LN99@Unguarded_
	jg	SHORT $LN99@Unguarded_

; 3033 : 		--_Pfirst;

	sub	ecx, 8
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_
$LN99@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR [ecx+4]
	npad	1
$LL25@Unguarded_:
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_
	jg	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	add	esi, 8
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	ebx, ecx
$LL23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+36]
	jae	SHORT $LN103@Unguarded_
	npad	6
$LL21@Unguarded_:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+4]
	cmp	edx, edi
	jl	SHORT $LN20@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 8
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_
	mov	ebp, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$224106[esp+44], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	edx, DWORD PTR __Tmp$224106[esp+44]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
$LN20@Unguarded_:
	add	eax, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jb	SHORT $LL21@Unguarded_
$LN103@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	ebx, DWORD PTR __First$[esp+36]
	jbe	SHORT $LN115@Unguarded_
	lea	edx, DWORD PTR [ebx-8]
$LL14@Unguarded_:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [ecx+4]
	cmp	ebp, edi
	jl	SHORT $LN13@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 8
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_
	mov	ebp, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$224132[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$224132[esp+44]
	mov	DWORD PTR [edx+4], edi
$LN13@Unguarded_:
	sub	ebx, 8
	sub	edx, 8
	cmp	DWORD PTR __First$[esp+36], ebx
	jb	SHORT $LL14@Unguarded_
$LN111@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebx, DWORD PTR __First$[esp+36]
$LN115@Unguarded_:
	jne	SHORT $LN6@Unguarded_
	cmp	eax, DWORD PTR __Last$[esp+36]
	je	$LN105@Unguarded_

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi
$LN64@Unguarded_:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	edi, ecx
	add	esi, 8
	add	ecx, 8
	add	eax, 8
	cmp	edi, edx
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR __Tmp$224177[esp+40], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$224177[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	edi, DWORD PTR __Tmp$224177[esp+40]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$224177[esp+44]
	mov	DWORD PTR [edx+4], edi
	jmp	$LL23@Unguarded_
$LN6@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	ebx, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN3@Unguarded_
	sub	ecx, 8
	cmp	ebx, ecx
	je	SHORT $LN78@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edi
$LN78@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 8
	cmp	ecx, esi
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebx
	je	SHORT $LN92@Unguarded_
	mov	ebp, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edi
$LN92@Unguarded_:
	add	eax, 8

; 3076 : 		}

	jmp	$LL23@Unguarded_
$LN105@Unguarded_:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+36]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::make_heap<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::make_heap<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -8					; fffffff8H
	cmp	edx, 8
	jle	SHORT $LN1@make_heap

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__Tmp$224387 = -24					; size = 8
__Tmp$224316 = -16					; size = 8
__Tmp$224342 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 24					; 00000018H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+24]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+28]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	push	edi
	sar	eax, 1
	lea	edi, DWORD PTR [ebx+eax*8]

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-8]
	push	eax
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Median<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+8]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_@2
$LL27@Unguarded_@2:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	jl	SHORT $LN99@Unguarded_@2
	jg	SHORT $LN99@Unguarded_@2

; 3033 : 		--_Pfirst;

	sub	ecx, 8
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_@2
$LN99@Unguarded_@2:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_@2
	mov	edx, DWORD PTR [ecx+4]
	npad	1
$LL25@Unguarded_@2:
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_@2
	jg	SHORT $LN24@Unguarded_@2

; 3037 : 		++_Plast;

	add	esi, 8
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_@2
$LN24@Unguarded_@2:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	ebx, ecx
$LL23@Unguarded_@2:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+36]
	jae	SHORT $LN103@Unguarded_@2
	npad	6
$LL21@Unguarded_@2:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+4]
	cmp	edx, edi
	jl	SHORT $LN20@Unguarded_@2

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_@2

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 8
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_@2
	mov	ebp, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$224316[esp+44], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	edx, DWORD PTR __Tmp$224316[esp+44]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
$LN20@Unguarded_@2:
	add	eax, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jb	SHORT $LL21@Unguarded_@2
$LN103@Unguarded_@2:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	ebx, DWORD PTR __First$[esp+36]
	jbe	SHORT $LN115@Unguarded_@2
	lea	edx, DWORD PTR [ebx-8]
$LL14@Unguarded_@2:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [ecx+4]
	cmp	ebp, edi
	jl	SHORT $LN13@Unguarded_@2

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_@2

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 8
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_@2
	mov	ebp, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$224342[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$224342[esp+44]
	mov	DWORD PTR [edx+4], edi
$LN13@Unguarded_@2:
	sub	ebx, 8
	sub	edx, 8
	cmp	DWORD PTR __First$[esp+36], ebx
	jb	SHORT $LL14@Unguarded_@2
$LN111@Unguarded_@2:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebx, DWORD PTR __First$[esp+36]
$LN115@Unguarded_@2:
	jne	SHORT $LN6@Unguarded_@2
	cmp	eax, DWORD PTR __Last$[esp+36]
	je	$LN105@Unguarded_@2

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_@2

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_@2
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi
$LN64@Unguarded_@2:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	edi, ecx
	add	esi, 8
	add	ecx, 8
	add	eax, 8
	cmp	edi, edx
	je	$LL23@Unguarded_@2
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR __Tmp$224387[esp+40], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$224387[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	edi, DWORD PTR __Tmp$224387[esp+40]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$224387[esp+44]
	mov	DWORD PTR [edx+4], edi
	jmp	$LL23@Unguarded_@2
$LN6@Unguarded_@2:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	ebx, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN3@Unguarded_@2
	sub	ecx, 8
	cmp	ebx, ecx
	je	SHORT $LN78@Unguarded_@2

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edi
$LN78@Unguarded_@2:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 8
	cmp	ecx, esi
	je	$LL23@Unguarded_@2
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_@2
$LN3@Unguarded_@2:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebx
	je	SHORT $LN92@Unguarded_@2
	mov	ebp, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edi
$LN92@Unguarded_@2:
	add	eax, 8

; 3076 : 		}

	jmp	$LL23@Unguarded_@2
$LN105@Unguarded_@2:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+36]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::make_heap<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::make_heap<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -8					; fffffff8H
	cmp	edx, 8
	jle	SHORT $LN1@make_heap@2

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap@2:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__Tmp$224595 = -112					; size = 16
__Tmp$224524 = -96					; size = 16
__Tmp$224550 = -80					; size = 16
__Tmp$224574 = -64					; size = 16
__Tmp$224613 = -48					; size = 16
__Tmp$224633 = -32					; size = 16
__Tmp$224654 = -16					; size = 16
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 112				; 00000070H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+112]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+116]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 4
	cdq
	push	esi
	push	edi
	sub	eax, edx
	mov	edi, eax
	sar	edi, 1

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-16]
	shl	edi, 4
	push	eax
	add	edi, ebx
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Median<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+16]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_@3
	npad	4
$LL27@Unguarded_@3:
	mov	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [ecx-4]
	cmp	eax, edx
	jl	SHORT $LN99@Unguarded_@3
	jg	SHORT $LN99@Unguarded_@3

; 3033 : 		--_Pfirst;

	sub	ecx, 16					; 00000010H
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_@3
$LN99@Unguarded_@3:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_@3
	mov	edx, DWORD PTR [ecx+12]
	npad	6
$LL25@Unguarded_@3:
	mov	eax, DWORD PTR [esi+12]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_@3
	jg	SHORT $LN24@Unguarded_@3

; 3037 : 		++_Plast;

	add	esi, 16					; 00000010H
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_@3
$LN24@Unguarded_@3:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	edi, ecx
$LL23@Unguarded_@3:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+124]
	jae	SHORT $LN103@Unguarded_@3
	npad	3
$LL21@Unguarded_@3:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+12]
	mov	ebx, DWORD PTR [ecx+12]
	cmp	edx, ebx
	jl	SHORT $LN20@Unguarded_@3

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_@3

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 16					; 00000010H
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_@3
	mov	ebp, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$224524[esp+132], ebp
	mov	ebp, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$224524[esp+136], ebp
	mov	ebp, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$224524[esp+140], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ebp
	mov	ebp, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ebp
	mov	edx, DWORD PTR __Tmp$224524[esp+132]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __Tmp$224524[esp+136]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR __Tmp$224524[esp+140]
	mov	DWORD PTR [eax+12], edx
$LN20@Unguarded_@3:
	add	eax, 16					; 00000010H
	cmp	eax, DWORD PTR __Last$[esp+124]
	jb	SHORT $LL21@Unguarded_@3
$LN103@Unguarded_@3:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	edi, DWORD PTR __First$[esp+124]
	jbe	SHORT $LN115@Unguarded_@3
	lea	edx, DWORD PTR [edi-16]
$LL14@Unguarded_@3:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	ebx, DWORD PTR [edx+12]
	mov	ebp, DWORD PTR [ecx+12]
	cmp	ebp, ebx
	jl	SHORT $LN13@Unguarded_@3

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_@3

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 16					; 00000010H
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_@3
	mov	ebp, DWORD PTR [ecx+4]
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$224550[esp+132], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$224550[esp+136], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$224550[esp+140], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	ebp, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], ebp
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR __Tmp$224550[esp+132]
	mov	DWORD PTR [edx+4], ebx
	mov	ebx, DWORD PTR __Tmp$224550[esp+136]
	mov	DWORD PTR [edx+8], ebx
	mov	ebx, DWORD PTR __Tmp$224550[esp+140]
	mov	DWORD PTR [edx+12], ebx
$LN13@Unguarded_@3:
	sub	edi, 16					; 00000010H
	sub	edx, 16					; 00000010H
	cmp	DWORD PTR __First$[esp+124], edi
	jb	SHORT $LL14@Unguarded_@3
$LN111@Unguarded_@3:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	edi, DWORD PTR __First$[esp+124]
$LN115@Unguarded_@3:
	jne	$LN6@Unguarded_@3
	cmp	eax, DWORD PTR __Last$[esp+124]
	je	$LN105@Unguarded_@3

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_@3

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_@3
	mov	ebp, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$224574[esp+136], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$224574[esp+140], ebp
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	ebp, DWORD PTR [esi+12]
	mov	DWORD PTR [ecx+12], ebp
	mov	DWORD PTR [esi], edx
	mov	edx, DWORD PTR __Tmp$224574[esp+136]
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR __Tmp$224574[esp+140]
	mov	DWORD PTR [esi+12], edx
$LN64@Unguarded_@3:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	ebx, ecx
	add	esi, 16					; 00000010H
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	cmp	ebx, edx
	je	$LL23@Unguarded_@3
	mov	ebp, DWORD PTR [ebx]
	mov	DWORD PTR __Tmp$224595[esp+128], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR __Tmp$224595[esp+132], ebp
	mov	ebp, DWORD PTR [ebx+8]
	mov	DWORD PTR __Tmp$224595[esp+136], ebp
	mov	ebp, DWORD PTR [ebx+12]
	mov	DWORD PTR __Tmp$224595[esp+140], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	ebp, DWORD PTR [edx+8]
	mov	DWORD PTR [ebx+8], ebp
	mov	ebp, DWORD PTR [edx+12]
	mov	DWORD PTR [ebx+12], ebp
	mov	ebx, DWORD PTR __Tmp$224595[esp+128]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR __Tmp$224595[esp+132]
	mov	DWORD PTR [edx+4], ebx
	mov	ebx, DWORD PTR __Tmp$224595[esp+136]
	mov	DWORD PTR [edx+8], ebx
	mov	ebx, DWORD PTR __Tmp$224595[esp+140]
	mov	DWORD PTR [edx+12], ebx
	jmp	$LL23@Unguarded_@3
$LN6@Unguarded_@3:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	edi, 16					; 00000010H
	cmp	eax, DWORD PTR __Last$[esp+124]
	jne	$LN3@Unguarded_@3
	sub	ecx, 16					; 00000010H
	cmp	edi, ecx
	je	SHORT $LN78@Unguarded_@3

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$224613[esp+136], ebp
	mov	ebp, DWORD PTR [edi+12]
	mov	DWORD PTR __Tmp$224613[esp+140], ebp
	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Tmp$224613[esp+136]
	mov	DWORD PTR [ecx+4], ebx
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR __Tmp$224613[esp+140]
	mov	DWORD PTR [ecx+12], edx
$LN78@Unguarded_@3:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 16					; 00000010H
	cmp	ecx, esi
	je	$LL23@Unguarded_@3
	mov	ebp, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$224633[esp+136], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$224633[esp+140], ebp
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	ebp, DWORD PTR [esi+12]
	mov	DWORD PTR [ecx+12], ebp
	mov	DWORD PTR [esi], edx
	mov	edx, DWORD PTR __Tmp$224633[esp+136]
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR __Tmp$224633[esp+140]
	mov	DWORD PTR [esi+12], edx

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_@3
$LN3@Unguarded_@3:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, edi
	je	SHORT $LN92@Unguarded_@3
	mov	ebp, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$224654[esp+136], ebp
	mov	ebp, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$224654[esp+140], ebp
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+12], ebp
	mov	DWORD PTR [edi], edx
	mov	edx, DWORD PTR __Tmp$224654[esp+136]
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+8], edx
	mov	edx, DWORD PTR __Tmp$224654[esp+140]
	mov	DWORD PTR [edi+12], edx
$LN92@Unguarded_@3:
	add	eax, 16					; 00000010H

; 3076 : 		}

	jmp	$LL23@Unguarded_@3
$LN105@Unguarded_@3:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+124]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 112				; 00000070H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -16				; fffffff0H
	cmp	edx, 16					; 00000010H
	jle	SHORT $LN1@make_heap@3

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap@3:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__Tmp$224801 = -112					; size = 16
__Tmp$224730 = -96					; size = 16
__Tmp$224756 = -80					; size = 16
__Tmp$224780 = -64					; size = 16
__Tmp$224822 = -48					; size = 16
__Tmp$224842 = -32					; size = 16
__Tmp$224863 = -16					; size = 16
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 112				; 00000070H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+112]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+116]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 4
	cdq
	push	esi
	push	edi
	sub	eax, edx
	mov	edi, eax
	sar	edi, 1

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-16]
	shl	edi, 4
	push	eax
	add	edi, ebx
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Median<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+16]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_@4
	npad	4
$LL27@Unguarded_@4:
	mov	eax, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [ecx-4]
	cmp	eax, edx
	jl	SHORT $LN99@Unguarded_@4
	jg	SHORT $LN99@Unguarded_@4

; 3033 : 		--_Pfirst;

	sub	ecx, 16					; 00000010H
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_@4
$LN99@Unguarded_@4:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_@4
	mov	edx, DWORD PTR [ecx+12]
	npad	6
$LL25@Unguarded_@4:
	mov	eax, DWORD PTR [esi+12]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_@4
	jg	SHORT $LN24@Unguarded_@4

; 3037 : 		++_Plast;

	add	esi, 16					; 00000010H
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_@4
$LN24@Unguarded_@4:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	edi, ecx
$LL23@Unguarded_@4:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+124]
	jae	SHORT $LN103@Unguarded_@4
	npad	3
$LL21@Unguarded_@4:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+12]
	mov	ebx, DWORD PTR [ecx+12]
	cmp	edx, ebx
	jl	SHORT $LN20@Unguarded_@4

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_@4

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 16					; 00000010H
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_@4
	mov	ebp, DWORD PTR [edx+4]
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$224730[esp+132], ebp
	mov	ebp, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$224730[esp+136], ebp
	mov	ebp, DWORD PTR [edx+12]
	mov	DWORD PTR __Tmp$224730[esp+140], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ebp
	mov	ebp, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ebp
	mov	edx, DWORD PTR __Tmp$224730[esp+132]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR __Tmp$224730[esp+136]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR __Tmp$224730[esp+140]
	mov	DWORD PTR [eax+12], edx
$LN20@Unguarded_@4:
	add	eax, 16					; 00000010H
	cmp	eax, DWORD PTR __Last$[esp+124]
	jb	SHORT $LL21@Unguarded_@4
$LN103@Unguarded_@4:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	edi, DWORD PTR __First$[esp+124]
	jbe	SHORT $LN115@Unguarded_@4
	lea	edx, DWORD PTR [edi-16]
$LL14@Unguarded_@4:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	ebx, DWORD PTR [edx+12]
	mov	ebp, DWORD PTR [ecx+12]
	cmp	ebp, ebx
	jl	SHORT $LN13@Unguarded_@4

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_@4

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 16					; 00000010H
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_@4
	mov	ebp, DWORD PTR [ecx+4]
	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$224756[esp+132], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$224756[esp+136], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$224756[esp+140], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	ebp, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], ebp
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR __Tmp$224756[esp+132]
	mov	DWORD PTR [edx+4], ebx
	mov	ebx, DWORD PTR __Tmp$224756[esp+136]
	mov	DWORD PTR [edx+8], ebx
	mov	ebx, DWORD PTR __Tmp$224756[esp+140]
	mov	DWORD PTR [edx+12], ebx
$LN13@Unguarded_@4:
	sub	edi, 16					; 00000010H
	sub	edx, 16					; 00000010H
	cmp	DWORD PTR __First$[esp+124], edi
	jb	SHORT $LL14@Unguarded_@4
$LN111@Unguarded_@4:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	edi, DWORD PTR __First$[esp+124]
$LN115@Unguarded_@4:
	jne	$LN6@Unguarded_@4
	cmp	eax, DWORD PTR __Last$[esp+124]
	je	$LN105@Unguarded_@4

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_@4

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_@4
	mov	ebp, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$224780[esp+136], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$224780[esp+140], ebp
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	ebp, DWORD PTR [esi+12]
	mov	DWORD PTR [ecx+12], ebp
	mov	DWORD PTR [esi], edx
	mov	edx, DWORD PTR __Tmp$224780[esp+136]
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR __Tmp$224780[esp+140]
	mov	DWORD PTR [esi+12], edx
$LN64@Unguarded_@4:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	ebx, ecx
	add	esi, 16					; 00000010H
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	cmp	ebx, edx
	je	$LL23@Unguarded_@4
	mov	ebp, DWORD PTR [ebx]
	mov	DWORD PTR __Tmp$224801[esp+128], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR __Tmp$224801[esp+132], ebp
	mov	ebp, DWORD PTR [ebx+8]
	mov	DWORD PTR __Tmp$224801[esp+136], ebp
	mov	ebp, DWORD PTR [ebx+12]
	mov	DWORD PTR __Tmp$224801[esp+140], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	ebp, DWORD PTR [edx+8]
	mov	DWORD PTR [ebx+8], ebp
	mov	ebp, DWORD PTR [edx+12]
	mov	DWORD PTR [ebx+12], ebp
	mov	ebx, DWORD PTR __Tmp$224801[esp+128]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR __Tmp$224801[esp+132]
	mov	DWORD PTR [edx+4], ebx
	mov	ebx, DWORD PTR __Tmp$224801[esp+136]
	mov	DWORD PTR [edx+8], ebx
	mov	ebx, DWORD PTR __Tmp$224801[esp+140]
	mov	DWORD PTR [edx+12], ebx
	jmp	$LL23@Unguarded_@4
$LN6@Unguarded_@4:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	edi, 16					; 00000010H
	cmp	eax, DWORD PTR __Last$[esp+124]
	jne	$LN3@Unguarded_@4
	sub	ecx, 16					; 00000010H
	cmp	edi, ecx
	je	SHORT $LN78@Unguarded_@4

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$224822[esp+136], ebp
	mov	ebp, DWORD PTR [edi+12]
	mov	DWORD PTR __Tmp$224822[esp+140], ebp
	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Tmp$224822[esp+136]
	mov	DWORD PTR [ecx+4], ebx
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR __Tmp$224822[esp+140]
	mov	DWORD PTR [ecx+12], edx
$LN78@Unguarded_@4:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 16					; 00000010H
	cmp	ecx, esi
	je	$LL23@Unguarded_@4
	mov	ebp, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$224842[esp+136], ebp
	mov	ebp, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$224842[esp+140], ebp
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ebp, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], ebp
	mov	ebp, DWORD PTR [esi+12]
	mov	DWORD PTR [ecx+12], ebp
	mov	DWORD PTR [esi], edx
	mov	edx, DWORD PTR __Tmp$224842[esp+136]
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR __Tmp$224842[esp+140]
	mov	DWORD PTR [esi+12], edx

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_@4
$LN3@Unguarded_@4:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, edi
	je	SHORT $LN92@Unguarded_@4
	mov	ebp, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$224863[esp+136], ebp
	mov	ebp, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$224863[esp+140], ebp
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], ebp
	mov	ebp, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+8], ebp
	mov	ebp, DWORD PTR [edi+12]
	mov	DWORD PTR [eax+12], ebp
	mov	DWORD PTR [edi], edx
	mov	edx, DWORD PTR __Tmp$224863[esp+136]
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+8], edx
	mov	edx, DWORD PTR __Tmp$224863[esp+140]
	mov	DWORD PTR [edi+12], edx
$LN92@Unguarded_@4:
	add	eax, 16					; 00000010H

; 3076 : 		}

	jmp	$LL23@Unguarded_@4
$LN105@Unguarded_@4:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+124]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 112				; 00000070H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -16				; fffffff0H
	cmp	edx, 16					; 00000010H
	jle	SHORT $LN1@make_heap@4

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap@4:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::pop_heap<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	edx, eax
	push	esi
	sub	edx, ecx
	mov	esi, edx
	and	esi, -8					; fffffff8H
	cmp	esi, 8
	push	edi
	jle	SHORT $LN12@pop_heap

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax-8]
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], ebx
	mov	ebx, DWORD PTR [ecx+4]
	sub	esp, 8
	mov	DWORD PTR [eax-4], ebx
	mov	eax, esp
	add	edx, -8					; fffffff8H
	sar	edx, 3
	push	edx
	push	0
	push	ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN12@pop_heap:

; 2099 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::pop_heap<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	edx, eax
	push	esi
	sub	edx, ecx
	mov	esi, edx
	and	esi, -8					; fffffff8H
	cmp	esi, 8
	push	edi
	jle	SHORT $LN12@pop_heap@2

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax-8]
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], ebx
	mov	ebx, DWORD PTR [ecx+4]
	sub	esp, 8
	mov	DWORD PTR [eax-4], ebx
	mov	eax, esp
	add	edx, -8					; fffffff8H
	sar	edx, 3
	push	edx
	push	0
	push	ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN12@pop_heap@2:

; 2099 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::pop_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -16				; fffffff0H
	cmp	edx, 16					; 00000010H
	jle	SHORT $LN1@pop_heap@3

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	push	0
	push	eax
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN1@pop_heap@3:

; 2099 : 	}

	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::pop_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -16				; fffffff0H
	cmp	edx, 16					; 00000010H
	jle	SHORT $LN1@pop_heap@4

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	push	0
	push	eax
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN1@pop_heap@4:

; 2099 : 	}

	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??1CvAdvisorRecommender@@QAE@XZ			; CvAdvisorRecommender::~CvAdvisorRecommender
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??1CvAdvisorRecommender@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$2
__ehfuncinfo$??1CvAdvisorRecommender@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CvAdvisorRecommender@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
xdata$x	ENDS
;	COMDAT ??1CvAdvisorRecommender@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvAdvisorRecommender@@QAE@XZ PROC			; CvAdvisorRecommender::~CvAdvisorRecommender, COMDAT
; _this$ = ecx

; 21   : {

	push	-1
	push	__ehhandler$??1CvAdvisorRecommender@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi

; 22   : 	Uninit();
; 23   : }

	mov	eax, DWORD PTR [esi+1584]
	lea	ecx, DWORD PTR [esi+1596]
	mov	DWORD PTR __$EHRec$[esp+28], 2
	cmp	eax, ecx
	je	SHORT $LN14@CvAdvisorR
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN14@CvAdvisorR:
	mov	eax, DWORD PTR [esi+768]
	lea	edx, DWORD PTR [esi+780]
	mov	BYTE PTR __$EHRec$[esp+28], 1
	cmp	eax, edx
	je	SHORT $LN31@CvAdvisorR
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN31@CvAdvisorR:
	mov	eax, DWORD PTR [esi+720]
	lea	ecx, DWORD PTR [esi+732]
	mov	BYTE PTR __$EHRec$[esp+28], 0
	cmp	eax, ecx
	je	SHORT $LN48@CvAdvisorR
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN48@CvAdvisorR:
	mov	eax, DWORD PTR [esi+64]
	add	esi, 76					; 0000004cH
	cmp	eax, esi
	mov	DWORD PTR __$EHRec$[esp+28], -1
	pop	esi
	je	SHORT $LN65@CvAdvisorR
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN65@CvAdvisorR:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ	; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>
__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__unwindfunclet$??1CvAdvisorRecommender@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	jmp	??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>
__ehhandler$??1CvAdvisorRecommender@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CvAdvisorRecommender@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvAdvisorRecommender@@QAE@XZ ENDP			; CvAdvisorRecommender::~CvAdvisorRecommender
PUBLIC	?Reset@CvAdvisorRecommender@@QAEXXZ		; CvAdvisorRecommender::Reset
; Function compile flags: /Ogtpy
;	COMDAT ?Reset@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
?Reset@CvAdvisorRecommender@@QAEXXZ PROC		; CvAdvisorRecommender::Reset, COMDAT
; _this$ = ecx

; 36   : 	ResetCity();

	or	eax, -1
	xor	edx, edx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+44], eax
	mov	DWORD PTR [ecx+772], edx
	mov	DWORD PTR [ecx+1588], edx

; 37   : 	ResetTechs();

	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [ecx+52], eax
	mov	DWORD PTR [ecx+56], eax
	mov	DWORD PTR [ecx+60], eax
	mov	DWORD PTR [ecx+68], edx
	mov	DWORD PTR [ecx+724], edx

; 38   : }

	ret	0
?Reset@CvAdvisorRecommender@@QAEXXZ ENDP		; CvAdvisorRecommender::Reset
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z ; CvWeightedVector<int,4,1>::push_back
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z PROC	; CvWeightedVector<int,4,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+44], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@5
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN5@push_back@5:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@5
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@5:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@H$03$00@@QAEIABHH@Z ENDP	; CvWeightedVector<int,4,1>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@H$0FA@$00@@QAEIABHH@Z ; CvWeightedVector<int,80,1>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$CvWeightedVector@H$0FA@$00@@QAEIABHH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@H$0FA@$00@@QAEIABHH@Z PROC ; CvWeightedVector<int,80,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+652], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@6
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize
$LN5@push_back@6:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@6
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@6:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@H$0FA@$00@@QAEIABHH@Z ENDP ; CvWeightedVector<int,80,1>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEIABUCvCityBuildable@@H@Z ; CvWeightedVector<CvCityBuildable,50,1>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEIABUCvCityBuildable@@H@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEIABUCvCityBuildable@@H@Z PROC ; CvWeightedVector<CvCityBuildable,50,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax+4]
	push	ebp
	mov	ebp, DWORD PTR [eax+8]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+812], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN7@push_back@7
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN7@push_back@7:
	mov	eax, DWORD PTR [esi+4]
	shl	eax, 4
	add	eax, DWORD PTR [esi]
	je	SHORT $LN10@push_back@7
	mov	ecx, DWORD PTR _iWeight$[esp+12]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ecx
$LN10@push_back@7:
	mov	eax, DWORD PTR [esi+4]
	pop	edi
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi
	pop	ebp
	pop	ebx

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEIABUCvCityBuildable@@H@Z ENDP ; CvWeightedVector<CvCityBuildable,50,1>::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEIABUCvCityBuildable@@H@Z ; CvWeightedVector<CvCityBuildable,4,1>::push_back
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEIABUCvCityBuildable@@H@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEIABUCvCityBuildable@@H@Z PROC ; CvWeightedVector<CvCityBuildable,4,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax+4]
	push	ebp
	mov	ebp, DWORD PTR [eax+8]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+76], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN7@push_back@8
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN7@push_back@8:
	mov	eax, DWORD PTR [esi+4]
	shl	eax, 4
	add	eax, DWORD PTR [esi]
	je	SHORT $LN10@push_back@8
	mov	ecx, DWORD PTR _iWeight$[esp+12]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ecx
$LN10@push_back@8:
	mov	eax, DWORD PTR [esi+4]
	pop	edi
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi
	pop	ebp
	pop	ebx

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEIABUCvCityBuildable@@H@Z ENDP ; CvWeightedVector<CvCityBuildable,4,1>::push_back
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	mov	eax, ecx
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap
	mov	ebx, 8
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	lea	esi, DWORD PTR [ecx-8]
	jle	SHORT $LN2@Sort_heap
$LN24@Sort_heap:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 8
	mov	DWORD PTR [esi+4], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [ebx+esi-8]
	sar	ecx, 3
	push	ecx
	push	0
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN2@Sort_heap:
	sub	esi, 8
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 3
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap
$LN1@Sort_heap:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	mov	eax, ecx
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap@2
	mov	ebx, 8
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	lea	esi, DWORD PTR [ecx-8]
	jle	SHORT $LN2@Sort_heap@2
$LN24@Sort_heap@2:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 8
	mov	DWORD PTR [esi+4], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [ebx+esi-8]
	sar	ecx, 3
	push	ecx
	push	0
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN2@Sort_heap@2:
	sub	esi, 8
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 3
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap@2
$LN1@Sort_heap@2:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
$T225729 = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 2214 : 	{	// order heap by repeatedly popping, using operator<

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	esi, DWORD PTR __Last$[esp+24]
	push	edi
	mov	edi, DWORD PTR __First$[esp+28]
	mov	eax, esi
	sub	eax, edi
	sar	eax, 4
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap@3
	mov	ebx, 16					; 00000010H
	add	esi, -16				; fffffff0H
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	jle	SHORT $LN2@Sort_heap@3
$LN24@Sort_heap@3:
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR [esi+8]
	mov	DWORD PTR $T225729[esp+44], eax
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T225729[esp+60]
	mov	DWORD PTR [eax+4], edx
	lea	edx, DWORD PTR [ebx+esi-16]
	sar	edx, 4
	push	edx
	push	0
	push	edi
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 28					; 0000001cH
$LN2@Sort_heap@3:
	sub	esi, 16					; 00000010H
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 4
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap@3
$LN1@Sort_heap@3:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
$T225791 = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 2214 : 	{	// order heap by repeatedly popping, using operator<

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	esi, DWORD PTR __Last$[esp+24]
	push	edi
	mov	edi, DWORD PTR __First$[esp+28]
	mov	eax, esi
	sub	eax, edi
	sar	eax, 4
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap@4
	mov	ebx, 16					; 00000010H
	add	esi, -16				; fffffff0H
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	jle	SHORT $LN2@Sort_heap@4
$LN24@Sort_heap@4:
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR [esi+8]
	mov	DWORD PTR $T225791[esp+44], eax
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [esi+12], eax
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T225791[esp+60]
	mov	DWORD PTR [eax+4], edx
	lea	edx, DWORD PTR [ebx+esi-16]
	sar	edx, 4
	push	edx
	push	0
	push	edi
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 28					; 0000001cH
$LN2@Sort_heap@4:
	sub	esi, 16					; 00000010H
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 4
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap@4
$LN1@Sort_heap@4:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?Init@CvAdvisorRecommender@@QAEXXZ		; CvAdvisorRecommender::Init
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
;	COMDAT ?Init@CvAdvisorRecommender@@QAEXXZ
_TEXT	SEGMENT
?Init@CvAdvisorRecommender@@QAEXXZ PROC			; CvAdvisorRecommender::Init, COMDAT
; _this$ = ecx

; 27   : 	Reset();

	or	eax, -1
	xor	edx, edx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], eax
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], edx
	mov	DWORD PTR [ecx+40], eax
	mov	DWORD PTR [ecx+44], eax
	mov	DWORD PTR [ecx+772], edx
	mov	DWORD PTR [ecx+1588], edx
	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [ecx+52], eax
	mov	DWORD PTR [ecx+56], eax
	mov	DWORD PTR [ecx+60], eax
	mov	DWORD PTR [ecx+68], edx
	mov	DWORD PTR [ecx+724], edx

; 28   : }

	ret	0
?Init@CvAdvisorRecommender@@QAEXXZ ENDP			; CvAdvisorRecommender::Init
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::sort_heap<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,80,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::sort_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::sort_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??0CvAdvisorRecommender@@QAE@XZ			; CvAdvisorRecommender::CvAdvisorRecommender
;	COMDAT xdata$x
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0CvAdvisorRecommender@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$2
__ehfuncinfo$??0CvAdvisorRecommender@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CvAdvisorRecommender@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
xdata$x	ENDS
;	COMDAT ??0CvAdvisorRecommender@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvAdvisorRecommender@@QAE@XZ PROC			; CvAdvisorRecommender::CvAdvisorRecommender, COMDAT
; _this$ = ecx

; 16   : {

	push	-1
	push	__ehhandler$??0CvAdvisorRecommender@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	eax, ecx
	lea	edx, DWORD PTR [eax+76]
	xor	ecx, ecx
	mov	DWORD PTR [eax+72], 80			; 00000050H
	mov	DWORD PTR [eax+64], edx
	lea	edx, DWORD PTR [eax+732]
	mov	DWORD PTR [eax+728], 4
	mov	DWORD PTR [eax+720], edx
	lea	edx, DWORD PTR [eax+780]
	mov	DWORD PTR [eax+776], 50			; 00000032H
	mov	DWORD PTR [eax+768], edx
	mov	DWORD PTR [eax+1592], 4
	lea	edx, DWORD PTR [eax+1596]
	mov	DWORD PTR [eax+1584], edx

; 17   : 	Init();

	or	edx, -1
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx
	mov	DWORD PTR [eax+28], edx
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax+40], edx
	mov	DWORD PTR [eax+44], edx
	mov	DWORD PTR [eax+772], ecx
	mov	DWORD PTR [eax+1588], ecx
	mov	DWORD PTR [eax+48], edx
	mov	DWORD PTR [eax+52], edx
	mov	DWORD PTR [eax+56], edx
	mov	DWORD PTR [eax+60], edx
	mov	DWORD PTR [eax+68], ecx
	mov	DWORD PTR [eax+724], ecx

; 18   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1?$CvWeightedVector@H$0FA@$00@@QAE@XZ	; CvWeightedVector<int,80,1>::~CvWeightedVector<int,80,1>
__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 720				; 000002d0H
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__unwindfunclet$??0CvAdvisorRecommender@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 768				; 00000300H
	jmp	??1?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAE@XZ ; CvWeightedVector<CvCityBuildable,50,1>::~CvWeightedVector<CvCityBuildable,50,1>
__ehhandler$??0CvAdvisorRecommender@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0CvAdvisorRecommender@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvAdvisorRecommender@@QAE@XZ ENDP			; CvAdvisorRecommender::CvAdvisorRecommender
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z
_TEXT	SEGMENT
__Mid$219287 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort:
	test	esi, esi
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$219287[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$219287[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$219287[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -8					; fffffff8H
	and	edx, -8					; fffffff8H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$219287[esp+36]
$LN26@Sort:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort
$LN25@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -8					; fffffff8H
	cmp	eax, 8
	jle	SHORT $LN10@Sort
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z
_TEXT	SEGMENT
__Mid$219358 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@2
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort@2:
	test	esi, esi
	jle	SHORT $LN6@Sort@2

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$219358[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,80,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$219358[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$219358[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -8					; fffffff8H
	and	edx, -8					; fffffff8H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort@2
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort@2
$LN5@Sort@2:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$219358[esp+36]
$LN26@Sort@2:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort@2
$LN25@Sort@2:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort@2

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,80,1>::WeightedElement *,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort@2:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort@2:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@2

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -8					; fffffff8H
	cmp	eax, 8
	jle	SHORT $LN10@Sort@2
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,80,1>::WeightedElement *,int,CvWeightedVector<int,80,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort@2:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,80,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z
_TEXT	SEGMENT
__Mid$219429 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 4
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@3
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort@3:
	test	esi, esi
	jle	SHORT $LN6@Sort@3

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$219429[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$219429[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$219429[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -16				; fffffff0H
	and	edx, -16				; fffffff0H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort@3
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort@3
$LN5@Sort@3:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$219429[esp+36]
$LN26@Sort@3:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 4
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort@3
$LN25@Sort@3:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort@3

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort@3:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@3

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -16				; fffffff0H
	cmp	eax, 16					; 00000010H
	jle	SHORT $LN10@Sort@3
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,50,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort@3:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z
_TEXT	SEGMENT
__Mid$219500 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 4
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@4
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort@4:
	test	esi, esi
	jle	SHORT $LN6@Sort@4

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$219500[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$219500[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$219500[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -16				; fffffff0H
	and	edx, -16				; fffffff0H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort@4
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort@4
$LN5@Sort@4:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$219500[esp+36]
$LN26@Sort@4:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 4
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort@4
$LN25@Sort@4:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort@4

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort@4:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort@4:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort@4

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -16				; fffffff0H
	cmp	eax, 16					; 00000010H
	jle	SHORT $LN10@Sort@4
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int,CvWeightedVector<CvCityBuildable,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort@4:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::_Sort_heap<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::sort<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::sort<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 3
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::sort<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ; std::sort<CvWeightedVector<int,80,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z PROC ; std::sort<CvWeightedVector<int,80,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 3
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0@Z ENDP ; std::sort<CvWeightedVector<int,80,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ; std::sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z PROC ; std::sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 4
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0@Z ENDP ; std::sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ; std::sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z PROC ; std::sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 4
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0@Z ENDP ; std::sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ	; CvWeightedVector<int,4,1>::SortItems
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ PROC	; CvWeightedVector<int,4,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ ENDP	; CvWeightedVector<int,4,1>::SortItems
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@H$0FA@$00@@QAEXXZ	; CvWeightedVector<int,80,1>::SortItems
; Function compile flags: /Ogtpy
;	COMDAT ?SortItems@?$CvWeightedVector@H$0FA@$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@H$0FA@$00@@QAEXXZ PROC	; CvWeightedVector<int,80,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@H$0FA@$00@@QAEXXZ ENDP	; CvWeightedVector<int,80,1>::SortItems
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXXZ ; CvWeightedVector<CvCityBuildable,50,1>::SortItems
; Function compile flags: /Ogtpy
;	COMDAT ?SortItems@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXXZ PROC ; CvWeightedVector<CvCityBuildable,50,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [ecx]
	shl	eax, 4
	add	eax, edx
	mov	ecx, eax
	sub	ecx, edx
	sar	ecx, 4
	push	ecx
	push	eax
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@QAEXXZ ENDP ; CvWeightedVector<CvCityBuildable,50,1>::SortItems
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXXZ ; CvWeightedVector<CvCityBuildable,4,1>::SortItems
; Function compile flags: /Ogtpy
;	COMDAT ?SortItems@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXXZ PROC ; CvWeightedVector<CvCityBuildable,4,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [ecx]
	shl	eax, 4
	add	eax, edx
	mov	ecx, eax
	sub	ecx, edx
	sar	ecx, 4
	push	ecx
	push	eax
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@UCvCityBuildable@@$03$00@@QAEXXZ ENDP ; CvWeightedVector<CvCityBuildable,4,1>::SortItems
_TEXT	ENDS
PUBLIC	?UpdateCityRecommendations@CvAdvisorRecommender@@QAEXPAVCvCity@@@Z ; CvAdvisorRecommender::UpdateCityRecommendations
EXTRN	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z:PROC ; CityStrategyAIHelpers::ReweightByTurnsLeft
EXTRN	?GetWeight@CvProjectProductionAI@@QAEHW4ProjectTypes@@@Z:PROC ; CvProjectProductionAI::GetWeight
EXTRN	?GetProjectProductionAI@CvCityStrategyAI@@QAEPAVCvProjectProductionAI@@XZ:PROC ; CvCityStrategyAI::GetProjectProductionAI
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4ProjectTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?canCreate@CvCity@@QBE_NW4ProjectTypes@@_N1@Z:PROC ; CvCity::canCreate
EXTRN	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ:PROC ; CvProjectXMLEntries::GetNumProjects
EXTRN	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ:PROC ; CvGlobals::GetGameProjects
EXTRN	?GetWeight@CvUnitProductionAI@@QAEHW4UnitTypes@@@Z:PROC ; CvUnitProductionAI::GetWeight
EXTRN	?GetUnitProductionAI@CvCityStrategyAI@@QAEPAVCvUnitProductionAI@@XZ:PROC ; CvCityStrategyAI::GetUnitProductionAI
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4UnitTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z:PROC ; CvCity::canTrain
EXTRN	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ:PROC	; CvUnitXMLEntries::GetNumUnits
EXTRN	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ:PROC ; CvGlobals::GetGameUnits
EXTRN	?GetWeight@CvBuildingProductionAI@@QAEHW4BuildingTypes@@@Z:PROC ; CvBuildingProductionAI::GetWeight
EXTRN	?GetBuildingProductionAI@CvCityStrategyAI@@QAEPAVCvBuildingProductionAI@@XZ:PROC ; CvCityStrategyAI::GetBuildingProductionAI
EXTRN	?getProductionTurnsLeft@CvCity@@QBEHW4BuildingTypes@@H@Z:PROC ; CvCity::getProductionTurnsLeft
EXTRN	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z:PROC ; CvCity::canConstruct
EXTRN	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ:PROC ; CvBuildingXMLEntries::GetNumBuildings
EXTRN	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ:PROC ; CvGlobals::GetGameBuildings
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
; Function compile flags: /Ogtpy
; File c:\users\enormousapplepie\documents\github\lekmod\lekmod_dll\cvgamecoredll_expansion2\cvadvisorrecommender.cpp
;	COMDAT ?UpdateCityRecommendations@CvAdvisorRecommender@@QAEXPAVCvCity@@@Z
_TEXT	SEGMENT
_i$218390 = -48						; size = 4
_i$218385 = -48						; size = 4
_pCityStrategy$ = -48					; size = 4
_buildable$ = -44					; size = 12
_elem$227285 = -32					; size = 16
_weightedElem$227214 = -32				; size = 16
_elem$227105 = -32					; size = 16
_elem$227165 = -16					; size = 16
_weightedElem$227057 = -16				; size = 16
_weightedElem$227022 = -16				; size = 16
_weightedElem$226971 = -16				; size = 16
_pCity$ = 8						; size = 4
?UpdateCityRecommendations@CvAdvisorRecommender@@QAEXPAVCvCity@@@Z PROC ; CvAdvisorRecommender::UpdateCityRecommendations, COMDAT
; _this$ = ecx

; 54   : {

	sub	esp, 48					; 00000030H
	push	ebx

; 55   : 	ResetCity();
; 56   : 
; 57   : 	CvCityStrategyAI* pCityStrategy = pCity->GetCityStrategyAI();

	mov	ebx, DWORD PTR _pCity$[esp+48]
	or	eax, -1
	push	ebp
	xor	ebp, ebp
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], ebp
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ebp
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+24], ebp
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+36], ebp
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+44], eax
	mov	DWORD PTR [esi+772], ebp
	push	edi
	mov	ecx, ebx
	mov	DWORD PTR [esi+1588], ebp
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI

; 58   : 
; 59   : 	RandomNumberDelegate fcn = MakeDelegate(&GC.getGame(), &CvGame::getAsyncRandNum);;
; 60   : 
; 61   : 	CvCityBuildable buildable;
; 62   : 	int iWeight;
; 63   : 
; 64   : 	// buildings
; 65   : #ifdef AUI_WARNING_FIXES
; 66   : 	for (uint iBuildingLoop = 0; iBuildingLoop < GC.GetGameBuildings()->GetNumBuildings(); iBuildingLoop++)
; 67   : #else
; 68   : 	for(int iBuildingLoop = 0; iBuildingLoop < GC.GetGameBuildings()->GetNumBuildings(); iBuildingLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _pCityStrategy$[esp+64], eax
	mov	DWORD PTR _buildable$[esp+64], ebp
	mov	DWORD PTR _buildable$[esp+68], ebp
	mov	DWORD PTR _buildable$[esp+72], ebp
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	test	eax, eax
	jle	$LN21@UpdateCity
$LL232@UpdateCity:

; 69   : #endif
; 70   : 	{
; 71   : 		BuildingTypes eBuilding = (BuildingTypes)iBuildingLoop;
; 72   : 		if(!pCity->canConstruct(eBuilding))

	push	0
	push	0
	push	0
	push	0
	push	ebp
	mov	ecx, ebx
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	test	al, al
	je	SHORT $LN22@UpdateCity

; 73   : 		{
; 74   : 			continue;
; 75   : 		}
; 76   : 
; 77   : 		buildable.m_eBuildableType = CITY_BUILDABLE_BUILDING;
; 78   : 		buildable.m_iIndex = iBuildingLoop;
; 79   : 		buildable.m_iTurnsToConstruct = pCity->getProductionTurnsLeft(eBuilding, 0);

	push	0
	push	ebp
	mov	ecx, ebx
	call	?getProductionTurnsLeft@CvCity@@QBEHW4BuildingTypes@@H@Z ; CvCity::getProductionTurnsLeft

; 80   : 
; 81   : 		iWeight = pCityStrategy->GetBuildingProductionAI()->GetWeight(eBuilding);

	mov	ecx, DWORD PTR _pCityStrategy$[esp+64]
	push	ebp
	mov	DWORD PTR _buildable$[esp+76], eax

; 82   : 		m_aCityBuildables.push_back(buildable, iWeight);

	lea	edi, DWORD PTR [esi+768]
	call	?GetBuildingProductionAI@CvCityStrategyAI@@QAEPAVCvBuildingProductionAI@@XZ ; CvCityStrategyAI::GetBuildingProductionAI
	mov	ecx, eax
	call	?GetWeight@CvBuildingProductionAI@@QAEHW4BuildingTypes@@@Z ; CvBuildingProductionAI::GetWeight
	mov	DWORD PTR _weightedElem$226971[esp+76], eax
	mov	eax, DWORD PTR [edi+8]
	mov	BYTE PTR [edi+812], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN75@UpdateCity
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN75@UpdateCity:
	mov	eax, DWORD PTR [edi+4]
	shl	eax, 4
	add	eax, DWORD PTR [edi]
	je	SHORT $LN78@UpdateCity
	mov	edx, DWORD PTR _weightedElem$226971[esp+76]
	mov	ecx, 1
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _buildable$[esp+72]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN78@UpdateCity:
	inc	DWORD PTR [edi+4]
$LN22@UpdateCity:

; 58   : 
; 59   : 	RandomNumberDelegate fcn = MakeDelegate(&GC.getGame(), &CvGame::getAsyncRandNum);;
; 60   : 
; 61   : 	CvCityBuildable buildable;
; 62   : 	int iWeight;
; 63   : 
; 64   : 	// buildings
; 65   : #ifdef AUI_WARNING_FIXES
; 66   : 	for (uint iBuildingLoop = 0; iBuildingLoop < GC.GetGameBuildings()->GetNumBuildings(); iBuildingLoop++)
; 67   : #else
; 68   : 	for(int iBuildingLoop = 0; iBuildingLoop < GC.GetGameBuildings()->GetNumBuildings(); iBuildingLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	ebp
	call	?GetGameBuildings@CvGlobals@@QBEPAVCvBuildingXMLEntries@@XZ ; CvGlobals::GetGameBuildings
	mov	ecx, eax
	call	?GetNumBuildings@CvBuildingXMLEntries@@QAEHXZ ; CvBuildingXMLEntries::GetNumBuildings
	cmp	ebp, eax
	jl	$LL232@UpdateCity
$LN21@UpdateCity:

; 83   : 	}
; 84   : 
; 85   : 	// units
; 86   : #ifdef AUI_WARNING_FIXES
; 87   : 	for (uint iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)
; 88   : #else
; 89   : 	for(int iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	ebp, ebp
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	test	eax, eax
	jle	$LN17@UpdateCity
	npad	1
$LL233@UpdateCity:

; 90   : #endif
; 91   : 	{
; 92   : 		UnitTypes eUnit = (UnitTypes)iUnitLoop;
; 93   : 		if(!pCity->canTrain(eUnit))

	push	0
	push	0
	push	0
	push	0
	push	0
	push	ebp
	mov	ecx, ebx
	call	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z ; CvCity::canTrain
	test	al, al
	je	SHORT $LN18@UpdateCity

; 94   : 		{
; 95   : 			continue;
; 96   : 		}
; 97   : 
; 98   : 		buildable.m_eBuildableType = CITY_BUILDABLE_UNIT;
; 99   : 		buildable.m_iIndex = iUnitLoop;
; 100  : 		buildable.m_iTurnsToConstruct = pCity->getProductionTurnsLeft(eUnit, 0);

	push	0
	push	ebp
	mov	ecx, ebx
	call	?getProductionTurnsLeft@CvCity@@QBEHW4UnitTypes@@H@Z ; CvCity::getProductionTurnsLeft

; 101  : 		iWeight = pCityStrategy->GetUnitProductionAI()->GetWeight(eUnit);

	mov	ecx, DWORD PTR _pCityStrategy$[esp+64]
	push	ebp
	mov	DWORD PTR _buildable$[esp+76], eax

; 102  : 		m_aCityBuildables.push_back(buildable, iWeight);

	lea	edi, DWORD PTR [esi+768]
	call	?GetUnitProductionAI@CvCityStrategyAI@@QAEPAVCvUnitProductionAI@@XZ ; CvCityStrategyAI::GetUnitProductionAI
	mov	ecx, eax
	call	?GetWeight@CvUnitProductionAI@@QAEHW4UnitTypes@@@Z ; CvUnitProductionAI::GetWeight
	mov	DWORD PTR _weightedElem$227022[esp+76], eax
	mov	eax, DWORD PTR [edi+8]
	mov	BYTE PTR [edi+812], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN91@UpdateCity
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN91@UpdateCity:
	mov	eax, DWORD PTR [edi+4]
	shl	eax, 4
	add	eax, DWORD PTR [edi]
	je	SHORT $LN94@UpdateCity
	mov	edx, DWORD PTR _weightedElem$227022[esp+76]
	mov	ecx, 2
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _buildable$[esp+72]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN94@UpdateCity:
	inc	DWORD PTR [edi+4]
$LN18@UpdateCity:

; 83   : 	}
; 84   : 
; 85   : 	// units
; 86   : #ifdef AUI_WARNING_FIXES
; 87   : 	for (uint iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)
; 88   : #else
; 89   : 	for(int iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	ebp
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	cmp	ebp, eax
	jl	$LL233@UpdateCity
$LN17@UpdateCity:

; 103  : 	}
; 104  : 
; 105  : 	// projects
; 106  : #ifdef AUI_WARNING_FIXES
; 107  : 	for (uint iProjectLoop = 0; iProjectLoop < GC.GetGameProjects()->GetNumProjects(); iProjectLoop++)
; 108  : #else
; 109  : 	for(int iProjectLoop = 0; iProjectLoop < GC.GetGameProjects()->GetNumProjects(); iProjectLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	xor	ebp, ebp
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects
	test	eax, eax
	jle	$LN13@UpdateCity
$LL234@UpdateCity:

; 110  : #endif
; 111  : 	{
; 112  : 		ProjectTypes eProject = (ProjectTypes)iProjectLoop;
; 113  : 		if(!pCity->canCreate(eProject))

	push	0
	push	0
	push	ebp
	mov	ecx, ebx
	call	?canCreate@CvCity@@QBE_NW4ProjectTypes@@_N1@Z ; CvCity::canCreate
	test	al, al
	je	SHORT $LN14@UpdateCity

; 114  : 		{
; 115  : 			continue;
; 116  : 		}
; 117  : 
; 118  : 		buildable.m_eBuildableType = CITY_BUILDABLE_PROJECT;
; 119  : 		buildable.m_iIndex = iProjectLoop;
; 120  : 		buildable.m_iTurnsToConstruct = pCity->getProductionTurnsLeft(eProject, 0);

	push	0
	push	ebp
	mov	ecx, ebx
	call	?getProductionTurnsLeft@CvCity@@QBEHW4ProjectTypes@@H@Z ; CvCity::getProductionTurnsLeft

; 121  : 		iWeight = pCityStrategy->GetProjectProductionAI()->GetWeight(eProject);

	mov	ecx, DWORD PTR _pCityStrategy$[esp+64]
	push	ebp
	mov	DWORD PTR _buildable$[esp+76], eax

; 122  : 		m_aCityBuildables.push_back(buildable, iWeight);

	lea	edi, DWORD PTR [esi+768]
	call	?GetProjectProductionAI@CvCityStrategyAI@@QAEPAVCvProjectProductionAI@@XZ ; CvCityStrategyAI::GetProjectProductionAI
	mov	ecx, eax
	call	?GetWeight@CvProjectProductionAI@@QAEHW4ProjectTypes@@@Z ; CvProjectProductionAI::GetWeight
	mov	DWORD PTR _weightedElem$227057[esp+76], eax
	mov	eax, DWORD PTR [edi+8]
	mov	BYTE PTR [edi+812], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN107@UpdateCity
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@$0DC@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement,50,1,0,0>::GrowSize
$LN107@UpdateCity:
	mov	eax, DWORD PTR [edi+4]
	shl	eax, 4
	add	eax, DWORD PTR [edi]
	je	SHORT $LN110@UpdateCity
	mov	edx, DWORD PTR _weightedElem$227057[esp+76]
	mov	ecx, 3
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _buildable$[esp+72]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN110@UpdateCity:
	inc	DWORD PTR [edi+4]
$LN14@UpdateCity:

; 103  : 	}
; 104  : 
; 105  : 	// projects
; 106  : #ifdef AUI_WARNING_FIXES
; 107  : 	for (uint iProjectLoop = 0; iProjectLoop < GC.GetGameProjects()->GetNumProjects(); iProjectLoop++)
; 108  : #else
; 109  : 	for(int iProjectLoop = 0; iProjectLoop < GC.GetGameProjects()->GetNumProjects(); iProjectLoop++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	inc	ebp
	call	?GetGameProjects@CvGlobals@@QBEPAVCvProjectXMLEntries@@XZ ; CvGlobals::GetGameProjects
	mov	ecx, eax
	call	?GetNumProjects@CvProjectXMLEntries@@QAEHXZ ; CvProjectXMLEntries::GetNumProjects
	cmp	ebp, eax
	jl	$LL234@UpdateCity
$LN13@UpdateCity:

; 123  : 	}
; 124  : 
; 125  : 	// reweigh by cost
; 126  : 	for(int iI = 0; iI < m_aCityBuildables.size(); iI++)

	xor	ebp, ebp
	cmp	DWORD PTR [esi+772], ebp
	jle	SHORT $LN9@UpdateCity
	xor	edi, edi
	npad	5
$LL11@UpdateCity:

; 127  : 	{
; 128  : 		buildable = m_aCityBuildables.GetElement(iI);

	mov	eax, DWORD PTR [esi+768]
	mov	edx, DWORD PTR [eax+edi+4]
	mov	ecx, DWORD PTR [eax+edi]
	add	eax, edi
	mov	DWORD PTR _buildable$[esp+68], edx

; 129  : 
; 130  : 		// Compute the new weight and change it
; 131  : 		int iNewWeight = CityStrategyAIHelpers::ReweightByTurnsLeft(m_aCityBuildables.GetWeight(iI), buildable.m_iTurnsToConstruct);

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _elem$227105[esp+64], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _buildable$[esp+64], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _elem$227105[esp+68], edx
	push	ecx
	mov	edx, ecx
	push	eax
	mov	DWORD PTR _elem$227105[esp+80], edx
	call	?ReweightByTurnsLeft@CityStrategyAIHelpers@@YAHHH@Z ; CityStrategyAIHelpers::ReweightByTurnsLeft

; 132  : 		m_aCityBuildables.SetWeight(iI, iNewWeight);

	mov	ecx, DWORD PTR [esi+768]
	mov	DWORD PTR [edi+ecx+12], eax
	inc	ebp
	add	esp, 8
	add	edi, 16					; 00000010H
	cmp	ebp, DWORD PTR [esi+772]
	jl	SHORT $LL11@UpdateCity
$LN9@UpdateCity:

; 133  : 	}
; 134  : 
; 135  : 	m_aCityBuildables.SortItems();

	mov	ecx, DWORD PTR [esi+768]
	mov	eax, DWORD PTR [esi+772]
	shl	eax, 4
	add	eax, ecx
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 4
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$0DC@$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,50,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 136  : 
; 137  : 	// move top buildables into final round!
; 138  : 	for(int i = 0; i < NUM_ADVISOR_TYPES; i++)

	xor	ebp, ebp
	mov	DWORD PTR _i$218385[esp+64], ebp
	npad	7
$LL231@UpdateCity:

; 139  : 	{
; 140  : 		// if index is out of bounds
; 141  : 		if(i >= m_aCityBuildables.size())

	mov	eax, DWORD PTR _i$218385[esp+64]
	cmp	eax, DWORD PTR [esi+772]
	jge	$LN216@UpdateCity

; 142  : 		{
; 143  : 			break;
; 144  : 		}
; 145  : 
; 146  : 		m_aFinalRoundBuildables.push_back(m_aCityBuildables.GetElement(i), m_aCityBuildables.GetWeight(i));

	mov	ecx, DWORD PTR [esi+768]
	mov	edx, DWORD PTR [ecx+ebp]
	mov	ebx, DWORD PTR [ecx+ebp+12]
	lea	eax, DWORD PTR [ecx+ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _elem$227165[esp+64], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _elem$227165[esp+68], ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _elem$227165[esp+72], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [esi+1584]
	mov	DWORD PTR _weightedElem$227214[esp+72], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR _weightedElem$227214[esp+64], ecx
	mov	DWORD PTR _weightedElem$227214[esp+68], edx
	mov	BYTE PTR [edi+76], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN167@UpdateCity
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN167@UpdateCity:
	mov	eax, DWORD PTR [edi+4]
	shl	eax, 4
	add	eax, DWORD PTR [edi]
	je	SHORT $LN170@UpdateCity
	mov	ecx, DWORD PTR _weightedElem$227214[esp+64]
	mov	edx, DWORD PTR _weightedElem$227214[esp+68]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _weightedElem$227214[esp+72]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
$LN170@UpdateCity:
	mov	eax, 1
	add	DWORD PTR [edi+4], eax
	add	DWORD PTR _i$218385[esp+64], eax
	add	ebp, 16					; 00000010H
	cmp	ebp, 64					; 00000040H
	jl	$LL231@UpdateCity
$LN216@UpdateCity:

; 147  : 	}
; 148  : 
; 149  : 	for(int i = 0; i < m_aFinalRoundBuildables.size(); i++)

	cmp	DWORD PTR [esi+1588], 0
	mov	DWORD PTR _i$218390[esp+64], 0
	jle	$LN2@UpdateCity
	npad	2
$LL4@UpdateCity:

; 150  : 	{
; 151  : 		m_aFinalRoundBuildables.SortItems();

	mov	ecx, DWORD PTR [esi+1584]
	mov	eax, DWORD PTR [esi+1588]
	shl	eax, 4
	add	eax, ecx
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 4
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@UCvCityBuildable@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<CvCityBuildable,4,1>::WeightedElement *,int>

; 152  : 
; 153  : 		buildable = m_aFinalRoundBuildables.GetElement(0);

	mov	eax, DWORD PTR [esi+1584]
	mov	edi, DWORD PTR [eax]
	mov	ebp, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax+8]

; 154  : 		int iScore = m_aFinalRoundBuildables.GetWeight(0);

	mov	ecx, edi
	mov	DWORD PTR _elem$227285[esp+76], ecx
	mov	edx, ebp
	mov	ecx, ebx
	mov	DWORD PTR _elem$227285[esp+80], edx
	mov	edx, DWORD PTR [eax+12]

; 155  : 
; 156  : #if defined(AUI_POLICY_BUILDING_CLASS_FLAVOR_MODIFIERS) || defined(AUI_BELIEF_BUILDING_CLASS_FLAVOR_MODIFIERS)
; 157  : 		AdvisorTypes eAvailableAdvisor = FindUnassignedAdvisorForBuildable(pCity, buildable);
; 158  : #else
; 159  : 		AdvisorTypes eAvailableAdvisor = FindUnassignedAdvisorForBuildable(pCity->getOwner(), buildable);

	mov	eax, DWORD PTR _pCity$[esp+72]
	mov	eax, DWORD PTR [eax+84]
	mov	DWORD PTR _elem$227285[esp+84], ecx
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _buildable$[esp+64]
	push	ecx
	push	eax
	mov	ecx, esi
	mov	DWORD PTR _buildable$[esp+72], edi
	mov	DWORD PTR _buildable$[esp+76], ebp
	mov	DWORD PTR _buildable$[esp+80], ebx
	mov	DWORD PTR _elem$227285[esp+84], edx
	call	?FindUnassignedAdvisorForBuildable@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@AAUCvCityBuildable@@@Z ; CvAdvisorRecommender::FindUnassignedAdvisorForBuildable

; 160  : #endif
; 161  : 		if(eAvailableAdvisor != NO_ADVISOR_TYPE)

	cmp	eax, -1
	je	SHORT $LN1@UpdateCity

; 162  : 		{
; 163  : 			m_aRecommendedBuilds[eAvailableAdvisor] = buildable;

	lea	edx, DWORD PTR [eax+eax*2]
	lea	eax, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
$LN1@UpdateCity:

; 164  : 		}
; 165  : 
; 166  : 		m_aFinalRoundBuildables.SetWeight(0, iScore / 2);

	mov	eax, DWORD PTR _elem$227285[esp+76]
	mov	ecx, DWORD PTR [esi+1584]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _i$218390[esp+64]
	inc	eax
	cmp	eax, DWORD PTR [esi+1588]
	mov	DWORD PTR _i$218390[esp+64], eax
	jl	$LL4@UpdateCity
$LN2@UpdateCity:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 167  : 	}
; 168  : }

	add	esp, 48					; 00000030H
	ret	4
?UpdateCityRecommendations@CvAdvisorRecommender@@QAEXPAVCvCity@@@Z ENDP ; CvAdvisorRecommender::UpdateCityRecommendations
_TEXT	ENDS
PUBLIC	?UpdateTechRecommendations@CvAdvisorRecommender@@QAEXW4PlayerTypes@@@Z ; CvAdvisorRecommender::UpdateTechRecommendations
EXTRN	?GetNumFreeTechs@CvPlayer@@QBEHXZ:PROC		; CvPlayer::GetNumFreeTechs
EXTRN	_pow:PROC
EXTRN	?GetResearchTurnsLeft@CvPlayerTechs@@QBEHW4TechTypes@@_N@Z:PROC ; CvPlayerTechs::GetResearchTurnsLeft
EXTRN	?GetWeight@CvTechAI@@QAEHW4TechTypes@@@Z:PROC	; CvTechAI::GetWeight
EXTRN	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z:PROC ; CvPlayerTechs::CanResearch
EXTRN	?GetNumTechs@CvTechXMLEntries@@QAEHXZ:PROC	; CvTechXMLEntries::GetNumTechs
EXTRN	?GetTechAI@CvPlayerTechs@@QAEPAVCvTechAI@@XZ:PROC ; CvPlayerTechs::GetTechAI
EXTRN	__ftol2_sse_excpt:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?UpdateTechRecommendations@CvAdvisorRecommender@@QAEXW4PlayerTypes@@@Z
_TEXT	SEGMENT
_pPlayerTechs$ = -36					; size = 4
_i$218464 = -32						; size = 4
$T227340 = -32						; size = 4
_iTurnsLeft$218449 = -32				; size = 4
_pPlayerTechAI$ = -32					; size = 4
tv693 = -28						; size = 4
_weightedElem$227743 = -24				; size = 8
$T227341 = -24						; size = 4
_fWeightDivisor$218450 = -24				; size = 8
_fTotalCostFactor$218452 = -24				; size = 8
_fAdditionalTurnCostFactor$218451 = -24			; size = 8
_elem$227692 = -16					; size = 8
_elem$227617 = -16					; size = 8
_weightedElem$227572 = -16				; size = 8
_elem$227798 = -8					; size = 8
_elem$227631 = -8					; size = 8
_ePlayer$ = 8						; size = 4
?UpdateTechRecommendations@CvAdvisorRecommender@@QAEXW4PlayerTypes@@@Z PROC ; CvAdvisorRecommender::UpdateTechRecommendations, COMDAT
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	sub	esp, 52					; 00000034H
	push	ebx

; 219  : 	ResetTechs();

	or	eax, -1
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi+48], eax
	mov	DWORD PTR [esi+52], eax
	mov	DWORD PTR [esi+56], eax
	mov	DWORD PTR [esi+60], eax

; 220  : 	CvPlayerTechs* pPlayerTechs = GET_PLAYER(ePlayer).GetPlayerTechs();

	mov	eax, DWORD PTR _ePlayer$[ebp]
	imul	eax, 63236				; 0000f704H
	xor	ebx, ebx
	mov	DWORD PTR [esi+68], ebx
	mov	DWORD PTR [esi+724], ebx
	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	push	edi
	add	ecx, eax
	mov	DWORD PTR tv693[esp+64], eax
	call	?GetPlayerTechs@CvPlayer@@QBEPAVCvPlayerTechs@@XZ ; CvPlayer::GetPlayerTechs
	mov	edi, eax

; 221  : 	CvTechAI* pPlayerTechAI = pPlayerTechs->GetTechAI();

	mov	ecx, edi
	mov	DWORD PTR _pPlayerTechs$[esp+64], edi
	call	?GetTechAI@CvPlayerTechs@@QAEPAVCvTechAI@@XZ ; CvPlayerTechs::GetTechAI

; 222  : 
; 223  : 	RandomNumberDelegate fcn;
; 224  : #ifdef AUI_WARNING_FIXES
; 225  : 	uint iTechLoop;
; 226  : #else
; 227  : 	int iTechLoop;
; 228  : #endif
; 229  : 
; 230  : 	// Use the synchronous random number generate
; 231  : 	// Asynchronous one would be:
; 232  : 	fcn = MakeDelegate(&GC.getGame(), &CvGame::getAsyncRandNum);
; 233  : 	//fcn = MakeDelegate (&GC.getGame(), &CvGame::getJonRandNum);
; 234  : 
; 235  : 	// Loop through adding the researchable techs
; 236  : 	for(iTechLoop = 0; iTechLoop < pPlayerTechs->GetTechs()->GetNumTechs(); iTechLoop++)

	mov	ecx, edi
	mov	DWORD PTR _pPlayerTechAI$[esp+64], eax
	call	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ ; CvPlayerTechs::GetTechs
	mov	ecx, eax
	call	?GetNumTechs@CvTechXMLEntries@@QAEHXZ	; CvTechXMLEntries::GetNumTechs
	test	eax, eax
	jle	SHORT $LN15@UpdateTech
$LL17@UpdateTech:

; 237  : 	{
; 238  : 		TechTypes eTech = (TechTypes)iTechLoop;
; 239  : 		if(pPlayerTechs->CanResearch(eTech))

	push	0
	push	ebx
	mov	ecx, edi
	call	?CanResearch@CvPlayerTechs@@QBE_NW4TechTypes@@_N@Z ; CvPlayerTechs::CanResearch
	test	al, al
	je	SHORT $LN16@UpdateTech

; 240  : 		{
; 241  : 			m_aResearchableTechs.push_back(iTechLoop, pPlayerTechAI->GetWeight(eTech));

	mov	ecx, DWORD PTR _pPlayerTechAI$[esp+64]
	push	ebx
	lea	edi, DWORD PTR [esi+64]
	call	?GetWeight@CvTechAI@@QAEHW4TechTypes@@@Z ; CvTechAI::GetWeight
	mov	DWORD PTR _weightedElem$227572[esp+68], eax
	mov	eax, DWORD PTR [edi+8]
	mov	BYTE PTR [edi+652], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN83@UpdateTech
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FA@$00@@$0FA@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,80,1>::WeightedElement,80,1,0,0>::GrowSize
$LN83@UpdateTech:
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+edx*8]
	test	eax, eax
	je	SHORT $LN86@UpdateTech
	mov	ecx, DWORD PTR _weightedElem$227572[esp+68]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], ecx
$LN86@UpdateTech:
	inc	DWORD PTR [edi+4]
	mov	edi, DWORD PTR _pPlayerTechs$[esp+64]
$LN16@UpdateTech:
	mov	ecx, edi
	inc	ebx
	call	?GetTechs@CvPlayerTechs@@QBEPAVCvTechXMLEntries@@XZ ; CvPlayerTechs::GetTechs
	mov	ecx, eax
	call	?GetNumTechs@CvTechXMLEntries@@QAEHXZ	; CvTechXMLEntries::GetNumTechs
	cmp	ebx, eax
	jl	SHORT $LL17@UpdateTech
$LN15@UpdateTech:

; 242  : 		}
; 243  : 	}
; 244  : 
; 245  : 	// weigh by cost
; 246  : 	for(int iI = 0; iI < m_aResearchableTechs.size(); iI++)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+68], ebx
	jle	$LN11@UpdateTech
	jmp	SHORT $LN13@UpdateTech
	npad	9
$LL205@UpdateTech:
	mov	edi, DWORD PTR _pPlayerTechs$[esp+64]
$LN13@UpdateTech:

; 247  : 	{
; 248  : 		TechTypes eTech = (TechTypes) m_aResearchableTechs.GetElement(iI);

	mov	edx, DWORD PTR [esi+64]
	mov	eax, DWORD PTR [edx+ebx*8]

; 249  : 		int iTurnsLeft = 0;
; 250  : 
; 251  : 		iTurnsLeft = pPlayerTechs->GetResearchTurnsLeft(eTech, true);

	push	1
	push	eax
	mov	ecx, edi
	call	?GetResearchTurnsLeft@CvPlayerTechs@@QBEHW4TechTypes@@_N@Z ; CvPlayerTechs::GetResearchTurnsLeft
	mov	edi, eax
	mov	DWORD PTR _iTurnsLeft$218449[esp+64], edi

; 252  : 
; 253  : 		double fWeightDivisor;
; 254  : 
; 255  : 		// 10 turns will add 0.02; 80 turns will add 0.16
; 256  : 		double fAdditionalTurnCostFactor = GC.getAI_RESEARCH_WEIGHT_MOD_PER_TURN_LEFT() * iTurnsLeft;	// 0.015

	fild	DWORD PTR _iTurnsLeft$218449[esp+64]

; 257  : 		double fTotalCostFactor = GC.getAI_RESEARCH_WEIGHT_BASE_MOD() + fAdditionalTurnCostFactor;	// 0.15
; 258  : 
; 259  : 		fWeightDivisor = pow((double) iTurnsLeft, fTotalCostFactor);

	sub	esp, 8
	mov	eax, esp
	fmul	DWORD PTR ?gGlobals@@3VCvGlobals@@A+8008
	sub	esp, 8
	fstp	QWORD PTR _fAdditionalTurnCostFactor$218451[esp+80]
	fld	DWORD PTR ?gGlobals@@3VCvGlobals@@A+8012
	fadd	QWORD PTR _fAdditionalTurnCostFactor$218451[esp+80]
	fstp	QWORD PTR _fTotalCostFactor$218452[esp+80]
	mov	ecx, DWORD PTR _fTotalCostFactor$218452[esp+80]
	mov	edx, DWORD PTR _fTotalCostFactor$218452[esp+84]
	fild	DWORD PTR _iTurnsLeft$218449[esp+80]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	QWORD PTR [esp]
	call	_pow

; 260  : 
; 261  : 		// if the tech is free, then we don't want inverse the weighting. More expensive techs = better.
; 262  : 		int iNewWeight = 0;
; 263  : 		if(GET_PLAYER(ePlayer).GetNumFreeTechs() == 0)

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	fstp	QWORD PTR _fWeightDivisor$218450[esp+80]
	mov	ecx, DWORD PTR tv693[esp+80]
	add	esp, 16					; 00000010H
	add	ecx, eax
	call	?GetNumFreeTechs@CvPlayer@@QBEHXZ	; CvPlayer::GetNumFreeTechs
	test	eax, eax
	jne	SHORT $LN10@UpdateTech
	mov	edx, DWORD PTR [esi+64]

; 264  : 		{
; 265  : 			iNewWeight = int(double(m_aResearchableTechs.GetWeight(iI)) / fWeightDivisor);

	mov	ecx, DWORD PTR [edx+ebx*8+4]
	lea	edi, DWORD PTR [edx+ebx*8]
	mov	DWORD PTR _elem$227617[esp+68], ecx
	fild	DWORD PTR _elem$227617[esp+68]
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR _elem$227617[esp+64], eax
	fdiv	QWORD PTR _fWeightDivisor$218450[esp+64]
	call	__ftol2_sse_excpt

; 266  : 		}
; 267  : 		else

	jmp	SHORT $LN9@UpdateTech
$LN10@UpdateTech:

; 268  : 		{
; 269  : 			iNewWeight = m_aResearchableTechs.GetWeight(iI) * max(iTurnsLeft / 2, 1);

	mov	eax, edi
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR [esi+64]
	mov	ecx, DWORD PTR [edx+ebx*8]
	lea	edi, DWORD PTR [edx+ebx*8]
	sar	eax, 1
	mov	DWORD PTR $T227341[esp+64], eax
	mov	DWORD PTR _elem$227631[esp+64], ecx
	mov	ecx, DWORD PTR [edi+4]
	cmp	eax, 1
	mov	DWORD PTR $T227340[esp+64], 1
	lea	eax, DWORD PTR $T227340[esp+64]
	jl	SHORT $LN122@UpdateTech
	lea	eax, DWORD PTR $T227341[esp+64]
$LN122@UpdateTech:
	mov	eax, DWORD PTR [eax]
	imul	eax, ecx
$LN9@UpdateTech:
	inc	ebx

; 270  : 		}
; 271  : 
; 272  : 		// Now actually change the weight
; 273  : 		m_aResearchableTechs.SetWeight(iI, iNewWeight);

	mov	DWORD PTR [edi+4], eax
	cmp	ebx, DWORD PTR [esi+68]
	jl	$LL205@UpdateTech
$LN11@UpdateTech:

; 274  : 	}
; 275  : 
; 276  : 	m_aResearchableTechs.SortItems();

	mov	eax, DWORD PTR [esi+64]
	mov	edx, DWORD PTR [esi+68]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FA@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,80,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 277  : 
; 278  : 	// move techs into final round!
; 279  : 	for(int i = 0; i < NUM_ADVISOR_TYPES; i++)

	xor	ebx, ebx
$LN8@UpdateTech:

; 280  : 	{
; 281  : 		// if index is out of bounds
; 282  : 		if(i >= m_aResearchableTechs.size())

	cmp	ebx, DWORD PTR [esi+68]
	jge	SHORT $LN194@UpdateTech
	mov	eax, DWORD PTR [esi+64]

; 283  : 		{
; 284  : 			break;
; 285  : 		}
; 286  : 
; 287  : 		m_aFinalRoundTechs.push_back(m_aResearchableTechs.GetElement(i), m_aResearchableTechs.GetWeight(i));

	mov	ecx, DWORD PTR [eax+ebx*8]
	mov	edx, DWORD PTR [eax+ebx*8+4]
	lea	eax, DWORD PTR [eax+ebx*8]
	lea	edi, DWORD PTR [esi+720]
	mov	eax, ecx
	mov	DWORD PTR _weightedElem$227743[esp+64], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR _elem$227692[esp+64], ecx
	mov	DWORD PTR _elem$227692[esp+68], edx
	mov	BYTE PTR [edi+44], 0
	cmp	DWORD PTR [edi+4], eax
	jne	SHORT $LN153@UpdateTech
	push	eax
	mov	ecx, edi
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
$LN153@UpdateTech:
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN156@UpdateTech
	mov	ecx, DWORD PTR _weightedElem$227743[esp+64]
	mov	edx, DWORD PTR _elem$227692[esp+68]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN156@UpdateTech:
	inc	DWORD PTR [edi+4]
	inc	ebx
	cmp	ebx, 4
	jl	SHORT $LN8@UpdateTech
$LN194@UpdateTech:

; 288  : 	}
; 289  : 
; 290  : 	for(int i = 0; i < m_aFinalRoundTechs.size(); i++)

	cmp	DWORD PTR [esi+724], 0
	mov	DWORD PTR _i$218464[esp+64], 0
	jle	SHORT $LN2@UpdateTech
$LL4@UpdateTech:

; 291  : 	{
; 292  : 		m_aFinalRoundTechs.SortItems();

	mov	eax, DWORD PTR [esi+720]
	mov	ecx, DWORD PTR [esi+724]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>

; 293  : 
; 294  : 		TechTypes eTech = (TechTypes)m_aFinalRoundTechs.GetElement(0);

	mov	eax, DWORD PTR [esi+720]
	mov	edi, DWORD PTR [eax]

; 295  : 		int iScore = m_aFinalRoundTechs.GetWeight(0);
; 296  : 
; 297  : 		AdvisorTypes eAvailableAdvisor = FindUnassignedAdvisorForTech(ePlayer, eTech);

	mov	edx, DWORD PTR _ePlayer$[ebp]
	mov	ebx, DWORD PTR [eax+4]
	add	esp, 12					; 0000000cH
	mov	ecx, edi
	push	edi
	mov	DWORD PTR _elem$227798[esp+68], ecx
	push	edx
	mov	ecx, esi
	call	?FindUnassignedAdvisorForTech@CvAdvisorRecommender@@QAE?AW4AdvisorTypes@@W4PlayerTypes@@W4TechTypes@@@Z ; CvAdvisorRecommender::FindUnassignedAdvisorForTech

; 298  : 		if(eAvailableAdvisor != NO_ADVISOR_TYPE)

	cmp	eax, -1
	je	SHORT $LN1@UpdateTech

; 299  : 		{
; 300  : 			m_aRecommendedTechs[eAvailableAdvisor] = eTech;

	mov	DWORD PTR [esi+eax*4+48], edi
$LN1@UpdateTech:

; 301  : 		}
; 302  : 
; 303  : 		m_aFinalRoundTechs.SetWeight(0, iScore / 2);

	mov	ecx, DWORD PTR [esi+720]
	mov	eax, ebx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _i$218464[esp+64]
	inc	eax
	cmp	eax, DWORD PTR [esi+724]
	mov	DWORD PTR _i$218464[esp+64], eax
	jl	SHORT $LL4@UpdateTech
$LN2@UpdateTech:

; 304  : 	}
; 305  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?UpdateTechRecommendations@CvAdvisorRecommender@@QAEXW4PlayerTypes@@@Z ENDP ; CvAdvisorRecommender::UpdateTechRecommendations
_TEXT	ENDS
END
