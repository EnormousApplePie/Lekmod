; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	s:\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvGameQueries.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG217615 DB	'Minor Civ Quest: Gift Unit - Adding random weight to Uni'
	DB	't Chosen', 00H
CONST	ENDS
PUBLIC	?AreUnitsSameType@CvGameQueries@@SA_NW4UnitTypes@@0@Z ; CvGameQueries::AreUnitsSameType
EXTRN	?GetRange@CvUnitEntry@@QBEHXZ:PROC		; CvUnitEntry::GetRange
EXTRN	?GetCombat@CvUnitEntry@@QBEHXZ:PROC		; CvUnitEntry::GetCombat
EXTRN	?GetDomainType@CvUnitEntry@@QBEHXZ:PROC		; CvUnitEntry::GetDomainType
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvgamequeries.cpp
;	COMDAT ?AreUnitsSameType@CvGameQueries@@SA_NW4UnitTypes@@0@Z
_TEXT	SEGMENT
_bUnit1Combat$217680 = -1				; size = 1
_eFirstUnitType$ = 8					; size = 4
_eSecondUnitType$ = 12					; size = 4
?AreUnitsSameType@CvGameQueries@@SA_NW4UnitTypes@@0@Z PROC ; CvGameQueries::AreUnitsSameType, COMDAT

; 205  : {

	push	ecx

; 206  : 	CvUnitEntry* pkFirstUnitInfo = GC.getUnitInfo(eFirstUnitType);

	mov	eax, DWORD PTR _eFirstUnitType$[esp]
	push	ebx
	push	ebp
	push	edi
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo

; 207  : 	CvUnitEntry* pkSecondUnitInfo = GC.getUnitInfo(eSecondUnitType);

	mov	ecx, DWORD PTR _eSecondUnitType$[esp+12]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	edi, eax
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo

; 208  : 
; 209  : 	if(pkFirstUnitInfo == NULL || pkSecondUnitInfo == NULL)

	xor	ebx, ebx
	mov	ebp, eax
	cmp	edi, ebx
	je	SHORT $LN13@AreUnitsSa
	cmp	ebp, ebx
	je	SHORT $LN13@AreUnitsSa
	push	esi

; 211  : 
; 212  : 	int eFirstDomain = pkFirstUnitInfo->GetDomainType();

	mov	ecx, edi
	call	?GetDomainType@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetDomainType

; 213  : 	int eSecondDomain = pkSecondUnitInfo->GetDomainType();

	mov	ecx, ebp
	mov	esi, eax
	call	?GetDomainType@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetDomainType

; 214  : 
; 215  : 	// antonjs: Added for Smoky Skies scenario. 
; 216  : 	// If unit is DOMAIN_HOVER, its effective domain is a wildcard, equal to the other unit's domain. This prevents HOVER units from disobeying 1UPT.
; 217  : 	if (eFirstDomain == DOMAIN_HOVER && eSecondDomain == DOMAIN_HOVER)

	cmp	esi, 4
	jne	SHORT $LN10@AreUnitsSa
	cmp	eax, esi
	je	SHORT $LN6@AreUnitsSa

; 218  : 	{
; 219  : 		// Already a match
; 220  : 	}
; 221  : 	else if (eFirstDomain == DOMAIN_HOVER)
; 222  : 	{
; 223  : 		eFirstDomain = eSecondDomain; // Make it a match

	mov	esi, eax
	jmp	SHORT $LN17@AreUnitsSa
$LN10@AreUnitsSa:

; 224  : 	}
; 225  : 	else if (eSecondDomain == DOMAIN_HOVER)

	cmp	eax, 4

; 226  : 	{
; 227  : 		eSecondDomain = eFirstDomain; // Make it a match
; 228  : 	}
; 229  : 
; 230  : 	// Must be in the same domain
; 231  : 	if(eFirstDomain == eSecondDomain)

	je	SHORT $LN17@AreUnitsSa
	cmp	esi, eax
	jne	SHORT $LN1@AreUnitsSa
$LN17@AreUnitsSa:

; 232  : 	{
; 233  : 		// Conversely air units can always stack
; 234  : 		if(eFirstDomain == DOMAIN_AIR)

	cmp	esi, 1

; 235  : 		{
; 236  : 			return false;

	je	SHORT $LN1@AreUnitsSa
$LN6@AreUnitsSa:

; 237  : 		}
; 238  : 
; 239  : 		bool bUnit1Combat = false;
; 240  : 		bool bUnit2Combat = false;
; 241  : 
; 242  : 		// Unit 1 is a combat unit?
; 243  : 		if(pkFirstUnitInfo->GetCombat() > 0 || pkFirstUnitInfo->GetRange() > 0)

	mov	ecx, edi
	mov	BYTE PTR _bUnit1Combat$217680[esp+20], bl
	call	?GetCombat@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCombat
	test	eax, eax
	jg	SHORT $LN4@AreUnitsSa
	mov	ecx, edi
	call	?GetRange@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetRange
	test	eax, eax
	jle	SHORT $LN5@AreUnitsSa
$LN4@AreUnitsSa:

; 244  : 		{
; 245  : 			bUnit1Combat = true;

	mov	BYTE PTR _bUnit1Combat$217680[esp+20], 1
$LN5@AreUnitsSa:

; 246  : 		}
; 247  : 
; 248  : 		// Unit 2 is a combat unit?
; 249  : 		if(pkSecondUnitInfo->GetCombat() > 0 || pkSecondUnitInfo->GetRange() > 0)

	mov	ecx, ebp
	call	?GetCombat@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCombat
	test	eax, eax
	jg	SHORT $LN2@AreUnitsSa
	mov	ecx, ebp
	call	?GetRange@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetRange
	test	eax, eax
	jle	SHORT $LN3@AreUnitsSa
$LN2@AreUnitsSa:

; 250  : 		{
; 251  : 			bUnit2Combat = true;

	mov	bl, 1
$LN3@AreUnitsSa:

; 252  : 		}
; 253  : 
; 254  : 		// Looped unit matches combat or non-combat type?
; 255  : 		if(bUnit1Combat == bUnit2Combat)

	cmp	BYTE PTR _bUnit1Combat$217680[esp+20], bl
	jne	SHORT $LN1@AreUnitsSa
	pop	esi
	pop	edi
	pop	ebp

; 256  : 		{
; 257  : 			// Unit is the same domain & combat type, so we have a match
; 258  : 			return true;

	mov	al, 1
	pop	ebx

; 263  : }

	pop	ecx
	ret	0
$LN1@AreUnitsSa:
	pop	esi
	pop	edi
	pop	ebp

; 259  : 		}
; 260  : 	}
; 261  : 
; 262  : 	return false;

	xor	al, al
	pop	ebx

; 263  : }

	pop	ecx
	ret	0
$LN13@AreUnitsSa:
	pop	edi
	pop	ebp

; 210  : 		return false;

	xor	al, al
	pop	ebx

; 263  : }

	pop	ecx
	ret	0
?AreUnitsSameType@CvGameQueries@@SA_NW4UnitTypes@@0@Z ENDP ; CvGameQueries::AreUnitsSameType
_TEXT	ENDS
PUBLIC	??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[]
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_ui$ = 8						; size = 4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[], COMDAT
; _this$ = ecx

; 135  : 		FAssert(ui < m_uiCurrSize);
; 136  : 		return m_pData[ui];

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ui$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 137  : 	};

	ret	4
??A?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::operator[]
_TEXT	ENDS
PUBLIC	?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEIXZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEIXZ
_TEXT	SEGMENT
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEIXZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::size, COMDAT
; _this$ = ecx

; 169  : 		return m_uiCurrSize;

	mov	eax, DWORD PTR [ecx+4]

; 170  : 	};

	ret	0
?size@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QBEIXZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::size
_TEXT	ENDS
PUBLIC	?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::begin
; Function compile flags: /Ogtpy
;	COMDAT ?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ
_TEXT	SEGMENT
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::begin, COMDAT
; _this$ = ecx

; 194  :         return m_pData; 

	mov	eax, DWORD PTR [ecx]

; 195  :     };

	ret	0
?begin@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::begin
_TEXT	ENDS
PUBLIC	?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::end
; Function compile flags: /Ogtpy
;	COMDAT ?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ
_TEXT	SEGMENT
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::end, COMDAT
; _this$ = ecx

; 197  :         return m_pData+m_uiCurrSize; 

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [ecx+eax*8]

; 198  :     };

	ret	0
?end@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@XZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::end
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@XZ ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@XZ
_TEXT	SEGMENT
??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@XZ PROC ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 31   : 		{

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 32   : 		}

	ret	0
??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@XZ ENDP ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@ ; `string'
PUBLIC	?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Alloc
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@ DB 's:\lekmod_d'
	DB	'll\fireplace\include\fireworks\FFastVector.h', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_uiSize$ = 8						; size = 4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Alloc, COMDAT
; _this$ = ecx

; 795  : 	T* Alloc(unsigned int uiSize){

	push	esi
	push	edi

; 796  : 		T* pRet;
; 797  : 		if( uiSize > L ){

	mov	edi, DWORD PTR _uiSize$[esp+4]
	mov	esi, ecx
	cmp	edi, 90					; 0000005aH
	jbe	SHORT $LN2@Alloc

; 798  : 			pRet = (T*)FMALLOCALIGNED( uiSize*sizeof(T), __alignof(T), AllocPool, nSubID );

	push	798					; 0000031eH
	push	OFFSET ??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@
	lea	eax, DWORD PTR [edi*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H

; 799  : 			m_uiCurrMaxSize = uiSize;

	mov	DWORD PTR [esi+8], edi
	pop	edi
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
$LN2@Alloc:
	pop	edi

; 800  : 		}else{
; 801  : 			pRet = (T*)m_aData;

	lea	eax, DWORD PTR [esi+12]

; 802  : 			m_uiCurrMaxSize = L;

	mov	DWORD PTR [esi+8], 90			; 0000005aH
	pop	esi

; 803  : 		}
; 804  : 		return pRet;
; 805  : 	};

	ret	4
?Alloc@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Alloc
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAE@XZ ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>
; Function compile flags: /Ogtpy
;	COMDAT ??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAE@XZ
_TEXT	SEGMENT
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAE@XZ PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 216  : 	BaseVector() : m_uiCurrSize(0), m_uiCurrMaxSize(0), m_pData(NULL) {};

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAE@XZ ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@ABU01@@Z ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@ABU01@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@ABU01@@Z PROC ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement, COMDAT
; _this$ = ecx

; 37   : 		{

	mov	eax, ecx
	mov	ecx, DWORD PTR _source$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 38   : 		}

	ret	4
??0WeightedElement@?$CvWeightedVector@H$0FK@$00@@QAE@ABU01@@Z ENDP ; CvWeightedVector<int,90,1>::WeightedElement::WeightedElement
_TEXT	ENDS
PUBLIC	?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::Destroy
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::Destroy, COMDAT
; _this$ = ecx

; 221  : 		if( !bPODType){
; 222  : 			for(unsigned int i = 0; i < uiNumElements; ++i){
; 223  : 				pVal[i].~T();
; 224  : 			}
; 225  : 		}
; 226  : 	};

	ret	8
?Destroy@?$BaseVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$00@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; BaseVector<CvWeightedVector<int,90,1>::WeightedElement,1>::Destroy
_TEXT	ENDS
PUBLIC	??MWeightedElement@?$CvWeightedVector@H$0FK@$00@@QBE_NABU01@@Z ; CvWeightedVector<int,90,1>::WeightedElement::operator<
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??MWeightedElement@?$CvWeightedVector@H$0FK@$00@@QBE_NABU01@@Z
_TEXT	SEGMENT
_b2$ = 8						; size = 4
??MWeightedElement@?$CvWeightedVector@H$0FK@$00@@QBE_NABU01@@Z PROC ; CvWeightedVector<int,90,1>::WeightedElement::operator<, COMDAT
; _this$ = ecx

; 45   : 			// Reverse of the normal direction because we want highest weight first in our list
; 46   : 			return m_iWeight > b2.m_iWeight;

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _b2$[esp-4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	mov	al, cl

; 47   : 		};

	ret	4
??MWeightedElement@?$CvWeightedVector@H$0FK@$00@@QBE_NABU01@@Z ENDP ; CvWeightedVector<int,90,1>::WeightedElement::operator<
_TEXT	ENDS
PUBLIC	??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\utility
;	COMDAT ??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT
; _this$ = ecx

; 50   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 51   : 		}

	ret	8
??0?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@QAE@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>::pair<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z ; std::_Dist_type<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\xutility
;	COMDAT ??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z PROC ; std::_Dist_type<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 1831 : 	return (0);

	xor	eax, eax

; 1832 : 	}

	ret	0
??$_Dist_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAHPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z ENDP ; std::_Dist_type<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@Z ; std::_Val_type<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@Z PROC ; std::_Val_type<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 1766 : 	return (0);

	xor	eax, eax

; 1767 : 	}

	ret	0
??$_Val_type@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@Z ENDP ; std::_Val_type<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[esp-4]

; 60   : 	}

	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogtpy
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	}

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$swap@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::swap<CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\utility
;	COMDAT ??$swap@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::swap<CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi

; 21   : 
; 22   : 		_Left = _Right;

	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXAAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::swap<CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z PROC ; std::_Push_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 1973 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	push	ebx

; 1974 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1975 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Val$[esp+4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	sub	eax, edx
	push	edi
	mov	edi, DWORD PTR __Top$[esp+8]
	sar	eax, 1
	cmp	edi, ecx
	jge	SHORT $LN1@Push_heap
	npad	1
$LL3@Push_heap:
	cmp	DWORD PTR [esi+eax*8+4], ebx
	jle	SHORT $LN1@Push_heap

; 1976 : 		{	// move _Hole up to parent
; 1977 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	edx, DWORD PTR [esi+eax*8]
	mov	DWORD PTR [esi+ecx*8], edx
	mov	edx, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [esi+ecx*8+4], edx

; 1978 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	edi, ecx
	jl	SHORT $LL3@Push_heap
$LN1@Push_heap:

; 1979 : 		}
; 1980 : 
; 1981 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp+8]
	pop	edi
	mov	DWORD PTR [esi+ecx*8+4], ebx
	mov	DWORD PTR [esi+ecx*8], eax
	pop	esi
	pop	ebx

; 1982 : 	}

	ret	0
??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ENDP ; std::_Push_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Iter_random<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\xutility
;	COMDAT ??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Iter_random<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Iter_random<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Ptr_cat<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Ptr_cat<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 1509 : 	{

	push	ecx

; 1510 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1511 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1512 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Ptr_cat<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *,std::random_access_iterator_tag>, COMDAT

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	edx, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw
	push	esi
$LL2@Copy_backw:

; 2676 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw
	pop	esi
$LN1@Copy_backw:

; 2677 : 	return (_Dest);
; 2678 : 	}

	ret	0
??$_Copy_backward_opt@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@Urandom_access_iterator_tag@std@@@std@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *,std::random_access_iterator_tag>
_TEXT	ENDS
PUBLIC	?getGame@CvGlobals@@QAEAAVCvGame@@XZ		; CvGlobals::getGame
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
;	COMDAT ?getGame@CvGlobals@@QAEAAVCvGame@@XZ
_TEXT	SEGMENT
?getGame@CvGlobals@@QAEAAVCvGame@@XZ PROC		; CvGlobals::getGame, COMDAT
; _this$ = ecx

; 183  : 		return *m_game;    // inlined for perf reasons, do not use outside of dll

	mov	eax, DWORD PTR [ecx+48]

; 184  : 	}

	ret	0
?getGame@CvGlobals@@QAEAAVCvGame@@XZ ENDP		; CvGlobals::getGame
_TEXT	ENDS
PUBLIC	?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z	; CvPlayerAI::getPlayer
EXTRN	?m_aPlayers@CvPlayerAI@@1PAV1@A:DWORD		; CvPlayerAI::m_aPlayers
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvplayerai.h
;	COMDAT ?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z
_TEXT	SEGMENT
_ePlayer$ = 8						; size = 4
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z PROC	; CvPlayerAI::getPlayer, COMDAT

; 28   : 		CvAssertMsg(ePlayer != NO_PLAYER, "Player is not assigned a valid value");
; 29   : 		CvAssertMsg(ePlayer < MAX_PLAYERS, "Player is not assigned a valid value");
; 30   : 		return m_aPlayers[ePlayer];

	mov	eax, DWORD PTR _ePlayer$[esp-4]
	imul	eax, 63236				; 0000f704H
	add	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers

; 31   : 	}

	ret	0
?getPlayer@CvPlayerAI@@SAAAV1@W4PlayerTypes@@@Z ENDP	; CvPlayerAI::getPlayer
_TEXT	ENDS
PUBLIC	?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z		; CvTeam::getTeam
EXTRN	?m_aTeams@CvTeam@@1PAV1@A:DWORD			; CvTeam::m_aTeams
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvteam.h
;	COMDAT ?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z
_TEXT	SEGMENT
_eTeam$ = 8						; size = 4
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z PROC		; CvTeam::getTeam, COMDAT

; 29   : 		CvAssertMsg(eTeam != NO_TEAM, "eTeam is not assigned a valid value");
; 30   : 		CvAssertMsg(eTeam < MAX_TEAMS, "eTeam is not assigned a valid value");
; 31   : 		return m_aTeams[eTeam];

	mov	eax, DWORD PTR _eTeam$[esp-4]
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams

; 32   : 	}

	ret	0
?getTeam@CvTeam@@SAAAV1@W4TeamTypes@@@Z ENDP		; CvTeam::getTeam
_TEXT	ENDS
PUBLIC	?isAlive@CvTeam@@QBE_NXZ			; CvTeam::isAlive
; Function compile flags: /Ogtpy
;	COMDAT ?isAlive@CvTeam@@QBE_NXZ
_TEXT	SEGMENT
?isAlive@CvTeam@@QBE_NXZ PROC				; CvTeam::isAlive, COMDAT
; _this$ = ecx

; 131  : 		return m_iAliveCount > 0;

	xor	eax, eax
	cmp	DWORD PTR [ecx+12], eax
	setg	al

; 132  : 	}

	ret	0
?isAlive@CvTeam@@QBE_NXZ ENDP				; CvTeam::isAlive
_TEXT	ENDS
PUBLIC	??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\vector
;	COMDAT ??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z PROC ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[], COMDAT
; _this$ = ecx

; 760  : 
; 761  :  #if _HAS_ITERATOR_DEBUGGING
; 762  : 		if (size() <= _Pos)
; 763  : 			{
; 764  : 			_DEBUG_ERROR("vector subscript out of range");
; 765  : 			_SCL_SECURE_OUT_OF_RANGE;
; 766  : 			}
; 767  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 768  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 769  : 
; 770  : 		return (*(_Myfirst + _Pos));

	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Pos$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*4]

; 771  : 		}

	ret	4
??A?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@QBEABW4TeamTypes@@I@Z ENDP ; std::vector<enum TeamTypes,std::allocator<enum TeamTypes> >::operator[]
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\fautovariable.h
;	COMDAT ??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ
_TEXT	SEGMENT
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ PROC ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@W4PlayerTypes@@VCvPlayer@@@@QBEABW4PlayerTypes@@XZ ENDP ; FAutoVariable<enum PlayerTypes,CvPlayer>::operator enum PlayerTypes const &
_TEXT	ENDS
PUBLIC	??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ	; FAutoVariable<bool,CvPlayer>::operator bool const &
; Function compile flags: /Ogtpy
;	COMDAT ??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ
_TEXT	SEGMENT
??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ PROC	; FAutoVariable<bool,CvPlayer>::operator bool const &, COMDAT
; _this$ = ecx

; 194  : 	return m_value;

	lea	eax, DWORD PTR [ecx+4]

; 195  : }

	ret	0
??B?$FAutoVariable@_NVCvPlayer@@@@QBEAB_NXZ ENDP	; FAutoVariable<bool,CvPlayer>::operator bool const &
_TEXT	ENDS
PUBLIC	?GetElement@?$CvWeightedVector@H$0FK@$00@@QBEABHI@Z ; CvWeightedVector<int,90,1>::GetElement
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?GetElement@?$CvWeightedVector@H$0FK@$00@@QBEABHI@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetElement@?$CvWeightedVector@H$0FK@$00@@QBEABHI@Z PROC ; CvWeightedVector<int,90,1>::GetElement, COMDAT
; _this$ = ecx

; 64   : 		assert(iIndex < m_pItems.size());
; 65   : 		return m_pItems[iIndex].m_Element;

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _iIndex$[esp-4]
	lea	eax, DWORD PTR [eax+ecx*8]

; 66   : 	};

	ret	4
?GetElement@?$CvWeightedVector@H$0FK@$00@@QBEABHI@Z ENDP ; CvWeightedVector<int,90,1>::GetElement
_TEXT	ENDS
PUBLIC	?size@?$CvWeightedVector@H$0FK@$00@@QAEHXZ	; CvWeightedVector<int,90,1>::size
; Function compile flags: /Ogtpy
;	COMDAT ?size@?$CvWeightedVector@H$0FK@$00@@QAEHXZ
_TEXT	SEGMENT
?size@?$CvWeightedVector@H$0FK@$00@@QAEHXZ PROC		; CvWeightedVector<int,90,1>::size, COMDAT
; _this$ = ecx

; 134  : 		return m_pItems.size();

	mov	eax, DWORD PTR [ecx+4]

; 135  : 	};

	ret	0
?size@?$CvWeightedVector@H$0FK@$00@@QAEHXZ ENDP		; CvWeightedVector<int,90,1>::size
_TEXT	ENDS
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	mov	eax, ecx

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;
; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 90			; 0000005aH
	mov	DWORD PTR [eax], ecx

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	ret	0
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>
_TEXT	ENDS
PUBLIC	?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Free
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
; Function compile flags: /Ogtpy
;	COMDAT ?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_uiNumElements$ = 12					; size = 4
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Free, COMDAT
; _this$ = ecx

; 810  : 		if( !bPODType) Destroy(pVal, uiNumElements);
; 811  : 		if( pVal != (T*)m_aData )

	mov	eax, DWORD PTR _pVal$[esp-4]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN1@Free

; 812  : 			FFREEALIGNED( (unsigned char*)pVal );

	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN1@Free:

; 813  : 	};

	ret	8
?Free@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@I@Z ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::Free
_TEXT	ENDS
PUBLIC	??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::iter_swap<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::iter_swap<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 594  : 	swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [ecx+4], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap:

; 595  : 	}

	ret	0
??$iter_swap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::iter_swap<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	jle	SHORT $LN10@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN10@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN10@Med3:

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	edx, DWORD PTR __Last$[esp+4]
	mov	esi, DWORD PTR [edx+4]
	cmp	esi, DWORD PTR [eax+4]
	jle	SHORT $LN19@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	cmp	edx, eax
	je	SHORT $LN19@Med3
	mov	edi, DWORD PTR [edx]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebx
	mov	ebx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], esi
	pop	ebx
$LN19@Med3:

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jle	SHORT $LN28@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN28@Med3
	mov	edi, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ecx+4], edx
$LN28@Med3:
	pop	edi
	pop	esi

; 3005 : 	}

	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2056 : 	_Diff _Top = _Hole;

	mov	edx, DWORD PTR __Hole$[esp-4]

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;
; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp+4]
	lea	eax, DWORD PTR [edx+edx+2]
	cmp	eax, esi
	push	edi
	mov	edi, edx
	jge	SHORT $LN14@Adjust_hea
	npad	7
$LL5@Adjust_hea:

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [ecx+eax*8+4]
	cmp	ebx, DWORD PTR [ecx+eax*8-4]
	jle	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [ecx+edx*8], ebx
	mov	ebx, DWORD PTR [ecx+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], ebx
	mov	edx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea
$LN14@Adjust_hea:

; 2064 : 		}
; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [ecx+esi*8-8]
	mov	DWORD PTR [ecx+edx*8], eax
	mov	eax, DWORD PTR [ecx+esi*8-4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 2069 : 		_Hole = _Bottom - 1;

	lea	edx, DWORD PTR [esi-1]
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	esi, DWORD PTR __Val$[esp+8]
	sub	esp, 8
	mov	eax, esp
	push	edi
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR __Val$[esp+24]
	push	edx
	push	ecx
	mov	DWORD PTR [eax+4], esi
	call	??$_Push_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Push_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2072 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00@Z ; stdext::unchecked_copy_backward<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\xutility
;	COMDAT ??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00@Z PROC ; stdext::unchecked_copy_backward<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 3637 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3638 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Dest$[esp-4]
	cmp	edx, ecx
	je	SHORT $LN7@unchecked_
	push	esi
$LL8@unchecked_:
	mov	esi, DWORD PTR [ecx-8]
	sub	ecx, 8
	sub	eax, 8
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	cmp	ecx, edx
	jne	SHORT $LL8@unchecked_
	pop	esi
$LN7@unchecked_:

; 3639 : 	}

	ret	0
??$unchecked_copy_backward@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@stdext@@YAPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@00@Z ENDP ; stdext::unchecked_copy_backward<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00U12@PAH@Z ; std::_Pop_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00U12@PAH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 8
___formal$ = 28						; size = 4
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00U12@PAH@Z PROC ; std::_Pop_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2080 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx

; 2081 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Val$[esp-4]
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR __Val$[esp+8]
	mov	DWORD PTR [ecx+4], edx
	mov	ecx, DWORD PTR __Last$[esp+4]
	sub	ecx, eax
	sar	ecx, 3
	push	ecx
	push	0
	push	eax
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2082 : 	}

	ret	0
??$_Pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00U12@PAH@Z ENDP ; std::_Pop_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
EXTRN	?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B:DWORD ; CvPreGame::sr_TeamTypes
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvpregame.h
;	COMDAT ?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z
_TEXT	SEGMENT
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z PROC ; CvPreGame::teamType, COMDAT
; _p$ = eax

; 299  : 	if(p >= 0 && p < MAX_PLAYERS)

	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN1@teamType

; 300  : 		return sr_TeamTypes[p];

	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 302  : }

	ret	0
$LN1@teamType:

; 301  : 	return NO_TEAM;

	or	eax, -1

; 302  : }

	ret	0
?teamType@CvPreGame@@YA?AW4TeamTypes@@W4PlayerTypes@@@Z ENDP ; CvPreGame::teamType
_TEXT	ENDS
PUBLIC	?isAlive@CvPlayer@@QBE_NXZ			; CvPlayer::isAlive
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
;	COMDAT ?isAlive@CvPlayer@@QBE_NXZ
_TEXT	SEGMENT
?isAlive@CvPlayer@@QBE_NXZ PROC				; CvPlayer::isAlive, COMDAT
; _this$ = ecx

; 1092 : 		return m_bAlive;

	mov	al, BYTE PTR [ecx+2256]

; 1093 : 	}

	ret	0
?isAlive@CvPlayer@@QBE_NXZ ENDP				; CvPlayer::isAlive
_TEXT	ENDS
PUBLIC	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ		; CvPlayer::getTeam
; Function compile flags: /Ogtpy
;	COMDAT ?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ
_TEXT	SEGMENT
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ PROC		; CvPlayer::getTeam, COMDAT
; _this$ = ecx

; 1178 : 		return CvPreGame::teamType(m_eID);

	mov	eax, DWORD PTR [ecx+44]
	cmp	eax, 63					; 0000003fH
	ja	SHORT $LN5@getTeam
	mov	ecx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax*4]

; 1179 : 	}

	ret	0

; 1178 : 		return CvPreGame::teamType(m_eID);

$LN5@getTeam:
	or	eax, -1

; 1179 : 	}

	ret	0
?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ ENDP		; CvPlayer::getTeam
_TEXT	ENDS
PUBLIC	?GetTeamClosenessScore@CvGameQueries@@SAHPAPAHPAH@Z ; CvGameQueries::GetTeamClosenessScore
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvgamequeries.cpp
;	COMDAT ?GetTeamClosenessScore@CvGameQueries@@SAHPAPAHPAH@Z
_TEXT	SEGMENT
_iNumEdges$217637 = -24					; size = 4
_iTeamTotalDist$217636 = -20				; size = 4
tv470 = -16						; size = 4
_iScore$ = -12						; size = 4
tv429 = -8						; size = 4
_iTeam$217630 = -4					; size = 4
_aaiDistances$ = 8					; size = 4
_aiStartingLocs$ = 12					; size = 4
?GetTeamClosenessScore@CvGameQueries@@SAHPAPAHPAH@Z PROC ; CvGameQueries::GetTeamClosenessScore, COMDAT

; 146  : {

	sub	esp, 24					; 00000018H

; 147  : 	int iScore = 0;

	mov	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _aiStartingLocs$[esp+28]
	xor	ebx, ebx
	push	esi
	add	eax, 12					; 0000000cH
	push	edi
	mov	DWORD PTR _iScore$[esp+40], ebx

; 148  : 
; 149  : 	for(int iTeam = 0; iTeam < MAX_CIV_TEAMS; iTeam++)

	mov	DWORD PTR _iTeam$217630[esp+40], ebx
	mov	DWORD PTR tv470[esp+40], eax
$LL62@GetTeamClo:

; 150  : 	{
; 151  : 		if(GET_TEAM((TeamTypes)iTeam).isAlive())

	mov	ecx, DWORD PTR tv470[esp+40]
	xor	edi, edi
	cmp	DWORD PTR [ecx], edi
	jle	$LN17@GetTeamClo

; 152  : 		{
; 153  : 			int iTeamTotalDist = 0;

	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	eax, 44					; 0000002cH
	mov	DWORD PTR _iTeamTotalDist$217636[esp+40], edi

; 154  : 			int iNumEdges = 0;

	mov	DWORD PTR _iNumEdges$217637[esp+40], edi
	mov	DWORD PTR tv429[esp+40], eax
$LL60@GetTeamClo:

; 156  : 			{
; 157  : 				if(GET_PLAYER((PlayerTypes)iPlayer).isAlive())

	cmp	BYTE PTR [eax+2212], 0
	je	SHORT $LN13@GetTeamClo

; 158  : 				{
; 159  : 					if(GET_PLAYER((PlayerTypes)iPlayer).getTeam() == (TeamTypes)iTeam)

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 63					; 0000003fH
	ja	SHORT $LN37@GetTeamClo
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN38@GetTeamClo
$LN37@GetTeamClo:
	or	ecx, -1
$LN38@GetTeamClo:
	cmp	ecx, ebx
	jne	SHORT $LN13@GetTeamClo

; 160  : 					{
; 161  : 						for(int iOtherPlayer = 0; iOtherPlayer < iPlayer; iOtherPlayer++)

	xor	esi, esi
	test	edi, edi
	jle	SHORT $LN13@GetTeamClo
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	eax, 44					; 0000002cH
$LL61@GetTeamClo:

; 162  : 						{
; 163  : 							if(GET_PLAYER((PlayerTypes)iOtherPlayer).getTeam() == (TeamTypes)iTeam)

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 63					; 0000003fH
	ja	SHORT $LN48@GetTeamClo
	mov	edx, DWORD PTR ?sr_TeamTypes@CvPreGame@@3ABV?$vector@W4TeamTypes@@V?$allocator@W4TeamTypes@@@std@@@std@@B ; CvPreGame::sr_TeamTypes
	mov	edx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN49@GetTeamClo
$LN48@GetTeamClo:
	or	ecx, -1
$LN49@GetTeamClo:
	cmp	ecx, ebx
	jne	SHORT $LN8@GetTeamClo

; 164  : 							{
; 165  : 								// Add the edge between these two players that are on the same team
; 166  : 								iNumEdges++;
; 167  : 								int iPlayerStart = aiStartingLocs[iPlayer];

	mov	ecx, DWORD PTR [ebp+edi*4]

; 168  : 								int iOtherPlayerStart = aiStartingLocs[iOtherPlayer];

	mov	edx, DWORD PTR [ebp+esi*4]
	inc	DWORD PTR _iNumEdges$217637[esp+40]

; 169  : 
; 170  : 								if(iPlayerStart < iOtherPlayerStart)  // Make sure that iPlayerStart > iOtherPlayerStart

	cmp	ecx, edx
	jge	SHORT $LN5@GetTeamClo

; 171  : 								{
; 172  : 									int iTemp = iPlayerStart;

	mov	ebx, ecx

; 173  : 									iPlayerStart = iOtherPlayerStart;

	mov	ecx, edx

; 174  : 									iOtherPlayerStart = iTemp;

	mov	edx, ebx
$LN5@GetTeamClo:

; 175  : 								}
; 176  : 								else if(iPlayerStart == iOtherPlayerStart)
; 177  : 								{
; 178  : 									CvAssertMsg(false, "Two players are (hypothetically) assigned to the same starting location!");
; 179  : 								}
; 180  : 								iTeamTotalDist += aaiDistances[iPlayerStart][iOtherPlayerStart];

	mov	ebx, DWORD PTR _aaiDistances$[esp+36]
	mov	ecx, DWORD PTR [ebx+ecx*4]
	mov	edx, DWORD PTR [ecx+edx*4]
	add	DWORD PTR _iTeamTotalDist$217636[esp+40], edx
	mov	ebx, DWORD PTR _iTeam$217630[esp+40]
$LN8@GetTeamClo:
	inc	esi
	add	eax, 63236				; 0000f704H
	cmp	esi, edi
	jl	SHORT $LL61@GetTeamClo

; 160  : 					{
; 161  : 						for(int iOtherPlayer = 0; iOtherPlayer < iPlayer; iOtherPlayer++)

	mov	eax, DWORD PTR tv429[esp+40]
$LN13@GetTeamClo:

; 155  : 			for(int iPlayer = 0; iPlayer < MAX_CIV_PLAYERS; iPlayer++)

	inc	edi
	add	eax, 63236				; 0000f704H
	cmp	edi, 63					; 0000003fH
	mov	DWORD PTR tv429[esp+40], eax
	jl	$LL60@GetTeamClo

; 181  : 							}
; 182  : 						}
; 183  : 					}
; 184  : 				}
; 185  : 			}
; 186  : 
; 187  : 			int iTeamScore;
; 188  : 			if(iNumEdges == 0)

	cmp	DWORD PTR _iNumEdges$217637[esp+40], 0
	jne	SHORT $LN2@GetTeamClo

; 189  : 			{
; 190  : 				iTeamScore = 0;

	xor	eax, eax

; 191  : 			}
; 192  : 			else

	jmp	SHORT $LN1@GetTeamClo
$LN2@GetTeamClo:

; 193  : 			{
; 194  : 				iTeamScore = iTeamTotalDist/iNumEdges; // the avg distance between team edges is the team score

	mov	eax, DWORD PTR _iTeamTotalDist$217636[esp+40]
	cdq
	idiv	DWORD PTR _iNumEdges$217637[esp+40]
$LN1@GetTeamClo:

; 195  : 			}
; 196  : 
; 197  : 			iScore += iTeamScore;

	add	DWORD PTR _iScore$[esp+40], eax
$LN17@GetTeamClo:

; 148  : 
; 149  : 	for(int iTeam = 0; iTeam < MAX_CIV_TEAMS; iTeam++)

	add	DWORD PTR tv470[esp+40], 2980		; 00000ba4H
	inc	ebx
	cmp	ebx, 63					; 0000003fH
	mov	DWORD PTR _iTeam$217630[esp+40], ebx
	jl	$LL62@GetTeamClo

; 198  : 		}
; 199  : 	}
; 200  : 	return iScore;

	mov	eax, DWORD PTR _iScore$[esp+40]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 201  : }

	add	esp, 24					; 00000018H
	ret	0
?GetTeamClosenessScore@CvGameQueries@@SAHPAPAHPAH@Z ENDP ; CvGameQueries::GetTeamClosenessScore
_TEXT	ENDS
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::~FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::~FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>, COMDAT
; _this$ = ecx

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN3@FStaticVec
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN3@FStaticVec:

; 619  : 	};

	ret	0
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::~FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>
_TEXT	ENDS
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	esi
	mov	esi, ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	cmp	DWORD PTR [esi+8], 0
	push	edi
	jne	SHORT $LN33@GrowSize
	mov	DWORD PTR [esi+8], 1
$LN33@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _uiFit$[esp+4]
	cmp	edx, DWORD PTR [esi+8]
	jb	SHORT $LN7@GrowSize
	npad	6
$LL8@GrowSize:

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [eax+eax]

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	cmp	ecx, eax
	jb	SHORT $LN34@GrowSize

; 754  : 				break;
; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	DWORD PTR [esi+8], ecx
	cmp	edx, ecx
	jae	SHORT $LL8@GrowSize

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	jmp	SHORT $LN7@GrowSize
$LN34@GrowSize:

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	DWORD PTR [esi+8], edx
$LN7@GrowSize:
	push	ebp

; 759  : 		}
; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	ebp, DWORD PTR [esi+8]
	cmp	ebp, 90					; 0000005aH
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0DI@OIPOBLCO@s?3?2lekmod_dll?2fireplace?2include?2@
	lea	eax, DWORD PTR [ebp*8]
	push	4
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	edi, eax
	mov	DWORD PTR [esi+8], ebp
	jmp	SHORT $LN15@GrowSize
$LN16@GrowSize:
	lea	edi, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+8], 90			; 0000005aH
$LN15@GrowSize:

; 762  : 		if( bPODType ){
; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	edx
	push	edi
	call	_memcpy

; 764  : 		}else{
; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)
; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);
; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+12]
	pop	ebp
	cmp	eax, ecx
	je	SHORT $LN36@GrowSize
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN36@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	DWORD PTR [esi], edi
	pop	edi

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	BYTE PTR [esi+732], 1
	pop	esi

; 772  : 	};

	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Median<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z
_TEXT	SEGMENT
tv200 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv203 = 16						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 3010 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Last$[esp]
	mov	eax, esi
	sub	eax, ecx
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	SHORT $LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	push	ebx
	and	edx, 7
	add	eax, edx
	push	ebp
	push	edi
	sar	eax, 3

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edi, eax
	shl	edi, 4
	lea	ebx, DWORD PTR [eax*8]
	lea	edx, DWORD PTR [edi+ecx]
	lea	eax, DWORD PTR [ebx+ecx]
	push	edx
	push	eax
	push	ecx
	mov	DWORD PTR tv200[esp+24], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	ebp, DWORD PTR __Mid$[esp+24]
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	mov	ecx, ebp
	sub	ecx, ebx
	push	ebp
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	eax, esi
	sub	eax, ebx
	push	esi
	push	eax
	sub	esi, edi
	push	esi
	mov	DWORD PTR tv203[esp+48], eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR tv203[esp+48]
	mov	eax, DWORD PTR tv200[esp+48]
	push	edx
	push	ebp
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>
	add	esp, 48					; 00000030H
	pop	edi
	pop	ebp
	pop	ebx
	pop	esi

; 3020 : 	}

	ret	0
$LN2@Median:

; 3017 : 		}
; 3018 : 	else
; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	edx, DWORD PTR __Mid$[esp]
	push	esi
	push	edx
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Med3<CvWeightedVector<int,90,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
	pop	esi

; 3020 : 	}

	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __Last$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	sub	ebx, edi
	sar	ebx, 3

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap
	npad	3
$LL2@Make_heap:

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;
; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	ecx, DWORD PTR [edi+esi*8-8]
	sub	esp, 8
	mov	eax, esp
	dec	esi
	push	ebx
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+esi*8+4]
	push	esi
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H
	test	esi, esi
	jg	SHORT $LL2@Make_heap
$LN1@Make_heap:

; 2172 : 		}
; 2173 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp

; 2968 : 	if (_First != _Last)

	mov	ebp, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	cmp	edi, ebp
	je	SHORT $LN6@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	edx, DWORD PTR [edi+8]
	cmp	edx, ebp
	je	SHORT $LN6@Insertion_
	push	ebx
	push	esi
$LL7@Insertion_:

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;
; 2972 : 			_Ty _Val = *_Next;

	mov	esi, DWORD PTR [edx+4]

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edx]
	mov	ecx, edx
	jle	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	eax, edx
	cmp	edi, edx
	je	SHORT $LN21@Insertion_
	npad	7
$LL22@Insertion_:
	mov	ecx, DWORD PTR [eax-8]
	sub	eax, 8
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+12], ecx
	cmp	eax, edi
	jne	SHORT $LL22@Insertion_
$LN21@Insertion_:

; 2977 : 				*_First = _Val;

	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], esi

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	cmp	esi, DWORD PTR [edx-4]
	lea	eax, DWORD PTR [edx-8]
	jle	SHORT $LN1@Insertion_
$LL3@Insertion_:

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	ecx, eax
	sub	eax, 8
	cmp	esi, DWORD PTR [eax+4]
	jg	SHORT $LL3@Insertion_

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;
; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	mov	ebp, DWORD PTR __Last$[esp+12]
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], esi
$LN4@Insertion_:
	add	edx, 8
	cmp	edx, ebp
	jne	SHORT $LL7@Insertion_
	pop	esi
	pop	ebx
$LN6@Insertion_:
	pop	edi
	pop	ebp

; 2986 : 				}
; 2987 : 			}
; 2988 : 	}

	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>, COMDAT

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	esi
	mov	esi, DWORD PTR [eax-8]
	push	edi
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax-4], edx
	sub	eax, ecx
	sub	esp, 8
	mov	edx, esp
	sub	eax, 8
	sar	eax, 3
	push	eax
	push	0
	push	ecx
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [edx+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	pop	edi
	pop	esi
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??0?$CvWeightedVector@H$0FK@$00@@QAE@XZ		; CvWeightedVector<int,90,1>::CvWeightedVector<int,90,1>
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??0?$CvWeightedVector@H$0FK@$00@@QAE@XZ
_TEXT	SEGMENT
??0?$CvWeightedVector@H$0FK@$00@@QAE@XZ PROC		; CvWeightedVector<int,90,1>::CvWeightedVector<int,90,1>, COMDAT
; _this$ = ecx

; 52   : 	CvWeightedVector(void)

	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], 90			; 0000005aH
	mov	DWORD PTR [eax], ecx

; 53   : 	{
; 54   : 	};

	ret	0
??0?$CvWeightedVector@H$0FK@$00@@QAE@XZ ENDP		; CvWeightedVector<int,90,1>::CvWeightedVector<int,90,1>
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ		; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>
; Function compile flags: /Ogtpy
;	COMDAT ??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ
_TEXT	SEGMENT
??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ PROC		; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>, COMDAT
; _this$ = ecx

; 59   : 	};

	mov	eax, DWORD PTR [ecx]
	add	ecx, 12					; 0000000cH
	cmp	eax, ecx
	je	SHORT $LN6@CvWeighted
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	pop	ecx
$LN6@CvWeighted:
	ret	0
??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ ENDP		; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::push_back
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	esi
	mov	esi, ecx

; 677  : 		m_bIsResized = false;
; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+732], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN1@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
$LN1@push_back:

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [ecx+eax*8]
	test	eax, eax
	je	SHORT $LN4@push_back
	mov	ecx, DWORD PTR _element$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
$LN4@push_back:

; 681  : 		return m_uiCurrSize++;

	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 682  : 	};

	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__Tmp$219119 = -24					; size = 8
__Tmp$219051 = -16					; size = 8
__Tmp$219077 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	sub	esp, 24					; 00000018H
	push	ebx

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebx, DWORD PTR __First$[esp+24]
	push	ebp
	mov	ebp, DWORD PTR __Last$[esp+28]
	mov	eax, ebp
	sub	eax, ebx
	sar	eax, 3
	cdq
	push	esi
	sub	eax, edx
	push	edi
	sar	eax, 1
	lea	edi, DWORD PTR [ebx+eax*8]

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [ebp-8]
	push	eax
	push	edi
	push	ebx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Median<CvWeightedVector<int,90,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, edi

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	lea	esi, DWORD PTR [edi+8]

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebx, edi
	jae	SHORT $LN99@Unguarded_
$LL27@Unguarded_:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	jl	SHORT $LN99@Unguarded_
	jg	SHORT $LN99@Unguarded_

; 3033 : 		--_Pfirst;

	sub	ecx, 8
	cmp	ebx, ecx
	jb	SHORT $LL27@Unguarded_
$LN99@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	cmp	esi, ebp
	jae	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR [ecx+4]
	npad	1
$LL25@Unguarded_:
	mov	eax, DWORD PTR [esi+4]
	cmp	edx, eax
	jl	SHORT $LN24@Unguarded_
	jg	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	add	esi, 8
	cmp	esi, ebp
	jb	SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	eax, esi

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	ebx, ecx
$LL23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, DWORD PTR __Last$[esp+36]
	jae	SHORT $LN103@Unguarded_
	npad	6
$LL21@Unguarded_:

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+4]
	cmp	edx, edi
	jl	SHORT $LN20@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

	jg	SHORT $LN103@Unguarded_

; 3048 : 				break;
; 3049 : 			else
; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, esi
	add	esi, 8
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_
	mov	ebp, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$219051[esp+44], ebp
	mov	ebp, DWORD PTR [eax]
	mov	DWORD PTR [edx], ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ebp
	mov	edx, DWORD PTR __Tmp$219051[esp+44]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], edx
$LN20@Unguarded_:
	add	eax, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jb	SHORT $LL21@Unguarded_
$LN103@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	cmp	ebx, DWORD PTR __First$[esp+36]
	jbe	SHORT $LN115@Unguarded_
	lea	edx, DWORD PTR [ebx-8]
$LL14@Unguarded_:

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edi, DWORD PTR [edx+4]
	mov	ebp, DWORD PTR [ecx+4]
	cmp	ebp, edi
	jl	SHORT $LN13@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

	jg	SHORT $LN111@Unguarded_

; 3055 : 				break;
; 3056 : 			else
; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 8
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_
	mov	ebp, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$219077[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$219077[esp+44]
	mov	DWORD PTR [edx+4], edi
$LN13@Unguarded_:
	sub	ebx, 8
	sub	edx, 8
	cmp	DWORD PTR __First$[esp+36], ebx
	jb	SHORT $LL14@Unguarded_
$LN111@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebx, DWORD PTR __First$[esp+36]
$LN115@Unguarded_:
	jne	SHORT $LN6@Unguarded_
	cmp	eax, DWORD PTR __Last$[esp+36]
	je	$LN105@Unguarded_

; 3060 : 
; 3061 : 		if (_Glast == _First)
; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	cmp	esi, eax
	je	SHORT $LN64@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, esi
	je	SHORT $LN64@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi
$LN64@Unguarded_:

; 3065 : 			++_Plast;
; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	edi, ecx
	add	esi, 8
	add	ecx, 8
	add	eax, 8
	cmp	edi, edx
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR __Tmp$219119[esp+40], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR __Tmp$219119[esp+44], ebp
	mov	ebp, DWORD PTR [edx]
	mov	DWORD PTR [edi], ebp
	mov	ebp, DWORD PTR [edx+4]
	mov	DWORD PTR [edi+4], ebp
	mov	edi, DWORD PTR __Tmp$219119[esp+40]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Tmp$219119[esp+44]
	mov	DWORD PTR [edx+4], edi
	jmp	$LL23@Unguarded_
$LN6@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)
; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	sub	ebx, 8
	cmp	eax, DWORD PTR __Last$[esp+36]
	jne	SHORT $LN3@Unguarded_
	sub	ecx, 8
	cmp	ebx, ecx
	je	SHORT $LN78@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ebp, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edi
$LN78@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	esi, 8
	cmp	ecx, esi
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [ecx], ebp
	mov	ebp, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], ebp
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], edi

; 3073 : 			}
; 3074 : 		else

	jmp	$LL23@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebx
	je	SHORT $LN92@Unguarded_
	mov	ebp, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], edi
$LN92@Unguarded_:
	add	eax, 8

; 3076 : 		}

	jmp	$LL23@Unguarded_
$LN105@Unguarded_:

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+36]
	pop	edi
	mov	DWORD PTR [eax+4], esi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3077 : 	}

	add	esp, 24					; 00000018H
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::make_heap<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::make_heap<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2178 : 	_DEBUG_RANGE(_First, _Last);
; 2179 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -8					; fffffff8H
	cmp	edx, 8
	jle	SHORT $LN1@make_heap

; 2180 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2181 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN1@make_heap:

; 2182 : 	}

	ret	0
??$make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::make_heap<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Insertion_sort<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Insertion_sort<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2993 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 12					; 0000000cH

; 2994 : 	}

	ret	0
??$_Insertion_sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Insertion_sort<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::pop_heap<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::pop_heap<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2095 : 	_DEBUG_RANGE(_First, _Last);
; 2096 : 	_DEBUG_HEAP(_First, _Last);
; 2097 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	ebx
	mov	edx, eax
	push	esi
	sub	edx, ecx
	mov	esi, edx
	and	esi, -8					; fffffff8H
	cmp	esi, 8
	push	edi
	jle	SHORT $LN12@pop_heap

; 2098 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	ebx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [eax-8]
	mov	edi, DWORD PTR [eax-4]
	mov	DWORD PTR [eax-8], ebx
	mov	ebx, DWORD PTR [ecx+4]
	sub	esp, 8
	mov	DWORD PTR [eax-4], ebx
	mov	eax, esp
	add	edx, -8					; fffffff8H
	sar	edx, 3
	push	edx
	push	0
	push	ecx
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN12@pop_heap:

; 2099 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$pop_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::pop_heap<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z ; CvWeightedVector<int,90,1>::push_back
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_iWeight$ = 12						; size = 4
?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z PROC ; CvWeightedVector<int,90,1>::push_back, COMDAT
; _this$ = ecx

; 104  : //		FAssertMsg(iWeight >= 0, "Weight should not be negative.");
; 105  : 
; 106  : 		WeightedElement weightedElem;
; 107  : 		weightedElem.m_Element = element;

	mov	eax, DWORD PTR _element$[esp-4]
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [eax]

; 108  : 		weightedElem.m_iWeight = iWeight;
; 109  : 
; 110  : 		return m_pItems.push_back(weightedElem);

	mov	eax, DWORD PTR [esi+8]
	mov	BYTE PTR [esi+732], 0
	cmp	DWORD PTR [esi+4], eax
	jne	SHORT $LN5@push_back@2
	push	eax
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$0FK@$00@@$0FK@$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,90,1>::WeightedElement,90,1,0,0>::GrowSize
$LN5@push_back@2:
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+ecx*8]
	test	eax, eax
	je	SHORT $LN8@push_back@2
	mov	ecx, DWORD PTR _iWeight$[esp+4]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
$LN8@push_back@2:
	mov	eax, DWORD PTR [esi+4]
	lea	edx, DWORD PTR [eax+1]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	pop	esi

; 111  : 	};

	ret	8
?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z ENDP ; CvWeightedVector<int,90,1>::push_back
_TEXT	ENDS
PUBLIC	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
; File s:\msvs2008\vc\include\algorithm
;	COMDAT ??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2215 : 	_DEBUG_RANGE(_First, _Last);
; 2216 : 	_DEBUG_HEAP(_First, _Last);
; 2217 : 	for (; 1 < _Last - _First; --_Last)

	mov	ecx, DWORD PTR __Last$[esp-4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR __First$[esp+8]
	mov	eax, ecx
	sub	eax, edi
	sar	eax, 3
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap
	mov	ebx, 8
	sub	ebx, edi

; 2218 : 		std::pop_heap(_First, _Last);

	cmp	eax, 1
	lea	esi, DWORD PTR [ecx-8]
	jle	SHORT $LN2@Sort_heap
$LN24@Sort_heap:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edi+4]
	sub	esp, 8
	mov	DWORD PTR [esi+4], eax
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [ebx+esi-8]
	sar	ecx, 3
	push	ecx
	push	0
	push	edi
	mov	DWORD PTR [eax+4], edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 20					; 00000014H
$LN2@Sort_heap:
	sub	esi, 8
	lea	eax, DWORD PTR [ebx+esi]
	sar	eax, 3
	cmp	eax, 1
	jg	SHORT $LN24@Sort_heap
$LN1@Sort_heap:

; 2219 : 	}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 2224 : 	_DEBUG_HEAP(_First, _Last);
; 2225 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
??$sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
; Function compile flags: /Ogtpy
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z
_TEXT	SEGMENT
__Mid$217826 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	sub	esp, 8
	push	ebx

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[esp+8]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+20]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort
	mov	esi, DWORD PTR __Ideal$[esp+20]
	npad	1
$LL7@Sort:
	test	esi, esi
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$217826[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,90,1>::WeightedElement *>

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions
; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ebp, DWORD PTR __Mid$217826[esp+40]
	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$217826[esp+36]
	mov	ecx, edi
	mov	edx, eax
	sub	ecx, ebp
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -8					; fffffff8H
	and	edx, -8					; fffffff8H
	cmp	edx, ecx

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort
	push	eax
	push	ebx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>

; 3093 : 			_First = _Mid.second;

	mov	ebx, ebp

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN26@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	ebp
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>

; 3098 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$217826[esp+36]
$LN26@Sort:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 3
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LL7@Sort
$LN25@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN19@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,90,1>::WeightedElement *,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN19@Sort:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
$LN6@Sort:

; 3099 : 			}
; 3100 : 		}
; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN25@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	eax, edi
	sub	eax, ebx
	and	eax, -8					; fffffff8H
	cmp	eax, 8
	jle	SHORT $LN10@Sort
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,90,1>::WeightedElement *,int,CvWeightedVector<int,90,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN10@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::_Sort_heap<CvWeightedVector<int,90,1>::WeightedElement *>
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3109 : 	}

	add	esp, 8
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ; std::sort<CvWeightedVector<int,90,1>::WeightedElement *>
; Function compile flags: /Ogtpy
;	COMDAT ??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z PROC ; std::sort<CvWeightedVector<int,90,1>::WeightedElement *>, COMDAT

; 3114 : 	_DEBUG_RANGE(_First, _Last);
; 3115 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 3
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3116 : 	}

	ret	0
??$sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0@Z ENDP ; std::sort<CvWeightedVector<int,90,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	?SortItems@?$CvWeightedVector@H$0FK@$00@@QAEXXZ	; CvWeightedVector<int,90,1>::SortItems
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ?SortItems@?$CvWeightedVector@H$0FK@$00@@QAEXXZ
_TEXT	SEGMENT
?SortItems@?$CvWeightedVector@H$0FK@$00@@QAEXXZ PROC	; CvWeightedVector<int,90,1>::SortItems, COMDAT
; _this$ = ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	ret	0
?SortItems@?$CvWeightedVector@H$0FK@$00@@QAEXXZ ENDP	; CvWeightedVector<int,90,1>::SortItems
_TEXT	ENDS
PUBLIC	?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z ; CvGameQueries::GetLeastAdvancedUnitClassNobodyHas
EXTRN	?getJonRandNum@CvGame@@QAEHHPBD@Z:PROC		; CvGame::getJonRandNum
EXTRN	?GetResearchCost@CvTechEntry@@QBEHXZ:PROC	; CvTechEntry::GetResearchCost
EXTRN	?GetPower@CvUnitEntry@@QBEHXZ:PROC		; CvUnitEntry::GetPower
EXTRN	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z:PROC	; CvTeamTechs::HasTech
EXTRN	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ:PROC ; CvTeam::GetTeamTechs
EXTRN	?getUnitClassCount@CvPlayer@@QBEHW4UnitClassTypes@@@Z:PROC ; CvPlayer::getUnitClassCount
EXTRN	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z:PROC ; CvGlobals::getTechInfo
EXTRN	?GetPrereqAndTech@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetPrereqAndTech
EXTRN	?getDefaultUnitIndex@CvUnitClassInfo@@QBEHXZ:PROC ; CvUnitClassInfo::getDefaultUnitIndex
EXTRN	?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z:PROC ; CvGlobals::getUnitClassInfo
EXTRN	?getNumUnitClassInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumUnitClassInfos
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File s:\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z$0
__ehfuncinfo$?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File s:\lekmod_dll\cvgamecoredll_expansion2\cvgamequeries.cpp
xdata$x	ENDS
;	COMDAT ?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z
_TEXT	SEGMENT
_i$217580 = -756					; size = 4
_pkTechInfo$217598 = -752				; size = 4
_UnitClassesVector$ = -748				; size = 736
__$EHRec$ = -12						; size = 12
_bUseRandom$ = 8					; size = 1
?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z PROC ; CvGameQueries::GetLeastAdvancedUnitClassNobodyHas, COMDAT

; 23   : {

	push	-1
	push	__ehhandler$?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 744				; 000002e8H
	push	esi

; 24   : 	CvWeightedVector<int, SAFE_ESTIMATE_NUM_UNITS, true> UnitClassesVector;

	xor	esi, esi
	lea	eax, DWORD PTR _UnitClassesVector$[esp+772]
	mov	DWORD PTR _UnitClassesVector$[esp+764], esi
	mov	DWORD PTR _UnitClassesVector$[esp+768], 90 ; 0000005aH
	mov	DWORD PTR _UnitClassesVector$[esp+760], eax

; 25   : 	int iWeight;
; 26   : 
; 27   : 	bool bValid;
; 28   : 
; 29   : #ifdef AUI_WARNING_FIXES
; 30   : 	for (uint i = 0; i < GC.getNumUnitClassInfos(); i++)
; 31   : #else
; 32   : 	for (int i = 0; i < GC.getNumUnitClassInfos(); i++)

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR __$EHRec$[esp+768], esi
	mov	DWORD PTR _i$217580[esp+760], esi
	call	?getNumUnitClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitClassInfos
	test	eax, eax
	jle	$LN21@GetLeastAd
	push	ebx
	push	ebp
	push	edi
$LL113@GetLeastAd:

; 33   : #endif
; 34   : 	{
; 35   : 		const UnitClassTypes eUnitClass = static_cast<UnitClassTypes>(i);
; 36   : 		CvUnitClassInfo* pkUnitClassInfo = GC.getUnitClassInfo(eUnitClass);

	push	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z ; CvGlobals::getUnitClassInfo

; 37   : 		if(pkUnitClassInfo)

	test	eax, eax
	je	$LN22@GetLeastAd

; 38   : 		{
; 39   : 			const UnitTypes eDefaultUnit = (UnitTypes) pkUnitClassInfo->getDefaultUnitIndex();

	mov	ecx, eax
	call	?getDefaultUnitIndex@CvUnitClassInfo@@QBEHXZ ; CvUnitClassInfo::getDefaultUnitIndex

; 40   : 
; 41   : 			// If the UnitClass doesn't have a Default Unit available to everyone, skip it
; 42   : 			if (eDefaultUnit == NO_UNIT)

	cmp	eax, -1
	je	$LN22@GetLeastAd

; 43   : 			{
; 44   : 				continue;
; 45   : 			}
; 46   : 
; 47   : 			CvUnitEntry* pkUnitInfo = GC.getUnitInfo(eDefaultUnit);

	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	ebp, eax

; 48   : 			if(pkUnitInfo == NULL)

	test	ebp, ebp
	je	$LN22@GetLeastAd

; 49   : 			{
; 50   : 				continue;
; 51   : 			}
; 52   : 
; 53   : 			// Only look at Land Units
; 54   : 			if (pkUnitInfo->GetDomainType() != DOMAIN_LAND)

	mov	ecx, ebp
	call	?GetDomainType@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetDomainType
	cmp	eax, 2
	jne	$LN22@GetLeastAd

; 55   : 			{
; 56   : 				continue;
; 57   : 			}
; 58   : 			// Only look at Military Units
; 59   : 			if (pkUnitInfo->GetCombat() <= 0)

	mov	ecx, ebp
	call	?GetCombat@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetCombat
	test	eax, eax
	jle	$LN22@GetLeastAd

; 60   : 			{
; 61   : 				continue;
; 62   : 			}
; 63   : 
; 64   : 			const TechTypes ePrereqTech = (TechTypes) pkUnitInfo->GetPrereqAndTech();

	mov	ecx, ebp
	call	?GetPrereqAndTech@CvUnitEntry@@QBEHXZ	; CvUnitEntry::GetPrereqAndTech
	mov	edi, eax

; 65   : 
; 66   : 			// Unit has to require a Tech, otherwise it's too easy!
; 67   : 			if (ePrereqTech == NO_TECH)

	cmp	edi, -1
	je	$LN22@GetLeastAd

; 68   : 			{
; 69   : 				continue;
; 70   : 			}
; 71   : 
; 72   : 			CvTechEntry* pkTechInfo = GC.getTechInfo(ePrereqTech);

	push	edi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getTechInfo@CvGlobals@@QAEPAVCvTechEntry@@W4TechTypes@@@Z ; CvGlobals::getTechInfo
	mov	DWORD PTR _pkTechInfo$217598[esp+772], eax

; 73   : 			if(pkTechInfo == NULL)

	test	eax, eax
	je	$LN22@GetLeastAd

; 74   : 			{
; 75   : 				continue;
; 76   : 			}
; 77   : 
; 78   : 			bValid = true;
; 79   : 			bool bAllPlayersHaveTech = true;

	mov	bl, 1
	xor	esi, esi
	npad	10
$LL13@GetLeastAd:

; 82   : 			{
; 83   : 				if (GET_PLAYER((PlayerTypes) iMajorLoop).isAlive())

	mov	ecx, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	add	ecx, esi
	cmp	BYTE PTR [ecx+2256], 0
	je	SHORT $LN12@GetLeastAd

; 84   : 				{
; 85   : 					// If a player already has one of this Unit, throw it out - we want something more advanced
; 86   : 					if (GET_PLAYER((PlayerTypes) iMajorLoop).getUnitClassCount(eUnitClass) > 0)

	mov	edx, DWORD PTR _i$217580[esp+772]
	push	edx
	call	?getUnitClassCount@CvPlayer@@QBEHW4UnitClassTypes@@@Z ; CvPlayer::getUnitClassCount
	test	eax, eax
	jg	$LN22@GetLeastAd

; 87   : 					{
; 88   : 						bValid = false;
; 89   : 						break;
; 90   : 					}
; 91   : 
; 92   : 					// Even if no one has this Unit lying around, if all players already have the Tech which unlocks it, throw it out - too easy
; 93   : 					if (bAllPlayersHaveTech && !GET_TEAM((TeamTypes) GET_PLAYER((PlayerTypes) iMajorLoop).getTeam()).GetTeamTechs()->HasTech(ePrereqTech))

	test	bl, bl
	je	SHORT $LN12@GetLeastAd
	mov	eax, DWORD PTR ?m_aPlayers@CvPlayerAI@@1PAV1@A ; CvPlayerAI::m_aPlayers
	lea	ecx, DWORD PTR [esi+eax]
	call	?getTeam@CvPlayer@@QBE?AW4TeamTypes@@XZ	; CvPlayer::getTeam
	imul	eax, 2980				; 00000ba4H
	add	eax, DWORD PTR ?m_aTeams@CvTeam@@1PAV1@A ; CvTeam::m_aTeams
	push	edi
	mov	ecx, eax
	call	?GetTeamTechs@CvTeam@@QBEPAVCvTeamTechs@@XZ ; CvTeam::GetTeamTechs
	mov	ecx, eax
	call	?HasTech@CvTeamTechs@@QBE_NW4TechTypes@@@Z ; CvTeamTechs::HasTech
	test	al, al
	jne	SHORT $LN12@GetLeastAd

; 94   : 					{
; 95   : 						bAllPlayersHaveTech = false;

	xor	bl, bl
$LN12@GetLeastAd:

; 80   : 
; 81   : 			for (int iMajorLoop = 0; iMajorLoop < MAX_MAJOR_CIVS; iMajorLoop++)

	add	esi, 63236				; 0000f704H
	cmp	esi, 1391192				; 00153a58H
	jl	SHORT $LL13@GetLeastAd

; 96   : 					}
; 97   : 				}
; 98   : 			}
; 99   : 			if (!bValid || bAllPlayersHaveTech)

	test	bl, bl
	jne	SHORT $LN22@GetLeastAd

; 100  : 			{
; 101  : 				continue;
; 102  : 			}
; 103  : 
; 104  : 			iWeight = pkUnitInfo->GetPower();

	mov	ecx, ebp
	call	?GetPower@CvUnitEntry@@QBEHXZ		; CvUnitEntry::GetPower

; 105  : 
; 106  : 			// Add a Tech factor, since we want something in the near future, not too far off
; 107  : 			iWeight += (pkTechInfo->GetResearchCost() / 8);

	mov	ecx, DWORD PTR _pkTechInfo$217598[esp+772]
	mov	esi, eax
	call	?GetResearchCost@CvTechEntry@@QBEHXZ	; CvTechEntry::GetResearchCost
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	esi, eax

; 108  : 
; 109  : 			// Add a random bit so that the same Unit isn't ALWAYS picked
; 110  : 			if (bUseRandom)

	cmp	BYTE PTR _bUseRandom$[esp+768], bl
	je	SHORT $LN5@GetLeastAd

; 111  : 			{
; 112  : 				iWeight += GC.getGame().getJonRandNum(iWeight / 10, "Minor Civ Quest: Gift Unit - Adding random weight to Unit Chosen");

	mov	eax, 1717986919				; 66666667H
	imul	esi
	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	push	OFFSET $SG217615
	push	ecx
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	call	?getJonRandNum@CvGame@@QAEHHPBD@Z	; CvGame::getJonRandNum
	add	esi, eax
$LN5@GetLeastAd:

; 113  : 			}
; 114  : 
; 115  : 			UnitClassesVector.push_back(i, iWeight);

	push	esi
	lea	edx, DWORD PTR _i$217580[esp+776]
	push	edx
	lea	ecx, DWORD PTR _UnitClassesVector$[esp+780]
	call	?push_back@?$CvWeightedVector@H$0FK@$00@@QAEIABHH@Z ; CvWeightedVector<int,90,1>::push_back
$LN22@GetLeastAd:
	mov	esi, DWORD PTR _i$217580[esp+772]
	inc	esi
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	mov	DWORD PTR _i$217580[esp+772], esi
	call	?getNumUnitClassInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumUnitClassInfos
	cmp	esi, eax
	jl	$LL113@GetLeastAd
	pop	edi
	pop	ebp
	pop	ebx
$LN21@GetLeastAd:

; 116  : 		}
; 117  : 	}
; 118  : 
; 119  : 	UnitClassesVector.SortItems();

	mov	eax, DWORD PTR _UnitClassesVector$[esp+760]
	mov	ecx, DWORD PTR _UnitClassesVector$[esp+764]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	edx, ecx
	sub	edx, eax
	sar	edx, 3
	push	edx
	push	ecx
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$0FK@$00@@0H@Z ; std::_Sort<CvWeightedVector<int,90,1>::WeightedElement *,int>

; 120  : 
; 121  : 	//int iValue;
; 122  : 
; 123  : 	bValid = true;
; 124  : 
; 125  : 	for (int i = UnitClassesVector.size() - 1; i >= 0; i--)

	mov	eax, DWORD PTR _UnitClassesVector$[esp+776]
	add	esp, 12					; 0000000cH
	add	eax, -1

; 126  : 	{
; 127  : 		const UnitClassTypes eUnitClass = (UnitClassTypes) UnitClassesVector.GetElement(i);
; 128  : 
; 129  : 		// First Unit we find in this sorted Vector is our guy
; 130  : 		if (bValid)
; 131  : 		{
; 132  : 			return eUnitClass;

	mov	DWORD PTR __$EHRec$[esp+768], -1
	js	SHORT $LN2@GetLeastAd
	mov	ecx, DWORD PTR _UnitClassesVector$[esp+760]
	mov	esi, DWORD PTR [ecx+eax*8]
	lea	eax, DWORD PTR _UnitClassesVector$[esp+772]
	cmp	ecx, eax
	je	SHORT $LN73@GetLeastAd
	push	ecx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN73@GetLeastAd:
	mov	eax, esi
	pop	esi

; 137  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+756]
	mov	DWORD PTR fs:0, ecx
	add	esp, 756				; 000002f4H
	ret	0
$LN2@GetLeastAd:

; 133  : 		}
; 134  : 	}
; 135  : 
; 136  : 	return NO_UNITCLASS;

	mov	eax, DWORD PTR _UnitClassesVector$[esp+760]
	lea	ecx, DWORD PTR _UnitClassesVector$[esp+772]
	cmp	eax, ecx
	je	SHORT $LN90@GetLeastAd
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN90@GetLeastAd:

; 137  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+760]
	or	eax, -1
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 756				; 000002f4H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z$0:
	lea	ecx, DWORD PTR _UnitClassesVector$[ebp]
	jmp	??1?$CvWeightedVector@H$0FK@$00@@QAE@XZ	; CvWeightedVector<int,90,1>::~CvWeightedVector<int,90,1>
__ehhandler$?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLeastAdvancedUnitClassNobodyHas@CvGameQueries@@SA?AW4UnitClassTypes@@_N@Z ENDP ; CvGameQueries::GetLeastAdvancedUnitClassNobodyHas
END
