; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvDllPathFinderUpdate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05OCFELOIJ@1?40?40?$AA@			; `string'
CONST	SEGMENT
_guidICvUnknown DD 0d89ba82fH
	DW	09fa3H
	DW	04696H
	DB	0b3H
	DB	0f4H
	DB	052H
	DB	0bdH
	DB	0b1H
	DB	01H
	DB	0cfH
	DB	0b2H
_guidICvEnumerator DD 0579a12e9H
	DW	03c70H
	DW	04276H
	DB	084H
	DB	060H
	DB	0c9H
	DB	041H
	DB	0a5H
	DB	0f9H
	DB	058H
	DB	05fH
_guidICvPathFinderUpdate1 DD 0d13f7e42H
	DW	08644H
	DW	04e60H
	DB	084H
	DB	083H
	DB	03aH
	DB	03eH
	DB	0b8H
	DB	0f0H
	DB	0e8H
	DB	0c1H
CONST	ENDS
_DATA	SEGMENT
_CIV5_XP2_DLL_VERSION DD FLAT:??_C@_05OCFELOIJ@1?40?40?$AA@
_DATA	ENDS
;	COMDAT ??_C@_05OCFELOIJ@1?40?40?$AA@
CONST	SEGMENT
??_C@_05OCFELOIJ@1?40?40?$AA@ DB '1.0.0', 00H		; `string'
CONST	ENDS
PUBLIC	??_7CvDllPathFinderUpdate@@6B@			; CvDllPathFinderUpdate::`vftable'
PUBLIC	??_7ICvPathFinderUpdate1@@6B@			; ICvPathFinderUpdate1::`vftable'
PUBLIC	??_7ICvUnknown@@6B@				; ICvUnknown::`vftable'
PUBLIC	??0CvDllPathFinderUpdate@@QAE@HHH@Z		; CvDllPathFinderUpdate::CvDllPathFinderUpdate
PUBLIC	?QueryInterface@CvDllPathFinderUpdate@@UAGPAXU_GUID@@@Z ; CvDllPathFinderUpdate::QueryInterface
PUBLIC	?Destroy@CvDllPathFinderUpdate@@EAGXXZ		; CvDllPathFinderUpdate::Destroy
PUBLIC	?GetX@CvDllPathFinderUpdate@@UBGHXZ		; CvDllPathFinderUpdate::GetX
PUBLIC	?GetY@CvDllPathFinderUpdate@@UBGHXZ		; CvDllPathFinderUpdate::GetY
PUBLIC	?GetTurnNumber@CvDllPathFinderUpdate@@UBGHXZ	; CvDllPathFinderUpdate::GetTurnNumber
EXTRN	__purecall:PROC
;	COMDAT ??_7CvDllPathFinderUpdate@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllpathfinderupdate.cpp
CONST	SEGMENT
??_7CvDllPathFinderUpdate@@6B@ DD FLAT:?QueryInterface@CvDllPathFinderUpdate@@UAGPAXU_GUID@@@Z ; CvDllPathFinderUpdate::`vftable'
	DD	FLAT:?Destroy@CvDllPathFinderUpdate@@EAGXXZ
	DD	FLAT:?GetX@CvDllPathFinderUpdate@@UBGHXZ
	DD	FLAT:?GetY@CvDllPathFinderUpdate@@UBGHXZ
	DD	FLAT:?GetTurnNumber@CvDllPathFinderUpdate@@UBGHXZ
CONST	ENDS
;	COMDAT ??_7ICvPathFinderUpdate1@@6B@
CONST	SEGMENT
??_7ICvPathFinderUpdate1@@6B@ DD FLAT:__purecall	; ICvPathFinderUpdate1::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ICvUnknown@@6B@
CONST	SEGMENT
??_7ICvUnknown@@6B@ DD FLAT:__purecall			; ICvUnknown::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvDllPathFinderUpdate@@QAE@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iX$ = 8						; size = 4
_iY$ = 12						; size = 4
_iTurnNumber$ = 16					; size = 4
??0CvDllPathFinderUpdate@@QAE@HHH@Z PROC		; CvDllPathFinderUpdate::CvDllPathFinderUpdate, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvPathFinderUpdate1@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CvDllPathFinderUpdate@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iX$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iY$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iTurnNumber$[ebp]
	mov	DWORD PTR [edx+16], eax

; 19   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CvDllPathFinderUpdate@@QAE@HHH@Z ENDP		; CvDllPathFinderUpdate::CvDllPathFinderUpdate
_TEXT	ENDS
PUBLIC	??1CvDllPathFinderUpdate@@QAE@XZ		; CvDllPathFinderUpdate::~CvDllPathFinderUpdate
; Function compile flags: /Odtp
;	COMDAT ??1CvDllPathFinderUpdate@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvDllPathFinderUpdate@@QAE@XZ PROC			; CvDllPathFinderUpdate::~CvDllPathFinderUpdate, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllPathFinderUpdate@@6B@

; 23   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1CvDllPathFinderUpdate@@QAE@XZ ENDP			; CvDllPathFinderUpdate::~CvDllPathFinderUpdate
_TEXT	ENDS
PUBLIC	?IncrementReference@CvDllPathFinderUpdate@@QAEIXZ ; CvDllPathFinderUpdate::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllPathFinderUpdate@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv90 = -88						; size = 4
tv161 = -84						; size = 4
tv85 = -80						; size = 4
tv137 = -76						; size = 4
$T219286 = -72						; size = 16
$T219285 = -56						; size = 16
$T219284 = -40						; size = 16
$T219283 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllPathFinderUpdate@@UAGPAXU_GUID@@@Z PROC ; CvDllPathFinderUpdate::QueryInterface, COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 27   : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 28   : 	        guidInterface == ICvPathFinderUpdate1::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T219284[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T219284[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T219284[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T219284[ebp+12], eax
	mov	ecx, DWORD PTR $T219284[ebp]
	mov	DWORD PTR $T219283[ebp], ecx
	mov	edx, DWORD PTR $T219284[ebp+4]
	mov	DWORD PTR $T219283[ebp+4], edx
	mov	eax, DWORD PTR $T219284[ebp+8]
	mov	DWORD PTR $T219283[ebp+8], eax
	mov	ecx, DWORD PTR $T219284[ebp+12]
	mov	DWORD PTR $T219283[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T219283[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv137[ebp], edx
	repe cmpsb
	je	SHORT $LN17@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv137[ebp], eax
$LN17@QueryInter:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv85[ebp], 0
	sete	dl
	test	edx, edx
	jne	SHORT $LN1@QueryInter
	mov	eax, DWORD PTR _guidICvPathFinderUpdate1
	mov	DWORD PTR $T219286[ebp], eax
	mov	ecx, DWORD PTR _guidICvPathFinderUpdate1+4
	mov	DWORD PTR $T219286[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvPathFinderUpdate1+8
	mov	DWORD PTR $T219286[ebp+8], edx
	mov	eax, DWORD PTR _guidICvPathFinderUpdate1+12
	mov	DWORD PTR $T219286[ebp+12], eax
	mov	ecx, DWORD PTR $T219286[ebp]
	mov	DWORD PTR $T219285[ebp], ecx
	mov	edx, DWORD PTR $T219286[ebp+4]
	mov	DWORD PTR $T219285[ebp+4], edx
	mov	eax, DWORD PTR $T219286[ebp+8]
	mov	DWORD PTR $T219285[ebp+8], eax
	mov	ecx, DWORD PTR $T219286[ebp+12]
	mov	DWORD PTR $T219285[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T219285[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv161[ebp], edx
	repe cmpsb
	je	SHORT $LN18@QueryInter
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv161[ebp], eax
$LN18@QueryInter:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv90[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter
$LN1@QueryInter:

; 29   : 	{
; 30   : 		IncrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReference@CvDllPathFinderUpdate@@QAEIXZ ; CvDllPathFinderUpdate::IncrementReference

; 31   : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:

; 32   : 	}
; 33   : 
; 34   : 	return NULL;

	xor	eax, eax
$LN3@QueryInter:

; 35   : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllPathFinderUpdate@@UAGPAXU_GUID@@@Z ENDP ; CvDllPathFinderUpdate::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementReference@CvDllPathFinderUpdate@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementReference@CvDllPathFinderUpdate@@QAEIXZ PROC	; CvDllPathFinderUpdate::IncrementReference, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 	++m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 40   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 41   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementReference@CvDllPathFinderUpdate@@QAEIXZ ENDP	; CvDllPathFinderUpdate::IncrementReference
_TEXT	ENDS
PUBLIC	??3CvDllPathFinderUpdate@@SAXPAX@Z		; CvDllPathFinderUpdate::operator delete
PUBLIC	?DecrementReference@CvDllPathFinderUpdate@@QAEIXZ ; CvDllPathFinderUpdate::DecrementReference
; Function compile flags: /Odtp
;	COMDAT ?DecrementReference@CvDllPathFinderUpdate@@QAEIXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T219318 = -8						; size = 4
$T219317 = -4						; size = 4
?DecrementReference@CvDllPathFinderUpdate@@QAEIXZ PROC	; CvDllPathFinderUpdate::DecrementReference, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN2@DecrementR

; 46   : 	{
; 47   : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T219318[ebp], ecx
	mov	edx, DWORD PTR $T219318[ebp]
	mov	DWORD PTR $T219317[ebp], edx
	cmp	DWORD PTR $T219317[ebp], 0
	je	SHORT $LN5@DecrementR
	mov	ecx, DWORD PTR $T219317[ebp]
	call	??1CvDllPathFinderUpdate@@QAE@XZ	; CvDllPathFinderUpdate::~CvDllPathFinderUpdate
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN8@DecrementR
	mov	ecx, DWORD PTR $T219317[ebp]
	push	ecx
	call	??3CvDllPathFinderUpdate@@SAXPAX@Z	; CvDllPathFinderUpdate::operator delete
	add	esp, 4
$LN8@DecrementR:
	mov	edx, DWORD PTR $T219317[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DecrementR
$LN5@DecrementR:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DecrementR:

; 48   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DecrementR

; 49   : 	}
; 50   : 	else

	jmp	SHORT $LN3@DecrementR
$LN2@DecrementR:

; 51   : 	{
; 52   : 		--m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 53   : 		return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN3@DecrementR:

; 54   : 	}
; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecrementReference@CvDllPathFinderUpdate@@QAEIXZ ENDP	; CvDllPathFinderUpdate::DecrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllPathFinderUpdate@@QAEIXZ ; CvDllPathFinderUpdate::GetReferenceCount
; Function compile flags: /Odtp
;	COMDAT ?GetReferenceCount@CvDllPathFinderUpdate@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReferenceCount@CvDllPathFinderUpdate@@QAEIXZ PROC	; CvDllPathFinderUpdate::GetReferenceCount, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 60   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReferenceCount@CvDllPathFinderUpdate@@QAEIXZ ENDP	; CvDllPathFinderUpdate::GetReferenceCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllPathFinderUpdate@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllPathFinderUpdate@@EAGXXZ PROC		; CvDllPathFinderUpdate::Destroy, COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp

; 64   : 	DecrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecrementReference@CvDllPathFinderUpdate@@QAEIXZ ; CvDllPathFinderUpdate::DecrementReference

; 65   : }

	pop	ebp
	ret	4
?Destroy@CvDllPathFinderUpdate@@EAGXXZ ENDP		; CvDllPathFinderUpdate::Destroy
_TEXT	ENDS
EXTRN	?Free@CvDllGameContext@@SAXPAX@Z:PROC		; CvDllGameContext::Free
; Function compile flags: /Odtp
;	COMDAT ??3CvDllPathFinderUpdate@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllPathFinderUpdate@@SAXPAX@Z PROC			; CvDllPathFinderUpdate::operator delete, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp

; 69   : 	CvDllGameContext::Free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 70   : }

	pop	ebp
	ret	0
??3CvDllPathFinderUpdate@@SAXPAX@Z ENDP			; CvDllPathFinderUpdate::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllPathFinderUpdate@@SAPAXI@Z		; CvDllPathFinderUpdate::operator new
EXTRN	?Allocate@CvDllGameContext@@SAPAXI@Z:PROC	; CvDllGameContext::Allocate
; Function compile flags: /Odtp
;	COMDAT ??2CvDllPathFinderUpdate@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllPathFinderUpdate@@SAPAXI@Z PROC			; CvDllPathFinderUpdate::operator new, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp

; 74   : 	return CvDllGameContext::Allocate(bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4

; 75   : }

	pop	ebp
	ret	0
??2CvDllPathFinderUpdate@@SAPAXI@Z ENDP			; CvDllPathFinderUpdate::operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetX@CvDllPathFinderUpdate@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetX@CvDllPathFinderUpdate@@UBGHXZ PROC		; CvDllPathFinderUpdate::GetX, COMDAT

; 78   : {

	push	ebp
	mov	ebp, esp

; 79   : 	return m_iX;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 80   : }

	pop	ebp
	ret	4
?GetX@CvDllPathFinderUpdate@@UBGHXZ ENDP		; CvDllPathFinderUpdate::GetX
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetY@CvDllPathFinderUpdate@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetY@CvDllPathFinderUpdate@@UBGHXZ PROC		; CvDllPathFinderUpdate::GetY, COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp

; 84   : 	return m_iY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 85   : }

	pop	ebp
	ret	4
?GetY@CvDllPathFinderUpdate@@UBGHXZ ENDP		; CvDllPathFinderUpdate::GetY
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetTurnNumber@CvDllPathFinderUpdate@@UBGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?GetTurnNumber@CvDllPathFinderUpdate@@UBGHXZ PROC	; CvDllPathFinderUpdate::GetTurnNumber, COMDAT

; 88   : {

	push	ebp
	mov	ebp, esp

; 89   : 	return m_iTurnNumber;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 90   : }

	pop	ebp
	ret	4
?GetTurnNumber@CvDllPathFinderUpdate@@UBGHXZ ENDP	; CvDllPathFinderUpdate::GetTurnNumber
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
PUBLIC	??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Construct<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> > >
PUBLIC	??_7CvDllPathFinderUpdateList@@6B@		; CvDllPathFinderUpdateList::`vftable'
PUBLIC	??_7ICvEnumerator@@6B@				; ICvEnumerator::`vftable'
PUBLIC	??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z ; CvDllPathFinderUpdateList::CvDllPathFinderUpdateList
PUBLIC	?QueryInterface@CvDllPathFinderUpdateList@@UAGPAXU_GUID@@@Z ; CvDllPathFinderUpdateList::QueryInterface
PUBLIC	?Destroy@CvDllPathFinderUpdateList@@EAGXXZ	; CvDllPathFinderUpdateList::Destroy
PUBLIC	?MoveNext@CvDllPathFinderUpdateList@@UAG_NXZ	; CvDllPathFinderUpdateList::MoveNext
PUBLIC	?Reset@CvDllPathFinderUpdateList@@UAGXXZ	; CvDllPathFinderUpdateList::Reset
PUBLIC	?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ ; CvDllPathFinderUpdateList::GetCurrent
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_7CvDllPathFinderUpdateList@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_7CvDllPathFinderUpdateList@@6B@ DD FLAT:?QueryInterface@CvDllPathFinderUpdateList@@UAGPAXU_GUID@@@Z ; CvDllPathFinderUpdateList::`vftable'
	DD	FLAT:?Destroy@CvDllPathFinderUpdateList@@EAGXXZ
	DD	FLAT:?MoveNext@CvDllPathFinderUpdateList@@UAG_NXZ
	DD	FLAT:?Reset@CvDllPathFinderUpdateList@@UAGXXZ
	DD	FLAT:?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ
CONST	ENDS
;	COMDAT ??_7ICvEnumerator@@6B@
CONST	SEGMENT
??_7ICvEnumerator@@6B@ DD FLAT:__purecall		; ICvEnumerator::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z$1
__ehfuncinfo$??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllpathfinderupdate.cpp
xdata$x	ENDS
;	COMDAT ??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z
_TEXT	SEGMENT
tv161 = -76						; size = 4
tv186 = -72						; size = 4
_this$ = -68						; size = 4
$T219428 = -64						; size = 4
$T219427 = -60						; size = 4
$T219426 = -56						; size = 4
$T219402 = -50						; size = 1
$T219389 = -49						; size = 1
$T219385 = -48						; size = 4
$T219378 = -40						; size = 4
$T219410 = -34						; size = 1
$T219365 = -28						; size = 4
$T219356 = -24						; size = 4
$T219342 = -20						; size = 4
$T219341 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_updates$ = 8						; size = 4
??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z PROC ; CvDllPathFinderUpdateList::CvDllPathFinderUpdateList, COMDAT
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICvUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ICvEnumerator@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET ??_7CvDllPathFinderUpdateList@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1
	mov	ecx, DWORD PTR _updates$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T219356[ebp], edx
	mov	eax, DWORD PTR $T219356[ebp]
	mov	DWORD PTR $T219341[ebp], eax
	mov	ecx, DWORD PTR _updates$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T219365[ebp], edx
	mov	eax, DWORD PTR $T219365[ebp]
	mov	DWORD PTR $T219342[ebp], eax
	mov	ecx, DWORD PTR $T219341[ebp]
	mov	DWORD PTR $T219428[ebp], ecx
	mov	edx, DWORD PTR $T219342[ebp]
	mov	DWORD PTR $T219427[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR $T219426[ebp], eax
	lea	ecx, DWORD PTR $T219402[ebp]
	mov	DWORD PTR $T219378[ebp], ecx
	lea	edx, DWORD PTR $T219389[ebp]
	mov	DWORD PTR $T219385[ebp], edx
	mov	eax, DWORD PTR $T219426[ebp]
	mov	DWORD PTR tv186[ebp], eax
	mov	ecx, DWORD PTR $T219426[ebp]
	mov	DWORD PTR tv161[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	movzx	edx, BYTE PTR $T219410[ebp]
	push	edx
	mov	eax, DWORD PTR $T219428[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219427[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T219426[ebp]
	call	??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Construct<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], -1

; 97   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z$1:
	mov	ecx, DWORD PTR $T219426[ebp]
	jmp	??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
__ehhandler$??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvDllPathFinderUpdateList@@QAE@ABV?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@Z ENDP ; CvDllPathFinderUpdateList::CvDllPathFinderUpdateList
PUBLIC	?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy
PUBLIC	??1CvDllPathFinderUpdateList@@QAE@XZ		; CvDllPathFinderUpdateList::~CvDllPathFinderUpdateList
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvDllPathFinderUpdateList@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvDllPathFinderUpdateList@@QAE@XZ$1
__ehfuncinfo$??1CvDllPathFinderUpdateList@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvDllPathFinderUpdateList@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllpathfinderupdate.cpp
xdata$x	ENDS
;	COMDAT ??1CvDllPathFinderUpdateList@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T219528 = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1CvDllPathFinderUpdateList@@QAE@XZ PROC		; CvDllPathFinderUpdateList::~CvDllPathFinderUpdateList, COMDAT
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvDllPathFinderUpdateList@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvDllPathFinderUpdateList@@6B@

; 101  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T219528[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T219528[ebp]
	call	?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvDllPathFinderUpdateList@@QAE@XZ$1:
	mov	ecx, DWORD PTR $T219528[ebp]
	jmp	??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
__ehhandler$??1CvDllPathFinderUpdateList@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvDllPathFinderUpdateList@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvDllPathFinderUpdateList@@QAE@XZ ENDP		; CvDllPathFinderUpdateList::~CvDllPathFinderUpdateList
PUBLIC	?IncrementReference@CvDllPathFinderUpdateList@@QAEIXZ ; CvDllPathFinderUpdateList::IncrementReference
; Function compile flags: /Odtp
;	COMDAT ?QueryInterface@CvDllPathFinderUpdateList@@UAGPAXU_GUID@@@Z
_TEXT	SEGMENT
tv90 = -88						; size = 4
tv161 = -84						; size = 4
tv85 = -80						; size = 4
tv137 = -76						; size = 4
$T219541 = -72						; size = 16
$T219540 = -56						; size = 16
$T219539 = -40						; size = 16
$T219538 = -20						; size = 16
_this$ = 8						; size = 4
_guidInterface$ = 12					; size = 16
?QueryInterface@CvDllPathFinderUpdateList@@UAGPAXU_GUID@@@Z PROC ; CvDllPathFinderUpdateList::QueryInterface, COMDAT

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi

; 105  : 	if(guidInterface == ICvUnknown::GetInterfaceId() ||
; 106  : 	        guidInterface == ICvEnumerator::GetInterfaceId())

	mov	eax, DWORD PTR _guidICvUnknown
	mov	DWORD PTR $T219539[ebp], eax
	mov	ecx, DWORD PTR _guidICvUnknown+4
	mov	DWORD PTR $T219539[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvUnknown+8
	mov	DWORD PTR $T219539[ebp+8], edx
	mov	eax, DWORD PTR _guidICvUnknown+12
	mov	DWORD PTR $T219539[ebp+12], eax
	mov	ecx, DWORD PTR $T219539[ebp]
	mov	DWORD PTR $T219538[ebp], ecx
	mov	edx, DWORD PTR $T219539[ebp+4]
	mov	DWORD PTR $T219538[ebp+4], edx
	mov	eax, DWORD PTR $T219539[ebp+8]
	mov	DWORD PTR $T219538[ebp+8], eax
	mov	ecx, DWORD PTR $T219539[ebp+12]
	mov	DWORD PTR $T219538[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T219538[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv137[ebp], edx
	repe cmpsb
	je	SHORT $LN17@QueryInter@2
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv137[ebp], eax
$LN17@QueryInter@2:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv85[ebp], 0
	sete	dl
	test	edx, edx
	jne	SHORT $LN1@QueryInter@2
	mov	eax, DWORD PTR _guidICvEnumerator
	mov	DWORD PTR $T219541[ebp], eax
	mov	ecx, DWORD PTR _guidICvEnumerator+4
	mov	DWORD PTR $T219541[ebp+4], ecx
	mov	edx, DWORD PTR _guidICvEnumerator+8
	mov	DWORD PTR $T219541[ebp+8], edx
	mov	eax, DWORD PTR _guidICvEnumerator+12
	mov	DWORD PTR $T219541[ebp+12], eax
	mov	ecx, DWORD PTR $T219541[ebp]
	mov	DWORD PTR $T219540[ebp], ecx
	mov	edx, DWORD PTR $T219541[ebp+4]
	mov	DWORD PTR $T219540[ebp+4], edx
	mov	eax, DWORD PTR $T219541[ebp+8]
	mov	DWORD PTR $T219540[ebp+8], eax
	mov	ecx, DWORD PTR $T219541[ebp+12]
	mov	DWORD PTR $T219540[ebp+12], ecx
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR $T219540[ebp]
	lea	esi, DWORD PTR _guidInterface$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv161[ebp], edx
	repe cmpsb
	je	SHORT $LN18@QueryInter@2
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv161[ebp], eax
$LN18@QueryInter@2:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	xor	edx, edx
	cmp	DWORD PTR tv90[ebp], 0
	sete	dl
	test	edx, edx
	je	SHORT $LN2@QueryInter@2
$LN1@QueryInter@2:

; 107  : 	{
; 108  : 		IncrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncrementReference@CvDllPathFinderUpdateList@@QAEIXZ ; CvDllPathFinderUpdateList::IncrementReference

; 109  : 		return this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:

; 110  : 	}
; 111  : 
; 112  : 	return NULL;

	xor	eax, eax
$LN3@QueryInter@2:

; 113  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?QueryInterface@CvDllPathFinderUpdateList@@UAGPAXU_GUID@@@Z ENDP ; CvDllPathFinderUpdateList::QueryInterface
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?IncrementReference@CvDllPathFinderUpdateList@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IncrementReference@CvDllPathFinderUpdateList@@QAEIXZ PROC ; CvDllPathFinderUpdateList::IncrementReference, COMDAT
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 	++m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 118  : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 119  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementReference@CvDllPathFinderUpdateList@@QAEIXZ ENDP ; CvDllPathFinderUpdateList::IncrementReference
_TEXT	ENDS
PUBLIC	??3CvDllPathFinderUpdateList@@SAXPAX@Z		; CvDllPathFinderUpdateList::operator delete
PUBLIC	?DecrementReference@CvDllPathFinderUpdateList@@QAEIXZ ; CvDllPathFinderUpdateList::DecrementReference
; Function compile flags: /Odtp
;	COMDAT ?DecrementReference@CvDllPathFinderUpdateList@@QAEIXZ
_TEXT	SEGMENT
tv70 = -16						; size = 4
_this$ = -12						; size = 4
$T219573 = -8						; size = 4
$T219572 = -4						; size = 4
?DecrementReference@CvDllPathFinderUpdateList@@QAEIXZ PROC ; CvDllPathFinderUpdateList::DecrementReference, COMDAT
; _this$ = ecx

; 122  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 	if(m_uiRefCount == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN2@DecrementR@2

; 124  : 	{
; 125  : 		delete this;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T219573[ebp], ecx
	mov	edx, DWORD PTR $T219573[ebp]
	mov	DWORD PTR $T219572[ebp], edx
	cmp	DWORD PTR $T219572[ebp], 0
	je	SHORT $LN5@DecrementR@2
	mov	ecx, DWORD PTR $T219572[ebp]
	call	??1CvDllPathFinderUpdateList@@QAE@XZ	; CvDllPathFinderUpdateList::~CvDllPathFinderUpdateList
	mov	eax, 1
	and	eax, 1
	je	SHORT $LN8@DecrementR@2
	mov	ecx, DWORD PTR $T219572[ebp]
	push	ecx
	call	??3CvDllPathFinderUpdateList@@SAXPAX@Z	; CvDllPathFinderUpdateList::operator delete
	add	esp, 4
$LN8@DecrementR@2:
	mov	edx, DWORD PTR $T219572[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN6@DecrementR@2
$LN5@DecrementR@2:
	mov	DWORD PTR tv70[ebp], 0
$LN6@DecrementR@2:

; 126  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN3@DecrementR@2

; 127  : 	}
; 128  : 	else

	jmp	SHORT $LN3@DecrementR@2
$LN2@DecrementR@2:

; 129  : 	{
; 130  : 		--m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 131  : 		return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
$LN3@DecrementR@2:

; 132  : 	}
; 133  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DecrementReference@CvDllPathFinderUpdateList@@QAEIXZ ENDP ; CvDllPathFinderUpdateList::DecrementReference
_TEXT	ENDS
PUBLIC	?GetReferenceCount@CvDllPathFinderUpdateList@@QAEIXZ ; CvDllPathFinderUpdateList::GetReferenceCount
; Function compile flags: /Odtp
;	COMDAT ?GetReferenceCount@CvDllPathFinderUpdateList@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetReferenceCount@CvDllPathFinderUpdateList@@QAEIXZ PROC ; CvDllPathFinderUpdateList::GetReferenceCount, COMDAT
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 	return m_uiRefCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 138  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReferenceCount@CvDllPathFinderUpdateList@@QAEIXZ ENDP ; CvDllPathFinderUpdateList::GetReferenceCount
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Destroy@CvDllPathFinderUpdateList@@EAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Destroy@CvDllPathFinderUpdateList@@EAGXXZ PROC		; CvDllPathFinderUpdateList::Destroy, COMDAT

; 141  : {

	push	ebp
	mov	ebp, esp

; 142  : 	DecrementReference();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecrementReference@CvDllPathFinderUpdateList@@QAEIXZ ; CvDllPathFinderUpdateList::DecrementReference

; 143  : }

	pop	ebp
	ret	4
?Destroy@CvDllPathFinderUpdateList@@EAGXXZ ENDP		; CvDllPathFinderUpdateList::Destroy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??3CvDllPathFinderUpdateList@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??3CvDllPathFinderUpdateList@@SAXPAX@Z PROC		; CvDllPathFinderUpdateList::operator delete, COMDAT

; 146  : {

	push	ebp
	mov	ebp, esp

; 147  : 	CvDllGameContext::Free(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?Free@CvDllGameContext@@SAXPAX@Z	; CvDllGameContext::Free
	add	esp, 4

; 148  : }

	pop	ebp
	ret	0
??3CvDllPathFinderUpdateList@@SAXPAX@Z ENDP		; CvDllPathFinderUpdateList::operator delete
_TEXT	ENDS
PUBLIC	??2CvDllPathFinderUpdateList@@SAPAXI@Z		; CvDllPathFinderUpdateList::operator new
; Function compile flags: /Odtp
;	COMDAT ??2CvDllPathFinderUpdateList@@SAPAXI@Z
_TEXT	SEGMENT
_bytes$ = 8						; size = 4
??2CvDllPathFinderUpdateList@@SAPAXI@Z PROC		; CvDllPathFinderUpdateList::operator new, COMDAT

; 151  : {

	push	ebp
	mov	ebp, esp

; 152  : 	return CvDllGameContext::Allocate(bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	call	?Allocate@CvDllGameContext@@SAPAXI@Z	; CvDllGameContext::Allocate
	add	esp, 4

; 153  : }

	pop	ebp
	ret	0
??2CvDllPathFinderUpdateList@@SAPAXI@Z ENDP		; CvDllPathFinderUpdateList::operator new
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?MoveNext@CvDllPathFinderUpdateList@@UAG_NXZ
_TEXT	SEGMENT
$T219606 = -12						; size = 4
$T219602 = -8						; size = 4
$T219598 = -4						; size = 4
_this$ = 8						; size = 4
?MoveNext@CvDllPathFinderUpdateList@@UAG_NXZ PROC	; CvDllPathFinderUpdateList::MoveNext, COMDAT

; 156  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 157  : 	if(m_iIndex == -1)	// In the uninitialized state?

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], -1
	jne	SHORT $LN4@MoveNext

; 158  : 	{
; 159  : 		if(!m_updates.empty())	// Any in the list?

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T219598[ebp], ecx
	mov	edx, DWORD PTR $T219598[ebp]
	mov	eax, DWORD PTR $T219598[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@MoveNext

; 160  : 		{
; 161  : 			m_iIndex = 0;	// then we can start

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 162  : 			return true;

	mov	al, 1
	jmp	SHORT $LN5@MoveNext

; 163  : 		}
; 164  : 		else

	jmp	SHORT $LN4@MoveNext
$LN3@MoveNext:

; 165  : 			return false;	// Nope, just leave as -1 and return false

	xor	al, al
	jmp	SHORT $LN5@MoveNext
$LN4@MoveNext:

; 166  : 	}
; 167  : 
; 168  : 	if((size_t)m_iIndex < m_updates.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T219602[ebp], ecx
	mov	edx, DWORD PTR $T219602[ebp]
	mov	eax, DWORD PTR $T219602[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	jae	SHORT $LN1@MoveNext

; 169  : 		m_iIndex++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN1@MoveNext:

; 170  : 
; 171  : 	return (size_t)m_iIndex < m_updates.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR $T219606[ebp], eax
	mov	ecx, DWORD PTR $T219606[ebp]
	mov	edx, DWORD PTR $T219606[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	sbb	eax, eax
	neg	eax
$LN5@MoveNext:

; 172  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?MoveNext@CvDllPathFinderUpdateList@@UAG_NXZ ENDP	; CvDllPathFinderUpdateList::MoveNext
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Reset@CvDllPathFinderUpdateList@@UAGXXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Reset@CvDllPathFinderUpdateList@@UAGXXZ PROC		; CvDllPathFinderUpdateList::Reset, COMDAT

; 175  : {

	push	ebp
	mov	ebp, esp

; 176  : 	m_iIndex = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], -1

; 177  : }

	pop	ebp
	ret	4
?Reset@CvDllPathFinderUpdateList@@UAGXXZ ENDP		; CvDllPathFinderUpdateList::Reset
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ$0
__ehfuncinfo$?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdllpathfinderupdate.cpp
xdata$x	ENDS
;	COMDAT ?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ
_TEXT	SEGMENT
tv91 = -32						; size = 4
$T219619 = -28						; size = 4
$T219612 = -24						; size = 4
$T219611 = -20						; size = 4
_data$218439 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ PROC ; CvDllPathFinderUpdateList::GetCurrent, COMDAT

; 180  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 181  : 	if(m_iIndex > -1 && (size_t)m_iIndex < m_updates.size())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], -1
	jle	$LN1@GetCurrent
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T219619[ebp], ecx
	mov	edx, DWORD PTR $T219619[ebp]
	mov	eax, DWORD PTR $T219619[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], eax
	jae	SHORT $LN1@GetCurrent

; 182  : 	{
; 183  : 		const CvDllPathFinderUpdateListData& data = m_updates[m_iIndex];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _data$218439[ebp], ecx

; 184  : 
; 185  : 		return new CvDllPathFinderUpdate(data.iX, data.iY, data.iTurnNumber);

	push	20					; 00000014H
	call	??2CvDllPathFinderUpdate@@SAPAXI@Z	; CvDllPathFinderUpdate::operator new
	add	esp, 4
	mov	DWORD PTR $T219612[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T219612[ebp], 0
	je	SHORT $LN4@GetCurrent
	mov	eax, DWORD PTR _data$218439[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _data$218439[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _data$218439[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR $T219612[ebp]
	call	??0CvDllPathFinderUpdate@@QAE@HHH@Z	; CvDllPathFinderUpdate::CvDllPathFinderUpdate
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN5@GetCurrent
$LN4@GetCurrent:
	mov	DWORD PTR tv91[ebp], 0
$LN5@GetCurrent:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR $T219611[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T219611[ebp]
	jmp	SHORT $LN2@GetCurrent
$LN1@GetCurrent:

; 186  : 	}
; 187  : 
; 188  : 	return NULL;

	xor	eax, eax
$LN2@GetCurrent:

; 189  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ$0:
	mov	eax, DWORD PTR $T219612[ebp]
	push	eax
	call	??3CvDllPathFinderUpdate@@SAXPAX@Z	; CvDllPathFinderUpdate::operator delete
	pop	ecx
	ret	0
__ehhandler$?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetCurrent@CvDllPathFinderUpdateList@@UAGPAVICvUnknown@@XZ ENDP ; CvDllPathFinderUpdateList::GetCurrent
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::~_Vector_val<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T219703 = -32						; size = 4
$T219702 = -28						; size = 4
$T219698 = -24						; size = 4
$T219697 = -20						; size = 4
$T219679 = -16						; size = 4
$T219678 = -12						; size = 4
$T219662 = -8						; size = 4
__Cat$219687 = -2					; size = 1
$T219684 = -1						; size = 1
?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T219698[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T219697[ebp], ecx
	mov	edx, DWORD PTR $T219698[ebp]
	mov	DWORD PTR $T219679[ebp], edx
	mov	eax, DWORD PTR $T219697[ebp]
	mov	DWORD PTR $T219678[ebp], eax
	mov	cl, BYTE PTR __Cat$219687[ebp]
	mov	BYTE PTR $T219684[ebp], cl
	mov	edx, DWORD PTR $T219678[ebp]
	mov	DWORD PTR $T219662[ebp], edx
	jmp	SHORT $LN12@Tidy
$LN11@Tidy:
	mov	eax, DWORD PTR $T219662[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T219662[ebp], eax
$LN12@Tidy:
	mov	ecx, DWORD PTR $T219662[ebp]
	cmp	ecx, DWORD PTR $T219679[ebp]
	je	SHORT $LN4@Tidy
	jmp	SHORT $LN11@Tidy
$LN4@Tidy:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T219703[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T219702[ebp], eax
	mov	ecx, DWORD PTR $T219702[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Insert<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> > >
PUBLIC	?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Buy
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z$0
__unwindtable$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z$4
__ehfuncinfo$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
_this$ = -160						; size = 4
$T219777 = -124						; size = 4
$T219773 = -118						; size = 1
$T219756 = -116						; size = 4
$T219707 = -24						; size = 4
$T219706 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Construct<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> > >, COMDAT
; _this$ = ecx

; 532  : 		void _Construct(_Iter _First,

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 144				; 00000090H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 			_Iter _Last, input_iterator_tag)
; 534  : 		{	// initialize with [_First, _Last), input iterators
; 535  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Buy

; 536  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 537  : 		insert(begin(), _First, _Last);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T219756[ebp], ecx
	mov	edx, DWORD PTR $T219756[ebp]
	mov	DWORD PTR $T219707[ebp], edx
	mov	eax, DWORD PTR $T219707[ebp]
	mov	DWORD PTR $T219706[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T219777[ebp], ecx
	movzx	edx, BYTE PTR $T219773[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T219777[ebp]
	push	ecx
	mov	edx, DWORD PTR $T219706[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Insert<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> > >
	jmp	SHORT $LN4@Construct
__catch$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z$0:

; 538  : 		_CATCH_ALL
; 539  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAEXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Tidy

; 540  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 541  : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN3@Construct
	ret	0
$LN4@Construct:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN3@Construct:

; 542  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@0Uinput_iterator_tag@1@@Z ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Construct<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> > >
PUBLIC	??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ; std::_Allocate<CvDllPathFinderUpdateListData>
PUBLIC	?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$219869 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$219869[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$219869[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$219869[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ; std::_Allocate<CvDllPathFinderUpdateListData>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Buy
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T219900 = -80						; size = 28
$T219899 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T219900[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T219899[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T219899[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T219900[ebp]
	push	eax
	lea	ecx, DWORD PTR $T219899[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T219899[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T219899[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T219900[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T219900[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T219899[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z
_TEXT	SEGMENT
$T219925 = -16						; size = 4
$T219921 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z PROC ; std::_Allocate<CvDllPathFinderUpdateListData>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 12					; 0000000cH
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T219925[ebp], 0
	lea	eax, DWORD PTR $T219925[ebp]
	push	eax
	lea	ecx, DWORD PTR $T219921[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T219921[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T219921[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ENDP ; std::_Allocate<CvDllPathFinderUpdateListData>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
PUBLIC	??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
xdata$x	SEGMENT
__catchsym$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z$0
__unwindtable$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z$3
__ehfuncinfo$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
tv215 = -340						; size = 4
tv214 = -336						; size = 4
tv87 = -332						; size = 4
tv251 = -328						; size = 4
tv237 = -324						; size = 4
tv227 = -320						; size = 4
_this$ = -316						; size = 4
$T220354 = -312						; size = 4
$T220353 = -308						; size = 4
__Tmp$220347 = -304					; size = 12
$T220328 = -292						; size = 4
$T220327 = -288						; size = 4
__Tmp$220321 = -284					; size = 12
$T220302 = -272						; size = 4
$T220301 = -268						; size = 4
__Tmp$220295 = -264					; size = 12
$T220276 = -252						; size = 4
$T220266 = -248						; size = 4
$T220265 = -244						; size = 4
__Cat$220273 = -239					; size = 1
$T220270 = -238						; size = 1
$T220269 = -237						; size = 1
$T220249 = -236						; size = 4
$T220248 = -232						; size = 4
$T220244 = -228						; size = 4
$T220243 = -224						; size = 4
$T220225 = -220						; size = 4
$T220224 = -216						; size = 4
$T220208 = -212						; size = 4
__Cat$220231 = -206					; size = 1
$T220228 = -205						; size = 1
$T220159 = -204						; size = 4
$T220158 = -200						; size = 4
$T220142 = -196						; size = 4
__Cat$220166 = -190					; size = 1
$T220164 = -189						; size = 1
$T220116 = -188						; size = 4
$T220104 = -184						; size = 4
$T220094 = -177						; size = 1
$T220093 = -176						; size = 4
__Cat$220112 = -171					; size = 1
$T220110 = -170						; size = 1
$T220109 = -169						; size = 1
$T220072 = -168						; size = 4
$T220071 = -164						; size = 4
__Cat$220080 = -159					; size = 1
$T220078 = -158						; size = 1
$T220077 = -157						; size = 1
$T220055 = -156						; size = 4
$T220043 = -152						; size = 4
$T220033 = -145						; size = 1
$T220032 = -144						; size = 4
__Cat$220051 = -139					; size = 1
$T220049 = -138						; size = 1
$T220048 = -137						; size = 1
__Count$220006 = -124					; size = 4
__Count$219980 = -52					; size = 4
$T219960 = -48						; size = 4
$T219949 = -44						; size = 4
$T219948 = -40						; size = 4
__Newvec$218754 = -32					; size = 4
__Ptr$218755 = -28					; size = 4
__Capacity$ = -24					; size = 4
__Count$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z PROC ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Insert<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> > >, COMDAT
; _this$ = ecx

; 925  : 		void _Insert(const_iterator _Where,

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 926  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 927  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 928  : 
; 929  :  #if _HAS_ITERATOR_DEBUGGING
; 930  : 		if (_Where._Mycont != this
; 931  : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 932  : 			_DEBUG_ERROR("vector insert iterator outside range");
; 933  : 		_DEBUG_RANGE(_First, _Last);
; 934  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 935  : 
; 936  : 		size_type _Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 937  : 		_Distance(_First, _Last, _Count);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T219960[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T219949[ebp], ecx
	mov	edx, DWORD PTR $T219960[ebp]
	mov	DWORD PTR $T219948[ebp], edx
	mov	eax, DWORD PTR $T219949[ebp]
	sub	eax, DWORD PTR $T219948[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 938  : 		size_type _Capacity = capacity();

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN28@Insert
	mov	DWORD PTR tv227[ebp], 0
	jmp	SHORT $LN26@Insert
$LN28@Insert:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv227[ebp], eax
$LN26@Insert:
	mov	edx, DWORD PTR tv227[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 939  : 
; 940  : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN9@Insert
	jmp	$LN11@Insert
$LN9@Insert:

; 941  : 			;
; 942  : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$219980[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$219980[ebp], 0
	jbe	SHORT $LN34@Insert
	mov	eax, DWORD PTR __Count$219980[ebp]
	mov	DWORD PTR tv237[ebp], eax
	jmp	SHORT $LN36@Insert
$LN34@Insert:
	mov	DWORD PTR tv237[ebp], 1
$LN36@Insert:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR tv237[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN41@Insert

; 943  : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@KAXXZ ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Xlen
	jmp	$LN11@Insert

; 944  : 		else if (_Capacity < size() + _Count)

$LN41@Insert:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN5@Insert

; 945  : 			{	// not enough room, reallocate
; 946  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 947  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$220006[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$220006[ebp], 0
	jbe	SHORT $LN47@Insert
	mov	edx, DWORD PTR __Count$220006[ebp]
	mov	DWORD PTR tv251[ebp], edx
	jmp	SHORT $LN43@Insert
$LN47@Insert:
	mov	DWORD PTR tv251[ebp], 1
$LN43@Insert:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv251[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN12@Insert
	mov	DWORD PTR tv87[ebp], 0
	jmp	SHORT $LN13@Insert
$LN12@Insert:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv87[ebp], edx
$LN13@Insert:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 948  : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN53@Insert

; 949  : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 950  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN53@Insert:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UCvDllPathFinderUpdateListData@@@std@@YAPAUCvDllPathFinderUpdateListData@@IPAU1@@Z ; std::_Allocate<CvDllPathFinderUpdateListData>
	add	esp, 8
	mov	DWORD PTR __Newvec$218754[ebp], eax

; 951  : 			pointer _Ptr = _Newvec;

	mov	eax, DWORD PTR __Newvec$218754[ebp]
	mov	DWORD PTR __Ptr$218755[ebp], eax

; 952  : 
; 953  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 954  : 			_Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where),
; 955  : 				_Newvec);	// copy prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T220055[ebp], edx
	mov	eax, DWORD PTR __Newvec$218754[ebp]
	mov	DWORD PTR $T220043[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T220048[ebp], cl
	mov	dl, BYTE PTR __Cat$220051[ebp]
	mov	BYTE PTR $T220049[ebp], dl
	mov	al, BYTE PTR $T220048[ebp]
	mov	BYTE PTR $T220033[ebp], al
	mov	ecx, DWORD PTR $T220043[ebp]
	mov	DWORD PTR $T220032[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T220032[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T220055[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv214[ebp], eax
	mov	eax, DWORD PTR tv214[ebp]
	mov	DWORD PTR __Ptr$218755[ebp], eax

; 956  : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff

	mov	ecx, DWORD PTR __Ptr$218755[ebp]
	mov	DWORD PTR $T220072[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T220071[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T220077[ebp], al
	mov	cl, BYTE PTR __Cat$220080[ebp]
	mov	BYTE PTR $T220078[ebp], cl
	movzx	edx, BYTE PTR $T220077[ebp]
	push	edx
	movzx	eax, BYTE PTR $T220078[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T220072[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220071[ebp]
	push	ecx
	call	??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv215[ebp], eax
	mov	edx, DWORD PTR tv215[ebp]
	mov	DWORD PTR __Ptr$218755[ebp], edx

; 957  : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220116[ebp], ecx
	mov	edx, DWORD PTR __Ptr$218755[ebp]
	mov	DWORD PTR $T220104[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T220109[ebp], al
	mov	cl, BYTE PTR __Cat$220112[ebp]
	mov	BYTE PTR $T220110[ebp], cl
	mov	dl, BYTE PTR $T220109[ebp]
	mov	BYTE PTR $T220094[ebp], dl
	mov	eax, DWORD PTR $T220104[ebp]
	mov	DWORD PTR $T220093[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T220093[ebp]
	push	edx
	mov	eax, DWORD PTR $T220116[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 16					; 00000010H
	jmp	SHORT $LN14@Insert
__catch$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z$0:

; 958  : 			_CATCH_ALL
; 959  : 			_Destroy(_Newvec, _Ptr);

	mov	edx, DWORD PTR __Ptr$218755[ebp]
	mov	DWORD PTR $T220159[ebp], edx
	mov	eax, DWORD PTR __Newvec$218754[ebp]
	mov	DWORD PTR $T220158[ebp], eax
	mov	cl, BYTE PTR __Cat$220166[ebp]
	mov	BYTE PTR $T220164[ebp], cl
	mov	edx, DWORD PTR $T220158[ebp]
	mov	DWORD PTR $T220142[ebp], edx
	jmp	SHORT $LN90@Insert
$LN89@Insert:
	mov	eax, DWORD PTR $T220142[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T220142[ebp], eax
$LN90@Insert:
	mov	ecx, DWORD PTR $T220142[ebp]
	cmp	ecx, DWORD PTR $T220159[ebp]
	je	SHORT $LN82@Insert
	jmp	SHORT $LN89@Insert
$LN82@Insert:

; 960  : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Newvec$218754[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 961  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 962  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN99@Insert
	ret	0
$LN14@Insert:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 963  : 
; 964  : 			_Count += size();

$LN99@Insert:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 965  : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN2@Insert

; 966  : 				{	// destroy and deallocate old array
; 967  : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220244[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T220243[ebp], eax
	mov	ecx, DWORD PTR $T220244[ebp]
	mov	DWORD PTR $T220225[ebp], ecx
	mov	edx, DWORD PTR $T220243[ebp]
	mov	DWORD PTR $T220224[ebp], edx
	mov	al, BYTE PTR __Cat$220231[ebp]
	mov	BYTE PTR $T220228[ebp], al
	mov	ecx, DWORD PTR $T220224[ebp]
	mov	DWORD PTR $T220208[ebp], ecx
	jmp	SHORT $LN109@Insert
$LN108@Insert:
	mov	edx, DWORD PTR $T220208[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T220208[ebp], edx
$LN109@Insert:
	mov	eax, DWORD PTR $T220208[ebp]
	cmp	eax, DWORD PTR $T220225[ebp]
	je	SHORT $LN101@Insert
	jmp	SHORT $LN108@Insert
$LN101@Insert:

; 968  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T220249[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T220248[ebp], eax
	mov	ecx, DWORD PTR $T220248[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@Insert:

; 969  : 				}
; 970  : 
; 971  :  #if _HAS_ITERATOR_DEBUGGING
; 972  : 			this->_Orphan_all();
; 973  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 974  : 
; 975  : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$218754[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 976  : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Newvec$218754[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 977  : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$218754[ebp]
	mov	DWORD PTR [eax+4], ecx

; 978  : 			}
; 979  : 		else

	jmp	$LN11@Insert
$LN5@Insert:

; 980  : 			{	// new stuff fits, append and rotate into place
; 981  : 			_Ucopy(_First, _Last, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T220276[ebp], eax
	mov	ecx, DWORD PTR $T220276[ebp]
	mov	DWORD PTR $T220266[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T220265[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T220269[ebp], al
	mov	cl, BYTE PTR __Cat$220273[ebp]
	mov	BYTE PTR $T220270[ebp], cl
	movzx	edx, BYTE PTR $T220269[ebp]
	push	edx
	movzx	eax, BYTE PTR $T220270[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T220266[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T220265[ebp]
	push	ecx
	call	??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H

; 982  : 
; 983  : 			_Reverse(_Where._Myptr, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T220302[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T220301[ebp], ecx
	jmp	SHORT $LN126@Insert
$LN125@Insert:
	mov	edx, DWORD PTR $T220301[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T220301[ebp], edx
$LN126@Insert:
	mov	eax, DWORD PTR $T220301[ebp]
	cmp	eax, DWORD PTR $T220302[ebp]
	je	$LN127@Insert
	mov	ecx, DWORD PTR $T220302[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR $T220302[ebp], ecx
	mov	edx, DWORD PTR $T220301[ebp]
	cmp	edx, DWORD PTR $T220302[ebp]
	je	SHORT $LN127@Insert
	mov	eax, DWORD PTR $T220301[ebp]
	cmp	eax, DWORD PTR $T220302[ebp]
	je	SHORT $LN129@Insert
	mov	ecx, DWORD PTR $T220301[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$220295[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$220295[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$220295[ebp+8], ecx
	mov	edx, DWORD PTR $T220302[ebp]
	mov	eax, DWORD PTR $T220301[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T220302[ebp]
	mov	ecx, DWORD PTR __Tmp$220295[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$220295[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$220295[ebp+8]
	mov	DWORD PTR [eax+8], ecx
$LN129@Insert:
	jmp	$LN125@Insert
$LN127@Insert:

; 984  : 			_Reverse(_Mylast, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T220328[ebp], edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220327[ebp], edx
	jmp	SHORT $LN136@Insert
$LN135@Insert:
	mov	eax, DWORD PTR $T220327[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T220327[ebp], eax
$LN136@Insert:
	mov	ecx, DWORD PTR $T220327[ebp]
	cmp	ecx, DWORD PTR $T220328[ebp]
	je	$LN137@Insert
	mov	edx, DWORD PTR $T220328[ebp]
	sub	edx, 12					; 0000000cH
	mov	DWORD PTR $T220328[ebp], edx
	mov	eax, DWORD PTR $T220327[ebp]
	cmp	eax, DWORD PTR $T220328[ebp]
	je	SHORT $LN137@Insert
	mov	ecx, DWORD PTR $T220327[ebp]
	cmp	ecx, DWORD PTR $T220328[ebp]
	je	SHORT $LN139@Insert
	mov	edx, DWORD PTR $T220327[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$220321[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$220321[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$220321[ebp+8], edx
	mov	eax, DWORD PTR $T220328[ebp]
	mov	ecx, DWORD PTR $T220327[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T220328[ebp]
	mov	edx, DWORD PTR __Tmp$220321[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$220321[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$220321[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN139@Insert:
	jmp	$LN135@Insert
$LN137@Insert:

; 985  : 			_Reverse(_Where._Myptr, _Mylast + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR $T220354[ebp], eax
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T220353[ebp], edx
	jmp	SHORT $LN146@Insert
$LN145@Insert:
	mov	eax, DWORD PTR $T220353[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T220353[ebp], eax
$LN146@Insert:
	mov	ecx, DWORD PTR $T220353[ebp]
	cmp	ecx, DWORD PTR $T220354[ebp]
	je	$LN147@Insert
	mov	edx, DWORD PTR $T220354[ebp]
	sub	edx, 12					; 0000000cH
	mov	DWORD PTR $T220354[ebp], edx
	mov	eax, DWORD PTR $T220353[ebp]
	cmp	eax, DWORD PTR $T220354[ebp]
	je	SHORT $LN147@Insert
	mov	ecx, DWORD PTR $T220353[ebp]
	cmp	ecx, DWORD PTR $T220354[ebp]
	je	SHORT $LN149@Insert
	mov	edx, DWORD PTR $T220353[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$220347[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$220347[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$220347[ebp+8], edx
	mov	eax, DWORD PTR $T220354[ebp]
	mov	ecx, DWORD PTR $T220353[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T220354[ebp]
	mov	edx, DWORD PTR __Tmp$220347[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$220347[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$220347[ebp+8]
	mov	DWORD PTR [ecx+8], edx
$LN149@Insert:
	jmp	$LN145@Insert
$LN147@Insert:

; 986  : 
; 987  : 			_Mylast += _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN11@Insert:

; 988  : 
; 989  :  #if _HAS_ITERATOR_DEBUGGING
; 990  : 			_Orphan_range(_Where._Myptr, _Mylast);
; 991  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 992  : 
; 993  : 			}
; 994  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-344]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@@?$vector@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@QAEXV?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@1@00Uforward_iterator_tag@1@@Z ENDP ; std::vector<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >::_Insert<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv95 = -36						; size = 4
$T220410 = -32						; size = 4
$T220402 = -28						; size = 4
__Vptr$220408 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN16@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN16@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T220410[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$220408[ebp], edx
	mov	eax, DWORD PTR __Vptr$220408[ebp]
	mov	DWORD PTR $T220402[ebp], eax
	cmp	DWORD PTR $T220402[ebp], 0
	je	SHORT $LN26@Uninit_cop
	mov	ecx, DWORD PTR $T220410[ebp]
	mov	edx, DWORD PTR $T220402[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T220402[ebp]
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN22@Uninit_cop
$LN26@Uninit_cop:
	mov	DWORD PTR tv95[ebp], 0
$LN22@Uninit_cop:
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@PAUCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@2@@std@@YAPAUCvDllPathFinderUpdateListData@@V?$_Vector_const_iterator@UCvDllPathFinderUpdateListData@@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@0@0PAU1@AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<CvDllPathFinderUpdateListData,std::allocator<CvDllPathFinderUpdateListData> >,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
PUBLIC	??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z
_TEXT	SEGMENT
__Cat$220435 = -3					; size = 1
$T220431 = -2						; size = 1
$T220430 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T220430[ebp], al
	mov	cl, BYTE PTR __Cat$220435[ebp]
	mov	BYTE PTR $T220431[ebp], cl
	movzx	edx, BYTE PTR $T220430[ebp]
	push	edx
	movzx	eax, BYTE PTR $T220431[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@stdext@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T220460 = -28						; size = 4
__Vptr$220466 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$220466[ebp], ecx
	mov	edx, DWORD PTR __Vptr$220466[ebp]
	mov	DWORD PTR $T220460[ebp], edx
	cmp	DWORD PTR $T220460[ebp], 0
	je	SHORT $LN18@Uninit_cop@2
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T220460[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T220460[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@2
$LN18@Uninit_cop@2:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@2:
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUCvDllPathFinderUpdateListData@@PAU1@V?$allocator@UCvDllPathFinderUpdateListData@@@std@@@std@@YAPAUCvDllPathFinderUpdateListData@@PAU1@00AAV?$allocator@UCvDllPathFinderUpdateListData@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvDllPathFinderUpdateListData *,CvDllPathFinderUpdateListData *,std::allocator<CvDllPathFinderUpdateListData> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
END
