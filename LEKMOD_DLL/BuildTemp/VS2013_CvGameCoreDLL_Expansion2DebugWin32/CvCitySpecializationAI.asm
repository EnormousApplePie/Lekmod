; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvCitySpecializationAI.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?NO_QUEST_DATA@CvMinorCivQuest@@2HB		; CvMinorCivQuest::NO_QUEST_DATA
PUBLIC	?NO_TURN@CvMinorCivQuest@@2HB			; CvMinorCivQuest::NO_TURN
;	COMDAT ?NO_TURN@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_TURN@CvMinorCivQuest@@2HB DD 0ffffffffH		; CvMinorCivQuest::NO_TURN
CONST	ENDS
;	COMDAT ?NO_QUEST_DATA@CvMinorCivQuest@@2HB
CONST	SEGMENT
?NO_QUEST_DATA@CvMinorCivQuest@@2HB DD 0ffffffffH	; CvMinorCivQuest::NO_QUEST_DATA
CONST	ENDS
PUBLIC	??_7CvCitySpecializationXMLEntry@@6B@		; CvCitySpecializationXMLEntry::`vftable'
PUBLIC	??0CvCitySpecializationXMLEntry@@QAE@XZ		; CvCitySpecializationXMLEntry::CvCitySpecializationXMLEntry
PUBLIC	?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCitySpecializationXMLEntry::CacheResults
EXTRN	??0CvBaseInfo@@QAE@XZ:PROC			; CvBaseInfo::CvBaseInfo
EXTRN	??8CvBaseInfo@@UBE_NABV0@@Z:PROC		; CvBaseInfo::operator==
EXTRN	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::readFrom
EXTRN	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z:PROC ; CvBaseInfo::writeTo
EXTRN	??_ECvCitySpecializationXMLEntry@@UAEPAXI@Z:PROC ; CvCitySpecializationXMLEntry::`vector deleting destructor'
;	COMDAT ??_7CvCitySpecializationXMLEntry@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
CONST	SEGMENT
??_7CvCitySpecializationXMLEntry@@6B@ DD FLAT:?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCitySpecializationXMLEntry::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvCitySpecializationXMLEntry@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvCitySpecializationXMLEntry@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvCitySpecializationXMLEntry@@QAE@XZ PROC		; CvCitySpecializationXMLEntry::CvCitySpecializationXMLEntry, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCitySpecializationXMLEntry@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+273], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+274], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+275], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0

; 38   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvCitySpecializationXMLEntry@@QAE@XZ ENDP		; CvCitySpecializationXMLEntry::CvCitySpecializationXMLEntry
_TEXT	ENDS
PUBLIC	??1CvCitySpecializationXMLEntry@@UAE@XZ		; CvCitySpecializationXMLEntry::~CvCitySpecializationXMLEntry
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GCvCitySpecializationXMLEntry@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvCitySpecializationXMLEntry@@UAEPAXI@Z PROC	; CvCitySpecializationXMLEntry::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvCitySpecializationXMLEntry@@UAE@XZ	; CvCitySpecializationXMLEntry::~CvCitySpecializationXMLEntry
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvCitySpecializationXMLEntry@@UAEPAXI@Z ENDP	; CvCitySpecializationXMLEntry::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp
;	COMDAT ??1CvCitySpecializationXMLEntry@@UAE@XZ
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T229545 = -16						; size = 4
$T229544 = -12						; size = 4
$T229539 = -8						; size = 4
$T229538 = -4						; size = 4
??1CvCitySpecializationXMLEntry@@UAE@XZ PROC		; CvCitySpecializationXMLEntry::~CvCitySpecializationXMLEntry, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCitySpecializationXMLEntry@@6B@

; 42   : 	SAFE_DELETE_ARRAY(m_piFlavorValue);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	mov	DWORD PTR $T229539[ebp], ecx
	mov	edx, DWORD PTR $T229539[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T229538[ebp], eax
	mov	ecx, DWORD PTR $T229538[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T229539[ebp]
	mov	DWORD PTR [edx], 0

; 43   : 	SAFE_DELETE_ARRAY(m_piYieldTargetTimes100);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 276				; 00000114H
	mov	DWORD PTR $T229545[ebp], eax
	mov	ecx, DWORD PTR $T229545[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T229544[ebp], edx
	mov	eax, DWORD PTR $T229544[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T229545[ebp]
	mov	DWORD PTR [ecx], 0

; 44   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvCitySpecializationXMLEntry@@UAE@XZ ENDP		; CvCitySpecializationXMLEntry::~CvCitySpecializationXMLEntry
_TEXT	ENDS
PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T229656 = -48						; size = 4
$T229651 = -44						; size = 4
$T229646 = -40						; size = 4
$T229641 = -36						; size = 4
$T229636 = -32						; size = 4
$T229631 = -28						; size = 4
$T229626 = -24						; size = 4
$T229621 = -20						; size = 4
$T229616 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T229616[ebp], eax
	mov	ecx, DWORD PTR $T229616[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T229621[ebp], ecx
	mov	ecx, DWORD PTR $T229621[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T229626[ebp], edx
	mov	ecx, DWORD PTR $T229626[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	DWORD PTR $T229631[ebp], eax
	mov	ecx, DWORD PTR $T229631[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	mov	DWORD PTR $T229636[ebp], ecx
	mov	ecx, DWORD PTR $T229636[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T229641[ebp], edx
	mov	ecx, DWORD PTR $T229641[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T229646[ebp], eax
	mov	ecx, DWORD PTR $T229646[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T229651[ebp], ecx
	mov	ecx, DWORD PTR $T229651[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T229656[ebp], edx
	mov	ecx, DWORD PTR $T229656[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??_C@_0BI@ILFMGGJJ@IsOperationUnitProvider?$AA@	; `string'
PUBLIC	??_C@_0O@CNHOKCJD@MustBeCoastal?$AA@		; `string'
PUBLIC	??_C@_09OPCNIHAE@IsDefault?$AA@			; `string'
PUBLIC	??_C@_08JHJLBJAP@IsWonder?$AA@			; `string'
PUBLIC	??_C@_0CA@ODEHHJOA@CitySpecialization_TargetYields?$AA@ ; `string'
PUBLIC	??_C@_0BL@CBAGCDLA@CitySpecialization_Flavors?$AA@ ; `string'
PUBLIC	??_C@_0BH@CAIGOBOC@CitySpecializationType?$AA@	; `string'
PUBLIC	??_C@_09HJBDLJFJ@YieldType?$AA@			; `string'
PUBLIC	??_C@_07CNMHPEMB@SubType?$AA@			; `string'
EXTRN	__imp_?GetBool@Results@Database@@QAE_NPBD@Z:PROC
EXTRN	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z:PROC ; CvDatabaseUtility::SetYields
EXTRN	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z:PROC ; CvDatabaseUtility::SetFlavors
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
EXTRN	__imp_?GetText@Results@Database@@QAEPBDPBD@Z:PROC
EXTRN	__imp_?GetInt@Results@Database@@QAEHPBD@Z:PROC
EXTRN	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:PROC ; CvBaseInfo::CacheResults
;	COMDAT ??_C@_0BI@ILFMGGJJ@IsOperationUnitProvider?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0BI@ILFMGGJJ@IsOperationUnitProvider?$AA@ DB 'IsOperationUnitProvid'
	DB	'er', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CNHOKCJD@MustBeCoastal?$AA@
CONST	SEGMENT
??_C@_0O@CNHOKCJD@MustBeCoastal?$AA@ DB 'MustBeCoastal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPCNIHAE@IsDefault?$AA@
CONST	SEGMENT
??_C@_09OPCNIHAE@IsDefault?$AA@ DB 'IsDefault', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JHJLBJAP@IsWonder?$AA@
CONST	SEGMENT
??_C@_08JHJLBJAP@IsWonder?$AA@ DB 'IsWonder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@ODEHHJOA@CitySpecialization_TargetYields?$AA@
CONST	SEGMENT
??_C@_0CA@ODEHHJOA@CitySpecialization_TargetYields?$AA@ DB 'CitySpecializ'
	DB	'ation_TargetYields', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CBAGCDLA@CitySpecialization_Flavors?$AA@
CONST	SEGMENT
??_C@_0BL@CBAGCDLA@CitySpecialization_Flavors?$AA@ DB 'CitySpecialization'
	DB	'_Flavors', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CAIGOBOC@CitySpecializationType?$AA@
CONST	SEGMENT
??_C@_0BH@CAIGOBOC@CitySpecializationType?$AA@ DB 'CitySpecializationType'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09HJBDLJFJ@YieldType?$AA@
CONST	SEGMENT
??_C@_09HJBDLJFJ@YieldType?$AA@ DB 'YieldType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNMHPEMB@SubType?$AA@
CONST	SEGMENT
??_C@_07CNMHPEMB@SubType?$AA@ DB 'SubType', 00H		; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_szType$ = -8						; size = 4
_szYieldType$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvCitySpecializationXMLEntry::CacheResults, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@CacheResul

; 49   : 		return false;

	xor	al, al
	jmp	$LN3@CacheResul
$LN2@CacheResul:

; 50   : 
; 51   : 	//Basic Properties
; 52   : 	m_iSubtype = kResults.GetInt("SubType");

	push	OFFSET ??_C@_07CNMHPEMB@SubType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 53   : 
; 54   : 	//References
; 55   : 	const char* szYieldType = kResults.GetText("YieldType");

	push	OFFSET ??_C@_09HJBDLJFJ@YieldType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szYieldType$[ebp], eax

; 56   : 	if(szYieldType != NULL)

	cmp	DWORD PTR _szYieldType$[ebp], 0
	je	SHORT $LN5@CacheResul

; 57   : 	{
; 58   : 		m_eYieldType = (YieldTypes)GC.getInfoTypeForString(szYieldType);

	push	0
	mov	edx, DWORD PTR _szYieldType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], eax

; 59   : 	}
; 60   : 
; 61   : 	//Arrays
; 62   : 	const char* szType = GetType();

$LN5@CacheResul:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szType$[ebp], eax

; 63   : 	kUtility.SetFlavors(m_piFlavorValue, "CitySpecialization_Flavors", "CitySpecializationType", szType);

	push	0
	mov	edx, DWORD PTR _szType$[ebp]
	push	edx
	push	OFFSET ??_C@_0BH@CAIGOBOC@CitySpecializationType?$AA@
	push	OFFSET ??_C@_0BL@CBAGCDLA@CitySpecialization_Flavors?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 64   : 	kUtility.SetYields(m_piYieldTargetTimes100, "CitySpecialization_TargetYields", "CitySpecializationType", szType);

	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@CAIGOBOC@CitySpecializationType?$AA@
	push	OFFSET ??_C@_0CA@ODEHHJOA@CitySpecialization_TargetYields?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 276				; 00000114H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 65   : 
; 66   : 	//Booleans
; 67   : 	m_bWonder = kResults.GetBool("IsWonder");

	push	OFFSET ??_C@_08JHJLBJAP@IsWonder?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+272], al

; 68   : 	m_bDefault = kResults.GetBool("IsDefault");

	push	OFFSET ??_C@_09OPCNIHAE@IsDefault?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+273], al

; 69   : 	m_bMustBeCoastal = kResults.GetBool("MustBeCoastal");

	push	OFFSET ??_C@_0O@CNHOKCJD@MustBeCoastal?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+274], al

; 70   : 	m_bOperationUnitProvider = kResults.GetBool("IsOperationUnitProvider");

	push	OFFSET ??_C@_0BI@ILFMGGJJ@IsOperationUnitProvider?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+275], al

; 71   : 
; 72   : 	return true;

	mov	al, 1
$LN3@CacheResul:

; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvCitySpecializationXMLEntry@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvCitySpecializationXMLEntry::CacheResults
_TEXT	ENDS
PUBLIC	?GetFlavorValue@CvCitySpecializationXMLEntry@@QBEHH@Z ; CvCitySpecializationXMLEntry::GetFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?GetFlavorValue@CvCitySpecializationXMLEntry@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFlavorValue@CvCitySpecializationXMLEntry@@QBEHH@Z PROC ; CvCitySpecializationXMLEntry::GetFlavorValue, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 	FAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 79   : 	FAssertMsg(i > -1, "Index out of bounds");
; 80   : 	return m_piFlavorValue ? m_piFlavorValue[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	SHORT $LN3@GetFlavorV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetFlavorV
$LN3@GetFlavorV:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetFlavorV:
	mov	eax, DWORD PTR tv69[ebp]

; 81   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFlavorValue@CvCitySpecializationXMLEntry@@QBEHH@Z ENDP ; CvCitySpecializationXMLEntry::GetFlavorValue
_TEXT	ENDS
PUBLIC	?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ; CvCitySpecializationXMLEntry::GetYieldType
; Function compile flags: /Odtp
;	COMDAT ?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ PROC ; CvCitySpecializationXMLEntry::GetYieldType, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	return m_eYieldType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 87   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ENDP ; CvCitySpecializationXMLEntry::GetYieldType
_TEXT	ENDS
PUBLIC	?GetYieldTargetTimes100@CvCitySpecializationXMLEntry@@QBEHW4YieldTypes@@@Z ; CvCitySpecializationXMLEntry::GetYieldTargetTimes100
; Function compile flags: /Odtp
;	COMDAT ?GetYieldTargetTimes100@CvCitySpecializationXMLEntry@@QBEHW4YieldTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eYield$ = 8						; size = 4
?GetYieldTargetTimes100@CvCitySpecializationXMLEntry@@QBEHW4YieldTypes@@@Z PROC ; CvCitySpecializationXMLEntry::GetYieldTargetTimes100, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 91   : 	return m_piYieldTargetTimes100[eYield];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	mov	edx, DWORD PTR _eYield$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 92   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetYieldTargetTimes100@CvCitySpecializationXMLEntry@@QBEHW4YieldTypes@@@Z ENDP ; CvCitySpecializationXMLEntry::GetYieldTargetTimes100
_TEXT	ENDS
PUBLIC	?GetSubtype@CvCitySpecializationXMLEntry@@QBEHXZ ; CvCitySpecializationXMLEntry::GetSubtype
; Function compile flags: /Odtp
;	COMDAT ?GetSubtype@CvCitySpecializationXMLEntry@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSubtype@CvCitySpecializationXMLEntry@@QBEHXZ PROC	; CvCitySpecializationXMLEntry::GetSubtype, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 	return m_iSubtype;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 99   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSubtype@CvCitySpecializationXMLEntry@@QBEHXZ ENDP	; CvCitySpecializationXMLEntry::GetSubtype
_TEXT	ENDS
PUBLIC	?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ	; CvCitySpecializationXMLEntry::IsWonder
; Function compile flags: /Odtp
;	COMDAT ?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ PROC	; CvCitySpecializationXMLEntry::IsWonder, COMDAT
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 	return m_bWonder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+272]

; 105  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ ENDP	; CvCitySpecializationXMLEntry::IsWonder
_TEXT	ENDS
PUBLIC	?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsDefault
; Function compile flags: /Odtp
;	COMDAT ?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ PROC	; CvCitySpecializationXMLEntry::IsDefault, COMDAT
; _this$ = ecx

; 109  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 	return m_bDefault;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+273]

; 111  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ ENDP	; CvCitySpecializationXMLEntry::IsDefault
_TEXT	ENDS
PUBLIC	?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsMustBeCoastal
; Function compile flags: /Odtp
;	COMDAT ?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ PROC ; CvCitySpecializationXMLEntry::IsMustBeCoastal, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 	return m_bMustBeCoastal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+274]

; 117  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ ENDP ; CvCitySpecializationXMLEntry::IsMustBeCoastal
_TEXT	ENDS
PUBLIC	?IsOperationUnitProvider@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsOperationUnitProvider
; Function compile flags: /Odtp
;	COMDAT ?IsOperationUnitProvider@CvCitySpecializationXMLEntry@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOperationUnitProvider@CvCitySpecializationXMLEntry@@QBE_NXZ PROC ; CvCitySpecializationXMLEntry::IsOperationUnitProvider, COMDAT
; _this$ = ecx

; 121  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 	return m_bOperationUnitProvider;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+275]

; 123  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsOperationUnitProvider@CvCitySpecializationXMLEntry@@QBE_NXZ ENDP ; CvCitySpecializationXMLEntry::IsOperationUnitProvider
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
PUBLIC	?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Buy
PUBLIC	??0CvCitySpecializationXMLEntries@@QAE@XZ	; CvCitySpecializationXMLEntries::CvCitySpecializationXMLEntries
EXTRN	__CxxThrowException@8:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0CvCitySpecializationXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvCitySpecializationXMLEntries@@QAE@XZ$1
__ehfuncinfo$??0CvCitySpecializationXMLEntries@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvCitySpecializationXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ??0CvCitySpecializationXMLEntries@@QAE@XZ
_TEXT	SEGMENT
tv92 = -132						; size = 4
tv149 = -128						; size = 4
_this$ = -124						; size = 4
$T229724 = -30						; size = 1
$T229711 = -29						; size = 1
$T229707 = -28						; size = 4
$T229700 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CvCitySpecializationXMLEntries@@QAE@XZ PROC		; CvCitySpecializationXMLEntries::CvCitySpecializationXMLEntries, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvCitySpecializationXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T229724[ebp]
	mov	DWORD PTR $T229700[ebp], eax
	lea	ecx, DWORD PTR $T229711[ebp]
	mov	DWORD PTR $T229707[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv92[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 131  : #ifdef AUI_WARNING_FIXES
; 132  : 	m_CurrentIndex = 0;
; 133  : 	m_CurrentYield = NO_YIELD;
; 134  : #endif
; 135  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvCitySpecializationXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
__ehhandler$??0CvCitySpecializationXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvCitySpecializationXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvCitySpecializationXMLEntries@@QAE@XZ ENDP		; CvCitySpecializationXMLEntries::CvCitySpecializationXMLEntries
PUBLIC	??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
PUBLIC	?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Tidy
PUBLIC	?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ ; CvCitySpecializationXMLEntries::DeleteArray
PUBLIC	??1CvCitySpecializationXMLEntries@@QAE@XZ	; CvCitySpecializationXMLEntries::~CvCitySpecializationXMLEntries
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvCitySpecializationXMLEntries@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationXMLEntries@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationXMLEntries@@QAE@XZ$1
__ehfuncinfo$??1CvCitySpecializationXMLEntries@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvCitySpecializationXMLEntries@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ??1CvCitySpecializationXMLEntries@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1CvCitySpecializationXMLEntries@@QAE@XZ PROC		; CvCitySpecializationXMLEntries::~CvCitySpecializationXMLEntries, COMDAT
; _this$ = ecx

; 139  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvCitySpecializationXMLEntries@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 140  : 	DeleteArray();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ ; CvCitySpecializationXMLEntries::DeleteArray

; 141  : }

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvCitySpecializationXMLEntries@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
__unwindfunclet$??1CvCitySpecializationXMLEntries@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1CvCitySpecializationXMLEntries@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvCitySpecializationXMLEntries@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvCitySpecializationXMLEntries@@QAE@XZ ENDP		; CvCitySpecializationXMLEntries::~CvCitySpecializationXMLEntries
PUBLIC	?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries
; Function compile flags: /Odtp
;	COMDAT ?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ PROC ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries, COMDAT
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  : 	return m_paCitySpecializationEntries;

	mov	eax, DWORD PTR _this$[ebp]

; 147  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCitySpecializationEntries@CvCitySpecializationXMLEntries@@QAEAAV?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@XZ ENDP ; CvCitySpecializationXMLEntries::GetCitySpecializationEntries
_TEXT	ENDS
PUBLIC	?GetNumCitySpecializations@CvCitySpecializationXMLEntries@@QAEHXZ ; CvCitySpecializationXMLEntries::GetNumCitySpecializations
; Function compile flags: /Odtp
;	COMDAT ?GetNumCitySpecializations@CvCitySpecializationXMLEntries@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumCitySpecializations@CvCitySpecializationXMLEntries@@QAEHXZ PROC ; CvCitySpecializationXMLEntries::GetNumCitySpecializations, COMDAT
; _this$ = ecx

; 151  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 152  : 	return m_paCitySpecializationEntries.size();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 153  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumCitySpecializations@CvCitySpecializationXMLEntries@@QAEHXZ ENDP ; CvCitySpecializationXMLEntries::GetNumCitySpecializations
_TEXT	ENDS
PUBLIC	?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z ; CvCitySpecializationXMLEntries::GetEntry
; Function compile flags: /Odtp
;	COMDAT ?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z PROC ; CvCitySpecializationXMLEntries::GetEntry, COMDAT
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 	return m_paCitySpecializationEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 159  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z ENDP ; CvCitySpecializationXMLEntries::GetEntry
_TEXT	ENDS
PUBLIC	?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield
; Function compile flags: /Odtp
;	COMDAT ?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T229871 = -4						; size = 4
_eYield$ = 8						; size = 4
?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z PROC ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield, COMDAT
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 	m_CurrentYield = eYield;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eYield$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 165  : 	for(m_CurrentIndex = 0; m_CurrentIndex < (int)m_paCitySpecializationEntries.size(); m_CurrentIndex++)

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	jmp	SHORT $LN7@GetFirstSp
$LN3@GetFirstSp:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN7@GetFirstSp:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], edx
	jge	SHORT $LN2@GetFirstSp

; 166  : 	{
; 167  : 		if(m_paCitySpecializationEntries[m_CurrentIndex]->GetYieldType() == m_CurrentYield)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T229871[ebp], edx
	mov	eax, DWORD PTR $T229871[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ; CvCitySpecializationXMLEntry::GetYieldType
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+20]
	jne	SHORT $LN1@GetFirstSp

; 168  : 		{
; 169  : 			return (CitySpecializationTypes)m_CurrentIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	jmp	SHORT $LN5@GetFirstSp
$LN1@GetFirstSp:

; 170  : 		}
; 171  : 	}

	jmp	SHORT $LN3@GetFirstSp
$LN2@GetFirstSp:

; 172  : 	return NO_CITY_SPECIALIZATION;

	or	eax, -1
$LN5@GetFirstSp:

; 173  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z ENDP ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield
_TEXT	ENDS
PUBLIC	?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationXMLEntries::GetNextSpecializationForYield
; Function compile flags: /Odtp
;	COMDAT ?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T229880 = -4						; size = 4
?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ PROC ; CvCitySpecializationXMLEntries::GetNextSpecializationForYield, COMDAT
; _this$ = ecx

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 178  : #ifdef AUI_WARNING_FIXES
; 179  : 	for (m_CurrentIndex = m_CurrentIndex + 1; m_CurrentIndex < (int)m_paCitySpecializationEntries.size(); m_CurrentIndex++)
; 180  : #else
; 181  : 	for(m_CurrentIndex = m_CurrentIndex++; m_CurrentIndex < (int)m_paCitySpecializationEntries.size(); m_CurrentIndex++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
	jmp	SHORT $LN7@GetNextSpe
$LN3@GetNextSpe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN7@GetNextSpe:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], edx
	jge	SHORT $LN2@GetNextSpe

; 182  : #endif
; 183  : 	{
; 184  : 		if(m_paCitySpecializationEntries[m_CurrentIndex]->GetYieldType() == m_CurrentYield)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T229880[ebp], edx
	mov	eax, DWORD PTR $T229880[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ; CvCitySpecializationXMLEntry::GetYieldType
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+20]
	jne	SHORT $LN1@GetNextSpe

; 185  : 		{
; 186  : 			return (CitySpecializationTypes)m_CurrentIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	jmp	SHORT $LN5@GetNextSpe
$LN1@GetNextSpe:

; 187  : 		}
; 188  : 	}

	jmp	SHORT $LN3@GetNextSpe
$LN2@GetNextSpe:

; 189  : 	return NO_CITY_SPECIALIZATION;

	or	eax, -1
$LN5@GetNextSpe:

; 190  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ ENDP ; CvCitySpecializationXMLEntries::GetNextSpecializationForYield
_TEXT	ENDS
PUBLIC	?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z ; CvCitySpecializationXMLEntries::GetNumSpecializationsForYield
; Function compile flags: /Odtp
;	COMDAT ?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T229889 = -12						; size = 4
_iI$224968 = -8						; size = 4
_iRtnValue$ = -4					; size = 4
_eYield$ = 8						; size = 4
?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z PROC ; CvCitySpecializationXMLEntries::GetNumSpecializationsForYield, COMDAT
; _this$ = ecx

; 194  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 195  : 	int iRtnValue = 0;

	mov	DWORD PTR _iRtnValue$[ebp], 0

; 196  : 	for(int iI = 0; iI < (int)m_paCitySpecializationEntries.size(); iI++)

	mov	DWORD PTR _iI$224968[ebp], 0
	jmp	SHORT $LN7@GetNumSpec
$LN3@GetNumSpec:
	mov	eax, DWORD PTR _iI$224968[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$224968[ebp], eax
$LN7@GetNumSpec:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _iI$224968[ebp], eax
	jge	SHORT $LN2@GetNumSpec

; 197  : 	{
; 198  : 		if(m_paCitySpecializationEntries[iI]->GetYieldType() == eYield)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _iI$224968[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T229889[ebp], ecx
	mov	edx, DWORD PTR $T229889[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ; CvCitySpecializationXMLEntry::GetYieldType
	cmp	eax, DWORD PTR _eYield$[ebp]
	jne	SHORT $LN1@GetNumSpec

; 199  : 		{
; 200  : 			iRtnValue++;

	mov	eax, DWORD PTR _iRtnValue$[ebp]
	add	eax, 1
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN1@GetNumSpec:

; 201  : 		}
; 202  : 	}

	jmp	SHORT $LN3@GetNumSpec
$LN2@GetNumSpec:

; 203  : 
; 204  : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 205  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z ENDP ; CvCitySpecializationXMLEntries::GetNumSpecializationsForYield
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::erase
; Function compile flags: /Odtp
;	COMDAT ?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ
_TEXT	SEGMENT
tv145 = -116						; size = 4
_this$ = -112						; size = 4
$T229992 = -56						; size = 4
$T229976 = -52						; size = 4
$T230097 = -48						; size = 4
$T230096 = -44						; size = 4
$T230095 = -40						; size = 4
$T230094 = -36						; size = 4
$T230093 = -32						; size = 4
$T229960 = -28						; size = 4
$T229957 = -24						; size = 4
$T229956 = -20						; size = 4
$T229926 = -16						; size = 4
$T229902 = -12						; size = 4
$T229892 = -8						; size = 4
_it$225128 = -4						; size = 4
?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ PROC ; CvCitySpecializationXMLEntries::DeleteArray, COMDAT
; _this$ = ecx

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 	for(std::vector<CvCitySpecializationXMLEntry*>::iterator it = m_paCitySpecializationEntries.begin(); it != m_paCitySpecializationEntries.end(); ++it)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T229902[ebp], ecx
	mov	edx, DWORD PTR $T229902[ebp]
	mov	DWORD PTR _it$225128[ebp], edx
	jmp	SHORT $LN3@DeleteArra
$LN2@DeleteArra:
	mov	eax, DWORD PTR _it$225128[ebp]
	add	eax, 4
	mov	DWORD PTR _it$225128[ebp], eax
$LN3@DeleteArra:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T229926[ebp], edx
	mov	eax, DWORD PTR $T229926[ebp]
	mov	DWORD PTR $T229892[ebp], eax
	mov	ecx, DWORD PTR _it$225128[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T229892[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@DeleteArra

; 211  : 	{
; 212  : 		SAFE_DELETE(*it);

	mov	edx, DWORD PTR _it$225128[ebp]
	mov	DWORD PTR $T229960[ebp], edx
	mov	eax, DWORD PTR $T229960[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T229957[ebp], ecx
	mov	edx, DWORD PTR $T229957[ebp]
	mov	DWORD PTR $T229956[ebp], edx
	cmp	DWORD PTR $T229956[ebp], 0
	je	SHORT $LN32@DeleteArra
	push	1
	mov	eax, DWORD PTR $T229956[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T229956[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN33@DeleteArra
$LN32@DeleteArra:
	mov	DWORD PTR tv145[ebp], 0
$LN33@DeleteArra:
	mov	ecx, DWORD PTR $T229960[ebp]
	mov	DWORD PTR [ecx], 0

; 213  : 	}

	jmp	SHORT $LN2@DeleteArra
$LN1@DeleteArra:

; 214  : 
; 215  : 	m_paCitySpecializationEntries.clear();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T229976[ebp], eax
	mov	ecx, DWORD PTR $T229976[ebp]
	mov	DWORD PTR $T230094[ebp], ecx
	mov	edx, DWORD PTR $T230094[ebp]
	mov	DWORD PTR $T230093[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T229992[ebp], ecx
	mov	edx, DWORD PTR $T229992[ebp]
	mov	DWORD PTR $T230096[ebp], edx
	mov	eax, DWORD PTR $T230096[ebp]
	mov	DWORD PTR $T230095[ebp], eax
	mov	ecx, DWORD PTR $T230093[ebp]
	push	ecx
	mov	edx, DWORD PTR $T230095[ebp]
	push	edx
	lea	eax, DWORD PTR $T230097[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::erase

; 216  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteArray@CvCitySpecializationXMLEntries@@QAEXXZ ENDP ; CvCitySpecializationXMLEntries::DeleteArray
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>
PUBLIC	??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
PUBLIC	??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
PUBLIC	??0CvCitySpecializationAI@@QAE@XZ		; CvCitySpecializationAI::CvCitySpecializationAI
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0CvCitySpecializationAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvCitySpecializationAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvCitySpecializationAI@@QAE@XZ$1
__ehfuncinfo$??0CvCitySpecializationAI@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvCitySpecializationAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ??0CvCitySpecializationAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T230198 = -64						; size = 4
$T230181 = -52						; size = 4
__$EHRec$ = -12						; size = 12
??0CvCitySpecializationAI@@QAE@XZ PROC			; CvCitySpecializationAI::CvCitySpecializationAI, COMDAT
; _this$ = ecx

; 239  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvCitySpecializationAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	mov	DWORD PTR $T230181[ebp], edx
	mov	ecx, DWORD PTR $T230181[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T230198[ebp], eax
	mov	ecx, DWORD PTR $T230198[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+188], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+192], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+204], 0

; 240  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvCitySpecializationAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
__unwindfunclet$??0CvCitySpecializationAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>
__ehhandler$??0CvCitySpecializationAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvCitySpecializationAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvCitySpecializationAI@@QAE@XZ ENDP			; CvCitySpecializationAI::CvCitySpecializationAI
PUBLIC	??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
PUBLIC	??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::~CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>
PUBLIC	?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
PUBLIC	?Uninit@CvCitySpecializationAI@@QAEXXZ		; CvCitySpecializationAI::Uninit
PUBLIC	??1CvCitySpecializationAI@@QAE@XZ		; CvCitySpecializationAI::~CvCitySpecializationAI
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1CvCitySpecializationAI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$7
__ehfuncinfo$??1CvCitySpecializationAI@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CvCitySpecializationAI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ??1CvCitySpecializationAI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T230399 = -72						; size = 4
$T230329 = -68						; size = 4
$T230306 = -64						; size = 4
$T230273 = -44						; size = 4
$T230241 = -28						; size = 4
__$EHRec$ = -12						; size = 12
??1CvCitySpecializationAI@@QAE@XZ PROC			; CvCitySpecializationAI::~CvCitySpecializationAI, COMDAT
; _this$ = ecx

; 244  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvCitySpecializationAI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 245  : 	Uninit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninit@CvCitySpecializationAI@@QAEXXZ	; CvCitySpecializationAI::Uninit

; 246  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T230241[ebp], eax
	mov	ecx, DWORD PTR $T230241[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR $T230273[ebp], ecx
	mov	ecx, DWORD PTR $T230273[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR $T230399[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T230399[ebp]
	call	?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear
	mov	eax, DWORD PTR $T230399[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T230306[ebp], ecx
	mov	edx, DWORD PTR $T230399[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T230329[ebp], eax
	mov	ecx, DWORD PTR $T230329[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	edx, DWORD PTR $T230399[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	jmp	??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>
__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::~CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>
__unwindfunclet$??1CvCitySpecializationAI@@QAE@XZ$7:
	mov	ecx, DWORD PTR $T230399[ebp]
	jmp	??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
__ehhandler$??1CvCitySpecializationAI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvCitySpecializationAI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvCitySpecializationAI@@QAE@XZ ENDP			; CvCitySpecializationAI::~CvCitySpecializationAI
PUBLIC	?Reset@CvCitySpecializationAI@@QAEXXZ		; CvCitySpecializationAI::Reset
PUBLIC	?Init@CvCitySpecializationAI@@QAEXPAVCvCitySpecializationXMLEntries@@PAVCvPlayer@@@Z ; CvCitySpecializationAI::Init
; Function compile flags: /Odtp
;	COMDAT ?Init@CvCitySpecializationAI@@QAEXPAVCvCitySpecializationXMLEntries@@PAVCvPlayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pSpecializations$ = 8					; size = 4
_pPlayer$ = 12						; size = 4
?Init@CvCitySpecializationAI@@QAEXPAVCvCitySpecializationXMLEntries@@PAVCvPlayer@@@Z PROC ; CvCitySpecializationAI::Init, COMDAT
; _this$ = ecx

; 250  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 251  : 	m_pSpecializations = pSpecializations;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pSpecializations$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 252  : 	m_pPlayer = pPlayer;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pPlayer$[ebp]
	mov	DWORD PTR [edx], eax

; 253  : 
; 254  : 	Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CvCitySpecializationAI@@QAEXXZ	; CvCitySpecializationAI::Reset

; 255  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CvCitySpecializationAI@@QAEXPAVCvCitySpecializationXMLEntries@@PAVCvPlayer@@@Z ENDP ; CvCitySpecializationAI::Init
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Uninit@CvCitySpecializationAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Uninit@CvCitySpecializationAI@@QAEXXZ PROC		; CvCitySpecializationAI::Uninit, COMDAT
; _this$ = ecx

; 259  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 260  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Uninit@CvCitySpecializationAI@@QAEXXZ ENDP		; CvCitySpecializationAI::Uninit
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Reset@CvCitySpecializationAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T230473 = -16						; size = 4
_i$230466 = -12						; size = 4
$T230442 = -8						; size = 4
_i$230436 = -4						; size = 4
?Reset@CvCitySpecializationAI@@QAEXXZ PROC		; CvCitySpecializationAI::Reset, COMDAT
; _this$ = ecx

; 264  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 265  : 	m_bSpecializationsDirty = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0

; 266  : 	m_bInterruptWonders = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+192], 0

; 267  : 	m_eNextSpecializationDesired = NO_CITY_SPECIALIZATION;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], -1

; 268  : 	m_eNextWonderDesired = NO_BUILDING;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], -1

; 269  : 	m_iWonderCityID = -1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+200], -1

; 270  : 	m_iNextWonderWeight = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+204], 0

; 271  : 	m_YieldWeights.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T230442[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN11@Reset
	mov	DWORD PTR _i$230436[ebp], 0
	jmp	SHORT $LN9@Reset
$LN8@Reset:
	mov	edx, DWORD PTR _i$230436[ebp]
	add	edx, 1
	mov	DWORD PTR _i$230436[ebp], edx
$LN9@Reset:
	mov	eax, DWORD PTR $T230442[ebp]
	mov	ecx, DWORD PTR _i$230436[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN11@Reset
	jmp	SHORT $LN8@Reset
$LN11@Reset:
	mov	edx, DWORD PTR $T230442[ebp]
	mov	DWORD PTR [edx+4], 0

; 272  : 	m_ProductionSubtypeWeights.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T230473[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN21@Reset
	mov	DWORD PTR _i$230466[ebp], 0
	jmp	SHORT $LN19@Reset
$LN18@Reset:
	mov	edx, DWORD PTR _i$230466[ebp]
	add	edx, 1
	mov	DWORD PTR _i$230466[ebp], edx
$LN19@Reset:
	mov	eax, DWORD PTR $T230473[ebp]
	mov	ecx, DWORD PTR _i$230466[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN21@Reset
	jmp	SHORT $LN18@Reset
$LN21@Reset:
	mov	edx, DWORD PTR $T230473[ebp]
	mov	DWORD PTR [edx+4], 0

; 273  : 	m_iLastTurnEvaluated = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+188], 0

; 274  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@CvCitySpecializationAI@@QAEXXZ ENDP		; CvCitySpecializationAI::Reset
_TEXT	ENDS
PUBLIC	?Read@CvCitySpecializationAI@@QAEXAAVFDataStream@@@Z ; CvCitySpecializationAI::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
EXTRN	??5@YAAAVFDataStream@@AAV0@AAW4CitySpecializationTypes@@@Z:PROC ; operator>>
EXTRN	?Read@FDataStream@@IAEXAA_N@Z:PROC		; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAI@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?Read@CvCitySpecializationAI@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Read@CvCitySpecializationAI@@QAEXAAVFDataStream@@@Z PROC ; CvCitySpecializationAI::Read, COMDAT
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 279  : 	// Version number to maintain backwards compatibility
; 280  : 	uint uiVersion;
; 281  : 	kStream >> uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAI@Z		; FDataStream::Read

; 282  : 
; 283  : 	kStream >> m_bSpecializationsDirty;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 284  : 	kStream >> m_bInterruptWonders;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAA_N@Z		; FDataStream::Read

; 285  : 	kStream >> m_eNextSpecializationDesired;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??5@YAAAVFDataStream@@AAV0@AAW4CitySpecializationTypes@@@Z ; operator>>
	add	esp, 8

; 286  : 	kStream >> (int&)m_eNextWonderDesired;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 196				; 000000c4H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 287  : 	kStream >> m_iWonderCityID;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 200				; 000000c8H
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 288  : 	kStream >> m_iNextWonderWeight;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 289  : 
; 290  : 	if (uiVersion >= 2)

	cmp	DWORD PTR _uiVersion$[ebp], 2
	jb	SHORT $LN2@Read

; 291  : 	{
; 292  : 		kStream >> m_iLastTurnEvaluated;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 188				; 000000bcH
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 293  : 	}
; 294  : 	else

	jmp	SHORT $LN3@Read
$LN2@Read:

; 295  : 	{
; 296  : 		m_iLastTurnEvaluated = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+188], 0

; 297  : 		m_bSpecializationsDirty = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+8], 1
$LN3@Read:

; 298  : 	}
; 299  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CvCitySpecializationAI@@QAEXAAVFDataStream@@@Z ENDP ; CvCitySpecializationAI::Read
_TEXT	ENDS
PUBLIC	?Write@CvCitySpecializationAI@@QBEXAAVFDataStream@@@Z ; CvCitySpecializationAI::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4BuildingTypes@@@Z:PROC ; operator<<
EXTRN	??6@YAAAVFDataStream@@AAV0@ABW4CitySpecializationTypes@@@Z:PROC ; operator<<
EXTRN	?Write@FDataStream@@IAEXAB_N@Z:PROC		; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABI@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@CvCitySpecializationAI@@QBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_uiVersion$ = -4					; size = 4
_kStream$ = 8						; size = 4
?Write@CvCitySpecializationAI@@QBEXAAVFDataStream@@@Z PROC ; CvCitySpecializationAI::Write, COMDAT
; _this$ = ecx

; 303  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 304  : 	// Current version number
; 305  : 	uint uiVersion = 2;

	mov	DWORD PTR _uiVersion$[ebp], 2

; 306  : 	kStream << uiVersion;

	lea	eax, DWORD PTR _uiVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABI@Z		; FDataStream::Write

; 307  : 
; 308  : 	kStream << m_bSpecializationsDirty;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 309  : 	kStream << m_bInterruptWonders;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXAB_N@Z		; FDataStream::Write

; 310  : 	kStream << m_eNextSpecializationDesired;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	??6@YAAAVFDataStream@@AAV0@ABW4CitySpecializationTypes@@@Z ; operator<<
	add	esp, 8

; 311  : 	kStream << m_eNextWonderDesired;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 196				; 000000c4H
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	??6@YAAAVFDataStream@@AAV0@ABW4BuildingTypes@@@Z ; operator<<
	add	esp, 8

; 312  : 	kStream << m_iWonderCityID;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 313  : 	kStream << m_iNextWonderWeight;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 204				; 000000ccH
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 314  : 	kStream << m_iLastTurnEvaluated;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 188				; 000000bcH
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 315  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Write@CvCitySpecializationAI@@QBEXAAVFDataStream@@@Z ENDP ; CvCitySpecializationAI::Write
_TEXT	ENDS
PUBLIC	?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ; CvCitySpecializationAI::GetPlayer
; Function compile flags: /Odtp
;	COMDAT ?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ PROC ; CvCitySpecializationAI::GetPlayer, COMDAT
; _this$ = ecx

; 319  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 	return m_pPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 321  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ENDP ; CvCitySpecializationAI::GetPlayer
_TEXT	ENDS
PUBLIC	?GetCitySpecializations@CvCitySpecializationAI@@QAEPAVCvCitySpecializationXMLEntries@@XZ ; CvCitySpecializationAI::GetCitySpecializations
; Function compile flags: /Odtp
;	COMDAT ?GetCitySpecializations@CvCitySpecializationAI@@QAEPAVCvCitySpecializationXMLEntries@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCitySpecializations@CvCitySpecializationAI@@QAEPAVCvCitySpecializationXMLEntries@@XZ PROC ; CvCitySpecializationAI::GetCitySpecializations, COMDAT
; _this$ = ecx

; 325  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 326  : 	return m_pSpecializations;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 327  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCitySpecializations@CvCitySpecializationAI@@QAEPAVCvCitySpecializationXMLEntries@@XZ ENDP ; CvCitySpecializationAI::GetCitySpecializations
_TEXT	ENDS
PUBLIC	?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::AssignSpecializations
PUBLIC	?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::WeightSpecializations
PUBLIC	?DoTurn@CvCitySpecializationAI@@QAEXXZ		; CvCitySpecializationAI::DoTurn
EXTRN	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::nextCity
EXTRN	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z:PROC	; CvPlayer::firstCity
EXTRN	?ChooseWonder@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_N0AAH@Z:PROC ; CvWonderProductionAI::ChooseWonder
EXTRN	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ:PROC ; CvPlayer::GetWonderProductionAI
EXTRN	?getNumCities@CvPlayer@@QBEHXZ:PROC		; CvPlayer::getNumCities
EXTRN	?getGameTurn@CvGame@@QAEHXZ:PROC		; CvGame::getGameTurn
EXTRN	?isMinorCiv@CvPlayer@@QBE_NXZ:PROC		; CvPlayer::isMinorCiv
EXTRN	?isHuman@CvPlayer@@QBE_NXZ:PROC			; CvPlayer::isHuman
; Function compile flags: /Odtp
;	COMDAT ?DoTurn@CvCitySpecializationAI@@QAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T230542 = -28						; size = 4
$T230538 = -24						; size = 4
$T230534 = -20						; size = 4
$T230530 = -16						; size = 4
$T230526 = -12						; size = 4
_pLoopCity$225206 = -8					; size = 4
_iCityLoop$ = -4					; size = 4
?DoTurn@CvCitySpecializationAI@@QAEXXZ PROC		; CvCitySpecializationAI::DoTurn, COMDAT
; _this$ = ecx

; 331  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 332  : 	AI_PERF_FORMAT("AI-perf.csv", ("CvCitySpecializationAI::DoTurn, Turn %03d, %s", GC.getGame().getElapsedGameTurns(), GetPlayer()->getCivilizationShortDescription()) );
; 333  : 
; 334  : 	int iCityLoop = 0;

	mov	DWORD PTR _iCityLoop$[ebp], 0

; 335  : 
; 336  : 	// No city specializations for humans!
; 337  : 	if(m_pPlayer->isHuman())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?isHuman@CvPlayer@@QBE_NXZ		; CvPlayer::isHuman
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@DoTurn

; 338  : 	{
; 339  : 		return;

	jmp	$LN12@DoTurn
$LN11@DoTurn:

; 340  : 	}
; 341  : 
; 342  : 	// No city specializations for minor civs
; 343  : 	if(m_pPlayer->isMinorCiv())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@DoTurn

; 344  : 	{
; 345  : 		return;

	jmp	$LN12@DoTurn
$LN10@DoTurn:

; 346  : 	}
; 347  : 
; 348  : 	// No city specializations early in the game
; 349  : 	if(GC.getGame().getGameTurn() < GC.getAI_CITY_SPECIALIZATION_EARLIEST_TURN())

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T230526[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2208
	mov	DWORD PTR $T230530[ebp], edx
	mov	ecx, DWORD PTR $T230526[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	cmp	eax, DWORD PTR $T230530[ebp]
	jge	SHORT $LN9@DoTurn

; 350  : 	{
; 351  : 		return;

	jmp	$LN12@DoTurn
$LN9@DoTurn:

; 352  : 	}
; 353  : 
; 354  : 	// No city specialization if we don't have enough cities
; 355  : 	if(m_pPlayer->getNumCities() < 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	cmp	eax, 2
	jge	SHORT $LN8@DoTurn

; 356  : 	{
; 357  : 		return;

	jmp	$LN12@DoTurn
$LN8@DoTurn:

; 358  : 	}
; 359  : 
; 360  : 	// See if need to update assignments
; 361  : 	if(m_bSpecializationsDirty || (m_iLastTurnEvaluated + GC.getAI_CITY_SPECIALIZATION_REEVALUATION_INTERVAL() > GC.getGame().getGameTurn()))

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN6@DoTurn
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2212
	mov	DWORD PTR $T230534[ebp], eax
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T230538[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+188]
	add	esi, DWORD PTR $T230534[ebp]
	mov	ecx, DWORD PTR $T230538[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	cmp	esi, eax
	jle	$LN12@DoTurn
$LN6@DoTurn:

; 362  : 	{
; 363  : 		m_eNextWonderDesired = m_pPlayer->GetWonderProductionAI()->ChooseWonder(false /*bUseAsyncRandom*/, true /*bAdjustForOtherPlayers*/, m_iNextWonderWeight);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 204				; 000000ccH
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ ; CvPlayer::GetWonderProductionAI
	mov	ecx, eax
	call	?ChooseWonder@CvWonderProductionAI@@QAE?AW4BuildingTypes@@_N0AAH@Z ; CvWonderProductionAI::ChooseWonder
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+196], eax

; 364  : 		WeightSpecializations();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::WeightSpecializations

; 365  : 		AssignSpecializations();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::AssignSpecializations

; 366  : 		m_bSpecializationsDirty = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0

; 367  : 		m_iLastTurnEvaluated = GC.getGame().getGameTurn();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T230542[ebp], ecx
	mov	ecx, DWORD PTR $T230542[ebp]
	call	?getGameTurn@CvGame@@QAEHXZ		; CvGame::getGameTurn
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+188], eax

; 368  : 
; 369  : 		// Do we need to choose production again at all our cities?
; 370  : 		if(m_bInterruptWonders)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+192]
	test	ecx, ecx
	je	SHORT $LN5@DoTurn

; 371  : 		{
; 372  : 			CvCity* pLoopCity = NULL;

	mov	DWORD PTR _pLoopCity$225206[ebp], 0

; 373  : 			for(pLoopCity = m_pPlayer->firstCity(&iCityLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iCityLoop))

	push	0
	lea	edx, DWORD PTR _iCityLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$225206[ebp], eax
	jmp	SHORT $LN4@DoTurn
$LN3@DoTurn:
	push	0
	lea	ecx, DWORD PTR _iCityLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$225206[ebp], eax
$LN4@DoTurn:
	cmp	DWORD PTR _pLoopCity$225206[ebp], 0
	je	SHORT $LN5@DoTurn

; 374  : 			{
; 375  : 				if(!pLoopCity->IsBuildingUnitForOperation())

	mov	eax, DWORD PTR _pLoopCity$225206[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pLoopCity$225206[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@DoTurn

; 376  : 				{
; 377  : 					pLoopCity->AI_chooseProduction(true /*bInterruptWonders*/);

	push	1
	mov	edx, DWORD PTR _pLoopCity$225206[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLoopCity$225206[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
$LN1@DoTurn:

; 378  : 				}
; 379  : 			}

	jmp	SHORT $LN3@DoTurn
$LN5@DoTurn:

; 380  : 		}
; 381  : 
; 382  : 		// Reset this flag -- need a new high priority event before we'll interrupt again
; 383  : 		m_bInterruptWonders = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+192], 0
$LN12@DoTurn:

; 384  : 	}
; 385  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?DoTurn@CvCitySpecializationAI@@QAEXXZ ENDP		; CvCitySpecializationAI::DoTurn
_TEXT	ENDS
PUBLIC	?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z ; CvCitySpecializationAI::LogSpecializationUpdate
PUBLIC	?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z ; CvCitySpecializationAI::SetSpecializationsDirty
; Function compile flags: /Odtp
;	COMDAT ?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_eUpdateType$ = 8					; size = 4
?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z PROC ; CvCitySpecializationAI::SetSpecializationsDirty, COMDAT
; _this$ = ecx

; 389  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 390  : 	// No city specializations for minor civs
; 391  : 	if(!m_pPlayer->isMinorCiv())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?isMinorCiv@CvPlayer@@QBE_NXZ		; CvPlayer::isMinorCiv
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN6@SetSpecial

; 392  : 	{
; 393  : 		m_bSpecializationsDirty = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+8], 1

; 394  : 		LogSpecializationUpdate(eUpdateType);

	mov	eax, DWORD PTR _eUpdateType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z ; CvCitySpecializationAI::LogSpecializationUpdate

; 395  : 
; 396  : 		switch(eUpdateType)

	mov	ecx, DWORD PTR _eUpdateType$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 1
	je	SHORT $LN2@SetSpecial
	cmp	DWORD PTR tv71[ebp], 3
	je	SHORT $LN2@SetSpecial
	jmp	SHORT $LN6@SetSpecial
$LN2@SetSpecial:

; 397  : 		{
; 398  : 		case SPECIALIZATION_UPDATE_NOW_AT_WAR:
; 399  : 		case SPECIALIZATION_UPDATE_MY_CITY_CAPTURED:
; 400  : 			m_bInterruptWonders = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+192], 1
$LN6@SetSpecial:

; 401  : 			break;
; 402  : 		default:
; 403  : 			// Don't set it to false for these other cases!
; 404  : 			// We shouldn't set it to false until after the next time we've picked specializations.
; 405  : 			break;
; 406  : 		}
; 407  : 	}
; 408  : 
; 409  : 	return;
; 410  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSpecializationsDirty@CvCitySpecializationAI@@QAEXW4CitySpecializationUpdateType@@@Z ENDP ; CvCitySpecializationAI::SetSpecializationsDirty
_TEXT	ENDS
PUBLIC	?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ ; CvCitySpecializationAI::GetWonderBuildCity
EXTRN	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z:PROC	; CvPlayer::getCity
; Function compile flags: /Odtp
;	COMDAT ?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pRtnValue$ = -4					; size = 4
?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ PROC ; CvCitySpecializationAI::GetWonderBuildCity, COMDAT
; _this$ = ecx

; 414  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 415  : 	CvCity* pRtnValue = NULL;

	mov	DWORD PTR _pRtnValue$[ebp], 0

; 416  : 	if(m_iWonderCityID != -1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+200], -1
	je	SHORT $LN1@GetWonderB

; 417  : 	{
; 418  : 		pRtnValue = m_pPlayer->getCity(m_iWonderCityID);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pRtnValue$[ebp], eax
$LN1@GetWonderB:

; 419  : 	}
; 420  : 	return pRtnValue;

	mov	eax, DWORD PTR _pRtnValue$[ebp]

; 421  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ ENDP ; CvCitySpecializationAI::GetWonderBuildCity
_TEXT	ENDS
PUBLIC	?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::LogSpecializationWeights
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back
PUBLIC	?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z ; CvCitySpecializationAI::WeightProductionSubtypes
PUBLIC	??_C@_0CD@CKIOFBEO@ECONOMICAISTRATEGY_EARLY_EXPANSI@ ; `string'
PUBLIC	??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@	; `string'
PUBLIC	??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@		; `string'
PUBLIC	??_C@_0M@IKAIFEKA@FLAVOR_GOLD?$AA@		; `string'
PUBLIC	??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@		; `string'
PUBLIC	??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@	; `string'
EXTRN	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z:PROC ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
EXTRN	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ:PROC ; CvGrandStrategyAI::GetActiveGrandStrategy
EXTRN	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ:PROC ; CvPlayer::GetGrandStrategyAI
EXTRN	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z:PROC ; CvGlobals::getAIGrandStrategyInfo
EXTRN	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumAIGrandStrategyInfos
EXTRN	?GetTotalLandDisputeLevel@CvDiplomacyAI@@QAEHXZ:PROC ; CvDiplomacyAI::GetTotalLandDisputeLevel
EXTRN	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ:PROC ; CvPlayer::GetDiplomacyAI
EXTRN	?getNumTiles@CvArea@@QBEHXZ:PROC		; CvArea::getNumTiles
EXTRN	?IsUsingStrategy@CvEconomicAI@@QAE_NW4EconomicAIStrategyTypes@@@Z:PROC ; CvEconomicAI::IsUsingStrategy
EXTRN	?GetEconomicAI@CvPlayer@@QBEPAVCvEconomicAI@@XZ:PROC ; CvPlayer::GetEconomicAI
EXTRN	?GetNumUnitsWithUnitAI@CvPlayer@@QAEHW4UnitAITypes@@_N1@Z:PROC ; CvPlayer::GetNumUnitsWithUnitAI
EXTRN	?getNumUnownedTiles@CvArea@@QBEHXZ:PROC		; CvArea::getNumUnownedTiles
EXTRN	?getArea@CvMap@@QAEPAVCvArea@@H@Z:PROC		; CvMap::getArea
EXTRN	?getArea@CvCity@@QBEHXZ:PROC			; CvCity::getArea
EXTRN	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z:PROC ; CvFlavorManager::GetIndividualFlavor
EXTRN	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ:PROC ; CvPlayer::GetFlavorManager
EXTRN	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ:PROC	; CvPlayer::getCapitalCity
;	COMDAT ??_C@_0CD@CKIOFBEO@ECONOMICAISTRATEGY_EARLY_EXPANSI@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
CONST	SEGMENT
??_C@_0CD@CKIOFBEO@ECONOMICAISTRATEGY_EARLY_EXPANSI@ DB 'ECONOMICAISTRATE'
	DB	'GY_EARLY_EXPANSION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@
CONST	SEGMENT
??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@ DB 'FLAVOR_SPACESHIP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@
CONST	SEGMENT
??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@ DB 'FLAVOR_SCIENCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IKAIFEKA@FLAVOR_GOLD?$AA@
CONST	SEGMENT
??_C@_0M@IKAIFEKA@FLAVOR_GOLD?$AA@ DB 'FLAVOR_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@
CONST	SEGMENT
??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@ DB 'FLAVOR_WONDER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@
CONST	SEGMENT
??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@ DB 'FLAVOR_EXPANSION', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
CONST	ENDS
;	COMDAT ?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_this$ = -232						; size = 4
_weightedElem$230763 = -220				; size = 8
_weightedElem$230742 = -204				; size = 8
_weightedElem$230721 = -188				; size = 8
_weightedElem$230700 = -172				; size = 8
_weightedElem$230679 = -156				; size = 8
$T230655 = -148						; size = 4
$T230651 = -144						; size = 4
$T230647 = -140						; size = 4
$T230643 = -136						; size = 4
$T230639 = -132						; size = 4
$T230635 = -128						; size = 4
$T230631 = -124						; size = 4
$T230627 = -120						; size = 4
$T230623 = -116						; size = 4
$T230619 = -112						; size = 4
$T230615 = -108						; size = 4
_i$230608 = -104					; size = 4
$T230584 = -100						; size = 4
_i$230578 = -96						; size = 4
$T230553 = -92						; size = 4
$T230552 = -88						; size = 4
$T230551 = -84						; size = 4
$T230550 = -80						; size = 4
$T230549 = -76						; size = 4
_grandStrategy$225271 = -72				; size = 4
_iGrandStrategyLoop$225267 = -68			; size = 4
_iFlavorWonder$225237 = -64				; size = 4
_pArea$225256 = -60					; size = 4
_iFlavorExpansion$225236 = -56				; size = 4
_iFlavorScience$225239 = -52				; size = 4
_iFlavorSpaceship$225240 = -48				; size = 4
_iNumCities$225258 = -44				; size = 4
_eStrategy$225260 = -40					; size = 4
_iLandDisputeLevel$225266 = -36				; size = 4
_iNumUnownedTiles$225257 = -32				; size = 4
_iFlavorGold$225238 = -28				; size = 4
_iNumSettlers$225259 = -24				; size = 4
_iFoodYieldWeight$ = -20				; size = 4
_iGoldYieldWeight$ = -16				; size = 4
_iProductionYieldWeight$ = -12				; size = 4
_iScienceYieldWeight$ = -8				; size = 4
_iGeneralEconomicWeight$ = -4				; size = 4
?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ PROC ; CvCitySpecializationAI::WeightSpecializations, COMDAT
; _this$ = ecx

; 427  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 428  : 	int iFoodYieldWeight = 0;

	mov	DWORD PTR _iFoodYieldWeight$[ebp], 0

; 429  : 	int iProductionYieldWeight = 0;

	mov	DWORD PTR _iProductionYieldWeight$[ebp], 0

; 430  : 	int iGoldYieldWeight = 0;

	mov	DWORD PTR _iGoldYieldWeight$[ebp], 0

; 431  : 	int iScienceYieldWeight = 0;

	mov	DWORD PTR _iScienceYieldWeight$[ebp], 0

; 432  : 	int iGeneralEconomicWeight = 0;

	mov	DWORD PTR _iGeneralEconomicWeight$[ebp], 0

; 433  : 
; 434  : 	// Clear old weights
; 435  : 	m_YieldWeights.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T230584[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN25@WeightSpec
	mov	DWORD PTR _i$230578[ebp], 0
	jmp	SHORT $LN23@WeightSpec
$LN22@WeightSpec:
	mov	edx, DWORD PTR _i$230578[ebp]
	add	edx, 1
	mov	DWORD PTR _i$230578[ebp], edx
$LN23@WeightSpec:
	mov	eax, DWORD PTR $T230584[ebp]
	mov	ecx, DWORD PTR _i$230578[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN25@WeightSpec
	jmp	SHORT $LN22@WeightSpec
$LN25@WeightSpec:
	mov	edx, DWORD PTR $T230584[ebp]
	mov	DWORD PTR [edx+4], 0

; 436  : 	m_ProductionSubtypeWeights.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T230615[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN35@WeightSpec
	mov	DWORD PTR _i$230608[ebp], 0
	jmp	SHORT $LN33@WeightSpec
$LN32@WeightSpec:
	mov	edx, DWORD PTR _i$230608[ebp]
	add	edx, 1
	mov	DWORD PTR _i$230608[ebp], edx
$LN33@WeightSpec:
	mov	eax, DWORD PTR $T230615[ebp]
	mov	ecx, DWORD PTR _i$230608[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN35@WeightSpec
	jmp	SHORT $LN32@WeightSpec
$LN35@WeightSpec:
	mov	edx, DWORD PTR $T230615[ebp]
	mov	DWORD PTR [edx+4], 0

; 437  : 
; 438  : 	// Must have a capital to do any specialization
; 439  : 	if(m_pPlayer->getCapitalCity() != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	test	eax, eax
	je	$LN15@WeightSpec

; 440  : 	{
; 441  : 		int iFlavorExpansion = 0;

	mov	DWORD PTR _iFlavorExpansion$225236[ebp], 0

; 442  : 		int iFlavorWonder = 0;

	mov	DWORD PTR _iFlavorWonder$225237[ebp], 0

; 443  : 		int iFlavorGold = 0;

	mov	DWORD PTR _iFlavorGold$225238[ebp], 0

; 444  : 		int iFlavorScience = 0;

	mov	DWORD PTR _iFlavorScience$225239[ebp], 0

; 445  : 		int iFlavorSpaceship = 0;

	mov	DWORD PTR _iFlavorSpaceship$225240[ebp], 0

; 446  : 
; 447  : 		iFlavorExpansion = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_EXPANSION"));

	push	0
	push	OFFSET ??_C@_0BB@PHIOLDJK@FLAVOR_EXPANSION?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor
	mov	DWORD PTR _iFlavorExpansion$225236[ebp], eax

; 448  : 		if(iFlavorExpansion < 0) iFlavorExpansion = 0;

	cmp	DWORD PTR _iFlavorExpansion$225236[ebp], 0
	jge	SHORT $LN13@WeightSpec
	mov	DWORD PTR _iFlavorExpansion$225236[ebp], 0
$LN13@WeightSpec:

; 449  : 		iFlavorWonder = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_WONDER"));

	push	0
	push	OFFSET ??_C@_0O@CBMDBMFP@FLAVOR_WONDER?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor
	mov	DWORD PTR _iFlavorWonder$225237[ebp], eax

; 450  : 		if(iFlavorWonder < 0) iFlavorWonder = 0;

	cmp	DWORD PTR _iFlavorWonder$225237[ebp], 0
	jge	SHORT $LN12@WeightSpec
	mov	DWORD PTR _iFlavorWonder$225237[ebp], 0
$LN12@WeightSpec:

; 451  : 		iFlavorGold = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_GOLD"));

	push	0
	push	OFFSET ??_C@_0M@IKAIFEKA@FLAVOR_GOLD?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor
	mov	DWORD PTR _iFlavorGold$225238[ebp], eax

; 452  : 		if(iFlavorGold < 0) iFlavorGold = 0;

	cmp	DWORD PTR _iFlavorGold$225238[ebp], 0
	jge	SHORT $LN11@WeightSpec
	mov	DWORD PTR _iFlavorGold$225238[ebp], 0
$LN11@WeightSpec:

; 453  : 		iFlavorScience = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_SCIENCE"));

	push	0
	push	OFFSET ??_C@_0P@NPJBAHPJ@FLAVOR_SCIENCE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor
	mov	DWORD PTR _iFlavorScience$225239[ebp], eax

; 454  : 		if(iFlavorScience < 0) iFlavorScience = 0;

	cmp	DWORD PTR _iFlavorScience$225239[ebp], 0
	jge	SHORT $LN10@WeightSpec
	mov	DWORD PTR _iFlavorScience$225239[ebp], 0
$LN10@WeightSpec:

; 455  : 		iFlavorSpaceship = m_pPlayer->GetFlavorManager()->GetIndividualFlavor((FlavorTypes)GC.getInfoTypeForString("FLAVOR_SPACESHIP"));

	push	0
	push	OFFSET ??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetFlavorManager@CvPlayer@@QBEPAVCvFlavorManager@@XZ ; CvPlayer::GetFlavorManager
	mov	ecx, eax
	call	?GetIndividualFlavor@CvFlavorManager@@QAEHW4FlavorTypes@@@Z ; CvFlavorManager::GetIndividualFlavor
	mov	DWORD PTR _iFlavorSpaceship$225240[ebp], eax

; 456  : 		if(iFlavorSpaceship < 0) iFlavorSpaceship = 0;

	cmp	DWORD PTR _iFlavorSpaceship$225240[ebp], 0
	jge	SHORT $LN9@WeightSpec
	mov	DWORD PTR _iFlavorSpaceship$225240[ebp], 0
$LN9@WeightSpec:

; 457  : 
; 458  : 		// COMPUTE NEW WEIGHTS
; 459  : 
; 460  : 		//   Food
; 461  : 		CvArea* pArea = GC.getMap().getArea(m_pPlayer->getCapitalCity()->getArea());

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T230619[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	ecx, eax
	call	?getArea@CvCity@@QBEHXZ			; CvCity::getArea
	push	eax
	mov	ecx, DWORD PTR $T230619[ebp]
	call	?getArea@CvMap@@QAEPAVCvArea@@H@Z	; CvMap::getArea
	mov	DWORD PTR _pArea$225256[ebp], eax

; 462  : 		int iNumUnownedTiles = pArea->getNumUnownedTiles();

	mov	ecx, DWORD PTR _pArea$225256[ebp]
	call	?getNumUnownedTiles@CvArea@@QBEHXZ	; CvArea::getNumUnownedTiles
	mov	DWORD PTR _iNumUnownedTiles$225257[ebp], eax

; 463  : 		int iNumCities = m_pPlayer->getNumCities();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	mov	DWORD PTR _iNumCities$225258[ebp], eax

; 464  : 		int iNumSettlers = m_pPlayer->GetNumUnitsWithUnitAI(UNITAI_SETTLE, true);

	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetNumUnitsWithUnitAI@CvPlayer@@QAEHW4UnitAITypes@@_N1@Z ; CvPlayer::GetNumUnitsWithUnitAI
	mov	DWORD PTR _iNumSettlers$225259[ebp], eax

; 465  : 		EconomicAIStrategyTypes eStrategy = (EconomicAIStrategyTypes) GC.getInfoTypeForString("ECONOMICAISTRATEGY_EARLY_EXPANSION");

	push	0
	push	OFFSET ??_C@_0CD@CKIOFBEO@ECONOMICAISTRATEGY_EARLY_EXPANSI@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eStrategy$225260[ebp], eax

; 466  : 		if(eStrategy != NO_ECONOMICAISTRATEGY && m_pPlayer->GetEconomicAI()->IsUsingStrategy(eStrategy))

	cmp	DWORD PTR _eStrategy$225260[ebp], -1
	je	SHORT $LN8@WeightSpec
	mov	ecx, DWORD PTR _eStrategy$225260[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetEconomicAI@CvPlayer@@QBEPAVCvEconomicAI@@XZ ; CvPlayer::GetEconomicAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvEconomicAI@@QAE_NW4EconomicAIStrategyTypes@@@Z ; CvEconomicAI::IsUsingStrategy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@WeightSpec

; 467  : 		{
; 468  : 			iFoodYieldWeight += GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_EARLY_EXPANSION() /* 500 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2236
	mov	DWORD PTR $T230623[ebp], ecx
	mov	edx, DWORD PTR _iFoodYieldWeight$[ebp]
	add	edx, DWORD PTR $T230623[ebp]
	mov	DWORD PTR _iFoodYieldWeight$[ebp], edx
$LN8@WeightSpec:

; 469  : 		}
; 470  : 		iFoodYieldWeight += iFlavorExpansion * GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_FLAVOR_EXPANSION() /* 5 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2220
	mov	DWORD PTR $T230627[ebp], eax
	mov	ecx, DWORD PTR _iFlavorExpansion$225236[ebp]
	imul	ecx, DWORD PTR $T230627[ebp]
	add	ecx, DWORD PTR _iFoodYieldWeight$[ebp]
	mov	DWORD PTR _iFoodYieldWeight$[ebp], ecx

; 471  : 		iFoodYieldWeight += (iNumUnownedTiles * 100) / pArea->getNumTiles() * GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_PERCENT_CONTINENT_UNOWNED() /* 5 */;;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2224
	mov	DWORD PTR $T230631[ebp], edx
	mov	esi, DWORD PTR _iNumUnownedTiles$225257[ebp]
	imul	esi, 100				; 00000064H
	mov	ecx, DWORD PTR _pArea$225256[ebp]
	call	?getNumTiles@CvArea@@QBEHXZ		; CvArea::getNumTiles
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	imul	eax, DWORD PTR $T230631[ebp]
	add	eax, DWORD PTR _iFoodYieldWeight$[ebp]
	mov	DWORD PTR _iFoodYieldWeight$[ebp], eax

; 472  : 		iFoodYieldWeight += iNumCities * GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_CITIES() /* -50 */;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2228
	mov	DWORD PTR $T230635[ebp], edx
	mov	eax, DWORD PTR _iNumCities$225258[ebp]
	imul	eax, DWORD PTR $T230635[ebp]
	add	eax, DWORD PTR _iFoodYieldWeight$[ebp]
	mov	DWORD PTR _iFoodYieldWeight$[ebp], eax

; 473  : 		iFoodYieldWeight += iNumSettlers * GC.getAI_CITY_SPECIALIZATION_FOOD_WEIGHT_NUM_SETTLERS() /* -40 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2232
	mov	DWORD PTR $T230639[ebp], ecx
	mov	edx, DWORD PTR _iNumSettlers$225259[ebp]
	imul	edx, DWORD PTR $T230639[ebp]
	add	edx, DWORD PTR _iFoodYieldWeight$[ebp]
	mov	DWORD PTR _iFoodYieldWeight$[ebp], edx

; 474  : 		if((iNumCities + iNumSettlers) == 1)

	mov	eax, DWORD PTR _iNumCities$225258[ebp]
	add	eax, DWORD PTR _iNumSettlers$225259[ebp]
	cmp	eax, 1
	jne	SHORT $LN7@WeightSpec

; 475  : 		{
; 476  : 			iFoodYieldWeight *= 3;   // Really want to get up over 1 city

	mov	ecx, DWORD PTR _iFoodYieldWeight$[ebp]
	imul	ecx, 3
	mov	DWORD PTR _iFoodYieldWeight$[ebp], ecx
$LN7@WeightSpec:

; 477  : 		}
; 478  : 		if(iFoodYieldWeight < 0) iFoodYieldWeight = 0;

	cmp	DWORD PTR _iFoodYieldWeight$[ebp], 0
	jge	SHORT $LN6@WeightSpec
	mov	DWORD PTR _iFoodYieldWeight$[ebp], 0
$LN6@WeightSpec:

; 479  : 
; 480  : 		//   Production
; 481  : 		iProductionYieldWeight = WeightProductionSubtypes(iFlavorWonder, iFlavorSpaceship);

	mov	edx, DWORD PTR _iFlavorSpaceship$225240[ebp]
	push	edx
	mov	eax, DWORD PTR _iFlavorWonder$225237[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z ; CvCitySpecializationAI::WeightProductionSubtypes
	mov	DWORD PTR _iProductionYieldWeight$[ebp], eax

; 482  : 
; 483  : 		//   Trade
; 484  : 		int iLandDisputeLevel = m_pPlayer->GetDiplomacyAI()->GetTotalLandDisputeLevel();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetTotalLandDisputeLevel@CvDiplomacyAI@@QAEHXZ ; CvDiplomacyAI::GetTotalLandDisputeLevel
	mov	DWORD PTR _iLandDisputeLevel$225266[ebp], eax

; 485  : 		iGoldYieldWeight += iFlavorGold * GC.getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_FLAVOR_GOLD() /* 20 */;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2288
	mov	DWORD PTR $T230643[ebp], edx
	mov	eax, DWORD PTR _iFlavorGold$225238[ebp]
	imul	eax, DWORD PTR $T230643[ebp]
	add	eax, DWORD PTR _iGoldYieldWeight$[ebp]
	mov	DWORD PTR _iGoldYieldWeight$[ebp], eax

; 486  : 		iGoldYieldWeight += iLandDisputeLevel * GC.getAI_CITY_SPECIALIZATION_GOLD_WEIGHT_LAND_DISPUTE() /* 10 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2292
	mov	DWORD PTR $T230647[ebp], ecx
	mov	edx, DWORD PTR _iLandDisputeLevel$225266[ebp]
	imul	edx, DWORD PTR $T230647[ebp]
	add	edx, DWORD PTR _iGoldYieldWeight$[ebp]
	mov	DWORD PTR _iGoldYieldWeight$[ebp], edx

; 487  : 
; 488  : 		//   Science
; 489  : 		iScienceYieldWeight += iFlavorScience * GC.getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SCIENCE() /* 20 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2296
	mov	DWORD PTR $T230651[ebp], eax
	mov	ecx, DWORD PTR _iFlavorScience$225239[ebp]
	imul	ecx, DWORD PTR $T230651[ebp]
	add	ecx, DWORD PTR _iScienceYieldWeight$[ebp]
	mov	DWORD PTR _iScienceYieldWeight$[ebp], ecx

; 490  : 		iScienceYieldWeight += iFlavorSpaceship * GC.getAI_CITY_SPECIALIZATION_SCIENCE_WEIGHT_FLAVOR_SPACESHIP() /* 10 */;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2300
	mov	DWORD PTR $T230655[ebp], edx
	mov	eax, DWORD PTR _iFlavorSpaceship$225240[ebp]
	imul	eax, DWORD PTR $T230655[ebp]
	add	eax, DWORD PTR _iScienceYieldWeight$[ebp]
	mov	DWORD PTR _iScienceYieldWeight$[ebp], eax

; 491  : 
; 492  : 		//   General Economics
; 493  : 		iGeneralEconomicWeight = GC.getAI_CITY_SPECIALIZATION_GENERAL_ECONOMIC_WEIGHT() /* 200 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2216
	mov	DWORD PTR _iGeneralEconomicWeight$[ebp], ecx

; 494  : 
; 495  : 		//   Add in any contribution from the current grand strategy
; 496  : #ifdef AUI_WARNING_FIXES
; 497  : 		for (uint iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)
; 498  : #else
; 499  : 		for(int iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)

	mov	DWORD PTR _iGrandStrategyLoop$225267[ebp], 0
	jmp	SHORT $LN5@WeightSpec
$LN4@WeightSpec:
	mov	edx, DWORD PTR _iGrandStrategyLoop$225267[ebp]
	add	edx, 1
	mov	DWORD PTR _iGrandStrategyLoop$225267[ebp], edx
$LN5@WeightSpec:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	cmp	DWORD PTR _iGrandStrategyLoop$225267[ebp], eax
	jge	SHORT $LN3@WeightSpec

; 500  : #endif
; 501  : 		{
; 502  : 			CvAIGrandStrategyXMLEntry* grandStrategy = GC.getAIGrandStrategyInfo((AIGrandStrategyTypes)iGrandStrategyLoop);

	mov	eax, DWORD PTR _iGrandStrategyLoop$225267[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo
	mov	DWORD PTR _grandStrategy$225271[ebp], eax

; 503  : 			if(grandStrategy)

	cmp	DWORD PTR _grandStrategy$225271[ebp], 0
	je	SHORT $LN2@WeightSpec

; 504  : 			{
; 505  : #ifdef AUI_WARNING_FIXES
; 506  : 				if(iGrandStrategyLoop == (uint)m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy())
; 507  : #else
; 508  : 				if(iGrandStrategyLoop == m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	DWORD PTR _iGrandStrategyLoop$225267[ebp], eax
	jne	SHORT $LN2@WeightSpec

; 509  : #endif
; 510  : 				{
; 511  : 					iFoodYieldWeight +=	grandStrategy->GetSpecializationBoost(YIELD_FOOD);

	push	0
	mov	ecx, DWORD PTR _grandStrategy$225271[ebp]
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	eax, DWORD PTR _iFoodYieldWeight$[ebp]
	mov	DWORD PTR _iFoodYieldWeight$[ebp], eax

; 512  : 					iGoldYieldWeight += grandStrategy->GetSpecializationBoost(YIELD_GOLD);

	push	2
	mov	ecx, DWORD PTR _grandStrategy$225271[ebp]
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	eax, DWORD PTR _iGoldYieldWeight$[ebp]
	mov	DWORD PTR _iGoldYieldWeight$[ebp], eax

; 513  : 					iScienceYieldWeight += grandStrategy->GetSpecializationBoost(YIELD_SCIENCE);

	push	3
	mov	ecx, DWORD PTR _grandStrategy$225271[ebp]
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	eax, DWORD PTR _iScienceYieldWeight$[ebp]
	mov	DWORD PTR _iScienceYieldWeight$[ebp], eax
$LN2@WeightSpec:

; 514  : 				}
; 515  : 			}
; 516  : 		}

	jmp	SHORT $LN4@WeightSpec
$LN3@WeightSpec:

; 517  : 
; 518  : 		// Add weights to our weighted vector
; 519  : 		m_YieldWeights.push_back(YIELD_FOOD, iFoodYieldWeight);

	mov	DWORD PTR $T230549[ebp], 0
	mov	DWORD PTR _weightedElem$230679[ebp], 0
	mov	DWORD PTR _weightedElem$230679[ebp+4], 0
	mov	edx, DWORD PTR $T230549[ebp]
	mov	DWORD PTR _weightedElem$230679[ebp], edx
	mov	eax, DWORD PTR _iFoodYieldWeight$[ebp]
	mov	DWORD PTR _weightedElem$230679[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$230679[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back

; 520  : 		m_YieldWeights.push_back(YIELD_PRODUCTION, iProductionYieldWeight);

	mov	DWORD PTR $T230550[ebp], 1
	mov	DWORD PTR _weightedElem$230700[ebp], 0
	mov	DWORD PTR _weightedElem$230700[ebp+4], 0
	mov	edx, DWORD PTR $T230550[ebp]
	mov	DWORD PTR _weightedElem$230700[ebp], edx
	mov	eax, DWORD PTR _iProductionYieldWeight$[ebp]
	mov	DWORD PTR _weightedElem$230700[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$230700[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back

; 521  : 		m_YieldWeights.push_back(YIELD_GOLD, iGoldYieldWeight);

	mov	DWORD PTR $T230551[ebp], 2
	mov	DWORD PTR _weightedElem$230721[ebp], 0
	mov	DWORD PTR _weightedElem$230721[ebp+4], 0
	mov	edx, DWORD PTR $T230551[ebp]
	mov	DWORD PTR _weightedElem$230721[ebp], edx
	mov	eax, DWORD PTR _iGoldYieldWeight$[ebp]
	mov	DWORD PTR _weightedElem$230721[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$230721[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back

; 522  : 		m_YieldWeights.push_back(YIELD_SCIENCE, iScienceYieldWeight);

	mov	DWORD PTR $T230552[ebp], 3
	mov	DWORD PTR _weightedElem$230742[ebp], 0
	mov	DWORD PTR _weightedElem$230742[ebp+4], 0
	mov	edx, DWORD PTR $T230552[ebp]
	mov	DWORD PTR _weightedElem$230742[ebp], edx
	mov	eax, DWORD PTR _iScienceYieldWeight$[ebp]
	mov	DWORD PTR _weightedElem$230742[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$230742[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back

; 523  : 		m_YieldWeights.push_back(NO_YIELD, iGeneralEconomicWeight);

	mov	DWORD PTR $T230553[ebp], -1
	mov	DWORD PTR _weightedElem$230763[ebp], 0
	mov	DWORD PTR _weightedElem$230763[ebp+4], 0
	mov	edx, DWORD PTR $T230553[ebp]
	mov	DWORD PTR _weightedElem$230763[ebp], edx
	mov	eax, DWORD PTR _iGeneralEconomicWeight$[ebp]
	mov	DWORD PTR _weightedElem$230763[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$230763[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back

; 524  : 
; 525  : 		// Log results
; 526  : 		LogSpecializationWeights();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::LogSpecializationWeights
$LN15@WeightSpec:

; 527  : 	}
; 528  : 
; 529  : 	return;
; 530  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?WeightSpecializations@CvCitySpecializationAI@@AAEXXZ ENDP ; CvCitySpecializationAI::WeightSpecializations
_TEXT	ENDS
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back
PUBLIC	?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ ; CvCitySpecializationAI::CanBuildSpaceshipParts
PUBLIC	??_C@_0CG@NDHAKJJN@MILITARYAISTRATEGY_ENOUGH_NAVAL_@ ; `string'
PUBLIC	??_C@_0CN@NADDHBK@MILITARYAISTRATEGY_NEED_NAVAL_UN@ ; `string'
PUBLIC	??_C@_0CE@CPIEOHHN@MILITARYAISTRATEGY_NEED_NAVAL_UN@ ; `string'
PUBLIC	??_C@_0CJ@ECLOIKB@MILITARYAISTRATEGY_ENOUGH_MILITA@ ; `string'
PUBLIC	??_C@_0CL@CKCIKBIK@MILITARYAISTRATEGY_EMPIRE_DEFENS@ ; `string'
PUBLIC	??_C@_0CC@KNPAEDG@MILITARYAISTRATEGY_EMPIRE_DEFENS@ ; `string'
PUBLIC	??_C@_0CE@MNJNOLKD@MILITARYAISTRATEGY_WAR_MOBILIZAT@ ; `string'
PUBLIC	??_C@_0CE@HFBDFGBB@AICITYSTRATEGY_CAPITAL_UNDER_THR@ ; `string'
PUBLIC	??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@		; `string'
EXTRN	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z:PROC ; CvAIGrandStrategyXMLEntry::GetFlavorValue
EXTRN	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z:PROC ; CvMilitaryAI::IsUsingStrategy
EXTRN	?IsUsingCityStrategy@CvCityStrategyAI@@QAE_NW4AICityStrategyTypes@@@Z:PROC ; CvCityStrategyAI::IsUsingCityStrategy
EXTRN	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ:PROC ; CvCity::GetCityStrategyAI
EXTRN	?GetNumberCivsAtWarWith@CvMilitaryAI@@QBEHXZ:PROC ; CvMilitaryAI::GetNumberCivsAtWarWith
EXTRN	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ:PROC ; CvPlayer::GetMilitaryAI
EXTRN	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z:PROC ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
EXTRN	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z:PROC ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0CG@NDHAKJJN@MILITARYAISTRATEGY_ENOUGH_NAVAL_@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
CONST	SEGMENT
??_C@_0CG@NDHAKJJN@MILITARYAISTRATEGY_ENOUGH_NAVAL_@ DB 'MILITARYAISTRATE'
	DB	'GY_ENOUGH_NAVAL_UNITS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NADDHBK@MILITARYAISTRATEGY_NEED_NAVAL_UN@
CONST	SEGMENT
??_C@_0CN@NADDHBK@MILITARYAISTRATEGY_NEED_NAVAL_UN@ DB 'MILITARYAISTRATEG'
	DB	'Y_NEED_NAVAL_UNITS_CRITICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@CPIEOHHN@MILITARYAISTRATEGY_NEED_NAVAL_UN@
CONST	SEGMENT
??_C@_0CE@CPIEOHHN@MILITARYAISTRATEGY_NEED_NAVAL_UN@ DB 'MILITARYAISTRATE'
	DB	'GY_NEED_NAVAL_UNITS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@ECLOIKB@MILITARYAISTRATEGY_ENOUGH_MILITA@
CONST	SEGMENT
??_C@_0CJ@ECLOIKB@MILITARYAISTRATEGY_ENOUGH_MILITA@ DB 'MILITARYAISTRATEG'
	DB	'Y_ENOUGH_MILITARY_UNITS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CKCIKBIK@MILITARYAISTRATEGY_EMPIRE_DEFENS@
CONST	SEGMENT
??_C@_0CL@CKCIKBIK@MILITARYAISTRATEGY_EMPIRE_DEFENS@ DB 'MILITARYAISTRATE'
	DB	'GY_EMPIRE_DEFENSE_CRITICAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KNPAEDG@MILITARYAISTRATEGY_EMPIRE_DEFENS@
CONST	SEGMENT
??_C@_0CC@KNPAEDG@MILITARYAISTRATEGY_EMPIRE_DEFENS@ DB 'MILITARYAISTRATEG'
	DB	'Y_EMPIRE_DEFENSE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MNJNOLKD@MILITARYAISTRATEGY_WAR_MOBILIZAT@
CONST	SEGMENT
??_C@_0CE@MNJNOLKD@MILITARYAISTRATEGY_WAR_MOBILIZAT@ DB 'MILITARYAISTRATE'
	DB	'GY_WAR_MOBILIZATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HFBDFGBB@AICITYSTRATEGY_CAPITAL_UNDER_THR@
CONST	SEGMENT
??_C@_0CE@HFBDFGBB@AICITYSTRATEGY_CAPITAL_UNDER_THR@ DB 'AICITYSTRATEGY_C'
	DB	'APITAL_UNDER_THREAT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@
CONST	SEGMENT
??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@ DB 'FLAVOR_OFFENSE', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
CONST	ENDS
;	COMDAT ?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z
_TEXT	SEGMENT
tv265 = -296						; size = 4
tv346 = -292						; size = 4
_this$ = -288						; size = 4
_weightedElem$230977 = -244				; size = 8
$T230939 = -236						; size = 4
_weightedElem$230935 = -200				; size = 8
_weightedElem$230901 = -184				; size = 8
_weightedElem$230883 = -168				; size = 8
_weightedElem$230862 = -152				; size = 8
$T230841 = -144						; size = 4
$T230835 = -140						; size = 4
$T230826 = -136						; size = 4
$T230819 = -132						; size = 4
$T230815 = -128						; size = 4
$T230811 = -124						; size = 4
$T230807 = -120						; size = 4
$T230803 = -116						; size = 4
$T230799 = -112						; size = 4
$T230795 = -108						; size = 4
$T230791 = -104						; size = 4
$T230787 = -100						; size = 4
$T230783 = -96						; size = 4
$T230779 = -92						; size = 4
$T230775 = -88						; size = 4
$T230771 = -84						; size = 4
$T230770 = -80						; size = 4
$T230769 = -76						; size = 4
$T230768 = -72						; size = 4
$T230767 = -68						; size = 4
$T230766 = -64						; size = 4
_grandStrategy$225337 = -60				; size = 4
_iGrandStrategyLoop$225333 = -56			; size = 4
_pCapital$ = -52					; size = 4
_iSpaceshipWeight$ = -48				; size = 4
_iMilitaryTrainingWeight$ = -44				; size = 4
_iEmergencyUnitWeight$ = -40				; size = 4
_iFlavorOffense$ = -36					; size = 4
_iUnitsRequested$ = -32					; size = 4
_bCriticalDefenseOn$ = -25				; size = 1
_eCityStrategy$ = -24					; size = 4
_iWonderFlavorWeight$ = -20				; size = 4
_eStrategy$ = -16					; size = 4
_iWonderWeight$ = -12					; size = 4
_iWeightOfWonders$ = -8					; size = 4
_iSeaWeight$ = -4					; size = 4
_iFlavorWonder$ = 8					; size = 4
_iFlavorSpaceship$ = 12					; size = 4
?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z PROC ; CvCitySpecializationAI::WeightProductionSubtypes, COMDAT
; _this$ = ecx

; 534  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	mov	DWORD PTR _this$[ebp], ecx

; 535  : 	bool bCriticalDefenseOn = false;

	mov	BYTE PTR _bCriticalDefenseOn$[ebp], 0

; 536  : 
; 537  : 	int iMilitaryTrainingWeight = 0;

	mov	DWORD PTR _iMilitaryTrainingWeight$[ebp], 0

; 538  : 	int iEmergencyUnitWeight = 0;

	mov	DWORD PTR _iEmergencyUnitWeight$[ebp], 0

; 539  : 	int iSeaWeight = 0;

	mov	DWORD PTR _iSeaWeight$[ebp], 0

; 540  : 	int iWonderWeight = 0;

	mov	DWORD PTR _iWonderWeight$[ebp], 0

; 541  : 	int iSpaceshipWeight = 0;

	mov	DWORD PTR _iSpaceshipWeight$[ebp], 0

; 542  : 
; 543  : 	int iFlavorOffense = 0;

	mov	DWORD PTR _iFlavorOffense$[ebp], 0

; 544  : 	iFlavorOffense = m_pPlayer->GetGrandStrategyAI()->GetPersonalityAndGrandStrategy((FlavorTypes)GC.getInfoTypeForString("FLAVOR_OFFENSE"));

	push	0
	push	OFFSET ??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetPersonalityAndGrandStrategy@CvGrandStrategyAI@@QAEHW4FlavorTypes@@@Z ; CvGrandStrategyAI::GetPersonalityAndGrandStrategy
	mov	DWORD PTR _iFlavorOffense$[ebp], eax

; 545  : 
; 546  : 	int iUnitsRequested = m_pPlayer->GetNumUnitsNeededToBeBuilt();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+88]
	call	eax
	mov	DWORD PTR _iUnitsRequested$[ebp], eax

; 547  : 
; 548  : 	// LONG-TERM MILITARY BUILD-UP
; 549  : 	iMilitaryTrainingWeight += (iFlavorOffense * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_OFFENSE()) /* 10 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2280
	mov	DWORD PTR $T230775[ebp], ecx
	mov	edx, DWORD PTR _iFlavorOffense$[ebp]
	imul	edx, DWORD PTR $T230775[ebp]
	add	edx, DWORD PTR _iMilitaryTrainingWeight$[ebp]
	mov	DWORD PTR _iMilitaryTrainingWeight$[ebp], edx

; 550  : 	iMilitaryTrainingWeight += (m_pPlayer->GetDiplomacyAI()->GetPersonalityMajorCivApproachBias(MAJOR_CIV_APPROACH_WAR) * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_TRAINING_PER_PERSONALITY() /* 10 */);

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2284
	mov	DWORD PTR $T230779[ebp], eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetDiplomacyAI@CvPlayer@@QBEPAVCvDiplomacyAI@@XZ ; CvPlayer::GetDiplomacyAI
	mov	ecx, eax
	call	?GetPersonalityMajorCivApproachBias@CvDiplomacyAI@@QBEHW4MajorCivApproachTypes@@@Z ; CvDiplomacyAI::GetPersonalityMajorCivApproachBias
	imul	eax, DWORD PTR $T230779[ebp]
	add	eax, DWORD PTR _iMilitaryTrainingWeight$[ebp]
	mov	DWORD PTR _iMilitaryTrainingWeight$[ebp], eax

; 551  : 
; 552  : 	// EMERGENCY UNITS
; 553  : 	iEmergencyUnitWeight += iUnitsRequested * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_OPERATIONAL_UNITS_REQUESTED() /* 10 */;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2240
	mov	DWORD PTR $T230783[ebp], edx
	mov	eax, DWORD PTR _iUnitsRequested$[ebp]
	imul	eax, DWORD PTR $T230783[ebp]
	add	eax, DWORD PTR _iEmergencyUnitWeight$[ebp]
	mov	DWORD PTR _iEmergencyUnitWeight$[ebp], eax

; 554  : 	iEmergencyUnitWeight += m_pPlayer->GetMilitaryAI()->GetNumberCivsAtWarWith() * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CIVS_AT_WAR_WITH() /* 100 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2244
	mov	DWORD PTR $T230787[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?GetNumberCivsAtWarWith@CvMilitaryAI@@QBEHXZ ; CvMilitaryAI::GetNumberCivsAtWarWith
	imul	eax, DWORD PTR $T230787[ebp]
	add	eax, DWORD PTR _iEmergencyUnitWeight$[ebp]
	mov	DWORD PTR _iEmergencyUnitWeight$[ebp], eax

; 555  : 
; 556  : 	// Is our capital under threat?
; 557  : 	AICityStrategyTypes eCityStrategy = (AICityStrategyTypes) GC.getInfoTypeForString("AICITYSTRATEGY_CAPITAL_UNDER_THREAT");

	push	0
	push	OFFSET ??_C@_0CE@HFBDFGBB@AICITYSTRATEGY_CAPITAL_UNDER_THR@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eCityStrategy$[ebp], eax

; 558  : 	CvCity* pCapital;
; 559  : 	pCapital = m_pPlayer->getCapitalCity();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getCapitalCity@CvPlayer@@QAEPAVCvCity@@XZ ; CvPlayer::getCapitalCity
	mov	DWORD PTR _pCapital$[ebp], eax

; 560  : 	if(pCapital && eCityStrategy != NO_AICITYSTRATEGY && pCapital->GetCityStrategyAI()->IsUsingCityStrategy(eCityStrategy))

	cmp	DWORD PTR _pCapital$[ebp], 0
	je	SHORT $LN19@WeightProd
	cmp	DWORD PTR _eCityStrategy$[ebp], -1
	je	SHORT $LN19@WeightProd
	mov	ecx, DWORD PTR _eCityStrategy$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCapital$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?IsUsingCityStrategy@CvCityStrategyAI@@QAE_NW4AICityStrategyTypes@@@Z ; CvCityStrategyAI::IsUsingCityStrategy
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN19@WeightProd

; 561  : 	{
; 562  : 		iEmergencyUnitWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_CAPITAL_THREAT() /* 50 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2260
	mov	DWORD PTR $T230791[ebp], eax
	mov	ecx, DWORD PTR _iEmergencyUnitWeight$[ebp]
	add	ecx, DWORD PTR $T230791[ebp]
	mov	DWORD PTR _iEmergencyUnitWeight$[ebp], ecx
$LN19@WeightProd:

; 563  : 	}
; 564  : 
; 565  : 	// Add in weights depending on what the military AI is up to
; 566  : 	MilitaryAIStrategyTypes eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_WAR_MOBILIZATION");

	push	0
	push	OFFSET ??_C@_0CE@MNJNOLKD@MILITARYAISTRATEGY_WAR_MOBILIZAT@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eStrategy$[ebp], eax

; 567  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	DWORD PTR _eStrategy$[ebp], -1
	je	SHORT $LN18@WeightProd
	mov	edx, DWORD PTR _eStrategy$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN18@WeightProd

; 568  : 	{
; 569  : 		iMilitaryTrainingWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_WAR_MOBILIZATION() /* 150 */;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2248
	mov	DWORD PTR $T230795[ebp], edx
	mov	eax, DWORD PTR _iMilitaryTrainingWeight$[ebp]
	add	eax, DWORD PTR $T230795[ebp]
	mov	DWORD PTR _iMilitaryTrainingWeight$[ebp], eax
$LN18@WeightProd:

; 570  : 	}
; 571  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_EMPIRE_DEFENSE");

	push	0
	push	OFFSET ??_C@_0CC@KNPAEDG@MILITARYAISTRATEGY_EMPIRE_DEFENS@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eStrategy$[ebp], eax

; 572  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	DWORD PTR _eStrategy$[ebp], -1
	je	SHORT $LN17@WeightProd
	mov	ecx, DWORD PTR _eStrategy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@WeightProd

; 573  : 	{
; 574  : 		iEmergencyUnitWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE() /* 150 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2252
	mov	DWORD PTR $T230799[ebp], ecx
	mov	edx, DWORD PTR _iEmergencyUnitWeight$[ebp]
	add	edx, DWORD PTR $T230799[ebp]
	mov	DWORD PTR _iEmergencyUnitWeight$[ebp], edx
$LN17@WeightProd:

; 575  : 	}
; 576  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_EMPIRE_DEFENSE_CRITICAL");

	push	0
	push	OFFSET ??_C@_0CL@CKCIKBIK@MILITARYAISTRATEGY_EMPIRE_DEFENS@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eStrategy$[ebp], eax

; 577  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	DWORD PTR _eStrategy$[ebp], -1
	je	SHORT $LN16@WeightProd
	mov	eax, DWORD PTR _eStrategy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN16@WeightProd

; 578  : 	{
; 579  : 		bCriticalDefenseOn = true;

	mov	BYTE PTR _bCriticalDefenseOn$[ebp], 1

; 580  : 		iEmergencyUnitWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_EMPIRE_DEFENSE_CRITICAL() /* 1000 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2256
	mov	DWORD PTR $T230803[ebp], eax
	mov	ecx, DWORD PTR _iEmergencyUnitWeight$[ebp]
	add	ecx, DWORD PTR $T230803[ebp]
	mov	DWORD PTR _iEmergencyUnitWeight$[ebp], ecx
$LN16@WeightProd:

; 581  : 	}
; 582  : 
; 583  : 	// Override all this if have too many units!
; 584  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_ENOUGH_MILITARY_UNITS");

	push	0
	push	OFFSET ??_C@_0CJ@ECLOIKB@MILITARYAISTRATEGY_ENOUGH_MILITA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eStrategy$[ebp], eax

; 585  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	DWORD PTR _eStrategy$[ebp], -1
	je	SHORT $LN15@WeightProd
	mov	edx, DWORD PTR _eStrategy$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@WeightProd

; 586  : 	{
; 587  : 		iMilitaryTrainingWeight = 0;

	mov	DWORD PTR _iMilitaryTrainingWeight$[ebp], 0

; 588  : 		iEmergencyUnitWeight = 0;

	mov	DWORD PTR _iEmergencyUnitWeight$[ebp], 0
$LN15@WeightProd:

; 589  : 	}
; 590  : 
; 591  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_NEED_NAVAL_UNITS");

	push	0
	push	OFFSET ??_C@_0CE@CPIEOHHN@MILITARYAISTRATEGY_NEED_NAVAL_UN@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eStrategy$[ebp], eax

; 592  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	DWORD PTR _eStrategy$[ebp], -1
	je	SHORT $LN14@WeightProd
	mov	edx, DWORD PTR _eStrategy$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@WeightProd

; 593  : 	{
; 594  : 		iSeaWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS() /* 50 */;

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2264
	mov	DWORD PTR $T230807[ebp], edx
	mov	eax, DWORD PTR _iSeaWeight$[ebp]
	add	eax, DWORD PTR $T230807[ebp]
	mov	DWORD PTR _iSeaWeight$[ebp], eax
$LN14@WeightProd:

; 595  : 	}
; 596  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_NEED_NAVAL_UNITS_CRITICAL");

	push	0
	push	OFFSET ??_C@_0CN@NADDHBK@MILITARYAISTRATEGY_NEED_NAVAL_UN@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eStrategy$[ebp], eax

; 597  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	DWORD PTR _eStrategy$[ebp], -1
	je	SHORT $LN13@WeightProd
	mov	ecx, DWORD PTR _eStrategy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@WeightProd

; 598  : 	{
; 599  : 		iSeaWeight += GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEED_NAVAL_UNITS_CRITICAL() /* 250 */;

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2268
	mov	DWORD PTR $T230811[ebp], ecx
	mov	edx, DWORD PTR _iSeaWeight$[ebp]
	add	edx, DWORD PTR $T230811[ebp]
	mov	DWORD PTR _iSeaWeight$[ebp], edx
$LN13@WeightProd:

; 600  : 	}
; 601  : 	eStrategy = (MilitaryAIStrategyTypes) GC.getInfoTypeForString("MILITARYAISTRATEGY_ENOUGH_NAVAL_UNITS");

	push	0
	push	OFFSET ??_C@_0CG@NDHAKJJN@MILITARYAISTRATEGY_ENOUGH_NAVAL_@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _eStrategy$[ebp], eax

; 602  : 	if(eStrategy != NO_MILITARYAISTRATEGY && m_pPlayer->GetMilitaryAI()->IsUsingStrategy(eStrategy))

	cmp	DWORD PTR _eStrategy$[ebp], -1
	je	SHORT $LN12@WeightProd
	mov	eax, DWORD PTR _eStrategy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetMilitaryAI@CvPlayer@@QBEPAVCvMilitaryAI@@XZ ; CvPlayer::GetMilitaryAI
	mov	ecx, eax
	call	?IsUsingStrategy@CvMilitaryAI@@QAE_NW4MilitaryAIStrategyTypes@@@Z ; CvMilitaryAI::IsUsingStrategy
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN12@WeightProd

; 603  : 	{
; 604  : 		iSeaWeight = 0;

	mov	DWORD PTR _iSeaWeight$[ebp], 0
$LN12@WeightProd:

; 605  : 	}
; 606  : 
; 607  : 	// Wonder is MIN between weight of wonders available to build and value from flavors (but not less than zero)
; 608  : 	int iWonderFlavorWeight = iFlavorWonder * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_WONDER() /* 200 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2272
	mov	DWORD PTR $T230815[ebp], eax
	mov	ecx, DWORD PTR _iFlavorWonder$[ebp]
	imul	ecx, DWORD PTR $T230815[ebp]
	mov	DWORD PTR _iWonderFlavorWeight$[ebp], ecx

; 609  : 	int iWeightOfWonders = (int)(m_iNextWonderWeight * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_NEXT_WONDER()); /* 0.2 */

	movss	xmm0, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8044
	movss	DWORD PTR $T230819[ebp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+204]
	mulss	xmm0, DWORD PTR $T230819[ebp]
	cvttss2si eax, xmm0
	mov	DWORD PTR _iWeightOfWonders$[ebp], eax

; 610  : 	iWonderWeight = min(iWonderFlavorWeight, iWeightOfWonders);

	mov	ecx, DWORD PTR _iWeightOfWonders$[ebp]
	cmp	ecx, DWORD PTR _iWonderFlavorWeight$[ebp]
	jge	SHORT $LN48@WeightProd
	lea	edx, DWORD PTR _iWeightOfWonders$[ebp]
	mov	DWORD PTR tv346[ebp], edx
	jmp	SHORT $LN49@WeightProd
$LN48@WeightProd:
	lea	eax, DWORD PTR _iWonderFlavorWeight$[ebp]
	mov	DWORD PTR tv346[ebp], eax
$LN49@WeightProd:
	mov	ecx, DWORD PTR tv346[ebp]
	mov	DWORD PTR $T230826[ebp], ecx
	mov	edx, DWORD PTR $T230826[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _iWonderWeight$[ebp], eax

; 611  : 	iWonderWeight = max(iWonderWeight, 0);

	mov	DWORD PTR $T230766[ebp], 0
	mov	ecx, DWORD PTR _iWonderWeight$[ebp]
	cmp	ecx, DWORD PTR $T230766[ebp]
	jge	SHORT $LN52@WeightProd
	lea	edx, DWORD PTR $T230766[ebp]
	mov	DWORD PTR tv265[ebp], edx
	jmp	SHORT $LN53@WeightProd
$LN52@WeightProd:
	lea	eax, DWORD PTR _iWonderWeight$[ebp]
	mov	DWORD PTR tv265[ebp], eax
$LN53@WeightProd:
	mov	ecx, DWORD PTR tv265[ebp]
	mov	DWORD PTR $T230835[ebp], ecx
	mov	edx, DWORD PTR $T230835[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _iWonderWeight$[ebp], eax

; 612  : 
; 613  : 	// One-half of normal weight if critical defense is on
; 614  : 	if(bCriticalDefenseOn)

	movzx	ecx, BYTE PTR _bCriticalDefenseOn$[ebp]
	test	ecx, ecx
	je	SHORT $LN11@WeightProd

; 615  : 	{
; 616  : 		iWonderWeight /= 2;

	mov	eax, DWORD PTR _iWonderWeight$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iWonderWeight$[ebp], eax
$LN11@WeightProd:

; 617  : 	}
; 618  : 
; 619  : 	if(CanBuildSpaceshipParts())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ ; CvCitySpecializationAI::CanBuildSpaceshipParts
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN10@WeightProd

; 620  : 	{
; 621  : 		iSpaceshipWeight += iFlavorSpaceship * GC.getAI_CITY_SPECIALIZATION_PRODUCTION_WEIGHT_FLAVOR_SPACESHIP() /* 5 */;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2276
	mov	DWORD PTR $T230841[ebp], eax
	mov	ecx, DWORD PTR _iFlavorSpaceship$[ebp]
	imul	ecx, DWORD PTR $T230841[ebp]
	add	ecx, DWORD PTR _iSpaceshipWeight$[ebp]
	mov	DWORD PTR _iSpaceshipWeight$[ebp], ecx
$LN10@WeightProd:

; 622  : 	}
; 623  : 
; 624  : #ifdef AUI_WARNING_FIXES
; 625  : 	for (uint iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)
; 626  : #else
; 627  : 	for(int iGrandStrategyLoop = 0; iGrandStrategyLoop < GC.getNumAIGrandStrategyInfos(); iGrandStrategyLoop++)

	mov	DWORD PTR _iGrandStrategyLoop$225333[ebp], 0
	jmp	SHORT $LN9@WeightProd
$LN8@WeightProd:
	mov	edx, DWORD PTR _iGrandStrategyLoop$225333[ebp]
	add	edx, 1
	mov	DWORD PTR _iGrandStrategyLoop$225333[ebp], edx
$LN9@WeightProd:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumAIGrandStrategyInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumAIGrandStrategyInfos
	cmp	DWORD PTR _iGrandStrategyLoop$225333[ebp], eax
	jge	$LN7@WeightProd

; 628  : #endif
; 629  : 	{
; 630  : 		CvAIGrandStrategyXMLEntry* grandStrategy = GC.getAIGrandStrategyInfo((AIGrandStrategyTypes)iGrandStrategyLoop);

	mov	eax, DWORD PTR _iGrandStrategyLoop$225333[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo
	mov	DWORD PTR _grandStrategy$225337[ebp], eax

; 631  : 		if(grandStrategy)

	cmp	DWORD PTR _grandStrategy$225337[ebp], 0
	je	$LN1@WeightProd

; 632  : 		{
; 633  : #ifdef AUI_WARNING_FIXES
; 634  : 			if (iGrandStrategyLoop == (uint)m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy())
; 635  : #else
; 636  : 			if(iGrandStrategyLoop == m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	cmp	DWORD PTR _iGrandStrategyLoop$225333[ebp], eax
	jne	SHORT $LN1@WeightProd

; 637  : #endif
; 638  : 			{
; 639  : 				if(grandStrategy->GetSpecializationBoost(YIELD_PRODUCTION) > 0)

	push	1
	mov	ecx, DWORD PTR _grandStrategy$225337[ebp]
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	test	eax, eax
	jle	SHORT $LN1@WeightProd

; 640  : 				{
; 641  : 					if(grandStrategy->GetFlavorValue((FlavorTypes)GC.getInfoTypeForString("FLAVOR_OFFENSE")) > 0)

	push	0
	push	OFFSET ??_C@_0P@ELMNBNJP@FLAVOR_OFFENSE?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _grandStrategy$225337[ebp]
	call	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorValue
	test	eax, eax
	jle	SHORT $LN3@WeightProd

; 642  : 					{
; 643  : 						iMilitaryTrainingWeight += grandStrategy->GetSpecializationBoost(YIELD_PRODUCTION);

	push	1
	mov	ecx, DWORD PTR _grandStrategy$225337[ebp]
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	eax, DWORD PTR _iMilitaryTrainingWeight$[ebp]
	mov	DWORD PTR _iMilitaryTrainingWeight$[ebp], eax
	jmp	SHORT $LN1@WeightProd
$LN3@WeightProd:

; 644  : 					}
; 645  : 					else if(grandStrategy->GetFlavorValue((FlavorTypes)GC.getInfoTypeForString("FLAVOR_SPACESHIP")) > 0)

	push	0
	push	OFFSET ??_C@_0BB@EDNPBEHK@FLAVOR_SPACESHIP?$AA@
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _grandStrategy$225337[ebp]
	call	?GetFlavorValue@CvAIGrandStrategyXMLEntry@@QBEHH@Z ; CvAIGrandStrategyXMLEntry::GetFlavorValue
	test	eax, eax
	jle	SHORT $LN1@WeightProd

; 646  : 					{
; 647  : 						iSpaceshipWeight += grandStrategy->GetSpecializationBoost(YIELD_PRODUCTION);

	push	1
	mov	ecx, DWORD PTR _grandStrategy$225337[ebp]
	call	?GetSpecializationBoost@CvAIGrandStrategyXMLEntry@@QBEHW4YieldTypes@@@Z ; CvAIGrandStrategyXMLEntry::GetSpecializationBoost
	add	eax, DWORD PTR _iSpaceshipWeight$[ebp]
	mov	DWORD PTR _iSpaceshipWeight$[ebp], eax
$LN1@WeightProd:

; 648  : 					}
; 649  : 				}
; 650  : 			}
; 651  : 		}
; 652  : 	}

	jmp	$LN8@WeightProd
$LN7@WeightProd:

; 653  : 
; 654  : 	// Add weights to our weighted vector
; 655  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_MILITARY_TRAINING, iMilitaryTrainingWeight);

	mov	DWORD PTR $T230767[ebp], 0
	mov	DWORD PTR _weightedElem$230862[ebp], 0
	mov	DWORD PTR _weightedElem$230862[ebp+4], 0
	mov	edx, DWORD PTR $T230767[ebp]
	mov	DWORD PTR _weightedElem$230862[ebp], edx
	mov	eax, DWORD PTR _iMilitaryTrainingWeight$[ebp]
	mov	DWORD PTR _weightedElem$230862[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$230862[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back

; 656  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_EMERGENCY_UNITS, iEmergencyUnitWeight);

	mov	DWORD PTR $T230768[ebp], 1
	mov	DWORD PTR _weightedElem$230883[ebp], 0
	mov	DWORD PTR _weightedElem$230883[ebp+4], 0
	mov	edx, DWORD PTR $T230768[ebp]
	mov	DWORD PTR _weightedElem$230883[ebp], edx
	mov	eax, DWORD PTR _iEmergencyUnitWeight$[ebp]
	mov	DWORD PTR _weightedElem$230883[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$230883[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back

; 657  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_MILITARY_NAVAL, iSeaWeight);

	mov	DWORD PTR $T230769[ebp], 2
	mov	DWORD PTR _weightedElem$230901[ebp], 0
	mov	DWORD PTR _weightedElem$230901[ebp+4], 0
	mov	edx, DWORD PTR $T230769[ebp]
	mov	DWORD PTR _weightedElem$230901[ebp], edx
	mov	eax, DWORD PTR _iSeaWeight$[ebp]
	mov	DWORD PTR _weightedElem$230901[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$230901[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back

; 658  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_WONDER, iWonderWeight);

	mov	DWORD PTR $T230770[ebp], 3
	mov	edx, DWORD PTR _iWonderWeight$[ebp]
	mov	DWORD PTR $T230939[ebp], edx
	mov	DWORD PTR _weightedElem$230935[ebp], 0
	mov	DWORD PTR _weightedElem$230935[ebp+4], 0
	mov	eax, DWORD PTR $T230770[ebp]
	mov	DWORD PTR _weightedElem$230935[ebp], eax
	mov	ecx, DWORD PTR $T230939[ebp]
	mov	DWORD PTR _weightedElem$230935[ebp+4], ecx
	lea	edx, DWORD PTR _weightedElem$230935[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back

; 659  : 	m_ProductionSubtypeWeights.push_back(PRODUCTION_SPECIALIZATION_SPACESHIP, iSpaceshipWeight);

	mov	DWORD PTR $T230771[ebp], 4
	mov	DWORD PTR _weightedElem$230977[ebp], 0
	mov	DWORD PTR _weightedElem$230977[ebp+4], 0
	mov	eax, DWORD PTR $T230771[ebp]
	mov	DWORD PTR _weightedElem$230977[ebp], eax
	mov	ecx, DWORD PTR _iSpaceshipWeight$[ebp]
	mov	DWORD PTR _weightedElem$230977[ebp+4], ecx
	lea	edx, DWORD PTR _weightedElem$230977[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back

; 660  : 
; 661  : 	return iMilitaryTrainingWeight + iEmergencyUnitWeight + iSeaWeight + iWonderWeight + iSpaceshipWeight;

	mov	eax, DWORD PTR _iMilitaryTrainingWeight$[ebp]
	add	eax, DWORD PTR _iEmergencyUnitWeight$[ebp]
	add	eax, DWORD PTR _iSeaWeight$[ebp]
	add	eax, DWORD PTR _iWonderWeight$[ebp]
	add	eax, DWORD PTR _iSpaceshipWeight$[ebp]

; 662  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?WeightProductionSubtypes@CvCitySpecializationAI@@AAEHHH@Z ENDP ; CvCitySpecializationAI::WeightProductionSubtypes
_TEXT	ENDS
PUBLIC	??1?$CvWeightedVector@H$03$00@@QAE@XZ		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
PUBLIC	??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >
PUBLIC	??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::~list<CitySpecializationData,std::allocator<CitySpecializationData> >
PUBLIC	?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::erase
PUBLIC	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
PUBLIC	?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ	; CvWeightedVector<int,4,1>::SortItems
PUBLIC	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
PUBLIC	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
PUBLIC	?FindBestSites@CvCitySpecializationAI@@AAEXXZ	; CvCitySpecializationAI::FindBestSites
PUBLIC	?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy
PUBLIC	?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ; CvCitySpecializationAI::LogNextSpecialization
PUBLIC	?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z ; CvCitySpecializationAI::LogCity
PUBLIC	?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Insert
PUBLIC	?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z ; CvCitySpecializationAI::AdjustValueBasedOnBuildings
PUBLIC	?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z ; CvCitySpecializationAI::PlotValueForSpecificYield
PUBLIC	?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z ; CvCitySpecializationAI::PlotValueForScience
PUBLIC	?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase
PUBLIC	??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
PUBLIC	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment
PUBLIC	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
PUBLIC	?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::SelectSpecializations
PUBLIC	?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetWonderSpecialization
PUBLIC	?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear
PUBLIC	??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::list<CitySpecializationData,std::allocator<CitySpecializationData> >
PUBLIC	__$ArrayPad$
EXTRN	?isCoastal@CvCity@@QBE_NH@Z:PROC		; CvCity::isCoastal
EXTRN	?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z:PROC ; CvGlobals::getCitySpecializationInfo
EXTRN	?plot@CvCity@@QBEPAVCvPlot@@XZ:PROC		; CvCity::plot
EXTRN	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z:PROC ; CvCityStrategyAI::SetSpecialization
EXTRN	?IsPuppet@CvCity@@QBE_NXZ:PROC			; CvCity::IsPuppet
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$11
__ehfuncinfo$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_this$ = -808						; size = 4
$T232431 = -764						; size = 4
$T232422 = -760						; size = 4
$T232417 = -756						; size = 4
$T232384 = -752						; size = 4
$T232375 = -748						; size = 4
$T232304 = -728						; size = 4
$T232265 = -724						; size = 4
$T232211 = -720						; size = 4
$T232193 = -716						; size = 4
$T232184 = -712						; size = 4
$T232173 = -708						; size = 4
$T232119 = -704						; size = 4
$T232101 = -700						; size = 4
$T232092 = -696						; size = 4
$T231961 = -668						; size = 4
$T231943 = -664						; size = 4
$T231934 = -660						; size = 4
$T231917 = -656						; size = 4
_weightedElem$231897 = -644				; size = 8
$T231838 = -636						; size = 4
$T231820 = -632						; size = 4
$T231811 = -628						; size = 4
$T231732 = -608						; size = 4
$T231723 = -604						; size = 4
$T231674 = -600						; size = 4
$T231656 = -596						; size = 4
$T231647 = -592						; size = 4
$T231580 = -588						; size = 4
$T231571 = -584						; size = 4
$T231547 = -580						; size = 4
$T231556 = -576						; size = 4
$T231555 = -572						; size = 4
$T231534 = -568						; size = 4
$T231445 = -548						; size = 4
$T231435 = -544						; size = 4
$T231434 = -540						; size = 4
$T231432 = -536						; size = 4
$T231420 = -532						; size = 4
$T231411 = -528						; size = 4
$T231400 = -524						; size = 4
$T231390 = -520						; size = 4
$T231389 = -516						; size = 4
$T231305 = -496						; size = 4
$T231295 = -492						; size = 4
$T231294 = -488						; size = 4
$T231293 = -484						; size = 4
$T231280 = -480						; size = 4
$T231271 = -476						; size = 4
$T231260 = -472						; size = 4
$T231250 = -468						; size = 4
$T231249 = -464						; size = 4
$T231165 = -444						; size = 4
$T231155 = -440						; size = 4
$T231154 = -436						; size = 4
$T231153 = -432						; size = 4
$T231140 = -428						; size = 4
$T231131 = -424						; size = 4
$T231120 = -420						; size = 4
$T231110 = -416						; size = 4
$T231026 = -388						; size = 4
$T231025 = -384						; size = 4
$T231024 = -380						; size = 4
$T231023 = -376						; size = 4
$T231022 = -372						; size = 4
$T231021 = -368						; size = 4
$T231020 = -364						; size = 4
$T231019 = -360						; size = 4
$T231018 = -356						; size = 4
$T231017 = -352						; size = 4
$T231016 = -348						; size = 4
$T231015 = -344						; size = 4
$T231014 = -340						; size = 4
$T231013 = -336						; size = 4
$T231012 = -332						; size = 4
$T231011 = -328						; size = 4
$T231010 = -324						; size = 4
$T231009 = -320						; size = 4
$T231008 = -316						; size = 4
$T231007 = -312						; size = 4
$T231006 = -308						; size = 4
$T231005 = -304						; size = 4
$T231004 = -300						; size = 4
$T231003 = -296						; size = 4
$T231002 = -292						; size = 4
$T231001 = -288						; size = 4
$T231000 = -284						; size = 4
$T230999 = -280						; size = 4
$T230998 = -276						; size = 4
$T230997 = -272						; size = 4
$T230996 = -268						; size = 4
$T230995 = -264						; size = 4
$T230994 = -260						; size = 4
$T230993 = -256						; size = 4
$T230992 = -252						; size = 4
$T230991 = -248						; size = 4
$T230990 = -244						; size = 4
$T230989 = -240						; size = 4
$T230988 = -236						; size = 4
$T230987 = -232						; size = 4
$T230986 = -228						; size = 4
$T230985 = -224						; size = 4
_pCity$226225 = -220					; size = 4
_pCity$226221 = -216					; size = 4
_iCityValue$226210 = -212				; size = 4
_eYield$226199 = -208					; size = 4
_bCoastal$226200 = -201					; size = 1
_pkCitySpecializationEntry$226197 = -200		; size = 4
_iBestValue$226202 = -196				; size = 4
_eType$226196 = -192					; size = 4
_eYield$226186 = -188					; size = 4
_eType$226185 = -184					; size = 4
_eMostImprovedYield$226178 = -180			; size = 4
_iImprovementWithNewCity$226171 = -176			; size = 4
_bFoundIt$226174 = -169					; size = 1
_iBestDelta$226153 = -168				; size = 16
_iCurrentDelta$226152 = -152				; size = 4
_yieldImprovements$226167 = -148			; size = 48
__$ArrayPad$ = -100					; size = 4
_eType$226145 = -96					; size = 4
_bAllGeneral$ = -89					; size = 1
_eWonderSpecialiation$ = -88				; size = 4
_cityIter$ = -84					; size = 4
_cityData$ = -80					; size = 24
_citiesWithoutSpecialization$ = -56			; size = 12
_iterEnd$ = -44						; size = 4
_iI$ = -40						; size = 4
_cityIterEnd$ = -36					; size = 4
_eSpecialization$ = -32					; size = 4
_pLoopCity$ = -28					; size = 4
_it$ = -24						; size = 4
_bestCity$ = -20					; size = 4
_iLoop$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ PROC ; CvCitySpecializationAI::AssignSpecializations, COMDAT
; _this$ = ecx

; 666  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 796				; 0000031cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 667  : 	int iI;
; 668  : 	CitySpecializationTypes eSpecialization;
; 669  : 	CitySpecializationData cityData;
; 670  : 	list<CitySpecializationData> citiesWithoutSpecialization;

	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	call	??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::list<CitySpecializationData,std::allocator<CitySpecializationData> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 671  : 	list<CitySpecializationTypes>::iterator it;

	mov	DWORD PTR _it$[ebp], 0

; 672  : 	list<CitySpecializationTypes>::iterator iterEnd;

	mov	DWORD PTR _iterEnd$[ebp], 0

; 673  : 	list<CitySpecializationData>::iterator cityIter;

	mov	DWORD PTR _cityIter$[ebp], 0

; 674  : 	list<CitySpecializationData>::iterator cityIterEnd;

	mov	DWORD PTR _cityIterEnd$[ebp], 0

; 675  : 	list<CitySpecializationData>::iterator bestCity;

	mov	DWORD PTR _bestCity$[ebp], 0

; 676  : 
; 677  : 	m_eNextSpecializationDesired = NO_CITY_SPECIALIZATION;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 678  : 	citiesWithoutSpecialization.clear();

	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	call	?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear

; 679  : 
; 680  : 	CitySpecializationTypes eWonderSpecialiation = GetWonderSpecialization();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetWonderSpecialization
	mov	DWORD PTR _eWonderSpecialiation$[ebp], eax

; 681  : 
; 682  : 	// Find specializations needed (including for the next city we build)
; 683  : 	SelectSpecializations();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::SelectSpecializations

; 684  : 
; 685  : 	// OBVIOUS ASSIGNMENTS: Loop through our cities making obvious assignments
; 686  : 	CvCity* pLoopCity;
; 687  : 	int iLoop;
; 688  : 	for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN63@AssignSpec
$LN62@AssignSpec:
	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN63@AssignSpec:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	$LN315@AssignSpec

; 689  : 	{
; 690  : 		if(pLoopCity->IsPuppet())

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?IsPuppet@CvCity@@QBE_NXZ		; CvCity::IsPuppet
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN60@AssignSpec

; 691  : 		{
; 692  : 			pLoopCity->GetCityStrategyAI()->SetSpecialization(GetEconomicDefaultSpecialization());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	push	eax
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 693  : 			LogSpecializationAssignment(pLoopCity, GetEconomicDefaultSpecialization(), true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	push	eax
	mov	eax, DWORD PTR _pLoopCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 694  : 			continue;

	jmp	SHORT $LN62@AssignSpec
$LN60@AssignSpec:

; 695  : 		}
; 696  : 
; 697  : 		// If this is the city to build our current wonder in, mark all that
; 698  : 		if(m_bWonderChosen && pLoopCity->GetID() == m_iWonderCityID)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+208]
	test	edx, edx
	je	$LN59@AssignSpec
	mov	eax, DWORD PTR _pLoopCity$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR $T231110[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T231110[ebp]
	cmp	eax, DWORD PTR [edx+200]
	jne	$LN59@AssignSpec

; 699  : 		{
; 700  : 			it = find(m_SpecializationsNeeded.begin(), m_SpecializationsNeeded.end(), eWonderSpecialiation);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T231120[ebp], edx
	mov	eax, DWORD PTR $T231120[ebp]
	mov	DWORD PTR $T230985[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T231131[ebp], edx
	mov	eax, DWORD PTR $T231131[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231140[ebp], ecx
	mov	edx, DWORD PTR $T231140[ebp]
	mov	DWORD PTR $T230986[ebp], edx
	mov	eax, DWORD PTR $T230985[ebp]
	mov	DWORD PTR $T231155[ebp], eax
	mov	ecx, DWORD PTR $T230986[ebp]
	mov	DWORD PTR $T231154[ebp], ecx
	lea	edx, DWORD PTR _eWonderSpecialiation$[ebp]
	push	edx
	mov	eax, DWORD PTR $T231155[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231154[ebp]
	push	ecx
	lea	edx, DWORD PTR $T231153[ebp]
	push	edx
	call	??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T231154[ebp], eax
	mov	ecx, DWORD PTR $T231154[ebp]
	mov	DWORD PTR $T230987[ebp], ecx
	mov	edx, DWORD PTR $T230987[ebp]
	mov	DWORD PTR _it$[ebp], edx

; 701  : 			if(it != m_SpecializationsNeeded.end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T231165[ebp], ecx
	mov	edx, DWORD PTR $T231165[ebp]
	mov	DWORD PTR $T230988[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T230988[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN59@AssignSpec

; 702  : 			{
; 703  : 				m_SpecializationsNeeded.erase(it);

	mov	ecx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T230989[ebp], ecx
	mov	edx, DWORD PTR $T230989[ebp]
	push	edx
	lea	eax, DWORD PTR $T230990[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase

; 704  : 				pLoopCity->GetCityStrategyAI()->SetSpecialization(eWonderSpecialiation);

	mov	ecx, DWORD PTR _eWonderSpecialiation$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 705  : 				LogSpecializationAssignment(pLoopCity, eWonderSpecialiation, true);

	push	1
	mov	edx, DWORD PTR _eWonderSpecialiation$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLoopCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 706  : 				continue;

	jmp	$LN62@AssignSpec
$LN59@AssignSpec:

; 707  : 			}
; 708  : 		}
; 709  : 
; 710  : 		// If city default is equal to a needed type, go with that
; 711  : 		eSpecialization = pLoopCity->GetCityStrategyAI()->GetDefaultSpecialization();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	DWORD PTR $T231249[ebp], eax
	mov	ecx, DWORD PTR $T231249[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR $T231250[ebp], edx
	mov	eax, DWORD PTR $T231250[ebp]
	mov	DWORD PTR _eSpecialization$[ebp], eax

; 712  : 		it = find(m_SpecializationsNeeded.begin(), m_SpecializationsNeeded.end(), eSpecialization);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T231260[ebp], edx
	mov	eax, DWORD PTR $T231260[ebp]
	mov	DWORD PTR $T230991[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T231271[ebp], edx
	mov	eax, DWORD PTR $T231271[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231280[ebp], ecx
	mov	edx, DWORD PTR $T231280[ebp]
	mov	DWORD PTR $T230992[ebp], edx
	mov	eax, DWORD PTR $T230991[ebp]
	mov	DWORD PTR $T231295[ebp], eax
	mov	ecx, DWORD PTR $T230992[ebp]
	mov	DWORD PTR $T231294[ebp], ecx
	lea	edx, DWORD PTR _eSpecialization$[ebp]
	push	edx
	mov	eax, DWORD PTR $T231295[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231294[ebp]
	push	ecx
	lea	edx, DWORD PTR $T231293[ebp]
	push	edx
	call	??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T231294[ebp], eax
	mov	ecx, DWORD PTR $T231294[ebp]
	mov	DWORD PTR $T230993[ebp], ecx
	mov	edx, DWORD PTR $T230993[ebp]
	mov	DWORD PTR _it$[ebp], edx

; 713  : 		if(it != m_SpecializationsNeeded.end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T231305[ebp], ecx
	mov	edx, DWORD PTR $T231305[ebp]
	mov	DWORD PTR $T230994[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T230994[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN57@AssignSpec

; 714  : 		{
; 715  : 			m_SpecializationsNeeded.erase(it);

	mov	ecx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T230995[ebp], ecx
	mov	edx, DWORD PTR $T230995[ebp]
	push	edx
	lea	eax, DWORD PTR $T230996[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase

; 716  : 			pLoopCity->GetCityStrategyAI()->SetSpecialization(eSpecialization);

	mov	ecx, DWORD PTR _eSpecialization$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 717  : 			LogSpecializationAssignment(pLoopCity, eSpecialization);

	push	0
	mov	edx, DWORD PTR _eSpecialization$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLoopCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 718  : 		}
; 719  : 		else

	jmp	$LN56@AssignSpec
$LN57@AssignSpec:

; 720  : 		{
; 721  : 			// If cities' current specialization is needed, stick with that
; 722  : 			eSpecialization = pLoopCity->GetCityStrategyAI()->GetSpecialization();

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	DWORD PTR $T231389[ebp], eax
	mov	ecx, DWORD PTR $T231389[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T231390[ebp], edx
	mov	eax, DWORD PTR $T231390[ebp]
	mov	DWORD PTR _eSpecialization$[ebp], eax

; 723  : 			it = find(m_SpecializationsNeeded.begin(), m_SpecializationsNeeded.end(), eSpecialization);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T231400[ebp], edx
	mov	eax, DWORD PTR $T231400[ebp]
	mov	DWORD PTR $T230997[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T231411[ebp], edx
	mov	eax, DWORD PTR $T231411[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231420[ebp], ecx
	mov	edx, DWORD PTR $T231420[ebp]
	mov	DWORD PTR $T230998[ebp], edx
	mov	eax, DWORD PTR $T230997[ebp]
	mov	DWORD PTR $T231435[ebp], eax
	mov	ecx, DWORD PTR $T230998[ebp]
	mov	DWORD PTR $T231434[ebp], ecx
	lea	edx, DWORD PTR _eSpecialization$[ebp]
	push	edx
	mov	eax, DWORD PTR $T231435[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231434[ebp]
	push	ecx
	lea	edx, DWORD PTR $T231432[ebp]
	push	edx
	call	??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T231434[ebp], eax
	mov	ecx, DWORD PTR $T231434[ebp]
	mov	DWORD PTR $T230999[ebp], ecx
	mov	edx, DWORD PTR $T230999[ebp]
	mov	DWORD PTR _it$[ebp], edx

; 724  : 			if(it != m_SpecializationsNeeded.end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T231445[ebp], ecx
	mov	edx, DWORD PTR $T231445[ebp]
	mov	DWORD PTR $T231000[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T231000[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN305@AssignSpec

; 725  : 			{
; 726  : 				m_SpecializationsNeeded.erase(it);

	mov	ecx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T231001[ebp], ecx
	mov	edx, DWORD PTR $T231001[ebp]
	push	edx
	lea	eax, DWORD PTR $T231002[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase

; 727  : 				pLoopCity->GetCityStrategyAI()->SetSpecialization(eSpecialization);

	mov	ecx, DWORD PTR _eSpecialization$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 728  : 				LogSpecializationAssignment(pLoopCity, eSpecialization);

	push	0
	mov	edx, DWORD PTR _eSpecialization$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLoopCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 729  : 			}
; 730  : 
; 731  : 			// Save this city off (with detailed data about what it is good at) to assign later
; 732  : 			else

	jmp	$LN56@AssignSpec

; 733  : 			{
; 734  : 				cityData.m_eID = pLoopCity->GetID();

$LN305@AssignSpec:
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR $T231534[ebp], edx
	mov	eax, DWORD PTR $T231534[ebp]
	mov	DWORD PTR _cityData$[ebp], eax

; 735  : 				for(iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN53@AssignSpec
$LN52@AssignSpec:
	mov	ecx, DWORD PTR _iI$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$[ebp], ecx
$LN53@AssignSpec:
	cmp	DWORD PTR _iI$[ebp], 3
	jg	SHORT $LN51@AssignSpec

; 736  : 				{
; 737  : 					if(iI == YIELD_SCIENCE)

	cmp	DWORD PTR _iI$[ebp], 3
	jne	SHORT $LN50@AssignSpec

; 738  : 					{
; 739  : 						cityData.m_iWeight[iI] = PlotValueForScience(pLoopCity->plot()); // -- BKW, looks like PlotValueForScience is making some assumptions that are no longer true

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z ; CvCitySpecializationAI::PlotValueForScience
	mov	edx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR _cityData$[ebp+edx*4+4], eax

; 740  : 					}
; 741  : 					else

	jmp	SHORT $LN49@AssignSpec
$LN50@AssignSpec:

; 742  : 					{
; 743  : 						cityData.m_iWeight[iI] = PlotValueForSpecificYield(pLoopCity->plot(), (YieldTypes)iI);

	mov	eax, DWORD PTR _iI$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?plot@CvCity@@QBEPAVCvPlot@@XZ		; CvCity::plot
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z ; CvCitySpecializationAI::PlotValueForSpecificYield
	mov	ecx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR _cityData$[ebp+ecx*4+4], eax
$LN49@AssignSpec:

; 744  : 					}
; 745  : 					cityData.m_iWeight[iI] = AdjustValueBasedOnBuildings(pLoopCity, (YieldTypes)iI, cityData.m_iWeight[iI]);

	mov	edx, DWORD PTR _iI$[ebp]
	mov	eax, DWORD PTR _cityData$[ebp+edx*4+4]
	push	eax
	mov	ecx, DWORD PTR _iI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLoopCity$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z ; CvCitySpecializationAI::AdjustValueBasedOnBuildings
	mov	ecx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR _cityData$[ebp+ecx*4+4], eax

; 746  : 					if(cityData.m_iWeight[iI] < 0)

	mov	edx, DWORD PTR _iI$[ebp]
	cmp	DWORD PTR _cityData$[ebp+edx*4+4], 0
	jge	SHORT $LN48@AssignSpec

; 747  : 					{
; 748  : 						cityData.m_iWeight[iI] = 0;

	mov	eax, DWORD PTR _iI$[ebp]
	mov	DWORD PTR _cityData$[ebp+eax*4+4], 0
$LN48@AssignSpec:

; 749  : 					}
; 750  : 				}

	jmp	$LN52@AssignSpec
$LN51@AssignSpec:

; 751  : 				citiesWithoutSpecialization.push_back(cityData);

	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T231547[ebp], ecx
	mov	edx, DWORD PTR $T231547[ebp]
	mov	DWORD PTR $T231556[ebp], edx
	mov	eax, DWORD PTR $T231556[ebp]
	mov	DWORD PTR $T231555[ebp], eax
	lea	ecx, DWORD PTR _cityData$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T231555[ebp]
	push	edx
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	call	?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Insert

; 752  : 
; 753  : 				LogCity(pLoopCity, cityData);

	sub	esp, 24					; 00000018H
	mov	eax, esp
	mov	ecx, DWORD PTR _cityData$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _cityData$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _cityData$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _cityData$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _cityData$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _cityData$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR _pLoopCity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z ; CvCitySpecializationAI::LogCity
$LN56@AssignSpec:

; 754  : 
; 755  : 			}
; 756  : 		}
; 757  : 	}

	jmp	$LN62@AssignSpec

; 758  : 
; 759  : 	FAssert(citiesWithoutSpecialization.size() + 1 == m_SpecializationsNeeded.size());
; 760  : 
; 761  : 	// NEXT SPECIALIZATION NEEDED: Now figure out what we want to assign as our "next specialization needed"
; 762  : 
; 763  : 	// If only one specialization left, it's easy
; 764  : 	if(citiesWithoutSpecialization.empty())

$LN315@AssignSpec:
	xor	ecx, ecx
	cmp	DWORD PTR _citiesWithoutSpecialization$[ebp+8], 0
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN47@AssignSpec

; 765  : 	{
; 766  : 		it = m_SpecializationsNeeded.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T231571[ebp], ecx
	mov	edx, DWORD PTR $T231571[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T231580[ebp], eax
	mov	ecx, DWORD PTR $T231580[ebp]
	mov	DWORD PTR $T231003[ebp], ecx
	mov	edx, DWORD PTR $T231003[ebp]
	mov	DWORD PTR _it$[ebp], edx

; 767  : 		m_eNextSpecializationDesired = *it;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _it$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 768  : 		LogNextSpecialization(m_eNextSpecializationDesired);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ; CvCitySpecializationAI::LogNextSpecialization

; 769  : 		return;

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	call	?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	jmp	$LN64@AssignSpec
$LN47@AssignSpec:

; 770  : 	}
; 771  : 
; 772  : 	// If all specializations left are "general economic", set that as next needed
; 773  : 	bool bAllGeneral = true;

	mov	BYTE PTR _bAllGeneral$[ebp], 1

; 774  : 	it = m_SpecializationsNeeded.begin();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR $T231647[ebp], eax
	mov	ecx, DWORD PTR $T231647[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T231656[ebp], edx
	mov	eax, DWORD PTR $T231656[ebp]
	mov	DWORD PTR $T231004[ebp], eax
	mov	ecx, DWORD PTR $T231004[ebp]
	mov	DWORD PTR _it$[ebp], ecx

; 775  : 	iterEnd = m_SpecializationsNeeded.end();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR $T231674[ebp], eax
	mov	ecx, DWORD PTR $T231674[ebp]
	mov	DWORD PTR $T231005[ebp], ecx
	mov	edx, DWORD PTR $T231005[ebp]
	mov	DWORD PTR _iterEnd$[ebp], edx

; 776  : 	for(; it != iterEnd; ++it)

	jmp	SHORT $LN365@AssignSpec
$LN363@AssignSpec:
	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _it$[ebp], ecx
$LN365@AssignSpec:
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _iterEnd$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN44@AssignSpec

; 777  : 	{
; 778  : 		CitySpecializationTypes eType = *it;

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _eType$226145[ebp], ecx

; 779  : 		if(eType != GetEconomicDefaultSpecialization())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	cmp	DWORD PTR _eType$226145[ebp], eax
	je	SHORT $LN43@AssignSpec

; 780  : 		{
; 781  : 			bAllGeneral = false;

	mov	BYTE PTR _bAllGeneral$[ebp], 0
$LN43@AssignSpec:

; 782  : 		}
; 783  : 	}

	jmp	SHORT $LN363@AssignSpec
$LN44@AssignSpec:

; 784  : 
; 785  : 	if(bAllGeneral)

	movzx	edx, BYTE PTR _bAllGeneral$[ebp]
	test	edx, edx
	je	SHORT $LN42@AssignSpec

; 786  : 	{
; 787  : 		m_eNextSpecializationDesired = GetEconomicDefaultSpecialization();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 788  : 		LogNextSpecialization(m_eNextSpecializationDesired);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ; CvCitySpecializationAI::LogNextSpecialization

; 789  : 		m_SpecializationsNeeded.erase(m_SpecializationsNeeded.begin());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR $T231723[ebp], edx
	mov	eax, DWORD PTR $T231723[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231732[ebp], ecx
	mov	edx, DWORD PTR $T231732[ebp]
	mov	DWORD PTR $T231007[ebp], edx
	mov	eax, DWORD PTR $T231007[ebp]
	mov	DWORD PTR $T231006[ebp], eax
	mov	ecx, DWORD PTR $T231006[ebp]
	push	ecx
	lea	edx, DWORD PTR $T231008[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase

; 790  : 	}
; 791  : 
; 792  : 	else

	jmp	$LN41@AssignSpec
$LN42@AssignSpec:

; 793  : 	{
; 794  : 		// Find best possible sites for each of the yield types
; 795  : 		FindBestSites();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindBestSites@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::FindBestSites

; 796  : 
; 797  : 		// Compute the yield which we can improve the most with a new city
; 798  : 		int iCurrentDelta;
; 799  : 		int iBestDelta[YIELD_SCIENCE + 1];
; 800  : 		for(iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN40@AssignSpec
$LN39@AssignSpec:
	mov	eax, DWORD PTR _iI$[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$[ebp], eax
$LN40@AssignSpec:
	cmp	DWORD PTR _iI$[ebp], 3
	jg	SHORT $LN38@AssignSpec

; 801  : 		{
; 802  : 			iBestDelta[iI] = MIN_INT;

	mov	ecx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR _iBestDelta$226153[ebp+ecx*4], -2147483648 ; 80000000H

; 803  : 		}

	jmp	SHORT $LN39@AssignSpec
$LN38@AssignSpec:

; 804  : 		cityIter = citiesWithoutSpecialization.begin();

	mov	edx, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T231811[ebp], edx
	mov	eax, DWORD PTR $T231811[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231820[ebp], ecx
	mov	edx, DWORD PTR $T231820[ebp]
	mov	DWORD PTR $T231009[ebp], edx
	mov	eax, DWORD PTR $T231009[ebp]
	mov	DWORD PTR _cityIter$[ebp], eax

; 805  : 		cityIterEnd = citiesWithoutSpecialization.end();

	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T231838[ebp], ecx
	mov	edx, DWORD PTR $T231838[ebp]
	mov	DWORD PTR $T231010[ebp], edx
	mov	eax, DWORD PTR $T231010[ebp]
	mov	DWORD PTR _cityIterEnd$[ebp], eax

; 806  : 		for(; cityIter != cityIterEnd; ++cityIter)

	jmp	SHORT $LN438@AssignSpec
$LN436@AssignSpec:
	mov	ecx, DWORD PTR _cityIter$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cityIter$[ebp], edx
$LN438@AssignSpec:
	mov	eax, DWORD PTR _cityIter$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR _cityIterEnd$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN35@AssignSpec

; 807  : 		{
; 808  : 			cityData = *cityIter;

	mov	ecx, DWORD PTR _cityIter$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cityData$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _cityData$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _cityData$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _cityData$[ebp+12], eax
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _cityData$[ebp+16], edx
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _cityData$[ebp+20], eax

; 809  : 			for(iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN34@AssignSpec
$LN33@AssignSpec:
	mov	ecx, DWORD PTR _iI$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$[ebp], ecx
$LN34@AssignSpec:
	cmp	DWORD PTR _iI$[ebp], 3
	jg	SHORT $LN32@AssignSpec

; 810  : 			{
; 811  : 				iCurrentDelta = cityData.m_iWeight[iI] - m_iBestValue[iI];

	mov	edx, DWORD PTR _iI$[ebp]
	mov	eax, DWORD PTR _iI$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cityData$[ebp+edx*4+4]
	sub	edx, DWORD PTR [ecx+eax*4+28]
	mov	DWORD PTR _iCurrentDelta$226152[ebp], edx

; 812  : 				if(iCurrentDelta > iBestDelta[iI])

	mov	eax, DWORD PTR _iI$[ebp]
	mov	ecx, DWORD PTR _iCurrentDelta$226152[ebp]
	cmp	ecx, DWORD PTR _iBestDelta$226153[ebp+eax*4]
	jle	SHORT $LN31@AssignSpec

; 813  : 				{
; 814  : 					iBestDelta[iI] = iCurrentDelta;

	mov	edx, DWORD PTR _iI$[ebp]
	mov	eax, DWORD PTR _iCurrentDelta$226152[ebp]
	mov	DWORD PTR _iBestDelta$226153[ebp+edx*4], eax
$LN31@AssignSpec:

; 815  : 				}
; 816  : 			}

	jmp	SHORT $LN33@AssignSpec
$LN32@AssignSpec:

; 817  : 		}

	jmp	$LN436@AssignSpec
$LN35@AssignSpec:

; 818  : 
; 819  : 		// Save yield improvements in a vector we can sort
; 820  : 		CvWeightedVector<int, YIELD_SCIENCE+1, true> yieldImprovements;

	lea	ecx, DWORD PTR _yieldImprovements$226167[ebp]
	call	??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 821  : 		for(iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN30@AssignSpec
$LN29@AssignSpec:
	mov	ecx, DWORD PTR _iI$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$[ebp], ecx
$LN30@AssignSpec:
	cmp	DWORD PTR _iI$[ebp], 3
	jg	SHORT $LN28@AssignSpec

; 822  : 		{
; 823  : 			int iImprovementWithNewCity;
; 824  : 			if(iBestDelta[iI] > 0)

	mov	edx, DWORD PTR _iI$[ebp]
	cmp	DWORD PTR _iBestDelta$226153[ebp+edx*4], 0
	jle	SHORT $LN27@AssignSpec

; 825  : 			{
; 826  : 				iImprovementWithNewCity = 0;

	mov	DWORD PTR _iImprovementWithNewCity$226171[ebp], 0

; 827  : 			}
; 828  : 			else

	jmp	SHORT $LN26@AssignSpec
$LN27@AssignSpec:

; 829  : 			{
; 830  : 				iImprovementWithNewCity = -iBestDelta[iI];

	mov	eax, DWORD PTR _iI$[ebp]
	mov	ecx, DWORD PTR _iBestDelta$226153[ebp+eax*4]
	neg	ecx
	mov	DWORD PTR _iImprovementWithNewCity$226171[ebp], ecx
$LN26@AssignSpec:

; 831  : 			}
; 832  : 			yieldImprovements.push_back(iI, iImprovementWithNewCity);

	mov	DWORD PTR _weightedElem$231897[ebp], 0
	mov	DWORD PTR _weightedElem$231897[ebp+4], 0
	mov	edx, DWORD PTR _iI$[ebp]
	mov	DWORD PTR _weightedElem$231897[ebp], edx
	mov	eax, DWORD PTR _iImprovementWithNewCity$226171[ebp]
	mov	DWORD PTR _weightedElem$231897[ebp+4], eax
	lea	ecx, DWORD PTR _weightedElem$231897[ebp]
	push	ecx
	lea	ecx, DWORD PTR _yieldImprovements$226167[ebp]
	call	?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back

; 833  : 		}

	jmp	SHORT $LN29@AssignSpec
$LN28@AssignSpec:

; 834  : 		yieldImprovements.SortItems();

	lea	ecx, DWORD PTR _yieldImprovements$226167[ebp]
	call	?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ ; CvWeightedVector<int,4,1>::SortItems

; 835  : 
; 836  : 		// Take them out in order and see if we need this specialization
; 837  : 		bool bFoundIt = false;

	mov	BYTE PTR _bFoundIt$226174[ebp], 0

; 838  : 		for(iI = 0; iI < yieldImprovements.size(); iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN25@AssignSpec
$LN24@AssignSpec:
	mov	edx, DWORD PTR _iI$[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$[ebp], edx
$LN25@AssignSpec:
	mov	eax, DWORD PTR _yieldImprovements$226167[ebp+4]
	mov	DWORD PTR $T231917[ebp], eax
	mov	ecx, DWORD PTR _iI$[ebp]
	cmp	ecx, DWORD PTR $T231917[ebp]
	jge	$LN23@AssignSpec

; 839  : 		{
; 840  : 			YieldTypes eMostImprovedYield = (YieldTypes)yieldImprovements.GetElement(iI);

	mov	edx, DWORD PTR _iI$[ebp]
	mov	eax, DWORD PTR _yieldImprovements$226167[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _eMostImprovedYield$226178[ebp], ecx

; 841  : 
; 842  : 			// Loop through needed specializations until we find one that matches
; 843  : 			it = m_SpecializationsNeeded.begin();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR $T231934[ebp], eax
	mov	ecx, DWORD PTR $T231934[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T231943[ebp], edx
	mov	eax, DWORD PTR $T231943[ebp]
	mov	DWORD PTR $T231011[ebp], eax
	mov	ecx, DWORD PTR $T231011[ebp]
	mov	DWORD PTR _it$[ebp], ecx

; 844  : 			iterEnd = m_SpecializationsNeeded.end();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR $T231961[ebp], eax
	mov	ecx, DWORD PTR $T231961[ebp]
	mov	DWORD PTR $T231012[ebp], ecx
	mov	edx, DWORD PTR $T231012[ebp]
	mov	DWORD PTR _iterEnd$[ebp], edx

; 845  : 			for(; it != iterEnd; ++it)

	jmp	SHORT $LN496@AssignSpec
$LN494@AssignSpec:
	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _it$[ebp], ecx
$LN496@AssignSpec:
	mov	edx, DWORD PTR _it$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _iterEnd$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN20@AssignSpec

; 846  : 			{
; 847  : 				CitySpecializationTypes eType = *it;

	mov	eax, DWORD PTR _it$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _eType$226185[ebp], ecx

; 848  : 				YieldTypes eYield = GC.getCitySpecializationInfo(eType)->GetYieldType();

	mov	edx, DWORD PTR _eType$226185[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z ; CvGlobals::getCitySpecializationInfo
	mov	ecx, eax
	call	?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ; CvCitySpecializationXMLEntry::GetYieldType
	mov	DWORD PTR _eYield$226186[ebp], eax

; 849  : 				if(eYield == eMostImprovedYield)

	mov	eax, DWORD PTR _eYield$226186[ebp]
	cmp	eax, DWORD PTR _eMostImprovedYield$226178[ebp]
	jne	SHORT $LN19@AssignSpec

; 850  : 				{
; 851  : 					m_eNextSpecializationDesired = eType;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _eType$226185[ebp]
	mov	DWORD PTR [ecx+12], edx

; 852  : 					LogNextSpecialization(m_eNextSpecializationDesired);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ; CvCitySpecializationAI::LogNextSpecialization

; 853  : 					m_SpecializationsNeeded.erase(it);

	mov	edx, DWORD PTR _it$[ebp]
	mov	DWORD PTR $T231013[ebp], edx
	mov	eax, DWORD PTR $T231013[ebp]
	push	eax
	lea	ecx, DWORD PTR $T231014[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase

; 854  : 					bFoundIt = true;

	mov	BYTE PTR _bFoundIt$226174[ebp], 1

; 855  : 					break;

	jmp	SHORT $LN20@AssignSpec
$LN19@AssignSpec:

; 856  : 				}
; 857  : 			}

	jmp	$LN494@AssignSpec
$LN20@AssignSpec:

; 858  : 			if(bFoundIt)

	movzx	edx, BYTE PTR _bFoundIt$226174[ebp]
	test	edx, edx
	je	SHORT $LN18@AssignSpec

; 859  : 			{
; 860  : 				break;

	jmp	SHORT $LN23@AssignSpec
$LN18@AssignSpec:

; 861  : 			}
; 862  : 		}

	jmp	$LN24@AssignSpec
$LN23@AssignSpec:

; 863  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _yieldImprovements$226167[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
$LN41@AssignSpec:

; 864  : 
; 865  : 	FAssert(citiesWithoutSpecialization.size() == m_SpecializationsNeeded.size());
; 866  : 
; 867  : 	// REMAINING ASSIGNMENTS: Make the rest of the assignments
; 868  : 	it = m_SpecializationsNeeded.begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T232092[ebp], ecx
	mov	edx, DWORD PTR $T232092[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232101[ebp], eax
	mov	ecx, DWORD PTR $T232101[ebp]
	mov	DWORD PTR $T231015[ebp], ecx
	mov	edx, DWORD PTR $T231015[ebp]
	mov	DWORD PTR _it$[ebp], edx

; 869  : 	iterEnd = m_SpecializationsNeeded.end();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T232119[ebp], ecx
	mov	edx, DWORD PTR $T232119[ebp]
	mov	DWORD PTR $T231016[ebp], edx
	mov	eax, DWORD PTR $T231016[ebp]
	mov	DWORD PTR _iterEnd$[ebp], eax

; 870  : 	for(; it != iterEnd; ++it)

	jmp	SHORT $LN573@AssignSpec
$LN571@AssignSpec:
	mov	ecx, DWORD PTR _it$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _it$[ebp], edx
$LN573@AssignSpec:
	mov	eax, DWORD PTR _it$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR _iterEnd$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN15@AssignSpec

; 871  : 	{
; 872  : 		const CitySpecializationTypes eType = *it;

	mov	ecx, DWORD PTR _it$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _eType$226196[ebp], edx

; 873  : 		CvCitySpecializationXMLEntry* pkCitySpecializationEntry = GC.getCitySpecializationInfo(eType);

	mov	eax, DWORD PTR _eType$226196[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCitySpecializationInfo@CvGlobals@@QAEPAVCvCitySpecializationXMLEntry@@W4CitySpecializationTypes@@@Z ; CvGlobals::getCitySpecializationInfo
	mov	DWORD PTR _pkCitySpecializationEntry$226197[ebp], eax

; 874  : 		if(pkCitySpecializationEntry == NULL)

	cmp	DWORD PTR _pkCitySpecializationEntry$226197[ebp], 0
	jne	SHORT $LN14@AssignSpec

; 875  : 			continue;

	jmp	SHORT $LN571@AssignSpec
$LN14@AssignSpec:

; 876  : 
; 877  : 		YieldTypes eYield = pkCitySpecializationEntry->GetYieldType();

	mov	ecx, DWORD PTR _pkCitySpecializationEntry$226197[ebp]
	call	?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ; CvCitySpecializationXMLEntry::GetYieldType
	mov	DWORD PTR _eYield$226199[ebp], eax

; 878  : 		bool bCoastal = pkCitySpecializationEntry->IsMustBeCoastal();

	mov	ecx, DWORD PTR _pkCitySpecializationEntry$226197[ebp]
	call	?IsMustBeCoastal@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsMustBeCoastal
	mov	BYTE PTR _bCoastal$226200[ebp], al

; 879  : 		bestCity = citiesWithoutSpecialization.end();

	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T232173[ebp], ecx
	mov	edx, DWORD PTR $T232173[ebp]
	mov	DWORD PTR $T231017[ebp], edx
	mov	eax, DWORD PTR $T231017[ebp]
	mov	DWORD PTR _bestCity$[ebp], eax

; 880  : 
; 881  : 		// Pick best existing city based on a better computation of existing city's value for a yield type
; 882  : 		int iBestValue = -1;

	mov	DWORD PTR _iBestValue$226202[ebp], -1

; 883  : 		cityIter = citiesWithoutSpecialization.begin();

	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T232184[ebp], ecx
	mov	edx, DWORD PTR $T232184[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232193[ebp], eax
	mov	ecx, DWORD PTR $T232193[ebp]
	mov	DWORD PTR $T231018[ebp], ecx
	mov	edx, DWORD PTR $T231018[ebp]
	mov	DWORD PTR _cityIter$[ebp], edx

; 884  : 		cityIterEnd = citiesWithoutSpecialization.end();

	mov	eax, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T232211[ebp], eax
	mov	ecx, DWORD PTR $T232211[ebp]
	mov	DWORD PTR $T231019[ebp], ecx
	mov	edx, DWORD PTR $T231019[ebp]
	mov	DWORD PTR _cityIterEnd$[ebp], edx

; 885  : 		for(; cityIter != cityIterEnd; ++cityIter)

	jmp	SHORT $LN609@AssignSpec
$LN607@AssignSpec:
	mov	eax, DWORD PTR _cityIter$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cityIter$[ebp], ecx
$LN609@AssignSpec:
	mov	edx, DWORD PTR _cityIter$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _cityIterEnd$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN11@AssignSpec

; 886  : 		{
; 887  : 			cityData = *cityIter;

	mov	eax, DWORD PTR _cityIter$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cityData$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _cityData$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cityData$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _cityData$[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cityData$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _cityData$[ebp+20], edx

; 888  : 
; 889  : 			if(bCoastal && !m_pPlayer->getCity(cityData.m_eID)->isCoastal(100))

	movzx	eax, BYTE PTR _bCoastal$226200[ebp]
	test	eax, eax
	je	SHORT $LN10@AssignSpec
	push	100					; 00000064H
	mov	ecx, DWORD PTR _cityData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	ecx, eax
	call	?isCoastal@CvCity@@QBE_NH@Z		; CvCity::isCoastal
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@AssignSpec

; 890  : 			{
; 891  : 				continue;

	jmp	SHORT $LN607@AssignSpec
$LN10@AssignSpec:

; 892  : 			}
; 893  : 
; 894  : 			if(eYield == NO_YIELD)

	cmp	DWORD PTR _eYield$226199[ebp], -1
	jne	SHORT $LN9@AssignSpec

; 895  : 			{
; 896  : 				// General economic is all yields added together
; 897  : 				int iCityValue = 0;

	mov	DWORD PTR _iCityValue$226210[ebp], 0

; 898  : 				for(iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$[ebp], 0
	jmp	SHORT $LN8@AssignSpec
$LN7@AssignSpec:
	mov	ecx, DWORD PTR _iI$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$[ebp], ecx
$LN8@AssignSpec:
	cmp	DWORD PTR _iI$[ebp], 3
	jg	SHORT $LN6@AssignSpec

; 899  : 				{
; 900  : 					iCityValue += cityData.m_iWeight[iI];

	mov	edx, DWORD PTR _iI$[ebp]
	mov	eax, DWORD PTR _iCityValue$226210[ebp]
	add	eax, DWORD PTR _cityData$[ebp+edx*4+4]
	mov	DWORD PTR _iCityValue$226210[ebp], eax

; 901  : 				}

	jmp	SHORT $LN7@AssignSpec
$LN6@AssignSpec:

; 902  : 				if(iCityValue > iBestValue)

	mov	ecx, DWORD PTR _iCityValue$226210[ebp]
	cmp	ecx, DWORD PTR _iBestValue$226202[ebp]
	jle	SHORT $LN5@AssignSpec

; 903  : 				{
; 904  : 					iBestValue = iCityValue;

	mov	edx, DWORD PTR _iCityValue$226210[ebp]
	mov	DWORD PTR _iBestValue$226202[ebp], edx

; 905  : 					bestCity = cityIter;

	mov	eax, DWORD PTR _cityIter$[ebp]
	mov	DWORD PTR _bestCity$[ebp], eax
$LN5@AssignSpec:

; 906  : 				}
; 907  : 			}
; 908  : 			else

	jmp	SHORT $LN4@AssignSpec
$LN9@AssignSpec:

; 909  : 			{
; 910  : 				if(cityData.m_iWeight[(int)eYield] > iBestValue)

	mov	ecx, DWORD PTR _eYield$226199[ebp]
	mov	edx, DWORD PTR _cityData$[ebp+ecx*4+4]
	cmp	edx, DWORD PTR _iBestValue$226202[ebp]
	jle	SHORT $LN4@AssignSpec

; 911  : 				{
; 912  : 					iBestValue = cityData.m_iWeight[(int)eYield];

	mov	eax, DWORD PTR _eYield$226199[ebp]
	mov	ecx, DWORD PTR _cityData$[ebp+eax*4+4]
	mov	DWORD PTR _iBestValue$226202[ebp], ecx

; 913  : 					bestCity = cityIter;

	mov	edx, DWORD PTR _cityIter$[ebp]
	mov	DWORD PTR _bestCity$[ebp], edx
$LN4@AssignSpec:

; 914  : 				}
; 915  : 			}
; 916  : 		}

	jmp	$LN607@AssignSpec
$LN11@AssignSpec:

; 917  : 
; 918  : 		// Found a city to set
; 919  : 		if(bestCity != citiesWithoutSpecialization.end())

	mov	eax, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T232265[ebp], eax
	mov	ecx, DWORD PTR $T232265[ebp]
	mov	DWORD PTR $T231020[ebp], ecx
	mov	edx, DWORD PTR _bestCity$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T231020[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN2@AssignSpec

; 920  : 		{
; 921  : 			CvCity* pCity = m_pPlayer->getCity(bestCity->m_eID);

	mov	eax, DWORD PTR _bestCity$[ebp]
	add	eax, 8
	mov	DWORD PTR $T232304[ebp], eax
	mov	ecx, DWORD PTR $T232304[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pCity$226221[ebp], eax

; 922  : 			pCity->GetCityStrategyAI()->SetSpecialization(eType);

	mov	ecx, DWORD PTR _eType$226196[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$226221[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 923  : 			LogSpecializationAssignment(pCity, eType);

	push	0
	mov	edx, DWORD PTR _eType$226196[ebp]
	push	edx
	mov	eax, DWORD PTR _pCity$226221[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 924  : 			citiesWithoutSpecialization.erase(bestCity);

	mov	ecx, DWORD PTR _bestCity$[ebp]
	mov	DWORD PTR $T231021[ebp], ecx
	mov	edx, DWORD PTR $T231021[ebp]
	push	edx
	lea	eax, DWORD PTR $T231022[ebp]
	push	eax
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	call	?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::erase

; 925  : 		}
; 926  : 
; 927  : 		// No (coastal) city found, use default specialization as last resort
; 928  : 		else

	jmp	$LN1@AssignSpec
$LN2@AssignSpec:

; 929  : 		{
; 930  : 			CvCity* pCity = m_pPlayer->getCity(citiesWithoutSpecialization.begin()->m_eID);

	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T232375[ebp], ecx
	mov	edx, DWORD PTR $T232375[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232384[ebp], eax
	mov	ecx, DWORD PTR $T232384[ebp]
	mov	DWORD PTR $T231023[ebp], ecx
	mov	edx, DWORD PTR $T231023[ebp]
	add	edx, 8
	mov	DWORD PTR $T232417[ebp], edx
	mov	eax, DWORD PTR $T232417[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?getCity@CvPlayer@@QAEPAVCvCity@@H@Z	; CvPlayer::getCity
	mov	DWORD PTR _pCity$226225[ebp], eax

; 931  : 			pCity->GetCityStrategyAI()->SetSpecialization(GetEconomicDefaultSpecialization());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	push	eax
	mov	ecx, DWORD PTR _pCity$226225[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	ecx, eax
	call	?SetSpecialization@CvCityStrategyAI@@QAE_NW4CitySpecializationTypes@@@Z ; CvCityStrategyAI::SetSpecialization

; 932  : 			LogSpecializationAssignment(pCity, GetEconomicDefaultSpecialization());

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	push	eax
	mov	eax, DWORD PTR _pCity$226225[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ; CvCitySpecializationAI::LogSpecializationAssignment

; 933  : 			citiesWithoutSpecialization.erase(citiesWithoutSpecialization.begin());

	mov	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp+4]
	mov	DWORD PTR $T232422[ebp], ecx
	mov	edx, DWORD PTR $T232422[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232431[ebp], eax
	mov	ecx, DWORD PTR $T232431[ebp]
	mov	DWORD PTR $T231025[ebp], ecx
	mov	edx, DWORD PTR $T231025[ebp]
	mov	DWORD PTR $T231024[ebp], edx
	mov	eax, DWORD PTR $T231024[ebp]
	push	eax
	lea	ecx, DWORD PTR $T231026[ebp]
	push	ecx
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	call	?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::erase
$LN1@AssignSpec:

; 934  : 		}
; 935  : 	}

	jmp	$LN571@AssignSpec
$LN15@AssignSpec:

; 936  : 
; 937  : 	return;

	mov	DWORD PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	call	?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN64@AssignSpec:

; 938  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$0:
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	jmp	??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::~list<CitySpecializationData,std::allocator<CitySpecializationData> >
__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$3:
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	jmp	??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$1:
	lea	ecx, DWORD PTR _yieldImprovements$226167[ebp]
	jmp	??1?$CvWeightedVector@H$03$00@@QAE@XZ	; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
__unwindfunclet$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ$11:
	lea	ecx, DWORD PTR _citiesWithoutSpecialization$[ebp]
	jmp	??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
__ehhandler$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-800]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AssignSpecializations@CvCitySpecializationAI@@AAEXXZ ENDP ; CvCitySpecializationAI::AssignSpecializations
PUBLIC	?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z ; CvCitySpecializationAI::SelectProductionSpecialization
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
PUBLIC	?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ; CvCitySpecializationAI::GetWonderSubtype
PUBLIC	?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Insert
EXTRN	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ:PROC ; CvGlobals::GetGameCitySpecializations
EXTRN	?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z:PROC ; CvWonderProductionAI::IsWonder
EXTRN	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z:PROC ; CvGlobals::getBuildingInfo
EXTRN	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ:PROC ; CvCity::getProductionBuilding
EXTRN	?GetNumPuppetCities@CvPlayer@@QBEHXZ:PROC	; CvPlayer::GetNumPuppetCities
; Function compile flags: /Odtp
;	COMDAT ?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_this$ = -240						; size = 4
$T232858 = -236						; size = 4
$T232800 = -148						; size = 4
$T232850 = -144						; size = 4
$T232849 = -140						; size = 4
_elem$232779 = -136					; size = 8
_elem$232757 = -128					; size = 8
$T232735 = -120						; size = 4
$T232723 = -116						; size = 4
$T232719 = -112						; size = 4
$T232714 = -108						; size = 4
$T232710 = -104						; size = 4
$T232701 = -100						; size = 4
$T232692 = -96						; size = 4
_elem$232691 = -92					; size = 8
_elem$232677 = -84					; size = 8
$T232663 = -76						; size = 4
$T232646 = -72						; size = 4
$T232655 = -68						; size = 4
$T232654 = -64						; size = 4
$T232607 = -44						; size = 4
_eYield$226258 = -40					; size = 4
_iI$226244 = -36					; size = 4
_iI$226240 = -32					; size = 4
_iSpecializationsToAssign$ = -28			; size = 4
_iOldWeight$ = -24					; size = 4
_iNewWeight$ = -20					; size = 4
_iReductionAmount$ = -16				; size = 4
_pkProductionBuildingInfo$ = -12			; size = 4
_eSpecialization$ = -8					; size = 4
_pkWonderBuildCity$ = -4				; size = 4
?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ PROC ; CvCitySpecializationAI::SelectSpecializations, COMDAT
; _this$ = ecx

; 942  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 	CitySpecializationTypes eSpecialization;
; 944  : 	unsigned int iSpecializationsToAssign = (unsigned int)m_pPlayer->getNumCities() - (unsigned int) m_pPlayer->GetNumPuppetCities() + 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?getNumCities@CvPlayer@@QBEHXZ		; CvPlayer::getNumCities
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetNumPuppetCities@CvPlayer@@QBEHXZ	; CvPlayer::GetNumPuppetCities
	sub	esi, eax
	add	esi, 1
	mov	DWORD PTR _iSpecializationsToAssign$[ebp], esi

; 945  : 	int iOldWeight;
; 946  : 	int iNewWeight;
; 947  : 	int iReductionAmount;
; 948  : 
; 949  : 	m_SpecializationsNeeded.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear

; 950  : 	m_bWonderChosen = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+208], 0

; 951  : 
; 952  : 	// Clear info about what we've picked
; 953  : 	for(int iI = 0; iI < NUM_SPECIALIZATION_YIELDS; iI++)

	mov	DWORD PTR _iI$226240[ebp], 0
	jmp	SHORT $LN15@SelectSpec
$LN14@SelectSpec:
	mov	eax, DWORD PTR _iI$226240[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226240[ebp], eax
$LN15@SelectSpec:
	cmp	DWORD PTR _iI$226240[ebp], 5
	jge	SHORT $LN13@SelectSpec

; 954  : 	{
; 955  : 		m_iNumSpecializationsForThisYield[iI] = 0;

	mov	ecx, DWORD PTR _iI$226240[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+100], 0

; 956  : 	}

	jmp	SHORT $LN14@SelectSpec
$LN13@SelectSpec:

; 957  : 	for(int iI = 0; iI < NUM_PRODUCTION_SPECIALIZATION_SUBTYPES; iI++)

	mov	DWORD PTR _iI$226244[ebp], 0
	jmp	SHORT $LN12@SelectSpec
$LN11@SelectSpec:
	mov	eax, DWORD PTR _iI$226244[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226244[ebp], eax
$LN12@SelectSpec:
	cmp	DWORD PTR _iI$226244[ebp], 5
	jge	SHORT $LN10@SelectSpec

; 958  : 	{
; 959  : 		m_iNumSpecializationsForThisSubtype[iI] = 0;

	mov	ecx, DWORD PTR _iI$226244[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+168], 0

; 960  : 	}

	jmp	SHORT $LN11@SelectSpec
$LN10@SelectSpec:

; 961  : 
; 962  : 	CvCity* pkWonderBuildCity = GetWonderBuildCity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWonderBuildCity@CvCitySpecializationAI@@QBEPAVCvCity@@XZ ; CvCitySpecializationAI::GetWonderBuildCity
	mov	DWORD PTR _pkWonderBuildCity$[ebp], eax

; 963  : 	CvBuildingEntry* pkProductionBuildingInfo = NULL;

	mov	DWORD PTR _pkProductionBuildingInfo$[ebp], 0

; 964  : 	if(NULL != pkWonderBuildCity && pkWonderBuildCity->getProductionBuilding() != NO_BUILDING)

	cmp	DWORD PTR _pkWonderBuildCity$[ebp], 0
	je	SHORT $LN9@SelectSpec
	mov	ecx, DWORD PTR _pkWonderBuildCity$[ebp]
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	cmp	eax, -1
	je	SHORT $LN9@SelectSpec

; 965  : 	{
; 966  : 		pkProductionBuildingInfo = GC.getBuildingInfo(pkWonderBuildCity->getProductionBuilding());

	mov	ecx, DWORD PTR _pkWonderBuildCity$[ebp]
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkProductionBuildingInfo$[ebp], eax
$LN9@SelectSpec:

; 967  : 	}
; 968  : 
; 969  : 	// Do we have a wonder build in progress that we can't interrupt?
; 970  : 	if(!m_bInterruptWonders && NULL != pkProductionBuildingInfo && m_pPlayer->GetWonderProductionAI()->IsWonder(*pkProductionBuildingInfo))

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+192]
	test	ecx, ecx
	jne	$LN8@SelectSpec
	cmp	DWORD PTR _pkProductionBuildingInfo$[ebp], 0
	je	$LN8@SelectSpec
	mov	edx, DWORD PTR _pkProductionBuildingInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ ; CvPlayer::GetWonderProductionAI
	mov	ecx, eax
	call	?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z ; CvWonderProductionAI::IsWonder
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@SelectSpec

; 971  : 	{
; 972  : 		m_SpecializationsNeeded.push_back(GetWonderSpecialization());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetWonderSpecialization
	mov	DWORD PTR $T232607[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR $T232663[ebp], edx
	mov	eax, DWORD PTR $T232663[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T232646[ebp], ecx
	mov	edx, DWORD PTR $T232646[ebp]
	mov	DWORD PTR $T232655[ebp], edx
	mov	eax, DWORD PTR $T232655[ebp]
	mov	DWORD PTR $T232654[ebp], eax
	lea	ecx, DWORD PTR $T232607[ebp]
	push	ecx
	mov	edx, DWORD PTR $T232654[ebp]
	push	edx
	mov	ecx, DWORD PTR $T232663[ebp]
	call	?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Insert

; 973  : 		m_iNumSpecializationsForThisYield[1 + (int)YIELD_PRODUCTION]++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+108], ecx

; 974  : 		iOldWeight = m_YieldWeights.GetWeight(YIELD_PRODUCTION);

	mov	DWORD PTR _elem$232677[ebp], 0
	mov	DWORD PTR _elem$232677[ebp+4], 0
	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _elem$232677[ebp], ecx
	mov	DWORD PTR _elem$232677[ebp+4], edx
	mov	eax, DWORD PTR _elem$232677[ebp+4]
	mov	DWORD PTR _iOldWeight$[ebp], eax

; 975  : 		iReductionAmount = m_ProductionSubtypeWeights.GetWeight(GetWonderSubtype());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ; CvCitySpecializationAI::GetWonderSubtype
	mov	DWORD PTR $T232692[ebp], eax
	mov	DWORD PTR _elem$232691[ebp], 0
	mov	DWORD PTR _elem$232691[ebp+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	eax, DWORD PTR $T232692[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR _elem$232691[ebp], ecx
	mov	DWORD PTR _elem$232691[ebp+4], edx
	mov	eax, DWORD PTR _elem$232691[ebp+4]
	mov	DWORD PTR _iReductionAmount$[ebp], eax

; 976  : 		m_YieldWeights.SetWeight(YIELD_PRODUCTION, (iOldWeight - iReductionAmount));

	mov	ecx, DWORD PTR _iOldWeight$[ebp]
	sub	ecx, DWORD PTR _iReductionAmount$[ebp]
	mov	DWORD PTR $T232701[ebp], ecx
	mov	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR $T232701[ebp]
	mov	DWORD PTR [ecx+edx+4], eax

; 977  : 
; 978  : 		// Only one wonder at a time, so zero out the weight for this subtype entirely
; 979  : 		m_ProductionSubtypeWeights.SetWeight(GetWonderSubtype(), 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ; CvCitySpecializationAI::GetWonderSubtype
	mov	DWORD PTR $T232710[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	eax, DWORD PTR $T232710[ebp]
	mov	DWORD PTR [edx+eax*8+4], 0

; 980  : 		m_bWonderChosen = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+208], 1

; 981  : 	}
; 982  : 	else

	jmp	SHORT $LN6@SelectSpec
$LN8@SelectSpec:

; 983  : 	{
; 984  : 		m_iWonderCityID = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+200], -1
$LN6@SelectSpec:

; 985  : 	}
; 986  : 
; 987  : 	// LOOP as many times as we have cities PLUS ONE
; 988  : 	while(m_SpecializationsNeeded.size() < iSpecializationsToAssign)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T232714[ebp], ecx
	mov	edx, DWORD PTR $T232714[ebp]
	cmp	edx, DWORD PTR _iSpecializationsToAssign$[ebp]
	jae	$LN16@SelectSpec

; 989  : 	{
; 990  : 		// Find highest weighted specialization
; 991  : 		m_YieldWeights.SortItems();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	mov	DWORD PTR $T232735[ebp], eax
	mov	ecx, DWORD PTR $T232735[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T232735[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T232719[ebp], edx
	mov	eax, DWORD PTR $T232735[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T232723[ebp], ecx
	mov	edx, DWORD PTR $T232719[ebp]
	sub	edx, DWORD PTR $T232723[ebp]
	sar	edx, 3
	push	edx
	mov	eax, DWORD PTR $T232719[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232723[ebp]
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 992  : 
; 993  : 		// Mark that we need one city of this type
; 994  : 		YieldTypes eYield = m_YieldWeights.GetElement(0);

	xor	edx, edx
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR _eYield$226258[ebp], edx

; 995  : 		if(GC.GetGameCitySpecializations()->GetNumSpecializationsForYield(eYield) > 1)

	mov	eax, DWORD PTR _eYield$226258[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, eax
	call	?GetNumSpecializationsForYield@CvCitySpecializationXMLEntries@@QAEHW4YieldTypes@@@Z ; CvCitySpecializationXMLEntries::GetNumSpecializationsForYield
	cmp	eax, 1
	jle	$LN4@SelectSpec

; 996  : 		{
; 997  : 			if(eYield == YIELD_PRODUCTION)

	cmp	DWORD PTR _eYield$226258[ebp], 1
	jne	SHORT $LN2@SelectSpec

; 998  : 			{
; 999  : 				eSpecialization = SelectProductionSpecialization(iReductionAmount);

	lea	ecx, DWORD PTR _iReductionAmount$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z ; CvCitySpecializationAI::SelectProductionSpecialization
	mov	DWORD PTR _eSpecialization$[ebp], eax

; 1000 : 
; 1001 : 				iOldWeight = m_YieldWeights.GetWeight(0);

	mov	DWORD PTR _elem$232757[ebp], 0
	mov	DWORD PTR _elem$232757[ebp+4], 0
	xor	edx, edx
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR _elem$232757[ebp], eax
	mov	DWORD PTR _elem$232757[ebp+4], ecx
	mov	edx, DWORD PTR _elem$232757[ebp+4]
	mov	DWORD PTR _iOldWeight$[ebp], edx

; 1002 : 				m_iNumSpecializationsForThisYield[1 + (int)eYield]++;

	mov	eax, DWORD PTR _eYield$226258[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+104]
	add	edx, 1
	mov	eax, DWORD PTR _eYield$226258[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+104], edx

; 1003 : 				iNewWeight = iOldWeight - iReductionAmount;

	mov	edx, DWORD PTR _iOldWeight$[ebp]
	sub	edx, DWORD PTR _iReductionAmount$[ebp]
	mov	DWORD PTR _iNewWeight$[ebp], edx

; 1004 : 				m_YieldWeights.SetWeight(0, iNewWeight);

	xor	eax, eax
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR _iNewWeight$[ebp]
	mov	DWORD PTR [edx+eax+4], ecx
$LN2@SelectSpec:

; 1005 : 			}
; 1006 : 			else
; 1007 : 			{
; 1008 : 				FAssertMsg(false, "Code does not support > 1 specialization for yields other than production.");
; 1009 : 			}
; 1010 : 		}
; 1011 : 		else

	jmp	$LN1@SelectSpec
$LN4@SelectSpec:

; 1012 : 		{
; 1013 : 			eSpecialization = GC.GetGameCitySpecializations()->GetFirstSpecializationForYield(eYield);

	mov	edx, DWORD PTR _eYield$226258[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, eax
	call	?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield
	mov	DWORD PTR _eSpecialization$[ebp], eax

; 1014 : 
; 1015 : 			// Reduce weight for this specialization based on dividing original weight by <num of this type + 1>
; 1016 : 			iOldWeight = m_YieldWeights.GetWeight(0);

	mov	DWORD PTR _elem$232779[ebp], 0
	mov	DWORD PTR _elem$232779[ebp+4], 0
	xor	eax, eax
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _elem$232779[ebp], ecx
	mov	DWORD PTR _elem$232779[ebp+4], edx
	mov	eax, DWORD PTR _elem$232779[ebp+4]
	mov	DWORD PTR _iOldWeight$[ebp], eax

; 1017 : 			m_iNumSpecializationsForThisYield[1 + (int)eYield]++;

	mov	ecx, DWORD PTR _eYield$226258[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+104]
	add	eax, 1
	mov	ecx, DWORD PTR _eYield$226258[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+104], eax

; 1018 : 			iNewWeight = iOldWeight * m_iNumSpecializationsForThisYield[1 + (int)eYield] / (m_iNumSpecializationsForThisYield[1 + (int)eYield] + 1);

	mov	eax, DWORD PTR _eYield$226258[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iOldWeight$[ebp]
	imul	edx, DWORD PTR [ecx+eax*4+104]
	mov	eax, DWORD PTR _eYield$226258[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+104]
	add	ecx, 1
	mov	eax, edx
	cdq
	idiv	ecx
	mov	DWORD PTR _iNewWeight$[ebp], eax

; 1019 : 			m_YieldWeights.SetWeight(0, iNewWeight);

	xor	edx, edx
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR _iNewWeight$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax
$LN1@SelectSpec:

; 1020 : 		}
; 1021 : 		m_SpecializationsNeeded.push_back(eSpecialization);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR $T232858[ebp], ecx
	mov	edx, DWORD PTR $T232858[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T232800[ebp], eax
	mov	ecx, DWORD PTR $T232800[ebp]
	mov	DWORD PTR $T232850[ebp], ecx
	mov	edx, DWORD PTR $T232850[ebp]
	mov	DWORD PTR $T232849[ebp], edx
	lea	eax, DWORD PTR _eSpecialization$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232849[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T232858[ebp]
	call	?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Insert

; 1022 : 	}

	jmp	$LN6@SelectSpec
$LN16@SelectSpec:

; 1023 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectSpecializations@CvCitySpecializationAI@@AAEXXZ ENDP ; CvCitySpecializationAI::SelectSpecializations
_TEXT	ENDS
PUBLIC	?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ ; CvCitySpecializationAI::FindBestWonderCity
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
; Function compile flags: /Odtp
;	COMDAT ?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
_elem$232929 = -56					; size = 8
_elem$232912 = -48					; size = 8
$T232898 = -40						; size = 4
$T232881 = -36						; size = 4
$T232869 = -32						; size = 4
$T232865 = -28						; size = 4
_iOldWeight$226283 = -24				; size = 4
_iNewWeight$226285 = -20				; size = 4
_pCity$226279 = -16					; size = 4
_eSpecialization$ = -12					; size = 4
_iNumSubTypes$ = -8					; size = 4
_eSubtype$ = -4						; size = 4
_iReductionAmount$ = 8					; size = 4
?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z PROC ; CvCitySpecializationAI::SelectProductionSpecialization, COMDAT
; _this$ = ecx

; 1027 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 1028 : 	CitySpecializationTypes eSpecialization;
; 1029 : 
; 1030 : 	// Find highest weighted subtype
; 1031 : 	m_ProductionSubtypeWeights.SortItems();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T232881[ebp], eax
	mov	ecx, DWORD PTR $T232881[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T232881[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T232865[ebp], edx
	mov	eax, DWORD PTR $T232881[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T232869[ebp], ecx
	mov	edx, DWORD PTR $T232865[ebp]
	sub	edx, DWORD PTR $T232869[ebp]
	sar	edx, 3
	push	edx
	mov	eax, DWORD PTR $T232865[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232869[ebp]
	push	ecx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 1032 : 
; 1033 : 	ProductionSpecializationSubtypes eSubtype = m_ProductionSubtypeWeights.GetElement(0);

	xor	edx, edx
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR _eSubtype$[ebp], edx

; 1034 : 
; 1035 : 	int iNumSubTypes = 0;

	mov	DWORD PTR _iNumSubTypes$[ebp], 0

; 1036 : 	eSpecialization = GC.GetGameCitySpecializations()->GetFirstSpecializationForYield(YIELD_PRODUCTION);

	push	1
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, eax
	call	?GetFirstSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@W4YieldTypes@@@Z ; CvCitySpecializationXMLEntries::GetFirstSpecializationForYield
	mov	DWORD PTR _eSpecialization$[ebp], eax
$LN6@SelectProd:

; 1037 : 	while(iNumSubTypes != (int)eSubtype)

	mov	eax, DWORD PTR _iNumSubTypes$[ebp]
	cmp	eax, DWORD PTR _eSubtype$[ebp]
	je	SHORT $LN5@SelectProd

; 1038 : 	{
; 1039 : 		eSpecialization = GC.GetGameCitySpecializations()->GetNextSpecializationForYield();

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, eax
	call	?GetNextSpecializationForYield@CvCitySpecializationXMLEntries@@QAE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationXMLEntries::GetNextSpecializationForYield
	mov	DWORD PTR _eSpecialization$[ebp], eax

; 1040 : 		iNumSubTypes++;

	mov	ecx, DWORD PTR _iNumSubTypes$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iNumSubTypes$[ebp], ecx

; 1041 : 		FAssertMsg(eSpecialization != NO_CITY_SPECIALIZATION, "Production specializations in XML doesn't match NUM_PRODUCTION_SPECIALIZATION_SUBTYPES");
; 1042 : 	}

	jmp	SHORT $LN6@SelectProd
$LN5@SelectProd:

; 1043 : 
; 1044 : 	// If this is the wonder type, make sure we have a city to build it
; 1045 : 	if(eSubtype == GetWonderSubtype())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ; CvCitySpecializationAI::GetWonderSubtype
	cmp	DWORD PTR _eSubtype$[ebp], eax
	jne	$LN4@SelectProd

; 1046 : 	{
; 1047 : 		CvCity* pCity = FindBestWonderCity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ ; CvCitySpecializationAI::FindBestWonderCity
	mov	DWORD PTR _pCity$226279[ebp], eax

; 1048 : 		if(pCity != NULL)

	cmp	DWORD PTR _pCity$226279[ebp], 0
	je	SHORT $LN3@SelectProd

; 1049 : 		{
; 1050 : 			m_iWonderCityID = pCity->GetID();

	mov	edx, DWORD PTR _pCity$226279[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR $T232898[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T232898[ebp]
	mov	DWORD PTR [ecx+200], edx

; 1051 : 			m_bWonderChosen = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+208], 1

; 1052 : 		}
; 1053 : 
; 1054 : 		// No wonder city, substitute default specialization instead
; 1055 : 		else

	jmp	SHORT $LN2@SelectProd
$LN3@SelectProd:

; 1056 : 		{
; 1057 : 			eSpecialization = GetEconomicDefaultSpecialization();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
	mov	DWORD PTR _eSpecialization$[ebp], eax
$LN2@SelectProd:

; 1058 : 		}
; 1059 : 		iReductionAmount = m_ProductionSubtypeWeights.GetWeight(0);

	mov	DWORD PTR _elem$232912[ebp], 0
	mov	DWORD PTR _elem$232912[ebp+4], 0
	xor	ecx, ecx
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	edx, DWORD PTR [eax+ecx]
	mov	eax, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _elem$232912[ebp], edx
	mov	DWORD PTR _elem$232912[ebp+4], eax
	mov	ecx, DWORD PTR _iReductionAmount$[ebp]
	mov	edx, DWORD PTR _elem$232912[ebp+4]
	mov	DWORD PTR [ecx], edx

; 1060 : 		m_ProductionSubtypeWeights.SetWeight(0, 0);

	xor	eax, eax
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR [edx+eax+4], 0

; 1061 : 	}
; 1062 : 
; 1063 : 	else

	jmp	$LN1@SelectProd
$LN4@SelectProd:

; 1064 : 	{
; 1065 : 		// Reduce weight for this subtype based on dividing original weight by <num of this type + 1>
; 1066 : 		int iOldWeight = m_ProductionSubtypeWeights.GetWeight(0);

	mov	DWORD PTR _elem$232929[ebp], 0
	mov	DWORD PTR _elem$232929[ebp+4], 0
	xor	eax, eax
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	ecx, DWORD PTR [edx+eax]
	mov	edx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR _elem$232929[ebp], ecx
	mov	DWORD PTR _elem$232929[ebp+4], edx
	mov	eax, DWORD PTR _elem$232929[ebp+4]
	mov	DWORD PTR _iOldWeight$226283[ebp], eax

; 1067 : 		m_iNumSpecializationsForThisSubtype[(int)iNumSubTypes]++;

	mov	ecx, DWORD PTR _iNumSubTypes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+168]
	add	eax, 1
	mov	ecx, DWORD PTR _iNumSubTypes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+168], eax

; 1068 : 		int iNewWeight = iOldWeight * m_iNumSpecializationsForThisSubtype[(int)iNumSubTypes] / (m_iNumSpecializationsForThisSubtype[(int)iNumSubTypes] + 1);

	mov	eax, DWORD PTR _iNumSubTypes$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iOldWeight$226283[ebp]
	imul	edx, DWORD PTR [ecx+eax*4+168]
	mov	eax, DWORD PTR _iNumSubTypes$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+168]
	add	ecx, 1
	mov	eax, edx
	cdq
	idiv	ecx
	mov	DWORD PTR _iNewWeight$226285[ebp], eax

; 1069 : 		iReductionAmount = iOldWeight - iNewWeight;

	mov	edx, DWORD PTR _iOldWeight$226283[ebp]
	sub	edx, DWORD PTR _iNewWeight$226285[ebp]
	mov	eax, DWORD PTR _iReductionAmount$[ebp]
	mov	DWORD PTR [eax], edx

; 1070 : 		m_ProductionSubtypeWeights.SetWeight(0, iNewWeight);

	xor	ecx, ecx
	shl	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	edx, DWORD PTR _iNewWeight$226285[ebp]
	mov	DWORD PTR [eax+ecx+4], edx
$LN1@SelectProd:

; 1071 : 	}
; 1072 : 
; 1073 : 	return eSpecialization;

	mov	eax, DWORD PTR _eSpecialization$[ebp]

; 1074 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SelectProductionSpecialization@CvCitySpecializationAI@@AAE?AW4CitySpecializationTypes@@AAH@Z ENDP ; CvCitySpecializationAI::SelectProductionSpecialization
_TEXT	ENDS
EXTRN	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ:PROC ; CvGlobals::getNumCitySpecializationInfos
; Function compile flags: /Odtp
;	COMDAT ?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_iI$226292 = -8						; size = 4
_pEntry$ = -4						; size = 4
?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ PROC ; CvCitySpecializationAI::GetWonderSpecialization, COMDAT
; _this$ = ecx

; 1078 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1079 : 	CvCitySpecializationXMLEntry* pEntry;
; 1080 : 
; 1081 : #ifdef AUI_WARNING_FIXES
; 1082 : 	for (uint iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)
; 1083 : #else
; 1084 : 	for(int iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)

	mov	DWORD PTR _iI$226292[ebp], 0
	jmp	SHORT $LN4@GetWonderS
$LN3@GetWonderS:
	mov	eax, DWORD PTR _iI$226292[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226292[ebp], eax
$LN4@GetWonderS:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	DWORD PTR _iI$226292[ebp], eax
	jge	SHORT $LN2@GetWonderS

; 1085 : #endif
; 1086 : 	{
; 1087 : 		pEntry = GC.GetGameCitySpecializations()->GetEntry(iI);

	mov	ecx, DWORD PTR _iI$226292[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, eax
	call	?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z ; CvCitySpecializationXMLEntries::GetEntry
	mov	DWORD PTR _pEntry$[ebp], eax

; 1088 : 		if(pEntry->IsWonder())

	mov	ecx, DWORD PTR _pEntry$[ebp]
	call	?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsWonder
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetWonderS

; 1089 : 		{
; 1090 : 			return (CitySpecializationTypes)iI;

	mov	eax, DWORD PTR _iI$226292[ebp]
	jmp	SHORT $LN5@GetWonderS
$LN1@GetWonderS:

; 1091 : 		}
; 1092 : 	}

	jmp	SHORT $LN3@GetWonderS
$LN2@GetWonderS:

; 1093 : 
; 1094 : 	return (CitySpecializationTypes)-1;

	or	eax, -1
$LN5@GetWonderS:

; 1095 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ENDP ; CvCitySpecializationAI::GetWonderSpecialization
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_iI$226303 = -8						; size = 4
_pEntry$ = -4						; size = 4
?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ PROC ; CvCitySpecializationAI::GetEconomicDefaultSpecialization, COMDAT
; _this$ = ecx

; 1099 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1100 : 	CvCitySpecializationXMLEntry* pEntry;
; 1101 : 
; 1102 : #ifdef AUI_WARNING_FIXES
; 1103 : 	for (uint iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)
; 1104 : #else
; 1105 : 	for(int iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)

	mov	DWORD PTR _iI$226303[ebp], 0
	jmp	SHORT $LN4@GetEconomi
$LN3@GetEconomi:
	mov	eax, DWORD PTR _iI$226303[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226303[ebp], eax
$LN4@GetEconomi:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	DWORD PTR _iI$226303[ebp], eax
	jge	SHORT $LN2@GetEconomi

; 1106 : #endif
; 1107 : 	{
; 1108 : 		pEntry = GC.GetGameCitySpecializations()->GetEntry(iI);

	mov	ecx, DWORD PTR _iI$226303[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, eax
	call	?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z ; CvCitySpecializationXMLEntries::GetEntry
	mov	DWORD PTR _pEntry$[ebp], eax

; 1109 : 		if(pEntry->IsDefault())

	mov	ecx, DWORD PTR _pEntry$[ebp]
	call	?IsDefault@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsDefault
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@GetEconomi

; 1110 : 		{
; 1111 : 			return (CitySpecializationTypes)iI;

	mov	eax, DWORD PTR _iI$226303[ebp]
	jmp	SHORT $LN5@GetEconomi
$LN1@GetEconomi:

; 1112 : 		}
; 1113 : 	}

	jmp	SHORT $LN3@GetEconomi
$LN2@GetEconomi:

; 1114 : 
; 1115 : 	return (CitySpecializationTypes)-1;

	or	eax, -1
$LN5@GetEconomi:

; 1116 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEconomicDefaultSpecialization@CvCitySpecializationAI@@ABE?AW4CitySpecializationTypes@@XZ ENDP ; CvCitySpecializationAI::GetEconomicDefaultSpecialization
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_iI$226315 = -12					; size = 4
_iSubType$ = -8						; size = 4
_pEntry$ = -4						; size = 4
?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ PROC	; CvCitySpecializationAI::GetWonderSubtype, COMDAT
; _this$ = ecx

; 1120 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1121 : 	CvCitySpecializationXMLEntry* pEntry;
; 1122 : 	int iSubType = -1;

	mov	DWORD PTR _iSubType$[ebp], -1

; 1123 : 
; 1124 : #ifdef AUI_WARNING_FIXES
; 1125 : 	for (uint iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)
; 1126 : #else
; 1127 : 	for(int iI = 0; iI < GC.getNumCitySpecializationInfos(); iI++)

	mov	DWORD PTR _iI$226315[ebp], 0
	jmp	SHORT $LN5@GetWonderS@2
$LN4@GetWonderS@2:
	mov	eax, DWORD PTR _iI$226315[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226315[ebp], eax
$LN5@GetWonderS@2:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumCitySpecializationInfos@CvGlobals@@QAEHXZ ; CvGlobals::getNumCitySpecializationInfos
	cmp	DWORD PTR _iI$226315[ebp], eax
	jge	SHORT $LN3@GetWonderS@2

; 1128 : #endif
; 1129 : 	{
; 1130 : 		pEntry = GC.GetGameCitySpecializations()->GetEntry(iI);

	mov	ecx, DWORD PTR _iI$226315[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameCitySpecializations@CvGlobals@@QBEPAVCvCitySpecializationXMLEntries@@XZ ; CvGlobals::GetGameCitySpecializations
	mov	ecx, eax
	call	?GetEntry@CvCitySpecializationXMLEntries@@QAEPAVCvCitySpecializationXMLEntry@@H@Z ; CvCitySpecializationXMLEntries::GetEntry
	mov	DWORD PTR _pEntry$[ebp], eax

; 1131 : 		if(pEntry->GetYieldType() == YIELD_PRODUCTION)

	mov	ecx, DWORD PTR _pEntry$[ebp]
	call	?GetYieldType@CvCitySpecializationXMLEntry@@QBE?AW4YieldTypes@@XZ ; CvCitySpecializationXMLEntry::GetYieldType
	cmp	eax, 1
	jne	SHORT $LN2@GetWonderS@2

; 1132 : 		{
; 1133 : 			iSubType++;

	mov	edx, DWORD PTR _iSubType$[ebp]
	add	edx, 1
	mov	DWORD PTR _iSubType$[ebp], edx
$LN2@GetWonderS@2:

; 1134 : 		}
; 1135 : 		if(pEntry->IsWonder())

	mov	ecx, DWORD PTR _pEntry$[ebp]
	call	?IsWonder@CvCitySpecializationXMLEntry@@QBE_NXZ ; CvCitySpecializationXMLEntry::IsWonder
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@GetWonderS@2

; 1136 : 		{
; 1137 : 			return iSubType;

	mov	eax, DWORD PTR _iSubType$[ebp]
	jmp	SHORT $LN6@GetWonderS@2
$LN1@GetWonderS@2:

; 1138 : 		}
; 1139 : 	}

	jmp	SHORT $LN4@GetWonderS@2
$LN3@GetWonderS@2:

; 1140 : 
; 1141 : 	return iSubType;

	mov	eax, DWORD PTR _iSubType$[ebp]
$LN6@GetWonderS@2:

; 1142 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWonderSubtype@CvCitySpecializationAI@@ABEHXZ ENDP	; CvCitySpecializationAI::GetWonderSubtype
_TEXT	ENDS
EXTRN	?GetWonderProductionModifier@CvCity@@QBEHXZ:PROC ; CvCity::GetWonderProductionModifier
EXTRN	?getCurrentProductionDifference@CvCity@@QBEH_N0@Z:PROC ; CvCity::getCurrentProductionDifference
EXTRN	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z:PROC ; CvCity::canConstruct
; Function compile flags: /Odtp
;	COMDAT ?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T232955 = -32						; size = 4
$T232954 = -28						; size = 4
_iBestProduction$ = -24					; size = 4
_pBestCity$ = -20					; size = 4
_iProduction$ = -16					; size = 4
_pkProductionBuildingInfo$ = -12			; size = 4
_pLoopCity$ = -8					; size = 4
_iLoop$ = -4						; size = 4
?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ PROC ; CvCitySpecializationAI::FindBestWonderCity, COMDAT
; _this$ = ecx

; 1146 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1147 : 	CvCity* pBestCity = NULL;

	mov	DWORD PTR _pBestCity$[ebp], 0

; 1148 : 	CvCity* pLoopCity;
; 1149 : 	int iLoop;
; 1150 : 	int iBestProduction = 0;

	mov	DWORD PTR _iBestProduction$[ebp], 0

; 1151 : 	int iProduction;
; 1152 : 
; 1153 : 	// First, see if we already have a wonder underway somewhere.  If so that's our wonder city
; 1154 : 	pLoopCity = NULL;//GetWonderBuildCity();

	mov	DWORD PTR _pLoopCity$[ebp], 0

; 1155 : 
; 1156 : 	CvBuildingEntry* pkProductionBuildingInfo = NULL;

	mov	DWORD PTR _pkProductionBuildingInfo$[ebp], 0

; 1157 : 	if(pLoopCity != NULL && pLoopCity->getProductionBuilding() != NO_BUILDING)

	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	SHORT $LN12@FindBestWo
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	cmp	eax, -1
	je	SHORT $LN12@FindBestWo

; 1158 : 	{
; 1159 : 		pkProductionBuildingInfo = GC.getBuildingInfo(pLoopCity->getProductionBuilding());

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?getProductionBuilding@CvCity@@QBE?AW4BuildingTypes@@XZ ; CvCity::getProductionBuilding
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingInfo@CvGlobals@@QAEPAVCvBuildingEntry@@W4BuildingTypes@@@Z ; CvGlobals::getBuildingInfo
	mov	DWORD PTR _pkProductionBuildingInfo$[ebp], eax
$LN12@FindBestWo:

; 1160 : 	}
; 1161 : 
; 1162 : 	if(pkProductionBuildingInfo && m_pPlayer->GetWonderProductionAI()->IsWonder(*pkProductionBuildingInfo))

	cmp	DWORD PTR _pkProductionBuildingInfo$[ebp], 0
	je	SHORT $LN11@FindBestWo
	mov	eax, DWORD PTR _pkProductionBuildingInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetWonderProductionAI@CvPlayer@@QBEPAVCvWonderProductionAI@@XZ ; CvPlayer::GetWonderProductionAI
	mov	ecx, eax
	call	?IsWonder@CvWonderProductionAI@@QBE_NABVCvBuildingEntry@@@Z ; CvWonderProductionAI::IsWonder
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@FindBestWo

; 1163 : 	{
; 1164 : 		if(!pLoopCity->IsPuppet())

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?IsPuppet@CvCity@@QBE_NXZ		; CvCity::IsPuppet
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@FindBestWo

; 1165 : 		{
; 1166 : 			return pLoopCity;

	mov	eax, DWORD PTR _pLoopCity$[ebp]
	jmp	$LN13@FindBestWo
$LN10@FindBestWo:

; 1167 : 		}
; 1168 : 	}

	jmp	$LN9@FindBestWo
$LN11@FindBestWo:

; 1169 : 	else if(m_eNextWonderDesired != NO_BUILDING)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+196], -1
	je	$LN9@FindBestWo

; 1170 : 	{
; 1171 : 		for(pLoopCity = m_pPlayer->firstCity(&iLoop); pLoopCity != NULL; pLoopCity = m_pPlayer->nextCity(&iLoop))

	push	0
	lea	edx, DWORD PTR _iLoop$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
	jmp	SHORT $LN7@FindBestWo
$LN6@FindBestWo:
	push	0
	lea	ecx, DWORD PTR _iLoop$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?nextCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::nextCity
	mov	DWORD PTR _pLoopCity$[ebp], eax
$LN7@FindBestWo:
	cmp	DWORD PTR _pLoopCity$[ebp], 0
	je	$LN9@FindBestWo

; 1172 : 		{
; 1173 : 			if(!pLoopCity->IsPuppet())

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?IsPuppet@CvCity@@QBE_NXZ		; CvCity::IsPuppet
	movzx	eax, al
	test	eax, eax
	jne	$LN4@FindBestWo

; 1174 : 			{
; 1175 : 				if(pLoopCity->canConstruct(m_eNextWonderDesired))

	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	push	edx
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?canConstruct@CvCity@@QBE_NW4BuildingTypes@@_N11PAVCvString@@@Z ; CvCity::canConstruct
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@FindBestWo

; 1176 : 				{
; 1177 : 					iProduction = pLoopCity->getCurrentProductionDifference(true, false);

	push	0
	push	1
	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?getCurrentProductionDifference@CvCity@@QBEH_N0@Z ; CvCity::getCurrentProductionDifference
	mov	DWORD PTR _iProduction$[ebp], eax

; 1178 : 					if(pLoopCity->GetCityStrategyAI()->GetDefaultSpecialization() == GetWonderSpecialization())

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetCityStrategyAI@CvCity@@QBEPAVCvCityStrategyAI@@XZ ; CvCity::GetCityStrategyAI
	mov	DWORD PTR $T232954[ebp], eax
	mov	ecx, DWORD PTR $T232954[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR $T232955[ebp], edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetWonderSpecialization@CvCitySpecializationAI@@QBE?AW4CitySpecializationTypes@@XZ ; CvCitySpecializationAI::GetWonderSpecialization
	cmp	DWORD PTR $T232955[ebp], eax
	jne	SHORT $LN2@FindBestWo

; 1179 : 					{
; 1180 : 						iProduction = (iProduction * 3) / 2;

	mov	eax, DWORD PTR _iProduction$[ebp]
	imul	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iProduction$[ebp], eax
$LN2@FindBestWo:

; 1181 : 					}
; 1182 : 
; 1183 : 					// factor in Marble, etc.
; 1184 : 					iProduction = (iProduction * (100 + pLoopCity->GetWonderProductionModifier())) / 100;

	mov	ecx, DWORD PTR _pLoopCity$[ebp]
	call	?GetWonderProductionModifier@CvCity@@QBEHXZ ; CvCity::GetWonderProductionModifier
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iProduction$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iProduction$[ebp], eax

; 1185 : 
; 1186 : 					if(iProduction > iBestProduction)

	mov	edx, DWORD PTR _iProduction$[ebp]
	cmp	edx, DWORD PTR _iBestProduction$[ebp]
	jle	SHORT $LN4@FindBestWo

; 1187 : 					{
; 1188 : 						pBestCity = pLoopCity;

	mov	eax, DWORD PTR _pLoopCity$[ebp]
	mov	DWORD PTR _pBestCity$[ebp], eax

; 1189 : 						iBestProduction = iProduction;

	mov	ecx, DWORD PTR _iProduction$[ebp]
	mov	DWORD PTR _iBestProduction$[ebp], ecx
$LN4@FindBestWo:

; 1190 : 					}
; 1191 : 				}
; 1192 : 			}
; 1193 : 		}

	jmp	$LN6@FindBestWo
$LN9@FindBestWo:

; 1194 : 	}
; 1195 : 
; 1196 : 	return pBestCity;

	mov	eax, DWORD PTR _pBestCity$[ebp]
$LN13@FindBestWo:

; 1197 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindBestWonderCity@CvCitySpecializationAI@@ABEPAVCvCity@@XZ ENDP ; CvCitySpecializationAI::FindBestWonderCity
_TEXT	ENDS
PUBLIC	?LogBestSites@CvCitySpecializationAI@@AAEXXZ	; CvCitySpecializationAI::LogBestSites
PUBLIC	?plotDistance@@YAHHHHH@Z			; plotDistance
EXTRN	?findCity@CvMap@@QAEPAVCvCity@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PBV2@@Z:PROC ; CvMap::findCity
EXTRN	?GetSettlerSiteEvaluator@CvGame@@QAEPAVCvSiteEvaluatorForSettler@@XZ:PROC ; CvGame::GetSettlerSiteEvaluator
; Function compile flags: /Odtp
;	COMDAT ?FindBestSites@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
_this$ = -168						; size = 4
$T233027 = -84						; size = 4
$T233023 = -80						; size = 4
$T233019 = -76						; size = 4
$T233010 = -72						; size = 4
$T233001 = -68						; size = 4
$T232997 = -64						; size = 4
$T232993 = -60						; size = 4
$T232989 = -56						; size = 4
$T232977 = -52						; size = 4
$T232973 = -48						; size = 4
$T232969 = -44						; size = 4
$T232965 = -40						; size = 4
$T232961 = -36						; size = 4
_iI$226361 = -32					; size = 4
_iI$226349 = -28					; size = 4
_pNearestCity$ = -24					; size = 4
_pPlot$ = -20						; size = 4
_pSiteEval$ = -16					; size = 4
_iPlotLoop$ = -12					; size = 4
_iEvalDistance$ = -8					; size = 4
_iPlotValue$ = -4					; size = 4
?FindBestSites@CvCitySpecializationAI@@AAEXXZ PROC	; CvCitySpecializationAI::FindBestSites, COMDAT
; _this$ = ecx

; 1201 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	mov	DWORD PTR _this$[ebp], ecx

; 1202 : 	CvPlot* pPlot;
; 1203 : 	int iPlotValue;
; 1204 : #ifdef AUI_WARNING_FIXES
; 1205 : 	uint iPlotLoop;
; 1206 : #else
; 1207 : 	int iPlotLoop;
; 1208 : #endif
; 1209 : 	CvCity* pNearestCity;
; 1210 : 
; 1211 : 	// Clear output
; 1212 : 	for(int iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$226349[ebp], 0
	jmp	SHORT $LN15@FindBestSi
$LN14@FindBestSi:
	mov	eax, DWORD PTR _iI$226349[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226349[ebp], eax
$LN15@FindBestSi:
	cmp	DWORD PTR _iI$226349[ebp], 3
	jg	SHORT $LN13@FindBestSi

; 1213 : 	{
; 1214 : 		m_iBestValue[iI] = 0;

	mov	ecx, DWORD PTR _iI$226349[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+28], 0

; 1215 : 	}

	jmp	SHORT $LN14@FindBestSi
$LN13@FindBestSi:

; 1216 : 
; 1217 : 	// Found value drops off based on distance, so safe to only look halfway out
; 1218 : 	int iEvalDistance = GC.getSETTLER_EVALUATION_DISTANCE() / 2;

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7252
	mov	DWORD PTR $T232961[ebp], eax
	mov	eax, DWORD PTR $T232961[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _iEvalDistance$[ebp], eax

; 1219 : 
; 1220 : 	CvSiteEvaluatorForSettler* pSiteEval = GC.getGame().GetSettlerSiteEvaluator();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T232965[ebp], ecx
	mov	ecx, DWORD PTR $T232965[ebp]
	call	?GetSettlerSiteEvaluator@CvGame@@QAEPAVCvSiteEvaluatorForSettler@@XZ ; CvGame::GetSettlerSiteEvaluator
	mov	DWORD PTR _pSiteEval$[ebp], eax

; 1221 : 	for(iPlotLoop = 0; iPlotLoop < GC.getMap().numPlots(); iPlotLoop++)

	mov	DWORD PTR _iPlotLoop$[ebp], 0
	jmp	SHORT $LN12@FindBestSi
$LN11@FindBestSi:
	mov	edx, DWORD PTR _iPlotLoop$[ebp]
	add	edx, 1
	mov	DWORD PTR _iPlotLoop$[ebp], edx
$LN12@FindBestSi:
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T232969[ebp], eax
	mov	ecx, DWORD PTR $T232969[ebp]
	mov	edx, DWORD PTR [ecx+4028]
	mov	DWORD PTR $T232973[ebp], edx
	mov	eax, DWORD PTR _iPlotLoop$[ebp]
	cmp	eax, DWORD PTR $T232973[ebp]
	jge	$LN10@FindBestSi

; 1222 : 	{
; 1223 : 		pPlot = GC.getMap().plotByIndexUnchecked(iPlotLoop);

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T232977[ebp], ecx
	mov	edx, DWORD PTR _iPlotLoop$[ebp]
	imul	edx, 484				; 000001e4H
	mov	eax, DWORD PTR $T232977[ebp]
	add	edx, DWORD PTR [eax+4068]
	mov	DWORD PTR _pPlot$[ebp], edx

; 1224 : 
; 1225 : 		if(pSiteEval->CanFound(pPlot, m_pPlayer, true))

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSiteEval$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pSiteEval$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN9@FindBestSi

; 1226 : 		{
; 1227 : 			// Check if within range of any of our cities
; 1228 : 			pNearestCity = GC.getMap().findCity(pPlot->getX(), pPlot->getY(), m_pPlayer->GetID(), NO_TEAM, true /* bSameArea */);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T232989[ebp], ecx
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T232993[ebp], eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T232997[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR $T233001[ebp], eax
	push	0
	push	-1
	push	-1
	push	0
	push	1
	push	-1
	mov	ecx, DWORD PTR $T232989[ebp]
	push	ecx
	mov	edx, DWORD PTR $T232993[ebp]
	push	edx
	mov	eax, DWORD PTR $T232997[ebp]
	push	eax
	mov	ecx, DWORD PTR $T233001[ebp]
	call	?findCity@CvMap@@QAEPAVCvCity@@HHW4PlayerTypes@@W4TeamTypes@@_N21W4DirectionTypes@@PBV2@@Z ; CvMap::findCity
	mov	DWORD PTR _pNearestCity$[ebp], eax

; 1229 : 			if(pNearestCity != NULL)

	cmp	DWORD PTR _pNearestCity$[ebp], 0
	je	$LN9@FindBestSi

; 1230 : 			{
; 1231 : 				if(plotDistance(pPlot->getX(), pPlot->getY(), pNearestCity->getX(), pNearestCity->getY()) <= iEvalDistance)

	mov	ecx, DWORD PTR _pNearestCity$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR $T233010[ebp], edx
	mov	eax, DWORD PTR _pNearestCity$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR $T233019[ebp], ecx
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T233023[ebp], eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T233027[ebp], edx
	mov	eax, DWORD PTR $T233010[ebp]
	push	eax
	mov	ecx, DWORD PTR $T233019[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233023[ebp]
	push	edx
	mov	eax, DWORD PTR $T233027[ebp]
	push	eax
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _iEvalDistance$[ebp]
	jg	SHORT $LN9@FindBestSi

; 1232 : 				{
; 1233 : 					for(int iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$226361[ebp], 0
	jmp	SHORT $LN6@FindBestSi
$LN5@FindBestSi:
	mov	ecx, DWORD PTR _iI$226361[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$226361[ebp], ecx
$LN6@FindBestSi:
	cmp	DWORD PTR _iI$226361[ebp], 3
	jg	SHORT $LN9@FindBestSi

; 1234 : 					{
; 1235 : 						if(iI != YIELD_SCIENCE)

	cmp	DWORD PTR _iI$226361[ebp], 3
	je	SHORT $LN3@FindBestSi

; 1236 : 						{
; 1237 : 							iPlotValue = PlotValueForSpecificYield(pPlot, (YieldTypes)iI);

	mov	edx, DWORD PTR _iI$226361[ebp]
	push	edx
	mov	eax, DWORD PTR _pPlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z ; CvCitySpecializationAI::PlotValueForSpecificYield
	mov	DWORD PTR _iPlotValue$[ebp], eax

; 1238 : 						}
; 1239 : 						else

	jmp	SHORT $LN2@FindBestSi
$LN3@FindBestSi:

; 1240 : 						{
; 1241 : 							iPlotValue = PlotValueForScience(pPlot);

	mov	ecx, DWORD PTR _pPlot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z ; CvCitySpecializationAI::PlotValueForScience
	mov	DWORD PTR _iPlotValue$[ebp], eax
$LN2@FindBestSi:

; 1242 : 						}
; 1243 : 
; 1244 : 						if(iPlotValue > m_iBestValue[iI])

	mov	edx, DWORD PTR _iI$226361[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iPlotValue$[ebp]
	cmp	ecx, DWORD PTR [eax+edx*4+28]
	jle	SHORT $LN1@FindBestSi

; 1245 : 						{
; 1246 : 							m_iBestValue[iI] = iPlotValue;

	mov	edx, DWORD PTR _iI$226361[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iPlotValue$[ebp]
	mov	DWORD PTR [eax+edx*4+28], ecx
$LN1@FindBestSi:

; 1247 : 						}
; 1248 : 					}

	jmp	SHORT $LN5@FindBestSi
$LN9@FindBestSi:

; 1249 : 				}
; 1250 : 			}
; 1251 : 		}
; 1252 : 	}

	jmp	$LN11@FindBestSi
$LN10@FindBestSi:

; 1253 : 
; 1254 : 	LogBestSites();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LogBestSites@CvCitySpecializationAI@@AAEXXZ ; CvCitySpecializationAI::LogBestSites

; 1255 : 
; 1256 : 	return;
; 1257 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindBestSites@CvCitySpecializationAI@@AAEXXZ ENDP	; CvCitySpecializationAI::FindBestSites
_TEXT	ENDS
PUBLIC	?dyWrap@@YAHH@Z					; dyWrap
PUBLIC	?dxWrap@@YAHH@Z					; dxWrap
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
;	COMDAT ?plotDistance@@YAHHHHH@Z
_TEXT	SEGMENT
tv157 = -92						; size = 4
tv138 = -88						; size = 4
tv135 = -84						; size = 4
$T233196 = -80						; size = 4
$T233169 = -60						; size = 4
_iDY$ = -24						; size = 4
_iDX$ = -20						; size = 4
_iWrappedDX$ = -16					; size = 4
_iHX1$ = -12						; size = 4
_iHX2$ = -8						; size = 4
_iWrappedDY$ = -4					; size = 4
_iX1$ = 8						; size = 4
_iY1$ = 12						; size = 4
_iX2$ = 16						; size = 4
_iY2$ = 20						; size = 4
?plotDistance@@YAHHHHH@Z PROC				; plotDistance, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH

; 145  : 	int iDX;
; 146  : 	int iWrappedDX = dxWrap(iX2 - iX1);

	mov	eax, DWORD PTR _iX2$[ebp]
	sub	eax, DWORD PTR _iX1$[ebp]
	push	eax
	call	?dxWrap@@YAHH@Z				; dxWrap
	add	esp, 4
	mov	DWORD PTR _iWrappedDX$[ebp], eax

; 147  : 	int iWrappedDY = dyWrap(iY2 - iY1);

	mov	ecx, DWORD PTR _iY2$[ebp]
	sub	ecx, DWORD PTR _iY1$[ebp]
	push	ecx
	call	?dyWrap@@YAHH@Z				; dyWrap
	add	esp, 4
	mov	DWORD PTR _iWrappedDY$[ebp], eax

; 148  : 	int iDY = abs(iWrappedDY);

	mov	eax, DWORD PTR _iWrappedDY$[ebp]
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDY$[ebp], eax

; 149  : 
; 150  : 	// convert to hex-space coordinates - the coordinate system axes are E and NE (not orthogonal)
; 151  : 	int iHX1 = xToHexspaceX(iX1, iY1);

	cmp	DWORD PTR _iY1$[ebp], 0
	jl	SHORT $LN35@plotDistan
	mov	edx, DWORD PTR _iY1$[ebp]
	sar	edx, 1
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN33@plotDistan
$LN35@plotDistan:
	mov	eax, DWORD PTR _iY1$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv135[ebp], eax
$LN33@plotDistan:
	mov	eax, DWORD PTR _iX1$[ebp]
	sub	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR _iHX1$[ebp], eax

; 152  : 	int iHX2 = xToHexspaceX(iX1 + iWrappedDX, iY1 + iWrappedDY);

	mov	ecx, DWORD PTR _iY1$[ebp]
	add	ecx, DWORD PTR _iWrappedDY$[ebp]
	mov	DWORD PTR $T233169[ebp], ecx
	js	SHORT $LN39@plotDistan
	mov	edx, DWORD PTR $T233169[ebp]
	sar	edx, 1
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN37@plotDistan
$LN39@plotDistan:
	mov	eax, DWORD PTR $T233169[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR tv138[ebp], eax
$LN37@plotDistan:
	mov	eax, DWORD PTR _iX1$[ebp]
	add	eax, DWORD PTR _iWrappedDX$[ebp]
	sub	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR _iHX2$[ebp], eax

; 153  : 
; 154  : 	iDX = abs(dxWrap(iHX2 - iHX1));

	mov	ecx, DWORD PTR _iHX2$[ebp]
	sub	ecx, DWORD PTR _iHX1$[ebp]
	push	ecx
	call	?dxWrap@@YAHH@Z				; dxWrap
	add	esp, 4
	cdq
	xor	eax, edx
	sub	eax, edx
	mov	DWORD PTR _iDX$[ebp], eax

; 155  : 
; 156  : #ifdef NQM_GAME_CORE_UTILS_OPTIMIZATIONS
; 157  : 	if (((iHX2 - iHX1) ^ (iWrappedDY)) >= 0)  // the signs match
; 158  : #else
; 159  : 	if((iHX2 - iHX1 >= 0) == (iWrappedDY >= 0))  // the signs match

	mov	edx, DWORD PTR _iHX2$[ebp]
	sub	edx, DWORD PTR _iHX1$[ebp]
	xor	eax, eax
	test	edx, edx
	setge	al
	xor	ecx, ecx
	cmp	DWORD PTR _iWrappedDY$[ebp], 0
	setge	cl
	cmp	eax, ecx
	jne	SHORT $LN2@plotDistan

; 160  : #endif
; 161  : 	{
; 162  : 		return iDX + iDY;

	mov	eax, DWORD PTR _iDX$[ebp]
	add	eax, DWORD PTR _iDY$[ebp]
	jmp	SHORT $LN3@plotDistan

; 163  : 	}
; 164  : 	else

	jmp	SHORT $LN3@plotDistan
$LN2@plotDistan:

; 165  : 	{
; 166  : #ifdef NQM_FAST_COMP
; 167  : 		return (MAX(iDX, iDY));
; 168  : #else
; 169  : 		return (std::max(iDX, iDY));

	mov	edx, DWORD PTR _iDX$[ebp]
	cmp	edx, DWORD PTR _iDY$[ebp]
	jge	SHORT $LN57@plotDistan
	lea	eax, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN58@plotDistan
$LN57@plotDistan:
	lea	ecx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR tv157[ebp], ecx
$LN58@plotDistan:
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR $T233196[ebp], edx
	mov	eax, DWORD PTR $T233196[ebp]
	mov	eax, DWORD PTR [eax]
$LN3@plotDistan:

; 170  : #endif
; 171  : 	}
; 172  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?plotDistance@@YAHHHHH@Z ENDP				; plotDistance
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dxWrap@@YAHH@Z
_TEXT	SEGMENT
$T233219 = -16						; size = 4
$T233211 = -12						; size = 4
$T233207 = -5						; size = 1
_kMap$ = -4						; size = 4
_iDX$ = 8						; size = 4
?dxWrap@@YAHH@Z PROC					; dxWrap, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 74   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _kMap$[ebp], eax

; 75   : 	return wrapCoordDifference(iDX, kMap.getGridWidth(), kMap.isWrapX());

	mov	ecx, DWORD PTR _kMap$[ebp]
	mov	dl, BYTE PTR [ecx+4056]
	mov	BYTE PTR $T233207[ebp], dl
	mov	eax, DWORD PTR _kMap$[ebp]
	mov	ecx, DWORD PTR [eax+4020]
	mov	DWORD PTR $T233211[ebp], ecx
	movzx	edx, BYTE PTR $T233207[ebp]
	test	edx, edx
	je	SHORT $LN12@dxWrap
	mov	eax, DWORD PTR $T233211[ebp]
	shr	eax, 1
	cmp	DWORD PTR _iDX$[ebp], eax
	jle	SHORT $LN11@dxWrap
	mov	ecx, DWORD PTR _iDX$[ebp]
	sub	ecx, DWORD PTR $T233211[ebp]
	mov	DWORD PTR $T233219[ebp], ecx
	jmp	SHORT $LN13@dxWrap
	jmp	SHORT $LN12@dxWrap
$LN11@dxWrap:
	mov	edx, DWORD PTR $T233211[ebp]
	shr	edx, 1
	neg	edx
	cmp	DWORD PTR _iDX$[ebp], edx
	jge	SHORT $LN12@dxWrap
	mov	eax, DWORD PTR _iDX$[ebp]
	add	eax, DWORD PTR $T233211[ebp]
	mov	DWORD PTR $T233219[ebp], eax
	jmp	SHORT $LN13@dxWrap
$LN12@dxWrap:
	mov	ecx, DWORD PTR _iDX$[ebp]
	mov	DWORD PTR $T233219[ebp], ecx
$LN13@dxWrap:
	mov	eax, DWORD PTR $T233219[ebp]

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?dxWrap@@YAHH@Z ENDP					; dxWrap
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?dyWrap@@YAHH@Z
_TEXT	SEGMENT
$T233240 = -16						; size = 4
$T233232 = -12						; size = 4
$T233228 = -5						; size = 1
_kMap$ = -4						; size = 4
_iDY$ = 8						; size = 4
?dyWrap@@YAHH@Z PROC					; dyWrap, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 80   : 	const CvMap& kMap = GC.getMap();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+52
	mov	DWORD PTR _kMap$[ebp], eax

; 81   : 	return wrapCoordDifference(iDY, kMap.getGridHeight(), kMap.isWrapY());

	mov	ecx, DWORD PTR _kMap$[ebp]
	mov	dl, BYTE PTR [ecx+4057]
	mov	BYTE PTR $T233228[ebp], dl
	mov	eax, DWORD PTR _kMap$[ebp]
	mov	ecx, DWORD PTR [eax+4024]
	mov	DWORD PTR $T233232[ebp], ecx
	movzx	edx, BYTE PTR $T233228[ebp]
	test	edx, edx
	je	SHORT $LN12@dyWrap
	mov	eax, DWORD PTR $T233232[ebp]
	shr	eax, 1
	cmp	DWORD PTR _iDY$[ebp], eax
	jle	SHORT $LN11@dyWrap
	mov	ecx, DWORD PTR _iDY$[ebp]
	sub	ecx, DWORD PTR $T233232[ebp]
	mov	DWORD PTR $T233240[ebp], ecx
	jmp	SHORT $LN13@dyWrap
	jmp	SHORT $LN12@dyWrap
$LN11@dyWrap:
	mov	edx, DWORD PTR $T233232[ebp]
	shr	edx, 1
	neg	edx
	cmp	DWORD PTR _iDY$[ebp], edx
	jge	SHORT $LN12@dyWrap
	mov	eax, DWORD PTR _iDY$[ebp]
	add	eax, DWORD PTR $T233232[ebp]
	mov	DWORD PTR $T233240[ebp], eax
	jmp	SHORT $LN13@dyWrap
$LN12@dyWrap:
	mov	ecx, DWORD PTR _iDY$[ebp]
	mov	DWORD PTR $T233240[ebp], ecx
$LN13@dyWrap:
	mov	eax, DWORD PTR $T233240[ebp]

; 82   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?dyWrap@@YAHH@Z ENDP					; dyWrap
_TEXT	ENDS
EXTRN	?isOwned@CvPlot@@QBE_NXZ:PROC			; CvPlot::isOwned
EXTRN	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z:PROC	; CvPlot::getYield
EXTRN	?plotCity@@YAPAVCvPlot@@HHH@Z:PROC		; plotCity
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
;	COMDAT ?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z
_TEXT	SEGMENT
_this$ = -156						; size = 4
$T233292 = -72						; size = 4
$T233288 = -68						; size = 4
$T233284 = -64						; size = 4
$T233280 = -60						; size = 4
$T233276 = -56						; size = 4
$T233267 = -52						; size = 4
$T233263 = -48						; size = 4
$T233259 = -44						; size = 4
$T233255 = -40						; size = 4
_iDistance$226389 = -36					; size = 4
_pLoopPlot$226385 = -32					; size = 4
_iI$226380 = -28					; size = 4
_iTotalPotentialYield$ = -24				; size = 4
_iSecondRingMultiplier$ = -20				; size = 4
_iPotentialYield$ = -16					; size = 4
_iFirstRingMultiplier$ = -12				; size = 4
_iMultiplier$ = -8					; size = 4
_iThirdRingMultiplier$ = -4				; size = 4
_pPlot$ = 8						; size = 4
_eYield$ = 12						; size = 4
?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z PROC ; CvCitySpecializationAI::PlotValueForSpecificYield, COMDAT
; _this$ = ecx

; 1261 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	DWORD PTR _this$[ebp], ecx

; 1262 : 	int iTotalPotentialYield = 0;

	mov	DWORD PTR _iTotalPotentialYield$[ebp], 0

; 1263 : 	int iMultiplier = 0;

	mov	DWORD PTR _iMultiplier$[ebp], 0

; 1264 : 	int iPotentialYield = 0;

	mov	DWORD PTR _iPotentialYield$[ebp], 0

; 1265 : 	int iFirstRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2304
	mov	DWORD PTR _iFirstRingMultiplier$[ebp], eax

; 1266 : 	int iSecondRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2308
	mov	DWORD PTR _iSecondRingMultiplier$[ebp], ecx

; 1267 : 	int iThirdRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2312
	mov	DWORD PTR _iThirdRingMultiplier$[ebp], edx

; 1268 : 
; 1269 : 	// Evaluate potential from plots not currently being worked
; 1270 : 	for(int iI = 0; iI < GC.getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED(); iI++)

	mov	DWORD PTR _iI$226380[ebp], 0
	jmp	SHORT $LN12@PlotValueF
$LN11@PlotValueF:
	mov	eax, DWORD PTR _iI$226380[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226380[ebp], eax
$LN12@PlotValueF:
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2316
	mov	DWORD PTR $T233255[ebp], ecx
	mov	edx, DWORD PTR _iI$226380[ebp]
	cmp	edx, DWORD PTR $T233255[ebp]
	jge	$LN10@PlotValueF

; 1271 : 	{
; 1272 : 		if(iI != CITY_HOME_PLOT)

	cmp	DWORD PTR _iI$226380[ebp], 0
	je	$LN9@PlotValueF

; 1273 : 		{
; 1274 : 			CvPlot* pLoopPlot = plotCity(pPlot->getX(), pPlot->getY(), iI);

	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T233259[ebp], ecx
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR $T233263[ebp], eax
	mov	ecx, DWORD PTR _iI$226380[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233259[ebp]
	push	edx
	mov	eax, DWORD PTR $T233263[ebp]
	push	eax
	call	?plotCity@@YAPAVCvPlot@@HHH@Z		; plotCity
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pLoopPlot$226385[ebp], eax

; 1275 : 			if(pLoopPlot != NULL)

	cmp	DWORD PTR _pLoopPlot$226385[ebp], 0
	je	$LN9@PlotValueF

; 1276 : 			{
; 1277 : 				iPotentialYield = pLoopPlot->getYield(eYield);

	mov	ecx, DWORD PTR _eYield$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pLoopPlot$226385[ebp]
	call	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z	; CvPlot::getYield
	mov	DWORD PTR _iPotentialYield$[ebp], eax

; 1278 : 
; 1279 : 				// If owned by someone else, not worth anything
; 1280 : 				if(pLoopPlot->isOwned() && pLoopPlot->getOwner() != m_pPlayer->GetID())

	mov	ecx, DWORD PTR _pLoopPlot$226385[ebp]
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@PlotValueF
	mov	eax, DWORD PTR _pLoopPlot$226385[ebp]
	movsx	ecx, BYTE PTR [eax+4]
	mov	DWORD PTR $T233267[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T233276[ebp], ecx
	mov	edx, DWORD PTR $T233267[ebp]
	cmp	edx, DWORD PTR $T233276[ebp]
	je	SHORT $LN7@PlotValueF

; 1281 : 				{
; 1282 : 					iMultiplier = 0;

	mov	DWORD PTR _iMultiplier$[ebp], 0

; 1283 : 				}
; 1284 : 				else

	jmp	SHORT $LN6@PlotValueF
$LN7@PlotValueF:

; 1285 : 				{
; 1286 : 					int iDistance = plotDistance(pLoopPlot->getX(), pLoopPlot->getY(), pPlot->getX(), pPlot->getY());

	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T233280[ebp], ecx
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR $T233284[ebp], eax
	mov	ecx, DWORD PTR _pLoopPlot$226385[ebp]
	movsx	edx, WORD PTR [ecx+2]
	mov	DWORD PTR $T233288[ebp], edx
	mov	eax, DWORD PTR _pLoopPlot$226385[ebp]
	movsx	ecx, WORD PTR [eax]
	mov	DWORD PTR $T233292[ebp], ecx
	mov	edx, DWORD PTR $T233280[ebp]
	push	edx
	mov	eax, DWORD PTR $T233284[ebp]
	push	eax
	mov	ecx, DWORD PTR $T233288[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233292[ebp]
	push	edx
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iDistance$226389[ebp], eax

; 1287 : 					if(iDistance == 1)

	cmp	DWORD PTR _iDistance$226389[ebp], 1
	jne	SHORT $LN5@PlotValueF

; 1288 : 					{
; 1289 : 						iMultiplier = iFirstRingMultiplier;

	mov	eax, DWORD PTR _iFirstRingMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
	jmp	SHORT $LN6@PlotValueF
$LN5@PlotValueF:

; 1290 : 					}
; 1291 : 					else if(iDistance == 2)

	cmp	DWORD PTR _iDistance$226389[ebp], 2
	jne	SHORT $LN3@PlotValueF

; 1292 : 					{
; 1293 : 						iMultiplier = iSecondRingMultiplier;

	mov	ecx, DWORD PTR _iSecondRingMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], ecx
	jmp	SHORT $LN6@PlotValueF
$LN3@PlotValueF:

; 1294 : 					}
; 1295 : 					else if(iDistance == 3)

	cmp	DWORD PTR _iDistance$226389[ebp], 3
	jne	SHORT $LN6@PlotValueF

; 1296 : 					{
; 1297 : 						iMultiplier = iThirdRingMultiplier;

	mov	edx, DWORD PTR _iThirdRingMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], edx
$LN6@PlotValueF:

; 1298 : 					}
; 1299 : 				}
; 1300 : 				iTotalPotentialYield += iPotentialYield * iMultiplier;

	mov	eax, DWORD PTR _iPotentialYield$[ebp]
	imul	eax, DWORD PTR _iMultiplier$[ebp]
	add	eax, DWORD PTR _iTotalPotentialYield$[ebp]
	mov	DWORD PTR _iTotalPotentialYield$[ebp], eax
$LN9@PlotValueF:

; 1301 : 			}
; 1302 : 		}
; 1303 : 	}

	jmp	$LN11@PlotValueF
$LN10@PlotValueF:

; 1304 : 
; 1305 : 	return iTotalPotentialYield;

	mov	eax, DWORD PTR _iTotalPotentialYield$[ebp]

; 1306 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?PlotValueForSpecificYield@CvCitySpecializationAI@@AAEHPAVCvPlot@@W4YieldTypes@@@Z ENDP ; CvCitySpecializationAI::PlotValueForSpecificYield
_TEXT	ENDS
EXTRN	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ:PROC ; CvPlot::getImprovementType
EXTRN	?getResourceType@CvPlot@@QBE?AW4ResourceTypes@@W4TeamTypes@@@Z:PROC ; CvPlot::getResourceType
; Function compile flags: /Odtp
;	COMDAT ?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z
_TEXT	SEGMENT
_this$ = -168						; size = 4
$T233441 = -84						; size = 4
$T233437 = -80						; size = 4
$T233433 = -76						; size = 4
$T233429 = -72						; size = 4
$T233425 = -68						; size = 4
$T233416 = -64						; size = 4
_f$233406 = -57						; size = 1
$T233400 = -56						; size = 4
$T233396 = -52						; size = 4
$T233392 = -48						; size = 4
_iDistance$226420 = -44					; size = 4
_pLoopPlot$226412 = -40					; size = 4
_bIsClear$226410 = -33					; size = 1
_iI$226406 = -32					; size = 4
_iSecondRingMultiplier$ = -28				; size = 4
_iTotalClearTileWeight$ = -24				; size = 4
_iTotalFoodYield$ = -20					; size = 4
_iPotentialYield$ = -16					; size = 4
_iFirstRingMultiplier$ = -12				; size = 4
_iMultiplier$ = -8					; size = 4
_iThirdRingMultiplier$ = -4				; size = 4
_pPlot$ = 8						; size = 4
?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z PROC ; CvCitySpecializationAI::PlotValueForScience, COMDAT
; _this$ = ecx

; 1310 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1311 : 	// Roughly half of weight comes from food yield
; 1312 : 	// The other half will be are there open tiles we can easily build schools on
; 1313 : 	int iTotalFoodYield = 0;

	mov	DWORD PTR _iTotalFoodYield$[ebp], 0

; 1314 : 	int iTotalClearTileWeight = 0;

	mov	DWORD PTR _iTotalClearTileWeight$[ebp], 0

; 1315 : 	int iMultiplier = 0;

	mov	DWORD PTR _iMultiplier$[ebp], 0

; 1316 : 	int iPotentialYield = 0;

	mov	DWORD PTR _iPotentialYield$[ebp], 0

; 1317 : 	int iFirstRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_FIRST_RING();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2304
	mov	DWORD PTR _iFirstRingMultiplier$[ebp], eax

; 1318 : 	int iSecondRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_SECOND_RING();

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2308
	mov	DWORD PTR _iSecondRingMultiplier$[ebp], ecx

; 1319 : 	int iThirdRingMultiplier = GC.getAI_CITY_SPECIALIZATION_YIELD_WEIGHT_THIRD_RING();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2312
	mov	DWORD PTR _iThirdRingMultiplier$[ebp], edx

; 1320 : 
; 1321 : 	// Evaluate potential from plots not currently being worked
; 1322 : 	for(int iI = 0; iI < GC.getAI_CITY_SPECIALIZATION_YIELD_NUM_TILES_CONSIDERED(); iI++)

	mov	DWORD PTR _iI$226406[ebp], 0
	jmp	SHORT $LN17@PlotValueF@2
$LN16@PlotValueF@2:
	mov	eax, DWORD PTR _iI$226406[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226406[ebp], eax
$LN17@PlotValueF@2:
	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+2316
	mov	DWORD PTR $T233392[ebp], ecx
	mov	edx, DWORD PTR _iI$226406[ebp]
	cmp	edx, DWORD PTR $T233392[ebp]
	jge	$LN15@PlotValueF@2

; 1323 : 	{
; 1324 : 		bool bIsClear = false;

	mov	BYTE PTR _bIsClear$226410[ebp], 0

; 1325 : 
; 1326 : 		if(iI != CITY_HOME_PLOT)

	cmp	DWORD PTR _iI$226406[ebp], 0
	je	$LN14@PlotValueF@2

; 1327 : 		{
; 1328 : 			CvPlot* pLoopPlot = plotCity(pPlot->getX(), pPlot->getY(), iI);

	mov	eax, DWORD PTR _pPlot$[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T233396[ebp], ecx
	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR $T233400[ebp], eax
	mov	ecx, DWORD PTR _iI$226406[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233396[ebp]
	push	edx
	mov	eax, DWORD PTR $T233400[ebp]
	push	eax
	call	?plotCity@@YAPAVCvPlot@@HHH@Z		; plotCity
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pLoopPlot$226412[ebp], eax

; 1329 : 			if(pLoopPlot != NULL)

	cmp	DWORD PTR _pLoopPlot$226412[ebp], 0
	je	$LN14@PlotValueF@2

; 1330 : 			{
; 1331 : 				if(pLoopPlot->getResourceType() == NO_RESOURCE)

	push	-1
	mov	ecx, DWORD PTR _pLoopPlot$226412[ebp]
	call	?getResourceType@CvPlot@@QBE?AW4ResourceTypes@@W4TeamTypes@@@Z ; CvPlot::getResourceType
	cmp	eax, -1
	jne	SHORT $LN12@PlotValueF@2

; 1332 : 				{
; 1333 : 					if(pLoopPlot->getFeatureType() == NO_FEATURE)

	mov	ecx, DWORD PTR _pLoopPlot$226412[ebp]
	mov	dl, BYTE PTR [ecx+432]
	mov	BYTE PTR _f$233406[ebp], dl
	movsx	eax, BYTE PTR _f$233406[ebp]
	cmp	eax, -1
	jne	SHORT $LN12@PlotValueF@2

; 1334 : 					{
; 1335 : 						if(!pLoopPlot->isHills())

	mov	ecx, DWORD PTR _pLoopPlot$226412[ebp]
	movsx	edx, BYTE PTR [ecx+5]
	sub	edx, 1
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN12@PlotValueF@2

; 1336 : 						{
; 1337 : 							if(pLoopPlot->getImprovementType() == NO_IMPROVEMENT)

	mov	ecx, DWORD PTR _pLoopPlot$226412[ebp]
	call	?getImprovementType@CvPlot@@QBE?AW4ImprovementTypes@@XZ ; CvPlot::getImprovementType
	cmp	eax, -1
	jne	SHORT $LN12@PlotValueF@2

; 1338 : 							{
; 1339 : 								bIsClear = true;

	mov	BYTE PTR _bIsClear$226410[ebp], 1
$LN12@PlotValueF@2:

; 1340 : 							}
; 1341 : 						}
; 1342 : 					}
; 1343 : 				}
; 1344 : 
; 1345 : 				iPotentialYield = pLoopPlot->getYield(YIELD_FOOD) + pLoopPlot->getYield(YIELD_SCIENCE);

	push	0
	mov	ecx, DWORD PTR _pLoopPlot$226412[ebp]
	call	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z	; CvPlot::getYield
	mov	esi, eax
	push	3
	mov	ecx, DWORD PTR _pLoopPlot$226412[ebp]
	call	?getYield@CvPlot@@QBEHW4YieldTypes@@@Z	; CvPlot::getYield
	add	esi, eax
	mov	DWORD PTR _iPotentialYield$[ebp], esi

; 1346 : 
; 1347 : 				// If owned by someone else, not worth anything
; 1348 : 				if(pLoopPlot->isOwned() && pLoopPlot->getOwner() != m_pPlayer->GetID())

	mov	ecx, DWORD PTR _pLoopPlot$226412[ebp]
	call	?isOwned@CvPlot@@QBE_NXZ		; CvPlot::isOwned
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@PlotValueF@2
	mov	edx, DWORD PTR _pLoopPlot$226412[ebp]
	movsx	eax, BYTE PTR [edx+4]
	mov	DWORD PTR $T233416[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR $T233425[ebp], eax
	mov	ecx, DWORD PTR $T233416[ebp]
	cmp	ecx, DWORD PTR $T233425[ebp]
	je	SHORT $LN8@PlotValueF@2

; 1349 : 				{
; 1350 : 					iMultiplier = 0;

	mov	DWORD PTR _iMultiplier$[ebp], 0

; 1351 : 				}
; 1352 : 				else

	jmp	SHORT $LN7@PlotValueF@2
$LN8@PlotValueF@2:

; 1353 : 				{
; 1354 : 					int iDistance = plotDistance(pLoopPlot->getX(), pLoopPlot->getY(), pPlot->getX(), pPlot->getY());

	mov	edx, DWORD PTR _pPlot$[ebp]
	movsx	eax, WORD PTR [edx+2]
	mov	DWORD PTR $T233429[ebp], eax
	mov	ecx, DWORD PTR _pPlot$[ebp]
	movsx	edx, WORD PTR [ecx]
	mov	DWORD PTR $T233433[ebp], edx
	mov	eax, DWORD PTR _pLoopPlot$226412[ebp]
	movsx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR $T233437[ebp], ecx
	mov	edx, DWORD PTR _pLoopPlot$226412[ebp]
	movsx	eax, WORD PTR [edx]
	mov	DWORD PTR $T233441[ebp], eax
	mov	ecx, DWORD PTR $T233429[ebp]
	push	ecx
	mov	edx, DWORD PTR $T233433[ebp]
	push	edx
	mov	eax, DWORD PTR $T233437[ebp]
	push	eax
	mov	ecx, DWORD PTR $T233441[ebp]
	push	ecx
	call	?plotDistance@@YAHHHHH@Z		; plotDistance
	add	esp, 16					; 00000010H
	mov	DWORD PTR _iDistance$226420[ebp], eax

; 1355 : 					if(iDistance == 1)

	cmp	DWORD PTR _iDistance$226420[ebp], 1
	jne	SHORT $LN6@PlotValueF@2

; 1356 : 					{
; 1357 : 						iMultiplier = iFirstRingMultiplier;

	mov	edx, DWORD PTR _iFirstRingMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], edx
	jmp	SHORT $LN7@PlotValueF@2
$LN6@PlotValueF@2:

; 1358 : 					}
; 1359 : 					else if(iDistance == 2)

	cmp	DWORD PTR _iDistance$226420[ebp], 2
	jne	SHORT $LN4@PlotValueF@2

; 1360 : 					{
; 1361 : 						iMultiplier = iSecondRingMultiplier;

	mov	eax, DWORD PTR _iSecondRingMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], eax
	jmp	SHORT $LN7@PlotValueF@2
$LN4@PlotValueF@2:

; 1362 : 					}
; 1363 : 					else if(iDistance == 3)

	cmp	DWORD PTR _iDistance$226420[ebp], 3
	jne	SHORT $LN7@PlotValueF@2

; 1364 : 					{
; 1365 : 						iMultiplier = iThirdRingMultiplier;

	mov	ecx, DWORD PTR _iThirdRingMultiplier$[ebp]
	mov	DWORD PTR _iMultiplier$[ebp], ecx
$LN7@PlotValueF@2:

; 1366 : 					}
; 1367 : 				}
; 1368 : 
; 1369 : 				iTotalFoodYield += iPotentialYield * iMultiplier;

	mov	edx, DWORD PTR _iPotentialYield$[ebp]
	imul	edx, DWORD PTR _iMultiplier$[ebp]
	add	edx, DWORD PTR _iTotalFoodYield$[ebp]
	mov	DWORD PTR _iTotalFoodYield$[ebp], edx

; 1370 : 				if(bIsClear)

	movzx	eax, BYTE PTR _bIsClear$226410[ebp]
	test	eax, eax
	je	SHORT $LN14@PlotValueF@2

; 1371 : 				{
; 1372 : 					iTotalClearTileWeight += iMultiplier;

	mov	ecx, DWORD PTR _iTotalClearTileWeight$[ebp]
	add	ecx, DWORD PTR _iMultiplier$[ebp]
	mov	DWORD PTR _iTotalClearTileWeight$[ebp], ecx
$LN14@PlotValueF@2:

; 1373 : 				}
; 1374 : 			}
; 1375 : 		}
; 1376 : 	}

	jmp	$LN16@PlotValueF@2
$LN15@PlotValueF@2:

; 1377 : 
; 1378 : 	return iTotalFoodYield + iTotalClearTileWeight;

	mov	eax, DWORD PTR _iTotalFoodYield$[ebp]
	add	eax, DWORD PTR _iTotalClearTileWeight$[ebp]

; 1379 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?PlotValueForScience@CvCitySpecializationAI@@AAEHPAVCvPlot@@@Z ENDP ; CvCitySpecializationAI::PlotValueForScience
_TEXT	ENDS
EXTRN	?getDomainFreeExperience@CvCity@@QBEHW4DomainTypes@@@Z:PROC ; CvCity::getDomainFreeExperience
EXTRN	?getMaxFoodKeptPercent@CvCity@@QBEHXZ:PROC	; CvCity::getMaxFoodKeptPercent
EXTRN	?GetBaseYieldRateFromBuildings@CvCity@@QBEHW4YieldTypes@@@Z:PROC ; CvCity::GetBaseYieldRateFromBuildings
EXTRN	?GetNumReligionsWithFollowers@CvCityReligions@@QAEHXZ:PROC ; CvCityReligions::GetNumReligionsWithFollowers
EXTRN	?GetCityReligions@CvCity@@QBEPAVCvCityReligions@@XZ:PROC ; CvCity::GetCityReligions
EXTRN	?GetYieldPerReligionTimes100@CvCity@@QBEHW4YieldTypes@@@Z:PROC ; CvCity::GetYieldPerReligionTimes100
EXTRN	?GetYieldPerPopTimes100@CvCity@@QBEHW4YieldTypes@@@Z:PROC ; CvCity::GetYieldPerPopTimes100
EXTRN	?getYieldRateModifier@CvCity@@QBEHW4YieldTypes@@@Z:PROC ; CvCity::getYieldRateModifier
; Function compile flags: /Odtp
;	COMDAT ?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z
_TEXT	SEGMENT
tv129 = -28						; size = 4
_this$ = -24						; size = 4
_iMaxFoodKeptPercent$226445 = -20			; size = 4
_iRtnValue$ = -16					; size = 4
_iYieldPerReligion$ = -12				; size = 4
_iYieldPerPop$ = -8					; size = 4
_iYieldChanges$ = -4					; size = 4
_pCity$ = 8						; size = 4
_eYield$ = 12						; size = 4
_iInitialValue$ = 16					; size = 4
?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z PROC ; CvCitySpecializationAI::AdjustValueBasedOnBuildings, COMDAT
; _this$ = ecx

; 1383 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1384 : 	int iRtnValue;
; 1385 : 
; 1386 : 	// Everything looks at yield modifier
; 1387 : 	iRtnValue = iInitialValue * (100 + pCity->getYieldRateModifier(eYield)) / 100;

	mov	eax, DWORD PTR _eYield$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getYieldRateModifier@CvCity@@QBEHW4YieldTypes@@@Z ; CvCity::getYieldRateModifier
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iInitialValue$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 1388 : 
; 1389 : 	// ... and yield per pop
; 1390 : 	int iYieldPerPop = pCity->GetYieldPerPopTimes100(eYield);

	mov	edx, DWORD PTR _eYield$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetYieldPerPopTimes100@CvCity@@QBEHW4YieldTypes@@@Z ; CvCity::GetYieldPerPopTimes100
	mov	DWORD PTR _iYieldPerPop$[ebp], eax

; 1391 : 	if(iYieldPerPop > 0)

	cmp	DWORD PTR _iYieldPerPop$[ebp], 0
	jle	SHORT $LN11@AdjustValu

; 1392 : 	{
; 1393 : 		iRtnValue = iRtnValue * (100 + iYieldPerPop) / 100;

	mov	eax, DWORD PTR _iYieldPerPop$[ebp]
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iRtnValue$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN11@AdjustValu:

; 1394 : 	}
; 1395 : 
; 1396 : 	// ... and yield per pop
; 1397 : 	int iYieldPerReligion = pCity->GetYieldPerReligionTimes100(eYield);

	mov	edx, DWORD PTR _eYield$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetYieldPerReligionTimes100@CvCity@@QBEHW4YieldTypes@@@Z ; CvCity::GetYieldPerReligionTimes100
	mov	DWORD PTR _iYieldPerReligion$[ebp], eax

; 1398 : 	if(iYieldPerPop > 0)

	cmp	DWORD PTR _iYieldPerPop$[ebp], 0
	jle	SHORT $LN10@AdjustValu

; 1399 : 	{
; 1400 : 		iRtnValue = iRtnValue * (100 + (iYieldPerReligion * pCity->GetCityReligions()->GetNumReligionsWithFollowers())) / 100;

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetCityReligions@CvCity@@QBEPAVCvCityReligions@@XZ ; CvCity::GetCityReligions
	mov	ecx, eax
	call	?GetNumReligionsWithFollowers@CvCityReligions@@QAEHXZ ; CvCityReligions::GetNumReligionsWithFollowers
	imul	eax, DWORD PTR _iYieldPerReligion$[ebp]
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iRtnValue$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN10@AdjustValu:

; 1401 : 	}
; 1402 : 
; 1403 : 	// ... and yield changes
; 1404 : 	int iYieldChanges = pCity->GetBaseYieldRateFromBuildings(eYield);

	mov	edx, DWORD PTR _eYield$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?GetBaseYieldRateFromBuildings@CvCity@@QBEHW4YieldTypes@@@Z ; CvCity::GetBaseYieldRateFromBuildings
	mov	DWORD PTR _iYieldChanges$[ebp], eax

; 1405 : 	if(iYieldChanges > 0)

	cmp	DWORD PTR _iYieldChanges$[ebp], 0
	jle	SHORT $LN9@AdjustValu

; 1406 : 	{
; 1407 : 		// +20% per point of yield change
; 1408 : 		iRtnValue = iRtnValue * (100 + (iYieldChanges * 20)) / 100;

	mov	eax, DWORD PTR _iYieldChanges$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, 100				; 00000064H
	imul	eax, DWORD PTR _iRtnValue$[ebp]
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR _iRtnValue$[ebp], eax
$LN9@AdjustValu:

; 1409 : 	}
; 1410 : 
; 1411 : 	// Other modifiers (unique by yield type)
; 1412 : 	switch(eYield)

	mov	edx, DWORD PTR _eYield$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	cmp	DWORD PTR tv129[ebp], 0
	je	SHORT $LN6@AdjustValu
	cmp	DWORD PTR tv129[ebp], 1
	je	SHORT $LN4@AdjustValu
	jmp	SHORT $LN7@AdjustValu
$LN6@AdjustValu:

; 1413 : 	{
; 1414 : 	case YIELD_FOOD:
; 1415 : 	{
; 1416 : 		int iMaxFoodKeptPercent = pCity->getMaxFoodKeptPercent();

	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getMaxFoodKeptPercent@CvCity@@QBEHXZ	; CvCity::getMaxFoodKeptPercent
	mov	DWORD PTR _iMaxFoodKeptPercent$226445[ebp], eax

; 1417 : 		if(iMaxFoodKeptPercent >= 100)

	cmp	DWORD PTR _iMaxFoodKeptPercent$226445[ebp], 100 ; 00000064H
	jl	SHORT $LN5@AdjustValu

; 1418 : 		{
; 1419 : 			iMaxFoodKeptPercent = 99;

	mov	DWORD PTR _iMaxFoodKeptPercent$226445[ebp], 99 ; 00000063H
$LN5@AdjustValu:

; 1420 : 		}
; 1421 : 		iRtnValue *= 100 / (100 - iMaxFoodKeptPercent);

	mov	ecx, 100				; 00000064H
	sub	ecx, DWORD PTR _iMaxFoodKeptPercent$226445[ebp]
	mov	eax, 100				; 00000064H
	cdq
	idiv	ecx
	imul	eax, DWORD PTR _iRtnValue$[ebp]
	mov	DWORD PTR _iRtnValue$[ebp], eax

; 1422 : 	}
; 1423 : 	break;

	jmp	SHORT $LN7@AdjustValu
$LN4@AdjustValu:

; 1424 : 
; 1425 : 	case YIELD_PRODUCTION:
; 1426 : 		// Double production if any military training facilities present
; 1427 : 		if(pCity->getDomainFreeExperience(DOMAIN_LAND) > 0)

	push	2
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getDomainFreeExperience@CvCity@@QBEHW4DomainTypes@@@Z ; CvCity::getDomainFreeExperience
	test	eax, eax
	jle	SHORT $LN7@AdjustValu

; 1428 : 		{
; 1429 : 			iRtnValue *= 2;

	mov	edx, DWORD PTR _iRtnValue$[ebp]
	shl	edx, 1
	mov	DWORD PTR _iRtnValue$[ebp], edx
$LN7@AdjustValu:

; 1430 : 		}
; 1431 : 		break;
; 1432 : 
; 1433 : 	case YIELD_GOLD:
; 1434 : 		break;
; 1435 : 
; 1436 : 	case YIELD_SCIENCE:
; 1437 : 		break;
; 1438 : 	}
; 1439 : 
; 1440 : 	return iRtnValue;

	mov	eax, DWORD PTR _iRtnValue$[ebp]

; 1441 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AdjustValueBasedOnBuildings@CvCitySpecializationAI@@AAEHPAVCvCity@@W4YieldTypes@@H@Z ENDP ; CvCitySpecializationAI::AdjustValueBasedOnBuildings
_TEXT	ENDS
EXTRN	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z:PROC ; CvCity::canTrain
EXTRN	?GetSpaceshipProject@CvUnitEntry@@QBEHXZ:PROC	; CvUnitEntry::GetSpaceshipProject
EXTRN	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z:PROC ; CvGlobals::getUnitInfo
EXTRN	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ:PROC	; CvUnitXMLEntries::GetNumUnits
EXTRN	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ:PROC ; CvGlobals::GetGameUnits
; Function compile flags: /Odtp
;	COMDAT ?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_eUnit$226460 = -20					; size = 4
_pkUnitEntry$226462 = -16				; size = 4
_iUnitLoop$226456 = -12					; size = 4
_pCity$ = -8						; size = 4
_iLoop$ = -4						; size = 4
?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ PROC ; CvCitySpecializationAI::CanBuildSpaceshipParts, COMDAT
; _this$ = ecx

; 1445 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 1446 : 	int iLoop;
; 1447 : 
; 1448 : 	// Find a city to test with
; 1449 : 	CvCity* pCity = m_pPlayer->firstCity(&iLoop);

	push	0
	lea	eax, DWORD PTR _iLoop$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?firstCity@CvPlayer@@QAEPAVCvCity@@PAH_N@Z ; CvPlayer::firstCity
	mov	DWORD PTR _pCity$[ebp], eax

; 1450 : 
; 1451 : 	// Loop through adding the available units
; 1452 : #ifdef AUI_WARNING_FIXES
; 1453 : 	for (uint iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)
; 1454 : #else
; 1455 : 	for(int iUnitLoop = 0; iUnitLoop < GC.GetGameUnits()->GetNumUnits(); iUnitLoop++)

	mov	DWORD PTR _iUnitLoop$226456[ebp], 0
	jmp	SHORT $LN6@CanBuildSp
$LN5@CanBuildSp:
	mov	edx, DWORD PTR _iUnitLoop$226456[ebp]
	add	edx, 1
	mov	DWORD PTR _iUnitLoop$226456[ebp], edx
$LN6@CanBuildSp:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?GetGameUnits@CvGlobals@@QBEPAVCvUnitXMLEntries@@XZ ; CvGlobals::GetGameUnits
	mov	ecx, eax
	call	?GetNumUnits@CvUnitXMLEntries@@QAEHXZ	; CvUnitXMLEntries::GetNumUnits
	cmp	DWORD PTR _iUnitLoop$226456[ebp], eax
	jge	SHORT $LN4@CanBuildSp

; 1456 : #endif
; 1457 : 	{
; 1458 : 		const UnitTypes eUnit = static_cast<UnitTypes>(iUnitLoop);

	mov	eax, DWORD PTR _iUnitLoop$226456[ebp]
	mov	DWORD PTR _eUnit$226460[ebp], eax

; 1459 : 		CvUnitEntry* pkUnitEntry = GC.getUnitInfo(eUnit);

	mov	ecx, DWORD PTR _eUnit$226460[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitInfo@CvGlobals@@QAEPAVCvUnitEntry@@W4UnitTypes@@@Z ; CvGlobals::getUnitInfo
	mov	DWORD PTR _pkUnitEntry$226462[ebp], eax

; 1460 : 		if(pkUnitEntry)

	cmp	DWORD PTR _pkUnitEntry$226462[ebp], 0
	je	SHORT $LN3@CanBuildSp

; 1461 : 		{
; 1462 : 			if(pkUnitEntry->GetSpaceshipProject() != NO_PROJECT)

	mov	ecx, DWORD PTR _pkUnitEntry$226462[ebp]
	call	?GetSpaceshipProject@CvUnitEntry@@QBEHXZ ; CvUnitEntry::GetSpaceshipProject
	cmp	eax, -1
	je	SHORT $LN3@CanBuildSp

; 1463 : 			{
; 1464 : 				// See if this unit can be built now
; 1465 : 				if(pCity->canTrain((UnitTypes)iUnitLoop))

	push	0
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _iUnitLoop$226456[ebp]
	push	edx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?canTrain@CvCity@@QBE_NW4UnitTypes@@_N111PAVCvString@@@Z ; CvCity::canTrain
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@CanBuildSp

; 1466 : 				{
; 1467 : 					return true;

	mov	al, 1
	jmp	SHORT $LN7@CanBuildSp
$LN3@CanBuildSp:

; 1468 : 				}
; 1469 : 			}
; 1470 : 		}
; 1471 : 	}

	jmp	SHORT $LN5@CanBuildSp
$LN4@CanBuildSp:

; 1472 : 	return false;

	xor	al, al
$LN7@CanBuildSp:

; 1473 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CanBuildSpaceshipParts@CvCitySpecializationAI@@AAE_NXZ ENDP ; CvCitySpecializationAI::CanBuildSpaceshipParts
_TEXT	ENDS
PUBLIC	??_C@_0BO@PCKJBBLJ@Production?5Specialization?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BA@CMNFFBKM@General?5Economy?$AA@	; `string'
PUBLIC	??_C@_0CG@DMKNAEGG@?0?5Empire?9wide?5specialization?5wei@ ; `string'
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_06NHKAIDD@?$CF03d?0?5?$AA@		; `string'
PUBLIC	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
PUBLIC	__$ArrayPad$
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z:PROC
EXTRN	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z:PROC ; CvGlobals::getYieldInfo
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z:PROC
EXTRN	?getElapsedGameTurns@CvGame@@QBEHXZ:PROC	; CvGame::getElapsedGameTurns
EXTRN	?GetInstance@FILogFileMgr@@SAAAV1@XZ:PROC	; FILogFileMgr::GetInstance
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ:PROC ; CvPlayer::getCivilizationShortDescription
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	?getAILogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getAILogging
EXTRN	?getLogging@CvGlobals@@QAE_NXZ:PROC		; CvGlobals::getLogging
;	COMDAT ??_C@_0BO@PCKJBBLJ@Production?5Specialization?3?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BO@PCKJBBLJ@Production?5Specialization?3?5?$CFd?$AA@ DB 'Productio'
	DB	'n Specialization: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CMNFFBKM@General?5Economy?$AA@
CONST	SEGMENT
??_C@_0BA@CMNFFBKM@General?5Economy?$AA@ DB 'General Economy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DMKNAEGG@?0?5Empire?9wide?5specialization?5wei@
CONST	SEGMENT
??_C@_0CG@DMKNAEGG@?0?5Empire?9wide?5specialization?5wei@ DB ', Empire-wi'
	DB	'de specialization weight, ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
CONST	SEGMENT
??_C@_06NHKAIDD@?$CF03d?0?5?$AA@ DB '%03d, ', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$6
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$9
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$12
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
tv503 = -512						; size = 4
tv299 = -508						; size = 4
tv502 = -504						; size = 4
tv297 = -500						; size = 4
tv74 = -496						; size = 4
tv307 = -492						; size = 4
tv293 = -488						; size = 4
tv318 = -484						; size = 4
tv291 = -480						; size = 4
tv329 = -476						; size = 4
tv289 = -472						; size = 4
tv340 = -468						; size = 4
tv351 = -464						; size = 4
tv95 = -460						; size = 4
_this$ = -456						; size = 4
$T233660 = -452						; size = 4
$T233656 = -448						; size = 4
_elem$233652 = -444					; size = 8
$T233638 = -436						; size = 4
$T233634 = -432						; size = 4
_elem$233630 = -428					; size = 8
$T233616 = -420						; size = 4
$T233607 = -416						; size = 4
$T233593 = -412						; size = 4
$T233585 = -408						; size = 4
$T233584 = -404						; size = 4
$T233580 = -400						; size = 4
$T233541 = -396						; size = 28
$T233540 = -368						; size = 28
$T233539 = -340						; size = 28
$T233538 = -312						; size = 28
$T233537 = -284						; size = 28
$T233536 = -256						; size = 28
$T233535 = -228						; size = 28
$T233534 = -200						; size = 28
_iI$226496 = -172					; size = 4
_pYieldInfo$226488 = -168				; size = 4
_iI$226481 = -164					; size = 4
_strOutBuf$226475 = -160				; size = 28
_strWeightString$226474 = -132				; size = 28
_strPlayerName$226471 = -104				; size = 28
_pLog$226476 = -76					; size = 4
_strYieldString$226473 = -72				; size = 28
_strBaseString$226472 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ PROC ; CvCitySpecializationAI::LogSpecializationWeights, COMDAT
; _this$ = ecx

; 1477 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 500				; 000001f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1478 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN11@LogSpecial
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN11@LogSpecial

; 1479 : 	{
; 1480 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226471[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1481 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226472[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1482 : 		CvString strYieldString;

	lea	ecx, DWORD PTR _strYieldString$226473[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1483 : 		CvString strWeightString;

	lea	ecx, DWORD PTR _strWeightString$226474[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1484 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226475[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1485 : 		FILogFile* pLog;
; 1486 : 
; 1487 : 		// Find the name of this civ
; 1488 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ; CvCitySpecializationAI::GetPlayer
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T233580[ebp], eax
	cmp	DWORD PTR $T233580[ebp], 0
	je	SHORT $LN42@LogSpecial
	mov	edx, DWORD PTR $T233580[ebp]
	push	edx
	lea	ecx, DWORD PTR _strPlayerName$226471[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN43@LogSpecial
$LN42@LogSpecial:
	lea	ecx, DWORD PTR _strPlayerName$226471[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN43@LogSpecial:

; 1489 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv95[ebp], eax
	lea	eax, DWORD PTR _strPlayerName$226471[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233534[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	DWORD PTR tv351[ebp], eax
	mov	edx, DWORD PTR tv351[ebp]
	mov	DWORD PTR $T233584[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T233584[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233585[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T233585[ebp]
	push	eax
	mov	ecx, DWORD PTR tv95[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$226476[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233534[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1490 : 
; 1491 : 		// Get the leading info for this line
; 1492 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T233593[ebp], ecx
	mov	ecx, DWORD PTR $T233593[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$226472[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1493 : 		strBaseString += strPlayerName + ", Empire-wide specialization weight, ";

	push	OFFSET ??_C@_0CG@DMKNAEGG@?0?5Empire?9wide?5specialization?5wei@
	lea	eax, DWORD PTR _strPlayerName$226471[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233535[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv340[ebp], eax
	mov	edx, DWORD PTR tv340[ebp]
	mov	DWORD PTR tv289[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR tv289[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226472[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233535[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1494 : 
; 1495 : 		for(int iI = 0; iI < NUM_SPECIALIZATION_YIELDS; iI++)

	mov	DWORD PTR _iI$226481[ebp], 0
	jmp	SHORT $LN9@LogSpecial
$LN8@LogSpecial:
	mov	ecx, DWORD PTR _iI$226481[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$226481[ebp], ecx
$LN9@LogSpecial:
	cmp	DWORD PTR _iI$226481[ebp], 5
	jge	$LN7@LogSpecial

; 1496 : 		{
; 1497 : 			if(iI > YIELD_SCIENCE)

	cmp	DWORD PTR _iI$226481[ebp], 3
	jle	SHORT $LN58@LogSpecial

; 1498 : 			{
; 1499 : 				strYieldString = "General Economy";

	mov	edx, OFFSET ??_C@_0BA@CMNFFBKM@General?5Economy?$AA@
	test	edx, edx
	je	SHORT $LN53@LogSpecial
	push	OFFSET ??_C@_0BA@CMNFFBKM@General?5Economy?$AA@
	lea	ecx, DWORD PTR _strYieldString$226473[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN54@LogSpecial
$LN53@LogSpecial:
	lea	ecx, DWORD PTR _strYieldString$226473[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN54@LogSpecial:

; 1500 : 			}
; 1501 : 			else

	jmp	SHORT $LN5@LogSpecial

; 1502 : 			{
; 1503 : 				CvYieldInfo* pYieldInfo = GC.getYieldInfo((YieldTypes)m_YieldWeights.GetElement(iI));

$LN58@LogSpecial:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _iI$226481[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR $T233607[ebp], eax
	mov	ecx, DWORD PTR $T233607[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z ; CvGlobals::getYieldInfo
	mov	DWORD PTR _pYieldInfo$226488[ebp], eax

; 1504 : 				if(pYieldInfo != NULL)

	cmp	DWORD PTR _pYieldInfo$226488[ebp], 0
	je	SHORT $LN5@LogSpecial

; 1505 : 				{
; 1506 : 					strYieldString = pYieldInfo->GetDescription();

	mov	ecx, DWORD PTR _pYieldInfo$226488[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233616[ebp], eax
	cmp	DWORD PTR $T233616[ebp], 0
	je	SHORT $LN63@LogSpecial
	mov	eax, DWORD PTR $T233616[ebp]
	push	eax
	lea	ecx, DWORD PTR _strYieldString$226473[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN5@LogSpecial
$LN63@LogSpecial:
	lea	ecx, DWORD PTR _strYieldString$226473[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN5@LogSpecial:

; 1507 : 				}
; 1508 : 			}
; 1509 : 			strWeightString.Format("%d", m_YieldWeights.GetWeight(iI));

	mov	DWORD PTR _elem$233630[ebp], 0
	mov	DWORD PTR _elem$233630[ebp+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _iI$226481[ebp]
	mov	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR [edx+eax*8+4]
	mov	DWORD PTR _elem$233630[ebp], ecx
	mov	DWORD PTR _elem$233630[ebp+4], edx
	mov	eax, DWORD PTR _elem$233630[ebp+4]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	ecx, DWORD PTR _strWeightString$226474[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1510 : 			strOutBuf = strBaseString + strYieldString + ", " + strWeightString;

	lea	edx, DWORD PTR _strYieldString$226473[ebp]
	push	edx
	lea	eax, DWORD PTR _strBaseString$226472[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233536[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv329[ebp], eax
	mov	edx, DWORD PTR tv329[ebp]
	mov	DWORD PTR tv291[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	eax, DWORD PTR tv291[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233537[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv318[ebp], eax
	mov	edx, DWORD PTR tv318[ebp]
	mov	DWORD PTR tv293[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	eax, DWORD PTR _strWeightString$226474[ebp]
	push	eax
	mov	ecx, DWORD PTR tv293[ebp]
	push	ecx
	lea	edx, DWORD PTR $T233538[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv307[ebp], eax
	mov	eax, DWORD PTR tv307[ebp]
	mov	DWORD PTR $T233634[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR $T233634[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226475[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T233538[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T233537[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233536[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1511 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226475[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233638[ebp], eax
	mov	ecx, DWORD PTR $T233638[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$226476[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$226476[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8

; 1512 : 		}

	jmp	$LN8@LogSpecial
$LN7@LogSpecial:

; 1513 : 
; 1514 : 		for(int iI = 0; iI < NUM_PRODUCTION_SPECIALIZATION_SUBTYPES; iI++)

	mov	DWORD PTR _iI$226496[ebp], 0
	jmp	SHORT $LN3@LogSpecial
$LN2@LogSpecial:
	mov	eax, DWORD PTR _iI$226496[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$226496[ebp], eax
$LN3@LogSpecial:
	cmp	DWORD PTR _iI$226496[ebp], 5
	jge	$LN1@LogSpecial

; 1515 : 		{
; 1516 : 			strYieldString.Format("Production Specialization: %d", iI);

	mov	ecx, DWORD PTR _iI$226496[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@PCKJBBLJ@Production?5Specialization?3?5?$CFd?$AA@
	lea	edx, DWORD PTR _strYieldString$226473[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1517 : 			strWeightString.Format("%d", m_ProductionSubtypeWeights.GetWeight(iI));

	mov	DWORD PTR _elem$233652[ebp], 0
	mov	DWORD PTR _elem$233652[ebp+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	edx, DWORD PTR _iI$226496[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	DWORD PTR _elem$233652[ebp], eax
	mov	DWORD PTR _elem$233652[ebp+4], ecx
	mov	edx, DWORD PTR _elem$233652[ebp+4]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	lea	eax, DWORD PTR _strWeightString$226474[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1518 : 			strOutBuf = strBaseString + strYieldString + ", " + strWeightString;

	lea	ecx, DWORD PTR _strYieldString$226473[ebp]
	push	ecx
	lea	edx, DWORD PTR _strBaseString$226472[ebp]
	push	edx
	lea	eax, DWORD PTR $T233539[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv297[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	edx, DWORD PTR tv297[ebp]
	push	edx
	lea	eax, DWORD PTR $T233540[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv502[ebp], eax
	mov	ecx, DWORD PTR tv502[ebp]
	mov	DWORD PTR tv299[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	edx, DWORD PTR _strWeightString$226474[ebp]
	push	edx
	mov	eax, DWORD PTR tv299[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233541[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv503[ebp], eax
	mov	edx, DWORD PTR tv503[ebp]
	mov	DWORD PTR $T233656[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T233656[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226475[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T233541[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T233540[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233539[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1519 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226475[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233660[ebp], eax
	mov	eax, DWORD PTR $T233660[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLog$226476[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pLog$226476[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	add	esp, 8

; 1520 : 		}

	jmp	$LN2@LogSpecial
$LN1@LogSpecial:

; 1521 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strOutBuf$226475[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strWeightString$226474[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strYieldString$226473[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$226472[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strPlayerName$226471[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN11@LogSpecial:

; 1522 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$0:
	lea	ecx, DWORD PTR _strPlayerName$226471[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$1:
	lea	ecx, DWORD PTR _strBaseString$226472[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$2:
	lea	ecx, DWORD PTR _strYieldString$226473[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$3:
	lea	ecx, DWORD PTR _strWeightString$226474[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$4:
	lea	ecx, DWORD PTR _strOutBuf$226475[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$5:
	lea	ecx, DWORD PTR $T233534[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$6:
	lea	ecx, DWORD PTR $T233535[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$7:
	lea	ecx, DWORD PTR $T233536[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$8:
	lea	ecx, DWORD PTR $T233537[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$9:
	lea	ecx, DWORD PTR $T233538[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$10:
	lea	ecx, DWORD PTR $T233539[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$11:
	lea	ecx, DWORD PTR $T233540[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ$12:
	lea	ecx, DWORD PTR $T233541[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-504]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogSpecializationWeights@CvCitySpecializationAI@@AAEXXZ ENDP ; CvCitySpecializationAI::LogSpecializationWeights
PUBLIC	??_C@_0N@BLALKEAN@?0?5WonderCity?$AA@		; `string'
PUBLIC	??_C@_0BM@PHDAKMOG@New?5Specialization?5Type?3?5?$CFd?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	?getName@CvCity@@QBE?BVCvString@@XZ:PROC	; CvCity::getName
;	COMDAT ??_C@_0N@BLALKEAN@?0?5WonderCity?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0N@BLALKEAN@?0?5WonderCity?$AA@ DB ', WonderCity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PHDAKMOG@New?5Specialization?5Type?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BM@PHDAKMOG@New?5Specialization?5Type?3?5?$CFd?$AA@ DB 'New Specia'
	DB	'lization Type: %d', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z DD 019930522H
	DD	0bH
	DD	FLAT:__unwindtable$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$10
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z
_TEXT	SEGMENT
tv74 = -400						; size = 4
tv235 = -396						; size = 4
tv243 = -392						; size = 4
tv233 = -388						; size = 4
tv254 = -384						; size = 4
tv265 = -380						; size = 4
tv229 = -376						; size = 4
tv276 = -372						; size = 4
tv287 = -368						; size = 4
tv95 = -364						; size = 4
_this$ = -360						; size = 4
$T233761 = -356						; size = 4
$T233757 = -352						; size = 4
$T233749 = -348						; size = 4
$T233745 = -344						; size = 4
$T233737 = -340						; size = 4
$T233736 = -336						; size = 4
$T233732 = -332						; size = 4
$T233695 = -328						; size = 28
$T233694 = -300						; size = 28
$T233693 = -272						; size = 28
$T233692 = -244						; size = 28
$T233691 = -216						; size = 28
$T233690 = -188						; size = 28
_strOutBuf$226511 = -160				; size = 28
_strPlayerName$226513 = -132				; size = 28
_strCityName$226514 = -104				; size = 28
_pLog$226516 = -76					; size = 4
_strBaseString$226512 = -72				; size = 28
_strSpecialization$226515 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
_eType$ = 12						; size = 4
_bWonderCity$ = 16					; size = 1
?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z PROC ; CvCitySpecializationAI::LogSpecializationAssignment, COMDAT
; _this$ = ecx

; 1526 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 388				; 00000184H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1527 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN3@LogSpecial@2
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@LogSpecial@2

; 1528 : 	{
; 1529 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226511[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1530 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226512[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1531 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226513[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1532 : 		CvString strCityName;

	lea	ecx, DWORD PTR _strCityName$226514[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1533 : 		CvString strSpecialization;

	lea	ecx, DWORD PTR _strSpecialization$226515[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1534 : 		FILogFile* pLog;
; 1535 : 
; 1536 : 		// Find the name of this civ
; 1537 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ; CvCitySpecializationAI::GetPlayer
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T233732[ebp], eax
	cmp	DWORD PTR $T233732[ebp], 0
	je	SHORT $LN32@LogSpecial@2
	mov	edx, DWORD PTR $T233732[ebp]
	push	edx
	lea	ecx, DWORD PTR _strPlayerName$226513[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN33@LogSpecial@2
$LN32@LogSpecial@2:
	lea	ecx, DWORD PTR _strPlayerName$226513[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN33@LogSpecial@2:

; 1538 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv95[ebp], eax
	lea	eax, DWORD PTR _strPlayerName$226513[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233690[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	DWORD PTR tv287[ebp], eax
	mov	edx, DWORD PTR tv287[ebp]
	mov	DWORD PTR $T233736[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T233736[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233737[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T233737[ebp]
	push	eax
	mov	ecx, DWORD PTR tv95[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$226516[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233690[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1539 : 
; 1540 : 		// Get the leading info for this line
; 1541 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T233745[ebp], ecx
	mov	ecx, DWORD PTR $T233745[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$226512[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1542 : 		strBaseString += strPlayerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _strPlayerName$226513[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233691[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv276[ebp], eax
	mov	edx, DWORD PTR tv276[ebp]
	mov	DWORD PTR tv229[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR tv229[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226512[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233691[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1543 : 
; 1544 : 		strCityName = pCity->getName();

	lea	ecx, DWORD PTR $T233692[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv265[ebp], eax
	mov	edx, DWORD PTR tv265[ebp]
	mov	DWORD PTR $T233749[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR $T233749[ebp]
	push	eax
	lea	ecx, DWORD PTR _strCityName$226514[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233692[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1545 : 		strSpecialization.Format("New Specialization Type: %d", (int)eType);

	mov	ecx, DWORD PTR _eType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BM@PHDAKMOG@New?5Specialization?5Type?3?5?$CFd?$AA@
	lea	edx, DWORD PTR _strSpecialization$226515[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1546 : 
; 1547 : 		strOutBuf = strBaseString + strCityName + ", " + strSpecialization;

	lea	eax, DWORD PTR _strCityName$226514[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226512[ebp]
	push	ecx
	lea	edx, DWORD PTR $T233693[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv254[ebp], eax
	mov	eax, DWORD PTR tv254[ebp]
	mov	DWORD PTR tv233[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	ecx, DWORD PTR tv233[ebp]
	push	ecx
	lea	edx, DWORD PTR $T233694[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv243[ebp], eax
	mov	eax, DWORD PTR tv243[ebp]
	mov	DWORD PTR tv235[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR _strSpecialization$226515[ebp]
	push	ecx
	mov	edx, DWORD PTR tv235[ebp]
	push	edx
	lea	eax, DWORD PTR $T233695[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T233757[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR $T233757[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226511[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T233695[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T233694[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233693[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1548 : 		if(bWonderCity)

	movzx	edx, BYTE PTR _bWonderCity$[ebp]
	test	edx, edx
	je	SHORT $LN1@LogSpecial@2

; 1549 : 		{
; 1550 : 			strOutBuf += ", WonderCity";

	push	OFFSET ??_C@_0N@BLALKEAN@?0?5WonderCity?$AA@
	lea	ecx, DWORD PTR _strOutBuf$226511[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN1@LogSpecial@2:

; 1551 : 		}
; 1552 : 
; 1553 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226511[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233761[ebp], eax
	mov	eax, DWORD PTR $T233761[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLog$226516[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pLog$226516[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	add	esp, 8

; 1554 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strSpecialization$226515[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strCityName$226514[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strPlayerName$226513[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$226512[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$226511[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@LogSpecial@2:

; 1555 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$226511[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$1:
	lea	ecx, DWORD PTR _strBaseString$226512[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$2:
	lea	ecx, DWORD PTR _strPlayerName$226513[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$3:
	lea	ecx, DWORD PTR _strCityName$226514[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$4:
	lea	ecx, DWORD PTR _strSpecialization$226515[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$5:
	lea	ecx, DWORD PTR $T233690[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$6:
	lea	ecx, DWORD PTR $T233691[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$7:
	lea	ecx, DWORD PTR $T233692[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$8:
	lea	ecx, DWORD PTR $T233693[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$9:
	lea	ecx, DWORD PTR $T233694[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z$10:
	lea	ecx, DWORD PTR $T233695[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-392]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogSpecializationAssignment@CvCitySpecializationAI@@AAEXPAVCvCity@@W4CitySpecializationTypes@@_N@Z ENDP ; CvCitySpecializationAI::LogSpecializationAssignment
PUBLIC	??_C@_0CG@GLDPAKDC@Update?3?5wonder?5built?5by?5rival?0?5W@ ; `string'
PUBLIC	??_C@_0BP@IBMOEEHF@Update?3?5Tech?5research?5complete?$AA@ ; `string'
PUBLIC	??_C@_0CA@KKFGBLOO@Update?3?5War?5strategy?5turned?5off?$AA@ ; `string'
PUBLIC	??_C@_0BP@DAFPPPAL@Update?3?5War?5strategy?5turned?5on?$AA@ ; `string'
PUBLIC	??_C@_0BM@NFFMEDLK@Update?3?5Enemy?5city?5captured?$AA@ ; `string'
PUBLIC	??_C@_0BJ@JOIBPFJH@Update?3?5My?5city?5captured?$AA@ ; `string'
PUBLIC	??_C@_0BF@GFLOOMAH@Update?3?5City?5founded?$AA@	; `string'
PUBLIC	??_C@_0BA@IKGIOLJI@Update?3?5New?5war?$AA@	; `string'
PUBLIC	??_C@_0BP@EKOFLAOE@Update?3?5New?5grand?5strategy?3?5?$CFs?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0CG@GLDPAKDC@Update?3?5wonder?5built?5by?5rival?0?5W@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CG@GLDPAKDC@Update?3?5wonder?5built?5by?5rival?0?5W@ DB 'Update: w'
	DB	'onder built by rival, WONDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IBMOEEHF@Update?3?5Tech?5research?5complete?$AA@
CONST	SEGMENT
??_C@_0BP@IBMOEEHF@Update?3?5Tech?5research?5complete?$AA@ DB 'Update: Te'
	DB	'ch research complete', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KKFGBLOO@Update?3?5War?5strategy?5turned?5off?$AA@
CONST	SEGMENT
??_C@_0CA@KKFGBLOO@Update?3?5War?5strategy?5turned?5off?$AA@ DB 'Update: '
	DB	'War strategy turned off', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DAFPPPAL@Update?3?5War?5strategy?5turned?5on?$AA@
CONST	SEGMENT
??_C@_0BP@DAFPPPAL@Update?3?5War?5strategy?5turned?5on?$AA@ DB 'Update: W'
	DB	'ar strategy turned on', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NFFMEDLK@Update?3?5Enemy?5city?5captured?$AA@
CONST	SEGMENT
??_C@_0BM@NFFMEDLK@Update?3?5Enemy?5city?5captured?$AA@ DB 'Update: Enemy'
	DB	' city captured', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JOIBPFJH@Update?3?5My?5city?5captured?$AA@
CONST	SEGMENT
??_C@_0BJ@JOIBPFJH@Update?3?5My?5city?5captured?$AA@ DB 'Update: My city '
	DB	'captured', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GFLOOMAH@Update?3?5City?5founded?$AA@
CONST	SEGMENT
??_C@_0BF@GFLOOMAH@Update?3?5City?5founded?$AA@ DB 'Update: City founded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IKGIOLJI@Update?3?5New?5war?$AA@
CONST	SEGMENT
??_C@_0BA@IKGIOLJI@Update?3?5New?5war?$AA@ DB 'Update: New war', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EKOFLAOE@Update?3?5New?5grand?5strategy?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BP@EKOFLAOE@Update?3?5New?5grand?5strategy?3?5?$CFs?$AA@ DB 'Updat'
	DB	'e: New grand strategy: %s', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$6
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z
_TEXT	SEGMENT
tv245 = -272						; size = 4
tv151 = -268						; size = 4
tv226 = -264						; size = 4
tv256 = -260						; size = 4
tv267 = -256						; size = 4
tv92 = -252						; size = 4
_this$ = -248						; size = 4
$T233886 = -244						; size = 4
$T233882 = -240						; size = 4
$T233835 = -236						; size = 4
$T233827 = -232						; size = 4
$T233826 = -228						; size = 4
$T233822 = -224						; size = 4
$T233793 = -220						; size = 28
$T233792 = -192						; size = 28
$T233791 = -164						; size = 28
_pGrandStrategyInfo$226544 = -136			; size = 4
_strOutBuf$226532 = -132				; size = 28
_strTypeString$226535 = -104				; size = 28
_strPlayerName$226534 = -76				; size = 28
_pLog$226536 = -48					; size = 4
_strBaseString$226533 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eUpdate$ = 8						; size = 4
?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z PROC ; CvCitySpecializationAI::LogSpecializationUpdate, COMDAT
; _this$ = ecx

; 1559 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1560 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN14@LogSpecial@3
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN14@LogSpecial@3

; 1561 : 	{
; 1562 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226532[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1563 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226533[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1564 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226534[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1565 : 		CvString strTypeString;

	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1566 : 		FILogFile* pLog;
; 1567 : 
; 1568 : 		// Find the name of this civ
; 1569 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ; CvCitySpecializationAI::GetPlayer
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T233822[ebp], eax
	cmp	DWORD PTR $T233822[ebp], 0
	je	SHORT $LN36@LogSpecial@3
	mov	edx, DWORD PTR $T233822[ebp]
	push	edx
	lea	ecx, DWORD PTR _strPlayerName$226534[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN37@LogSpecial@3
$LN36@LogSpecial@3:
	lea	ecx, DWORD PTR _strPlayerName$226534[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN37@LogSpecial@3:

; 1570 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv92[ebp], eax
	lea	eax, DWORD PTR _strPlayerName$226534[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233791[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	DWORD PTR tv267[ebp], eax
	mov	edx, DWORD PTR tv267[ebp]
	mov	DWORD PTR $T233826[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR $T233826[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233827[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T233827[ebp]
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$226536[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T233791[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1571 : 
; 1572 : 		// Get the leading info for this line
; 1573 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T233835[ebp], ecx
	mov	ecx, DWORD PTR $T233835[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$226533[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1574 : 		strBaseString += strPlayerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _strPlayerName$226534[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233792[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv256[ebp], eax
	mov	edx, DWORD PTR tv256[ebp]
	mov	DWORD PTR tv226[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR tv226[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226533[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T233792[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1575 : 
; 1576 : 		switch(eUpdate)

	mov	ecx, DWORD PTR _eUpdate$[ebp]
	mov	DWORD PTR tv151[ebp], ecx
	cmp	DWORD PTR tv151[ebp], 8
	ja	$LN11@LogSpecial@3
	mov	edx, DWORD PTR tv151[ebp]
	jmp	DWORD PTR $LN97@LogSpecial@3[edx*4]
$LN10@LogSpecial@3:

; 1577 : 		{
; 1578 : 		case SPECIALIZATION_UPDATE_NEW_GRAND_STRATEGY:
; 1579 : 		{
; 1580 : 			CvAIGrandStrategyXMLEntry* pGrandStrategyInfo = GC.getAIGrandStrategyInfo(m_pPlayer->GetGrandStrategyAI()->GetActiveGrandStrategy());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetGrandStrategyAI@CvPlayer@@QBEPAVCvGrandStrategyAI@@XZ ; CvPlayer::GetGrandStrategyAI
	mov	ecx, eax
	call	?GetActiveGrandStrategy@CvGrandStrategyAI@@QBE?AW4AIGrandStrategyTypes@@XZ ; CvGrandStrategyAI::GetActiveGrandStrategy
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAIGrandStrategyInfo@CvGlobals@@QAEPAVCvAIGrandStrategyXMLEntry@@W4AIGrandStrategyTypes@@@Z ; CvGlobals::getAIGrandStrategyInfo
	mov	DWORD PTR _pGrandStrategyInfo$226544[ebp], eax

; 1581 : 			if(NULL != pGrandStrategyInfo)

	cmp	DWORD PTR _pGrandStrategyInfo$226544[ebp], 0
	je	SHORT $LN9@LogSpecial@3

; 1582 : 			{
; 1583 : 				strTypeString.Format("Update: New grand strategy: %s", pGrandStrategyInfo->GetType());

	mov	ecx, DWORD PTR _pGrandStrategyInfo$226544[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET ??_C@_0BP@EKOFLAOE@Update?3?5New?5grand?5strategy?3?5?$CFs?$AA@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH
$LN9@LogSpecial@3:

; 1584 : 			}
; 1585 : 		}
; 1586 : 		break;

	jmp	$LN11@LogSpecial@3
$LN8@LogSpecial@3:

; 1587 : 		case SPECIALIZATION_UPDATE_NOW_AT_WAR:
; 1588 : 			strTypeString = "Update: New war";

	mov	edx, OFFSET ??_C@_0BA@IKGIOLJI@Update?3?5New?5war?$AA@
	test	edx, edx
	je	SHORT $LN49@LogSpecial@3
	push	OFFSET ??_C@_0BA@IKGIOLJI@Update?3?5New?5war?$AA@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN50@LogSpecial@3
$LN49@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN50@LogSpecial@3:

; 1589 : 			break;

	jmp	$LN11@LogSpecial@3
$LN7@LogSpecial@3:

; 1590 : 		case SPECIALIZATION_UPDATE_CITY_FOUNDED:
; 1591 : 			strTypeString = "Update: City founded";

	mov	eax, OFFSET ??_C@_0BF@GFLOOMAH@Update?3?5City?5founded?$AA@
	test	eax, eax
	je	SHORT $LN53@LogSpecial@3
	push	OFFSET ??_C@_0BF@GFLOOMAH@Update?3?5City?5founded?$AA@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN54@LogSpecial@3
$LN53@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN54@LogSpecial@3:

; 1592 : 			break;

	jmp	$LN11@LogSpecial@3
$LN6@LogSpecial@3:

; 1593 : 		case SPECIALIZATION_UPDATE_MY_CITY_CAPTURED:
; 1594 : 			strTypeString = "Update: My city captured";

	mov	ecx, OFFSET ??_C@_0BJ@JOIBPFJH@Update?3?5My?5city?5captured?$AA@
	test	ecx, ecx
	je	SHORT $LN57@LogSpecial@3
	push	OFFSET ??_C@_0BJ@JOIBPFJH@Update?3?5My?5city?5captured?$AA@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN58@LogSpecial@3
$LN57@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN58@LogSpecial@3:

; 1595 : 			break;

	jmp	$LN11@LogSpecial@3
$LN5@LogSpecial@3:

; 1596 : 		case SPECIALIZATION_UPDATE_ENEMY_CITY_CAPTURED:
; 1597 : 			strTypeString = "Update: Enemy city captured";

	mov	edx, OFFSET ??_C@_0BM@NFFMEDLK@Update?3?5Enemy?5city?5captured?$AA@
	test	edx, edx
	je	SHORT $LN61@LogSpecial@3
	push	OFFSET ??_C@_0BM@NFFMEDLK@Update?3?5Enemy?5city?5captured?$AA@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN62@LogSpecial@3
$LN61@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN62@LogSpecial@3:

; 1598 : 			break;

	jmp	$LN11@LogSpecial@3
$LN4@LogSpecial@3:

; 1599 : 		case SPECIALIZATION_UPDATE_STRATEGY_NOW_ON:
; 1600 : 			strTypeString = "Update: War strategy turned on";

	mov	eax, OFFSET ??_C@_0BP@DAFPPPAL@Update?3?5War?5strategy?5turned?5on?$AA@
	test	eax, eax
	je	SHORT $LN65@LogSpecial@3
	push	OFFSET ??_C@_0BP@DAFPPPAL@Update?3?5War?5strategy?5turned?5on?$AA@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN66@LogSpecial@3
$LN65@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN66@LogSpecial@3:

; 1601 : 			break;

	jmp	SHORT $LN11@LogSpecial@3
$LN3@LogSpecial@3:

; 1602 : 		case SPECIALIZATION_UPDATE_STRATEGY_NOW_OFF:
; 1603 : 			strTypeString = "Update: War strategy turned off";

	mov	ecx, OFFSET ??_C@_0CA@KKFGBLOO@Update?3?5War?5strategy?5turned?5off?$AA@
	test	ecx, ecx
	je	SHORT $LN69@LogSpecial@3
	push	OFFSET ??_C@_0CA@KKFGBLOO@Update?3?5War?5strategy?5turned?5off?$AA@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN70@LogSpecial@3
$LN69@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN70@LogSpecial@3:

; 1604 : 			break;

	jmp	SHORT $LN11@LogSpecial@3
$LN2@LogSpecial@3:

; 1605 : 		case SPECIALIZATION_UPDATE_RESEARCH_COMPLETE:
; 1606 : 			strTypeString = "Update: Tech research complete";

	mov	edx, OFFSET ??_C@_0BP@IBMOEEHF@Update?3?5Tech?5research?5complete?$AA@
	test	edx, edx
	je	SHORT $LN73@LogSpecial@3
	push	OFFSET ??_C@_0BP@IBMOEEHF@Update?3?5Tech?5research?5complete?$AA@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN74@LogSpecial@3
$LN73@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN74@LogSpecial@3:

; 1607 : 			break;

	jmp	SHORT $LN11@LogSpecial@3
$LN1@LogSpecial@3:

; 1608 : 		case SPECIALIZATION_UPDATE_WONDER_BUILT_BY_RIVAL:
; 1609 : 			strTypeString = "Update: wonder built by rival, WONDER";

	mov	eax, OFFSET ??_C@_0CG@GLDPAKDC@Update?3?5wonder?5built?5by?5rival?0?5W@
	test	eax, eax
	je	SHORT $LN77@LogSpecial@3
	push	OFFSET ??_C@_0CG@GLDPAKDC@Update?3?5wonder?5built?5by?5rival?0?5W@
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN11@LogSpecial@3
$LN77@LogSpecial@3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN11@LogSpecial@3:

; 1610 : 		}
; 1611 : 		strOutBuf = strBaseString + strTypeString;

	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	push	ecx
	lea	edx, DWORD PTR _strBaseString$226533[ebp]
	push	edx
	lea	eax, DWORD PTR $T233793[ebp]
	push	eax
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv245[ebp], eax
	mov	ecx, DWORD PTR tv245[ebp]
	mov	DWORD PTR $T233882[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR $T233882[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226532[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T233793[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1612 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226532[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233886[ebp], eax
	mov	edx, DWORD PTR $T233886[ebp]
	push	edx
	mov	eax, DWORD PTR _pLog$226536[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pLog$226536[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	add	esp, 8

; 1613 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strPlayerName$226534[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$226533[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$226532[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN14@LogSpecial@3:

; 1614 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
$LN97@LogSpecial@3:
	DD	$LN10@LogSpecial@3
	DD	$LN8@LogSpecial@3
	DD	$LN7@LogSpecial@3
	DD	$LN6@LogSpecial@3
	DD	$LN5@LogSpecial@3
	DD	$LN4@LogSpecial@3
	DD	$LN3@LogSpecial@3
	DD	$LN2@LogSpecial@3
	DD	$LN1@LogSpecial@3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$226532[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$226533[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$2:
	lea	ecx, DWORD PTR _strPlayerName$226534[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$3:
	lea	ecx, DWORD PTR _strTypeString$226535[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$4:
	lea	ecx, DWORD PTR $T233791[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$5:
	lea	ecx, DWORD PTR $T233792[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z$6:
	lea	ecx, DWORD PTR $T233793[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-264]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogSpecializationUpdate@CvCitySpecializationAI@@AAEXW4CitySpecializationUpdateType@@@Z ENDP ; CvCitySpecializationAI::LogSpecializationUpdate
PUBLIC	??_C@_0BI@CKBCHJGH@Next?5Specialization?3?5?$CFd?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BI@CKBCHJGH@Next?5Specialization?3?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BI@CKBCHJGH@Next?5Specialization?3?5?$CFd?$AA@ DB 'Next Specializa'
	DB	'tion: %d', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$6
	DD	04H
	DD	FLAT:__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$7
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
tv228 = -292						; size = 4
tv198 = -288						; size = 4
tv239 = -284						; size = 4
tv250 = -280						; size = 4
tv95 = -276						; size = 4
_this$ = -272						; size = 4
$T233970 = -268						; size = 4
$T233966 = -264						; size = 4
$T233962 = -260						; size = 4
$T233954 = -256						; size = 4
$T233953 = -252						; size = 4
$T233949 = -248						; size = 4
$T233915 = -244						; size = 28
$T233914 = -216						; size = 28
$T233913 = -188						; size = 28
_strOutBuf$226569 = -160				; size = 28
_strTypeString$226572 = -132				; size = 28
_strPlayerName$226571 = -104				; size = 28
_pLog$226574 = -76					; size = 4
_strYieldString$226573 = -72				; size = 28
_strBaseString$226570 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eType$ = 8						; size = 4
?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z PROC ; CvCitySpecializationAI::LogNextSpecialization, COMDAT
; _this$ = ecx

; 1618 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 280				; 00000118H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1619 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN2@LogNextSpe
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@LogNextSpe

; 1620 : 	{
; 1621 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226569[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1622 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226570[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1623 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226571[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1624 : 		CvString strTypeString;

	lea	ecx, DWORD PTR _strTypeString$226572[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1625 : 		CvString strYieldString;

	lea	ecx, DWORD PTR _strYieldString$226573[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1626 : 		FILogFile* pLog;
; 1627 : 
; 1628 : 		// Find the name of this civ
; 1629 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ; CvCitySpecializationAI::GetPlayer
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T233949[ebp], eax
	cmp	DWORD PTR $T233949[ebp], 0
	je	SHORT $LN28@LogNextSpe
	mov	edx, DWORD PTR $T233949[ebp]
	push	edx
	lea	ecx, DWORD PTR _strPlayerName$226571[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN29@LogNextSpe
$LN28@LogNextSpe:
	lea	ecx, DWORD PTR _strPlayerName$226571[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN29@LogNextSpe:

; 1630 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv95[ebp], eax
	lea	eax, DWORD PTR _strPlayerName$226571[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233913[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	DWORD PTR tv250[ebp], eax
	mov	edx, DWORD PTR tv250[ebp]
	mov	DWORD PTR $T233953[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T233953[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233954[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T233954[ebp]
	push	eax
	mov	ecx, DWORD PTR tv95[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$226574[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233913[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1631 : 
; 1632 : 		// Get the leading info for this line
; 1633 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T233962[ebp], ecx
	mov	ecx, DWORD PTR $T233962[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$226570[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1634 : 		strBaseString += strPlayerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _strPlayerName$226571[ebp]
	push	eax
	lea	ecx, DWORD PTR $T233914[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv239[ebp], eax
	mov	edx, DWORD PTR tv239[ebp]
	mov	DWORD PTR tv198[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR tv198[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226570[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233914[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1635 : 
; 1636 : 		strTypeString.Format("Next Specialization: %d", (int)eType);

	mov	ecx, DWORD PTR _eType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BI@CKBCHJGH@Next?5Specialization?3?5?$CFd?$AA@
	lea	edx, DWORD PTR _strTypeString$226572[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1637 : 
; 1638 : 		strOutBuf = strBaseString + strTypeString;

	lea	eax, DWORD PTR _strTypeString$226572[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226570[ebp]
	push	ecx
	lea	edx, DWORD PTR $T233915[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv228[ebp], eax
	mov	eax, DWORD PTR tv228[ebp]
	mov	DWORD PTR $T233966[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T233966[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226569[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T233915[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1639 : 		pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226569[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T233970[ebp], eax
	mov	ecx, DWORD PTR $T233970[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$226574[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$226574[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8

; 1640 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strYieldString$226573[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strTypeString$226572[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strPlayerName$226571[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$226570[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$226569[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@LogNextSpe:

; 1641 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$226569[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$226570[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$2:
	lea	ecx, DWORD PTR _strPlayerName$226571[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$3:
	lea	ecx, DWORD PTR _strTypeString$226572[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$4:
	lea	ecx, DWORD PTR _strYieldString$226573[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$5:
	lea	ecx, DWORD PTR $T233913[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$6:
	lea	ecx, DWORD PTR $T233914[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z$7:
	lea	ecx, DWORD PTR $T233915[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogNextSpecialization@CvCitySpecializationAI@@AAEXW4CitySpecializationTypes@@@Z ENDP ; CvCitySpecializationAI::LogNextSpecialization
PUBLIC	??_C@_0BG@PIGCIFIK@?0?5Best?5site?5value?3?5?$CFd?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BG@PIGCIFIK@?0?5Best?5site?5value?3?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BG@PIGCIFIK@?0?5Best?5site?5value?3?5?$CFd?$AA@ DB ', Best site va'
	DB	'lue: %d', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogBestSites@CvCitySpecializationAI@@AAEXXZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?LogBestSites@CvCitySpecializationAI@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogBestSites@CvCitySpecializationAI@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$6
	DD	04H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$8
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogBestSites@CvCitySpecializationAI@@AAEXXZ
_TEXT	SEGMENT
tv246 = -340						; size = 4
tv227 = -336						; size = 4
tv257 = -332						; size = 4
tv225 = -328						; size = 4
tv268 = -324						; size = 4
tv279 = -320						; size = 4
tv95 = -316						; size = 4
_this$ = -312						; size = 4
$T234068 = -308						; size = 4
$T234064 = -304						; size = 4
$T234060 = -300						; size = 4
$T234051 = -296						; size = 4
$T234043 = -292						; size = 4
$T234042 = -288						; size = 4
$T234038 = -284						; size = 4
$T234003 = -280						; size = 28
$T234002 = -252						; size = 28
$T234001 = -224						; size = 28
$T234000 = -196						; size = 28
_pYieldInfo$226596 = -168				; size = 4
_iI$226592 = -164					; size = 4
_strOutBuf$226584 = -160				; size = 28
_strWeightString$226588 = -132				; size = 28
_strPlayerName$226586 = -104				; size = 28
_pLog$226589 = -76					; size = 4
_strYieldString$226587 = -72				; size = 28
_strBaseString$226585 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?LogBestSites@CvCitySpecializationAI@@AAEXXZ PROC	; CvCitySpecializationAI::LogBestSites, COMDAT
; _this$ = ecx

; 1644 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogBestSites@CvCitySpecializationAI@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 328				; 00000148H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1645 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN6@LogBestSit
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@LogBestSit

; 1646 : 	{
; 1647 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226584[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1648 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226585[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1649 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226586[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1650 : 		CvString strYieldString;

	lea	ecx, DWORD PTR _strYieldString$226587[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1651 : 		CvString strWeightString;

	lea	ecx, DWORD PTR _strWeightString$226588[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1652 : 		FILogFile* pLog;
; 1653 : 
; 1654 : 		// Find the name of this civ
; 1655 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ; CvCitySpecializationAI::GetPlayer
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T234038[ebp], eax
	cmp	DWORD PTR $T234038[ebp], 0
	je	SHORT $LN33@LogBestSit
	mov	edx, DWORD PTR $T234038[ebp]
	push	edx
	lea	ecx, DWORD PTR _strPlayerName$226586[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN34@LogBestSit
$LN33@LogBestSit:
	lea	ecx, DWORD PTR _strPlayerName$226586[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN34@LogBestSit:

; 1656 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv95[ebp], eax
	lea	eax, DWORD PTR _strPlayerName$226586[ebp]
	push	eax
	lea	ecx, DWORD PTR $T234000[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	DWORD PTR tv279[ebp], eax
	mov	edx, DWORD PTR tv279[ebp]
	mov	DWORD PTR $T234042[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR $T234042[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T234043[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T234043[ebp]
	push	eax
	mov	ecx, DWORD PTR tv95[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$226589[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T234000[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1657 : 
; 1658 : 		// Get the leading info for this line
; 1659 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234051[ebp], ecx
	mov	ecx, DWORD PTR $T234051[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$226585[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1660 : 		strBaseString += strPlayerName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _strPlayerName$226586[ebp]
	push	eax
	lea	ecx, DWORD PTR $T234001[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv268[ebp], eax
	mov	edx, DWORD PTR tv268[ebp]
	mov	DWORD PTR tv225[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR tv225[ebp]
	push	eax
	lea	ecx, DWORD PTR _strBaseString$226585[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T234001[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1661 : 
; 1662 : 		// Loop through each yield type
; 1663 : 		for(int iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$226592[ebp], 0
	jmp	SHORT $LN4@LogBestSit
$LN3@LogBestSit:
	mov	ecx, DWORD PTR _iI$226592[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$226592[ebp], ecx
$LN4@LogBestSit:
	cmp	DWORD PTR _iI$226592[ebp], 3
	jg	$LN2@LogBestSit

; 1664 : 		{
; 1665 : 			CvYieldInfo* pYieldInfo = GC.getYieldInfo((YieldTypes)iI);

	mov	edx, DWORD PTR _iI$226592[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z ; CvGlobals::getYieldInfo
	mov	DWORD PTR _pYieldInfo$226596[ebp], eax

; 1666 : 			if(pYieldInfo != NULL)

	cmp	DWORD PTR _pYieldInfo$226596[ebp], 0
	je	SHORT $LN1@LogBestSit

; 1667 : 			{
; 1668 : 				strYieldString = pYieldInfo->GetDescription();

	mov	ecx, DWORD PTR _pYieldInfo$226596[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T234060[ebp], eax
	cmp	DWORD PTR $T234060[ebp], 0
	je	SHORT $LN46@LogBestSit
	mov	eax, DWORD PTR $T234060[ebp]
	push	eax
	lea	ecx, DWORD PTR _strYieldString$226587[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@LogBestSit
$LN46@LogBestSit:
	lea	ecx, DWORD PTR _strYieldString$226587[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@LogBestSit:

; 1669 : 			}
; 1670 : 
; 1671 : 			strWeightString.Format(", Best site value: %d", m_iBestValue[iI]);

	mov	ecx, DWORD PTR _iI$226592[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+28]
	push	eax
	push	OFFSET ??_C@_0BG@PIGCIFIK@?0?5Best?5site?5value?3?5?$CFd?$AA@
	lea	ecx, DWORD PTR _strWeightString$226588[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1672 : 			strOutBuf = strBaseString + strYieldString + strWeightString;

	lea	edx, DWORD PTR _strYieldString$226587[ebp]
	push	edx
	lea	eax, DWORD PTR _strBaseString$226585[ebp]
	push	eax
	lea	ecx, DWORD PTR $T234002[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv257[ebp], eax
	mov	edx, DWORD PTR tv257[ebp]
	mov	DWORD PTR tv227[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	eax, DWORD PTR _strWeightString$226588[ebp]
	push	eax
	mov	ecx, DWORD PTR tv227[ebp]
	push	ecx
	lea	edx, DWORD PTR $T234003[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv246[ebp], eax
	mov	eax, DWORD PTR tv246[ebp]
	mov	DWORD PTR $T234064[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T234064[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226584[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T234003[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T234002[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1673 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226584[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T234068[ebp], eax
	mov	ecx, DWORD PTR $T234068[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$226589[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$226589[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8

; 1674 : 		}

	jmp	$LN3@LogBestSit
$LN2@LogBestSit:

; 1675 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strWeightString$226588[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strYieldString$226587[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strPlayerName$226586[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$226585[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$226584[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN6@LogBestSit:

; 1676 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$0:
	lea	ecx, DWORD PTR _strOutBuf$226584[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$1:
	lea	ecx, DWORD PTR _strBaseString$226585[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$2:
	lea	ecx, DWORD PTR _strPlayerName$226586[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$3:
	lea	ecx, DWORD PTR _strYieldString$226587[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$4:
	lea	ecx, DWORD PTR _strWeightString$226588[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$5:
	lea	ecx, DWORD PTR $T234000[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$6:
	lea	ecx, DWORD PTR $T234001[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$7:
	lea	ecx, DWORD PTR $T234002[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogBestSites@CvCitySpecializationAI@@AAEXXZ$8:
	lea	ecx, DWORD PTR $T234003[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogBestSites@CvCitySpecializationAI@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogBestSites@CvCitySpecializationAI@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogBestSites@CvCitySpecializationAI@@AAEXXZ ENDP	; CvCitySpecializationAI::LogBestSites
PUBLIC	??_C@_0M@PFAGLCPG@?0?5Value?3?5?$CFd?$AA@	; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0M@PFAGLCPG@?0?5Value?3?5?$CFd?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0M@PFAGLCPG@?0?5Value?3?5?$CFd?$AA@ DB ', Value: %d', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$10
	DD	05H
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$12
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z
_TEXT	SEGMENT
tv74 = -476						; size = 4
tv259 = -472						; size = 4
tv267 = -468						; size = 4
tv257 = -464						; size = 4
tv278 = -460						; size = 4
tv255 = -456						; size = 4
tv289 = -452						; size = 4
tv253 = -448						; size = 4
tv300 = -444						; size = 4
tv311 = -440						; size = 4
tv322 = -436						; size = 4
tv130 = -432						; size = 4
_this$ = -428						; size = 4
$T234185 = -424						; size = 4
$T234181 = -420						; size = 4
$T234177 = -416						; size = 4
$T234168 = -412						; size = 4
$T234160 = -408						; size = 4
$T234152 = -404						; size = 4
$T234151 = -400						; size = 4
$T234147 = -396						; size = 4
$T234104 = -392						; size = 28
$T234103 = -364						; size = 28
$T234102 = -336						; size = 28
$T234101 = -308						; size = 28
$T234100 = -280						; size = 28
$T234099 = -252						; size = 28
$T234098 = -224						; size = 28
_pYieldInfo$226624 = -196				; size = 4
_iI$226620 = -192					; size = 4
_strOutBuf$226608 = -188				; size = 28
_strWeightString$226613 = -160				; size = 28
_strPlayerName$226610 = -132				; size = 28
_strCityName$226611 = -104				; size = 28
_pLog$226614 = -76					; size = 4
_strYieldString$226612 = -72				; size = 28
_strBaseString$226609 = -44				; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pCity$ = 8						; size = 4
_data$ = 12						; size = 24
?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z PROC ; CvCitySpecializationAI::LogCity, COMDAT
; _this$ = ecx

; 1683 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 464				; 000001d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1684 : 	if(GC.getLogging() && GC.getAILogging())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getLogging@CvGlobals@@QAE_NXZ		; CvGlobals::getLogging
	movzx	eax, al
	test	eax, eax
	je	$LN6@LogCity
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAILogging@CvGlobals@@QAE_NXZ	; CvGlobals::getAILogging
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@LogCity

; 1685 : 	{
; 1686 : 		CvString strOutBuf;

	lea	ecx, DWORD PTR _strOutBuf$226608[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1687 : 		CvString strBaseString;

	lea	ecx, DWORD PTR _strBaseString$226609[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 1688 : 		CvString strPlayerName;

	lea	ecx, DWORD PTR _strPlayerName$226610[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1689 : 		CvString strCityName;

	lea	ecx, DWORD PTR _strCityName$226611[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1690 : 		CvString strYieldString;

	lea	ecx, DWORD PTR _strYieldString$226612[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 1691 : 		CvString strWeightString;

	lea	ecx, DWORD PTR _strWeightString$226613[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 1692 : 		FILogFile* pLog;
; 1693 : 
; 1694 : 		// Find the name of this civ
; 1695 : 		strPlayerName = GetPlayer()->getCivilizationShortDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPlayer@CvCitySpecializationAI@@QAEPAVCvPlayer@@XZ ; CvCitySpecializationAI::GetPlayer
	mov	ecx, eax
	call	?getCivilizationShortDescription@CvPlayer@@QBEPBDXZ ; CvPlayer::getCivilizationShortDescription
	mov	DWORD PTR $T234147[ebp], eax
	cmp	DWORD PTR $T234147[ebp], 0
	je	SHORT $LN40@LogCity
	mov	edx, DWORD PTR $T234147[ebp]
	push	edx
	lea	ecx, DWORD PTR _strPlayerName$226610[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN41@LogCity
$LN40@LogCity:
	lea	ecx, DWORD PTR _strPlayerName$226610[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN41@LogCity:

; 1696 : 		pLog = LOGFILEMGR.GetLog(GetLogFileName(strPlayerName), FILogFile::kDontTimeStamp);

	call	?GetInstance@FILogFileMgr@@SAAAV1@XZ	; FILogFileMgr::GetInstance
	mov	DWORD PTR tv130[ebp], eax
	lea	eax, DWORD PTR _strPlayerName$226610[ebp]
	push	eax
	lea	ecx, DWORD PTR $T234098[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ; CvCitySpecializationAI::GetLogFileName
	mov	DWORD PTR tv322[ebp], eax
	mov	edx, DWORD PTR tv322[ebp]
	mov	DWORD PTR $T234151[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR $T234151[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T234152[ebp], eax
	push	0
	push	1
	mov	eax, DWORD PTR $T234152[ebp]
	push	eax
	mov	ecx, DWORD PTR tv130[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv130[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _pLog$226614[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T234098[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1697 : 		strCityName = pCity->getName();

	lea	ecx, DWORD PTR $T234099[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pCity$[ebp]
	call	?getName@CvCity@@QBE?BVCvString@@XZ	; CvCity::getName
	mov	DWORD PTR tv311[ebp], eax
	mov	edx, DWORD PTR tv311[ebp]
	mov	DWORD PTR $T234160[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR $T234160[ebp]
	push	eax
	lea	ecx, DWORD PTR _strCityName$226611[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T234099[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1698 : 
; 1699 : 		// Get the leading info for this line
; 1700 : 		strBaseString.Format("%03d, ", GC.getGame().getElapsedGameTurns());

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T234168[ebp], ecx
	mov	ecx, DWORD PTR $T234168[ebp]
	call	?getElapsedGameTurns@CvGame@@QBEHXZ	; CvGame::getElapsedGameTurns
	push	eax
	push	OFFSET ??_C@_06NHKAIDD@?$CF03d?0?5?$AA@
	lea	edx, DWORD PTR _strBaseString$226609[ebp]
	push	edx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1701 : 		strBaseString += strPlayerName + ", " + strCityName + ", ";

	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	eax, DWORD PTR _strPlayerName$226610[ebp]
	push	eax
	lea	ecx, DWORD PTR $T234100[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv300[ebp], eax
	mov	edx, DWORD PTR tv300[ebp]
	mov	DWORD PTR tv253[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	eax, DWORD PTR _strCityName$226611[ebp]
	push	eax
	mov	ecx, DWORD PTR tv253[ebp]
	push	ecx
	lea	edx, DWORD PTR $T234101[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv289[ebp], eax
	mov	eax, DWORD PTR tv289[ebp]
	mov	DWORD PTR tv255[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	mov	ecx, DWORD PTR tv255[ebp]
	push	ecx
	lea	edx, DWORD PTR $T234102[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv278[ebp], eax
	mov	eax, DWORD PTR tv278[ebp]
	mov	DWORD PTR tv257[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	ecx, DWORD PTR tv257[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strBaseString$226609[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	lea	ecx, DWORD PTR $T234102[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T234101[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T234100[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1702 : 
; 1703 : 		// Loop through each yield type
; 1704 : 		for(int iI = 0; iI <= YIELD_SCIENCE; iI++)

	mov	DWORD PTR _iI$226620[ebp], 0
	jmp	SHORT $LN4@LogCity
$LN3@LogCity:
	mov	edx, DWORD PTR _iI$226620[ebp]
	add	edx, 1
	mov	DWORD PTR _iI$226620[ebp], edx
$LN4@LogCity:
	cmp	DWORD PTR _iI$226620[ebp], 3
	jg	$LN2@LogCity

; 1705 : 		{
; 1706 : 			CvYieldInfo* pYieldInfo = GC.getYieldInfo((YieldTypes)iI);

	mov	eax, DWORD PTR _iI$226620[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getYieldInfo@CvGlobals@@QAEPAVCvYieldInfo@@W4YieldTypes@@@Z ; CvGlobals::getYieldInfo
	mov	DWORD PTR _pYieldInfo$226624[ebp], eax

; 1707 : 			if(pYieldInfo != NULL)

	cmp	DWORD PTR _pYieldInfo$226624[ebp], 0
	je	SHORT $LN1@LogCity

; 1708 : 			{
; 1709 : 				strYieldString = pYieldInfo->GetDescription();

	mov	ecx, DWORD PTR _pYieldInfo$226624[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T234177[ebp], eax
	cmp	DWORD PTR $T234177[ebp], 0
	je	SHORT $LN58@LogCity
	mov	ecx, DWORD PTR $T234177[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strYieldString$226612[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@LogCity
$LN58@LogCity:
	lea	ecx, DWORD PTR _strYieldString$226612[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@LogCity:

; 1710 : 			}
; 1711 : 
; 1712 : 			strWeightString.Format(", Value: %d", data.m_iWeight[iI]);

	mov	edx, DWORD PTR _iI$226620[ebp]
	mov	eax, DWORD PTR _data$[ebp+edx*4+4]
	push	eax
	push	OFFSET ??_C@_0M@PFAGLCPG@?0?5Value?3?5?$CFd?$AA@
	lea	ecx, DWORD PTR _strWeightString$226613[ebp]
	push	ecx
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 12					; 0000000cH

; 1713 : 			strOutBuf = strBaseString + strYieldString + strWeightString;

	lea	edx, DWORD PTR _strYieldString$226612[ebp]
	push	edx
	lea	eax, DWORD PTR _strBaseString$226609[ebp]
	push	eax
	lea	ecx, DWORD PTR $T234103[ebp]
	push	ecx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv267[ebp], eax
	mov	edx, DWORD PTR tv267[ebp]
	mov	DWORD PTR tv259[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	eax, DWORD PTR _strWeightString$226613[ebp]
	push	eax
	mov	ecx, DWORD PTR tv259[ebp]
	push	ecx
	lea	edx, DWORD PTR $T234104[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv74[ebp], eax
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T234181[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T234181[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strOutBuf$226608[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR $T234104[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T234103[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1714 : 			pLog->Msg(strOutBuf);

	lea	ecx, DWORD PTR _strOutBuf$226608[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T234185[ebp], eax
	mov	ecx, DWORD PTR $T234185[ebp]
	push	ecx
	mov	edx, DWORD PTR _pLog$226614[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pLog$226614[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8

; 1715 : 		}

	jmp	$LN3@LogCity
$LN2@LogCity:

; 1716 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _strWeightString$226613[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _strYieldString$226612[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _strCityName$226611[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strPlayerName$226610[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strBaseString$226609[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutBuf$226608[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN6@LogCity:

; 1717 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$0:
	lea	ecx, DWORD PTR _strOutBuf$226608[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$1:
	lea	ecx, DWORD PTR _strBaseString$226609[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$2:
	lea	ecx, DWORD PTR _strPlayerName$226610[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$3:
	lea	ecx, DWORD PTR _strCityName$226611[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$4:
	lea	ecx, DWORD PTR _strYieldString$226612[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$5:
	lea	ecx, DWORD PTR _strWeightString$226613[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$6:
	lea	ecx, DWORD PTR $T234098[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$7:
	lea	ecx, DWORD PTR $T234099[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$8:
	lea	ecx, DWORD PTR $T234100[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$9:
	lea	ecx, DWORD PTR $T234101[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$10:
	lea	ecx, DWORD PTR $T234102[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$11:
	lea	ecx, DWORD PTR $T234103[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z$12:
	lea	ecx, DWORD PTR $T234104[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-468]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LogCity@CvCitySpecializationAI@@AAEXPAVCvCity@@VCitySpecializationData@@@Z ENDP ; CvCitySpecializationAI::LogCity
PUBLIC	??_C@_0BK@HFDJGIND@CitySpecializationLog?4csv?$AA@ ; `string'
PUBLIC	??_C@_04EBGNMJBD@?4csv?$AA@			; `string'
PUBLIC	??_C@_0BH@DJKEFOGO@CitySpecializationLog_?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z:PROC
EXTRN	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ:PROC ; CvGlobals::getPlayerAndCityAILogSplit
;	COMDAT ??_C@_0BK@HFDJGIND@CitySpecializationLog?4csv?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BK@HFDJGIND@CitySpecializationLog?4csv?$AA@ DB 'CitySpecialization'
	DB	'Log.csv', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBGNMJBD@?4csv?$AA@
CONST	SEGMENT
??_C@_04EBGNMJBD@?4csv?$AA@ DB '.csv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DJKEFOGO@CitySpecializationLog_?$AA@
CONST	SEGMENT
??_C@_0BH@DJKEFOGO@CitySpecializationLog_?$AA@ DB 'CitySpecializationLog_'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$2
__ehfuncinfo$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvcityspecializationai.cpp
xdata$x	ENDS
;	COMDAT ?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z
_TEXT	SEGMENT
tv142 = -124						; size = 4
tv129 = -120						; size = 4
tv169 = -116						; size = 4
_this$ = -112						; size = 4
$T234234 = -108						; size = 4
$T234225 = -104						; size = 4
$T234220 = -100						; size = 28
$T234219 = -72						; size = 28
_strLogName$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_playerName$ = 12					; size = 4
?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z PROC ; CvCitySpecializationAI::GetLogFileName, COMDAT
; _this$ = ecx

; 1721 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T234225[ebp], 0

; 1722 : 	CvString strLogName;

	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1723 : 
; 1724 : 	// Open the log file
; 1725 : 	if(GC.getPlayerAndCityAILogSplit())

	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPlayerAndCityAILogSplit@CvGlobals@@QAE_NXZ ; CvGlobals::getPlayerAndCityAILogSplit
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetLogFile

; 1726 : 	{
; 1727 : 		strLogName = "CitySpecializationLog_" + playerName + ".csv";

	mov	ecx, DWORD PTR _playerName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@DJKEFOGO@CitySpecializationLog_?$AA@
	lea	edx, DWORD PTR $T234219[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBDABV10@@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv169[ebp], eax
	mov	eax, DWORD PTR tv169[ebp]
	mov	DWORD PTR tv129[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	OFFSET ??_C@_04EBGNMJBD@?4csv?$AA@
	mov	ecx, DWORD PTR tv129[ebp]
	push	ecx
	lea	edx, DWORD PTR $T234220[ebp]
	push	edx
	call	DWORD PTR __imp_??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@PBD@Z
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv142[ebp], eax
	mov	eax, DWORD PTR tv142[ebp]
	mov	DWORD PTR $T234234[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T234234[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T234220[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T234219[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1728 : 	}
; 1729 : 	else

	jmp	SHORT $LN1@GetLogFile
$LN2@GetLogFile:

; 1730 : 	{
; 1731 : 		strLogName = "CitySpecializationLog.csv";

	mov	ecx, OFFSET ??_C@_0BK@HFDJGIND@CitySpecializationLog?4csv?$AA@
	test	ecx, ecx
	je	SHORT $LN16@GetLogFile
	push	OFFSET ??_C@_0BK@HFDJGIND@CitySpecializationLog?4csv?$AA@
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@GetLogFile
$LN16@GetLogFile:
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@GetLogFile:

; 1732 : 	}
; 1733 : 
; 1734 : 	return strLogName;

	lea	edx, DWORD PTR _strLogName$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T234225[ebp]
	or	eax, 1
	mov	DWORD PTR $T234225[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strLogName$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1735 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$0:
	lea	ecx, DWORD PTR _strLogName$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$1:
	lea	ecx, DWORD PTR $T234219[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$2:
	lea	ecx, DWORD PTR $T234220[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z$3:
	mov	eax, DWORD PTR $T234225[ebp]
	and	eax, 1
	je	$LN9@GetLogFile
	and	DWORD PTR $T234225[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN9@GetLogFile:
	ret	0
__ehhandler$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLogFileName@CvCitySpecializationAI@@QBE?AVCvString@@AAV2@@Z ENDP ; CvCitySpecializationAI::GetLogFileName
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
;	COMDAT ??1?$CvWeightedVector@H$03$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@H$03$00@@QAE@XZ PROC		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@H$03$00@@QAE@XZ ENDP		; CvWeightedVector<int,4,1>::~CvWeightedVector<int,4,1>
_TEXT	ENDS
PUBLIC	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
; Function compile flags: /Odtp
;	COMDAT ?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ
_TEXT	SEGMENT
_this$ = -156						; size = 4
$T234293 = -8						; size = 4
$T234289 = -4						; size = 4
?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ PROC	; CvWeightedVector<int,4,1>::SortItems, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		std::sort(m_pItems.begin(), m_pItems.end());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T234289[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T234293[ebp], eax
	mov	ecx, DWORD PTR $T234289[ebp]
	sub	ecx, DWORD PTR $T234293[ebp]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR $T234289[ebp]
	push	edx
	mov	eax, DWORD PTR $T234293[ebp]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 141  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?SortItems@?$CvWeightedVector@H$03$00@@QAEXXZ ENDP	; CvWeightedVector<int,4,1>::SortItems
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
PUBLIC	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv90 = -68						; size = 4
tv148 = -64						; size = 4
tv173 = -60						; size = 4
tv197 = -56						; size = 4
_this$ = -52						; size = 4
$T234620 = -48						; size = 1
$T234593 = -47						; size = 1
$T234573 = -46						; size = 1
$T234560 = -45						; size = 1
$T234556 = -44						; size = 4
$T234549 = -36						; size = 4
$T234542 = -28						; size = 4
$T234535 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T234620[ebp]
	mov	DWORD PTR $T234535[ebp], eax
	lea	ecx, DWORD PTR $T234593[ebp]
	mov	DWORD PTR $T234542[ebp], ecx
	lea	edx, DWORD PTR $T234573[ebp]
	mov	DWORD PTR $T234549[ebp], edx
	lea	eax, DWORD PTR $T234560[ebp]
	mov	DWORD PTR $T234556[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv197[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv173[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 437  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T234683 = -36						; size = 4
$T234660 = -32						; size = 4
__$EHRec$ = -12						; size = 12
??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 521  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T234660[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T234683[ebp], eax
	mov	ecx, DWORD PTR $T234683[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 522  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
__ehhandler$??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Odtp
;	COMDAT ?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T234800 = -20						; size = 4
$T234764 = -16						; size = 4
__Tmp$234751 = -12					; size = 4
$T234735 = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Tmp$234751[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Where$[ebp], edx
	mov	eax, DWORD PTR __Tmp$234751[ebp]
	mov	DWORD PTR $T234735[ebp], eax
	mov	ecx, DWORD PTR $T234735[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN1@erase

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T234764[ebp], edx
	mov	eax, DWORD PTR $T234764[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 802  : 			this->_Alnod.destroy(_Pnode);
; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 804  : 			--_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN1@erase:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T234800[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T234800[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 807  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::erase
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T234810 = -16						; size = 4
$T234806 = -12						; size = 4
__Pnext$ = -8						; size = 4
__Pnode$ = -4						; size = 4
?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T234806[ebp], ecx
	mov	edx, DWORD PTR $T234806[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax

; 833  : 		_Nextnode(_Myhead) = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T234810[ebp], edx
	mov	eax, DWORD PTR $T234810[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 834  : 		_Prevnode(_Myhead) = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 835  : 		_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear
$LN2@clear:
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN3@clear:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN4@clear

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnext$[ebp], eax

; 840  : 			this->_Alnod.destroy(_Pnode);
; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 842  : 			}

	jmp	SHORT $LN2@clear
$LN4@clear:

; 843  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXXZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::clear
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvweightedvector.h
_TEXT	ENDS
;	COMDAT ??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ PROC	; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@W4YieldTypes@@$04$00@@QAE@XZ ENDP	; CvWeightedVector<enum YieldTypes,5,1>::~CvWeightedVector<enum YieldTypes,5,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ PROC ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::~CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>, COMDAT
; _this$ = ecx

; 58   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 59   : 	};

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@QAE@XZ ENDP ; CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::~CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>
_TEXT	ENDS
PUBLIC	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv90 = -68						; size = 4
tv148 = -64						; size = 4
tv173 = -60						; size = 4
tv197 = -56						; size = 4
_this$ = -52						; size = 4
$T234980 = -48						; size = 1
$T234953 = -47						; size = 1
$T234933 = -46						; size = 1
$T234920 = -45						; size = 1
$T234916 = -44						; size = 4
$T234909 = -36						; size = 4
$T234902 = -28						; size = 4
$T234895 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::list<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 436  : 		{	// construct empty list

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T234980[ebp]
	mov	DWORD PTR $T234895[ebp], eax
	lea	ecx, DWORD PTR $T234953[ebp]
	mov	DWORD PTR $T234902[ebp], ecx
	lea	edx, DWORD PTR $T234933[ebp]
	mov	DWORD PTR $T234909[ebp], edx
	lea	eax, DWORD PTR $T234920[ebp]
	mov	DWORD PTR $T234916[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv197[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv173[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv90[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 437  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
__ehhandler$??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::list<CitySpecializationData,std::allocator<CitySpecializationData> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T235043 = -36						; size = 4
$T235020 = -32						; size = 4
__$EHRec$ = -12						; size = 12
??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::~list<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx

; 520  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 521  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235020[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T235043[ebp], eax
	mov	ecx, DWORD PTR $T235043[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 522  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
__ehhandler$??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::~list<CitySpecializationData,std::allocator<CitySpecializationData> >
; Function compile flags: /Odtp
;	COMDAT ?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T235160 = -20						; size = 4
$T235124 = -16						; size = 4
__Tmp$235111 = -12					; size = 4
$T235095 = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::erase, COMDAT
; _this$ = ecx

; 786  : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 787  : 
; 788  :  #if _HAS_ITERATOR_DEBUGGING
; 789  : 		if (_Where._Mycont != this || _Where._Ptr == _Myhead)
; 790  : 			_DEBUG_ERROR("list erase iterator outside range");
; 791  : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 792  : 		_Orphan_ptr(*this, _Pnode);
; 793  : 
; 794  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 795  : 		_Nodeptr _Pnode = (_Where++)._Mynode();

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Tmp$235111[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Where$[ebp], edx
	mov	eax, DWORD PTR __Tmp$235111[ebp]
	mov	DWORD PTR $T235095[ebp], eax
	mov	ecx, DWORD PTR $T235095[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 796  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 797  : 
; 798  : 		if (_Pnode != _Myhead)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN1@erase@2

; 799  : 			{	// not list head, safe to erase
; 800  : 			_Nextnode(_Prevnode(_Pnode)) = _Nextnode(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235124[ebp], edx
	mov	eax, DWORD PTR $T235124[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 801  : 			_Prevnode(_Nextnode(_Pnode)) = _Prevnode(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 802  : 			this->_Alnod.destroy(_Pnode);
; 803  : 			this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 804  : 			--_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN1@erase@2:

; 805  : 			}
; 806  : 		return (_Make_iter(_Where));

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T235160[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T235160[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 807  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE?AV?$_Iterator@$0A@@12@V?$_Const_iterator@$0A@@12@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::erase
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T235170 = -16						; size = 4
$T235166 = -12						; size = 4
__Pnext$ = -8						; size = 4
__Pnode$ = -4						; size = 4
?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear, COMDAT
; _this$ = ecx

; 825  : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 826  : 
; 827  :  #if _HAS_ITERATOR_DEBUGGING
; 828  : 		this->_Orphan_ptr(*this, 0);
; 829  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 830  : 
; 831  : 		_Nodeptr _Pnext;
; 832  : 		_Nodeptr _Pnode = _Nextnode(_Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235166[ebp], ecx
	mov	edx, DWORD PTR $T235166[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax

; 833  : 		_Nextnode(_Myhead) = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235170[ebp], edx
	mov	eax, DWORD PTR $T235170[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 834  : 		_Prevnode(_Myhead) = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 835  : 		_Mysize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 836  : 
; 837  : 		for (; _Pnode != _Myhead; _Pnode = _Pnext)

	jmp	SHORT $LN3@clear@2
$LN2@clear@2:
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN3@clear@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN4@clear@2

; 838  : 			{	// delete an element
; 839  : 			_Pnext = _Nextnode(_Pnode);

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnext$[ebp], eax

; 840  : 			this->_Alnod.destroy(_Pnode);
; 841  : 			this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 842  : 			}

	jmp	SHORT $LN2@clear@2
$LN4@clear@2:

; 843  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::~_Vector_val<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ PROC ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_val@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::~_List_val<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ PROC ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_val@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >::~_List_val<CitySpecializationData,std::allocator<CitySpecializationData> >
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
PUBLIC	??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ ; `string'
EXTRN	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z:PROC ; FireMallocAlignedNoTracking
;	COMDAT ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
CONST	SEGMENT
??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@ DB 'd:\sources\'
	DB	'lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\FF'
	DB	'astVector.h', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T235246 = -20						; size = 4
_pRet$235243 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T235246[ebp], edx
	cmp	DWORD PTR $T235246[ebp], 4
	jbe	SHORT $LN7@FStaticVec
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T235246[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$235243[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T235246[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec
$LN7@FStaticVec:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$235243[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 4
$LN8@FStaticVec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$235243[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
EXTRN	?FireFreeAlignedNoTracking@@YAXPAX@Z:PROC	; FireFreeAlignedNoTracking
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T235277 = -24						; size = 4
$T235276 = -20						; size = 4
_i$235268 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235277[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235276[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@2
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@2
	mov	DWORD PTR _i$235268[ebp], 0
	jmp	SHORT $LN10@FStaticVec@2
$LN9@FStaticVec@2:
	mov	eax, DWORD PTR _i$235268[ebp]
	add	eax, 1
	mov	DWORD PTR _i$235268[ebp], eax
$LN10@FStaticVec@2:
	mov	ecx, DWORD PTR _i$235268[ebp]
	cmp	ecx, DWORD PTR $T235277[ebp]
	jae	SHORT $LN5@FStaticVec@2
	jmp	SHORT $LN9@FStaticVec@2
$LN5@FStaticVec@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T235276[ebp], edx
	je	SHORT $LN1@FStaticVec@2
	mov	eax, DWORD PTR $T235276[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@2:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T235290 = -8						; size = 4
$T235289 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T235290[ebp], ecx
	cmp	DWORD PTR $T235290[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR $T235290[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T235290[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T235290[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T235289[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@H$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T235434 = -52						; size = 4
$T235423 = -48						; size = 4
$T235422 = -44						; size = 4
__Cat$235430 = -40					; size = 1
$T235428 = -39						; size = 1
__Ptr$226905 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@3

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z ; stdext::unchecked_copy<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$226905[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T235434[ebp], edx
	mov	eax, DWORD PTR $T235434[ebp]
	mov	DWORD PTR $T235423[ebp], eax
	mov	ecx, DWORD PTR __Ptr$226905[ebp]
	mov	DWORD PTR $T235422[ebp], ecx
	mov	dl, BYTE PTR __Cat$235430[ebp]
	mov	BYTE PTR $T235428[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$226905[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@3:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@V?$_Vector_const_iterator@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@2@0@Z ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z ; std::_Allocate<CvCitySpecializationXMLEntry *>
PUBLIC	?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$235449 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$235449[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$235449[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$235449[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z ; std::_Allocate<CvCitySpecializationXMLEntry *>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T235515 = -28						; size = 4
$T235514 = -24						; size = 4
$T235510 = -20						; size = 4
$T235509 = -16						; size = 4
$T235498 = -12						; size = 4
$T235497 = -8						; size = 4
__Cat$235505 = -2					; size = 1
$T235503 = -1						; size = 1
?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T235510[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235509[ebp], ecx
	mov	edx, DWORD PTR $T235510[ebp]
	mov	DWORD PTR $T235498[ebp], edx
	mov	eax, DWORD PTR $T235509[ebp]
	mov	DWORD PTR $T235497[ebp], eax
	mov	cl, BYTE PTR __Cat$235505[ebp]
	mov	BYTE PTR $T235503[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T235515[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T235514[ebp], eax
	mov	ecx, DWORD PTR $T235514[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize
PUBLIC	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T235557 = -84						; size = 4
__Pnode$ = -8						; size = 4
__Newnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Insert, COMDAT
; _this$ = ecx

; 710  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax

; 719  : 		_Incsize(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235557[ebp], edx
	mov	eax, DWORD PTR $T235557[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Insert@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABW4CitySpecializationTypes@@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Insert
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocate
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ$0
__unwindtable$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ$2
__ehfuncinfo$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ
_TEXT	SEGMENT
tv157 = -84						; size = 4
tv152 = -80						; size = 4
_this$ = -76						; size = 4
$T235649 = -72						; size = 4
$T235634 = -68						; size = 4
$T235626 = -64						; size = 4
__Vptr$235632 = -60					; size = 4
$T235604 = -56						; size = 4
$T235596 = -52						; size = 4
__Vptr$235602 = -48					; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode, COMDAT
; _this$ = ecx

; 1171 : 		{	// allocate a head node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1173 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1174 : 
; 1175 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR $T235604[ebp], eax
	mov	ecx, DWORD PTR $T235604[ebp]
	mov	DWORD PTR __Vptr$235602[ebp], ecx
	mov	edx, DWORD PTR __Vptr$235602[ebp]
	mov	DWORD PTR $T235596[ebp], edx
	cmp	DWORD PTR $T235596[ebp], 0
	je	SHORT $LN22@Buynode
	mov	eax, DWORD PTR $T235596[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T235596[ebp]
	mov	DWORD PTR tv152[ebp], edx
	jmp	SHORT $LN18@Buynode
$LN22@Buynode:
	mov	DWORD PTR tv152[ebp], 0
$LN18@Buynode:

; 1177 : 		++_Linkcnt;

	mov	eax, DWORD PTR __Linkcnt$[ebp]
	add	eax, 1
	mov	DWORD PTR __Linkcnt$[ebp], eax

; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T235634[ebp], ecx
	mov	edx, DWORD PTR $T235634[ebp]
	mov	DWORD PTR __Vptr$235632[ebp], edx
	mov	eax, DWORD PTR __Vptr$235632[ebp]
	mov	DWORD PTR $T235626[ebp], eax
	cmp	DWORD PTR $T235626[ebp], 0
	je	SHORT $LN32@Buynode
	mov	ecx, DWORD PTR $T235626[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T235626[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN28@Buynode
$LN32@Buynode:
	mov	DWORD PTR tv157[ebp], 0
$LN28@Buynode:
	jmp	SHORT $LN5@Buynode
__catch$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ$0:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR $T235649[ebp], ecx
	mov	edx, DWORD PTR $T235649[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1183 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1184 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ$1
	ret	0
$LN5@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ$1:

; 1185 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode:

; 1186 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@XZ ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T235671 = -20						; size = 4
_pRet$235668 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 5

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T235671[ebp], edx
	cmp	DWORD PTR $T235671[ebp], 5
	jbe	SHORT $LN7@FStaticVec@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T235671[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$235668[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T235671[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@3
$LN7@FStaticVec@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$235668[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 5
$LN8@FStaticVec@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$235668[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T235702 = -24						; size = 4
$T235701 = -20						; size = 4
_i$235694 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235702[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235701[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@4
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@4
	mov	DWORD PTR _i$235694[ebp], 0
	jmp	SHORT $LN10@FStaticVec@4
$LN9@FStaticVec@4:
	mov	eax, DWORD PTR _i$235694[ebp]
	add	eax, 1
	mov	DWORD PTR _i$235694[ebp], eax
$LN10@FStaticVec@4:
	mov	ecx, DWORD PTR _i$235694[ebp]
	cmp	ecx, DWORD PTR $T235702[ebp]
	jae	SHORT $LN5@FStaticVec@4
	jmp	SHORT $LN9@FStaticVec@4
$LN5@FStaticVec@4:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T235701[ebp], edx
	je	SHORT $LN1@FStaticVec@4
	mov	eax, DWORD PTR $T235701[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@4:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::~FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T235715 = -8						; size = 4
$T235714 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+52], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back@2

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T235715[ebp], ecx
	cmp	DWORD PTR $T235715[ebp], 0
	je	SHORT $LN4@push_back@2
	mov	edx, DWORD PTR $T235715[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T235715[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T235715[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back@2:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T235714[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@Z ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T235779 = -20						; size = 4
_pRet$235776 = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 601  : 	FStaticVector()

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 602  :     {
; 603  : 		m_uiCurrMaxSize = L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4

; 604  : 		m_pData = Alloc(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T235779[ebp], edx
	cmp	DWORD PTR $T235779[ebp], 4
	jbe	SHORT $LN7@FStaticVec@5
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	eax, DWORD PTR $T235779[ebp]
	shl	eax, 3
	push	eax
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$235776[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T235779[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN8@FStaticVec@5
$LN7@FStaticVec@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pRet$235776[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 4
$LN8@FStaticVec@5:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pRet$235776[ebp]
	mov	DWORD PTR [edx], eax

; 605  : #ifdef BREAK_ON_STATIC_RESIZE
; 606  : 		m_iNumResized = 0;
; 607  : #endif
; 608  :     };

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>
__ehhandler$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ$0
__ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T235810 = -24						; size = 4
$T235809 = -20						; size = 4
_i$235802 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>, COMDAT
; _this$ = ecx

; 617  : 	~FStaticVector(){

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 618  : 		Free(m_pData, m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T235810[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235809[ebp], eax
	xor	ecx, ecx
	je	SHORT $LN5@FStaticVec@6
	xor	edx, edx
	je	SHORT $LN5@FStaticVec@6
	mov	DWORD PTR _i$235802[ebp], 0
	jmp	SHORT $LN10@FStaticVec@6
$LN9@FStaticVec@6:
	mov	eax, DWORD PTR _i$235802[ebp]
	add	eax, 1
	mov	DWORD PTR _i$235802[ebp], eax
$LN10@FStaticVec@6:
	mov	ecx, DWORD PTR _i$235802[ebp]
	cmp	ecx, DWORD PTR $T235810[ebp]
	jae	SHORT $LN5@FStaticVec@6
	jmp	SHORT $LN9@FStaticVec@6
$LN5@FStaticVec@6:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	cmp	DWORD PTR $T235809[ebp], edx
	je	SHORT $LN1@FStaticVec@6
	mov	eax, DWORD PTR $T235809[ebp]
	push	eax
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN1@FStaticVec@6:

; 619  : 	};

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>
__ehhandler$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAE@XZ ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::~FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>
PUBLIC	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z
_TEXT	SEGMENT
tv157 = -64						; size = 4
tv149 = -60						; size = 4
_this$ = -56						; size = 4
$T235823 = -8						; size = 4
$T235822 = -4						; size = 4
_element$ = 8						; size = 4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back, COMDAT
; _this$ = ecx

; 676  : 	unsigned int push_back(const T& element){

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 677  : 		m_bIsResized = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 678  : 		if( m_uiCurrSize == m_uiCurrMaxSize )

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN39@push_back@3

; 679  : 			GrowSize(m_uiCurrMaxSize);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize

; 680  : 		new( (void*)&m_pData[m_uiCurrSize] )T(element);

$LN39@push_back@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T235823[ebp], ecx
	cmp	DWORD PTR $T235823[ebp], 0
	je	SHORT $LN4@push_back@3
	mov	edx, DWORD PTR $T235823[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T235823[ebp]
	mov	eax, DWORD PTR _element$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR $T235823[ebp]
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN5@push_back@3
$LN4@push_back@3:
	mov	DWORD PTR tv149[ebp], 0
$LN5@push_back@3:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T235822[ebp], eax

; 681  : 		return m_uiCurrSize++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv157[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR tv157[ebp]

; 682  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@QAEIABUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@Z ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::push_back
_TEXT	ENDS
PUBLIC	?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize
PUBLIC	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
;	COMDAT ?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T235916 = -84						; size = 4
__Pnode$ = -8						; size = 4
__Newnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__Val$ = 12						; size = 4
?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Insert, COMDAT
; _this$ = ecx

; 710  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 711  : 
; 712  :  #if _HAS_ITERATOR_DEBUGGING
; 713  : 		if (_Where._Mycont != this)
; 714  : 			_DEBUG_ERROR("list insert iterator outside range");
; 715  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 716  : 
; 717  : 		_Nodeptr _Pnode = _Where._Mynode();

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 718  : 		_Nodeptr _Newnode = _Buynode(_Pnode, _Prevnode(_Pnode), _Val);

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax

; 719  : 		_Incsize(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize

; 720  : 		_Prevnode(_Pnode) = _Newnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 721  : 		_Nextnode(_Prevnode(_Newnode)) = _Newnode;

	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T235916[ebp], edx
	mov	eax, DWORD PTR $T235916[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Insert@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXV?$_Const_iterator@$0A@@12@ABVCitySpecializationData@@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Insert
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocate
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ$0
__unwindtable$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ$2
__ehfuncinfo$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ
_TEXT	SEGMENT
tv157 = -84						; size = 4
tv152 = -80						; size = 4
_this$ = -76						; size = 4
$T236008 = -72						; size = 4
$T235993 = -68						; size = 4
$T235988 = -64						; size = 4
__Vptr$235986 = -60					; size = 4
$T235963 = -56						; size = 4
$T235958 = -52						; size = 4
__Vptr$235956 = -48					; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode, COMDAT
; _this$ = ecx

; 1171 : 		{	// allocate a head node and set links

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1172 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1173 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1174 : 
; 1175 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1176 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR $T235963[ebp], eax
	mov	ecx, DWORD PTR $T235963[ebp]
	mov	DWORD PTR __Vptr$235956[ebp], ecx
	mov	edx, DWORD PTR __Vptr$235956[ebp]
	mov	DWORD PTR $T235958[ebp], edx
	cmp	DWORD PTR $T235958[ebp], 0
	je	SHORT $LN22@Buynode@2
	mov	eax, DWORD PTR $T235958[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T235958[ebp]
	mov	DWORD PTR tv152[ebp], edx
	jmp	SHORT $LN18@Buynode@2
$LN22@Buynode@2:
	mov	DWORD PTR tv152[ebp], 0
$LN18@Buynode@2:

; 1177 : 		++_Linkcnt;

	mov	eax, DWORD PTR __Linkcnt$[ebp]
	add	eax, 1
	mov	DWORD PTR __Linkcnt$[ebp], eax

; 1178 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T235993[ebp], ecx
	mov	edx, DWORD PTR $T235993[ebp]
	mov	DWORD PTR __Vptr$235986[ebp], edx
	mov	eax, DWORD PTR __Vptr$235986[ebp]
	mov	DWORD PTR $T235988[ebp], eax
	cmp	DWORD PTR $T235988[ebp], 0
	je	SHORT $LN32@Buynode@2
	mov	ecx, DWORD PTR $T235988[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T235988[ebp]
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN28@Buynode@2
$LN32@Buynode@2:
	mov	DWORD PTR tv157[ebp], 0
$LN28@Buynode@2:
	jmp	SHORT $LN5@Buynode@2
__catch$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ$0:

; 1179 : 		_CATCH_ALL
; 1180 : 		if (0 < _Linkcnt)
; 1181 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1182 : 		this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR $T236008[ebp], ecx
	mov	edx, DWORD PTR $T236008[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1183 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1184 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ$1
	ret	0
$LN5@Buynode@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ$1:

; 1185 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode@2:

; 1186 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@XZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
; Function compile flags: /Odtp
;	COMDAT ?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T236072 = -24						; size = 4
$T236049 = -20						; size = 4
?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy, COMDAT
; _this$ = ecx

; 1212 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1213 : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@QAEXXZ ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::clear

; 1214 : 		this->_Alptr.destroy(&_Nextnode(_Myhead));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T236049[ebp], ecx

; 1215 : 		this->_Alptr.destroy(&_Prevnode(_Myhead));
; 1216 : 		this->_Alnod.deallocate(_Myhead, 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T236072[ebp], eax
	mov	ecx, DWORD PTR $T236072[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1217 : 		_Myhead = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 1218 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXXZ ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Tidy
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T236115 = -44						; size = 4
$T236114 = -40						; size = 4
_i$236106 = -36						; size = 4
$T236093 = -32						; size = 4
$T236086 = -28						; size = 4
_pRet$236083 = -24					; size = 4
$T236076 = -20						; size = 4
$T236075 = -16						; size = 4
_i$227126 = -12						; size = 4
_uiNewSize$227118 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$227118[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$227118[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize
$LN6@GrowSize:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$227118[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize
$LN7@GrowSize:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236086[ebp], ecx
	cmp	DWORD PTR $T236086[ebp], 4
	jbe	SHORT $LN16@GrowSize
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T236086[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$236083[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T236086[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize
$LN16@GrowSize:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$236083[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4
$LN17@GrowSize:
	mov	ecx, DWORD PTR _pRet$236083[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize
$LN5@GrowSize:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$227126[ebp], 0
	jmp	SHORT $LN3@GrowSize
$LN2@GrowSize:
	mov	edx, DWORD PTR _i$227126[ebp]
	add	edx, 1
	mov	DWORD PTR _i$227126[ebp], edx
$LN3@GrowSize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$227126[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$227126[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T236076[ebp], ecx
	cmp	DWORD PTR $T236076[ebp], 0
	je	SHORT $LN12@GrowSize
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$227126[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T236093[ebp], edx
	mov	eax, DWORD PTR $T236076[ebp]
	mov	ecx, DWORD PTR $T236093[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T236076[ebp]
	mov	ecx, DWORD PTR $T236093[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T236076[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize
$LN12@GrowSize:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T236075[ebp], ecx
	jmp	SHORT $LN2@GrowSize
$LN4@GrowSize:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T236115[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T236114[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize
	mov	DWORD PTR _i$236106[ebp], 0
	jmp	SHORT $LN29@GrowSize
$LN28@GrowSize:
	mov	edx, DWORD PTR _i$236106[ebp]
	add	edx, 1
	mov	DWORD PTR _i$236106[ebp], edx
$LN29@GrowSize:
	mov	eax, DWORD PTR _i$236106[ebp]
	cmp	eax, DWORD PTR $T236115[ebp]
	jae	SHORT $LN24@GrowSize
	jmp	SHORT $LN28@GrowSize
$LN24@GrowSize:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T236114[ebp], ecx
	je	SHORT $LN25@GrowSize
	mov	edx, DWORD PTR $T236114[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+44], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<int,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@H$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<int,4,1>::WeightedElement,1>
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T236122 = -80						; size = 28
$T236121 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ PROC ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T236122[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T236121[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T236121[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T236122[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236121[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T236121[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T236121[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T236122[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T236122[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T236121[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@PAVCvCitySpecializationXMLEntry@@V?$allocator@PAVCvCitySpecializationXMLEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<CvCitySpecializationXMLEntry *,std::allocator<CvCitySpecializationXMLEntry *> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@2
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z$0
__unwindtable$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z$2
__ehfuncinfo$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
tv72 = -84						; size = 4
tv178 = -80						; size = 4
tv173 = -76						; size = 4
_this$ = -72						; size = 4
$T236262 = -68						; size = 4
__Vptr$236260 = -64					; size = 4
$T236232 = -60						; size = 4
__Vptr$236230 = -56					; size = 4
$T236203 = -52						; size = 4
__Vptr$236201 = -48					; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1192 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1193 : 
; 1194 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Vptr$236201[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236201[ebp]
	mov	DWORD PTR $T236203[ebp], ecx
	cmp	DWORD PTR $T236203[ebp], 0
	je	SHORT $LN23@Buynode@3
	mov	edx, DWORD PTR $T236203[ebp]
	mov	eax, DWORD PTR __Next$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T236203[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	jmp	SHORT $LN19@Buynode@3
$LN23@Buynode@3:
	mov	DWORD PTR tv173[ebp], 0
$LN19@Buynode@3:

; 1196 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
	mov	DWORD PTR __Vptr$236230[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236230[ebp]
	mov	DWORD PTR $T236232[ebp], ecx
	cmp	DWORD PTR $T236232[ebp], 0
	je	SHORT $LN33@Buynode@3
	mov	edx, DWORD PTR $T236232[ebp]
	mov	eax, DWORD PTR __Prev$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T236232[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	jmp	SHORT $LN29@Buynode@3
$LN33@Buynode@3:
	mov	DWORD PTR tv178[ebp], 0
$LN29@Buynode@3:

; 1198 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8
	mov	DWORD PTR __Vptr$236260[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236260[ebp]
	mov	DWORD PTR $T236262[ebp], ecx
	cmp	DWORD PTR $T236262[ebp], 0
	je	SHORT $LN43@Buynode@3
	mov	edx, DWORD PTR $T236262[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T236262[ebp]
	mov	DWORD PTR tv72[ebp], edx
	jmp	SHORT $LN39@Buynode@3
$LN43@Buynode@3:
	mov	DWORD PTR tv72[ebp], 0
$LN39@Buynode@3:
	jmp	SHORT $LN6@Buynode@3
__catch$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1206 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1207 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z$1
	ret	0
$LN6@Buynode@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z$1:

; 1208 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN5@Buynode@3:

; 1209 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@PAU342@0ABW4CitySpecializationTypes@@@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Buynode
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv89 = -92						; size = 4
_this$ = -88						; size = 4
__Count$236318 = -84					; size = 4
$T236304 = -80						; size = 28
$T236303 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z PROC ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1240 : 		if (max_size() - _Mysize < _Count)

	mov	DWORD PTR __Count$236318[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$236318[ebp], 0
	jbe	SHORT $LN9@Incsize
	mov	eax, DWORD PTR __Count$236318[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN5@Incsize
$LN9@Incsize:
	mov	DWORD PTR tv89[ebp], 1
$LN5@Incsize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	sub	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize

; 1241 : 			_THROW(length_error, "list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T236304[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T236303[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T236303[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T236304[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236303[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T236303[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T236303[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T236304[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@Incsize:

; 1242 : 		_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN3@Incsize:

; 1243 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z$0:
	lea	ecx, DWORD PTR $T236304[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z$2:
	lea	ecx, DWORD PTR $T236303[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@IAEXI@Z ENDP ; std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Incsize
PUBLIC	??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>::allocate
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\fireplace\include\fireworks\ffastvector.h
_TEXT	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T236389 = -44						; size = 4
$T236388 = -40						; size = 4
_i$236381 = -36						; size = 4
$T236367 = -32						; size = 4
$T236360 = -28						; size = 4
_pRet$236357 = -24					; size = 4
$T236350 = -20						; size = 4
$T236349 = -16						; size = 4
_i$227253 = -12						; size = 4
_uiNewSize$227245 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@2:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@2

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$227245[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$227245[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@2

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@2
$LN6@GrowSize@2:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$227245[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@2
$LN7@GrowSize@2:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236360[ebp], ecx
	cmp	DWORD PTR $T236360[ebp], 5
	jbe	SHORT $LN16@GrowSize@2
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T236360[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$236357[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T236360[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize@2
$LN16@GrowSize@2:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$236357[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 5
$LN17@GrowSize@2:
	mov	ecx, DWORD PTR _pRet$236357[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize@2

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@2
$LN5@GrowSize@2:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$227253[ebp], 0
	jmp	SHORT $LN3@GrowSize@2
$LN2@GrowSize@2:
	mov	edx, DWORD PTR _i$227253[ebp]
	add	edx, 1
	mov	DWORD PTR _i$227253[ebp], edx
$LN3@GrowSize@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$227253[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@2

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$227253[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T236350[ebp], ecx
	cmp	DWORD PTR $T236350[ebp], 0
	je	SHORT $LN12@GrowSize@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$227253[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T236367[ebp], edx
	mov	eax, DWORD PTR $T236350[ebp]
	mov	ecx, DWORD PTR $T236367[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T236350[ebp]
	mov	ecx, DWORD PTR $T236367[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T236350[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize@2
$LN12@GrowSize@2:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize@2:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T236349[ebp], ecx
	jmp	SHORT $LN2@GrowSize@2
$LN4@GrowSize@2:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T236389[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T236388[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize@2
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize@2
	mov	DWORD PTR _i$236381[ebp], 0
	jmp	SHORT $LN29@GrowSize@2
$LN28@GrowSize@2:
	mov	edx, DWORD PTR _i$236381[ebp]
	add	edx, 1
	mov	DWORD PTR _i$236381[ebp], edx
$LN29@GrowSize@2:
	mov	eax, DWORD PTR _i$236381[ebp]
	cmp	eax, DWORD PTR $T236389[ebp]
	jae	SHORT $LN24@GrowSize@2
	jmp	SHORT $LN28@GrowSize@2
$LN24@GrowSize@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T236388[ebp], ecx
	je	SHORT $LN25@GrowSize@2
	mov	edx, DWORD PTR $T236388[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize@2:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+52], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$04$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,5,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement,1>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z
_TEXT	SEGMENT
tv186 = -52						; size = 4
_this$ = -48						; size = 4
$T236434 = -44						; size = 4
$T236433 = -40						; size = 4
_i$236426 = -36						; size = 4
$T236412 = -32						; size = 4
$T236405 = -28						; size = 4
_pRet$236402 = -24					; size = 4
$T236395 = -20						; size = 4
$T236394 = -16						; size = 4
_i$227305 = -12						; size = 4
_uiNewSize$227297 = -8					; size = 4
_pTemp$ = -4						; size = 4
_uiFit$ = 8						; size = 4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z PROC ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize, COMDAT
; _this$ = ecx

; 744  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 745  : 		if( m_uiCurrMaxSize == 0 ) m_uiCurrMaxSize = 1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@GrowSize@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN8@GrowSize@3:

; 746  : 		while( uiFit >= m_uiCurrMaxSize ){

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN7@GrowSize@3

; 747  : 
; 748  : 			//Try to double size...
; 749  : 			UINT uiNewSize = m_uiCurrMaxSize<<1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 1
	mov	DWORD PTR _uiNewSize$227297[ebp], edx

; 750  : 
; 751  : 			//...on overflow bail and set to exact size
; 752  : 			if( uiNewSize < m_uiCurrMaxSize ){

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uiNewSize$227297[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN6@GrowSize@3

; 753  : 				m_uiCurrMaxSize = uiFit;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _uiFit$[ebp]
	mov	DWORD PTR [edx+8], eax

; 754  : 				break;

	jmp	SHORT $LN7@GrowSize@3
$LN6@GrowSize@3:

; 755  : 			}
; 756  : 
; 757  : 			//...otherwise use the doubled size
; 758  : 			m_uiCurrMaxSize = uiNewSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _uiNewSize$227297[ebp]
	mov	DWORD PTR [ecx+8], edx

; 759  : 		}

	jmp	SHORT $LN8@GrowSize@3
$LN7@GrowSize@3:

; 760  : 
; 761  : 		T* pTemp = Alloc(m_uiCurrMaxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T236405[ebp], ecx
	cmp	DWORD PTR $T236405[ebp], 4
	jbe	SHORT $LN16@GrowSize@3
	push	798					; 0000031eH
	push	OFFSET ??_C@_0FE@GLGBBJMA@d?3?2sources?2lekmod_git?2checkout?2l@
	push	4
	mov	edx, DWORD PTR $T236405[ebp]
	shl	edx, 3
	push	edx
	call	?FireMallocAlignedNoTracking@@YAPAXIIPBDH@Z ; FireMallocAlignedNoTracking
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pRet$236402[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T236405[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN17@GrowSize@3
$LN16@GrowSize@3:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _pRet$236402[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 4
$LN17@GrowSize@3:
	mov	ecx, DWORD PTR _pRet$236402[ebp]
	mov	DWORD PTR _pTemp$[ebp], ecx

; 762  : 		if( bPODType ){

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@GrowSize@3

; 763  : 			memcpy( (void*)pTemp, (void*)m_pData, sizeof(T)*m_uiCurrSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _pTemp$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 		}else{

	jmp	SHORT $LN4@GrowSize@3
$LN5@GrowSize@3:

; 765  : 			for(unsigned int i = 0; i < m_uiCurrSize; ++i)

	mov	DWORD PTR _i$227305[ebp], 0
	jmp	SHORT $LN3@GrowSize@3
$LN2@GrowSize@3:
	mov	edx, DWORD PTR _i$227305[ebp]
	add	edx, 1
	mov	DWORD PTR _i$227305[ebp], edx
$LN3@GrowSize@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$227305[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN4@GrowSize@3

; 766  : 				new( (void*)&(pTemp[i]) )T( m_pData[i]);

	mov	edx, DWORD PTR _i$227305[ebp]
	mov	eax, DWORD PTR _pTemp$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T236395[ebp], ecx
	cmp	DWORD PTR $T236395[ebp], 0
	je	SHORT $LN12@GrowSize@3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _i$227305[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR $T236412[ebp], edx
	mov	eax, DWORD PTR $T236395[ebp]
	mov	ecx, DWORD PTR $T236412[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T236395[ebp]
	mov	ecx, DWORD PTR $T236412[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR $T236395[ebp]
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN13@GrowSize@3
$LN12@GrowSize@3:
	mov	DWORD PTR tv186[ebp], 0
$LN13@GrowSize@3:
	mov	ecx, DWORD PTR tv186[ebp]
	mov	DWORD PTR $T236394[ebp], ecx
	jmp	SHORT $LN2@GrowSize@3
$LN4@GrowSize@3:

; 767  : 		}
; 768  : 		Free(m_pData, m_uiCurrSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T236434[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T236433[ebp], edx
	xor	eax, eax
	je	SHORT $LN24@GrowSize@3
	xor	ecx, ecx
	je	SHORT $LN24@GrowSize@3
	mov	DWORD PTR _i$236426[ebp], 0
	jmp	SHORT $LN29@GrowSize@3
$LN28@GrowSize@3:
	mov	edx, DWORD PTR _i$236426[ebp]
	add	edx, 1
	mov	DWORD PTR _i$236426[ebp], edx
$LN29@GrowSize@3:
	mov	eax, DWORD PTR _i$236426[ebp]
	cmp	eax, DWORD PTR $T236434[ebp]
	jae	SHORT $LN24@GrowSize@3
	jmp	SHORT $LN28@GrowSize@3
$LN24@GrowSize@3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	cmp	DWORD PTR $T236433[ebp], ecx
	je	SHORT $LN25@GrowSize@3
	mov	edx, DWORD PTR $T236433[ebp]
	push	edx
	call	?FireFreeAlignedNoTracking@@YAXPAX@Z	; FireFreeAlignedNoTracking
	add	esp, 4
$LN25@GrowSize@3:

; 769  : 		m_pData = pTemp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pTemp$[ebp]
	mov	DWORD PTR [eax], ecx

; 770  : 
; 771  : 		m_bIsResized = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+44], 1

; 772  : 	};

	mov	esp, ebp
	pop	ebp
	ret	4
?GrowSize@?$FStaticVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$03$00$0A@$0A@@@IAEXI@Z ENDP ; FStaticVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,4,1,0,0>::GrowSize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ PROC ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>, COMDAT
; _this$ = ecx

; 111  : 	~BaseVector(){};

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$BaseVector@UWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@$00@@QAE@XZ ENDP ; BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>::~BaseVector<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement,1>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z$0
__unwindtable$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z$2
__ehfuncinfo$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z
_TEXT	SEGMENT
tv80 = -84						; size = 4
tv178 = -80						; size = 4
tv173 = -76						; size = 4
_this$ = -72						; size = 4
$T236536 = -68						; size = 4
__Vptr$236534 = -64					; size = 4
$T236507 = -60						; size = 4
__Vptr$236505 = -56					; size = 4
$T236478 = -52						; size = 4
__Vptr$236476 = -48					; size = 4
__Pnode$ = -24						; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode, COMDAT
; _this$ = ecx

; 1190 : 		{	// allocate a node and set links and value

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1191 : 		_Nodeptr _Pnode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 1192 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1193 : 
; 1194 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1195 : 		this->_Alptr.construct(&_Nextnode(_Pnode), _Next);

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Vptr$236476[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236476[ebp]
	mov	DWORD PTR $T236478[ebp], ecx
	cmp	DWORD PTR $T236478[ebp], 0
	je	SHORT $LN23@Buynode@4
	mov	edx, DWORD PTR $T236478[ebp]
	mov	eax, DWORD PTR __Next$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T236478[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	jmp	SHORT $LN19@Buynode@4
$LN23@Buynode@4:
	mov	DWORD PTR tv173[ebp], 0
$LN19@Buynode@4:

; 1196 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1197 : 		this->_Alptr.construct(&_Prevnode(_Pnode), _Prev);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 4
	mov	DWORD PTR __Vptr$236505[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236505[ebp]
	mov	DWORD PTR $T236507[ebp], ecx
	cmp	DWORD PTR $T236507[ebp], 0
	je	SHORT $LN33@Buynode@4
	mov	edx, DWORD PTR $T236507[ebp]
	mov	eax, DWORD PTR __Prev$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T236507[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	jmp	SHORT $LN29@Buynode@4
$LN33@Buynode@4:
	mov	DWORD PTR tv178[ebp], 0
$LN29@Buynode@4:

; 1198 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1199 : 		this->_Alval.construct(&_Myval(_Pnode), _Val);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 8
	mov	DWORD PTR __Vptr$236534[ebp], eax
	mov	ecx, DWORD PTR __Vptr$236534[ebp]
	mov	DWORD PTR $T236536[ebp], ecx
	cmp	DWORD PTR $T236536[ebp], 0
	je	SHORT $LN43@Buynode@4
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T236536[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR $T236536[ebp]
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN39@Buynode@4
$LN43@Buynode@4:
	mov	DWORD PTR tv80[ebp], 0
$LN39@Buynode@4:
	jmp	SHORT $LN6@Buynode@4
__catch$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z$0:

; 1200 : 		_CATCH_ALL
; 1201 : 		if (1 < _Linkcnt)
; 1202 : 			this->_Alptr.destroy(&_Prevnode(_Pnode));
; 1203 : 		if (0 < _Linkcnt)
; 1204 : 			this->_Alptr.destroy(&_Nextnode(_Pnode));
; 1205 : 		this->_Alnod.deallocate(_Pnode, 1);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1206 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1207 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z$1
	ret	0
$LN6@Buynode@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z$1:

; 1208 : 		return (_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
$LN5@Buynode@4:

; 1209 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@PAU342@0ABVCitySpecializationData@@@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z$2
__ehfuncinfo$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\list
xdata$x	ENDS
;	COMDAT ?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv89 = -92						; size = 4
_this$ = -88						; size = 4
__Count$236594 = -84					; size = 4
$T236578 = -80						; size = 28
$T236577 = -52						; size = 40
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z PROC ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize, COMDAT
; _this$ = ecx

; 1239 : 		{	// alter element count, with checking

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1240 : 		if (max_size() - _Mysize < _Count)

	mov	DWORD PTR __Count$236594[ebp], 178956970 ; 0aaaaaaaH
	cmp	DWORD PTR __Count$236594[ebp], 0
	jbe	SHORT $LN9@Incsize@2
	mov	eax, DWORD PTR __Count$236594[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN5@Incsize@2
$LN9@Incsize@2:
	mov	DWORD PTR tv89[ebp], 1
$LN5@Incsize@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	sub	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Incsize@2

; 1241 : 			_THROW(length_error, "list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T236578[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T236577[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T236577[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T236578[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236577[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T236577[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T236577[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T236578[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@Incsize@2:

; 1242 : 		_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN3@Incsize@2:

; 1243 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z$0:
	lea	ecx, DWORD PTR $T236578[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z$2:
	lea	ecx, DWORD PTR $T236577[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Incsize@?$list@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@IAEXI@Z ENDP ; std::list<CitySpecializationData,std::allocator<CitySpecializationData> >::_Incsize
PUBLIC	??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z PROC ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@2@I@Z ENDP ; std::allocator<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>::allocate
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z
_TEXT	SEGMENT
$T236643 = -26						; size = 1
$T236642 = -25						; size = 1
$T236641 = -24						; size = 4
$T236640 = -20						; size = 4
__Off$236637 = -16					; size = 4
__Result$236638 = -12					; size = 4
__Cat$236629 = -4					; size = 1
$T236625 = -3						; size = 1
$T236624 = -2						; size = 1
$T236623 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z PROC ; stdext::unchecked_copy<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T236623[ebp], al
	mov	cl, BYTE PTR __Cat$236629[ebp]
	mov	BYTE PTR $T236624[ebp], cl
	mov	dl, BYTE PTR $T236623[ebp]
	mov	BYTE PTR $T236643[ebp], dl
	mov	al, BYTE PTR $T236625[ebp]
	mov	BYTE PTR $T236642[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T236641[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T236640[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T236640[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$236637[ebp], eax
	mov	ecx, DWORD PTR __Off$236637[ebp]
	mov	edx, DWORD PTR $T236641[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$236638[ebp], eax
	cmp	DWORD PTR __Off$236637[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$236637[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T236640[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$236637[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T236641[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$236638[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAPAVCvCitySpecializationXMLEntry@@PAPAV1@@stdext@@YAPAPAVCvCitySpecializationXMLEntry@@PAPAV1@00@Z ENDP ; stdext::unchecked_copy<CvCitySpecializationXMLEntry * *,CvCitySpecializationXMLEntry * *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z
_TEXT	SEGMENT
$T236650 = -16						; size = 4
$T236646 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z PROC ; std::_Allocate<CvCitySpecializationXMLEntry *>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T236650[ebp], 0
	lea	eax, DWORD PTR $T236650[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236646[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T236646[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236646[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVCvCitySpecializationXMLEntry@@@std@@YAPAPAVCvCitySpecializationXMLEntry@@IPAPAV1@@Z ENDP ; std::_Allocate<CvCitySpecializationXMLEntry *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@4
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T236664 = -16						; size = 4
$T236660 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 12					; 0000000cH
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T236664[ebp], 0
	lea	eax, DWORD PTR $T236664[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236660[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T236660[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236660[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Node>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T236671 = -16						; size = 4
$T236667 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 32					; 00000020H
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T236671[ebp], 0
	lea	eax, DWORD PTR $T236671[ebp]
	push	eax
	lea	ecx, DWORD PTR $T236667[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T236667[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236667[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 5
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@std@@@std@@YAPAU_Node@?$_List_nod@VCitySpecializationData@@V?$allocator@VCitySpecializationData@@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_List_nod<CitySpecializationData,std::allocator<CitySpecializationData> >::_Node>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z PROC ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>, COMDAT

; 37   : 	{	// find first matching _Val

	push	ebp
	mov	ebp, esp

; 38   : 	_DEBUG_RANGE(_First, _Last);
; 39   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN13@Find
$LN11@Find:
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __First$[ebp], ecx
$LN13@Find:
	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Find

; 40   : 		if (*_First == _Val)

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@Find

; 41   : 			break;

	jmp	SHORT $LN2@Find
$LN1@Find:

; 42   : 	return (_First);

	jmp	SHORT $LN11@Find
$LN2@Find:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 43   : 	}

	pop	ebp
	ret	0
??$_Find@V?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@std@@W4CitySpecializationTypes@@@std@@YA?AV?$_Iterator@$0A@@?$list@W4CitySpecializationTypes@@V?$allocator@W4CitySpecializationTypes@@@std@@@0@V120@0ABW4CitySpecializationTypes@@@Z ENDP ; std::_Find<std::list<enum CitySpecializationTypes,std::allocator<enum CitySpecializationTypes> >::_Iterator<0>,enum CitySpecializationTypes>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z
_TEXT	SEGMENT
$T236838 = -128						; size = 4
__Mid$227688 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
$LN7@Sort:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$227688[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$227688[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$227688[ebp+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@Sort

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$227688[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$227688[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort
$LN5@Sort:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$227688[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$227688[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort
$LN6@Sort:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN76@Sort
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T236838[ebp], edx
	jmp	SHORT $LN92@Sort
$LN91@Sort:
	mov	eax, DWORD PTR $T236838[ebp]
	sub	eax, 8
	mov	DWORD PTR $T236838[ebp], eax
$LN92@Sort:
	mov	ecx, DWORD PTR $T236838[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	cmp	ecx, 1
	jle	SHORT $LN88@Sort
	mov	edx, DWORD PTR $T236838[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN96@Sort
	push	0
	mov	eax, DWORD PTR $T236838[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort:
	jmp	SHORT $LN91@Sort
$LN88@Sort:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort
$LN3@Sort:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@H$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<int,4,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z
_TEXT	SEGMENT
$T237034 = -128						; size = 4
__Mid$227759 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
$LN7@Sort@2:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort@2
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort@2

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$227759[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$227759[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$227759[ebp+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@Sort@2

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$227759[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$227759[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort@2
$LN5@Sort@2:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$227759[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$227759[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort@2:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort@2
$LN6@Sort@2:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort@2

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN76@Sort@2
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort@2:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T237034[ebp], edx
	jmp	SHORT $LN92@Sort@2
$LN91@Sort@2:
	mov	eax, DWORD PTR $T237034[ebp]
	sub	eax, 8
	mov	DWORD PTR $T237034[ebp], eax
$LN92@Sort@2:
	mov	ecx, DWORD PTR $T237034[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	cmp	ecx, 1
	jle	SHORT $LN88@Sort@2
	mov	edx, DWORD PTR $T237034[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN96@Sort@2
	push	0
	mov	eax, DWORD PTR $T237034[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort@2:
	jmp	SHORT $LN91@Sort@2
$LN88@Sort@2:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort@2
$LN3@Sort@2:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort@2

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort@2:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
PUBLIC	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
PUBLIC	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
PUBLIC	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z
_TEXT	SEGMENT
$T237230 = -128						; size = 4
__Mid$227830 = -12					; size = 8
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z PROC ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>, COMDAT

; 3082 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
$LN7@Sort@3:

; 3083 : 	_Diff _Count;
; 3084 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Count$[ebp], eax
	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	$LN6@Sort@3
	cmp	DWORD PTR __Ideal$[ebp], 0
	jle	SHORT $LN6@Sort@3

; 3085 : 		{	// divide and conquer by quicksort
; 3086 : 		pair<_RanIt, _RanIt> _Mid =
; 3087 : 			std::_Unguarded_partition(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	eax, DWORD PTR __Mid$227830[ebp]
	push	eax
	call	??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ; std::_Unguarded_partition<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3088 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Ideal$[ebp], eax
	mov	eax, DWORD PTR __Ideal$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR __Ideal$[ebp]
	mov	DWORD PTR __Ideal$[ebp], eax

; 3089 : 
; 3090 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	ecx, DWORD PTR __Mid$227830[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __Mid$227830[ebp+4]
	sar	edx, 3
	cmp	ecx, edx
	jge	SHORT $LN5@Sort@3

; 3091 : 			{	// loop on second half
; 3092 : 			std::_Sort(_First, _Mid.first, _Ideal);

	mov	eax, DWORD PTR __Ideal$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mid$227830[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3093 : 			_First = _Mid.second;

	mov	eax, DWORD PTR __Mid$227830[ebp+4]
	mov	DWORD PTR __First$[ebp], eax

; 3094 : 			}
; 3095 : 		else

	jmp	SHORT $LN4@Sort@3
$LN5@Sort@3:

; 3096 : 			{	// loop on first half
; 3097 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	mov	ecx, DWORD PTR __Ideal$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Mid$227830[ebp+4]
	push	eax
	call	??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
	add	esp, 12					; 0000000cH

; 3098 : 			_Last = _Mid.first;

	mov	ecx, DWORD PTR __Mid$227830[ebp]
	mov	DWORD PTR __Last$[ebp], ecx
$LN4@Sort@3:

; 3099 : 			}
; 3100 : 		}

	jmp	$LN7@Sort@3
$LN6@Sort@3:

; 3101 : 
; 3102 : 	if (_ISORT_MAX < _Count)

	cmp	DWORD PTR __Count$[ebp], 32		; 00000020H
	jle	SHORT $LN3@Sort@3

; 3103 : 		{	// heap sort if too many divisions
; 3104 : 		std::make_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN76@Sort@3
	push	0
	push	0
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 16					; 00000010H
$LN76@Sort@3:

; 3105 : 		std::sort_heap(_First, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T237230[ebp], edx
	jmp	SHORT $LN92@Sort@3
$LN91@Sort@3:
	mov	eax, DWORD PTR $T237230[ebp]
	sub	eax, 8
	mov	DWORD PTR $T237230[ebp], eax
$LN92@Sort@3:
	mov	ecx, DWORD PTR $T237230[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	cmp	ecx, 1
	jle	SHORT $LN88@Sort@3
	mov	edx, DWORD PTR $T237230[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	sar	edx, 3
	cmp	edx, 1
	jle	SHORT $LN96@Sort@3
	push	0
	mov	eax, DWORD PTR $T237230[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Pop_heap_0<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN96@Sort@3:
	jmp	SHORT $LN91@Sort@3
$LN88@Sort@3:

; 3106 : 		}
; 3107 : 	else if (1 < _Count)

	jmp	SHORT $LN8@Sort@3
$LN3@Sort@3:
	cmp	DWORD PTR __Count$[ebp], 1
	jle	SHORT $LN8@Sort@3

; 3108 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 12					; 0000000cH
$LN8@Sort@3:

; 3109 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@H@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0H@Z ENDP ; std::_Sort<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z
_TEXT	SEGMENT
$T237473 = -124						; size = 4
__Tmp$237469 = -120					; size = 8
$T237453 = -112						; size = 4
$T237452 = -108						; size = 4
__Tmp$237448 = -104					; size = 8
$T237432 = -96						; size = 4
__Tmp$237427 = -92					; size = 8
$T237412 = -84						; size = 4
$T237411 = -80						; size = 4
__Tmp$237406 = -76					; size = 8
$T237391 = -68						; size = 4
$T237390 = -64						; size = 4
__Tmp$237385 = -60					; size = 8
$T237367 = -52						; size = 4
$T237366 = -48						; size = 4
__Tmp$237361 = -44					; size = 8
$T237340 = -36						; size = 4
__Tmp$237335 = -32					; size = 8
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Mid$[ebp], edx

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_
$LN25@Unguarded_:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_
$LN24@Unguarded_:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_
$LN20@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_
	jmp	SHORT $LN17@Unguarded_

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_
$LN16@Unguarded_:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237340[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T237340[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_
	mov	ecx, DWORD PTR $T237340[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237335[ebp], edx
	mov	eax, DWORD PTR $T237340[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237335[ebp+4], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237340[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Tmp$237335[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237335[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN17@Unguarded_:
	jmp	$LN20@Unguarded_
$LN19@Unguarded_:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_
$LN13@Unguarded_:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx-4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN55@Unguarded_
	jmp	SHORT $LN10@Unguarded_

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_:
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN9@Unguarded_

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_
$LN9@Unguarded_:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T237367[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237366[ebp], edx
	mov	eax, DWORD PTR $T237366[ebp]
	cmp	eax, DWORD PTR $T237367[ebp]
	je	SHORT $LN10@Unguarded_
	mov	ecx, DWORD PTR $T237366[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237361[ebp], edx
	mov	eax, DWORD PTR $T237366[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237361[ebp+4], ecx
	mov	edx, DWORD PTR $T237367[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237366[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T237367[ebp]
	mov	ecx, DWORD PTR __Tmp$237361[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237361[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Unguarded_:
	jmp	$LN13@Unguarded_
$LN12@Unguarded_:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_
$LN7@Unguarded_:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237391[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237390[ebp], eax
	mov	ecx, DWORD PTR $T237390[ebp]
	cmp	ecx, DWORD PTR $T237391[ebp]
	je	SHORT $LN5@Unguarded_
	mov	edx, DWORD PTR $T237390[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$237385[ebp], eax
	mov	ecx, DWORD PTR $T237390[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$237385[ebp+4], edx
	mov	eax, DWORD PTR $T237391[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237390[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T237391[ebp]
	mov	edx, DWORD PTR __Tmp$237385[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$237385[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@Unguarded_:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T237412[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237411[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 8
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T237411[ebp]
	cmp	eax, DWORD PTR $T237412[ebp]
	je	SHORT $LN73@Unguarded_
	mov	ecx, DWORD PTR $T237411[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237406[ebp], edx
	mov	eax, DWORD PTR $T237411[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237406[ebp+4], ecx
	mov	edx, DWORD PTR $T237412[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237411[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T237412[ebp]
	mov	ecx, DWORD PTR __Tmp$237406[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237406[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN73@Unguarded_:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_
$LN6@Unguarded_:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237432[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR $T237432[ebp]
	je	SHORT $LN2@Unguarded_
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$237427[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$237427[ebp+4], eax
	mov	ecx, DWORD PTR $T237432[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T237432[ebp]
	mov	eax, DWORD PTR __Tmp$237427[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$237427[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unguarded_:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237453[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237452[ebp], ecx
	mov	edx, DWORD PTR $T237452[ebp]
	cmp	edx, DWORD PTR $T237453[ebp]
	je	SHORT $LN87@Unguarded_
	mov	eax, DWORD PTR $T237452[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$237448[ebp], ecx
	mov	edx, DWORD PTR $T237452[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$237448[ebp+4], eax
	mov	ecx, DWORD PTR $T237453[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T237452[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T237453[ebp]
	mov	eax, DWORD PTR __Tmp$237448[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$237448[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN87@Unguarded_:

; 3073 : 			}
; 3074 : 		else

	jmp	SHORT $LN4@Unguarded_
$LN3@Unguarded_:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T237473[ebp], eax
	mov	ecx, DWORD PTR $T237473[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_
	mov	edx, DWORD PTR $T237473[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$237469[ebp], eax
	mov	ecx, DWORD PTR $T237473[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$237469[ebp+4], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237473[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Tmp$237469[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$237469[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN94@Unguarded_:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_:

; 3076 : 		}

	jmp	$LN23@Unguarded_
$LN28@Unguarded_:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@H$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Median<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z
_TEXT	SEGMENT
$T237647 = -124						; size = 4
__Tmp$237645 = -120					; size = 8
$T237627 = -112						; size = 4
$T237626 = -108						; size = 4
__Tmp$237624 = -104					; size = 8
$T237606 = -96						; size = 4
__Tmp$237604 = -92					; size = 8
$T237586 = -84						; size = 4
$T237585 = -80						; size = 4
__Tmp$237581 = -76					; size = 8
$T237565 = -68						; size = 4
$T237564 = -64						; size = 4
__Tmp$237560 = -60					; size = 8
$T237541 = -52						; size = 4
$T237540 = -48						; size = 4
__Tmp$237536 = -44					; size = 8
$T237514 = -36						; size = 4
__Tmp$237510 = -32					; size = 8
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Mid$[ebp], edx

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Median<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_@2:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_@2
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_@2
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_@2

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_@2
$LN25@Unguarded_@2:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_@2
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_@2
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_@2

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_@2
$LN24@Unguarded_@2:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_@2:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_@2
$LN20@Unguarded_@2:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_@2:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_@2

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_@2
	jmp	SHORT $LN17@Unguarded_@2

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_@2:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_@2

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_@2

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_@2
$LN16@Unguarded_@2:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237514[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T237514[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_@2
	mov	ecx, DWORD PTR $T237514[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237510[ebp], edx
	mov	eax, DWORD PTR $T237514[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237510[ebp+4], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237514[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Tmp$237510[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237510[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN17@Unguarded_@2:
	jmp	$LN20@Unguarded_@2
$LN19@Unguarded_@2:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_@2
$LN13@Unguarded_@2:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_@2

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx-4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN55@Unguarded_@2
	jmp	SHORT $LN10@Unguarded_@2

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_@2:
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN9@Unguarded_@2

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_@2

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_@2
$LN9@Unguarded_@2:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T237541[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237540[ebp], edx
	mov	eax, DWORD PTR $T237540[ebp]
	cmp	eax, DWORD PTR $T237541[ebp]
	je	SHORT $LN10@Unguarded_@2
	mov	ecx, DWORD PTR $T237540[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237536[ebp], edx
	mov	eax, DWORD PTR $T237540[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237536[ebp+4], ecx
	mov	edx, DWORD PTR $T237541[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237540[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T237541[ebp]
	mov	ecx, DWORD PTR __Tmp$237536[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237536[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Unguarded_@2:
	jmp	$LN13@Unguarded_@2
$LN12@Unguarded_@2:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_@2
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_@2

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_@2
$LN7@Unguarded_@2:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_@2

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_@2

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237565[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237564[ebp], eax
	mov	ecx, DWORD PTR $T237564[ebp]
	cmp	ecx, DWORD PTR $T237565[ebp]
	je	SHORT $LN5@Unguarded_@2
	mov	edx, DWORD PTR $T237564[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$237560[ebp], eax
	mov	ecx, DWORD PTR $T237564[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$237560[ebp+4], edx
	mov	eax, DWORD PTR $T237565[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237564[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T237565[ebp]
	mov	edx, DWORD PTR __Tmp$237560[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$237560[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@Unguarded_@2:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T237586[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237585[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 8
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T237585[ebp]
	cmp	eax, DWORD PTR $T237586[ebp]
	je	SHORT $LN73@Unguarded_@2
	mov	ecx, DWORD PTR $T237585[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237581[ebp], edx
	mov	eax, DWORD PTR $T237585[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237581[ebp+4], ecx
	mov	edx, DWORD PTR $T237586[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237585[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T237586[ebp]
	mov	ecx, DWORD PTR __Tmp$237581[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237581[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN73@Unguarded_@2:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_@2
$LN6@Unguarded_@2:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_@2

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_@2

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237606[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR $T237606[ebp]
	je	SHORT $LN2@Unguarded_@2
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$237604[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$237604[ebp+4], eax
	mov	ecx, DWORD PTR $T237606[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T237606[ebp]
	mov	eax, DWORD PTR __Tmp$237604[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$237604[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unguarded_@2:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237627[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237626[ebp], ecx
	mov	edx, DWORD PTR $T237626[ebp]
	cmp	edx, DWORD PTR $T237627[ebp]
	je	SHORT $LN87@Unguarded_@2
	mov	eax, DWORD PTR $T237626[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$237624[ebp], ecx
	mov	edx, DWORD PTR $T237626[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$237624[ebp+4], eax
	mov	ecx, DWORD PTR $T237627[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T237626[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T237627[ebp]
	mov	eax, DWORD PTR __Tmp$237624[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$237624[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN87@Unguarded_@2:

; 3073 : 			}
; 3074 : 		else

	jmp	SHORT $LN4@Unguarded_@2
$LN3@Unguarded_@2:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T237647[ebp], eax
	mov	ecx, DWORD PTR $T237647[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_@2
	mov	edx, DWORD PTR $T237647[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$237645[ebp], eax
	mov	ecx, DWORD PTR $T237647[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$237645[ebp+4], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237647[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Tmp$237645[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$237645[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN94@Unguarded_@2:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_@2:

; 3076 : 		}

	jmp	$LN23@Unguarded_@2
$LN28@Unguarded_@2:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Median<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z
_TEXT	SEGMENT
$T237821 = -124						; size = 4
__Tmp$237819 = -120					; size = 8
$T237801 = -112						; size = 4
$T237800 = -108						; size = 4
__Tmp$237798 = -104					; size = 8
$T237780 = -96						; size = 4
__Tmp$237778 = -92					; size = 8
$T237760 = -84						; size = 4
$T237759 = -80						; size = 4
__Tmp$237757 = -76					; size = 8
$T237739 = -68						; size = 4
$T237738 = -64						; size = 4
__Tmp$237736 = -60					; size = 8
$T237715 = -52						; size = 4
$T237714 = -48						; size = 4
__Tmp$237712 = -44					; size = 8
$T237688 = -36						; size = 4
__Tmp$237686 = -32					; size = 8
__Plast$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Pfirst$ = -12						; size = 4
__Gfirst$ = -8						; size = 4
__Mid$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z PROC ; std::_Unguarded_partition<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 3024 : 	{	// partition [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH

; 3025 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Mid$[ebp], edx

; 3026 : 	std::_Median(_First, _Mid, _Last - 1);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	push	eax
	mov	ecx, DWORD PTR __Mid$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Median<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3027 : 	_RanIt _Pfirst = _Mid;

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR __Pfirst$[ebp], eax

; 3028 : 	_RanIt _Plast = _Pfirst + 1;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
$LN27@Unguarded_@3:

; 3029 : 
; 3030 : 	while (_First < _Pfirst
; 3031 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3032 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Pfirst$[ebp]
	jae	SHORT $LN25@Unguarded_@3
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax-4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@Unguarded_@3
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax-4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN25@Unguarded_@3

; 3033 : 		--_Pfirst;

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	jmp	SHORT $LN27@Unguarded_@3
$LN25@Unguarded_@3:

; 3034 : 	while (_Plast < _Last
; 3035 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3036 : 		&& !(*_Pfirst < *_Plast))

	mov	edx, DWORD PTR __Plast$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	SHORT $LN24@Unguarded_@3
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN24@Unguarded_@3
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN24@Unguarded_@3

; 3037 : 		++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx
	jmp	SHORT $LN25@Unguarded_@3
$LN24@Unguarded_@3:

; 3038 : 
; 3039 : 	_RanIt _Gfirst = _Plast;

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR __Gfirst$[ebp], edx

; 3040 : 	_RanIt _Glast = _Pfirst;

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR __Glast$[ebp], eax
$LN23@Unguarded_@3:

; 3041 : 
; 3042 : 	for (; ; )
; 3043 : 		{	// partition
; 3044 : 		for (; _Gfirst < _Last; ++_Gfirst)

	jmp	SHORT $LN21@Unguarded_@3
$LN20@Unguarded_@3:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN21@Unguarded_@3:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jae	$LN19@Unguarded_@3

; 3045 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN44@Unguarded_@3
	jmp	SHORT $LN17@Unguarded_@3

; 3046 : 				;
; 3047 : 			else if (*_Gfirst < *_Pfirst)

$LN44@Unguarded_@3:
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN16@Unguarded_@3

; 3048 : 				break;

	jmp	SHORT $LN19@Unguarded_@3

; 3049 : 			else

	jmp	SHORT $LN17@Unguarded_@3
$LN16@Unguarded_@3:

; 3050 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	ecx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237688[ebp], ecx
	mov	edx, DWORD PTR __Plast$[ebp]
	add	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR $T237688[ebp]
	cmp	eax, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN17@Unguarded_@3
	mov	ecx, DWORD PTR $T237688[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237686[ebp], edx
	mov	eax, DWORD PTR $T237688[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237686[ebp+4], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237688[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	ecx, DWORD PTR __Tmp$237686[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237686[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN17@Unguarded_@3:
	jmp	$LN20@Unguarded_@3
$LN19@Unguarded_@3:

; 3051 : 		for (; _First < _Glast; --_Glast)

	jmp	SHORT $LN14@Unguarded_@3
$LN13@Unguarded_@3:
	mov	eax, DWORD PTR __Glast$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Glast$[ebp], eax
$LN14@Unguarded_@3:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	jae	$LN12@Unguarded_@3

; 3052 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	ecx, DWORD PTR [edx-4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN55@Unguarded_@3
	jmp	SHORT $LN10@Unguarded_@3

; 3053 : 				;
; 3054 : 			else if (*_Pfirst < *(_Glast - 1))

$LN55@Unguarded_@3:
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN9@Unguarded_@3

; 3055 : 				break;

	jmp	SHORT $LN12@Unguarded_@3

; 3056 : 			else

	jmp	SHORT $LN10@Unguarded_@3
$LN9@Unguarded_@3:

; 3057 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	mov	eax, DWORD PTR __Pfirst$[ebp]
	sub	eax, 8
	mov	DWORD PTR __Pfirst$[ebp], eax
	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T237715[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237714[ebp], edx
	mov	eax, DWORD PTR $T237714[ebp]
	cmp	eax, DWORD PTR $T237715[ebp]
	je	SHORT $LN10@Unguarded_@3
	mov	ecx, DWORD PTR $T237714[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237712[ebp], edx
	mov	eax, DWORD PTR $T237714[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237712[ebp+4], ecx
	mov	edx, DWORD PTR $T237715[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237714[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T237715[ebp]
	mov	ecx, DWORD PTR __Tmp$237712[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237712[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN10@Unguarded_@3:
	jmp	$LN13@Unguarded_@3
$LN12@Unguarded_@3:

; 3058 : 		if (_Glast == _First && _Gfirst == _Last)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	SHORT $LN7@Unguarded_@3
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN7@Unguarded_@3

; 3059 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN28@Unguarded_@3
$LN7@Unguarded_@3:

; 3060 : 
; 3061 : 		if (_Glast == _First)

	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jne	$LN6@Unguarded_@3

; 3062 : 			{	// no room at bottom, rotate pivot upward
; 3063 : 			if (_Plast != _Gfirst)

	mov	ecx, DWORD PTR __Plast$[ebp]
	cmp	ecx, DWORD PTR __Gfirst$[ebp]
	je	SHORT $LN5@Unguarded_@3

; 3064 : 				std::iter_swap(_Pfirst, _Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237739[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237738[ebp], eax
	mov	ecx, DWORD PTR $T237738[ebp]
	cmp	ecx, DWORD PTR $T237739[ebp]
	je	SHORT $LN5@Unguarded_@3
	mov	edx, DWORD PTR $T237738[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$237736[ebp], eax
	mov	ecx, DWORD PTR $T237738[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$237736[ebp+4], edx
	mov	eax, DWORD PTR $T237739[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237738[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T237739[ebp]
	mov	edx, DWORD PTR __Tmp$237736[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$237736[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN5@Unguarded_@3:

; 3065 : 			++_Plast;

	mov	ecx, DWORD PTR __Plast$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Plast$[ebp], ecx

; 3066 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T237760[ebp], edx
	mov	eax, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237759[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Pfirst$[ebp], ecx
	mov	edx, DWORD PTR __Gfirst$[ebp]
	add	edx, 8
	mov	DWORD PTR __Gfirst$[ebp], edx
	mov	eax, DWORD PTR $T237759[ebp]
	cmp	eax, DWORD PTR $T237760[ebp]
	je	SHORT $LN73@Unguarded_@3
	mov	ecx, DWORD PTR $T237759[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$237757[ebp], edx
	mov	eax, DWORD PTR $T237759[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$237757[ebp+4], ecx
	mov	edx, DWORD PTR $T237760[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T237759[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T237760[ebp]
	mov	ecx, DWORD PTR __Tmp$237757[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$237757[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN73@Unguarded_@3:

; 3067 : 			}
; 3068 : 		else if (_Gfirst == _Last)

	jmp	$LN4@Unguarded_@3
$LN6@Unguarded_@3:
	mov	eax, DWORD PTR __Gfirst$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	$LN3@Unguarded_@3

; 3069 : 			{	// no room at top, rotate pivot downward
; 3070 : 			if (--_Glast != --_Pfirst)

	mov	ecx, DWORD PTR __Glast$[ebp]
	sub	ecx, 8
	mov	DWORD PTR __Glast$[ebp], ecx
	mov	edx, DWORD PTR __Pfirst$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Pfirst$[ebp], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	cmp	eax, DWORD PTR __Pfirst$[ebp]
	je	SHORT $LN2@Unguarded_@3

; 3071 : 				std::iter_swap(_Glast, _Pfirst);

	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237780[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	cmp	edx, DWORD PTR $T237780[ebp]
	je	SHORT $LN2@Unguarded_@3
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$237778[ebp], ecx
	mov	edx, DWORD PTR __Glast$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$237778[ebp+4], eax
	mov	ecx, DWORD PTR $T237780[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T237780[ebp]
	mov	eax, DWORD PTR __Tmp$237778[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$237778[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN2@Unguarded_@3:

; 3072 : 			std::iter_swap(_Pfirst, --_Plast);

	mov	edx, DWORD PTR __Plast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Plast$[ebp], edx
	mov	eax, DWORD PTR __Plast$[ebp]
	mov	DWORD PTR $T237801[ebp], eax
	mov	ecx, DWORD PTR __Pfirst$[ebp]
	mov	DWORD PTR $T237800[ebp], ecx
	mov	edx, DWORD PTR $T237800[ebp]
	cmp	edx, DWORD PTR $T237801[ebp]
	je	SHORT $LN87@Unguarded_@3
	mov	eax, DWORD PTR $T237800[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$237798[ebp], ecx
	mov	edx, DWORD PTR $T237800[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$237798[ebp+4], eax
	mov	ecx, DWORD PTR $T237801[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR $T237800[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T237801[ebp]
	mov	eax, DWORD PTR __Tmp$237798[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$237798[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN87@Unguarded_@3:

; 3073 : 			}
; 3074 : 		else

	jmp	SHORT $LN4@Unguarded_@3
$LN3@Unguarded_@3:

; 3075 : 			std::iter_swap(_Gfirst++, --_Glast);

	mov	edx, DWORD PTR __Glast$[ebp]
	sub	edx, 8
	mov	DWORD PTR __Glast$[ebp], edx
	mov	eax, DWORD PTR __Gfirst$[ebp]
	mov	DWORD PTR $T237821[ebp], eax
	mov	ecx, DWORD PTR $T237821[ebp]
	cmp	ecx, DWORD PTR __Glast$[ebp]
	je	SHORT $LN94@Unguarded_@3
	mov	edx, DWORD PTR $T237821[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$237819[ebp], eax
	mov	ecx, DWORD PTR $T237821[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$237819[ebp+4], edx
	mov	eax, DWORD PTR __Glast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T237821[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Glast$[ebp]
	mov	edx, DWORD PTR __Tmp$237819[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$237819[ebp+4]
	mov	DWORD PTR [ecx+4], eax
$LN94@Unguarded_@3:
	mov	ecx, DWORD PTR __Gfirst$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Gfirst$[ebp], ecx
$LN4@Unguarded_@3:

; 3076 : 		}

	jmp	$LN23@Unguarded_@3
$LN28@Unguarded_@3:

; 3077 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unguarded_partition@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YA?AU?$pair@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@PAU12@@0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0@Z ENDP ; std::_Unguarded_partition<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__Step$228200 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$228200[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$228200[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Step$228200[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	edx, DWORD PTR __Step$228200[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$228200[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$228200[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$228200[ebp]
	shl	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$228200[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$228200[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median
$LN2@Median:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Median<CvWeightedVector<int,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z
_TEXT	SEGMENT
$T238134 = -20						; size = 4
$T238133 = -16						; size = 4
__Hole$228218 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$228218[ebp], eax
$LN2@Make_heap:
	cmp	DWORD PTR __Hole$228218[ebp], 0
	jle	SHORT $LN3@Make_heap

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$228218[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$228218[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$228218[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T238134[ebp], ecx
	sub	esp, 8
	mov	DWORD PTR $T238133[ebp], esp
	mov	edx, DWORD PTR $T238133[ebp]
	mov	eax, DWORD PTR $T238134[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T238133[ebp]
	mov	eax, DWORD PTR $T238134[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$228218[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap
$LN3@Make_heap:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
$T238204 = -52						; size = 4
$T238203 = -48						; size = 4
$T238187 = -42						; size = 1
$T238186 = -41						; size = 1
$T238185 = -40						; size = 4
$T238184 = -36						; size = 4
$T238183 = -32						; size = 4
__Cat$238194 = -24					; size = 1
$T238192 = -23						; size = 1
$T238191 = -22						; size = 1
$T238190 = -21						; size = 1
__First1$228259 = -20					; size = 4
__Val$228249 = -16					; size = 8
__Next1$228248 = -8					; size = 4
__Next$228244 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$228244[ebp], ecx
$LN7@Insertion_:
	mov	edx, DWORD PTR __Next$228244[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$228244[ebp], edx
	mov	eax, DWORD PTR __Next$228244[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$228244[ebp]
	mov	DWORD PTR __Next1$228248[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$228244[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$228249[ebp], eax
	mov	ecx, DWORD PTR __Next$228244[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Val$228249[ebp+4], edx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$228249[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@Insertion_

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$228248[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$228248[ebp], ecx
	mov	edx, DWORD PTR __Next1$228248[ebp]
	mov	DWORD PTR $T238204[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T238203[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T238190[ebp], cl
	mov	dl, BYTE PTR __Cat$238194[ebp]
	mov	BYTE PTR $T238191[ebp], dl
	mov	al, BYTE PTR $T238190[ebp]
	mov	BYTE PTR $T238187[ebp], al
	mov	cl, BYTE PTR $T238192[ebp]
	mov	BYTE PTR $T238186[ebp], cl
	mov	edx, DWORD PTR $T238204[ebp]
	mov	DWORD PTR $T238185[ebp], edx
	mov	eax, DWORD PTR __Next$228244[ebp]
	mov	DWORD PTR $T238184[ebp], eax
	mov	ecx, DWORD PTR $T238203[ebp]
	mov	DWORD PTR $T238183[ebp], ecx
$LN22@Insertion_:
	mov	edx, DWORD PTR $T238183[ebp]
	cmp	edx, DWORD PTR $T238184[ebp]
	je	SHORT $LN15@Insertion_
	mov	eax, DWORD PTR $T238184[ebp]
	sub	eax, 8
	mov	DWORD PTR $T238184[ebp], eax
	mov	ecx, DWORD PTR $T238185[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T238185[ebp], ecx
	mov	edx, DWORD PTR $T238184[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T238185[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN22@Insertion_
$LN15@Insertion_:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$228249[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$228249[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$228248[ebp]
	mov	DWORD PTR __First1$228259[ebp], eax

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_
$LN2@Insertion_:
	mov	ecx, DWORD PTR __First1$228259[ebp]
	mov	DWORD PTR __Next1$228248[ebp], ecx
$LN3@Insertion_:
	mov	edx, DWORD PTR __First1$228259[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$228259[ebp], edx
	mov	eax, DWORD PTR __First1$228259[ebp]
	mov	ecx, DWORD PTR __Val$228249[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Insertion_

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ecx, DWORD PTR __First1$228259[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Next1$228248[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Insertion_
$LN1@Insertion_:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	edx, DWORD PTR __Next1$228248[ebp]
	mov	eax, DWORD PTR __Val$228249[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$228249[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN4@Insertion_:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_
$LN9@Insertion_:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z
_TEXT	SEGMENT
__Step$228265 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z PROC ; std::_Median<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median@2

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$228265[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$228265[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Step$228265[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	edx, DWORD PTR __Step$228265[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$228265[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$228265[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$228265[ebp]
	shl	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$228265[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$228265[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median@2
$LN2@Median@2:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median@2:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ENDP ; std::_Median<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z
_TEXT	SEGMENT
$T238520 = -20						; size = 4
$T238519 = -16						; size = 4
__Hole$228283 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$228283[ebp], eax
$LN2@Make_heap@2:
	cmp	DWORD PTR __Hole$228283[ebp], 0
	jle	SHORT $LN3@Make_heap@2

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$228283[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$228283[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$228283[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T238520[ebp], ecx
	sub	esp, 8
	mov	DWORD PTR $T238519[ebp], esp
	mov	edx, DWORD PTR $T238519[ebp]
	mov	eax, DWORD PTR $T238520[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T238519[ebp]
	mov	eax, DWORD PTR $T238520[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$228283[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap@2
$LN3@Make_heap@2:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z
_TEXT	SEGMENT
$T238590 = -52						; size = 4
$T238589 = -48						; size = 4
$T238573 = -42						; size = 1
$T238572 = -41						; size = 1
$T238571 = -40						; size = 4
$T238570 = -36						; size = 4
$T238569 = -32						; size = 4
__Cat$238580 = -24					; size = 1
$T238578 = -23						; size = 1
$T238577 = -22						; size = 1
$T238576 = -21						; size = 1
__First1$228324 = -20					; size = 4
__Val$228314 = -16					; size = 8
__Next1$228313 = -8					; size = 4
__Next$228309 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@2

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$228309[ebp], ecx
$LN7@Insertion_@2:
	mov	edx, DWORD PTR __Next$228309[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$228309[ebp], edx
	mov	eax, DWORD PTR __Next$228309[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@2

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$228309[ebp]
	mov	DWORD PTR __Next1$228313[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$228309[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$228314[ebp], eax
	mov	ecx, DWORD PTR __Next$228309[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Val$228314[ebp+4], edx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$228314[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@Insertion_@2

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$228313[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$228313[ebp], ecx
	mov	edx, DWORD PTR __Next1$228313[ebp]
	mov	DWORD PTR $T238590[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T238589[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T238576[ebp], cl
	mov	dl, BYTE PTR __Cat$238580[ebp]
	mov	BYTE PTR $T238577[ebp], dl
	mov	al, BYTE PTR $T238576[ebp]
	mov	BYTE PTR $T238573[ebp], al
	mov	cl, BYTE PTR $T238578[ebp]
	mov	BYTE PTR $T238572[ebp], cl
	mov	edx, DWORD PTR $T238590[ebp]
	mov	DWORD PTR $T238571[ebp], edx
	mov	eax, DWORD PTR __Next$228309[ebp]
	mov	DWORD PTR $T238570[ebp], eax
	mov	ecx, DWORD PTR $T238589[ebp]
	mov	DWORD PTR $T238569[ebp], ecx
$LN22@Insertion_@2:
	mov	edx, DWORD PTR $T238569[ebp]
	cmp	edx, DWORD PTR $T238570[ebp]
	je	SHORT $LN15@Insertion_@2
	mov	eax, DWORD PTR $T238570[ebp]
	sub	eax, 8
	mov	DWORD PTR $T238570[ebp], eax
	mov	ecx, DWORD PTR $T238571[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T238571[ebp], ecx
	mov	edx, DWORD PTR $T238570[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T238571[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN22@Insertion_@2
$LN15@Insertion_@2:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$228314[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$228314[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@2
$LN5@Insertion_@2:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$228313[ebp]
	mov	DWORD PTR __First1$228324[ebp], eax

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_@2
$LN2@Insertion_@2:
	mov	ecx, DWORD PTR __First1$228324[ebp]
	mov	DWORD PTR __Next1$228313[ebp], ecx
$LN3@Insertion_@2:
	mov	edx, DWORD PTR __First1$228324[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$228324[ebp], edx
	mov	eax, DWORD PTR __First1$228324[ebp]
	mov	ecx, DWORD PTR __Val$228314[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Insertion_@2

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ecx, DWORD PTR __First1$228324[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Next1$228313[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Insertion_@2
$LN1@Insertion_@2:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	edx, DWORD PTR __Next1$228313[ebp]
	mov	eax, DWORD PTR __Val$228314[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$228314[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN4@Insertion_@2:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_@2
$LN9@Insertion_@2:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
_TEXT	ENDS
PUBLIC	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Odtp
;	COMDAT ??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z
_TEXT	SEGMENT
__Step$228330 = -4					; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z PROC ; std::_Median<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 3009 : 	{	// sort median element to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH

; 3010 : 	if (40 < _Last - _First)

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median@3

; 3011 : 		{	// median of nine
; 3012 : 		size_t _Step = (_Last - _First + 1) / 8;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	add	eax, 1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR __Step$228330[ebp], eax

; 3013 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	ecx, DWORD PTR __Step$228330[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __Step$228330[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3014 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	edx, DWORD PTR __Step$228330[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$228330[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Mid$[ebp]
	sub	ecx, eax
	push	ecx
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3015 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Step$228330[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR __Step$228330[ebp]
	shl	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, edx
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3016 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	ecx, DWORD PTR __Step$228330[ebp]
	shl	ecx, 3
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Mid$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Step$228330[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH

; 3017 : 		}
; 3018 : 	else

	jmp	SHORT $LN3@Median@3
$LN2@Median@3:

; 3019 : 		std::_Med3(_First, _Mid, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
	add	esp, 12					; 0000000cH
$LN3@Median@3:

; 3020 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Median@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ENDP ; std::_Median<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
_TEXT	ENDS
PUBLIC	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Odtp
;	COMDAT ??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z
_TEXT	SEGMENT
$T238906 = -20						; size = 4
$T238905 = -16						; size = 4
__Hole$228348 = -8					; size = 4
__Bottom$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z PROC ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2164 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2165 : 	_Diff _Bottom = _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	DWORD PTR __Bottom$[ebp], eax

; 2166 : 
; 2167 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, DWORD PTR __Bottom$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Hole$228348[ebp], eax
$LN2@Make_heap@3:
	cmp	DWORD PTR __Hole$228348[ebp], 0
	jle	SHORT $LN3@Make_heap@3

; 2168 : 		{	// reheap top half, bottom to top
; 2169 : 		--_Hole;

	mov	ecx, DWORD PTR __Hole$228348[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$228348[ebp], ecx

; 2170 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2171 : 			_Ty(*(_First + _Hole)));

	mov	edx, DWORD PTR __Hole$228348[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR $T238906[ebp], ecx
	sub	esp, 8
	mov	DWORD PTR $T238905[ebp], esp
	mov	edx, DWORD PTR $T238905[ebp]
	mov	eax, DWORD PTR $T238906[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T238905[ebp]
	mov	eax, DWORD PTR $T238906[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __Bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR __Hole$228348[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2172 : 		}

	jmp	SHORT $LN2@Make_heap@3
$LN3@Make_heap@3:

; 2173 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Make_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@0PAH0@Z ENDP ; std::_Make_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z
_TEXT	SEGMENT
$T238976 = -52						; size = 4
$T238975 = -48						; size = 4
$T238959 = -42						; size = 1
$T238958 = -41						; size = 1
$T238957 = -40						; size = 4
$T238956 = -36						; size = 4
$T238955 = -32						; size = 4
__Cat$238967 = -24					; size = 1
$T238964 = -23						; size = 1
$T238963 = -22						; size = 1
$T238962 = -21						; size = 1
__First1$228389 = -20					; size = 4
__Val$228379 = -16					; size = 8
__Next1$228378 = -8					; size = 4
__Next$228374 = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z PROC ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2967 : 	{	// insertion sort [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 2968 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@3

; 2969 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$228374[ebp], ecx
$LN7@Insertion_@3:
	mov	edx, DWORD PTR __Next$228374[ebp]
	add	edx, 8
	mov	DWORD PTR __Next$228374[ebp], edx
	mov	eax, DWORD PTR __Next$228374[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	$LN9@Insertion_@3

; 2970 : 			{	// order next element
; 2971 : 			_BidIt _Next1 = _Next;

	mov	ecx, DWORD PTR __Next$228374[ebp]
	mov	DWORD PTR __Next1$228378[ebp], ecx

; 2972 : 			_Ty _Val = *_Next;

	mov	edx, DWORD PTR __Next$228374[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Val$228379[ebp], eax
	mov	ecx, DWORD PTR __Next$228374[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Val$228379[ebp+4], edx

; 2973 : 
; 2974 : 			if (_DEBUG_LT(_Val, *_First))

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$228379[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN5@Insertion_@3

; 2975 : 				{	// found new earliest element, move to front
; 2976 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	mov	ecx, DWORD PTR __Next1$228378[ebp]
	add	ecx, 8
	mov	DWORD PTR __Next1$228378[ebp], ecx
	mov	edx, DWORD PTR __Next1$228378[ebp]
	mov	DWORD PTR $T238976[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T238975[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T238962[ebp], cl
	mov	dl, BYTE PTR __Cat$238967[ebp]
	mov	BYTE PTR $T238963[ebp], dl
	mov	al, BYTE PTR $T238962[ebp]
	mov	BYTE PTR $T238959[ebp], al
	mov	cl, BYTE PTR $T238964[ebp]
	mov	BYTE PTR $T238958[ebp], cl
	mov	edx, DWORD PTR $T238976[ebp]
	mov	DWORD PTR $T238957[ebp], edx
	mov	eax, DWORD PTR __Next$228374[ebp]
	mov	DWORD PTR $T238956[ebp], eax
	mov	ecx, DWORD PTR $T238975[ebp]
	mov	DWORD PTR $T238955[ebp], ecx
$LN22@Insertion_@3:
	mov	edx, DWORD PTR $T238955[ebp]
	cmp	edx, DWORD PTR $T238956[ebp]
	je	SHORT $LN15@Insertion_@3
	mov	eax, DWORD PTR $T238956[ebp]
	sub	eax, 8
	mov	DWORD PTR $T238956[ebp], eax
	mov	ecx, DWORD PTR $T238957[ebp]
	sub	ecx, 8
	mov	DWORD PTR $T238957[ebp], ecx
	mov	edx, DWORD PTR $T238956[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T238957[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN22@Insertion_@3
$LN15@Insertion_@3:

; 2977 : 				*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Val$228379[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Val$228379[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 2978 : 				}
; 2979 : 			else

	jmp	SHORT $LN4@Insertion_@3
$LN5@Insertion_@3:

; 2980 : 				{	// look for insertion point after first
; 2981 : 				for (_BidIt _First1 = _Next1;

	mov	eax, DWORD PTR __Next1$228378[ebp]
	mov	DWORD PTR __First1$228389[ebp], eax

; 2982 : 					_DEBUG_LT(_Val, *--_First1);
; 2983 : 					_Next1 = _First1)

	jmp	SHORT $LN3@Insertion_@3
$LN2@Insertion_@3:
	mov	ecx, DWORD PTR __First1$228389[ebp]
	mov	DWORD PTR __Next1$228378[ebp], ecx
$LN3@Insertion_@3:
	mov	edx, DWORD PTR __First1$228389[ebp]
	sub	edx, 8
	mov	DWORD PTR __First1$228389[ebp], edx
	mov	eax, DWORD PTR __First1$228389[ebp]
	mov	ecx, DWORD PTR __Val$228379[ebp+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN1@Insertion_@3

; 2984 : 					*_Next1 = *_First1;	// move hole down

	mov	ecx, DWORD PTR __First1$228389[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Next1$228378[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@Insertion_@3
$LN1@Insertion_@3:

; 2985 : 				*_Next1 = _Val;	// insert element in hole

	mov	edx, DWORD PTR __Next1$228378[ebp]
	mov	eax, DWORD PTR __Val$228379[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Val$228379[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN4@Insertion_@3:

; 2986 : 				}
; 2987 : 			}

	jmp	$LN7@Insertion_@3
$LN9@Insertion_@3:

; 2988 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Insertion_sort1@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ENDP ; std::_Insertion_sort1<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
__Tmp$239043 = -24					; size = 8
__Tmp$239021 = -16					; size = 8
__Tmp$238999 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$238999[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$238999[ebp+4], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Tmp$238999[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$238999[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Med3

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$239021[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$239021[ebp+4], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Tmp$239021[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$239021[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3:
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Med3

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __Mid$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$239043[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$239043[ebp+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$239043[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$239043[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN4@Med3:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@H$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<int,4,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z
_TEXT	SEGMENT
$T239071 = -32						; size = 4
$T239070 = -28						; size = 8
__Idx$239063 = -20					; size = 4
$T239057 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea
$LN4@Adjust_hea:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*8-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Adjust_hea

; 2062 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea
$LN3@Adjust_hea:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	edx, DWORD PTR $T239070[ebp]
	mov	DWORD PTR $T239057[ebp], edx
	mov	eax, DWORD PTR $T239057[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T239057[ebp]
	mov	eax, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T239071[ebp], ecx
	mov	eax, DWORD PTR $T239071[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$239063[ebp], eax
	jmp	SHORT $LN14@Adjust_hea
$LN13@Adjust_hea:
	mov	eax, DWORD PTR $T239071[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$239063[ebp], eax
$LN14@Adjust_hea:
	mov	edx, DWORD PTR __Top$[ebp]
	cmp	edx, DWORD PTR $T239071[ebp]
	jge	SHORT $LN12@Adjust_hea
	mov	eax, DWORD PTR __Idx$239063[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	xor	eax, eax
	cmp	edx, DWORD PTR $T239070[ebp+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Adjust_hea
	mov	edx, DWORD PTR __Idx$239063[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR $T239071[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
	mov	ecx, DWORD PTR __Idx$239063[ebp]
	mov	DWORD PTR $T239071[ebp], ecx
	jmp	SHORT $LN13@Adjust_hea
$LN12@Adjust_hea:
	mov	edx, DWORD PTR $T239071[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T239070[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR $T239070[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z
_TEXT	SEGMENT
__Tmp$239135 = -24					; size = 8
__Tmp$239113 = -16					; size = 8
__Tmp$239091 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z PROC ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3@2

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3@2
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$239091[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$239091[ebp+4], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Tmp$239091[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$239091[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3@2:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Med3@2

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3@2
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$239113[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$239113[ebp+4], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Tmp$239113[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$239113[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3@2:
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Med3@2

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __Mid$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3@2
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$239135[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$239135[ebp+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$239135[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$239135[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN4@Med3@2:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z
_TEXT	SEGMENT
$T239163 = -32						; size = 4
$T239162 = -28						; size = 8
__Idx$239155 = -20					; size = 4
$T239149 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea@2
$LN4@Adjust_hea@2:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea@2:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea@2

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*8-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Adjust_hea@2

; 2062 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea@2:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea@2
$LN3@Adjust_hea@2:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea@2

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea@2:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	edx, DWORD PTR $T239162[ebp]
	mov	DWORD PTR $T239149[ebp], edx
	mov	eax, DWORD PTR $T239149[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T239149[ebp]
	mov	eax, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T239163[ebp], ecx
	mov	eax, DWORD PTR $T239163[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$239155[ebp], eax
	jmp	SHORT $LN14@Adjust_hea@2
$LN13@Adjust_hea@2:
	mov	eax, DWORD PTR $T239163[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$239155[ebp], eax
$LN14@Adjust_hea@2:
	mov	edx, DWORD PTR __Top$[ebp]
	cmp	edx, DWORD PTR $T239163[ebp]
	jge	SHORT $LN12@Adjust_hea@2
	mov	eax, DWORD PTR __Idx$239155[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	xor	eax, eax
	cmp	edx, DWORD PTR $T239162[ebp+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Adjust_hea@2
	mov	edx, DWORD PTR __Idx$239155[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR $T239163[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
	mov	ecx, DWORD PTR __Idx$239155[ebp]
	mov	DWORD PTR $T239163[ebp], ecx
	jmp	SHORT $LN13@Adjust_hea@2
$LN12@Adjust_hea@2:
	mov	edx, DWORD PTR $T239163[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T239162[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR $T239162[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z
_TEXT	SEGMENT
__Tmp$239227 = -24					; size = 8
__Tmp$239205 = -16					; size = 8
__Tmp$239183 = -8					; size = 8
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z PROC ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>, COMDAT

; 2998 : 	{	// sort median of three elements to middle

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 2999 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [eax+4]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@Med3@3

; 3000 : 		std::iter_swap(_Mid, _First);

	mov	edx, DWORD PTR __Mid$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN15@Med3@3
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$239183[ebp], ecx
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$239183[ebp+4], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Tmp$239183[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Tmp$239183[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 3001 : 	if (_DEBUG_LT(*_Last, *_Mid))

$LN15@Med3@3:
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+4]
	setg	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN24@Med3@3

; 3002 : 		std::iter_swap(_Last, _Mid);

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Mid$[ebp]
	je	SHORT $LN24@Med3@3
	mov	edx, DWORD PTR __Last$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$239205[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$239205[ebp+4], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __Tmp$239205[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$239205[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 3003 : 	if (_DEBUG_LT(*_Mid, *_First))

$LN24@Med3@3:
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Med3@3

; 3004 : 		std::iter_swap(_Mid, _First);

	mov	eax, DWORD PTR __Mid$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN4@Med3@3
	mov	ecx, DWORD PTR __Mid$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$239227[ebp], edx
	mov	eax, DWORD PTR __Mid$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$239227[ebp+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Mid$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Tmp$239227[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$239227[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN4@Med3@3:

; 3005 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Med3@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ENDP ; std::_Med3<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z
_TEXT	SEGMENT
$T239255 = -32						; size = 4
$T239254 = -28						; size = 8
__Idx$239247 = -20					; size = 4
$T239241 = -16						; size = 4
__Idx$ = -8						; size = 4
__Top$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 8
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z PROC ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2055 : 	{	// percolate _Hole to _Bottom, then push _Val, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi

; 2056 : 	_Diff _Top = _Hole;

	mov	eax, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR __Top$[ebp], eax

; 2057 : 	_Diff _Idx = 2 * _Hole + 2;

	mov	ecx, DWORD PTR __Hole$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	DWORD PTR __Idx$[ebp], edx

; 2058 : 
; 2059 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	jmp	SHORT $LN5@Adjust_hea@3
$LN4@Adjust_hea@3:
	mov	eax, DWORD PTR __Idx$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR __Idx$[ebp], ecx
$LN5@Adjust_hea@3:
	mov	edx, DWORD PTR __Idx$[ebp]
	cmp	edx, DWORD PTR __Bottom$[ebp]
	jge	SHORT $LN3@Adjust_hea@3

; 2060 : 		{	// move _Hole down to larger child
; 2061 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	eax, DWORD PTR __Idx$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Idx$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [ecx+eax*8+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+edx*8-4]
	setg	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Adjust_hea@3

; 2062 : 			--_Idx;

	mov	eax, DWORD PTR __Idx$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Idx$[ebp], eax
$LN2@Adjust_hea@3:

; 2063 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ecx, DWORD PTR __Idx$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+edx*8], eax
	mov	DWORD PTR [esi+edx*8+4], ecx
	mov	eax, DWORD PTR __Idx$[ebp]
	mov	DWORD PTR __Hole$[ebp], eax

; 2064 : 		}

	jmp	SHORT $LN4@Adjust_hea@3
$LN3@Adjust_hea@3:

; 2065 : 
; 2066 : 	if (_Idx == _Bottom)

	mov	ecx, DWORD PTR __Idx$[ebp]
	cmp	ecx, DWORD PTR __Bottom$[ebp]
	jne	SHORT $LN1@Adjust_hea@3

; 2067 : 		{	// only child at bottom, move _Hole down to it
; 2068 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	edx, DWORD PTR __Bottom$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR __Hole$[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx

; 2069 : 		_Hole = _Bottom - 1;

	mov	ecx, DWORD PTR __Bottom$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Hole$[ebp], ecx
$LN1@Adjust_hea@3:

; 2070 : 		}
; 2071 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	lea	edx, DWORD PTR $T239254[ebp]
	mov	DWORD PTR $T239241[ebp], edx
	mov	eax, DWORD PTR $T239241[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T239241[ebp]
	mov	eax, DWORD PTR __Val$[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Hole$[ebp]
	mov	DWORD PTR $T239255[ebp], ecx
	mov	eax, DWORD PTR $T239255[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$239247[ebp], eax
	jmp	SHORT $LN14@Adjust_hea@3
$LN13@Adjust_hea@3:
	mov	eax, DWORD PTR $T239255[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR __Idx$239247[ebp], eax
$LN14@Adjust_hea@3:
	mov	edx, DWORD PTR __Top$[ebp]
	cmp	edx, DWORD PTR $T239255[ebp]
	jge	SHORT $LN12@Adjust_hea@3
	mov	eax, DWORD PTR __Idx$239247[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	xor	eax, eax
	cmp	edx, DWORD PTR $T239254[ebp+4]
	setg	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@Adjust_hea@3
	mov	edx, DWORD PTR __Idx$239247[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [eax+edx*8+4]
	mov	eax, DWORD PTR $T239255[ebp]
	mov	esi, DWORD PTR __First$[ebp]
	mov	DWORD PTR [esi+eax*8], ecx
	mov	DWORD PTR [esi+eax*8+4], edx
	mov	ecx, DWORD PTR __Idx$239247[ebp]
	mov	DWORD PTR $T239255[ebp], ecx
	jmp	SHORT $LN13@Adjust_hea@3
$LN12@Adjust_hea@3:
	mov	edx, DWORD PTR $T239255[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T239254[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR $T239254[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx

; 2072 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ENDP ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z
_TEXT	SEGMENT
$T239301 = -60						; size = 8
$T239272 = -20						; size = 4
$T239266 = -12						; size = 4
$T239265 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	mov	DWORD PTR $T239266[ebp], eax
	lea	ecx, DWORD PTR $T239301[ebp]
	mov	DWORD PTR $T239265[ebp], ecx
	mov	edx, DWORD PTR $T239265[ebp]
	mov	eax, DWORD PTR $T239266[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T239265[ebp]
	mov	eax, DWORD PTR $T239266[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [edx-8], eax
	mov	DWORD PTR [edx-4], ecx
	sub	esp, 8
	mov	DWORD PTR $T239272[ebp], esp
	mov	eax, DWORD PTR $T239272[ebp]
	mov	ecx, DWORD PTR $T239301[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T239272[ebp]
	mov	eax, DWORD PTR $T239301[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@H$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<int,4,1>::WeightedElement *,int,CvWeightedVector<int,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@H$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@H$03$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<int,4,1>::WeightedElement *,CvWeightedVector<int,4,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z
_TEXT	SEGMENT
$T239347 = -60						; size = 8
$T239318 = -20						; size = 4
$T239312 = -12						; size = 4
$T239311 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	mov	DWORD PTR $T239312[ebp], eax
	lea	ecx, DWORD PTR $T239347[ebp]
	mov	DWORD PTR $T239311[ebp], ecx
	mov	edx, DWORD PTR $T239311[ebp]
	mov	eax, DWORD PTR $T239312[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T239311[ebp]
	mov	eax, DWORD PTR $T239312[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [edx-8], eax
	mov	DWORD PTR [edx-4], ecx
	sub	esp, 8
	mov	DWORD PTR $T239318[ebp], esp
	mov	eax, DWORD PTR $T239318[ebp]
	mov	ecx, DWORD PTR $T239347[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T239318[ebp]
	mov	eax, DWORD PTR $T239347[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,int,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4YieldTypes@@$04$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<enum YieldTypes,5,1>::WeightedElement *,CvWeightedVector<enum YieldTypes,5,1>::WeightedElement>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z
_TEXT	SEGMENT
$T239393 = -60						; size = 8
$T239364 = -20						; size = 4
$T239358 = -12						; size = 4
$T239357 = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z PROC ; std::_Pop_heap_0<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>, COMDAT

; 2087 : 	{	// pop *_First to *(_Last - 1) and reheap, using operator<

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH

; 2088 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2089 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, 8
	mov	DWORD PTR $T239358[ebp], eax
	lea	ecx, DWORD PTR $T239393[ebp]
	mov	DWORD PTR $T239357[ebp], ecx
	mov	edx, DWORD PTR $T239357[ebp]
	mov	eax, DWORD PTR $T239358[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T239357[ebp]
	mov	eax, DWORD PTR $T239358[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR [edx-8], eax
	mov	DWORD PTR [edx-4], ecx
	sub	esp, 8
	mov	DWORD PTR $T239364[ebp], esp
	mov	eax, DWORD PTR $T239364[ebp]
	mov	ecx, DWORD PTR $T239393[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T239364[ebp]
	mov	eax, DWORD PTR $T239393[ebp+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, 8
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Adjust_heap@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HU12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@HHU12@@Z ; std::_Adjust_heap<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,int,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
	add	esp, 20					; 00000014H

; 2090 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pop_heap_0@PAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@U12@@std@@YAXPAUWeightedElement@?$CvWeightedVector@W4ProductionSpecializationSubtypes@@$03$00@@00@Z ENDP ; std::_Pop_heap_0<CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement *,CvWeightedVector<enum ProductionSpecializationSubtypes,4,1>::WeightedElement>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp___vsnprintf:PROC
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T239434 = -2092					; size = 4
$T239433 = -2088					; size = 4
$T239432 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T239432[ebp], eax
	mov	ecx, DWORD PTR $T239432[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T239433[ebp], eax
	mov	eax, DWORD PTR $T239433[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T239434[ebp], eax
	mov	ecx, DWORD PTR $T239434[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
END
