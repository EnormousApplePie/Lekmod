; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\sources\Lekmod_git\checkout\LEKMOD_DLL\CvGameCoreDLL_Expansion2\CvInfos.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1CvString@@QAE@XZ				; CvString::~CvString
PUBLIC	??_7CvBaseInfo@@6B@				; CvBaseInfo::`vftable'
PUBLIC	??0CvBaseInfo@@QAE@XZ				; CvBaseInfo::CvBaseInfo
PUBLIC	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
PUBLIC	??8CvBaseInfo@@UBE_NABV0@@Z			; CvBaseInfo::operator==
PUBLIC	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z	; CvBaseInfo::readFrom
PUBLIC	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z	; CvBaseInfo::writeTo
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_7CvBaseInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvBaseInfo@@6B@ DD FLAT:?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T227900 = -48						; size = 4
$T227895 = -44						; size = 4
$T227890 = -40						; size = 4
$T227885 = -36						; size = 4
$T227880 = -32						; size = 4
$T227875 = -28						; size = 4
$T227870 = -24						; size = 4
$T227865 = -20						; size = 4
$T227860 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::CvBaseInfo, COMDAT
; _this$ = ecx

; 39   : {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvBaseInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T227860[ebp], edx
	mov	ecx, DWORD PTR $T227860[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T227865[ebp], eax
	mov	ecx, DWORD PTR $T227865[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR $T227870[ebp], ecx
	mov	ecx, DWORD PTR $T227870[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T227875[ebp], edx
	mov	ecx, DWORD PTR $T227875[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T227880[ebp], eax
	mov	ecx, DWORD PTR $T227880[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	mov	DWORD PTR $T227885[ebp], ecx
	mov	ecx, DWORD PTR $T227885[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T227890[ebp], edx
	mov	ecx, DWORD PTR $T227890[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 204				; 000000ccH
	mov	DWORD PTR $T227895[ebp], eax
	mov	ecx, DWORD PTR $T227895[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	mov	DWORD PTR $T227900[ebp], ecx
	mov	ecx, DWORD PTR $T227900[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::CvBaseInfo
PUBLIC	?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ; CvBaseInfo::CacheResult
EXTRN	??1CvDatabaseUtility@@QAE@XZ:PROC		; CvDatabaseUtility::~CvDatabaseUtility
EXTRN	??0CvDatabaseUtility@@QAE@XZ:PROC		; CvDatabaseUtility::CvDatabaseUtility
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z$0
__ehfuncinfo$?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T227914 = -57						; size = 1
_kUtility$ = -56					; size = 44
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z PROC ; CvBaseInfo::CacheResult, COMDAT
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 	CvDatabaseUtility kUtility;

	lea	ecx, DWORD PTR _kUtility$[ebp]
	call	??0CvDatabaseUtility@@QAE@XZ		; CvDatabaseUtility::CvDatabaseUtility
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 44   : 	return CacheResults(kResults, kUtility);

	lea	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	BYTE PTR $T227914[ebp], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kUtility$[ebp]
	call	??1CvDatabaseUtility@@QAE@XZ		; CvDatabaseUtility::~CvDatabaseUtility
	mov	al, BYTE PTR $T227914[ebp]

; 45   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z$0:
	lea	ecx, DWORD PTR _kUtility$[ebp]
	jmp	??1CvDatabaseUtility@@QAE@XZ		; CvDatabaseUtility::~CvDatabaseUtility
__ehhandler$?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResult@CvBaseInfo@@QAE_NAAVResults@Database@@@Z ENDP ; CvBaseInfo::CacheResult
PUBLIC	??_C@_0M@OHKMKKDH@Description?$AA@		; `string'
PUBLIC	?GetLocalizedText@@YA?AVCvString@@PBD@Z		; GetLocalizedText
PUBLIC	??_C@_0N@NEBCCCLG@DisabledHelp?$AA@		; `string'
PUBLIC	??_C@_04DDFEFHOJ@Help?$AA@			; `string'
PUBLIC	??_C@_08HBKDEKFB@Strategy?$AA@			; `string'
PUBLIC	??_C@_0M@MMDHIABE@Civilopedia?$AA@		; `string'
PUBLIC	??_C@_04OJAHODMC@Text?$AA@			; `string'
PUBLIC	??_C@_04KOACHJEN@Type?$AA@			; `string'
PUBLIC	??_C@_02OLOABKKD@ID?$AA@			; `string'
EXTRN	__imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:PROC
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:PROC
EXTRN	__imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ:PROC
EXTRN	__imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_?GetText@Results@Database@@QAEPBDPBD@Z:PROC
EXTRN	__imp_?GetInt@Results@Database@@QAEHPBD@Z:PROC
;	COMDAT ??_C@_0M@OHKMKKDH@Description?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvplayer.h
CONST	SEGMENT
??_C@_0M@OHKMKKDH@Description?$AA@ DB 'Description', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NEBCCCLG@DisabledHelp?$AA@
CONST	SEGMENT
??_C@_0N@NEBCCCLG@DisabledHelp?$AA@ DB 'DisabledHelp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDFEFHOJ@Help?$AA@
CONST	SEGMENT
??_C@_04DDFEFHOJ@Help?$AA@ DB 'Help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBKDEKFB@Strategy?$AA@
CONST	SEGMENT
??_C@_08HBKDEKFB@Strategy?$AA@ DB 'Strategy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMDHIABE@Civilopedia?$AA@
CONST	SEGMENT
??_C@_0M@MMDHIABE@Civilopedia?$AA@ DB 'Civilopedia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OJAHODMC@Text?$AA@
CONST	SEGMENT
??_C@_04OJAHODMC@Text?$AA@ DB 'Text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KOACHJEN@Type?$AA@
CONST	SEGMENT
??_C@_04KOACHJEN@Type?$AA@ DB 'Type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OLOABKKD@ID?$AA@
CONST	SEGMENT
??_C@_02OLOABKKD@ID?$AA@ DB 'ID', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
__ehfuncinfo$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv184 = -164						; size = 4
tv187 = -160						; size = 4
_this$ = -156						; size = 4
$T228007 = -152						; size = 4
$T228003 = -148						; size = 4
$T227993 = -144						; size = 4
$T227992 = -140						; size = 4
$T227988 = -136						; size = 4
$T227978 = -132						; size = 4
$T227977 = -128						; size = 4
$T227973 = -124						; size = 4
$T227969 = -120						; size = 4
$T227968 = -116						; size = 4
$T227962 = -112						; size = 4
$T227961 = -108						; size = 4
$T227955 = -104						; size = 4
$T227954 = -100						; size = 4
$T227948 = -96						; size = 4
$T227947 = -92						; size = 4
$T227941 = -88						; size = 4
$T227940 = -84						; size = 4
$T227934 = -80						; size = 4
$T227933 = -76						; size = 4
$T227925 = -72						; size = 28
$T227924 = -44						; size = 28
_szDescription$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
___formal$ = 12						; size = 4
?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvBaseInfo::CacheResults, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	m_iID				= kResults.GetInt("ID");

	push	OFFSET ??_C@_02OLOABKKD@ID?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 50   : 	m_strType			= kResults.GetText("Type");

	push	OFFSET ??_C@_04KOACHJEN@Type?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T227934[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T227933[ebp], edx
	cmp	DWORD PTR $T227934[ebp], 0
	je	SHORT $LN9@CacheResul
	mov	eax, DWORD PTR $T227934[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227933[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN10@CacheResul
$LN9@CacheResul:
	mov	ecx, DWORD PTR $T227933[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN10@CacheResul:

; 51   : 	m_strTextKey		= kResults.GetText("Text");

	push	OFFSET ??_C@_04OJAHODMC@Text?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T227941[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T227940[ebp], ecx
	cmp	DWORD PTR $T227941[ebp], 0
	je	SHORT $LN13@CacheResul
	mov	edx, DWORD PTR $T227941[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227940[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN14@CacheResul
$LN13@CacheResul:
	mov	ecx, DWORD PTR $T227940[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN14@CacheResul:

; 52   : 	m_strCivilopedia	= kResults.GetText("Civilopedia");

	push	OFFSET ??_C@_0M@MMDHIABE@Civilopedia?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T227948[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR $T227947[ebp], eax
	cmp	DWORD PTR $T227948[ebp], 0
	je	SHORT $LN17@CacheResul
	mov	ecx, DWORD PTR $T227948[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227947[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN18@CacheResul
$LN17@CacheResul:
	mov	ecx, DWORD PTR $T227947[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN18@CacheResul:

; 53   : 	m_strStrategy		= kResults.GetText("Strategy");

	push	OFFSET ??_C@_08HBKDEKFB@Strategy?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T227955[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	mov	DWORD PTR $T227954[ebp], edx
	cmp	DWORD PTR $T227955[ebp], 0
	je	SHORT $LN21@CacheResul
	mov	eax, DWORD PTR $T227955[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227954[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN22@CacheResul
$LN21@CacheResul:
	mov	ecx, DWORD PTR $T227954[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN22@CacheResul:

; 54   : 	m_strHelp			= kResults.GetText("Help");

	push	OFFSET ??_C@_04DDFEFHOJ@Help?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T227962[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR $T227961[ebp], ecx
	cmp	DWORD PTR $T227962[ebp], 0
	je	SHORT $LN25@CacheResul
	mov	edx, DWORD PTR $T227962[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227961[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN26@CacheResul
$LN25@CacheResul:
	mov	ecx, DWORD PTR $T227961[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN26@CacheResul:

; 55   : 	m_strDisabledHelp	= kResults.GetText("DisabledHelp");

	push	OFFSET ??_C@_0N@NEBCCCLG@DisabledHelp?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T227969[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T227968[ebp], eax
	cmp	DWORD PTR $T227969[ebp], 0
	je	SHORT $LN29@CacheResul
	mov	ecx, DWORD PTR $T227969[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227968[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN30@CacheResul
$LN29@CacheResul:
	mov	ecx, DWORD PTR $T227968[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN30@CacheResul:

; 56   : 
; 57   : 	if(!m_strTextKey.empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@CacheResul

; 58   : 		m_strText = GetLocalizedText(m_strTextKey);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T227973[ebp], eax
	mov	eax, DWORD PTR $T227973[ebp]
	push	eax
	lea	ecx, DWORD PTR $T227924[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv187[ebp], eax
	mov	edx, DWORD PTR tv187[ebp]
	mov	DWORD PTR $T227978[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T227977[ebp], eax
	mov	ecx, DWORD PTR $T227978[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T227977[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T227924[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@CacheResul:

; 59   : 
; 60   : 
; 61   : 	const char* szDescription = kResults.GetText("Description");

	push	OFFSET ??_C@_0M@OHKMKKDH@Description?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szDescription$[ebp], eax

; 62   : 	if(szDescription)

	cmp	DWORD PTR _szDescription$[ebp], 0
	je	$LN2@CacheResul

; 63   : 	{
; 64   : 		m_strDescriptionKey = szDescription;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR $T227988[ebp], edx
	cmp	DWORD PTR _szDescription$[ebp], 0
	je	SHORT $LN40@CacheResul
	mov	eax, DWORD PTR _szDescription$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T227988[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN41@CacheResul
$LN40@CacheResul:
	mov	ecx, DWORD PTR $T227988[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN41@CacheResul:

; 65   : 		m_strDescription = GetLocalizedText(szDescription);

	mov	ecx, DWORD PTR _szDescription$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T227925[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv184[ebp], eax
	mov	eax, DWORD PTR tv184[ebp]
	mov	DWORD PTR $T227993[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T227992[ebp], ecx
	mov	edx, DWORD PTR $T227993[ebp]
	push	edx
	mov	ecx, DWORD PTR $T227992[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T227925[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 66   : 
; 67   : 		//CvInfoBase did this, gotta support it for now...
; 68   : 		if(m_strTextKey.empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@CacheResul

; 69   : 		{
; 70   : 			m_strTextKey = szDescription;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T228003[ebp], ecx
	cmp	DWORD PTR _szDescription$[ebp], 0
	je	SHORT $LN49@CacheResul
	mov	edx, DWORD PTR _szDescription$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T228003[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN50@CacheResul
$LN49@CacheResul:
	mov	ecx, DWORD PTR $T228003[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN50@CacheResul:

; 71   : 			m_strText = m_strDescription;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T228007[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR $T228007[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN2@CacheResul:

; 72   : 		}
; 73   : 	}
; 74   : 
; 75   : 	return true;

	mov	al, 1

; 76   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR $T227924[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR $T227925[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-156]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvBaseInfo::CacheResults
PUBLIC	__$ArrayPad$
EXTRN	__imp_??1String@Localization@@UAE@XZ:PROC
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z:PROC
EXTRN	__imp_?Lookup@Localization@@YA?AVString@1@PBD@Z:PROC
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?GetLocalizedText@@YA?AVCvString@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$1
__ehfuncinfo$?GetLocalizedText@@YA?AVCvString@@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvgamecoreutils.h
xdata$x	ENDS
;	COMDAT ?GetLocalizedText@@YA?AVCvString@@PBD@Z
_TEXT	SEGMENT
$T228020 = -140						; size = 4
_str$ = -136						; size = 28
__$ArrayPad$ = -108					; size = 4
_bytes$ = -104						; size = 4
_text$ = -100						; size = 80
_szComposedString$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_szString$ = 12						; size = 4
?GetLocalizedText@@YA?AVCvString@@PBD@Z PROC		; GetLocalizedText, COMDAT

; 489  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T228020[ebp], 0

; 490  : 	Localization::String text = Localization::Lookup(szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$[ebp]
	push	ecx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 491  : 
; 492  : 	size_t bytes = 0;

	mov	DWORD PTR _bytes$[ebp], 0

; 493  : 	const char* szComposedString = text.toUTF8(bytes);

	push	1
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDAAIH@Z
	mov	DWORD PTR _szComposedString$[ebp], eax

; 494  : 	CvString str;

	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 495  : 	str.assign(szComposedString, bytes);

	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szComposedString$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z

; 496  : 	return str;

	lea	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T228020[ebp]
	or	eax, 1
	mov	DWORD PTR $T228020[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _str$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _text$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 497  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$0:
	lea	ecx, DWORD PTR _text$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?GetLocalizedText@@YA?AVCvString@@PBD@Z$2:
	mov	eax, DWORD PTR $T228020[ebp]
	and	eax, 1
	je	$LN6@GetLocaliz
	and	DWORD PTR $T228020[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN6@GetLocaliz:
	ret	0
__ehhandler$?GetLocalizedText@@YA?AVCvString@@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetLocalizedText@@YA?AVCvString@@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLocalizedText@@YA?AVCvString@@PBD@Z ENDP		; GetLocalizedText
PUBLIC	?GetText@CvBaseInfo@@QBEPBDXZ			; CvBaseInfo::GetText
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
;	COMDAT ?GetText@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?GetText@CvBaseInfo@@QBEPBDXZ PROC			; CvBaseInfo::GetText, COMDAT
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 	return (m_strText.empty())? NULL : m_strText.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetText
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN4@GetText
$LN3@GetText:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 232				; 000000e8H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR tv80[ebp], eax
$LN4@GetText:
	mov	eax, DWORD PTR tv80[ebp]

; 81   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetText@CvBaseInfo@@QBEPBDXZ ENDP			; CvBaseInfo::GetText
_TEXT	ENDS
PUBLIC	?GetTextKey@CvBaseInfo@@QBEPBDXZ		; CvBaseInfo::GetTextKey
; Function compile flags: /Odtp
;	COMDAT ?GetTextKey@CvBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?GetTextKey@CvBaseInfo@@QBEPBDXZ PROC			; CvBaseInfo::GetTextKey, COMDAT
; _this$ = ecx

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 85   : 	return (m_strTextKey.empty())? NULL : m_strTextKey.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@GetTextKey
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN4@GetTextKey
$LN3@GetTextKey:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR tv80[ebp], eax
$LN4@GetTextKey:
	mov	eax, DWORD PTR tv80[ebp]

; 86   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextKey@CvBaseInfo@@QBEPBDXZ ENDP			; CvBaseInfo::GetTextKey
_TEXT	ENDS
EXTRN	__imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z:PROC
; Function compile flags: /Odtp
;	COMDAT ??8CvBaseInfo@@UBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??8CvBaseInfo@@UBE_NABV0@@Z PROC			; CvBaseInfo::operator==, COMDAT
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   : 	if(this == &rhs) return true;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _rhs$[ebp]
	jne	SHORT $LN10@operator
	mov	al, 1
	jmp	$LN11@operator
$LN10@operator:

; 91   : 	if(m_iID != rhs.m_iID) return false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rhs$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN9@operator
	xor	al, al
	jmp	$LN11@operator
$LN9@operator:

; 92   : 	if(m_strCivilopedia != rhs.m_strCivilopedia) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@operator
	xor	al, al
	jmp	$LN11@operator
$LN8@operator:

; 93   : 	if(m_strDescription != rhs.m_strDescription) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@operator
	xor	al, al
	jmp	$LN11@operator
$LN7@operator:

; 94   : 	if(m_strHelp != rhs.m_strHelp) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 92					; 0000005cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@operator
	xor	al, al
	jmp	$LN11@operator
$LN6@operator:

; 95   : 	if(m_strDisabledHelp != rhs.m_strDisabledHelp) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 120				; 00000078H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 120				; 00000078H
	push	edx
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@operator
	xor	al, al
	jmp	$LN11@operator
$LN5@operator:

; 96   : 	if(m_strStrategy != rhs.m_strStrategy) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 148				; 00000094H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@operator
	xor	al, al
	jmp	SHORT $LN11@operator
$LN4@operator:

; 97   : 	if(m_strType != rhs.m_strType) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 176				; 000000b0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	push	edx
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	xor	al, al
	jmp	SHORT $LN11@operator
$LN3@operator:

; 98   : 	if(m_strTextKey != rhs.m_strTextKey) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 204				; 000000ccH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 204				; 000000ccH
	push	edx
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@operator
	xor	al, al
	jmp	SHORT $LN11@operator
$LN2@operator:

; 99   : 	if(m_strText != rhs.m_strText) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	add	ecx, 232				; 000000e8H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 232				; 000000e8H
	push	edx
	call	DWORD PTR __imp_??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator
	xor	al, al
	jmp	SHORT $LN11@operator
$LN1@operator:

; 100  : 	return true;

	mov	al, 1
$LN11@operator:

; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	4
??8CvBaseInfo@@UBE_NABV0@@Z ENDP			; CvBaseInfo::operator==
_TEXT	ENDS
EXTRN	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Read
EXTRN	?Read@FDataStream@@IAEXAAH@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z PROC	; CvBaseInfo::readFrom, COMDAT
; _this$ = ecx

; 104  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 105  : 	loadFrom >> m_iID;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 106  : 	loadFrom >> m_strCivilopedia;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 107  : 	loadFrom >> m_strDescription;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 108  : 	loadFrom >> m_strHelp;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 109  : 	loadFrom >> m_strDisabledHelp;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 110  : 	loadFrom >> m_strStrategy;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 111  : 	loadFrom >> m_strType;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 176				; 000000b0H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 112  : 	loadFrom >> m_strTextKey;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 113  : 	loadFrom >> m_strText;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 232				; 000000e8H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Read

; 114  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z ENDP	; CvBaseInfo::readFrom
_TEXT	ENDS
EXTRN	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; FDataStream::Write
EXTRN	?Write@FDataStream@@IAEXABH@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_saveTo$ = 8						; size = 4
?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z PROC	; CvBaseInfo::writeTo, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 118  : 	saveTo << m_iID;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 119  : 	saveTo << m_strCivilopedia;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 120  : 	saveTo << m_strDescription;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 121  : 	saveTo << m_strHelp;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 122  : 	saveTo << m_strDisabledHelp;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 123  : 	saveTo << m_strStrategy;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 124  : 	saveTo << m_strType;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 176				; 000000b0H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 125  : 	saveTo << m_strTextKey;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 126  : 	saveTo << m_strText;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 232				; 000000e8H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDataStream::Write

; 127  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z ENDP	; CvBaseInfo::writeTo
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvBaseInfo@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvBaseInfo@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvBaseInfo@@@Z PROC	; operator<<, COMDAT

; 130  : {

	push	ebp
	mov	ebp, esp

; 131  : 	readFrom.writeTo(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 132  : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 133  : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvBaseInfo@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvBaseInfo@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvBaseInfo@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvBaseInfo@@@Z PROC	; operator>>, COMDAT

; 136  : {

	push	ebp
	mov	ebp, esp

; 137  : 	writeTo.readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 138  : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 139  : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvBaseInfo@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??1CvBaseInfo@@QAE@XZ				; CvBaseInfo::~CvBaseInfo
PUBLIC	??_7CvHotKeyInfo@@6B@				; CvHotKeyInfo::`vftable'
PUBLIC	??0CvHotKeyInfo@@QAE@XZ				; CvHotKeyInfo::CvHotKeyInfo
PUBLIC	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::CacheResults
;	COMDAT ??_7CvHotKeyInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvHotKeyInfo@@6B@ DD FLAT:?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CvHotKeyInfo@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CvHotKeyInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvHotKeyInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$5
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvHotKeyInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T228150 = -36						; size = 4
$T228145 = -32						; size = 4
$T228140 = -28						; size = 4
$T228135 = -24						; size = 4
$T228130 = -20						; size = 4
$T228125 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvHotKeyInfo@@QAE@XZ PROC				; CvHotKeyInfo::CvHotKeyInfo, COMDAT
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvHotKeyInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvHotKeyInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+285], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+286], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+287], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+289], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	mov	DWORD PTR $T228125[ebp], ecx
	mov	ecx, DWORD PTR $T228125[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 320				; 00000140H
	mov	DWORD PTR $T228130[ebp], edx
	mov	ecx, DWORD PTR $T228130[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	mov	DWORD PTR $T228135[ebp], eax
	mov	ecx, DWORD PTR $T228135[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	mov	DWORD PTR $T228140[ebp], ecx
	mov	ecx, DWORD PTR $T228140[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 404				; 00000194H
	mov	DWORD PTR $T228145[ebp], edx
	mov	ecx, DWORD PTR $T228145[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 432				; 000001b0H
	mov	DWORD PTR $T228150[ebp], eax
	mov	ecx, DWORD PTR $T228150[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 158  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvHotKeyInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvHotKeyInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvHotKeyInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvHotKeyInfo@@QAE@XZ ENDP				; CvHotKeyInfo::CvHotKeyInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvBaseInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T228212 = -48						; size = 4
$T228207 = -44						; size = 4
$T228202 = -40						; size = 4
$T228197 = -36						; size = 4
$T228192 = -32						; size = 4
$T228187 = -28						; size = 4
$T228182 = -24						; size = 4
$T228177 = -20						; size = 4
$T228172 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvBaseInfo@@QAE@XZ PROC				; CvBaseInfo::~CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 232				; 000000e8H
	mov	DWORD PTR $T228172[ebp], eax
	mov	ecx, DWORD PTR $T228172[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	mov	DWORD PTR $T228177[ebp], ecx
	mov	ecx, DWORD PTR $T228177[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	DWORD PTR $T228182[ebp], edx
	mov	ecx, DWORD PTR $T228182[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 148				; 00000094H
	mov	DWORD PTR $T228187[ebp], eax
	mov	ecx, DWORD PTR $T228187[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	mov	DWORD PTR $T228192[ebp], ecx
	mov	ecx, DWORD PTR $T228192[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 92					; 0000005cH
	mov	DWORD PTR $T228197[ebp], edx
	mov	ecx, DWORD PTR $T228197[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR $T228202[ebp], eax
	mov	ecx, DWORD PTR $T228202[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	DWORD PTR $T228207[ebp], ecx
	mov	ecx, DWORD PTR $T228207[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T228212[ebp], edx
	mov	ecx, DWORD PTR $T228212[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvBaseInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvBaseInfo@@QAE@XZ ENDP				; CvBaseInfo::~CvBaseInfo
PUBLIC	??_C@_09DOOOELOL@KB_DELETE?$AA@			; `string'
PUBLIC	??_C@_09IABKIFBJ@KB_INSERT?$AA@			; `string'
PUBLIC	??_C@_07OHNPMIIH@KB_PGDN?$AA@			; `string'
PUBLIC	??_C@_07KJGLMMAD@KB_DOWN?$AA@			; `string'
PUBLIC	??_C@_06JOJHHALL@KB_END?$AA@			; `string'
PUBLIC	??_C@_08EJCMJNCN@KB_RIGHT?$AA@			; `string'
PUBLIC	??_C@_07FLGPFEDK@KB_LEFT?$AA@			; `string'
PUBLIC	??_C@_07COHKDOBP@KB_PGUP?$AA@			; `string'
PUBLIC	??_C@_05EKDDABCB@KB_UP?$AA@			; `string'
PUBLIC	??_C@_07JONONOGP@KB_HOME?$AA@			; `string'
PUBLIC	??_C@_08INCOIHHC@KB_PAUSE?$AA@			; `string'
PUBLIC	??_C@_07GEKGPFI@KB_RALT?$AA@			; `string'
PUBLIC	??_C@_08FBCNMLCB@KB_SYSRQ?$AA@			; `string'
PUBLIC	??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@		; `string'
PUBLIC	??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@		; `string'
PUBLIC	??_C@_0M@PBJILMIJ@KB_VOLUMEUP?$AA@		; `string'
PUBLIC	??_C@_0O@HKGFIOHI@KB_VOLUMEDOWN?$AA@		; `string'
PUBLIC	??_C@_0M@PENKPBCB@KB_RCONTROL?$AA@		; `string'
PUBLIC	??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@		; `string'
PUBLIC	??_C@_08GMIFNCOM@KB_COLON?$AA@			; `string'
PUBLIC	??_C@_0N@KCALIECB@KB_UNDERLINE?$AA@		; `string'
PUBLIC	??_C@_05DFHAMPIJ@KB_AT?$AA@			; `string'
PUBLIC	??_C@_0BA@LNOKOBMC@KB_NUMPADEQUALS?$AA@		; `string'
PUBLIC	??_C@_06KKOKCOEI@KB_F12?$AA@			; `string'
PUBLIC	??_C@_06IBMHHNIL@KB_F11?$AA@			; `string'
PUBLIC	??_C@_0BA@GABKNMBG@KB_NUMPADPERIOD?$AA@		; `string'
PUBLIC	??_C@_0L@BLOHGFID@KB_NUMPAD0?$AA@		; `string'
PUBLIC	??_C@_0L@DAMKDGEA@KB_NUMPAD3?$AA@		; `string'
PUBLIC	??_C@_0L@CJNBAHAB@KB_NUMPAD2?$AA@		; `string'
PUBLIC	??_C@_0L@CPMFEMC@KB_NUMPAD1?$AA@		; `string'
PUBLIC	??_C@_0O@HGIGDPPP@KB_NUMPADPLUS?$AA@		; `string'
PUBLIC	??_C@_0L@ENLNMCAF@KB_NUMPAD6?$AA@		; `string'
PUBLIC	??_C@_0L@GGJAJBMG@KB_NUMPAD5?$AA@		; `string'
PUBLIC	??_C@_0L@HPILKAIH@KB_NUMPAD4?$AA@		; `string'
PUBLIC	??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@		; `string'
PUBLIC	??_C@_0L@MKCFNOMK@KB_NUMPAD9?$AA@		; `string'
PUBLIC	??_C@_0L@NDDOOPIL@KB_NUMPAD8?$AA@		; `string'
PUBLIC	??_C@_0L@FEKGPDEE@KB_NUMPAD7?$AA@		; `string'
PUBLIC	??_C@_09DJFEIKLA@KB_SCROLL?$AA@			; `string'
PUBLIC	??_C@_0L@JHKMNOIL@KB_NUMLOCK?$AA@		; `string'
PUBLIC	??_C@_06JINMEMMK@KB_F10?$AA@			; `string'
PUBLIC	??_C@_05OAGMMMOG@KB_F9?$AA@			; `string'
PUBLIC	??_C@_05PJHHPNKH@KB_F8?$AA@			; `string'
PUBLIC	??_C@_05HOOPOBGI@KB_F7?$AA@			; `string'
PUBLIC	??_C@_05GHPENACJ@KB_F6?$AA@			; `string'
PUBLIC	??_C@_05EMNJIDOK@KB_F5?$AA@			; `string'
PUBLIC	??_C@_05FFMCLCKL@KB_F4?$AA@			; `string'
PUBLIC	??_C@_05BKIDCEGM@KB_F3?$AA@			; `string'
PUBLIC	??_C@_05DJIBFCN@KB_F2?$AA@			; `string'
PUBLIC	??_C@_05CILFEGOO@KB_F1?$AA@			; `string'
PUBLIC	??_C@_0M@JHCCGBKO@KB_CAPSLOCK?$AA@		; `string'
PUBLIC	??_C@_08JFGHCIFG@KB_SPACE?$AA@			; `string'
PUBLIC	??_C@_07NJJKEGLL@KB_LALT?$AA@			; `string'
PUBLIC	??_C@_0O@KGLPAALC@KB_NUMPADSTAR?$AA@		; `string'
PUBLIC	??_C@_09BMECEOOP@KB_RSHIFT?$AA@			; `string'
PUBLIC	??_C@_08JJPPIPOI@KB_SLASH?$AA@			; `string'
PUBLIC	??_C@_09DBBBBILN@KB_PERIOD?$AA@			; `string'
PUBLIC	??_C@_08FACFHNCI@KB_COMMA?$AA@			; `string'
PUBLIC	??_C@_0N@ENICBGAB@KB_BACKSLASH?$AA@		; `string'
PUBLIC	??_C@_09CLKDKJHM@KB_LSHIFT?$AA@			; `string'
PUBLIC	??_C@_08GNANFKCA@KB_GRAVE?$AA@			; `string'
PUBLIC	??_C@_0O@LDFOBAHH@KB_APOSTROPHE?$AA@		; `string'
PUBLIC	??_C@_0N@KPGNPDME@KB_SEMICOLON?$AA@		; `string'
PUBLIC	??_C@_0M@JANIGIMC@KB_LCONTROL?$AA@		; `string'
PUBLIC	??_C@_09NNBAMMLK@KB_RETURN?$AA@			; `string'
PUBLIC	??_C@_0M@LPHCPAGM@KB_RBRACKET?$AA@		; `string'
PUBLIC	??_C@_0M@NLHAGJIP@KB_LBRACKET?$AA@		; `string'
PUBLIC	??_C@_06CLDEKAPK@KB_TAB?$AA@			; `string'
PUBLIC	??_C@_0N@EBBKLBLP@KB_BACKSPACE?$AA@		; `string'
PUBLIC	??_C@_09OMOBCFGJ@KB_EQUALS?$AA@			; `string'
PUBLIC	??_C@_04FHCNFP@KB_Z?$AA@			; `string'
PUBLIC	??_C@_04CLHKHOJM@KB_Y?$AA@			; `string'
PUBLIC	??_C@_04DCGBEPNN@KB_X?$AA@			; `string'
PUBLIC	??_C@_04LFPJFDBC@KB_W?$AA@			; `string'
PUBLIC	??_C@_04KMOCGCFD@KB_V?$AA@			; `string'
PUBLIC	??_C@_04IHMPDBJA@KB_U?$AA@			; `string'
PUBLIC	??_C@_04JONEAANB@KB_T?$AA@			; `string'
PUBLIC	??_C@_04NBJFJGBG@KB_S?$AA@			; `string'
PUBLIC	??_C@_04MIIOKHFH@KB_R?$AA@			; `string'
PUBLIC	??_C@_04ODKDPEJE@KB_Q?$AA@			; `string'
PUBLIC	??_C@_04PKLIMFNF@KB_P?$AA@			; `string'
PUBLIC	??_C@_04DHOCMLEL@KB_O?$AA@			; `string'
PUBLIC	??_C@_04COPJPKAK@KB_N?$AA@			; `string'
PUBLIC	??_C@_04FNEKJMJ@KB_M?$AA@			; `string'
PUBLIC	??_C@_04BMMPJIII@KB_L?$AA@			; `string'
PUBLIC	??_C@_04FDIOAOEP@KB_K?$AA@			; `string'
PUBLIC	??_C@_04EKJFDPAO@KB_J?$AA@			; `string'
PUBLIC	??_C@_04GBLIGMMN@KB_I?$AA@			; `string'
PUBLIC	??_C@_04HIKDFNIM@KB_H?$AA@			; `string'
PUBLIC	??_C@_04PPDLEBED@KB_G?$AA@			; `string'
PUBLIC	??_C@_04OGCAHAAC@KB_F?$AA@			; `string'
PUBLIC	??_C@_04MNANCDMB@KB_E?$AA@			; `string'
PUBLIC	??_C@_04NEBGBCIA@KB_D?$AA@			; `string'
PUBLIC	??_C@_04JLFHIEEH@KB_C?$AA@			; `string'
PUBLIC	??_C@_04ICEMLFAG@KB_B?$AA@			; `string'
PUBLIC	??_C@_04KJGBOGMF@KB_A?$AA@			; `string'
PUBLIC	??_C@_08JNBLMEAN@KB_MINUS?$AA@			; `string'
PUBLIC	??_C@_04EOIHBFDL@KB_9?$AA@			; `string'
PUBLIC	??_C@_04FHJMCEHK@KB_8?$AA@			; `string'
PUBLIC	??_C@_04NAAEDILF@KB_7?$AA@			; `string'
PUBLIC	??_C@_04MJBPAJPE@KB_6?$AA@			; `string'
PUBLIC	??_C@_04OCDCFKDH@KB_5?$AA@			; `string'
PUBLIC	??_C@_04PLCJGLHG@KB_4?$AA@			; `string'
PUBLIC	??_C@_04LEGIPNLB@KB_3?$AA@			; `string'
PUBLIC	??_C@_04KNHDMMPA@KB_2?$AA@			; `string'
PUBLIC	??_C@_04IGFOJPDD@KB_1?$AA@			; `string'
PUBLIC	??_C@_04JPEFKOHC@KB_0?$AA@			; `string'
PUBLIC	??_C@_09EHCNAJID@KB_ESCAPE?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetHotKeyInt@CvHotKeyInfo@@IAEHPBD@Z		; CvHotKeyInfo::GetHotKeyInt
;	COMDAT ??_C@_09DOOOELOL@KB_DELETE?$AA@
CONST	SEGMENT
??_C@_09DOOOELOL@KB_DELETE?$AA@ DB 'KB_DELETE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IABKIFBJ@KB_INSERT?$AA@
CONST	SEGMENT
??_C@_09IABKIFBJ@KB_INSERT?$AA@ DB 'KB_INSERT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHNPMIIH@KB_PGDN?$AA@
CONST	SEGMENT
??_C@_07OHNPMIIH@KB_PGDN?$AA@ DB 'KB_PGDN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJGLMMAD@KB_DOWN?$AA@
CONST	SEGMENT
??_C@_07KJGLMMAD@KB_DOWN?$AA@ DB 'KB_DOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOJHHALL@KB_END?$AA@
CONST	SEGMENT
??_C@_06JOJHHALL@KB_END?$AA@ DB 'KB_END', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJCMJNCN@KB_RIGHT?$AA@
CONST	SEGMENT
??_C@_08EJCMJNCN@KB_RIGHT?$AA@ DB 'KB_RIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FLGPFEDK@KB_LEFT?$AA@
CONST	SEGMENT
??_C@_07FLGPFEDK@KB_LEFT?$AA@ DB 'KB_LEFT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07COHKDOBP@KB_PGUP?$AA@
CONST	SEGMENT
??_C@_07COHKDOBP@KB_PGUP?$AA@ DB 'KB_PGUP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EKDDABCB@KB_UP?$AA@
CONST	SEGMENT
??_C@_05EKDDABCB@KB_UP?$AA@ DB 'KB_UP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JONONOGP@KB_HOME?$AA@
CONST	SEGMENT
??_C@_07JONONOGP@KB_HOME?$AA@ DB 'KB_HOME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08INCOIHHC@KB_PAUSE?$AA@
CONST	SEGMENT
??_C@_08INCOIHHC@KB_PAUSE?$AA@ DB 'KB_PAUSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GEKGPFI@KB_RALT?$AA@
CONST	SEGMENT
??_C@_07GEKGPFI@KB_RALT?$AA@ DB 'KB_RALT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBCNMLCB@KB_SYSRQ?$AA@
CONST	SEGMENT
??_C@_08FBCNMLCB@KB_SYSRQ?$AA@ DB 'KB_SYSRQ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@
CONST	SEGMENT
??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@ DB 'KB_NUMPADSLASH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@
CONST	SEGMENT
??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@ DB 'KB_NUMPADCOMMA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PBJILMIJ@KB_VOLUMEUP?$AA@
CONST	SEGMENT
??_C@_0M@PBJILMIJ@KB_VOLUMEUP?$AA@ DB 'KB_VOLUMEUP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HKGFIOHI@KB_VOLUMEDOWN?$AA@
CONST	SEGMENT
??_C@_0O@HKGFIOHI@KB_VOLUMEDOWN?$AA@ DB 'KB_VOLUMEDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PENKPBCB@KB_RCONTROL?$AA@
CONST	SEGMENT
??_C@_0M@PENKPBCB@KB_RCONTROL?$AA@ DB 'KB_RCONTROL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@
CONST	SEGMENT
??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@ DB 'KB_NUMPADENTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMIFNCOM@KB_COLON?$AA@
CONST	SEGMENT
??_C@_08GMIFNCOM@KB_COLON?$AA@ DB 'KB_COLON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KCALIECB@KB_UNDERLINE?$AA@
CONST	SEGMENT
??_C@_0N@KCALIECB@KB_UNDERLINE?$AA@ DB 'KB_UNDERLINE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFHAMPIJ@KB_AT?$AA@
CONST	SEGMENT
??_C@_05DFHAMPIJ@KB_AT?$AA@ DB 'KB_AT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LNOKOBMC@KB_NUMPADEQUALS?$AA@
CONST	SEGMENT
??_C@_0BA@LNOKOBMC@KB_NUMPADEQUALS?$AA@ DB 'KB_NUMPADEQUALS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKOKCOEI@KB_F12?$AA@
CONST	SEGMENT
??_C@_06KKOKCOEI@KB_F12?$AA@ DB 'KB_F12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBMHHNIL@KB_F11?$AA@
CONST	SEGMENT
??_C@_06IBMHHNIL@KB_F11?$AA@ DB 'KB_F11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GABKNMBG@KB_NUMPADPERIOD?$AA@
CONST	SEGMENT
??_C@_0BA@GABKNMBG@KB_NUMPADPERIOD?$AA@ DB 'KB_NUMPADPERIOD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BLOHGFID@KB_NUMPAD0?$AA@
CONST	SEGMENT
??_C@_0L@BLOHGFID@KB_NUMPAD0?$AA@ DB 'KB_NUMPAD0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DAMKDGEA@KB_NUMPAD3?$AA@
CONST	SEGMENT
??_C@_0L@DAMKDGEA@KB_NUMPAD3?$AA@ DB 'KB_NUMPAD3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CJNBAHAB@KB_NUMPAD2?$AA@
CONST	SEGMENT
??_C@_0L@CJNBAHAB@KB_NUMPAD2?$AA@ DB 'KB_NUMPAD2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPMFEMC@KB_NUMPAD1?$AA@
CONST	SEGMENT
??_C@_0L@CPMFEMC@KB_NUMPAD1?$AA@ DB 'KB_NUMPAD1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HGIGDPPP@KB_NUMPADPLUS?$AA@
CONST	SEGMENT
??_C@_0O@HGIGDPPP@KB_NUMPADPLUS?$AA@ DB 'KB_NUMPADPLUS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ENLNMCAF@KB_NUMPAD6?$AA@
CONST	SEGMENT
??_C@_0L@ENLNMCAF@KB_NUMPAD6?$AA@ DB 'KB_NUMPAD6', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GGJAJBMG@KB_NUMPAD5?$AA@
CONST	SEGMENT
??_C@_0L@GGJAJBMG@KB_NUMPAD5?$AA@ DB 'KB_NUMPAD5', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HPILKAIH@KB_NUMPAD4?$AA@
CONST	SEGMENT
??_C@_0L@HPILKAIH@KB_NUMPAD4?$AA@ DB 'KB_NUMPAD4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@
CONST	SEGMENT
??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@ DB 'KB_NUMPADMINUS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKCFNOMK@KB_NUMPAD9?$AA@
CONST	SEGMENT
??_C@_0L@MKCFNOMK@KB_NUMPAD9?$AA@ DB 'KB_NUMPAD9', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NDDOOPIL@KB_NUMPAD8?$AA@
CONST	SEGMENT
??_C@_0L@NDDOOPIL@KB_NUMPAD8?$AA@ DB 'KB_NUMPAD8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FEKGPDEE@KB_NUMPAD7?$AA@
CONST	SEGMENT
??_C@_0L@FEKGPDEE@KB_NUMPAD7?$AA@ DB 'KB_NUMPAD7', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DJFEIKLA@KB_SCROLL?$AA@
CONST	SEGMENT
??_C@_09DJFEIKLA@KB_SCROLL?$AA@ DB 'KB_SCROLL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JHKMNOIL@KB_NUMLOCK?$AA@
CONST	SEGMENT
??_C@_0L@JHKMNOIL@KB_NUMLOCK?$AA@ DB 'KB_NUMLOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JINMEMMK@KB_F10?$AA@
CONST	SEGMENT
??_C@_06JINMEMMK@KB_F10?$AA@ DB 'KB_F10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OAGMMMOG@KB_F9?$AA@
CONST	SEGMENT
??_C@_05OAGMMMOG@KB_F9?$AA@ DB 'KB_F9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PJHHPNKH@KB_F8?$AA@
CONST	SEGMENT
??_C@_05PJHHPNKH@KB_F8?$AA@ DB 'KB_F8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HOOPOBGI@KB_F7?$AA@
CONST	SEGMENT
??_C@_05HOOPOBGI@KB_F7?$AA@ DB 'KB_F7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GHPENACJ@KB_F6?$AA@
CONST	SEGMENT
??_C@_05GHPENACJ@KB_F6?$AA@ DB 'KB_F6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNJIDOK@KB_F5?$AA@
CONST	SEGMENT
??_C@_05EMNJIDOK@KB_F5?$AA@ DB 'KB_F5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FFMCLCKL@KB_F4?$AA@
CONST	SEGMENT
??_C@_05FFMCLCKL@KB_F4?$AA@ DB 'KB_F4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BKIDCEGM@KB_F3?$AA@
CONST	SEGMENT
??_C@_05BKIDCEGM@KB_F3?$AA@ DB 'KB_F3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DJIBFCN@KB_F2?$AA@
CONST	SEGMENT
??_C@_05DJIBFCN@KB_F2?$AA@ DB 'KB_F2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CILFEGOO@KB_F1?$AA@
CONST	SEGMENT
??_C@_05CILFEGOO@KB_F1?$AA@ DB 'KB_F1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JHCCGBKO@KB_CAPSLOCK?$AA@
CONST	SEGMENT
??_C@_0M@JHCCGBKO@KB_CAPSLOCK?$AA@ DB 'KB_CAPSLOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JFGHCIFG@KB_SPACE?$AA@
CONST	SEGMENT
??_C@_08JFGHCIFG@KB_SPACE?$AA@ DB 'KB_SPACE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NJJKEGLL@KB_LALT?$AA@
CONST	SEGMENT
??_C@_07NJJKEGLL@KB_LALT?$AA@ DB 'KB_LALT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KGLPAALC@KB_NUMPADSTAR?$AA@
CONST	SEGMENT
??_C@_0O@KGLPAALC@KB_NUMPADSTAR?$AA@ DB 'KB_NUMPADSTAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BMECEOOP@KB_RSHIFT?$AA@
CONST	SEGMENT
??_C@_09BMECEOOP@KB_RSHIFT?$AA@ DB 'KB_RSHIFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJPPIPOI@KB_SLASH?$AA@
CONST	SEGMENT
??_C@_08JJPPIPOI@KB_SLASH?$AA@ DB 'KB_SLASH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBBBBILN@KB_PERIOD?$AA@
CONST	SEGMENT
??_C@_09DBBBBILN@KB_PERIOD?$AA@ DB 'KB_PERIOD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FACFHNCI@KB_COMMA?$AA@
CONST	SEGMENT
??_C@_08FACFHNCI@KB_COMMA?$AA@ DB 'KB_COMMA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ENICBGAB@KB_BACKSLASH?$AA@
CONST	SEGMENT
??_C@_0N@ENICBGAB@KB_BACKSLASH?$AA@ DB 'KB_BACKSLASH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CLKDKJHM@KB_LSHIFT?$AA@
CONST	SEGMENT
??_C@_09CLKDKJHM@KB_LSHIFT?$AA@ DB 'KB_LSHIFT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GNANFKCA@KB_GRAVE?$AA@
CONST	SEGMENT
??_C@_08GNANFKCA@KB_GRAVE?$AA@ DB 'KB_GRAVE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDFOBAHH@KB_APOSTROPHE?$AA@
CONST	SEGMENT
??_C@_0O@LDFOBAHH@KB_APOSTROPHE?$AA@ DB 'KB_APOSTROPHE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KPGNPDME@KB_SEMICOLON?$AA@
CONST	SEGMENT
??_C@_0N@KPGNPDME@KB_SEMICOLON?$AA@ DB 'KB_SEMICOLON', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JANIGIMC@KB_LCONTROL?$AA@
CONST	SEGMENT
??_C@_0M@JANIGIMC@KB_LCONTROL?$AA@ DB 'KB_LCONTROL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNBAMMLK@KB_RETURN?$AA@
CONST	SEGMENT
??_C@_09NNBAMMLK@KB_RETURN?$AA@ DB 'KB_RETURN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LPHCPAGM@KB_RBRACKET?$AA@
CONST	SEGMENT
??_C@_0M@LPHCPAGM@KB_RBRACKET?$AA@ DB 'KB_RBRACKET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NLHAGJIP@KB_LBRACKET?$AA@
CONST	SEGMENT
??_C@_0M@NLHAGJIP@KB_LBRACKET?$AA@ DB 'KB_LBRACKET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLDEKAPK@KB_TAB?$AA@
CONST	SEGMENT
??_C@_06CLDEKAPK@KB_TAB?$AA@ DB 'KB_TAB', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EBBKLBLP@KB_BACKSPACE?$AA@
CONST	SEGMENT
??_C@_0N@EBBKLBLP@KB_BACKSPACE?$AA@ DB 'KB_BACKSPACE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OMOBCFGJ@KB_EQUALS?$AA@
CONST	SEGMENT
??_C@_09OMOBCFGJ@KB_EQUALS?$AA@ DB 'KB_EQUALS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHCNFP@KB_Z?$AA@
CONST	SEGMENT
??_C@_04FHCNFP@KB_Z?$AA@ DB 'KB_Z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLHKHOJM@KB_Y?$AA@
CONST	SEGMENT
??_C@_04CLHKHOJM@KB_Y?$AA@ DB 'KB_Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DCGBEPNN@KB_X?$AA@
CONST	SEGMENT
??_C@_04DCGBEPNN@KB_X?$AA@ DB 'KB_X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFPJFDBC@KB_W?$AA@
CONST	SEGMENT
??_C@_04LFPJFDBC@KB_W?$AA@ DB 'KB_W', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KMOCGCFD@KB_V?$AA@
CONST	SEGMENT
??_C@_04KMOCGCFD@KB_V?$AA@ DB 'KB_V', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHMPDBJA@KB_U?$AA@
CONST	SEGMENT
??_C@_04IHMPDBJA@KB_U?$AA@ DB 'KB_U', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JONEAANB@KB_T?$AA@
CONST	SEGMENT
??_C@_04JONEAANB@KB_T?$AA@ DB 'KB_T', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBJFJGBG@KB_S?$AA@
CONST	SEGMENT
??_C@_04NBJFJGBG@KB_S?$AA@ DB 'KB_S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIIOKHFH@KB_R?$AA@
CONST	SEGMENT
??_C@_04MIIOKHFH@KB_R?$AA@ DB 'KB_R', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ODKDPEJE@KB_Q?$AA@
CONST	SEGMENT
??_C@_04ODKDPEJE@KB_Q?$AA@ DB 'KB_Q', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PKLIMFNF@KB_P?$AA@
CONST	SEGMENT
??_C@_04PKLIMFNF@KB_P?$AA@ DB 'KB_P', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DHOCMLEL@KB_O?$AA@
CONST	SEGMENT
??_C@_04DHOCMLEL@KB_O?$AA@ DB 'KB_O', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04COPJPKAK@KB_N?$AA@
CONST	SEGMENT
??_C@_04COPJPKAK@KB_N?$AA@ DB 'KB_N', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNEKJMJ@KB_M?$AA@
CONST	SEGMENT
??_C@_04FNEKJMJ@KB_M?$AA@ DB 'KB_M', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMMPJIII@KB_L?$AA@
CONST	SEGMENT
??_C@_04BMMPJIII@KB_L?$AA@ DB 'KB_L', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDIOAOEP@KB_K?$AA@
CONST	SEGMENT
??_C@_04FDIOAOEP@KB_K?$AA@ DB 'KB_K', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EKJFDPAO@KB_J?$AA@
CONST	SEGMENT
??_C@_04EKJFDPAO@KB_J?$AA@ DB 'KB_J', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBLIGMMN@KB_I?$AA@
CONST	SEGMENT
??_C@_04GBLIGMMN@KB_I?$AA@ DB 'KB_I', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIKDFNIM@KB_H?$AA@
CONST	SEGMENT
??_C@_04HIKDFNIM@KB_H?$AA@ DB 'KB_H', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPDLEBED@KB_G?$AA@
CONST	SEGMENT
??_C@_04PPDLEBED@KB_G?$AA@ DB 'KB_G', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGCAHAAC@KB_F?$AA@
CONST	SEGMENT
??_C@_04OGCAHAAC@KB_F?$AA@ DB 'KB_F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MNANCDMB@KB_E?$AA@
CONST	SEGMENT
??_C@_04MNANCDMB@KB_E?$AA@ DB 'KB_E', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEBGBCIA@KB_D?$AA@
CONST	SEGMENT
??_C@_04NEBGBCIA@KB_D?$AA@ DB 'KB_D', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLFHIEEH@KB_C?$AA@
CONST	SEGMENT
??_C@_04JLFHIEEH@KB_C?$AA@ DB 'KB_C', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ICEMLFAG@KB_B?$AA@
CONST	SEGMENT
??_C@_04ICEMLFAG@KB_B?$AA@ DB 'KB_B', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJGBOGMF@KB_A?$AA@
CONST	SEGMENT
??_C@_04KJGBOGMF@KB_A?$AA@ DB 'KB_A', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JNBLMEAN@KB_MINUS?$AA@
CONST	SEGMENT
??_C@_08JNBLMEAN@KB_MINUS?$AA@ DB 'KB_MINUS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOIHBFDL@KB_9?$AA@
CONST	SEGMENT
??_C@_04EOIHBFDL@KB_9?$AA@ DB 'KB_9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHJMCEHK@KB_8?$AA@
CONST	SEGMENT
??_C@_04FHJMCEHK@KB_8?$AA@ DB 'KB_8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NAAEDILF@KB_7?$AA@
CONST	SEGMENT
??_C@_04NAAEDILF@KB_7?$AA@ DB 'KB_7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MJBPAJPE@KB_6?$AA@
CONST	SEGMENT
??_C@_04MJBPAJPE@KB_6?$AA@ DB 'KB_6', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCDCFKDH@KB_5?$AA@
CONST	SEGMENT
??_C@_04OCDCFKDH@KB_5?$AA@ DB 'KB_5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PLCJGLHG@KB_4?$AA@
CONST	SEGMENT
??_C@_04PLCJGLHG@KB_4?$AA@ DB 'KB_4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LEGIPNLB@KB_3?$AA@
CONST	SEGMENT
??_C@_04LEGIPNLB@KB_3?$AA@ DB 'KB_3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KNHDMMPA@KB_2?$AA@
CONST	SEGMENT
??_C@_04KNHDMMPA@KB_2?$AA@ DB 'KB_2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IGFOJPDD@KB_1?$AA@
CONST	SEGMENT
??_C@_04IGFOJPDD@KB_1?$AA@ DB 'KB_1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JPEFKOHC@KB_0?$AA@
CONST	SEGMENT
??_C@_04JPEFKOHC@KB_0?$AA@ DB 'KB_0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EHCNAJID@KB_ESCAPE?$AA@
CONST	SEGMENT
??_C@_09EHCNAJID@KB_ESCAPE?$AA@ DB 'KB_ESCAPE', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?GetHotKeyInt@CvHotKeyInfo@@IAEHPBD@Z
_TEXT	SEGMENT
tv1576 = -3492						; size = 4
tv3906 = -3488						; size = 4
tv3869 = -3482						; size = 1
tv3862 = -3481						; size = 1
tv3857 = -3480						; size = 4
tv3858 = -3476						; size = 4
_this$ = -3472						; size = 4
_i$217775 = -3468					; size = 4
_asCvKeyBoardMapping$ = -3464				; size = 3456
__$ArrayPad$ = -8					; size = 4
_iNumKeyBoardMappings$ = -4				; size = 4
_pszHotKeyVal$ = 8					; size = 4
?GetHotKeyInt@CvHotKeyInfo@@IAEHPBD@Z PROC		; CvHotKeyInfo::GetHotKeyInt, COMDAT
; _this$ = ecx

; 169  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 3492				; 00000da4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 	// SPEEDUP
; 171  : 	struct CvKeyBoardMapping
; 172  : 	{
; 173  : 		char szDefineString[25];
; 174  : 		int iIntVal;
; 175  : 	};
; 176  : 
; 177  : 
; 178  : 	const int iNumKeyBoardMappings=108;

	mov	DWORD PTR _iNumKeyBoardMappings$[ebp], 108 ; 0000006cH

; 179  : 	const CvKeyBoardMapping asCvKeyBoardMapping[iNumKeyBoardMappings] =
; 180  : 	{
; 181  : 		{"KB_ESCAPE",FKBInputDevice::KB_ESCAPE},

	mov	eax, DWORD PTR ??_C@_09EHCNAJID@KB_ESCAPE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp], eax
	mov	ecx, DWORD PTR ??_C@_09EHCNAJID@KB_ESCAPE?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+4], ecx
	mov	dx, WORD PTR ??_C@_09EHCNAJID@KB_ESCAPE?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+8], dx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+10], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+14], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+18], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+22], ax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+24], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+28], 1

; 182  : 		{"KB_0",FKBInputDevice::KB_0},

	mov	ecx, DWORD PTR ??_C@_04JPEFKOHC@KB_0?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+32], ecx
	mov	dl, BYTE PTR ??_C@_04JPEFKOHC@KB_0?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+36], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+37], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+41], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+45], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+49], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+53], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+60], 2

; 183  : 		{"KB_1",FKBInputDevice::KB_1},

	mov	ecx, DWORD PTR ??_C@_04IGFOJPDD@KB_1?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+64], ecx
	mov	dl, BYTE PTR ??_C@_04IGFOJPDD@KB_1?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+68], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+69], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+73], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+77], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+81], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+85], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+92], 3

; 184  : 		{"KB_2",FKBInputDevice::KB_2},

	mov	ecx, DWORD PTR ??_C@_04KNHDMMPA@KB_2?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+96], ecx
	mov	dl, BYTE PTR ??_C@_04KNHDMMPA@KB_2?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+100], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+101], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+105], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+109], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+113], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+117], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+124], 4

; 185  : 		{"KB_3",FKBInputDevice::KB_3},

	mov	ecx, DWORD PTR ??_C@_04LEGIPNLB@KB_3?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+128], ecx
	mov	dl, BYTE PTR ??_C@_04LEGIPNLB@KB_3?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+132], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+133], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+137], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+141], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+145], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+149], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+156], 5

; 186  : 		{"KB_4",FKBInputDevice::KB_4},

	mov	ecx, DWORD PTR ??_C@_04PLCJGLHG@KB_4?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+160], ecx
	mov	dl, BYTE PTR ??_C@_04PLCJGLHG@KB_4?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+164], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+165], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+169], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+173], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+177], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+181], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+188], 6

; 187  : 		{"KB_5",FKBInputDevice::KB_5},

	mov	ecx, DWORD PTR ??_C@_04OCDCFKDH@KB_5?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+192], ecx
	mov	dl, BYTE PTR ??_C@_04OCDCFKDH@KB_5?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+196], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+197], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+201], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+205], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+209], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+213], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+220], 7

; 188  : 		{"KB_6",FKBInputDevice::KB_6},

	mov	ecx, DWORD PTR ??_C@_04MJBPAJPE@KB_6?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+224], ecx
	mov	dl, BYTE PTR ??_C@_04MJBPAJPE@KB_6?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+228], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+229], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+233], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+237], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+241], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+245], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+252], 8

; 189  : 		{"KB_7",FKBInputDevice::KB_7},

	mov	ecx, DWORD PTR ??_C@_04NAAEDILF@KB_7?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+256], ecx
	mov	dl, BYTE PTR ??_C@_04NAAEDILF@KB_7?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+260], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+261], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+265], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+269], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+273], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+277], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+284], 9

; 190  : 		{"KB_8",FKBInputDevice::KB_8},

	mov	ecx, DWORD PTR ??_C@_04FHJMCEHK@KB_8?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+288], ecx
	mov	dl, BYTE PTR ??_C@_04FHJMCEHK@KB_8?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+292], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+293], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+297], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+301], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+305], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+309], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+316], 10 ; 0000000aH

; 191  : 		{"KB_9",FKBInputDevice::KB_9},

	mov	ecx, DWORD PTR ??_C@_04EOIHBFDL@KB_9?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+320], ecx
	mov	dl, BYTE PTR ??_C@_04EOIHBFDL@KB_9?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+324], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+325], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+329], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+333], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+337], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+341], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+348], 11 ; 0000000bH

; 192  : 		{"KB_MINUS",FKBInputDevice::KB_MINUS},	    /* - on main keyboard */

	mov	ecx, DWORD PTR ??_C@_08JNBLMEAN@KB_MINUS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+352], ecx
	mov	edx, DWORD PTR ??_C@_08JNBLMEAN@KB_MINUS?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+356], edx
	mov	al, BYTE PTR ??_C@_08JNBLMEAN@KB_MINUS?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+360], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+361], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+365], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+369], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+373], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+380], 12 ; 0000000cH

; 193  : 		{"KB_A",FKBInputDevice::KB_A},

	mov	edx, DWORD PTR ??_C@_04KJGBOGMF@KB_A?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+384], edx
	mov	al, BYTE PTR ??_C@_04KJGBOGMF@KB_A?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+388], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+389], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+393], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+397], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+401], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+405], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+412], 13 ; 0000000dH

; 194  : 		{"KB_B",FKBInputDevice::KB_B},

	mov	edx, DWORD PTR ??_C@_04ICEMLFAG@KB_B?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+416], edx
	mov	al, BYTE PTR ??_C@_04ICEMLFAG@KB_B?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+420], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+421], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+425], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+429], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+433], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+437], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+444], 14 ; 0000000eH

; 195  : 		{"KB_C",FKBInputDevice::KB_C},

	mov	edx, DWORD PTR ??_C@_04JLFHIEEH@KB_C?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+448], edx
	mov	al, BYTE PTR ??_C@_04JLFHIEEH@KB_C?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+452], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+453], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+457], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+461], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+465], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+469], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+476], 15 ; 0000000fH

; 196  : 		{"KB_D",FKBInputDevice::KB_D},

	mov	edx, DWORD PTR ??_C@_04NEBGBCIA@KB_D?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+480], edx
	mov	al, BYTE PTR ??_C@_04NEBGBCIA@KB_D?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+484], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+485], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+489], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+493], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+497], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+501], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+508], 16 ; 00000010H

; 197  : 		{"KB_E",FKBInputDevice::KB_E},

	mov	edx, DWORD PTR ??_C@_04MNANCDMB@KB_E?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+512], edx
	mov	al, BYTE PTR ??_C@_04MNANCDMB@KB_E?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+516], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+517], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+521], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+525], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+529], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+533], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+540], 17 ; 00000011H

; 198  : 		{"KB_F",FKBInputDevice::KB_F},

	mov	edx, DWORD PTR ??_C@_04OGCAHAAC@KB_F?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+544], edx
	mov	al, BYTE PTR ??_C@_04OGCAHAAC@KB_F?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+548], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+549], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+553], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+557], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+561], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+565], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+572], 18 ; 00000012H

; 199  : 		{"KB_G",FKBInputDevice::KB_G},

	mov	edx, DWORD PTR ??_C@_04PPDLEBED@KB_G?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+576], edx
	mov	al, BYTE PTR ??_C@_04PPDLEBED@KB_G?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+580], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+581], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+585], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+589], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+593], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+597], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+604], 19 ; 00000013H

; 200  : 		{"KB_H",FKBInputDevice::KB_H},

	mov	edx, DWORD PTR ??_C@_04HIKDFNIM@KB_H?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+608], edx
	mov	al, BYTE PTR ??_C@_04HIKDFNIM@KB_H?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+612], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+613], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+617], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+621], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+625], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+629], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+636], 20 ; 00000014H

; 201  : 		{"KB_I",FKBInputDevice::KB_I},

	mov	edx, DWORD PTR ??_C@_04GBLIGMMN@KB_I?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+640], edx
	mov	al, BYTE PTR ??_C@_04GBLIGMMN@KB_I?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+644], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+645], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+649], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+653], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+657], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+661], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+668], 21 ; 00000015H

; 202  : 		{"KB_J",FKBInputDevice::KB_J},

	mov	edx, DWORD PTR ??_C@_04EKJFDPAO@KB_J?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+672], edx
	mov	al, BYTE PTR ??_C@_04EKJFDPAO@KB_J?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+676], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+677], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+681], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+685], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+689], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+693], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+700], 22 ; 00000016H

; 203  : 		{"KB_K",FKBInputDevice::KB_K},

	mov	edx, DWORD PTR ??_C@_04FDIOAOEP@KB_K?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+704], edx
	mov	al, BYTE PTR ??_C@_04FDIOAOEP@KB_K?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+708], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+709], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+713], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+717], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+721], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+725], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+732], 23 ; 00000017H

; 204  : 		{"KB_L",FKBInputDevice::KB_L},

	mov	edx, DWORD PTR ??_C@_04BMMPJIII@KB_L?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+736], edx
	mov	al, BYTE PTR ??_C@_04BMMPJIII@KB_L?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+740], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+741], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+745], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+749], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+753], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+757], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+764], 24 ; 00000018H

; 205  : 		{"KB_M",FKBInputDevice::KB_M},

	mov	edx, DWORD PTR ??_C@_04FNEKJMJ@KB_M?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+768], edx
	mov	al, BYTE PTR ??_C@_04FNEKJMJ@KB_M?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+772], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+773], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+777], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+781], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+785], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+789], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+796], 25 ; 00000019H

; 206  : 		{"KB_N",FKBInputDevice::KB_N},

	mov	edx, DWORD PTR ??_C@_04COPJPKAK@KB_N?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+800], edx
	mov	al, BYTE PTR ??_C@_04COPJPKAK@KB_N?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+804], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+805], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+809], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+813], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+817], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+821], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+828], 26 ; 0000001aH

; 207  : 		{"KB_O",FKBInputDevice::KB_O},

	mov	edx, DWORD PTR ??_C@_04DHOCMLEL@KB_O?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+832], edx
	mov	al, BYTE PTR ??_C@_04DHOCMLEL@KB_O?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+836], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+837], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+841], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+845], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+849], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+853], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+860], 27 ; 0000001bH

; 208  : 		{"KB_P",FKBInputDevice::KB_P},

	mov	edx, DWORD PTR ??_C@_04PKLIMFNF@KB_P?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+864], edx
	mov	al, BYTE PTR ??_C@_04PKLIMFNF@KB_P?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+868], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+869], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+873], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+877], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+881], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+885], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+892], 28 ; 0000001cH

; 209  : 		{"KB_Q",FKBInputDevice::KB_Q},

	mov	edx, DWORD PTR ??_C@_04ODKDPEJE@KB_Q?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+896], edx
	mov	al, BYTE PTR ??_C@_04ODKDPEJE@KB_Q?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+900], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+901], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+905], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+909], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+913], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+917], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+924], 29 ; 0000001dH

; 210  : 		{"KB_R",FKBInputDevice::KB_R},

	mov	edx, DWORD PTR ??_C@_04MIIOKHFH@KB_R?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+928], edx
	mov	al, BYTE PTR ??_C@_04MIIOKHFH@KB_R?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+932], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+933], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+937], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+941], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+945], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+949], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+956], 30 ; 0000001eH

; 211  : 		{"KB_S",FKBInputDevice::KB_S},

	mov	edx, DWORD PTR ??_C@_04NBJFJGBG@KB_S?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+960], edx
	mov	al, BYTE PTR ??_C@_04NBJFJGBG@KB_S?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+964], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+965], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+969], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+973], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+977], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+981], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+988], 31 ; 0000001fH

; 212  : 		{"KB_T",FKBInputDevice::KB_T},

	mov	edx, DWORD PTR ??_C@_04JONEAANB@KB_T?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+992], edx
	mov	al, BYTE PTR ??_C@_04JONEAANB@KB_T?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+996], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+997], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1001], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1005], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1009], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1013], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1020], 32 ; 00000020H

; 213  : 		{"KB_U",FKBInputDevice::KB_U},

	mov	edx, DWORD PTR ??_C@_04IHMPDBJA@KB_U?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1024], edx
	mov	al, BYTE PTR ??_C@_04IHMPDBJA@KB_U?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1028], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1029], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1033], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1037], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1041], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1045], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1052], 33 ; 00000021H

; 214  : 		{"KB_V",FKBInputDevice::KB_V},

	mov	edx, DWORD PTR ??_C@_04KMOCGCFD@KB_V?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1056], edx
	mov	al, BYTE PTR ??_C@_04KMOCGCFD@KB_V?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1060], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1061], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1065], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1069], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1073], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1077], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1084], 34 ; 00000022H

; 215  : 		{"KB_W",FKBInputDevice::KB_W},

	mov	edx, DWORD PTR ??_C@_04LFPJFDBC@KB_W?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1088], edx
	mov	al, BYTE PTR ??_C@_04LFPJFDBC@KB_W?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1092], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1093], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1097], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1101], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1105], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1109], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1116], 35 ; 00000023H

; 216  : 		{"KB_X",FKBInputDevice::KB_X},

	mov	edx, DWORD PTR ??_C@_04DCGBEPNN@KB_X?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1120], edx
	mov	al, BYTE PTR ??_C@_04DCGBEPNN@KB_X?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1124], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1125], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1129], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1133], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1137], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1141], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1148], 36 ; 00000024H

; 217  : 		{"KB_Y",FKBInputDevice::KB_Y},

	mov	edx, DWORD PTR ??_C@_04CLHKHOJM@KB_Y?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1152], edx
	mov	al, BYTE PTR ??_C@_04CLHKHOJM@KB_Y?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1156], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1157], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1161], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1165], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1169], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1173], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1180], 37 ; 00000025H

; 218  : 		{"KB_Z",FKBInputDevice::KB_Z},

	mov	edx, DWORD PTR ??_C@_04FHCNFP@KB_Z?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1184], edx
	mov	al, BYTE PTR ??_C@_04FHCNFP@KB_Z?$AA@+4
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1188], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1189], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1193], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1197], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1201], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1205], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1212], 38 ; 00000026H

; 219  : 		{"KB_EQUALS",FKBInputDevice::KB_EQUALS},

	mov	edx, DWORD PTR ??_C@_09OMOBCFGJ@KB_EQUALS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1216], edx
	mov	eax, DWORD PTR ??_C@_09OMOBCFGJ@KB_EQUALS?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1220], eax
	mov	cx, WORD PTR ??_C@_09OMOBCFGJ@KB_EQUALS?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1224], cx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1226], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1230], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1234], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1238], dx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1240], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1244], 39 ; 00000027H

; 220  : 		{"KB_BACKSPACE",FKBInputDevice::KB_BACKSPACE},

	mov	eax, DWORD PTR ??_C@_0N@EBBKLBLP@KB_BACKSPACE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1248], eax
	mov	ecx, DWORD PTR ??_C@_0N@EBBKLBLP@KB_BACKSPACE?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1252], ecx
	mov	edx, DWORD PTR ??_C@_0N@EBBKLBLP@KB_BACKSPACE?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1256], edx
	mov	al, BYTE PTR ??_C@_0N@EBBKLBLP@KB_BACKSPACE?$AA@+12
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1260], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1261], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1265], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1269], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1276], 40 ; 00000028H

; 221  : 		{"KB_TAB",FKBInputDevice::KB_TAB},

	mov	edx, DWORD PTR ??_C@_06CLDEKAPK@KB_TAB?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1280], edx
	mov	ax, WORD PTR ??_C@_06CLDEKAPK@KB_TAB?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1284], ax
	mov	cl, BYTE PTR ??_C@_06CLDEKAPK@KB_TAB?$AA@+6
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1286], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1287], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1291], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1295], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1299], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1303], dx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1308], 41 ; 00000029H

; 222  : 		{"KB_LBRACKET",FKBInputDevice::KB_LBRACKET},

	mov	eax, DWORD PTR ??_C@_0M@NLHAGJIP@KB_LBRACKET?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1312], eax
	mov	ecx, DWORD PTR ??_C@_0M@NLHAGJIP@KB_LBRACKET?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1316], ecx
	mov	edx, DWORD PTR ??_C@_0M@NLHAGJIP@KB_LBRACKET?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1320], edx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1324], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1328], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1332], eax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1336], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1340], 42 ; 0000002aH

; 223  : 		{"KB_RBRACKET",FKBInputDevice::KB_RBRACKET},

	mov	ecx, DWORD PTR ??_C@_0M@LPHCPAGM@KB_RBRACKET?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1344], ecx
	mov	edx, DWORD PTR ??_C@_0M@LPHCPAGM@KB_RBRACKET?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1348], edx
	mov	eax, DWORD PTR ??_C@_0M@LPHCPAGM@KB_RBRACKET?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1352], eax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1356], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1360], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1364], ecx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1368], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1372], 43 ; 0000002bH

; 224  : 		{"KB_RETURN",FKBInputDevice::KB_RETURN},		/* Enter on main keyboard */

	mov	edx, DWORD PTR ??_C@_09NNBAMMLK@KB_RETURN?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1376], edx
	mov	eax, DWORD PTR ??_C@_09NNBAMMLK@KB_RETURN?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1380], eax
	mov	cx, WORD PTR ??_C@_09NNBAMMLK@KB_RETURN?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1384], cx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1386], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1390], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1394], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1398], dx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1400], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1404], 44 ; 0000002cH

; 225  : 		{"KB_LCONTROL",FKBInputDevice::KB_LCONTROL},

	mov	eax, DWORD PTR ??_C@_0M@JANIGIMC@KB_LCONTROL?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1408], eax
	mov	ecx, DWORD PTR ??_C@_0M@JANIGIMC@KB_LCONTROL?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1412], ecx
	mov	edx, DWORD PTR ??_C@_0M@JANIGIMC@KB_LCONTROL?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1416], edx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1420], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1424], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1428], eax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1432], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1436], 45 ; 0000002dH

; 226  : 		{"KB_SEMICOLON",FKBInputDevice::KB_SEMICOLON},

	mov	ecx, DWORD PTR ??_C@_0N@KPGNPDME@KB_SEMICOLON?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1440], ecx
	mov	edx, DWORD PTR ??_C@_0N@KPGNPDME@KB_SEMICOLON?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1444], edx
	mov	eax, DWORD PTR ??_C@_0N@KPGNPDME@KB_SEMICOLON?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1448], eax
	mov	cl, BYTE PTR ??_C@_0N@KPGNPDME@KB_SEMICOLON?$AA@+12
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1452], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1453], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1457], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1461], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1468], 46 ; 0000002eH

; 227  : 		{"KB_APOSTROPHE",FKBInputDevice::KB_APOSTROPHE},

	mov	eax, DWORD PTR ??_C@_0O@LDFOBAHH@KB_APOSTROPHE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1472], eax
	mov	ecx, DWORD PTR ??_C@_0O@LDFOBAHH@KB_APOSTROPHE?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1476], ecx
	mov	edx, DWORD PTR ??_C@_0O@LDFOBAHH@KB_APOSTROPHE?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1480], edx
	mov	ax, WORD PTR ??_C@_0O@LDFOBAHH@KB_APOSTROPHE?$AA@+12
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1484], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1486], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1490], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1494], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1496], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1500], 47 ; 0000002fH

; 228  : 		{"KB_GRAVE",FKBInputDevice::KB_GRAVE},		/* accent grave */

	mov	edx, DWORD PTR ??_C@_08GNANFKCA@KB_GRAVE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1504], edx
	mov	eax, DWORD PTR ??_C@_08GNANFKCA@KB_GRAVE?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1508], eax
	mov	cl, BYTE PTR ??_C@_08GNANFKCA@KB_GRAVE?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1512], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1513], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1517], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1521], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1525], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1532], 48 ; 00000030H

; 229  : 		{"KB_LSHIFT",FKBInputDevice::KB_LSHIFT},

	mov	eax, DWORD PTR ??_C@_09CLKDKJHM@KB_LSHIFT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1536], eax
	mov	ecx, DWORD PTR ??_C@_09CLKDKJHM@KB_LSHIFT?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1540], ecx
	mov	dx, WORD PTR ??_C@_09CLKDKJHM@KB_LSHIFT?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1544], dx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1546], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1550], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1554], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1558], ax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1560], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1564], 49 ; 00000031H

; 230  : 		{"KB_BACKSLASH",FKBInputDevice::KB_BACKSLASH},

	mov	ecx, DWORD PTR ??_C@_0N@ENICBGAB@KB_BACKSLASH?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1568], ecx
	mov	edx, DWORD PTR ??_C@_0N@ENICBGAB@KB_BACKSLASH?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1572], edx
	mov	eax, DWORD PTR ??_C@_0N@ENICBGAB@KB_BACKSLASH?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1576], eax
	mov	cl, BYTE PTR ??_C@_0N@ENICBGAB@KB_BACKSLASH?$AA@+12
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1580], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1581], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1585], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1589], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1596], 50 ; 00000032H

; 231  : 		{"KB_COMMA",FKBInputDevice::KB_COMMA},

	mov	eax, DWORD PTR ??_C@_08FACFHNCI@KB_COMMA?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1600], eax
	mov	ecx, DWORD PTR ??_C@_08FACFHNCI@KB_COMMA?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1604], ecx
	mov	dl, BYTE PTR ??_C@_08FACFHNCI@KB_COMMA?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1608], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1609], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1613], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1617], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1621], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1628], 51 ; 00000033H

; 232  : 		{"KB_PERIOD",FKBInputDevice::KB_PERIOD},

	mov	ecx, DWORD PTR ??_C@_09DBBBBILN@KB_PERIOD?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1632], ecx
	mov	edx, DWORD PTR ??_C@_09DBBBBILN@KB_PERIOD?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1636], edx
	mov	ax, WORD PTR ??_C@_09DBBBBILN@KB_PERIOD?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1640], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1642], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1646], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1650], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1654], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1656], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1660], 52 ; 00000034H

; 233  : 		{"KB_SLASH",FKBInputDevice::KB_SLASH},

	mov	edx, DWORD PTR ??_C@_08JJPPIPOI@KB_SLASH?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1664], edx
	mov	eax, DWORD PTR ??_C@_08JJPPIPOI@KB_SLASH?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1668], eax
	mov	cl, BYTE PTR ??_C@_08JJPPIPOI@KB_SLASH?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1672], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1673], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1677], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1681], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1685], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1692], 53 ; 00000035H

; 234  : 		{"KB_RSHIFT",FKBInputDevice::KB_RSHIFT},

	mov	eax, DWORD PTR ??_C@_09BMECEOOP@KB_RSHIFT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1696], eax
	mov	ecx, DWORD PTR ??_C@_09BMECEOOP@KB_RSHIFT?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1700], ecx
	mov	dx, WORD PTR ??_C@_09BMECEOOP@KB_RSHIFT?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1704], dx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1706], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1710], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1714], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1718], ax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1720], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1724], 54 ; 00000036H

; 235  : 		{"KB_NUMPADSTAR",FKBInputDevice::KB_NUMPADSTAR},

	mov	ecx, DWORD PTR ??_C@_0O@KGLPAALC@KB_NUMPADSTAR?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1728], ecx
	mov	edx, DWORD PTR ??_C@_0O@KGLPAALC@KB_NUMPADSTAR?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1732], edx
	mov	eax, DWORD PTR ??_C@_0O@KGLPAALC@KB_NUMPADSTAR?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1736], eax
	mov	cx, WORD PTR ??_C@_0O@KGLPAALC@KB_NUMPADSTAR?$AA@+12
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1740], cx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1742], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1746], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1750], dx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1752], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1756], 55 ; 00000037H

; 236  : 		{"KB_LALT",FKBInputDevice::KB_LALT},

	mov	eax, DWORD PTR ??_C@_07NJJKEGLL@KB_LALT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1760], eax
	mov	ecx, DWORD PTR ??_C@_07NJJKEGLL@KB_LALT?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1764], ecx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1768], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1772], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1776], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1780], edx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1784], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1788], 56 ; 00000038H

; 237  : 		{"KB_SPACE",FKBInputDevice::KB_SPACE},

	mov	eax, DWORD PTR ??_C@_08JFGHCIFG@KB_SPACE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1792], eax
	mov	ecx, DWORD PTR ??_C@_08JFGHCIFG@KB_SPACE?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1796], ecx
	mov	dl, BYTE PTR ??_C@_08JFGHCIFG@KB_SPACE?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1800], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1801], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1805], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1809], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1813], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1820], 57 ; 00000039H

; 238  : 		{"KB_CAPSLOCK",FKBInputDevice::KB_CAPSLOCK},

	mov	ecx, DWORD PTR ??_C@_0M@JHCCGBKO@KB_CAPSLOCK?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1824], ecx
	mov	edx, DWORD PTR ??_C@_0M@JHCCGBKO@KB_CAPSLOCK?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1828], edx
	mov	eax, DWORD PTR ??_C@_0M@JHCCGBKO@KB_CAPSLOCK?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1832], eax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1836], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1840], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1844], ecx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1848], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1852], 58 ; 0000003aH

; 239  : 		{"KB_F1",FKBInputDevice::KB_F1},

	mov	edx, DWORD PTR ??_C@_05CILFEGOO@KB_F1?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1856], edx
	mov	ax, WORD PTR ??_C@_05CILFEGOO@KB_F1?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1860], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1862], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1866], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1870], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1874], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1878], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1880], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1884], 59 ; 0000003bH

; 240  : 		{"KB_F2",FKBInputDevice::KB_F2},

	mov	edx, DWORD PTR ??_C@_05DJIBFCN@KB_F2?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1888], edx
	mov	ax, WORD PTR ??_C@_05DJIBFCN@KB_F2?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1892], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1894], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1898], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1902], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1906], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1910], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1912], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1916], 60 ; 0000003cH

; 241  : 		{"KB_F3",FKBInputDevice::KB_F3},

	mov	edx, DWORD PTR ??_C@_05BKIDCEGM@KB_F3?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1920], edx
	mov	ax, WORD PTR ??_C@_05BKIDCEGM@KB_F3?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1924], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1926], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1930], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1934], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1938], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1942], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1944], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1948], 61 ; 0000003dH

; 242  : 		{"KB_F4",FKBInputDevice::KB_F4},

	mov	edx, DWORD PTR ??_C@_05FFMCLCKL@KB_F4?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1952], edx
	mov	ax, WORD PTR ??_C@_05FFMCLCKL@KB_F4?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1956], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1958], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1962], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1966], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1970], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1974], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1976], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1980], 62 ; 0000003eH

; 243  : 		{"KB_F5",FKBInputDevice::KB_F5},

	mov	edx, DWORD PTR ??_C@_05EMNJIDOK@KB_F5?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1984], edx
	mov	ax, WORD PTR ??_C@_05EMNJIDOK@KB_F5?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+1988], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1990], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1994], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1998], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2002], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2006], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2008], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2012], 63 ; 0000003fH

; 244  : 		{"KB_F6",FKBInputDevice::KB_F6},

	mov	edx, DWORD PTR ??_C@_05GHPENACJ@KB_F6?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2016], edx
	mov	ax, WORD PTR ??_C@_05GHPENACJ@KB_F6?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2020], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2022], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2026], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2030], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2034], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2038], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2040], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2044], 64 ; 00000040H

; 245  : 		{"KB_F7",FKBInputDevice::KB_F7},

	mov	edx, DWORD PTR ??_C@_05HOOPOBGI@KB_F7?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2048], edx
	mov	ax, WORD PTR ??_C@_05HOOPOBGI@KB_F7?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2052], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2054], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2058], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2062], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2066], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2070], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2072], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2076], 65 ; 00000041H

; 246  : 		{"KB_F8",FKBInputDevice::KB_F8},

	mov	edx, DWORD PTR ??_C@_05PJHHPNKH@KB_F8?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2080], edx
	mov	ax, WORD PTR ??_C@_05PJHHPNKH@KB_F8?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2084], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2086], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2090], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2094], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2098], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2102], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2104], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2108], 66 ; 00000042H

; 247  : 		{"KB_F9",FKBInputDevice::KB_F9},

	mov	edx, DWORD PTR ??_C@_05OAGMMMOG@KB_F9?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2112], edx
	mov	ax, WORD PTR ??_C@_05OAGMMMOG@KB_F9?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2116], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2118], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2122], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2126], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2130], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2134], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2136], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2140], 67 ; 00000043H

; 248  : 		{"KB_F10",FKBInputDevice::KB_F10},

	mov	edx, DWORD PTR ??_C@_06JINMEMMK@KB_F10?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2144], edx
	mov	ax, WORD PTR ??_C@_06JINMEMMK@KB_F10?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2148], ax
	mov	cl, BYTE PTR ??_C@_06JINMEMMK@KB_F10?$AA@+6
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2150], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2151], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2155], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2159], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2163], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2167], dx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2172], 68 ; 00000044H

; 249  : 		{"KB_NUMLOCK",FKBInputDevice::KB_NUMLOCK},

	mov	eax, DWORD PTR ??_C@_0L@JHKMNOIL@KB_NUMLOCK?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2176], eax
	mov	ecx, DWORD PTR ??_C@_0L@JHKMNOIL@KB_NUMLOCK?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2180], ecx
	mov	dx, WORD PTR ??_C@_0L@JHKMNOIL@KB_NUMLOCK?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2184], dx
	mov	al, BYTE PTR ??_C@_0L@JHKMNOIL@KB_NUMLOCK?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2186], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2187], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2191], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2195], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2199], cx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2204], 71 ; 00000047H

; 250  : 		{"KB_SCROLL",FKBInputDevice::KB_SCROLL},

	mov	edx, DWORD PTR ??_C@_09DJFEIKLA@KB_SCROLL?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2208], edx
	mov	eax, DWORD PTR ??_C@_09DJFEIKLA@KB_SCROLL?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2212], eax
	mov	cx, WORD PTR ??_C@_09DJFEIKLA@KB_SCROLL?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2216], cx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2218], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2222], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2226], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2230], dx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2232], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2236], 72 ; 00000048H

; 251  : 		{"KB_NUMPAD7",FKBInputDevice::KB_NUMPAD7},

	mov	eax, DWORD PTR ??_C@_0L@FEKGPDEE@KB_NUMPAD7?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2240], eax
	mov	ecx, DWORD PTR ??_C@_0L@FEKGPDEE@KB_NUMPAD7?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2244], ecx
	mov	dx, WORD PTR ??_C@_0L@FEKGPDEE@KB_NUMPAD7?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2248], dx
	mov	al, BYTE PTR ??_C@_0L@FEKGPDEE@KB_NUMPAD7?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2250], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2251], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2255], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2259], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2263], cx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2268], 80 ; 00000050H

; 252  : 		{"KB_NUMPAD8",FKBInputDevice::KB_NUMPAD8},

	mov	edx, DWORD PTR ??_C@_0L@NDDOOPIL@KB_NUMPAD8?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2272], edx
	mov	eax, DWORD PTR ??_C@_0L@NDDOOPIL@KB_NUMPAD8?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2276], eax
	mov	cx, WORD PTR ??_C@_0L@NDDOOPIL@KB_NUMPAD8?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2280], cx
	mov	dl, BYTE PTR ??_C@_0L@NDDOOPIL@KB_NUMPAD8?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2282], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2283], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2287], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2291], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2295], ax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2300], 81 ; 00000051H

; 253  : 		{"KB_NUMPAD9",FKBInputDevice::KB_NUMPAD9},

	mov	ecx, DWORD PTR ??_C@_0L@MKCFNOMK@KB_NUMPAD9?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2304], ecx
	mov	edx, DWORD PTR ??_C@_0L@MKCFNOMK@KB_NUMPAD9?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2308], edx
	mov	ax, WORD PTR ??_C@_0L@MKCFNOMK@KB_NUMPAD9?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2312], ax
	mov	cl, BYTE PTR ??_C@_0L@MKCFNOMK@KB_NUMPAD9?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2314], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2315], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2319], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2323], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2327], dx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2332], 82 ; 00000052H

; 254  : 		{"KB_NUMPADMINUS",FKBInputDevice::KB_NUMPADMINUS},

	mov	eax, DWORD PTR ??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2336], eax
	mov	ecx, DWORD PTR ??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2340], ecx
	mov	edx, DWORD PTR ??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2344], edx
	mov	ax, WORD PTR ??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@+12
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2348], ax
	mov	cl, BYTE PTR ??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@+14
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2350], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2351], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2355], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2359], dx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2364], 83 ; 00000053H

; 255  : 		{"KB_NUMPAD4",FKBInputDevice::KB_NUMPAD4},

	mov	eax, DWORD PTR ??_C@_0L@HPILKAIH@KB_NUMPAD4?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2368], eax
	mov	ecx, DWORD PTR ??_C@_0L@HPILKAIH@KB_NUMPAD4?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2372], ecx
	mov	dx, WORD PTR ??_C@_0L@HPILKAIH@KB_NUMPAD4?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2376], dx
	mov	al, BYTE PTR ??_C@_0L@HPILKAIH@KB_NUMPAD4?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2378], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2379], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2383], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2387], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2391], cx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2396], 77 ; 0000004dH

; 256  : 		{"KB_NUMPAD5",FKBInputDevice::KB_NUMPAD5},

	mov	edx, DWORD PTR ??_C@_0L@GGJAJBMG@KB_NUMPAD5?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2400], edx
	mov	eax, DWORD PTR ??_C@_0L@GGJAJBMG@KB_NUMPAD5?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2404], eax
	mov	cx, WORD PTR ??_C@_0L@GGJAJBMG@KB_NUMPAD5?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2408], cx
	mov	dl, BYTE PTR ??_C@_0L@GGJAJBMG@KB_NUMPAD5?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2410], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2411], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2415], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2419], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2423], ax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2428], 78 ; 0000004eH

; 257  : 		{"KB_NUMPAD6",FKBInputDevice::KB_NUMPAD6},

	mov	ecx, DWORD PTR ??_C@_0L@ENLNMCAF@KB_NUMPAD6?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2432], ecx
	mov	edx, DWORD PTR ??_C@_0L@ENLNMCAF@KB_NUMPAD6?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2436], edx
	mov	ax, WORD PTR ??_C@_0L@ENLNMCAF@KB_NUMPAD6?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2440], ax
	mov	cl, BYTE PTR ??_C@_0L@ENLNMCAF@KB_NUMPAD6?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2442], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2443], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2447], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2451], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2455], dx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2460], 79 ; 0000004fH

; 258  : 		{"KB_NUMPADPLUS",FKBInputDevice::KB_NUMPADPLUS},

	mov	eax, DWORD PTR ??_C@_0O@HGIGDPPP@KB_NUMPADPLUS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2464], eax
	mov	ecx, DWORD PTR ??_C@_0O@HGIGDPPP@KB_NUMPADPLUS?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2468], ecx
	mov	edx, DWORD PTR ??_C@_0O@HGIGDPPP@KB_NUMPADPLUS?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2472], edx
	mov	ax, WORD PTR ??_C@_0O@HGIGDPPP@KB_NUMPADPLUS?$AA@+12
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2476], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2478], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2482], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2486], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2488], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2492], 84 ; 00000054H

; 259  : 		{"KB_NUMPAD1",FKBInputDevice::KB_NUMPAD1},

	mov	edx, DWORD PTR ??_C@_0L@CPMFEMC@KB_NUMPAD1?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2496], edx
	mov	eax, DWORD PTR ??_C@_0L@CPMFEMC@KB_NUMPAD1?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2500], eax
	mov	cx, WORD PTR ??_C@_0L@CPMFEMC@KB_NUMPAD1?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2504], cx
	mov	dl, BYTE PTR ??_C@_0L@CPMFEMC@KB_NUMPAD1?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2506], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2507], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2511], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2515], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2519], ax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2524], 74 ; 0000004aH

; 260  : 		{"KB_NUMPAD2",FKBInputDevice::KB_NUMPAD2},

	mov	ecx, DWORD PTR ??_C@_0L@CJNBAHAB@KB_NUMPAD2?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2528], ecx
	mov	edx, DWORD PTR ??_C@_0L@CJNBAHAB@KB_NUMPAD2?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2532], edx
	mov	ax, WORD PTR ??_C@_0L@CJNBAHAB@KB_NUMPAD2?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2536], ax
	mov	cl, BYTE PTR ??_C@_0L@CJNBAHAB@KB_NUMPAD2?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2538], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2539], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2543], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2547], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2551], dx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2556], 75 ; 0000004bH

; 261  : 		{"KB_NUMPAD3",FKBInputDevice::KB_NUMPAD3},

	mov	eax, DWORD PTR ??_C@_0L@DAMKDGEA@KB_NUMPAD3?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2560], eax
	mov	ecx, DWORD PTR ??_C@_0L@DAMKDGEA@KB_NUMPAD3?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2564], ecx
	mov	dx, WORD PTR ??_C@_0L@DAMKDGEA@KB_NUMPAD3?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2568], dx
	mov	al, BYTE PTR ??_C@_0L@DAMKDGEA@KB_NUMPAD3?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2570], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2571], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2575], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2579], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2583], cx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2588], 76 ; 0000004cH

; 262  : 		{"KB_NUMPAD0",FKBInputDevice::KB_NUMPAD0},

	mov	edx, DWORD PTR ??_C@_0L@BLOHGFID@KB_NUMPAD0?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2592], edx
	mov	eax, DWORD PTR ??_C@_0L@BLOHGFID@KB_NUMPAD0?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2596], eax
	mov	cx, WORD PTR ??_C@_0L@BLOHGFID@KB_NUMPAD0?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2600], cx
	mov	dl, BYTE PTR ??_C@_0L@BLOHGFID@KB_NUMPAD0?$AA@+10
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2602], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2603], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2607], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2611], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2615], ax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2620], 73 ; 00000049H

; 263  : 		{"KB_NUMPADPERIOD",FKBInputDevice::KB_NUMPADPERIOD},

	mov	ecx, DWORD PTR ??_C@_0BA@GABKNMBG@KB_NUMPADPERIOD?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2624], ecx
	mov	edx, DWORD PTR ??_C@_0BA@GABKNMBG@KB_NUMPADPERIOD?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2628], edx
	mov	eax, DWORD PTR ??_C@_0BA@GABKNMBG@KB_NUMPADPERIOD?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2632], eax
	mov	ecx, DWORD PTR ??_C@_0BA@GABKNMBG@KB_NUMPADPERIOD?$AA@+12
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2636], ecx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2640], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2644], edx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2648], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2652], 85 ; 00000055H

; 264  : 		{"KB_F11",FKBInputDevice::KB_F11},

	mov	eax, DWORD PTR ??_C@_06IBMHHNIL@KB_F11?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2656], eax
	mov	cx, WORD PTR ??_C@_06IBMHHNIL@KB_F11?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2660], cx
	mov	dl, BYTE PTR ??_C@_06IBMHHNIL@KB_F11?$AA@+6
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2662], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2663], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2667], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2671], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2675], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2679], ax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2684], 69 ; 00000045H

; 265  : 		{"KB_F12",FKBInputDevice::KB_F12},

	mov	ecx, DWORD PTR ??_C@_06KKOKCOEI@KB_F12?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2688], ecx
	mov	dx, WORD PTR ??_C@_06KKOKCOEI@KB_F12?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2692], dx
	mov	al, BYTE PTR ??_C@_06KKOKCOEI@KB_F12?$AA@+6
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2694], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2695], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2699], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2703], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2707], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2711], cx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2716], 70 ; 00000046H

; 266  : 		{"KB_NUMPADEQUALS",FKBInputDevice::KB_NUMPADEQUALS},

	mov	edx, DWORD PTR ??_C@_0BA@LNOKOBMC@KB_NUMPADEQUALS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2720], edx
	mov	eax, DWORD PTR ??_C@_0BA@LNOKOBMC@KB_NUMPADEQUALS?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2724], eax
	mov	ecx, DWORD PTR ??_C@_0BA@LNOKOBMC@KB_NUMPADEQUALS?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2728], ecx
	mov	edx, DWORD PTR ??_C@_0BA@LNOKOBMC@KB_NUMPADEQUALS?$AA@+12
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2732], edx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2736], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2740], eax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2744], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2748], 86 ; 00000056H

; 267  : 		{"KB_AT",FKBInputDevice::KB_AT},

	mov	ecx, DWORD PTR ??_C@_05DFHAMPIJ@KB_AT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2752], ecx
	mov	dx, WORD PTR ??_C@_05DFHAMPIJ@KB_AT?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2756], dx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2758], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2762], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2766], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2770], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2774], ax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2776], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2780], 87 ; 00000057H

; 268  : 		{"KB_UNDERLINE",FKBInputDevice::KB_UNDERLINE},

	mov	ecx, DWORD PTR ??_C@_0N@KCALIECB@KB_UNDERLINE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2784], ecx
	mov	edx, DWORD PTR ??_C@_0N@KCALIECB@KB_UNDERLINE?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2788], edx
	mov	eax, DWORD PTR ??_C@_0N@KCALIECB@KB_UNDERLINE?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2792], eax
	mov	cl, BYTE PTR ??_C@_0N@KCALIECB@KB_UNDERLINE?$AA@+12
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2796], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2797], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2801], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2805], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2812], 88 ; 00000058H

; 269  : 		{"KB_COLON",FKBInputDevice::KB_COLON},

	mov	eax, DWORD PTR ??_C@_08GMIFNCOM@KB_COLON?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2816], eax
	mov	ecx, DWORD PTR ??_C@_08GMIFNCOM@KB_COLON?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2820], ecx
	mov	dl, BYTE PTR ??_C@_08GMIFNCOM@KB_COLON?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2824], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2825], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2829], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2833], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2837], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2844], 89 ; 00000059H

; 270  : 		{"KB_NUMPADENTER",FKBInputDevice::KB_NUMPADENTER},

	mov	ecx, DWORD PTR ??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2848], ecx
	mov	edx, DWORD PTR ??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2852], edx
	mov	eax, DWORD PTR ??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2856], eax
	mov	cx, WORD PTR ??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@+12
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2860], cx
	mov	dl, BYTE PTR ??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@+14
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2862], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2863], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2867], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2871], ax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2876], 90 ; 0000005aH

; 271  : 		{"KB_RCONTROL",FKBInputDevice::KB_RCONTROL},

	mov	ecx, DWORD PTR ??_C@_0M@PENKPBCB@KB_RCONTROL?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2880], ecx
	mov	edx, DWORD PTR ??_C@_0M@PENKPBCB@KB_RCONTROL?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2884], edx
	mov	eax, DWORD PTR ??_C@_0M@PENKPBCB@KB_RCONTROL?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2888], eax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2892], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2896], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2900], ecx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2904], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2908], 91 ; 0000005bH

; 272  : 		{"KB_VOLUMEDOWN",FKBInputDevice::KB_VOLUMEDOWN},

	mov	edx, DWORD PTR ??_C@_0O@HKGFIOHI@KB_VOLUMEDOWN?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2912], edx
	mov	eax, DWORD PTR ??_C@_0O@HKGFIOHI@KB_VOLUMEDOWN?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2916], eax
	mov	ecx, DWORD PTR ??_C@_0O@HKGFIOHI@KB_VOLUMEDOWN?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2920], ecx
	mov	dx, WORD PTR ??_C@_0O@HKGFIOHI@KB_VOLUMEDOWN?$AA@+12
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2924], dx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2926], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2930], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2934], ax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2936], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2940], 92 ; 0000005cH

; 273  : 		{"KB_VOLUMEUP",FKBInputDevice::KB_VOLUMEUP},

	mov	ecx, DWORD PTR ??_C@_0M@PBJILMIJ@KB_VOLUMEUP?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2944], ecx
	mov	edx, DWORD PTR ??_C@_0M@PBJILMIJ@KB_VOLUMEUP?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2948], edx
	mov	eax, DWORD PTR ??_C@_0M@PBJILMIJ@KB_VOLUMEUP?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2952], eax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2956], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2960], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2964], ecx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2968], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2972], 93 ; 0000005dH

; 274  : 		{"KB_NUMPADCOMMA",FKBInputDevice::KB_NUMPADCOMMA},

	mov	edx, DWORD PTR ??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2976], edx
	mov	eax, DWORD PTR ??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2980], eax
	mov	ecx, DWORD PTR ??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2984], ecx
	mov	dx, WORD PTR ??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@+12
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2988], dx
	mov	al, BYTE PTR ??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@+14
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+2990], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2991], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+2995], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+2999], cx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3004], 94 ; 0000005eH

; 275  : 		{"KB_NUMPADSLASH",FKBInputDevice::KB_NUMPADSLASH},

	mov	edx, DWORD PTR ??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3008], edx
	mov	eax, DWORD PTR ??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3012], eax
	mov	ecx, DWORD PTR ??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@+8
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3016], ecx
	mov	dx, WORD PTR ??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@+12
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3020], dx
	mov	al, BYTE PTR ??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@+14
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3022], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3023], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3027], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3031], cx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3036], 95 ; 0000005fH

; 276  : 		{"KB_SYSRQ",FKBInputDevice::KB_SYSRQ},

	mov	edx, DWORD PTR ??_C@_08FBCNMLCB@KB_SYSRQ?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3040], edx
	mov	eax, DWORD PTR ??_C@_08FBCNMLCB@KB_SYSRQ?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3044], eax
	mov	cl, BYTE PTR ??_C@_08FBCNMLCB@KB_SYSRQ?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3048], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3049], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3053], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3057], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3061], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3068], 96 ; 00000060H

; 277  : 		{"KB_RALT",FKBInputDevice::KB_RALT},

	mov	eax, DWORD PTR ??_C@_07GEKGPFI@KB_RALT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3072], eax
	mov	ecx, DWORD PTR ??_C@_07GEKGPFI@KB_RALT?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3076], ecx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3080], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3084], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3088], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3092], edx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3096], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3100], 97 ; 00000061H

; 278  : 		{"KB_PAUSE",FKBInputDevice::KB_PAUSE},

	mov	eax, DWORD PTR ??_C@_08INCOIHHC@KB_PAUSE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3104], eax
	mov	ecx, DWORD PTR ??_C@_08INCOIHHC@KB_PAUSE?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3108], ecx
	mov	dl, BYTE PTR ??_C@_08INCOIHHC@KB_PAUSE?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3112], dl
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3113], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3117], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3121], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3125], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3132], 98 ; 00000062H

; 279  : 		{"KB_HOME",FKBInputDevice::KB_HOME},

	mov	ecx, DWORD PTR ??_C@_07JONONOGP@KB_HOME?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3136], ecx
	mov	edx, DWORD PTR ??_C@_07JONONOGP@KB_HOME?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3140], edx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3144], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3148], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3152], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3156], eax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3160], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3164], 99 ; 00000063H

; 280  : 		{"KB_UP",FKBInputDevice::KB_UP},

	mov	ecx, DWORD PTR ??_C@_05EKDDABCB@KB_UP?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3168], ecx
	mov	dx, WORD PTR ??_C@_05EKDDABCB@KB_UP?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3172], dx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3174], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3178], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3182], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3186], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3190], ax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3192], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3196], 100 ; 00000064H

; 281  : 		{"KB_PGUP",FKBInputDevice::KB_PGUP},

	mov	ecx, DWORD PTR ??_C@_07COHKDOBP@KB_PGUP?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3200], ecx
	mov	edx, DWORD PTR ??_C@_07COHKDOBP@KB_PGUP?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3204], edx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3208], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3212], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3216], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3220], eax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3224], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3228], 101 ; 00000065H

; 282  : 		{"KB_LEFT",FKBInputDevice::KB_LEFT},

	mov	ecx, DWORD PTR ??_C@_07FLGPFEDK@KB_LEFT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3232], ecx
	mov	edx, DWORD PTR ??_C@_07FLGPFEDK@KB_LEFT?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3236], edx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3240], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3244], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3248], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3252], eax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3256], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3260], 102 ; 00000066H

; 283  : 		{"KB_RIGHT",FKBInputDevice::KB_RIGHT},

	mov	ecx, DWORD PTR ??_C@_08EJCMJNCN@KB_RIGHT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3264], ecx
	mov	edx, DWORD PTR ??_C@_08EJCMJNCN@KB_RIGHT?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3268], edx
	mov	al, BYTE PTR ??_C@_08EJCMJNCN@KB_RIGHT?$AA@+8
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3272], al
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3273], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3277], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3281], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3285], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3292], 103 ; 00000067H

; 284  : 		{"KB_END",FKBInputDevice::KB_END},

	mov	edx, DWORD PTR ??_C@_06JOJHHALL@KB_END?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3296], edx
	mov	ax, WORD PTR ??_C@_06JOJHHALL@KB_END?$AA@+4
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3300], ax
	mov	cl, BYTE PTR ??_C@_06JOJHHALL@KB_END?$AA@+6
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3302], cl
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3303], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3307], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3311], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3315], edx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3319], dx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3324], 104 ; 00000068H

; 285  : 		{"KB_DOWN",FKBInputDevice::KB_DOWN},

	mov	eax, DWORD PTR ??_C@_07KJGLMMAD@KB_DOWN?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3328], eax
	mov	ecx, DWORD PTR ??_C@_07KJGLMMAD@KB_DOWN?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3332], ecx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3336], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3340], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3344], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3348], edx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3352], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3356], 105 ; 00000069H

; 286  : 		{"KB_PGDN",FKBInputDevice::KB_PGDN},

	mov	eax, DWORD PTR ??_C@_07OHNPMIIH@KB_PGDN?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3360], eax
	mov	ecx, DWORD PTR ??_C@_07OHNPMIIH@KB_PGDN?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3364], ecx
	xor	edx, edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3368], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3372], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3376], edx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3380], edx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3384], dl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3388], 106 ; 0000006aH

; 287  : 		{"KB_INSERT",FKBInputDevice::KB_INSERT},

	mov	eax, DWORD PTR ??_C@_09IABKIFBJ@KB_INSERT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3392], eax
	mov	ecx, DWORD PTR ??_C@_09IABKIFBJ@KB_INSERT?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3396], ecx
	mov	dx, WORD PTR ??_C@_09IABKIFBJ@KB_INSERT?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3400], dx
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3402], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3406], eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3410], eax
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3414], ax
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3416], al
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3420], 107 ; 0000006bH

; 288  : 		{"KB_DELETE",FKBInputDevice::KB_DELETE},

	mov	ecx, DWORD PTR ??_C@_09DOOOELOL@KB_DELETE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3424], ecx
	mov	edx, DWORD PTR ??_C@_09DOOOELOL@KB_DELETE?$AA@+4
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3428], edx
	mov	ax, WORD PTR ??_C@_09DOOOELOL@KB_DELETE?$AA@+8
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3432], ax
	xor	ecx, ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3434], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3438], ecx
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3442], ecx
	mov	WORD PTR _asCvKeyBoardMapping$[ebp+3446], cx
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+3448], cl
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+3452], 108 ; 0000006cH

; 289  : 	};
; 290  : 
; 291  : 	if(pszHotKeyVal)

	cmp	DWORD PTR _pszHotKeyVal$[ebp], 0
	je	$LN5@GetHotKeyI

; 292  : 	{
; 293  : 		for(int i = 0; i < iNumKeyBoardMappings; ++i)

	mov	DWORD PTR _i$217775[ebp], 0
	jmp	SHORT $LN4@GetHotKeyI
$LN3@GetHotKeyI:
	mov	edx, DWORD PTR _i$217775[ebp]
	add	edx, 1
	mov	DWORD PTR _i$217775[ebp], edx
$LN4@GetHotKeyI:
	cmp	DWORD PTR _i$217775[ebp], 108		; 0000006cH
	jge	$LN5@GetHotKeyI

; 294  : 		{
; 295  : 			if(strcmp(asCvKeyBoardMapping [i].szDefineString, pszHotKeyVal) == 0)

	mov	eax, DWORD PTR _pszHotKeyVal$[ebp]
	mov	DWORD PTR tv3858[ebp], eax
	mov	ecx, DWORD PTR _i$217775[ebp]
	shl	ecx, 5
	lea	edx, DWORD PTR _asCvKeyBoardMapping$[ebp+ecx]
	mov	DWORD PTR tv3857[ebp], edx
$LL8@GetHotKeyI:
	mov	eax, DWORD PTR tv3857[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv3862[ebp], cl
	mov	edx, DWORD PTR tv3858[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN9@GetHotKeyI
	cmp	BYTE PTR tv3862[ebp], 0
	je	SHORT $LN10@GetHotKeyI
	mov	eax, DWORD PTR tv3857[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv3869[ebp], cl
	mov	edx, DWORD PTR tv3858[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN9@GetHotKeyI
	add	DWORD PTR tv3857[ebp], 2
	add	DWORD PTR tv3858[ebp], 2
	cmp	BYTE PTR tv3869[ebp], 0
	jne	SHORT $LL8@GetHotKeyI
$LN10@GetHotKeyI:
	mov	DWORD PTR tv3906[ebp], 0
	jmp	SHORT $LN11@GetHotKeyI
$LN9@GetHotKeyI:
	sbb	eax, eax
	sbb	eax, -1
	mov	DWORD PTR tv3906[ebp], eax
$LN11@GetHotKeyI:
	mov	ecx, DWORD PTR tv3906[ebp]
	mov	DWORD PTR tv1576[ebp], ecx
	cmp	DWORD PTR tv1576[ebp], 0
	jne	SHORT $LN1@GetHotKeyI

; 296  : 			{
; 297  : 				return asCvKeyBoardMapping[i].iIntVal;

	mov	edx, DWORD PTR _i$217775[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR _asCvKeyBoardMapping$[ebp+edx+28]
	jmp	SHORT $LN6@GetHotKeyI
$LN1@GetHotKeyI:

; 298  : 			}
; 299  : 		}

	jmp	$LN3@GetHotKeyI
$LN5@GetHotKeyI:

; 300  : 	}
; 301  : 
; 302  : 
; 303  : 	return -1;

	or	eax, -1
$LN6@GetHotKeyI:

; 304  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
?GetHotKeyInt@CvHotKeyInfo@@IAEHPBD@Z ENDP		; CvHotKeyInfo::GetHotKeyInt
_TEXT	ENDS
PUBLIC	?CreateKeyStringFromKBCode@CvHotKeyInfo@@SA?AVCvString@@PBD@Z ; CvHotKeyInfo::CreateKeyStringFromKBCode
PUBLIC	??_C@_0N@JNFALMKF@TXT_KEY_CTRL?$AA@		; `string'
PUBLIC	??_C@_0M@BDMHJKPL@TXT_KEY_ALT?$AA@		; `string'
PUBLIC	??_C@_0O@FELPLCNL@TXT_KEY_SHIFT?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z ; CvHotKeyInfo::CreateHotKeyFromDescription
EXTRN	__imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:PROC
;	COMDAT ??_C@_0N@JNFALMKF@TXT_KEY_CTRL?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0N@JNFALMKF@TXT_KEY_CTRL?$AA@ DB 'TXT_KEY_CTRL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDMHJKPL@TXT_KEY_ALT?$AA@
CONST	SEGMENT
??_C@_0M@BDMHJKPL@TXT_KEY_ALT?$AA@ DB 'TXT_KEY_ALT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FELPLCNL@TXT_KEY_SHIFT?$AA@
CONST	SEGMENT
??_C@_0O@FELPLCNL@TXT_KEY_SHIFT?$AA@ DB 'TXT_KEY_SHIFT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$4
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z
_TEXT	SEGMENT
tv183 = -212						; size = 4
tv241 = -208						; size = 4
tv181 = -204						; size = 4
tv188 = -200						; size = 4
tv179 = -196						; size = 4
tv194 = -192						; size = 4
tv177 = -188						; size = 4
tv225 = -184						; size = 4
tv71 = -180						; size = 4
tv260 = -176						; size = 4
tv255 = -170						; size = 1
tv248 = -169						; size = 1
tv243 = -168						; size = 4
tv245 = -164						; size = 4
$T228239 = -160						; size = 4
$T228232 = -156						; size = 28
$T228231 = -128						; size = 28
$T228230 = -100						; size = 28
$T228229 = -72						; size = 28
_strHotKey$ = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pszHotKey$ = 12					; size = 4
_bShift$ = 16						; size = 1
_bAlt$ = 20						; size = 1
_bCtrl$ = 24						; size = 1
?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z PROC ; CvHotKeyInfo::CreateHotKeyFromDescription, COMDAT

; 315  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 200				; 000000c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T228239[ebp], 0

; 316  : 	CvString strHotKey;

	lea	ecx, DWORD PTR _strHotKey$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 317  : 
; 318  : 	if(pszHotKey && strcmp(pszHotKey,"") != 0)

	cmp	DWORD PTR _pszHotKey$[ebp], 0
	je	$LN4@CreateHotK
	mov	DWORD PTR tv245[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	eax, DWORD PTR _pszHotKey$[ebp]
	mov	DWORD PTR tv243[ebp], eax
$LL35@CreateHotK:
	mov	ecx, DWORD PTR tv243[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv248[ebp], dl
	mov	eax, DWORD PTR tv245[ebp]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN36@CreateHotK
	cmp	BYTE PTR tv248[ebp], 0
	je	SHORT $LN37@CreateHotK
	mov	ecx, DWORD PTR tv243[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv255[ebp], dl
	mov	eax, DWORD PTR tv245[ebp]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN36@CreateHotK
	add	DWORD PTR tv243[ebp], 2
	add	DWORD PTR tv245[ebp], 2
	cmp	BYTE PTR tv255[ebp], 0
	jne	SHORT $LL35@CreateHotK
$LN37@CreateHotK:
	mov	DWORD PTR tv260[ebp], 0
	jmp	SHORT $LN38@CreateHotK
$LN36@CreateHotK:
	sbb	ecx, ecx
	sbb	ecx, -1
	mov	DWORD PTR tv260[ebp], ecx
$LN38@CreateHotK:
	mov	edx, DWORD PTR tv260[ebp]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 0
	je	$LN4@CreateHotK

; 319  : 	{
; 320  : 		if(bShift)

	movzx	eax, BYTE PTR _bShift$[ebp]
	test	eax, eax
	je	SHORT $LN3@CreateHotK

; 321  : 		{
; 322  : 			strHotKey += GetLocalizedText("TXT_KEY_SHIFT");

	push	OFFSET ??_C@_0O@FELPLCNL@TXT_KEY_SHIFT?$AA@
	lea	ecx, DWORD PTR $T228229[ebp]
	push	ecx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv225[ebp], eax
	mov	edx, DWORD PTR tv225[ebp]
	mov	DWORD PTR tv177[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv177[ebp]
	push	eax
	lea	ecx, DWORD PTR _strHotKey$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T228229[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN3@CreateHotK:

; 323  : 		}
; 324  : 
; 325  : 		if(bAlt)

	movzx	ecx, BYTE PTR _bAlt$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@CreateHotK

; 326  : 		{
; 327  : 			strHotKey += GetLocalizedText("TXT_KEY_ALT");

	push	OFFSET ??_C@_0M@BDMHJKPL@TXT_KEY_ALT?$AA@
	lea	edx, DWORD PTR $T228230[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv194[ebp], eax
	mov	eax, DWORD PTR tv194[ebp]
	mov	DWORD PTR tv179[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv179[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strHotKey$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T228230[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@CreateHotK:

; 328  : 		}
; 329  : 
; 330  : 		if(bCtrl)

	movzx	edx, BYTE PTR _bCtrl$[ebp]
	test	edx, edx
	je	SHORT $LN1@CreateHotK

; 331  : 		{
; 332  : 			strHotKey += GetLocalizedText("TXT_KEY_CTRL");

	push	OFFSET ??_C@_0N@JNFALMKF@TXT_KEY_CTRL?$AA@
	lea	eax, DWORD PTR $T228231[ebp]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv181[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv181[ebp]
	push	edx
	lea	ecx, DWORD PTR _strHotKey$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T228231[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN1@CreateHotK:

; 333  : 		}
; 334  : 
; 335  : 		strHotKey += CreateKeyStringFromKBCode(pszHotKey);

	mov	eax, DWORD PTR _pszHotKey$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T228232[ebp]
	push	ecx
	call	?CreateKeyStringFromKBCode@CvHotKeyInfo@@SA?AVCvString@@PBD@Z ; CvHotKeyInfo::CreateKeyStringFromKBCode
	add	esp, 8
	mov	DWORD PTR tv241[ebp], eax
	mov	edx, DWORD PTR tv241[ebp]
	mov	DWORD PTR tv183[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR tv183[ebp]
	push	eax
	lea	ecx, DWORD PTR _strHotKey$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T228232[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@CreateHotK:

; 336  : 	}
; 337  : 
; 338  : 	return strHotKey;

	lea	ecx, DWORD PTR _strHotKey$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T228239[ebp]
	or	edx, 1
	mov	DWORD PTR $T228239[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strHotKey$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 339  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$0:
	lea	ecx, DWORD PTR _strHotKey$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$1:
	lea	ecx, DWORD PTR $T228229[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$2:
	lea	ecx, DWORD PTR $T228230[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$3:
	lea	ecx, DWORD PTR $T228231[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$4:
	lea	ecx, DWORD PTR $T228232[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z$5:
	mov	eax, DWORD PTR $T228239[ebp]
	and	eax, 1
	je	$LN13@CreateHotK
	and	DWORD PTR $T228239[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
$LN13@CreateHotK:
	ret	0
__ehhandler$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-204]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z ENDP ; CvHotKeyInfo::CreateHotKeyFromDescription
PUBLIC	??_C@_0BM@OLGFPKBD@TXT_KEY_KEYBOARD_DELETE_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BM@DCCFEH@TXT_KEY_KEYBOARD_INSERT_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BL@KGMOKEGO@TXT_KEY_KEYBOARD_PAGE_DOWN?$AA@ ; `string'
PUBLIC	??_C@_0BM@FALLMIDA@TXT_KEY_KEYBOARD_DOWN_ARROW?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KNJHEJNM@TXT_KEY_KEYBOARD_END_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BN@NDNIMMLA@TXT_KEY_KEYBOARD_RIGHT_ARROW?$AA@ ; `string'
PUBLIC	??_C@_0BM@KLJKMCGN@TXT_KEY_KEYBOARD_LEFT_ARROW?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NBNPCDAG@TXT_KEY_KEYBOARD_PAGE_UP?$AA@ ; `string'
PUBLIC	??_C@_0BK@FLFDENIF@TXT_KEY_KEYBOARD_UP_ARROW?$AA@ ; `string'
PUBLIC	??_C@_0BK@IOACHACJ@TXT_KEY_KEYBOARD_HOME_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BL@LMGANIHN@TXT_KEY_KEYBOARD_PAUSE_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BP@PAKICBOG@TXT_KEY_KEYBOARD_RIGHT_ALT_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BH@LKMLDHGM@TXT_KEY_KEYBOARD_SYSRQ?$AA@	; `string'
PUBLIC	??_C@_0BO@BFGGAPA@TXT_KEY_KEYBOARD_NUMPAD_SLASH?$AA@ ; `string'
PUBLIC	??_C@_0BO@MIIMJCDA@TXT_KEY_KEYBOARD_NUMPAD_COMMA?$AA@ ; `string'
PUBLIC	??_C@_0BL@KNAELJCN@TXT_KEY_KEYBOARD_VOLUME_UP?$AA@ ; `string'
PUBLIC	??_C@_0BN@MAGEFPIG@TXT_KEY_KEYBOARD_VOLUME_DOWN?$AA@ ; `string'
PUBLIC	??_C@_0CD@KJBJEJNK@TXT_KEY_KEYBOARD_RIGHT_CONTROL_K@ ; `string'
PUBLIC	??_C@_0CC@CIHHFHLM@TXT_KEY_KEYBOARD_NUMPAD_ENTER_KE@ ; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_01EOFPKCAF@?$EA?$AA@			; `string'
PUBLIC	??_C@_0BP@PPBFBENA@TXT_KEY_KEYBOARD_NUMPAD_EQUALS?$AA@ ; `string'
PUBLIC	??_C@_03KIBNPMNE@F12?$AA@			; `string'
PUBLIC	??_C@_03IDDAKPBH@F11?$AA@			; `string'
PUBLIC	??_C@_0BP@CCOFCJAE@TXT_KEY_KEYBOARD_NUMPAD_PERIOD?$AA@ ; `string'
PUBLIC	??_C@_0CA@CEKABGON@TXT_KEY_KEYBOARD_NUMPAD_NUMBER0?$AA@ ; `string'
PUBLIC	??_C@_0CA@PINEFCO@TXT_KEY_KEYBOARD_NUMPAD_NUMBER3?$AA@ ; `string'
PUBLIC	??_C@_0CA@BGJGHEGP@TXT_KEY_KEYBOARD_NUMPAD_NUMBER2?$AA@ ; `string'
PUBLIC	??_C@_0CA@DNLLCHKM@TXT_KEY_KEYBOARD_NUMPAD_NUMBER1?$AA@ ; `string'
PUBLIC	??_C@_0BN@KJJJEOJP@TXT_KEY_KEYBOARD_NUMPAD_PLUS?$AA@ ; `string'
PUBLIC	??_C@_0CA@HCPKLBGL@TXT_KEY_KEYBOARD_NUMPAD_NUMBER6?$AA@ ; `string'
PUBLIC	??_C@_0CA@FJNHOCKI@TXT_KEY_KEYBOARD_NUMPAD_NUMBER5?$AA@ ; `string'
PUBLIC	??_C@_0CA@EAMMNDOJ@TXT_KEY_KEYBOARD_NUMPAD_NUMBER4?$AA@ ; `string'
PUBLIC	??_C@_0BO@FLCCLBF@TXT_KEY_KEYBOARD_NUMPAD_MINUS?$AA@ ; `string'
PUBLIC	??_C@_0CA@PFGCKNKE@TXT_KEY_KEYBOARD_NUMPAD_NUMBER9?$AA@ ; `string'
PUBLIC	??_C@_0CA@OMHJJMOF@TXT_KEY_KEYBOARD_NUMPAD_NUMBER8?$AA@ ; `string'
PUBLIC	??_C@_0CA@GLOBIACK@TXT_KEY_KEYBOARD_NUMPAD_NUMBER7?$AA@ ; `string'
PUBLIC	??_C@_0BM@OHEKFNFG@TXT_KEY_KEYBOARD_SCROLL_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BK@GGHFHDNJ@TXT_KEY_KEYBOARD_NUM_LOCK?$AA@ ; `string'
PUBLIC	??_C@_03JKCLJOFG@F10?$AA@			; `string'
PUBLIC	??_C@_02HKCNFKCF@F9?$AA@			; `string'
PUBLIC	??_C@_02GDDGGLGE@F8?$AA@			; `string'
PUBLIC	??_C@_02OEKOHHKL@F7?$AA@			; `string'
PUBLIC	??_C@_02PNLFEGOK@F6?$AA@			; `string'
PUBLIC	??_C@_02NGJIBFCJ@F5?$AA@			; `string'
PUBLIC	??_C@_02MPIDCEGI@F4?$AA@			; `string'
PUBLIC	??_C@_02IAMCLCKP@F3?$AA@			; `string'
PUBLIC	??_C@_02JJNJIDOO@F2?$AA@			; `string'
PUBLIC	??_C@_02LCPENACN@F1?$AA@			; `string'
PUBLIC	??_C@_0BL@EOAPLLGL@TXT_KEY_KEYBOARD_CAPS_LOCK?$AA@ ; `string'
PUBLIC	??_C@_0BL@HDMDJGFD@TXT_KEY_KEYBOARD_SPACE_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BO@CDIGMPPB@TXT_KEY_KEYBOARD_LEFT_ALT_KEY?$AA@ ; `string'
PUBLIC	??_C@_0BO@DLOFEBFP@TXT_KEY_KEYBOARD_NUM_PAD_STAR?$AA@ ; `string'
PUBLIC	??_C@_0CB@BAOKEAON@TXT_KEY_KEYBOARD_RIGHT_SHIFT_KEY@ ; `string'
PUBLIC	??_C@_01KMDKNFGN@?1?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0CA@FCNLNICK@TXT_KEY_KEYBOARD_LEFT_SHIFT_KEY?$AA@ ; `string'
PUBLIC	??_C@_01NLNLIGKH@?$GA?$AA@			; `string'
PUBLIC	??_C@_01GEODFPGF@?8?$AA@			; `string'
PUBLIC	??_C@_01ICJEACDI@?$DL?$AA@			; `string'
PUBLIC	??_C@_0CC@NDHGFBBE@TXT_KEY_KEYBOARD_LEFT_CONTROL_KE@ ; `string'
PUBLIC	??_C@_0BH@BCBHEDPH@TXT_KEY_KEYBOARD_ENTER?$AA@	; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN?$AA@			; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
PUBLIC	??_C@_03CJMDHCGG@TAB?$AA@			; `string'
PUBLIC	??_C@_0BL@KLEGNEHB@TXT_KEY_KEYBOARD_BACKSPACE?$AA@ ; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN?$AA@			; `string'
PUBLIC	??_C@_01POHCFINO@Z?$AA@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y?$AA@				; `string'
PUBLIC	??_C@_01MMEEDKFM@X?$AA@				; `string'
PUBLIC	??_C@_01ELNMCGJD@W?$AA@				; `string'
PUBLIC	??_C@_01FCMHBHNC@V?$AA@				; `string'
PUBLIC	??_C@_01HJOKEEBB@U?$AA@				; `string'
PUBLIC	??_C@_01GAPBHFFA@T?$AA@				; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_01DGKLNCNG@R?$AA@				; `string'
PUBLIC	??_C@_01BNIGIBBF@Q?$AA@				; `string'
PUBLIC	??_C@_01EJNLAFE@P?$AA@				; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_01NANMIPIL@N?$AA@				; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_01OCOKONAJ@L?$AA@				; `string'
PUBLIC	??_C@_01KNKLHLMO@K?$AA@				; `string'
PUBLIC	??_C@_01LELAEKIP@J?$AA@				; `string'
PUBLIC	??_C@_01JPJNBJEM@I?$AA@				; `string'
PUBLIC	??_C@_01IGIGCIAN@H?$AA@				; `string'
PUBLIC	??_C@_01BBODEMC@G?$AA@				; `string'
PUBLIC	??_C@_01BIAFAFID@F?$AA@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01GFHCPBMG@C?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_01FHEEJDEE@A?$AA@				; `string'
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
PUBLIC	??_C@_01LAKCGALK@9?$AA@				; `string'
PUBLIC	??_C@_01KJLJFBPL@8?$AA@				; `string'
PUBLIC	??_C@_01COCBENDE@7?$AA@				; `string'
PUBLIC	??_C@_01DHDKHMHF@6?$AA@				; `string'
PUBLIC	??_C@_01BMBHCPLG@5?$AA@				; `string'
PUBLIC	??_C@_01FAMBOPH@4?$AA@				; `string'
PUBLIC	??_C@_01EKENIIDA@3?$AA@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2?$AA@				; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_0BI@EPKLNCFC@TXT_KEY_KEYBOARD_ESCAPE?$AA@	; `string'
EXTRN	__imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_0BM@OLGFPKBD@TXT_KEY_KEYBOARD_DELETE_KEY?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BM@OLGFPKBD@TXT_KEY_KEYBOARD_DELETE_KEY?$AA@ DB 'TXT_KEY_KEYBOARD_'
	DB	'DELETE_KEY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DCCFEH@TXT_KEY_KEYBOARD_INSERT_KEY?$AA@
CONST	SEGMENT
??_C@_0BM@DCCFEH@TXT_KEY_KEYBOARD_INSERT_KEY?$AA@ DB 'TXT_KEY_KEYBOARD_IN'
	DB	'SERT_KEY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KGMOKEGO@TXT_KEY_KEYBOARD_PAGE_DOWN?$AA@
CONST	SEGMENT
??_C@_0BL@KGMOKEGO@TXT_KEY_KEYBOARD_PAGE_DOWN?$AA@ DB 'TXT_KEY_KEYBOARD_P'
	DB	'AGE_DOWN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FALLMIDA@TXT_KEY_KEYBOARD_DOWN_ARROW?$AA@
CONST	SEGMENT
??_C@_0BM@FALLMIDA@TXT_KEY_KEYBOARD_DOWN_ARROW?$AA@ DB 'TXT_KEY_KEYBOARD_'
	DB	'DOWN_ARROW', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KNJHEJNM@TXT_KEY_KEYBOARD_END_KEY?$AA@
CONST	SEGMENT
??_C@_0BJ@KNJHEJNM@TXT_KEY_KEYBOARD_END_KEY?$AA@ DB 'TXT_KEY_KEYBOARD_END'
	DB	'_KEY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NDNIMMLA@TXT_KEY_KEYBOARD_RIGHT_ARROW?$AA@
CONST	SEGMENT
??_C@_0BN@NDNIMMLA@TXT_KEY_KEYBOARD_RIGHT_ARROW?$AA@ DB 'TXT_KEY_KEYBOARD'
	DB	'_RIGHT_ARROW', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KLJKMCGN@TXT_KEY_KEYBOARD_LEFT_ARROW?$AA@
CONST	SEGMENT
??_C@_0BM@KLJKMCGN@TXT_KEY_KEYBOARD_LEFT_ARROW?$AA@ DB 'TXT_KEY_KEYBOARD_'
	DB	'LEFT_ARROW', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NBNPCDAG@TXT_KEY_KEYBOARD_PAGE_UP?$AA@
CONST	SEGMENT
??_C@_0BJ@NBNPCDAG@TXT_KEY_KEYBOARD_PAGE_UP?$AA@ DB 'TXT_KEY_KEYBOARD_PAG'
	DB	'E_UP', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FLFDENIF@TXT_KEY_KEYBOARD_UP_ARROW?$AA@
CONST	SEGMENT
??_C@_0BK@FLFDENIF@TXT_KEY_KEYBOARD_UP_ARROW?$AA@ DB 'TXT_KEY_KEYBOARD_UP'
	DB	'_ARROW', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IOACHACJ@TXT_KEY_KEYBOARD_HOME_KEY?$AA@
CONST	SEGMENT
??_C@_0BK@IOACHACJ@TXT_KEY_KEYBOARD_HOME_KEY?$AA@ DB 'TXT_KEY_KEYBOARD_HO'
	DB	'ME_KEY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LMGANIHN@TXT_KEY_KEYBOARD_PAUSE_KEY?$AA@
CONST	SEGMENT
??_C@_0BL@LMGANIHN@TXT_KEY_KEYBOARD_PAUSE_KEY?$AA@ DB 'TXT_KEY_KEYBOARD_P'
	DB	'AUSE_KEY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PAKICBOG@TXT_KEY_KEYBOARD_RIGHT_ALT_KEY?$AA@
CONST	SEGMENT
??_C@_0BP@PAKICBOG@TXT_KEY_KEYBOARD_RIGHT_ALT_KEY?$AA@ DB 'TXT_KEY_KEYBOA'
	DB	'RD_RIGHT_ALT_KEY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LKMLDHGM@TXT_KEY_KEYBOARD_SYSRQ?$AA@
CONST	SEGMENT
??_C@_0BH@LKMLDHGM@TXT_KEY_KEYBOARD_SYSRQ?$AA@ DB 'TXT_KEY_KEYBOARD_SYSRQ'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BFGGAPA@TXT_KEY_KEYBOARD_NUMPAD_SLASH?$AA@
CONST	SEGMENT
??_C@_0BO@BFGGAPA@TXT_KEY_KEYBOARD_NUMPAD_SLASH?$AA@ DB 'TXT_KEY_KEYBOARD'
	DB	'_NUMPAD_SLASH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MIIMJCDA@TXT_KEY_KEYBOARD_NUMPAD_COMMA?$AA@
CONST	SEGMENT
??_C@_0BO@MIIMJCDA@TXT_KEY_KEYBOARD_NUMPAD_COMMA?$AA@ DB 'TXT_KEY_KEYBOAR'
	DB	'D_NUMPAD_COMMA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KNAELJCN@TXT_KEY_KEYBOARD_VOLUME_UP?$AA@
CONST	SEGMENT
??_C@_0BL@KNAELJCN@TXT_KEY_KEYBOARD_VOLUME_UP?$AA@ DB 'TXT_KEY_KEYBOARD_V'
	DB	'OLUME_UP', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MAGEFPIG@TXT_KEY_KEYBOARD_VOLUME_DOWN?$AA@
CONST	SEGMENT
??_C@_0BN@MAGEFPIG@TXT_KEY_KEYBOARD_VOLUME_DOWN?$AA@ DB 'TXT_KEY_KEYBOARD'
	DB	'_VOLUME_DOWN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KJBJEJNK@TXT_KEY_KEYBOARD_RIGHT_CONTROL_K@
CONST	SEGMENT
??_C@_0CD@KJBJEJNK@TXT_KEY_KEYBOARD_RIGHT_CONTROL_K@ DB 'TXT_KEY_KEYBOARD'
	DB	'_RIGHT_CONTROL_KEY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CIHHFHLM@TXT_KEY_KEYBOARD_NUMPAD_ENTER_KE@
CONST	SEGMENT
??_C@_0CC@CIHHFHLM@TXT_KEY_KEYBOARD_NUMPAD_ENTER_KE@ DB 'TXT_KEY_KEYBOARD'
	DB	'_NUMPAD_ENTER_KEY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3?$AA@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3?$AA@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EOFPKCAF@?$EA?$AA@
CONST	SEGMENT
??_C@_01EOFPKCAF@?$EA?$AA@ DB '@', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PPBFBENA@TXT_KEY_KEYBOARD_NUMPAD_EQUALS?$AA@
CONST	SEGMENT
??_C@_0BP@PPBFBENA@TXT_KEY_KEYBOARD_NUMPAD_EQUALS?$AA@ DB 'TXT_KEY_KEYBOA'
	DB	'RD_NUMPAD_EQUALS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KIBNPMNE@F12?$AA@
CONST	SEGMENT
??_C@_03KIBNPMNE@F12?$AA@ DB 'F12', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDDAKPBH@F11?$AA@
CONST	SEGMENT
??_C@_03IDDAKPBH@F11?$AA@ DB 'F11', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CCOFCJAE@TXT_KEY_KEYBOARD_NUMPAD_PERIOD?$AA@
CONST	SEGMENT
??_C@_0BP@CCOFCJAE@TXT_KEY_KEYBOARD_NUMPAD_PERIOD?$AA@ DB 'TXT_KEY_KEYBOA'
	DB	'RD_NUMPAD_PERIOD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CEKABGON@TXT_KEY_KEYBOARD_NUMPAD_NUMBER0?$AA@
CONST	SEGMENT
??_C@_0CA@CEKABGON@TXT_KEY_KEYBOARD_NUMPAD_NUMBER0?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PINEFCO@TXT_KEY_KEYBOARD_NUMPAD_NUMBER3?$AA@
CONST	SEGMENT
??_C@_0CA@PINEFCO@TXT_KEY_KEYBOARD_NUMPAD_NUMBER3?$AA@ DB 'TXT_KEY_KEYBOA'
	DB	'RD_NUMPAD_NUMBER3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BGJGHEGP@TXT_KEY_KEYBOARD_NUMPAD_NUMBER2?$AA@
CONST	SEGMENT
??_C@_0CA@BGJGHEGP@TXT_KEY_KEYBOARD_NUMPAD_NUMBER2?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DNLLCHKM@TXT_KEY_KEYBOARD_NUMPAD_NUMBER1?$AA@
CONST	SEGMENT
??_C@_0CA@DNLLCHKM@TXT_KEY_KEYBOARD_NUMPAD_NUMBER1?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KJJJEOJP@TXT_KEY_KEYBOARD_NUMPAD_PLUS?$AA@
CONST	SEGMENT
??_C@_0BN@KJJJEOJP@TXT_KEY_KEYBOARD_NUMPAD_PLUS?$AA@ DB 'TXT_KEY_KEYBOARD'
	DB	'_NUMPAD_PLUS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HCPKLBGL@TXT_KEY_KEYBOARD_NUMPAD_NUMBER6?$AA@
CONST	SEGMENT
??_C@_0CA@HCPKLBGL@TXT_KEY_KEYBOARD_NUMPAD_NUMBER6?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FJNHOCKI@TXT_KEY_KEYBOARD_NUMPAD_NUMBER5?$AA@
CONST	SEGMENT
??_C@_0CA@FJNHOCKI@TXT_KEY_KEYBOARD_NUMPAD_NUMBER5?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EAMMNDOJ@TXT_KEY_KEYBOARD_NUMPAD_NUMBER4?$AA@
CONST	SEGMENT
??_C@_0CA@EAMMNDOJ@TXT_KEY_KEYBOARD_NUMPAD_NUMBER4?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FLCCLBF@TXT_KEY_KEYBOARD_NUMPAD_MINUS?$AA@
CONST	SEGMENT
??_C@_0BO@FLCCLBF@TXT_KEY_KEYBOARD_NUMPAD_MINUS?$AA@ DB 'TXT_KEY_KEYBOARD'
	DB	'_NUMPAD_MINUS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PFGCKNKE@TXT_KEY_KEYBOARD_NUMPAD_NUMBER9?$AA@
CONST	SEGMENT
??_C@_0CA@PFGCKNKE@TXT_KEY_KEYBOARD_NUMPAD_NUMBER9?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OMHJJMOF@TXT_KEY_KEYBOARD_NUMPAD_NUMBER8?$AA@
CONST	SEGMENT
??_C@_0CA@OMHJJMOF@TXT_KEY_KEYBOARD_NUMPAD_NUMBER8?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GLOBIACK@TXT_KEY_KEYBOARD_NUMPAD_NUMBER7?$AA@
CONST	SEGMENT
??_C@_0CA@GLOBIACK@TXT_KEY_KEYBOARD_NUMPAD_NUMBER7?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_NUMPAD_NUMBER7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OHEKFNFG@TXT_KEY_KEYBOARD_SCROLL_KEY?$AA@
CONST	SEGMENT
??_C@_0BM@OHEKFNFG@TXT_KEY_KEYBOARD_SCROLL_KEY?$AA@ DB 'TXT_KEY_KEYBOARD_'
	DB	'SCROLL_KEY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GGHFHDNJ@TXT_KEY_KEYBOARD_NUM_LOCK?$AA@
CONST	SEGMENT
??_C@_0BK@GGHFHDNJ@TXT_KEY_KEYBOARD_NUM_LOCK?$AA@ DB 'TXT_KEY_KEYBOARD_NU'
	DB	'M_LOCK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03JKCLJOFG@F10?$AA@
CONST	SEGMENT
??_C@_03JKCLJOFG@F10?$AA@ DB 'F10', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HKCNFKCF@F9?$AA@
CONST	SEGMENT
??_C@_02HKCNFKCF@F9?$AA@ DB 'F9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GDDGGLGE@F8?$AA@
CONST	SEGMENT
??_C@_02GDDGGLGE@F8?$AA@ DB 'F8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OEKOHHKL@F7?$AA@
CONST	SEGMENT
??_C@_02OEKOHHKL@F7?$AA@ DB 'F7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNLFEGOK@F6?$AA@
CONST	SEGMENT
??_C@_02PNLFEGOK@F6?$AA@ DB 'F6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02NGJIBFCJ@F5?$AA@
CONST	SEGMENT
??_C@_02NGJIBFCJ@F5?$AA@ DB 'F5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPIDCEGI@F4?$AA@
CONST	SEGMENT
??_C@_02MPIDCEGI@F4?$AA@ DB 'F4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAMCLCKP@F3?$AA@
CONST	SEGMENT
??_C@_02IAMCLCKP@F3?$AA@ DB 'F3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JJNJIDOO@F2?$AA@
CONST	SEGMENT
??_C@_02JJNJIDOO@F2?$AA@ DB 'F2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LCPENACN@F1?$AA@
CONST	SEGMENT
??_C@_02LCPENACN@F1?$AA@ DB 'F1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EOAPLLGL@TXT_KEY_KEYBOARD_CAPS_LOCK?$AA@
CONST	SEGMENT
??_C@_0BL@EOAPLLGL@TXT_KEY_KEYBOARD_CAPS_LOCK?$AA@ DB 'TXT_KEY_KEYBOARD_C'
	DB	'APS_LOCK', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HDMDJGFD@TXT_KEY_KEYBOARD_SPACE_KEY?$AA@
CONST	SEGMENT
??_C@_0BL@HDMDJGFD@TXT_KEY_KEYBOARD_SPACE_KEY?$AA@ DB 'TXT_KEY_KEYBOARD_S'
	DB	'PACE_KEY', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CDIGMPPB@TXT_KEY_KEYBOARD_LEFT_ALT_KEY?$AA@
CONST	SEGMENT
??_C@_0BO@CDIGMPPB@TXT_KEY_KEYBOARD_LEFT_ALT_KEY?$AA@ DB 'TXT_KEY_KEYBOAR'
	DB	'D_LEFT_ALT_KEY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DLOFEBFP@TXT_KEY_KEYBOARD_NUM_PAD_STAR?$AA@
CONST	SEGMENT
??_C@_0BO@DLOFEBFP@TXT_KEY_KEYBOARD_NUM_PAD_STAR?$AA@ DB 'TXT_KEY_KEYBOAR'
	DB	'D_NUM_PAD_STAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BAOKEAON@TXT_KEY_KEYBOARD_RIGHT_SHIFT_KEY@
CONST	SEGMENT
??_C@_0CB@BAOKEAON@TXT_KEY_KEYBOARD_RIGHT_SHIFT_KEY@ DB 'TXT_KEY_KEYBOARD'
	DB	'_RIGHT_SHIFT_KEY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1?$AA@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1?$AA@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FCNLNICK@TXT_KEY_KEYBOARD_LEFT_SHIFT_KEY?$AA@
CONST	SEGMENT
??_C@_0CA@FCNLNICK@TXT_KEY_KEYBOARD_LEFT_SHIFT_KEY?$AA@ DB 'TXT_KEY_KEYBO'
	DB	'ARD_LEFT_SHIFT_KEY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NLNLIGKH@?$GA?$AA@
CONST	SEGMENT
??_C@_01NLNLIGKH@?$GA?$AA@ DB '`', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8?$AA@
CONST	SEGMENT
??_C@_01GEODFPGF@?8?$AA@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL?$AA@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL?$AA@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NDHGFBBE@TXT_KEY_KEYBOARD_LEFT_CONTROL_KE@
CONST	SEGMENT
??_C@_0CC@NDHGFBBE@TXT_KEY_KEYBOARD_LEFT_CONTROL_KE@ DB 'TXT_KEY_KEYBOARD'
	DB	'_LEFT_CONTROL_KEY', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BCBHEDPH@TXT_KEY_KEYBOARD_ENTER?$AA@
CONST	SEGMENT
??_C@_0BH@BCBHEDPH@TXT_KEY_KEYBOARD_ENTER?$AA@ DB 'TXT_KEY_KEYBOARD_ENTER'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN?$AA@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN?$AA@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJMDHCGG@TAB?$AA@
CONST	SEGMENT
??_C@_03CJMDHCGG@TAB?$AA@ DB 'TAB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KLEGNEHB@TXT_KEY_KEYBOARD_BACKSPACE?$AA@
CONST	SEGMENT
??_C@_0BL@KLEGNEHB@TXT_KEY_KEYBOARD_BACKSPACE?$AA@ DB 'TXT_KEY_KEYBOARD_B'
	DB	'ACKSPACE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN?$AA@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN?$AA@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z?$AA@
CONST	SEGMENT
??_C@_01POHCFINO@Z?$AA@ DB 'Z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y?$AA@
CONST	SEGMENT
??_C@_01NFFPALBN@Y?$AA@ DB 'Y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X?$AA@
CONST	SEGMENT
??_C@_01MMEEDKFM@X?$AA@ DB 'X', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ELNMCGJD@W?$AA@
CONST	SEGMENT
??_C@_01ELNMCGJD@W?$AA@ DB 'W', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FCMHBHNC@V?$AA@
CONST	SEGMENT
??_C@_01FCMHBHNC@V?$AA@ DB 'V', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HJOKEEBB@U?$AA@
CONST	SEGMENT
??_C@_01HJOKEEBB@U?$AA@ DB 'U', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GAPBHFFA@T?$AA@
CONST	SEGMENT
??_C@_01GAPBHFFA@T?$AA@ DB 'T', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R?$AA@
CONST	SEGMENT
??_C@_01DGKLNCNG@R?$AA@ DB 'R', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BNIGIBBF@Q?$AA@
CONST	SEGMENT
??_C@_01BNIGIBBF@Q?$AA@ DB 'Q', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EJNLAFE@P?$AA@
CONST	SEGMENT
??_C@_01EJNLAFE@P?$AA@ DB 'P', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NANMIPIL@N?$AA@
CONST	SEGMENT
??_C@_01NANMIPIL@N?$AA@ DB 'N', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L?$AA@
CONST	SEGMENT
??_C@_01OCOKONAJ@L?$AA@ DB 'L', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KNKLHLMO@K?$AA@
CONST	SEGMENT
??_C@_01KNKLHLMO@K?$AA@ DB 'K', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LELAEKIP@J?$AA@
CONST	SEGMENT
??_C@_01LELAEKIP@J?$AA@ DB 'J', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I?$AA@
CONST	SEGMENT
??_C@_01JPJNBJEM@I?$AA@ DB 'I', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IGIGCIAN@H?$AA@
CONST	SEGMENT
??_C@_01IGIGCIAN@H?$AA@ DB 'H', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BBODEMC@G?$AA@
CONST	SEGMENT
??_C@_01BBODEMC@G?$AA@ DB 'G', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BIAFAFID@F?$AA@
CONST	SEGMENT
??_C@_01BIAFAFID@F?$AA@ DB 'F', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E?$AA@
CONST	SEGMENT
??_C@_01DDCIFGEA@E?$AA@ DB 'E', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT
??_C@_01GFHCPBMG@C?$AA@ DB 'C', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A?$AA@
CONST	SEGMENT
??_C@_01FHEEJDEE@A?$AA@ DB 'A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LAKCGALK@9?$AA@
CONST	SEGMENT
??_C@_01LAKCGALK@9?$AA@ DB '9', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KJLJFBPL@8?$AA@
CONST	SEGMENT
??_C@_01KJLJFBPL@8?$AA@ DB '8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01COCBENDE@7?$AA@
CONST	SEGMENT
??_C@_01COCBENDE@7?$AA@ DB '7', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01DHDKHMHF@6?$AA@
CONST	SEGMENT
??_C@_01DHDKHMHF@6?$AA@ DB '6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5?$AA@
CONST	SEGMENT
??_C@_01BMBHCPLG@5?$AA@ DB '5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FAMBOPH@4?$AA@
CONST	SEGMENT
??_C@_01FAMBOPH@4?$AA@ DB '4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3?$AA@
CONST	SEGMENT
??_C@_01EKENIIDA@3?$AA@ DB '3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2?$AA@
CONST	SEGMENT
??_C@_01FDFGLJHB@2?$AA@ DB '2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EPKLNCFC@TXT_KEY_KEYBOARD_ESCAPE?$AA@
CONST	SEGMENT
??_C@_0BI@EPKLNCFC@TXT_KEY_KEYBOARD_ESCAPE?$AA@ DB 'TXT_KEY_KEYBOARD_ESCA'
	DB	'PE', 00H					; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CreateKeyStringFromKBCode@CvHotKeyInfo@@SA?AVCvString@@PBD@Z
_TEXT	SEGMENT
tv991 = -1356						; size = 4
tv978 = -1352						; size = 4
tv75 = -1348						; size = 4
tv1015 = -1344						; size = 4
tv1010 = -1338						; size = 1
tv1003 = -1337						; size = 1
tv963 = -1336						; size = 4
tv999 = -1332						; size = 4
$T228292 = -1328					; size = 4
$T228282 = -1324					; size = 4
_asCvKeyBoardMapping$ = -1320				; size = 1308
_i$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pszHotKey$ = 12					; size = 4
?CreateKeyStringFromKBCode@CvHotKeyInfo@@SA?AVCvString@@PBD@Z PROC ; CvHotKeyInfo::CreateKeyStringFromKBCode, COMDAT

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1356				; 0000054cH
	mov	DWORD PTR $T228282[ebp], 0

; 350  : 	struct CvKeyBoardMapping
; 351  : 	{
; 352  : 		const char* szDefineString;
; 353  : 		const char* szKeyString;
; 354  : 		bool bIsLocalizedText;
; 355  : 	};
; 356  : 
; 357  : 	// TODO - this should be a stl map instead of looping strcmp
; 358  : 	const CvKeyBoardMapping asCvKeyBoardMapping[] =
; 359  : 	{
; 360  : 		{"KB_ESCAPE", "TXT_KEY_KEYBOARD_ESCAPE", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp], OFFSET ??_C@_09EHCNAJID@KB_ESCAPE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+4], OFFSET ??_C@_0BI@EPKLNCFC@TXT_KEY_KEYBOARD_ESCAPE?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+8], 1

; 361  : 		{"KB_0","0", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+12], OFFSET ??_C@_04JPEFKOHC@KB_0?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+16], OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+20], 0

; 362  : 		{"KB_1","1", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+24], OFFSET ??_C@_04IGFOJPDD@KB_1?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+28], OFFSET ??_C@_01HIHLOKLC@1?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+32], 0

; 363  : 		{"KB_2","2", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+36], OFFSET ??_C@_04KNHDMMPA@KB_2?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+40], OFFSET ??_C@_01FDFGLJHB@2?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+44], 0

; 364  : 		{"KB_3","3", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+48], OFFSET ??_C@_04LEGIPNLB@KB_3?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+52], OFFSET ??_C@_01EKENIIDA@3?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+56], 0

; 365  : 		{"KB_4","4", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+60], OFFSET ??_C@_04PLCJGLHG@KB_4?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+64], OFFSET ??_C@_01FAMBOPH@4?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+68], 0

; 366  : 		{"KB_5","5", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+72], OFFSET ??_C@_04OCDCFKDH@KB_5?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+76], OFFSET ??_C@_01BMBHCPLG@5?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+80], 0

; 367  : 		{"KB_6","6", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+84], OFFSET ??_C@_04MJBPAJPE@KB_6?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+88], OFFSET ??_C@_01DHDKHMHF@6?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+92], 0

; 368  : 		{"KB_7","7", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+96], OFFSET ??_C@_04NAAEDILF@KB_7?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+100], OFFSET ??_C@_01COCBENDE@7?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+104], 0

; 369  : 		{"KB_8","8", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+108], OFFSET ??_C@_04FHJMCEHK@KB_8?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+112], OFFSET ??_C@_01KJLJFBPL@8?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+116], 0

; 370  : 		{"KB_9","9", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+120], OFFSET ??_C@_04EOIHBFDL@KB_9?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+124], OFFSET ??_C@_01LAKCGALK@9?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+128], 0

; 371  : 		{"KB_MINUS","-", false},	    // - on main keyboard

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+132], OFFSET ??_C@_08JNBLMEAN@KB_MINUS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+136], OFFSET ??_C@_01JOAMLHOP@?9?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+140], 0

; 372  : 		{"KB_A","A", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+144], OFFSET ??_C@_04KJGBOGMF@KB_A?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+148], OFFSET ??_C@_01FHEEJDEE@A?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+152], 0

; 373  : 		{"KB_B","B", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+156], OFFSET ??_C@_04ICEMLFAG@KB_B?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+160], OFFSET ??_C@_01HMGJMAIH@B?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+164], 0

; 374  : 		{"KB_C","C", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+168], OFFSET ??_C@_04JLFHIEEH@KB_C?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+172], OFFSET ??_C@_01GFHCPBMG@C?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+176], 0

; 375  : 		{"KB_D","D", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+180], OFFSET ??_C@_04NEBGBCIA@KB_D?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+184], OFFSET ??_C@_01CKDDGHAB@D?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+188], 0

; 376  : 		{"KB_E","E", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+192], OFFSET ??_C@_04MNANCDMB@KB_E?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+196], OFFSET ??_C@_01DDCIFGEA@E?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+200], 0

; 377  : 		{"KB_F","F", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+204], OFFSET ??_C@_04OGCAHAAC@KB_F?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+208], OFFSET ??_C@_01BIAFAFID@F?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+212], 0

; 378  : 		{"KB_G","G", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+216], OFFSET ??_C@_04PPDLEBED@KB_G?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+220], OFFSET ??_C@_01BBODEMC@G?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+224], 0

; 379  : 		{"KB_H","H", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+228], OFFSET ??_C@_04HIKDFNIM@KB_H?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+232], OFFSET ??_C@_01IGIGCIAN@H?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+236], 0

; 380  : 		{"KB_I","I", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+240], OFFSET ??_C@_04GBLIGMMN@KB_I?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+244], OFFSET ??_C@_01JPJNBJEM@I?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+248], 0

; 381  : 		{"KB_J","J", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+252], OFFSET ??_C@_04EKJFDPAO@KB_J?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+256], OFFSET ??_C@_01LELAEKIP@J?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+260], 0

; 382  : 		{"KB_K","K", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+264], OFFSET ??_C@_04FDIOAOEP@KB_K?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+268], OFFSET ??_C@_01KNKLHLMO@K?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+272], 0

; 383  : 		{"KB_L","L", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+276], OFFSET ??_C@_04BMMPJIII@KB_L?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+280], OFFSET ??_C@_01OCOKONAJ@L?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+284], 0

; 384  : 		{"KB_M","M", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+288], OFFSET ??_C@_04FNEKJMJ@KB_M?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+292], OFFSET ??_C@_01PLPBNMEI@M?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+296], 0

; 385  : 		{"KB_N","N", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+300], OFFSET ??_C@_04COPJPKAK@KB_N?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+304], OFFSET ??_C@_01NANMIPIL@N?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+308], 0

; 386  : 		{"KB_O","O", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+312], OFFSET ??_C@_04DHOCMLEL@KB_O?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+316], OFFSET ??_C@_01MJMHLOMK@O?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+320], 0

; 387  : 		{"KB_P","P", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+324], OFFSET ??_C@_04PKLIMFNF@KB_P?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+328], OFFSET ??_C@_01EJNLAFE@P?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+332], 0

; 388  : 		{"KB_Q","Q", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+336], OFFSET ??_C@_04ODKDPEJE@KB_Q?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+340], OFFSET ??_C@_01BNIGIBBF@Q?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+344], 0

; 389  : 		{"KB_R","R", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+348], OFFSET ??_C@_04MIIOKHFH@KB_R?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+352], OFFSET ??_C@_01DGKLNCNG@R?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+356], 0

; 390  : 		{"KB_S","S", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+360], OFFSET ??_C@_04NBJFJGBG@KB_S?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+364], OFFSET ??_C@_01CPLAODJH@S?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+368], 0

; 391  : 		{"KB_T","T", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+372], OFFSET ??_C@_04JONEAANB@KB_T?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+376], OFFSET ??_C@_01GAPBHFFA@T?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+380], 0

; 392  : 		{"KB_U","U", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+384], OFFSET ??_C@_04IHMPDBJA@KB_U?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+388], OFFSET ??_C@_01HJOKEEBB@U?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+392], 0

; 393  : 		{"KB_V","V", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+396], OFFSET ??_C@_04KMOCGCFD@KB_V?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+400], OFFSET ??_C@_01FCMHBHNC@V?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+404], 0

; 394  : 		{"KB_W","W", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+408], OFFSET ??_C@_04LFPJFDBC@KB_W?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+412], OFFSET ??_C@_01ELNMCGJD@W?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+416], 0

; 395  : 		{"KB_X","X", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+420], OFFSET ??_C@_04DCGBEPNN@KB_X?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+424], OFFSET ??_C@_01MMEEDKFM@X?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+428], 0

; 396  : 		{"KB_Y","Y", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+432], OFFSET ??_C@_04CLHKHOJM@KB_Y?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+436], OFFSET ??_C@_01NFFPALBN@Y?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+440], 0

; 397  : 		{"KB_Z","Z", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+444], OFFSET ??_C@_04FHCNFP@KB_Z?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+448], OFFSET ??_C@_01POHCFINO@Z?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+452], 0

; 398  : 		{"KB_EQUALS","=", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+456], OFFSET ??_C@_09OMOBCFGJ@KB_EQUALS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+460], OFFSET ??_C@_01NEMOKFLO@?$DN?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+464], 0

; 399  : 		{"KB_BACKSPACE", "TXT_KEY_KEYBOARD_BACKSPACE", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+468], OFFSET ??_C@_0N@EBBKLBLP@KB_BACKSPACE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+472], OFFSET ??_C@_0BL@KLEGNEHB@TXT_KEY_KEYBOARD_BACKSPACE?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+476], 1

; 400  : 		{"KB_TAB","TAB", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+480], OFFSET ??_C@_06CLDEKAPK@KB_TAB?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+484], OFFSET ??_C@_03CJMDHCGG@TAB?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+488], 0

; 401  : 		{"KB_LBRACKET","[", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+492], OFFSET ??_C@_0M@NLHAGJIP@KB_LBRACKET?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+496], OFFSET ??_C@_01OHGJGJJP@?$FL?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+500], 0

; 402  : 		{"KB_RBRACKET","]", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+504], OFFSET ??_C@_0M@LPHCPAGM@KB_RBRACKET?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+508], OFFSET ??_C@_01LBDDMOBJ@?$FN?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+512], 0

; 403  : 		{"KB_RETURN", "TXT_KEY_KEYBOARD_ENTER", true},		// Enter on main keyboard

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+516], OFFSET ??_C@_09NNBAMMLK@KB_RETURN?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+520], OFFSET ??_C@_0BH@BCBHEDPH@TXT_KEY_KEYBOARD_ENTER?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+524], 1

; 404  : 		{"KB_LCONTROL", "TXT_KEY_KEYBOARD_LEFT_CONTROL_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+528], OFFSET ??_C@_0M@JANIGIMC@KB_LCONTROL?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+532], OFFSET ??_C@_0CC@NDHGFBBE@TXT_KEY_KEYBOARD_LEFT_CONTROL_KE@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+536], 1

; 405  : 		{"KB_SEMICOLON",";", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+540], OFFSET ??_C@_0N@KPGNPDME@KB_SEMICOLON?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+544], OFFSET ??_C@_01ICJEACDI@?$DL?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+548], 0

; 406  : 		{"KB_APOSTROPHE","'", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+552], OFFSET ??_C@_0O@LDFOBAHH@KB_APOSTROPHE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+556], OFFSET ??_C@_01GEODFPGF@?8?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+560], 0

; 407  : 		{"KB_GRAVE","`", false},		// accent grave

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+564], OFFSET ??_C@_08GNANFKCA@KB_GRAVE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+568], OFFSET ??_C@_01NLNLIGKH@?$GA?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+572], 0

; 408  : 		{"KB_LSHIFT", "TXT_KEY_KEYBOARD_LEFT_SHIFT_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+576], OFFSET ??_C@_09CLKDKJHM@KB_LSHIFT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+580], OFFSET ??_C@_0CA@FCNLNICK@TXT_KEY_KEYBOARD_LEFT_SHIFT_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+584], 1

; 409  : 		{"KB_BACKSLASH","\\"},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+588], OFFSET ??_C@_0N@ENICBGAB@KB_BACKSLASH?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+592], OFFSET ??_C@_01KICIPPFI@?2?$AA@
	xor	eax, eax
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+596], eax

; 410  : 		{"KB_COMMA",",", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+600], OFFSET ??_C@_08FACFHNCI@KB_COMMA?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+604], OFFSET ??_C@_01IHBHIGKO@?0?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+608], 0

; 411  : 		{"KB_PERIOD",".", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+612], OFFSET ??_C@_09DBBBBILN@KB_PERIOD?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+616], OFFSET ??_C@_01LFCBOECM@?4?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+620], 0

; 412  : 		{"KB_SLASH","/", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+624], OFFSET ??_C@_08JJPPIPOI@KB_SLASH?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+628], OFFSET ??_C@_01KMDKNFGN@?1?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+632], 0

; 413  : 		{"KB_RSHIFT", "TXT_KEY_KEYBOARD_RIGHT_SHIFT_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+636], OFFSET ??_C@_09BMECEOOP@KB_RSHIFT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+640], OFFSET ??_C@_0CB@BAOKEAON@TXT_KEY_KEYBOARD_RIGHT_SHIFT_KEY@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+644], 1

; 414  : 		{"KB_NUMPADSTAR", "TXT_KEY_KEYBOARD_NUM_PAD_STAR", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+648], OFFSET ??_C@_0O@KGLPAALC@KB_NUMPADSTAR?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+652], OFFSET ??_C@_0BO@DLOFEBFP@TXT_KEY_KEYBOARD_NUM_PAD_STAR?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+656], 1

; 415  : 		{"KB_LALT", "TXT_KEY_KEYBOARD_LEFT_ALT_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+660], OFFSET ??_C@_07NJJKEGLL@KB_LALT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+664], OFFSET ??_C@_0BO@CDIGMPPB@TXT_KEY_KEYBOARD_LEFT_ALT_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+668], 1

; 416  : 		{"KB_SPACE", "TXT_KEY_KEYBOARD_SPACE_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+672], OFFSET ??_C@_08JFGHCIFG@KB_SPACE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+676], OFFSET ??_C@_0BL@HDMDJGFD@TXT_KEY_KEYBOARD_SPACE_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+680], 1

; 417  : 		{"KB_CAPSLOCK", "TXT_KEY_KEYBOARD_CAPS_LOCK", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+684], OFFSET ??_C@_0M@JHCCGBKO@KB_CAPSLOCK?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+688], OFFSET ??_C@_0BL@EOAPLLGL@TXT_KEY_KEYBOARD_CAPS_LOCK?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+692], 1

; 418  : 		{"KB_F1","F1", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+696], OFFSET ??_C@_05CILFEGOO@KB_F1?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+700], OFFSET ??_C@_02LCPENACN@F1?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+704], 0

; 419  : 		{"KB_F2","F2", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+708], OFFSET ??_C@_05DJIBFCN@KB_F2?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+712], OFFSET ??_C@_02JJNJIDOO@F2?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+716], 0

; 420  : 		{"KB_F3","F3", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+720], OFFSET ??_C@_05BKIDCEGM@KB_F3?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+724], OFFSET ??_C@_02IAMCLCKP@F3?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+728], 0

; 421  : 		{"KB_F4","F4", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+732], OFFSET ??_C@_05FFMCLCKL@KB_F4?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+736], OFFSET ??_C@_02MPIDCEGI@F4?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+740], 0

; 422  : 		{"KB_F5","F5", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+744], OFFSET ??_C@_05EMNJIDOK@KB_F5?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+748], OFFSET ??_C@_02NGJIBFCJ@F5?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+752], 0

; 423  : 		{"KB_F6","F6", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+756], OFFSET ??_C@_05GHPENACJ@KB_F6?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+760], OFFSET ??_C@_02PNLFEGOK@F6?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+764], 0

; 424  : 		{"KB_F7","F7", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+768], OFFSET ??_C@_05HOOPOBGI@KB_F7?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+772], OFFSET ??_C@_02OEKOHHKL@F7?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+776], 0

; 425  : 		{"KB_F8","F8", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+780], OFFSET ??_C@_05PJHHPNKH@KB_F8?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+784], OFFSET ??_C@_02GDDGGLGE@F8?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+788], 0

; 426  : 		{"KB_F9","F9", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+792], OFFSET ??_C@_05OAGMMMOG@KB_F9?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+796], OFFSET ??_C@_02HKCNFKCF@F9?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+800], 0

; 427  : 		{"KB_F10","F10", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+804], OFFSET ??_C@_06JINMEMMK@KB_F10?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+808], OFFSET ??_C@_03JKCLJOFG@F10?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+812], 0

; 428  : 		{"KB_NUMLOCK", "TXT_KEY_KEYBOARD_NUM_LOCK", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+816], OFFSET ??_C@_0L@JHKMNOIL@KB_NUMLOCK?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+820], OFFSET ??_C@_0BK@GGHFHDNJ@TXT_KEY_KEYBOARD_NUM_LOCK?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+824], 1

; 429  : 		{"KB_SCROLL", "TXT_KEY_KEYBOARD_SCROLL_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+828], OFFSET ??_C@_09DJFEIKLA@KB_SCROLL?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+832], OFFSET ??_C@_0BM@OHEKFNFG@TXT_KEY_KEYBOARD_SCROLL_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+836], 1

; 430  : 		{"KB_NUMPAD7", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER7", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+840], OFFSET ??_C@_0L@FEKGPDEE@KB_NUMPAD7?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+844], OFFSET ??_C@_0CA@GLOBIACK@TXT_KEY_KEYBOARD_NUMPAD_NUMBER7?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+848], 1

; 431  : 		{"KB_NUMPAD8", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER8", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+852], OFFSET ??_C@_0L@NDDOOPIL@KB_NUMPAD8?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+856], OFFSET ??_C@_0CA@OMHJJMOF@TXT_KEY_KEYBOARD_NUMPAD_NUMBER8?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+860], 1

; 432  : 		{"KB_NUMPAD9", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER9", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+864], OFFSET ??_C@_0L@MKCFNOMK@KB_NUMPAD9?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+868], OFFSET ??_C@_0CA@PFGCKNKE@TXT_KEY_KEYBOARD_NUMPAD_NUMBER9?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+872], 1

; 433  : 		{"KB_NUMPADMINUS", "TXT_KEY_KEYBOARD_NUMPAD_MINUS", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+876], OFFSET ??_C@_0P@EINPFFDM@KB_NUMPADMINUS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+880], OFFSET ??_C@_0BO@FLCCLBF@TXT_KEY_KEYBOARD_NUMPAD_MINUS?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+884], 1

; 434  : 		{"KB_NUMPAD4", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER4", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+888], OFFSET ??_C@_0L@HPILKAIH@KB_NUMPAD4?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+892], OFFSET ??_C@_0CA@EAMMNDOJ@TXT_KEY_KEYBOARD_NUMPAD_NUMBER4?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+896], 1

; 435  : 		{"KB_NUMPAD5", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER5", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+900], OFFSET ??_C@_0L@GGJAJBMG@KB_NUMPAD5?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+904], OFFSET ??_C@_0CA@FJNHOCKI@TXT_KEY_KEYBOARD_NUMPAD_NUMBER5?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+908], 1

; 436  : 		{"KB_NUMPAD6", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER6", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+912], OFFSET ??_C@_0L@ENLNMCAF@KB_NUMPAD6?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+916], OFFSET ??_C@_0CA@HCPKLBGL@TXT_KEY_KEYBOARD_NUMPAD_NUMBER6?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+920], 1

; 437  : 		{"KB_NUMPADPLUS", "TXT_KEY_KEYBOARD_NUMPAD_PLUS", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+924], OFFSET ??_C@_0O@HGIGDPPP@KB_NUMPADPLUS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+928], OFFSET ??_C@_0BN@KJJJEOJP@TXT_KEY_KEYBOARD_NUMPAD_PLUS?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+932], 1

; 438  : 		{"KB_NUMPAD1", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER1", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+936], OFFSET ??_C@_0L@CPMFEMC@KB_NUMPAD1?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+940], OFFSET ??_C@_0CA@DNLLCHKM@TXT_KEY_KEYBOARD_NUMPAD_NUMBER1?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+944], 1

; 439  : 		{"KB_NUMPAD2", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER2", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+948], OFFSET ??_C@_0L@CJNBAHAB@KB_NUMPAD2?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+952], OFFSET ??_C@_0CA@BGJGHEGP@TXT_KEY_KEYBOARD_NUMPAD_NUMBER2?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+956], 1

; 440  : 		{"KB_NUMPAD3", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER3", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+960], OFFSET ??_C@_0L@DAMKDGEA@KB_NUMPAD3?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+964], OFFSET ??_C@_0CA@PINEFCO@TXT_KEY_KEYBOARD_NUMPAD_NUMBER3?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+968], 1

; 441  : 		{"KB_NUMPAD0", "TXT_KEY_KEYBOARD_NUMPAD_NUMBER0", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+972], OFFSET ??_C@_0L@BLOHGFID@KB_NUMPAD0?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+976], OFFSET ??_C@_0CA@CEKABGON@TXT_KEY_KEYBOARD_NUMPAD_NUMBER0?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+980], 1

; 442  : 		{"KB_NUMPADPERIOD", "TXT_KEY_KEYBOARD_NUMPAD_PERIOD", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+984], OFFSET ??_C@_0BA@GABKNMBG@KB_NUMPADPERIOD?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+988], OFFSET ??_C@_0BP@CCOFCJAE@TXT_KEY_KEYBOARD_NUMPAD_PERIOD?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+992], 1

; 443  : 		{"KB_F11","F11", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+996], OFFSET ??_C@_06IBMHHNIL@KB_F11?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1000], OFFSET ??_C@_03IDDAKPBH@F11?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1004], 0

; 444  : 		{"KB_F12","F12", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1008], OFFSET ??_C@_06KKOKCOEI@KB_F12?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1012], OFFSET ??_C@_03KIBNPMNE@F12?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1016], 0

; 445  : 		{"KB_NUMPADEQUALS", "TXT_KEY_KEYBOARD_NUMPAD_EQUALS", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1020], OFFSET ??_C@_0BA@LNOKOBMC@KB_NUMPADEQUALS?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1024], OFFSET ??_C@_0BP@PPBFBENA@TXT_KEY_KEYBOARD_NUMPAD_EQUALS?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1028], 1

; 446  : 		{"KB_AT","@", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1032], OFFSET ??_C@_05DFHAMPIJ@KB_AT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1036], OFFSET ??_C@_01EOFPKCAF@?$EA?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1040], 0

; 447  : 		{"KB_UNDERLINE","_", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1044], OFFSET ??_C@_0N@KCALIECB@KB_UNDERLINE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1048], OFFSET ??_C@_01IDAFKMJL@_?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1052], 0

; 448  : 		{"KB_COLON",":", false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1056], OFFSET ??_C@_08GMIFNCOM@KB_COLON?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1060], OFFSET ??_C@_01JLIPDDHJ@?3?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1064], 0

; 449  : 		{"KB_NUMPADENTER", "TXT_KEY_KEYBOARD_NUMPAD_ENTER_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1068], OFFSET ??_C@_0P@CMDFCOIL@KB_NUMPADENTER?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1072], OFFSET ??_C@_0CC@CIHHFHLM@TXT_KEY_KEYBOARD_NUMPAD_ENTER_KE@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1076], 1

; 450  : 		{"KB_RCONTROL", "TXT_KEY_KEYBOARD_RIGHT_CONTROL_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1080], OFFSET ??_C@_0M@PENKPBCB@KB_RCONTROL?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1084], OFFSET ??_C@_0CD@KJBJEJNK@TXT_KEY_KEYBOARD_RIGHT_CONTROL_K@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1088], 1

; 451  : 		{"KB_VOLUMEDOWN", "TXT_KEY_KEYBOARD_VOLUME_DOWN", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1092], OFFSET ??_C@_0O@HKGFIOHI@KB_VOLUMEDOWN?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1096], OFFSET ??_C@_0BN@MAGEFPIG@TXT_KEY_KEYBOARD_VOLUME_DOWN?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1100], 1

; 452  : 		{"KB_VOLUMEUP", "TXT_KEY_KEYBOARD_VOLUME_UP", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1104], OFFSET ??_C@_0M@PBJILMIJ@KB_VOLUMEUP?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1108], OFFSET ??_C@_0BL@KNAELJCN@TXT_KEY_KEYBOARD_VOLUME_UP?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1112], 1

; 453  : 		{"KB_NUMPADCOMMA", "TXT_KEY_KEYBOARD_NUMPAD_COMMA", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1116], OFFSET ??_C@_0P@IFOBOMBJ@KB_NUMPADCOMMA?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1120], OFFSET ??_C@_0BO@MIIMJCDA@TXT_KEY_KEYBOARD_NUMPAD_COMMA?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1124], 1

; 454  : 		{"KB_NUMPADSLASH", "TXT_KEY_KEYBOARD_NUMPAD_SLASH", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1128], OFFSET ??_C@_0P@EMDLBONJ@KB_NUMPADSLASH?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1132], OFFSET ??_C@_0BO@BFGGAPA@TXT_KEY_KEYBOARD_NUMPAD_SLASH?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1136], 1

; 455  : 		{"KB_SYSRQ", "TXT_KEY_KEYBOARD_SYSRQ", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1140], OFFSET ??_C@_08FBCNMLCB@KB_SYSRQ?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1144], OFFSET ??_C@_0BH@LKMLDHGM@TXT_KEY_KEYBOARD_SYSRQ?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1148], 1

; 456  : 		{"KB_RALT", "TXT_KEY_KEYBOARD_RIGHT_ALT_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1152], OFFSET ??_C@_07GEKGPFI@KB_RALT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1156], OFFSET ??_C@_0BP@PAKICBOG@TXT_KEY_KEYBOARD_RIGHT_ALT_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1160], 1

; 457  : 		{"KB_PAUSE", "TXT_KEY_KEYBOARD_PAUSE_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1164], OFFSET ??_C@_08INCOIHHC@KB_PAUSE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1168], OFFSET ??_C@_0BL@LMGANIHN@TXT_KEY_KEYBOARD_PAUSE_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1172], 1

; 458  : 		{"KB_HOME", "TXT_KEY_KEYBOARD_HOME_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1176], OFFSET ??_C@_07JONONOGP@KB_HOME?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1180], OFFSET ??_C@_0BK@IOACHACJ@TXT_KEY_KEYBOARD_HOME_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1184], 1

; 459  : 		{"KB_UP", "TXT_KEY_KEYBOARD_UP_ARROW", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1188], OFFSET ??_C@_05EKDDABCB@KB_UP?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1192], OFFSET ??_C@_0BK@FLFDENIF@TXT_KEY_KEYBOARD_UP_ARROW?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1196], 1

; 460  : 		{"KB_PGUP", "TXT_KEY_KEYBOARD_PAGE_UP", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1200], OFFSET ??_C@_07COHKDOBP@KB_PGUP?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1204], OFFSET ??_C@_0BJ@NBNPCDAG@TXT_KEY_KEYBOARD_PAGE_UP?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1208], 1

; 461  : 		{"KB_LEFT", "TXT_KEY_KEYBOARD_LEFT_ARROW", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1212], OFFSET ??_C@_07FLGPFEDK@KB_LEFT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1216], OFFSET ??_C@_0BM@KLJKMCGN@TXT_KEY_KEYBOARD_LEFT_ARROW?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1220], 1

; 462  : 		{"KB_RIGHT", "TXT_KEY_KEYBOARD_RIGHT_ARROW", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1224], OFFSET ??_C@_08EJCMJNCN@KB_RIGHT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1228], OFFSET ??_C@_0BN@NDNIMMLA@TXT_KEY_KEYBOARD_RIGHT_ARROW?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1232], 1

; 463  : 		{"KB_END", "TXT_KEY_KEYBOARD_END_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1236], OFFSET ??_C@_06JOJHHALL@KB_END?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1240], OFFSET ??_C@_0BJ@KNJHEJNM@TXT_KEY_KEYBOARD_END_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1244], 1

; 464  : 		{"KB_DOWN", "TXT_KEY_KEYBOARD_DOWN_ARROW", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1248], OFFSET ??_C@_07KJGLMMAD@KB_DOWN?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1252], OFFSET ??_C@_0BM@FALLMIDA@TXT_KEY_KEYBOARD_DOWN_ARROW?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1256], 1

; 465  : 		{"KB_PGDN", "TXT_KEY_KEYBOARD_PAGE_DOWN", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1260], OFFSET ??_C@_07OHNPMIIH@KB_PGDN?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1264], OFFSET ??_C@_0BL@KGMOKEGO@TXT_KEY_KEYBOARD_PAGE_DOWN?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1268], 1

; 466  : 		{"KB_INSERT", "TXT_KEY_KEYBOARD_INSERT_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1272], OFFSET ??_C@_09IABKIFBJ@KB_INSERT?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1276], OFFSET ??_C@_0BM@DCCFEH@TXT_KEY_KEYBOARD_INSERT_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1280], 1

; 467  : 		{"KB_DELETE", "TXT_KEY_KEYBOARD_DELETE_KEY", true},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1284], OFFSET ??_C@_09DOOOELOL@KB_DELETE?$AA@
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1288], OFFSET ??_C@_0BM@OLGFPKBD@TXT_KEY_KEYBOARD_DELETE_KEY?$AA@
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1292], 1

; 468  : 		{NULL, NULL, false},

	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1296], 0
	mov	DWORD PTR _asCvKeyBoardMapping$[ebp+1300], 0
	mov	BYTE PTR _asCvKeyBoardMapping$[ebp+1304], 0

; 469  : 	};
; 470  : 
; 471  : 	size_t i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN5@CreateKeyS:

; 472  : 	while(asCvKeyBoardMapping[i].szDefineString != NULL)

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	cmp	DWORD PTR _asCvKeyBoardMapping$[ebp+ecx], 0
	je	$LN4@CreateKeyS

; 473  : 	{
; 474  : 		if(strcmp(pszHotKey, asCvKeyBoardMapping[i].szDefineString) == 0)

	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _asCvKeyBoardMapping$[ebp+edx]
	mov	DWORD PTR tv999[ebp], eax
	mov	ecx, DWORD PTR _pszHotKey$[ebp]
	mov	DWORD PTR tv963[ebp], ecx
$LL20@CreateKeyS:
	mov	edx, DWORD PTR tv963[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv1003[ebp], al
	mov	ecx, DWORD PTR tv999[ebp]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $LN21@CreateKeyS
	cmp	BYTE PTR tv1003[ebp], 0
	je	SHORT $LN22@CreateKeyS
	mov	edx, DWORD PTR tv963[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv1010[ebp], al
	mov	ecx, DWORD PTR tv999[ebp]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN21@CreateKeyS
	add	DWORD PTR tv963[ebp], 2
	add	DWORD PTR tv999[ebp], 2
	cmp	BYTE PTR tv1010[ebp], 0
	jne	SHORT $LL20@CreateKeyS
$LN22@CreateKeyS:
	mov	DWORD PTR tv1015[ebp], 0
	jmp	SHORT $LN23@CreateKeyS
$LN21@CreateKeyS:
	sbb	edx, edx
	sbb	edx, -1
	mov	DWORD PTR tv1015[ebp], edx
$LN23@CreateKeyS:
	mov	eax, DWORD PTR tv1015[ebp]
	mov	DWORD PTR tv75[ebp], eax
	cmp	DWORD PTR tv75[ebp], 0
	jne	$LN3@CreateKeyS

; 475  : 		{
; 476  : 			if(asCvKeyBoardMapping[i].bIsLocalizedText)

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	movzx	edx, BYTE PTR _asCvKeyBoardMapping$[ebp+ecx+8]
	test	edx, edx
	je	SHORT $LN2@CreateKeyS

; 477  : 			{
; 478  : 				return GetLocalizedText(asCvKeyBoardMapping[i].szKeyString);

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _asCvKeyBoardMapping$[ebp+eax+4]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	eax, DWORD PTR $T228282[ebp]
	or	eax, 1
	mov	DWORD PTR $T228282[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN6@CreateKeyS

; 479  : 			}
; 480  : 			else

	jmp	SHORT $LN3@CreateKeyS
$LN2@CreateKeyS:

; 481  : 			{
; 482  : 				return asCvKeyBoardMapping[i].szKeyString;

	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _asCvKeyBoardMapping$[ebp+ecx+4]
	mov	DWORD PTR $T228292[ebp], edx
	cmp	DWORD PTR $T228292[ebp], 0
	je	SHORT $LN12@CreateKeyS
	mov	eax, DWORD PTR $T228292[ebp]
	mov	DWORD PTR tv978[ebp], eax
	jmp	SHORT $LN13@CreateKeyS
$LN12@CreateKeyS:
	mov	DWORD PTR tv978[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN13@CreateKeyS:
	mov	ecx, DWORD PTR tv978[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T228282[ebp]
	or	edx, 1
	mov	DWORD PTR $T228282[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN6@CreateKeyS
$LN3@CreateKeyS:

; 483  : 			}
; 484  : 		}
; 485  : 		i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 486  : 	}

	jmp	$LN5@CreateKeyS
$LN4@CreateKeyS:

; 487  : 
; 488  : 	return "";

	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	ecx, ecx
	je	SHORT $LN17@CreateKeyS
	mov	DWORD PTR tv991[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN18@CreateKeyS
$LN17@CreateKeyS:
	mov	DWORD PTR tv991[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN18@CreateKeyS:
	mov	edx, DWORD PTR tv991[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR $T228282[ebp]
	or	eax, 1
	mov	DWORD PTR $T228282[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@CreateKeyS:

; 489  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateKeyStringFromKBCode@CvHotKeyInfo@@SA?AVCvString@@PBD@Z ENDP ; CvHotKeyInfo::CreateKeyStringFromKBCode
_TEXT	ENDS
PUBLIC	?setHotKeyDescription@CvHotKeyInfo@@QAEXPBD00@Z	; CvHotKeyInfo::setHotKeyDescription
PUBLIC	?getHotKey@CvHotKeyInfo@@QBEPBDXZ		; CvHotKeyInfo::getHotKey
PUBLIC	?setOrderPriority@CvHotKeyInfo@@QAEXH@Z		; CvHotKeyInfo::setOrderPriority
PUBLIC	??_C@_0O@IDIFOGP@OrderPriority?$AA@		; `string'
PUBLIC	?setCtrlDownAlt@CvHotKeyInfo@@QAEX_N@Z		; CvHotKeyInfo::setCtrlDownAlt
PUBLIC	??_C@_0M@MPNOPFE@CtrlDownAlt?$AA@		; `string'
PUBLIC	?setCtrlDown@CvHotKeyInfo@@QAEX_N@Z		; CvHotKeyInfo::setCtrlDown
PUBLIC	??_C@_08LGMEGEPK@CtrlDown?$AA@			; `string'
PUBLIC	?setShiftDownAlt@CvHotKeyInfo@@QAEX_N@Z		; CvHotKeyInfo::setShiftDownAlt
PUBLIC	??_C@_0N@PJIAADMH@ShiftDownAlt?$AA@		; `string'
PUBLIC	?setShiftDown@CvHotKeyInfo@@QAEX_N@Z		; CvHotKeyInfo::setShiftDown
PUBLIC	??_C@_09HKGKCFMG@ShiftDown?$AA@			; `string'
PUBLIC	?setAltDownAlt@CvHotKeyInfo@@QAEX_N@Z		; CvHotKeyInfo::setAltDownAlt
PUBLIC	??_C@_0L@CMBAELLL@AltDownAlt?$AA@		; `string'
PUBLIC	?setAltDown@CvHotKeyInfo@@QAEX_N@Z		; CvHotKeyInfo::setAltDown
PUBLIC	??_C@_07MHLJKKID@AltDown?$AA@			; `string'
PUBLIC	?setHotKeyPriorityAlt@CvHotKeyInfo@@QAEXH@Z	; CvHotKeyInfo::setHotKeyPriorityAlt
PUBLIC	??_C@_0BC@CDBJAMJN@HotKeyPriorityAlt?$AA@	; `string'
PUBLIC	?setHotKeyValAlt@CvHotKeyInfo@@QAEXH@Z		; CvHotKeyInfo::setHotKeyValAlt
PUBLIC	??_C@_09PJBJINPI@HotKeyAlt?$AA@			; `string'
PUBLIC	?setHotKeyPriority@CvHotKeyInfo@@QAEXH@Z	; CvHotKeyInfo::setHotKeyPriority
PUBLIC	??_C@_0P@PEOGILMO@HotKeyPriority?$AA@		; `string'
PUBLIC	?setHotKeyVal@CvHotKeyInfo@@QAEXH@Z		; CvHotKeyInfo::setHotKeyVal
PUBLIC	?setHotKey@CvHotKeyInfo@@QAEXPBD@Z		; CvHotKeyInfo::setHotKey
PUBLIC	??_C@_06BMHDPEFH@HotKey?$AA@			; `string'
EXTRN	__imp_?GetBool@Results@Database@@QAE_NPBD@Z:PROC
;	COMDAT ??_C@_0O@IDIFOGP@OrderPriority?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0O@IDIFOGP@OrderPriority?$AA@ DB 'OrderPriority', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPNOPFE@CtrlDownAlt?$AA@
CONST	SEGMENT
??_C@_0M@MPNOPFE@CtrlDownAlt?$AA@ DB 'CtrlDownAlt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LGMEGEPK@CtrlDown?$AA@
CONST	SEGMENT
??_C@_08LGMEGEPK@CtrlDown?$AA@ DB 'CtrlDown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PJIAADMH@ShiftDownAlt?$AA@
CONST	SEGMENT
??_C@_0N@PJIAADMH@ShiftDownAlt?$AA@ DB 'ShiftDownAlt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HKGKCFMG@ShiftDown?$AA@
CONST	SEGMENT
??_C@_09HKGKCFMG@ShiftDown?$AA@ DB 'ShiftDown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CMBAELLL@AltDownAlt?$AA@
CONST	SEGMENT
??_C@_0L@CMBAELLL@AltDownAlt?$AA@ DB 'AltDownAlt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHLJKKID@AltDown?$AA@
CONST	SEGMENT
??_C@_07MHLJKKID@AltDown?$AA@ DB 'AltDown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CDBJAMJN@HotKeyPriorityAlt?$AA@
CONST	SEGMENT
??_C@_0BC@CDBJAMJN@HotKeyPriorityAlt?$AA@ DB 'HotKeyPriorityAlt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PJBJINPI@HotKeyAlt?$AA@
CONST	SEGMENT
??_C@_09PJBJINPI@HotKeyAlt?$AA@ DB 'HotKeyAlt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEOGILMO@HotKeyPriority?$AA@
CONST	SEGMENT
??_C@_0P@PEOGILMO@HotKeyPriority?$AA@ DB 'HotKeyPriority', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMHDPEFH@HotKey?$AA@
CONST	SEGMENT
??_C@_06BMHDPEFH@HotKey?$AA@ DB 'HotKey', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
__ehfuncinfo$?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv198 = -80						; size = 4
_this$ = -76						; size = 4
$T228325 = -72						; size = 4
$T228324 = -68						; size = 4
$T228320 = -64						; size = 4
$T228314 = -60						; size = 4
$T228307 = -56						; size = 28
_iHotKeyValAlt$ = -28					; size = 4
_iHotKeyVal$ = -24					; size = 4
_szHelp$ = -20						; size = 4
_szDisabledHelp$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvHotKeyInfo::CacheResults, COMDAT
; _this$ = ecx

; 492  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 493  : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@CacheResul@2

; 494  : 		return false;

	xor	al, al
	jmp	$LN4@CacheResul@2
$LN3@CacheResul@2:

; 495  : 
; 496  : 	setHotKey(kResults.GetText("HotKey"));

	push	OFFSET ??_C@_06BMHDPEFH@HotKey?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setHotKey@CvHotKeyInfo@@QAEXPBD@Z	; CvHotKeyInfo::setHotKey

; 497  : 	const int iHotKeyVal = GetHotKeyInt(kResults.GetText("HotKey"));

	push	OFFSET ??_C@_06BMHDPEFH@HotKey?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHotKeyInt@CvHotKeyInfo@@IAEHPBD@Z	; CvHotKeyInfo::GetHotKeyInt
	mov	DWORD PTR _iHotKeyVal$[ebp], eax

; 498  : 	setHotKeyVal(iHotKeyVal);

	mov	eax, DWORD PTR _iHotKeyVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setHotKeyVal@CvHotKeyInfo@@QAEXH@Z	; CvHotKeyInfo::setHotKeyVal

; 499  : 	setHotKeyPriority(kResults.GetInt("HotKeyPriority"));

	push	OFFSET ??_C@_0P@PEOGILMO@HotKeyPriority?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setHotKeyPriority@CvHotKeyInfo@@QAEXH@Z ; CvHotKeyInfo::setHotKeyPriority

; 500  : 
; 501  : 	const int iHotKeyValAlt = GetHotKeyInt(kResults.GetText("HotKeyAlt"));

	push	OFFSET ??_C@_09PJBJINPI@HotKeyAlt?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHotKeyInt@CvHotKeyInfo@@IAEHPBD@Z	; CvHotKeyInfo::GetHotKeyInt
	mov	DWORD PTR _iHotKeyValAlt$[ebp], eax

; 502  : 	setHotKeyValAlt(iHotKeyValAlt);

	mov	ecx, DWORD PTR _iHotKeyValAlt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setHotKeyValAlt@CvHotKeyInfo@@QAEXH@Z	; CvHotKeyInfo::setHotKeyValAlt

; 503  : 	setHotKeyPriorityAlt(kResults.GetInt("HotKeyPriorityAlt"));

	push	OFFSET ??_C@_0BC@CDBJAMJN@HotKeyPriorityAlt?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setHotKeyPriorityAlt@CvHotKeyInfo@@QAEXH@Z ; CvHotKeyInfo::setHotKeyPriorityAlt

; 504  : 
; 505  : 	setAltDown(kResults.GetBool("AltDown"));

	push	OFFSET ??_C@_07MHLJKKID@AltDown?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	movzx	edx, al
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAltDown@CvHotKeyInfo@@QAEX_N@Z	; CvHotKeyInfo::setAltDown

; 506  : 	setAltDownAlt(kResults.GetBool("AltDownAlt"));

	push	OFFSET ??_C@_0L@CMBAELLL@AltDownAlt?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAltDownAlt@CvHotKeyInfo@@QAEX_N@Z	; CvHotKeyInfo::setAltDownAlt

; 507  : 
; 508  : 	setShiftDown(kResults.GetBool("ShiftDown"));

	push	OFFSET ??_C@_09HKGKCFMG@ShiftDown?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setShiftDown@CvHotKeyInfo@@QAEX_N@Z	; CvHotKeyInfo::setShiftDown

; 509  : 	setShiftDownAlt(kResults.GetBool("ShiftDownAlt"));

	push	OFFSET ??_C@_0N@PJIAADMH@ShiftDownAlt?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	movzx	edx, al
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setShiftDownAlt@CvHotKeyInfo@@QAEX_N@Z	; CvHotKeyInfo::setShiftDownAlt

; 510  : 
; 511  : 	setCtrlDown(kResults.GetBool("CtrlDown"));

	push	OFFSET ??_C@_08LGMEGEPK@CtrlDown?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setCtrlDown@CvHotKeyInfo@@QAEX_N@Z	; CvHotKeyInfo::setCtrlDown

; 512  : 	setCtrlDownAlt(kResults.GetBool("CtrlDownAlt"));

	push	OFFSET ??_C@_0M@MPNOPFE@CtrlDownAlt?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	movzx	ecx, al
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setCtrlDownAlt@CvHotKeyInfo@@QAEX_N@Z	; CvHotKeyInfo::setCtrlDownAlt

; 513  : 
; 514  : 	setOrderPriority(kResults.GetInt("OrderPriority"));

	push	OFFSET ??_C@_0O@IDIFOGP@OrderPriority?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setOrderPriority@CvHotKeyInfo@@QAEXH@Z	; CvHotKeyInfo::setOrderPriority

; 515  : 
; 516  : 	const char* szHelp = kResults.GetText("Help");

	push	OFFSET ??_C@_04DDFEFHOJ@Help?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szHelp$[ebp], eax

; 517  : 	if(szHelp)

	cmp	DWORD PTR _szHelp$[ebp], 0
	je	SHORT $LN2@CacheResul@2

; 518  : 		m_strHelp = szHelp;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 404				; 00000194H
	mov	DWORD PTR $T228314[ebp], edx
	cmp	DWORD PTR _szHelp$[ebp], 0
	je	SHORT $LN8@CacheResul@2
	mov	eax, DWORD PTR _szHelp$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228314[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN2@CacheResul@2
$LN8@CacheResul@2:
	mov	ecx, DWORD PTR $T228314[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN2@CacheResul@2:

; 519  : 
; 520  : 	const char* szDisabledHelp = kResults.GetText("DisabledHelp");

	push	OFFSET ??_C@_0N@NEBCCCLG@DisabledHelp?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szDisabledHelp$[ebp], eax

; 521  : 	if(szDisabledHelp)

	cmp	DWORD PTR _szDisabledHelp$[ebp], 0
	je	SHORT $LN1@CacheResul@2

; 522  : 		m_strDisabledHelp = szDisabledHelp;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	mov	DWORD PTR $T228320[ebp], ecx
	cmp	DWORD PTR _szDisabledHelp$[ebp], 0
	je	SHORT $LN12@CacheResul@2
	mov	edx, DWORD PTR _szDisabledHelp$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T228320[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@CacheResul@2
$LN12@CacheResul@2:
	mov	ecx, DWORD PTR $T228320[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@CacheResul@2:

; 523  : 
; 524  : 
; 525  : 	setHotKeyDescription(GetTextKey(), NULL, CreateHotKeyFromDescription(getHotKey(), m_bShiftDown, m_bAltDown, m_bCtrlDown));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+286]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+284]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+285]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotKey@CvHotKeyInfo@@QBEPBDXZ	; CvHotKeyInfo::getHotKey
	push	eax
	lea	eax, DWORD PTR $T228307[ebp]
	push	eax
	call	?CreateHotKeyFromDescription@CvHotKeyInfo@@SA?AVCvString@@PBD_N11@Z ; CvHotKeyInfo::CreateHotKeyFromDescription
	add	esp, 20					; 00000014H
	mov	DWORD PTR tv198[ebp], eax
	mov	ecx, DWORD PTR tv198[ebp]
	mov	DWORD PTR $T228324[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T228324[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T228325[ebp], eax
	mov	edx, DWORD PTR $T228325[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setHotKeyDescription@CvHotKeyInfo@@QAEXPBD00@Z ; CvHotKeyInfo::setHotKeyDescription
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T228307[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 526  : 
; 527  : 	return true;

	mov	al, 1
$LN4@CacheResul@2:

; 528  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR $T228307[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvHotKeyInfo::CacheResults
PUBLIC	?getActionInfoIndex@CvHotKeyInfo@@QBEHXZ	; CvHotKeyInfo::getActionInfoIndex
; Function compile flags: /Odtp
;	COMDAT ?getActionInfoIndex@CvHotKeyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getActionInfoIndex@CvHotKeyInfo@@QBEHXZ PROC		; CvHotKeyInfo::getActionInfoIndex, COMDAT
; _this$ = ecx

; 531  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 532  : 	return m_iActionInfoIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 533  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getActionInfoIndex@CvHotKeyInfo@@QBEHXZ ENDP		; CvHotKeyInfo::getActionInfoIndex
_TEXT	ENDS
PUBLIC	?setActionInfoIndex@CvHotKeyInfo@@QAEXH@Z	; CvHotKeyInfo::setActionInfoIndex
; Function compile flags: /Odtp
;	COMDAT ?setActionInfoIndex@CvHotKeyInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setActionInfoIndex@CvHotKeyInfo@@QAEXH@Z PROC		; CvHotKeyInfo::setActionInfoIndex, COMDAT
; _this$ = ecx

; 536  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 537  : 	m_iActionInfoIndex = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+260], ecx

; 538  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setActionInfoIndex@CvHotKeyInfo@@QAEXH@Z ENDP		; CvHotKeyInfo::setActionInfoIndex
_TEXT	ENDS
PUBLIC	?getHotKeyVal@CvHotKeyInfo@@QBEHXZ		; CvHotKeyInfo::getHotKeyVal
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyVal@CvHotKeyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyVal@CvHotKeyInfo@@QBEHXZ PROC			; CvHotKeyInfo::getHotKeyVal, COMDAT
; _this$ = ecx

; 541  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 542  : 	return m_iHotKeyVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 543  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyVal@CvHotKeyInfo@@QBEHXZ ENDP			; CvHotKeyInfo::getHotKeyVal
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setHotKeyVal@CvHotKeyInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setHotKeyVal@CvHotKeyInfo@@QAEXH@Z PROC		; CvHotKeyInfo::setHotKeyVal, COMDAT
; _this$ = ecx

; 546  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 	m_iHotKeyVal = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+264], ecx

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setHotKeyVal@CvHotKeyInfo@@QAEXH@Z ENDP		; CvHotKeyInfo::setHotKeyVal
_TEXT	ENDS
PUBLIC	?getHotKeyPriority@CvHotKeyInfo@@QBEHXZ		; CvHotKeyInfo::getHotKeyPriority
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyPriority@CvHotKeyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyPriority@CvHotKeyInfo@@QBEHXZ PROC		; CvHotKeyInfo::getHotKeyPriority, COMDAT
; _this$ = ecx

; 551  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 552  : 	return m_iHotKeyPriority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 553  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyPriority@CvHotKeyInfo@@QBEHXZ ENDP		; CvHotKeyInfo::getHotKeyPriority
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setHotKeyPriority@CvHotKeyInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setHotKeyPriority@CvHotKeyInfo@@QAEXH@Z PROC		; CvHotKeyInfo::setHotKeyPriority, COMDAT
; _this$ = ecx

; 556  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 557  : 	m_iHotKeyPriority = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+268], ecx

; 558  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setHotKeyPriority@CvHotKeyInfo@@QAEXH@Z ENDP		; CvHotKeyInfo::setHotKeyPriority
_TEXT	ENDS
PUBLIC	?getHotKeyValAlt@CvHotKeyInfo@@QBEHXZ		; CvHotKeyInfo::getHotKeyValAlt
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyValAlt@CvHotKeyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyValAlt@CvHotKeyInfo@@QBEHXZ PROC		; CvHotKeyInfo::getHotKeyValAlt, COMDAT
; _this$ = ecx

; 561  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 562  : 	return m_iHotKeyValAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyValAlt@CvHotKeyInfo@@QBEHXZ ENDP		; CvHotKeyInfo::getHotKeyValAlt
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setHotKeyValAlt@CvHotKeyInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setHotKeyValAlt@CvHotKeyInfo@@QAEXH@Z PROC		; CvHotKeyInfo::setHotKeyValAlt, COMDAT
; _this$ = ecx

; 566  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 567  : 	m_iHotKeyValAlt = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+272], ecx

; 568  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setHotKeyValAlt@CvHotKeyInfo@@QAEXH@Z ENDP		; CvHotKeyInfo::setHotKeyValAlt
_TEXT	ENDS
PUBLIC	?getHotKeyPriorityAlt@CvHotKeyInfo@@QBEHXZ	; CvHotKeyInfo::getHotKeyPriorityAlt
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyPriorityAlt@CvHotKeyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyPriorityAlt@CvHotKeyInfo@@QBEHXZ PROC		; CvHotKeyInfo::getHotKeyPriorityAlt, COMDAT
; _this$ = ecx

; 571  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 572  : 	return m_iHotKeyPriorityAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 573  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyPriorityAlt@CvHotKeyInfo@@QBEHXZ ENDP		; CvHotKeyInfo::getHotKeyPriorityAlt
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setHotKeyPriorityAlt@CvHotKeyInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setHotKeyPriorityAlt@CvHotKeyInfo@@QAEXH@Z PROC	; CvHotKeyInfo::setHotKeyPriorityAlt, COMDAT
; _this$ = ecx

; 576  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 577  : 	m_iHotKeyPriorityAlt = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+276], ecx

; 578  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setHotKeyPriorityAlt@CvHotKeyInfo@@QAEXH@Z ENDP	; CvHotKeyInfo::setHotKeyPriorityAlt
_TEXT	ENDS
PUBLIC	?getOrderPriority@CvHotKeyInfo@@QBEHXZ		; CvHotKeyInfo::getOrderPriority
; Function compile flags: /Odtp
;	COMDAT ?getOrderPriority@CvHotKeyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrderPriority@CvHotKeyInfo@@QBEHXZ PROC		; CvHotKeyInfo::getOrderPriority, COMDAT
; _this$ = ecx

; 581  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 582  : 	return m_iOrderPriority;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 583  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getOrderPriority@CvHotKeyInfo@@QBEHXZ ENDP		; CvHotKeyInfo::getOrderPriority
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setOrderPriority@CvHotKeyInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setOrderPriority@CvHotKeyInfo@@QAEXH@Z PROC		; CvHotKeyInfo::setOrderPriority, COMDAT
; _this$ = ecx

; 586  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 587  : 	m_iOrderPriority = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+280], ecx

; 588  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setOrderPriority@CvHotKeyInfo@@QAEXH@Z ENDP		; CvHotKeyInfo::setOrderPriority
_TEXT	ENDS
PUBLIC	?isAltDown@CvHotKeyInfo@@QBE_NXZ		; CvHotKeyInfo::isAltDown
; Function compile flags: /Odtp
;	COMDAT ?isAltDown@CvHotKeyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isAltDown@CvHotKeyInfo@@QBE_NXZ PROC			; CvHotKeyInfo::isAltDown, COMDAT
; _this$ = ecx

; 591  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 592  : 	return m_bAltDown;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+284]

; 593  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isAltDown@CvHotKeyInfo@@QBE_NXZ ENDP			; CvHotKeyInfo::isAltDown
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setAltDown@CvHotKeyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?setAltDown@CvHotKeyInfo@@QAEX_N@Z PROC			; CvHotKeyInfo::setAltDown, COMDAT
; _this$ = ecx

; 596  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 597  : 	m_bAltDown = b;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+284], cl

; 598  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAltDown@CvHotKeyInfo@@QAEX_N@Z ENDP			; CvHotKeyInfo::setAltDown
_TEXT	ENDS
PUBLIC	?isShiftDown@CvHotKeyInfo@@QBE_NXZ		; CvHotKeyInfo::isShiftDown
; Function compile flags: /Odtp
;	COMDAT ?isShiftDown@CvHotKeyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isShiftDown@CvHotKeyInfo@@QBE_NXZ PROC			; CvHotKeyInfo::isShiftDown, COMDAT
; _this$ = ecx

; 601  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 602  : 	return m_bShiftDown;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+285]

; 603  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isShiftDown@CvHotKeyInfo@@QBE_NXZ ENDP			; CvHotKeyInfo::isShiftDown
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setShiftDown@CvHotKeyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?setShiftDown@CvHotKeyInfo@@QAEX_N@Z PROC		; CvHotKeyInfo::setShiftDown, COMDAT
; _this$ = ecx

; 606  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 	m_bShiftDown = b;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+285], cl

; 608  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setShiftDown@CvHotKeyInfo@@QAEX_N@Z ENDP		; CvHotKeyInfo::setShiftDown
_TEXT	ENDS
PUBLIC	?isCtrlDown@CvHotKeyInfo@@QBE_NXZ		; CvHotKeyInfo::isCtrlDown
; Function compile flags: /Odtp
;	COMDAT ?isCtrlDown@CvHotKeyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isCtrlDown@CvHotKeyInfo@@QBE_NXZ PROC			; CvHotKeyInfo::isCtrlDown, COMDAT
; _this$ = ecx

; 611  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 612  : 	return m_bCtrlDown;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+286]

; 613  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isCtrlDown@CvHotKeyInfo@@QBE_NXZ ENDP			; CvHotKeyInfo::isCtrlDown
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setCtrlDown@CvHotKeyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?setCtrlDown@CvHotKeyInfo@@QAEX_N@Z PROC		; CvHotKeyInfo::setCtrlDown, COMDAT
; _this$ = ecx

; 616  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 617  : 	m_bCtrlDown = b;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+286], cl

; 618  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setCtrlDown@CvHotKeyInfo@@QAEX_N@Z ENDP		; CvHotKeyInfo::setCtrlDown
_TEXT	ENDS
PUBLIC	?isAltDownAlt@CvHotKeyInfo@@QBE_NXZ		; CvHotKeyInfo::isAltDownAlt
; Function compile flags: /Odtp
;	COMDAT ?isAltDownAlt@CvHotKeyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isAltDownAlt@CvHotKeyInfo@@QBE_NXZ PROC		; CvHotKeyInfo::isAltDownAlt, COMDAT
; _this$ = ecx

; 621  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 	return m_bAltDownAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+287]

; 623  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isAltDownAlt@CvHotKeyInfo@@QBE_NXZ ENDP		; CvHotKeyInfo::isAltDownAlt
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setAltDownAlt@CvHotKeyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?setAltDownAlt@CvHotKeyInfo@@QAEX_N@Z PROC		; CvHotKeyInfo::setAltDownAlt, COMDAT
; _this$ = ecx

; 626  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 627  : 	m_bAltDownAlt = b;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+287], cl

; 628  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAltDownAlt@CvHotKeyInfo@@QAEX_N@Z ENDP		; CvHotKeyInfo::setAltDownAlt
_TEXT	ENDS
PUBLIC	?isShiftDownAlt@CvHotKeyInfo@@QBE_NXZ		; CvHotKeyInfo::isShiftDownAlt
; Function compile flags: /Odtp
;	COMDAT ?isShiftDownAlt@CvHotKeyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isShiftDownAlt@CvHotKeyInfo@@QBE_NXZ PROC		; CvHotKeyInfo::isShiftDownAlt, COMDAT
; _this$ = ecx

; 631  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 632  : 	return m_bShiftDownAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+288]

; 633  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isShiftDownAlt@CvHotKeyInfo@@QBE_NXZ ENDP		; CvHotKeyInfo::isShiftDownAlt
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setShiftDownAlt@CvHotKeyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?setShiftDownAlt@CvHotKeyInfo@@QAEX_N@Z PROC		; CvHotKeyInfo::setShiftDownAlt, COMDAT
; _this$ = ecx

; 636  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 637  : 	m_bShiftDownAlt = b;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+288], cl

; 638  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setShiftDownAlt@CvHotKeyInfo@@QAEX_N@Z ENDP		; CvHotKeyInfo::setShiftDownAlt
_TEXT	ENDS
PUBLIC	?isCtrlDownAlt@CvHotKeyInfo@@QBE_NXZ		; CvHotKeyInfo::isCtrlDownAlt
; Function compile flags: /Odtp
;	COMDAT ?isCtrlDownAlt@CvHotKeyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isCtrlDownAlt@CvHotKeyInfo@@QBE_NXZ PROC		; CvHotKeyInfo::isCtrlDownAlt, COMDAT
; _this$ = ecx

; 641  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 	return m_bCtrlDownAlt;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+289]

; 643  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isCtrlDownAlt@CvHotKeyInfo@@QBE_NXZ ENDP		; CvHotKeyInfo::isCtrlDownAlt
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setCtrlDownAlt@CvHotKeyInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?setCtrlDownAlt@CvHotKeyInfo@@QAEX_N@Z PROC		; CvHotKeyInfo::setCtrlDownAlt, COMDAT
; _this$ = ecx

; 646  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 	m_bCtrlDownAlt = b;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [eax+289], cl

; 648  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setCtrlDownAlt@CvHotKeyInfo@@QAEX_N@Z ENDP		; CvHotKeyInfo::setCtrlDownAlt
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getHotKey@CvHotKeyInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKey@CvHotKeyInfo@@QBEPBDXZ PROC			; CvHotKeyInfo::getHotKey, COMDAT
; _this$ = ecx

; 651  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 652  : 	return m_strHotKey;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 653  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKey@CvHotKeyInfo@@QBEPBDXZ ENDP			; CvHotKeyInfo::getHotKey
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setHotKey@CvHotKeyInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228396 = -4						; size = 4
_szVal$ = 8						; size = 4
?setHotKey@CvHotKeyInfo@@QAEXPBD@Z PROC			; CvHotKeyInfo::setHotKey, COMDAT
; _this$ = ecx

; 656  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 657  : 	m_strHotKey = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 292				; 00000124H
	mov	DWORD PTR $T228396[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setHotKey
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228396[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setHotKey
$LN4@setHotKey:
	mov	ecx, DWORD PTR $T228396[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setHotKey:

; 658  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setHotKey@CvHotKeyInfo@@QAEXPBD@Z ENDP			; CvHotKeyInfo::setHotKey
_TEXT	ENDS
PUBLIC	?getHelp@CvHotKeyInfo@@QBEPBDXZ			; CvHotKeyInfo::getHelp
; Function compile flags: /Odtp
;	COMDAT ?getHelp@CvHotKeyInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHelp@CvHotKeyInfo@@QBEPBDXZ PROC			; CvHotKeyInfo::getHelp, COMDAT
; _this$ = ecx

; 661  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 662  : 	return m_strHelp.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 663  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHelp@CvHotKeyInfo@@QBEPBDXZ ENDP			; CvHotKeyInfo::getHelp
_TEXT	ENDS
PUBLIC	?getDisabledHelp@CvHotKeyInfo@@QBEPBDXZ		; CvHotKeyInfo::getDisabledHelp
; Function compile flags: /Odtp
;	COMDAT ?getDisabledHelp@CvHotKeyInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDisabledHelp@CvHotKeyInfo@@QBEPBDXZ PROC		; CvHotKeyInfo::getDisabledHelp, COMDAT
; _this$ = ecx

; 666  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 667  : 	return m_strDisabledHelp.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 668  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDisabledHelp@CvHotKeyInfo@@QBEPBDXZ ENDP		; CvHotKeyInfo::getDisabledHelp
_TEXT	ENDS
PUBLIC	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
PUBLIC	??_C@_0BM@FGDOJJL@?$HL1?3?5textkey?$HN?5?$CI?$HL2?3?5textkey?$HN?$CJ?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CvHotKeyInfo::getHotKeyDescription
EXTRN	__imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_?toUTF8@String@Localization@@QAEPBDXZ:PROC
EXTRN	__imp_??4String@Localization@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_??4String@Localization@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp_??0String@Localization@@QAE@XZ:PROC
;	COMDAT ??_C@_0BM@FGDOJJL@?$HL1?3?5textkey?$HN?5?$CI?$HL2?3?5textkey?$HN?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@FGDOJJL@?$HL1?3?5textkey?$HN?5?$CI?$HL2?3?5textkey?$HN?$CJ?$AA@ DB '{'
	DB	'1: textkey} ({2: textkey})', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3
	DD	00H
	DD	FLAT:__unwindfunclet$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	02H
	DD	FLAT:__unwindfunclet$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
__ehfuncinfo$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv172 = -228						; size = 4
tv68 = -224						; size = 4
_this$ = -220						; size = 4
$T228411 = -216						; size = 4
$T228406 = -212						; size = 80
$T228405 = -132						; size = 4
$T228404 = -128						; size = 4
_strHotKeyDescription$ = -124				; size = 28
__$ArrayPad$ = -96					; size = 4
_strTempText$ = -92					; size = 80
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CvHotKeyInfo::getHotKeyDescription, COMDAT
; _this$ = ecx

; 671  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T228411[ebp], 0

; 672  : 	Localization::String strTempText;

	lea	ecx, DWORD PTR _strTempText$[ebp]
	call	DWORD PTR __imp_??0String@Localization@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 673  : 	std::string strHotKeyDescription;

	lea	ecx, DWORD PTR _strHotKeyDescription$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 674  : 	if(!m_strHotKeyAltDescriptionKey.empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@getHotKeyD

; 675  : 	{
; 676  : 		strTempText = "{1: textkey} ({2: textkey})";

	push	OFFSET ??_C@_0BM@FGDOJJL@?$HL1?3?5textkey?$HN?5?$CI?$HL2?3?5textkey?$HN?$CJ?$AA@
	lea	ecx, DWORD PTR _strTempText$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@PBD@Z

; 677  : 		strTempText << m_strHotKeyAltDescriptionKey.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T228404[ebp], eax
	lea	ecx, DWORD PTR $T228404[ebp]
	push	ecx
	lea	edx, DWORD PTR _strTempText$[ebp]
	push	edx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 678  : 		strTempText << m_strHotKeyDescriptionKey.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T228405[ebp], eax
	lea	eax, DWORD PTR $T228405[ebp]
	push	eax
	lea	ecx, DWORD PTR _strTempText$[ebp]
	push	ecx
	call	??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ; operator<<<char const *>
	add	esp, 8

; 679  : 	}
; 680  : 	else

	jmp	SHORT $LN2@getHotKeyD
$LN3@getHotKeyD:

; 681  : 	{
; 682  : 		strTempText = Localization::Lookup(m_strHotKeyDescriptionKey.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	edx, DWORD PTR $T228406[ebp]
	push	edx
	call	DWORD PTR __imp_?Lookup@Localization@@YA?AVString@1@PBD@Z
	add	esp, 8
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv172[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv172[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strTempText$[ebp]
	call	DWORD PTR __imp_??4String@Localization@@QAEAAV01@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T228406[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
$LN2@getHotKeyD:

; 683  : 	}
; 684  : 
; 685  : 	strHotKeyDescription = strTempText.toUTF8();

	lea	ecx, DWORD PTR _strTempText$[ebp]
	call	DWORD PTR __imp_?toUTF8@String@Localization@@QAEPBDXZ
	push	eax
	lea	ecx, DWORD PTR _strHotKeyDescription$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 686  : 
; 687  : 	if(!m_strHotKeyString.empty())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	call	DWORD PTR __imp_?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@getHotKeyD

; 688  : 	{
; 689  : 		strHotKeyDescription += m_strHotKeyString;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 376				; 00000178H
	push	eax
	lea	ecx, DWORD PTR _strHotKeyDescription$[ebp]
	call	DWORD PTR __imp_??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
$LN1@getHotKeyD:

; 690  : 	}
; 691  : 
; 692  : 	return strHotKeyDescription;

	lea	ecx, DWORD PTR _strHotKeyDescription$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T228411[ebp]
	or	edx, 1
	mov	DWORD PTR $T228411[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _strHotKeyDescription$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _strTempText$[ebp]
	call	DWORD PTR __imp_??1String@Localization@@UAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 693  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _strTempText$[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
	lea	ecx, DWORD PTR _strHotKeyDescription$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
	lea	ecx, DWORD PTR $T228406[ebp]
	jmp	DWORD PTR __imp_??1String@Localization@@UAE@XZ
__unwindfunclet$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3:
	mov	eax, DWORD PTR $T228411[ebp]
	and	eax, 1
	je	$LN10@getHotKeyD
	and	DWORD PTR $T228411[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN10@getHotKeyD:
	ret	0
__ehhandler$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CvHotKeyInfo::getHotKeyDescription
PUBLIC	?getHotKeyString@CvHotKeyInfo@@QBEPBDXZ		; CvHotKeyInfo::getHotKeyString
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyString@CvHotKeyInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyString@CvHotKeyInfo@@QBEPBDXZ PROC		; CvHotKeyInfo::getHotKeyString, COMDAT
; _this$ = ecx

; 696  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 697  : 	return m_strHotKeyString.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 698  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyString@CvHotKeyInfo@@QBEPBDXZ ENDP		; CvHotKeyInfo::getHotKeyString
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?setHotKeyDescription@CvHotKeyInfo@@QAEXPBD00@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T228440 = -12						; size = 4
$T228434 = -8						; size = 4
$T228428 = -4						; size = 4
_szHotKeyDescKey$ = 8					; size = 4
_szHotKeyAltDescKey$ = 12				; size = 4
_szHotKeyString$ = 16					; size = 4
?setHotKeyDescription@CvHotKeyInfo@@QAEXPBD00@Z PROC	; CvHotKeyInfo::setHotKeyDescription, COMDAT
; _this$ = ecx

; 702  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 703  : 	m_strHotKeyDescriptionKey = szHotKeyDescKey;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 320				; 00000140H
	mov	DWORD PTR $T228428[ebp], eax
	cmp	DWORD PTR _szHotKeyDescKey$[ebp], 0
	je	SHORT $LN4@setHotKeyD
	mov	ecx, DWORD PTR _szHotKeyDescKey$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228428[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN5@setHotKeyD
$LN4@setHotKeyD:
	mov	ecx, DWORD PTR $T228428[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN5@setHotKeyD:

; 704  : 	m_strHotKeyAltDescriptionKey = szHotKeyAltDescKey;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 348				; 0000015cH
	mov	DWORD PTR $T228434[ebp], edx
	cmp	DWORD PTR _szHotKeyAltDescKey$[ebp], 0
	je	SHORT $LN8@setHotKeyD
	mov	eax, DWORD PTR _szHotKeyAltDescKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T228434[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN9@setHotKeyD
$LN8@setHotKeyD:
	mov	ecx, DWORD PTR $T228434[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN9@setHotKeyD:

; 705  : 	m_strHotKeyString = szHotKeyString;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	mov	DWORD PTR $T228440[ebp], ecx
	cmp	DWORD PTR _szHotKeyString$[ebp], 0
	je	SHORT $LN12@setHotKeyD
	mov	edx, DWORD PTR _szHotKeyString$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T228440[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setHotKeyD
$LN12@setHotKeyD:
	mov	ecx, DWORD PTR $T228440[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setHotKeyD:

; 706  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setHotKeyDescription@CvHotKeyInfo@@QAEXPBD00@Z ENDP	; CvHotKeyInfo::setHotKeyDescription
_TEXT	ENDS
PUBLIC	??1CvHotKeyInfo@@QAE@XZ				; CvHotKeyInfo::~CvHotKeyInfo
PUBLIC	??_7CvSpecialistInfo@@6B@			; CvSpecialistInfo::`vftable'
PUBLIC	??0CvSpecialistInfo@@QAE@XZ			; CvSpecialistInfo::CvSpecialistInfo
PUBLIC	?CacheResults@CvSpecialistInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvSpecialistInfo::CacheResults
EXTRN	??_ECvSpecialistInfo@@UAEPAXI@Z:PROC		; CvSpecialistInfo::`vector deleting destructor'
;	COMDAT ??_7CvSpecialistInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvSpecialistInfo@@6B@ DD FLAT:?CacheResults@CvSpecialistInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvSpecialistInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvSpecialistInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvSpecialistInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvSpecialistInfo@@QAE@XZ$0
__ehfuncinfo$??0CvSpecialistInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvSpecialistInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvSpecialistInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T228449 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvSpecialistInfo@@QAE@XZ PROC			; CvSpecialistInfo::CvSpecialistInfo, COMDAT
; _this$ = ecx

; 721  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvSpecialistInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvHotKeyInfo@@QAE@XZ			; CvHotKeyInfo::CvHotKeyInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvSpecialistInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+468], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+472], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+476], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+480], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+484], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 488				; 000001e8H
	mov	DWORD PTR $T228449[ebp], edx
	mov	ecx, DWORD PTR $T228449[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+520], 0

; 722  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvSpecialistInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvHotKeyInfo@@QAE@XZ
__ehhandler$??0CvSpecialistInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvSpecialistInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvSpecialistInfo@@QAE@XZ ENDP			; CvSpecialistInfo::CvSpecialistInfo
PUBLIC	??1CvSpecialistInfo@@UAE@XZ			; CvSpecialistInfo::~CvSpecialistInfo
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp
;	COMDAT ??_GCvSpecialistInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvSpecialistInfo@@UAEPAXI@Z PROC			; CvSpecialistInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvSpecialistInfo@@UAE@XZ		; CvSpecialistInfo::~CvSpecialistInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvSpecialistInfo@@UAEPAXI@Z ENDP			; CvSpecialistInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CvHotKeyInfo@@QAE@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??1CvHotKeyInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvHotKeyInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$5
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1CvHotKeyInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -76						; size = 4
$T228496 = -36						; size = 4
$T228491 = -32						; size = 4
$T228486 = -28						; size = 4
$T228481 = -24						; size = 4
$T228476 = -20						; size = 4
$T228471 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvHotKeyInfo@@QAE@XZ PROC				; CvHotKeyInfo::~CvHotKeyInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvHotKeyInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 64					; 00000040H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 432				; 000001b0H
	mov	DWORD PTR $T228471[ebp], eax
	mov	ecx, DWORD PTR $T228471[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	mov	DWORD PTR $T228476[ebp], ecx
	mov	ecx, DWORD PTR $T228476[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	mov	DWORD PTR $T228481[ebp], edx
	mov	ecx, DWORD PTR $T228481[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	mov	DWORD PTR $T228486[ebp], eax
	mov	ecx, DWORD PTR $T228486[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	mov	DWORD PTR $T228491[ebp], ecx
	mov	ecx, DWORD PTR $T228491[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 292				; 00000124H
	mov	DWORD PTR $T228496[ebp], edx
	mov	ecx, DWORD PTR $T228496[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvHotKeyInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvHotKeyInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvHotKeyInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvHotKeyInfo@@QAE@XZ ENDP				; CvHotKeyInfo::~CvHotKeyInfo
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvSpecialistInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvSpecialistInfo@@UAE@XZ$0
__ehfuncinfo$??1CvSpecialistInfo@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvSpecialistInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvSpecialistInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -96						; size = 4
$T228578 = -32						; size = 4
$T228573 = -28						; size = 4
$T228571 = -24						; size = 4
$T228567 = -20						; size = 4
$T228565 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvSpecialistInfo@@UAE@XZ PROC			; CvSpecialistInfo::~CvSpecialistInfo, COMDAT
; _this$ = ecx

; 725  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvSpecialistInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvSpecialistInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 726  : 	SAFE_DELETE_ARRAY(m_piYieldChange);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	mov	DWORD PTR $T228567[ebp], ecx
	mov	edx, DWORD PTR $T228567[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T228565[ebp], eax
	mov	ecx, DWORD PTR $T228565[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T228567[ebp]
	mov	DWORD PTR [edx], 0

; 727  : 	SAFE_DELETE_ARRAY(m_piFlavorValue);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 520				; 00000208H
	mov	DWORD PTR $T228573[ebp], eax
	mov	ecx, DWORD PTR $T228573[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T228571[ebp], edx
	mov	eax, DWORD PTR $T228571[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T228573[ebp]
	mov	DWORD PTR [ecx], 0

; 728  : }

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 488				; 000001e8H
	mov	DWORD PTR $T228578[ebp], edx
	mov	ecx, DWORD PTR $T228578[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvHotKeyInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvSpecialistInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvHotKeyInfo@@QAE@XZ
__ehhandler$??1CvSpecialistInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvSpecialistInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvSpecialistInfo@@UAE@XZ ENDP			; CvSpecialistInfo::~CvSpecialistInfo
PUBLIC	?getCost@CvSpecialistInfo@@QBEHXZ		; CvSpecialistInfo::getCost
; Function compile flags: /Odtp
;	COMDAT ?getCost@CvSpecialistInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCost@CvSpecialistInfo@@QBEHXZ PROC			; CvSpecialistInfo::getCost, COMDAT
; _this$ = ecx

; 731  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 732  : 	return m_iCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 733  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCost@CvSpecialistInfo@@QBEHXZ ENDP			; CvSpecialistInfo::getCost
_TEXT	ENDS
PUBLIC	?getGreatPeopleUnitClass@CvSpecialistInfo@@QBEHXZ ; CvSpecialistInfo::getGreatPeopleUnitClass
; Function compile flags: /Odtp
;	COMDAT ?getGreatPeopleUnitClass@CvSpecialistInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGreatPeopleUnitClass@CvSpecialistInfo@@QBEHXZ PROC	; CvSpecialistInfo::getGreatPeopleUnitClass, COMDAT
; _this$ = ecx

; 736  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 737  : 	return m_iGreatPeopleUnitClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]

; 738  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGreatPeopleUnitClass@CvSpecialistInfo@@QBEHXZ ENDP	; CvSpecialistInfo::getGreatPeopleUnitClass
_TEXT	ENDS
PUBLIC	?getGreatPeopleRateChange@CvSpecialistInfo@@QBEHXZ ; CvSpecialistInfo::getGreatPeopleRateChange
; Function compile flags: /Odtp
;	COMDAT ?getGreatPeopleRateChange@CvSpecialistInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGreatPeopleRateChange@CvSpecialistInfo@@QBEHXZ PROC	; CvSpecialistInfo::getGreatPeopleRateChange, COMDAT
; _this$ = ecx

; 741  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 742  : 	return m_iGreatPeopleRateChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+468]

; 743  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGreatPeopleRateChange@CvSpecialistInfo@@QBEHXZ ENDP	; CvSpecialistInfo::getGreatPeopleRateChange
_TEXT	ENDS
PUBLIC	?getCulturePerTurn@CvSpecialistInfo@@QBEHXZ	; CvSpecialistInfo::getCulturePerTurn
; Function compile flags: /Odtp
;	COMDAT ?getCulturePerTurn@CvSpecialistInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCulturePerTurn@CvSpecialistInfo@@QBEHXZ PROC	; CvSpecialistInfo::getCulturePerTurn, COMDAT
; _this$ = ecx

; 746  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 	return m_iCulturePerTurn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+472]

; 748  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCulturePerTurn@CvSpecialistInfo@@QBEHXZ ENDP	; CvSpecialistInfo::getCulturePerTurn
_TEXT	ENDS
PUBLIC	?getMissionType@CvSpecialistInfo@@QBEHXZ	; CvSpecialistInfo::getMissionType
; Function compile flags: /Odtp
;	COMDAT ?getMissionType@CvSpecialistInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMissionType@CvSpecialistInfo@@QBEHXZ PROC		; CvSpecialistInfo::getMissionType, COMDAT
; _this$ = ecx

; 751  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 752  : 	return m_iMissionType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+476]

; 753  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMissionType@CvSpecialistInfo@@QBEHXZ ENDP		; CvSpecialistInfo::getMissionType
_TEXT	ENDS
PUBLIC	?setMissionType@CvSpecialistInfo@@QAEXH@Z	; CvSpecialistInfo::setMissionType
; Function compile flags: /Odtp
;	COMDAT ?setMissionType@CvSpecialistInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iNewType$ = 8						; size = 4
?setMissionType@CvSpecialistInfo@@QAEXH@Z PROC		; CvSpecialistInfo::setMissionType, COMDAT
; _this$ = ecx

; 756  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 757  : 	m_iMissionType = iNewType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iNewType$[ebp]
	mov	DWORD PTR [eax+476], ecx

; 758  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setMissionType@CvSpecialistInfo@@QAEXH@Z ENDP		; CvSpecialistInfo::setMissionType
_TEXT	ENDS
PUBLIC	?isVisible@CvSpecialistInfo@@QBE_NXZ		; CvSpecialistInfo::isVisible
; Function compile flags: /Odtp
;	COMDAT ?isVisible@CvSpecialistInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isVisible@CvSpecialistInfo@@QBE_NXZ PROC		; CvSpecialistInfo::isVisible, COMDAT
; _this$ = ecx

; 761  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 762  : 	return m_bVisible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+484]

; 763  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isVisible@CvSpecialistInfo@@QBE_NXZ ENDP		; CvSpecialistInfo::isVisible
_TEXT	ENDS
PUBLIC	?getExperience@CvSpecialistInfo@@QBEHXZ		; CvSpecialistInfo::getExperience
; Function compile flags: /Odtp
;	COMDAT ?getExperience@CvSpecialistInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getExperience@CvSpecialistInfo@@QBEHXZ PROC		; CvSpecialistInfo::getExperience, COMDAT
; _this$ = ecx

; 766  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 767  : 	return m_iExperience;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+480]

; 768  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getExperience@CvSpecialistInfo@@QBEHXZ ENDP		; CvSpecialistInfo::getExperience
_TEXT	ENDS
PUBLIC	?getYieldChange@CvSpecialistInfo@@QBEHH@Z	; CvSpecialistInfo::getYieldChange
; Function compile flags: /Odtp
;	COMDAT ?getYieldChange@CvSpecialistInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getYieldChange@CvSpecialistInfo@@QBEHH@Z PROC		; CvSpecialistInfo::getYieldChange, COMDAT
; _this$ = ecx

; 771  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 772  : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 773  : 	CvAssertMsg(i > -1, "Index out of bounds");
; 774  : 	return m_piYieldChange ? m_piYieldChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN3@getYieldCh
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getYieldCh
$LN3@getYieldCh:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getYieldCh:
	mov	eax, DWORD PTR tv69[ebp]

; 775  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getYieldChange@CvSpecialistInfo@@QBEHH@Z ENDP		; CvSpecialistInfo::getYieldChange
_TEXT	ENDS
PUBLIC	?getYieldChangeArray@CvSpecialistInfo@@QBEPBHXZ	; CvSpecialistInfo::getYieldChangeArray
; Function compile flags: /Odtp
;	COMDAT ?getYieldChangeArray@CvSpecialistInfo@@QBEPBHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getYieldChangeArray@CvSpecialistInfo@@QBEPBHXZ PROC	; CvSpecialistInfo::getYieldChangeArray, COMDAT
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 	return m_piYieldChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+516]

; 780  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getYieldChangeArray@CvSpecialistInfo@@QBEPBHXZ ENDP	; CvSpecialistInfo::getYieldChangeArray
_TEXT	ENDS
PUBLIC	?getFlavorValue@CvSpecialistInfo@@QBEHH@Z	; CvSpecialistInfo::getFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?getFlavorValue@CvSpecialistInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFlavorValue@CvSpecialistInfo@@QBEHH@Z PROC		; CvSpecialistInfo::getFlavorValue, COMDAT
; _this$ = ecx

; 783  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 784  : 	CvAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 785  : 	CvAssertMsg(i > -1, "Index out of bounds");
; 786  : 	return m_piFlavorValue ? m_piFlavorValue[i] : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN3@getFlavorV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getFlavorV
$LN3@getFlavorV:
	mov	DWORD PTR tv69[ebp], 0
$LN4@getFlavorV:
	mov	eax, DWORD PTR tv69[ebp]

; 787  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFlavorValue@CvSpecialistInfo@@QBEHH@Z ENDP		; CvSpecialistInfo::getFlavorValue
_TEXT	ENDS
PUBLIC	?getTexture@CvSpecialistInfo@@QBEPBDXZ		; CvSpecialistInfo::getTexture
; Function compile flags: /Odtp
;	COMDAT ?getTexture@CvSpecialistInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTexture@CvSpecialistInfo@@QBEPBDXZ PROC		; CvSpecialistInfo::getTexture, COMDAT
; _this$ = ecx

; 790  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 791  : 	return m_strTexture;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 488				; 000001e8H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTexture@CvSpecialistInfo@@QBEPBDXZ ENDP		; CvSpecialistInfo::getTexture
_TEXT	ENDS
PUBLIC	?setTexture@CvSpecialistInfo@@QAEXPBD@Z		; CvSpecialistInfo::setTexture
; Function compile flags: /Odtp
;	COMDAT ?setTexture@CvSpecialistInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228716 = -4						; size = 4
_szVal$ = 8						; size = 4
?setTexture@CvSpecialistInfo@@QAEXPBD@Z PROC		; CvSpecialistInfo::setTexture, COMDAT
; _this$ = ecx

; 795  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 796  : 	m_strTexture = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 488				; 000001e8H
	mov	DWORD PTR $T228716[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setTexture
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228716[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setTexture
$LN4@setTexture:
	mov	ecx, DWORD PTR $T228716[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setTexture:

; 797  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setTexture@CvSpecialistInfo@@QAEXPBD@Z ENDP		; CvSpecialistInfo::setTexture
_TEXT	ENDS
PUBLIC	??_C@_0BB@CPDPPLJL@SpecialistYields?$AA@	; `string'
PUBLIC	??_C@_0BC@PDEBHDCB@SpecialistFlavors?$AA@	; `string'
PUBLIC	??_C@_0P@KLBEOMLO@SpecialistType?$AA@		; `string'
PUBLIC	??_C@_0BF@KBHKOFAA@GreatPeopleUnitClass?$AA@	; `string'
PUBLIC	??_C@_07GKACAEDJ@Texture?$AA@			; `string'
PUBLIC	??_C@_0P@LCGFHJBJ@CulturePerTurn?$AA@		; `string'
PUBLIC	??_C@_0BG@PEIPJGC@GreatPeopleRateChange?$AA@	; `string'
PUBLIC	??_C@_0L@DCGNFONO@Experience?$AA@		; `string'
PUBLIC	??_C@_04FICPKHNF@Cost?$AA@			; `string'
PUBLIC	??_C@_07MGEGCLJM@Visible?$AA@			; `string'
EXTRN	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z:PROC ; CvDatabaseUtility::SetYields
EXTRN	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z:PROC ; CvDatabaseUtility::SetFlavors
EXTRN	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z:PROC ; CvGlobals::getInfoTypeForString
EXTRN	?gGlobals@@3VCvGlobals@@A:BYTE			; gGlobals
;	COMDAT ??_C@_0BB@CPDPPLJL@SpecialistYields?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0BB@CPDPPLJL@SpecialistYields?$AA@ DB 'SpecialistYields', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PDEBHDCB@SpecialistFlavors?$AA@
CONST	SEGMENT
??_C@_0BC@PDEBHDCB@SpecialistFlavors?$AA@ DB 'SpecialistFlavors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KLBEOMLO@SpecialistType?$AA@
CONST	SEGMENT
??_C@_0P@KLBEOMLO@SpecialistType?$AA@ DB 'SpecialistType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KBHKOFAA@GreatPeopleUnitClass?$AA@
CONST	SEGMENT
??_C@_0BF@KBHKOFAA@GreatPeopleUnitClass?$AA@ DB 'GreatPeopleUnitClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GKACAEDJ@Texture?$AA@
CONST	SEGMENT
??_C@_07GKACAEDJ@Texture?$AA@ DB 'Texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LCGFHJBJ@CulturePerTurn?$AA@
CONST	SEGMENT
??_C@_0P@LCGFHJBJ@CulturePerTurn?$AA@ DB 'CulturePerTurn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PEIPJGC@GreatPeopleRateChange?$AA@
CONST	SEGMENT
??_C@_0BG@PEIPJGC@GreatPeopleRateChange?$AA@ DB 'GreatPeopleRateChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DCGNFONO@Experience?$AA@
CONST	SEGMENT
??_C@_0L@DCGNFONO@Experience?$AA@ DB 'Experience', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FICPKHNF@Cost?$AA@
CONST	SEGMENT
??_C@_04FICPKHNF@Cost?$AA@ DB 'Cost', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGEGCLJM@Visible?$AA@
CONST	SEGMENT
??_C@_07MGEGCLJM@Visible?$AA@ DB 'Visible', 00H		; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvSpecialistInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_szType$ = -8						; size = 4
_szGreatPeople$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvSpecialistInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvSpecialistInfo::CacheResults, COMDAT
; _this$ = ecx

; 800  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 801  : 	if(!CvHotKeyInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@3

; 802  : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@3
$LN1@CacheResul@3:

; 803  : 
; 804  : 	m_bVisible = kResults.GetBool("Visible");

	push	OFFSET ??_C@_07MGEGCLJM@Visible?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+484], al

; 805  : 	m_iCost = kResults.GetInt("Cost");

	push	OFFSET ??_C@_04FICPKHNF@Cost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+460], eax

; 806  : 	m_iExperience = kResults.GetInt("Experience");

	push	OFFSET ??_C@_0L@DCGNFONO@Experience?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+480], eax

; 807  : 	m_iGreatPeopleRateChange = kResults.GetInt("GreatPeopleRateChange");

	push	OFFSET ??_C@_0BG@PEIPJGC@GreatPeopleRateChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+468], eax

; 808  : 	m_iCulturePerTurn = kResults.GetInt("CulturePerTurn");

	push	OFFSET ??_C@_0P@LCGFHJBJ@CulturePerTurn?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+472], eax

; 809  : 
; 810  : 	setTexture(kResults.GetText("Texture"));

	push	OFFSET ??_C@_07GKACAEDJ@Texture?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTexture@CvSpecialistInfo@@QAEXPBD@Z	; CvSpecialistInfo::setTexture

; 811  : 
; 812  : 	const char* szGreatPeople = kResults.GetText("GreatPeopleUnitClass");

	push	OFFSET ??_C@_0BF@KBHKOFAA@GreatPeopleUnitClass?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szGreatPeople$[ebp], eax

; 813  : 	m_iGreatPeopleUnitClass = GC.getInfoTypeForString(szGreatPeople, true);

	push	1
	mov	edx, DWORD PTR _szGreatPeople$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], eax

; 814  : 
; 815  : 	//Arrays
; 816  : 	const char* szType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szType$[ebp], eax

; 817  : 	kUtility.SetFlavors(m_piFlavorValue, "SpecialistFlavors", "SpecialistType", szType);

	push	0
	mov	edx, DWORD PTR _szType$[ebp]
	push	edx
	push	OFFSET ??_C@_0P@KLBEOMLO@SpecialistType?$AA@
	push	OFFSET ??_C@_0BC@PDEBHDCB@SpecialistFlavors?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 520				; 00000208H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 818  : 	kUtility.SetYields(m_piYieldChange, "SpecialistYields", "SpecialistType", szType);

	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0P@KLBEOMLO@SpecialistType?$AA@
	push	OFFSET ??_C@_0BB@CPDPPLJL@SpecialistYields?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 516				; 00000204H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 819  : 
; 820  : 	return true;

	mov	al, 1
$LN2@CacheResul@3:

; 821  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvSpecialistInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvSpecialistInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvMissionInfo@@6B@				; CvMissionInfo::`vftable'
PUBLIC	??0CvMissionInfo@@QAE@XZ			; CvMissionInfo::CvMissionInfo
PUBLIC	?CacheResults@CvMissionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvMissionInfo::CacheResults
;	COMDAT ??_7CvMissionInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvMissionInfo@@6B@ DD FLAT:?CacheResults@CvMissionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvMissionInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvMissionInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvMissionInfo@@QAE@XZ$0
__ehfuncinfo$??0CvMissionInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvMissionInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvMissionInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T228730 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvMissionInfo@@QAE@XZ PROC				; CvMissionInfo::CvMissionInfo, COMDAT
; _this$ = ecx

; 833  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvMissionInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvHotKeyInfo@@QAE@XZ			; CvHotKeyInfo::CvHotKeyInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvMissionInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+464], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+465], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+466], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+467], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+468], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	mov	DWORD PTR $T228730[ebp], ecx
	mov	ecx, DWORD PTR $T228730[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 834  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvMissionInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvHotKeyInfo@@QAE@XZ
__ehhandler$??0CvMissionInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvMissionInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvMissionInfo@@QAE@XZ ENDP				; CvMissionInfo::CvMissionInfo
PUBLIC	?getTime@CvMissionInfo@@QBEHXZ			; CvMissionInfo::getTime
; Function compile flags: /Odtp
;	COMDAT ?getTime@CvMissionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTime@CvMissionInfo@@QBEHXZ PROC			; CvMissionInfo::getTime, COMDAT
; _this$ = ecx

; 837  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 838  : 	return m_iTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 839  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTime@CvMissionInfo@@QBEHXZ ENDP			; CvMissionInfo::getTime
_TEXT	ENDS
PUBLIC	?isSound@CvMissionInfo@@QBE_NXZ			; CvMissionInfo::isSound
; Function compile flags: /Odtp
;	COMDAT ?isSound@CvMissionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isSound@CvMissionInfo@@QBE_NXZ PROC			; CvMissionInfo::isSound, COMDAT
; _this$ = ecx

; 842  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 843  : 	return m_bSound;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+464]

; 844  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isSound@CvMissionInfo@@QBE_NXZ ENDP			; CvMissionInfo::isSound
_TEXT	ENDS
PUBLIC	?isTarget@CvMissionInfo@@QBE_NXZ		; CvMissionInfo::isTarget
; Function compile flags: /Odtp
;	COMDAT ?isTarget@CvMissionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isTarget@CvMissionInfo@@QBE_NXZ PROC			; CvMissionInfo::isTarget, COMDAT
; _this$ = ecx

; 847  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 848  : 	return m_bTarget;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+465]

; 849  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isTarget@CvMissionInfo@@QBE_NXZ ENDP			; CvMissionInfo::isTarget
_TEXT	ENDS
PUBLIC	?isBuild@CvMissionInfo@@QBE_NXZ			; CvMissionInfo::isBuild
; Function compile flags: /Odtp
;	COMDAT ?isBuild@CvMissionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isBuild@CvMissionInfo@@QBE_NXZ PROC			; CvMissionInfo::isBuild, COMDAT
; _this$ = ecx

; 852  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 853  : 	return m_bBuild;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+466]

; 854  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isBuild@CvMissionInfo@@QBE_NXZ ENDP			; CvMissionInfo::isBuild
_TEXT	ENDS
PUBLIC	?getVisible@CvMissionInfo@@QBE_NXZ		; CvMissionInfo::getVisible
; Function compile flags: /Odtp
;	COMDAT ?getVisible@CvMissionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVisible@CvMissionInfo@@QBE_NXZ PROC			; CvMissionInfo::getVisible, COMDAT
; _this$ = ecx

; 857  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 858  : 	return m_bVisible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+467]

; 859  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVisible@CvMissionInfo@@QBE_NXZ ENDP			; CvMissionInfo::getVisible
_TEXT	ENDS
PUBLIC	?getWaypoint@CvMissionInfo@@QBEPBDXZ		; CvMissionInfo::getWaypoint
; Function compile flags: /Odtp
;	COMDAT ?getWaypoint@CvMissionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWaypoint@CvMissionInfo@@QBEPBDXZ PROC		; CvMissionInfo::getWaypoint, COMDAT
; _this$ = ecx

; 862  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 863  : 	return m_strWaypoint;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 864  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getWaypoint@CvMissionInfo@@QBEPBDXZ ENDP		; CvMissionInfo::getWaypoint
_TEXT	ENDS
PUBLIC	?getEntityEvent@CvMissionInfo@@QBE?AW4EntityEventTypes@@XZ ; CvMissionInfo::getEntityEvent
; Function compile flags: /Odtp
;	COMDAT ?getEntityEvent@CvMissionInfo@@QBE?AW4EntityEventTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEntityEvent@CvMissionInfo@@QBE?AW4EntityEventTypes@@XZ PROC ; CvMissionInfo::getEntityEvent, COMDAT
; _this$ = ecx

; 867  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 868  : 	return m_eEntityEvent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+468]

; 869  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEntityEvent@CvMissionInfo@@QBE?AW4EntityEventTypes@@XZ ENDP ; CvMissionInfo::getEntityEvent
_TEXT	ENDS
PUBLIC	??_C@_0BA@IPGMCJGB@EntityEventType?$AA@		; `string'
PUBLIC	??_C@_05DLONLOOK@Build?$AA@			; `string'
PUBLIC	??_C@_06FGANPIPG@Target?$AA@			; `string'
PUBLIC	??_C@_05MAHMNMLO@Sound?$AA@			; `string'
PUBLIC	??_C@_04OKOFBOPB@Time?$AA@			; `string'
PUBLIC	??_C@_08DFAAPNDP@Waypoint?$AA@			; `string'
;	COMDAT ??_C@_0BA@IPGMCJGB@EntityEventType?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BA@IPGMCJGB@EntityEventType?$AA@ DB 'EntityEventType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DLONLOOK@Build?$AA@
CONST	SEGMENT
??_C@_05DLONLOOK@Build?$AA@ DB 'Build', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGANPIPG@Target?$AA@
CONST	SEGMENT
??_C@_06FGANPIPG@Target?$AA@ DB 'Target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAHMNMLO@Sound?$AA@
CONST	SEGMENT
??_C@_05MAHMNMLO@Sound?$AA@ DB 'Sound', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKOFBOPB@Time?$AA@
CONST	SEGMENT
??_C@_04OKOFBOPB@Time?$AA@ DB 'Time', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DFAAPNDP@Waypoint?$AA@
CONST	SEGMENT
??_C@_08DFAAPNDP@Waypoint?$AA@ DB 'Waypoint', 00H	; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvMissionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T228762 = -12						; size = 4
$T228761 = -8						; size = 4
_szEntityEventType$ = -4				; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvMissionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvMissionInfo::CacheResults, COMDAT
; _this$ = ecx

; 872  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 873  : 	if(!CvHotKeyInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@CacheResul@4

; 874  : 		return false;

	xor	al, al
	jmp	$LN4@CacheResul@4
$LN3@CacheResul@4:

; 875  : 
; 876  : 	m_strWaypoint	= kResults.GetText("Waypoint");

	push	OFFSET ??_C@_08DFAAPNDP@Waypoint?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T228762[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 472				; 000001d8H
	mov	DWORD PTR $T228761[ebp], eax
	cmp	DWORD PTR $T228762[ebp], 0
	je	SHORT $LN7@CacheResul@4
	mov	ecx, DWORD PTR $T228762[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T228761[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN8@CacheResul@4
$LN7@CacheResul@4:
	mov	ecx, DWORD PTR $T228761[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN8@CacheResul@4:

; 877  : 	m_iTime			= kResults.GetInt("Time");

	push	OFFSET ??_C@_04OKOFBOPB@Time?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+460], eax

; 878  : 	m_bSound		= kResults.GetBool("Sound");

	push	OFFSET ??_C@_05MAHMNMLO@Sound?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+464], al

; 879  : 	m_bTarget		= kResults.GetBool("Target");

	push	OFFSET ??_C@_06FGANPIPG@Target?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+465], al

; 880  : 	m_bBuild		= kResults.GetBool("Build");

	push	OFFSET ??_C@_05DLONLOOK@Build?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+466], al

; 881  : 	m_bVisible		= kResults.GetBool("Visible");

	push	OFFSET ??_C@_07MGEGCLJM@Visible?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+467], al

; 882  : 
; 883  : 	const char* szEntityEventType = kResults.GetText("EntityEventType");

	push	OFFSET ??_C@_0BA@IPGMCJGB@EntityEventType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szEntityEventType$[ebp], eax

; 884  : 	if(szEntityEventType)

	cmp	DWORD PTR _szEntityEventType$[ebp], 0
	je	SHORT $LN2@CacheResul@4

; 885  : 	{
; 886  : 		m_eEntityEvent = (EntityEventTypes)GC.getInfoTypeForString(szEntityEventType, true);

	push	1
	mov	eax, DWORD PTR _szEntityEventType$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+468], eax

; 887  : 	}
; 888  : 	else

	jmp	SHORT $LN1@CacheResul@4
$LN2@CacheResul@4:

; 889  : 	{
; 890  : 		m_eEntityEvent = ENTITY_EVENT_NONE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+468], -1
$LN1@CacheResul@4:

; 891  : 	}
; 892  : 
; 893  : 	return true;

	mov	al, 1
$LN4@CacheResul@4:

; 894  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvMissionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvMissionInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvCommandInfo@@6B@				; CvCommandInfo::`vftable'
PUBLIC	??0CvCommandInfo@@QAE@XZ			; CvCommandInfo::CvCommandInfo
PUBLIC	?CacheResults@CvCommandInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCommandInfo::CacheResults
;	COMDAT ??_7CvCommandInfo@@6B@
CONST	SEGMENT
??_7CvCommandInfo@@6B@ DD FLAT:?CacheResults@CvCommandInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCommandInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvCommandInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvCommandInfo@@QAE@XZ PROC				; CvCommandInfo::CvCommandInfo, COMDAT
; _this$ = ecx

; 904  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvHotKeyInfo@@QAE@XZ			; CvHotKeyInfo::CvHotKeyInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCommandInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+464], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+465], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+466], 0

; 905  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvCommandInfo@@QAE@XZ ENDP				; CvCommandInfo::CvCommandInfo
_TEXT	ENDS
PUBLIC	?getAutomate@CvCommandInfo@@QBEHXZ		; CvCommandInfo::getAutomate
; Function compile flags: /Odtp
;	COMDAT ?getAutomate@CvCommandInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAutomate@CvCommandInfo@@QBEHXZ PROC			; CvCommandInfo::getAutomate, COMDAT
; _this$ = ecx

; 908  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 909  : 	return m_iAutomate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 910  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAutomate@CvCommandInfo@@QBEHXZ ENDP			; CvCommandInfo::getAutomate
_TEXT	ENDS
PUBLIC	?setAutomate@CvCommandInfo@@QAEXH@Z		; CvCommandInfo::setAutomate
; Function compile flags: /Odtp
;	COMDAT ?setAutomate@CvCommandInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setAutomate@CvCommandInfo@@QAEXH@Z PROC		; CvCommandInfo::setAutomate, COMDAT
; _this$ = ecx

; 913  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 	m_iAutomate = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+460], ecx

; 915  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAutomate@CvCommandInfo@@QAEXH@Z ENDP		; CvCommandInfo::setAutomate
_TEXT	ENDS
PUBLIC	?getConfirmCommand@CvCommandInfo@@QBE_NXZ	; CvCommandInfo::getConfirmCommand
; Function compile flags: /Odtp
;	COMDAT ?getConfirmCommand@CvCommandInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getConfirmCommand@CvCommandInfo@@QBE_NXZ PROC		; CvCommandInfo::getConfirmCommand, COMDAT
; _this$ = ecx

; 918  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 919  : 	return m_bConfirmCommand;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+464]

; 920  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getConfirmCommand@CvCommandInfo@@QBE_NXZ ENDP		; CvCommandInfo::getConfirmCommand
_TEXT	ENDS
PUBLIC	?getVisible@CvCommandInfo@@QBE_NXZ		; CvCommandInfo::getVisible
; Function compile flags: /Odtp
;	COMDAT ?getVisible@CvCommandInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVisible@CvCommandInfo@@QBE_NXZ PROC			; CvCommandInfo::getVisible, COMDAT
; _this$ = ecx

; 923  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 924  : 	return m_bVisible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+465]

; 925  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVisible@CvCommandInfo@@QBE_NXZ ENDP			; CvCommandInfo::getVisible
_TEXT	ENDS
PUBLIC	?getAll@CvCommandInfo@@QBE_NXZ			; CvCommandInfo::getAll
; Function compile flags: /Odtp
;	COMDAT ?getAll@CvCommandInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAll@CvCommandInfo@@QBE_NXZ PROC			; CvCommandInfo::getAll, COMDAT
; _this$ = ecx

; 928  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 929  : 	return m_bAll;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+466]

; 930  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAll@CvCommandInfo@@QBE_NXZ ENDP			; CvCommandInfo::getAll
_TEXT	ENDS
PUBLIC	??_C@_03HFJGAJFE@All?$AA@			; `string'
PUBLIC	??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@		; `string'
PUBLIC	??_C@_08HMGAFGKC@Automate?$AA@			; `string'
;	COMDAT ??_C@_03HFJGAJFE@All?$AA@
CONST	SEGMENT
??_C@_03HFJGAJFE@All?$AA@ DB 'All', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@
CONST	SEGMENT
??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@ DB 'ConfirmCommand', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HMGAFGKC@Automate?$AA@
CONST	SEGMENT
??_C@_08HMGAFGKC@Automate?$AA@ DB 'Automate', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvCommandInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szAutomate$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvCommandInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvCommandInfo::CacheResults, COMDAT
; _this$ = ecx

; 933  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 934  : 	if(!CvHotKeyInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@CacheResul@5

; 935  : 		return false;

	xor	al, al
	jmp	SHORT $LN3@CacheResul@5
$LN2@CacheResul@5:

; 936  : 
; 937  : 	const char* szAutomate = kResults.GetText("Automate");

	push	OFFSET ??_C@_08HMGAFGKC@Automate?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szAutomate$[ebp], eax

; 938  : 	if(szAutomate)

	cmp	DWORD PTR _szAutomate$[ebp], 0
	je	SHORT $LN1@CacheResul@5

; 939  : 		setAutomate(GC.getInfoTypeForString(szAutomate, true));

	push	1
	mov	eax, DWORD PTR _szAutomate$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAutomate@CvCommandInfo@@QAEXH@Z	; CvCommandInfo::setAutomate
$LN1@CacheResul@5:

; 940  : 
; 941  : 	m_bConfirmCommand = kResults.GetBool("ConfirmCommand");

	push	OFFSET ??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+464], al

; 942  : 	m_bVisible = kResults.GetBool("Visible");

	push	OFFSET ??_C@_07MGEGCLJM@Visible?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+465], al

; 943  : 	m_bAll = kResults.GetBool("All");

	push	OFFSET ??_C@_03HFJGAJFE@All?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+466], al

; 944  : 
; 945  : 	return true;

	mov	al, 1
$LN3@CacheResul@5:

; 946  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvCommandInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvCommandInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvAutomateInfo@@6B@				; CvAutomateInfo::`vftable'
PUBLIC	??0CvAutomateInfo@@QAE@XZ			; CvAutomateInfo::CvAutomateInfo
PUBLIC	?CacheResults@CvAutomateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvAutomateInfo::CacheResults
;	COMDAT ??_7CvAutomateInfo@@6B@
CONST	SEGMENT
??_7CvAutomateInfo@@6B@ DD FLAT:?CacheResults@CvAutomateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvAutomateInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvAutomateInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvAutomateInfo@@QAE@XZ PROC				; CvAutomateInfo::CvAutomateInfo, COMDAT
; _this$ = ecx

; 956  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvHotKeyInfo@@QAE@XZ			; CvHotKeyInfo::CvHotKeyInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvAutomateInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+468], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+469], 0

; 957  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvAutomateInfo@@QAE@XZ ENDP				; CvAutomateInfo::CvAutomateInfo
_TEXT	ENDS
PUBLIC	?getCommand@CvAutomateInfo@@QBEHXZ		; CvAutomateInfo::getCommand
; Function compile flags: /Odtp
;	COMDAT ?getCommand@CvAutomateInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCommand@CvAutomateInfo@@QBEHXZ PROC			; CvAutomateInfo::getCommand, COMDAT
; _this$ = ecx

; 960  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 961  : 	return m_iCommand;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 962  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCommand@CvAutomateInfo@@QBEHXZ ENDP			; CvAutomateInfo::getCommand
_TEXT	ENDS
PUBLIC	?setCommand@CvAutomateInfo@@QAEXH@Z		; CvAutomateInfo::setCommand
; Function compile flags: /Odtp
;	COMDAT ?setCommand@CvAutomateInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setCommand@CvAutomateInfo@@QAEXH@Z PROC		; CvAutomateInfo::setCommand, COMDAT
; _this$ = ecx

; 965  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 966  : 	m_iCommand = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+460], ecx

; 967  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setCommand@CvAutomateInfo@@QAEXH@Z ENDP		; CvAutomateInfo::setCommand
_TEXT	ENDS
PUBLIC	?getAutomate@CvAutomateInfo@@QBEHXZ		; CvAutomateInfo::getAutomate
; Function compile flags: /Odtp
;	COMDAT ?getAutomate@CvAutomateInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAutomate@CvAutomateInfo@@QBEHXZ PROC		; CvAutomateInfo::getAutomate, COMDAT
; _this$ = ecx

; 970  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 971  : 	return m_iAutomate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]

; 972  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAutomate@CvAutomateInfo@@QBEHXZ ENDP		; CvAutomateInfo::getAutomate
_TEXT	ENDS
PUBLIC	?setAutomate@CvAutomateInfo@@QAEXH@Z		; CvAutomateInfo::setAutomate
; Function compile flags: /Odtp
;	COMDAT ?setAutomate@CvAutomateInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setAutomate@CvAutomateInfo@@QAEXH@Z PROC		; CvAutomateInfo::setAutomate, COMDAT
; _this$ = ecx

; 975  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 976  : 	m_iAutomate = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+464], ecx

; 977  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAutomate@CvAutomateInfo@@QAEXH@Z ENDP		; CvAutomateInfo::setAutomate
_TEXT	ENDS
PUBLIC	?getConfirmCommand@CvAutomateInfo@@QBE_NXZ	; CvAutomateInfo::getConfirmCommand
; Function compile flags: /Odtp
;	COMDAT ?getConfirmCommand@CvAutomateInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getConfirmCommand@CvAutomateInfo@@QBE_NXZ PROC		; CvAutomateInfo::getConfirmCommand, COMDAT
; _this$ = ecx

; 980  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 981  : 	return m_bConfirmCommand;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+468]

; 982  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getConfirmCommand@CvAutomateInfo@@QBE_NXZ ENDP		; CvAutomateInfo::getConfirmCommand
_TEXT	ENDS
PUBLIC	?getVisible@CvAutomateInfo@@QBE_NXZ		; CvAutomateInfo::getVisible
; Function compile flags: /Odtp
;	COMDAT ?getVisible@CvAutomateInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVisible@CvAutomateInfo@@QBE_NXZ PROC		; CvAutomateInfo::getVisible, COMDAT
; _this$ = ecx

; 985  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 986  : 	return m_bVisible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+469]

; 987  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVisible@CvAutomateInfo@@QBE_NXZ ENDP		; CvAutomateInfo::getVisible
_TEXT	ENDS
PUBLIC	??_C@_07FFLLKOAD@Command?$AA@			; `string'
;	COMDAT ??_C@_07FFLLKOAD@Command?$AA@
CONST	SEGMENT
??_C@_07FFLLKOAD@Command?$AA@ DB 'Command', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvAutomateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_szAutomate$ = -8					; size = 4
_szCommand$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvAutomateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvAutomateInfo::CacheResults, COMDAT
; _this$ = ecx

; 990  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 	if(!CvHotKeyInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@6

; 992  : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@6
$LN1@CacheResul@6:

; 993  : 
; 994  : 	const char* szCommand = kResults.GetText("Command");

	push	OFFSET ??_C@_07FFLLKOAD@Command?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szCommand$[ebp], eax

; 995  : 	setCommand(GC.getInfoTypeForString(szCommand, true));

	push	1
	mov	eax, DWORD PTR _szCommand$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setCommand@CvAutomateInfo@@QAEXH@Z	; CvAutomateInfo::setCommand

; 996  : 
; 997  : 	const char* szAutomate = kResults.GetText("Automate");

	push	OFFSET ??_C@_08HMGAFGKC@Automate?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szAutomate$[ebp], eax

; 998  : 	setAutomate(GC.getInfoTypeForString(szAutomate, true));

	push	1
	mov	ecx, DWORD PTR _szAutomate$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAutomate@CvAutomateInfo@@QAEXH@Z	; CvAutomateInfo::setAutomate

; 999  : 
; 1000 : 	m_bConfirmCommand = kResults.GetBool("ConfirmCommand");

	push	OFFSET ??_C@_0P@KBPGNMLL@ConfirmCommand?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+468], al

; 1001 : 	m_bVisible = kResults.GetBool("Visible");

	push	OFFSET ??_C@_07MGEGCLJM@Visible?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+469], al

; 1002 : 
; 1003 : 	return true;

	mov	al, 1
$LN2@CacheResul@6:

; 1004 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvAutomateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvAutomateInfo::CacheResults
_TEXT	ENDS
PUBLIC	??0CvActionInfo@@QAE@XZ				; CvActionInfo::CvActionInfo
; Function compile flags: /Odtp
;	COMDAT ??0CvActionInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvActionInfo@@QAE@XZ PROC				; CvActionInfo::CvActionInfo, COMDAT
; _this$ = ecx

; 1012 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1

; 1013 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvActionInfo@@QAE@XZ ENDP				; CvActionInfo::CvActionInfo
_TEXT	ENDS
PUBLIC	?getMissionData@CvActionInfo@@QBEHXZ		; CvActionInfo::getMissionData
; Function compile flags: /Odtp
;	COMDAT ?getMissionData@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMissionData@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getMissionData, COMDAT
; _this$ = ecx

; 1016 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1017 : 
; 1018 : 	if(
; 1019 : 	    (ACTIONSUBTYPE_BUILD == m_eSubType)			||
; 1020 : 	    (ACTIONSUBTYPE_SPECIALIST == m_eSubType)
; 1021 : 	)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $LN1@getMission
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 4
	jne	SHORT $LN2@getMission
$LN1@getMission:

; 1022 : 	{
; 1023 : 		return m_iOriginalIndex;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN3@getMission
$LN2@getMission:

; 1024 : 	}
; 1025 : 
; 1026 : 	return -1;

	or	eax, -1
$LN3@getMission:

; 1027 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMissionData@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getMissionData
_TEXT	ENDS
PUBLIC	?getCommandData@CvActionInfo@@QBEHXZ		; CvActionInfo::getCommandData
EXTRN	?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z:PROC ; CvGlobals::getAutomateInfo
EXTRN	?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z:PROC ; CvGlobals::getCommandInfo
; Function compile flags: /Odtp
;	COMDAT ?getCommandData@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCommandData@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getCommandData, COMDAT
; _this$ = ecx

; 1030 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1031 : 
; 1032 : 	if(ACTIONSUBTYPE_PROMOTION == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 3
	jne	SHORT $LN5@getCommand

; 1033 : 	{
; 1034 : 		return m_iOriginalIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN6@getCommand
	jmp	SHORT $LN4@getCommand
$LN5@getCommand:

; 1035 : 	}
; 1036 : #ifdef AUI_WARNING_FIXES
; 1037 : 	else
; 1038 : 		return getAutomateType();
; 1039 : #else
; 1040 : 	else if(ACTIONSUBTYPE_COMMAND == m_eSubType)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN3@getCommand

; 1041 : 	{
; 1042 : 		return GC.getCommandInfo((CommandTypes)m_iOriginalIndex)->getAutomate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z ; CvGlobals::getCommandInfo
	mov	ecx, eax
	call	?getAutomate@CvCommandInfo@@QBEHXZ	; CvCommandInfo::getAutomate
	jmp	SHORT $LN6@getCommand
	jmp	SHORT $LN4@getCommand
$LN3@getCommand:

; 1043 : 	}
; 1044 : 	else if(ACTIONSUBTYPE_AUTOMATE == m_eSubType)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 6
	jne	SHORT $LN4@getCommand

; 1045 : 	{
; 1046 : 		return GC.getAutomateInfo(m_iOriginalIndex)->getAutomate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z ; CvGlobals::getAutomateInfo
	mov	ecx, eax
	call	?getAutomate@CvAutomateInfo@@QBEHXZ	; CvAutomateInfo::getAutomate
	jmp	SHORT $LN6@getCommand
$LN4@getCommand:

; 1047 : 	}
; 1048 : 
; 1049 : 	return -1;

	or	eax, -1
$LN6@getCommand:

; 1050 : #endif
; 1051 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCommandData@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getCommandData
_TEXT	ENDS
PUBLIC	?getAutomateType@CvActionInfo@@QBEHXZ		; CvActionInfo::getAutomateType
; Function compile flags: /Odtp
;	COMDAT ?getAutomateType@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_pkAutomateInfo$218280 = -8				; size = 4
_pkCommandInfo$218275 = -4				; size = 4
?getAutomateType@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getAutomateType, COMDAT
; _this$ = ecx

; 1054 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1055 : 
; 1056 : 	if(ACTIONSUBTYPE_COMMAND == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN5@getAutomat

; 1057 : 	{
; 1058 : 		CvCommandInfo* pkCommandInfo = GC.getCommandInfo((CommandTypes)m_iOriginalIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z ; CvGlobals::getCommandInfo
	mov	DWORD PTR _pkCommandInfo$218275[ebp], eax

; 1059 : 		if(pkCommandInfo)

	cmp	DWORD PTR _pkCommandInfo$218275[ebp], 0
	je	SHORT $LN4@getAutomat

; 1060 : 		{
; 1061 : 			return pkCommandInfo->getAutomate();

	mov	ecx, DWORD PTR _pkCommandInfo$218275[ebp]
	call	?getAutomate@CvCommandInfo@@QBEHXZ	; CvCommandInfo::getAutomate
	jmp	SHORT $LN6@getAutomat
$LN4@getAutomat:

; 1062 : 		}
; 1063 : 	}

	jmp	SHORT $LN3@getAutomat
$LN5@getAutomat:

; 1064 : 	else if(ACTIONSUBTYPE_AUTOMATE == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 6
	jne	SHORT $LN3@getAutomat

; 1065 : 	{
; 1066 : 		CvAutomateInfo* pkAutomateInfo = GC.getAutomateInfo(m_iOriginalIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z ; CvGlobals::getAutomateInfo
	mov	DWORD PTR _pkAutomateInfo$218280[ebp], eax

; 1067 : 		if(pkAutomateInfo)

	cmp	DWORD PTR _pkAutomateInfo$218280[ebp], 0
	je	SHORT $LN3@getAutomat

; 1068 : 		{
; 1069 : 			return pkAutomateInfo->getAutomate();

	mov	ecx, DWORD PTR _pkAutomateInfo$218280[ebp]
	call	?getAutomate@CvAutomateInfo@@QBEHXZ	; CvAutomateInfo::getAutomate
	jmp	SHORT $LN6@getAutomat
$LN3@getAutomat:

; 1070 : 		}
; 1071 : 	}
; 1072 : 
; 1073 : 	return NO_AUTOMATE;

	or	eax, -1
$LN6@getAutomat:

; 1074 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAutomateType@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getAutomateType
_TEXT	ENDS
PUBLIC	?getInterfaceModeType@CvActionInfo@@QBEHXZ	; CvActionInfo::getInterfaceModeType
; Function compile flags: /Odtp
;	COMDAT ?getInterfaceModeType@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInterfaceModeType@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getInterfaceModeType, COMDAT
; _this$ = ecx

; 1077 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1078 : 	if(ACTIONSUBTYPE_INTERFACEMODE == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@getInterfa

; 1079 : 	{
; 1080 : 		return m_iOriginalIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN2@getInterfa
$LN1@getInterfa:

; 1081 : 	}
; 1082 : 	return NO_INTERFACEMODE;

	or	eax, -1
$LN2@getInterfa:

; 1083 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInterfaceModeType@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getInterfaceModeType
_TEXT	ENDS
PUBLIC	?getMissionType@CvBuildInfo@@QBEHXZ		; CvBuildInfo::getMissionType
PUBLIC	?getMissionType@CvActionInfo@@QBEHXZ		; CvActionInfo::getMissionType
EXTRN	?getSpecialistInfo@CvGlobals@@QAEPAVCvSpecialistInfo@@W4SpecialistTypes@@@Z:PROC ; CvGlobals::getSpecialistInfo
EXTRN	?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z:PROC ; CvGlobals::getBuildInfo
; Function compile flags: /Odtp
;	COMDAT ?getMissionType@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_pkSpecialistInfo$218295 = -8				; size = 4
_pkBuildInfo$218290 = -4				; size = 4
?getMissionType@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getMissionType, COMDAT
; _this$ = ecx

; 1086 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1087 : 	if(ACTIONSUBTYPE_BUILD == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 2
	jne	SHORT $LN7@getMission@2

; 1088 : 	{
; 1089 : 		CvBuildInfo* pkBuildInfo = GC.getBuildInfo((BuildTypes)m_iOriginalIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z ; CvGlobals::getBuildInfo
	mov	DWORD PTR _pkBuildInfo$218290[ebp], eax

; 1090 : 		if(pkBuildInfo)

	cmp	DWORD PTR _pkBuildInfo$218290[ebp], 0
	je	SHORT $LN6@getMission@2

; 1091 : 			return pkBuildInfo->getMissionType();

	mov	ecx, DWORD PTR _pkBuildInfo$218290[ebp]
	call	?getMissionType@CvBuildInfo@@QBEHXZ	; CvBuildInfo::getMissionType
	jmp	SHORT $LN8@getMission@2
$LN6@getMission@2:

; 1092 : 	}

	jmp	SHORT $LN5@getMission@2
$LN7@getMission@2:

; 1093 : 	else if(ACTIONSUBTYPE_SPECIALIST == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jne	SHORT $LN4@getMission@2

; 1094 : 	{
; 1095 : 		CvSpecialistInfo* pkSpecialistInfo = GC.getSpecialistInfo((SpecialistTypes)m_iOriginalIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getSpecialistInfo@CvGlobals@@QAEPAVCvSpecialistInfo@@W4SpecialistTypes@@@Z ; CvGlobals::getSpecialistInfo
	mov	DWORD PTR _pkSpecialistInfo$218295[ebp], eax

; 1096 : 		if(pkSpecialistInfo)

	cmp	DWORD PTR _pkSpecialistInfo$218295[ebp], 0
	je	SHORT $LN3@getMission@2

; 1097 : 			return pkSpecialistInfo->getMissionType();

	mov	ecx, DWORD PTR _pkSpecialistInfo$218295[ebp]
	call	?getMissionType@CvSpecialistInfo@@QBEHXZ ; CvSpecialistInfo::getMissionType
	jmp	SHORT $LN8@getMission@2
$LN3@getMission@2:

; 1098 : 	}

	jmp	SHORT $LN5@getMission@2
$LN4@getMission@2:

; 1099 : 	else if(ACTIONSUBTYPE_MISSION == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 7
	jne	SHORT $LN5@getMission@2

; 1100 : 	{
; 1101 : 		return m_iOriginalIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN8@getMission@2
$LN5@getMission@2:

; 1102 : 	}
; 1103 : 
; 1104 : 	return NO_MISSION;

	or	eax, -1
$LN8@getMission@2:

; 1105 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMissionType@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getMissionType
_TEXT	ENDS
PUBLIC	?getCommandType@CvActionInfo@@QBEHXZ		; CvActionInfo::getCommandType
EXTRN	?GetCommandType@CvPromotionEntry@@QBEHXZ:PROC	; CvPromotionEntry::GetCommandType
EXTRN	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z:PROC ; CvGlobals::getPromotionInfo
; Function compile flags: /Odtp
;	COMDAT ?getCommandType@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_pkAutomateInfo$218311 = -8				; size = 4
_pkPromotionInfo$218306 = -4				; size = 4
?getCommandType@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getCommandType, COMDAT
; _this$ = ecx

; 1108 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1109 : 	if(ACTIONSUBTYPE_COMMAND == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN7@getCommand@2

; 1110 : 	{
; 1111 : 		return m_iOriginalIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN8@getCommand@2
	jmp	SHORT $LN6@getCommand@2
$LN7@getCommand@2:

; 1112 : 	}
; 1113 : 	else if(ACTIONSUBTYPE_PROMOTION == m_eSubType)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 3
	jne	SHORT $LN5@getCommand@2

; 1114 : 	{
; 1115 : 		CvPromotionEntry* pkPromotionInfo = GC.getPromotionInfo((PromotionTypes)m_iOriginalIndex);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _pkPromotionInfo$218306[ebp], eax

; 1116 : 		if(pkPromotionInfo)

	cmp	DWORD PTR _pkPromotionInfo$218306[ebp], 0
	je	SHORT $LN4@getCommand@2

; 1117 : 		{
; 1118 : 			return pkPromotionInfo->GetCommandType();

	mov	ecx, DWORD PTR _pkPromotionInfo$218306[ebp]
	call	?GetCommandType@CvPromotionEntry@@QBEHXZ ; CvPromotionEntry::GetCommandType
	jmp	SHORT $LN8@getCommand@2
$LN4@getCommand@2:

; 1119 : 		}
; 1120 : 	}

	jmp	SHORT $LN6@getCommand@2
$LN5@getCommand@2:

; 1121 : 	else if(ACTIONSUBTYPE_AUTOMATE == m_eSubType)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 6
	jne	SHORT $LN6@getCommand@2

; 1122 : 	{
; 1123 : 		CvAutomateInfo* pkAutomateInfo = GC.getAutomateInfo(m_iOriginalIndex);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z ; CvGlobals::getAutomateInfo
	mov	DWORD PTR _pkAutomateInfo$218311[ebp], eax

; 1124 : 		if(pkAutomateInfo)

	cmp	DWORD PTR _pkAutomateInfo$218311[ebp], 0
	je	SHORT $LN6@getCommand@2

; 1125 : 		{
; 1126 : 			return pkAutomateInfo->getCommand();

	mov	ecx, DWORD PTR _pkAutomateInfo$218311[ebp]
	call	?getCommand@CvAutomateInfo@@QBEHXZ	; CvAutomateInfo::getCommand
	jmp	SHORT $LN8@getCommand@2
$LN6@getCommand@2:

; 1127 : 		}
; 1128 : 	}
; 1129 : 
; 1130 : 	return NO_COMMAND;

	or	eax, -1
$LN8@getCommand@2:

; 1131 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCommandType@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getCommandType
_TEXT	ENDS
PUBLIC	?getControlType@CvActionInfo@@QBEHXZ		; CvActionInfo::getControlType
; Function compile flags: /Odtp
;	COMDAT ?getControlType@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getControlType@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getControlType, COMDAT
; _this$ = ecx

; 1134 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1135 : 	if(ACTIONSUBTYPE_CONTROL == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 5
	jne	SHORT $LN1@getControl

; 1136 : 	{
; 1137 : 		return m_iOriginalIndex;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN2@getControl
$LN1@getControl:

; 1138 : 	}
; 1139 : 	return -1;

	or	eax, -1
$LN2@getControl:

; 1140 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getControlType@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getControlType
_TEXT	ENDS
PUBLIC	?getOriginalIndex@CvActionInfo@@QBEHXZ		; CvActionInfo::getOriginalIndex
; Function compile flags: /Odtp
;	COMDAT ?getOriginalIndex@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOriginalIndex@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getOriginalIndex, COMDAT
; _this$ = ecx

; 1143 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1144 : 	return m_iOriginalIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 1145 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getOriginalIndex@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getOriginalIndex
_TEXT	ENDS
PUBLIC	?setOriginalIndex@CvActionInfo@@QAEXH@Z		; CvActionInfo::setOriginalIndex
; Function compile flags: /Odtp
;	COMDAT ?setOriginalIndex@CvActionInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setOriginalIndex@CvActionInfo@@QAEXH@Z PROC		; CvActionInfo::setOriginalIndex, COMDAT
; _this$ = ecx

; 1148 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1149 : 	m_iOriginalIndex = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx

; 1150 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setOriginalIndex@CvActionInfo@@QAEXH@Z ENDP		; CvActionInfo::setOriginalIndex
_TEXT	ENDS
PUBLIC	?isConfirmCommand@CvActionInfo@@QBE_NXZ		; CvActionInfo::isConfirmCommand
; Function compile flags: /Odtp
;	COMDAT ?isConfirmCommand@CvActionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_pkAutomateInfo$218333 = -8				; size = 4
_pkCommandInfo$218328 = -4				; size = 4
?isConfirmCommand@CvActionInfo@@QBE_NXZ PROC		; CvActionInfo::isConfirmCommand, COMDAT
; _this$ = ecx

; 1153 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 	if(ACTIONSUBTYPE_COMMAND == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN5@isConfirmC

; 1155 : 	{
; 1156 : 		CvCommandInfo* pkCommandInfo = GC.getCommandInfo((CommandTypes)m_iOriginalIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z ; CvGlobals::getCommandInfo
	mov	DWORD PTR _pkCommandInfo$218328[ebp], eax

; 1157 : 		if(pkCommandInfo)

	cmp	DWORD PTR _pkCommandInfo$218328[ebp], 0
	je	SHORT $LN4@isConfirmC

; 1158 : 		{
; 1159 : 			return pkCommandInfo->getConfirmCommand();

	mov	ecx, DWORD PTR _pkCommandInfo$218328[ebp]
	call	?getConfirmCommand@CvCommandInfo@@QBE_NXZ ; CvCommandInfo::getConfirmCommand
	jmp	SHORT $LN6@isConfirmC
$LN4@isConfirmC:

; 1160 : 		}
; 1161 : 	}

	jmp	SHORT $LN3@isConfirmC
$LN5@isConfirmC:

; 1162 : 	else if(ACTIONSUBTYPE_AUTOMATE == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 6
	jne	SHORT $LN3@isConfirmC

; 1163 : 	{
; 1164 : 		CvAutomateInfo* pkAutomateInfo = GC.getAutomateInfo(m_iOriginalIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z ; CvGlobals::getAutomateInfo
	mov	DWORD PTR _pkAutomateInfo$218333[ebp], eax

; 1165 : 		if(pkAutomateInfo)

	cmp	DWORD PTR _pkAutomateInfo$218333[ebp], 0
	je	SHORT $LN3@isConfirmC

; 1166 : 		{
; 1167 : 			return pkAutomateInfo->getConfirmCommand();

	mov	ecx, DWORD PTR _pkAutomateInfo$218333[ebp]
	call	?getConfirmCommand@CvAutomateInfo@@QBE_NXZ ; CvAutomateInfo::getConfirmCommand
	jmp	SHORT $LN6@isConfirmC
$LN3@isConfirmC:

; 1168 : 		}
; 1169 : 	}
; 1170 : 
; 1171 : 	return false;

	xor	al, al
$LN6@isConfirmC:

; 1172 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isConfirmCommand@CvActionInfo@@QBE_NXZ ENDP		; CvActionInfo::isConfirmCommand
_TEXT	ENDS
PUBLIC	?getVisible@CvInterfaceModeInfo@@QBE_NXZ	; CvInterfaceModeInfo::getVisible
PUBLIC	?isVisible@CvActionInfo@@QBE_NXZ		; CvActionInfo::isVisible
EXTRN	?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z:PROC ; CvGlobals::getInterfaceModeInfo
EXTRN	?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z:PROC ; CvGlobals::getMissionInfo
; Function compile flags: /Odtp
;	COMDAT ?isVisible@CvActionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_pkInterfaceModeInfo$218356 = -16			; size = 4
_pkMissionInfo$218351 = -12				; size = 4
_pkAutomateInfo$218346 = -8				; size = 4
_pkCommandInfo$218341 = -4				; size = 4
?isVisible@CvActionInfo@@QBE_NXZ PROC			; CvActionInfo::isVisible, COMDAT
; _this$ = ecx

; 1175 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 1176 : 	if(ACTIONSUBTYPE_CONTROL == m_eSubType)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 5
	jne	SHORT $LN13@isVisible

; 1177 : 	{
; 1178 : 		return false;

	xor	al, al
	jmp	$LN14@isVisible
	jmp	$LN12@isVisible
$LN13@isVisible:

; 1179 : 	}
; 1180 : 	else if(ACTIONSUBTYPE_COMMAND == m_eSubType)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN11@isVisible

; 1181 : 	{
; 1182 : 		CvCommandInfo* pkCommandInfo = GC.getCommandInfo((CommandTypes)m_iOriginalIndex);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z ; CvGlobals::getCommandInfo
	mov	DWORD PTR _pkCommandInfo$218341[ebp], eax

; 1183 : 		if(pkCommandInfo)

	cmp	DWORD PTR _pkCommandInfo$218341[ebp], 0
	je	SHORT $LN10@isVisible

; 1184 : 		{
; 1185 : 			return pkCommandInfo->getVisible();

	mov	ecx, DWORD PTR _pkCommandInfo$218341[ebp]
	call	?getVisible@CvCommandInfo@@QBE_NXZ	; CvCommandInfo::getVisible
	jmp	$LN14@isVisible
$LN10@isVisible:

; 1186 : 		}
; 1187 : 	}

	jmp	$LN12@isVisible
$LN11@isVisible:

; 1188 : 	else if(ACTIONSUBTYPE_AUTOMATE == m_eSubType)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 6
	jne	SHORT $LN8@isVisible

; 1189 : 	{
; 1190 : 		CvAutomateInfo* pkAutomateInfo = GC.getAutomateInfo((AutomateTypes)m_iOriginalIndex);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z ; CvGlobals::getAutomateInfo
	mov	DWORD PTR _pkAutomateInfo$218346[ebp], eax

; 1191 : 		if(pkAutomateInfo)

	cmp	DWORD PTR _pkAutomateInfo$218346[ebp], 0
	je	SHORT $LN7@isVisible

; 1192 : 		{
; 1193 : 			return pkAutomateInfo->getVisible();

	mov	ecx, DWORD PTR _pkAutomateInfo$218346[ebp]
	call	?getVisible@CvAutomateInfo@@QBE_NXZ	; CvAutomateInfo::getVisible
	jmp	SHORT $LN14@isVisible
$LN7@isVisible:

; 1194 : 		}
; 1195 : 	}

	jmp	SHORT $LN12@isVisible
$LN8@isVisible:

; 1196 : 	else if(ACTIONSUBTYPE_MISSION == m_eSubType)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 7
	jne	SHORT $LN5@isVisible

; 1197 : 	{
; 1198 : 		CvMissionInfo* pkMissionInfo = GC.getMissionInfo((MissionTypes)m_iOriginalIndex);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z ; CvGlobals::getMissionInfo
	mov	DWORD PTR _pkMissionInfo$218351[ebp], eax

; 1199 : 		if(pkMissionInfo)

	cmp	DWORD PTR _pkMissionInfo$218351[ebp], 0
	je	SHORT $LN4@isVisible

; 1200 : 		{
; 1201 : 			return pkMissionInfo->getVisible();

	mov	ecx, DWORD PTR _pkMissionInfo$218351[ebp]
	call	?getVisible@CvMissionInfo@@QBE_NXZ	; CvMissionInfo::getVisible
	jmp	SHORT $LN14@isVisible
$LN4@isVisible:

; 1202 : 		}
; 1203 : 	}

	jmp	SHORT $LN12@isVisible
$LN5@isVisible:

; 1204 : 	else if(ACTIONSUBTYPE_INTERFACEMODE== m_eSubType)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN12@isVisible

; 1205 : 	{
; 1206 : 		CvInterfaceModeInfo* pkInterfaceModeInfo = GC.getInterfaceModeInfo((InterfaceModeTypes)m_iOriginalIndex);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z ; CvGlobals::getInterfaceModeInfo
	mov	DWORD PTR _pkInterfaceModeInfo$218356[ebp], eax

; 1207 : 		if(pkInterfaceModeInfo)

	cmp	DWORD PTR _pkInterfaceModeInfo$218356[ebp], 0
	je	SHORT $LN12@isVisible

; 1208 : 		{
; 1209 : 			return pkInterfaceModeInfo->getVisible();

	mov	ecx, DWORD PTR _pkInterfaceModeInfo$218356[ebp]
	call	?getVisible@CvInterfaceModeInfo@@QBE_NXZ ; CvInterfaceModeInfo::getVisible
	jmp	SHORT $LN14@isVisible
$LN12@isVisible:

; 1210 : 		}
; 1211 : 	}
; 1212 : 
; 1213 : 	return true;

	mov	al, 1
$LN14@isVisible:

; 1214 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isVisible@CvActionInfo@@QBE_NXZ ENDP			; CvActionInfo::isVisible
_TEXT	ENDS
PUBLIC	?getSubType@CvActionInfo@@QBE?AW4ActionSubTypes@@XZ ; CvActionInfo::getSubType
; Function compile flags: /Odtp
;	COMDAT ?getSubType@CvActionInfo@@QBE?AW4ActionSubTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSubType@CvActionInfo@@QBE?AW4ActionSubTypes@@XZ PROC ; CvActionInfo::getSubType, COMDAT
; _this$ = ecx

; 1217 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1218 : 	return m_eSubType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1219 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSubType@CvActionInfo@@QBE?AW4ActionSubTypes@@XZ ENDP ; CvActionInfo::getSubType
_TEXT	ENDS
PUBLIC	?setSubType@CvActionInfo@@QAEXW4ActionSubTypes@@@Z ; CvActionInfo::setSubType
; Function compile flags: /Odtp
;	COMDAT ?setSubType@CvActionInfo@@QAEXW4ActionSubTypes@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_eSubType$ = 8						; size = 4
?setSubType@CvActionInfo@@QAEXW4ActionSubTypes@@@Z PROC	; CvActionInfo::setSubType, COMDAT
; _this$ = ecx

; 1222 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1223 : 	m_eSubType = eSubType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _eSubType$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1224 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setSubType@CvActionInfo@@QAEXW4ActionSubTypes@@@Z ENDP	; CvActionInfo::setSubType
_TEXT	ENDS
PUBLIC	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
EXTRN	?getControlInfo@CvGlobals@@QAEPAVCvControlInfo@@W4ControlTypes@@@Z:PROC ; CvGlobals::getControlInfo
; Function compile flags: /Odtp
;	COMDAT ?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ
_TEXT	SEGMENT
tv66 = -40						; size = 4
_this$ = -36						; size = 4
_pkMissionInfo$218402 = -32				; size = 4
_pkAutomateInfo$218398 = -28				; size = 4
_pkControlInfo$218394 = -24				; size = 4
_pkSpecialistInfo$218390 = -20				; size = 4
_pkPromotionInfo$218386 = -16				; size = 4
_pkBuildInfo$218382 = -12				; size = 4
_pkCommandInfo$218378 = -8				; size = 4
_pkInterfaceModInfo$218374 = -4				; size = 4
?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ PROC ; CvActionInfo::getHotkeyInfo, COMDAT
; _this$ = ecx

; 1227 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 1228 : 	switch(getSubType())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getSubType@CvActionInfo@@QBE?AW4ActionSubTypes@@XZ ; CvActionInfo::getSubType
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 7
	ja	$LN17@getHotkeyI
	mov	eax, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN21@getHotkeyI[eax*4]
$LN16@getHotkeyI:

; 1229 : 	{
; 1230 : 	case ACTIONSUBTYPE_INTERFACEMODE:
; 1231 : 	{
; 1232 : 		CvInterfaceModeInfo* pkInterfaceModInfo = GC.getInterfaceModeInfo((InterfaceModeTypes)getOriginalIndex());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInterfaceModeInfo@CvGlobals@@QAEPAVCvInterfaceModeInfo@@W4InterfaceModeTypes@@@Z ; CvGlobals::getInterfaceModeInfo
	mov	DWORD PTR _pkInterfaceModInfo$218374[ebp], eax

; 1233 : 		if(pkInterfaceModInfo)

	cmp	DWORD PTR _pkInterfaceModInfo$218374[ebp], 0
	je	SHORT $LN15@getHotkeyI

; 1234 : 		{
; 1235 : 			return pkInterfaceModInfo;

	mov	eax, DWORD PTR _pkInterfaceModInfo$218374[ebp]
	jmp	$LN19@getHotkeyI
$LN15@getHotkeyI:

; 1236 : 		}
; 1237 : 	}
; 1238 : 	break;

	jmp	$LN17@getHotkeyI
$LN14@getHotkeyI:

; 1239 : 	case ACTIONSUBTYPE_COMMAND:
; 1240 : 	{
; 1241 : 		CvCommandInfo* pkCommandInfo = GC.getCommandInfo((CommandTypes)getOriginalIndex());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getCommandInfo@CvGlobals@@QAEPAVCvCommandInfo@@W4CommandTypes@@@Z ; CvGlobals::getCommandInfo
	mov	DWORD PTR _pkCommandInfo$218378[ebp], eax

; 1242 : 		if(pkCommandInfo)

	cmp	DWORD PTR _pkCommandInfo$218378[ebp], 0
	je	SHORT $LN13@getHotkeyI

; 1243 : 		{
; 1244 : 			return pkCommandInfo;

	mov	eax, DWORD PTR _pkCommandInfo$218378[ebp]
	jmp	$LN19@getHotkeyI
$LN13@getHotkeyI:

; 1245 : 		}
; 1246 : 	}
; 1247 : 	break;

	jmp	$LN17@getHotkeyI
$LN12@getHotkeyI:

; 1248 : 	case ACTIONSUBTYPE_BUILD:
; 1249 : 	{
; 1250 : 		CvBuildInfo* pkBuildInfo = GC.getBuildInfo((BuildTypes)getOriginalIndex());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z ; CvGlobals::getBuildInfo
	mov	DWORD PTR _pkBuildInfo$218382[ebp], eax

; 1251 : 		if(pkBuildInfo)

	cmp	DWORD PTR _pkBuildInfo$218382[ebp], 0
	je	SHORT $LN11@getHotkeyI

; 1252 : 		{
; 1253 : 			return pkBuildInfo;

	mov	eax, DWORD PTR _pkBuildInfo$218382[ebp]
	jmp	$LN19@getHotkeyI
$LN11@getHotkeyI:

; 1254 : 		}
; 1255 : 	}
; 1256 : 	break;

	jmp	$LN17@getHotkeyI
$LN10@getHotkeyI:

; 1257 : 	case ACTIONSUBTYPE_PROMOTION:
; 1258 : 	{
; 1259 : 		CvPromotionEntry* pkPromotionInfo = GC.getPromotionInfo((PromotionTypes)getOriginalIndex());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getPromotionInfo@CvGlobals@@QAEPAVCvPromotionEntry@@W4PromotionTypes@@@Z ; CvGlobals::getPromotionInfo
	mov	DWORD PTR _pkPromotionInfo$218386[ebp], eax

; 1260 : 		if(pkPromotionInfo)

	cmp	DWORD PTR _pkPromotionInfo$218386[ebp], 0
	je	SHORT $LN9@getHotkeyI

; 1261 : 		{
; 1262 : 			return pkPromotionInfo;

	mov	eax, DWORD PTR _pkPromotionInfo$218386[ebp]
	jmp	$LN19@getHotkeyI
$LN9@getHotkeyI:

; 1263 : 		}
; 1264 : 	}
; 1265 : 	break;

	jmp	$LN17@getHotkeyI
$LN8@getHotkeyI:

; 1266 : 	case ACTIONSUBTYPE_SPECIALIST:
; 1267 : 	{
; 1268 : 		CvSpecialistInfo* pkSpecialistInfo = GC.getSpecialistInfo((SpecialistTypes)getOriginalIndex());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getSpecialistInfo@CvGlobals@@QAEPAVCvSpecialistInfo@@W4SpecialistTypes@@@Z ; CvGlobals::getSpecialistInfo
	mov	DWORD PTR _pkSpecialistInfo$218390[ebp], eax

; 1269 : 		if(pkSpecialistInfo)

	cmp	DWORD PTR _pkSpecialistInfo$218390[ebp], 0
	je	SHORT $LN7@getHotkeyI

; 1270 : 		{
; 1271 : 			return pkSpecialistInfo;

	mov	eax, DWORD PTR _pkSpecialistInfo$218390[ebp]
	jmp	SHORT $LN19@getHotkeyI
$LN7@getHotkeyI:

; 1272 : 		}
; 1273 : 	}
; 1274 : 	break;

	jmp	SHORT $LN17@getHotkeyI
$LN6@getHotkeyI:

; 1275 : 	case ACTIONSUBTYPE_CONTROL:
; 1276 : 	{
; 1277 : 		CvControlInfo* pkControlInfo = GC.getControlInfo((ControlTypes)getOriginalIndex());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getControlInfo@CvGlobals@@QAEPAVCvControlInfo@@W4ControlTypes@@@Z ; CvGlobals::getControlInfo
	mov	DWORD PTR _pkControlInfo$218394[ebp], eax

; 1278 : 		if(pkControlInfo)

	cmp	DWORD PTR _pkControlInfo$218394[ebp], 0
	je	SHORT $LN5@getHotkeyI

; 1279 : 		{
; 1280 : 			return pkControlInfo;

	mov	eax, DWORD PTR _pkControlInfo$218394[ebp]
	jmp	SHORT $LN19@getHotkeyI
$LN5@getHotkeyI:

; 1281 : 		}
; 1282 : 	}
; 1283 : 	break;

	jmp	SHORT $LN17@getHotkeyI
$LN4@getHotkeyI:

; 1284 : 	case ACTIONSUBTYPE_AUTOMATE:
; 1285 : 	{
; 1286 : 		CvAutomateInfo* pkAutomateInfo = GC.getAutomateInfo((AutomateTypes)getOriginalIndex());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getAutomateInfo@CvGlobals@@QAEPAVCvAutomateInfo@@H@Z ; CvGlobals::getAutomateInfo
	mov	DWORD PTR _pkAutomateInfo$218398[ebp], eax

; 1287 : 		if(pkAutomateInfo)

	cmp	DWORD PTR _pkAutomateInfo$218398[ebp], 0
	je	SHORT $LN3@getHotkeyI

; 1288 : 		{
; 1289 : 			return pkAutomateInfo;

	mov	eax, DWORD PTR _pkAutomateInfo$218398[ebp]
	jmp	SHORT $LN19@getHotkeyI
$LN3@getHotkeyI:

; 1290 : 		}
; 1291 : 	}
; 1292 : 	break;

	jmp	SHORT $LN17@getHotkeyI
$LN2@getHotkeyI:

; 1293 : 	case ACTIONSUBTYPE_MISSION:
; 1294 : 	{
; 1295 : 		CvMissionInfo* pkMissionInfo = GC.getMissionInfo((MissionTypes)getOriginalIndex());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getOriginalIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getOriginalIndex
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getMissionInfo@CvGlobals@@QAEPAVCvMissionInfo@@W4MissionTypes@@@Z ; CvGlobals::getMissionInfo
	mov	DWORD PTR _pkMissionInfo$218402[ebp], eax

; 1296 : 		if(pkMissionInfo)

	cmp	DWORD PTR _pkMissionInfo$218402[ebp], 0
	je	SHORT $LN17@getHotkeyI

; 1297 : 		{
; 1298 : 			return pkMissionInfo;

	mov	eax, DWORD PTR _pkMissionInfo$218402[ebp]
	jmp	SHORT $LN19@getHotkeyI
$LN17@getHotkeyI:

; 1299 : 		}
; 1300 : 	}
; 1301 : 	break;
; 1302 : 	}
; 1303 : 
; 1304 : 	CvAssertMsg((0) ,"Unknown Action Subtype in CvActionInfo::getHotkeyInfo");
; 1305 : 	return NULL;

	xor	eax, eax
$LN19@getHotkeyI:

; 1306 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@getHotkeyI:
	DD	$LN16@getHotkeyI
	DD	$LN14@getHotkeyI
	DD	$LN12@getHotkeyI
	DD	$LN10@getHotkeyI
	DD	$LN8@getHotkeyI
	DD	$LN6@getHotkeyI
	DD	$LN4@getHotkeyI
	DD	$LN2@getHotkeyI
?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ENDP ; CvActionInfo::getHotkeyInfo
_TEXT	ENDS
PUBLIC	?GetType@CvActionInfo@@QBEPBDXZ			; CvActionInfo::GetType
; Function compile flags: /Odtp
;	COMDAT ?GetType@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228831 = -4						; size = 4
?GetType@CvActionInfo@@QBEPBDXZ PROC			; CvActionInfo::GetType, COMDAT
; _this$ = ecx

; 1309 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@GetType

; 1311 : 	{
; 1312 : 		return getHotkeyInfo()->GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	DWORD PTR $T228831[ebp], eax
	mov	ecx, DWORD PTR $T228831[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	jmp	SHORT $LN2@GetType
$LN1@GetType:

; 1313 : 	}
; 1314 : 
; 1315 : 	return NULL;

	xor	eax, eax
$LN2@GetType:

; 1316 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@CvActionInfo@@QBEPBDXZ ENDP			; CvActionInfo::GetType
_TEXT	ENDS
PUBLIC	?GetDescription@CvActionInfo@@QBEPBDXZ		; CvActionInfo::GetDescription
; Function compile flags: /Odtp
;	COMDAT ?GetDescription@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228837 = -4						; size = 4
?GetDescription@CvActionInfo@@QBEPBDXZ PROC		; CvActionInfo::GetDescription, COMDAT
; _this$ = ecx

; 1319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1320 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@GetDescrip

; 1321 : 	{
; 1322 : 		return getHotkeyInfo()->GetDescription();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	DWORD PTR $T228837[ebp], eax
	mov	ecx, DWORD PTR $T228837[ebp]
	add	ecx, 36					; 00000024H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	jmp	SHORT $LN2@GetDescrip
$LN1@GetDescrip:

; 1323 : 	}
; 1324 : 
; 1325 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN2@GetDescrip:

; 1326 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDescription@CvActionInfo@@QBEPBDXZ ENDP		; CvActionInfo::GetDescription
_TEXT	ENDS
PUBLIC	?GetCivilopedia@CvActionInfo@@QBEPBDXZ		; CvActionInfo::GetCivilopedia
; Function compile flags: /Odtp
;	COMDAT ?GetCivilopedia@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228843 = -4						; size = 4
?GetCivilopedia@CvActionInfo@@QBEPBDXZ PROC		; CvActionInfo::GetCivilopedia, COMDAT
; _this$ = ecx

; 1329 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1330 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@GetCivilop

; 1331 : 	{
; 1332 : 		return getHotkeyInfo()->GetCivilopedia();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	DWORD PTR $T228843[ebp], eax
	mov	ecx, DWORD PTR $T228843[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	jmp	SHORT $LN2@GetCivilop
$LN1@GetCivilop:

; 1333 : 	}
; 1334 : 
; 1335 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN2@GetCivilop:

; 1336 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCivilopedia@CvActionInfo@@QBEPBDXZ ENDP		; CvActionInfo::GetCivilopedia
_TEXT	ENDS
PUBLIC	?GetHelp@CvActionInfo@@QBEPBDXZ			; CvActionInfo::GetHelp
; Function compile flags: /Odtp
;	COMDAT ?GetHelp@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHelp@CvActionInfo@@QBEPBDXZ PROC			; CvActionInfo::GetHelp, COMDAT
; _this$ = ecx

; 1339 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1340 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@GetHelp

; 1341 : 	{
; 1342 : 		return getHotkeyInfo()->getHelp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getHelp@CvHotKeyInfo@@QBEPBDXZ		; CvHotKeyInfo::getHelp
	jmp	SHORT $LN2@GetHelp
$LN1@GetHelp:

; 1343 : 	}
; 1344 : 
; 1345 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN2@GetHelp:

; 1346 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetHelp@CvActionInfo@@QBEPBDXZ ENDP			; CvActionInfo::GetHelp
_TEXT	ENDS
PUBLIC	?GetDisabledHelp@CvActionInfo@@QBEPBDXZ		; CvActionInfo::GetDisabledHelp
; Function compile flags: /Odtp
;	COMDAT ?GetDisabledHelp@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDisabledHelp@CvActionInfo@@QBEPBDXZ PROC		; CvActionInfo::GetDisabledHelp, COMDAT
; _this$ = ecx

; 1349 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1350 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@GetDisable

; 1351 : 	{
; 1352 : 		return getHotkeyInfo()->getDisabledHelp();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getDisabledHelp@CvHotKeyInfo@@QBEPBDXZ	; CvHotKeyInfo::getDisabledHelp
	jmp	SHORT $LN2@GetDisable
$LN1@GetDisable:

; 1353 : 	}
; 1354 : 
; 1355 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN2@GetDisable:

; 1356 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDisabledHelp@CvActionInfo@@QBEPBDXZ ENDP		; CvActionInfo::GetDisabledHelp
_TEXT	ENDS
PUBLIC	?GetStrategy@CvActionInfo@@QBEPBDXZ		; CvActionInfo::GetStrategy
; Function compile flags: /Odtp
;	COMDAT ?GetStrategy@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228853 = -4						; size = 4
?GetStrategy@CvActionInfo@@QBEPBDXZ PROC		; CvActionInfo::GetStrategy, COMDAT
; _this$ = ecx

; 1359 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1360 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@GetStrateg

; 1361 : 	{
; 1362 : 		return getHotkeyInfo()->GetStrategy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	DWORD PTR $T228853[ebp], eax
	mov	ecx, DWORD PTR $T228853[ebp]
	add	ecx, 148				; 00000094H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	jmp	SHORT $LN2@GetStrateg
$LN1@GetStrateg:

; 1363 : 	}
; 1364 : 
; 1365 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN2@GetStrateg:

; 1366 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetStrategy@CvActionInfo@@QBEPBDXZ ENDP		; CvActionInfo::GetStrategy
_TEXT	ENDS
PUBLIC	?GetTextKey@CvActionInfo@@QBEPBDXZ		; CvActionInfo::GetTextKey
; Function compile flags: /Odtp
;	COMDAT ?GetTextKey@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTextKey@CvActionInfo@@QBEPBDXZ PROC			; CvActionInfo::GetTextKey, COMDAT
; _this$ = ecx

; 1369 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1370 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@GetTextKey@2

; 1371 : 	{
; 1372 : 		return getHotkeyInfo()->GetTextKey();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?GetTextKey@CvBaseInfo@@QBEPBDXZ	; CvBaseInfo::GetTextKey
	jmp	SHORT $LN2@GetTextKey@2
$LN1@GetTextKey@2:

; 1373 : 	}
; 1374 : 
; 1375 : 	return NULL;

	xor	eax, eax
$LN2@GetTextKey@2:

; 1376 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextKey@CvActionInfo@@QBEPBDXZ ENDP			; CvActionInfo::GetTextKey
_TEXT	ENDS
PUBLIC	?getActionInfoIndex@CvActionInfo@@QBEHXZ	; CvActionInfo::getActionInfoIndex
; Function compile flags: /Odtp
;	COMDAT ?getActionInfoIndex@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getActionInfoIndex@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getActionInfoIndex, COMDAT
; _this$ = ecx

; 1379 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1380 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getActionI

; 1381 : 	{
; 1382 : 		return getHotkeyInfo()->getActionInfoIndex();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getActionInfoIndex@CvHotKeyInfo@@QBEHXZ ; CvHotKeyInfo::getActionInfoIndex
	jmp	SHORT $LN2@getActionI
$LN1@getActionI:

; 1383 : 	}
; 1384 : 
; 1385 : 	return -1;

	or	eax, -1
$LN2@getActionI:

; 1386 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getActionInfoIndex@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getActionInfoIndex
_TEXT	ENDS
PUBLIC	?getHotKeyVal@CvActionInfo@@QBEHXZ		; CvActionInfo::getHotKeyVal
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyVal@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyVal@CvActionInfo@@QBEHXZ PROC			; CvActionInfo::getHotKeyVal, COMDAT
; _this$ = ecx

; 1389 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1390 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getHotKeyV

; 1391 : 	{
; 1392 : 		return getHotkeyInfo()->getHotKeyVal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getHotKeyVal@CvHotKeyInfo@@QBEHXZ	; CvHotKeyInfo::getHotKeyVal
	jmp	SHORT $LN2@getHotKeyV
$LN1@getHotKeyV:

; 1393 : 	}
; 1394 : 
; 1395 : 	return -1;

	or	eax, -1
$LN2@getHotKeyV:

; 1396 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyVal@CvActionInfo@@QBEHXZ ENDP			; CvActionInfo::getHotKeyVal
_TEXT	ENDS
PUBLIC	?getHotKeyPriority@CvActionInfo@@QBEHXZ		; CvActionInfo::getHotKeyPriority
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyPriority@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyPriority@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getHotKeyPriority, COMDAT
; _this$ = ecx

; 1399 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1400 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getHotKeyP

; 1401 : 	{
; 1402 : 		return getHotkeyInfo()->getHotKeyPriority();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getHotKeyPriority@CvHotKeyInfo@@QBEHXZ	; CvHotKeyInfo::getHotKeyPriority
	jmp	SHORT $LN2@getHotKeyP
$LN1@getHotKeyP:

; 1403 : 	}
; 1404 : 
; 1405 : 	return -1;

	or	eax, -1
$LN2@getHotKeyP:

; 1406 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyPriority@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getHotKeyPriority
_TEXT	ENDS
PUBLIC	?getHotKeyValAlt@CvActionInfo@@QBEHXZ		; CvActionInfo::getHotKeyValAlt
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyValAlt@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyValAlt@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getHotKeyValAlt, COMDAT
; _this$ = ecx

; 1409 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1410 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getHotKeyV@2

; 1411 : 	{
; 1412 : 		return getHotkeyInfo()->getHotKeyValAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getHotKeyValAlt@CvHotKeyInfo@@QBEHXZ	; CvHotKeyInfo::getHotKeyValAlt
	jmp	SHORT $LN2@getHotKeyV@2
$LN1@getHotKeyV@2:

; 1413 : 	}
; 1414 : 
; 1415 : 	return -1;

	or	eax, -1
$LN2@getHotKeyV@2:

; 1416 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyValAlt@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getHotKeyValAlt
_TEXT	ENDS
PUBLIC	?getHotKeyPriorityAlt@CvActionInfo@@QBEHXZ	; CvActionInfo::getHotKeyPriorityAlt
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyPriorityAlt@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyPriorityAlt@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getHotKeyPriorityAlt, COMDAT
; _this$ = ecx

; 1419 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1420 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getHotKeyP@2

; 1421 : 	{
; 1422 : 		return getHotkeyInfo()->getHotKeyPriorityAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getHotKeyPriorityAlt@CvHotKeyInfo@@QBEHXZ ; CvHotKeyInfo::getHotKeyPriorityAlt
	jmp	SHORT $LN2@getHotKeyP@2
$LN1@getHotKeyP@2:

; 1423 : 	}
; 1424 : 
; 1425 : 	return -1;

	or	eax, -1
$LN2@getHotKeyP@2:

; 1426 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyPriorityAlt@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getHotKeyPriorityAlt
_TEXT	ENDS
PUBLIC	?getOrderPriority@CvActionInfo@@QBEHXZ		; CvActionInfo::getOrderPriority
; Function compile flags: /Odtp
;	COMDAT ?getOrderPriority@CvActionInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrderPriority@CvActionInfo@@QBEHXZ PROC		; CvActionInfo::getOrderPriority, COMDAT
; _this$ = ecx

; 1429 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1430 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getOrderPr

; 1431 : 	{
; 1432 : 		return getHotkeyInfo()->getOrderPriority();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getOrderPriority@CvHotKeyInfo@@QBEHXZ	; CvHotKeyInfo::getOrderPriority
	jmp	SHORT $LN2@getOrderPr
$LN1@getOrderPr:

; 1433 : 	}
; 1434 : 
; 1435 : 	return -1;

	or	eax, -1
$LN2@getOrderPr:

; 1436 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getOrderPriority@CvActionInfo@@QBEHXZ ENDP		; CvActionInfo::getOrderPriority
_TEXT	ENDS
PUBLIC	?isAltDown@CvActionInfo@@QBE_NXZ		; CvActionInfo::isAltDown
; Function compile flags: /Odtp
;	COMDAT ?isAltDown@CvActionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isAltDown@CvActionInfo@@QBE_NXZ PROC			; CvActionInfo::isAltDown, COMDAT
; _this$ = ecx

; 1439 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1440 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@isAltDown

; 1441 : 	{
; 1442 : 		return getHotkeyInfo()->isAltDown();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?isAltDown@CvHotKeyInfo@@QBE_NXZ	; CvHotKeyInfo::isAltDown
	jmp	SHORT $LN2@isAltDown
$LN1@isAltDown:

; 1443 : 	}
; 1444 : 
; 1445 : 	return false;

	xor	al, al
$LN2@isAltDown:

; 1446 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isAltDown@CvActionInfo@@QBE_NXZ ENDP			; CvActionInfo::isAltDown
_TEXT	ENDS
PUBLIC	?isShiftDown@CvActionInfo@@QBE_NXZ		; CvActionInfo::isShiftDown
; Function compile flags: /Odtp
;	COMDAT ?isShiftDown@CvActionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isShiftDown@CvActionInfo@@QBE_NXZ PROC			; CvActionInfo::isShiftDown, COMDAT
; _this$ = ecx

; 1449 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1450 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@isShiftDow

; 1451 : 	{
; 1452 : 		return getHotkeyInfo()->isShiftDown();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?isShiftDown@CvHotKeyInfo@@QBE_NXZ	; CvHotKeyInfo::isShiftDown
	jmp	SHORT $LN2@isShiftDow
$LN1@isShiftDow:

; 1453 : 	}
; 1454 : 
; 1455 : 	return false;

	xor	al, al
$LN2@isShiftDow:

; 1456 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isShiftDown@CvActionInfo@@QBE_NXZ ENDP			; CvActionInfo::isShiftDown
_TEXT	ENDS
PUBLIC	?isCtrlDown@CvActionInfo@@QBE_NXZ		; CvActionInfo::isCtrlDown
; Function compile flags: /Odtp
;	COMDAT ?isCtrlDown@CvActionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isCtrlDown@CvActionInfo@@QBE_NXZ PROC			; CvActionInfo::isCtrlDown, COMDAT
; _this$ = ecx

; 1459 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1460 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@isCtrlDown

; 1461 : 	{
; 1462 : 		return getHotkeyInfo()->isCtrlDown();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?isCtrlDown@CvHotKeyInfo@@QBE_NXZ	; CvHotKeyInfo::isCtrlDown
	jmp	SHORT $LN2@isCtrlDown
$LN1@isCtrlDown:

; 1463 : 	}
; 1464 : 
; 1465 : 	return false;

	xor	al, al
$LN2@isCtrlDown:

; 1466 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isCtrlDown@CvActionInfo@@QBE_NXZ ENDP			; CvActionInfo::isCtrlDown
_TEXT	ENDS
PUBLIC	?isAltDownAlt@CvActionInfo@@QBE_NXZ		; CvActionInfo::isAltDownAlt
; Function compile flags: /Odtp
;	COMDAT ?isAltDownAlt@CvActionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isAltDownAlt@CvActionInfo@@QBE_NXZ PROC		; CvActionInfo::isAltDownAlt, COMDAT
; _this$ = ecx

; 1469 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1470 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@isAltDownA

; 1471 : 	{
; 1472 : 		return getHotkeyInfo()->isAltDownAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?isAltDownAlt@CvHotKeyInfo@@QBE_NXZ	; CvHotKeyInfo::isAltDownAlt
	jmp	SHORT $LN2@isAltDownA
$LN1@isAltDownA:

; 1473 : 	}
; 1474 : 
; 1475 : 	return false;

	xor	al, al
$LN2@isAltDownA:

; 1476 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isAltDownAlt@CvActionInfo@@QBE_NXZ ENDP		; CvActionInfo::isAltDownAlt
_TEXT	ENDS
PUBLIC	?isShiftDownAlt@CvActionInfo@@QBE_NXZ		; CvActionInfo::isShiftDownAlt
; Function compile flags: /Odtp
;	COMDAT ?isShiftDownAlt@CvActionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isShiftDownAlt@CvActionInfo@@QBE_NXZ PROC		; CvActionInfo::isShiftDownAlt, COMDAT
; _this$ = ecx

; 1479 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1480 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@isShiftDow@2

; 1481 : 	{
; 1482 : 		return getHotkeyInfo()->isShiftDownAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?isShiftDownAlt@CvHotKeyInfo@@QBE_NXZ	; CvHotKeyInfo::isShiftDownAlt
	jmp	SHORT $LN2@isShiftDow@2
$LN1@isShiftDow@2:

; 1483 : 	}
; 1484 : 
; 1485 : 	return false;

	xor	al, al
$LN2@isShiftDow@2:

; 1486 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isShiftDownAlt@CvActionInfo@@QBE_NXZ ENDP		; CvActionInfo::isShiftDownAlt
_TEXT	ENDS
PUBLIC	?isCtrlDownAlt@CvActionInfo@@QBE_NXZ		; CvActionInfo::isCtrlDownAlt
; Function compile flags: /Odtp
;	COMDAT ?isCtrlDownAlt@CvActionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isCtrlDownAlt@CvActionInfo@@QBE_NXZ PROC		; CvActionInfo::isCtrlDownAlt, COMDAT
; _this$ = ecx

; 1489 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1490 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@isCtrlDown@2

; 1491 : 	{
; 1492 : 		return getHotkeyInfo()->isCtrlDownAlt();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?isCtrlDownAlt@CvHotKeyInfo@@QBE_NXZ	; CvHotKeyInfo::isCtrlDownAlt
	jmp	SHORT $LN2@isCtrlDown@2
$LN1@isCtrlDown@2:

; 1493 : 	}
; 1494 : 
; 1495 : 	return false;

	xor	al, al
$LN2@isCtrlDown@2:

; 1496 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isCtrlDownAlt@CvActionInfo@@QBE_NXZ ENDP		; CvActionInfo::isCtrlDownAlt
_TEXT	ENDS
PUBLIC	?getHotKey@CvActionInfo@@QBEPBDXZ		; CvActionInfo::getHotKey
; Function compile flags: /Odtp
;	COMDAT ?getHotKey@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKey@CvActionInfo@@QBEPBDXZ PROC			; CvActionInfo::getHotKey, COMDAT
; _this$ = ecx

; 1499 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1500 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getHotKey

; 1501 : 	{
; 1502 : 		return getHotkeyInfo()->getHotKey();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getHotKey@CvHotKeyInfo@@QBEPBDXZ	; CvHotKeyInfo::getHotKey
	jmp	SHORT $LN2@getHotKey
$LN1@getHotKey:

; 1503 : 	}
; 1504 : 
; 1505 : 	return NULL;

	xor	eax, eax
$LN2@getHotKey:

; 1506 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKey@CvActionInfo@@QBEPBDXZ ENDP			; CvActionInfo::getHotKey
_TEXT	ENDS
PUBLIC	?getHotKeyDescription@CvActionInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CvActionInfo::getHotKeyDescription
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyDescription@CvActionInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228885 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getHotKeyDescription@CvActionInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CvActionInfo::getHotKeyDescription, COMDAT
; _this$ = ecx

; 1509 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T228885[ebp], 0

; 1510 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getHotKeyD@2

; 1511 : 	{
; 1512 : 		return getHotkeyInfo()->getHotKeyDescription();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getHotKeyDescription@CvHotKeyInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CvHotKeyInfo::getHotKeyDescription
	mov	ecx, DWORD PTR $T228885[ebp]
	or	ecx, 1
	mov	DWORD PTR $T228885[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@getHotKeyD@2
$LN1@getHotKeyD@2:

; 1513 : 	}
; 1514 : 
; 1515 : 	return "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	edx, DWORD PTR $T228885[ebp]
	or	edx, 1
	mov	DWORD PTR $T228885[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@getHotKeyD@2:

; 1516 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getHotKeyDescription@CvActionInfo@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CvActionInfo::getHotKeyDescription
_TEXT	ENDS
PUBLIC	?getHotKeyString@CvActionInfo@@QBEPBDXZ		; CvActionInfo::getHotKeyString
; Function compile flags: /Odtp
;	COMDAT ?getHotKeyString@CvActionInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHotKeyString@CvActionInfo@@QBEPBDXZ PROC		; CvActionInfo::getHotKeyString, COMDAT
; _this$ = ecx

; 1519 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1520 : 	if(getHotkeyInfo())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	test	eax, eax
	je	SHORT $LN1@getHotKeyS

; 1521 : 	{
; 1522 : 		return getHotkeyInfo()->getHotKeyString();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getHotkeyInfo@CvActionInfo@@ABEPAVCvHotKeyInfo@@XZ ; CvActionInfo::getHotkeyInfo
	mov	ecx, eax
	call	?getHotKeyString@CvHotKeyInfo@@QBEPBDXZ	; CvHotKeyInfo::getHotKeyString
	jmp	SHORT $LN2@getHotKeyS
$LN1@getHotKeyS:

; 1523 : 	}
; 1524 : 
; 1525 : 	return "";

	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN2@getHotKeyS:

; 1526 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHotKeyString@CvActionInfo@@QBEPBDXZ ENDP		; CvActionInfo::getHotKeyString
_TEXT	ENDS
PUBLIC	?getFormationName@CvMultiUnitFormationInfo@@QBEPBDXZ ; CvMultiUnitFormationInfo::getFormationName
; Function compile flags: /Odtp
;	COMDAT ?getFormationName@CvMultiUnitFormationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFormationName@CvMultiUnitFormationInfo@@QBEPBDXZ PROC ; CvMultiUnitFormationInfo::getFormationName, COMDAT
; _this$ = ecx

; 1532 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1533 : 	return m_strFormationName;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 1534 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFormationName@CvMultiUnitFormationInfo@@QBEPBDXZ ENDP ; CvMultiUnitFormationInfo::getFormationName
_TEXT	ENDS
PUBLIC	?getNumFormationSlotEntries@CvMultiUnitFormationInfo@@QBEHXZ ; CvMultiUnitFormationInfo::getNumFormationSlotEntries
; Function compile flags: /Odtp
;	COMDAT ?getNumFormationSlotEntries@CvMultiUnitFormationInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T228899 = -4						; size = 4
?getNumFormationSlotEntries@CvMultiUnitFormationInfo@@QBEHXZ PROC ; CvMultiUnitFormationInfo::getNumFormationSlotEntries, COMDAT
; _this$ = ecx

; 1537 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1538 : 	return m_vctSlotEntries.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	mov	DWORD PTR $T228899[ebp], eax
	mov	ecx, DWORD PTR $T228899[ebp]
	mov	edx, DWORD PTR $T228899[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 4

; 1539 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumFormationSlotEntries@CvMultiUnitFormationInfo@@QBEHXZ ENDP ; CvMultiUnitFormationInfo::getNumFormationSlotEntries
_TEXT	ENDS
PUBLIC	?IsRequiresNavalUnitConsistency@CvMultiUnitFormationInfo@@QBE_NXZ ; CvMultiUnitFormationInfo::IsRequiresNavalUnitConsistency
; Function compile flags: /Odtp
;	COMDAT ?IsRequiresNavalUnitConsistency@CvMultiUnitFormationInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRequiresNavalUnitConsistency@CvMultiUnitFormationInfo@@QBE_NXZ PROC ; CvMultiUnitFormationInfo::IsRequiresNavalUnitConsistency, COMDAT
; _this$ = ecx

; 1542 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1543 : 	return m_bRequiresNavalUnitConsistency;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+304]

; 1544 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRequiresNavalUnitConsistency@CvMultiUnitFormationInfo@@QBE_NXZ ENDP ; CvMultiUnitFormationInfo::IsRequiresNavalUnitConsistency
_TEXT	ENDS
PUBLIC	?getFormationSlotEntry@CvMultiUnitFormationInfo@@QBEABVCvFormationSlotEntry@@H@Z ; CvMultiUnitFormationInfo::getFormationSlotEntry
; Function compile flags: /Odtp
;	COMDAT ?getFormationSlotEntry@CvMultiUnitFormationInfo@@QBEABVCvFormationSlotEntry@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?getFormationSlotEntry@CvMultiUnitFormationInfo@@QBEABVCvFormationSlotEntry@@H@Z PROC ; CvMultiUnitFormationInfo::getFormationSlotEntry, COMDAT
; _this$ = ecx

; 1547 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1548 : 	return m_vctSlotEntries[index];

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+292]

; 1549 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFormationSlotEntry@CvMultiUnitFormationInfo@@QBEABVCvFormationSlotEntry@@H@Z ENDP ; CvMultiUnitFormationInfo::getFormationSlotEntry
_TEXT	ENDS
PUBLIC	?push_back@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAEXABVCvFormationSlotEntry@@@Z ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::push_back
PUBLIC	?addFormationSlotEntry@CvMultiUnitFormationInfo@@QAEXABVCvFormationSlotEntry@@@Z ; CvMultiUnitFormationInfo::addFormationSlotEntry
; Function compile flags: /Odtp
;	COMDAT ?addFormationSlotEntry@CvMultiUnitFormationInfo@@QAEXABVCvFormationSlotEntry@@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
_slotEntry$ = 8						; size = 4
?addFormationSlotEntry@CvMultiUnitFormationInfo@@QAEXABVCvFormationSlotEntry@@@Z PROC ; CvMultiUnitFormationInfo::addFormationSlotEntry, COMDAT
; _this$ = ecx

; 1553 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 1554 : 	m_vctSlotEntries.push_back(slotEntry);

	mov	eax, DWORD PTR _slotEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	?push_back@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAEXABVCvFormationSlotEntry@@@Z ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::push_back

; 1555 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?addFormationSlotEntry@CvMultiUnitFormationInfo@@QAEXABVCvFormationSlotEntry@@@Z ENDP ; CvMultiUnitFormationInfo::addFormationSlotEntry
_TEXT	ENDS
PUBLIC	??_C@_0BC@BFDHELLJ@SecondaryUnitType?$AA@	; `string'
PUBLIC	??_C@_0BA@OFJADJED@PrimaryUnitType?$AA@		; `string'
PUBLIC	??_C@_0BG@HLFPCABM@MultiUnitPositionType?$AA@	; `string'
PUBLIC	??_C@_0N@FEKFKBOD@RequiredSlot?$AA@		; `string'
PUBLIC	??_C@_0BP@CDGBEIAG@MultiUnitFormation_SlotEntries?$AA@ ; `string'
PUBLIC	??_C@_0BH@LOLJNIGM@MultiUnitFormationType?$AA@	; `string'
PUBLIC	??_C@_0BN@DDCPDMBA@RequiresNavalUnitConsistency?$AA@ ; `string'
PUBLIC	??_C@_04FABLJDN@Name?$AA@			; `string'
PUBLIC	?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvMultiUnitFormationInfo::CacheResults
EXTRN	__imp_??1Results@Database@@UAE@XZ:PROC
EXTRN	__imp_?Step@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBD11@Z:PROC
EXTRN	__imp_??0Results@Database@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_0BC@BFDHELLJ@SecondaryUnitType?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
CONST	SEGMENT
??_C@_0BC@BFDHELLJ@SecondaryUnitType?$AA@ DB 'SecondaryUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OFJADJED@PrimaryUnitType?$AA@
CONST	SEGMENT
??_C@_0BA@OFJADJED@PrimaryUnitType?$AA@ DB 'PrimaryUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HLFPCABM@MultiUnitPositionType?$AA@
CONST	SEGMENT
??_C@_0BG@HLFPCABM@MultiUnitPositionType?$AA@ DB 'MultiUnitPositionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FEKFKBOD@RequiredSlot?$AA@
CONST	SEGMENT
??_C@_0N@FEKFKBOD@RequiredSlot?$AA@ DB 'RequiredSlot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CDGBEIAG@MultiUnitFormation_SlotEntries?$AA@
CONST	SEGMENT
??_C@_0BP@CDGBEIAG@MultiUnitFormation_SlotEntries?$AA@ DB 'MultiUnitForma'
	DB	'tion_SlotEntries', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LOLJNIGM@MultiUnitFormationType?$AA@
CONST	SEGMENT
??_C@_0BH@LOLJNIGM@MultiUnitFormationType?$AA@ DB 'MultiUnitFormationType'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DDCPDMBA@RequiresNavalUnitConsistency?$AA@
CONST	SEGMENT
??_C@_0BN@DDCPDMBA@RequiresNavalUnitConsistency?$AA@ DB 'RequiresNavalUni'
	DB	'tConsistency', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name?$AA@
CONST	SEGMENT
??_C@_04FABLJDN@Name?$AA@ DB 'Name', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
__ehfuncinfo$?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -172						; size = 4
$T229042 = -112						; size = 4
$T229038 = -108						; size = 4
$T229034 = -104						; size = 4
$T229033 = -100						; size = 4
_slotEntry$218527 = -96					; size = 16
_szTextVal$218529 = -80					; size = 4
_kSlotEntries$218520 = -76				; size = 64
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvMultiUnitFormationInfo::CacheResults, COMDAT
; _this$ = ecx

; 1558 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1559 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CacheResul@7

; 1560 : 		return false;

	xor	al, al
	jmp	$LN5@CacheResul@7
$LN4@CacheResul@7:

; 1561 : 
; 1562 : 	m_strFormationName = kResults.GetText("Name");

	push	OFFSET ??_C@_04FABLJDN@Name?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T229034[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR $T229033[ebp], eax
	cmp	DWORD PTR $T229034[ebp], 0
	je	SHORT $LN9@CacheResul@7
	mov	ecx, DWORD PTR $T229034[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T229033[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN10@CacheResul@7
$LN9@CacheResul@7:
	mov	ecx, DWORD PTR $T229033[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN10@CacheResul@7:

; 1563 : 	m_bRequiresNavalUnitConsistency = kResults.GetBool("RequiresNavalUnitConsistency");

	push	OFFSET ??_C@_0BN@DDCPDMBA@RequiresNavalUnitConsistency?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+304], al

; 1564 : 
; 1565 : 	//Slot entries
; 1566 : 	{
; 1567 : 		Database::Results kSlotEntries;

	push	0
	lea	ecx, DWORD PTR _kSlotEntries$218520[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1568 : 		if(DB.SelectAt(kSlotEntries, "MultiUnitFormation_SlotEntries", "MultiUnitFormationType", GetType()))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T229038[ebp], eax
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T229042[ebp], eax
	mov	ecx, DWORD PTR $T229038[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@LOLJNIGM@MultiUnitFormationType?$AA@
	push	OFFSET ??_C@_0BP@CDGBEIAG@MultiUnitFormation_SlotEntries?$AA@
	lea	edx, DWORD PTR _kSlotEntries$218520[ebp]
	push	edx
	mov	ecx, DWORD PTR $T229042[ebp]
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBD11@Z
	movzx	eax, al
	test	eax, eax
	je	$LN3@CacheResul@7
$LN2@CacheResul@7:

; 1569 : 		{
; 1570 : 			while(kSlotEntries.Step())

	lea	ecx, DWORD PTR _kSlotEntries$218520[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@CacheResul@7

; 1571 : 			{
; 1572 : 				CvFormationSlotEntry slotEntry;

	mov	DWORD PTR _slotEntry$218527[ebp], -1
	mov	DWORD PTR _slotEntry$218527[ebp+4], -1
	mov	DWORD PTR _slotEntry$218527[ebp+8], -1
	mov	BYTE PTR _slotEntry$218527[ebp+12], 0

; 1573 : 
; 1574 : 				//Basic Properties
; 1575 : 				slotEntry.m_requiredSlot = kSlotEntries.GetBool("RequiredSlot");

	push	OFFSET ??_C@_0N@FEKFKBOD@RequiredSlot?$AA@
	lea	ecx, DWORD PTR _kSlotEntries$218520[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	BYTE PTR _slotEntry$218527[ebp+12], al

; 1576 : 
; 1577 : 				//References
; 1578 : 				const char* szTextVal = NULL;

	mov	DWORD PTR _szTextVal$218529[ebp], 0

; 1579 : 				szTextVal = kSlotEntries.GetText("MultiUnitPositionType");

	push	OFFSET ??_C@_0BG@HLFPCABM@MultiUnitPositionType?$AA@
	lea	ecx, DWORD PTR _kSlotEntries$218520[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$218529[ebp], eax

; 1580 : 				slotEntry.m_ePositionType = (MultiunitPositionTypes)GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$218529[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _slotEntry$218527[ebp+8], eax

; 1581 : 
; 1582 : 				szTextVal = kSlotEntries.GetText("PrimaryUnitType");

	push	OFFSET ??_C@_0BA@OFJADJED@PrimaryUnitType?$AA@
	lea	ecx, DWORD PTR _kSlotEntries$218520[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$218529[ebp], eax

; 1583 : 				slotEntry.m_primaryUnitType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	eax, DWORD PTR _szTextVal$218529[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _slotEntry$218527[ebp], eax

; 1584 : 
; 1585 : 				szTextVal = kSlotEntries.GetText("SecondaryUnitType");

	push	OFFSET ??_C@_0BC@BFDHELLJ@SecondaryUnitType?$AA@
	lea	ecx, DWORD PTR _kSlotEntries$218520[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$218529[ebp], eax

; 1586 : 				slotEntry.m_secondaryUnitType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	ecx, DWORD PTR _szTextVal$218529[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _slotEntry$218527[ebp+4], eax

; 1587 : 
; 1588 : 				m_vctSlotEntries.push_back(slotEntry);

	lea	edx, DWORD PTR _slotEntry$218527[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	?push_back@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAEXABVCvFormationSlotEntry@@@Z ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::push_back

; 1589 : 			}

	jmp	$LN2@CacheResul@7
$LN3@CacheResul@7:

; 1590 : 		}
; 1591 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kSlotEntries$218520[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ

; 1592 : 
; 1593 : 	return true;

	mov	al, 1
$LN5@CacheResul@7:

; 1594 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _kSlotEntries$218520[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__ehhandler$?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvMultiUnitFormationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvMultiUnitFormationInfo::CacheResults
PUBLIC	??_7CvSpecialUnitInfo@@6B@			; CvSpecialUnitInfo::`vftable'
PUBLIC	??0CvSpecialUnitInfo@@QAE@XZ			; CvSpecialUnitInfo::CvSpecialUnitInfo
PUBLIC	?CacheResults@CvSpecialUnitInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvSpecialUnitInfo::CacheResults
EXTRN	??_ECvSpecialUnitInfo@@UAEPAXI@Z:PROC		; CvSpecialUnitInfo::`vector deleting destructor'
;	COMDAT ??_7CvSpecialUnitInfo@@6B@
CONST	SEGMENT
??_7CvSpecialUnitInfo@@6B@ DD FLAT:?CacheResults@CvSpecialUnitInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvSpecialUnitInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvSpecialUnitInfo@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvSpecialUnitInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvSpecialUnitInfo@@QAE@XZ PROC			; CvSpecialUnitInfo::CvSpecialUnitInfo, COMDAT
; _this$ = ecx

; 1604 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvSpecialUnitInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+261], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+264], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], 0

; 1605 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvSpecialUnitInfo@@QAE@XZ ENDP			; CvSpecialUnitInfo::CvSpecialUnitInfo
_TEXT	ENDS
PUBLIC	??1CvSpecialUnitInfo@@UAE@XZ			; CvSpecialUnitInfo::~CvSpecialUnitInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvSpecialUnitInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvSpecialUnitInfo@@UAEPAXI@Z PROC			; CvSpecialUnitInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvSpecialUnitInfo@@UAE@XZ		; CvSpecialUnitInfo::~CvSpecialUnitInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvSpecialUnitInfo@@UAEPAXI@Z ENDP			; CvSpecialUnitInfo::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvSpecialUnitInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T229187 = -16						; size = 4
$T229186 = -12						; size = 4
$T229181 = -8						; size = 4
$T229180 = -4						; size = 4
??1CvSpecialUnitInfo@@UAE@XZ PROC			; CvSpecialUnitInfo::~CvSpecialUnitInfo, COMDAT
; _this$ = ecx

; 1608 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvSpecialUnitInfo@@6B@

; 1609 : 	SAFE_DELETE_ARRAY(m_pbCarrierUnitAITypes);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	mov	DWORD PTR $T229181[ebp], ecx
	mov	edx, DWORD PTR $T229181[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T229180[ebp], eax
	mov	ecx, DWORD PTR $T229180[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T229181[ebp]
	mov	DWORD PTR [edx], 0

; 1610 : 	SAFE_DELETE_ARRAY(m_piProductionTraits);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	mov	DWORD PTR $T229187[ebp], eax
	mov	ecx, DWORD PTR $T229187[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T229186[ebp], edx
	mov	eax, DWORD PTR $T229186[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T229187[ebp]
	mov	DWORD PTR [ecx], 0

; 1611 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvSpecialUnitInfo@@UAE@XZ ENDP			; CvSpecialUnitInfo::~CvSpecialUnitInfo
_TEXT	ENDS
PUBLIC	?isValid@CvSpecialUnitInfo@@QBE_NXZ		; CvSpecialUnitInfo::isValid
; Function compile flags: /Odtp
;	COMDAT ?isValid@CvSpecialUnitInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isValid@CvSpecialUnitInfo@@QBE_NXZ PROC		; CvSpecialUnitInfo::isValid, COMDAT
; _this$ = ecx

; 1614 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1615 : 	return m_bValid;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+260]

; 1616 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isValid@CvSpecialUnitInfo@@QBE_NXZ ENDP		; CvSpecialUnitInfo::isValid
_TEXT	ENDS
PUBLIC	?isCityLoad@CvSpecialUnitInfo@@QBE_NXZ		; CvSpecialUnitInfo::isCityLoad
; Function compile flags: /Odtp
;	COMDAT ?isCityLoad@CvSpecialUnitInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isCityLoad@CvSpecialUnitInfo@@QBE_NXZ PROC		; CvSpecialUnitInfo::isCityLoad, COMDAT
; _this$ = ecx

; 1619 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1620 : 	return m_bCityLoad;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+261]

; 1621 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isCityLoad@CvSpecialUnitInfo@@QBE_NXZ ENDP		; CvSpecialUnitInfo::isCityLoad
_TEXT	ENDS
PUBLIC	?isCarrierUnitAIType@CvSpecialUnitInfo@@QBE_NH@Z ; CvSpecialUnitInfo::isCarrierUnitAIType
; Function compile flags: /Odtp
;	COMDAT ?isCarrierUnitAIType@CvSpecialUnitInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isCarrierUnitAIType@CvSpecialUnitInfo@@QBE_NH@Z PROC	; CvSpecialUnitInfo::isCarrierUnitAIType, COMDAT
; _this$ = ecx

; 1624 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1625 : 	CvAssertMsg(i < NUM_UNITAI_TYPES, "Index out of bounds");
; 1626 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1627 : 	return m_pbCarrierUnitAITypes ? m_pbCarrierUnitAITypes[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN3@isCarrierU
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@isCarrierU
$LN3@isCarrierU:
	mov	DWORD PTR tv69[ebp], -1
$LN4@isCarrierU:
	cmp	DWORD PTR tv69[ebp], 0
	setne	al

; 1628 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isCarrierUnitAIType@CvSpecialUnitInfo@@QBE_NH@Z ENDP	; CvSpecialUnitInfo::isCarrierUnitAIType
_TEXT	ENDS
PUBLIC	?getProductionTraits@CvSpecialUnitInfo@@QBEHH@Z	; CvSpecialUnitInfo::getProductionTraits
; Function compile flags: /Odtp
;	COMDAT ?getProductionTraits@CvSpecialUnitInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getProductionTraits@CvSpecialUnitInfo@@QBEHH@Z PROC	; CvSpecialUnitInfo::getProductionTraits, COMDAT
; _this$ = ecx

; 1631 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1632 : 	CvAssertMsg(i < GC.getNumTraitInfos(), "Index out of bounds");
; 1633 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1634 : 	return m_piProductionTraits ? m_piProductionTraits[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	SHORT $LN3@getProduct
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getProduct
$LN3@getProduct:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getProduct:
	mov	eax, DWORD PTR tv69[ebp]

; 1635 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getProductionTraits@CvSpecialUnitInfo@@QBEHH@Z ENDP	; CvSpecialUnitInfo::getProductionTraits
_TEXT	ENDS
PUBLIC	??_C@_06EGHFENCC@Traits?$AA@			; `string'
PUBLIC	??_C@_0BN@EBDAOBFJ@SpecialUnit_ProductionTraits?$AA@ ; `string'
PUBLIC	??_C@_09HHNMMNID@TraitType?$AA@			; `string'
PUBLIC	??_C@_05NFPPHLCJ@Trait?$AA@			; `string'
PUBLIC	??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@		; `string'
PUBLIC	??_C@_0BK@FJANCOED@SpecialUnit_CarrierUnitAI?$AA@ ; `string'
PUBLIC	??_C@_0L@NHJBPHOF@UnitAIType?$AA@		; `string'
PUBLIC	??_C@_0BA@EEFCDPCF@SpecialUnitType?$AA@		; `string'
PUBLIC	??_C@_08LDIFJKJL@CityLoad?$AA@			; `string'
PUBLIC	??_C@_05HNPPNPM@Valid?$AA@			; `string'
EXTRN	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z:PROC ; CvDatabaseUtility::PopulateArrayByValue
EXTRN	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z:PROC ; CvDatabaseUtility::PopulateArrayByExistence
;	COMDAT ??_C@_06EGHFENCC@Traits?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_06EGHFENCC@Traits?$AA@ DB 'Traits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EBDAOBFJ@SpecialUnit_ProductionTraits?$AA@
CONST	SEGMENT
??_C@_0BN@EBDAOBFJ@SpecialUnit_ProductionTraits?$AA@ DB 'SpecialUnit_Prod'
	DB	'uctionTraits', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09HHNMMNID@TraitType?$AA@
CONST	SEGMENT
??_C@_09HHNMMNID@TraitType?$AA@ DB 'TraitType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFPPHLCJ@Trait?$AA@
CONST	SEGMENT
??_C@_05NFPPHLCJ@Trait?$AA@ DB 'Trait', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@
CONST	SEGMENT
??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@ DB 'UnitAIInfos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FJANCOED@SpecialUnit_CarrierUnitAI?$AA@
CONST	SEGMENT
??_C@_0BK@FJANCOED@SpecialUnit_CarrierUnitAI?$AA@ DB 'SpecialUnit_Carrier'
	DB	'UnitAI', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHJBPHOF@UnitAIType?$AA@
CONST	SEGMENT
??_C@_0L@NHJBPHOF@UnitAIType?$AA@ DB 'UnitAIType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EEFCDPCF@SpecialUnitType?$AA@
CONST	SEGMENT
??_C@_0BA@EEFCDPCF@SpecialUnitType?$AA@ DB 'SpecialUnitType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LDIFJKJL@CityLoad?$AA@
CONST	SEGMENT
??_C@_08LDIFJKJL@CityLoad?$AA@ DB 'CityLoad', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNPPNPM@Valid?$AA@
CONST	SEGMENT
??_C@_05HNPPNPM@Valid?$AA@ DB 'Valid', 00H		; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvSpecialUnitInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szSpecialUnitType$ = -4				; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvSpecialUnitInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvSpecialUnitInfo::CacheResults, COMDAT
; _this$ = ecx

; 1638 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1639 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@8

; 1640 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@8
$LN1@CacheResul@8:

; 1641 : 
; 1642 : 	m_bValid = kResults.GetBool("Valid");

	push	OFFSET ??_C@_05HNPPNPM@Valid?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], al

; 1643 : 	m_bCityLoad = kResults.GetBool("CityLoad");

	push	OFFSET ??_C@_08LDIFJKJL@CityLoad?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+261], al

; 1644 : 
; 1645 : 	const char* szSpecialUnitType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szSpecialUnitType$[ebp], eax

; 1646 : 	kUtility.PopulateArrayByExistence(m_pbCarrierUnitAITypes, "UnitAIInfos", "SpecialUnit_CarrierUnitAI", "UnitAIType", "SpecialUnitType", szSpecialUnitType);

	mov	eax, DWORD PTR _szSpecialUnitType$[ebp]
	push	eax
	push	OFFSET ??_C@_0BA@EEFCDPCF@SpecialUnitType?$AA@
	push	OFFSET ??_C@_0L@NHJBPHOF@UnitAIType?$AA@
	push	OFFSET ??_C@_0BK@FJANCOED@SpecialUnit_CarrierUnitAI?$AA@
	push	OFFSET ??_C@_0M@MBMIHKHH@UnitAIInfos?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 1647 : 	kUtility.PopulateArrayByValue(m_piProductionTraits, "Traits", "SpecialUnit_ProductionTraits", "TraitType", "SpecialUnitType", szSpecialUnitType, "Trait");

	push	0
	push	0
	push	OFFSET ??_C@_05NFPPHLCJ@Trait?$AA@
	mov	edx, DWORD PTR _szSpecialUnitType$[ebp]
	push	edx
	push	OFFSET ??_C@_0BA@EEFCDPCF@SpecialUnitType?$AA@
	push	OFFSET ??_C@_09HHNMMNID@TraitType?$AA@
	push	OFFSET ??_C@_0BN@EBDAOBFJ@SpecialUnit_ProductionTraits?$AA@
	push	OFFSET ??_C@_06EGHFENCC@Traits?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 1648 : 
; 1649 : 	return true;

	mov	al, 1
$LN2@CacheResul@8:

; 1650 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvSpecialUnitInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvSpecialUnitInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvUnitClassInfo@@6B@			; CvUnitClassInfo::`vftable'
PUBLIC	??0CvUnitClassInfo@@QAE@XZ			; CvUnitClassInfo::CvUnitClassInfo
PUBLIC	?CacheResults@CvUnitClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvUnitClassInfo::CacheResults
;	COMDAT ??_7CvUnitClassInfo@@6B@
CONST	SEGMENT
??_7CvUnitClassInfo@@6B@ DD FLAT:?CacheResults@CvUnitClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvUnitClassInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvUnitClassInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvUnitClassInfo@@QAE@XZ PROC				; CvUnitClassInfo::CvUnitClassInfo, COMDAT
; _this$ = ecx

; 1661 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvUnitClassInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], -1

; 1662 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvUnitClassInfo@@QAE@XZ ENDP				; CvUnitClassInfo::CvUnitClassInfo
_TEXT	ENDS
PUBLIC	?getMaxGlobalInstances@CvUnitClassInfo@@QBEHXZ	; CvUnitClassInfo::getMaxGlobalInstances
; Function compile flags: /Odtp
;	COMDAT ?getMaxGlobalInstances@CvUnitClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxGlobalInstances@CvUnitClassInfo@@QBEHXZ PROC	; CvUnitClassInfo::getMaxGlobalInstances, COMDAT
; _this$ = ecx

; 1665 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1666 : 	return m_iMaxGlobalInstances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 1667 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxGlobalInstances@CvUnitClassInfo@@QBEHXZ ENDP	; CvUnitClassInfo::getMaxGlobalInstances
_TEXT	ENDS
PUBLIC	?getMaxTeamInstances@CvUnitClassInfo@@QBEHXZ	; CvUnitClassInfo::getMaxTeamInstances
; Function compile flags: /Odtp
;	COMDAT ?getMaxTeamInstances@CvUnitClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxTeamInstances@CvUnitClassInfo@@QBEHXZ PROC	; CvUnitClassInfo::getMaxTeamInstances, COMDAT
; _this$ = ecx

; 1670 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1671 : 	return m_iMaxTeamInstances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 1672 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxTeamInstances@CvUnitClassInfo@@QBEHXZ ENDP	; CvUnitClassInfo::getMaxTeamInstances
_TEXT	ENDS
PUBLIC	?getMaxPlayerInstances@CvUnitClassInfo@@QBEHXZ	; CvUnitClassInfo::getMaxPlayerInstances
; Function compile flags: /Odtp
;	COMDAT ?getMaxPlayerInstances@CvUnitClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxPlayerInstances@CvUnitClassInfo@@QBEHXZ PROC	; CvUnitClassInfo::getMaxPlayerInstances, COMDAT
; _this$ = ecx

; 1675 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1676 : 	return m_iMaxPlayerInstances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 1677 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxPlayerInstances@CvUnitClassInfo@@QBEHXZ ENDP	; CvUnitClassInfo::getMaxPlayerInstances
_TEXT	ENDS
PUBLIC	?getInstanceCostModifier@CvUnitClassInfo@@QBEHXZ ; CvUnitClassInfo::getInstanceCostModifier
; Function compile flags: /Odtp
;	COMDAT ?getInstanceCostModifier@CvUnitClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInstanceCostModifier@CvUnitClassInfo@@QBEHXZ PROC	; CvUnitClassInfo::getInstanceCostModifier, COMDAT
; _this$ = ecx

; 1680 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1681 : 	return m_iInstanceCostModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 1682 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInstanceCostModifier@CvUnitClassInfo@@QBEHXZ ENDP	; CvUnitClassInfo::getInstanceCostModifier
_TEXT	ENDS
PUBLIC	?getDefaultUnitIndex@CvUnitClassInfo@@QBEHXZ	; CvUnitClassInfo::getDefaultUnitIndex
; Function compile flags: /Odtp
;	COMDAT ?getDefaultUnitIndex@CvUnitClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefaultUnitIndex@CvUnitClassInfo@@QBEHXZ PROC	; CvUnitClassInfo::getDefaultUnitIndex, COMDAT
; _this$ = ecx

; 1685 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1686 : 	return m_iDefaultUnitIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 1687 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefaultUnitIndex@CvUnitClassInfo@@QBEHXZ ENDP	; CvUnitClassInfo::getDefaultUnitIndex
_TEXT	ENDS
PUBLIC	?setDefaultUnitIndex@CvUnitClassInfo@@QAEXH@Z	; CvUnitClassInfo::setDefaultUnitIndex
; Function compile flags: /Odtp
;	COMDAT ?setDefaultUnitIndex@CvUnitClassInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setDefaultUnitIndex@CvUnitClassInfo@@QAEXH@Z PROC	; CvUnitClassInfo::setDefaultUnitIndex, COMDAT
; _this$ = ecx

; 1690 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1691 : 	m_iDefaultUnitIndex = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+276], ecx

; 1692 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setDefaultUnitIndex@CvUnitClassInfo@@QAEXH@Z ENDP	; CvUnitClassInfo::setDefaultUnitIndex
_TEXT	ENDS
PUBLIC	??_C@_0M@BOGHBENB@DefaultUnit?$AA@		; `string'
PUBLIC	??_C@_0BF@NOJFFMIN@InstanceCostModifier?$AA@	; `string'
PUBLIC	??_C@_0BD@GKLGADHG@MaxPlayerInstances?$AA@	; `string'
PUBLIC	??_C@_0BB@GIBJGONN@MaxTeamInstances?$AA@	; `string'
PUBLIC	??_C@_0BD@BGLLFNNG@MaxGlobalInstances?$AA@	; `string'
;	COMDAT ??_C@_0M@BOGHBENB@DefaultUnit?$AA@
CONST	SEGMENT
??_C@_0M@BOGHBENB@DefaultUnit?$AA@ DB 'DefaultUnit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NOJFFMIN@InstanceCostModifier?$AA@
CONST	SEGMENT
??_C@_0BF@NOJFFMIN@InstanceCostModifier?$AA@ DB 'InstanceCostModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GKLGADHG@MaxPlayerInstances?$AA@
CONST	SEGMENT
??_C@_0BD@GKLGADHG@MaxPlayerInstances?$AA@ DB 'MaxPlayerInstances', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GIBJGONN@MaxTeamInstances?$AA@
CONST	SEGMENT
??_C@_0BB@GIBJGONN@MaxTeamInstances?$AA@ DB 'MaxTeamInstances', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BGLLFNNG@MaxGlobalInstances?$AA@
CONST	SEGMENT
??_C@_0BD@BGLLFNNG@MaxGlobalInstances?$AA@ DB 'MaxGlobalInstances', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvUnitClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvUnitClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvUnitClassInfo::CacheResults, COMDAT
; _this$ = ecx

; 1695 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1696 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@9

; 1697 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@9
$LN1@CacheResul@9:

; 1698 : 
; 1699 : 	m_iMaxGlobalInstances = kResults.GetInt("MaxGlobalInstances");

	push	OFFSET ??_C@_0BD@BGLLFNNG@MaxGlobalInstances?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 1700 : 	m_iMaxTeamInstances = kResults.GetInt("MaxTeamInstances");

	push	OFFSET ??_C@_0BB@GIBJGONN@MaxTeamInstances?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 1701 : 	m_iMaxPlayerInstances = kResults.GetInt("MaxPlayerInstances");

	push	OFFSET ??_C@_0BD@GKLGADHG@MaxPlayerInstances?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 1702 : 	m_iInstanceCostModifier = kResults.GetInt("InstanceCostModifier");

	push	OFFSET ??_C@_0BF@NOJFFMIN@InstanceCostModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 1703 : 
; 1704 : 	m_iDefaultUnitIndex = GC.getInfoTypeForString(kResults.GetText("DefaultUnit"), true);

	push	1
	push	OFFSET ??_C@_0M@BOGHBENB@DefaultUnit?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 1705 : 
; 1706 : 	return true;

	mov	al, 1
$LN2@CacheResul@9:

; 1707 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvUnitClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvUnitClassInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvBuildingClassInfo@@6B@			; CvBuildingClassInfo::`vftable'
PUBLIC	??0CvBuildingClassInfo@@QAE@XZ			; CvBuildingClassInfo::CvBuildingClassInfo
PUBLIC	?CacheResults@CvBuildingClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBuildingClassInfo::CacheResults
EXTRN	??_ECvBuildingClassInfo@@UAEPAXI@Z:PROC		; CvBuildingClassInfo::`vector deleting destructor'
;	COMDAT ??_7CvBuildingClassInfo@@6B@
CONST	SEGMENT
??_7CvBuildingClassInfo@@6B@ DD FLAT:?CacheResults@CvBuildingClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBuildingClassInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvBuildingClassInfo@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvBuildingClassInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvBuildingClassInfo@@QAE@XZ PROC			; CvBuildingClassInfo::CvBuildingClassInfo, COMDAT
; _this$ = ecx

; 1721 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvBuildingClassInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+281], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+284], 0

; 1722 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvBuildingClassInfo@@QAE@XZ ENDP			; CvBuildingClassInfo::CvBuildingClassInfo
_TEXT	ENDS
PUBLIC	??1CvBuildingClassInfo@@UAE@XZ			; CvBuildingClassInfo::~CvBuildingClassInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvBuildingClassInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvBuildingClassInfo@@UAEPAXI@Z PROC			; CvBuildingClassInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBuildingClassInfo@@UAE@XZ		; CvBuildingClassInfo::~CvBuildingClassInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvBuildingClassInfo@@UAEPAXI@Z ENDP			; CvBuildingClassInfo::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvBuildingClassInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T229290 = -8						; size = 4
$T229289 = -4						; size = 4
??1CvBuildingClassInfo@@UAE@XZ PROC			; CvBuildingClassInfo::~CvBuildingClassInfo, COMDAT
; _this$ = ecx

; 1725 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvBuildingClassInfo@@6B@

; 1726 : 	SAFE_DELETE_ARRAY(m_piVictoryThreshold);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	mov	DWORD PTR $T229290[ebp], ecx
	mov	edx, DWORD PTR $T229290[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T229289[ebp], eax
	mov	ecx, DWORD PTR $T229289[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T229290[ebp]
	mov	DWORD PTR [edx], 0

; 1727 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvBuildingClassInfo@@UAE@XZ ENDP			; CvBuildingClassInfo::~CvBuildingClassInfo
_TEXT	ENDS
PUBLIC	?getMaxGlobalInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxGlobalInstances
; Function compile flags: /Odtp
;	COMDAT ?getMaxGlobalInstances@CvBuildingClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxGlobalInstances@CvBuildingClassInfo@@QBEHXZ PROC	; CvBuildingClassInfo::getMaxGlobalInstances, COMDAT
; _this$ = ecx

; 1730 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1731 : 	return m_iMaxGlobalInstances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 1732 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxGlobalInstances@CvBuildingClassInfo@@QBEHXZ ENDP	; CvBuildingClassInfo::getMaxGlobalInstances
_TEXT	ENDS
PUBLIC	?getMaxTeamInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxTeamInstances
; Function compile flags: /Odtp
;	COMDAT ?getMaxTeamInstances@CvBuildingClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxTeamInstances@CvBuildingClassInfo@@QBEHXZ PROC	; CvBuildingClassInfo::getMaxTeamInstances, COMDAT
; _this$ = ecx

; 1735 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1736 : 	return m_iMaxTeamInstances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 1737 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxTeamInstances@CvBuildingClassInfo@@QBEHXZ ENDP	; CvBuildingClassInfo::getMaxTeamInstances
_TEXT	ENDS
PUBLIC	?getMaxPlayerInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getMaxPlayerInstances
; Function compile flags: /Odtp
;	COMDAT ?getMaxPlayerInstances@CvBuildingClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxPlayerInstances@CvBuildingClassInfo@@QBEHXZ PROC	; CvBuildingClassInfo::getMaxPlayerInstances, COMDAT
; _this$ = ecx

; 1740 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1741 : 	return m_iMaxPlayerInstances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 1742 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxPlayerInstances@CvBuildingClassInfo@@QBEHXZ ENDP	; CvBuildingClassInfo::getMaxPlayerInstances
_TEXT	ENDS
PUBLIC	?getExtraPlayerInstances@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getExtraPlayerInstances
; Function compile flags: /Odtp
;	COMDAT ?getExtraPlayerInstances@CvBuildingClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getExtraPlayerInstances@CvBuildingClassInfo@@QBEHXZ PROC ; CvBuildingClassInfo::getExtraPlayerInstances, COMDAT
; _this$ = ecx

; 1745 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1746 : 	return m_iExtraPlayerInstances;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 1747 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getExtraPlayerInstances@CvBuildingClassInfo@@QBEHXZ ENDP ; CvBuildingClassInfo::getExtraPlayerInstances
_TEXT	ENDS
PUBLIC	?getDefaultBuildingIndex@CvBuildingClassInfo@@QBEHXZ ; CvBuildingClassInfo::getDefaultBuildingIndex
; Function compile flags: /Odtp
;	COMDAT ?getDefaultBuildingIndex@CvBuildingClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefaultBuildingIndex@CvBuildingClassInfo@@QBEHXZ PROC ; CvBuildingClassInfo::getDefaultBuildingIndex, COMDAT
; _this$ = ecx

; 1750 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1751 : 	return m_iDefaultBuildingIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 1752 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefaultBuildingIndex@CvBuildingClassInfo@@QBEHXZ ENDP ; CvBuildingClassInfo::getDefaultBuildingIndex
_TEXT	ENDS
PUBLIC	?setDefaultBuildingIndex@CvBuildingClassInfo@@QAEXH@Z ; CvBuildingClassInfo::setDefaultBuildingIndex
; Function compile flags: /Odtp
;	COMDAT ?setDefaultBuildingIndex@CvBuildingClassInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setDefaultBuildingIndex@CvBuildingClassInfo@@QAEXH@Z PROC ; CvBuildingClassInfo::setDefaultBuildingIndex, COMDAT
; _this$ = ecx

; 1755 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1756 : 	m_iDefaultBuildingIndex = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+276], ecx

; 1757 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setDefaultBuildingIndex@CvBuildingClassInfo@@QAEXH@Z ENDP ; CvBuildingClassInfo::setDefaultBuildingIndex
_TEXT	ENDS
PUBLIC	?isNoLimit@CvBuildingClassInfo@@QBE_NXZ		; CvBuildingClassInfo::isNoLimit
; Function compile flags: /Odtp
;	COMDAT ?isNoLimit@CvBuildingClassInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoLimit@CvBuildingClassInfo@@QBE_NXZ PROC		; CvBuildingClassInfo::isNoLimit, COMDAT
; _this$ = ecx

; 1760 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1761 : 	return m_bNoLimit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+280]

; 1762 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoLimit@CvBuildingClassInfo@@QBE_NXZ ENDP		; CvBuildingClassInfo::isNoLimit
_TEXT	ENDS
PUBLIC	?isMonument@CvBuildingClassInfo@@QBE_NXZ	; CvBuildingClassInfo::isMonument
; Function compile flags: /Odtp
;	COMDAT ?isMonument@CvBuildingClassInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isMonument@CvBuildingClassInfo@@QBE_NXZ PROC		; CvBuildingClassInfo::isMonument, COMDAT
; _this$ = ecx

; 1765 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1766 : 	return m_bMonument;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+281]

; 1767 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isMonument@CvBuildingClassInfo@@QBE_NXZ ENDP		; CvBuildingClassInfo::isMonument
_TEXT	ENDS
PUBLIC	?getVictoryThreshold@CvBuildingClassInfo@@QBEHH@Z ; CvBuildingClassInfo::getVictoryThreshold
; Function compile flags: /Odtp
;	COMDAT ?getVictoryThreshold@CvBuildingClassInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getVictoryThreshold@CvBuildingClassInfo@@QBEHH@Z PROC	; CvBuildingClassInfo::getVictoryThreshold, COMDAT
; _this$ = ecx

; 1770 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1771 : 	CvAssertMsg(i < GC.getNumVictoryInfos(), "Index out of bounds");
; 1772 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 1773 : 	return m_piVictoryThreshold ? m_piVictoryThreshold[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 0
	je	SHORT $LN3@getVictory
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getVictory
$LN3@getVictory:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getVictory:
	mov	eax, DWORD PTR tv69[ebp]

; 1774 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getVictoryThreshold@CvBuildingClassInfo@@QBEHH@Z ENDP	; CvBuildingClassInfo::getVictoryThreshold
_TEXT	ENDS
PUBLIC	??_C@_09GIGMJAEO@Victories?$AA@			; `string'
PUBLIC	??_C@_0CA@CMJFHNMA@BuildingClass_VictoryThresholds?$AA@ ; `string'
PUBLIC	??_C@_0M@CCKEBNNI@VictoryType?$AA@		; `string'
PUBLIC	??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@	; `string'
PUBLIC	??_C@_09HLCHFPPJ@Threshold?$AA@			; `string'
PUBLIC	??_C@_0BA@BBOIOFCO@DefaultBuilding?$AA@		; `string'
PUBLIC	??_C@_08NLMGPIMJ@Monument?$AA@			; `string'
PUBLIC	??_C@_07PCJFHAON@NoLimit?$AA@			; `string'
PUBLIC	??_C@_0BF@IDCGAENF@ExtraPlayerInstances?$AA@	; `string'
;	COMDAT ??_C@_09GIGMJAEO@Victories?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_09GIGMJAEO@Victories?$AA@ DB 'Victories', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CMJFHNMA@BuildingClass_VictoryThresholds?$AA@
CONST	SEGMENT
??_C@_0CA@CMJFHNMA@BuildingClass_VictoryThresholds?$AA@ DB 'BuildingClass'
	DB	'_VictoryThresholds', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CCKEBNNI@VictoryType?$AA@
CONST	SEGMENT
??_C@_0M@CCKEBNNI@VictoryType?$AA@ DB 'VictoryType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@
CONST	SEGMENT
??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@ DB 'BuildingClassType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HLCHFPPJ@Threshold?$AA@
CONST	SEGMENT
??_C@_09HLCHFPPJ@Threshold?$AA@ DB 'Threshold', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BBOIOFCO@DefaultBuilding?$AA@
CONST	SEGMENT
??_C@_0BA@BBOIOFCO@DefaultBuilding?$AA@ DB 'DefaultBuilding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLMGPIMJ@Monument?$AA@
CONST	SEGMENT
??_C@_08NLMGPIMJ@Monument?$AA@ DB 'Monument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PCJFHAON@NoLimit?$AA@
CONST	SEGMENT
??_C@_07PCJFHAON@NoLimit?$AA@ DB 'NoLimit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IDCGAENF@ExtraPlayerInstances?$AA@
CONST	SEGMENT
??_C@_0BF@IDCGAENF@ExtraPlayerInstances?$AA@ DB 'ExtraPlayerInstances', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvBuildingClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szDefaultBuilding$ = -4				; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvBuildingClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvBuildingClassInfo::CacheResults, COMDAT
; _this$ = ecx

; 1777 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1778 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@10

; 1779 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@10
$LN1@CacheResul@10:

; 1780 : 
; 1781 : 	//Basic Properties
; 1782 : 	m_iMaxGlobalInstances = kResults.GetInt("MaxGlobalInstances");

	push	OFFSET ??_C@_0BD@BGLLFNNG@MaxGlobalInstances?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 1783 : 	m_iMaxTeamInstances = kResults.GetInt("MaxTeamInstances");

	push	OFFSET ??_C@_0BB@GIBJGONN@MaxTeamInstances?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 1784 : 	m_iMaxPlayerInstances = kResults.GetInt("MaxPlayerInstances");

	push	OFFSET ??_C@_0BD@GKLGADHG@MaxPlayerInstances?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 1785 : 	m_iExtraPlayerInstances = kResults.GetInt("ExtraPlayerInstances");

	push	OFFSET ??_C@_0BF@IDCGAENF@ExtraPlayerInstances?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 1786 : 
; 1787 : 	m_bNoLimit = kResults.GetBool("NoLimit");

	push	OFFSET ??_C@_07PCJFHAON@NoLimit?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+280], al

; 1788 : 	m_bMonument = kResults.GetBool("Monument");

	push	OFFSET ??_C@_08NLMGPIMJ@Monument?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+281], al

; 1789 : 
; 1790 : 	//References
; 1791 : 	const char* szDefaultBuilding = kResults.GetText("DefaultBuilding");

	push	OFFSET ??_C@_0BA@BBOIOFCO@DefaultBuilding?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szDefaultBuilding$[ebp], eax

; 1792 : 	m_iDefaultBuildingIndex = GC.getInfoTypeForString(szDefaultBuilding, true);

	push	1
	mov	eax, DWORD PTR _szDefaultBuilding$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 1793 : 
; 1794 : 	//Arrays
; 1795 : 	kUtility.PopulateArrayByValue(m_piVictoryThreshold, "Victories", "BuildingClass_VictoryThresholds", "VictoryType", "BuildingClassType", GetType(), "Threshold");

	push	0
	push	0
	push	OFFSET ??_C@_09HLCHFPPJ@Threshold?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET ??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@
	push	OFFSET ??_C@_0M@CCKEBNNI@VictoryType?$AA@
	push	OFFSET ??_C@_0CA@CMJFHNMA@BuildingClass_VictoryThresholds?$AA@
	push	OFFSET ??_C@_09GIGMJAEO@Victories?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 284				; 0000011cH
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 1796 : 
; 1797 : 	return true;

	mov	al, 1
$LN2@CacheResul@10:

; 1798 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvBuildingClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvBuildingClassInfo::CacheResults
_TEXT	ENDS
PUBLIC	?Format@CvString@@QAAXPBDZZ			; CvString::Format
PUBLIC	??_C@_0CK@LKFCPDNI@LOAD?5ERROR?3?5Building?5Class?5Type?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z ; BuildingClassArrayHelpers::Read
EXTRN	?LogMessage@CvGlobals@@QAEXPBD@Z:PROC		; CvGlobals::LogMessage
EXTRN	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z:PROC ; CvInfosSerializationHelper::ReadHashed
;	COMDAT ??_C@_0CK@LKFCPDNI@LOAD?5ERROR?3?5Building?5Class?5Type?5@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CK@LKFCPDNI@LOAD?5ERROR?3?5Building?5Class?5Type?5@ DB 'LOAD ERROR'
	DB	': Building Class Type not found', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z$0
__ehfuncinfo$?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z
_TEXT	SEGMENT
_iDummy$218684 = -64					; size = 4
_szError$218682 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_bValid$218677 = -25					; size = 1
_iI$218673 = -24					; size = 4
_iType$ = -20						; size = 4
_iNumEntries$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kStream$ = 8						; size = 4
_paiArray$ = 12						; size = 4
?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z PROC ; BuildingClassArrayHelpers::Read, COMDAT

; 1802 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1803 : 	int iNumEntries;
; 1804 : 	int iType;
; 1805 : 
; 1806 : 	kStream >> iNumEntries;

	lea	eax, DWORD PTR _iNumEntries$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 1807 : 
; 1808 : 	for(int iI = 0; iI < iNumEntries; iI++)

	mov	DWORD PTR _iI$218673[ebp], 0
	jmp	SHORT $LN7@Read
$LN6@Read:
	mov	ecx, DWORD PTR _iI$218673[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218673[ebp], ecx
$LN7@Read:
	mov	edx, DWORD PTR _iI$218673[ebp]
	cmp	edx, DWORD PTR _iNumEntries$[ebp]
	jge	$LN8@Read

; 1809 : 	{
; 1810 : 		bool bValid = true;

	mov	BYTE PTR _bValid$218677[ebp], 1

; 1811 : 		iType = CvInfosSerializationHelper::ReadHashed(kStream, &bValid);

	lea	eax, DWORD PTR _bValid$218677[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	add	esp, 8
	mov	DWORD PTR _iType$[ebp], eax

; 1812 : 		if(iType != -1 || !bValid)

	cmp	DWORD PTR _iType$[ebp], -1
	jne	SHORT $LN3@Read
	movzx	edx, BYTE PTR _bValid$218677[ebp]
	test	edx, edx
	jne	SHORT $LN4@Read
$LN3@Read:

; 1813 : 		{
; 1814 : 			if(iType != -1)

	cmp	DWORD PTR _iType$[ebp], -1
	je	SHORT $LN2@Read

; 1815 : 			{
; 1816 : 				kStream >> paiArray[iType];

	mov	eax, DWORD PTR _iType$[ebp]
	mov	ecx, DWORD PTR _paiArray$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 1817 : 			}
; 1818 : 			else

	jmp	SHORT $LN4@Read
$LN2@Read:

; 1819 : 			{
; 1820 : 				CvString szError;

	lea	ecx, DWORD PTR _szError$218682[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1821 : 				szError.Format("LOAD ERROR: Building Class Type not found");

	push	OFFSET ??_C@_0CK@LKFCPDNI@LOAD?5ERROR?3?5Building?5Class?5Type?5@
	lea	eax, DWORD PTR _szError$218682[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 1822 : 				GC.LogMessage(szError.GetCString());

	lea	ecx, DWORD PTR _szError$218682[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?LogMessage@CvGlobals@@QAEXPBD@Z	; CvGlobals::LogMessage

; 1823 : 				CvAssertMsg(false, szError);
; 1824 : 				int iDummy;
; 1825 : 				kStream >> iDummy;	// Skip it.

	lea	ecx, DWORD PTR _iDummy$218684[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 1826 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _szError$218682[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@Read:

; 1827 : 		}

	jmp	$LN6@Read
$LN8@Read:

; 1828 : 	}
; 1829 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z$0:
	lea	ecx, DWORD PTR _szError$218682[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Read@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z ENDP ; BuildingClassArrayHelpers::Read
PUBLIC	?Write@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAHH@Z ; BuildingClassArrayHelpers::Write
EXTRN	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z:PROC ; CvInfosSerializationHelper::WriteHashed
EXTRN	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z:PROC ; CvGlobals::getBuildingClassInfo
; Function compile flags: /Odtp
;	COMDAT ?Write@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAHH@Z
_TEXT	SEGMENT
$T229403 = -16						; size = 4
_pkBuildingClassInfo$218696 = -12			; size = 4
_eBuildingClass$218694 = -8				; size = 4
_iI$218690 = -4						; size = 4
_kStream$ = 8						; size = 4
_paiArray$ = 12						; size = 4
_iArraySize$ = 16					; size = 4
?Write@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAHH@Z PROC ; BuildingClassArrayHelpers::Write, COMDAT

; 1833 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1834 : 	kStream << iArraySize;

	lea	eax, DWORD PTR _iArraySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 1835 : 
; 1836 : 	for(int iI = 0; iI < iArraySize; iI++)

	mov	DWORD PTR _iI$218690[ebp], 0
	jmp	SHORT $LN5@Write
$LN4@Write:
	mov	ecx, DWORD PTR _iI$218690[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218690[ebp], ecx
$LN5@Write:
	mov	edx, DWORD PTR _iI$218690[ebp]
	cmp	edx, DWORD PTR _iArraySize$[ebp]
	jge	SHORT $LN6@Write

; 1837 : 	{
; 1838 : 		const BuildingClassTypes eBuildingClass = static_cast<BuildingClassTypes>(iI);

	mov	eax, DWORD PTR _iI$218690[ebp]
	mov	DWORD PTR _eBuildingClass$218694[ebp], eax

; 1839 : 		CvBuildingClassInfo* pkBuildingClassInfo = GC.getBuildingClassInfo(eBuildingClass);

	mov	ecx, DWORD PTR _eBuildingClass$218694[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildingClassInfo@CvGlobals@@QAEPAVCvBuildingClassInfo@@W4BuildingClassTypes@@@Z ; CvGlobals::getBuildingClassInfo
	mov	DWORD PTR _pkBuildingClassInfo$218696[ebp], eax

; 1840 : 		if(pkBuildingClassInfo)

	cmp	DWORD PTR _pkBuildingClassInfo$218696[ebp], 0
	je	SHORT $LN2@Write

; 1841 : 		{
; 1842 : 			CvInfosSerializationHelper::WriteHashed(kStream, pkBuildingClassInfo);

	mov	edx, DWORD PTR _pkBuildingClassInfo$218696[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z ; CvInfosSerializationHelper::WriteHashed
	add	esp, 8

; 1843 : 			kStream << paiArray[iI];

	mov	ecx, DWORD PTR _iI$218690[ebp]
	mov	edx, DWORD PTR _paiArray$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 1844 : 		}
; 1845 : 		else

	jmp	SHORT $LN1@Write
$LN2@Write:

; 1846 : 		{
; 1847 : 			kStream << (int)0;

	mov	DWORD PTR $T229403[ebp], 0
	lea	ecx, DWORD PTR $T229403[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
$LN1@Write:

; 1848 : 		}

	jmp	SHORT $LN4@Write
$LN6@Write:

; 1849 : 	}
; 1850 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Write@BuildingClassArrayHelpers@@YAXAAVFDataStream@@PAHH@Z ENDP ; BuildingClassArrayHelpers::Write
_TEXT	ENDS
PUBLIC	??_C@_0CG@DNDIKAOE@LOAD?5ERROR?3?5Unit?5Class?5Type?5not?5@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z ; UnitClassArrayHelpers::Read
;	COMDAT ??_C@_0CG@DNDIKAOE@LOAD?5ERROR?3?5Unit?5Class?5Type?5not?5@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CG@DNDIKAOE@LOAD?5ERROR?3?5Unit?5Class?5Type?5not?5@ DB 'LOAD ERRO'
	DB	'R: Unit Class Type not found', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z$0
__ehfuncinfo$?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z
_TEXT	SEGMENT
_iDummy$218718 = -64					; size = 4
_szError$218716 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_bValid$218711 = -25					; size = 1
_iI$218707 = -24					; size = 4
_iType$ = -20						; size = 4
_iNumEntries$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kStream$ = 8						; size = 4
_paiArray$ = 12						; size = 4
?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z PROC ; UnitClassArrayHelpers::Read, COMDAT

; 1854 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1855 : 	int iNumEntries;
; 1856 : 	int iType;
; 1857 : 
; 1858 : 	kStream >> iNumEntries;

	lea	eax, DWORD PTR _iNumEntries$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 1859 : 
; 1860 : 	for(int iI = 0; iI < iNumEntries; iI++)

	mov	DWORD PTR _iI$218707[ebp], 0
	jmp	SHORT $LN7@Read@2
$LN6@Read@2:
	mov	ecx, DWORD PTR _iI$218707[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218707[ebp], ecx
$LN7@Read@2:
	mov	edx, DWORD PTR _iI$218707[ebp]
	cmp	edx, DWORD PTR _iNumEntries$[ebp]
	jge	$LN8@Read@2

; 1861 : 	{
; 1862 : 		bool bValid = true;

	mov	BYTE PTR _bValid$218711[ebp], 1

; 1863 : 		iType = CvInfosSerializationHelper::ReadHashed(kStream, &bValid);

	lea	eax, DWORD PTR _bValid$218711[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	add	esp, 8
	mov	DWORD PTR _iType$[ebp], eax

; 1864 : 		if(iType != -1 || !bValid)

	cmp	DWORD PTR _iType$[ebp], -1
	jne	SHORT $LN3@Read@2
	movzx	edx, BYTE PTR _bValid$218711[ebp]
	test	edx, edx
	jne	SHORT $LN4@Read@2
$LN3@Read@2:

; 1865 : 		{
; 1866 : 			if(iType != -1)

	cmp	DWORD PTR _iType$[ebp], -1
	je	SHORT $LN2@Read@2

; 1867 : 			{
; 1868 : 				kStream >> paiArray[iType];

	mov	eax, DWORD PTR _iType$[ebp]
	mov	ecx, DWORD PTR _paiArray$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 1869 : 			}
; 1870 : 			else

	jmp	SHORT $LN4@Read@2
$LN2@Read@2:

; 1871 : 			{
; 1872 : 				CvString szError;

	lea	ecx, DWORD PTR _szError$218716[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1873 : 				szError.Format("LOAD ERROR: Unit Class Type not found");

	push	OFFSET ??_C@_0CG@DNDIKAOE@LOAD?5ERROR?3?5Unit?5Class?5Type?5not?5@
	lea	eax, DWORD PTR _szError$218716[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 1874 : 				GC.LogMessage(szError.GetCString());

	lea	ecx, DWORD PTR _szError$218716[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?LogMessage@CvGlobals@@QAEXPBD@Z	; CvGlobals::LogMessage

; 1875 : 				CvAssertMsg(false, szError);
; 1876 : 
; 1877 : 				int iDummy;
; 1878 : 				kStream >> iDummy;

	lea	ecx, DWORD PTR _iDummy$218718[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 1879 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _szError$218716[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@Read@2:

; 1880 : 		}

	jmp	$LN6@Read@2
$LN8@Read@2:

; 1881 : 	}
; 1882 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z$0:
	lea	ecx, DWORD PTR _szError$218716[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Read@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAH@Z ENDP ; UnitClassArrayHelpers::Read
PUBLIC	?Write@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAHH@Z ; UnitClassArrayHelpers::Write
EXTRN	?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z:PROC ; CvGlobals::getUnitClassInfo
; Function compile flags: /Odtp
;	COMDAT ?Write@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAHH@Z
_TEXT	SEGMENT
$T229445 = -16						; size = 4
_pkUnitClassInfo$218730 = -12				; size = 4
_eUnitClass$218728 = -8					; size = 4
_iI$218724 = -4						; size = 4
_kStream$ = 8						; size = 4
_paiArray$ = 12						; size = 4
_iArraySize$ = 16					; size = 4
?Write@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAHH@Z PROC ; UnitClassArrayHelpers::Write, COMDAT

; 1886 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1887 : 	kStream << iArraySize;

	lea	eax, DWORD PTR _iArraySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 1888 : 
; 1889 : 	for(int iI = 0; iI < iArraySize; iI++)

	mov	DWORD PTR _iI$218724[ebp], 0
	jmp	SHORT $LN5@Write@2
$LN4@Write@2:
	mov	ecx, DWORD PTR _iI$218724[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$218724[ebp], ecx
$LN5@Write@2:
	mov	edx, DWORD PTR _iI$218724[ebp]
	cmp	edx, DWORD PTR _iArraySize$[ebp]
	jge	SHORT $LN6@Write@2

; 1890 : 	{
; 1891 : 		const UnitClassTypes eUnitClass = static_cast<UnitClassTypes>(iI);

	mov	eax, DWORD PTR _iI$218724[ebp]
	mov	DWORD PTR _eUnitClass$218728[ebp], eax

; 1892 : 		CvUnitClassInfo* pkUnitClassInfo = GC.getUnitClassInfo(eUnitClass);

	mov	ecx, DWORD PTR _eUnitClass$218728[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getUnitClassInfo@CvGlobals@@QAEPAVCvUnitClassInfo@@W4UnitClassTypes@@@Z ; CvGlobals::getUnitClassInfo
	mov	DWORD PTR _pkUnitClassInfo$218730[ebp], eax

; 1893 : 		if(pkUnitClassInfo)

	cmp	DWORD PTR _pkUnitClassInfo$218730[ebp], 0
	je	SHORT $LN2@Write@2

; 1894 : 		{
; 1895 : 			CvInfosSerializationHelper::WriteHashed(kStream, pkUnitClassInfo);

	mov	edx, DWORD PTR _pkUnitClassInfo$218730[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z ; CvInfosSerializationHelper::WriteHashed
	add	esp, 8

; 1896 : 			kStream << paiArray[iI];

	mov	ecx, DWORD PTR _iI$218724[ebp]
	mov	edx, DWORD PTR _paiArray$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 1897 : 		}
; 1898 : 		else

	jmp	SHORT $LN1@Write@2
$LN2@Write@2:

; 1899 : 		{			
; 1900 : 			kStream << (int)0;

	mov	DWORD PTR $T229445[ebp], 0
	lea	ecx, DWORD PTR $T229445[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
$LN1@Write@2:

; 1901 : 		}

	jmp	SHORT $LN4@Write@2
$LN6@Write@2:

; 1902 : 	}
; 1903 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Write@UnitClassArrayHelpers@@YAXAAVFDataStream@@PAHH@Z ENDP ; UnitClassArrayHelpers::Write
_TEXT	ENDS
PUBLIC	??_7CvCivilizationBaseInfo@@6B@			; CvCivilizationBaseInfo::`vftable'
PUBLIC	??0CvCivilizationBaseInfo@@QAE@XZ		; CvCivilizationBaseInfo::CvCivilizationBaseInfo
PUBLIC	?CacheResults@CvCivilizationBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCivilizationBaseInfo::CacheResults
EXTRN	??_ECvCivilizationBaseInfo@@UAEPAXI@Z:PROC	; CvCivilizationBaseInfo::`vector deleting destructor'
;	COMDAT ??_7CvCivilizationBaseInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvCivilizationBaseInfo@@6B@ DD FLAT:?CacheResults@CvCivilizationBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCivilizationBaseInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvCivilizationBaseInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvCivilizationBaseInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvCivilizationBaseInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvCivilizationBaseInfo@@QAE@XZ$1
__ehfuncinfo$??0CvCivilizationBaseInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvCivilizationBaseInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvCivilizationBaseInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T229469 = -20						; size = 4
$T229464 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvCivilizationBaseInfo@@QAE@XZ PROC			; CvCivilizationBaseInfo::CvCivilizationBaseInfo, COMDAT
; _this$ = ecx

; 1911 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvCivilizationBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCivilizationBaseInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+261], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 264				; 00000108H
	mov	DWORD PTR $T229464[ebp], eax
	mov	ecx, DWORD PTR $T229464[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	mov	DWORD PTR $T229469[ebp], ecx
	mov	ecx, DWORD PTR $T229469[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1912 : 	memset((void*)&m_kPackageID, 0, sizeof(m_kPackageID));

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 320				; 00000140H
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edx

; 1913 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvCivilizationBaseInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvCivilizationBaseInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvCivilizationBaseInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvCivilizationBaseInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvCivilizationBaseInfo@@QAE@XZ ENDP			; CvCivilizationBaseInfo::CvCivilizationBaseInfo
PUBLIC	??1CvCivilizationBaseInfo@@UAE@XZ		; CvCivilizationBaseInfo::~CvCivilizationBaseInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvCivilizationBaseInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvCivilizationBaseInfo@@UAEPAXI@Z PROC		; CvCivilizationBaseInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvCivilizationBaseInfo@@UAE@XZ	; CvCivilizationBaseInfo::~CvCivilizationBaseInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvCivilizationBaseInfo@@UAEPAXI@Z ENDP		; CvCivilizationBaseInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvCivilizationBaseInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCivilizationBaseInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvCivilizationBaseInfo@@UAE@XZ$1
__ehfuncinfo$??1CvCivilizationBaseInfo@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvCivilizationBaseInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvCivilizationBaseInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T229492 = -20						; size = 4
$T229487 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvCivilizationBaseInfo@@UAE@XZ PROC			; CvCivilizationBaseInfo::~CvCivilizationBaseInfo, COMDAT
; _this$ = ecx

; 1917 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvCivilizationBaseInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCivilizationBaseInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1918 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	mov	DWORD PTR $T229487[ebp], ecx
	mov	ecx, DWORD PTR $T229487[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	mov	DWORD PTR $T229492[ebp], edx
	mov	ecx, DWORD PTR $T229492[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvCivilizationBaseInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvCivilizationBaseInfo@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvCivilizationBaseInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvCivilizationBaseInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvCivilizationBaseInfo@@UAE@XZ ENDP			; CvCivilizationBaseInfo::~CvCivilizationBaseInfo
PUBLIC	?isAIPlayable@CvCivilizationBaseInfo@@QBE_NXZ	; CvCivilizationBaseInfo::isAIPlayable
; Function compile flags: /Odtp
;	COMDAT ?isAIPlayable@CvCivilizationBaseInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isAIPlayable@CvCivilizationBaseInfo@@QBE_NXZ PROC	; CvCivilizationBaseInfo::isAIPlayable, COMDAT
; _this$ = ecx

; 1922 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1923 : 	return m_bAIPlayable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+260]

; 1924 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isAIPlayable@CvCivilizationBaseInfo@@QBE_NXZ ENDP	; CvCivilizationBaseInfo::isAIPlayable
_TEXT	ENDS
PUBLIC	?isPlayable@CvCivilizationBaseInfo@@QBE_NXZ	; CvCivilizationBaseInfo::isPlayable
; Function compile flags: /Odtp
;	COMDAT ?isPlayable@CvCivilizationBaseInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isPlayable@CvCivilizationBaseInfo@@QBE_NXZ PROC	; CvCivilizationBaseInfo::isPlayable, COMDAT
; _this$ = ecx

; 1927 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1928 : 	return m_bPlayable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+261]

; 1929 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isPlayable@CvCivilizationBaseInfo@@QBE_NXZ ENDP	; CvCivilizationBaseInfo::isPlayable
_TEXT	ENDS
PUBLIC	?getShortDescription@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescription
; Function compile flags: /Odtp
;	COMDAT ?getShortDescription@CvCivilizationBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getShortDescription@CvCivilizationBaseInfo@@QBEPBDXZ PROC ; CvCivilizationBaseInfo::getShortDescription, COMDAT
; _this$ = ecx

; 1932 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1933 : 	return m_strShortDescription.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 1934 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getShortDescription@CvCivilizationBaseInfo@@QBEPBDXZ ENDP ; CvCivilizationBaseInfo::getShortDescription
_TEXT	ENDS
PUBLIC	?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z ; CvCivilizationBaseInfo::setShortDescriptionKey
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z$0
__ehfuncinfo$?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z
_TEXT	SEGMENT
tv80 = -60						; size = 4
_this$ = -56						; size = 4
$T229574 = -52						; size = 4
$T229573 = -48						; size = 4
$T229569 = -44						; size = 4
$T229562 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_szVal$ = 8						; size = 4
?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z PROC ; CvCivilizationBaseInfo::setShortDescriptionKey, COMDAT
; _this$ = ecx

; 1937 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1938 : 	m_strShortDescriptionKey = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 292				; 00000124H
	mov	DWORD PTR $T229569[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN5@setShortDe
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T229569[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN6@setShortDe
$LN5@setShortDe:
	mov	ecx, DWORD PTR $T229569[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN6@setShortDe:

; 1939 : 	m_strShortDescription = GetLocalizedText(m_strShortDescriptionKey.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	edx, DWORD PTR $T229562[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T229574[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	mov	DWORD PTR $T229573[ebp], ecx
	mov	edx, DWORD PTR $T229574[ebp]
	push	edx
	mov	ecx, DWORD PTR $T229573[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T229562[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1940 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z$0:
	lea	ecx, DWORD PTR $T229562[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z ENDP ; CvCivilizationBaseInfo::setShortDescriptionKey
PUBLIC	?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ; CvCivilizationBaseInfo::getShortDescriptionKey
; Function compile flags: /Odtp
;	COMDAT ?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ PROC ; CvCivilizationBaseInfo::getShortDescriptionKey, COMDAT
; _this$ = ecx

; 1943 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1944 : 	return m_strShortDescriptionKey.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 1945 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getShortDescriptionKey@CvCivilizationBaseInfo@@QBEPBDXZ ENDP ; CvCivilizationBaseInfo::getShortDescriptionKey
_TEXT	ENDS
PUBLIC	?getPackageID@CvCivilizationBaseInfo@@QBEABU_GUID@@XZ ; CvCivilizationBaseInfo::getPackageID
; Function compile flags: /Odtp
;	COMDAT ?getPackageID@CvCivilizationBaseInfo@@QBEABU_GUID@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPackageID@CvCivilizationBaseInfo@@QBEABU_GUID@@XZ PROC ; CvCivilizationBaseInfo::getPackageID, COMDAT
; _this$ = ecx

; 1948 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1949 : 	return m_kPackageID;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 320				; 00000140H

; 1950 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPackageID@CvCivilizationBaseInfo@@QBEABU_GUID@@XZ ENDP ; CvCivilizationBaseInfo::getPackageID
_TEXT	ENDS
PUBLIC	??_C@_09DGLAHHLM@PackageID?$AA@			; `string'
PUBLIC	??_C@_0BB@GBLDMPKE@ShortDescription?$AA@	; `string'
PUBLIC	??_C@_0L@HJNBIHFP@AIPlayable?$AA@		; `string'
PUBLIC	??_C@_08IBDGMIFI@Playable?$AA@			; `string'
EXTRN	?ExtractGUID@@YA_NPBDAAU_GUID@@PAI@Z:PROC	; ExtractGUID
;	COMDAT ??_C@_09DGLAHHLM@PackageID?$AA@
CONST	SEGMENT
??_C@_09DGLAHHLM@PackageID?$AA@ DB 'PackageID', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBLDMPKE@ShortDescription?$AA@
CONST	SEGMENT
??_C@_0BB@GBLDMPKE@ShortDescription?$AA@ DB 'ShortDescription', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HJNBIHFP@AIPlayable?$AA@
CONST	SEGMENT
??_C@_0L@HJNBIHFP@AIPlayable?$AA@ DB 'AIPlayable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBDGMIFI@Playable?$AA@
CONST	SEGMENT
??_C@_08IBDGMIFI@Playable?$AA@ DB 'Playable', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvCivilizationBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szTextVal$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvCivilizationBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvCivilizationBaseInfo::CacheResults, COMDAT
; _this$ = ecx

; 1954 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1955 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@CacheResul@11

; 1956 : 		return false;

	xor	al, al
	jmp	$LN3@CacheResul@11
$LN2@CacheResul@11:

; 1957 : 
; 1958 : 	const char* szTextVal = NULL;	//! temporary val

	mov	DWORD PTR _szTextVal$[ebp], 0

; 1959 : 
; 1960 : 	//Basic Properties
; 1961 : 	m_bPlayable = kResults.GetBool("Playable");

	push	OFFSET ??_C@_08IBDGMIFI@Playable?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+261], al

; 1962 : 	m_bAIPlayable = kResults.GetBool("AIPlayable");

	push	OFFSET ??_C@_0L@HJNBIHFP@AIPlayable?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+260], al

; 1963 : 
; 1964 : 	szTextVal = kResults.GetText("ShortDescription");

	push	OFFSET ??_C@_0BB@GBLDMPKE@ShortDescription?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 1965 : 	setShortDescriptionKey(szTextVal);

	mov	eax, DWORD PTR _szTextVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setShortDescriptionKey@CvCivilizationBaseInfo@@QAEXPBD@Z ; CvCivilizationBaseInfo::setShortDescriptionKey

; 1966 : 
; 1967 : 	szTextVal = kResults.GetText("PackageID");

	push	OFFSET ??_C@_09DGLAHHLM@PackageID?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 1968 : 	if(szTextVal)

	cmp	DWORD PTR _szTextVal$[ebp], 0
	je	SHORT $LN1@CacheResul@11

; 1969 : 	{
; 1970 : 		ExtractGUID(szTextVal, m_kPackageID);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	push	ecx
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	call	?ExtractGUID@@YA_NPBDAAU_GUID@@PAI@Z	; ExtractGUID
	add	esp, 12					; 0000000cH
$LN1@CacheResul@11:

; 1971 : 	}
; 1972 : 	return true;

	mov	al, 1
$LN3@CacheResul@11:

; 1973 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvCivilizationBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvCivilizationBaseInfo::CacheResults
_TEXT	ENDS
PUBLIC	??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ	; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
PUBLIC	??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<bool> >::~_Container_base_aux_alloc_empty<std::allocator<bool> >
PUBLIC	??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ ; std::vector<CvString,std::allocator<CvString> >::~vector<CvString,std::allocator<CvString> >
PUBLIC	??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ ; std::_Vector_val<CvString,std::allocator<CvString> >::~_Vector_val<CvString,std::allocator<CvString> >
PUBLIC	??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	?_Buy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAE_NI@Z ; std::vector<CvString,std::allocator<CvString> >::_Buy
PUBLIC	??_7CvCivilizationInfo@@6B@			; CvCivilizationInfo::`vftable'
PUBLIC	??0CvCivilizationInfo@@QAE@XZ			; CvCivilizationInfo::CvCivilizationInfo
PUBLIC	?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCivilizationInfo::CacheResults
EXTRN	??_ECvCivilizationInfo@@UAEPAXI@Z:PROC		; CvCivilizationInfo::`vector deleting destructor'
;	COMDAT ??_7CvCivilizationInfo@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
CONST	SEGMENT
??_7CvCivilizationInfo@@6B@ DD FLAT:?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCivilizationInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvCivilizationInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CvCivilizationInfo@@QAE@XZ DD 019930522H
	DD	0fH
	DD	FLAT:__unwindtable$??0CvCivilizationInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvCivilizationInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$19
	DD	07H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$8
	DD	09H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$21
	DD	09H
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$9
	DD	0bH
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$23
	DD	0bH
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$10
	DD	0dH
	DD	FLAT:__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$26
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvCivilizationInfo@@QAE@XZ
_TEXT	SEGMENT
tv431 = -156						; size = 4
tv392 = -152						; size = 4
tv346 = -148						; size = 4
tv371 = -144						; size = 4
tv305 = -140						; size = 4
tv330 = -136						; size = 4
_this$ = -132						; size = 4
$T229778 = -128						; size = 4
$T229770 = -121						; size = 1
$T229766 = -120						; size = 4
$T229758 = -112						; size = 4
$T229743 = -97						; size = 1
$T229739 = -96						; size = 4
$T229731 = -88						; size = 4
$T229716 = -82						; size = 1
$T229703 = -81						; size = 1
$T229699 = -80						; size = 4
$T229692 = -72						; size = 4
$T229685 = -64						; size = 4
$T229670 = -58						; size = 1
$T229657 = -57						; size = 1
$T229653 = -56						; size = 4
$T229646 = -48						; size = 4
$T229639 = -40						; size = 4
$T229634 = -36						; size = 4
$T229629 = -32						; size = 4
$T229624 = -28						; size = 4
$T229619 = -24						; size = 4
$T229614 = -20						; size = 4
$T229609 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvCivilizationInfo@@QAE@XZ PROC			; CvCivilizationInfo::CvCivilizationInfo, COMDAT
; _this$ = ecx

; 1993 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvCivilizationInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvCivilizationBaseInfo@@QAE@XZ	; CvCivilizationBaseInfo::CvCivilizationBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCivilizationInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+336], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+340], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+344], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	mov	DWORD PTR $T229609[ebp], ecx
	mov	ecx, DWORD PTR $T229609[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	mov	DWORD PTR $T229614[ebp], edx
	mov	ecx, DWORD PTR $T229614[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 404				; 00000194H
	mov	DWORD PTR $T229619[ebp], eax
	mov	ecx, DWORD PTR $T229619[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	mov	DWORD PTR $T229624[ebp], ecx
	mov	ecx, DWORD PTR $T229624[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 460				; 000001ccH
	mov	DWORD PTR $T229629[ebp], edx
	mov	ecx, DWORD PTR $T229629[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 488				; 000001e8H
	mov	DWORD PTR $T229634[ebp], eax
	mov	ecx, DWORD PTR $T229634[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	mov	DWORD PTR $T229639[ebp], ecx
	mov	ecx, DWORD PTR $T229639[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+544], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+548], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+552], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+556], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+560], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+564], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+568], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+572], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+576], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+580], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+581], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 584				; 00000248H
	mov	DWORD PTR $T229685[ebp], ecx
	lea	edx, DWORD PTR $T229670[ebp]
	mov	DWORD PTR $T229646[ebp], edx
	lea	eax, DWORD PTR $T229657[ebp]
	mov	DWORD PTR $T229653[ebp], eax
	mov	ecx, DWORD PTR $T229685[ebp]
	mov	DWORD PTR tv330[ebp], ecx
	mov	edx, DWORD PTR $T229685[ebp]
	mov	DWORD PTR tv305[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	push	0
	mov	ecx, DWORD PTR $T229685[ebp]
	call	?_Buy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAE_NI@Z ; std::vector<CvString,std::allocator<CvString> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 600				; 00000258H
	mov	DWORD PTR $T229731[ebp], eax
	lea	ecx, DWORD PTR $T229716[ebp]
	mov	DWORD PTR $T229692[ebp], ecx
	lea	edx, DWORD PTR $T229703[ebp]
	mov	DWORD PTR $T229699[ebp], edx
	mov	eax, DWORD PTR $T229731[ebp]
	mov	DWORD PTR tv371[ebp], eax
	mov	ecx, DWORD PTR $T229731[ebp]
	mov	DWORD PTR tv346[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	push	0
	mov	ecx, DWORD PTR $T229731[ebp]
	call	?_Buy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAE_NI@Z ; std::vector<CvString,std::allocator<CvString> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 616				; 00000268H
	mov	DWORD PTR $T229758[ebp], edx
	lea	eax, DWORD PTR $T229743[ebp]
	mov	DWORD PTR $T229739[ebp], eax
	mov	ecx, DWORD PTR $T229758[ebp]
	mov	DWORD PTR tv392[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	edx, DWORD PTR $T229758[ebp]
	mov	DWORD PTR [edx], 0
	mov	ecx, DWORD PTR $T229758[ebp]
	add	ecx, 4
	call	??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 636				; 0000027cH
	mov	DWORD PTR $T229778[ebp], eax
	lea	ecx, DWORD PTR $T229770[ebp]
	mov	DWORD PTR $T229766[ebp], ecx
	mov	edx, DWORD PTR $T229778[ebp]
	mov	DWORD PTR tv431[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	eax, DWORD PTR $T229778[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR $T229778[ebp]
	add	ecx, 4
	call	??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH

; 1994 : 
; 1995 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvCivilizationBaseInfo@@UAE@XZ	; CvCivilizationBaseInfo::~CvCivilizationBaseInfo
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 460				; 000001ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 488				; 000001e8H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$19:
	mov	ecx, DWORD PTR $T229685[ebp]
	jmp	??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 584				; 00000248H
	jmp	??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ ; std::vector<CvString,std::allocator<CvString> >::~vector<CvString,std::allocator<CvString> >
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$21:
	mov	ecx, DWORD PTR $T229731[ebp]
	jmp	??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 600				; 00000258H
	jmp	??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ ; std::vector<CvString,std::allocator<CvString> >::~vector<CvString,std::allocator<CvString> >
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$23:
	mov	ecx, DWORD PTR $T229758[ebp]
	jmp	??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<bool> >::~_Container_base_aux_alloc_empty<std::allocator<bool> >
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 616				; 00000268H
	jmp	??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ ; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
__unwindfunclet$??0CvCivilizationInfo@@QAE@XZ$26:
	mov	ecx, DWORD PTR $T229778[ebp]
	jmp	??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<bool> >::~_Container_base_aux_alloc_empty<std::allocator<bool> >
__ehhandler$??0CvCivilizationInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-148]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvCivilizationInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvCivilizationInfo@@QAE@XZ ENDP			; CvCivilizationInfo::CvCivilizationInfo
PUBLIC	??1CvCivilizationInfo@@UAE@XZ			; CvCivilizationInfo::~CvCivilizationInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvCivilizationInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvCivilizationInfo@@UAEPAXI@Z PROC			; CvCivilizationInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvCivilizationInfo@@UAE@XZ		; CvCivilizationInfo::~CvCivilizationInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvCivilizationInfo@@UAEPAXI@Z ENDP			; CvCivilizationInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ ; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::~_Vector_val<unsigned int,std::allocator<unsigned int> >
PUBLIC	?_Tidy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXXZ ; std::vector<CvString,std::allocator<CvString> >::_Tidy
PUBLIC	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$??1CvCivilizationInfo@@UAE@XZ DD 019930522H
	DD	011H
	DD	FLAT:__unwindtable$??1CvCivilizationInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvCivilizationInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$12
	DD	0bH
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$14
	DD	09H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$16
	DD	0dH
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$18
	DD	08H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$20
	DD	07H
	DD	FLAT:__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$23
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvCivilizationInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -212						; size = 4
$T230203 = -208						; size = 4
$T230198 = -204						; size = 4
$T230193 = -200						; size = 4
$T230188 = -196						; size = 4
$T230183 = -192						; size = 4
$T230178 = -188						; size = 4
$T230173 = -184						; size = 4
$T230168 = -180						; size = 4
$T230046 = -140						; size = 4
$T229924 = -100						; size = 4
$T229910 = -96						; size = 4
$T229889 = -92						; size = 4
$T229875 = -88						; size = 4
$T229854 = -84						; size = 4
$T229852 = -80						; size = 4
$T229848 = -76						; size = 4
$T229846 = -72						; size = 4
$T229842 = -68						; size = 4
$T229840 = -64						; size = 4
$T229836 = -60						; size = 4
$T229834 = -56						; size = 4
$T229830 = -52						; size = 4
$T229828 = -48						; size = 4
$T229824 = -44						; size = 4
$T229822 = -40						; size = 4
$T229818 = -36						; size = 4
$T229816 = -32						; size = 4
$T229812 = -28						; size = 4
$T229810 = -24						; size = 4
$T229806 = -20						; size = 4
$T229804 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvCivilizationInfo@@UAE@XZ PROC			; CvCivilizationInfo::~CvCivilizationInfo, COMDAT
; _this$ = ecx

; 1998 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvCivilizationInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 200				; 000000c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvCivilizationInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH

; 1999 : 	SAFE_DELETE_ARRAY(m_piCivilizationBuildings);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 544				; 00000220H
	mov	DWORD PTR $T229806[ebp], ecx
	mov	edx, DWORD PTR $T229806[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T229804[ebp], eax
	mov	ecx, DWORD PTR $T229804[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T229806[ebp]
	mov	DWORD PTR [edx], 0

; 2000 : 	SAFE_DELETE_ARRAY(m_piCivilizationUnits);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 548				; 00000224H
	mov	DWORD PTR $T229812[ebp], eax
	mov	ecx, DWORD PTR $T229812[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T229810[ebp], edx
	mov	eax, DWORD PTR $T229810[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T229812[ebp]
	mov	DWORD PTR [ecx], 0

; 2001 : 	SAFE_DELETE_ARRAY(m_piCivilizationFreeUnitsClass);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 552				; 00000228H
	mov	DWORD PTR $T229818[ebp], edx
	mov	eax, DWORD PTR $T229818[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T229816[ebp], ecx
	mov	edx, DWORD PTR $T229816[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T229818[ebp]
	mov	DWORD PTR [eax], 0

; 2002 : 	SAFE_DELETE_ARRAY(m_piCivilizationFreeUnitsDefaultUnitAI);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	mov	DWORD PTR $T229824[ebp], ecx
	mov	edx, DWORD PTR $T229824[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T229822[ebp], eax
	mov	ecx, DWORD PTR $T229822[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T229824[ebp]
	mov	DWORD PTR [edx], 0

; 2003 : 	SAFE_DELETE_ARRAY(m_pbLeaders);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 560				; 00000230H
	mov	DWORD PTR $T229830[ebp], eax
	mov	ecx, DWORD PTR $T229830[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T229828[ebp], edx
	mov	eax, DWORD PTR $T229828[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T229830[ebp]
	mov	DWORD PTR [ecx], 0

; 2004 : 	SAFE_DELETE_ARRAY(m_pbCivilizationFreeBuildingClass);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 564				; 00000234H
	mov	DWORD PTR $T229836[ebp], edx
	mov	eax, DWORD PTR $T229836[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T229834[ebp], ecx
	mov	edx, DWORD PTR $T229834[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T229836[ebp]
	mov	DWORD PTR [eax], 0

; 2005 : 	SAFE_DELETE_ARRAY(m_pbCivilizationFreeTechs);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	mov	DWORD PTR $T229842[ebp], ecx
	mov	edx, DWORD PTR $T229842[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T229840[ebp], eax
	mov	ecx, DWORD PTR $T229840[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T229842[ebp]
	mov	DWORD PTR [edx], 0

; 2006 : 	SAFE_DELETE_ARRAY(m_pbCivilizationDisableTechs);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 572				; 0000023cH
	mov	DWORD PTR $T229848[ebp], eax
	mov	ecx, DWORD PTR $T229848[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T229846[ebp], edx
	mov	eax, DWORD PTR $T229846[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T229848[ebp]
	mov	DWORD PTR [ecx], 0

; 2007 : 	SAFE_DELETE_ARRAY(m_pbReligions);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 576				; 00000240H
	mov	DWORD PTR $T229854[ebp], edx
	mov	eax, DWORD PTR $T229854[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T229852[ebp], ecx
	mov	edx, DWORD PTR $T229852[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T229854[ebp]
	mov	DWORD PTR [eax], 0

; 2008 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 636				; 0000027cH
	mov	DWORD PTR $T229889[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	edx, DWORD PTR $T229889[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR $T229889[ebp]
	add	eax, 4
	mov	DWORD PTR $T229875[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	mov	ecx, DWORD PTR $T229875[ebp]
	call	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 616				; 00000268H
	mov	DWORD PTR $T229924[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	edx, DWORD PTR $T229924[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR $T229924[ebp]
	add	eax, 4
	mov	DWORD PTR $T229910[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	mov	ecx, DWORD PTR $T229910[ebp]
	call	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 600				; 00000258H
	mov	DWORD PTR $T230046[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	mov	ecx, DWORD PTR $T230046[ebp]
	call	?_Tidy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXXZ ; std::vector<CvString,std::allocator<CvString> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 584				; 00000248H
	mov	DWORD PTR $T230168[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	mov	ecx, DWORD PTR $T230168[ebp]
	call	?_Tidy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXXZ ; std::vector<CvString,std::allocator<CvString> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 516				; 00000204H
	mov	DWORD PTR $T230173[ebp], eax
	mov	ecx, DWORD PTR $T230173[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 488				; 000001e8H
	mov	DWORD PTR $T230178[ebp], ecx
	mov	ecx, DWORD PTR $T230178[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 460				; 000001ccH
	mov	DWORD PTR $T230183[ebp], edx
	mov	ecx, DWORD PTR $T230183[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 432				; 000001b0H
	mov	DWORD PTR $T230188[ebp], eax
	mov	ecx, DWORD PTR $T230188[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	mov	DWORD PTR $T230193[ebp], ecx
	mov	ecx, DWORD PTR $T230193[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	mov	DWORD PTR $T230198[ebp], edx
	mov	ecx, DWORD PTR $T230198[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	mov	DWORD PTR $T230203[ebp], eax
	mov	ecx, DWORD PTR $T230203[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvCivilizationBaseInfo@@UAE@XZ	; CvCivilizationBaseInfo::~CvCivilizationBaseInfo
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvCivilizationBaseInfo@@UAE@XZ	; CvCivilizationBaseInfo::~CvCivilizationBaseInfo
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 460				; 000001ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 488				; 000001e8H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 584				; 00000248H
	jmp	??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ ; std::vector<CvString,std::allocator<CvString> >::~vector<CvString,std::allocator<CvString> >
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$9:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 600				; 00000258H
	jmp	??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ ; std::vector<CvString,std::allocator<CvString> >::~vector<CvString,std::allocator<CvString> >
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$10:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 616				; 00000268H
	jmp	??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ ; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$12:
	mov	ecx, DWORD PTR $T229889[ebp]
	jmp	??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<bool> >::~_Container_base_aux_alloc_empty<std::allocator<bool> >
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$14:
	mov	ecx, DWORD PTR $T229875[ebp]
	jmp	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$16:
	mov	ecx, DWORD PTR $T229924[ebp]
	jmp	??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<bool> >::~_Container_base_aux_alloc_empty<std::allocator<bool> >
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$18:
	mov	ecx, DWORD PTR $T229910[ebp]
	jmp	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$20:
	mov	ecx, DWORD PTR $T230046[ebp]
	jmp	??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvCivilizationInfo@@UAE@XZ$23:
	mov	ecx, DWORD PTR $T230168[ebp]
	jmp	??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
__ehhandler$??1CvCivilizationInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-204]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvCivilizationInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvCivilizationInfo@@UAE@XZ ENDP			; CvCivilizationInfo::~CvCivilizationInfo
PUBLIC	??_C@_0IE@GDIDHJEG@select?5BuildingClasses?4ID?0?5Build@ ; `string'
PUBLIC	??_C@_0BF@GCFLAFCD@InitBuildingDefaults?$AA@	; `string'
PUBLIC	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray
PUBLIC	??_C@_0BA@GLDILOEP@BuildingClasses?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z ; CvCivilizationInfo::InitBuildingDefaults
EXTRN	__imp_?GetInt@Results@Database@@QAEHH@Z:PROC
EXTRN	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:PROC ; CvDatabaseUtility::PrepareResults
EXTRN	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CvDatabaseUtility::GetResults
EXTRN	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z:PROC	; CvDatabaseUtility::MaxRows
;	COMDAT ??_C@_0IE@GDIDHJEG@select?5BuildingClasses?4ID?0?5Build@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdatabaseutility.h
CONST	SEGMENT
??_C@_0IE@GDIDHJEG@select?5BuildingClasses?4ID?0?5Build@ DB 'select Build'
	DB	'ingClasses.ID, Buildings.ID as BuildingID from BuildingClasse'
	DB	's inner join Buildings on Buildings.Type = DefaultBuilding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GCFLAFCD@InitBuildingDefaults?$AA@
CONST	SEGMENT
??_C@_0BF@GCFLAFCD@InitBuildingDefaults?$AA@ DB 'InitBuildingDefaults', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GLDILOEP@BuildingClasses?$AA@
CONST	SEGMENT
??_C@_0BA@GLDILOEP@BuildingClasses?$AA@ DB 'BuildingClasses', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z$0
__ehfuncinfo$?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -72						; size = 4
_count$230218 = -60					; size = 4
_buildingID$218808 = -56				; size = 4
_idx$218807 = -52					; size = 4
_pResults$ = -48					; size = 4
_strKey$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_piDefaults$ = 8					; size = 4
_kUtility$ = 12						; size = 4
?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z PROC ; CvCivilizationInfo::InitBuildingDefaults, COMDAT
; _this$ = ecx

; 2018 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2019 : 	kUtility.InitializeArray(piDefaults, "BuildingClasses", -1);

	push	OFFSET ??_C@_0BA@GLDILOEP@BuildingClasses?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$230218[ebp], eax
	cmp	DWORD PTR _count$230218[ebp], 0
	jne	SHORT $LN7@InitBuildi
	mov	DWORD PTR _count$230218[ebp], 1
$LN7@InitBuildi:
	push	-1
	mov	eax, DWORD PTR _count$230218[ebp]
	push	eax
	mov	ecx, DWORD PTR _piDefaults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 2020 : 
; 2021 : 	std::string strKey("InitBuildingDefaults");

	push	OFFSET ??_C@_0BF@GCFLAFCD@InitBuildingDefaults?$AA@
	lea	ecx, DWORD PTR _strKey$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2022 : 	Database::Results* pResults = kUtility.GetResults(strKey);

	lea	edx, DWORD PTR _strKey$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$[ebp], eax

; 2023 : 	if(pResults == NULL)

	cmp	DWORD PTR _pResults$[ebp], 0
	jne	SHORT $LN2@InitBuildi

; 2024 : 	{
; 2025 : 		pResults = kUtility.PrepareResults(strKey, "select BuildingClasses.ID, Buildings.ID as BuildingID from BuildingClasses inner join Buildings on Buildings.Type = DefaultBuilding");

	push	OFFSET ??_C@_0IE@GDIDHJEG@select?5BuildingClasses?4ID?0?5Build@
	lea	eax, DWORD PTR _strKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$[ebp], eax
$LN2@InitBuildi:

; 2026 : 	}
; 2027 : 
; 2028 : 	while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@InitBuildi

; 2029 : 	{
; 2030 : 		const int idx = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _idx$218807[ebp], eax

; 2031 : 		const int buildingID = pResults->GetInt(1);

	push	1
	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _buildingID$218808[ebp], eax

; 2032 : 
; 2033 : 		piDefaults[idx] = buildingID;

	mov	edx, DWORD PTR _piDefaults$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idx$218807[ebp]
	mov	edx, DWORD PTR _buildingID$218808[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 2034 : 	}

	jmp	SHORT $LN2@InitBuildi
$LN1@InitBuildi:

; 2035 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _strKey$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z ENDP ; CvCivilizationInfo::InitBuildingDefaults
PUBLIC	??_C@_0GI@NELFDMLP@select?5UnitClasses?4ID?0?5Units?4ID?5@ ; `string'
PUBLIC	??_C@_0BB@PCMCNIPH@InitUnitDefaults?$AA@	; `string'
PUBLIC	??_C@_0M@HLHJNCC@UnitClasses?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z ; CvCivilizationInfo::InitUnitDefaults
;	COMDAT ??_C@_0GI@NELFDMLP@select?5UnitClasses?4ID?0?5Units?4ID?5@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdatabaseutility.h
CONST	SEGMENT
??_C@_0GI@NELFDMLP@select?5UnitClasses?4ID?0?5Units?4ID?5@ DB 'select Uni'
	DB	'tClasses.ID, Units.ID as UnitID from UnitClasses inner join U'
	DB	'nits on Units.Type = DefaultUnit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PCMCNIPH@InitUnitDefaults?$AA@
CONST	SEGMENT
??_C@_0BB@PCMCNIPH@InitUnitDefaults?$AA@ DB 'InitUnitDefaults', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLHJNCC@UnitClasses?$AA@
CONST	SEGMENT
??_C@_0M@HLHJNCC@UnitClasses?$AA@ DB 'UnitClasses', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z$0
__ehfuncinfo$?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -72						; size = 4
_count$230235 = -60					; size = 4
_idx$218823 = -56					; size = 4
_unitID$218824 = -52					; size = 4
_pResults$ = -48					; size = 4
_strKey$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_piDefaults$ = 8					; size = 4
_kUtility$ = 12						; size = 4
?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z PROC ; CvCivilizationInfo::InitUnitDefaults, COMDAT
; _this$ = ecx

; 2045 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2046 : 	kUtility.InitializeArray(piDefaults, "UnitClasses", -1);

	push	OFFSET ??_C@_0M@HLHJNCC@UnitClasses?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$230235[ebp], eax
	cmp	DWORD PTR _count$230235[ebp], 0
	jne	SHORT $LN7@InitUnitDe
	mov	DWORD PTR _count$230235[ebp], 1
$LN7@InitUnitDe:
	push	-1
	mov	eax, DWORD PTR _count$230235[ebp]
	push	eax
	mov	ecx, DWORD PTR _piDefaults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 2047 : 
; 2048 : 	std::string strKey("InitUnitDefaults");

	push	OFFSET ??_C@_0BB@PCMCNIPH@InitUnitDefaults?$AA@
	lea	ecx, DWORD PTR _strKey$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2049 : 	Database::Results* pResults = kUtility.GetResults(strKey);

	lea	edx, DWORD PTR _strKey$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$[ebp], eax

; 2050 : 	if(pResults == NULL)

	cmp	DWORD PTR _pResults$[ebp], 0
	jne	SHORT $LN2@InitUnitDe

; 2051 : 	{
; 2052 : 		pResults = kUtility.PrepareResults(strKey, "select UnitClasses.ID, Units.ID as UnitID from UnitClasses inner join Units on Units.Type = DefaultUnit");

	push	OFFSET ??_C@_0GI@NELFDMLP@select?5UnitClasses?4ID?0?5Units?4ID?5@
	lea	eax, DWORD PTR _strKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$[ebp], eax
$LN2@InitUnitDe:

; 2053 : 	}
; 2054 : 
; 2055 : 	while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@InitUnitDe

; 2056 : 	{
; 2057 : 		const int idx		= pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _idx$218823[ebp], eax

; 2058 : 		const int unitID	= pResults->GetInt(1);

	push	1
	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _unitID$218824[ebp], eax

; 2059 : 
; 2060 : 		piDefaults[idx] = unitID;

	mov	edx, DWORD PTR _piDefaults$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idx$218823[ebp]
	mov	edx, DWORD PTR _unitID$218824[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 2061 : 	}

	jmp	SHORT $LN2@InitUnitDe
$LN1@InitUnitDe:

; 2062 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _strKey$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z ENDP ; CvCivilizationInfo::InitUnitDefaults
PUBLIC	?getDefaultPlayerColor@CvCivilizationInfo@@QBEHXZ ; CvCivilizationInfo::getDefaultPlayerColor
; Function compile flags: /Odtp
;	COMDAT ?getDefaultPlayerColor@CvCivilizationInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefaultPlayerColor@CvCivilizationInfo@@QBEHXZ PROC	; CvCivilizationInfo::getDefaultPlayerColor, COMDAT
; _this$ = ecx

; 2065 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2066 : 	return m_iDefaultPlayerColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+336]

; 2067 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefaultPlayerColor@CvCivilizationInfo@@QBEHXZ ENDP	; CvCivilizationInfo::getDefaultPlayerColor
_TEXT	ENDS
PUBLIC	?getArtStyleType@CvCivilizationInfo@@QBEHXZ	; CvCivilizationInfo::getArtStyleType
; Function compile flags: /Odtp
;	COMDAT ?getArtStyleType@CvCivilizationInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtStyleType@CvCivilizationInfo@@QBEHXZ PROC	; CvCivilizationInfo::getArtStyleType, COMDAT
; _this$ = ecx

; 2070 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2071 : 	return m_iArtStyleType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+340]

; 2072 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtStyleType@CvCivilizationInfo@@QBEHXZ ENDP	; CvCivilizationInfo::getArtStyleType
_TEXT	ENDS
PUBLIC	?getArtStyleSuffix@CvCivilizationInfo@@QBEPBDXZ	; CvCivilizationInfo::getArtStyleSuffix
; Function compile flags: /Odtp
;	COMDAT ?getArtStyleSuffix@CvCivilizationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtStyleSuffix@CvCivilizationInfo@@QBEPBDXZ PROC	; CvCivilizationInfo::getArtStyleSuffix, COMDAT
; _this$ = ecx

; 2075 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2076 : 	return m_strArtStyleSuffix.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 404				; 00000194H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2077 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtStyleSuffix@CvCivilizationInfo@@QBEPBDXZ ENDP	; CvCivilizationInfo::getArtStyleSuffix
_TEXT	ENDS
PUBLIC	?getArtStylePrefix@CvCivilizationInfo@@QBEPBDXZ	; CvCivilizationInfo::getArtStylePrefix
; Function compile flags: /Odtp
;	COMDAT ?getArtStylePrefix@CvCivilizationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtStylePrefix@CvCivilizationInfo@@QBEPBDXZ PROC	; CvCivilizationInfo::getArtStylePrefix, COMDAT
; _this$ = ecx

; 2080 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2081 : 	return m_strArtStylePrefix.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2082 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtStylePrefix@CvCivilizationInfo@@QBEPBDXZ ENDP	; CvCivilizationInfo::getArtStylePrefix
_TEXT	ENDS
PUBLIC	?getNumCityNames@CvCivilizationInfo@@QBEHXZ	; CvCivilizationInfo::getNumCityNames
; Function compile flags: /Odtp
;	COMDAT ?getNumCityNames@CvCivilizationInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T230257 = -4						; size = 4
?getNumCityNames@CvCivilizationInfo@@QBEHXZ PROC	; CvCivilizationInfo::getNumCityNames, COMDAT
; _this$ = ecx

; 2085 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2086 : 	return m_vCityNames.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 584				; 00000248H
	mov	DWORD PTR $T230257[ebp], eax
	mov	ecx, DWORD PTR $T230257[ebp]
	mov	edx, DWORD PTR $T230257[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx

; 2087 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumCityNames@CvCivilizationInfo@@QBEHXZ ENDP	; CvCivilizationInfo::getNumCityNames
_TEXT	ENDS
PUBLIC	?getNumSpyNames@CvCivilizationInfo@@QBEHXZ	; CvCivilizationInfo::getNumSpyNames
; Function compile flags: /Odtp
;	COMDAT ?getNumSpyNames@CvCivilizationInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T230263 = -4						; size = 4
?getNumSpyNames@CvCivilizationInfo@@QBEHXZ PROC		; CvCivilizationInfo::getNumSpyNames, COMDAT
; _this$ = ecx

; 2090 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2091 : 	return m_vSpyNames.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 600				; 00000258H
	mov	DWORD PTR $T230263[ebp], eax
	mov	ecx, DWORD PTR $T230263[ebp]
	mov	edx, DWORD PTR $T230263[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx

; 2092 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumSpyNames@CvCivilizationInfo@@QBEHXZ ENDP		; CvCivilizationInfo::getNumSpyNames
_TEXT	ENDS
PUBLIC	?getNumLeaders@CvCivilizationInfo@@QBEHXZ	; CvCivilizationInfo::getNumLeaders
; Function compile flags: /Odtp
;	COMDAT ?getNumLeaders@CvCivilizationInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumLeaders@CvCivilizationInfo@@QBEHXZ PROC		; CvCivilizationInfo::getNumLeaders, COMDAT
; _this$ = ecx

; 2096 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2097 : 	// the number of leaders the Civ has, this is needed so that random leaders can be generated easily
; 2098 : 	return m_iNumLeaders;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+344]

; 2099 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumLeaders@CvCivilizationInfo@@QBEHXZ ENDP		; CvCivilizationInfo::getNumLeaders
_TEXT	ENDS
PUBLIC	?GetDawnOfManAudio@CvCivilizationInfo@@QBEPBDXZ	; CvCivilizationInfo::GetDawnOfManAudio
; Function compile flags: /Odtp
;	COMDAT ?GetDawnOfManAudio@CvCivilizationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDawnOfManAudio@CvCivilizationInfo@@QBEPBDXZ PROC	; CvCivilizationInfo::GetDawnOfManAudio, COMDAT
; _this$ = ecx

; 2102 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2103 : 	return m_strDawnOfManAudio.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 488				; 000001e8H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2104 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDawnOfManAudio@CvCivilizationInfo@@QBEPBDXZ ENDP	; CvCivilizationInfo::GetDawnOfManAudio
_TEXT	ENDS
PUBLIC	?getSoundtrackKey@CvCivilizationInfo@@QBEPBDXZ	; CvCivilizationInfo::getSoundtrackKey
; Function compile flags: /Odtp
;	COMDAT ?getSoundtrackKey@CvCivilizationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSoundtrackKey@CvCivilizationInfo@@QBEPBDXZ PROC	; CvCivilizationInfo::getSoundtrackKey, COMDAT
; _this$ = ecx

; 2107 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2108 : 	return m_strSoundtrackKey.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2109 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSoundtrackKey@CvCivilizationInfo@@QBEPBDXZ ENDP	; CvCivilizationInfo::getSoundtrackKey
_TEXT	ENDS
PUBLIC	?getAdjective@CvCivilizationInfo@@QBEPBDXZ	; CvCivilizationInfo::getAdjective
; Function compile flags: /Odtp
;	COMDAT ?getAdjective@CvCivilizationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAdjective@CvCivilizationInfo@@QBEPBDXZ PROC		; CvCivilizationInfo::getAdjective, COMDAT
; _this$ = ecx

; 2113 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2114 : 	return m_strAdjective.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2115 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAdjective@CvCivilizationInfo@@QBEPBDXZ ENDP		; CvCivilizationInfo::getAdjective
_TEXT	ENDS
PUBLIC	?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z	; CvCivilizationInfo::setAdjectiveKey
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z$0
__ehfuncinfo$?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z
_TEXT	SEGMENT
tv80 = -60						; size = 4
_this$ = -56						; size = 4
$T230286 = -52						; size = 4
$T230285 = -48						; size = 4
$T230281 = -44						; size = 4
$T230274 = -40						; size = 28
__$EHRec$ = -12						; size = 12
_szVal$ = 8						; size = 4
?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z PROC	; CvCivilizationInfo::setAdjectiveKey, COMDAT
; _this$ = ecx

; 2118 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2119 : 	m_strAdjectiveKey = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 460				; 000001ccH
	mov	DWORD PTR $T230281[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN5@setAdjecti
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T230281[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN6@setAdjecti
$LN5@setAdjecti:
	mov	ecx, DWORD PTR $T230281[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN6@setAdjecti:

; 2120 : 	m_strAdjective = GetLocalizedText(m_strAdjectiveKey.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 460				; 000001ccH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	lea	edx, DWORD PTR $T230274[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv80[ebp], eax
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T230286[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	mov	DWORD PTR $T230285[ebp], ecx
	mov	edx, DWORD PTR $T230286[ebp]
	push	edx
	mov	ecx, DWORD PTR $T230285[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T230274[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2121 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z$0:
	lea	ecx, DWORD PTR $T230274[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z ENDP	; CvCivilizationInfo::setAdjectiveKey
PUBLIC	?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ	; CvCivilizationInfo::getAdjectiveKey
; Function compile flags: /Odtp
;	COMDAT ?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ PROC	; CvCivilizationInfo::getAdjectiveKey, COMDAT
; _this$ = ecx

; 2124 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2125 : 	return m_strAdjectiveKey.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 460				; 000001ccH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2126 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAdjectiveKey@CvCivilizationInfo@@QBEPBDXZ ENDP	; CvCivilizationInfo::getAdjectiveKey
_TEXT	ENDS
PUBLIC	?getFlagTexture@CvCivilizationInfo@@QBEPBDXZ	; CvCivilizationInfo::getFlagTexture
; Function compile flags: /Odtp
;	COMDAT ?getFlagTexture@CvCivilizationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFlagTexture@CvCivilizationInfo@@QBEPBDXZ PROC	; CvCivilizationInfo::getFlagTexture, COMDAT
; _this$ = ecx

; 2129 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2130 : 	return NULL;

	xor	eax, eax

; 2131 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFlagTexture@CvCivilizationInfo@@QBEPBDXZ ENDP	; CvCivilizationInfo::getFlagTexture
_TEXT	ENDS
PUBLIC	?getArtDefineTag@CvCivilizationInfo@@QBEPBDXZ	; CvCivilizationInfo::getArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?getArtDefineTag@CvCivilizationInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtDefineTag@CvCivilizationInfo@@QBEPBDXZ PROC	; CvCivilizationInfo::getArtDefineTag, COMDAT
; _this$ = ecx

; 2134 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2135 : 	return m_strArtDefineTag.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2136 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtDefineTag@CvCivilizationInfo@@QBEPBDXZ ENDP	; CvCivilizationInfo::getArtDefineTag
_TEXT	ENDS
PUBLIC	?setArtDefineTag@CvCivilizationInfo@@QAEXPBD@Z	; CvCivilizationInfo::setArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?setArtDefineTag@CvCivilizationInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T230310 = -4						; size = 4
_szVal$ = 8						; size = 4
?setArtDefineTag@CvCivilizationInfo@@QAEXPBD@Z PROC	; CvCivilizationInfo::setArtDefineTag, COMDAT
; _this$ = ecx

; 2139 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2140 : 	m_strArtDefineTag = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	mov	DWORD PTR $T230310[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setArtDefi
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T230310[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setArtDefi
$LN4@setArtDefi:
	mov	ecx, DWORD PTR $T230310[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setArtDefi:

; 2141 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setArtDefineTag@CvCivilizationInfo@@QAEXPBD@Z ENDP	; CvCivilizationInfo::setArtDefineTag
_TEXT	ENDS
PUBLIC	?setArtStyleSuffix@CvCivilizationInfo@@QAEXPBD@Z ; CvCivilizationInfo::setArtStyleSuffix
; Function compile flags: /Odtp
;	COMDAT ?setArtStyleSuffix@CvCivilizationInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T230318 = -4						; size = 4
_szVal$ = 8						; size = 4
?setArtStyleSuffix@CvCivilizationInfo@@QAEXPBD@Z PROC	; CvCivilizationInfo::setArtStyleSuffix, COMDAT
; _this$ = ecx

; 2144 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2145 : 	m_strArtStyleSuffix = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 404				; 00000194H
	mov	DWORD PTR $T230318[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setArtStyl
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T230318[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setArtStyl
$LN4@setArtStyl:
	mov	ecx, DWORD PTR $T230318[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setArtStyl:

; 2146 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setArtStyleSuffix@CvCivilizationInfo@@QAEXPBD@Z ENDP	; CvCivilizationInfo::setArtStyleSuffix
_TEXT	ENDS
PUBLIC	?setArtStylePrefix@CvCivilizationInfo@@QAEXPBD@Z ; CvCivilizationInfo::setArtStylePrefix
; Function compile flags: /Odtp
;	COMDAT ?setArtStylePrefix@CvCivilizationInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T230326 = -4						; size = 4
_szVal$ = 8						; size = 4
?setArtStylePrefix@CvCivilizationInfo@@QAEXPBD@Z PROC	; CvCivilizationInfo::setArtStylePrefix, COMDAT
; _this$ = ecx

; 2149 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2150 : 	m_strArtStylePrefix = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 376				; 00000178H
	mov	DWORD PTR $T230326[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setArtStyl@2
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T230326[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setArtStyl@2
$LN4@setArtStyl@2:
	mov	ecx, DWORD PTR $T230326[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setArtStyl@2:

; 2151 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setArtStylePrefix@CvCivilizationInfo@@QAEXPBD@Z ENDP	; CvCivilizationInfo::setArtStylePrefix
_TEXT	ENDS
PUBLIC	?GetReligion@CvCivilizationInfo@@QBE?AW4ReligionTypes@@XZ ; CvCivilizationInfo::GetReligion
EXTRN	?getNumReligionInfos@CvGlobals@@QAEHXZ:PROC	; CvGlobals::getNumReligionInfos
; Function compile flags: /Odtp
;	COMDAT ?GetReligion@CvCivilizationInfo@@QBE?AW4ReligionTypes@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iI$218884 = -4						; size = 4
?GetReligion@CvCivilizationInfo@@QBE?AW4ReligionTypes@@XZ PROC ; CvCivilizationInfo::GetReligion, COMDAT
; _this$ = ecx

; 2154 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2155 : 	// Only one per civ supported now
; 2156 : #ifdef AUI_WARNING_FIXES
; 2157 : 	for (uint iI = 0; iI < GC.getNumReligionInfos(); iI++)
; 2158 : #else
; 2159 : 	for(int iI = 0; iI < GC.getNumReligionInfos(); iI++)

	mov	DWORD PTR _iI$218884[ebp], 0
	jmp	SHORT $LN4@GetReligio
$LN3@GetReligio:
	mov	eax, DWORD PTR _iI$218884[ebp]
	add	eax, 1
	mov	DWORD PTR _iI$218884[ebp], eax
$LN4@GetReligio:
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getNumReligionInfos@CvGlobals@@QAEHXZ	; CvGlobals::getNumReligionInfos
	cmp	DWORD PTR _iI$218884[ebp], eax
	jge	SHORT $LN2@GetReligio

; 2160 : #endif
; 2161 : 	{
; 2162 : 		if(m_pbReligions[iI])

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	mov	eax, DWORD PTR _iI$218884[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	test	ecx, ecx
	je	SHORT $LN1@GetReligio

; 2163 : 		{
; 2164 : 			return (ReligionTypes)iI;

	mov	eax, DWORD PTR _iI$218884[ebp]
	jmp	SHORT $LN5@GetReligio
$LN1@GetReligio:

; 2165 : 		}
; 2166 : 	}

	jmp	SHORT $LN3@GetReligio
$LN2@GetReligio:

; 2167 : 	return NO_RELIGION;

	or	eax, -1
$LN5@GetReligio:

; 2168 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetReligion@CvCivilizationInfo@@QBE?AW4ReligionTypes@@XZ ENDP ; CvCivilizationInfo::GetReligion
_TEXT	ENDS
PUBLIC	?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationBuildings
; Function compile flags: /Odtp
;	COMDAT ?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z PROC ; CvCivilizationInfo::getCivilizationBuildings, COMDAT
; _this$ = ecx

; 2171 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2172 : 	CvAssertMsg(i < GC.getNumBuildingClassInfos(), "Index out of bounds");
; 2173 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2174 : 	return m_piCivilizationBuildings ? m_piCivilizationBuildings[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+544], 0
	je	SHORT $LN3@getCiviliz
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+544]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getCiviliz
$LN3@getCiviliz:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getCiviliz:
	mov	eax, DWORD PTR tv69[ebp]

; 2175 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCivilizationBuildings@CvCivilizationInfo@@QBEHH@Z ENDP ; CvCivilizationInfo::getCivilizationBuildings
_TEXT	ENDS
PUBLIC	?getCivilizationUnits@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationUnits
; Function compile flags: /Odtp
;	COMDAT ?getCivilizationUnits@CvCivilizationInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getCivilizationUnits@CvCivilizationInfo@@QBEHH@Z PROC	; CvCivilizationInfo::getCivilizationUnits, COMDAT
; _this$ = ecx

; 2178 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2179 : 	CvAssertMsg(i < GC.getNumUnitClassInfos(), "Index out of bounds");
; 2180 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2181 : 	return m_piCivilizationUnits ? m_piCivilizationUnits[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+548], 0
	je	SHORT $LN3@getCiviliz@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+548]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getCiviliz@2
$LN3@getCiviliz@2:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getCiviliz@2:
	mov	eax, DWORD PTR tv69[ebp]

; 2182 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCivilizationUnits@CvCivilizationInfo@@QBEHH@Z ENDP	; CvCivilizationInfo::getCivilizationUnits
_TEXT	ENDS
PUBLIC	??A?$vector@_NV?$allocator@_N@std@@@std@@QBE_NI@Z ; std::vector<bool,std::allocator<bool> >::operator[]
PUBLIC	?isCivilizationBuildingOverridden@CvCivilizationInfo@@QBE_NH@Z ; CvCivilizationInfo::isCivilizationBuildingOverridden
; Function compile flags: /Odtp
;	COMDAT ?isCivilizationBuildingOverridden@CvCivilizationInfo@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
_i$ = 8							; size = 4
?isCivilizationBuildingOverridden@CvCivilizationInfo@@QBE_NH@Z PROC ; CvCivilizationInfo::isCivilizationBuildingOverridden, COMDAT
; _this$ = ecx

; 2185 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 2186 : 	CvAssertMsg(i < GC.getNumBuildingClassInfos(), "Index out of bounds");
; 2187 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2188 : 	return m_CivilizationBuildingOverridden[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 616				; 00000268H
	call	??A?$vector@_NV?$allocator@_N@std@@@std@@QBE_NI@Z ; std::vector<bool,std::allocator<bool> >::operator[]

; 2189 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isCivilizationBuildingOverridden@CvCivilizationInfo@@QBE_NH@Z ENDP ; CvCivilizationInfo::isCivilizationBuildingOverridden
_TEXT	ENDS
PUBLIC	?isCivilizationUnitOverridden@CvCivilizationInfo@@QBE_NH@Z ; CvCivilizationInfo::isCivilizationUnitOverridden
; Function compile flags: /Odtp
;	COMDAT ?isCivilizationUnitOverridden@CvCivilizationInfo@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
_i$ = 8							; size = 4
?isCivilizationUnitOverridden@CvCivilizationInfo@@QBE_NH@Z PROC ; CvCivilizationInfo::isCivilizationUnitOverridden, COMDAT
; _this$ = ecx

; 2192 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 2193 : 	CvAssertMsg(i < GC.getNumUnitClassInfos(), "Index out of bounds");
; 2194 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2195 : 	return m_CivilizationUnitOverridden[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 636				; 0000027cH
	call	??A?$vector@_NV?$allocator@_N@std@@@std@@QBE_NI@Z ; std::vector<bool,std::allocator<bool> >::operator[]

; 2196 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isCivilizationUnitOverridden@CvCivilizationInfo@@QBE_NH@Z ENDP ; CvCivilizationInfo::isCivilizationUnitOverridden
_TEXT	ENDS
PUBLIC	?getCivilizationFreeUnitsClass@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationFreeUnitsClass
; Function compile flags: /Odtp
;	COMDAT ?getCivilizationFreeUnitsClass@CvCivilizationInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getCivilizationFreeUnitsClass@CvCivilizationInfo@@QBEHH@Z PROC ; CvCivilizationInfo::getCivilizationFreeUnitsClass, COMDAT
; _this$ = ecx

; 2199 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2200 : 	CvAssertMsg(i < GC.getNumUnitClassInfos(), "Index out of bounds");
; 2201 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2202 : 	return m_piCivilizationFreeUnitsClass ? m_piCivilizationFreeUnitsClass[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+552], 0
	je	SHORT $LN3@getCiviliz@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+552]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getCiviliz@3
$LN3@getCiviliz@3:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getCiviliz@3:
	mov	eax, DWORD PTR tv69[ebp]

; 2203 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCivilizationFreeUnitsClass@CvCivilizationInfo@@QBEHH@Z ENDP ; CvCivilizationInfo::getCivilizationFreeUnitsClass
_TEXT	ENDS
PUBLIC	?getCivilizationFreeUnitsDefaultUnitAI@CvCivilizationInfo@@QBEHH@Z ; CvCivilizationInfo::getCivilizationFreeUnitsDefaultUnitAI
; Function compile flags: /Odtp
;	COMDAT ?getCivilizationFreeUnitsDefaultUnitAI@CvCivilizationInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getCivilizationFreeUnitsDefaultUnitAI@CvCivilizationInfo@@QBEHH@Z PROC ; CvCivilizationInfo::getCivilizationFreeUnitsDefaultUnitAI, COMDAT
; _this$ = ecx

; 2206 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2207 : 	CvAssertMsg(i < GC.getNumUnitClassInfos(), "Index out of bounds");
; 2208 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2209 : 	return m_piCivilizationFreeUnitsDefaultUnitAI ? m_piCivilizationFreeUnitsDefaultUnitAI[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+556], 0
	je	SHORT $LN3@getCiviliz@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+556]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getCiviliz@4
$LN3@getCiviliz@4:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getCiviliz@4:
	mov	eax, DWORD PTR tv69[ebp]

; 2210 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCivilizationFreeUnitsDefaultUnitAI@CvCivilizationInfo@@QBEHH@Z ENDP ; CvCivilizationInfo::getCivilizationFreeUnitsDefaultUnitAI
_TEXT	ENDS
PUBLIC	?isLeaders@CvCivilizationInfo@@QBE_NH@Z		; CvCivilizationInfo::isLeaders
; Function compile flags: /Odtp
;	COMDAT ?isLeaders@CvCivilizationInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isLeaders@CvCivilizationInfo@@QBE_NH@Z PROC		; CvCivilizationInfo::isLeaders, COMDAT
; _this$ = ecx

; 2213 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2214 : 	CvAssertMsg(i < GC.getNumLeaderHeadInfos(), "Index out of bounds");
; 2215 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2216 : 	return m_pbLeaders ? m_pbLeaders[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+560], 0
	je	SHORT $LN3@isLeaders
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+560]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isLeaders
$LN3@isLeaders:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isLeaders:
	mov	al, BYTE PTR tv68[ebp]

; 2217 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isLeaders@CvCivilizationInfo@@QBE_NH@Z ENDP		; CvCivilizationInfo::isLeaders
_TEXT	ENDS
PUBLIC	?isCivilizationFreeBuildingClass@CvCivilizationInfo@@QBE_NH@Z ; CvCivilizationInfo::isCivilizationFreeBuildingClass
; Function compile flags: /Odtp
;	COMDAT ?isCivilizationFreeBuildingClass@CvCivilizationInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isCivilizationFreeBuildingClass@CvCivilizationInfo@@QBE_NH@Z PROC ; CvCivilizationInfo::isCivilizationFreeBuildingClass, COMDAT
; _this$ = ecx

; 2220 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2221 : 	CvAssertMsg(i < GC.getNumBuildingClassInfos(), "Index out of bounds");
; 2222 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2223 : 	return m_pbCivilizationFreeBuildingClass ? m_pbCivilizationFreeBuildingClass[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+564], 0
	je	SHORT $LN3@isCiviliza
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+564]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isCiviliza
$LN3@isCiviliza:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isCiviliza:
	mov	al, BYTE PTR tv68[ebp]

; 2224 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isCivilizationFreeBuildingClass@CvCivilizationInfo@@QBE_NH@Z ENDP ; CvCivilizationInfo::isCivilizationFreeBuildingClass
_TEXT	ENDS
PUBLIC	?isCivilizationFreeTechs@CvCivilizationInfo@@QBE_NH@Z ; CvCivilizationInfo::isCivilizationFreeTechs
; Function compile flags: /Odtp
;	COMDAT ?isCivilizationFreeTechs@CvCivilizationInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isCivilizationFreeTechs@CvCivilizationInfo@@QBE_NH@Z PROC ; CvCivilizationInfo::isCivilizationFreeTechs, COMDAT
; _this$ = ecx

; 2227 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2228 : 	CvAssertMsg(i < GC.getNumTechInfos(), "Index out of bounds");
; 2229 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2230 : 	return m_pbCivilizationFreeTechs ? m_pbCivilizationFreeTechs[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+568], 0
	je	SHORT $LN3@isCiviliza@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+568]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isCiviliza@2
$LN3@isCiviliza@2:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isCiviliza@2:
	mov	al, BYTE PTR tv68[ebp]

; 2231 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isCivilizationFreeTechs@CvCivilizationInfo@@QBE_NH@Z ENDP ; CvCivilizationInfo::isCivilizationFreeTechs
_TEXT	ENDS
PUBLIC	?isCivilizationDisableTechs@CvCivilizationInfo@@QBE_NH@Z ; CvCivilizationInfo::isCivilizationDisableTechs
; Function compile flags: /Odtp
;	COMDAT ?isCivilizationDisableTechs@CvCivilizationInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isCivilizationDisableTechs@CvCivilizationInfo@@QBE_NH@Z PROC ; CvCivilizationInfo::isCivilizationDisableTechs, COMDAT
; _this$ = ecx

; 2234 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2235 : 	CvAssertMsg(i < GC.getNumTechInfos(), "Index out of bounds");
; 2236 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 2237 : 	return m_pbCivilizationDisableTechs ? m_pbCivilizationDisableTechs[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+572], 0
	je	SHORT $LN3@isCiviliza@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isCiviliza@3
$LN3@isCiviliza@3:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isCiviliza@3:
	mov	al, BYTE PTR tv68[ebp]

; 2238 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isCivilizationDisableTechs@CvCivilizationInfo@@QBE_NH@Z ENDP ; CvCivilizationInfo::isCivilizationDisableTechs
_TEXT	ENDS
PUBLIC	?getCityNames@CvCivilizationInfo@@QBEPBDH@Z	; CvCivilizationInfo::getCityNames
; Function compile flags: /Odtp
;	COMDAT ?getCityNames@CvCivilizationInfo@@QBEPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T230526 = -4						; size = 4
_i$ = 8							; size = 4
?getCityNames@CvCivilizationInfo@@QBEPBDH@Z PROC	; CvCivilizationInfo::getCityNames, COMDAT
; _this$ = ecx

; 2241 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2242 : 	return m_vCityNames[i].c_str();

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+588]
	mov	DWORD PTR $T230526[ebp], eax
	mov	ecx, DWORD PTR $T230526[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2243 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getCityNames@CvCivilizationInfo@@QBEPBDH@Z ENDP	; CvCivilizationInfo::getCityNames
_TEXT	ENDS
PUBLIC	?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z	; CvCivilizationInfo::getSpyNames
; Function compile flags: /Odtp
;	COMDAT ?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T230532 = -4						; size = 4
_i$ = 8							; size = 4
?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z PROC		; CvCivilizationInfo::getSpyNames, COMDAT
; _this$ = ecx

; 2246 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2247 : 	return m_vSpyNames[i].c_str();

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+604]
	mov	DWORD PTR $T230532[ebp], eax
	mov	ecx, DWORD PTR $T230532[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2248 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getSpyNames@CvCivilizationInfo@@QBEPBDH@Z ENDP		; CvCivilizationInfo::getSpyNames
_TEXT	ENDS
PUBLIC	?isCoastalCiv@CvCivilizationInfo@@QBE_NXZ	; CvCivilizationInfo::isCoastalCiv
; Function compile flags: /Odtp
;	COMDAT ?isCoastalCiv@CvCivilizationInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isCoastalCiv@CvCivilizationInfo@@QBE_NXZ PROC		; CvCivilizationInfo::isCoastalCiv, COMDAT
; _this$ = ecx

; 2251 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2252 : 	return m_bCoastalCiv;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+580]

; 2253 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isCoastalCiv@CvCivilizationInfo@@QBE_NXZ ENDP		; CvCivilizationInfo::isCoastalCiv
_TEXT	ENDS
PUBLIC	?isFirstCoastalStart@CvCivilizationInfo@@QBE_NXZ ; CvCivilizationInfo::isFirstCoastalStart
; Function compile flags: /Odtp
;	COMDAT ?isFirstCoastalStart@CvCivilizationInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isFirstCoastalStart@CvCivilizationInfo@@QBE_NXZ PROC	; CvCivilizationInfo::isFirstCoastalStart, COMDAT
; _this$ = ecx

; 2256 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2257 : 	return m_bPlaceFirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+581]

; 2258 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isFirstCoastalStart@CvCivilizationInfo@@QBE_NXZ ENDP	; CvCivilizationInfo::isFirstCoastalStart
_TEXT	ENDS
PUBLIC	??_C@_0EF@IBNKHPGJ@select?5SpyName?5from?5Civilization@ ; `string'
PUBLIC	??_C@_0BI@BPICIEEA@Civilization?5?9?5SpyNames?$AA@ ; `string'
PUBLIC	??_C@_09IKMHLIEB@Religions?$AA@			; `string'
PUBLIC	??_C@_0BH@HFABEELD@Civilization_Religions?$AA@	; `string'
PUBLIC	??_C@_0N@HBOJHPGO@ReligionType?$AA@		; `string'
PUBLIC	??_C@_07MNOEAIDO@Leaders?$AA@			; `string'
PUBLIC	??_C@_0BF@FHEGFHEN@Civilization_Leaders?$AA@	; `string'
PUBLIC	??_C@_0P@NCJJACGH@LeaderheadType?$AA@		; `string'
PUBLIC	??_C@_0BK@JMDIAEBI@Civilization_DisableTechs?$AA@ ; `string'
PUBLIC	??_C@_0N@INKDAICK@Technologies?$AA@		; `string'
PUBLIC	??_C@_0BH@ECEPGAMO@Civilization_FreeTechs?$AA@	; `string'
PUBLIC	??_C@_08GHGFPPBE@TechType?$AA@			; `string'
PUBLIC	??_C@_0CB@PLAJIOAM@Civilization_FreeBuildingClasses@ ; `string'
PUBLIC	??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@	; `string'
PUBLIC	??_C@_0PG@JNFMFJAF@select?5UnitClasses?4ID?5as?5UnitCla@ ; `string'
PUBLIC	??_C@_0BK@LPNJHDLI@Civilizations?5?9?5FreeUnits?$AA@ ; `string'
PUBLIC	??_C@_0NI@GCGLCNPF@select?5UnitClasses?4ID?0?5coalesce?$CI@ ; `string'
PUBLIC	??_C@_0CA@EALBGJCG@Civilization_UnitClassOverrides?$AA@ ; `string'
PUBLIC	??A?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@1@I@Z ; std::vector<bool,std::allocator<bool> >::operator[]
PUBLIC	??_C@_0PM@OPCCBCCF@select?5BuildingClasses?4ID?0?5coale@ ; `string'
PUBLIC	??_C@_0CE@KBHNMJGN@Civilization_BuildingClassOverri@ ; `string'
PUBLIC	?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z ; std::vector<bool,std::allocator<bool> >::resize
PUBLIC	?clear@?$vector@_NV?$allocator@_N@std@@@std@@QAEXXZ ; std::vector<bool,std::allocator<bool> >::clear
PUBLIC	?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::reserve
PUBLIC	?push_back@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAEXABVCvString@@@Z ; std::vector<CvString,std::allocator<CvString> >::push_back
PUBLIC	??_C@_0EH@CKJDNNOL@select?5CityName?5from?5Civilizatio@ ; `string'
PUBLIC	??_C@_0BJ@ENMILPCB@Civilization?5?9?5CityNames?$AA@ ; `string'
PUBLIC	?erase@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@0@Z ; std::vector<CvString,std::allocator<CvString> >::erase
PUBLIC	??_C@_0FN@DBHLMGB@select?5PlaceFirst?5from?5Civilizat@ ; `string'
PUBLIC	??_C@_0BP@OHGGLNGG@Civilization_Start_Place_First?$AA@ ; `string'
PUBLIC	??_C@_0FG@DBDKCGJB@select?5StartAlongOcean?5from?5Civi@ ; `string'
PUBLIC	??_C@_0BP@NCIGGHOG@Civilization_Start_Along_Ocean?$AA@ ; `string'
PUBLIC	??_C@_0O@BDFFDEIK@SoundtrackTag?$AA@		; `string'
PUBLIC	??_C@_0P@OKNAPCKF@DawnOfManAudio?$AA@		; `string'
PUBLIC	??_C@_0P@OGHDKAPM@ArtStyleSuffix?$AA@		; `string'
PUBLIC	??_C@_0P@INDOPAAJ@ArtStylePrefix?$AA@		; `string'
PUBLIC	??_C@_0N@NJJJCDLH@ArtStyleType?$AA@		; `string'
PUBLIC	??_C@_0N@NLPPFOOH@ArtDefineTag?$AA@		; `string'
PUBLIC	??_C@_0BD@HCFAICKO@DefaultPlayerColor?$AA@	; `string'
PUBLIC	??_C@_09HIMNPMPM@Adjective?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_?Bind@Results@Database@@QAE_NHPBD_N@Z:PROC
EXTRN	__imp_?GetText@Results@Database@@QAEPBDH@Z:PROC
EXTRN	__imp_?Reset@Results@Database@@QAE_NXZ:PROC
EXTRN	__imp_?GetBool@Results@Database@@QAE_NH@Z:PROC
EXTRN	__imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z:PROC
;	COMDAT ??_C@_0EF@IBNKHPGJ@select?5SpyName?5from?5Civilization@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0EF@IBNKHPGJ@select?5SpyName?5from?5Civilization@ DB 'select SpyNam'
	DB	'e from Civilization_SpyNames where CivilizationType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BPICIEEA@Civilization?5?9?5SpyNames?$AA@
CONST	SEGMENT
??_C@_0BI@BPICIEEA@Civilization?5?9?5SpyNames?$AA@ DB 'Civilization - Spy'
	DB	'Names', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09IKMHLIEB@Religions?$AA@
CONST	SEGMENT
??_C@_09IKMHLIEB@Religions?$AA@ DB 'Religions', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HFABEELD@Civilization_Religions?$AA@
CONST	SEGMENT
??_C@_0BH@HFABEELD@Civilization_Religions?$AA@ DB 'Civilization_Religions'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HBOJHPGO@ReligionType?$AA@
CONST	SEGMENT
??_C@_0N@HBOJHPGO@ReligionType?$AA@ DB 'ReligionType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MNOEAIDO@Leaders?$AA@
CONST	SEGMENT
??_C@_07MNOEAIDO@Leaders?$AA@ DB 'Leaders', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FHEGFHEN@Civilization_Leaders?$AA@
CONST	SEGMENT
??_C@_0BF@FHEGFHEN@Civilization_Leaders?$AA@ DB 'Civilization_Leaders', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NCJJACGH@LeaderheadType?$AA@
CONST	SEGMENT
??_C@_0P@NCJJACGH@LeaderheadType?$AA@ DB 'LeaderheadType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JMDIAEBI@Civilization_DisableTechs?$AA@
CONST	SEGMENT
??_C@_0BK@JMDIAEBI@Civilization_DisableTechs?$AA@ DB 'Civilization_Disabl'
	DB	'eTechs', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@INKDAICK@Technologies?$AA@
CONST	SEGMENT
??_C@_0N@INKDAICK@Technologies?$AA@ DB 'Technologies', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ECEPGAMO@Civilization_FreeTechs?$AA@
CONST	SEGMENT
??_C@_0BH@ECEPGAMO@Civilization_FreeTechs?$AA@ DB 'Civilization_FreeTechs'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHGFPPBE@TechType?$AA@
CONST	SEGMENT
??_C@_08GHGFPPBE@TechType?$AA@ DB 'TechType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PLAJIOAM@Civilization_FreeBuildingClasses@
CONST	SEGMENT
??_C@_0CB@PLAJIOAM@Civilization_FreeBuildingClasses@ DB 'Civilization_Fre'
	DB	'eBuildingClasses', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@
CONST	SEGMENT
??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@ DB 'CivilizationType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0PG@JNFMFJAF@select?5UnitClasses?4ID?5as?5UnitCla@
CONST	SEGMENT
??_C@_0PG@JNFMFJAF@select?5UnitClasses?4ID?5as?5UnitCla@ DB 'select UnitC'
	DB	'lasses.ID as UnitClassID, UnitAIInfos.ID as UnitAITypeID, Cou'
	DB	'nt from Civilization_FreeUnits inner join UnitClasses on Unit'
	DB	'ClassType = UnitClasses.Type inner join UnitAIInfos on UnitAI'
	DB	'Type = UnitAIInfos.Type where CivilizationType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LPNJHDLI@Civilizations?5?9?5FreeUnits?$AA@
CONST	SEGMENT
??_C@_0BK@LPNJHDLI@Civilizations?5?9?5FreeUnits?$AA@ DB 'Civilizations - '
	DB	'FreeUnits', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0NI@GCGLCNPF@select?5UnitClasses?4ID?0?5coalesce?$CI@
CONST	SEGMENT
??_C@_0NI@GCGLCNPF@select?5UnitClasses?4ID?0?5coalesce?$CI@ DB 'select Un'
	DB	'itClasses.ID, coalesce(Units.ID, -1) from Civilization_UnitCl'
	DB	'assOverrides inner join UnitClasses on UnitClassType = UnitCl'
	DB	'asses.Type left outer join Units on UnitType = Units.Type whe'
	DB	're CivilizationType = ?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EALBGJCG@Civilization_UnitClassOverrides?$AA@
CONST	SEGMENT
??_C@_0CA@EALBGJCG@Civilization_UnitClassOverrides?$AA@ DB 'Civilization_'
	DB	'UnitClassOverrides', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0PM@OPCCBCCF@select?5BuildingClasses?4ID?0?5coale@
CONST	SEGMENT
??_C@_0PM@OPCCBCCF@select?5BuildingClasses?4ID?0?5coale@ DB 'select Build'
	DB	'ingClasses.ID, coalesce(Buildings.ID, -1) from Civilization_B'
	DB	'uildingClassOverrides inner join BuildingClasses on BuildingC'
	DB	'lassType = BuildingClasses.Type left outer join Buildings on '
	DB	'BuildingType = Buildings.Type where CivilizationType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KBHNMJGN@Civilization_BuildingClassOverri@
CONST	SEGMENT
??_C@_0CE@KBHNMJGN@Civilization_BuildingClassOverri@ DB 'Civilization_Bui'
	DB	'ldingClassOverrides', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@CKJDNNOL@select?5CityName?5from?5Civilizatio@
CONST	SEGMENT
??_C@_0EH@CKJDNNOL@select?5CityName?5from?5Civilizatio@ DB 'select CityNa'
	DB	'me from Civilization_CityNames where CivilizationType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ENMILPCB@Civilization?5?9?5CityNames?$AA@
CONST	SEGMENT
??_C@_0BJ@ENMILPCB@Civilization?5?9?5CityNames?$AA@ DB 'Civilization - Ci'
	DB	'tyNames', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@DBHLMGB@select?5PlaceFirst?5from?5Civilizat@
CONST	SEGMENT
??_C@_0FN@DBHLMGB@select?5PlaceFirst?5from?5Civilizat@ DB 'select PlaceFi'
	DB	'rst from Civilization_Start_Place_First_Along_Ocean where Civ'
	DB	'ilizationType = ?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OHGGLNGG@Civilization_Start_Place_First?$AA@
CONST	SEGMENT
??_C@_0BP@OHGGLNGG@Civilization_Start_Place_First?$AA@ DB 'Civilization_S'
	DB	'tart_Place_First', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@DBDKCGJB@select?5StartAlongOcean?5from?5Civi@
CONST	SEGMENT
??_C@_0FG@DBDKCGJB@select?5StartAlongOcean?5from?5Civi@ DB 'select StartA'
	DB	'longOcean from Civilization_Start_Along_Ocean where Civilizat'
	DB	'ionType = ?', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NCIGGHOG@Civilization_Start_Along_Ocean?$AA@
CONST	SEGMENT
??_C@_0BP@NCIGGHOG@Civilization_Start_Along_Ocean?$AA@ DB 'Civilization_S'
	DB	'tart_Along_Ocean', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BDFFDEIK@SoundtrackTag?$AA@
CONST	SEGMENT
??_C@_0O@BDFFDEIK@SoundtrackTag?$AA@ DB 'SoundtrackTag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OKNAPCKF@DawnOfManAudio?$AA@
CONST	SEGMENT
??_C@_0P@OKNAPCKF@DawnOfManAudio?$AA@ DB 'DawnOfManAudio', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OGHDKAPM@ArtStyleSuffix?$AA@
CONST	SEGMENT
??_C@_0P@OGHDKAPM@ArtStyleSuffix?$AA@ DB 'ArtStyleSuffix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@INDOPAAJ@ArtStylePrefix?$AA@
CONST	SEGMENT
??_C@_0P@INDOPAAJ@ArtStylePrefix?$AA@ DB 'ArtStylePrefix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJJJCDLH@ArtStyleType?$AA@
CONST	SEGMENT
??_C@_0N@NJJJCDLH@ArtStyleType?$AA@ DB 'ArtStyleType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLPPFOOH@ArtDefineTag?$AA@
CONST	SEGMENT
??_C@_0N@NLPPFOOH@ArtDefineTag?$AA@ DB 'ArtDefineTag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HCFAICKO@DefaultPlayerColor?$AA@
CONST	SEGMENT
??_C@_0BD@HCFAICKO@DefaultPlayerColor?$AA@ DB 'DefaultPlayerColor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIMNPMPM@Adjective?$AA@
CONST	SEGMENT
??_C@_09HIMNPMPM@Adjective?$AA@ DB 'Adjective', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$8
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv1014 = -1068						; size = 4
tv906 = -1064						; size = 4
tv309 = -1060						; size = 4
tv776 = -1056						; size = 4
tv762 = -1052						; size = 4
tv605 = -1048						; size = 4
_this$ = -1044						; size = 4
$T231361 = -984						; size = 4
$T231352 = -980						; size = 4
$T231164 = -920						; size = 4
$T231148 = -916						; size = 4
$T231339 = -912						; size = 4
$T231338 = -908						; size = 4
$T231337 = -904						; size = 4
$T231336 = -900						; size = 4
$T231335 = -896						; size = 4
$T231128 = -876						; size = 4
$T231112 = -872						; size = 4
$T231105 = -868						; size = 4
$T230895 = -644						; size = 4
$T230879 = -640						; size = 4
$T230872 = -636						; size = 4
$T230634 = -400						; size = 4
$T230625 = -396						; size = 4
$T230599 = -392						; size = 4
$T230583 = -388						; size = 4
$T230612 = -384						; size = 4
$T230611 = -380						; size = 4
$T230610 = -376						; size = 4
$T230609 = -372						; size = 4
$T230608 = -368						; size = 4
$T230564 = -364						; size = 4
$T230558 = -360						; size = 4
$T230543 = -356						; size = 28
$T230542 = -328						; size = 8
$T230541 = -320						; size = 8
$T230540 = -312						; size = 28
_pResults$219034 = -284					; size = 4
_strKey$219032 = -280					; size = 28
_iCount$219019 = -252					; size = 4
_iUnitAITypeID$219018 = -248				; size = 4
_iUnitClassID$219017 = -244				; size = 4
_pResults$219011 = -240					; size = 4
_strKey$219009 = -236					; size = 28
_idx$219006 = -208					; size = 4
_unitID$219007 = -204					; size = 4
_pResults$219000 = -200					; size = 4
_key$218998 = -196					; size = 28
_buildingID$218996 = -168				; size = 4
_idx$218995 = -164					; size = 4
_pResults$218989 = -160					; size = 4
_key$218987 = -156					; size = 28
_pResults$218980 = -128					; size = 4
_strKey$218978 = -124					; size = 28
_pResults$218972 = -96					; size = 4
_strKey$218970 = -92					; size = 28
_pResults$218964 = -64					; size = 4
_strKey$218962 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_szType$ = -28						; size = 4
_maxBuildingClasses$ = -24				; size = 4
_szTextVal$ = -20					; size = 4
_maxUnitClasses$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvCivilizationInfo::CacheResults, COMDAT
; _this$ = ecx

; 2261 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1056				; 00000420H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2262 : 	if(!CvCivilizationBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvCivilizationBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvCivilizationBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN22@CacheResul@12

; 2263 : 		return false;

	xor	al, al
	jmp	$LN23@CacheResul@12
$LN22@CacheResul@12:

; 2264 : 
; 2265 : 	const size_t maxUnitClasses = kUtility.MaxRows("UnitClasses");

	push	OFFSET ??_C@_0M@HLHJNCC@UnitClasses?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _maxUnitClasses$[ebp], eax

; 2266 : 	const size_t maxBuildingClasses = kUtility.MaxRows("BuildingClasses");

	push	OFFSET ??_C@_0BA@GLDILOEP@BuildingClasses?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _maxBuildingClasses$[ebp], eax

; 2267 : 
; 2268 : 	const char* szTextVal = NULL;	//! temporary val

	mov	DWORD PTR _szTextVal$[ebp], 0

; 2269 : 
; 2270 : 	//Basic Properties
; 2271 : 	szTextVal = kResults.GetText("Adjective");

	push	OFFSET ??_C@_09HIMNPMPM@Adjective?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 2272 : 	setAdjectiveKey(szTextVal);

	mov	eax, DWORD PTR _szTextVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAdjectiveKey@CvCivilizationInfo@@QAEXPBD@Z ; CvCivilizationInfo::setAdjectiveKey

; 2273 : 
; 2274 : 	//References
; 2275 : 	szTextVal = kResults.GetText("DefaultPlayerColor");

	push	OFFSET ??_C@_0BD@HCFAICKO@DefaultPlayerColor?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 2276 : 	m_iDefaultPlayerColor = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	ecx, DWORD PTR _szTextVal$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], eax

; 2277 : 
; 2278 : 	szTextVal = kResults.GetText("ArtDefineTag");

	push	OFFSET ??_C@_0N@NLPPFOOH@ArtDefineTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 2279 : 	setArtDefineTag(szTextVal);

	mov	eax, DWORD PTR _szTextVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setArtDefineTag@CvCivilizationInfo@@QAEXPBD@Z ; CvCivilizationInfo::setArtDefineTag

; 2280 : 
; 2281 : 	szTextVal = kResults.GetText("ArtStyleType");

	push	OFFSET ??_C@_0N@NJJJCDLH@ArtStyleType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 2282 : 	m_iArtStyleType = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	ecx, DWORD PTR _szTextVal$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+340], eax

; 2283 : 
; 2284 : 	szTextVal = kResults.GetText("ArtStylePrefix");

	push	OFFSET ??_C@_0P@INDOPAAJ@ArtStylePrefix?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 2285 : 	setArtStylePrefix(szTextVal);

	mov	eax, DWORD PTR _szTextVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setArtStylePrefix@CvCivilizationInfo@@QAEXPBD@Z ; CvCivilizationInfo::setArtStylePrefix

; 2286 : 
; 2287 : 	szTextVal = kResults.GetText("ArtStyleSuffix");

	push	OFFSET ??_C@_0P@OGHDKAPM@ArtStyleSuffix?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 2288 : 	setArtStyleSuffix(szTextVal);

	mov	ecx, DWORD PTR _szTextVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setArtStyleSuffix@CvCivilizationInfo@@QAEXPBD@Z ; CvCivilizationInfo::setArtStyleSuffix

; 2289 : 
; 2290 : 	szTextVal = kResults.GetText("DawnOfManAudio");

	push	OFFSET ??_C@_0P@OKNAPCKF@DawnOfManAudio?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 2291 : 	m_strDawnOfManAudio = szTextVal;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 488				; 000001e8H
	mov	DWORD PTR $T230558[ebp], edx
	cmp	DWORD PTR _szTextVal$[ebp], 0
	je	SHORT $LN35@CacheResul@12
	mov	eax, DWORD PTR _szTextVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230558[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN36@CacheResul@12
$LN35@CacheResul@12:
	mov	ecx, DWORD PTR $T230558[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN36@CacheResul@12:

; 2292 : 
; 2293 : 	szTextVal = kResults.GetText("SoundtrackTag");

	push	OFFSET ??_C@_0O@BDFFDEIK@SoundtrackTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 2294 : 	m_strSoundtrackKey = szTextVal;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	mov	DWORD PTR $T230564[ebp], ecx
	cmp	DWORD PTR _szTextVal$[ebp], 0
	je	SHORT $LN39@CacheResul@12
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T230564[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN42@CacheResul@12
$LN39@CacheResul@12:
	mov	ecx, DWORD PTR $T230564[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ

; 2295 : 
; 2296 : 	const char* szType = GetType();

$LN42@CacheResul@12:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szType$[ebp], eax

; 2297 : 
; 2298 : 	//coastal start
; 2299 : 	{
; 2300 : 		m_bCoastalCiv = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+580], 0

; 2301 : 
; 2302 : 		std::string strKey = "Civilization_Start_Along_Ocean";

	push	OFFSET ??_C@_0BP@NCIGGHOG@Civilization_Start_Along_Ocean?$AA@
	lea	ecx, DWORD PTR _strKey$218962[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2303 : 		Database::Results* pResults = kUtility.GetResults(strKey);

	lea	ecx, DWORD PTR _strKey$218962[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$218964[ebp], eax

; 2304 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$218964[ebp], 0
	jne	SHORT $LN21@CacheResul@12

; 2305 : 		{
; 2306 : 			pResults = kUtility.PrepareResults(strKey, "select StartAlongOcean from Civilization_Start_Along_Ocean where CivilizationType = ?");

	push	OFFSET ??_C@_0FG@DBDKCGJB@select?5StartAlongOcean?5from?5Civi@
	lea	edx, DWORD PTR _strKey$218962[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$218964[ebp], eax
$LN21@CacheResul@12:

; 2307 : 		}
; 2308 : 
; 2309 : 		pResults->Bind(1, szType, -1, false);

	push	0
	push	-1
	mov	eax, DWORD PTR _szType$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pResults$218964[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z
$LN20@CacheResul@12:

; 2310 : 
; 2311 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$218964[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN19@CacheResul@12

; 2312 : 		{
; 2313 : 			m_bCoastalCiv = pResults->GetBool(0);

	push	0
	mov	ecx, DWORD PTR _pResults$218964[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NH@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+580], al

; 2314 : 		}

	jmp	SHORT $LN20@CacheResul@12
$LN19@CacheResul@12:

; 2315 : 
; 2316 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$218964[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 2317 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$218962[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2318 : 
; 2319 : 	//place first
; 2320 : 	{
; 2321 : 		m_bPlaceFirst = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+581], 0

; 2322 : 
; 2323 : 		std::string strKey = "Civilization_Start_Place_First";

	push	OFFSET ??_C@_0BP@OHGGLNGG@Civilization_Start_Place_First?$AA@
	lea	ecx, DWORD PTR _strKey$218970[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 2324 : 		Database::Results* pResults = kUtility.GetResults(strKey);

	lea	ecx, DWORD PTR _strKey$218970[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$218972[ebp], eax

; 2325 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$218972[ebp], 0
	jne	SHORT $LN18@CacheResul@12

; 2326 : 		{
; 2327 : 			pResults = kUtility.PrepareResults(strKey, "select PlaceFirst from Civilization_Start_Place_First_Along_Ocean where CivilizationType = ?");

	push	OFFSET ??_C@_0FN@DBHLMGB@select?5PlaceFirst?5from?5Civilizat@
	lea	edx, DWORD PTR _strKey$218970[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$218972[ebp], eax
$LN18@CacheResul@12:

; 2328 : 		}
; 2329 : 
; 2330 : 		pResults->Bind(1, szType, -1, false);

	push	0
	push	-1
	mov	eax, DWORD PTR _szType$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pResults$218972[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z
$LN17@CacheResul@12:

; 2331 : 
; 2332 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$218972[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@CacheResul@12

; 2333 : 		{
; 2334 : 			m_bPlaceFirst = pResults->GetBool(0);

	push	0
	mov	ecx, DWORD PTR _pResults$218972[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NH@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+581], al

; 2335 : 		}

	jmp	SHORT $LN17@CacheResul@12
$LN16@CacheResul@12:

; 2336 : 
; 2337 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$218972[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 2338 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$218970[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2339 : 
; 2340 : 	//Arrays
; 2341 : 
; 2342 : 	//City Names
; 2343 : 	{
; 2344 : 		m_vCityNames.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 584				; 00000248H
	mov	DWORD PTR $T230625[ebp], eax
	mov	ecx, DWORD PTR $T230625[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T230583[ebp], edx
	mov	eax, DWORD PTR $T230583[ebp]
	mov	DWORD PTR $T230609[ebp], eax
	mov	ecx, DWORD PTR $T230609[ebp]
	mov	DWORD PTR $T230608[ebp], ecx
	mov	edx, DWORD PTR $T230625[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T230599[ebp], eax
	mov	ecx, DWORD PTR $T230599[ebp]
	mov	DWORD PTR $T230611[ebp], ecx
	mov	edx, DWORD PTR $T230611[ebp]
	mov	DWORD PTR $T230610[ebp], edx
	mov	eax, DWORD PTR $T230608[ebp]
	push	eax
	mov	ecx, DWORD PTR $T230610[ebp]
	push	ecx
	lea	edx, DWORD PTR $T230612[ebp]
	push	edx
	mov	ecx, DWORD PTR $T230625[ebp]
	call	?erase@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@0@Z ; std::vector<CvString,std::allocator<CvString> >::erase

; 2345 : 
; 2346 : 		std::string strKey = "Civilization - CityNames";

	push	OFFSET ??_C@_0BJ@ENMILPCB@Civilization?5?9?5CityNames?$AA@
	lea	ecx, DWORD PTR _strKey$218978[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 2347 : 		Database::Results* pResults = kUtility.GetResults(strKey);

	lea	eax, DWORD PTR _strKey$218978[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$218980[ebp], eax

; 2348 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$218980[ebp], 0
	jne	SHORT $LN15@CacheResul@12

; 2349 : 		{
; 2350 : 			pResults = kUtility.PrepareResults(strKey, "select CityName from Civilization_CityNames where CivilizationType = ?");

	push	OFFSET ??_C@_0EH@CKJDNNOL@select?5CityName?5from?5Civilizatio@
	lea	ecx, DWORD PTR _strKey$218978[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$218980[ebp], eax
$LN15@CacheResul@12:

; 2351 : 		}
; 2352 : 
; 2353 : 		pResults->Bind(1, szType, -1, false);

	push	0
	push	-1
	mov	edx, DWORD PTR _szType$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pResults$218980[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z
$LN14@CacheResul@12:

; 2354 : 
; 2355 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$218980[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@CacheResul@12

; 2356 : 		{
; 2357 : 			m_vCityNames.push_back(pResults->GetText(0));

	push	0
	mov	ecx, DWORD PTR _pResults$218980[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	mov	DWORD PTR $T230634[ebp], eax
	cmp	DWORD PTR $T230634[ebp], 0
	je	SHORT $LN60@CacheResul@12
	mov	ecx, DWORD PTR $T230634[ebp]
	mov	DWORD PTR tv605[ebp], ecx
	jmp	SHORT $LN61@CacheResul@12
$LN60@CacheResul@12:
	mov	DWORD PTR tv605[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN61@CacheResul@12:
	mov	edx, DWORD PTR tv605[ebp]
	push	edx
	lea	ecx, DWORD PTR $T230540[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	eax, DWORD PTR $T230540[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 584				; 00000248H
	call	?push_back@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAEXABVCvString@@@Z ; std::vector<CvString,std::allocator<CvString> >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T230540[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2358 : 		}

	jmp	$LN14@CacheResul@12
$LN13@CacheResul@12:

; 2359 : 
; 2360 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$218980[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 2361 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$218978[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2362 : 
; 2363 : 	//Building Types
; 2364 : 	{
; 2365 : 		// call the function that sets the default civilization buildings
; 2366 : 		InitBuildingDefaults(m_piCivilizationBuildings, kUtility);

	mov	ecx, DWORD PTR _kUtility$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 544				; 00000220H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitBuildingDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z ; CvCivilizationInfo::InitBuildingDefaults

; 2367 : 
; 2368 : 		m_CivilizationBuildingOverridden.reserve(maxBuildingClasses);

	mov	eax, DWORD PTR _maxBuildingClasses$[ebp]
	add	eax, 31					; 0000001fH
	shr	eax, 5
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 620				; 0000026cH
	call	?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::reserve

; 2369 : 		m_CivilizationBuildingOverridden.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 616				; 00000268H
	call	?clear@?$vector@_NV?$allocator@_N@std@@@std@@QAEXXZ ; std::vector<bool,std::allocator<bool> >::clear

; 2370 : 		m_CivilizationBuildingOverridden.resize(maxBuildingClasses, false);

	push	0
	mov	ecx, DWORD PTR _maxBuildingClasses$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 616				; 00000268H
	call	?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z ; std::vector<bool,std::allocator<bool> >::resize

; 2371 : 
; 2372 : 		std::string key = "Civilization_BuildingClassOverrides";

	push	OFFSET ??_C@_0CE@KBHNMJGN@Civilization_BuildingClassOverri@
	lea	ecx, DWORD PTR _key$218987[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 4

; 2373 : 		Database::Results* pResults = kUtility.GetResults(key);

	lea	edx, DWORD PTR _key$218987[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$218989[ebp], eax

; 2374 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$218989[ebp], 0
	jne	SHORT $LN12@CacheResul@12

; 2375 : 		{
; 2376 : 			pResults = kUtility.PrepareResults(key, "select BuildingClasses.ID, coalesce(Buildings.ID, -1) from Civilization_BuildingClassOverrides inner join BuildingClasses on BuildingClassType = BuildingClasses.Type left outer join Buildings on BuildingType = Buildings.Type where CivilizationType = ?");

	push	OFFSET ??_C@_0PM@OPCCBCCF@select?5BuildingClasses?4ID?0?5coale@
	lea	eax, DWORD PTR _key$218987[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$218989[ebp], eax
$LN12@CacheResul@12:

; 2377 : 
; 2378 : 		}
; 2379 : 
; 2380 : 		pResults->Bind(1, szType);

	push	1
	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pResults$218989[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN11@CacheResul@12:

; 2381 : 
; 2382 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$218989[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	$LN10@CacheResul@12

; 2383 : 		{
; 2384 : 			const int idx = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$218989[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _idx$218995[ebp], eax

; 2385 : 			const int buildingID = pResults->GetInt(1);

	push	1
	mov	ecx, DWORD PTR _pResults$218989[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _buildingID$218996[ebp], eax

; 2386 : 
; 2387 : 			m_piCivilizationBuildings[idx] = buildingID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+544]
	mov	edx, DWORD PTR _idx$218995[ebp]
	mov	eax, DWORD PTR _buildingID$218996[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 2388 : 			m_CivilizationBuildingOverridden[idx] = true;

	mov	ecx, DWORD PTR _idx$218995[ebp]
	push	ecx
	lea	edx, DWORD PTR $T230541[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 616				; 00000268H
	call	??A?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@1@I@Z ; std::vector<bool,std::allocator<bool> >::operator[]
	mov	DWORD PTR $T230895[ebp], eax
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN156@CacheResul@12
	mov	ecx, DWORD PTR $T230872[ebp]
	mov	DWORD PTR tv762[ebp], ecx
	mov	edx, DWORD PTR $T230895[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv762[ebp], eax
	mov	ecx, DWORD PTR $T230895[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+4]
	shl	edx, cl
	mov	eax, DWORD PTR tv762[ebp]
	or	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv762[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN157@CacheResul@12
$LN156@CacheResul@12:
	mov	edx, DWORD PTR $T230879[ebp]
	mov	DWORD PTR tv776[ebp], edx
	mov	eax, DWORD PTR $T230895[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv776[ebp], ecx
	mov	edx, DWORD PTR $T230895[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+4]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR tv776[ebp]
	and	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv776[ebp]
	mov	DWORD PTR [edx], eax
$LN157@CacheResul@12:

; 2389 : 		}

	jmp	$LN11@CacheResul@12
$LN10@CacheResul@12:

; 2390 : 
; 2391 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$218989[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 2392 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _key$218987[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2393 : 
; 2394 : 	//Unit Types
; 2395 : 	{
; 2396 : 		// call the function that sets the default civilization units
; 2397 : 		InitUnitDefaults(m_piCivilizationUnits, kUtility);

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 548				; 00000224H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitUnitDefaults@CvCivilizationInfo@@IAEXAAPAHAAVCvDatabaseUtility@@@Z ; CvCivilizationInfo::InitUnitDefaults

; 2398 : 
; 2399 : 		m_CivilizationUnitOverridden.reserve(maxUnitClasses);

	mov	edx, DWORD PTR _maxUnitClasses$[ebp]
	add	edx, 31					; 0000001fH
	shr	edx, 5
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 640				; 00000280H
	call	?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::reserve

; 2400 : 		m_CivilizationUnitOverridden.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 636				; 0000027cH
	call	?clear@?$vector@_NV?$allocator@_N@std@@@std@@QAEXXZ ; std::vector<bool,std::allocator<bool> >::clear

; 2401 : 		m_CivilizationUnitOverridden.resize(maxUnitClasses,false);

	push	0
	mov	eax, DWORD PTR _maxUnitClasses$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 636				; 0000027cH
	call	?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z ; std::vector<bool,std::allocator<bool> >::resize

; 2402 : 
; 2403 : 		std::string key = "Civilization_UnitClassOverrides";

	push	OFFSET ??_C@_0CA@EALBGJCG@Civilization_UnitClassOverrides?$AA@
	lea	ecx, DWORD PTR _key$218998[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 5

; 2404 : 		Database::Results* pResults = kUtility.GetResults(key);

	lea	ecx, DWORD PTR _key$218998[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$219000[ebp], eax

; 2405 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$219000[ebp], 0
	jne	SHORT $LN9@CacheResul@12

; 2406 : 		{
; 2407 : 			pResults = kUtility.PrepareResults(key, "select UnitClasses.ID, coalesce(Units.ID, -1) from Civilization_UnitClassOverrides inner join UnitClasses on UnitClassType = UnitClasses.Type left outer join Units on UnitType = Units.Type where CivilizationType = ?");

	push	OFFSET ??_C@_0NI@GCGLCNPF@select?5UnitClasses?4ID?0?5coalesce?$CI@
	lea	edx, DWORD PTR _key$218998[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$219000[ebp], eax
$LN9@CacheResul@12:

; 2408 : 		}
; 2409 : 
; 2410 : 		pResults->Bind(1, szType);

	push	1
	mov	eax, DWORD PTR _szType$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pResults$219000[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN8@CacheResul@12:

; 2411 : 
; 2412 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$219000[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	$LN7@CacheResul@12

; 2413 : 		{
; 2414 : 			const int idx = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$219000[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _idx$219006[ebp], eax

; 2415 : 			const int unitID = pResults->GetInt(1);

	push	1
	mov	ecx, DWORD PTR _pResults$219000[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _unitID$219007[ebp], eax

; 2416 : 
; 2417 : 			m_piCivilizationUnits[idx] = unitID;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+548]
	mov	ecx, DWORD PTR _idx$219006[ebp]
	mov	edx, DWORD PTR _unitID$219007[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 2418 : 			m_CivilizationUnitOverridden[idx] = true;

	mov	eax, DWORD PTR _idx$219006[ebp]
	push	eax
	lea	ecx, DWORD PTR $T230542[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 636				; 0000027cH
	call	??A?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@1@I@Z ; std::vector<bool,std::allocator<bool> >::operator[]
	mov	DWORD PTR $T231128[ebp], eax
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN244@CacheResul@12
	mov	eax, DWORD PTR $T231105[ebp]
	mov	DWORD PTR tv309[ebp], eax
	mov	ecx, DWORD PTR $T231128[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv309[ebp], edx
	mov	eax, DWORD PTR $T231128[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+4]
	shl	edx, cl
	mov	eax, DWORD PTR tv309[ebp]
	or	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv309[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN245@CacheResul@12
$LN244@CacheResul@12:
	mov	edx, DWORD PTR $T231112[ebp]
	mov	DWORD PTR tv906[ebp], edx
	mov	eax, DWORD PTR $T231128[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv906[ebp], ecx
	mov	edx, DWORD PTR $T231128[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+4]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR tv906[ebp]
	and	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv906[ebp]
	mov	DWORD PTR [edx], eax
$LN245@CacheResul@12:

; 2419 : 		}

	jmp	$LN8@CacheResul@12
$LN7@CacheResul@12:

; 2420 : 
; 2421 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$219000[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 2422 : 
; 2423 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _key$218998[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2424 : 
; 2425 : 	//FreeUnits
; 2426 : 	{
; 2427 : 		kUtility.InitializeArray(m_piCivilizationFreeUnitsClass, maxUnitClasses, -1);

	push	-1
	mov	eax, DWORD PTR _maxUnitClasses$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 552				; 00000228H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 2428 : 		kUtility.InitializeArray(m_piCivilizationFreeUnitsDefaultUnitAI, maxUnitClasses, -1);

	push	-1
	mov	edx, DWORD PTR _maxUnitClasses$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 556				; 0000022cH
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 2429 : 
; 2430 : 		std::string strKey = "Civilizations - FreeUnits";

	push	OFFSET ??_C@_0BK@LPNJHDLI@Civilizations?5?9?5FreeUnits?$AA@
	lea	ecx, DWORD PTR _strKey$219009[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 6

; 2431 : 		Database::Results* pResults = kUtility.GetResults(strKey);

	lea	ecx, DWORD PTR _strKey$219009[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$219011[ebp], eax

; 2432 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$219011[ebp], 0
	jne	SHORT $LN6@CacheResul@12

; 2433 : 		{
; 2434 : 			pResults = kUtility.PrepareResults(strKey, "select UnitClasses.ID as UnitClassID, UnitAIInfos.ID as UnitAITypeID, Count from Civilization_FreeUnits inner join UnitClasses on UnitClassType = UnitClasses.Type inner join UnitAIInfos on UnitAIType = UnitAIInfos.Type where CivilizationType = ?");

	push	OFFSET ??_C@_0PG@JNFMFJAF@select?5UnitClasses?4ID?5as?5UnitCla@
	lea	edx, DWORD PTR _strKey$219009[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$219011[ebp], eax
$LN6@CacheResul@12:

; 2435 : 		}
; 2436 : 
; 2437 : 		pResults->Bind(1, szType, -1, false);

	push	0
	push	-1
	mov	eax, DWORD PTR _szType$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pResults$219011[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z
$LN5@CacheResul@12:

; 2438 : 
; 2439 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$219011[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@CacheResul@12

; 2440 : 		{
; 2441 : 			const int iUnitClassID = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$219011[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iUnitClassID$219017[ebp], eax

; 2442 : 			const int iUnitAITypeID = pResults->GetInt(1);

	push	1
	mov	ecx, DWORD PTR _pResults$219011[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iUnitAITypeID$219018[ebp], eax

; 2443 : 			const int iCount = pResults->GetInt(2);

	push	2
	mov	ecx, DWORD PTR _pResults$219011[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iCount$219019[ebp], eax

; 2444 : 
; 2445 : 			m_piCivilizationFreeUnitsClass[iUnitClassID] = iCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+552]
	mov	ecx, DWORD PTR _iUnitClassID$219017[ebp]
	mov	edx, DWORD PTR _iCount$219019[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 2446 : 			m_piCivilizationFreeUnitsDefaultUnitAI[iUnitClassID] = iUnitAITypeID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+556]
	mov	edx, DWORD PTR _iUnitClassID$219017[ebp]
	mov	eax, DWORD PTR _iUnitAITypeID$219018[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 2447 : 		}

	jmp	$LN5@CacheResul@12
$LN4@CacheResul@12:

; 2448 : 
; 2449 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$219011[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 2450 : 
; 2451 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$219009[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2452 : 
; 2453 : 	kUtility.PopulateArrayByExistence(m_pbCivilizationFreeBuildingClass,
; 2454 : 	                                  "BuildingClasses", "Civilization_FreeBuildingClasses",
; 2455 : 	                                  "BuildingClassType", "CivilizationType", szType);

	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@
	push	OFFSET ??_C@_0BC@OELPCAJJ@BuildingClassType?$AA@
	push	OFFSET ??_C@_0CB@PLAJIOAM@Civilization_FreeBuildingClasses@
	push	OFFSET ??_C@_0BA@GLDILOEP@BuildingClasses?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 564				; 00000234H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 2456 : 
; 2457 : 
; 2458 : 	kUtility.PopulateArrayByExistence(m_pbCivilizationFreeTechs, "Technologies",
; 2459 : 	                                  "Civilization_FreeTechs", "TechType",
; 2460 : 	                                  "CivilizationType", szType);

	mov	eax, DWORD PTR _szType$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@
	push	OFFSET ??_C@_08GHGFPPBE@TechType?$AA@
	push	OFFSET ??_C@_0BH@ECEPGAMO@Civilization_FreeTechs?$AA@
	push	OFFSET ??_C@_0N@INKDAICK@Technologies?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 2461 : 
; 2462 : 
; 2463 : 	kUtility.PopulateArrayByExistence(m_pbCivilizationDisableTechs, "Technologies",
; 2464 : 	                                  "Civilization_DisableTechs", "TechType",
; 2465 : 	                                  "CivilizationType", szType);

	mov	edx, DWORD PTR _szType$[ebp]
	push	edx
	push	OFFSET ??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@
	push	OFFSET ??_C@_08GHGFPPBE@TechType?$AA@
	push	OFFSET ??_C@_0BK@JMDIAEBI@Civilization_DisableTechs?$AA@
	push	OFFSET ??_C@_0N@INKDAICK@Technologies?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 572				; 0000023cH
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 2466 : 
; 2467 : 
; 2468 : 	kUtility.PopulateArrayByExistence(m_pbLeaders, "Leaders", "Civilization_Leaders",
; 2469 : 	                                  "LeaderheadType", "CivilizationType", szType);

	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@
	push	OFFSET ??_C@_0P@NCJJACGH@LeaderheadType?$AA@
	push	OFFSET ??_C@_0BF@FHEGFHEN@Civilization_Leaders?$AA@
	push	OFFSET ??_C@_07MNOEAIDO@Leaders?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 560				; 00000230H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 2470 : 
; 2471 : 	kUtility.PopulateArrayByExistence(m_pbReligions, "Religions", "Civilization_Religions",
; 2472 : 	                                  "ReligionType", "CivilizationType", szType);

	mov	eax, DWORD PTR _szType$[ebp]
	push	eax
	push	OFFSET ??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@
	push	OFFSET ??_C@_0N@HBOJHPGO@ReligionType?$AA@
	push	OFFSET ??_C@_0BH@HFABEELD@Civilization_Religions?$AA@
	push	OFFSET ??_C@_09IKMHLIEB@Religions?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 576				; 00000240H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 2473 : 
; 2474 : 	//Spy Names
; 2475 : 	{
; 2476 : 		m_vSpyNames.clear();

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 600				; 00000258H
	mov	DWORD PTR $T231352[ebp], edx
	mov	eax, DWORD PTR $T231352[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T231148[ebp], ecx
	mov	edx, DWORD PTR $T231148[ebp]
	mov	DWORD PTR $T231336[ebp], edx
	mov	eax, DWORD PTR $T231336[ebp]
	mov	DWORD PTR $T231335[ebp], eax
	mov	ecx, DWORD PTR $T231352[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T231164[ebp], edx
	mov	eax, DWORD PTR $T231164[ebp]
	mov	DWORD PTR $T231338[ebp], eax
	mov	ecx, DWORD PTR $T231338[ebp]
	mov	DWORD PTR $T231337[ebp], ecx
	mov	edx, DWORD PTR $T231335[ebp]
	push	edx
	mov	eax, DWORD PTR $T231337[ebp]
	push	eax
	lea	ecx, DWORD PTR $T231339[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T231352[ebp]
	call	?erase@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@0@Z ; std::vector<CvString,std::allocator<CvString> >::erase

; 2477 : 
; 2478 : 		std::string strKey = "Civilization - SpyNames";

	push	OFFSET ??_C@_0BI@BPICIEEA@Civilization?5?9?5SpyNames?$AA@
	lea	ecx, DWORD PTR _strKey$219032[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 7

; 2479 : 		Database::Results* pResults = kUtility.GetResults(strKey);

	lea	edx, DWORD PTR _strKey$219032[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$219034[ebp], eax

; 2480 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$219034[ebp], 0
	jne	SHORT $LN3@CacheResul@12

; 2481 : 		{
; 2482 : 			pResults = kUtility.PrepareResults(strKey, "select SpyName from Civilization_SpyNames where CivilizationType = ?");

	push	OFFSET ??_C@_0EF@IBNKHPGJ@select?5SpyName?5from?5Civilization@
	lea	eax, DWORD PTR _strKey$219032[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$219034[ebp], eax
$LN3@CacheResul@12:

; 2483 : 		}
; 2484 : 
; 2485 : 		pResults->Bind(1, szType, -1, false);

	push	0
	push	-1
	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pResults$219034[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z
$LN2@CacheResul@12:

; 2486 : 
; 2487 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$219034[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@CacheResul@12

; 2488 : 		{
; 2489 : 			m_vSpyNames.push_back(pResults->GetText(0));

	push	0
	mov	ecx, DWORD PTR _pResults$219034[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	mov	DWORD PTR $T231361[ebp], eax
	cmp	DWORD PTR $T231361[ebp], 0
	je	SHORT $LN331@CacheResul@12
	mov	eax, DWORD PTR $T231361[ebp]
	mov	DWORD PTR tv1014[ebp], eax
	jmp	SHORT $LN332@CacheResul@12
$LN331@CacheResul@12:
	mov	DWORD PTR tv1014[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN332@CacheResul@12:
	mov	ecx, DWORD PTR tv1014[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T230543[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	edx, DWORD PTR $T230543[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 600				; 00000258H
	call	?push_back@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAEXABVCvString@@@Z ; std::vector<CvString,std::allocator<CvString> >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T230543[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2490 : 		}

	jmp	$LN2@CacheResul@12
$LN1@CacheResul@12:

; 2491 : 
; 2492 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$219034[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 2493 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$219032[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2494 : 
; 2495 : 	return true;

	mov	al, 1
$LN23@CacheResul@12:

; 2496 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _strKey$218962[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR _strKey$218970[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$2:
	lea	ecx, DWORD PTR _strKey$218978[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$3:
	lea	ecx, DWORD PTR $T230540[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$4:
	lea	ecx, DWORD PTR _key$218987[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$5:
	lea	ecx, DWORD PTR _key$218998[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$6:
	lea	ecx, DWORD PTR _strKey$219009[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$7:
	lea	ecx, DWORD PTR _strKey$219032[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$8:
	lea	ecx, DWORD PTR $T230543[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1060]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvCivilizationInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvCivilizationInfo::CacheResults
PUBLIC	??_7CvVictoryInfo@@6B@				; CvVictoryInfo::`vftable'
PUBLIC	??0CvVictoryInfo@@QAE@XZ			; CvVictoryInfo::CvVictoryInfo
PUBLIC	?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvVictoryInfo::CacheResults
EXTRN	??_ECvVictoryInfo@@UAEPAXI@Z:PROC		; CvVictoryInfo::`vector deleting destructor'
;	COMDAT ??_7CvVictoryInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvVictoryInfo@@6B@ DD FLAT:?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvVictoryInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvVictoryInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvVictoryInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvVictoryInfo@@QAE@XZ$0
__ehfuncinfo$??0CvVictoryInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvVictoryInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvVictoryInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T231496 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvVictoryInfo@@QAE@XZ PROC				; CvVictoryInfo::CvVictoryInfo, COMDAT
; _this$ = ecx

; 2520 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvVictoryInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvVictoryInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+289], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+290], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+291], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+293], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+294], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+295], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 300				; 0000012cH
	mov	DWORD PTR $T231496[ebp], edx
	mov	ecx, DWORD PTR $T231496[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 0

; 2521 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvVictoryInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??0CvVictoryInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvVictoryInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvVictoryInfo@@QAE@XZ ENDP				; CvVictoryInfo::CvVictoryInfo
PUBLIC	??1CvVictoryInfo@@UAE@XZ			; CvVictoryInfo::~CvVictoryInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvVictoryInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvVictoryInfo@@UAEPAXI@Z PROC			; CvVictoryInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvVictoryInfo@@UAE@XZ		; CvVictoryInfo::~CvVictoryInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvVictoryInfo@@UAEPAXI@Z ENDP			; CvVictoryInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvVictoryInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvVictoryInfo@@UAE@XZ$0
__ehfuncinfo$??1CvVictoryInfo@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvVictoryInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvVictoryInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T231519 = -24						; size = 4
$T231514 = -20						; size = 4
$T231512 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvVictoryInfo@@UAE@XZ PROC				; CvVictoryInfo::~CvVictoryInfo, COMDAT
; _this$ = ecx

; 2524 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvVictoryInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvVictoryInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2525 : 	SAFE_DELETE_ARRAY(m_piVictoryPointAwards);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 328				; 00000148H
	mov	DWORD PTR $T231514[ebp], ecx
	mov	edx, DWORD PTR $T231514[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T231512[ebp], eax
	mov	ecx, DWORD PTR $T231512[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T231514[ebp]
	mov	DWORD PTR [edx], 0

; 2526 : }

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 300				; 0000012cH
	mov	DWORD PTR $T231519[ebp], eax
	mov	ecx, DWORD PTR $T231519[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvVictoryInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??1CvVictoryInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvVictoryInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvVictoryInfo@@UAE@XZ ENDP				; CvVictoryInfo::~CvVictoryInfo
PUBLIC	?getPopulationPercentLead@CvVictoryInfo@@QBEHXZ	; CvVictoryInfo::getPopulationPercentLead
; Function compile flags: /Odtp
;	COMDAT ?getPopulationPercentLead@CvVictoryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPopulationPercentLead@CvVictoryInfo@@QBEHXZ PROC	; CvVictoryInfo::getPopulationPercentLead, COMDAT
; _this$ = ecx

; 2529 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2530 : 	return m_iPopulationPercentLead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 2531 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPopulationPercentLead@CvVictoryInfo@@QBEHXZ ENDP	; CvVictoryInfo::getPopulationPercentLead
_TEXT	ENDS
PUBLIC	?getLandPercent@CvVictoryInfo@@QBEHXZ		; CvVictoryInfo::getLandPercent
; Function compile flags: /Odtp
;	COMDAT ?getLandPercent@CvVictoryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLandPercent@CvVictoryInfo@@QBEHXZ PROC		; CvVictoryInfo::getLandPercent, COMDAT
; _this$ = ecx

; 2534 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2535 : 	return m_iLandPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 2536 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLandPercent@CvVictoryInfo@@QBEHXZ ENDP		; CvVictoryInfo::getLandPercent
_TEXT	ENDS
PUBLIC	?getMinLandPercent@CvVictoryInfo@@QBEHXZ	; CvVictoryInfo::getMinLandPercent
; Function compile flags: /Odtp
;	COMDAT ?getMinLandPercent@CvVictoryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinLandPercent@CvVictoryInfo@@QBEHXZ PROC		; CvVictoryInfo::getMinLandPercent, COMDAT
; _this$ = ecx

; 2539 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2540 : 	return m_iMinLandPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 2541 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinLandPercent@CvVictoryInfo@@QBEHXZ ENDP		; CvVictoryInfo::getMinLandPercent
_TEXT	ENDS
PUBLIC	?getCityCulture@CvVictoryInfo@@QBEHXZ		; CvVictoryInfo::getCityCulture
; Function compile flags: /Odtp
;	COMDAT ?getCityCulture@CvVictoryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCityCulture@CvVictoryInfo@@QBEHXZ PROC		; CvVictoryInfo::getCityCulture, COMDAT
; _this$ = ecx

; 2544 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2545 : 	return m_iCityCulture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 2546 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCityCulture@CvVictoryInfo@@QBEHXZ ENDP		; CvVictoryInfo::getCityCulture
_TEXT	ENDS
PUBLIC	?getNumCultureCities@CvVictoryInfo@@QBEHXZ	; CvVictoryInfo::getNumCultureCities
; Function compile flags: /Odtp
;	COMDAT ?getNumCultureCities@CvVictoryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumCultureCities@CvVictoryInfo@@QBEHXZ PROC		; CvVictoryInfo::getNumCultureCities, COMDAT
; _this$ = ecx

; 2549 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2550 : 	return m_iNumCultureCities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 2551 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumCultureCities@CvVictoryInfo@@QBEHXZ ENDP		; CvVictoryInfo::getNumCultureCities
_TEXT	ENDS
PUBLIC	?getTotalCultureRatio@CvVictoryInfo@@QBEHXZ	; CvVictoryInfo::getTotalCultureRatio
; Function compile flags: /Odtp
;	COMDAT ?getTotalCultureRatio@CvVictoryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTotalCultureRatio@CvVictoryInfo@@QBEHXZ PROC	; CvVictoryInfo::getTotalCultureRatio, COMDAT
; _this$ = ecx

; 2554 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2555 : 	return m_iTotalCultureRatio;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 2556 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTotalCultureRatio@CvVictoryInfo@@QBEHXZ ENDP	; CvVictoryInfo::getTotalCultureRatio
_TEXT	ENDS
PUBLIC	?getVictoryDelayTurns@CvVictoryInfo@@QBEHXZ	; CvVictoryInfo::getVictoryDelayTurns
; Function compile flags: /Odtp
;	COMDAT ?getVictoryDelayTurns@CvVictoryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVictoryDelayTurns@CvVictoryInfo@@QBEHXZ PROC	; CvVictoryInfo::getVictoryDelayTurns, COMDAT
; _this$ = ecx

; 2559 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2560 : 	return m_iVictoryDelayTurns;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 2561 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVictoryDelayTurns@CvVictoryInfo@@QBEHXZ ENDP	; CvVictoryInfo::getVictoryDelayTurns
_TEXT	ENDS
PUBLIC	?IsWinsGame@CvVictoryInfo@@QBE_NXZ		; CvVictoryInfo::IsWinsGame
; Function compile flags: /Odtp
;	COMDAT ?IsWinsGame@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWinsGame@CvVictoryInfo@@QBE_NXZ PROC			; CvVictoryInfo::IsWinsGame, COMDAT
; _this$ = ecx

; 2564 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2565 : 	return m_bWinsGame;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+288]

; 2566 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsWinsGame@CvVictoryInfo@@QBE_NXZ ENDP			; CvVictoryInfo::IsWinsGame
_TEXT	ENDS
PUBLIC	?isTargetScore@CvVictoryInfo@@QBE_NXZ		; CvVictoryInfo::isTargetScore
; Function compile flags: /Odtp
;	COMDAT ?isTargetScore@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isTargetScore@CvVictoryInfo@@QBE_NXZ PROC		; CvVictoryInfo::isTargetScore, COMDAT
; _this$ = ecx

; 2569 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2570 : 	return m_bTargetScore;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+289]

; 2571 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isTargetScore@CvVictoryInfo@@QBE_NXZ ENDP		; CvVictoryInfo::isTargetScore
_TEXT	ENDS
PUBLIC	?isEndScore@CvVictoryInfo@@QBE_NXZ		; CvVictoryInfo::isEndScore
; Function compile flags: /Odtp
;	COMDAT ?isEndScore@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isEndScore@CvVictoryInfo@@QBE_NXZ PROC			; CvVictoryInfo::isEndScore, COMDAT
; _this$ = ecx

; 2574 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2575 : 	return m_bEndScore;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+290]

; 2576 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isEndScore@CvVictoryInfo@@QBE_NXZ ENDP			; CvVictoryInfo::isEndScore
_TEXT	ENDS
PUBLIC	?isConquest@CvVictoryInfo@@QBE_NXZ		; CvVictoryInfo::isConquest
; Function compile flags: /Odtp
;	COMDAT ?isConquest@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isConquest@CvVictoryInfo@@QBE_NXZ PROC			; CvVictoryInfo::isConquest, COMDAT
; _this$ = ecx

; 2579 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2580 : 	return m_bConquest;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+291]

; 2581 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isConquest@CvVictoryInfo@@QBE_NXZ ENDP			; CvVictoryInfo::isConquest
_TEXT	ENDS
PUBLIC	?isInfluential@CvVictoryInfo@@QBE_NXZ		; CvVictoryInfo::isInfluential
; Function compile flags: /Odtp
;	COMDAT ?isInfluential@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isInfluential@CvVictoryInfo@@QBE_NXZ PROC		; CvVictoryInfo::isInfluential, COMDAT
; _this$ = ecx

; 2584 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2585 : 	return m_bInfluential;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+292]

; 2586 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isInfluential@CvVictoryInfo@@QBE_NXZ ENDP		; CvVictoryInfo::isInfluential
_TEXT	ENDS
PUBLIC	?isDiploVote@CvVictoryInfo@@QBE_NXZ		; CvVictoryInfo::isDiploVote
; Function compile flags: /Odtp
;	COMDAT ?isDiploVote@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isDiploVote@CvVictoryInfo@@QBE_NXZ PROC		; CvVictoryInfo::isDiploVote, COMDAT
; _this$ = ecx

; 2589 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2590 : 	return m_bDiploVote;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+293]

; 2591 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isDiploVote@CvVictoryInfo@@QBE_NXZ ENDP		; CvVictoryInfo::isDiploVote
_TEXT	ENDS
PUBLIC	?isPermanent@CvVictoryInfo@@QBE_NXZ		; CvVictoryInfo::isPermanent
; Function compile flags: /Odtp
;	COMDAT ?isPermanent@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isPermanent@CvVictoryInfo@@QBE_NXZ PROC		; CvVictoryInfo::isPermanent, COMDAT
; _this$ = ecx

; 2594 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2595 : 	return m_bPermanent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+294]

; 2596 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isPermanent@CvVictoryInfo@@QBE_NXZ ENDP		; CvVictoryInfo::isPermanent
_TEXT	ENDS
PUBLIC	?IsReligionInAllCities@CvVictoryInfo@@QBE_NXZ	; CvVictoryInfo::IsReligionInAllCities
; Function compile flags: /Odtp
;	COMDAT ?IsReligionInAllCities@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsReligionInAllCities@CvVictoryInfo@@QBE_NXZ PROC	; CvVictoryInfo::IsReligionInAllCities, COMDAT
; _this$ = ecx

; 2599 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2600 : 	return m_bReligionInAllCities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+295]

; 2601 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsReligionInAllCities@CvVictoryInfo@@QBE_NXZ ENDP	; CvVictoryInfo::IsReligionInAllCities
_TEXT	ENDS
PUBLIC	?IsFindAllNaturalWonders@CvVictoryInfo@@QBE_NXZ	; CvVictoryInfo::IsFindAllNaturalWonders
; Function compile flags: /Odtp
;	COMDAT ?IsFindAllNaturalWonders@CvVictoryInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsFindAllNaturalWonders@CvVictoryInfo@@QBE_NXZ PROC	; CvVictoryInfo::IsFindAllNaturalWonders, COMDAT
; _this$ = ecx

; 2604 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2605 : 	return m_bFindAllNaturalWonders;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+296]

; 2606 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsFindAllNaturalWonders@CvVictoryInfo@@QBE_NXZ ENDP	; CvVictoryInfo::IsFindAllNaturalWonders
_TEXT	ENDS
PUBLIC	?getMovie@CvVictoryInfo@@QBEPBDXZ		; CvVictoryInfo::getMovie
; Function compile flags: /Odtp
;	COMDAT ?getMovie@CvVictoryInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMovie@CvVictoryInfo@@QBEPBDXZ PROC			; CvVictoryInfo::getMovie, COMDAT
; _this$ = ecx

; 2609 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2610 : 	return m_strMovie.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 2611 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMovie@CvVictoryInfo@@QBEPBDXZ ENDP			; CvVictoryInfo::getMovie
_TEXT	ENDS
PUBLIC	?GetVictoryPointAward@CvVictoryInfo@@QBEHH@Z	; CvVictoryInfo::GetVictoryPointAward
; Function compile flags: /Odtp
;	COMDAT ?GetVictoryPointAward@CvVictoryInfo@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetVictoryPointAward@CvVictoryInfo@@QBEHH@Z PROC	; CvVictoryInfo::GetVictoryPointAward, COMDAT
; _this$ = ecx

; 2614 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2615 : 	return m_piVictoryPointAwards[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 2616 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetVictoryPointAward@CvVictoryInfo@@QBEHH@Z ENDP	; CvVictoryInfo::GetVictoryPointAward
_TEXT	ENDS
PUBLIC	??_C@_0GB@CPBNAPEJ@select?5VictoryPoints?5from?5Victor@ ; `string'
PUBLIC	??_C@_0CB@HHFGICF@CvVictoryInfo_VictoryPointAwards@ ; `string'
PUBLIC	??_C@_0M@DCNEGEJP@CityCulture?$AA@		; `string'
PUBLIC	??_C@_0N@HHKIPGNA@VictoryMovie?$AA@		; `string'
PUBLIC	??_C@_0BC@JKLHNPDB@VictoryDelayTurns?$AA@	; `string'
PUBLIC	??_C@_0BC@NEJIMOCC@TotalCultureRatio?$AA@	; `string'
PUBLIC	??_C@_0BB@MEIJDANL@NumCultureCities?$AA@	; `string'
PUBLIC	??_C@_0P@LDOHGIDG@MinLandPercent?$AA@		; `string'
PUBLIC	??_C@_0M@PPIKACEI@LandPercent?$AA@		; `string'
PUBLIC	??_C@_0BG@MAHDJNB@PopulationPercentLead?$AA@	; `string'
PUBLIC	??_C@_0BG@FODNKNIP@FindAllNaturalWonders?$AA@	; `string'
PUBLIC	??_C@_0BE@DEHMNBAG@ReligionInAllCities?$AA@	; `string'
PUBLIC	??_C@_09FHMJCGNI@Permanent?$AA@			; `string'
PUBLIC	??_C@_09PNGEIPHC@DiploVote?$AA@			; `string'
PUBLIC	??_C@_0M@IIANOGOO@Influential?$AA@		; `string'
PUBLIC	??_C@_08MMPLINCN@Conquest?$AA@			; `string'
PUBLIC	??_C@_08EPFJMECL@EndScore?$AA@			; `string'
PUBLIC	??_C@_0M@BIKNEBHJ@TargetScore?$AA@		; `string'
PUBLIC	??_C@_08KHJCOHAH@WinsGame?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0GB@CPBNAPEJ@select?5VictoryPoints?5from?5Victor@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdatabaseutility.h
CONST	SEGMENT
??_C@_0GB@CPBNAPEJ@select?5VictoryPoints?5from?5Victor@ DB 'select Victor'
	DB	'yPoints from VictoryPointAwards where VictoryType == ? order '
	DB	'by VictoryPoints desc;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HHFGICF@CvVictoryInfo_VictoryPointAwards@
CONST	SEGMENT
??_C@_0CB@HHFGICF@CvVictoryInfo_VictoryPointAwards@ DB 'CvVictoryInfo_Vic'
	DB	'toryPointAwards', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DCNEGEJP@CityCulture?$AA@
CONST	SEGMENT
??_C@_0M@DCNEGEJP@CityCulture?$AA@ DB 'CityCulture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HHKIPGNA@VictoryMovie?$AA@
CONST	SEGMENT
??_C@_0N@HHKIPGNA@VictoryMovie?$AA@ DB 'VictoryMovie', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKLHNPDB@VictoryDelayTurns?$AA@
CONST	SEGMENT
??_C@_0BC@JKLHNPDB@VictoryDelayTurns?$AA@ DB 'VictoryDelayTurns', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEJIMOCC@TotalCultureRatio?$AA@
CONST	SEGMENT
??_C@_0BC@NEJIMOCC@TotalCultureRatio?$AA@ DB 'TotalCultureRatio', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MEIJDANL@NumCultureCities?$AA@
CONST	SEGMENT
??_C@_0BB@MEIJDANL@NumCultureCities?$AA@ DB 'NumCultureCities', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LDOHGIDG@MinLandPercent?$AA@
CONST	SEGMENT
??_C@_0P@LDOHGIDG@MinLandPercent?$AA@ DB 'MinLandPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PPIKACEI@LandPercent?$AA@
CONST	SEGMENT
??_C@_0M@PPIKACEI@LandPercent?$AA@ DB 'LandPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MAHDJNB@PopulationPercentLead?$AA@
CONST	SEGMENT
??_C@_0BG@MAHDJNB@PopulationPercentLead?$AA@ DB 'PopulationPercentLead', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FODNKNIP@FindAllNaturalWonders?$AA@
CONST	SEGMENT
??_C@_0BG@FODNKNIP@FindAllNaturalWonders?$AA@ DB 'FindAllNaturalWonders', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DEHMNBAG@ReligionInAllCities?$AA@
CONST	SEGMENT
??_C@_0BE@DEHMNBAG@ReligionInAllCities?$AA@ DB 'ReligionInAllCities', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FHMJCGNI@Permanent?$AA@
CONST	SEGMENT
??_C@_09FHMJCGNI@Permanent?$AA@ DB 'Permanent', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PNGEIPHC@DiploVote?$AA@
CONST	SEGMENT
??_C@_09PNGEIPHC@DiploVote?$AA@ DB 'DiploVote', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IIANOGOO@Influential?$AA@
CONST	SEGMENT
??_C@_0M@IIANOGOO@Influential?$AA@ DB 'Influential', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMPLINCN@Conquest?$AA@
CONST	SEGMENT
??_C@_08MMPLINCN@Conquest?$AA@ DB 'Conquest', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPFJMECL@EndScore?$AA@
CONST	SEGMENT
??_C@_08EPFJMECL@EndScore?$AA@ DB 'EndScore', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BIKNEBHJ@TargetScore?$AA@
CONST	SEGMENT
??_C@_0M@BIKNEBHJ@TargetScore?$AA@ DB 'TargetScore', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KHJCOHAH@WinsGame?$AA@
CONST	SEGMENT
??_C@_08KHJCOHAH@WinsGame?$AA@ DB 'WinsGame', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
__ehfuncinfo$?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T231627 = -72						; size = 4
$T231626 = -68						; size = 4
_pVictoryPointResults$219134 = -64			; size = 4
_strKey$219132 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_i$219137 = -28						; size = 4
_iNumVictoryPoints$219131 = -24				; size = 4
_szVictoryType$219130 = -20				; size = 4
_szCityCulture$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvVictoryInfo::CacheResults, COMDAT
; _this$ = ecx

; 2619 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2620 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CacheResul@13

; 2621 : 		return false;

	xor	al, al
	jmp	$LN5@CacheResul@13
$LN4@CacheResul@13:

; 2622 : 
; 2623 : 	m_bWinsGame = kResults.GetBool("WinsGame");

	push	OFFSET ??_C@_08KHJCOHAH@WinsGame?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+288], al

; 2624 : 	m_bTargetScore = kResults.GetBool("TargetScore");

	push	OFFSET ??_C@_0M@BIKNEBHJ@TargetScore?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+289], al

; 2625 : 	m_bEndScore = kResults.GetBool("EndScore");

	push	OFFSET ??_C@_08EPFJMECL@EndScore?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+290], al

; 2626 : 	m_bConquest = kResults.GetBool("Conquest");

	push	OFFSET ??_C@_08MMPLINCN@Conquest?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+291], al

; 2627 : 	m_bInfluential = kResults.GetBool("Influential");

	push	OFFSET ??_C@_0M@IIANOGOO@Influential?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+292], al

; 2628 : 	m_bDiploVote = kResults.GetBool("DiploVote");

	push	OFFSET ??_C@_09PNGEIPHC@DiploVote?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+293], al

; 2629 : 	m_bPermanent = kResults.GetBool("Permanent");

	push	OFFSET ??_C@_09FHMJCGNI@Permanent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+294], al

; 2630 : 	m_bReligionInAllCities = kResults.GetBool("ReligionInAllCities");

	push	OFFSET ??_C@_0BE@DEHMNBAG@ReligionInAllCities?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+295], al

; 2631 : 	m_bFindAllNaturalWonders = kResults.GetBool("FindAllNaturalWonders");

	push	OFFSET ??_C@_0BG@FODNKNIP@FindAllNaturalWonders?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+296], al

; 2632 : 	m_iPopulationPercentLead = kResults.GetInt("PopulationPercentLead");

	push	OFFSET ??_C@_0BG@MAHDJNB@PopulationPercentLead?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+260], eax

; 2633 : 	m_iLandPercent = kResults.GetInt("LandPercent");

	push	OFFSET ??_C@_0M@PPIKACEI@LandPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], eax

; 2634 : 	m_iMinLandPercent = kResults.GetInt("MinLandPercent");

	push	OFFSET ??_C@_0P@LDOHGIDG@MinLandPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], eax

; 2635 : 
; 2636 : 	m_iNumCultureCities = kResults.GetInt("NumCultureCities");

	push	OFFSET ??_C@_0BB@MEIJDANL@NumCultureCities?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 2637 : 	m_iTotalCultureRatio = kResults.GetInt("TotalCultureRatio");

	push	OFFSET ??_C@_0BC@NEJIMOCC@TotalCultureRatio?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 2638 : 	m_iVictoryDelayTurns = kResults.GetInt("VictoryDelayTurns");

	push	OFFSET ??_C@_0BC@JKLHNPDB@VictoryDelayTurns?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 2639 : 
; 2640 : 	m_strMovie = kResults.GetText("VictoryMovie");

	push	OFFSET ??_C@_0N@HHKIPGNA@VictoryMovie?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T231627[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 300				; 0000012cH
	mov	DWORD PTR $T231626[ebp], edx
	cmp	DWORD PTR $T231627[ebp], 0
	je	SHORT $LN9@CacheResul@13
	mov	eax, DWORD PTR $T231627[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231626[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN10@CacheResul@13
$LN9@CacheResul@13:
	mov	ecx, DWORD PTR $T231626[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN10@CacheResul@13:

; 2641 : 
; 2642 : 	const char* szCityCulture = kResults.GetText("CityCulture");

	push	OFFSET ??_C@_0M@DCNEGEJP@CityCulture?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szCityCulture$[ebp], eax

; 2643 : 	m_iCityCulture = GC.getInfoTypeForString(szCityCulture, true);

	push	1
	mov	ecx, DWORD PTR _szCityCulture$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 2644 : 
; 2645 : 	//VictoryPointAwards
; 2646 : 	{
; 2647 : 		const char* szVictoryType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szVictoryType$219130[ebp], eax

; 2648 : 
; 2649 : 		const int iNumVictoryPoints = GC.getNUM_VICTORY_POINT_AWARDS();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+6264
	mov	DWORD PTR _iNumVictoryPoints$219131[ebp], eax

; 2650 : 		kUtility.InitializeArray(m_piVictoryPointAwards, iNumVictoryPoints);

	push	0
	mov	ecx, DWORD PTR _iNumVictoryPoints$219131[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 328				; 00000148H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 2651 : 
; 2652 : 		std::string strKey = "CvVictoryInfo_VictoryPointAwards";

	push	OFFSET ??_C@_0CB@HHFGICF@CvVictoryInfo_VictoryPointAwards@
	lea	ecx, DWORD PTR _strKey$219132[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2653 : 		Database::Results* pVictoryPointResults = kUtility.GetResults(strKey);

	lea	eax, DWORD PTR _strKey$219132[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pVictoryPointResults$219134[ebp], eax

; 2654 : 		if(pVictoryPointResults == NULL)

	cmp	DWORD PTR _pVictoryPointResults$219134[ebp], 0
	jne	SHORT $LN3@CacheResul@13

; 2655 : 		{
; 2656 : 			pVictoryPointResults = kUtility.PrepareResults(strKey, "select VictoryPoints from VictoryPointAwards where VictoryType == ? order by VictoryPoints desc;");

	push	OFFSET ??_C@_0GB@CPBNAPEJ@select?5VictoryPoints?5from?5Victor@
	lea	ecx, DWORD PTR _strKey$219132[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pVictoryPointResults$219134[ebp], eax
$LN3@CacheResul@13:

; 2657 : 		}
; 2658 : 
; 2659 : 		pVictoryPointResults->Bind(1, szVictoryType);

	push	1
	mov	edx, DWORD PTR _szVictoryType$219130[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pVictoryPointResults$219134[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z

; 2660 : 
; 2661 : 		int i = 0;

	mov	DWORD PTR _i$219137[ebp], 0
$LN2@CacheResul@13:

; 2662 : 		while(pVictoryPointResults->Step())

	mov	ecx, DWORD PTR _pVictoryPointResults$219134[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CacheResul@13

; 2663 : 		{
; 2664 : 			CvAssert(i < iNumVictoryPoints);
; 2665 : 			m_piVictoryPointAwards[i++] = pVictoryPointResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pVictoryPointResults$219134[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+328]
	mov	ecx, DWORD PTR _i$219137[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	edx, DWORD PTR _i$219137[ebp]
	add	edx, 1
	mov	DWORD PTR _i$219137[ebp], edx

; 2666 : 		}

	jmp	SHORT $LN2@CacheResul@13
$LN1@CacheResul@13:

; 2667 : 
; 2668 : 		pVictoryPointResults->Reset();

	mov	ecx, DWORD PTR _pVictoryPointResults$219134[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 2669 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$219132[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 2670 : 
; 2671 : 	return true;

	mov	al, 1
$LN5@CacheResul@13:

; 2672 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _strKey$219132[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvVictoryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvVictoryInfo::CacheResults
PUBLIC	??_7CvSmallAwardInfo@@6B@			; CvSmallAwardInfo::`vftable'
PUBLIC	??0CvSmallAwardInfo@@QAE@XZ			; CvSmallAwardInfo::CvSmallAwardInfo
PUBLIC	?CacheResults@CvSmallAwardInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvSmallAwardInfo::CacheResults
EXTRN	??_ECvSmallAwardInfo@@UAEPAXI@Z:PROC		; CvSmallAwardInfo::`vector deleting destructor'
;	COMDAT ??_7CvSmallAwardInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvSmallAwardInfo@@6B@ DD FLAT:?CacheResults@CvSmallAwardInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvSmallAwardInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvSmallAwardInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvSmallAwardInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvSmallAwardInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvSmallAwardInfo@@QAE@XZ$1
__ehfuncinfo$??0CvSmallAwardInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvSmallAwardInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvSmallAwardInfo@@QAE@XZ
_TEXT	SEGMENT
tv152 = -32						; size = 4
tv139 = -28						; size = 4
_this$ = -24						; size = 4
$T231664 = -20						; size = 4
$T231655 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvSmallAwardInfo@@QAE@XZ PROC			; CvSmallAwardInfo::CvSmallAwardInfo, COMDAT
; _this$ = ecx

; 2685 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvSmallAwardInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvSmallAwardInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	mov	DWORD PTR $T231655[ebp], ecx
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN8@CvSmallAwa
	mov	DWORD PTR tv139[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN9@CvSmallAwa
$LN8@CvSmallAwa:
	mov	DWORD PTR tv139[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN9@CvSmallAwa:
	mov	eax, DWORD PTR tv139[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231655[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	mov	DWORD PTR $T231664[ebp], ecx
	mov	edx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	test	edx, edx
	je	SHORT $LN13@CvSmallAwa
	mov	DWORD PTR tv152[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN14@CvSmallAwa
$LN13@CvSmallAwa:
	mov	DWORD PTR tv152[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN14@CvSmallAwa:
	mov	eax, DWORD PTR tv152[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231664[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+324], 0

; 2686 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvSmallAwardInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvSmallAwardInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvSmallAwardInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvSmallAwardInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvSmallAwardInfo@@QAE@XZ ENDP			; CvSmallAwardInfo::CvSmallAwardInfo
PUBLIC	??1CvSmallAwardInfo@@UAE@XZ			; CvSmallAwardInfo::~CvSmallAwardInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvSmallAwardInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvSmallAwardInfo@@UAEPAXI@Z PROC			; CvSmallAwardInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvSmallAwardInfo@@UAE@XZ		; CvSmallAwardInfo::~CvSmallAwardInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvSmallAwardInfo@@UAEPAXI@Z ENDP			; CvSmallAwardInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvSmallAwardInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvSmallAwardInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvSmallAwardInfo@@UAE@XZ$1
__ehfuncinfo$??1CvSmallAwardInfo@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvSmallAwardInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvSmallAwardInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T231687 = -20						; size = 4
$T231682 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvSmallAwardInfo@@UAE@XZ PROC			; CvSmallAwardInfo::~CvSmallAwardInfo, COMDAT
; _this$ = ecx

; 2689 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvSmallAwardInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvSmallAwardInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 2690 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	mov	DWORD PTR $T231682[ebp], ecx
	mov	ecx, DWORD PTR $T231682[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	mov	DWORD PTR $T231687[ebp], edx
	mov	ecx, DWORD PTR $T231687[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvSmallAwardInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvSmallAwardInfo@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvSmallAwardInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvSmallAwardInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvSmallAwardInfo@@UAE@XZ ENDP			; CvSmallAwardInfo::~CvSmallAwardInfo
PUBLIC	?GetNumVictoryPoints@CvSmallAwardInfo@@QBEHXZ	; CvSmallAwardInfo::GetNumVictoryPoints
; Function compile flags: /Odtp
;	COMDAT ?GetNumVictoryPoints@CvSmallAwardInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumVictoryPoints@CvSmallAwardInfo@@QBEHXZ PROC	; CvSmallAwardInfo::GetNumVictoryPoints, COMDAT
; _this$ = ecx

; 2693 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2694 : 	return m_iNumVictoryPoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 2695 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumVictoryPoints@CvSmallAwardInfo@@QBEHXZ ENDP	; CvSmallAwardInfo::GetNumVictoryPoints
_TEXT	ENDS
PUBLIC	?GetNotificationString@CvSmallAwardInfo@@QBE?AVCvString@@XZ ; CvSmallAwardInfo::GetNotificationString
; Function compile flags: /Odtp
;	COMDAT ?GetNotificationString@CvSmallAwardInfo@@QBE?AVCvString@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T231754 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetNotificationString@CvSmallAwardInfo@@QBE?AVCvString@@XZ PROC ; CvSmallAwardInfo::GetNotificationString, COMDAT
; _this$ = ecx

; 2698 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T231754[ebp], 0

; 2699 : 	return m_szNotification;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T231754[ebp]
	or	ecx, 1
	mov	DWORD PTR $T231754[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2700 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetNotificationString@CvSmallAwardInfo@@QBE?AVCvString@@XZ ENDP ; CvSmallAwardInfo::GetNotificationString
_TEXT	ENDS
PUBLIC	?GetTeamNotificationString@CvSmallAwardInfo@@QBE?AVCvString@@XZ ; CvSmallAwardInfo::GetTeamNotificationString
; Function compile flags: /Odtp
;	COMDAT ?GetTeamNotificationString@CvSmallAwardInfo@@QBE?AVCvString@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T231763 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTeamNotificationString@CvSmallAwardInfo@@QBE?AVCvString@@XZ PROC ; CvSmallAwardInfo::GetTeamNotificationString, COMDAT
; _this$ = ecx

; 2703 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T231763[ebp], 0

; 2704 : 	return m_szTeamNotification;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T231763[ebp]
	or	ecx, 1
	mov	DWORD PTR $T231763[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2705 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTeamNotificationString@CvSmallAwardInfo@@QBE?AVCvString@@XZ ENDP ; CvSmallAwardInfo::GetTeamNotificationString
_TEXT	ENDS
PUBLIC	?GetNumCities@CvSmallAwardInfo@@QBEHXZ		; CvSmallAwardInfo::GetNumCities
; Function compile flags: /Odtp
;	COMDAT ?GetNumCities@CvSmallAwardInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumCities@CvSmallAwardInfo@@QBEHXZ PROC		; CvSmallAwardInfo::GetNumCities, COMDAT
; _this$ = ecx

; 2708 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2709 : 	return m_iNumCities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]

; 2710 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumCities@CvSmallAwardInfo@@QBEHXZ ENDP		; CvSmallAwardInfo::GetNumCities
_TEXT	ENDS
PUBLIC	?GetCityPopulation@CvSmallAwardInfo@@QBEHXZ	; CvSmallAwardInfo::GetCityPopulation
; Function compile flags: /Odtp
;	COMDAT ?GetCityPopulation@CvSmallAwardInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCityPopulation@CvSmallAwardInfo@@QBEHXZ PROC	; CvSmallAwardInfo::GetCityPopulation, COMDAT
; _this$ = ecx

; 2713 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2714 : 	return m_iCityPopulation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+324]

; 2715 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCityPopulation@CvSmallAwardInfo@@QBEHXZ ENDP	; CvSmallAwardInfo::GetCityPopulation
_TEXT	ENDS
PUBLIC	??_C@_0P@CDPJCACG@CityPopulation?$AA@		; `string'
PUBLIC	??_C@_09DHLGHPGE@NumCities?$AA@			; `string'
PUBLIC	??_C@_0BB@PJAFBAEM@NumVictoryPoints?$AA@	; `string'
PUBLIC	??_C@_0BB@JJPDHJMO@TeamNotification?$AA@	; `string'
PUBLIC	??_C@_0N@OFINCEFP@Notification?$AA@		; `string'
;	COMDAT ??_C@_0P@CDPJCACG@CityPopulation?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0P@CDPJCACG@CityPopulation?$AA@ DB 'CityPopulation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DHLGHPGE@NumCities?$AA@
CONST	SEGMENT
??_C@_09DHLGHPGE@NumCities?$AA@ DB 'NumCities', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PJAFBAEM@NumVictoryPoints?$AA@
CONST	SEGMENT
??_C@_0BB@PJAFBAEM@NumVictoryPoints?$AA@ DB 'NumVictoryPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JJPDHJMO@TeamNotification?$AA@
CONST	SEGMENT
??_C@_0BB@JJPDHJMO@TeamNotification?$AA@ DB 'TeamNotification', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFINCEFP@Notification?$AA@
CONST	SEGMENT
??_C@_0N@OFINCEFP@Notification?$AA@ DB 'Notification', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvSmallAwardInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T231788 = -16						; size = 4
$T231787 = -12						; size = 4
$T231781 = -8						; size = 4
$T231780 = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvSmallAwardInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvSmallAwardInfo::CacheResults, COMDAT
; _this$ = ecx

; 2718 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2719 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@14

; 2720 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@14
$LN1@CacheResul@14:

; 2721 : 
; 2722 : 	m_szNotification = kResults.GetText("Notification");

	push	OFFSET ??_C@_0N@OFINCEFP@Notification?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T231781[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR $T231780[ebp], eax
	cmp	DWORD PTR $T231781[ebp], 0
	je	SHORT $LN5@CacheResul@14
	mov	ecx, DWORD PTR $T231781[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T231780[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN6@CacheResul@14
$LN5@CacheResul@14:
	mov	ecx, DWORD PTR $T231780[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN6@CacheResul@14:

; 2723 : 	m_szTeamNotification = kResults.GetText("TeamNotification");

	push	OFFSET ??_C@_0BB@JJPDHJMO@TeamNotification?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T231788[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	mov	DWORD PTR $T231787[ebp], edx
	cmp	DWORD PTR $T231788[ebp], 0
	je	SHORT $LN9@CacheResul@14
	mov	eax, DWORD PTR $T231788[ebp]
	push	eax
	mov	ecx, DWORD PTR $T231787[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN10@CacheResul@14
$LN9@CacheResul@14:
	mov	ecx, DWORD PTR $T231787[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN10@CacheResul@14:

; 2724 : 
; 2725 : 	m_iNumVictoryPoints = kResults.GetInt("NumVictoryPoints");

	push	OFFSET ??_C@_0BB@PJAFBAEM@NumVictoryPoints?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 2726 : 
; 2727 : 	m_iNumCities = kResults.GetInt("NumCities");

	push	OFFSET ??_C@_09DHLGHPGE@NumCities?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], eax

; 2728 : 	m_iCityPopulation = kResults.GetInt("CityPopulation");

	push	OFFSET ??_C@_0P@CDPJCACG@CityPopulation?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+324], eax

; 2729 : 
; 2730 : 	return true;

	mov	al, 1
$LN2@CacheResul@14:

; 2731 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvSmallAwardInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvSmallAwardInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvHurryInfo@@6B@				; CvHurryInfo::`vftable'
PUBLIC	??0CvHurryInfo@@QAE@XZ				; CvHurryInfo::CvHurryInfo
PUBLIC	?CacheResults@CvHurryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHurryInfo::CacheResults
;	COMDAT ??_7CvHurryInfo@@6B@
CONST	SEGMENT
??_7CvHurryInfo@@6B@ DD FLAT:?CacheResults@CvHurryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHurryInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvHurryInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvHurryInfo@@QAE@XZ PROC				; CvHurryInfo::CvHurryInfo, COMDAT
; _this$ = ecx

; 2742 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvHurryInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0

; 2743 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvHurryInfo@@QAE@XZ ENDP				; CvHurryInfo::CvHurryInfo
_TEXT	ENDS
PUBLIC	?getPolicyPrereq@CvHurryInfo@@QBEHXZ		; CvHurryInfo::getPolicyPrereq
; Function compile flags: /Odtp
;	COMDAT ?getPolicyPrereq@CvHurryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPolicyPrereq@CvHurryInfo@@QBEHXZ PROC		; CvHurryInfo::getPolicyPrereq, COMDAT
; _this$ = ecx

; 2746 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2747 : 	return m_iPolicyPrereq;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 2748 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPolicyPrereq@CvHurryInfo@@QBEHXZ ENDP		; CvHurryInfo::getPolicyPrereq
_TEXT	ENDS
PUBLIC	?getGoldPerProduction@CvHurryInfo@@QBEHXZ	; CvHurryInfo::getGoldPerProduction
; Function compile flags: /Odtp
;	COMDAT ?getGoldPerProduction@CvHurryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldPerProduction@CvHurryInfo@@QBEHXZ PROC		; CvHurryInfo::getGoldPerProduction, COMDAT
; _this$ = ecx

; 2751 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2752 : 	return m_iGoldPerProduction;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 2753 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldPerProduction@CvHurryInfo@@QBEHXZ ENDP		; CvHurryInfo::getGoldPerProduction
_TEXT	ENDS
PUBLIC	?getProductionPerPopulation@CvHurryInfo@@QBEHXZ	; CvHurryInfo::getProductionPerPopulation
; Function compile flags: /Odtp
;	COMDAT ?getProductionPerPopulation@CvHurryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getProductionPerPopulation@CvHurryInfo@@QBEHXZ PROC	; CvHurryInfo::getProductionPerPopulation, COMDAT
; _this$ = ecx

; 2756 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2757 : 	return m_iProductionPerPopulation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 2758 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getProductionPerPopulation@CvHurryInfo@@QBEHXZ ENDP	; CvHurryInfo::getProductionPerPopulation
_TEXT	ENDS
PUBLIC	?getGoldPerBeaker@CvHurryInfo@@QBEHXZ		; CvHurryInfo::getGoldPerBeaker
; Function compile flags: /Odtp
;	COMDAT ?getGoldPerBeaker@CvHurryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldPerBeaker@CvHurryInfo@@QBEHXZ PROC		; CvHurryInfo::getGoldPerBeaker, COMDAT
; _this$ = ecx

; 2761 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2762 : 	return m_iGoldPerBeaker;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 2763 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldPerBeaker@CvHurryInfo@@QBEHXZ ENDP		; CvHurryInfo::getGoldPerBeaker
_TEXT	ENDS
PUBLIC	?getGoldPerCulture@CvHurryInfo@@QBEHXZ		; CvHurryInfo::getGoldPerCulture
; Function compile flags: /Odtp
;	COMDAT ?getGoldPerCulture@CvHurryInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldPerCulture@CvHurryInfo@@QBEHXZ PROC		; CvHurryInfo::getGoldPerCulture, COMDAT
; _this$ = ecx

; 2766 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2767 : 	return m_iGoldPerCulture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 2768 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldPerCulture@CvHurryInfo@@QBEHXZ ENDP		; CvHurryInfo::getGoldPerCulture
_TEXT	ENDS
PUBLIC	??_C@_0N@IPOJPFMB@PolicyPrereq?$AA@		; `string'
PUBLIC	??_C@_0P@PEJPLOOP@GoldPerCulture?$AA@		; `string'
PUBLIC	??_C@_0O@DPLOACOG@GoldPerBeaker?$AA@		; `string'
PUBLIC	??_C@_0BI@CIOOCIBH@ProductionPerPopulation?$AA@	; `string'
PUBLIC	??_C@_0BC@EDGHDDGG@GoldPerProduction?$AA@	; `string'
;	COMDAT ??_C@_0N@IPOJPFMB@PolicyPrereq?$AA@
CONST	SEGMENT
??_C@_0N@IPOJPFMB@PolicyPrereq?$AA@ DB 'PolicyPrereq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEJPLOOP@GoldPerCulture?$AA@
CONST	SEGMENT
??_C@_0P@PEJPLOOP@GoldPerCulture?$AA@ DB 'GoldPerCulture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DPLOACOG@GoldPerBeaker?$AA@
CONST	SEGMENT
??_C@_0O@DPLOACOG@GoldPerBeaker?$AA@ DB 'GoldPerBeaker', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CIOOCIBH@ProductionPerPopulation?$AA@
CONST	SEGMENT
??_C@_0BI@CIOOCIBH@ProductionPerPopulation?$AA@ DB 'ProductionPerPopulati'
	DB	'on', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EDGHDDGG@GoldPerProduction?$AA@
CONST	SEGMENT
??_C@_0BC@EDGHDDGG@GoldPerProduction?$AA@ DB 'GoldPerProduction', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvHurryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szPolicyPrereq$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvHurryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvHurryInfo::CacheResults, COMDAT
; _this$ = ecx

; 2771 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2772 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@15

; 2773 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@15
$LN1@CacheResul@15:

; 2774 : 
; 2775 : 	m_iGoldPerProduction = kResults.GetInt("GoldPerProduction");

	push	OFFSET ??_C@_0BC@EDGHDDGG@GoldPerProduction?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], eax

; 2776 : 	m_iProductionPerPopulation = kResults.GetInt("ProductionPerPopulation");

	push	OFFSET ??_C@_0BI@CIOOCIBH@ProductionPerPopulation?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], eax

; 2777 : 	m_iGoldPerBeaker = kResults.GetInt("GoldPerBeaker");

	push	OFFSET ??_C@_0O@DPLOACOG@GoldPerBeaker?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], eax

; 2778 : 	m_iGoldPerCulture = kResults.GetInt("GoldPerCulture");

	push	OFFSET ??_C@_0P@PEJPLOOP@GoldPerCulture?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], eax

; 2779 : 
; 2780 : 	const char* szPolicyPrereq = kResults.GetText("PolicyPrereq");

	push	OFFSET ??_C@_0N@IPOJPFMB@PolicyPrereq?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPolicyPrereq$[ebp], eax

; 2781 : 	m_iPolicyPrereq = GC.getInfoTypeForString(szPolicyPrereq, true);

	push	1
	mov	eax, DWORD PTR _szPolicyPrereq$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 2782 : 
; 2783 : 	return true;

	mov	al, 1
$LN2@CacheResul@15:

; 2784 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvHurryInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvHurryInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvHandicapInfo@@6B@				; CvHandicapInfo::`vftable'
PUBLIC	??0CvHandicapInfo@@QAE@XZ			; CvHandicapInfo::CvHandicapInfo
PUBLIC	?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHandicapInfo::CacheResults
EXTRN	??_ECvHandicapInfo@@UAEPAXI@Z:PROC		; CvHandicapInfo::`vector deleting destructor'
;	COMDAT ??_7CvHandicapInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvHandicapInfo@@6B@ DD FLAT:?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHandicapInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvHandicapInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvHandicapInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvHandicapInfo@@QAE@XZ$0
__ehfuncinfo$??0CvHandicapInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvHandicapInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvHandicapInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T231812 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvHandicapInfo@@QAE@XZ PROC				; CvHandicapInfo::CvHandicapInfo, COMDAT
; _this$ = ecx

; 2854 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvHandicapInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvHandicapInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+340], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+344], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+352], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+356], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+360], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+364], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+368], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+372], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+376], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+380], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+384], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+388], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+392], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+396], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+400], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+404], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+408], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+412], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+416], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+420], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+424], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+428], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+432], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+436], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+440], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+444], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+448], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+452], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+456], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+460], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+468], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+472], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+476], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+480], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+484], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+488], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+492], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+496], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 500				; 000001f4H
	mov	DWORD PTR $T231812[ebp], ecx
	mov	ecx, DWORD PTR $T231812[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+528], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+532], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+536], 0

; 2855 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvHandicapInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??0CvHandicapInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvHandicapInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvHandicapInfo@@QAE@XZ ENDP				; CvHandicapInfo::CvHandicapInfo
PUBLIC	??1CvHandicapInfo@@UAE@XZ			; CvHandicapInfo::~CvHandicapInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvHandicapInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvHandicapInfo@@UAEPAXI@Z PROC			; CvHandicapInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvHandicapInfo@@UAE@XZ		; CvHandicapInfo::~CvHandicapInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvHandicapInfo@@UAEPAXI@Z ENDP			; CvHandicapInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvHandicapInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvHandicapInfo@@UAE@XZ$0
__ehfuncinfo$??1CvHandicapInfo@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvHandicapInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvHandicapInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -80						; size = 4
$T231847 = -40						; size = 4
$T231842 = -36						; size = 4
$T231840 = -32						; size = 4
$T231836 = -28						; size = 4
$T231834 = -24						; size = 4
$T231830 = -20						; size = 4
$T231828 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvHandicapInfo@@UAE@XZ PROC				; CvHandicapInfo::~CvHandicapInfo, COMDAT
; _this$ = ecx

; 2858 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvHandicapInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvHandicapInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2859 : 	SAFE_DELETE_ARRAY(m_piGoodies);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 528				; 00000210H
	mov	DWORD PTR $T231830[ebp], ecx
	mov	edx, DWORD PTR $T231830[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T231828[ebp], eax
	mov	ecx, DWORD PTR $T231828[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T231830[ebp]
	mov	DWORD PTR [edx], 0

; 2860 : 	SAFE_DELETE_ARRAY(m_pbFreeTechs);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 532				; 00000214H
	mov	DWORD PTR $T231836[ebp], eax
	mov	ecx, DWORD PTR $T231836[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T231834[ebp], edx
	mov	eax, DWORD PTR $T231834[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T231836[ebp]
	mov	DWORD PTR [ecx], 0

; 2861 : 	SAFE_DELETE_ARRAY(m_pbAIFreeTechs);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 536				; 00000218H
	mov	DWORD PTR $T231842[ebp], edx
	mov	eax, DWORD PTR $T231842[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T231840[ebp], ecx
	mov	edx, DWORD PTR $T231840[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T231842[ebp]
	mov	DWORD PTR [eax], 0

; 2862 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 500				; 000001f4H
	mov	DWORD PTR $T231847[ebp], ecx
	mov	ecx, DWORD PTR $T231847[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvHandicapInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??1CvHandicapInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvHandicapInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvHandicapInfo@@UAE@XZ ENDP				; CvHandicapInfo::~CvHandicapInfo
PUBLIC	?getStartingLocationPercent@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getStartingLocationPercent
; Function compile flags: /Odtp
;	COMDAT ?getStartingLocationPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingLocationPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getStartingLocationPercent, COMDAT
; _this$ = ecx

; 2865 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2866 : 	return m_iStartingLocationPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 2867 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingLocationPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getStartingLocationPercent
_TEXT	ENDS
PUBLIC	?getAdvancedStartPointsMod@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAdvancedStartPointsMod
; Function compile flags: /Odtp
;	COMDAT ?getAdvancedStartPointsMod@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAdvancedStartPointsMod@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAdvancedStartPointsMod, COMDAT
; _this$ = ecx

; 2870 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2871 : 	return m_iAdvancedStartPointsMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 2872 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAdvancedStartPointsMod@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAdvancedStartPointsMod
_TEXT	ENDS
PUBLIC	?getStartingPolicyPoints@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getStartingPolicyPoints
; Function compile flags: /Odtp
;	COMDAT ?getStartingPolicyPoints@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingPolicyPoints@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getStartingPolicyPoints, COMDAT
; _this$ = ecx

; 2875 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2876 : 	return m_iStartingPolicyPoints;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 2877 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingPolicyPoints@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getStartingPolicyPoints
_TEXT	ENDS
PUBLIC	?getHappinessDefault@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getHappinessDefault
; Function compile flags: /Odtp
;	COMDAT ?getHappinessDefault@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHappinessDefault@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getHappinessDefault, COMDAT
; _this$ = ecx

; 2880 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2881 : 	return m_iHappinessDefault;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 2882 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHappinessDefault@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getHappinessDefault
_TEXT	ENDS
PUBLIC	?getExtraHappinessPerLuxury@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getExtraHappinessPerLuxury
; Function compile flags: /Odtp
;	COMDAT ?getExtraHappinessPerLuxury@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getExtraHappinessPerLuxury@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getExtraHappinessPerLuxury, COMDAT
; _this$ = ecx

; 2885 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2886 : 	return m_iExtraHappinessPerLuxury;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 2887 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getExtraHappinessPerLuxury@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getExtraHappinessPerLuxury
_TEXT	ENDS
PUBLIC	?getNumCitiesUnhappinessMod@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getNumCitiesUnhappinessMod
; Function compile flags: /Odtp
;	COMDAT ?getNumCitiesUnhappinessMod@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumCitiesUnhappinessMod@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getNumCitiesUnhappinessMod, COMDAT
; _this$ = ecx

; 2890 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2891 : 	return m_iNumCitiesUnhappinessMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 2892 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumCitiesUnhappinessMod@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getNumCitiesUnhappinessMod
_TEXT	ENDS
PUBLIC	?getPopulationUnhappinessMod@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getPopulationUnhappinessMod
; Function compile flags: /Odtp
;	COMDAT ?getPopulationUnhappinessMod@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPopulationUnhappinessMod@CvHandicapInfo@@QBEHXZ PROC ; CvHandicapInfo::getPopulationUnhappinessMod, COMDAT
; _this$ = ecx

; 2895 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2896 : 	return m_iPopulationUnhappinessMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 2897 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPopulationUnhappinessMod@CvHandicapInfo@@QBEHXZ ENDP ; CvHandicapInfo::getPopulationUnhappinessMod
_TEXT	ENDS
PUBLIC	?getStartingGold@CvHandicapInfo@@QBEHXZ		; CvHandicapInfo::getStartingGold
; Function compile flags: /Odtp
;	COMDAT ?getStartingGold@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingGold@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getStartingGold, COMDAT
; _this$ = ecx

; 2900 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2901 : 	return m_iStartingGold;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 2902 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingGold@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getStartingGold
_TEXT	ENDS
PUBLIC	?getGoldFreeUnits@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getGoldFreeUnits
; Function compile flags: /Odtp
;	COMDAT ?getGoldFreeUnits@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldFreeUnits@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getGoldFreeUnits, COMDAT
; _this$ = ecx

; 2905 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2906 : 	return m_iGoldFreeUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 2907 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldFreeUnits@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getGoldFreeUnits
_TEXT	ENDS
PUBLIC	?getProductionFreeUnits@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getProductionFreeUnits
; Function compile flags: /Odtp
;	COMDAT ?getProductionFreeUnits@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getProductionFreeUnits@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getProductionFreeUnits, COMDAT
; _this$ = ecx

; 2910 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2911 : 	return m_iProductionFreeUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 2912 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getProductionFreeUnits@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getProductionFreeUnits
_TEXT	ENDS
PUBLIC	?getProductionFreeUnitsPerCity@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getProductionFreeUnitsPerCity
; Function compile flags: /Odtp
;	COMDAT ?getProductionFreeUnitsPerCity@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getProductionFreeUnitsPerCity@CvHandicapInfo@@QBEHXZ PROC ; CvHandicapInfo::getProductionFreeUnitsPerCity, COMDAT
; _this$ = ecx

; 2915 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2916 : 	return m_iProductionFreeUnitsPerCity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 2917 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getProductionFreeUnitsPerCity@CvHandicapInfo@@QBEHXZ ENDP ; CvHandicapInfo::getProductionFreeUnitsPerCity
_TEXT	ENDS
PUBLIC	?getProductionFreeUnitsPopulationPercent@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getProductionFreeUnitsPopulationPercent
; Function compile flags: /Odtp
;	COMDAT ?getProductionFreeUnitsPopulationPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getProductionFreeUnitsPopulationPercent@CvHandicapInfo@@QBEHXZ PROC ; CvHandicapInfo::getProductionFreeUnitsPopulationPercent, COMDAT
; _this$ = ecx

; 2920 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2921 : 	return m_iProductionFreeUnitsPopulationPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 2922 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getProductionFreeUnitsPopulationPercent@CvHandicapInfo@@QBEHXZ ENDP ; CvHandicapInfo::getProductionFreeUnitsPopulationPercent
_TEXT	ENDS
PUBLIC	?getUnitCostPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getUnitCostPercent
; Function compile flags: /Odtp
;	COMDAT ?getUnitCostPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitCostPercent@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getUnitCostPercent, COMDAT
; _this$ = ecx

; 2925 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2926 : 	return m_iUnitCostPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+312]

; 2927 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitCostPercent@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getUnitCostPercent
_TEXT	ENDS
PUBLIC	?getRouteCostPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getRouteCostPercent
; Function compile flags: /Odtp
;	COMDAT ?getRouteCostPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRouteCostPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getRouteCostPercent, COMDAT
; _this$ = ecx

; 2930 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2931 : 	return m_iRouteCostPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 2932 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRouteCostPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getRouteCostPercent
_TEXT	ENDS
PUBLIC	?getBuildingCostPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getBuildingCostPercent
; Function compile flags: /Odtp
;	COMDAT ?getBuildingCostPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildingCostPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getBuildingCostPercent, COMDAT
; _this$ = ecx

; 2935 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2936 : 	return m_iBuildingCostPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 2937 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildingCostPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getBuildingCostPercent
_TEXT	ENDS
PUBLIC	?getResearchPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getResearchPercent
; Function compile flags: /Odtp
;	COMDAT ?getResearchPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResearchPercent@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getResearchPercent, COMDAT
; _this$ = ecx

; 2940 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2941 : 	return m_iResearchPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]

; 2942 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResearchPercent@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getResearchPercent
_TEXT	ENDS
PUBLIC	?getPolicyPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getPolicyPercent
; Function compile flags: /Odtp
;	COMDAT ?getPolicyPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPolicyPercent@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getPolicyPercent, COMDAT
; _this$ = ecx

; 2945 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2946 : 	return m_iPolicyPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+324]

; 2947 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPolicyPercent@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getPolicyPercent
_TEXT	ENDS
PUBLIC	?getImprovementCostPercent@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getImprovementCostPercent
; Function compile flags: /Odtp
;	COMDAT ?getImprovementCostPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getImprovementCostPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getImprovementCostPercent, COMDAT
; _this$ = ecx

; 2950 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2951 : 	return m_iImprovementCostPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]

; 2952 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getImprovementCostPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getImprovementCostPercent
_TEXT	ENDS
PUBLIC	?GetCityProductionNumOptions@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::GetCityProductionNumOptions
; Function compile flags: /Odtp
;	COMDAT ?GetCityProductionNumOptions@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCityProductionNumOptions@CvHandicapInfo@@QBEHXZ PROC ; CvHandicapInfo::GetCityProductionNumOptions, COMDAT
; _this$ = ecx

; 2955 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2956 : 	return m_iCityProductionNumOptions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+332]

; 2957 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCityProductionNumOptions@CvHandicapInfo@@QBEHXZ ENDP ; CvHandicapInfo::GetCityProductionNumOptions
_TEXT	ENDS
PUBLIC	?GetTechNumOptions@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::GetTechNumOptions
; Function compile flags: /Odtp
;	COMDAT ?GetTechNumOptions@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetTechNumOptions@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::GetTechNumOptions, COMDAT
; _this$ = ecx

; 2960 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2961 : 	return m_iTechNumOptions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+336]

; 2962 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetTechNumOptions@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::GetTechNumOptions
_TEXT	ENDS
PUBLIC	?GetPolicyNumOptions@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::GetPolicyNumOptions
; Function compile flags: /Odtp
;	COMDAT ?GetPolicyNumOptions@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPolicyNumOptions@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::GetPolicyNumOptions, COMDAT
; _this$ = ecx

; 2965 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2966 : 	return m_iPolicyNumOptions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+340]

; 2967 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetPolicyNumOptions@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::GetPolicyNumOptions
_TEXT	ENDS
PUBLIC	?getInflationPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getInflationPercent
; Function compile flags: /Odtp
;	COMDAT ?getInflationPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInflationPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getInflationPercent, COMDAT
; _this$ = ecx

; 2970 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2971 : 	return m_iInflationPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+344]

; 2972 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInflationPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getInflationPercent
_TEXT	ENDS
PUBLIC	?getFreeCulturePerTurn@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getFreeCulturePerTurn
; Function compile flags: /Odtp
;	COMDAT ?getFreeCulturePerTurn@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFreeCulturePerTurn@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getFreeCulturePerTurn, COMDAT
; _this$ = ecx

; 2975 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2976 : 	return m_iFreeCulturePerTurn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]

; 2977 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFreeCulturePerTurn@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getFreeCulturePerTurn
_TEXT	ENDS
PUBLIC	?getAttitudeChange@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAttitudeChange
; Function compile flags: /Odtp
;	COMDAT ?getAttitudeChange@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAttitudeChange@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getAttitudeChange, COMDAT
; _this$ = ecx

; 2980 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2981 : 	return m_iAttitudeChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+352]

; 2982 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAttitudeChange@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getAttitudeChange
_TEXT	ENDS
PUBLIC	?getNoTechTradeModifier@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getNoTechTradeModifier
; Function compile flags: /Odtp
;	COMDAT ?getNoTechTradeModifier@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNoTechTradeModifier@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getNoTechTradeModifier, COMDAT
; _this$ = ecx

; 2985 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2986 : 	return m_iNoTechTradeModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+356]

; 2987 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNoTechTradeModifier@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getNoTechTradeModifier
_TEXT	ENDS
PUBLIC	?getTechTradeKnownModifier@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getTechTradeKnownModifier
; Function compile flags: /Odtp
;	COMDAT ?getTechTradeKnownModifier@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTechTradeKnownModifier@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getTechTradeKnownModifier, COMDAT
; _this$ = ecx

; 2990 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2991 : 	return m_iTechTradeKnownModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+360]

; 2992 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTechTradeKnownModifier@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getTechTradeKnownModifier
_TEXT	ENDS
PUBLIC	?getBarbCampGold@CvHandicapInfo@@QBEHXZ		; CvHandicapInfo::getBarbCampGold
; Function compile flags: /Odtp
;	COMDAT ?getBarbCampGold@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBarbCampGold@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getBarbCampGold, COMDAT
; _this$ = ecx

; 2995 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2996 : 	return m_iBarbCampGold;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+364]

; 2997 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBarbCampGold@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getBarbCampGold
_TEXT	ENDS
PUBLIC	?getBarbSpawnMod@CvHandicapInfo@@QBEHXZ		; CvHandicapInfo::getBarbSpawnMod
; Function compile flags: /Odtp
;	COMDAT ?getBarbSpawnMod@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBarbSpawnMod@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getBarbSpawnMod, COMDAT
; _this$ = ecx

; 3000 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3001 : 	return m_iBarbSpawnMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+368]

; 3002 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBarbSpawnMod@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getBarbSpawnMod
_TEXT	ENDS
PUBLIC	?getBarbarianCombatModifier@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getBarbarianCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?getBarbarianCombatModifier@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBarbarianCombatModifier@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getBarbarianCombatModifier, COMDAT
; _this$ = ecx

; 3005 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3006 : 	return m_iBarbarianCombatModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+372]

; 3007 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBarbarianCombatModifier@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getBarbarianCombatModifier
_TEXT	ENDS
PUBLIC	?getAIBarbarianCombatModifier@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAIBarbarianCombatModifier
; Function compile flags: /Odtp
;	COMDAT ?getAIBarbarianCombatModifier@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIBarbarianCombatModifier@CvHandicapInfo@@QBEHXZ PROC ; CvHandicapInfo::getAIBarbarianCombatModifier, COMDAT
; _this$ = ecx

; 3010 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3011 : 	return m_iAIBarbarianCombatModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+376]

; 3012 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIBarbarianCombatModifier@CvHandicapInfo@@QBEHXZ ENDP ; CvHandicapInfo::getAIBarbarianCombatModifier
_TEXT	ENDS
PUBLIC	?getEarliestBarbarianReleaseTurn@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getEarliestBarbarianReleaseTurn
; Function compile flags: /Odtp
;	COMDAT ?getEarliestBarbarianReleaseTurn@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEarliestBarbarianReleaseTurn@CvHandicapInfo@@QBEHXZ PROC ; CvHandicapInfo::getEarliestBarbarianReleaseTurn, COMDAT
; _this$ = ecx

; 3015 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3016 : 	return m_iEarliestBarbarianReleaseTurn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+380]

; 3017 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEarliestBarbarianReleaseTurn@CvHandicapInfo@@QBEHXZ ENDP ; CvHandicapInfo::getEarliestBarbarianReleaseTurn
_TEXT	ENDS
PUBLIC	?getBarbarianLandTargetRange@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getBarbarianLandTargetRange
; Function compile flags: /Odtp
;	COMDAT ?getBarbarianLandTargetRange@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBarbarianLandTargetRange@CvHandicapInfo@@QBEHXZ PROC ; CvHandicapInfo::getBarbarianLandTargetRange, COMDAT
; _this$ = ecx

; 3020 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3021 : 	return m_iBarbarianLandTargetRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+384]

; 3022 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBarbarianLandTargetRange@CvHandicapInfo@@QBEHXZ ENDP ; CvHandicapInfo::getBarbarianLandTargetRange
_TEXT	ENDS
PUBLIC	?getBarbarianSeaTargetRange@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getBarbarianSeaTargetRange
; Function compile flags: /Odtp
;	COMDAT ?getBarbarianSeaTargetRange@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBarbarianSeaTargetRange@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getBarbarianSeaTargetRange, COMDAT
; _this$ = ecx

; 3025 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3026 : 	return m_iBarbarianSeaTargetRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+388]

; 3027 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBarbarianSeaTargetRange@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getBarbarianSeaTargetRange
_TEXT	ENDS
PUBLIC	?getStartingDefenseUnits@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getStartingDefenseUnits
; Function compile flags: /Odtp
;	COMDAT ?getStartingDefenseUnits@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingDefenseUnits@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getStartingDefenseUnits, COMDAT
; _this$ = ecx

; 3030 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3031 : 	return m_iStartingDefenseUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+392]

; 3032 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingDefenseUnits@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getStartingDefenseUnits
_TEXT	ENDS
PUBLIC	?getStartingWorkerUnits@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getStartingWorkerUnits
; Function compile flags: /Odtp
;	COMDAT ?getStartingWorkerUnits@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingWorkerUnits@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getStartingWorkerUnits, COMDAT
; _this$ = ecx

; 3035 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3036 : 	return m_iStartingWorkerUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+396]

; 3037 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingWorkerUnits@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getStartingWorkerUnits
_TEXT	ENDS
PUBLIC	?getStartingExploreUnits@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getStartingExploreUnits
; Function compile flags: /Odtp
;	COMDAT ?getStartingExploreUnits@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingExploreUnits@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getStartingExploreUnits, COMDAT
; _this$ = ecx

; 3040 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3041 : 	return m_iStartingExploreUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+400]

; 3042 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingExploreUnits@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getStartingExploreUnits
_TEXT	ENDS
PUBLIC	?getAIStartingUnitMultiplier@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAIStartingUnitMultiplier
; Function compile flags: /Odtp
;	COMDAT ?getAIStartingUnitMultiplier@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIStartingUnitMultiplier@CvHandicapInfo@@QBEHXZ PROC ; CvHandicapInfo::getAIStartingUnitMultiplier, COMDAT
; _this$ = ecx

; 3045 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3046 : 	return m_iAIStartingUnitMultiplier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+404]

; 3047 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIStartingUnitMultiplier@CvHandicapInfo@@QBEHXZ ENDP ; CvHandicapInfo::getAIStartingUnitMultiplier
_TEXT	ENDS
PUBLIC	?getAIStartingDefenseUnits@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAIStartingDefenseUnits
; Function compile flags: /Odtp
;	COMDAT ?getAIStartingDefenseUnits@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIStartingDefenseUnits@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIStartingDefenseUnits, COMDAT
; _this$ = ecx

; 3050 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3051 : 	return m_iAIStartingDefenseUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+408]

; 3052 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIStartingDefenseUnits@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIStartingDefenseUnits
_TEXT	ENDS
PUBLIC	?getAIStartingWorkerUnits@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAIStartingWorkerUnits
; Function compile flags: /Odtp
;	COMDAT ?getAIStartingWorkerUnits@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIStartingWorkerUnits@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIStartingWorkerUnits, COMDAT
; _this$ = ecx

; 3055 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3056 : 	return m_iAIStartingWorkerUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+412]

; 3057 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIStartingWorkerUnits@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIStartingWorkerUnits
_TEXT	ENDS
PUBLIC	?getAIStartingExploreUnits@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAIStartingExploreUnits
; Function compile flags: /Odtp
;	COMDAT ?getAIStartingExploreUnits@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIStartingExploreUnits@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIStartingExploreUnits, COMDAT
; _this$ = ecx

; 3060 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3061 : 	return m_iAIStartingExploreUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+416]

; 3062 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIStartingExploreUnits@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIStartingExploreUnits
_TEXT	ENDS
PUBLIC	?getAIDeclareWarProb@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIDeclareWarProb
; Function compile flags: /Odtp
;	COMDAT ?getAIDeclareWarProb@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIDeclareWarProb@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIDeclareWarProb, COMDAT
; _this$ = ecx

; 3065 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3066 : 	return m_iAIDeclareWarProb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+420]

; 3067 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIDeclareWarProb@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIDeclareWarProb
_TEXT	ENDS
PUBLIC	?getAIWorkRateModifier@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIWorkRateModifier
; Function compile flags: /Odtp
;	COMDAT ?getAIWorkRateModifier@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIWorkRateModifier@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIWorkRateModifier, COMDAT
; _this$ = ecx

; 3070 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3071 : 	return m_iAIWorkRateModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+424]

; 3072 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIWorkRateModifier@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIWorkRateModifier
_TEXT	ENDS
PUBLIC	?getAIUnhappinessPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIUnhappinessPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIUnhappinessPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIUnhappinessPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIUnhappinessPercent, COMDAT
; _this$ = ecx

; 3075 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3076 : 	return m_iAIUnhappinessPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+428]

; 3077 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIUnhappinessPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIUnhappinessPercent
_TEXT	ENDS
PUBLIC	?getAIGrowthPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIGrowthPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIGrowthPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIGrowthPercent@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getAIGrowthPercent, COMDAT
; _this$ = ecx

; 3080 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3081 : 	return m_iAIGrowthPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+432]

; 3082 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIGrowthPercent@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getAIGrowthPercent
_TEXT	ENDS
PUBLIC	?getAITrainPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAITrainPercent
; Function compile flags: /Odtp
;	COMDAT ?getAITrainPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAITrainPercent@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getAITrainPercent, COMDAT
; _this$ = ecx

; 3085 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3086 : 	return m_iAITrainPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+436]

; 3087 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAITrainPercent@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getAITrainPercent
_TEXT	ENDS
PUBLIC	?getAIWorldTrainPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIWorldTrainPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIWorldTrainPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIWorldTrainPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIWorldTrainPercent, COMDAT
; _this$ = ecx

; 3090 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3091 : 	return m_iAIWorldTrainPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+440]

; 3092 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIWorldTrainPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIWorldTrainPercent
_TEXT	ENDS
PUBLIC	?getAIConstructPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIConstructPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIConstructPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIConstructPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIConstructPercent, COMDAT
; _this$ = ecx

; 3095 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3096 : 	return m_iAIConstructPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+444]

; 3097 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIConstructPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIConstructPercent
_TEXT	ENDS
PUBLIC	?getAIWorldConstructPercent@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAIWorldConstructPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIWorldConstructPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIWorldConstructPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIWorldConstructPercent, COMDAT
; _this$ = ecx

; 3100 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3101 : 	return m_iAIWorldConstructPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+448]

; 3102 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIWorldConstructPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIWorldConstructPercent
_TEXT	ENDS
PUBLIC	?getAICreatePercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAICreatePercent
; Function compile flags: /Odtp
;	COMDAT ?getAICreatePercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAICreatePercent@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getAICreatePercent, COMDAT
; _this$ = ecx

; 3105 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3106 : 	return m_iAICreatePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+452]

; 3107 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAICreatePercent@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getAICreatePercent
_TEXT	ENDS
PUBLIC	?getAIWorldCreatePercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIWorldCreatePercent
; Function compile flags: /Odtp
;	COMDAT ?getAIWorldCreatePercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIWorldCreatePercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIWorldCreatePercent, COMDAT
; _this$ = ecx

; 3110 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3111 : 	return m_iAIWorldCreatePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+456]

; 3112 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIWorldCreatePercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIWorldCreatePercent
_TEXT	ENDS
PUBLIC	?getAIBuildingCostPercent@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAIBuildingCostPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIBuildingCostPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIBuildingCostPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIBuildingCostPercent, COMDAT
; _this$ = ecx

; 3115 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3116 : 	return m_iAIBuildingCostPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 3117 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIBuildingCostPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIBuildingCostPercent
_TEXT	ENDS
PUBLIC	?getAIUnitCostPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIUnitCostPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIUnitCostPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIUnitCostPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIUnitCostPercent, COMDAT
; _this$ = ecx

; 3120 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3121 : 	return m_iAIUnitCostPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]

; 3122 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIUnitCostPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIUnitCostPercent
_TEXT	ENDS
PUBLIC	?getAIUnitSupplyPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIUnitSupplyPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIUnitSupplyPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIUnitSupplyPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIUnitSupplyPercent, COMDAT
; _this$ = ecx

; 3125 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3126 : 	return m_iAIUnitSupplyPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+468]

; 3127 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIUnitSupplyPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIUnitSupplyPercent
_TEXT	ENDS
PUBLIC	?getAIUnitUpgradePercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIUnitUpgradePercent
; Function compile flags: /Odtp
;	COMDAT ?getAIUnitUpgradePercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIUnitUpgradePercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIUnitUpgradePercent, COMDAT
; _this$ = ecx

; 3130 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3131 : 	return m_iAIUnitUpgradePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+472]

; 3132 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIUnitUpgradePercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIUnitUpgradePercent
_TEXT	ENDS
PUBLIC	?getAIInflationPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIInflationPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIInflationPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIInflationPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIInflationPercent, COMDAT
; _this$ = ecx

; 3135 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3136 : 	return m_iAIInflationPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+476]

; 3137 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIInflationPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIInflationPercent
_TEXT	ENDS
PUBLIC	?getAIPerEraModifier@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIPerEraModifier
; Function compile flags: /Odtp
;	COMDAT ?getAIPerEraModifier@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIPerEraModifier@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIPerEraModifier, COMDAT
; _this$ = ecx

; 3140 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3141 : 	return m_iAIPerEraModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+480]

; 3142 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIPerEraModifier@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIPerEraModifier
_TEXT	ENDS
PUBLIC	?getAIAdvancedStartPercent@CvHandicapInfo@@QBEHXZ ; CvHandicapInfo::getAIAdvancedStartPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIAdvancedStartPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIAdvancedStartPercent@CvHandicapInfo@@QBEHXZ PROC	; CvHandicapInfo::getAIAdvancedStartPercent, COMDAT
; _this$ = ecx

; 3145 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3146 : 	return m_iAIAdvancedStartPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+484]

; 3147 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIAdvancedStartPercent@CvHandicapInfo@@QBEHXZ ENDP	; CvHandicapInfo::getAIAdvancedStartPercent
_TEXT	ENDS
PUBLIC	?getAIFreeXP@CvHandicapInfo@@QBEHXZ		; CvHandicapInfo::getAIFreeXP
; Function compile flags: /Odtp
;	COMDAT ?getAIFreeXP@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIFreeXP@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getAIFreeXP, COMDAT
; _this$ = ecx

; 3150 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3151 : 	return m_iAIFreeXP;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+488]

; 3152 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIFreeXP@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getAIFreeXP
_TEXT	ENDS
PUBLIC	?getAIFreeXPPercent@CvHandicapInfo@@QBEHXZ	; CvHandicapInfo::getAIFreeXPPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIFreeXPPercent@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIFreeXPPercent@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getAIFreeXPPercent, COMDAT
; _this$ = ecx

; 3155 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3156 : 	return m_iAIFreeXPPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+492]

; 3157 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIFreeXPPercent@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getAIFreeXPPercent
_TEXT	ENDS
PUBLIC	?getNumGoodies@CvHandicapInfo@@QBEHXZ		; CvHandicapInfo::getNumGoodies
; Function compile flags: /Odtp
;	COMDAT ?getNumGoodies@CvHandicapInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumGoodies@CvHandicapInfo@@QBEHXZ PROC		; CvHandicapInfo::getNumGoodies, COMDAT
; _this$ = ecx

; 3160 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3161 : 	return m_iNumGoodies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+496]

; 3162 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumGoodies@CvHandicapInfo@@QBEHXZ ENDP		; CvHandicapInfo::getNumGoodies
_TEXT	ENDS
PUBLIC	?getGoodies@CvHandicapInfo@@QBEHH@Z		; CvHandicapInfo::getGoodies
; Function compile flags: /Odtp
;	COMDAT ?getGoodies@CvHandicapInfo@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getGoodies@CvHandicapInfo@@QBEHH@Z PROC		; CvHandicapInfo::getGoodies, COMDAT
; _this$ = ecx

; 3165 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3166 : 	CvAssertMsg(i < getNumGoodies(), "Index out of bounds");
; 3167 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3168 : 	return m_piGoodies[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+528]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 3169 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getGoodies@CvHandicapInfo@@QBEHH@Z ENDP		; CvHandicapInfo::getGoodies
_TEXT	ENDS
PUBLIC	?isFreeTechs@CvHandicapInfo@@QBEHH@Z		; CvHandicapInfo::isFreeTechs
; Function compile flags: /Odtp
;	COMDAT ?isFreeTechs@CvHandicapInfo@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isFreeTechs@CvHandicapInfo@@QBEHH@Z PROC		; CvHandicapInfo::isFreeTechs, COMDAT
; _this$ = ecx

; 3172 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3173 : 	CvAssertMsg(i < GC.getNumTechInfos(), "Index out of bounds");
; 3174 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3175 : 	return m_pbFreeTechs[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+532]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]

; 3176 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isFreeTechs@CvHandicapInfo@@QBEHH@Z ENDP		; CvHandicapInfo::isFreeTechs
_TEXT	ENDS
PUBLIC	?isAIFreeTechs@CvHandicapInfo@@QBEHH@Z		; CvHandicapInfo::isAIFreeTechs
; Function compile flags: /Odtp
;	COMDAT ?isAIFreeTechs@CvHandicapInfo@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isAIFreeTechs@CvHandicapInfo@@QBEHH@Z PROC		; CvHandicapInfo::isAIFreeTechs, COMDAT
; _this$ = ecx

; 3179 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3180 : 	CvAssertMsg(i < GC.getNumTechInfos(), "Index out of bounds");
; 3181 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3182 : 	return m_pbAIFreeTechs[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+536]
	mov	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]

; 3183 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isAIFreeTechs@CvHandicapInfo@@QBEHH@Z ENDP		; CvHandicapInfo::isAIFreeTechs
_TEXT	ENDS
PUBLIC	??1SingleResult@Database@@UAE@XZ		; Database::SingleResult::~SingleResult
PUBLIC	??_C@_0BJ@BGMEEKND@HandicapInfo_AIFreeTechs?$AA@ ; `string'
PUBLIC	??_C@_0BH@NKNIHECF@HandicapInfo_FreeTechs?$AA@	; `string'
PUBLIC	??$sprintf_s@$0CAA@@@YAHAAY0CAA@DPBDZZ		; sprintf_s<512>
PUBLIC	??_C@_0HM@OCKKFPKF@select?5GoodyHuts?4ID?5from?5Handica@ ; `string'
PUBLIC	??_C@_0BF@CMOCEIEF@HandicapInfo_Goodies?$AA@	; `string'
PUBLIC	??_C@_0N@GBMEGJHA@HandicapType?$AA@		; `string'
PUBLIC	??_C@_08OBDFOIIC@count?$CI?$CK?$CJ?$AA@		; `string'
PUBLIC	??_C@_0BA@BENJAAMJ@AIFreeXPPercent?$AA@		; `string'
PUBLIC	??_C@_08CMCBEAK@AIFreeXP?$AA@			; `string'
PUBLIC	??_C@_0BH@BKINCGNK@AIAdvancedStartPercent?$AA@	; `string'
PUBLIC	??_C@_0BB@GEMJIAM@AIPerEraModifier?$AA@		; `string'
PUBLIC	??_C@_0BD@GEIDFPGB@AIInflationPercent?$AA@	; `string'
PUBLIC	??_C@_0BF@DNLGHKEH@AIUnitUpgradePercent?$AA@	; `string'
PUBLIC	??_C@_0BE@LJMBFPNK@AIUnitSupplyPercent?$AA@	; `string'
PUBLIC	??_C@_0BC@JBJCPOAD@AIUnitCostPercent?$AA@	; `string'
PUBLIC	??_C@_0BG@EMBGIJFA@AIBuildingCostPercent?$AA@	; `string'
PUBLIC	??_C@_0BF@MFFCGNOF@AIWorldCreatePercent?$AA@	; `string'
PUBLIC	??_C@_0BA@BBGEHLOF@AICreatePercent?$AA@		; `string'
PUBLIC	??_C@_0BI@BFGBLLGK@AIWorldConstructPercent?$AA@	; `string'
PUBLIC	??_C@_0BD@MGEDJLPA@AIConstructPercent?$AA@	; `string'
PUBLIC	??_C@_0BE@BJMKEJN@AIWorldTrainPercent?$AA@	; `string'
PUBLIC	??_C@_0P@IMLKEGPO@AITrainPercent?$AA@		; `string'
PUBLIC	??_C@_0BA@FFPDPFEA@AIGrowthPercent?$AA@		; `string'
PUBLIC	??_C@_0BF@MEKJKMLM@AIUnhappinessPercent?$AA@	; `string'
PUBLIC	??_C@_0BD@JLMLIDAL@AIWorkRateModifier?$AA@	; `string'
PUBLIC	??_C@_0BB@GFNCNLIE@AIDeclareWarProb?$AA@	; `string'
PUBLIC	??_C@_0BH@JPEHAJMP@AIStartingExploreUnits?$AA@	; `string'
PUBLIC	??_C@_0BG@LDLIFJLA@AIStartingWorkerUnits?$AA@	; `string'
PUBLIC	??_C@_0BH@LBOBANMH@AIStartingDefenseUnits?$AA@	; `string'
PUBLIC	??_C@_0BJ@KOCGNOOB@AIStartingUnitMultiplier?$AA@ ; `string'
PUBLIC	??_C@_0BF@FGHPHKOD@StartingExploreUnits?$AA@	; `string'
PUBLIC	??_C@_0BE@IHOLPDMD@StartingWorkerUnits?$AA@	; `string'
PUBLIC	??_C@_0BF@HINJHOOL@StartingDefenseUnits?$AA@	; `string'
PUBLIC	??_C@_0BI@CPKGOMO@BarbarianSeaTargetRange?$AA@	; `string'
PUBLIC	??_C@_0BJ@OBKJCKPE@BarbarianLandTargetRange?$AA@ ; `string'
PUBLIC	??_C@_0BN@HBEHMLNE@EarliestBarbarianReleaseTurn?$AA@ ; `string'
PUBLIC	??_C@_0BB@PCFGDAEA@AIBarbarianBonus?$AA@	; `string'
PUBLIC	??_C@_0P@MFIPJEIJ@BarbarianBonus?$AA@		; `string'
PUBLIC	??_C@_0N@DMPOHPPM@BarbSpawnMod?$AA@		; `string'
PUBLIC	??_C@_0N@DOCGMCGN@BarbCampGold?$AA@		; `string'
PUBLIC	??_C@_0BH@PECHDOBL@TechTradeKnownModifier?$AA@	; `string'
PUBLIC	??_C@_0BE@IEKMLMEE@NoTechTradeModifier?$AA@	; `string'
PUBLIC	??_C@_0P@BLLLEPNL@AttitudeChange?$AA@		; `string'
PUBLIC	??_C@_0BD@GHIFEAHC@FreeCulturePerTurn?$AA@	; `string'
PUBLIC	??_C@_0BB@KPAAGDEO@InflationPercent?$AA@	; `string'
PUBLIC	??_C@_0BL@MCKJLOHM@PolicyNumOptionsConsidered?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MKMIBFGN@TechNumOptionsConsidered?$AA@ ; `string'
PUBLIC	??_C@_0CD@IGLNODMK@CityProductionNumOptionsConsider@ ; `string'
PUBLIC	??_C@_0BH@LPKCPMPK@ImprovementCostPercent?$AA@	; `string'
PUBLIC	??_C@_0O@FBOPGNDN@PolicyPercent?$AA@		; `string'
PUBLIC	??_C@_0BA@HBDGGGLG@ResearchPercent?$AA@		; `string'
PUBLIC	??_C@_0BE@HIEFCDCD@BuildingCostPercent?$AA@	; `string'
PUBLIC	??_C@_0BA@HDBNFNLD@UnitCostPercent?$AA@		; `string'
PUBLIC	??_C@_0BB@OPIGHOAD@RouteCostPercent?$AA@	; `string'
PUBLIC	??_C@_0CF@KEHKBMJA@ProductionFreeUnitsPopulationPer@ ; `string'
PUBLIC	??_C@_0BL@EFCJIIIE@ProductionFreeUnitsPerCity?$AA@ ; `string'
PUBLIC	??_C@_0BE@ILHLGEDE@ProductionFreeUnits?$AA@	; `string'
PUBLIC	??_C@_0O@IJBHEDCA@GoldFreeUnits?$AA@		; `string'
PUBLIC	??_C@_04PABHPHAJ@Gold?$AA@			; `string'
PUBLIC	??_C@_0BJ@LFNHMPJE@PopulationUnhappinessMod?$AA@ ; `string'
PUBLIC	??_C@_0BI@HDMMNECN@NumCitiesUnhappinessMod?$AA@	; `string'
PUBLIC	??_C@_0BI@KDPCJKIO@ExtraHappinessPerLuxury?$AA@	; `string'
PUBLIC	??_C@_0BB@BDFDAGHB@HappinessDefault?$AA@	; `string'
PUBLIC	??_C@_0BF@OABFDME@StartingPolicyPoints?$AA@	; `string'
PUBLIC	??_C@_0BH@BDAMOBEO@AdvancedStartPointsMod?$AA@	; `string'
PUBLIC	??_C@_0BD@DILILHCD@StartingLocPercent?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z:PROC
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	__imp_??0SingleResult@Database@@QAE@PBD@Z:PROC
;	COMDAT ??_C@_0BJ@BGMEEKND@HandicapInfo_AIFreeTechs?$AA@
CONST	SEGMENT
??_C@_0BJ@BGMEEKND@HandicapInfo_AIFreeTechs?$AA@ DB 'HandicapInfo_AIFreeT'
	DB	'echs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NKNIHECF@HandicapInfo_FreeTechs?$AA@
CONST	SEGMENT
??_C@_0BH@NKNIHECF@HandicapInfo_FreeTechs?$AA@ DB 'HandicapInfo_FreeTechs'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0HM@OCKKFPKF@select?5GoodyHuts?4ID?5from?5Handica@
CONST	SEGMENT
??_C@_0HM@OCKKFPKF@select?5GoodyHuts?4ID?5from?5Handica@ DB 'select Goody'
	DB	'Huts.ID from HandicapInfo_Goodies inner join GoodyHuts on Goo'
	DB	'dyType = GoodyHuts.Type where HandicapType = ''%s'';', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CMOCEIEF@HandicapInfo_Goodies?$AA@
CONST	SEGMENT
??_C@_0BF@CMOCEIEF@HandicapInfo_Goodies?$AA@ DB 'HandicapInfo_Goodies', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GBMEGJHA@HandicapType?$AA@
CONST	SEGMENT
??_C@_0N@GBMEGJHA@HandicapType?$AA@ DB 'HandicapType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OBDFOIIC@count?$CI?$CK?$CJ?$AA@
CONST	SEGMENT
??_C@_08OBDFOIIC@count?$CI?$CK?$CJ?$AA@ DB 'count(*)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BENJAAMJ@AIFreeXPPercent?$AA@
CONST	SEGMENT
??_C@_0BA@BENJAAMJ@AIFreeXPPercent?$AA@ DB 'AIFreeXPPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMCBEAK@AIFreeXP?$AA@
CONST	SEGMENT
??_C@_08CMCBEAK@AIFreeXP?$AA@ DB 'AIFreeXP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BKINCGNK@AIAdvancedStartPercent?$AA@
CONST	SEGMENT
??_C@_0BH@BKINCGNK@AIAdvancedStartPercent?$AA@ DB 'AIAdvancedStartPercent'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GEMJIAM@AIPerEraModifier?$AA@
CONST	SEGMENT
??_C@_0BB@GEMJIAM@AIPerEraModifier?$AA@ DB 'AIPerEraModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GEIDFPGB@AIInflationPercent?$AA@
CONST	SEGMENT
??_C@_0BD@GEIDFPGB@AIInflationPercent?$AA@ DB 'AIInflationPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DNLGHKEH@AIUnitUpgradePercent?$AA@
CONST	SEGMENT
??_C@_0BF@DNLGHKEH@AIUnitUpgradePercent?$AA@ DB 'AIUnitUpgradePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LJMBFPNK@AIUnitSupplyPercent?$AA@
CONST	SEGMENT
??_C@_0BE@LJMBFPNK@AIUnitSupplyPercent?$AA@ DB 'AIUnitSupplyPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBJCPOAD@AIUnitCostPercent?$AA@
CONST	SEGMENT
??_C@_0BC@JBJCPOAD@AIUnitCostPercent?$AA@ DB 'AIUnitCostPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EMBGIJFA@AIBuildingCostPercent?$AA@
CONST	SEGMENT
??_C@_0BG@EMBGIJFA@AIBuildingCostPercent?$AA@ DB 'AIBuildingCostPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MFFCGNOF@AIWorldCreatePercent?$AA@
CONST	SEGMENT
??_C@_0BF@MFFCGNOF@AIWorldCreatePercent?$AA@ DB 'AIWorldCreatePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BBGEHLOF@AICreatePercent?$AA@
CONST	SEGMENT
??_C@_0BA@BBGEHLOF@AICreatePercent?$AA@ DB 'AICreatePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BFGBLLGK@AIWorldConstructPercent?$AA@
CONST	SEGMENT
??_C@_0BI@BFGBLLGK@AIWorldConstructPercent?$AA@ DB 'AIWorldConstructPerce'
	DB	'nt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MGEDJLPA@AIConstructPercent?$AA@
CONST	SEGMENT
??_C@_0BD@MGEDJLPA@AIConstructPercent?$AA@ DB 'AIConstructPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BJMKEJN@AIWorldTrainPercent?$AA@
CONST	SEGMENT
??_C@_0BE@BJMKEJN@AIWorldTrainPercent?$AA@ DB 'AIWorldTrainPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMLKEGPO@AITrainPercent?$AA@
CONST	SEGMENT
??_C@_0P@IMLKEGPO@AITrainPercent?$AA@ DB 'AITrainPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FFPDPFEA@AIGrowthPercent?$AA@
CONST	SEGMENT
??_C@_0BA@FFPDPFEA@AIGrowthPercent?$AA@ DB 'AIGrowthPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MEKJKMLM@AIUnhappinessPercent?$AA@
CONST	SEGMENT
??_C@_0BF@MEKJKMLM@AIUnhappinessPercent?$AA@ DB 'AIUnhappinessPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JLMLIDAL@AIWorkRateModifier?$AA@
CONST	SEGMENT
??_C@_0BD@JLMLIDAL@AIWorkRateModifier?$AA@ DB 'AIWorkRateModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GFNCNLIE@AIDeclareWarProb?$AA@
CONST	SEGMENT
??_C@_0BB@GFNCNLIE@AIDeclareWarProb?$AA@ DB 'AIDeclareWarProb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JPEHAJMP@AIStartingExploreUnits?$AA@
CONST	SEGMENT
??_C@_0BH@JPEHAJMP@AIStartingExploreUnits?$AA@ DB 'AIStartingExploreUnits'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LDLIFJLA@AIStartingWorkerUnits?$AA@
CONST	SEGMENT
??_C@_0BG@LDLIFJLA@AIStartingWorkerUnits?$AA@ DB 'AIStartingWorkerUnits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LBOBANMH@AIStartingDefenseUnits?$AA@
CONST	SEGMENT
??_C@_0BH@LBOBANMH@AIStartingDefenseUnits?$AA@ DB 'AIStartingDefenseUnits'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KOCGNOOB@AIStartingUnitMultiplier?$AA@
CONST	SEGMENT
??_C@_0BJ@KOCGNOOB@AIStartingUnitMultiplier?$AA@ DB 'AIStartingUnitMultip'
	DB	'lier', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FGHPHKOD@StartingExploreUnits?$AA@
CONST	SEGMENT
??_C@_0BF@FGHPHKOD@StartingExploreUnits?$AA@ DB 'StartingExploreUnits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IHOLPDMD@StartingWorkerUnits?$AA@
CONST	SEGMENT
??_C@_0BE@IHOLPDMD@StartingWorkerUnits?$AA@ DB 'StartingWorkerUnits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HINJHOOL@StartingDefenseUnits?$AA@
CONST	SEGMENT
??_C@_0BF@HINJHOOL@StartingDefenseUnits?$AA@ DB 'StartingDefenseUnits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPKGOMO@BarbarianSeaTargetRange?$AA@
CONST	SEGMENT
??_C@_0BI@CPKGOMO@BarbarianSeaTargetRange?$AA@ DB 'BarbarianSeaTargetRang'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OBKJCKPE@BarbarianLandTargetRange?$AA@
CONST	SEGMENT
??_C@_0BJ@OBKJCKPE@BarbarianLandTargetRange?$AA@ DB 'BarbarianLandTargetR'
	DB	'ange', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HBEHMLNE@EarliestBarbarianReleaseTurn?$AA@
CONST	SEGMENT
??_C@_0BN@HBEHMLNE@EarliestBarbarianReleaseTurn?$AA@ DB 'EarliestBarbaria'
	DB	'nReleaseTurn', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PCFGDAEA@AIBarbarianBonus?$AA@
CONST	SEGMENT
??_C@_0BB@PCFGDAEA@AIBarbarianBonus?$AA@ DB 'AIBarbarianBonus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MFIPJEIJ@BarbarianBonus?$AA@
CONST	SEGMENT
??_C@_0P@MFIPJEIJ@BarbarianBonus?$AA@ DB 'BarbarianBonus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DMPOHPPM@BarbSpawnMod?$AA@
CONST	SEGMENT
??_C@_0N@DMPOHPPM@BarbSpawnMod?$AA@ DB 'BarbSpawnMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DOCGMCGN@BarbCampGold?$AA@
CONST	SEGMENT
??_C@_0N@DOCGMCGN@BarbCampGold?$AA@ DB 'BarbCampGold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PECHDOBL@TechTradeKnownModifier?$AA@
CONST	SEGMENT
??_C@_0BH@PECHDOBL@TechTradeKnownModifier?$AA@ DB 'TechTradeKnownModifier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IEKMLMEE@NoTechTradeModifier?$AA@
CONST	SEGMENT
??_C@_0BE@IEKMLMEE@NoTechTradeModifier?$AA@ DB 'NoTechTradeModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BLLLEPNL@AttitudeChange?$AA@
CONST	SEGMENT
??_C@_0P@BLLLEPNL@AttitudeChange?$AA@ DB 'AttitudeChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHIFEAHC@FreeCulturePerTurn?$AA@
CONST	SEGMENT
??_C@_0BD@GHIFEAHC@FreeCulturePerTurn?$AA@ DB 'FreeCulturePerTurn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KPAAGDEO@InflationPercent?$AA@
CONST	SEGMENT
??_C@_0BB@KPAAGDEO@InflationPercent?$AA@ DB 'InflationPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MCKJLOHM@PolicyNumOptionsConsidered?$AA@
CONST	SEGMENT
??_C@_0BL@MCKJLOHM@PolicyNumOptionsConsidered?$AA@ DB 'PolicyNumOptionsCo'
	DB	'nsidered', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MKMIBFGN@TechNumOptionsConsidered?$AA@
CONST	SEGMENT
??_C@_0BJ@MKMIBFGN@TechNumOptionsConsidered?$AA@ DB 'TechNumOptionsConsid'
	DB	'ered', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IGLNODMK@CityProductionNumOptionsConsider@
CONST	SEGMENT
??_C@_0CD@IGLNODMK@CityProductionNumOptionsConsider@ DB 'CityProductionNu'
	DB	'mOptionsConsidered', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LPKCPMPK@ImprovementCostPercent?$AA@
CONST	SEGMENT
??_C@_0BH@LPKCPMPK@ImprovementCostPercent?$AA@ DB 'ImprovementCostPercent'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FBOPGNDN@PolicyPercent?$AA@
CONST	SEGMENT
??_C@_0O@FBOPGNDN@PolicyPercent?$AA@ DB 'PolicyPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HBDGGGLG@ResearchPercent?$AA@
CONST	SEGMENT
??_C@_0BA@HBDGGGLG@ResearchPercent?$AA@ DB 'ResearchPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HIEFCDCD@BuildingCostPercent?$AA@
CONST	SEGMENT
??_C@_0BE@HIEFCDCD@BuildingCostPercent?$AA@ DB 'BuildingCostPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HDBNFNLD@UnitCostPercent?$AA@
CONST	SEGMENT
??_C@_0BA@HDBNFNLD@UnitCostPercent?$AA@ DB 'UnitCostPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OPIGHOAD@RouteCostPercent?$AA@
CONST	SEGMENT
??_C@_0BB@OPIGHOAD@RouteCostPercent?$AA@ DB 'RouteCostPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KEHKBMJA@ProductionFreeUnitsPopulationPer@
CONST	SEGMENT
??_C@_0CF@KEHKBMJA@ProductionFreeUnitsPopulationPer@ DB 'ProductionFreeUn'
	DB	'itsPopulationPercent', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EFCJIIIE@ProductionFreeUnitsPerCity?$AA@
CONST	SEGMENT
??_C@_0BL@EFCJIIIE@ProductionFreeUnitsPerCity?$AA@ DB 'ProductionFreeUnit'
	DB	'sPerCity', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ILHLGEDE@ProductionFreeUnits?$AA@
CONST	SEGMENT
??_C@_0BE@ILHLGEDE@ProductionFreeUnits?$AA@ DB 'ProductionFreeUnits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IJBHEDCA@GoldFreeUnits?$AA@
CONST	SEGMENT
??_C@_0O@IJBHEDCA@GoldFreeUnits?$AA@ DB 'GoldFreeUnits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PABHPHAJ@Gold?$AA@
CONST	SEGMENT
??_C@_04PABHPHAJ@Gold?$AA@ DB 'Gold', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFNHMPJE@PopulationUnhappinessMod?$AA@
CONST	SEGMENT
??_C@_0BJ@LFNHMPJE@PopulationUnhappinessMod?$AA@ DB 'PopulationUnhappines'
	DB	'sMod', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HDMMNECN@NumCitiesUnhappinessMod?$AA@
CONST	SEGMENT
??_C@_0BI@HDMMNECN@NumCitiesUnhappinessMod?$AA@ DB 'NumCitiesUnhappinessM'
	DB	'od', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KDPCJKIO@ExtraHappinessPerLuxury?$AA@
CONST	SEGMENT
??_C@_0BI@KDPCJKIO@ExtraHappinessPerLuxury?$AA@ DB 'ExtraHappinessPerLuxu'
	DB	'ry', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BDFDAGHB@HappinessDefault?$AA@
CONST	SEGMENT
??_C@_0BB@BDFDAGHB@HappinessDefault?$AA@ DB 'HappinessDefault', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OABFDME@StartingPolicyPoints?$AA@
CONST	SEGMENT
??_C@_0BF@OABFDME@StartingPolicyPoints?$AA@ DB 'StartingPolicyPoints', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BDAMOBEO@AdvancedStartPointsMod?$AA@
CONST	SEGMENT
??_C@_0BH@BDAMOBEO@AdvancedStartPointsMod?$AA@ DB 'AdvancedStartPointsMod'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DILILHCD@StartingLocPercent?$AA@
CONST	SEGMENT
??_C@_0BD@DILILHCD@StartingLocPercent?$AA@ DB 'StartingLocPercent', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
__ehfuncinfo$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -680						; size = 4
$T232051 = -676						; size = 4
$T232047 = -672						; size = 4
$T232038 = -668						; size = 4
_i$219493 = -664					; size = 4
_kCount$219477 = -660					; size = 64
_kArrayResults$219484 = -596				; size = 64
_szSQL$219485 = -532					; size = 512
__$ArrayPad$ = -20					; size = 4
_szHandicapType$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvHandicapInfo::CacheResults, COMDAT
; _this$ = ecx

; 3186 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 668				; 0000029cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3187 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@CacheResul@16

; 3188 : 		return false;

	xor	al, al
	jmp	$LN6@CacheResul@16
$LN5@CacheResul@16:

; 3189 : 
; 3190 : 	m_iStartingLocationPercent = kResults.GetInt("StartingLocPercent");

	push	OFFSET ??_C@_0BD@DILILHCD@StartingLocPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 3191 : 	m_iAdvancedStartPointsMod = kResults.GetInt("AdvancedStartPointsMod");

	push	OFFSET ??_C@_0BH@BDAMOBEO@AdvancedStartPointsMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 3192 : 	m_iStartingPolicyPoints = kResults.GetInt("StartingPolicyPoints");

	push	OFFSET ??_C@_0BF@OABFDME@StartingPolicyPoints?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 3193 : 	m_iHappinessDefault = kResults.GetInt("HappinessDefault");

	push	OFFSET ??_C@_0BB@BDFDAGHB@HappinessDefault?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 3194 : 	m_iExtraHappinessPerLuxury = kResults.GetInt("ExtraHappinessPerLuxury");

	push	OFFSET ??_C@_0BI@KDPCJKIO@ExtraHappinessPerLuxury?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 3195 : 	m_iNumCitiesUnhappinessMod = kResults.GetInt("NumCitiesUnhappinessMod");

	push	OFFSET ??_C@_0BI@HDMMNECN@NumCitiesUnhappinessMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 3196 : 	m_iPopulationUnhappinessMod = kResults.GetInt("PopulationUnhappinessMod");

	push	OFFSET ??_C@_0BJ@LFNHMPJE@PopulationUnhappinessMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 3197 : 	m_iStartingGold = kResults.GetInt("Gold");

	push	OFFSET ??_C@_04PABHPHAJ@Gold?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], eax

; 3198 : 	m_iGoldFreeUnits = kResults.GetInt("GoldFreeUnits");

	push	OFFSET ??_C@_0O@IJBHEDCA@GoldFreeUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], eax

; 3199 : 	m_iProductionFreeUnits = kResults.GetInt("ProductionFreeUnits");

	push	OFFSET ??_C@_0BE@ILHLGEDE@ProductionFreeUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], eax

; 3200 : 	m_iProductionFreeUnitsPerCity = kResults.GetInt("ProductionFreeUnitsPerCity");

	push	OFFSET ??_C@_0BL@EFCJIIIE@ProductionFreeUnitsPerCity?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax

; 3201 : 	m_iProductionFreeUnitsPopulationPercent = kResults.GetInt("ProductionFreeUnitsPopulationPercent");

	push	OFFSET ??_C@_0CF@KEHKBMJA@ProductionFreeUnitsPopulationPer@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+304], eax

; 3202 : 	m_iRouteCostPercent = kResults.GetInt("RouteCostPercent");

	push	OFFSET ??_C@_0BB@OPIGHOAD@RouteCostPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], eax

; 3203 : 	m_iUnitCostPercent = kResults.GetInt("UnitCostPercent");

	push	OFFSET ??_C@_0BA@HDBNFNLD@UnitCostPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], eax

; 3204 : 	m_iBuildingCostPercent = kResults.GetInt("BuildingCostPercent");

	push	OFFSET ??_C@_0BE@HIEFCDCD@BuildingCostPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 3205 : 	m_iResearchPercent = kResults.GetInt("ResearchPercent");

	push	OFFSET ??_C@_0BA@HBDGGGLG@ResearchPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], eax

; 3206 : 	m_iPolicyPercent = kResults.GetInt("PolicyPercent");

	push	OFFSET ??_C@_0O@FBOPGNDN@PolicyPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+324], eax

; 3207 : 	m_iImprovementCostPercent = kResults.GetInt("ImprovementCostPercent");

	push	OFFSET ??_C@_0BH@LPKCPMPK@ImprovementCostPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+328], eax

; 3208 : 	m_iCityProductionNumOptions = kResults.GetInt("CityProductionNumOptionsConsidered");

	push	OFFSET ??_C@_0CD@IGLNODMK@CityProductionNumOptionsConsider@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], eax

; 3209 : 	m_iTechNumOptions = kResults.GetInt("TechNumOptionsConsidered");

	push	OFFSET ??_C@_0BJ@MKMIBFGN@TechNumOptionsConsidered?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], eax

; 3210 : 	m_iPolicyNumOptions = kResults.GetInt("PolicyNumOptionsConsidered");

	push	OFFSET ??_C@_0BL@MCKJLOHM@PolicyNumOptionsConsidered?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+340], eax

; 3211 : 	m_iInflationPercent = kResults.GetInt("InflationPercent");

	push	OFFSET ??_C@_0BB@KPAAGDEO@InflationPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+344], eax

; 3212 : 	m_iFreeCulturePerTurn = kResults.GetInt("FreeCulturePerTurn");

	push	OFFSET ??_C@_0BD@GHIFEAHC@FreeCulturePerTurn?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+348], eax

; 3213 : 	m_iAttitudeChange = kResults.GetInt("AttitudeChange");

	push	OFFSET ??_C@_0P@BLLLEPNL@AttitudeChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+352], eax

; 3214 : 	m_iNoTechTradeModifier = kResults.GetInt("NoTechTradeModifier");

	push	OFFSET ??_C@_0BE@IEKMLMEE@NoTechTradeModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+356], eax

; 3215 : 	m_iTechTradeKnownModifier = kResults.GetInt("TechTradeKnownModifier");

	push	OFFSET ??_C@_0BH@PECHDOBL@TechTradeKnownModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+360], eax

; 3216 : 	m_iBarbCampGold = kResults.GetInt("BarbCampGold");

	push	OFFSET ??_C@_0N@DOCGMCGN@BarbCampGold?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+364], eax

; 3217 : 	m_iBarbSpawnMod = kResults.GetInt("BarbSpawnMod");

	push	OFFSET ??_C@_0N@DMPOHPPM@BarbSpawnMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+368], eax

; 3218 : 	m_iBarbarianCombatModifier = kResults.GetInt("BarbarianBonus");

	push	OFFSET ??_C@_0P@MFIPJEIJ@BarbarianBonus?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+372], eax

; 3219 : 	m_iAIBarbarianCombatModifier = kResults.GetInt("AIBarbarianBonus");

	push	OFFSET ??_C@_0BB@PCFGDAEA@AIBarbarianBonus?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+376], eax

; 3220 : 	m_iEarliestBarbarianReleaseTurn = kResults.GetInt("EarliestBarbarianReleaseTurn");

	push	OFFSET ??_C@_0BN@HBEHMLNE@EarliestBarbarianReleaseTurn?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+380], eax

; 3221 : 	m_iBarbarianLandTargetRange = kResults.GetInt("BarbarianLandTargetRange");

	push	OFFSET ??_C@_0BJ@OBKJCKPE@BarbarianLandTargetRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+384], eax

; 3222 : 	m_iBarbarianSeaTargetRange = kResults.GetInt("BarbarianSeaTargetRange");

	push	OFFSET ??_C@_0BI@CPKGOMO@BarbarianSeaTargetRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+388], eax

; 3223 : 	m_iStartingDefenseUnits = kResults.GetInt("StartingDefenseUnits");

	push	OFFSET ??_C@_0BF@HINJHOOL@StartingDefenseUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+392], eax

; 3224 : 	m_iStartingWorkerUnits = kResults.GetInt("StartingWorkerUnits");

	push	OFFSET ??_C@_0BE@IHOLPDMD@StartingWorkerUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+396], eax

; 3225 : 	m_iStartingExploreUnits = kResults.GetInt("StartingExploreUnits");

	push	OFFSET ??_C@_0BF@FGHPHKOD@StartingExploreUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+400], eax

; 3226 : 	m_iAIStartingUnitMultiplier = kResults.GetInt("AIStartingUnitMultiplier");

	push	OFFSET ??_C@_0BJ@KOCGNOOB@AIStartingUnitMultiplier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+404], eax

; 3227 : 	m_iAIStartingDefenseUnits = kResults.GetInt("AIStartingDefenseUnits");

	push	OFFSET ??_C@_0BH@LBOBANMH@AIStartingDefenseUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+408], eax

; 3228 : 	m_iAIStartingWorkerUnits = kResults.GetInt("AIStartingWorkerUnits");

	push	OFFSET ??_C@_0BG@LDLIFJLA@AIStartingWorkerUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+412], eax

; 3229 : 	m_iAIStartingExploreUnits = kResults.GetInt("AIStartingExploreUnits");

	push	OFFSET ??_C@_0BH@JPEHAJMP@AIStartingExploreUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+416], eax

; 3230 : 	m_iAIDeclareWarProb = kResults.GetInt("AIDeclareWarProb");

	push	OFFSET ??_C@_0BB@GFNCNLIE@AIDeclareWarProb?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+420], eax

; 3231 : 	m_iAIWorkRateModifier = kResults.GetInt("AIWorkRateModifier");

	push	OFFSET ??_C@_0BD@JLMLIDAL@AIWorkRateModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+424], eax

; 3232 : 	m_iAIUnhappinessPercent = kResults.GetInt("AIUnhappinessPercent");

	push	OFFSET ??_C@_0BF@MEKJKMLM@AIUnhappinessPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+428], eax

; 3233 : 	m_iAIGrowthPercent = kResults.GetInt("AIGrowthPercent");

	push	OFFSET ??_C@_0BA@FFPDPFEA@AIGrowthPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+432], eax

; 3234 : 	m_iAITrainPercent = kResults.GetInt("AITrainPercent");

	push	OFFSET ??_C@_0P@IMLKEGPO@AITrainPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+436], eax

; 3235 : 	m_iAIWorldTrainPercent = kResults.GetInt("AIWorldTrainPercent");

	push	OFFSET ??_C@_0BE@BJMKEJN@AIWorldTrainPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+440], eax

; 3236 : 	m_iAIConstructPercent = kResults.GetInt("AIConstructPercent");

	push	OFFSET ??_C@_0BD@MGEDJLPA@AIConstructPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+444], eax

; 3237 : 	m_iAIWorldConstructPercent = kResults.GetInt("AIWorldConstructPercent");

	push	OFFSET ??_C@_0BI@BFGBLLGK@AIWorldConstructPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+448], eax

; 3238 : 	m_iAICreatePercent = kResults.GetInt("AICreatePercent");

	push	OFFSET ??_C@_0BA@BBGEHLOF@AICreatePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+452], eax

; 3239 : 	m_iAIWorldCreatePercent = kResults.GetInt("AIWorldCreatePercent");

	push	OFFSET ??_C@_0BF@MFFCGNOF@AIWorldCreatePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+456], eax

; 3240 : 	m_iAIBuildingCostPercent = kResults.GetInt("AIBuildingCostPercent");

	push	OFFSET ??_C@_0BG@EMBGIJFA@AIBuildingCostPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], eax

; 3241 : 	m_iAIUnitCostPercent = kResults.GetInt("AIUnitCostPercent");

	push	OFFSET ??_C@_0BC@JBJCPOAD@AIUnitCostPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], eax

; 3242 : 	m_iAIUnitSupplyPercent = kResults.GetInt("AIUnitSupplyPercent");

	push	OFFSET ??_C@_0BE@LJMBFPNK@AIUnitSupplyPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+468], eax

; 3243 : 	m_iAIUnitUpgradePercent = kResults.GetInt("AIUnitUpgradePercent");

	push	OFFSET ??_C@_0BF@DNLGHKEH@AIUnitUpgradePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+472], eax

; 3244 : 	m_iAIInflationPercent = kResults.GetInt("AIInflationPercent");

	push	OFFSET ??_C@_0BD@GEIDFPGB@AIInflationPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+476], eax

; 3245 : 	m_iAIPerEraModifier = kResults.GetInt("AIPerEraModifier");

	push	OFFSET ??_C@_0BB@GEMJIAM@AIPerEraModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+480], eax

; 3246 : 	m_iAIAdvancedStartPercent = kResults.GetInt("AIAdvancedStartPercent");

	push	OFFSET ??_C@_0BH@BKINCGNK@AIAdvancedStartPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+484], eax

; 3247 : 	m_iAIFreeXP = kResults.GetInt("AIFreeXP");

	push	OFFSET ??_C@_08CMCBEAK@AIFreeXP?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+488], eax

; 3248 : 	m_iAIFreeXPPercent = kResults.GetInt("AIFreeXPPercent");

	push	OFFSET ??_C@_0BA@BENJAAMJ@AIFreeXPPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+492], eax

; 3249 : 
; 3250 : 	//Arrays
; 3251 : 	const char* szHandicapType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szHandicapType$[ebp], eax

; 3252 : 
; 3253 : 	//Goodies
; 3254 : 	{
; 3255 : 		//First find out how many goodies there are.
; 3256 : 		Database::SingleResult kCount("count(*)");

	push	OFFSET ??_C@_08OBDFOIIC@count?$CI?$CK?$CJ?$AA@
	lea	ecx, DWORD PTR _kCount$219477[ebp]
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3257 : 		if(DB.SelectAt(kCount, "HandicapInfo_Goodies", "HandicapType", szHandicapType))

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T232047[ebp], edx
	mov	eax, DWORD PTR _szHandicapType$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@GBMEGJHA@HandicapType?$AA@
	push	OFFSET ??_C@_0BF@CMOCEIEF@HandicapInfo_Goodies?$AA@
	lea	ecx, DWORD PTR _kCount$219477[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T232047[ebp]
	call	DWORD PTR __imp_?SelectAt@Connection@Database@@QAE_NAAVResults@2@PBD11@Z
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@CacheResul@16

; 3258 : 		{
; 3259 : 			m_iNumGoodies = kCount.GetInt(0);

	push	0
	lea	ecx, DWORD PTR _kCount$219477[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax
$LN4@CacheResul@16:

; 3260 : 
; 3261 : 		}
; 3262 : 
; 3263 : #ifdef AUI_WARNING_FIXES
; 3264 : 		SAFE_DELETE_ARRAY(m_piGoodies);
; 3265 : #endif
; 3266 : 		m_piGoodies = FNEW(int[m_iNumGoodies], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+496]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T232038[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T232038[ebp]
	mov	DWORD PTR [eax+528], ecx

; 3267 : 		Database::Results kArrayResults;

	push	0
	lea	ecx, DWORD PTR _kArrayResults$219484[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 3268 : 		char szSQL[512];
; 3269 : 		sprintf_s(szSQL, "select GoodyHuts.ID from HandicapInfo_Goodies inner join GoodyHuts on GoodyType = GoodyHuts.Type where HandicapType = '%s';", szHandicapType);

	mov	edx, DWORD PTR _szHandicapType$[ebp]
	push	edx
	push	OFFSET ??_C@_0HM@OCKKFPKF@select?5GoodyHuts?4ID?5from?5Handica@
	lea	eax, DWORD PTR _szSQL$219485[ebp]
	push	eax
	call	??$sprintf_s@$0CAA@@@YAHAAY0CAA@DPBDZZ	; sprintf_s<512>
	add	esp, 12					; 0000000cH

; 3270 : 
; 3271 : 		if(DB.Execute(kArrayResults, szSQL))

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T232051[ebp], ecx
	push	-1
	lea	edx, DWORD PTR _szSQL$219485[ebp]
	push	edx
	lea	eax, DWORD PTR _kArrayResults$219484[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232051[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@CacheResul@16

; 3272 : 		{
; 3273 : 			int i = 0;

	mov	DWORD PTR _i$219493[ebp], 0
$LN2@CacheResul@16:

; 3274 : 			while(kArrayResults.Step())

	lea	ecx, DWORD PTR _kArrayResults$219484[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@CacheResul@16

; 3275 : 			{
; 3276 : 				m_piGoodies[i++] = kArrayResults.GetInt(0);

	push	0
	lea	ecx, DWORD PTR _kArrayResults$219484[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	ecx, DWORD PTR _i$219493[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	edx, DWORD PTR _i$219493[ebp]
	add	edx, 1
	mov	DWORD PTR _i$219493[ebp], edx

; 3277 : 			}

	jmp	SHORT $LN2@CacheResul@16
$LN3@CacheResul@16:

; 3278 : 		}
; 3279 : 
; 3280 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _kArrayResults$219484[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kCount$219477[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ

; 3281 : 
; 3282 : 	kUtility.PopulateArrayByExistence(m_pbFreeTechs, "Technologies", "HandicapInfo_FreeTechs", "TechType", "HandicapType", szHandicapType);

	mov	eax, DWORD PTR _szHandicapType$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@GBMEGJHA@HandicapType?$AA@
	push	OFFSET ??_C@_08GHGFPPBE@TechType?$AA@
	push	OFFSET ??_C@_0BH@NKNIHECF@HandicapInfo_FreeTechs?$AA@
	push	OFFSET ??_C@_0N@INKDAICK@Technologies?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 532				; 00000214H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 3283 : 	kUtility.PopulateArrayByExistence(m_pbAIFreeTechs, "Technologies", "HandicapInfo_AIFreeTechs", "TechType", "HandicapType", szHandicapType);

	mov	edx, DWORD PTR _szHandicapType$[ebp]
	push	edx
	push	OFFSET ??_C@_0N@GBMEGJHA@HandicapType?$AA@
	push	OFFSET ??_C@_08GHGFPPBE@TechType?$AA@
	push	OFFSET ??_C@_0BJ@BGMEEKND@HandicapInfo_AIFreeTechs?$AA@
	push	OFFSET ??_C@_0N@INKDAICK@Technologies?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 536				; 00000218H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 3284 : 
; 3285 : 	return true;

	mov	al, 1
$LN6@CacheResul@16:

; 3286 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _kCount$219477[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR _kArrayResults$219484[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__ehhandler$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-672]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvHandicapInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvHandicapInfo::CacheResults
; Function compile flags: /Odtp
;	COMDAT ??1SingleResult@Database@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SingleResult@Database@@UAE@XZ PROC			; Database::SingleResult::~SingleResult, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1SingleResult@Database@@UAE@XZ ENDP			; Database::SingleResult::~SingleResult
_TEXT	ENDS
PUBLIC	??_7CvGameSpeedInfo@@6B@			; CvGameSpeedInfo::`vftable'
PUBLIC	??0CvGameSpeedInfo@@QAE@XZ			; CvGameSpeedInfo::CvGameSpeedInfo
PUBLIC	?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvGameSpeedInfo::CacheResults
EXTRN	??_ECvGameSpeedInfo@@UAEPAXI@Z:PROC		; CvGameSpeedInfo::`vector deleting destructor'
;	COMDAT ??_7CvGameSpeedInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvGameSpeedInfo@@6B@ DD FLAT:?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvGameSpeedInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvGameSpeedInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvGameSpeedInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvGameSpeedInfo@@QAE@XZ$0
__ehfuncinfo$??0CvGameSpeedInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvGameSpeedInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvGameSpeedInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T232073 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvGameSpeedInfo@@QAE@XZ PROC				; CvGameSpeedInfo::CvGameSpeedInfo, COMDAT
; _this$ = ecx

; 3326 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvGameSpeedInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvGameSpeedInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 100		; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+340], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+344], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+352], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+356], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+376], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+380], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	mov	DWORD PTR $T232073[ebp], ecx
	mov	ecx, DWORD PTR $T232073[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+412], 0

; 3327 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvGameSpeedInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??0CvGameSpeedInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvGameSpeedInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvGameSpeedInfo@@QAE@XZ ENDP				; CvGameSpeedInfo::CvGameSpeedInfo
PUBLIC	??1CvGameSpeedInfo@@UAE@XZ			; CvGameSpeedInfo::~CvGameSpeedInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvGameSpeedInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvGameSpeedInfo@@UAEPAXI@Z PROC			; CvGameSpeedInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvGameSpeedInfo@@UAE@XZ		; CvGameSpeedInfo::~CvGameSpeedInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvGameSpeedInfo@@UAEPAXI@Z ENDP			; CvGameSpeedInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvGameSpeedInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvGameSpeedInfo@@UAE@XZ$0
__ehfuncinfo$??1CvGameSpeedInfo@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvGameSpeedInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvGameSpeedInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T232096 = -24						; size = 4
$T232091 = -20						; size = 4
$T232090 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvGameSpeedInfo@@UAE@XZ PROC				; CvGameSpeedInfo::~CvGameSpeedInfo, COMDAT
; _this$ = ecx

; 3330 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvGameSpeedInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvGameSpeedInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3331 : 	SAFE_DELETE_ARRAY(m_pGameTurnInfo);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 412				; 0000019cH
	mov	DWORD PTR $T232091[ebp], ecx
	mov	edx, DWORD PTR $T232091[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232090[ebp], eax
	mov	ecx, DWORD PTR $T232090[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T232091[ebp]
	mov	DWORD PTR [edx], 0

; 3332 : }

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 384				; 00000180H
	mov	DWORD PTR $T232096[ebp], eax
	mov	ecx, DWORD PTR $T232096[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvGameSpeedInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??1CvGameSpeedInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvGameSpeedInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvGameSpeedInfo@@UAE@XZ ENDP				; CvGameSpeedInfo::~CvGameSpeedInfo
PUBLIC	?GetDealDuration@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::GetDealDuration
; Function compile flags: /Odtp
;	COMDAT ?GetDealDuration@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDealDuration@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::GetDealDuration, COMDAT
; _this$ = ecx

; 3335 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3336 : 	return m_iDealDuration;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 3337 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDealDuration@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::GetDealDuration
_TEXT	ENDS
PUBLIC	?getGrowthPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getGrowthPercent
; Function compile flags: /Odtp
;	COMDAT ?getGrowthPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGrowthPercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getGrowthPercent, COMDAT
; _this$ = ecx

; 3340 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3341 : 	return m_iGrowthPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 3342 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGrowthPercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getGrowthPercent
_TEXT	ENDS
PUBLIC	?getTrainPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getTrainPercent
; Function compile flags: /Odtp
;	COMDAT ?getTrainPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTrainPercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getTrainPercent, COMDAT
; _this$ = ecx

; 3345 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3346 : 	return m_iTrainPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 3347 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTrainPercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getTrainPercent
_TEXT	ENDS
PUBLIC	?getConstructPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getConstructPercent
; Function compile flags: /Odtp
;	COMDAT ?getConstructPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getConstructPercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getConstructPercent, COMDAT
; _this$ = ecx

; 3350 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3351 : 	return m_iConstructPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 3352 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getConstructPercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getConstructPercent
_TEXT	ENDS
PUBLIC	?getCreatePercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getCreatePercent
; Function compile flags: /Odtp
;	COMDAT ?getCreatePercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCreatePercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getCreatePercent, COMDAT
; _this$ = ecx

; 3355 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3356 : 	return m_iCreatePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 3357 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCreatePercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getCreatePercent
_TEXT	ENDS
PUBLIC	?getResearchPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getResearchPercent
; Function compile flags: /Odtp
;	COMDAT ?getResearchPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResearchPercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getResearchPercent, COMDAT
; _this$ = ecx

; 3360 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3361 : 	return m_iResearchPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 3362 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResearchPercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getResearchPercent
_TEXT	ENDS
PUBLIC	?getGoldPercent@CvGameSpeedInfo@@QBEHXZ		; CvGameSpeedInfo::getGoldPercent
; Function compile flags: /Odtp
;	COMDAT ?getGoldPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldPercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getGoldPercent, COMDAT
; _this$ = ecx

; 3365 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3366 : 	return m_iGoldPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 3367 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldPercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getGoldPercent
_TEXT	ENDS
PUBLIC	?getGoldGiftMod@CvGameSpeedInfo@@QBEHXZ		; CvGameSpeedInfo::getGoldGiftMod
; Function compile flags: /Odtp
;	COMDAT ?getGoldGiftMod@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldGiftMod@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getGoldGiftMod, COMDAT
; _this$ = ecx

; 3370 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3371 : 	return m_iGoldGiftMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 3372 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldGiftMod@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getGoldGiftMod
_TEXT	ENDS
PUBLIC	?getBuildPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getBuildPercent
; Function compile flags: /Odtp
;	COMDAT ?getBuildPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildPercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getBuildPercent, COMDAT
; _this$ = ecx

; 3375 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3376 : 	return m_iBuildPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 3377 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildPercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getBuildPercent
_TEXT	ENDS
PUBLIC	?getImprovementPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getImprovementPercent
; Function compile flags: /Odtp
;	COMDAT ?getImprovementPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getImprovementPercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getImprovementPercent, COMDAT
; _this$ = ecx

; 3380 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3381 : 	return m_iImprovementPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 3382 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getImprovementPercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getImprovementPercent
_TEXT	ENDS
PUBLIC	?getGreatPeoplePercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getGreatPeoplePercent
; Function compile flags: /Odtp
;	COMDAT ?getGreatPeoplePercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGreatPeoplePercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getGreatPeoplePercent, COMDAT
; _this$ = ecx

; 3385 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3386 : 	return m_iGreatPeoplePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 3387 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGreatPeoplePercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getGreatPeoplePercent
_TEXT	ENDS
PUBLIC	?getCulturePercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getCulturePercent
; Function compile flags: /Odtp
;	COMDAT ?getCulturePercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCulturePercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getCulturePercent, COMDAT
; _this$ = ecx

; 3390 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3391 : 	return m_iCulturePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 3392 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCulturePercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getCulturePercent
_TEXT	ENDS
PUBLIC	?getFaithPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getFaithPercent
; Function compile flags: /Odtp
;	COMDAT ?getFaithPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFaithPercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getFaithPercent, COMDAT
; _this$ = ecx

; 3395 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3396 : 	return m_iFaithPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 3397 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFaithPercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getFaithPercent
_TEXT	ENDS
PUBLIC	?getBarbPercent@CvGameSpeedInfo@@QBEHXZ		; CvGameSpeedInfo::getBarbPercent
; Function compile flags: /Odtp
;	COMDAT ?getBarbPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBarbPercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getBarbPercent, COMDAT
; _this$ = ecx

; 3400 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3401 : 	return m_iBarbPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+312]

; 3402 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBarbPercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getBarbPercent
_TEXT	ENDS
PUBLIC	?getFeatureProductionPercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getFeatureProductionPercent
; Function compile flags: /Odtp
;	COMDAT ?getFeatureProductionPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFeatureProductionPercent@CvGameSpeedInfo@@QBEHXZ PROC ; CvGameSpeedInfo::getFeatureProductionPercent, COMDAT
; _this$ = ecx

; 3405 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3406 : 	return m_iFeatureProductionPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 3407 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFeatureProductionPercent@CvGameSpeedInfo@@QBEHXZ ENDP ; CvGameSpeedInfo::getFeatureProductionPercent
_TEXT	ENDS
PUBLIC	?getUnitDiscoverPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getUnitDiscoverPercent
; Function compile flags: /Odtp
;	COMDAT ?getUnitDiscoverPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitDiscoverPercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getUnitDiscoverPercent, COMDAT
; _this$ = ecx

; 3410 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3411 : 	return m_iUnitDiscoverPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]

; 3412 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitDiscoverPercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getUnitDiscoverPercent
_TEXT	ENDS
PUBLIC	?getUnitHurryPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getUnitHurryPercent
; Function compile flags: /Odtp
;	COMDAT ?getUnitHurryPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitHurryPercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getUnitHurryPercent, COMDAT
; _this$ = ecx

; 3415 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3416 : 	return m_iUnitHurryPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+324]

; 3417 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitHurryPercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getUnitHurryPercent
_TEXT	ENDS
PUBLIC	?getUnitTradePercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getUnitTradePercent
; Function compile flags: /Odtp
;	COMDAT ?getUnitTradePercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitTradePercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getUnitTradePercent, COMDAT
; _this$ = ecx

; 3420 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3421 : 	return m_iUnitTradePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]

; 3422 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitTradePercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getUnitTradePercent
_TEXT	ENDS
PUBLIC	?getGoldenAgePercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getGoldenAgePercent
; Function compile flags: /Odtp
;	COMDAT ?getGoldenAgePercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldenAgePercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getGoldenAgePercent, COMDAT
; _this$ = ecx

; 3425 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3426 : 	return m_iGoldenAgePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+332]

; 3427 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldenAgePercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getGoldenAgePercent
_TEXT	ENDS
PUBLIC	?getHurryPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getHurryPercent
; Function compile flags: /Odtp
;	COMDAT ?getHurryPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHurryPercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getHurryPercent, COMDAT
; _this$ = ecx

; 3430 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3431 : 	return m_iHurryPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+336]

; 3432 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHurryPercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getHurryPercent
_TEXT	ENDS
PUBLIC	?getInflationOffset@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getInflationOffset
; Function compile flags: /Odtp
;	COMDAT ?getInflationOffset@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInflationOffset@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getInflationOffset, COMDAT
; _this$ = ecx

; 3435 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3436 : 	return m_iInflationOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+340]

; 3437 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInflationOffset@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getInflationOffset
_TEXT	ENDS
PUBLIC	?getReligiousPressureAdjacentCity@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getReligiousPressureAdjacentCity
; Function compile flags: /Odtp
;	COMDAT ?getReligiousPressureAdjacentCity@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getReligiousPressureAdjacentCity@CvGameSpeedInfo@@QBEHXZ PROC ; CvGameSpeedInfo::getReligiousPressureAdjacentCity, COMDAT
; _this$ = ecx

; 3440 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3441 : 	return m_iReligiousPressureAdjacentCity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+344]

; 3442 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getReligiousPressureAdjacentCity@CvGameSpeedInfo@@QBEHXZ ENDP ; CvGameSpeedInfo::getReligiousPressureAdjacentCity
_TEXT	ENDS
PUBLIC	?getInflationPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getInflationPercent
; Function compile flags: /Odtp
;	COMDAT ?getInflationPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInflationPercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getInflationPercent, COMDAT
; _this$ = ecx

; 3445 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3446 : 	return m_iInflationPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]

; 3447 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInflationPercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getInflationPercent
_TEXT	ENDS
PUBLIC	?getVictoryDelayPercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getVictoryDelayPercent
; Function compile flags: /Odtp
;	COMDAT ?getVictoryDelayPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVictoryDelayPercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getVictoryDelayPercent, COMDAT
; _this$ = ecx

; 3450 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3451 : 	return m_iVictoryDelayPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+352]

; 3452 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVictoryDelayPercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getVictoryDelayPercent
_TEXT	ENDS
PUBLIC	?getMinorCivElectionFreqMod@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getMinorCivElectionFreqMod
; Function compile flags: /Odtp
;	COMDAT ?getMinorCivElectionFreqMod@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinorCivElectionFreqMod@CvGameSpeedInfo@@QBEHXZ PROC ; CvGameSpeedInfo::getMinorCivElectionFreqMod, COMDAT
; _this$ = ecx

; 3455 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3456 : 	return m_iMinorCivElectionFreqMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+356]

; 3457 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinorCivElectionFreqMod@CvGameSpeedInfo@@QBEHXZ ENDP ; CvGameSpeedInfo::getMinorCivElectionFreqMod
_TEXT	ENDS
PUBLIC	?getOpinionDurationPercent@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getOpinionDurationPercent
; Function compile flags: /Odtp
;	COMDAT ?getOpinionDurationPercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOpinionDurationPercent@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getOpinionDurationPercent, COMDAT
; _this$ = ecx

; 3460 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3461 : 	return m_iOpinionDurationPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+360]

; 3462 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getOpinionDurationPercent@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getOpinionDurationPercent
_TEXT	ENDS
PUBLIC	?getSpyRatePercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getSpyRatePercent
; Function compile flags: /Odtp
;	COMDAT ?getSpyRatePercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSpyRatePercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getSpyRatePercent, COMDAT
; _this$ = ecx

; 3465 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3466 : 	return m_iSpyRatePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+364]

; 3467 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSpyRatePercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getSpyRatePercent
_TEXT	ENDS
PUBLIC	?getPeaceDealDuration@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getPeaceDealDuration
; Function compile flags: /Odtp
;	COMDAT ?getPeaceDealDuration@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPeaceDealDuration@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getPeaceDealDuration, COMDAT
; _this$ = ecx

; 3470 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3471 : 	return m_iPeaceDealDuration;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+368]

; 3472 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPeaceDealDuration@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getPeaceDealDuration
_TEXT	ENDS
PUBLIC	?getRelationshipDuration@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getRelationshipDuration
; Function compile flags: /Odtp
;	COMDAT ?getRelationshipDuration@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRelationshipDuration@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getRelationshipDuration, COMDAT
; _this$ = ecx

; 3475 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3476 : 	return m_iRelationshipDuration;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+372]

; 3477 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRelationshipDuration@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getRelationshipDuration
_TEXT	ENDS
PUBLIC	?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getLeaguePercent
; Function compile flags: /Odtp
;	COMDAT ?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ PROC		; CvGameSpeedInfo::getLeaguePercent, COMDAT
; _this$ = ecx

; 3480 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3481 : 	return m_iLeaguePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+376]

; 3482 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLeaguePercent@CvGameSpeedInfo@@QBEHXZ ENDP		; CvGameSpeedInfo::getLeaguePercent
_TEXT	ENDS
PUBLIC	?getNumTurnIncrements@CvGameSpeedInfo@@QBEHXZ	; CvGameSpeedInfo::getNumTurnIncrements
; Function compile flags: /Odtp
;	COMDAT ?getNumTurnIncrements@CvGameSpeedInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumTurnIncrements@CvGameSpeedInfo@@QBEHXZ PROC	; CvGameSpeedInfo::getNumTurnIncrements, COMDAT
; _this$ = ecx

; 3485 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3486 : 	return m_iNumTurnIncrements;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+380]

; 3487 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumTurnIncrements@CvGameSpeedInfo@@QBEHXZ ENDP	; CvGameSpeedInfo::getNumTurnIncrements
_TEXT	ENDS
PUBLIC	?getGameTurnInfo@CvGameSpeedInfo@@QBEAAUGameTurnInfo@@H@Z ; CvGameSpeedInfo::getGameTurnInfo
; Function compile flags: /Odtp
;	COMDAT ?getGameTurnInfo@CvGameSpeedInfo@@QBEAAUGameTurnInfo@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?getGameTurnInfo@CvGameSpeedInfo@@QBEAAUGameTurnInfo@@H@Z PROC ; CvGameSpeedInfo::getGameTurnInfo, COMDAT
; _this$ = ecx

; 3490 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3491 : 	return m_pGameTurnInfo[iIndex];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	edx, DWORD PTR _iIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 3492 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getGameTurnInfo@CvGameSpeedInfo@@QBEAAUGameTurnInfo@@H@Z ENDP ; CvGameSpeedInfo::getGameTurnInfo
_TEXT	ENDS
PUBLIC	?allocateGameTurnInfos@CvGameSpeedInfo@@QAEXH@Z	; CvGameSpeedInfo::allocateGameTurnInfos
; Function compile flags: /Odtp
;	COMDAT ?allocateGameTurnInfos@CvGameSpeedInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T232224 = -4						; size = 4
_iSize$ = 8						; size = 4
?allocateGameTurnInfos@CvGameSpeedInfo@@QAEXH@Z PROC	; CvGameSpeedInfo::allocateGameTurnInfos, COMDAT
; _this$ = ecx

; 3495 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3496 : 	m_pGameTurnInfo = FNEW(GameTurnInfo[iSize], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	eax, DWORD PTR _iSize$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T232224[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T232224[ebp]
	mov	DWORD PTR [eax+412], ecx

; 3497 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?allocateGameTurnInfos@CvGameSpeedInfo@@QAEXH@Z ENDP	; CvGameSpeedInfo::allocateGameTurnInfos
_TEXT	ENDS
PUBLIC	??_C@_0BC@GCMBDOA@TurnsPerIncrement?$AA@	; `string'
PUBLIC	??_C@_0P@BCDKLFFE@MonthIncrement?$AA@		; `string'
PUBLIC	??_C@_0DJ@GBGNCMCP@select?5?$CK?5from?5GameSpeed_Turns?5wh@ ; `string'
PUBLIC	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ		; sprintf_s<256>
PUBLIC	??_C@_0EA@CEFPFFMK@select?5count?$CI?$CK?$CJ?5from?5GameSpeed_T@ ; `string'
PUBLIC	??_C@_0O@ILGKMMHI@LeaguePercent?$AA@		; `string'
PUBLIC	??_C@_0BF@BJLGEFOH@RelationshipDuration?$AA@	; `string'
PUBLIC	??_C@_0BC@PNMJNMBD@PeaceDealDuration?$AA@	; `string'
PUBLIC	??_C@_0P@NJLILHCC@SpyRatePercent?$AA@		; `string'
PUBLIC	??_C@_0BH@NCKOKOBC@OpinionDurationPercent?$AA@	; `string'
PUBLIC	??_C@_0BI@DOLFAIOE@MinorCivElectionFreqMod?$AA@	; `string'
PUBLIC	??_C@_0BE@LHFNFGFO@VictoryDelayPercent?$AA@	; `string'
PUBLIC	??_C@_0BO@IBENHHCF@ReligiousPressureAdjacentCity?$AA@ ; `string'
PUBLIC	??_C@_0BA@DPEGLFAD@InflationOffset?$AA@		; `string'
PUBLIC	??_C@_0N@LCCMKKHM@HurryPercent?$AA@		; `string'
PUBLIC	??_C@_0BB@JPFBLGNJ@GoldenAgePercent?$AA@	; `string'
PUBLIC	??_C@_0BB@BJDHAMBG@UnitTradePercent?$AA@	; `string'
PUBLIC	??_C@_0BB@BEECBILI@UnitHurryPercent?$AA@	; `string'
PUBLIC	??_C@_0BE@KGNHOBJO@UnitDiscoverPercent?$AA@	; `string'
PUBLIC	??_C@_0BJ@HMAABPN@FeatureProductionPercent?$AA@	; `string'
PUBLIC	??_C@_0M@FIDDMJLK@BarbPercent?$AA@		; `string'
PUBLIC	??_C@_0N@HMKGBFLF@FaithPercent?$AA@		; `string'
PUBLIC	??_C@_0P@FEGMOKNP@CulturePercent?$AA@		; `string'
PUBLIC	??_C@_0BD@COBBPJBG@GreatPeoplePercent?$AA@	; `string'
PUBLIC	??_C@_0BD@GNEEJCKL@ImprovementPercent?$AA@	; `string'
PUBLIC	??_C@_0N@GBEMJLKI@BuildPercent?$AA@		; `string'
PUBLIC	??_C@_0M@NEEPLJD@GoldGiftMod?$AA@		; `string'
PUBLIC	??_C@_0M@NIJLFNHN@GoldPercent?$AA@		; `string'
PUBLIC	??_C@_0O@BAPLECAO@CreatePercent?$AA@		; `string'
PUBLIC	??_C@_0BB@NMAKHNP@ConstructPercent?$AA@		; `string'
PUBLIC	??_C@_0N@MIPCKLLP@TrainPercent?$AA@		; `string'
PUBLIC	??_C@_0O@FEGMMMKL@GrowthPercent?$AA@		; `string'
PUBLIC	??_C@_0N@EKNHBAOO@DealDuration?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BC@GCMBDOA@TurnsPerIncrement?$AA@
CONST	SEGMENT
??_C@_0BC@GCMBDOA@TurnsPerIncrement?$AA@ DB 'TurnsPerIncrement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCDKLFFE@MonthIncrement?$AA@
CONST	SEGMENT
??_C@_0P@BCDKLFFE@MonthIncrement?$AA@ DB 'MonthIncrement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GBGNCMCP@select?5?$CK?5from?5GameSpeed_Turns?5wh@
CONST	SEGMENT
??_C@_0DJ@GBGNCMCP@select?5?$CK?5from?5GameSpeed_Turns?5wh@ DB 'select * '
	DB	'from GameSpeed_Turns where GameSpeedType = ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@CEFPFFMK@select?5count?$CI?$CK?$CJ?5from?5GameSpeed_T@
CONST	SEGMENT
??_C@_0EA@CEFPFFMK@select?5count?$CI?$CK?$CJ?5from?5GameSpeed_T@ DB 'sele'
	DB	'ct count(*) from GameSpeed_Turns where GameSpeedType = ''%s'''
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ILGKMMHI@LeaguePercent?$AA@
CONST	SEGMENT
??_C@_0O@ILGKMMHI@LeaguePercent?$AA@ DB 'LeaguePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJLGEFOH@RelationshipDuration?$AA@
CONST	SEGMENT
??_C@_0BF@BJLGEFOH@RelationshipDuration?$AA@ DB 'RelationshipDuration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PNMJNMBD@PeaceDealDuration?$AA@
CONST	SEGMENT
??_C@_0BC@PNMJNMBD@PeaceDealDuration?$AA@ DB 'PeaceDealDuration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NJLILHCC@SpyRatePercent?$AA@
CONST	SEGMENT
??_C@_0P@NJLILHCC@SpyRatePercent?$AA@ DB 'SpyRatePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NCKOKOBC@OpinionDurationPercent?$AA@
CONST	SEGMENT
??_C@_0BH@NCKOKOBC@OpinionDurationPercent?$AA@ DB 'OpinionDurationPercent'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DOLFAIOE@MinorCivElectionFreqMod?$AA@
CONST	SEGMENT
??_C@_0BI@DOLFAIOE@MinorCivElectionFreqMod?$AA@ DB 'MinorCivElectionFreqM'
	DB	'od', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LHFNFGFO@VictoryDelayPercent?$AA@
CONST	SEGMENT
??_C@_0BE@LHFNFGFO@VictoryDelayPercent?$AA@ DB 'VictoryDelayPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IBENHHCF@ReligiousPressureAdjacentCity?$AA@
CONST	SEGMENT
??_C@_0BO@IBENHHCF@ReligiousPressureAdjacentCity?$AA@ DB 'ReligiousPressu'
	DB	'reAdjacentCity', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DPEGLFAD@InflationOffset?$AA@
CONST	SEGMENT
??_C@_0BA@DPEGLFAD@InflationOffset?$AA@ DB 'InflationOffset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LCCMKKHM@HurryPercent?$AA@
CONST	SEGMENT
??_C@_0N@LCCMKKHM@HurryPercent?$AA@ DB 'HurryPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JPFBLGNJ@GoldenAgePercent?$AA@
CONST	SEGMENT
??_C@_0BB@JPFBLGNJ@GoldenAgePercent?$AA@ DB 'GoldenAgePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BJDHAMBG@UnitTradePercent?$AA@
CONST	SEGMENT
??_C@_0BB@BJDHAMBG@UnitTradePercent?$AA@ DB 'UnitTradePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BEECBILI@UnitHurryPercent?$AA@
CONST	SEGMENT
??_C@_0BB@BEECBILI@UnitHurryPercent?$AA@ DB 'UnitHurryPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KGNHOBJO@UnitDiscoverPercent?$AA@
CONST	SEGMENT
??_C@_0BE@KGNHOBJO@UnitDiscoverPercent?$AA@ DB 'UnitDiscoverPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HMAABPN@FeatureProductionPercent?$AA@
CONST	SEGMENT
??_C@_0BJ@HMAABPN@FeatureProductionPercent?$AA@ DB 'FeatureProductionPerc'
	DB	'ent', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FIDDMJLK@BarbPercent?$AA@
CONST	SEGMENT
??_C@_0M@FIDDMJLK@BarbPercent?$AA@ DB 'BarbPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HMKGBFLF@FaithPercent?$AA@
CONST	SEGMENT
??_C@_0N@HMKGBFLF@FaithPercent?$AA@ DB 'FaithPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FEGMOKNP@CulturePercent?$AA@
CONST	SEGMENT
??_C@_0P@FEGMOKNP@CulturePercent?$AA@ DB 'CulturePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COBBPJBG@GreatPeoplePercent?$AA@
CONST	SEGMENT
??_C@_0BD@COBBPJBG@GreatPeoplePercent?$AA@ DB 'GreatPeoplePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GNEEJCKL@ImprovementPercent?$AA@
CONST	SEGMENT
??_C@_0BD@GNEEJCKL@ImprovementPercent?$AA@ DB 'ImprovementPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GBEMJLKI@BuildPercent?$AA@
CONST	SEGMENT
??_C@_0N@GBEMJLKI@BuildPercent?$AA@ DB 'BuildPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NEEPLJD@GoldGiftMod?$AA@
CONST	SEGMENT
??_C@_0M@NEEPLJD@GoldGiftMod?$AA@ DB 'GoldGiftMod', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NIJLFNHN@GoldPercent?$AA@
CONST	SEGMENT
??_C@_0M@NIJLFNHN@GoldPercent?$AA@ DB 'GoldPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BAPLECAO@CreatePercent?$AA@
CONST	SEGMENT
??_C@_0O@BAPLECAO@CreatePercent?$AA@ DB 'CreatePercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NMAKHNP@ConstructPercent?$AA@
CONST	SEGMENT
??_C@_0BB@NMAKHNP@ConstructPercent?$AA@ DB 'ConstructPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MIPCKLLP@TrainPercent?$AA@
CONST	SEGMENT
??_C@_0N@MIPCKLLP@TrainPercent?$AA@ DB 'TrainPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FEGMMMKL@GrowthPercent?$AA@
CONST	SEGMENT
??_C@_0O@FEGMMMKL@GrowthPercent?$AA@ DB 'GrowthPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EKNHBAOO@DealDuration?$AA@
CONST	SEGMENT
??_C@_0N@EKNHBAOO@DealDuration?$AA@ DB 'DealDuration', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
__ehfuncinfo$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv287 = -692						; size = 4
_this$ = -688						; size = 4
$T232240 = -684						; size = 4
$T232236 = -680						; size = 4
_kInfo$219670 = -676					; size = 4
_i$219666 = -672					; size = 4
_kCount$219660 = -668					; size = 64
_kArrayResults$219664 = -604				; size = 64
_szCountSQL$219653 = -540				; size = 256
_szGameSpeedInfoType$219652 = -280			; size = 4
_szSQL$219662 = -276					; size = 256
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvGameSpeedInfo::CacheResults, COMDAT
; _this$ = ecx

; 3500 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 680				; 000002a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3501 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@CacheResul@17

; 3502 : 		return false;

	xor	al, al
	jmp	$LN6@CacheResul@17
$LN5@CacheResul@17:

; 3503 : 
; 3504 : 	m_iDealDuration					= kResults.GetInt("DealDuration");

	push	OFFSET ??_C@_0N@EKNHBAOO@DealDuration?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 3505 : 	m_iGrowthPercent				= kResults.GetInt("GrowthPercent");

	push	OFFSET ??_C@_0O@FEGMMMKL@GrowthPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 3506 : 	m_iTrainPercent					= kResults.GetInt("TrainPercent");

	push	OFFSET ??_C@_0N@MIPCKLLP@TrainPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 3507 : 	m_iConstructPercent				= kResults.GetInt("ConstructPercent");

	push	OFFSET ??_C@_0BB@NMAKHNP@ConstructPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 3508 : 	m_iCreatePercent				= kResults.GetInt("CreatePercent");

	push	OFFSET ??_C@_0O@BAPLECAO@CreatePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 3509 : 	m_iResearchPercent				= kResults.GetInt("ResearchPercent");

	push	OFFSET ??_C@_0BA@HBDGGGLG@ResearchPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 3510 : 	m_iGoldPercent					= kResults.GetInt("GoldPercent");

	push	OFFSET ??_C@_0M@NIJLFNHN@GoldPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 3511 : 	m_iGoldGiftMod					= kResults.GetInt("GoldGiftMod");

	push	OFFSET ??_C@_0M@NEEPLJD@GoldGiftMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], eax

; 3512 : 	m_iBuildPercent					= kResults.GetInt("BuildPercent");

	push	OFFSET ??_C@_0N@GBEMJLKI@BuildPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], eax

; 3513 : 	m_iImprovementPercent			= kResults.GetInt("ImprovementPercent");

	push	OFFSET ??_C@_0BD@GNEEJCKL@ImprovementPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], eax

; 3514 : 	m_iGreatPeoplePercent			= kResults.GetInt("GreatPeoplePercent");

	push	OFFSET ??_C@_0BD@COBBPJBG@GreatPeoplePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax

; 3515 : 	m_iCulturePercent				= kResults.GetInt("CulturePercent");

	push	OFFSET ??_C@_0P@FEGMOKNP@CulturePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+304], eax

; 3516 : 	m_iFaithPercent					= kResults.GetInt("FaithPercent");

	push	OFFSET ??_C@_0N@HMKGBFLF@FaithPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], eax

; 3517 : 	m_iBarbPercent					= kResults.GetInt("BarbPercent");

	push	OFFSET ??_C@_0M@FIDDMJLK@BarbPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], eax

; 3518 : 	m_iFeatureProductionPercent		= kResults.GetInt("FeatureProductionPercent");

	push	OFFSET ??_C@_0BJ@HMAABPN@FeatureProductionPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 3519 : 	m_iUnitDiscoverPercent			= kResults.GetInt("UnitDiscoverPercent");

	push	OFFSET ??_C@_0BE@KGNHOBJO@UnitDiscoverPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], eax

; 3520 : 	m_iUnitHurryPercent				= kResults.GetInt("UnitHurryPercent");

	push	OFFSET ??_C@_0BB@BEECBILI@UnitHurryPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+324], eax

; 3521 : 	m_iUnitTradePercent				= kResults.GetInt("UnitTradePercent");

	push	OFFSET ??_C@_0BB@BJDHAMBG@UnitTradePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+328], eax

; 3522 : 	m_iGoldenAgePercent				= kResults.GetInt("GoldenAgePercent");

	push	OFFSET ??_C@_0BB@JPFBLGNJ@GoldenAgePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], eax

; 3523 : 	m_iHurryPercent					= kResults.GetInt("HurryPercent");

	push	OFFSET ??_C@_0N@LCCMKKHM@HurryPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], eax

; 3524 : 	m_iInflationOffset				= kResults.GetInt("InflationOffset");

	push	OFFSET ??_C@_0BA@DPEGLFAD@InflationOffset?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+340], eax

; 3525 : 	m_iInflationPercent				= kResults.GetInt("InflationPercent");

	push	OFFSET ??_C@_0BB@KPAAGDEO@InflationPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], eax

; 3526 : 	m_iReligiousPressureAdjacentCity= kResults.GetInt("ReligiousPressureAdjacentCity");

	push	OFFSET ??_C@_0BO@IBENHHCF@ReligiousPressureAdjacentCity?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+344], eax

; 3527 : 	m_iVictoryDelayPercent			= kResults.GetInt("VictoryDelayPercent");

	push	OFFSET ??_C@_0BE@LHFNFGFO@VictoryDelayPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+352], eax

; 3528 : 	m_iMinorCivElectionFreqMod		= kResults.GetInt("MinorCivElectionFreqMod");

	push	OFFSET ??_C@_0BI@DOLFAIOE@MinorCivElectionFreqMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+356], eax

; 3529 : 	m_iOpinionDurationPercent		= kResults.GetInt("OpinionDurationPercent");

	push	OFFSET ??_C@_0BH@NCKOKOBC@OpinionDurationPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+360], eax

; 3530 : 	m_iSpyRatePercent				= kResults.GetInt("SpyRatePercent");

	push	OFFSET ??_C@_0P@NJLILHCC@SpyRatePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+364], eax

; 3531 : 	m_iPeaceDealDuration			= kResults.GetInt("PeaceDealDuration");

	push	OFFSET ??_C@_0BC@PNMJNMBD@PeaceDealDuration?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+368], eax

; 3532 : 	m_iRelationshipDuration			= kResults.GetInt("RelationshipDuration");

	push	OFFSET ??_C@_0BF@BJLGEFOH@RelationshipDuration?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+372], eax

; 3533 : 	m_iLeaguePercent				= kResults.GetInt("LeaguePercent");

	push	OFFSET ??_C@_0O@ILGKMMHI@LeaguePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+376], eax

; 3534 : 
; 3535 : 	//GameTurnInfos
; 3536 : 	{
; 3537 : 		const char* szGameSpeedInfoType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szGameSpeedInfoType$219652[ebp], eax

; 3538 : 
; 3539 : 		//Calculate number of turn increments
; 3540 : 		char szCountSQL[256];
; 3541 : 		sprintf_s(szCountSQL, "select count(*) from GameSpeed_Turns where GameSpeedType = '%s'", szGameSpeedInfoType);

	mov	eax, DWORD PTR _szGameSpeedInfoType$219652[ebp]
	push	eax
	push	OFFSET ??_C@_0EA@CEFPFFMK@select?5count?$CI?$CK?$CJ?5from?5GameSpeed_T@
	lea	ecx, DWORD PTR _szCountSQL$219653[ebp]
	push	ecx
	call	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ	; sprintf_s<256>
	add	esp, 12					; 0000000cH

; 3542 : 		Database::SingleResult kCount;

	push	0
	lea	ecx, DWORD PTR _kCount$219660[ebp]
	call	DWORD PTR __imp_??0SingleResult@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3543 : 		if(DB.Execute(kCount, szCountSQL))

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T232236[ebp], edx
	push	-1
	lea	eax, DWORD PTR _szCountSQL$219653[ebp]
	push	eax
	lea	ecx, DWORD PTR _kCount$219660[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T232236[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@CacheResul@17

; 3544 : 		{
; 3545 : 			m_iNumTurnIncrements = kCount.GetInt(0);

	push	0
	lea	ecx, DWORD PTR _kCount$219660[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+380], eax
$LN4@CacheResul@17:

; 3546 : 		}
; 3547 : 
; 3548 : 		//Update turn increments
; 3549 : 		allocateGameTurnInfos(getNumTurnIncrements());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?getNumTurnIncrements@CvGameSpeedInfo@@QBEHXZ ; CvGameSpeedInfo::getNumTurnIncrements
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocateGameTurnInfos@CvGameSpeedInfo@@QAEXH@Z ; CvGameSpeedInfo::allocateGameTurnInfos

; 3550 : 		char szSQL[256];
; 3551 : 		sprintf_s(szSQL, "select * from GameSpeed_Turns where GameSpeedType = '%s'", szGameSpeedInfoType);

	mov	edx, DWORD PTR _szGameSpeedInfoType$219652[ebp]
	push	edx
	push	OFFSET ??_C@_0DJ@GBGNCMCP@select?5?$CK?5from?5GameSpeed_Turns?5wh@
	lea	eax, DWORD PTR _szSQL$219662[ebp]
	push	eax
	call	??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ	; sprintf_s<256>
	add	esp, 12					; 0000000cH

; 3552 : 		Database::Results kArrayResults;

	push	0
	lea	ecx, DWORD PTR _kArrayResults$219664[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 3553 : 		if(DB.Execute(kArrayResults, szSQL))

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T232240[ebp], ecx
	push	-1
	lea	edx, DWORD PTR _szSQL$219662[ebp]
	push	edx
	lea	eax, DWORD PTR _kArrayResults$219664[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232240[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@CacheResul@17

; 3554 : 		{
; 3555 : 			int i = 0;

	mov	DWORD PTR _i$219666[ebp], 0
$LN2@CacheResul@17:

; 3556 : 			while(kArrayResults.Step())

	lea	ecx, DWORD PTR _kArrayResults$219664[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@CacheResul@17

; 3557 : 			{
; 3558 : 				GameTurnInfo& kInfo = getGameTurnInfo(i++);

	mov	eax, DWORD PTR _i$219666[ebp]
	mov	DWORD PTR tv287[ebp], eax
	mov	ecx, DWORD PTR tv287[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getGameTurnInfo@CvGameSpeedInfo@@QBEAAUGameTurnInfo@@H@Z ; CvGameSpeedInfo::getGameTurnInfo
	mov	DWORD PTR _kInfo$219670[ebp], eax
	mov	edx, DWORD PTR _i$219666[ebp]
	add	edx, 1
	mov	DWORD PTR _i$219666[ebp], edx

; 3559 : 				kInfo.iMonthIncrement = kArrayResults.GetInt("MonthIncrement");

	push	OFFSET ??_C@_0P@BCDKLFFE@MonthIncrement?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219664[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _kInfo$219670[ebp]
	mov	DWORD PTR [ecx], eax

; 3560 : 				kInfo.iNumGameTurnsPerIncrement = kArrayResults.GetInt("TurnsPerIncrement");

	push	OFFSET ??_C@_0BC@GCMBDOA@TurnsPerIncrement?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219664[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _kInfo$219670[ebp]
	mov	DWORD PTR [edx+4], eax

; 3561 : 			}

	jmp	SHORT $LN2@CacheResul@17
$LN3@CacheResul@17:

; 3562 : 		}
; 3563 : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _kArrayResults$219664[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kCount$219660[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ

; 3564 : 
; 3565 : 	return true;

	mov	al, 1
$LN6@CacheResul@17:

; 3566 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _kCount$219660[ebp]
	jmp	??1SingleResult@Database@@UAE@XZ
__unwindfunclet$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR _kArrayResults$219664[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__ehhandler$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-684]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvGameSpeedInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvGameSpeedInfo::CacheResults
PUBLIC	??_7CvTurnTimerInfo@@6B@			; CvTurnTimerInfo::`vftable'
PUBLIC	??0CvTurnTimerInfo@@QAE@XZ			; CvTurnTimerInfo::CvTurnTimerInfo
PUBLIC	?CacheResults@CvTurnTimerInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvTurnTimerInfo::CacheResults
PUBLIC	?readFrom@CvTurnTimerInfo@@UAEXAAVFDataStream@@@Z ; CvTurnTimerInfo::readFrom
PUBLIC	?writeTo@CvTurnTimerInfo@@UBEXAAVFDataStream@@@Z ; CvTurnTimerInfo::writeTo
PUBLIC	??8CvTurnTimerInfo@@UBE_NABV0@@Z		; CvTurnTimerInfo::operator==
;	COMDAT ??_7CvTurnTimerInfo@@6B@
CONST	SEGMENT
??_7CvTurnTimerInfo@@6B@ DD FLAT:?CacheResults@CvTurnTimerInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvTurnTimerInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvTurnTimerInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvTurnTimerInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??8CvTurnTimerInfo@@UBE_NABV0@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvTurnTimerInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvTurnTimerInfo@@QAE@XZ PROC				; CvTurnTimerInfo::CvTurnTimerInfo, COMDAT
; _this$ = ecx

; 3577 : {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvTurnTimerInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvTurnTimerInfo@@QAE@XZ ENDP				; CvTurnTimerInfo::CvTurnTimerInfo
_TEXT	ENDS
PUBLIC	?getBaseTime@CvTurnTimerInfo@@QBEHXZ		; CvTurnTimerInfo::getBaseTime
; Function compile flags: /Odtp
;	COMDAT ?getBaseTime@CvTurnTimerInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBaseTime@CvTurnTimerInfo@@QBEHXZ PROC		; CvTurnTimerInfo::getBaseTime, COMDAT
; _this$ = ecx

; 3580 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3581 : 	return m_iBaseTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 3582 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBaseTime@CvTurnTimerInfo@@QBEHXZ ENDP		; CvTurnTimerInfo::getBaseTime
_TEXT	ENDS
PUBLIC	?getCityResource@CvTurnTimerInfo@@QBEHXZ	; CvTurnTimerInfo::getCityResource
; Function compile flags: /Odtp
;	COMDAT ?getCityResource@CvTurnTimerInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCityResource@CvTurnTimerInfo@@QBEHXZ PROC		; CvTurnTimerInfo::getCityResource, COMDAT
; _this$ = ecx

; 3585 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3586 : 	return m_iCityResource;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 3587 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCityResource@CvTurnTimerInfo@@QBEHXZ ENDP		; CvTurnTimerInfo::getCityResource
_TEXT	ENDS
PUBLIC	?getUnitResource@CvTurnTimerInfo@@QBEHXZ	; CvTurnTimerInfo::getUnitResource
; Function compile flags: /Odtp
;	COMDAT ?getUnitResource@CvTurnTimerInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitResource@CvTurnTimerInfo@@QBEHXZ PROC		; CvTurnTimerInfo::getUnitResource, COMDAT
; _this$ = ecx

; 3590 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3591 : 	return m_iUnitResource;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 3592 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitResource@CvTurnTimerInfo@@QBEHXZ ENDP		; CvTurnTimerInfo::getUnitResource
_TEXT	ENDS
PUBLIC	?getFirstTurnMultiplier@CvTurnTimerInfo@@QBEHXZ	; CvTurnTimerInfo::getFirstTurnMultiplier
; Function compile flags: /Odtp
;	COMDAT ?getFirstTurnMultiplier@CvTurnTimerInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFirstTurnMultiplier@CvTurnTimerInfo@@QBEHXZ PROC	; CvTurnTimerInfo::getFirstTurnMultiplier, COMDAT
; _this$ = ecx

; 3595 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3596 : 	return m_iFirstTurnMultiplier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 3597 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFirstTurnMultiplier@CvTurnTimerInfo@@QBEHXZ ENDP	; CvTurnTimerInfo::getFirstTurnMultiplier
_TEXT	ENDS
PUBLIC	??_C@_0BE@LGBNCCDB@FirstTurnMultiplier?$AA@	; `string'
PUBLIC	??_C@_0N@LDOEFCHD@UnitResource?$AA@		; `string'
PUBLIC	??_C@_0N@EDACMAIH@CityResource?$AA@		; `string'
PUBLIC	??_C@_08KDFCCCLJ@BaseTime?$AA@			; `string'
EXTRN	__imp_?GetValue@Results@Database@@QAEXPBDAAH@Z:PROC
;	COMDAT ??_C@_0BE@LGBNCCDB@FirstTurnMultiplier?$AA@
CONST	SEGMENT
??_C@_0BE@LGBNCCDB@FirstTurnMultiplier?$AA@ DB 'FirstTurnMultiplier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDOEFCHD@UnitResource?$AA@
CONST	SEGMENT
??_C@_0N@LDOEFCHD@UnitResource?$AA@ DB 'UnitResource', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EDACMAIH@CityResource?$AA@
CONST	SEGMENT
??_C@_0N@EDACMAIH@CityResource?$AA@ DB 'CityResource', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KDFCCCLJ@BaseTime?$AA@
CONST	SEGMENT
??_C@_08KDFCCCLJ@BaseTime?$AA@ DB 'BaseTime', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvTurnTimerInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_results$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvTurnTimerInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvTurnTimerInfo::CacheResults, COMDAT
; _this$ = ecx

; 3600 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3601 : 	if(CvBaseInfo::CacheResults(results, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _results$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@CacheResul@18

; 3602 : 	{
; 3603 : 		results.GetValue("BaseTime", m_iBaseTime);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	push	OFFSET ??_C@_08KDFCCCLJ@BaseTime?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 3604 : 		results.GetValue("CityResource", m_iCityResource);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	push	ecx
	push	OFFSET ??_C@_0N@EDACMAIH@CityResource?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 3605 : 		results.GetValue("UnitResource", m_iUnitResource);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	push	OFFSET ??_C@_0N@LDOEFCHD@UnitResource?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 3606 : 		results.GetValue("FirstTurnMultiplier", m_iFirstTurnMultiplier);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	push	OFFSET ??_C@_0BE@LGBNCCDB@FirstTurnMultiplier?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 3607 : 
; 3608 : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@CacheResul@18
$LN1@CacheResul@18:

; 3609 : 	}
; 3610 : 
; 3611 : 	return false;

	xor	al, al
$LN2@CacheResul@18:

; 3612 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvTurnTimerInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvTurnTimerInfo::CacheResults
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8CvTurnTimerInfo@@UBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??8CvTurnTimerInfo@@UBE_NABV0@@Z PROC			; CvTurnTimerInfo::operator==, COMDAT
; _this$ = ecx

; 3615 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3616 : 	if(this == &rhs) return true;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _rhs$[ebp]
	jne	SHORT $LN6@operator@2
	mov	al, 1
	jmp	SHORT $LN7@operator@2
$LN6@operator@2:

; 3617 : 	if(!CvBaseInfo::operator==(rhs)) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8CvBaseInfo@@UBE_NABV0@@Z		; CvBaseInfo::operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@operator@2
	xor	al, al
	jmp	SHORT $LN7@operator@2
$LN5@operator@2:

; 3618 : 	if(m_iBaseTime != rhs.m_iBaseTime) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+260]
	cmp	edx, DWORD PTR [ecx+260]
	je	SHORT $LN4@operator@2
	xor	al, al
	jmp	SHORT $LN7@operator@2
$LN4@operator@2:

; 3619 : 	if(m_iCityResource != rhs.m_iCityResource) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+264]
	cmp	edx, DWORD PTR [ecx+264]
	je	SHORT $LN3@operator@2
	xor	al, al
	jmp	SHORT $LN7@operator@2
$LN3@operator@2:

; 3620 : 	if(m_iUnitResource != rhs.m_iUnitResource) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+268]
	cmp	edx, DWORD PTR [ecx+268]
	je	SHORT $LN2@operator@2
	xor	al, al
	jmp	SHORT $LN7@operator@2
$LN2@operator@2:

; 3621 : 	if(m_iFirstTurnMultiplier != rhs.m_iFirstTurnMultiplier) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+272]
	cmp	edx, DWORD PTR [ecx+272]
	je	SHORT $LN1@operator@2
	xor	al, al
	jmp	SHORT $LN7@operator@2
$LN1@operator@2:

; 3622 : 	return true;

	mov	al, 1
$LN7@operator@2:

; 3623 : }

	mov	esp, ebp
	pop	ebp
	ret	4
??8CvTurnTimerInfo@@UBE_NABV0@@Z ENDP			; CvTurnTimerInfo::operator==
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?writeTo@CvTurnTimerInfo@@UBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_saveTo$ = 8						; size = 4
?writeTo@CvTurnTimerInfo@@UBEXAAVFDataStream@@@Z PROC	; CvTurnTimerInfo::writeTo, COMDAT
; _this$ = ecx

; 3626 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3627 : 	CvBaseInfo::writeTo(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z ; CvBaseInfo::writeTo

; 3628 : 	saveTo << m_iBaseTime;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3629 : 	saveTo << m_iCityResource;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3630 : 	saveTo << m_iUnitResource;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3631 : 	saveTo << m_iFirstTurnMultiplier;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3632 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?writeTo@CvTurnTimerInfo@@UBEXAAVFDataStream@@@Z ENDP	; CvTurnTimerInfo::writeTo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readFrom@CvTurnTimerInfo@@UAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
?readFrom@CvTurnTimerInfo@@UAEXAAVFDataStream@@@Z PROC	; CvTurnTimerInfo::readFrom, COMDAT
; _this$ = ecx

; 3635 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3636 : 	CvBaseInfo::readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z ; CvBaseInfo::readFrom

; 3637 : 	loadFrom >> m_iBaseTime;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3638 : 	loadFrom >> m_iCityResource;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3639 : 	loadFrom >> m_iUnitResource;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3640 : 	loadFrom >> m_iFirstTurnMultiplier;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3641 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?readFrom@CvTurnTimerInfo@@UAEXAAVFDataStream@@@Z ENDP	; CvTurnTimerInfo::readFrom
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvTurnTimerInfo@@@Z ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvTurnTimerInfo@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvTurnTimerInfo@@@Z PROC	; operator<<, COMDAT

; 3644 : {

	push	ebp
	mov	ebp, esp

; 3645 : 	readFrom.writeTo(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 3646 : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 3647 : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvTurnTimerInfo@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvTurnTimerInfo@@@Z ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvTurnTimerInfo@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvTurnTimerInfo@@@Z PROC	; operator>>, COMDAT

; 3650 : {

	push	ebp
	mov	ebp, esp

; 3651 : 	writeTo.readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 3652 : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 3653 : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvTurnTimerInfo@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??_7CvBuildInfo@@6B@				; CvBuildInfo::`vftable'
PUBLIC	??0CvBuildInfo@@QAE@XZ				; CvBuildInfo::CvBuildInfo
PUBLIC	?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBuildInfo::CacheResults
EXTRN	??_ECvBuildInfo@@UAEPAXI@Z:PROC			; CvBuildInfo::`vector deleting destructor'
;	COMDAT ??_7CvBuildInfo@@6B@
CONST	SEGMENT
??_7CvBuildInfo@@6B@ DD FLAT:?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBuildInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvBuildInfo@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvBuildInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvBuildInfo@@QAE@XZ PROC				; CvBuildInfo::CvBuildInfo, COMDAT
; _this$ = ecx

; 3685 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvHotKeyInfo@@QAE@XZ			; CvHotKeyInfo::CvHotKeyInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvBuildInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+468], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+472], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+476], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+480], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+484], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+488], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+492], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+493], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+494], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+495], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+500], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+501], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+504], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+508], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+512], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+516], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+520], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+524], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+528], 0

; 3686 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvBuildInfo@@QAE@XZ ENDP				; CvBuildInfo::CvBuildInfo
_TEXT	ENDS
PUBLIC	??1CvBuildInfo@@UAE@XZ				; CvBuildInfo::~CvBuildInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvBuildInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvBuildInfo@@UAEPAXI@Z PROC				; CvBuildInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBuildInfo@@UAE@XZ			; CvBuildInfo::~CvBuildInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvBuildInfo@@UAEPAXI@Z ENDP				; CvBuildInfo::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvBuildInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -120						; size = 4
$T232347 = -56						; size = 4
$T232346 = -52						; size = 4
$T232341 = -48						; size = 4
$T232340 = -44						; size = 4
$T232335 = -40						; size = 4
$T232334 = -36						; size = 4
$T232329 = -32						; size = 4
$T232328 = -28						; size = 4
$T232323 = -24						; size = 4
$T232322 = -20						; size = 4
$T232317 = -16						; size = 4
$T232316 = -12						; size = 4
$T232311 = -8						; size = 4
$T232310 = -4						; size = 4
??1CvBuildInfo@@UAE@XZ PROC				; CvBuildInfo::~CvBuildInfo, COMDAT
; _this$ = ecx

; 3689 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvBuildInfo@@6B@

; 3690 : 	SAFE_DELETE_ARRAY(m_paiFeatureTech);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	mov	DWORD PTR $T232311[ebp], ecx
	mov	edx, DWORD PTR $T232311[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232310[ebp], eax
	mov	ecx, DWORD PTR $T232310[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T232311[ebp]
	mov	DWORD PTR [edx], 0

; 3691 : 	SAFE_DELETE_ARRAY(m_paiFeatureTime);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 508				; 000001fcH
	mov	DWORD PTR $T232317[ebp], eax
	mov	ecx, DWORD PTR $T232317[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T232316[ebp], edx
	mov	eax, DWORD PTR $T232316[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T232317[ebp]
	mov	DWORD PTR [ecx], 0

; 3692 : 	SAFE_DELETE_ARRAY(m_paiFeatureProduction);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 512				; 00000200H
	mov	DWORD PTR $T232323[ebp], edx
	mov	eax, DWORD PTR $T232323[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T232322[ebp], ecx
	mov	edx, DWORD PTR $T232322[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T232323[ebp]
	mov	DWORD PTR [eax], 0

; 3693 : #ifdef NQ_FOOD_FROM_CHOPS
; 3694 : 	SAFE_DELETE_ARRAY(m_paiFeatureFood);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	mov	DWORD PTR $T232329[ebp], ecx
	mov	edx, DWORD PTR $T232329[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232328[ebp], eax
	mov	ecx, DWORD PTR $T232328[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T232329[ebp]
	mov	DWORD PTR [edx], 0

; 3695 : #endif
; 3696 : 	SAFE_DELETE_ARRAY(m_paiFeatureCost);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 520				; 00000208H
	mov	DWORD PTR $T232335[ebp], eax
	mov	ecx, DWORD PTR $T232335[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T232334[ebp], edx
	mov	eax, DWORD PTR $T232334[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T232335[ebp]
	mov	DWORD PTR [ecx], 0

; 3697 : 	SAFE_DELETE_ARRAY(m_paiTechTimeChange);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 524				; 0000020cH
	mov	DWORD PTR $T232341[ebp], edx
	mov	eax, DWORD PTR $T232341[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T232340[ebp], ecx
	mov	edx, DWORD PTR $T232340[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T232341[ebp]
	mov	DWORD PTR [eax], 0

; 3698 : 	SAFE_DELETE_ARRAY(m_pabFeatureRemove);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 528				; 00000210H
	mov	DWORD PTR $T232347[ebp], ecx
	mov	edx, DWORD PTR $T232347[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232346[ebp], eax
	mov	ecx, DWORD PTR $T232346[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T232347[ebp]
	mov	DWORD PTR [edx], 0

; 3699 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvHotKeyInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvBuildInfo@@UAE@XZ ENDP				; CvBuildInfo::~CvBuildInfo
_TEXT	ENDS
PUBLIC	?getTime@CvBuildInfo@@QBEHXZ			; CvBuildInfo::getTime
; Function compile flags: /Odtp
;	COMDAT ?getTime@CvBuildInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTime@CvBuildInfo@@QBEHXZ PROC			; CvBuildInfo::getTime, COMDAT
; _this$ = ecx

; 3702 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3703 : 	return m_iTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 3704 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTime@CvBuildInfo@@QBEHXZ ENDP			; CvBuildInfo::getTime
_TEXT	ENDS
PUBLIC	?getCost@CvBuildInfo@@QBEHXZ			; CvBuildInfo::getCost
; Function compile flags: /Odtp
;	COMDAT ?getCost@CvBuildInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCost@CvBuildInfo@@QBEHXZ PROC			; CvBuildInfo::getCost, COMDAT
; _this$ = ecx

; 3707 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3708 : 	return m_iCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]

; 3709 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCost@CvBuildInfo@@QBEHXZ ENDP			; CvBuildInfo::getCost
_TEXT	ENDS
PUBLIC	?getCostIncreasePerImprovement@CvBuildInfo@@QBEHXZ ; CvBuildInfo::getCostIncreasePerImprovement
; Function compile flags: /Odtp
;	COMDAT ?getCostIncreasePerImprovement@CvBuildInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCostIncreasePerImprovement@CvBuildInfo@@QBEHXZ PROC	; CvBuildInfo::getCostIncreasePerImprovement, COMDAT
; _this$ = ecx

; 3712 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3713 : 	return m_iCostIncreasePerImprovement;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+468]

; 3714 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCostIncreasePerImprovement@CvBuildInfo@@QBEHXZ ENDP	; CvBuildInfo::getCostIncreasePerImprovement
_TEXT	ENDS
PUBLIC	?getTechPrereq@CvBuildInfo@@QBEHXZ		; CvBuildInfo::getTechPrereq
; Function compile flags: /Odtp
;	COMDAT ?getTechPrereq@CvBuildInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTechPrereq@CvBuildInfo@@QBEHXZ PROC			; CvBuildInfo::getTechPrereq, COMDAT
; _this$ = ecx

; 3717 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3718 : 	return m_iTechPrereq;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+472]

; 3719 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTechPrereq@CvBuildInfo@@QBEHXZ ENDP			; CvBuildInfo::getTechPrereq
_TEXT	ENDS
PUBLIC	?getImprovement@CvBuildInfo@@QBEHXZ		; CvBuildInfo::getImprovement
; Function compile flags: /Odtp
;	COMDAT ?getImprovement@CvBuildInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getImprovement@CvBuildInfo@@QBEHXZ PROC		; CvBuildInfo::getImprovement, COMDAT
; _this$ = ecx

; 3722 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3723 : 	return m_iImprovement;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+476]

; 3724 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getImprovement@CvBuildInfo@@QBEHXZ ENDP		; CvBuildInfo::getImprovement
_TEXT	ENDS
PUBLIC	?getRoute@CvBuildInfo@@QBEHXZ			; CvBuildInfo::getRoute
; Function compile flags: /Odtp
;	COMDAT ?getRoute@CvBuildInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRoute@CvBuildInfo@@QBEHXZ PROC			; CvBuildInfo::getRoute, COMDAT
; _this$ = ecx

; 3727 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3728 : 	return m_iRoute;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+480]

; 3729 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRoute@CvBuildInfo@@QBEHXZ ENDP			; CvBuildInfo::getRoute
_TEXT	ENDS
PUBLIC	?getEntityEvent@CvBuildInfo@@QBEHXZ		; CvBuildInfo::getEntityEvent
; Function compile flags: /Odtp
;	COMDAT ?getEntityEvent@CvBuildInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEntityEvent@CvBuildInfo@@QBEHXZ PROC		; CvBuildInfo::getEntityEvent, COMDAT
; _this$ = ecx

; 3732 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3733 : 	return m_iEntityEvent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+484]

; 3734 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEntityEvent@CvBuildInfo@@QBEHXZ ENDP		; CvBuildInfo::getEntityEvent
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getMissionType@CvBuildInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMissionType@CvBuildInfo@@QBEHXZ PROC		; CvBuildInfo::getMissionType, COMDAT
; _this$ = ecx

; 3737 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3738 : 	return m_iMissionType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+488]

; 3739 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMissionType@CvBuildInfo@@QBEHXZ ENDP		; CvBuildInfo::getMissionType
_TEXT	ENDS
PUBLIC	?setMissionType@CvBuildInfo@@QAEXH@Z		; CvBuildInfo::setMissionType
; Function compile flags: /Odtp
;	COMDAT ?setMissionType@CvBuildInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iNewType$ = 8						; size = 4
?setMissionType@CvBuildInfo@@QAEXH@Z PROC		; CvBuildInfo::setMissionType, COMDAT
; _this$ = ecx

; 3742 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3743 : 	m_iMissionType = iNewType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iNewType$[ebp]
	mov	DWORD PTR [eax+488], ecx

; 3744 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setMissionType@CvBuildInfo@@QAEXH@Z ENDP		; CvBuildInfo::setMissionType
_TEXT	ENDS
PUBLIC	?isKill@CvBuildInfo@@QBE_NXZ			; CvBuildInfo::isKill
; Function compile flags: /Odtp
;	COMDAT ?isKill@CvBuildInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isKill@CvBuildInfo@@QBE_NXZ PROC			; CvBuildInfo::isKill, COMDAT
; _this$ = ecx

; 3747 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3748 : 	return m_bKill;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+492]

; 3749 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isKill@CvBuildInfo@@QBE_NXZ ENDP			; CvBuildInfo::isKill
_TEXT	ENDS
PUBLIC	?isRepair@CvBuildInfo@@QBE_NXZ			; CvBuildInfo::isRepair
; Function compile flags: /Odtp
;	COMDAT ?isRepair@CvBuildInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isRepair@CvBuildInfo@@QBE_NXZ PROC			; CvBuildInfo::isRepair, COMDAT
; _this$ = ecx

; 3752 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3753 : 	return m_bRepair;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+493]

; 3754 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isRepair@CvBuildInfo@@QBE_NXZ ENDP			; CvBuildInfo::isRepair
_TEXT	ENDS
PUBLIC	?IsRemoveRoute@CvBuildInfo@@QBE_NXZ		; CvBuildInfo::IsRemoveRoute
; Function compile flags: /Odtp
;	COMDAT ?IsRemoveRoute@CvBuildInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRemoveRoute@CvBuildInfo@@QBE_NXZ PROC		; CvBuildInfo::IsRemoveRoute, COMDAT
; _this$ = ecx

; 3757 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3758 : 	return m_bRemoveRoute;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+494]

; 3759 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRemoveRoute@CvBuildInfo@@QBE_NXZ ENDP		; CvBuildInfo::IsRemoveRoute
_TEXT	ENDS
PUBLIC	?IsSpecificCivRequired@CvBuildInfo@@QBE_NXZ	; CvBuildInfo::IsSpecificCivRequired
; Function compile flags: /Odtp
;	COMDAT ?IsSpecificCivRequired@CvBuildInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSpecificCivRequired@CvBuildInfo@@QBE_NXZ PROC	; CvBuildInfo::IsSpecificCivRequired, COMDAT
; _this$ = ecx

; 3764 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3765 : 	return m_bSpecificCivRequired;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+495]

; 3766 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsSpecificCivRequired@CvBuildInfo@@QBE_NXZ ENDP	; CvBuildInfo::IsSpecificCivRequired
_TEXT	ENDS
PUBLIC	?GetRequiredCivilization@CvBuildInfo@@QBE?AW4CivilizationTypes@@XZ ; CvBuildInfo::GetRequiredCivilization
; Function compile flags: /Odtp
;	COMDAT ?GetRequiredCivilization@CvBuildInfo@@QBE?AW4CivilizationTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRequiredCivilization@CvBuildInfo@@QBE?AW4CivilizationTypes@@XZ PROC ; CvBuildInfo::GetRequiredCivilization, COMDAT
; _this$ = ecx

; 3769 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3770 : 	return m_eRequiredCivilization;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+496]

; 3771 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRequiredCivilization@CvBuildInfo@@QBE?AW4CivilizationTypes@@XZ ENDP ; CvBuildInfo::GetRequiredCivilization
_TEXT	ENDS
PUBLIC	?IsWater@CvBuildInfo@@QBE_NXZ			; CvBuildInfo::IsWater
; Function compile flags: /Odtp
;	COMDAT ?IsWater@CvBuildInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsWater@CvBuildInfo@@QBE_NXZ PROC			; CvBuildInfo::IsWater, COMDAT
; _this$ = ecx

; 3775 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3776 : 	return m_bWater;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+500]

; 3777 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsWater@CvBuildInfo@@QBE_NXZ ENDP			; CvBuildInfo::IsWater
_TEXT	ENDS
PUBLIC	?IsCanBeEmbarked@CvBuildInfo@@QBE_NXZ		; CvBuildInfo::IsCanBeEmbarked
; Function compile flags: /Odtp
;	COMDAT ?IsCanBeEmbarked@CvBuildInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsCanBeEmbarked@CvBuildInfo@@QBE_NXZ PROC		; CvBuildInfo::IsCanBeEmbarked, COMDAT
; _this$ = ecx

; 3780 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3781 : 	return m_bCanBeEmbarked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+501]

; 3782 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsCanBeEmbarked@CvBuildInfo@@QBE_NXZ ENDP		; CvBuildInfo::IsCanBeEmbarked
_TEXT	ENDS
PUBLIC	?getFeatureTech@CvBuildInfo@@QBEHH@Z		; CvBuildInfo::getFeatureTech
; Function compile flags: /Odtp
;	COMDAT ?getFeatureTech@CvBuildInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFeatureTech@CvBuildInfo@@QBEHH@Z PROC		; CvBuildInfo::getFeatureTech, COMDAT
; _this$ = ecx

; 3786 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3787 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 3788 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3789 : 	return m_paiFeatureTech ? m_paiFeatureTech[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+504], 0
	je	SHORT $LN3@getFeature
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+504]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getFeature
$LN3@getFeature:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getFeature:
	mov	eax, DWORD PTR tv69[ebp]

; 3790 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFeatureTech@CvBuildInfo@@QBEHH@Z ENDP		; CvBuildInfo::getFeatureTech
_TEXT	ENDS
PUBLIC	?getFeatureTime@CvBuildInfo@@QBEHH@Z		; CvBuildInfo::getFeatureTime
; Function compile flags: /Odtp
;	COMDAT ?getFeatureTime@CvBuildInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFeatureTime@CvBuildInfo@@QBEHH@Z PROC		; CvBuildInfo::getFeatureTime, COMDAT
; _this$ = ecx

; 3793 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3794 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 3795 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3796 : 	return m_paiFeatureTime ? m_paiFeatureTime[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+508], 0
	je	SHORT $LN3@getFeature@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+508]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getFeature@2
$LN3@getFeature@2:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getFeature@2:
	mov	eax, DWORD PTR tv69[ebp]

; 3797 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFeatureTime@CvBuildInfo@@QBEHH@Z ENDP		; CvBuildInfo::getFeatureTime
_TEXT	ENDS
PUBLIC	?getFeatureProduction@CvBuildInfo@@QBEHH@Z	; CvBuildInfo::getFeatureProduction
; Function compile flags: /Odtp
;	COMDAT ?getFeatureProduction@CvBuildInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFeatureProduction@CvBuildInfo@@QBEHH@Z PROC		; CvBuildInfo::getFeatureProduction, COMDAT
; _this$ = ecx

; 3800 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3801 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 3802 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3803 : 	return m_paiFeatureProduction ? m_paiFeatureProduction[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+512], 0
	je	SHORT $LN3@getFeature@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+512]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getFeature@3
$LN3@getFeature@3:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getFeature@3:
	mov	eax, DWORD PTR tv69[ebp]

; 3804 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFeatureProduction@CvBuildInfo@@QBEHH@Z ENDP		; CvBuildInfo::getFeatureProduction
_TEXT	ENDS
PUBLIC	?getFeatureFood@CvBuildInfo@@QBEHH@Z		; CvBuildInfo::getFeatureFood
; Function compile flags: /Odtp
;	COMDAT ?getFeatureFood@CvBuildInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFeatureFood@CvBuildInfo@@QBEHH@Z PROC		; CvBuildInfo::getFeatureFood, COMDAT
; _this$ = ecx

; 3808 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3809 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 3810 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3811 : 	return m_paiFeatureFood ? m_paiFeatureFood[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN3@getFeature@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getFeature@4
$LN3@getFeature@4:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getFeature@4:
	mov	eax, DWORD PTR tv69[ebp]

; 3812 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFeatureFood@CvBuildInfo@@QBEHH@Z ENDP		; CvBuildInfo::getFeatureFood
_TEXT	ENDS
PUBLIC	?getFeatureCost@CvBuildInfo@@QBEHH@Z		; CvBuildInfo::getFeatureCost
; Function compile flags: /Odtp
;	COMDAT ?getFeatureCost@CvBuildInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFeatureCost@CvBuildInfo@@QBEHH@Z PROC		; CvBuildInfo::getFeatureCost, COMDAT
; _this$ = ecx

; 3816 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3817 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 3818 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3819 : 	return m_paiFeatureCost ? m_paiFeatureCost[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN3@getFeature@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getFeature@5
$LN3@getFeature@5:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getFeature@5:
	mov	eax, DWORD PTR tv69[ebp]

; 3820 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFeatureCost@CvBuildInfo@@QBEHH@Z ENDP		; CvBuildInfo::getFeatureCost
_TEXT	ENDS
PUBLIC	?getTechTimeChange@CvBuildInfo@@QBEHH@Z		; CvBuildInfo::getTechTimeChange
; Function compile flags: /Odtp
;	COMDAT ?getTechTimeChange@CvBuildInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getTechTimeChange@CvBuildInfo@@QBEHH@Z PROC		; CvBuildInfo::getTechTimeChange, COMDAT
; _this$ = ecx

; 3823 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3824 : 	CvAssertMsg(i < GC.getNumTechInfos(), "Index out of bounds");
; 3825 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3826 : 	return m_paiTechTimeChange ? m_paiTechTimeChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+524], 0
	je	SHORT $LN3@getTechTim
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+524]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getTechTim
$LN3@getTechTim:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getTechTim:
	mov	eax, DWORD PTR tv69[ebp]

; 3827 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getTechTimeChange@CvBuildInfo@@QBEHH@Z ENDP		; CvBuildInfo::getTechTimeChange
_TEXT	ENDS
PUBLIC	?isFeatureRemove@CvBuildInfo@@QBE_NH@Z		; CvBuildInfo::isFeatureRemove
; Function compile flags: /Odtp
;	COMDAT ?isFeatureRemove@CvBuildInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isFeatureRemove@CvBuildInfo@@QBE_NH@Z PROC		; CvBuildInfo::isFeatureRemove, COMDAT
; _this$ = ecx

; 3830 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3831 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 3832 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 3833 : 	return m_pabFeatureRemove ? m_pabFeatureRemove[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+528], 0
	je	SHORT $LN3@isFeatureR
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isFeatureR
$LN3@isFeatureR:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isFeatureR:
	mov	al, BYTE PTR tv68[ebp]

; 3834 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isFeatureRemove@CvBuildInfo@@QBE_NH@Z ENDP		; CvBuildInfo::isFeatureRemove
_TEXT	ENDS
PUBLIC	??_C@_0BG@NDKHHOLE@Build_TechTimeChanges?$AA@	; `string'
PUBLIC	??_C@_09LLAGGHGM@BuildType?$AA@			; `string'
PUBLIC	??_C@_0L@PPDHHJHK@TimeChange?$AA@		; `string'
PUBLIC	??_C@_06MEPBJJFP@Remove?$AA@			; `string'
PUBLIC	??_C@_04MPDBGAOA@Food?$AA@			; `string'
PUBLIC	??_C@_0L@LLIJAGM@Production?$AA@		; `string'
PUBLIC	??_C@_0M@LJDMFNNN@FeatureType?$AA@		; `string'
PUBLIC	??_C@_0DD@CJFMGKIP@select?5?$CK?5from?5BuildFeatures?5wher@ ; `string'
PUBLIC	??$InitializeArray@_N@CvDatabaseUtility@@QAEXAAPA_NPBD_N@Z ; CvDatabaseUtility::InitializeArray<bool>
PUBLIC	??_C@_08CLANBDND@Features?$AA@			; `string'
PUBLIC	??_C@_0M@FMCFIPJI@EntityEvent?$AA@		; `string'
PUBLIC	??_C@_09BBDPALAD@RouteType?$AA@			; `string'
PUBLIC	??_C@_0BA@PMOLGEPK@ImprovementType?$AA@		; `string'
PUBLIC	??_C@_0L@NJNFNDFO@PrereqTech?$AA@		; `string'
PUBLIC	??_C@_0BE@JMIEJANC@SpecificCivRequired?$AA@	; `string'
PUBLIC	??_C@_0O@JIKCJBBB@CanBeEmbarked?$AA@		; `string'
PUBLIC	??_C@_05EMKMBNJK@Water?$AA@			; `string'
PUBLIC	??_C@_0M@CMCMLLDJ@RemoveRoute?$AA@		; `string'
PUBLIC	??_C@_06KOKHNNIE@Repair?$AA@			; `string'
PUBLIC	??_C@_04NIFFMPNM@Kill?$AA@			; `string'
PUBLIC	??_C@_0BL@EBOLMOJI@CostIncreasePerImprovement?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__sprintf_s:PROC
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BG@NDKHHOLE@Build_TechTimeChanges?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0BG@NDKHHOLE@Build_TechTimeChanges?$AA@ DB 'Build_TechTimeChanges', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LLAGGHGM@BuildType?$AA@
CONST	SEGMENT
??_C@_09LLAGGHGM@BuildType?$AA@ DB 'BuildType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PPDHHJHK@TimeChange?$AA@
CONST	SEGMENT
??_C@_0L@PPDHHJHK@TimeChange?$AA@ DB 'TimeChange', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MEPBJJFP@Remove?$AA@
CONST	SEGMENT
??_C@_06MEPBJJFP@Remove?$AA@ DB 'Remove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MPDBGAOA@Food?$AA@
CONST	SEGMENT
??_C@_04MPDBGAOA@Food?$AA@ DB 'Food', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLIJAGM@Production?$AA@
CONST	SEGMENT
??_C@_0L@LLIJAGM@Production?$AA@ DB 'Production', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LJDMFNNN@FeatureType?$AA@
CONST	SEGMENT
??_C@_0M@LJDMFNNN@FeatureType?$AA@ DB 'FeatureType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CJFMGKIP@select?5?$CK?5from?5BuildFeatures?5wher@
CONST	SEGMENT
??_C@_0DD@CJFMGKIP@select?5?$CK?5from?5BuildFeatures?5wher@ DB 'select * '
	DB	'from BuildFeatures where BuildType = ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CLANBDND@Features?$AA@
CONST	SEGMENT
??_C@_08CLANBDND@Features?$AA@ DB 'Features', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FMCFIPJI@EntityEvent?$AA@
CONST	SEGMENT
??_C@_0M@FMCFIPJI@EntityEvent?$AA@ DB 'EntityEvent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BBDPALAD@RouteType?$AA@
CONST	SEGMENT
??_C@_09BBDPALAD@RouteType?$AA@ DB 'RouteType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PMOLGEPK@ImprovementType?$AA@
CONST	SEGMENT
??_C@_0BA@PMOLGEPK@ImprovementType?$AA@ DB 'ImprovementType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NJNFNDFO@PrereqTech?$AA@
CONST	SEGMENT
??_C@_0L@NJNFNDFO@PrereqTech?$AA@ DB 'PrereqTech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JMIEJANC@SpecificCivRequired?$AA@
CONST	SEGMENT
??_C@_0BE@JMIEJANC@SpecificCivRequired?$AA@ DB 'SpecificCivRequired', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JIKCJBBB@CanBeEmbarked?$AA@
CONST	SEGMENT
??_C@_0O@JIKCJBBB@CanBeEmbarked?$AA@ DB 'CanBeEmbarked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMKMBNJK@Water?$AA@
CONST	SEGMENT
??_C@_05EMKMBNJK@Water?$AA@ DB 'Water', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CMCMLLDJ@RemoveRoute?$AA@
CONST	SEGMENT
??_C@_0M@CMCMLLDJ@RemoveRoute?$AA@ DB 'RemoveRoute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KOKHNNIE@Repair?$AA@
CONST	SEGMENT
??_C@_06KOKHNNIE@Repair?$AA@ DB 'Repair', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NIFFMPNM@Kill?$AA@
CONST	SEGMENT
??_C@_04NIFFMPNM@Kill?$AA@ DB 'Kill', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EBOLMOJI@CostIncreasePerImprovement?$AA@
CONST	SEGMENT
??_C@_0BL@EBOLMOJI@CostIncreasePerImprovement?$AA@ DB 'CostIncreasePerImp'
	DB	'rovement', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
__ehfuncinfo$?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -716						; size = 4
$T232558 = -712						; size = 4
_count$232538 = -688					; size = 4
_count$232531 = -676					; size = 4
_count$232524 = -664					; size = 4
_count$232517 = -652					; size = 4
_count$232510 = -640					; size = 4
_szFeatureType$219849 = -636				; size = 4
_iFeatureIdx$219851 = -632				; size = 4
_szFeatureTech$219852 = -628				; size = 4
_szFeatureQuery$219842 = -624				; size = 4
_kArrayResults$219844 = -620				; size = 64
_szQuery$219841 = -556					; size = 512
__$ArrayPad$ = -40					; size = 4
_szImprovementType$ = -36				; size = 4
_szEntityEvent$ = -32					; size = 4
_szCivilizationType$ = -28				; size = 4
_szRouteType$ = -24					; size = 4
_szPrereqTech$ = -20					; size = 4
_szBuildType$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvBuildInfo::CacheResults, COMDAT
; _this$ = ecx

; 3837 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 704				; 000002c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3838 : 	if(!CvHotKeyInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CacheResul@19

; 3839 : 		return false;

	xor	al, al
	jmp	$LN5@CacheResul@19
$LN4@CacheResul@19:

; 3840 : 
; 3841 : 	m_iTime = kResults.GetInt("Time");

	push	OFFSET ??_C@_04OKOFBOPB@Time?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], eax

; 3842 : 	m_iCost = kResults.GetInt("Cost");

	push	OFFSET ??_C@_04FICPKHNF@Cost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], eax

; 3843 : 	m_iCostIncreasePerImprovement = kResults.GetInt("CostIncreasePerImprovement");

	push	OFFSET ??_C@_0BL@EBOLMOJI@CostIncreasePerImprovement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+468], eax

; 3844 : 	m_bKill = kResults.GetBool("Kill");

	push	OFFSET ??_C@_04NIFFMPNM@Kill?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+492], al

; 3845 : 	m_bRepair = kResults.GetBool("Repair");

	push	OFFSET ??_C@_06KOKHNNIE@Repair?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+493], al

; 3846 : 	m_bRemoveRoute = kResults.GetBool("RemoveRoute");

	push	OFFSET ??_C@_0M@CMCMLLDJ@RemoveRoute?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+494], al

; 3847 : 	m_bWater = kResults.GetBool("Water");

	push	OFFSET ??_C@_05EMKMBNJK@Water?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+500], al

; 3848 : 	m_bCanBeEmbarked = kResults.GetBool("CanBeEmbarked");

	push	OFFSET ??_C@_0O@JIKCJBBB@CanBeEmbarked?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+501], al

; 3849 : 	//EAP: Adding Civ req to builds as well
; 3850 : 	m_bSpecificCivRequired = kResults.GetBool("SpecificCivRequired");

	push	OFFSET ??_C@_0BE@JMIEJANC@SpecificCivRequired?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+495], al

; 3851 : 
; 3852 : 	const char* szCivilizationType = kResults.GetText("CivilizationType");

	push	OFFSET ??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szCivilizationType$[ebp], eax

; 3853 : 	m_eRequiredCivilization = (CivilizationTypes)GC.getInfoTypeForString(szCivilizationType, true);

	push	1
	mov	edx, DWORD PTR _szCivilizationType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+496], eax

; 3854 : 
; 3855 : 
; 3856 : 	///
; 3857 : 
; 3858 : 
; 3859 : 	const char* szPrereqTech = kResults.GetText("PrereqTech");

	push	OFFSET ??_C@_0L@NJNFNDFO@PrereqTech?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPrereqTech$[ebp], eax

; 3860 : 	m_iTechPrereq = GC.getInfoTypeForString(szPrereqTech, true);

	push	1
	mov	edx, DWORD PTR _szPrereqTech$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+472], eax

; 3861 : 
; 3862 : 	const char* szImprovementType = kResults.GetText("ImprovementType");

	push	OFFSET ??_C@_0BA@PMOLGEPK@ImprovementType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szImprovementType$[ebp], eax

; 3863 : 	m_iImprovement = GC.getInfoTypeForString(szImprovementType, true);

	push	1
	mov	edx, DWORD PTR _szImprovementType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+476], eax

; 3864 : 
; 3865 : 	const char* szRouteType = kResults.GetText("RouteType");

	push	OFFSET ??_C@_09BBDPALAD@RouteType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szRouteType$[ebp], eax

; 3866 : 	m_iRoute = GC.getInfoTypeForString(szRouteType, true);

	push	1
	mov	edx, DWORD PTR _szRouteType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+480], eax

; 3867 : 
; 3868 : 	const char* szEntityEvent = kResults.GetText("EntityEvent");

	push	OFFSET ??_C@_0M@FMCFIPJI@EntityEvent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szEntityEvent$[ebp], eax

; 3869 : 	m_iEntityEvent = GC.getInfoTypeForString(szEntityEvent, true);

	push	1
	mov	edx, DWORD PTR _szEntityEvent$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+484], eax

; 3870 : 
; 3871 : 	//NOTE: Why isn't this really a struct? o_O
; 3872 : 	//HACK: Temporary until the stored proc system is finished
; 3873 : 	//FeatureStructs
; 3874 : 	{
; 3875 : 		kUtility.InitializeArray(m_paiFeatureTech, "Features");

	push	OFFSET ??_C@_08CLANBDND@Features?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$232510[ebp], eax
	cmp	DWORD PTR _count$232510[ebp], 0
	jne	SHORT $LN8@CacheResul@19
	mov	DWORD PTR _count$232510[ebp], 1
$LN8@CacheResul@19:
	push	0
	mov	edx, DWORD PTR _count$232510[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 504				; 000001f8H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 3876 : 		kUtility.InitializeArray(m_paiFeatureTime, "Features");

	push	OFFSET ??_C@_08CLANBDND@Features?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$232517[ebp], eax
	cmp	DWORD PTR _count$232517[ebp], 0
	jne	SHORT $LN18@CacheResul@19
	mov	DWORD PTR _count$232517[ebp], 1
$LN18@CacheResul@19:
	push	0
	mov	ecx, DWORD PTR _count$232517[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 508				; 000001fcH
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 3877 : 		kUtility.InitializeArray(m_paiFeatureProduction, "Features");

	push	OFFSET ??_C@_08CLANBDND@Features?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$232524[ebp], eax
	cmp	DWORD PTR _count$232524[ebp], 0
	jne	SHORT $LN28@CacheResul@19
	mov	DWORD PTR _count$232524[ebp], 1
$LN28@CacheResul@19:
	push	0
	mov	eax, DWORD PTR _count$232524[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 512				; 00000200H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 3878 : #ifdef NQ_FOOD_FROM_CHOPS
; 3879 : 		kUtility.InitializeArray(m_paiFeatureFood, "Features");

	push	OFFSET ??_C@_08CLANBDND@Features?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$232531[ebp], eax
	cmp	DWORD PTR _count$232531[ebp], 0
	jne	SHORT $LN38@CacheResul@19
	mov	DWORD PTR _count$232531[ebp], 1
$LN38@CacheResul@19:
	push	0
	mov	edx, DWORD PTR _count$232531[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 516				; 00000204H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 3880 : #endif
; 3881 : 		kUtility.InitializeArray(m_paiFeatureCost, "Features");

	push	OFFSET ??_C@_08CLANBDND@Features?$AA@
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$232538[ebp], eax
	cmp	DWORD PTR _count$232538[ebp], 0
	jne	SHORT $LN48@CacheResul@19
	mov	DWORD PTR _count$232538[ebp], 1
$LN48@CacheResul@19:
	push	0
	mov	ecx, DWORD PTR _count$232538[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 520				; 00000208H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 3882 : 		kUtility.InitializeArray(m_pabFeatureRemove, "Features");

	push	0
	push	OFFSET ??_C@_08CLANBDND@Features?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 528				; 00000210H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	??$InitializeArray@_N@CvDatabaseUtility@@QAEXAAPA_NPBD_N@Z ; CvDatabaseUtility::InitializeArray<bool>

; 3883 : 
; 3884 : 		char szQuery[512];
; 3885 : 		const char* szFeatureQuery = "select * from BuildFeatures where BuildType = '%s'";

	mov	DWORD PTR _szFeatureQuery$219842[ebp], OFFSET ??_C@_0DD@CJFMGKIP@select?5?$CK?5from?5BuildFeatures?5wher@

; 3886 : 		sprintf_s(szQuery, 512, szFeatureQuery, GetType());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _szFeatureQuery$219842[ebp]
	push	ecx
	push	512					; 00000200H
	lea	edx, DWORD PTR _szQuery$219841[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf_s
	add	esp, 16					; 00000010H

; 3887 : 
; 3888 : 		Database::Results kArrayResults;

	push	0
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3889 : 		if(DB.Execute(kArrayResults, szQuery))

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T232558[ebp], eax
	push	-1
	lea	ecx, DWORD PTR _szQuery$219841[ebp]
	push	ecx
	lea	edx, DWORD PTR _kArrayResults$219844[ebp]
	push	edx
	mov	ecx, DWORD PTR $T232558[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	eax, al
	test	eax, eax
	je	$LN3@CacheResul@19
$LN2@CacheResul@19:

; 3890 : 		{
; 3891 : 			while(kArrayResults.Step())

	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@CacheResul@19

; 3892 : 			{
; 3893 : 				const char* szFeatureType			= kArrayResults.GetText("FeatureType");

	push	OFFSET ??_C@_0M@LJDMFNNN@FeatureType?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szFeatureType$219849[ebp], eax

; 3894 : 				const int iFeatureIdx				= GC.getInfoTypeForString(szFeatureType, true);

	push	1
	mov	edx, DWORD PTR _szFeatureType$219849[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _iFeatureIdx$219851[ebp], eax

; 3895 : 
; 3896 : 				const char* szFeatureTech			= kArrayResults.GetText("PrereqTech");

	push	OFFSET ??_C@_0L@NJNFNDFO@PrereqTech?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szFeatureTech$219852[ebp], eax

; 3897 : 
; 3898 : 				CvAssert(iFeatureIdx > -1);
; 3899 : 				m_paiFeatureTech[iFeatureIdx]		= GC.getInfoTypeForString(szFeatureTech, true);

	push	1
	mov	eax, DWORD PTR _szFeatureTech$219852[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+504]
	mov	ecx, DWORD PTR _iFeatureIdx$219851[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 3900 : 				m_paiFeatureTime[iFeatureIdx]		= kArrayResults.GetInt("Time");

	push	OFFSET ??_C@_04OKOFBOPB@Time?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+508]
	mov	edx, DWORD PTR _iFeatureIdx$219851[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 3901 : 				m_paiFeatureProduction[iFeatureIdx] = kArrayResults.GetInt("Production");

	push	OFFSET ??_C@_0L@LLIJAGM@Production?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+512]
	mov	ecx, DWORD PTR _iFeatureIdx$219851[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 3902 : #ifdef NQ_FOOD_FROM_CHOPS
; 3903 : 				m_paiFeatureFood[iFeatureIdx]		= kArrayResults.GetInt("Food");

	push	OFFSET ??_C@_04MPDBGAOA@Food?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+516]
	mov	edx, DWORD PTR _iFeatureIdx$219851[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 3904 : #endif
; 3905 : 				m_paiFeatureCost[iFeatureIdx]		= kArrayResults.GetInt("Cost");

	push	OFFSET ??_C@_04FICPKHNF@Cost?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	ecx, DWORD PTR _iFeatureIdx$219851[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 3906 : 				m_pabFeatureRemove[iFeatureIdx]		= kArrayResults.GetBool("Remove");

	push	OFFSET ??_C@_06MEPBJJFP@Remove?$AA@
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+528]
	mov	edx, DWORD PTR _iFeatureIdx$219851[ebp]
	mov	BYTE PTR [ecx+edx], al

; 3907 : 			}

	jmp	$LN2@CacheResul@19
$LN3@CacheResul@19:

; 3908 : 		}
; 3909 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ

; 3910 : 	
; 3911 : 	const char* szBuildType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szBuildType$[ebp], eax

; 3912 : 	kUtility.PopulateArrayByValue(m_paiTechTimeChange, "Technologies", "Build_TechTimeChanges", "TechType", "BuildType", szBuildType, "TimeChange");

	push	0
	push	0
	push	OFFSET ??_C@_0L@PPDHHJHK@TimeChange?$AA@
	mov	eax, DWORD PTR _szBuildType$[ebp]
	push	eax
	push	OFFSET ??_C@_09LLAGGHGM@BuildType?$AA@
	push	OFFSET ??_C@_08GHGFPPBE@TechType?$AA@
	push	OFFSET ??_C@_0BG@NDKHHOLE@Build_TechTimeChanges?$AA@
	push	OFFSET ??_C@_0N@INKDAICK@Technologies?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 3913 : 
; 3914 : 	return true;

	mov	al, 1
$LN5@CacheResul@19:

; 3915 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _kArrayResults$219844[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__ehhandler$?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-708]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvBuildInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvBuildInfo::CacheResults
PUBLIC	??_C@_0CB@GMLEIDBA@LOAD?5ERROR?3?5Build?5Type?5not?5found@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z ; BuildArrayHelpers::Read
EXTRN	?Read@FDataStream@@IAEXAAF@Z:PROC		; FDataStream::Read
;	COMDAT ??_C@_0CB@GMLEIDBA@LOAD?5ERROR?3?5Build?5Type?5not?5found@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0CB@GMLEIDBA@LOAD?5ERROR?3?5Build?5Type?5not?5found@ DB 'LOAD ERROR'
	DB	': Build Type not found', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z$0
__ehfuncinfo$?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z
_TEXT	SEGMENT
_iDummy$219880 = -64					; size = 4
_szError$219878 = -60					; size = 28
__$ArrayPad$ = -32					; size = 4
_bValid$219870 = -25					; size = 1
_iI$219866 = -24					; size = 4
_iType$ = -20						; size = 4
_iNumEntries$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kStream$ = 8						; size = 4
_paiBuildArray$ = 12					; size = 4
?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z PROC	; BuildArrayHelpers::Read, COMDAT

; 3923 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 3924 : 	int iNumEntries;
; 3925 : 	int iType;
; 3926 : 
; 3927 : 	kStream >> iNumEntries;

	lea	eax, DWORD PTR _iNumEntries$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3928 : 
; 3929 : 	for(int iI = 0; iI < iNumEntries; iI++)

	mov	DWORD PTR _iI$219866[ebp], 0
	jmp	SHORT $LN7@Read@3
$LN6@Read@3:
	mov	ecx, DWORD PTR _iI$219866[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$219866[ebp], ecx
$LN7@Read@3:
	mov	edx, DWORD PTR _iI$219866[ebp]
	cmp	edx, DWORD PTR _iNumEntries$[ebp]
	jge	$LN8@Read@3

; 3930 : 	{
; 3931 : 		bool bValid = true;

	mov	BYTE PTR _bValid$219870[ebp], 1

; 3932 : 		iType = CvInfosSerializationHelper::ReadHashed(kStream, &bValid);

	lea	eax, DWORD PTR _bValid$219870[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	push	ecx
	call	?ReadHashed@CvInfosSerializationHelper@@YAHAAVFDataStream@@PA_N@Z ; CvInfosSerializationHelper::ReadHashed
	add	esp, 8
	mov	DWORD PTR _iType$[ebp], eax

; 3933 : 		if(iType != -1 || !bValid)

	cmp	DWORD PTR _iType$[ebp], -1
	jne	SHORT $LN3@Read@3
	movzx	edx, BYTE PTR _bValid$219870[ebp]
	test	edx, edx
	jne	SHORT $LN4@Read@3
$LN3@Read@3:

; 3934 : 		{
; 3935 : 			if(iType != -1)

	cmp	DWORD PTR _iType$[ebp], -1
	je	SHORT $LN2@Read@3

; 3936 : 			{
; 3937 : 				kStream >> paiBuildArray[iType];

	mov	eax, DWORD PTR _iType$[ebp]
	mov	ecx, DWORD PTR _paiBuildArray$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAF@Z		; FDataStream::Read

; 3938 : 			}
; 3939 : 			else

	jmp	SHORT $LN4@Read@3
$LN2@Read@3:

; 3940 : 			{
; 3941 : 				CvString szError;

	lea	ecx, DWORD PTR _szError$219878[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 3942 : 				szError.Format("LOAD ERROR: Build Type not found");

	push	OFFSET ??_C@_0CB@GMLEIDBA@LOAD?5ERROR?3?5Build?5Type?5not?5found@
	lea	eax, DWORD PTR _szError$219878[ebp]
	push	eax
	call	?Format@CvString@@QAAXPBDZZ		; CvString::Format
	add	esp, 8

; 3943 : 				GC.LogMessage(szError.GetCString());

	lea	ecx, DWORD PTR _szError$219878[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?LogMessage@CvGlobals@@QAEXPBD@Z	; CvGlobals::LogMessage

; 3944 : 				CvAssertMsg(false, szError);
; 3945 : 
; 3946 : 				int iDummy;
; 3947 : 				kStream >> iDummy;

	lea	ecx, DWORD PTR _iDummy$219880[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 3948 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _szError$219878[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN4@Read@3:

; 3949 : 		}

	jmp	$LN6@Read@3
$LN8@Read@3:

; 3950 : 	}
; 3951 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z$0:
	lea	ecx, DWORD PTR _szError$219878[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Read@BuildArrayHelpers@@YAXAAVFDataStream@@PAF@Z ENDP	; BuildArrayHelpers::Read
PUBLIC	?Write@BuildArrayHelpers@@YAXAAVFDataStream@@PAFH@Z ; BuildArrayHelpers::Write
EXTRN	?Write@FDataStream@@IAEXABF@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?Write@BuildArrayHelpers@@YAXAAVFDataStream@@PAFH@Z
_TEXT	SEGMENT
$T232601 = -16						; size = 4
_eBuild$219890 = -12					; size = 4
_pkBuildInfo$219892 = -8				; size = 4
_iI$219886 = -4						; size = 4
_kStream$ = 8						; size = 4
_paiBuildArray$ = 12					; size = 4
_iArraySize$ = 16					; size = 4
?Write@BuildArrayHelpers@@YAXAAVFDataStream@@PAFH@Z PROC ; BuildArrayHelpers::Write, COMDAT

; 3959 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 3960 : 	kStream << iArraySize;

	lea	eax, DWORD PTR _iArraySize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 3961 : 
; 3962 : 	for(int iI = 0; iI < iArraySize; iI++)

	mov	DWORD PTR _iI$219886[ebp], 0
	jmp	SHORT $LN5@Write@3
$LN4@Write@3:
	mov	ecx, DWORD PTR _iI$219886[ebp]
	add	ecx, 1
	mov	DWORD PTR _iI$219886[ebp], ecx
$LN5@Write@3:
	mov	edx, DWORD PTR _iI$219886[ebp]
	cmp	edx, DWORD PTR _iArraySize$[ebp]
	jge	SHORT $LN6@Write@3

; 3963 : 	{
; 3964 : 		const BuildTypes eBuild = static_cast<BuildTypes>(iI);

	mov	eax, DWORD PTR _iI$219886[ebp]
	mov	DWORD PTR _eBuild$219890[ebp], eax

; 3965 : 		CvBuildInfo* pkBuildInfo = GC.getBuildInfo(eBuild);

	mov	ecx, DWORD PTR _eBuild$219890[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getBuildInfo@CvGlobals@@QAEPAVCvBuildInfo@@W4BuildTypes@@@Z ; CvGlobals::getBuildInfo
	mov	DWORD PTR _pkBuildInfo$219892[ebp], eax

; 3966 : 		if(pkBuildInfo)

	cmp	DWORD PTR _pkBuildInfo$219892[ebp], 0
	je	SHORT $LN2@Write@3

; 3967 : 		{
; 3968 : 			CvInfosSerializationHelper::WriteHashed(kStream, pkBuildInfo);

	mov	edx, DWORD PTR _pkBuildInfo$219892[ebp]
	push	edx
	mov	eax, DWORD PTR _kStream$[ebp]
	push	eax
	call	?WriteHashed@CvInfosSerializationHelper@@YA_NAAVFDataStream@@PBVCvBaseInfo@@@Z ; CvInfosSerializationHelper::WriteHashed
	add	esp, 8

; 3969 : 			kStream << paiBuildArray[iI];

	mov	ecx, DWORD PTR _iI$219886[ebp]
	mov	edx, DWORD PTR _paiBuildArray$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABF@Z		; FDataStream::Write

; 3970 : 		}
; 3971 : 		else

	jmp	SHORT $LN1@Write@3
$LN2@Write@3:

; 3972 : 		{
; 3973 : 			kStream << (int)0;

	mov	DWORD PTR $T232601[ebp], 0
	lea	ecx, DWORD PTR $T232601[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kStream$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write
$LN1@Write@3:

; 3974 : 		}

	jmp	SHORT $LN4@Write@3
$LN6@Write@3:

; 3975 : 	}
; 3976 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Write@BuildArrayHelpers@@YAXAAVFDataStream@@PAFH@Z ENDP ; BuildArrayHelpers::Write
_TEXT	ENDS
PUBLIC	??_7CvGoodyInfo@@6B@				; CvGoodyInfo::`vftable'
PUBLIC	??0CvGoodyInfo@@QAE@XZ				; CvGoodyInfo::CvGoodyInfo
PUBLIC	?CacheResults@CvGoodyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvGoodyInfo::CacheResults
;	COMDAT ??_7CvGoodyInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvGoodyInfo@@6B@ DD FLAT:?CacheResults@CvGoodyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvGoodyInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvGoodyInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvGoodyInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvGoodyInfo@@QAE@XZ$1
__ehfuncinfo$??0CvGoodyInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvGoodyInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvGoodyInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T232625 = -20						; size = 4
$T232620 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvGoodyInfo@@QAE@XZ PROC				; CvGoodyInfo::CvGoodyInfo, COMDAT
; _this$ = ecx

; 4013 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvGoodyInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvGoodyInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+332], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+333], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+334], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+335], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+336], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 340				; 00000154H
	mov	DWORD PTR $T232620[ebp], eax
	mov	ecx, DWORD PTR $T232620[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 368				; 00000170H
	mov	DWORD PTR $T232625[ebp], ecx
	mov	ecx, DWORD PTR $T232625[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4014 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvGoodyInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvGoodyInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvGoodyInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvGoodyInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvGoodyInfo@@QAE@XZ ENDP				; CvGoodyInfo::CvGoodyInfo
PUBLIC	?getGold@CvGoodyInfo@@QBEHXZ			; CvGoodyInfo::getGold
; Function compile flags: /Odtp
;	COMDAT ?getGold@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGold@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getGold, COMDAT
; _this$ = ecx

; 4017 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4018 : 	return m_iGold;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 4019 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGold@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getGold
_TEXT	ENDS
PUBLIC	?getNumGoldRandRolls@CvGoodyInfo@@QBEHXZ	; CvGoodyInfo::getNumGoldRandRolls
; Function compile flags: /Odtp
;	COMDAT ?getNumGoldRandRolls@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumGoldRandRolls@CvGoodyInfo@@QBEHXZ PROC		; CvGoodyInfo::getNumGoldRandRolls, COMDAT
; _this$ = ecx

; 4022 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4023 : 	return m_iNumGoldRandRolls;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 4024 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumGoldRandRolls@CvGoodyInfo@@QBEHXZ ENDP		; CvGoodyInfo::getNumGoldRandRolls
_TEXT	ENDS
PUBLIC	?getGoldRandAmount@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getGoldRandAmount
; Function compile flags: /Odtp
;	COMDAT ?getGoldRandAmount@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldRandAmount@CvGoodyInfo@@QBEHXZ PROC		; CvGoodyInfo::getGoldRandAmount, COMDAT
; _this$ = ecx

; 4027 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4028 : 	return m_iGoldRandAmount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 4029 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldRandAmount@CvGoodyInfo@@QBEHXZ ENDP		; CvGoodyInfo::getGoldRandAmount
_TEXT	ENDS
PUBLIC	?getMapOffset@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getMapOffset
; Function compile flags: /Odtp
;	COMDAT ?getMapOffset@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMapOffset@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getMapOffset, COMDAT
; _this$ = ecx

; 4032 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4033 : 	return m_iMapOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 4034 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMapOffset@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getMapOffset
_TEXT	ENDS
PUBLIC	?getMapRange@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getMapRange
; Function compile flags: /Odtp
;	COMDAT ?getMapRange@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMapRange@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getMapRange, COMDAT
; _this$ = ecx

; 4037 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4038 : 	return m_iMapRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 4039 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMapRange@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getMapRange
_TEXT	ENDS
PUBLIC	?getMapProb@CvGoodyInfo@@QBEHXZ			; CvGoodyInfo::getMapProb
; Function compile flags: /Odtp
;	COMDAT ?getMapProb@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMapProb@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getMapProb, COMDAT
; _this$ = ecx

; 4042 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4043 : 	return m_iMapProb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 4044 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMapProb@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getMapProb
_TEXT	ENDS
PUBLIC	?getExperience@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getExperience
; Function compile flags: /Odtp
;	COMDAT ?getExperience@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getExperience@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getExperience, COMDAT
; _this$ = ecx

; 4047 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4048 : 	return m_iExperience;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 4049 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getExperience@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getExperience
_TEXT	ENDS
PUBLIC	?getHealing@CvGoodyInfo@@QBEHXZ			; CvGoodyInfo::getHealing
; Function compile flags: /Odtp
;	COMDAT ?getHealing@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHealing@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getHealing, COMDAT
; _this$ = ecx

; 4052 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4053 : 	return m_iHealing;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 4054 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHealing@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getHealing
_TEXT	ENDS
PUBLIC	?getDamagePrereq@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getDamagePrereq
; Function compile flags: /Odtp
;	COMDAT ?getDamagePrereq@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDamagePrereq@CvGoodyInfo@@QBEHXZ PROC		; CvGoodyInfo::getDamagePrereq, COMDAT
; _this$ = ecx

; 4057 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4058 : 	return m_iDamagePrereq;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 4059 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDamagePrereq@CvGoodyInfo@@QBEHXZ ENDP		; CvGoodyInfo::getDamagePrereq
_TEXT	ENDS
PUBLIC	?getCulture@CvGoodyInfo@@QBEHXZ			; CvGoodyInfo::getCulture
; Function compile flags: /Odtp
;	COMDAT ?getCulture@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCulture@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getCulture, COMDAT
; _this$ = ecx

; 4062 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4063 : 	return m_iCulture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 4064 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCulture@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getCulture
_TEXT	ENDS
PUBLIC	?getFaith@CvGoodyInfo@@QBEHXZ			; CvGoodyInfo::getFaith
; Function compile flags: /Odtp
;	COMDAT ?getFaith@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFaith@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getFaith, COMDAT
; _this$ = ecx

; 4067 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4068 : 	return m_iFaith;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 4069 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFaith@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getFaith
_TEXT	ENDS
PUBLIC	?getProphetPercent@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getProphetPercent
; Function compile flags: /Odtp
;	COMDAT ?getProphetPercent@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getProphetPercent@CvGoodyInfo@@QBEHXZ PROC		; CvGoodyInfo::getProphetPercent, COMDAT
; _this$ = ecx

; 4072 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4073 : 	return m_iProphetPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 4074 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getProphetPercent@CvGoodyInfo@@QBEHXZ ENDP		; CvGoodyInfo::getProphetPercent
_TEXT	ENDS
PUBLIC	?getRevealNearbyBarbariansRange@CvGoodyInfo@@QBEHXZ ; CvGoodyInfo::getRevealNearbyBarbariansRange
; Function compile flags: /Odtp
;	COMDAT ?getRevealNearbyBarbariansRange@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRevealNearbyBarbariansRange@CvGoodyInfo@@QBEHXZ PROC ; CvGoodyInfo::getRevealNearbyBarbariansRange, COMDAT
; _this$ = ecx

; 4077 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4078 : 	return m_iRevealNearbyBarbariansRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+312]

; 4079 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRevealNearbyBarbariansRange@CvGoodyInfo@@QBEHXZ ENDP ; CvGoodyInfo::getRevealNearbyBarbariansRange
_TEXT	ENDS
PUBLIC	?getPopulation@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getPopulation
; Function compile flags: /Odtp
;	COMDAT ?getPopulation@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPopulation@CvGoodyInfo@@QBEHXZ PROC			; CvGoodyInfo::getPopulation, COMDAT
; _this$ = ecx

; 4082 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4083 : 	return m_iPopulation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 4084 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPopulation@CvGoodyInfo@@QBEHXZ ENDP			; CvGoodyInfo::getPopulation
_TEXT	ENDS
PUBLIC	?getBarbarianUnitProb@CvGoodyInfo@@QBEHXZ	; CvGoodyInfo::getBarbarianUnitProb
; Function compile flags: /Odtp
;	COMDAT ?getBarbarianUnitProb@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBarbarianUnitProb@CvGoodyInfo@@QBEHXZ PROC		; CvGoodyInfo::getBarbarianUnitProb, COMDAT
; _this$ = ecx

; 4087 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4088 : 	return m_iBarbarianUnitProb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 4089 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBarbarianUnitProb@CvGoodyInfo@@QBEHXZ ENDP		; CvGoodyInfo::getBarbarianUnitProb
_TEXT	ENDS
PUBLIC	?getMinBarbarians@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getMinBarbarians
; Function compile flags: /Odtp
;	COMDAT ?getMinBarbarians@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinBarbarians@CvGoodyInfo@@QBEHXZ PROC		; CvGoodyInfo::getMinBarbarians, COMDAT
; _this$ = ecx

; 4092 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4093 : 	return m_iMinBarbarians;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]

; 4094 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinBarbarians@CvGoodyInfo@@QBEHXZ ENDP		; CvGoodyInfo::getMinBarbarians
_TEXT	ENDS
PUBLIC	?getUnitClassType@CvGoodyInfo@@QBEHXZ		; CvGoodyInfo::getUnitClassType
; Function compile flags: /Odtp
;	COMDAT ?getUnitClassType@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitClassType@CvGoodyInfo@@QBEHXZ PROC		; CvGoodyInfo::getUnitClassType, COMDAT
; _this$ = ecx

; 4097 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4098 : 	return m_iUnitClassType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+324]

; 4099 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitClassType@CvGoodyInfo@@QBEHXZ ENDP		; CvGoodyInfo::getUnitClassType
_TEXT	ENDS
PUBLIC	?getBarbarianUnitClass@CvGoodyInfo@@QBEHXZ	; CvGoodyInfo::getBarbarianUnitClass
; Function compile flags: /Odtp
;	COMDAT ?getBarbarianUnitClass@CvGoodyInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBarbarianUnitClass@CvGoodyInfo@@QBEHXZ PROC		; CvGoodyInfo::getBarbarianUnitClass, COMDAT
; _this$ = ecx

; 4102 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4103 : 	return m_iBarbarianUnitClass;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]

; 4104 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBarbarianUnitClass@CvGoodyInfo@@QBEHXZ ENDP		; CvGoodyInfo::getBarbarianUnitClass
_TEXT	ENDS
PUBLIC	?isTech@CvGoodyInfo@@QBE_NXZ			; CvGoodyInfo::isTech
; Function compile flags: /Odtp
;	COMDAT ?isTech@CvGoodyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isTech@CvGoodyInfo@@QBE_NXZ PROC			; CvGoodyInfo::isTech, COMDAT
; _this$ = ecx

; 4107 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4108 : 	return m_bTech;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+332]

; 4109 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isTech@CvGoodyInfo@@QBE_NXZ ENDP			; CvGoodyInfo::isTech
_TEXT	ENDS
PUBLIC	?isRevealUnknownResource@CvGoodyInfo@@QBE_NXZ	; CvGoodyInfo::isRevealUnknownResource
; Function compile flags: /Odtp
;	COMDAT ?isRevealUnknownResource@CvGoodyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isRevealUnknownResource@CvGoodyInfo@@QBE_NXZ PROC	; CvGoodyInfo::isRevealUnknownResource, COMDAT
; _this$ = ecx

; 4112 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4113 : 	return m_bRevealUnknownResource;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+333]

; 4114 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isRevealUnknownResource@CvGoodyInfo@@QBE_NXZ ENDP	; CvGoodyInfo::isRevealUnknownResource
_TEXT	ENDS
PUBLIC	?isUpgradeUnit@CvGoodyInfo@@QBE_NXZ		; CvGoodyInfo::isUpgradeUnit
; Function compile flags: /Odtp
;	COMDAT ?isUpgradeUnit@CvGoodyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isUpgradeUnit@CvGoodyInfo@@QBE_NXZ PROC		; CvGoodyInfo::isUpgradeUnit, COMDAT
; _this$ = ecx

; 4117 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4118 : 	return m_bUpgradeUnit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+334]

; 4119 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isUpgradeUnit@CvGoodyInfo@@QBE_NXZ ENDP		; CvGoodyInfo::isUpgradeUnit
_TEXT	ENDS
PUBLIC	?isPantheonFaith@CvGoodyInfo@@QBE_NXZ		; CvGoodyInfo::isPantheonFaith
; Function compile flags: /Odtp
;	COMDAT ?isPantheonFaith@CvGoodyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isPantheonFaith@CvGoodyInfo@@QBE_NXZ PROC		; CvGoodyInfo::isPantheonFaith, COMDAT
; _this$ = ecx

; 4122 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4123 : 	return m_bPantheonFaith;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+335]

; 4124 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isPantheonFaith@CvGoodyInfo@@QBE_NXZ ENDP		; CvGoodyInfo::isPantheonFaith
_TEXT	ENDS
PUBLIC	?isBad@CvGoodyInfo@@QBE_NXZ			; CvGoodyInfo::isBad
; Function compile flags: /Odtp
;	COMDAT ?isBad@CvGoodyInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isBad@CvGoodyInfo@@QBE_NXZ PROC			; CvGoodyInfo::isBad, COMDAT
; _this$ = ecx

; 4127 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4128 : 	return m_bBad;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+336]

; 4129 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isBad@CvGoodyInfo@@QBE_NXZ ENDP			; CvGoodyInfo::isBad
_TEXT	ENDS
PUBLIC	?getSound@CvGoodyInfo@@QBEPBDXZ			; CvGoodyInfo::getSound
; Function compile flags: /Odtp
;	COMDAT ?getSound@CvGoodyInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSound@CvGoodyInfo@@QBEPBDXZ PROC			; CvGoodyInfo::getSound, COMDAT
; _this$ = ecx

; 4132 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4133 : 	return m_strSound.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 4134 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSound@CvGoodyInfo@@QBEPBDXZ ENDP			; CvGoodyInfo::getSound
_TEXT	ENDS
PUBLIC	?setSound@CvGoodyInfo@@QAEXPBD@Z		; CvGoodyInfo::setSound
; Function compile flags: /Odtp
;	COMDAT ?setSound@CvGoodyInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T232687 = -4						; size = 4
_szVal$ = 8						; size = 4
?setSound@CvGoodyInfo@@QAEXPBD@Z PROC			; CvGoodyInfo::setSound, COMDAT
; _this$ = ecx

; 4137 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4138 : 	m_strSound = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 340				; 00000154H
	mov	DWORD PTR $T232687[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setSound
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T232687[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setSound
$LN4@setSound:
	mov	ecx, DWORD PTR $T232687[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setSound:

; 4139 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setSound@CvGoodyInfo@@QAEXPBD@Z ENDP			; CvGoodyInfo::setSound
_TEXT	ENDS
PUBLIC	?GetChooseDesc@CvGoodyInfo@@QBEPBDXZ		; CvGoodyInfo::GetChooseDesc
; Function compile flags: /Odtp
;	COMDAT ?GetChooseDesc@CvGoodyInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetChooseDesc@CvGoodyInfo@@QBEPBDXZ PROC		; CvGoodyInfo::GetChooseDesc, COMDAT
; _this$ = ecx

; 4142 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4143 : 	return m_strChooseDesc;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 368				; 00000170H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 4144 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetChooseDesc@CvGoodyInfo@@QBEPBDXZ ENDP		; CvGoodyInfo::GetChooseDesc
_TEXT	ENDS
PUBLIC	?SetChooseDesc@CvGoodyInfo@@QAEXPBD@Z		; CvGoodyInfo::SetChooseDesc
; Function compile flags: /Odtp
;	COMDAT ?SetChooseDesc@CvGoodyInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T232700 = -4						; size = 4
_szVal$ = 8						; size = 4
?SetChooseDesc@CvGoodyInfo@@QAEXPBD@Z PROC		; CvGoodyInfo::SetChooseDesc, COMDAT
; _this$ = ecx

; 4147 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4148 : 	m_strChooseDesc = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 368				; 00000170H
	mov	DWORD PTR $T232700[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@SetChooseD
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T232700[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@SetChooseD
$LN4@SetChooseD:
	mov	ecx, DWORD PTR $T232700[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@SetChooseD:

; 4149 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetChooseDesc@CvGoodyInfo@@QAEXPBD@Z ENDP		; CvGoodyInfo::SetChooseDesc
_TEXT	ENDS
PUBLIC	??_C@_0BD@MKGCCGOC@BarbarianUnitClass?$AA@	; `string'
PUBLIC	??_C@_09EFLEBMP@UnitClass?$AA@			; `string'
PUBLIC	??_C@_0O@JGJFPLPP@PantheonFaith?$AA@		; `string'
PUBLIC	??_C@_0M@CPGAGIMJ@UpgradeUnit?$AA@		; `string'
PUBLIC	??_C@_0BG@COGIGGLB@RevealUnknownResource?$AA@	; `string'
PUBLIC	??_C@_03KHCCLPOB@Bad?$AA@			; `string'
PUBLIC	??_C@_04BPADPCAO@Tech?$AA@			; `string'
PUBLIC	??_C@_0O@FGFAEPBJ@MinBarbarians?$AA@		; `string'
PUBLIC	??_C@_0BC@NPCJILJD@BarbarianUnitProb?$AA@	; `string'
PUBLIC	??_C@_0BM@LHBKPNPN@RevealNearbyBarbariansRange?$AA@ ; `string'
PUBLIC	??_C@_0P@MBNJKHPH@ProphetPercent?$AA@		; `string'
PUBLIC	??_C@_05ILJMHAHK@Faith?$AA@			; `string'
PUBLIC	??_C@_07ODOFOAEI@Culture?$AA@			; `string'
PUBLIC	??_C@_0L@KFAOFODH@Population?$AA@		; `string'
PUBLIC	??_C@_0N@LGMHAAMP@DamagePrereq?$AA@		; `string'
PUBLIC	??_C@_07IJKHPPM@Healing?$AA@			; `string'
PUBLIC	??_C@_07ODMDJPNO@MapProb?$AA@			; `string'
PUBLIC	??_C@_08KNPNEKHJ@MapRange?$AA@			; `string'
PUBLIC	??_C@_09JGCAMOJP@MapOffset?$AA@			; `string'
PUBLIC	??_C@_0P@NKPKPAAN@GoldRandAmount?$AA@		; `string'
PUBLIC	??_C@_0BB@NDLFFMOO@NumGoldRandRolls?$AA@	; `string'
PUBLIC	??_C@_0BC@BKFDIFJH@ChooseDescription?$AA@	; `string'
;	COMDAT ??_C@_0BD@MKGCCGOC@BarbarianUnitClass?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BD@MKGCCGOC@BarbarianUnitClass?$AA@ DB 'BarbarianUnitClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFLEBMP@UnitClass?$AA@
CONST	SEGMENT
??_C@_09EFLEBMP@UnitClass?$AA@ DB 'UnitClass', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JGJFPLPP@PantheonFaith?$AA@
CONST	SEGMENT
??_C@_0O@JGJFPLPP@PantheonFaith?$AA@ DB 'PantheonFaith', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPGAGIMJ@UpgradeUnit?$AA@
CONST	SEGMENT
??_C@_0M@CPGAGIMJ@UpgradeUnit?$AA@ DB 'UpgradeUnit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@COGIGGLB@RevealUnknownResource?$AA@
CONST	SEGMENT
??_C@_0BG@COGIGGLB@RevealUnknownResource?$AA@ DB 'RevealUnknownResource', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHCCLPOB@Bad?$AA@
CONST	SEGMENT
??_C@_03KHCCLPOB@Bad?$AA@ DB 'Bad', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BPADPCAO@Tech?$AA@
CONST	SEGMENT
??_C@_04BPADPCAO@Tech?$AA@ DB 'Tech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGFAEPBJ@MinBarbarians?$AA@
CONST	SEGMENT
??_C@_0O@FGFAEPBJ@MinBarbarians?$AA@ DB 'MinBarbarians', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NPCJILJD@BarbarianUnitProb?$AA@
CONST	SEGMENT
??_C@_0BC@NPCJILJD@BarbarianUnitProb?$AA@ DB 'BarbarianUnitProb', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LHBKPNPN@RevealNearbyBarbariansRange?$AA@
CONST	SEGMENT
??_C@_0BM@LHBKPNPN@RevealNearbyBarbariansRange?$AA@ DB 'RevealNearbyBarba'
	DB	'riansRange', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MBNJKHPH@ProphetPercent?$AA@
CONST	SEGMENT
??_C@_0P@MBNJKHPH@ProphetPercent?$AA@ DB 'ProphetPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05ILJMHAHK@Faith?$AA@
CONST	SEGMENT
??_C@_05ILJMHAHK@Faith?$AA@ DB 'Faith', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ODOFOAEI@Culture?$AA@
CONST	SEGMENT
??_C@_07ODOFOAEI@Culture?$AA@ DB 'Culture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KFAOFODH@Population?$AA@
CONST	SEGMENT
??_C@_0L@KFAOFODH@Population?$AA@ DB 'Population', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LGMHAAMP@DamagePrereq?$AA@
CONST	SEGMENT
??_C@_0N@LGMHAAMP@DamagePrereq?$AA@ DB 'DamagePrereq', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IJKHPPM@Healing?$AA@
CONST	SEGMENT
??_C@_07IJKHPPM@Healing?$AA@ DB 'Healing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ODMDJPNO@MapProb?$AA@
CONST	SEGMENT
??_C@_07ODMDJPNO@MapProb?$AA@ DB 'MapProb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KNPNEKHJ@MapRange?$AA@
CONST	SEGMENT
??_C@_08KNPNEKHJ@MapRange?$AA@ DB 'MapRange', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JGCAMOJP@MapOffset?$AA@
CONST	SEGMENT
??_C@_09JGCAMOJP@MapOffset?$AA@ DB 'MapOffset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NKPKPAAN@GoldRandAmount?$AA@
CONST	SEGMENT
??_C@_0P@NKPKPAAN@GoldRandAmount?$AA@ DB 'GoldRandAmount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NDLFFMOO@NumGoldRandRolls?$AA@
CONST	SEGMENT
??_C@_0BB@NDLFFMOO@NumGoldRandRolls?$AA@ DB 'NumGoldRandRolls', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BKFDIFJH@ChooseDescription?$AA@
CONST	SEGMENT
??_C@_0BC@BKFDIFJH@ChooseDescription?$AA@ DB 'ChooseDescription', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvGoodyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T232714 = -16						; size = 4
$T232708 = -12						; size = 4
_szChooseDesc$ = -8					; size = 4
_szSound$ = -4						; size = 4
_results$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvGoodyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvGoodyInfo::CacheResults, COMDAT
; _this$ = ecx

; 4152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 4153 : 	if(!CvBaseInfo::CacheResults(results, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _results$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@CacheResul@20

; 4154 : 	{
; 4155 : 		return false;

	xor	al, al
	jmp	$LN4@CacheResul@20
$LN3@CacheResul@20:

; 4156 : 	}
; 4157 : 
; 4158 : 	const char* szChooseDesc = results.GetText("ChooseDescription");

	push	OFFSET ??_C@_0BC@BKFDIFJH@ChooseDescription?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szChooseDesc$[ebp], eax

; 4159 : 	if (szChooseDesc)

	cmp	DWORD PTR _szChooseDesc$[ebp], 0
	je	SHORT $LN2@CacheResul@20

; 4160 : 		m_strChooseDesc = szChooseDesc;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 368				; 00000170H
	mov	DWORD PTR $T232708[ebp], eax
	cmp	DWORD PTR _szChooseDesc$[ebp], 0
	je	SHORT $LN7@CacheResul@20
	mov	ecx, DWORD PTR _szChooseDesc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T232708[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN2@CacheResul@20
$LN7@CacheResul@20:
	mov	ecx, DWORD PTR $T232708[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN2@CacheResul@20:

; 4161 : 
; 4162 : 	const char* szSound = results.GetText("Sound");

	push	OFFSET ??_C@_05MAHMNMLO@Sound?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szSound$[ebp], eax

; 4163 : 	if(szSound)

	cmp	DWORD PTR _szSound$[ebp], 0
	je	SHORT $LN1@CacheResul@20

; 4164 : 		m_strSound = szSound;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 340				; 00000154H
	mov	DWORD PTR $T232714[ebp], edx
	cmp	DWORD PTR _szSound$[ebp], 0
	je	SHORT $LN11@CacheResul@20
	mov	eax, DWORD PTR _szSound$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T232714[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@CacheResul@20
$LN11@CacheResul@20:
	mov	ecx, DWORD PTR $T232714[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@CacheResul@20:

; 4165 : 
; 4166 : 	m_iGold = results.GetInt("Gold");

	push	OFFSET ??_C@_04PABHPHAJ@Gold?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 4167 : 	m_iNumGoldRandRolls = results.GetInt("NumGoldRandRolls");

	push	OFFSET ??_C@_0BB@NDLFFMOO@NumGoldRandRolls?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 4168 : 	m_iGoldRandAmount = results.GetInt("GoldRandAmount");

	push	OFFSET ??_C@_0P@NKPKPAAN@GoldRandAmount?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 4169 : 	m_iMapOffset = results.GetInt("MapOffset");

	push	OFFSET ??_C@_09JGCAMOJP@MapOffset?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 4170 : 	m_iMapRange = results.GetInt("MapRange");

	push	OFFSET ??_C@_08KNPNEKHJ@MapRange?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 4171 : 	m_iMapProb = results.GetInt("MapProb");

	push	OFFSET ??_C@_07ODMDJPNO@MapProb?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 4172 : 	m_iExperience = results.GetInt("Experience");

	push	OFFSET ??_C@_0L@DCGNFONO@Experience?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 4173 : 	m_iHealing = results.GetInt("Healing");

	push	OFFSET ??_C@_07IJKHPPM@Healing?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], eax

; 4174 : 	m_iDamagePrereq = results.GetInt("DamagePrereq");

	push	OFFSET ??_C@_0N@LGMHAAMP@DamagePrereq?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], eax

; 4175 : 	m_iPopulation = results.GetInt("Population");

	push	OFFSET ??_C@_0L@KFAOFODH@Population?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], eax

; 4176 : 	m_iCulture = results.GetInt("Culture");

	push	OFFSET ??_C@_07ODOFOAEI@Culture?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax

; 4177 : 	m_iFaith = results.GetInt("Faith");

	push	OFFSET ??_C@_05ILJMHAHK@Faith?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+304], eax

; 4178 : 	m_iProphetPercent = results.GetInt("ProphetPercent");

	push	OFFSET ??_C@_0P@MBNJKHPH@ProphetPercent?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], eax

; 4179 : 	m_iRevealNearbyBarbariansRange = results.GetInt("RevealNearbyBarbariansRange");

	push	OFFSET ??_C@_0BM@LHBKPNPN@RevealNearbyBarbariansRange?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], eax

; 4180 : 	m_iBarbarianUnitProb = results.GetInt("BarbarianUnitProb");

	push	OFFSET ??_C@_0BC@NPCJILJD@BarbarianUnitProb?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 4181 : 	m_iMinBarbarians = results.GetInt("MinBarbarians");

	push	OFFSET ??_C@_0O@FGFAEPBJ@MinBarbarians?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], eax

; 4182 : 	m_bTech = results.GetBool("Tech");

	push	OFFSET ??_C@_04BPADPCAO@Tech?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+332], al

; 4183 : 	m_bBad = results.GetBool("Bad");

	push	OFFSET ??_C@_03KHCCLPOB@Bad?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+336], al

; 4184 : 	m_bRevealUnknownResource = results.GetBool("RevealUnknownResource");

	push	OFFSET ??_C@_0BG@COGIGGLB@RevealUnknownResource?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+333], al

; 4185 : 	m_bUpgradeUnit = results.GetBool("UpgradeUnit");

	push	OFFSET ??_C@_0M@CPGAGIMJ@UpgradeUnit?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+334], al

; 4186 : 	m_bPantheonFaith = results.GetBool("PantheonFaith");

	push	OFFSET ??_C@_0O@JGJFPLPP@PantheonFaith?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+335], al

; 4187 : 
; 4188 : 	//TEMP TEMP TEMP TEMP
; 4189 : 	m_iUnitClassType = GC.getInfoTypeForString(results.GetText("UnitClass"), true);

	push	1
	push	OFFSET ??_C@_09EFLEBMP@UnitClass?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], eax

; 4190 : 	m_iBarbarianUnitClass = GC.getInfoTypeForString(results.GetText("BarbarianUnitClass"), true);

	push	1
	push	OFFSET ??_C@_0BD@MKGCCGOC@BarbarianUnitClass?$AA@
	mov	ecx, DWORD PTR _results$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+328], eax

; 4191 : 
; 4192 : 
; 4193 : 	return true;

	mov	al, 1
$LN4@CacheResul@20:

; 4194 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvGoodyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvGoodyInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvRouteInfo@@6B@				; CvRouteInfo::`vftable'
PUBLIC	??0CvRouteInfo@@QAE@XZ				; CvRouteInfo::CvRouteInfo
PUBLIC	?CacheResults@CvRouteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvRouteInfo::CacheResults
EXTRN	??_ECvRouteInfo@@UAEPAXI@Z:PROC			; CvRouteInfo::`vector deleting destructor'
;	COMDAT ??_7CvRouteInfo@@6B@
CONST	SEGMENT
??_7CvRouteInfo@@6B@ DD FLAT:?CacheResults@CvRouteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvRouteInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvRouteInfo@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvRouteInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvRouteInfo@@QAE@XZ PROC				; CvRouteInfo::CvRouteInfo, COMDAT
; _this$ = ecx

; 4209 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvRouteInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0

; 4210 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvRouteInfo@@QAE@XZ ENDP				; CvRouteInfo::CvRouteInfo
_TEXT	ENDS
PUBLIC	??1CvRouteInfo@@UAE@XZ				; CvRouteInfo::~CvRouteInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvRouteInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvRouteInfo@@UAEPAXI@Z PROC				; CvRouteInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvRouteInfo@@UAE@XZ			; CvRouteInfo::~CvRouteInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@11
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@11:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvRouteInfo@@UAEPAXI@Z ENDP				; CvRouteInfo::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvRouteInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T232740 = -24						; size = 4
$T232738 = -20						; size = 4
$T232734 = -16						; size = 4
$T232732 = -12						; size = 4
$T232728 = -8						; size = 4
$T232726 = -4						; size = 4
??1CvRouteInfo@@UAE@XZ PROC				; CvRouteInfo::~CvRouteInfo, COMDAT
; _this$ = ecx

; 4213 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvRouteInfo@@6B@

; 4214 : 	SAFE_DELETE_ARRAY(m_piYieldChange);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	mov	DWORD PTR $T232728[ebp], ecx
	mov	edx, DWORD PTR $T232728[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T232726[ebp], eax
	mov	ecx, DWORD PTR $T232726[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T232728[ebp]
	mov	DWORD PTR [edx], 0

; 4215 : 	SAFE_DELETE_ARRAY(m_piTechMovementChange);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	mov	DWORD PTR $T232734[ebp], eax
	mov	ecx, DWORD PTR $T232734[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T232732[ebp], edx
	mov	eax, DWORD PTR $T232732[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T232734[ebp]
	mov	DWORD PTR [ecx], 0

; 4216 : 	SAFE_DELETE_ARRAY(m_piResourceQuantityRequirements);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 292				; 00000124H
	mov	DWORD PTR $T232740[ebp], edx
	mov	eax, DWORD PTR $T232740[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T232738[ebp], ecx
	mov	edx, DWORD PTR $T232738[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T232740[ebp]
	mov	DWORD PTR [eax], 0

; 4217 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvRouteInfo@@UAE@XZ ENDP				; CvRouteInfo::~CvRouteInfo
_TEXT	ENDS
PUBLIC	?GetGoldMaintenance@CvRouteInfo@@QBEHXZ		; CvRouteInfo::GetGoldMaintenance
; Function compile flags: /Odtp
;	COMDAT ?GetGoldMaintenance@CvRouteInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetGoldMaintenance@CvRouteInfo@@QBEHXZ PROC		; CvRouteInfo::GetGoldMaintenance, COMDAT
; _this$ = ecx

; 4220 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4221 : 	return m_iGoldMaintenance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 4222 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGoldMaintenance@CvRouteInfo@@QBEHXZ ENDP		; CvRouteInfo::GetGoldMaintenance
_TEXT	ENDS
PUBLIC	?getAdvancedStartCost@CvRouteInfo@@QBEHXZ	; CvRouteInfo::getAdvancedStartCost
; Function compile flags: /Odtp
;	COMDAT ?getAdvancedStartCost@CvRouteInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAdvancedStartCost@CvRouteInfo@@QBEHXZ PROC		; CvRouteInfo::getAdvancedStartCost, COMDAT
; _this$ = ecx

; 4225 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4226 : 	return m_iAdvancedStartCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 4227 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAdvancedStartCost@CvRouteInfo@@QBEHXZ ENDP		; CvRouteInfo::getAdvancedStartCost
_TEXT	ENDS
PUBLIC	?getValue@CvRouteInfo@@QBEHXZ			; CvRouteInfo::getValue
; Function compile flags: /Odtp
;	COMDAT ?getValue@CvRouteInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getValue@CvRouteInfo@@QBEHXZ PROC			; CvRouteInfo::getValue, COMDAT
; _this$ = ecx

; 4230 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4231 : 	return m_iValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 4232 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getValue@CvRouteInfo@@QBEHXZ ENDP			; CvRouteInfo::getValue
_TEXT	ENDS
PUBLIC	?getMovementCost@CvRouteInfo@@QBEHXZ		; CvRouteInfo::getMovementCost
; Function compile flags: /Odtp
;	COMDAT ?getMovementCost@CvRouteInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMovementCost@CvRouteInfo@@QBEHXZ PROC		; CvRouteInfo::getMovementCost, COMDAT
; _this$ = ecx

; 4235 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4236 : 	return m_iMovementCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 4237 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMovementCost@CvRouteInfo@@QBEHXZ ENDP		; CvRouteInfo::getMovementCost
_TEXT	ENDS
PUBLIC	?getFlatMovementCost@CvRouteInfo@@QBEHXZ	; CvRouteInfo::getFlatMovementCost
; Function compile flags: /Odtp
;	COMDAT ?getFlatMovementCost@CvRouteInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFlatMovementCost@CvRouteInfo@@QBEHXZ PROC		; CvRouteInfo::getFlatMovementCost, COMDAT
; _this$ = ecx

; 4240 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4241 : 	return m_iFlatMovementCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 4242 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFlatMovementCost@CvRouteInfo@@QBEHXZ ENDP		; CvRouteInfo::getFlatMovementCost
_TEXT	ENDS
PUBLIC	?IsIndustrial@CvRouteInfo@@QBE_NXZ		; CvRouteInfo::IsIndustrial
; Function compile flags: /Odtp
;	COMDAT ?IsIndustrial@CvRouteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIndustrial@CvRouteInfo@@QBE_NXZ PROC			; CvRouteInfo::IsIndustrial, COMDAT
; _this$ = ecx

; 4245 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4246 : 	return m_bIndustrial;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	setne	al

; 4247 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsIndustrial@CvRouteInfo@@QBE_NXZ ENDP			; CvRouteInfo::IsIndustrial
_TEXT	ENDS
PUBLIC	?getYieldChange@CvRouteInfo@@QBEHH@Z		; CvRouteInfo::getYieldChange
; Function compile flags: /Odtp
;	COMDAT ?getYieldChange@CvRouteInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getYieldChange@CvRouteInfo@@QBEHH@Z PROC		; CvRouteInfo::getYieldChange, COMDAT
; _this$ = ecx

; 4250 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4251 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 4252 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4253 : 	return m_piYieldChange ? m_piYieldChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+284], 0
	je	SHORT $LN3@getYieldCh@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+284]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getYieldCh@2
$LN3@getYieldCh@2:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getYieldCh@2:
	mov	eax, DWORD PTR tv69[ebp]

; 4254 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getYieldChange@CvRouteInfo@@QBEHH@Z ENDP		; CvRouteInfo::getYieldChange
_TEXT	ENDS
PUBLIC	?getTechMovementChange@CvRouteInfo@@QBEHH@Z	; CvRouteInfo::getTechMovementChange
; Function compile flags: /Odtp
;	COMDAT ?getTechMovementChange@CvRouteInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getTechMovementChange@CvRouteInfo@@QBEHH@Z PROC	; CvRouteInfo::getTechMovementChange, COMDAT
; _this$ = ecx

; 4257 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4258 : 	CvAssertMsg(i < GC.getNumTechInfos(), "Index out of bounds");
; 4259 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4260 : 	return m_piTechMovementChange ? m_piTechMovementChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+288], 0
	je	SHORT $LN3@getTechMov
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getTechMov
$LN3@getTechMov:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getTechMov:
	mov	eax, DWORD PTR tv69[ebp]

; 4261 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getTechMovementChange@CvRouteInfo@@QBEHH@Z ENDP	; CvRouteInfo::getTechMovementChange
_TEXT	ENDS
PUBLIC	?getResourceQuantityRequirement@CvRouteInfo@@QBEHH@Z ; CvRouteInfo::getResourceQuantityRequirement
; Function compile flags: /Odtp
;	COMDAT ?getResourceQuantityRequirement@CvRouteInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getResourceQuantityRequirement@CvRouteInfo@@QBEHH@Z PROC ; CvRouteInfo::getResourceQuantityRequirement, COMDAT
; _this$ = ecx

; 4264 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4265 : 	CvAssertMsg(i < GC.getNumResourceInfos(), "Index out of bounds");
; 4266 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4267 : 	return m_piResourceQuantityRequirements ? m_piResourceQuantityRequirements[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+292], 0
	je	SHORT $LN3@getResourc
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getResourc
$LN3@getResourc:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getResourc:
	mov	eax, DWORD PTR tv69[ebp]

; 4268 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getResourceQuantityRequirement@CvRouteInfo@@QBEHH@Z ENDP ; CvRouteInfo::getResourceQuantityRequirement
_TEXT	ENDS
PUBLIC	??_C@_09FDCBPLKG@Resources?$AA@			; `string'
PUBLIC	??_C@_0CD@DLBJHCO@Route_ResourceQuantityRequiremen@ ; `string'
PUBLIC	??_C@_0N@EPHJOCBJ@ResourceType?$AA@		; `string'
PUBLIC	??_C@_0BK@PEBNDOHJ@Route_TechMovementChanges?$AA@ ; `string'
PUBLIC	??_C@_0P@MFLINJPJ@MovementChange?$AA@		; `string'
PUBLIC	??_C@_0N@NLOGDNFF@Route_Yields?$AA@		; `string'
PUBLIC	??_C@_0L@BLDOBJBN@Industrial?$AA@		; `string'
PUBLIC	??_C@_0N@DLJEHJDC@FlatMovement?$AA@		; `string'
PUBLIC	??_C@_08IMCBCIPL@Movement?$AA@			; `string'
PUBLIC	??_C@_05LPIJGKJ@Value?$AA@			; `string'
PUBLIC	??_C@_0BC@HHPMHOMK@AdvancedStartCost?$AA@	; `string'
PUBLIC	??_C@_0BA@NGAILOKJ@GoldMaintenance?$AA@		; `string'
;	COMDAT ??_C@_09FDCBPLKG@Resources?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_09FDCBPLKG@Resources?$AA@ DB 'Resources', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DLBJHCO@Route_ResourceQuantityRequiremen@
CONST	SEGMENT
??_C@_0CD@DLBJHCO@Route_ResourceQuantityRequiremen@ DB 'Route_ResourceQua'
	DB	'ntityRequirements', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
CONST	SEGMENT
??_C@_0N@EPHJOCBJ@ResourceType?$AA@ DB 'ResourceType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PEBNDOHJ@Route_TechMovementChanges?$AA@
CONST	SEGMENT
??_C@_0BK@PEBNDOHJ@Route_TechMovementChanges?$AA@ DB 'Route_TechMovementC'
	DB	'hanges', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MFLINJPJ@MovementChange?$AA@
CONST	SEGMENT
??_C@_0P@MFLINJPJ@MovementChange?$AA@ DB 'MovementChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NLOGDNFF@Route_Yields?$AA@
CONST	SEGMENT
??_C@_0N@NLOGDNFF@Route_Yields?$AA@ DB 'Route_Yields', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BLDOBJBN@Industrial?$AA@
CONST	SEGMENT
??_C@_0L@BLDOBJBN@Industrial?$AA@ DB 'Industrial', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLJEHJDC@FlatMovement?$AA@
CONST	SEGMENT
??_C@_0N@DLJEHJDC@FlatMovement?$AA@ DB 'FlatMovement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IMCBCIPL@Movement?$AA@
CONST	SEGMENT
??_C@_08IMCBCIPL@Movement?$AA@ DB 'Movement', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LPIJGKJ@Value?$AA@
CONST	SEGMENT
??_C@_05LPIJGKJ@Value?$AA@ DB 'Value', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HHPMHOMK@AdvancedStartCost?$AA@
CONST	SEGMENT
??_C@_0BC@HHPMHOMK@AdvancedStartCost?$AA@ DB 'AdvancedStartCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NGAILOKJ@GoldMaintenance?$AA@
CONST	SEGMENT
??_C@_0BA@NGAILOKJ@GoldMaintenance?$AA@ DB 'GoldMaintenance', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvRouteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szRouteType$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvRouteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvRouteInfo::CacheResults, COMDAT
; _this$ = ecx

; 4271 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4272 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@21

; 4273 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@21
$LN1@CacheResul@21:

; 4274 : 
; 4275 : 	m_iGoldMaintenance = kResults.GetInt("GoldMaintenance");

	push	OFFSET ??_C@_0BA@NGAILOKJ@GoldMaintenance?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 4276 : 	m_iAdvancedStartCost = kResults.GetInt("AdvancedStartCost");

	push	OFFSET ??_C@_0BC@HHPMHOMK@AdvancedStartCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 4277 : 	m_iValue = kResults.GetInt("Value");

	push	OFFSET ??_C@_05LPIJGKJ@Value?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 4278 : 	m_iMovementCost = kResults.GetInt("Movement");

	push	OFFSET ??_C@_08IMCBCIPL@Movement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 4279 : 	m_iFlatMovementCost = kResults.GetInt("FlatMovement");

	push	OFFSET ??_C@_0N@DLJEHJDC@FlatMovement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 4280 : 
; 4281 : 	m_bIndustrial = kResults.GetBool("Industrial");

	push	OFFSET ??_C@_0L@BLDOBJBN@Industrial?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	movzx	edx, al
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], edx

; 4282 : 
; 4283 : 	//Arrays
; 4284 : 	const char* szRouteType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szRouteType$[ebp], eax

; 4285 : 	kUtility.SetYields(m_piYieldChange, "Route_Yields", "RouteType", szRouteType);

	mov	ecx, DWORD PTR _szRouteType$[ebp]
	push	ecx
	push	OFFSET ??_C@_09BBDPALAD@RouteType?$AA@
	push	OFFSET ??_C@_0N@NLOGDNFF@Route_Yields?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 284				; 0000011cH
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 4286 : 
; 4287 : 	kUtility.PopulateArrayByValue(m_piTechMovementChange, "Technologies", "Route_TechMovementChanges", "TechType", "RouteType", szRouteType, "MovementChange");

	push	0
	push	0
	push	OFFSET ??_C@_0P@MFLINJPJ@MovementChange?$AA@
	mov	eax, DWORD PTR _szRouteType$[ebp]
	push	eax
	push	OFFSET ??_C@_09BBDPALAD@RouteType?$AA@
	push	OFFSET ??_C@_08GHGFPPBE@TechType?$AA@
	push	OFFSET ??_C@_0BK@PEBNDOHJ@Route_TechMovementChanges?$AA@
	push	OFFSET ??_C@_0N@INKDAICK@Technologies?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 4288 : 	kUtility.PopulateArrayByValue(m_piResourceQuantityRequirements, "Resources", "Route_ResourceQuantityRequirements", "ResourceType", "RouteType", szRouteType, "Cost");

	push	0
	push	0
	push	OFFSET ??_C@_04FICPKHNF@Cost?$AA@
	mov	edx, DWORD PTR _szRouteType$[ebp]
	push	edx
	push	OFFSET ??_C@_09BBDPALAD@RouteType?$AA@
	push	OFFSET ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
	push	OFFSET ??_C@_0CD@DLBJHCO@Route_ResourceQuantityRequiremen@
	push	OFFSET ??_C@_09FDCBPLKG@Resources?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 292				; 00000124H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 4289 : 
; 4290 : 	return true;

	mov	al, 1
$LN2@CacheResul@21:

; 4291 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvRouteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvRouteInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvResourceClassInfo@@6B@			; CvResourceClassInfo::`vftable'
PUBLIC	??0CvResourceClassInfo@@QAE@XZ			; CvResourceClassInfo::CvResourceClassInfo
PUBLIC	?CacheResults@CvResourceClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvResourceClassInfo::CacheResults
;	COMDAT ??_7CvResourceClassInfo@@6B@
CONST	SEGMENT
??_7CvResourceClassInfo@@6B@ DD FLAT:?CacheResults@CvResourceClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvResourceClassInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvResourceClassInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvResourceClassInfo@@QAE@XZ PROC			; CvResourceClassInfo::CvResourceClassInfo, COMDAT
; _this$ = ecx

; 4298 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvResourceClassInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0

; 4299 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvResourceClassInfo@@QAE@XZ ENDP			; CvResourceClassInfo::CvResourceClassInfo
_TEXT	ENDS
PUBLIC	?getUniqueRange@CvResourceClassInfo@@QBEHXZ	; CvResourceClassInfo::getUniqueRange
; Function compile flags: /Odtp
;	COMDAT ?getUniqueRange@CvResourceClassInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUniqueRange@CvResourceClassInfo@@QBEHXZ PROC	; CvResourceClassInfo::getUniqueRange, COMDAT
; _this$ = ecx

; 4302 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4303 : 	return m_iUniqueRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 4304 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUniqueRange@CvResourceClassInfo@@QBEHXZ ENDP	; CvResourceClassInfo::getUniqueRange
_TEXT	ENDS
PUBLIC	??_C@_0M@LOLLJIFO@UniqueRange?$AA@		; `string'
;	COMDAT ??_C@_0M@LOLLJIFO@UniqueRange?$AA@
CONST	SEGMENT
??_C@_0M@LOLLJIFO@UniqueRange?$AA@ DB 'UniqueRange', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvResourceClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvResourceClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvResourceClassInfo::CacheResults, COMDAT
; _this$ = ecx

; 4307 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4308 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@22

; 4309 : 		return false;

	xor	al, al
	jmp	SHORT $LN2@CacheResul@22
$LN1@CacheResul@22:

; 4310 : 
; 4311 : 	m_iUniqueRange = kResults.GetInt("UniqueRange");

	push	OFFSET ??_C@_0M@LOLLJIFO@UniqueRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 4312 : 
; 4313 : 	return true;

	mov	al, 1
$LN2@CacheResul@22:

; 4314 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvResourceClassInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvResourceClassInfo::CacheResults
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ ; std::_Vector_val<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::~_Vector_val<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
PUBLIC	??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >::~map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >
PUBLIC	?_Buy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAE_NI@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Buy
PUBLIC	??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
PUBLIC	??_7CvResourceInfo@@6B@				; CvResourceInfo::`vftable'
PUBLIC	??0CvResourceInfo@@QAE@XZ			; CvResourceInfo::CvResourceInfo
PUBLIC	?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvResourceInfo::CacheResults
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_ECvResourceInfo@@UAEPAXI@Z:PROC		; CvResourceInfo::`vector deleting destructor'
;	COMDAT ??_7CvResourceInfo@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
CONST	SEGMENT
??_7CvResourceInfo@@6B@ DD FLAT:?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvResourceInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvResourceInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CvResourceInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0CvResourceInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvResourceInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvResourceInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvResourceInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvResourceInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvResourceInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvResourceInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvResourceInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvResourceInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CvResourceInfo@@QAE@XZ$17
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvResourceInfo@@QAE@XZ
_TEXT	SEGMENT
tv304 = -196						; size = 4
tv380 = -192						; size = 4
_this$ = -188						; size = 4
$T233040 = -184						; size = 4
$T232990 = -90						; size = 1
$T232977 = -89						; size = 1
$T232973 = -88						; size = 4
$T232966 = -80						; size = 4
$T232959 = -72						; size = 4
$T232956 = -34						; size = 1
$T232955 = -33						; size = 1
$T232866 = -32						; size = 4
$T232861 = -28						; size = 4
$T232856 = -24						; size = 4
$T232851 = -20						; size = 4
$T232846 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvResourceInfo@@QAE@XZ PROC				; CvResourceInfo::CvResourceInfo, COMDAT
; _this$ = ecx

; 4368 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvResourceInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvResourceInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+340], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+344], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+352], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+356], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+360], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+364], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+368], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+369], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+370], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+371], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+372], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+373], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+374], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+376], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+380], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+384], -1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 388				; 00000184H
	mov	DWORD PTR $T232846[ebp], edx
	mov	ecx, DWORD PTR $T232846[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 416				; 000001a0H
	mov	DWORD PTR $T232851[ebp], eax
	mov	ecx, DWORD PTR $T232851[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	mov	DWORD PTR $T232856[ebp], ecx
	mov	ecx, DWORD PTR $T232856[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 472				; 000001d8H
	mov	DWORD PTR $T232861[ebp], edx
	mov	ecx, DWORD PTR $T232861[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 500				; 000001f4H
	mov	DWORD PTR $T232866[ebp], eax
	mov	ecx, DWORD PTR $T232866[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+528], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 532				; 00000214H
	mov	DWORD PTR $T232959[ebp], edx
	lea	eax, DWORD PTR $T232955[ebp]
	push	eax
	lea	ecx, DWORD PTR $T232956[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T232959[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 544				; 00000220H
	mov	DWORD PTR $T233040[ebp], edx
	lea	eax, DWORD PTR $T232990[ebp]
	mov	DWORD PTR $T232966[ebp], eax
	lea	ecx, DWORD PTR $T232977[ebp]
	mov	DWORD PTR $T232973[ebp], ecx
	mov	edx, DWORD PTR $T233040[ebp]
	mov	DWORD PTR tv380[ebp], edx
	mov	eax, DWORD PTR $T233040[ebp]
	mov	DWORD PTR tv304[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	push	0
	mov	ecx, DWORD PTR $T233040[ebp]
	call	?_Buy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAE_NI@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+560], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+564], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+568], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+572], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+576], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+580], 0

; 4369 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvResourceInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvResourceInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 388				; 00000184H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvResourceInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvResourceInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvResourceInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvResourceInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 500				; 000001f4H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvResourceInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 532				; 00000214H
	jmp	??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CvResourceInfo@@QAE@XZ$17:
	mov	ecx, DWORD PTR $T233040[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__ehhandler$??0CvResourceInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvResourceInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvResourceInfo@@QAE@XZ ENDP				; CvResourceInfo::CvResourceInfo
PUBLIC	??1CvResourceInfo@@UAE@XZ			; CvResourceInfo::~CvResourceInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvResourceInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvResourceInfo@@UAEPAXI@Z PROC			; CvResourceInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvResourceInfo@@UAE@XZ		; CvResourceInfo::~CvResourceInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@12
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@12:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvResourceInfo@@UAEPAXI@Z ENDP			; CvResourceInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ$1
__ehfuncinfo$??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -100						; size = 4
__$EHRec$ = -12						; size = 12
??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >::~map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >::~map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >
PUBLIC	??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::~vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
PUBLIC	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy
PUBLIC	?erase@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@0@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::clear
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$??1CvResourceInfo@@UAE@XZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$??1CvResourceInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvResourceInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$7
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$8
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvResourceInfo@@UAE@XZ$11
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvResourceInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -204						; size = 4
$T233643 = -164						; size = 4
$T233638 = -160						; size = 4
$T233633 = -156						; size = 4
$T233628 = -152						; size = 4
$T233623 = -148						; size = 4
$T233618 = -144						; size = 4
$T233548 = -140						; size = 4
$T233462 = -104						; size = 4
$T233461 = -100						; size = 4
$T233456 = -96						; size = 4
$T233455 = -92						; size = 4
$T233450 = -88						; size = 4
$T233449 = -84						; size = 4
$T233444 = -80						; size = 4
$T233443 = -76						; size = 4
$T233438 = -72						; size = 4
$T233437 = -68						; size = 4
$T233432 = -64						; size = 4
$T233431 = -60						; size = 4
$T233426 = -56						; size = 4
$T233400 = -52						; size = 4
$T233384 = -48						; size = 4
$T233413 = -44						; size = 4
$T233412 = -40						; size = 4
$T233411 = -36						; size = 4
$T233410 = -32						; size = 4
$T233409 = -28						; size = 4
$T233334 = -20						; size = 4
$T233333 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvResourceInfo@@UAE@XZ PROC				; CvResourceInfo::~CvResourceInfo, COMDAT
; _this$ = ecx

; 4372 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvResourceInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvResourceInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 7

; 4373 : 	SAFE_DELETE_ARRAY(m_piYieldChange);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 528				; 00000210H
	mov	DWORD PTR $T233334[ebp], ecx
	mov	edx, DWORD PTR $T233334[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T233333[ebp], eax
	mov	ecx, DWORD PTR $T233333[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T233334[ebp]
	mov	DWORD PTR [edx], 0

; 4374 : #if defined(MOD_RESOURCES_PRODUCTION_COST_MODIFIERS)
; 4375 : 	m_piiiUnitCombatProductionCostModifiersLocal.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 532				; 00000214H
	call	?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::clear

; 4376 : 	m_aiiiBuildingProductionCostModifiersLocal.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 544				; 00000220H
	mov	DWORD PTR $T233426[ebp], eax
	mov	ecx, DWORD PTR $T233426[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T233384[ebp], edx
	mov	eax, DWORD PTR $T233384[ebp]
	mov	DWORD PTR $T233410[ebp], eax
	mov	ecx, DWORD PTR $T233410[ebp]
	mov	DWORD PTR $T233409[ebp], ecx
	mov	edx, DWORD PTR $T233426[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T233400[ebp], eax
	mov	ecx, DWORD PTR $T233400[ebp]
	mov	DWORD PTR $T233412[ebp], ecx
	mov	edx, DWORD PTR $T233412[ebp]
	mov	DWORD PTR $T233411[ebp], edx
	mov	eax, DWORD PTR $T233409[ebp]
	push	eax
	mov	ecx, DWORD PTR $T233411[ebp]
	push	ecx
	lea	edx, DWORD PTR $T233413[ebp]
	push	edx
	mov	ecx, DWORD PTR $T233426[ebp]
	call	?erase@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@0@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::erase

; 4377 : #endif
; 4378 : 	SAFE_DELETE_ARRAY(m_piResourceQuantityTypes);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 560				; 00000230H
	mov	DWORD PTR $T233432[ebp], eax
	mov	ecx, DWORD PTR $T233432[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T233431[ebp], edx
	mov	eax, DWORD PTR $T233431[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T233432[ebp]
	mov	DWORD PTR [ecx], 0

; 4379 : 	SAFE_DELETE_ARRAY(m_piFlavor);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 568				; 00000238H
	mov	DWORD PTR $T233438[ebp], edx
	mov	eax, DWORD PTR $T233438[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T233437[ebp], ecx
	mov	edx, DWORD PTR $T233437[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T233438[ebp]
	mov	DWORD PTR [eax], 0

; 4380 : 	SAFE_DELETE_ARRAY(m_piImprovementChange);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 564				; 00000234H
	mov	DWORD PTR $T233444[ebp], ecx
	mov	edx, DWORD PTR $T233444[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T233443[ebp], eax
	mov	ecx, DWORD PTR $T233443[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T233444[ebp]
	mov	DWORD PTR [edx], 0

; 4381 : 	SAFE_DELETE_ARRAY(m_pbTerrain);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 572				; 0000023cH
	mov	DWORD PTR $T233450[ebp], eax
	mov	ecx, DWORD PTR $T233450[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T233449[ebp], edx
	mov	eax, DWORD PTR $T233449[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T233450[ebp]
	mov	DWORD PTR [ecx], 0

; 4382 : 	SAFE_DELETE_ARRAY(m_pbFeature);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 576				; 00000240H
	mov	DWORD PTR $T233456[ebp], edx
	mov	eax, DWORD PTR $T233456[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T233455[ebp], ecx
	mov	edx, DWORD PTR $T233455[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T233456[ebp]
	mov	DWORD PTR [eax], 0

; 4383 : 	SAFE_DELETE_ARRAY(m_pbFeatureTerrain);	// free memory - MT

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 580				; 00000244H
	mov	DWORD PTR $T233462[ebp], ecx
	mov	edx, DWORD PTR $T233462[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T233461[ebp], eax
	mov	ecx, DWORD PTR $T233461[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T233462[ebp]
	mov	DWORD PTR [edx], 0

; 4384 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 544				; 00000220H
	mov	DWORD PTR $T233548[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR $T233548[ebp]
	call	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 532				; 00000214H
	mov	DWORD PTR $T233618[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	ecx, DWORD PTR $T233618[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 500				; 000001f4H
	mov	DWORD PTR $T233623[ebp], edx
	mov	ecx, DWORD PTR $T233623[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 472				; 000001d8H
	mov	DWORD PTR $T233628[ebp], eax
	mov	ecx, DWORD PTR $T233628[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	mov	DWORD PTR $T233633[ebp], ecx
	mov	ecx, DWORD PTR $T233633[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 416				; 000001a0H
	mov	DWORD PTR $T233638[ebp], edx
	mov	ecx, DWORD PTR $T233638[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 388				; 00000184H
	mov	DWORD PTR $T233643[ebp], eax
	mov	ecx, DWORD PTR $T233643[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 388				; 00000184H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 500				; 000001f4H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 532				; 00000214H
	jmp	??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 544				; 00000220H
	jmp	??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::~vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$8:
	mov	ecx, DWORD PTR $T233548[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__unwindfunclet$??1CvResourceInfo@@UAE@XZ$11:
	mov	ecx, DWORD PTR $T233618[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1CvResourceInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvResourceInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvResourceInfo@@UAE@XZ ENDP				; CvResourceInfo::~CvResourceInfo
PUBLIC	?getResourceClassType@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getResourceClassType
; Function compile flags: /Odtp
;	COMDAT ?getResourceClassType@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResourceClassType@CvResourceInfo@@QBEHXZ PROC	; CvResourceInfo::getResourceClassType, COMDAT
; _this$ = ecx

; 4387 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4388 : 	return m_iResourceClassType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 4389 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResourceClassType@CvResourceInfo@@QBEHXZ ENDP	; CvResourceInfo::getResourceClassType
_TEXT	ENDS
PUBLIC	?getChar@CvResourceInfo@@QBEHXZ			; CvResourceInfo::getChar
; Function compile flags: /Odtp
;	COMDAT ?getChar@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getChar@CvResourceInfo@@QBEHXZ PROC			; CvResourceInfo::getChar, COMDAT
; _this$ = ecx

; 4392 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4393 : 	return m_iChar;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 4394 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getChar@CvResourceInfo@@QBEHXZ ENDP			; CvResourceInfo::getChar
_TEXT	ENDS
PUBLIC	?setChar@CvResourceInfo@@QAEXH@Z		; CvResourceInfo::setChar
; Function compile flags: /Odtp
;	COMDAT ?setChar@CvResourceInfo@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?setChar@CvResourceInfo@@QAEXH@Z PROC			; CvResourceInfo::setChar, COMDAT
; _this$ = ecx

; 4397 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4398 : 	m_iChar = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+264], ecx

; 4399 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setChar@CvResourceInfo@@QAEXH@Z ENDP			; CvResourceInfo::setChar
_TEXT	ENDS
PUBLIC	?getTechReveal@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getTechReveal
; Function compile flags: /Odtp
;	COMDAT ?getTechReveal@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTechReveal@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getTechReveal, COMDAT
; _this$ = ecx

; 4402 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4403 : 	return m_iTechReveal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 4404 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTechReveal@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getTechReveal
_TEXT	ENDS
PUBLIC	?getPolicyReveal@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getPolicyReveal
; Function compile flags: /Odtp
;	COMDAT ?getPolicyReveal@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPolicyReveal@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getPolicyReveal, COMDAT
; _this$ = ecx

; 4407 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4408 : 	return m_iPolicyReveal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 4409 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPolicyReveal@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getPolicyReveal
_TEXT	ENDS
PUBLIC	?getTechCityTrade@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getTechCityTrade
; Function compile flags: /Odtp
;	COMDAT ?getTechCityTrade@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTechCityTrade@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getTechCityTrade, COMDAT
; _this$ = ecx

; 4412 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4413 : 	return m_iTechCityTrade;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 4414 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTechCityTrade@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getTechCityTrade
_TEXT	ENDS
PUBLIC	?getTechObsolete@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getTechObsolete
; Function compile flags: /Odtp
;	COMDAT ?getTechObsolete@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTechObsolete@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getTechObsolete, COMDAT
; _this$ = ecx

; 4417 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4418 : 	return m_iTechObsolete;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 4419 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTechObsolete@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getTechObsolete
_TEXT	ENDS
PUBLIC	?getAIStopTradingEra@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getAIStopTradingEra
; Function compile flags: /Odtp
;	COMDAT ?getAIStopTradingEra@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIStopTradingEra@CvResourceInfo@@QBEHXZ PROC	; CvResourceInfo::getAIStopTradingEra, COMDAT
; _this$ = ecx

; 4422 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4423 : 	return m_iAIStopTradingEra;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 4424 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIStopTradingEra@CvResourceInfo@@QBEHXZ ENDP	; CvResourceInfo::getAIStopTradingEra
_TEXT	ENDS
PUBLIC	?getStartingResourceQuantity@CvResourceInfo@@QBEHXZ ; CvResourceInfo::getStartingResourceQuantity
; Function compile flags: /Odtp
;	COMDAT ?getStartingResourceQuantity@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingResourceQuantity@CvResourceInfo@@QBEHXZ PROC ; CvResourceInfo::getStartingResourceQuantity, COMDAT
; _this$ = ecx

; 4427 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4428 : 	return m_iStartingResourceQuantity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 4429 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingResourceQuantity@CvResourceInfo@@QBEHXZ ENDP ; CvResourceInfo::getStartingResourceQuantity
_TEXT	ENDS
PUBLIC	?getAITradeModifier@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getAITradeModifier
; Function compile flags: /Odtp
;	COMDAT ?getAITradeModifier@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAITradeModifier@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getAITradeModifier, COMDAT
; _this$ = ecx

; 4432 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4433 : 	return m_iAITradeModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 4434 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAITradeModifier@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getAITradeModifier
_TEXT	ENDS
PUBLIC	?getAIObjective@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getAIObjective
; Function compile flags: /Odtp
;	COMDAT ?getAIObjective@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIObjective@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getAIObjective, COMDAT
; _this$ = ecx

; 4437 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4438 : 	return m_iAIObjective;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 4439 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIObjective@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getAIObjective
_TEXT	ENDS
PUBLIC	?getHappiness@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getHappiness
; Function compile flags: /Odtp
;	COMDAT ?getHappiness@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHappiness@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getHappiness, COMDAT
; _this$ = ecx

; 4442 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4443 : 	return m_iHappiness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 4444 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHappiness@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getHappiness
_TEXT	ENDS
PUBLIC	?getWonderProductionMod@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getWonderProductionMod
; Function compile flags: /Odtp
;	COMDAT ?getWonderProductionMod@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWonderProductionMod@CvResourceInfo@@QBEHXZ PROC	; CvResourceInfo::getWonderProductionMod, COMDAT
; _this$ = ecx

; 4447 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4448 : 	return m_iWonderProductionMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 4449 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getWonderProductionMod@CvResourceInfo@@QBEHXZ ENDP	; CvResourceInfo::getWonderProductionMod
_TEXT	ENDS
PUBLIC	?getWonderProductionModObsoleteEra@CvResourceInfo@@QBE?AW4EraTypes@@XZ ; CvResourceInfo::getWonderProductionModObsoleteEra
; Function compile flags: /Odtp
;	COMDAT ?getWonderProductionModObsoleteEra@CvResourceInfo@@QBE?AW4EraTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWonderProductionModObsoleteEra@CvResourceInfo@@QBE?AW4EraTypes@@XZ PROC ; CvResourceInfo::getWonderProductionModObsoleteEra, COMDAT
; _this$ = ecx

; 4452 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4453 : 	return m_eWonderProductionModObsoleteEra;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+384]

; 4454 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getWonderProductionModObsoleteEra@CvResourceInfo@@QBE?AW4EraTypes@@XZ ENDP ; CvResourceInfo::getWonderProductionModObsoleteEra
_TEXT	ENDS
PUBLIC	?getMinAreaSize@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getMinAreaSize
; Function compile flags: /Odtp
;	COMDAT ?getMinAreaSize@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinAreaSize@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getMinAreaSize, COMDAT
; _this$ = ecx

; 4457 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4458 : 	return m_iMinAreaSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 4459 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinAreaSize@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getMinAreaSize
_TEXT	ENDS
PUBLIC	?getMinLatitude@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getMinLatitude
; Function compile flags: /Odtp
;	COMDAT ?getMinLatitude@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinLatitude@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getMinLatitude, COMDAT
; _this$ = ecx

; 4462 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4463 : 	return m_iMinLatitude;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+312]

; 4464 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinLatitude@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getMinLatitude
_TEXT	ENDS
PUBLIC	?getMaxLatitude@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getMaxLatitude
; Function compile flags: /Odtp
;	COMDAT ?getMaxLatitude@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxLatitude@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getMaxLatitude, COMDAT
; _this$ = ecx

; 4467 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4468 : 	return m_iMaxLatitude;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 4469 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxLatitude@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getMaxLatitude
_TEXT	ENDS
PUBLIC	?getPlacementOrder@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getPlacementOrder
; Function compile flags: /Odtp
;	COMDAT ?getPlacementOrder@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPlacementOrder@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getPlacementOrder, COMDAT
; _this$ = ecx

; 4472 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4473 : 	return m_iPlacementOrder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]

; 4474 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPlacementOrder@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getPlacementOrder
_TEXT	ENDS
PUBLIC	?getConstAppearance@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getConstAppearance
; Function compile flags: /Odtp
;	COMDAT ?getConstAppearance@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getConstAppearance@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getConstAppearance, COMDAT
; _this$ = ecx

; 4477 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4478 : 	return m_iConstAppearance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+324]

; 4479 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getConstAppearance@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getConstAppearance
_TEXT	ENDS
PUBLIC	?getRandAppearance1@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getRandAppearance1
; Function compile flags: /Odtp
;	COMDAT ?getRandAppearance1@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRandAppearance1@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getRandAppearance1, COMDAT
; _this$ = ecx

; 4482 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4483 : 	return m_iRandAppearance1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]

; 4484 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRandAppearance1@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getRandAppearance1
_TEXT	ENDS
PUBLIC	?getRandAppearance2@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getRandAppearance2
; Function compile flags: /Odtp
;	COMDAT ?getRandAppearance2@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRandAppearance2@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getRandAppearance2, COMDAT
; _this$ = ecx

; 4487 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4488 : 	return m_iRandAppearance2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+332]

; 4489 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRandAppearance2@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getRandAppearance2
_TEXT	ENDS
PUBLIC	?getRandAppearance3@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getRandAppearance3
; Function compile flags: /Odtp
;	COMDAT ?getRandAppearance3@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRandAppearance3@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getRandAppearance3, COMDAT
; _this$ = ecx

; 4492 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4493 : 	return m_iRandAppearance3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+336]

; 4494 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRandAppearance3@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getRandAppearance3
_TEXT	ENDS
PUBLIC	?getRandAppearance4@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getRandAppearance4
; Function compile flags: /Odtp
;	COMDAT ?getRandAppearance4@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRandAppearance4@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getRandAppearance4, COMDAT
; _this$ = ecx

; 4497 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4498 : 	return m_iRandAppearance4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+340]

; 4499 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getRandAppearance4@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getRandAppearance4
_TEXT	ENDS
PUBLIC	?getResourceUsage@CvResourceInfo@@QBE?AW4ResourceUsageTypes@@XZ ; CvResourceInfo::getResourceUsage
; Function compile flags: /Odtp
;	COMDAT ?getResourceUsage@CvResourceInfo@@QBE?AW4ResourceUsageTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResourceUsage@CvResourceInfo@@QBE?AW4ResourceUsageTypes@@XZ PROC ; CvResourceInfo::getResourceUsage, COMDAT
; _this$ = ecx

; 4502 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4503 : 	return m_eResourceUsage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+380]

; 4504 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResourceUsage@CvResourceInfo@@QBE?AW4ResourceUsageTypes@@XZ ENDP ; CvResourceInfo::getResourceUsage
_TEXT	ENDS
PUBLIC	?getPercentPerPlayer@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getPercentPerPlayer
; Function compile flags: /Odtp
;	COMDAT ?getPercentPerPlayer@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPercentPerPlayer@CvResourceInfo@@QBEHXZ PROC	; CvResourceInfo::getPercentPerPlayer, COMDAT
; _this$ = ecx

; 4507 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4508 : 	return m_iPercentPerPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+344]

; 4509 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPercentPerPlayer@CvResourceInfo@@QBEHXZ ENDP	; CvResourceInfo::getPercentPerPlayer
_TEXT	ENDS
PUBLIC	?getTilesPer@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getTilesPer
; Function compile flags: /Odtp
;	COMDAT ?getTilesPer@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTilesPer@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getTilesPer, COMDAT
; _this$ = ecx

; 4512 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4513 : 	return m_iTilesPer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]

; 4514 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTilesPer@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getTilesPer
_TEXT	ENDS
PUBLIC	?getMinLandPercent@CvResourceInfo@@QBEHXZ	; CvResourceInfo::getMinLandPercent
; Function compile flags: /Odtp
;	COMDAT ?getMinLandPercent@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinLandPercent@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getMinLandPercent, COMDAT
; _this$ = ecx

; 4517 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4518 : 	return m_iMinLandPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+352]

; 4519 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinLandPercent@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getMinLandPercent
_TEXT	ENDS
PUBLIC	?getUniqueRange@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getUniqueRange
; Function compile flags: /Odtp
;	COMDAT ?getUniqueRange@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUniqueRange@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getUniqueRange, COMDAT
; _this$ = ecx

; 4522 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4523 : 	return m_iUniqueRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+356]

; 4524 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUniqueRange@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getUniqueRange
_TEXT	ENDS
PUBLIC	?getGroupRange@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getGroupRange
; Function compile flags: /Odtp
;	COMDAT ?getGroupRange@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGroupRange@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getGroupRange, COMDAT
; _this$ = ecx

; 4527 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4528 : 	return m_iGroupRange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+360]

; 4529 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGroupRange@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getGroupRange
_TEXT	ENDS
PUBLIC	?getGroupRand@CvResourceInfo@@QBEHXZ		; CvResourceInfo::getGroupRand
; Function compile flags: /Odtp
;	COMDAT ?getGroupRand@CvResourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGroupRand@CvResourceInfo@@QBEHXZ PROC		; CvResourceInfo::getGroupRand, COMDAT
; _this$ = ecx

; 4532 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4533 : 	return m_iGroupRand;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+364]

; 4534 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGroupRand@CvResourceInfo@@QBEHXZ ENDP		; CvResourceInfo::getGroupRand
_TEXT	ENDS
PUBLIC	?isPresentOnAllValidPlots@CvResourceInfo@@QBE_NXZ ; CvResourceInfo::isPresentOnAllValidPlots
; Function compile flags: /Odtp
;	COMDAT ?isPresentOnAllValidPlots@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isPresentOnAllValidPlots@CvResourceInfo@@QBE_NXZ PROC	; CvResourceInfo::isPresentOnAllValidPlots, COMDAT
; _this$ = ecx

; 4537 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4538 : 	return m_bPresentOnAllValidPlots;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+368]

; 4539 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isPresentOnAllValidPlots@CvResourceInfo@@QBE_NXZ ENDP	; CvResourceInfo::isPresentOnAllValidPlots
_TEXT	ENDS
PUBLIC	?isOneArea@CvResourceInfo@@QBE_NXZ		; CvResourceInfo::isOneArea
; Function compile flags: /Odtp
;	COMDAT ?isOneArea@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isOneArea@CvResourceInfo@@QBE_NXZ PROC			; CvResourceInfo::isOneArea, COMDAT
; _this$ = ecx

; 4542 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4543 : 	return m_bOneArea;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+369]

; 4544 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isOneArea@CvResourceInfo@@QBE_NXZ ENDP			; CvResourceInfo::isOneArea
_TEXT	ENDS
PUBLIC	?isHills@CvResourceInfo@@QBE_NXZ		; CvResourceInfo::isHills
; Function compile flags: /Odtp
;	COMDAT ?isHills@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isHills@CvResourceInfo@@QBE_NXZ PROC			; CvResourceInfo::isHills, COMDAT
; _this$ = ecx

; 4547 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4548 : 	return m_bHills;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+370]

; 4549 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isHills@CvResourceInfo@@QBE_NXZ ENDP			; CvResourceInfo::isHills
_TEXT	ENDS
PUBLIC	?isFlatlands@CvResourceInfo@@QBE_NXZ		; CvResourceInfo::isFlatlands
; Function compile flags: /Odtp
;	COMDAT ?isFlatlands@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isFlatlands@CvResourceInfo@@QBE_NXZ PROC		; CvResourceInfo::isFlatlands, COMDAT
; _this$ = ecx

; 4552 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4553 : 	return m_bFlatlands;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+371]

; 4554 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isFlatlands@CvResourceInfo@@QBE_NXZ ENDP		; CvResourceInfo::isFlatlands
_TEXT	ENDS
PUBLIC	?isNoRiverSide@CvResourceInfo@@QBE_NXZ		; CvResourceInfo::isNoRiverSide
; Function compile flags: /Odtp
;	COMDAT ?isNoRiverSide@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoRiverSide@CvResourceInfo@@QBE_NXZ PROC		; CvResourceInfo::isNoRiverSide, COMDAT
; _this$ = ecx

; 4557 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4558 : 	return m_bNoRiverSide;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+372]

; 4559 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoRiverSide@CvResourceInfo@@QBE_NXZ ENDP		; CvResourceInfo::isNoRiverSide
_TEXT	ENDS
PUBLIC	?isNormalize@CvResourceInfo@@QBE_NXZ		; CvResourceInfo::isNormalize
; Function compile flags: /Odtp
;	COMDAT ?isNormalize@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNormalize@CvResourceInfo@@QBE_NXZ PROC		; CvResourceInfo::isNormalize, COMDAT
; _this$ = ecx

; 4562 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4563 : 	return m_bNormalize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+373]

; 4564 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNormalize@CvResourceInfo@@QBE_NXZ ENDP		; CvResourceInfo::isNormalize
_TEXT	ENDS
PUBLIC	?isOnlyMinorCivs@CvResourceInfo@@QBE_NXZ	; CvResourceInfo::isOnlyMinorCivs
; Function compile flags: /Odtp
;	COMDAT ?isOnlyMinorCivs@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isOnlyMinorCivs@CvResourceInfo@@QBE_NXZ PROC		; CvResourceInfo::isOnlyMinorCivs, COMDAT
; _this$ = ecx

; 4567 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4568 : 	return m_bOnlyMinorCivs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+374]

; 4569 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isOnlyMinorCivs@CvResourceInfo@@QBE_NXZ ENDP		; CvResourceInfo::isOnlyMinorCivs
_TEXT	ENDS
PUBLIC	?GetRequiredCivilization@CvResourceInfo@@QBE?AW4CivilizationTypes@@XZ ; CvResourceInfo::GetRequiredCivilization
; Function compile flags: /Odtp
;	COMDAT ?GetRequiredCivilization@CvResourceInfo@@QBE?AW4CivilizationTypes@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRequiredCivilization@CvResourceInfo@@QBE?AW4CivilizationTypes@@XZ PROC ; CvResourceInfo::GetRequiredCivilization, COMDAT
; _this$ = ecx

; 4572 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4573 : 	return m_eRequiredCivilization;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+376]

; 4574 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetRequiredCivilization@CvResourceInfo@@QBE?AW4CivilizationTypes@@XZ ENDP ; CvResourceInfo::GetRequiredCivilization
_TEXT	ENDS
PUBLIC	?GetIconString@CvResourceInfo@@QBEPBDXZ		; CvResourceInfo::GetIconString
; Function compile flags: /Odtp
;	COMDAT ?GetIconString@CvResourceInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIconString@CvResourceInfo@@QBEPBDXZ PROC		; CvResourceInfo::GetIconString, COMDAT
; _this$ = ecx

; 4577 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4578 : 	return m_strIconString;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 388				; 00000184H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 4579 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetIconString@CvResourceInfo@@QBEPBDXZ ENDP		; CvResourceInfo::GetIconString
_TEXT	ENDS
PUBLIC	?SetIconString@CvResourceInfo@@QAEXPBD@Z	; CvResourceInfo::SetIconString
; Function compile flags: /Odtp
;	COMDAT ?SetIconString@CvResourceInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T233793 = -4						; size = 4
_szVal$ = 8						; size = 4
?SetIconString@CvResourceInfo@@QAEXPBD@Z PROC		; CvResourceInfo::SetIconString, COMDAT
; _this$ = ecx

; 4582 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4583 : 	m_strIconString = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 388				; 00000184H
	mov	DWORD PTR $T233793[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@SetIconStr
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T233793[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@SetIconStr
$LN4@SetIconStr:
	mov	ecx, DWORD PTR $T233793[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@SetIconStr:

; 4584 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetIconString@CvResourceInfo@@QAEXPBD@Z ENDP		; CvResourceInfo::SetIconString
_TEXT	ENDS
PUBLIC	?getArtDefineTag@CvResourceInfo@@QBEPBDXZ	; CvResourceInfo::getArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?getArtDefineTag@CvResourceInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtDefineTag@CvResourceInfo@@QBEPBDXZ PROC		; CvResourceInfo::getArtDefineTag, COMDAT
; _this$ = ecx

; 4587 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4588 : 	return m_strArtDefineTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 4589 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtDefineTag@CvResourceInfo@@QBEPBDXZ ENDP		; CvResourceInfo::getArtDefineTag
_TEXT	ENDS
PUBLIC	?setArtDefineTag@CvResourceInfo@@QAEXPBD@Z	; CvResourceInfo::setArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?setArtDefineTag@CvResourceInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T233806 = -4						; size = 4
_szVal$ = 8						; size = 4
?setArtDefineTag@CvResourceInfo@@QAEXPBD@Z PROC		; CvResourceInfo::setArtDefineTag, COMDAT
; _this$ = ecx

; 4592 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4593 : 	m_strArtDefineTag = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 416				; 000001a0H
	mov	DWORD PTR $T233806[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setArtDefi@2
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T233806[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setArtDefi@2
$LN4@setArtDefi@2:
	mov	ecx, DWORD PTR $T233806[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setArtDefi@2:

; 4594 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setArtDefineTag@CvResourceInfo@@QAEXPBD@Z ENDP		; CvResourceInfo::setArtDefineTag
_TEXT	ENDS
PUBLIC	?getArtDefineTagHeavy@CvResourceInfo@@QBEPBDXZ	; CvResourceInfo::getArtDefineTagHeavy
; Function compile flags: /Odtp
;	COMDAT ?getArtDefineTagHeavy@CvResourceInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtDefineTagHeavy@CvResourceInfo@@QBEPBDXZ PROC	; CvResourceInfo::getArtDefineTagHeavy, COMDAT
; _this$ = ecx

; 4597 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4598 : 	return m_strArtDefineTagHeavy;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 4599 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtDefineTagHeavy@CvResourceInfo@@QBEPBDXZ ENDP	; CvResourceInfo::getArtDefineTagHeavy
_TEXT	ENDS
PUBLIC	?setArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z	; CvResourceInfo::setArtDefineTagHeavy
; Function compile flags: /Odtp
;	COMDAT ?setArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T233819 = -4						; size = 4
_szVal$ = 8						; size = 4
?setArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z PROC	; CvResourceInfo::setArtDefineTagHeavy, COMDAT
; _this$ = ecx

; 4602 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4603 : 	m_strArtDefineTagHeavy = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 444				; 000001bcH
	mov	DWORD PTR $T233819[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setArtDefi@3
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T233819[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setArtDefi@3
$LN4@setArtDefi@3:
	mov	ecx, DWORD PTR $T233819[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setArtDefi@3:

; 4604 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z ENDP	; CvResourceInfo::setArtDefineTagHeavy
_TEXT	ENDS
PUBLIC	?getAltArtDefineTag@CvResourceInfo@@QBEPBDXZ	; CvResourceInfo::getAltArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?getAltArtDefineTag@CvResourceInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAltArtDefineTag@CvResourceInfo@@QBEPBDXZ PROC	; CvResourceInfo::getAltArtDefineTag, COMDAT
; _this$ = ecx

; 4607 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4608 : 	return m_strAltArtDefineTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 4609 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAltArtDefineTag@CvResourceInfo@@QBEPBDXZ ENDP	; CvResourceInfo::getAltArtDefineTag
_TEXT	ENDS
PUBLIC	?setAltArtDefineTag@CvResourceInfo@@QAEXPBD@Z	; CvResourceInfo::setAltArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?setAltArtDefineTag@CvResourceInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T233832 = -4						; size = 4
_szVal$ = 8						; size = 4
?setAltArtDefineTag@CvResourceInfo@@QAEXPBD@Z PROC	; CvResourceInfo::setAltArtDefineTag, COMDAT
; _this$ = ecx

; 4612 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4613 : 	m_strAltArtDefineTag = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 472				; 000001d8H
	mov	DWORD PTR $T233832[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setAltArtD
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T233832[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setAltArtD
$LN4@setAltArtD:
	mov	ecx, DWORD PTR $T233832[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setAltArtD:

; 4614 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAltArtDefineTag@CvResourceInfo@@QAEXPBD@Z ENDP	; CvResourceInfo::setAltArtDefineTag
_TEXT	ENDS
PUBLIC	?getAltArtDefineTagHeavy@CvResourceInfo@@QBEPBDXZ ; CvResourceInfo::getAltArtDefineTagHeavy
; Function compile flags: /Odtp
;	COMDAT ?getAltArtDefineTagHeavy@CvResourceInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAltArtDefineTagHeavy@CvResourceInfo@@QBEPBDXZ PROC	; CvResourceInfo::getAltArtDefineTagHeavy, COMDAT
; _this$ = ecx

; 4617 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4618 : 	return m_strAltArtDefineTagHeavy;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 500				; 000001f4H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 4619 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAltArtDefineTagHeavy@CvResourceInfo@@QBEPBDXZ ENDP	; CvResourceInfo::getAltArtDefineTagHeavy
_TEXT	ENDS
PUBLIC	?setAltArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z ; CvResourceInfo::setAltArtDefineTagHeavy
; Function compile flags: /Odtp
;	COMDAT ?setAltArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T233845 = -4						; size = 4
_szVal$ = 8						; size = 4
?setAltArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z PROC	; CvResourceInfo::setAltArtDefineTagHeavy, COMDAT
; _this$ = ecx

; 4622 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4623 : 	m_strAltArtDefineTagHeavy = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 500				; 000001f4H
	mov	DWORD PTR $T233845[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setAltArtD@2
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T233845[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setAltArtD@2
$LN4@setAltArtD@2:
	mov	ecx, DWORD PTR $T233845[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setAltArtD@2:

; 4624 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setAltArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z ENDP	; CvResourceInfo::setAltArtDefineTagHeavy
_TEXT	ENDS
PUBLIC	?getYieldChange@CvResourceInfo@@QBEHH@Z		; CvResourceInfo::getYieldChange
; Function compile flags: /Odtp
;	COMDAT ?getYieldChange@CvResourceInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getYieldChange@CvResourceInfo@@QBEHH@Z PROC		; CvResourceInfo::getYieldChange, COMDAT
; _this$ = ecx

; 4627 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4628 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 4629 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4630 : 	return m_piYieldChange ? m_piYieldChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+528], 0
	je	SHORT $LN3@getYieldCh@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+528]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getYieldCh@3
$LN3@getYieldCh@3:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getYieldCh@3:
	mov	eax, DWORD PTR tv69[ebp]

; 4631 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getYieldChange@CvResourceInfo@@QBEHH@Z ENDP		; CvResourceInfo::getYieldChange
_TEXT	ENDS
PUBLIC	?getYieldChangeArray@CvResourceInfo@@QAEPAHXZ	; CvResourceInfo::getYieldChangeArray
; Function compile flags: /Odtp
;	COMDAT ?getYieldChangeArray@CvResourceInfo@@QAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getYieldChangeArray@CvResourceInfo@@QAEPAHXZ PROC	; CvResourceInfo::getYieldChangeArray, COMDAT
; _this$ = ecx

; 4634 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4635 : 	return m_piYieldChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+528]

; 4636 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getYieldChangeArray@CvResourceInfo@@QAEPAHXZ ENDP	; CvResourceInfo::getYieldChangeArray
_TEXT	ENDS
PUBLIC	?isHasUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE_NXZ ; CvResourceInfo::isHasUnitCombatProductionCostModifiersLocal
; Function compile flags: /Odtp
;	COMDAT ?isHasUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T233857 = -4						; size = 4
?isHasUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE_NXZ PROC ; CvResourceInfo::isHasUnitCombatProductionCostModifiersLocal, COMDAT
; _this$ = ecx

; 4641 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4642 : 	return m_piiiUnitCombatProductionCostModifiersLocal.size() > 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+540]
	mov	DWORD PTR $T233857[ebp], ecx
	xor	edx, edx
	cmp	edx, DWORD PTR $T233857[ebp]
	sbb	eax, eax
	neg	eax

; 4643 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isHasUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE_NXZ ENDP ; CvResourceInfo::isHasUnitCombatProductionCostModifiersLocal
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::find
PUBLIC	?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBEHW4UnitCombatTypes@@W4EraTypes@@@Z ; CvResourceInfo::getUnitCombatProductionCostModifiersLocal
; Function compile flags: /Odtp
;	COMDAT ?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBEHW4UnitCombatTypes@@W4EraTypes@@@Z
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T233982 = -84						; size = 4
$T233977 = -80						; size = 4
$T233954 = -76						; size = 4
$T233922 = -72						; size = 4
$T233861 = -36						; size = 4
$T233860 = -32						; size = 4
_eObsoleteEra$220516 = -28				; size = 4
_eRequiredEra$220514 = -24				; size = 4
_itVector$220480 = -20					; size = 4
_iUnitEra$ = -16					; size = 4
_iUnitCombat$ = -12					; size = 4
_iMod$ = -8						; size = 4
_itMap$ = -4						; size = 4
_eUnitCombat$ = 8					; size = 4
_eUnitEra$ = 12						; size = 4
?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBEHW4UnitCombatTypes@@W4EraTypes@@@Z PROC ; CvResourceInfo::getUnitCombatProductionCostModifiersLocal, COMDAT
; _this$ = ecx

; 4646 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 4647 : 	CvAssertMsg(eUnitCombat < GC.getNumUnitCombatClassInfos(), "Index out of bounds");
; 4648 : 	CvAssertMsg(eUnitCombat > -1, "Index out of bounds");
; 4649 : 
; 4650 : 	CvAssertMsg(eUnitEra < GC.getNumEraInfos(), "Index out of bounds");
; 4651 : 	CvAssertMsg(eUnitEra > -1, "Index out of bounds");
; 4652 : 
; 4653 : 	int iUnitCombat = (int)eUnitCombat;

	mov	eax, DWORD PTR _eUnitCombat$[ebp]
	mov	DWORD PTR _iUnitCombat$[ebp], eax

; 4654 : 	int iUnitEra = (int)eUnitEra;

	mov	ecx, DWORD PTR _eUnitEra$[ebp]
	mov	DWORD PTR _iUnitEra$[ebp], ecx

; 4655 : 	int iMod = 0;

	mov	DWORD PTR _iMod$[ebp], 0

; 4656 : 
; 4657 : 	std::map<int, std::vector<ProductionCostModifiers>>::const_iterator itMap = m_piiiUnitCombatProductionCostModifiersLocal.find(iUnitCombat);

	lea	edx, DWORD PTR _iUnitCombat$[ebp]
	push	edx
	lea	eax, DWORD PTR _itMap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 532				; 00000214H
	call	?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::find

; 4658 : 	if (itMap != m_piiiUnitCombatProductionCostModifiersLocal.end()) // find returns the iterator to map::end if the key iUnitCombat is not present in the map

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+536]
	mov	DWORD PTR $T233922[ebp], edx
	mov	eax, DWORD PTR $T233922[ebp]
	mov	DWORD PTR $T233860[ebp], eax
	mov	ecx, DWORD PTR _itMap$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T233860[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	$LN7@getUnitCom

; 4659 : 	{
; 4660 : 		for (std::vector<ProductionCostModifiers>::const_iterator itVector = itMap->second.begin(); itVector != itMap->second.end(); ++itVector)

	mov	edx, DWORD PTR _itMap$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR $T233954[ebp], eax
	mov	ecx, DWORD PTR $T233954[ebp]
	mov	DWORD PTR _itVector$220480[ebp], ecx
	jmp	SHORT $LN60@getUnitCom
$LN5@getUnitCom:
	mov	edx, DWORD PTR _itVector$220480[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR _itVector$220480[ebp], edx
$LN60@getUnitCom:
	mov	eax, DWORD PTR _itMap$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T233977[ebp], eax
	mov	ecx, DWORD PTR $T233977[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR $T233982[ebp], edx
	mov	eax, DWORD PTR $T233982[ebp]
	mov	DWORD PTR $T233861[ebp], eax
	mov	ecx, DWORD PTR _itVector$220480[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T233861[ebp]
	sete	dl
	movzx	eax, dl
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN7@getUnitCom

; 4661 : 		{
; 4662 : 			EraTypes eRequiredEra = (EraTypes)itVector->m_iRequiredEra;

	mov	edx, DWORD PTR _itVector$220480[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _eRequiredEra$220514[ebp], eax

; 4663 : 			EraTypes eObsoleteEra = (EraTypes)itVector->m_iObsoleteEra;

	mov	ecx, DWORD PTR _itVector$220480[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _eObsoleteEra$220516[ebp], edx

; 4664 : 
; 4665 : 			if (eUnitEra != NO_ERA)

	cmp	DWORD PTR _eUnitEra$[ebp], -1
	je	SHORT $LN88@getUnitCom

; 4666 : 			{
; 4667 : 				// Our unit's era needs to be greater than or equal to the required era
; 4668 : 				if (eRequiredEra != NO_ERA && iUnitEra < itVector->m_iRequiredEra)

	cmp	DWORD PTR _eRequiredEra$220514[ebp], -1
	je	SHORT $LN2@getUnitCom
	mov	eax, DWORD PTR _itVector$220480[ebp]
	mov	ecx, DWORD PTR _iUnitEra$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN2@getUnitCom

; 4669 : 				{
; 4670 : 					continue;

	jmp	SHORT $LN5@getUnitCom
$LN2@getUnitCom:

; 4671 : 				}
; 4672 : 
; 4673 : 				// Our unit's era needs to be less than the obsolete era
; 4674 : 				if (eObsoleteEra != NO_ERA && iUnitEra >= itVector->m_iObsoleteEra)

	cmp	DWORD PTR _eObsoleteEra$220516[ebp], -1
	je	SHORT $LN88@getUnitCom
	mov	edx, DWORD PTR _itVector$220480[ebp]
	mov	eax, DWORD PTR _iUnitEra$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN88@getUnitCom

; 4675 : 				{
; 4676 : 					continue;

	jmp	SHORT $LN5@getUnitCom

; 4677 : 				}
; 4678 : 			}
; 4679 : 
; 4680 : 			iMod += itVector->m_iCostModifier;

$LN88@getUnitCom:
	mov	ecx, DWORD PTR _itVector$220480[ebp]
	mov	edx, DWORD PTR _iMod$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _iMod$[ebp], edx

; 4681 : 		}

	jmp	$LN5@getUnitCom
$LN7@getUnitCom:

; 4682 : 	}
; 4683 : 
; 4684 : 	return iMod;

	mov	eax, DWORD PTR _iMod$[ebp]

; 4685 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBEHW4UnitCombatTypes@@W4EraTypes@@@Z ENDP ; CvResourceInfo::getUnitCombatProductionCostModifiersLocal
_TEXT	ENDS
PUBLIC	??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
PUBLIC	?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z ; CvResourceInfo::getUnitCombatProductionCostModifiersLocal
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z$1
__ehfuncinfo$?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z
_TEXT	SEGMENT
tv176 = -188						; size = 4
tv201 = -184						; size = 4
_this$ = -180						; size = 4
$T234160 = -86						; size = 1
$T234147 = -85						; size = 1
$T234143 = -84						; size = 4
$T234136 = -76						; size = 4
$T234129 = -68						; size = 4
$T234101 = -64						; size = 4
$T234039 = -28						; size = 4
$T234037 = -24						; size = 4
_iUnitCombat$ = -20					; size = 4
_it$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_eUnitCombat$ = 12					; size = 4
?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z PROC ; CvResourceInfo::getUnitCombatProductionCostModifiersLocal, COMDAT
; _this$ = ecx

; 4688 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T234039[ebp], 0

; 4689 : 	CvAssertMsg(eUnitCombat < GC.getNumUnitCombatClassInfos(), "Index out of bounds");
; 4690 : 	CvAssertMsg(eUnitCombat > -1, "Index out of bounds");
; 4691 : 
; 4692 : 	int iUnitCombat = (int)eUnitCombat;

	mov	eax, DWORD PTR _eUnitCombat$[ebp]
	mov	DWORD PTR _iUnitCombat$[ebp], eax

; 4693 : 
; 4694 : 	std::map<int, std::vector<ProductionCostModifiers>>::const_iterator it = m_piiiUnitCombatProductionCostModifiersLocal.find(iUnitCombat);

	lea	ecx, DWORD PTR _iUnitCombat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _it$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 532				; 00000214H
	call	?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::find

; 4695 : 	if (it != m_piiiUnitCombatProductionCostModifiersLocal.end()) // find returns the iterator to map::end if the key iUnitCombat is not present in the map

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+536]
	mov	DWORD PTR $T234101[ebp], ecx
	mov	edx, DWORD PTR $T234101[ebp]
	mov	DWORD PTR $T234037[ebp], edx
	mov	eax, DWORD PTR _it$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T234037[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN51@getUnitCom@2

; 4696 : 	{
; 4697 : 		return it->second;

	mov	ecx, DWORD PTR _it$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T234129[ebp], ecx
	mov	edx, DWORD PTR $T234129[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
	mov	eax, DWORD PTR $T234039[ebp]
	or	eax, 1
	mov	DWORD PTR $T234039[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@getUnitCom@2

; 4698 : 	}
; 4699 : 
; 4700 : 	return std::vector<ProductionCostModifiers>();

$LN51@getUnitCom@2:
	lea	ecx, DWORD PTR $T234160[ebp]
	mov	DWORD PTR $T234136[ebp], ecx
	lea	edx, DWORD PTR $T234147[ebp]
	mov	DWORD PTR $T234143[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR tv201[ebp], eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR tv176[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	?_Buy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAE_NI@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T234039[ebp]
	or	edx, 1
	mov	DWORD PTR $T234039[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@getUnitCom@2:

; 4701 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z$1:
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__ehhandler$?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?getUnitCombatProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@W4UnitCombatTypes@@@Z ENDP ; CvResourceInfo::getUnitCombatProductionCostModifiersLocal
PUBLIC	?isHasBuildingProductionCostModifiersLocal@CvResourceInfo@@QBE_NXZ ; CvResourceInfo::isHasBuildingProductionCostModifiersLocal
; Function compile flags: /Odtp
;	COMDAT ?isHasBuildingProductionCostModifiersLocal@CvResourceInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T234227 = -4						; size = 4
?isHasBuildingProductionCostModifiersLocal@CvResourceInfo@@QBE_NXZ PROC ; CvResourceInfo::isHasBuildingProductionCostModifiersLocal, COMDAT
; _this$ = ecx

; 4704 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4705 : 	return m_aiiiBuildingProductionCostModifiersLocal.size() > 0;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 544				; 00000220H
	mov	DWORD PTR $T234227[ebp], eax
	mov	ecx, DWORD PTR $T234227[ebp]
	mov	edx, DWORD PTR $T234227[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	xor	edx, edx
	cmp	edx, eax
	sbb	eax, eax
	neg	eax

; 4706 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isHasBuildingProductionCostModifiersLocal@CvResourceInfo@@QBE_NXZ ENDP ; CvResourceInfo::isHasBuildingProductionCostModifiersLocal
_TEXT	ENDS
PUBLIC	?getBuildingProductionCostModifiersLocal@CvResourceInfo@@QBEHW4EraTypes@@@Z ; CvResourceInfo::getBuildingProductionCostModifiersLocal
; Function compile flags: /Odtp
;	COMDAT ?getBuildingProductionCostModifiersLocal@CvResourceInfo@@QBEHW4EraTypes@@@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T234247 = -32						; size = 4
$T234235 = -28						; size = 4
$T234230 = -24						; size = 4
_eObsoleteEra$220580 = -20				; size = 4
_eRequiredEra$220578 = -16				; size = 4
_it$220572 = -12					; size = 4
_iBuildingEra$ = -8					; size = 4
_iMod$ = -4						; size = 4
_eBuildingEra$ = 8					; size = 4
?getBuildingProductionCostModifiersLocal@CvResourceInfo@@QBEHW4EraTypes@@@Z PROC ; CvResourceInfo::getBuildingProductionCostModifiersLocal, COMDAT
; _this$ = ecx

; 4709 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 4710 : 	CvAssertMsg(eBuildingEra < GC.getNumEraInfos(), "Index out of bounds");
; 4711 : 	CvAssertMsg(eBuildingEra > -1, "Index out of bounds");
; 4712 : 
; 4713 : 	int iBuildingEra = (int)eBuildingEra;

	mov	eax, DWORD PTR _eBuildingEra$[ebp]
	mov	DWORD PTR _iBuildingEra$[ebp], eax

; 4714 : 	int iMod = 0;

	mov	DWORD PTR _iMod$[ebp], 0

; 4715 : 
; 4716 : 	for (std::vector<ProductionCostModifiers>::const_iterator it = m_aiiiBuildingProductionCostModifiersLocal.begin(); it != m_aiiiBuildingProductionCostModifiersLocal.end(); ++it)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+548]
	mov	DWORD PTR $T234235[ebp], edx
	mov	eax, DWORD PTR $T234235[ebp]
	mov	DWORD PTR _it$220572[ebp], eax
	jmp	SHORT $LN6@getBuildin
$LN5@getBuildin:
	mov	ecx, DWORD PTR _it$220572[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _it$220572[ebp], ecx
$LN6@getBuildin:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+552]
	mov	DWORD PTR $T234247[ebp], eax
	mov	ecx, DWORD PTR $T234247[ebp]
	mov	DWORD PTR $T234230[ebp], ecx
	mov	edx, DWORD PTR _it$220572[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T234230[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@getBuildin

; 4717 : 	{
; 4718 : 		EraTypes eRequiredEra = (EraTypes)it->m_iRequiredEra;

	mov	eax, DWORD PTR _it$220572[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _eRequiredEra$220578[ebp], ecx

; 4719 : 		EraTypes eObsoleteEra = (EraTypes)it->m_iObsoleteEra;

	mov	edx, DWORD PTR _it$220572[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _eObsoleteEra$220580[ebp], eax

; 4720 : 
; 4721 : 		if (eBuildingEra != NO_ERA)

	cmp	DWORD PTR _eBuildingEra$[ebp], -1
	je	SHORT $LN39@getBuildin

; 4722 : 		{
; 4723 : 			// Our building's era needs to be greater than or equal to the required era
; 4724 : 			if (eRequiredEra != NO_ERA && iBuildingEra < it->m_iRequiredEra)

	cmp	DWORD PTR _eRequiredEra$220578[ebp], -1
	je	SHORT $LN2@getBuildin
	mov	ecx, DWORD PTR _it$220572[ebp]
	mov	edx, DWORD PTR _iBuildingEra$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN2@getBuildin

; 4725 : 			{
; 4726 : 				continue;

	jmp	SHORT $LN5@getBuildin
$LN2@getBuildin:

; 4727 : 			}
; 4728 : 
; 4729 : 			// Our building's era needs to be less than the obsolete era
; 4730 : 			if (eObsoleteEra != NO_ERA && iBuildingEra >= it->m_iObsoleteEra)

	cmp	DWORD PTR _eObsoleteEra$220580[ebp], -1
	je	SHORT $LN39@getBuildin
	mov	eax, DWORD PTR _it$220572[ebp]
	mov	ecx, DWORD PTR _iBuildingEra$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN39@getBuildin

; 4731 : 			{
; 4732 : 				continue;

	jmp	SHORT $LN5@getBuildin

; 4733 : 			}
; 4734 : 		}
; 4735 : 
; 4736 : 		iMod += it->m_iCostModifier;

$LN39@getBuildin:
	mov	edx, DWORD PTR _it$220572[ebp]
	mov	eax, DWORD PTR _iMod$[ebp]
	add	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _iMod$[ebp], eax

; 4737 : 	}

	jmp	$LN5@getBuildin
$LN4@getBuildin:

; 4738 : 
; 4739 : 	return iMod;

	mov	eax, DWORD PTR _iMod$[ebp]

; 4740 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getBuildingProductionCostModifiersLocal@CvResourceInfo@@QBEHW4EraTypes@@@Z ENDP ; CvResourceInfo::getBuildingProductionCostModifiersLocal
_TEXT	ENDS
PUBLIC	?getBuildingProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@XZ ; CvResourceInfo::getBuildingProductionCostModifiersLocal
; Function compile flags: /Odtp
;	COMDAT ?getBuildingProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T234303 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getBuildingProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@XZ PROC ; CvResourceInfo::getBuildingProductionCostModifiersLocal, COMDAT
; _this$ = ecx

; 4744 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T234303[ebp], 0

; 4745 : 	return m_aiiiBuildingProductionCostModifiersLocal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 544				; 00000220H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
	mov	ecx, DWORD PTR $T234303[ebp]
	or	ecx, 1
	mov	DWORD PTR $T234303[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4746 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getBuildingProductionCostModifiersLocal@CvResourceInfo@@QBE?AV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@XZ ENDP ; CvResourceInfo::getBuildingProductionCostModifiersLocal
_TEXT	ENDS
PUBLIC	?getResourceQuantityType@CvResourceInfo@@QBEHH@Z ; CvResourceInfo::getResourceQuantityType
; Function compile flags: /Odtp
;	COMDAT ?getResourceQuantityType@CvResourceInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getResourceQuantityType@CvResourceInfo@@QBEHH@Z PROC	; CvResourceInfo::getResourceQuantityType, COMDAT
; _this$ = ecx

; 4750 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4751 : 	CvAssertMsg(i < GC.getNUM_RESOURCE_QUANTITY_TYPES(), "Index out of bounds");
; 4752 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4753 : 	return m_piResourceQuantityTypes ? m_piResourceQuantityTypes[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+560], 0
	je	SHORT $LN3@getResourc@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+560]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getResourc@2
$LN3@getResourc@2:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getResourc@2:
	mov	eax, DWORD PTR tv69[ebp]

; 4754 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getResourceQuantityType@CvResourceInfo@@QBEHH@Z ENDP	; CvResourceInfo::getResourceQuantityType
_TEXT	ENDS
PUBLIC	?getImprovementChange@CvResourceInfo@@QBEHH@Z	; CvResourceInfo::getImprovementChange
; Function compile flags: /Odtp
;	COMDAT ?getImprovementChange@CvResourceInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getImprovementChange@CvResourceInfo@@QBEHH@Z PROC	; CvResourceInfo::getImprovementChange, COMDAT
; _this$ = ecx

; 4757 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4758 : 	CvAssertMsg(i < GC.getNumImprovementInfos(), "Index out of bounds");
; 4759 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4760 : 	return m_piImprovementChange ? m_piImprovementChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+564], 0
	je	SHORT $LN3@getImprove
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+564]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getImprove
$LN3@getImprove:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getImprove:
	mov	eax, DWORD PTR tv69[ebp]

; 4761 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getImprovementChange@CvResourceInfo@@QBEHH@Z ENDP	; CvResourceInfo::getImprovementChange
_TEXT	ENDS
PUBLIC	?isTerrain@CvResourceInfo@@QBE_NH@Z		; CvResourceInfo::isTerrain
; Function compile flags: /Odtp
;	COMDAT ?isTerrain@CvResourceInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isTerrain@CvResourceInfo@@QBE_NH@Z PROC		; CvResourceInfo::isTerrain, COMDAT
; _this$ = ecx

; 4764 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4765 : 	CvAssertMsg(i < GC.getNumTerrainInfos(), "Index out of bounds");
; 4766 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4767 : 	return m_pbTerrain ?	m_pbTerrain[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+572], 0
	je	SHORT $LN3@isTerrain
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+572]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isTerrain
$LN3@isTerrain:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isTerrain:
	mov	al, BYTE PTR tv68[ebp]

; 4768 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isTerrain@CvResourceInfo@@QBE_NH@Z ENDP		; CvResourceInfo::isTerrain
_TEXT	ENDS
PUBLIC	?isFeature@CvResourceInfo@@QBE_NH@Z		; CvResourceInfo::isFeature
; Function compile flags: /Odtp
;	COMDAT ?isFeature@CvResourceInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isFeature@CvResourceInfo@@QBE_NH@Z PROC		; CvResourceInfo::isFeature, COMDAT
; _this$ = ecx

; 4771 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4772 : 	CvAssertMsg(i < GC.getNumFeatureInfos(), "Index out of bounds");
; 4773 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4774 : 	return m_pbFeature ? m_pbFeature[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+576], 0
	je	SHORT $LN3@isFeature
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+576]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isFeature
$LN3@isFeature:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isFeature:
	mov	al, BYTE PTR tv68[ebp]

; 4775 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isFeature@CvResourceInfo@@QBE_NH@Z ENDP		; CvResourceInfo::isFeature
_TEXT	ENDS
PUBLIC	?isFeatureTerrain@CvResourceInfo@@QBE_NH@Z	; CvResourceInfo::isFeatureTerrain
; Function compile flags: /Odtp
;	COMDAT ?isFeatureTerrain@CvResourceInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isFeatureTerrain@CvResourceInfo@@QBE_NH@Z PROC		; CvResourceInfo::isFeatureTerrain, COMDAT
; _this$ = ecx

; 4778 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4779 : 	CvAssertMsg(i < GC.getNumTerrainInfos(), "Index out of bounds");
; 4780 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 4781 : 	return m_pbFeatureTerrain ?	m_pbFeatureTerrain[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+580], 0
	je	SHORT $LN3@isFeatureT
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+580]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isFeatureT
$LN3@isFeatureT:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isFeatureT:
	mov	al, BYTE PTR tv68[ebp]

; 4782 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isFeatureTerrain@CvResourceInfo@@QBE_NH@Z ENDP		; CvResourceInfo::isFeatureTerrain
_TEXT	ENDS
PUBLIC	?getFlavorValue@CvResourceInfo@@QBEHH@Z		; CvResourceInfo::getFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?getFlavorValue@CvResourceInfo@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFlavorValue@CvResourceInfo@@QBEHH@Z PROC		; CvResourceInfo::getFlavorValue, COMDAT
; _this$ = ecx

; 4785 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4786 : 	CvAssertMsg(i < GC.getNumFlavorTypes(), "index out of bounds");
; 4787 : 	CvAssertMsg(i > -1, "index out of bounds");
; 4788 : 	return m_piFlavor[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+568]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]

; 4789 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFlavorValue@CvResourceInfo@@QBEHH@Z ENDP		; CvResourceInfo::getFlavorValue
_TEXT	ENDS
PUBLIC	??_C@_0HI@FKAIKHPG@select?5RequiredEra?0?5ObsoleteEra?0@ ; `string'
PUBLIC	??_C@_0CO@DHMPOJOA@Resource_BuildingProductionCostM@ ; `string'
PUBLIC	?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::swap
PUBLIC	??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
PUBLIC	?push_back@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAEXABUProductionCostModifiers@@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::push_back
PUBLIC	??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z ; std::map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >::operator[]
PUBLIC	??_C@_0OH@JBOMJDHC@select?5UnitCombatInfos?4ID?5as?5Uni@ ; `string'
PUBLIC	??_C@_0DA@CEBCLNOE@Resource_UnitCombatProductionCos@ ; `string'
PUBLIC	??_C@_0EH@HEHNDNLO@select?5Quantity?5from?5Resource_Qu@ ; `string'
PUBLIC	??_C@_0CA@CDDACOPF@Resource_FeatureTerrainBooleans?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HJPODNJM@Resource_FeatureBooleans?$AA@ ; `string'
PUBLIC	??_C@_08DHHJBCFH@Terrains?$AA@			; `string'
PUBLIC	??_C@_0BJ@NIGGIOPA@Resource_TerrainBooleans?$AA@ ; `string'
PUBLIC	??_C@_0M@BBHDGKPJ@TerrainType?$AA@		; `string'
PUBLIC	??_C@_0BB@DMAOINPE@Resource_Flavors?$AA@	; `string'
PUBLIC	??_C@_0BG@PHNFFGEP@Resource_YieldChanges?$AA@	; `string'
PUBLIC	??_C@_0BB@NLOCCGGI@AIStopTradingEra?$AA@	; `string'
PUBLIC	??_C@_0N@COMAJFAF@TechObsolete?$AA@		; `string'
PUBLIC	??_C@_0O@KCIAHGIO@TechCityTrade?$AA@		; `string'
PUBLIC	??_C@_0N@BEEOJAHP@PolicyReveal?$AA@		; `string'
PUBLIC	??_C@_0L@BLHFNIHL@TechReveal?$AA@		; `string'
PUBLIC	??_C@_0BF@NCAANIOL@AltArtDefineTagHeavy?$AA@	; `string'
PUBLIC	??_C@_0BA@EMCOOEAC@AltArtDefineTag?$AA@		; `string'
PUBLIC	??_C@_0BC@PCLAHNGA@ArtDefineTagHeavy?$AA@	; `string'
PUBLIC	??_C@_0L@GKFBIGGH@IconString?$AA@		; `string'
PUBLIC	??_C@_0BC@LABEHHHL@ResourceClassType?$AA@	; `string'
PUBLIC	??_C@_0O@BGGDGBFA@ResourceUsage?$AA@		; `string'
PUBLIC	??_C@_08PAIIBCLC@RandApp4?$AA@			; `string'
PUBLIC	??_C@_08LPMJIEHF@RandApp3?$AA@			; `string'
PUBLIC	??_C@_08KGNCLFDE@RandApp2?$AA@			; `string'
PUBLIC	??_C@_08INPPOGPH@RandApp1?$AA@			; `string'
PUBLIC	??_C@_0O@NKJGDEJ@OnlyMinorCivs?$AA@		; `string'
PUBLIC	??_C@_09IDGANJHJ@Normalize?$AA@			; `string'
PUBLIC	??_C@_0M@EIOHPIBJ@NoRiverSide?$AA@		; `string'
PUBLIC	??_C@_09HKLBJOOG@Flatlands?$AA@			; `string'
PUBLIC	??_C@_05NDLJDKL@Hills?$AA@			; `string'
PUBLIC	??_C@_04KPICECCB@Area?$AA@			; `string'
PUBLIC	??_C@_0BH@NEBFHFEK@PresentOnAllValidPlots?$AA@	; `string'
PUBLIC	??_C@_09IAGOGEBN@GroupRand?$AA@			; `string'
PUBLIC	??_C@_0L@HJEKCDAG@GroupRange?$AA@		; `string'
PUBLIC	??_C@_06CMJBGPCH@Unique?$AA@			; `string'
PUBLIC	??_C@_08MLKJHPMB@TilesPer?$AA@			; `string'
PUBLIC	??_C@_06NPAAKFED@Player?$AA@			; `string'
PUBLIC	??_C@_0BA@KKMMPBME@ConstAppearance?$AA@		; `string'
PUBLIC	??_C@_0P@NIFBPFBA@PlacementOrder?$AA@		; `string'
PUBLIC	??_C@_0M@EKPOBDDJ@MaxLatitude?$AA@		; `string'
PUBLIC	??_C@_0M@NKINADND@MinLatitude?$AA@		; `string'
PUBLIC	??_C@_0M@ILJKFCBC@MinAreaSize?$AA@		; `string'
PUBLIC	??_C@_0BP@BHFIDGEP@WonderProductionModObsoleteEra?$AA@ ; `string'
PUBLIC	??_C@_0BE@PJMPDBJ@WonderProductionMod?$AA@	; `string'
PUBLIC	??_C@_09MNJMGIDC@Happiness?$AA@			; `string'
PUBLIC	??_C@_0M@ILICMHCJ@AIObjective?$AA@		; `string'
PUBLIC	??_C@_0BA@NKLNHAIL@AITradeModifier?$AA@		; `string'
PUBLIC	??_C@_0BJ@LLOELJIC@StartingResourceQuantity?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0HI@FKAIKHPG@select?5RequiredEra?0?5ObsoleteEra?0@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
CONST	SEGMENT
??_C@_0HI@FKAIKHPG@select?5RequiredEra?0?5ObsoleteEra?0@ DB 'select Requi'
	DB	'redEra, ObsoleteEra, CostModifier from Resource_BuildingProdu'
	DB	'ctionCostModifiersLocal where ResourceType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DHMPOJOA@Resource_BuildingProductionCostM@
CONST	SEGMENT
??_C@_0CO@DHMPOJOA@Resource_BuildingProductionCostM@ DB 'Resource_Buildin'
	DB	'gProductionCostModifiersLocal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0OH@JBOMJDHC@select?5UnitCombatInfos?4ID?5as?5Uni@
CONST	SEGMENT
??_C@_0OH@JBOMJDHC@select?5UnitCombatInfos?4ID?5as?5Uni@ DB 'select UnitC'
	DB	'ombatInfos.ID as UnitCombatInfosID, RequiredEra, ObsoleteEra,'
	DB	' CostModifier from Resource_UnitCombatProductionCostModifiers'
	DB	'Local inner join UnitCombatInfos on UnitCombatType = UnitComb'
	DB	'atInfos.Type where ResourceType = ?', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CEBCLNOE@Resource_UnitCombatProductionCos@
CONST	SEGMENT
??_C@_0DA@CEBCLNOE@Resource_UnitCombatProductionCos@ DB 'Resource_UnitCom'
	DB	'batProductionCostModifiersLocal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@HEHNDNLO@select?5Quantity?5from?5Resource_Qu@
CONST	SEGMENT
??_C@_0EH@HEHNDNLO@select?5Quantity?5from?5Resource_Qu@ DB 'select Quanti'
	DB	'ty from Resource_QuantityTypes where ResourceType = ''%s'';', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CDDACOPF@Resource_FeatureTerrainBooleans?$AA@
CONST	SEGMENT
??_C@_0CA@CDDACOPF@Resource_FeatureTerrainBooleans?$AA@ DB 'Resource_Feat'
	DB	'ureTerrainBooleans', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HJPODNJM@Resource_FeatureBooleans?$AA@
CONST	SEGMENT
??_C@_0BJ@HJPODNJM@Resource_FeatureBooleans?$AA@ DB 'Resource_FeatureBool'
	DB	'eans', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHHJBCFH@Terrains?$AA@
CONST	SEGMENT
??_C@_08DHHJBCFH@Terrains?$AA@ DB 'Terrains', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NIGGIOPA@Resource_TerrainBooleans?$AA@
CONST	SEGMENT
??_C@_0BJ@NIGGIOPA@Resource_TerrainBooleans?$AA@ DB 'Resource_TerrainBool'
	DB	'eans', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BBHDGKPJ@TerrainType?$AA@
CONST	SEGMENT
??_C@_0M@BBHDGKPJ@TerrainType?$AA@ DB 'TerrainType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DMAOINPE@Resource_Flavors?$AA@
CONST	SEGMENT
??_C@_0BB@DMAOINPE@Resource_Flavors?$AA@ DB 'Resource_Flavors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PHNFFGEP@Resource_YieldChanges?$AA@
CONST	SEGMENT
??_C@_0BG@PHNFFGEP@Resource_YieldChanges?$AA@ DB 'Resource_YieldChanges', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NLOCCGGI@AIStopTradingEra?$AA@
CONST	SEGMENT
??_C@_0BB@NLOCCGGI@AIStopTradingEra?$AA@ DB 'AIStopTradingEra', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@COMAJFAF@TechObsolete?$AA@
CONST	SEGMENT
??_C@_0N@COMAJFAF@TechObsolete?$AA@ DB 'TechObsolete', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KCIAHGIO@TechCityTrade?$AA@
CONST	SEGMENT
??_C@_0O@KCIAHGIO@TechCityTrade?$AA@ DB 'TechCityTrade', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BEEOJAHP@PolicyReveal?$AA@
CONST	SEGMENT
??_C@_0N@BEEOJAHP@PolicyReveal?$AA@ DB 'PolicyReveal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BLHFNIHL@TechReveal?$AA@
CONST	SEGMENT
??_C@_0L@BLHFNIHL@TechReveal?$AA@ DB 'TechReveal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NCAANIOL@AltArtDefineTagHeavy?$AA@
CONST	SEGMENT
??_C@_0BF@NCAANIOL@AltArtDefineTagHeavy?$AA@ DB 'AltArtDefineTagHeavy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EMCOOEAC@AltArtDefineTag?$AA@
CONST	SEGMENT
??_C@_0BA@EMCOOEAC@AltArtDefineTag?$AA@ DB 'AltArtDefineTag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PCLAHNGA@ArtDefineTagHeavy?$AA@
CONST	SEGMENT
??_C@_0BC@PCLAHNGA@ArtDefineTagHeavy?$AA@ DB 'ArtDefineTagHeavy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GKFBIGGH@IconString?$AA@
CONST	SEGMENT
??_C@_0L@GKFBIGGH@IconString?$AA@ DB 'IconString', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LABEHHHL@ResourceClassType?$AA@
CONST	SEGMENT
??_C@_0BC@LABEHHHL@ResourceClassType?$AA@ DB 'ResourceClassType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BGGDGBFA@ResourceUsage?$AA@
CONST	SEGMENT
??_C@_0O@BGGDGBFA@ResourceUsage?$AA@ DB 'ResourceUsage', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PAIIBCLC@RandApp4?$AA@
CONST	SEGMENT
??_C@_08PAIIBCLC@RandApp4?$AA@ DB 'RandApp4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPMJIEHF@RandApp3?$AA@
CONST	SEGMENT
??_C@_08LPMJIEHF@RandApp3?$AA@ DB 'RandApp3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KGNCLFDE@RandApp2?$AA@
CONST	SEGMENT
??_C@_08KGNCLFDE@RandApp2?$AA@ DB 'RandApp2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08INPPOGPH@RandApp1?$AA@
CONST	SEGMENT
??_C@_08INPPOGPH@RandApp1?$AA@ DB 'RandApp1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKJGDEJ@OnlyMinorCivs?$AA@
CONST	SEGMENT
??_C@_0O@NKJGDEJ@OnlyMinorCivs?$AA@ DB 'OnlyMinorCivs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IDGANJHJ@Normalize?$AA@
CONST	SEGMENT
??_C@_09IDGANJHJ@Normalize?$AA@ DB 'Normalize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EIOHPIBJ@NoRiverSide?$AA@
CONST	SEGMENT
??_C@_0M@EIOHPIBJ@NoRiverSide?$AA@ DB 'NoRiverSide', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HKLBJOOG@Flatlands?$AA@
CONST	SEGMENT
??_C@_09HKLBJOOG@Flatlands?$AA@ DB 'Flatlands', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDLJDKL@Hills?$AA@
CONST	SEGMENT
??_C@_05NDLJDKL@Hills?$AA@ DB 'Hills', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPICECCB@Area?$AA@
CONST	SEGMENT
??_C@_04KPICECCB@Area?$AA@ DB 'Area', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NEBFHFEK@PresentOnAllValidPlots?$AA@
CONST	SEGMENT
??_C@_0BH@NEBFHFEK@PresentOnAllValidPlots?$AA@ DB 'PresentOnAllValidPlots'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09IAGOGEBN@GroupRand?$AA@
CONST	SEGMENT
??_C@_09IAGOGEBN@GroupRand?$AA@ DB 'GroupRand', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HJEKCDAG@GroupRange?$AA@
CONST	SEGMENT
??_C@_0L@HJEKCDAG@GroupRange?$AA@ DB 'GroupRange', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMJBGPCH@Unique?$AA@
CONST	SEGMENT
??_C@_06CMJBGPCH@Unique?$AA@ DB 'Unique', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLKJHPMB@TilesPer?$AA@
CONST	SEGMENT
??_C@_08MLKJHPMB@TilesPer?$AA@ DB 'TilesPer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPAAKFED@Player?$AA@
CONST	SEGMENT
??_C@_06NPAAKFED@Player?$AA@ DB 'Player', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKMMPBME@ConstAppearance?$AA@
CONST	SEGMENT
??_C@_0BA@KKMMPBME@ConstAppearance?$AA@ DB 'ConstAppearance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NIFBPFBA@PlacementOrder?$AA@
CONST	SEGMENT
??_C@_0P@NIFBPFBA@PlacementOrder?$AA@ DB 'PlacementOrder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EKPOBDDJ@MaxLatitude?$AA@
CONST	SEGMENT
??_C@_0M@EKPOBDDJ@MaxLatitude?$AA@ DB 'MaxLatitude', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NKINADND@MinLatitude?$AA@
CONST	SEGMENT
??_C@_0M@NKINADND@MinLatitude?$AA@ DB 'MinLatitude', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILJKFCBC@MinAreaSize?$AA@
CONST	SEGMENT
??_C@_0M@ILJKFCBC@MinAreaSize?$AA@ DB 'MinAreaSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BHFIDGEP@WonderProductionModObsoleteEra?$AA@
CONST	SEGMENT
??_C@_0BP@BHFIDGEP@WonderProductionModObsoleteEra?$AA@ DB 'WonderProducti'
	DB	'onModObsoleteEra', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PJMPDBJ@WonderProductionMod?$AA@
CONST	SEGMENT
??_C@_0BE@PJMPDBJ@WonderProductionMod?$AA@ DB 'WonderProductionMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MNJMGIDC@Happiness?$AA@
CONST	SEGMENT
??_C@_09MNJMGIDC@Happiness?$AA@ DB 'Happiness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ILICMHCJ@AIObjective?$AA@
CONST	SEGMENT
??_C@_0M@ILICMHCJ@AIObjective?$AA@ DB 'AIObjective', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NKLNHAIL@AITradeModifier?$AA@
CONST	SEGMENT
??_C@_0BA@NKLNHAIL@AITradeModifier?$AA@ DB 'AITradeModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LLOELJIC@StartingResourceQuantity?$AA@
CONST	SEGMENT
??_C@_0BJ@LLOELJIC@StartingResourceQuantity?$AA@ DB 'StartingResourceQuan'
	DB	'tity', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$21
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$3
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv560 = -1160						; size = 4
_this$ = -1156						; size = 4
$T234346 = -816						; size = 4
$T234330 = -804						; size = 12
_iRequiredEra$220736 = -792				; size = 4
_iCostMod$220738 = -788					; size = 4
_sElement$220739 = -784					; size = 12
_iObsoleteEra$220737 = -772				; size = 4
_szSQL$220731 = -768					; size = 4
_pResults$220729 = -764					; size = 4
_sqlKey$220727 = -760					; size = 28
_iRequiredEra$220705 = -732				; size = 4
_iCostMod$220707 = -728					; size = 4
_sElement$220708 = -724					; size = 12
_iUnitCombat$220704 = -712				; size = 4
_iObsoleteEra$220706 = -708				; size = 4
_szSQL$220699 = -704					; size = 4
_pResults$220697 = -700					; size = 4
_sqlKey$220695 = -696					; size = 28
_quantity$220694 = -668					; size = 4
_i$220690 = -664					; size = 4
_kArrayResults$220686 = -660				; size = 64
_iNumQuantityTypes$220685 = -592			; size = 4
_szQuery$220687 = -588					; size = 512
__$ArrayPad$ = -72					; size = 4
_szEraType$ = -68					; size = 4
_szPolicyReveal$ = -64					; size = 4
_szArtDefineTag$ = -60					; size = 4
_szCivilizationType$ = -56				; size = 4
_szResourceType$ = -52					; size = 4
_szArtDefineTagHeavy$ = -48				; size = 4
_szAltArtDefineTag$ = -44				; size = 4
_szAltArtDefineTagHeavy$ = -40				; size = 4
_szTechReveal$ = -36					; size = 4
_szIconString$ = -32					; size = 4
_szTechCityTrade$ = -28					; size = 4
_szTechObsolete$ = -24					; size = 4
_szResourceClassType$ = -20				; size = 4
_szAIStopTradingEra$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvResourceInfo::CacheResults, COMDAT
; _this$ = ecx

; 4792 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1148				; 0000047cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 4793 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN10@CacheResul@23

; 4794 : 		return false;

	xor	al, al
	jmp	$LN11@CacheResul@23
$LN10@CacheResul@23:

; 4795 : 
; 4796 : 	//Basic properties
; 4797 : 	m_iStartingResourceQuantity = kResults.GetInt("StartingResourceQuantity");

	push	OFFSET ??_C@_0BJ@LLOELJIC@StartingResourceQuantity?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+288], eax

; 4798 : 	m_iAITradeModifier = kResults.GetInt("AITradeModifier");

	push	OFFSET ??_C@_0BA@NKLNHAIL@AITradeModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], eax

; 4799 : 	m_iAIObjective = kResults.GetInt("AIObjective");

	push	OFFSET ??_C@_0M@ILICMHCJ@AIObjective?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], eax

; 4800 : 	m_iHappiness = kResults.GetInt("Happiness");

	push	OFFSET ??_C@_09MNJMGIDC@Happiness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], eax

; 4801 : 	m_iWonderProductionMod = kResults.GetInt("WonderProductionMod");

	push	OFFSET ??_C@_0BE@PJMPDBJ@WonderProductionMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+304], eax

; 4802 : 
; 4803 : 	const char* szEraType = kResults.GetText("WonderProductionModObsoleteEra");

	push	OFFSET ??_C@_0BP@BHFIDGEP@WonderProductionModObsoleteEra?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szEraType$[ebp], eax

; 4804 : 	m_eWonderProductionModObsoleteEra = (EraTypes)GC.getInfoTypeForString(szEraType, true);

	push	1
	mov	edx, DWORD PTR _szEraType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+384], eax

; 4805 : 
; 4806 : 	m_iMinAreaSize = kResults.GetInt("MinAreaSize");

	push	OFFSET ??_C@_0M@ILJKFCBC@MinAreaSize?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+308], eax

; 4807 : 	m_iMinLatitude = kResults.GetInt("MinLatitude");

	push	OFFSET ??_C@_0M@NKINADND@MinLatitude?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], eax

; 4808 : 	m_iMaxLatitude = kResults.GetInt("MaxLatitude");

	push	OFFSET ??_C@_0M@EKPOBDDJ@MaxLatitude?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+316], eax

; 4809 : 	m_iPlacementOrder = kResults.GetInt("PlacementOrder");

	push	OFFSET ??_C@_0P@NIFBPFBA@PlacementOrder?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], eax

; 4810 : 	m_iConstAppearance = kResults.GetInt("ConstAppearance");

	push	OFFSET ??_C@_0BA@KKMMPBME@ConstAppearance?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], eax

; 4811 : 
; 4812 : 	m_iPercentPerPlayer = kResults.GetInt("Player");

	push	OFFSET ??_C@_06NPAAKFED@Player?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+344], eax

; 4813 : 	m_iTilesPer = kResults.GetInt("TilesPer");

	push	OFFSET ??_C@_08MLKJHPMB@TilesPer?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], eax

; 4814 : 	m_iMinLandPercent = kResults.GetInt("MinLandPercent");

	push	OFFSET ??_C@_0P@LDOHGIDG@MinLandPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+352], eax

; 4815 : 	m_iUniqueRange = kResults.GetInt("Unique");

	push	OFFSET ??_C@_06CMJBGPCH@Unique?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+356], eax

; 4816 : 	m_iGroupRange = kResults.GetInt("GroupRange");

	push	OFFSET ??_C@_0L@HJEKCDAG@GroupRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+360], eax

; 4817 : 	m_iGroupRand = kResults.GetInt("GroupRand");

	push	OFFSET ??_C@_09IAGOGEBN@GroupRand?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+364], eax

; 4818 : 	m_bPresentOnAllValidPlots = kResults.GetBool("PresentOnAllValidPlots");

	push	OFFSET ??_C@_0BH@NEBFHFEK@PresentOnAllValidPlots?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+368], al

; 4819 : 	m_bOneArea = kResults.GetBool("Area");

	push	OFFSET ??_C@_04KPICECCB@Area?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+369], al

; 4820 : 	m_bHills = kResults.GetBool("Hills");

	push	OFFSET ??_C@_05NDLJDKL@Hills?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+370], al

; 4821 : 	m_bFlatlands = kResults.GetBool("Flatlands");

	push	OFFSET ??_C@_09HKLBJOOG@Flatlands?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+371], al

; 4822 : 	m_bNoRiverSide = kResults.GetBool("NoRiverSide");

	push	OFFSET ??_C@_0M@EIOHPIBJ@NoRiverSide?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+372], al

; 4823 : 	m_bNormalize = kResults.GetBool("Normalize");

	push	OFFSET ??_C@_09IDGANJHJ@Normalize?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+373], al

; 4824 : 	m_bOnlyMinorCivs = kResults.GetBool("OnlyMinorCivs");

	push	OFFSET ??_C@_0O@NKJGDEJ@OnlyMinorCivs?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+374], al

; 4825 : 
; 4826 : 	const char* szCivilizationType = kResults.GetText("CivilizationType");

	push	OFFSET ??_C@_0BB@GDPFJHJJ@CivilizationType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szCivilizationType$[ebp], eax

; 4827 : 	m_eRequiredCivilization = (CivilizationTypes)GC.getInfoTypeForString(szCivilizationType, true);

	push	1
	mov	edx, DWORD PTR _szCivilizationType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+376], eax

; 4828 : 
; 4829 : 	m_iRandAppearance1 = kResults.GetInt("RandApp1");

	push	OFFSET ??_C@_08INPPOGPH@RandApp1?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+328], eax

; 4830 : 	m_iRandAppearance2 = kResults.GetInt("RandApp2");

	push	OFFSET ??_C@_08KGNCLFDE@RandApp2?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], eax

; 4831 : 	m_iRandAppearance3 = kResults.GetInt("RandApp3");

	push	OFFSET ??_C@_08LPMJIEHF@RandApp3?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], eax

; 4832 : 	m_iRandAppearance4 = kResults.GetInt("RandApp4");

	push	OFFSET ??_C@_08PAIIBCLC@RandApp4?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+340], eax

; 4833 : 
; 4834 : 	m_eResourceUsage   = (ResourceUsageTypes)kResults.GetInt("ResourceUsage");

	push	OFFSET ??_C@_0O@BGGDGBFA@ResourceUsage?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+380], eax

; 4835 : 
; 4836 : 	//Basic references
; 4837 : 	const char* szResourceClassType = kResults.GetText("ResourceClassType");

	push	OFFSET ??_C@_0BC@LABEHHHL@ResourceClassType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szResourceClassType$[ebp], eax

; 4838 : 	m_iResourceClassType = GC.getInfoTypeForString(szResourceClassType, true);

	push	1
	mov	eax, DWORD PTR _szResourceClassType$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 4839 : 
; 4840 : 	const char* szIconString = kResults.GetText("IconString");

	push	OFFSET ??_C@_0L@GKFBIGGH@IconString?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szIconString$[ebp], eax

; 4841 : 	SetIconString(szIconString);

	mov	edx, DWORD PTR _szIconString$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetIconString@CvResourceInfo@@QAEXPBD@Z ; CvResourceInfo::SetIconString

; 4842 : 
; 4843 : 	const char* szArtDefineTag = kResults.GetText("ArtDefineTag");

	push	OFFSET ??_C@_0N@NLPPFOOH@ArtDefineTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szArtDefineTag$[ebp], eax

; 4844 : 	setArtDefineTag(szArtDefineTag);

	mov	eax, DWORD PTR _szArtDefineTag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setArtDefineTag@CvResourceInfo@@QAEXPBD@Z ; CvResourceInfo::setArtDefineTag

; 4845 : 
; 4846 : 	const char* szArtDefineTagHeavy = kResults.GetText("ArtDefineTagHeavy");

	push	OFFSET ??_C@_0BC@PCLAHNGA@ArtDefineTagHeavy?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szArtDefineTagHeavy$[ebp], eax

; 4847 : 	setArtDefineTagHeavy(szArtDefineTagHeavy);

	mov	ecx, DWORD PTR _szArtDefineTagHeavy$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z ; CvResourceInfo::setArtDefineTagHeavy

; 4848 : 
; 4849 : 	const char* szAltArtDefineTag = kResults.GetText("AltArtDefineTag");

	push	OFFSET ??_C@_0BA@EMCOOEAC@AltArtDefineTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szAltArtDefineTag$[ebp], eax

; 4850 : 	setAltArtDefineTag(szAltArtDefineTag);

	mov	edx, DWORD PTR _szAltArtDefineTag$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAltArtDefineTag@CvResourceInfo@@QAEXPBD@Z ; CvResourceInfo::setAltArtDefineTag

; 4851 : 
; 4852 : 	const char* szAltArtDefineTagHeavy = kResults.GetText("AltArtDefineTagHeavy");

	push	OFFSET ??_C@_0BF@NCAANIOL@AltArtDefineTagHeavy?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szAltArtDefineTagHeavy$[ebp], eax

; 4853 : 	setAltArtDefineTagHeavy(szAltArtDefineTagHeavy);

	mov	eax, DWORD PTR _szAltArtDefineTagHeavy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setAltArtDefineTagHeavy@CvResourceInfo@@QAEXPBD@Z ; CvResourceInfo::setAltArtDefineTagHeavy

; 4854 : 
; 4855 : 	const char* szTechReveal = kResults.GetText("TechReveal");

	push	OFFSET ??_C@_0L@BLHFNIHL@TechReveal?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTechReveal$[ebp], eax

; 4856 : 	m_iTechReveal = GC.getInfoTypeForString(szTechReveal, true);

	push	1
	mov	ecx, DWORD PTR _szTechReveal$[ebp]
	push	ecx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], eax

; 4857 : 
; 4858 : 	const char* szPolicyReveal = kResults.GetText("PolicyReveal");

	push	OFFSET ??_C@_0N@BEEOJAHP@PolicyReveal?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPolicyReveal$[ebp], eax

; 4859 : 	m_iPolicyReveal = GC.getInfoTypeForString(szPolicyReveal, true);

	push	1
	mov	eax, DWORD PTR _szPolicyReveal$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], eax

; 4860 : 
; 4861 : 	const char* szTechCityTrade = kResults.GetText("TechCityTrade");

	push	OFFSET ??_C@_0O@KCIAHGIO@TechCityTrade?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTechCityTrade$[ebp], eax

; 4862 : 	m_iTechCityTrade = GC.getInfoTypeForString(szTechCityTrade, true);

	push	1
	mov	edx, DWORD PTR _szTechCityTrade$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 4863 : 
; 4864 : 	const char* szTechObsolete = kResults.GetText("TechObsolete");

	push	OFFSET ??_C@_0N@COMAJFAF@TechObsolete?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTechObsolete$[ebp], eax

; 4865 : 	m_iTechObsolete = GC.getInfoTypeForString(szTechObsolete, true);

	push	1
	mov	edx, DWORD PTR _szTechObsolete$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+280], eax

; 4866 : 
; 4867 : 	const char* szAIStopTradingEra = kResults.GetText("AIStopTradingEra");

	push	OFFSET ??_C@_0BB@NLOCCGGI@AIStopTradingEra?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szAIStopTradingEra$[ebp], eax

; 4868 : 	m_iAIStopTradingEra = GC.getInfoTypeForString(szAIStopTradingEra, true);

	push	1
	mov	edx, DWORD PTR _szAIStopTradingEra$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 4869 : 
; 4870 : 	//Arrays
; 4871 : 	const char* szResourceType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szResourceType$[ebp], eax

; 4872 : 	kUtility.SetYields(m_piYieldChange, "Resource_YieldChanges", "ResourceType", szResourceType);

	mov	edx, DWORD PTR _szResourceType$[ebp]
	push	edx
	push	OFFSET ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
	push	OFFSET ??_C@_0BG@PHNFFGEP@Resource_YieldChanges?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 528				; 00000210H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 4873 : 	kUtility.SetFlavors(m_piFlavor, "Resource_Flavors", "ResourceType", szResourceType);

	push	0
	mov	ecx, DWORD PTR _szResourceType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
	push	OFFSET ??_C@_0BB@DMAOINPE@Resource_Flavors?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 568				; 00000238H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 4874 : 
; 4875 : 	kUtility.PopulateArrayByExistence(m_pbTerrain, "Terrains", "Resource_TerrainBooleans", "TerrainType", "ResourceType", szResourceType);

	mov	eax, DWORD PTR _szResourceType$[ebp]
	push	eax
	push	OFFSET ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
	push	OFFSET ??_C@_0M@BBHDGKPJ@TerrainType?$AA@
	push	OFFSET ??_C@_0BJ@NIGGIOPA@Resource_TerrainBooleans?$AA@
	push	OFFSET ??_C@_08DHHJBCFH@Terrains?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 572				; 0000023cH
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 4876 : 	kUtility.PopulateArrayByExistence(m_pbFeature, "Features", "Resource_FeatureBooleans", "FeatureType", "ResourceType", szResourceType);

	mov	edx, DWORD PTR _szResourceType$[ebp]
	push	edx
	push	OFFSET ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
	push	OFFSET ??_C@_0M@LJDMFNNN@FeatureType?$AA@
	push	OFFSET ??_C@_0BJ@HJPODNJM@Resource_FeatureBooleans?$AA@
	push	OFFSET ??_C@_08CLANBDND@Features?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 576				; 00000240H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 4877 : 	kUtility.PopulateArrayByExistence(m_pbFeatureTerrain, "Terrains", "Resource_FeatureTerrainBooleans", "TerrainType", "ResourceType", szResourceType);

	mov	ecx, DWORD PTR _szResourceType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0N@EPHJOCBJ@ResourceType?$AA@
	push	OFFSET ??_C@_0M@BBHDGKPJ@TerrainType?$AA@
	push	OFFSET ??_C@_0CA@CDDACOPF@Resource_FeatureTerrainBooleans?$AA@
	push	OFFSET ??_C@_08DHHJBCFH@Terrains?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 580				; 00000244H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 4878 : 
; 4879 : 	//Resource_QuantityTypes
; 4880 : 	{
; 4881 : 		const int iNumQuantityTypes = GC.getNUM_RESOURCE_QUANTITY_TYPES();

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+7016
	mov	DWORD PTR _iNumQuantityTypes$220685[ebp], eax

; 4882 : 		kUtility.InitializeArray(m_piResourceQuantityTypes, iNumQuantityTypes);

	push	0
	mov	ecx, DWORD PTR _iNumQuantityTypes$220685[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 560				; 00000230H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ; CvDatabaseUtility::InitializeArray

; 4883 : 
; 4884 : 		//Default it to 1
; 4885 : 		m_piResourceQuantityTypes[0] = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+560]
	mov	DWORD PTR [ecx], 1

; 4886 : 
; 4887 : 		Database::Results kArrayResults;

	push	0
	lea	ecx, DWORD PTR _kArrayResults$220686[ebp]
	call	DWORD PTR __imp_??0Results@Database@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 4888 : 		char szQuery[512];
; 4889 : 		sprintf_s(szQuery, "select Quantity from Resource_QuantityTypes where ResourceType = '%s';", szResourceType);

	mov	edx, DWORD PTR _szResourceType$[ebp]
	push	edx
	push	OFFSET ??_C@_0EH@HEHNDNLO@select?5Quantity?5from?5Resource_Qu@
	lea	eax, DWORD PTR _szQuery$220687[ebp]
	push	eax
	call	??$sprintf_s@$0CAA@@@YAHAAY0CAA@DPBDZZ	; sprintf_s<512>
	add	esp, 12					; 0000000cH

; 4890 : 
; 4891 : 		if(DB.Execute(kArrayResults, szQuery))

	mov	ecx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+912
	mov	DWORD PTR $T234346[ebp], ecx
	push	-1
	lea	edx, DWORD PTR _szQuery$220687[ebp]
	push	edx
	lea	eax, DWORD PTR _kArrayResults$220686[ebp]
	push	eax
	mov	ecx, DWORD PTR $T234346[ebp]
	call	DWORD PTR __imp_?Execute@Connection@Database@@QBE_NAAVResults@2@PBDH@Z
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@CacheResul@23

; 4892 : 		{
; 4893 : 			int i = 0;

	mov	DWORD PTR _i$220690[ebp], 0
$LN8@CacheResul@23:

; 4894 : 			while(kArrayResults.Step())

	lea	ecx, DWORD PTR _kArrayResults$220686[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN9@CacheResul@23

; 4895 : 			{
; 4896 : 				CvAssertMsg(i < iNumQuantityTypes, "Too many resource quantities.");
; 4897 : 				const int quantity = kArrayResults.GetInt(0);

	push	0
	lea	ecx, DWORD PTR _kArrayResults$220686[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _quantity$220694[ebp], eax

; 4898 : 				m_piResourceQuantityTypes[i++] = quantity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+560]
	mov	edx, DWORD PTR _i$220690[ebp]
	mov	eax, DWORD PTR _quantity$220694[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _i$220690[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$220690[ebp], ecx

; 4899 : 			}

	jmp	SHORT $LN8@CacheResul@23
$LN9@CacheResul@23:

; 4900 : 		}
; 4901 : 
; 4902 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _kArrayResults$220686[ebp]
	call	DWORD PTR __imp_??1Results@Database@@UAE@XZ

; 4903 : 
; 4904 : #if defined(MOD_RESOURCES_PRODUCTION_COST_MODIFIERS) // From Community Patch DLL - Resource additions for v28
; 4905 : 	//Resource_UnitCombatProductionCostModifiersLocal
; 4906 : 	{
; 4907 : 
; 4908 : 		std::string sqlKey = "Resource_UnitCombatProductionCostModifiersLocal";

	push	OFFSET ??_C@_0DA@CEBCLNOE@Resource_UnitCombatProductionCos@
	lea	ecx, DWORD PTR _sqlKey$220695[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 4909 : 		Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	edx, DWORD PTR _sqlKey$220695[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$220697[ebp], eax

; 4910 : 		if (pResults == NULL)

	cmp	DWORD PTR _pResults$220697[ebp], 0
	jne	SHORT $LN6@CacheResul@23

; 4911 : 		{
; 4912 : 			const char* szSQL = "select UnitCombatInfos.ID as UnitCombatInfosID, RequiredEra, ObsoleteEra, CostModifier from Resource_UnitCombatProductionCostModifiersLocal inner join UnitCombatInfos on UnitCombatType = UnitCombatInfos.Type where ResourceType = ?";

	mov	DWORD PTR _szSQL$220699[ebp], OFFSET ??_C@_0OH@JBOMJDHC@select?5UnitCombatInfos?4ID?5as?5Uni@

; 4913 : 			pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	eax, DWORD PTR _szSQL$220699[ebp]
	push	eax
	lea	ecx, DWORD PTR _sqlKey$220695[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$220697[ebp], eax
$LN6@CacheResul@23:

; 4914 : 		}
; 4915 : 
; 4916 : 		pResults->Bind(1, szResourceType);

	push	1
	mov	edx, DWORD PTR _szResourceType$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pResults$220697[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN5@CacheResul@23:

; 4917 : 
; 4918 : 		while (pResults->Step())

	mov	ecx, DWORD PTR _pResults$220697[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	$LN4@CacheResul@23

; 4919 : 		{
; 4920 : 			const int iUnitCombat = pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$220697[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iUnitCombat$220704[ebp], eax

; 4921 : 			const int iRequiredEra = GC.getInfoTypeForString(pResults->GetText(1), true);

	push	1
	push	1
	mov	ecx, DWORD PTR _pResults$220697[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _iRequiredEra$220705[ebp], eax

; 4922 : 			const int iObsoleteEra = GC.getInfoTypeForString(pResults->GetText(2), true);

	push	1
	push	2
	mov	ecx, DWORD PTR _pResults$220697[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _iObsoleteEra$220706[ebp], eax

; 4923 : 			const int iCostMod = pResults->GetInt(3);

	push	3
	mov	ecx, DWORD PTR _pResults$220697[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iCostMod$220707[ebp], eax

; 4924 : 
; 4925 : 			ProductionCostModifiers sElement;

	mov	DWORD PTR _sElement$220708[ebp], -1
	mov	DWORD PTR _sElement$220708[ebp+4], -1
	mov	DWORD PTR _sElement$220708[ebp+8], 0

; 4926 : 			sElement.m_iRequiredEra = iRequiredEra;

	mov	ecx, DWORD PTR _iRequiredEra$220705[ebp]
	mov	DWORD PTR _sElement$220708[ebp], ecx

; 4927 : 			sElement.m_iObsoleteEra = iObsoleteEra;

	mov	edx, DWORD PTR _iObsoleteEra$220706[ebp]
	mov	DWORD PTR _sElement$220708[ebp+4], edx

; 4928 : 			sElement.m_iCostModifier = iCostMod;

	mov	eax, DWORD PTR _iCostMod$220707[ebp]
	mov	DWORD PTR _sElement$220708[ebp+8], eax

; 4929 : 
; 4930 : 			m_piiiUnitCombatProductionCostModifiersLocal[iUnitCombat].push_back(sElement);

	lea	ecx, DWORD PTR _sElement$220708[ebp]
	push	ecx
	lea	edx, DWORD PTR _iUnitCombat$220704[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 532				; 00000214H
	call	??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z ; std::map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >::operator[]
	mov	ecx, eax
	call	?push_back@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAEXABUProductionCostModifiers@@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::push_back

; 4931 : 		}

	jmp	$LN5@CacheResul@23
$LN4@CacheResul@23:

; 4932 : 
; 4933 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$220697[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 4934 : 
; 4935 : 		//Trim extra memory off container since this is mostly read-only.
; 4936 : 		std::map<int, std::vector<ProductionCostModifiers>>(m_piiiUnitCombatProductionCostModifiersLocal).swap(m_piiiUnitCombatProductionCostModifiersLocal);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 532				; 00000214H
	push	eax
	lea	ecx, DWORD PTR $T234330[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
	lea	ecx, DWORD PTR $T234330[ebp]
	mov	DWORD PTR tv560[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 532				; 00000214H
	push	edx
	mov	ecx, DWORD PTR tv560[ebp]
	call	?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::swap
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T234330[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 4937 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$220695[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4938 : 
; 4939 : 	//Resource_BuildingProductionCostModifiersLocal
; 4940 : 		{
; 4941 : 
; 4942 : 			std::string sqlKey = "Resource_BuildingProductionCostModifiersLocal";

	push	OFFSET ??_C@_0CO@DHMPOJOA@Resource_BuildingProductionCostM@
	lea	ecx, DWORD PTR _sqlKey$220727[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 4

; 4943 : 			Database::Results* pResults = kUtility.GetResults(sqlKey);

	lea	eax, DWORD PTR _sqlKey$220727[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$220729[ebp], eax

; 4944 : 			if (pResults == NULL)

	cmp	DWORD PTR _pResults$220729[ebp], 0
	jne	SHORT $LN3@CacheResul@23

; 4945 : 			{
; 4946 : 				const char* szSQL = "select RequiredEra, ObsoleteEra, CostModifier from Resource_BuildingProductionCostModifiersLocal where ResourceType = ?";

	mov	DWORD PTR _szSQL$220731[ebp], OFFSET ??_C@_0HI@FKAIKHPG@select?5RequiredEra?0?5ObsoleteEra?0@

; 4947 : 				pResults = kUtility.PrepareResults(sqlKey, szSQL);

	mov	ecx, DWORD PTR _szSQL$220731[ebp]
	push	ecx
	lea	edx, DWORD PTR _sqlKey$220727[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$220729[ebp], eax
$LN3@CacheResul@23:

; 4948 : 			}
; 4949 : 
; 4950 : 			pResults->Bind(1, szResourceType);

	push	1
	mov	eax, DWORD PTR _szResourceType$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pResults$220729[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBD_N@Z
$LN2@CacheResul@23:

; 4951 : 
; 4952 : 			while (pResults->Step())

	mov	ecx, DWORD PTR _pResults$220729[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	ecx, al
	test	ecx, ecx
	je	$LN1@CacheResul@23

; 4953 : 			{
; 4954 : 				const int iRequiredEra = GC.getInfoTypeForString(pResults->GetText(0), true);

	push	1
	push	0
	mov	ecx, DWORD PTR _pResults$220729[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _iRequiredEra$220736[ebp], eax

; 4955 : 				const int iObsoleteEra = GC.getInfoTypeForString(pResults->GetText(1), true);

	push	1
	push	1
	mov	ecx, DWORD PTR _pResults$220729[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	DWORD PTR _iObsoleteEra$220737[ebp], eax

; 4956 : 				const int iCostMod = pResults->GetInt(2);

	push	2
	mov	ecx, DWORD PTR _pResults$220729[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _iCostMod$220738[ebp], eax

; 4957 : 
; 4958 : 				ProductionCostModifiers sElement;

	mov	DWORD PTR _sElement$220739[ebp], -1
	mov	DWORD PTR _sElement$220739[ebp+4], -1
	mov	DWORD PTR _sElement$220739[ebp+8], 0

; 4959 : 				sElement.m_iRequiredEra = iRequiredEra;

	mov	edx, DWORD PTR _iRequiredEra$220736[ebp]
	mov	DWORD PTR _sElement$220739[ebp], edx

; 4960 : 				sElement.m_iObsoleteEra = iObsoleteEra;

	mov	eax, DWORD PTR _iObsoleteEra$220737[ebp]
	mov	DWORD PTR _sElement$220739[ebp+4], eax

; 4961 : 				sElement.m_iCostModifier = iCostMod;

	mov	ecx, DWORD PTR _iCostMod$220738[ebp]
	mov	DWORD PTR _sElement$220739[ebp+8], ecx

; 4962 : 
; 4963 : 				m_aiiiBuildingProductionCostModifiersLocal.push_back(sElement);

	lea	edx, DWORD PTR _sElement$220739[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 544				; 00000220H
	call	?push_back@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAEXABUProductionCostModifiers@@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::push_back

; 4964 : 			}

	jmp	$LN2@CacheResul@23
$LN1@CacheResul@23:

; 4965 : 
; 4966 : 			pResults->Reset();

	mov	ecx, DWORD PTR _pResults$220729[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 4967 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sqlKey$220727[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 4968 : #endif
; 4969 : 
; 4970 : 	return true;

	mov	al, 1
$LN11@CacheResul@23:

; 4971 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _kArrayResults$220686[ebp]
	jmp	DWORD PTR __imp_??1Results@Database@@UAE@XZ
__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR _sqlKey$220695[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$2:
	lea	ecx, DWORD PTR $T234330[ebp]
	jmp	??1?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$21:
	lea	ecx, DWORD PTR $T234330[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$3:
	lea	ecx, DWORD PTR _sqlKey$220727[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvResourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvResourceInfo::CacheResults
PUBLIC	??_7CvFeatureInfo@@6B@				; CvFeatureInfo::`vftable'
PUBLIC	??0CvFeatureInfo@@QAE@XZ			; CvFeatureInfo::CvFeatureInfo
PUBLIC	?CacheResults@CvFeatureInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvFeatureInfo::CacheResults
EXTRN	??_ECvFeatureInfo@@UAEPAXI@Z:PROC		; CvFeatureInfo::`vector deleting destructor'
;	COMDAT ??_7CvFeatureInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvFeatureInfo@@6B@ DD FLAT:?CacheResults@CvFeatureInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvFeatureInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvFeatureInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvFeatureInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvFeatureInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvFeatureInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvFeatureInfo@@QAE@XZ$2
__ehfuncinfo$??0CvFeatureInfo@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CvFeatureInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvFeatureInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T235118 = -24						; size = 4
$T235113 = -20						; size = 4
$T235108 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvFeatureInfo@@QAE@XZ PROC				; CvFeatureInfo::CvFeatureInfo, COMDAT
; _this$ = ecx

; 5014 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvFeatureInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvFeatureInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+320], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+321], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+322], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+323], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+324], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+325], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+326], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+327], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+328], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+329], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+330], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+331], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+332], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+333], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+334], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+336], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 340				; 00000154H
	mov	DWORD PTR $T235108[ebp], edx
	mov	ecx, DWORD PTR $T235108[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+368], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	mov	DWORD PTR $T235113[ebp], ecx
	mov	ecx, DWORD PTR $T235113[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+400], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+404], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+408], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+412], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+416], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	mov	DWORD PTR $T235118[ebp], ecx
	mov	ecx, DWORD PTR $T235118[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5015 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvFeatureInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvFeatureInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvFeatureInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvFeatureInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvFeatureInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvFeatureInfo@@QAE@XZ ENDP				; CvFeatureInfo::CvFeatureInfo
PUBLIC	??1CvFeatureInfo@@UAE@XZ			; CvFeatureInfo::~CvFeatureInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvFeatureInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvFeatureInfo@@UAEPAXI@Z PROC			; CvFeatureInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvFeatureInfo@@UAE@XZ		; CvFeatureInfo::~CvFeatureInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@13
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@13:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvFeatureInfo@@UAEPAXI@Z ENDP			; CvFeatureInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvFeatureInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvFeatureInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvFeatureInfo@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvFeatureInfo@@UAE@XZ$2
__ehfuncinfo$??1CvFeatureInfo@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1CvFeatureInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvFeatureInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -104						; size = 4
$T235177 = -64						; size = 4
$T235172 = -60						; size = 4
$T235167 = -56						; size = 4
$T235162 = -52						; size = 4
$T235161 = -48						; size = 4
$T235156 = -44						; size = 4
$T235155 = -40						; size = 4
$T235150 = -36						; size = 4
$T235149 = -32						; size = 4
$T235144 = -28						; size = 4
$T235143 = -24						; size = 4
$T235138 = -20						; size = 4
$T235137 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvFeatureInfo@@UAE@XZ PROC				; CvFeatureInfo::~CvFeatureInfo, COMDAT
; _this$ = ecx

; 5018 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvFeatureInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvFeatureInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 5019 : 	SAFE_DELETE_ARRAY(m_piYieldChange);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	mov	DWORD PTR $T235138[ebp], ecx
	mov	edx, DWORD PTR $T235138[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235137[ebp], eax
	mov	ecx, DWORD PTR $T235137[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T235138[ebp]
	mov	DWORD PTR [edx], 0

; 5020 : 	SAFE_DELETE_ARRAY(m_piRiverYieldChange);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 404				; 00000194H
	mov	DWORD PTR $T235144[ebp], eax
	mov	ecx, DWORD PTR $T235144[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T235143[ebp], edx
	mov	eax, DWORD PTR $T235143[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T235144[ebp]
	mov	DWORD PTR [ecx], 0

; 5021 : 	SAFE_DELETE_ARRAY(m_piHillsYieldChange);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 408				; 00000198H
	mov	DWORD PTR $T235150[ebp], edx
	mov	eax, DWORD PTR $T235150[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T235149[ebp], ecx
	mov	edx, DWORD PTR $T235149[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T235150[ebp]
	mov	DWORD PTR [eax], 0

; 5022 : 	SAFE_DELETE_ARRAY(m_pi3DAudioScriptFootstepIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 412				; 0000019cH
	mov	DWORD PTR $T235156[ebp], ecx
	mov	edx, DWORD PTR $T235156[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235155[ebp], eax
	mov	ecx, DWORD PTR $T235155[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T235156[ebp]
	mov	DWORD PTR [edx], 0

; 5023 : 	SAFE_DELETE_ARRAY(m_pbTerrain);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 416				; 000001a0H
	mov	DWORD PTR $T235162[ebp], eax
	mov	ecx, DWORD PTR $T235162[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T235161[ebp], edx
	mov	eax, DWORD PTR $T235161[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T235162[ebp]
	mov	DWORD PTR [ecx], 0

; 5024 : }

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 420				; 000001a4H
	mov	DWORD PTR $T235167[ebp], edx
	mov	ecx, DWORD PTR $T235167[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 372				; 00000174H
	mov	DWORD PTR $T235172[ebp], eax
	mov	ecx, DWORD PTR $T235172[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	mov	DWORD PTR $T235177[ebp], ecx
	mov	ecx, DWORD PTR $T235177[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvFeatureInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvFeatureInfo@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvFeatureInfo@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvFeatureInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvFeatureInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvFeatureInfo@@UAE@XZ ENDP				; CvFeatureInfo::~CvFeatureInfo
PUBLIC	?getStartingLocationWeight@CvFeatureInfo@@QBEHXZ ; CvFeatureInfo::getStartingLocationWeight
; Function compile flags: /Odtp
;	COMDAT ?getStartingLocationWeight@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingLocationWeight@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getStartingLocationWeight, COMDAT
; _this$ = ecx

; 5027 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5028 : 	return m_iStartingLocationWeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 5029 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingLocationWeight@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getStartingLocationWeight
_TEXT	ENDS
PUBLIC	?getMovementCost@CvFeatureInfo@@QBEHXZ		; CvFeatureInfo::getMovementCost
; Function compile flags: /Odtp
;	COMDAT ?getMovementCost@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMovementCost@CvFeatureInfo@@QBEHXZ PROC		; CvFeatureInfo::getMovementCost, COMDAT
; _this$ = ecx

; 5032 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5033 : 	return m_iMovementCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 5034 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMovementCost@CvFeatureInfo@@QBEHXZ ENDP		; CvFeatureInfo::getMovementCost
_TEXT	ENDS
PUBLIC	?getSeeThroughChange@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getSeeThroughChange
; Function compile flags: /Odtp
;	COMDAT ?getSeeThroughChange@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSeeThroughChange@CvFeatureInfo@@QBEHXZ PROC		; CvFeatureInfo::getSeeThroughChange, COMDAT
; _this$ = ecx

; 5037 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5038 : 	return m_iSeeThroughChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 5039 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSeeThroughChange@CvFeatureInfo@@QBEHXZ ENDP		; CvFeatureInfo::getSeeThroughChange
_TEXT	ENDS
PUBLIC	?getAppearanceProbability@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getAppearanceProbability
; Function compile flags: /Odtp
;	COMDAT ?getAppearanceProbability@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAppearanceProbability@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getAppearanceProbability, COMDAT
; _this$ = ecx

; 5042 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5043 : 	return m_iAppearanceProbability;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 5044 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAppearanceProbability@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getAppearanceProbability
_TEXT	ENDS
PUBLIC	?getDisappearanceProbability@CvFeatureInfo@@QBEHXZ ; CvFeatureInfo::getDisappearanceProbability
; Function compile flags: /Odtp
;	COMDAT ?getDisappearanceProbability@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDisappearanceProbability@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getDisappearanceProbability, COMDAT
; _this$ = ecx

; 5047 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5048 : 	return m_iDisappearanceProbability;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 5049 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDisappearanceProbability@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getDisappearanceProbability
_TEXT	ENDS
PUBLIC	?getGrowthProbability@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getGrowthProbability
; Function compile flags: /Odtp
;	COMDAT ?getGrowthProbability@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGrowthProbability@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getGrowthProbability, COMDAT
; _this$ = ecx

; 5052 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5053 : 	return m_iGrowthProbability;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 5054 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGrowthProbability@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getGrowthProbability
_TEXT	ENDS
PUBLIC	?getGrowthTerrainType@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getGrowthTerrainType
; Function compile flags: /Odtp
;	COMDAT ?getGrowthTerrainType@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGrowthTerrainType@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getGrowthTerrainType, COMDAT
; _this$ = ecx

; 5057 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5058 : 	return m_iGrowthTerrainType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 5059 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGrowthTerrainType@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getGrowthTerrainType
_TEXT	ENDS
PUBLIC	?getDefenseModifier@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?getDefenseModifier@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefenseModifier@CvFeatureInfo@@QBEHXZ PROC		; CvFeatureInfo::getDefenseModifier, COMDAT
; _this$ = ecx

; 5062 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5063 : 	return m_iDefenseModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 5064 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefenseModifier@CvFeatureInfo@@QBEHXZ ENDP		; CvFeatureInfo::getDefenseModifier
_TEXT	ENDS
PUBLIC	?getInfluenceCost@CvFeatureInfo@@QBEHXZ		; CvFeatureInfo::getInfluenceCost
; Function compile flags: /Odtp
;	COMDAT ?getInfluenceCost@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInfluenceCost@CvFeatureInfo@@QBEHXZ PROC		; CvFeatureInfo::getInfluenceCost, COMDAT
; _this$ = ecx

; 5067 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5068 : 	return m_iInfluenceCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 5069 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInfluenceCost@CvFeatureInfo@@QBEHXZ ENDP		; CvFeatureInfo::getInfluenceCost
_TEXT	ENDS
PUBLIC	?getAdvancedStartRemoveCost@CvFeatureInfo@@QBEHXZ ; CvFeatureInfo::getAdvancedStartRemoveCost
; Function compile flags: /Odtp
;	COMDAT ?getAdvancedStartRemoveCost@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAdvancedStartRemoveCost@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getAdvancedStartRemoveCost, COMDAT
; _this$ = ecx

; 5072 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5073 : 	return m_iAdvancedStartRemoveCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 5074 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAdvancedStartRemoveCost@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getAdvancedStartRemoveCost
_TEXT	ENDS
PUBLIC	?getTurnDamage@CvFeatureInfo@@QBEHXZ		; CvFeatureInfo::getTurnDamage
; Function compile flags: /Odtp
;	COMDAT ?getTurnDamage@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTurnDamage@CvFeatureInfo@@QBEHXZ PROC		; CvFeatureInfo::getTurnDamage, COMDAT
; _this$ = ecx

; 5077 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5078 : 	return m_iTurnDamage;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 5079 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTurnDamage@CvFeatureInfo@@QBEHXZ ENDP		; CvFeatureInfo::getTurnDamage
_TEXT	ENDS
PUBLIC	?getFirstFinderGold@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getFirstFinderGold
; Function compile flags: /Odtp
;	COMDAT ?getFirstFinderGold@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFirstFinderGold@CvFeatureInfo@@QBEHXZ PROC		; CvFeatureInfo::getFirstFinderGold, COMDAT
; _this$ = ecx

; 5082 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5083 : 	return m_iFirstFinderGold;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 5084 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFirstFinderGold@CvFeatureInfo@@QBEHXZ ENDP		; CvFeatureInfo::getFirstFinderGold
_TEXT	ENDS
PUBLIC	?getInBorderHappiness@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getInBorderHappiness
; Function compile flags: /Odtp
;	COMDAT ?getInBorderHappiness@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInBorderHappiness@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getInBorderHappiness, COMDAT
; _this$ = ecx

; 5087 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5088 : 	return m_iInBorderHappiness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 5089 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInBorderHappiness@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getInBorderHappiness
_TEXT	ENDS
PUBLIC	?getOccurrenceFrequency@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getOccurrenceFrequency
; Function compile flags: /Odtp
;	COMDAT ?getOccurrenceFrequency@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOccurrenceFrequency@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getOccurrenceFrequency, COMDAT
; _this$ = ecx

; 5092 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5093 : 	return m_iOccurrenceFrequency;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+312]

; 5094 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getOccurrenceFrequency@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getOccurrenceFrequency
_TEXT	ENDS
PUBLIC	?getAdjacentUnitFreePromotion@CvFeatureInfo@@QBEHXZ ; CvFeatureInfo::getAdjacentUnitFreePromotion
; Function compile flags: /Odtp
;	COMDAT ?getAdjacentUnitFreePromotion@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAdjacentUnitFreePromotion@CvFeatureInfo@@QBEHXZ PROC ; CvFeatureInfo::getAdjacentUnitFreePromotion, COMDAT
; _this$ = ecx

; 5097 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5098 : 	return m_iAdjacentUnitFreePromotion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 5099 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAdjacentUnitFreePromotion@CvFeatureInfo@@QBEHXZ ENDP ; CvFeatureInfo::getAdjacentUnitFreePromotion
_TEXT	ENDS
PUBLIC	?isYieldNotAdditive@CvFeatureInfo@@QBE_NXZ	; CvFeatureInfo::isYieldNotAdditive
; Function compile flags: /Odtp
;	COMDAT ?isYieldNotAdditive@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isYieldNotAdditive@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::isYieldNotAdditive, COMDAT
; _this$ = ecx

; 5102 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5103 : 	return m_bYieldNotAdditive;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+320]

; 5104 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isYieldNotAdditive@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::isYieldNotAdditive
_TEXT	ENDS
PUBLIC	?isNoCoast@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isNoCoast
; Function compile flags: /Odtp
;	COMDAT ?isNoCoast@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoCoast@CvFeatureInfo@@QBE_NXZ PROC			; CvFeatureInfo::isNoCoast, COMDAT
; _this$ = ecx

; 5107 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5108 : 	return m_bNoCoast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+321]

; 5109 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoCoast@CvFeatureInfo@@QBE_NXZ ENDP			; CvFeatureInfo::isNoCoast
_TEXT	ENDS
PUBLIC	?isNoRiver@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isNoRiver
; Function compile flags: /Odtp
;	COMDAT ?isNoRiver@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoRiver@CvFeatureInfo@@QBE_NXZ PROC			; CvFeatureInfo::isNoRiver, COMDAT
; _this$ = ecx

; 5112 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5113 : 	return m_bNoRiver;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+322]

; 5114 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoRiver@CvFeatureInfo@@QBE_NXZ ENDP			; CvFeatureInfo::isNoRiver
_TEXT	ENDS
PUBLIC	?isNoAdjacent@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isNoAdjacent
; Function compile flags: /Odtp
;	COMDAT ?isNoAdjacent@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoAdjacent@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::isNoAdjacent, COMDAT
; _this$ = ecx

; 5117 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5118 : 	return m_bNoAdjacent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+323]

; 5119 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoAdjacent@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::isNoAdjacent
_TEXT	ENDS
PUBLIC	?isRequiresFlatlands@CvFeatureInfo@@QBE_NXZ	; CvFeatureInfo::isRequiresFlatlands
; Function compile flags: /Odtp
;	COMDAT ?isRequiresFlatlands@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isRequiresFlatlands@CvFeatureInfo@@QBE_NXZ PROC	; CvFeatureInfo::isRequiresFlatlands, COMDAT
; _this$ = ecx

; 5122 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5123 : 	return m_bRequiresFlatlands;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+324]

; 5124 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isRequiresFlatlands@CvFeatureInfo@@QBE_NXZ ENDP	; CvFeatureInfo::isRequiresFlatlands
_TEXT	ENDS
PUBLIC	?isRequiresRiver@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isRequiresRiver
; Function compile flags: /Odtp
;	COMDAT ?isRequiresRiver@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isRequiresRiver@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::isRequiresRiver, COMDAT
; _this$ = ecx

; 5127 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5128 : 	return m_bRequiresRiver;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+325]

; 5129 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isRequiresRiver@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::isRequiresRiver
_TEXT	ENDS
PUBLIC	?isAddsFreshWater@CvFeatureInfo@@QBE_NXZ	; CvFeatureInfo::isAddsFreshWater
; Function compile flags: /Odtp
;	COMDAT ?isAddsFreshWater@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isAddsFreshWater@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::isAddsFreshWater, COMDAT
; _this$ = ecx

; 5132 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5133 : 	return m_bAddsFreshWater;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+326]

; 5134 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isAddsFreshWater@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::isAddsFreshWater
_TEXT	ENDS
PUBLIC	?isImpassable@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isImpassable
; Function compile flags: /Odtp
;	COMDAT ?isImpassable@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isImpassable@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::isImpassable, COMDAT
; _this$ = ecx

; 5137 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5138 : 	return m_bImpassable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+327]

; 5139 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isImpassable@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::isImpassable
_TEXT	ENDS
PUBLIC	?isNoCity@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isNoCity
; Function compile flags: /Odtp
;	COMDAT ?isNoCity@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoCity@CvFeatureInfo@@QBE_NXZ PROC			; CvFeatureInfo::isNoCity, COMDAT
; _this$ = ecx

; 5142 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5143 : 	return m_bNoCity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+328]

; 5144 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoCity@CvFeatureInfo@@QBE_NXZ ENDP			; CvFeatureInfo::isNoCity
_TEXT	ENDS
PUBLIC	?isNoImprovement@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isNoImprovement
; Function compile flags: /Odtp
;	COMDAT ?isNoImprovement@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoImprovement@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::isNoImprovement, COMDAT
; _this$ = ecx

; 5147 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5148 : 	return m_bNoImprovement;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+329]

; 5149 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoImprovement@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::isNoImprovement
_TEXT	ENDS
PUBLIC	?isVisibleAlways@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isVisibleAlways
; Function compile flags: /Odtp
;	COMDAT ?isVisibleAlways@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isVisibleAlways@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::isVisibleAlways, COMDAT
; _this$ = ecx

; 5152 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5153 : 	return m_bVisibleAlways;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+330]

; 5154 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isVisibleAlways@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::isVisibleAlways
_TEXT	ENDS
PUBLIC	?isNukeImmune@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::isNukeImmune
; Function compile flags: /Odtp
;	COMDAT ?isNukeImmune@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNukeImmune@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::isNukeImmune, COMDAT
; _this$ = ecx

; 5157 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5158 : 	return m_bNukeImmune;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+331]

; 5159 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNukeImmune@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::isNukeImmune
_TEXT	ENDS
PUBLIC	?IsRough@CvFeatureInfo@@QBE_NXZ			; CvFeatureInfo::IsRough
; Function compile flags: /Odtp
;	COMDAT ?IsRough@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRough@CvFeatureInfo@@QBE_NXZ PROC			; CvFeatureInfo::IsRough, COMDAT
; _this$ = ecx

; 5162 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5163 : 	return m_bRough;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+332]

; 5164 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsRough@CvFeatureInfo@@QBE_NXZ ENDP			; CvFeatureInfo::IsRough
_TEXT	ENDS
PUBLIC	?IsNaturalWonder@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::IsNaturalWonder
; Function compile flags: /Odtp
;	COMDAT ?IsNaturalWonder@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsNaturalWonder@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::IsNaturalWonder, COMDAT
; _this$ = ecx

; 5167 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5168 : 	return m_bNaturalWonder;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+333]

; 5169 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsNaturalWonder@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::IsNaturalWonder
_TEXT	ENDS
PUBLIC	?getArtDefineTag@CvFeatureInfo@@QBEPBDXZ	; CvFeatureInfo::getArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?getArtDefineTag@CvFeatureInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtDefineTag@CvFeatureInfo@@QBEPBDXZ PROC		; CvFeatureInfo::getArtDefineTag, COMDAT
; _this$ = ecx

; 5172 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5173 : 	return m_strArtDefineTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 420				; 000001a4H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 5174 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtDefineTag@CvFeatureInfo@@QBEPBDXZ ENDP		; CvFeatureInfo::getArtDefineTag
_TEXT	ENDS
PUBLIC	?setArtDefineTag@CvFeatureInfo@@QAEXPBD@Z	; CvFeatureInfo::setArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?setArtDefineTag@CvFeatureInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T235309 = -4						; size = 4
_szTag$ = 8						; size = 4
?setArtDefineTag@CvFeatureInfo@@QAEXPBD@Z PROC		; CvFeatureInfo::setArtDefineTag, COMDAT
; _this$ = ecx

; 5177 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5178 : 	m_strArtDefineTag = szTag;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 420				; 000001a4H
	mov	DWORD PTR $T235309[ebp], eax
	cmp	DWORD PTR _szTag$[ebp], 0
	je	SHORT $LN4@setArtDefi@4
	mov	ecx, DWORD PTR _szTag$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T235309[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setArtDefi@4
$LN4@setArtDefi@4:
	mov	ecx, DWORD PTR $T235309[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setArtDefi@4:

; 5179 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setArtDefineTag@CvFeatureInfo@@QAEXPBD@Z ENDP		; CvFeatureInfo::setArtDefineTag
_TEXT	ENDS
PUBLIC	?getWorldSoundscapeScriptId@CvFeatureInfo@@QBEHXZ ; CvFeatureInfo::getWorldSoundscapeScriptId
; Function compile flags: /Odtp
;	COMDAT ?getWorldSoundscapeScriptId@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldSoundscapeScriptId@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getWorldSoundscapeScriptId, COMDAT
; _this$ = ecx

; 5182 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5183 : 	return m_iWorldSoundscapeScriptId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+336]

; 5184 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldSoundscapeScriptId@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getWorldSoundscapeScriptId
_TEXT	ENDS
PUBLIC	?getEffectType@CvFeatureInfo@@QBEPBDXZ		; CvFeatureInfo::getEffectType
; Function compile flags: /Odtp
;	COMDAT ?getEffectType@CvFeatureInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEffectType@CvFeatureInfo@@QBEPBDXZ PROC		; CvFeatureInfo::getEffectType, COMDAT
; _this$ = ecx

; 5187 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5188 : 	return m_strEffectType;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 5189 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEffectType@CvFeatureInfo@@QBEPBDXZ ENDP		; CvFeatureInfo::getEffectType
_TEXT	ENDS
PUBLIC	?getEffectProbability@CvFeatureInfo@@QBEHXZ	; CvFeatureInfo::getEffectProbability
; Function compile flags: /Odtp
;	COMDAT ?getEffectProbability@CvFeatureInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEffectProbability@CvFeatureInfo@@QBEHXZ PROC	; CvFeatureInfo::getEffectProbability, COMDAT
; _this$ = ecx

; 5192 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5193 : 	return m_iEffectProbability;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+368]

; 5194 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEffectProbability@CvFeatureInfo@@QBEHXZ ENDP	; CvFeatureInfo::getEffectProbability
_TEXT	ENDS
PUBLIC	?getYieldChange@CvFeatureInfo@@QBEHH@Z		; CvFeatureInfo::getYieldChange
; Function compile flags: /Odtp
;	COMDAT ?getYieldChange@CvFeatureInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getYieldChange@CvFeatureInfo@@QBEHH@Z PROC		; CvFeatureInfo::getYieldChange, COMDAT
; _this$ = ecx

; 5197 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5198 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 5199 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5200 : 	return m_piYieldChange ? m_piYieldChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+400], 0
	je	SHORT $LN3@getYieldCh@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+400]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getYieldCh@4
$LN3@getYieldCh@4:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getYieldCh@4:
	mov	eax, DWORD PTR tv69[ebp]

; 5201 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getYieldChange@CvFeatureInfo@@QBEHH@Z ENDP		; CvFeatureInfo::getYieldChange
_TEXT	ENDS
PUBLIC	?getRiverYieldChange@CvFeatureInfo@@QBEHH@Z	; CvFeatureInfo::getRiverYieldChange
; Function compile flags: /Odtp
;	COMDAT ?getRiverYieldChange@CvFeatureInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getRiverYieldChange@CvFeatureInfo@@QBEHH@Z PROC	; CvFeatureInfo::getRiverYieldChange, COMDAT
; _this$ = ecx

; 5204 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5205 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 5206 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5207 : 	return m_piRiverYieldChange ? m_piRiverYieldChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+404], 0
	je	SHORT $LN3@getRiverYi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+404]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getRiverYi
$LN3@getRiverYi:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getRiverYi:
	mov	eax, DWORD PTR tv69[ebp]

; 5208 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getRiverYieldChange@CvFeatureInfo@@QBEHH@Z ENDP	; CvFeatureInfo::getRiverYieldChange
_TEXT	ENDS
PUBLIC	?getHillsYieldChange@CvFeatureInfo@@QBEHH@Z	; CvFeatureInfo::getHillsYieldChange
; Function compile flags: /Odtp
;	COMDAT ?getHillsYieldChange@CvFeatureInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getHillsYieldChange@CvFeatureInfo@@QBEHH@Z PROC	; CvFeatureInfo::getHillsYieldChange, COMDAT
; _this$ = ecx

; 5211 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5212 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 5213 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5214 : 	return m_piHillsYieldChange ? m_piHillsYieldChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+408], 0
	je	SHORT $LN3@getHillsYi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getHillsYi
$LN3@getHillsYi:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getHillsYi:
	mov	eax, DWORD PTR tv69[ebp]

; 5215 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getHillsYieldChange@CvFeatureInfo@@QBEHH@Z ENDP	; CvFeatureInfo::getHillsYieldChange
_TEXT	ENDS
PUBLIC	?get3DAudioScriptFootstepIndex@CvFeatureInfo@@QBEHH@Z ; CvFeatureInfo::get3DAudioScriptFootstepIndex
; Function compile flags: /Odtp
;	COMDAT ?get3DAudioScriptFootstepIndex@CvFeatureInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?get3DAudioScriptFootstepIndex@CvFeatureInfo@@QBEHH@Z PROC ; CvFeatureInfo::get3DAudioScriptFootstepIndex, COMDAT
; _this$ = ecx

; 5218 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5219 : 	//	CvAssertMsg(i < ?, "Index out of bounds");
; 5220 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5221 : 	return m_pi3DAudioScriptFootstepIndex ? m_pi3DAudioScriptFootstepIndex[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+412], 0
	je	SHORT $LN3@get3DAudio
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+412]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@get3DAudio
$LN3@get3DAudio:
	mov	DWORD PTR tv69[ebp], -1
$LN4@get3DAudio:
	mov	eax, DWORD PTR tv69[ebp]

; 5222 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?get3DAudioScriptFootstepIndex@CvFeatureInfo@@QBEHH@Z ENDP ; CvFeatureInfo::get3DAudioScriptFootstepIndex
_TEXT	ENDS
PUBLIC	?isTerrain@CvFeatureInfo@@QBE_NH@Z		; CvFeatureInfo::isTerrain
; Function compile flags: /Odtp
;	COMDAT ?isTerrain@CvFeatureInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isTerrain@CvFeatureInfo@@QBE_NH@Z PROC			; CvFeatureInfo::isTerrain, COMDAT
; _this$ = ecx

; 5225 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5226 : 	CvAssertMsg(i < GC.getNumTerrainInfos(), "Index out of bounds");
; 5227 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5228 : 	return m_pbTerrain ? m_pbTerrain[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+416], 0
	je	SHORT $LN3@isTerrain@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+416]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isTerrain@2
$LN3@isTerrain@2:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isTerrain@2:
	mov	al, BYTE PTR tv68[ebp]

; 5229 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isTerrain@CvFeatureInfo@@QBE_NH@Z ENDP			; CvFeatureInfo::isTerrain
_TEXT	ENDS
PUBLIC	?IsClearable@CvFeatureInfo@@QBE_NXZ		; CvFeatureInfo::IsClearable
; Function compile flags: /Odtp
;	COMDAT ?IsClearable@CvFeatureInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsClearable@CvFeatureInfo@@QBE_NXZ PROC		; CvFeatureInfo::IsClearable, COMDAT
; _this$ = ecx

; 5233 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5234 : 	return m_bClearable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+334]

; 5235 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsClearable@CvFeatureInfo@@QBE_NXZ ENDP		; CvFeatureInfo::IsClearable
_TEXT	ENDS
PUBLIC	?SetClearable@CvFeatureInfo@@QAEX_N@Z		; CvFeatureInfo::SetClearable
; Function compile flags: /Odtp
;	COMDAT ?SetClearable@CvFeatureInfo@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bValue$ = 8						; size = 1
?SetClearable@CvFeatureInfo@@QAEX_N@Z PROC		; CvFeatureInfo::SetClearable, COMDAT
; _this$ = ecx

; 5238 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5239 : 	m_bClearable = bValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bValue$[ebp]
	mov	BYTE PTR [eax+334], cl

; 5240 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetClearable@CvFeatureInfo@@QAEX_N@Z ENDP		; CvFeatureInfo::SetClearable
_TEXT	ENDS
PUBLIC	?getEffectTypeTag@CvFeatureInfo@@QBEPBDXZ	; CvFeatureInfo::getEffectTypeTag
; Function compile flags: /Odtp
;	COMDAT ?getEffectTypeTag@CvFeatureInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEffectTypeTag@CvFeatureInfo@@QBEPBDXZ PROC		; CvFeatureInfo::getEffectTypeTag, COMDAT
; _this$ = ecx

; 5244 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5245 : 	return m_strEffectTypeTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 372				; 00000174H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 5246 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEffectTypeTag@CvFeatureInfo@@QBEPBDXZ ENDP		; CvFeatureInfo::getEffectTypeTag
_TEXT	ENDS
PUBLIC	??_C@_0BI@NKMIJBCO@Feature_TerrainBooleans?$AA@	; `string'
PUBLIC	??_C@_0BK@KCPFMDJN@Feature_HillsYieldChanges?$AA@ ; `string'
PUBLIC	??_C@_0BK@GHDKCIKB@Feature_RiverYieldChanges?$AA@ ; `string'
PUBLIC	??_C@_0BF@MINAGANK@Feature_YieldChanges?$AA@	; `string'
PUBLIC	?Remark@@YA_NHPBDZZ				; Remark
PUBLIC	??_C@_0EA@OMPGKABL@Warning?3?5Missing?5soundscape?5defi@ ; `string'
PUBLIC	??_C@_0BL@EOODAKIM@WorldSoundscapeAudioScript?$AA@ ; `string'
PUBLIC	??_C@_0O@OBJBJNKF@EffectTypeTag?$AA@		; `string'
PUBLIC	??_C@_0L@OFNOLBHI@EffectType?$AA@		; `string'
PUBLIC	??_C@_0O@DPFJMHGP@NaturalWonder?$AA@		; `string'
PUBLIC	??_C@_05KIEEHLJI@Rough?$AA@			; `string'
PUBLIC	??_C@_0L@EEGCDFDE@NukeImmune?$AA@		; `string'
PUBLIC	??_C@_0O@PNPIEBIB@VisibleAlways?$AA@		; `string'
PUBLIC	??_C@_0O@CJHJDEEN@NoImprovement?$AA@		; `string'
PUBLIC	??_C@_06HLHNALAJ@NoCity?$AA@			; `string'
PUBLIC	??_C@_0L@MNIKPMED@Impassable?$AA@		; `string'
PUBLIC	??_C@_0P@BBGBCKKG@AddsFreshWater?$AA@		; `string'
PUBLIC	??_C@_0O@LFGOCCNA@RequiresRiver?$AA@		; `string'
PUBLIC	??_C@_0BC@IDFGBFEH@RequiresFlatlands?$AA@	; `string'
PUBLIC	??_C@_0L@JKPMAFCC@NoAdjacent?$AA@		; `string'
PUBLIC	??_C@_07BDBBJNHK@NoRiver?$AA@			; `string'
PUBLIC	??_C@_07NHOEKOIG@NoCoast?$AA@			; `string'
PUBLIC	??_C@_0BB@MKEMHJPO@YieldNotAdditive?$AA@	; `string'
PUBLIC	??_C@_0BC@NDOMKGLE@EffectProbability?$AA@	; `string'
PUBLIC	??_C@_0BC@GLFDENAN@GrowthTerrainType?$AA@	; `string'
PUBLIC	??_C@_0BK@KJJNABCM@AdjacentUnitFreePromotion?$AA@ ; `string'
PUBLIC	??_C@_0BE@GCLFGLDP@OccurrenceFrequency?$AA@	; `string'
PUBLIC	??_C@_0BC@FFNOGKPB@InBorderHappiness?$AA@	; `string'
PUBLIC	??_C@_0BA@PEDFJMBD@FirstFinderGold?$AA@		; `string'
PUBLIC	??_C@_06LGIDJOCG@Growth?$AA@			; `string'
PUBLIC	??_C@_0BJ@HJOJFCBE@DisappearanceProbability?$AA@ ; `string'
PUBLIC	??_C@_0BG@LJKFJDF@AppearanceProbability?$AA@	; `string'
PUBLIC	??_C@_0L@JDINBLPL@TurnDamage?$AA@		; `string'
PUBLIC	??_C@_0BI@OAGFFPCF@AdvancedStartRemoveCost?$AA@	; `string'
PUBLIC	??_C@_0O@OIHPMKGI@InfluenceCost?$AA@		; `string'
PUBLIC	??_C@_07PEDPFCGC@Defense?$AA@			; `string'
PUBLIC	??_C@_0L@NMPOCBKF@SeeThrough?$AA@		; `string'
PUBLIC	??_C@_0BH@DIFJENAF@StartingLocationWeight?$AA@	; `string'
;	COMDAT ??_C@_0BI@NKMIJBCO@Feature_TerrainBooleans?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0BI@NKMIJBCO@Feature_TerrainBooleans?$AA@ DB 'Feature_TerrainBoolea'
	DB	'ns', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KCPFMDJN@Feature_HillsYieldChanges?$AA@
CONST	SEGMENT
??_C@_0BK@KCPFMDJN@Feature_HillsYieldChanges?$AA@ DB 'Feature_HillsYieldC'
	DB	'hanges', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GHDKCIKB@Feature_RiverYieldChanges?$AA@
CONST	SEGMENT
??_C@_0BK@GHDKCIKB@Feature_RiverYieldChanges?$AA@ DB 'Feature_RiverYieldC'
	DB	'hanges', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MINAGANK@Feature_YieldChanges?$AA@
CONST	SEGMENT
??_C@_0BF@MINAGANK@Feature_YieldChanges?$AA@ DB 'Feature_YieldChanges', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@OMPGKABL@Warning?3?5Missing?5soundscape?5defi@
CONST	SEGMENT
??_C@_0EA@OMPGKABL@Warning?3?5Missing?5soundscape?5defi@ DB 'Warning: Mis'
	DB	'sing soundscape definition in XML for feature: ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EOODAKIM@WorldSoundscapeAudioScript?$AA@
CONST	SEGMENT
??_C@_0BL@EOODAKIM@WorldSoundscapeAudioScript?$AA@ DB 'WorldSoundscapeAud'
	DB	'ioScript', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OBJBJNKF@EffectTypeTag?$AA@
CONST	SEGMENT
??_C@_0O@OBJBJNKF@EffectTypeTag?$AA@ DB 'EffectTypeTag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OFNOLBHI@EffectType?$AA@
CONST	SEGMENT
??_C@_0L@OFNOLBHI@EffectType?$AA@ DB 'EffectType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DPFJMHGP@NaturalWonder?$AA@
CONST	SEGMENT
??_C@_0O@DPFJMHGP@NaturalWonder?$AA@ DB 'NaturalWonder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KIEEHLJI@Rough?$AA@
CONST	SEGMENT
??_C@_05KIEEHLJI@Rough?$AA@ DB 'Rough', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEGCDFDE@NukeImmune?$AA@
CONST	SEGMENT
??_C@_0L@EEGCDFDE@NukeImmune?$AA@ DB 'NukeImmune', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PNPIEBIB@VisibleAlways?$AA@
CONST	SEGMENT
??_C@_0O@PNPIEBIB@VisibleAlways?$AA@ DB 'VisibleAlways', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CJHJDEEN@NoImprovement?$AA@
CONST	SEGMENT
??_C@_0O@CJHJDEEN@NoImprovement?$AA@ DB 'NoImprovement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HLHNALAJ@NoCity?$AA@
CONST	SEGMENT
??_C@_06HLHNALAJ@NoCity?$AA@ DB 'NoCity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MNIKPMED@Impassable?$AA@
CONST	SEGMENT
??_C@_0L@MNIKPMED@Impassable?$AA@ DB 'Impassable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BBGBCKKG@AddsFreshWater?$AA@
CONST	SEGMENT
??_C@_0P@BBGBCKKG@AddsFreshWater?$AA@ DB 'AddsFreshWater', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LFGOCCNA@RequiresRiver?$AA@
CONST	SEGMENT
??_C@_0O@LFGOCCNA@RequiresRiver?$AA@ DB 'RequiresRiver', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IDFGBFEH@RequiresFlatlands?$AA@
CONST	SEGMENT
??_C@_0BC@IDFGBFEH@RequiresFlatlands?$AA@ DB 'RequiresFlatlands', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JKPMAFCC@NoAdjacent?$AA@
CONST	SEGMENT
??_C@_0L@JKPMAFCC@NoAdjacent?$AA@ DB 'NoAdjacent', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDBBJNHK@NoRiver?$AA@
CONST	SEGMENT
??_C@_07BDBBJNHK@NoRiver?$AA@ DB 'NoRiver', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHOEKOIG@NoCoast?$AA@
CONST	SEGMENT
??_C@_07NHOEKOIG@NoCoast?$AA@ DB 'NoCoast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MKEMHJPO@YieldNotAdditive?$AA@
CONST	SEGMENT
??_C@_0BB@MKEMHJPO@YieldNotAdditive?$AA@ DB 'YieldNotAdditive', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NDOMKGLE@EffectProbability?$AA@
CONST	SEGMENT
??_C@_0BC@NDOMKGLE@EffectProbability?$AA@ DB 'EffectProbability', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GLFDENAN@GrowthTerrainType?$AA@
CONST	SEGMENT
??_C@_0BC@GLFDENAN@GrowthTerrainType?$AA@ DB 'GrowthTerrainType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KJJNABCM@AdjacentUnitFreePromotion?$AA@
CONST	SEGMENT
??_C@_0BK@KJJNABCM@AdjacentUnitFreePromotion?$AA@ DB 'AdjacentUnitFreePro'
	DB	'motion', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GCLFGLDP@OccurrenceFrequency?$AA@
CONST	SEGMENT
??_C@_0BE@GCLFGLDP@OccurrenceFrequency?$AA@ DB 'OccurrenceFrequency', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FFNOGKPB@InBorderHappiness?$AA@
CONST	SEGMENT
??_C@_0BC@FFNOGKPB@InBorderHappiness?$AA@ DB 'InBorderHappiness', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PEDFJMBD@FirstFinderGold?$AA@
CONST	SEGMENT
??_C@_0BA@PEDFJMBD@FirstFinderGold?$AA@ DB 'FirstFinderGold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGIDJOCG@Growth?$AA@
CONST	SEGMENT
??_C@_06LGIDJOCG@Growth?$AA@ DB 'Growth', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HJOJFCBE@DisappearanceProbability?$AA@
CONST	SEGMENT
??_C@_0BJ@HJOJFCBE@DisappearanceProbability?$AA@ DB 'DisappearanceProbabi'
	DB	'lity', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LJKFJDF@AppearanceProbability?$AA@
CONST	SEGMENT
??_C@_0BG@LJKFJDF@AppearanceProbability?$AA@ DB 'AppearanceProbability', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDINBLPL@TurnDamage?$AA@
CONST	SEGMENT
??_C@_0L@JDINBLPL@TurnDamage?$AA@ DB 'TurnDamage', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OAGFFPCF@AdvancedStartRemoveCost?$AA@
CONST	SEGMENT
??_C@_0BI@OAGFFPCF@AdvancedStartRemoveCost?$AA@ DB 'AdvancedStartRemoveCo'
	DB	'st', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OIHPMKGI@InfluenceCost?$AA@
CONST	SEGMENT
??_C@_0O@OIHPMKGI@InfluenceCost?$AA@ DB 'InfluenceCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PEDPFCGC@Defense?$AA@
CONST	SEGMENT
??_C@_07PEDPFCGC@Defense?$AA@ DB 'Defense', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMPOCBKF@SeeThrough?$AA@
CONST	SEGMENT
??_C@_0L@NMPOCBKF@SeeThrough?$AA@ DB 'SeeThrough', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DIFJENAF@StartingLocationWeight?$AA@
CONST	SEGMENT
??_C@_0BH@DIFJENAF@StartingLocationWeight?$AA@ DB 'StartingLocationWeight'
	DB	00H						; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvFeatureInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv296 = -48						; size = 4
_this$ = -44						; size = 4
$T235367 = -40						; size = 4
$T235363 = -36						; size = 4
$T235362 = -32						; size = 4
$T235356 = -28						; size = 4
$T235355 = -24						; size = 4
_szFeatureType$ = -20					; size = 4
_szArtDefineTag$ = -16					; size = 4
_szTerrainType$ = -12					; size = 4
_szWorldsoundscapeAudioScript$ = -8			; size = 4
_szTextVal$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvFeatureInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvFeatureInfo::CacheResults, COMDAT
; _this$ = ecx

; 5250 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 5251 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CacheResul@24

; 5252 : 		return false;

	xor	al, al
	jmp	$LN5@CacheResul@24
$LN4@CacheResul@24:

; 5253 : 
; 5254 : 	const char* szArtDefineTag = kResults.GetText("ArtDefineTag");

	push	OFFSET ??_C@_0N@NLPPFOOH@ArtDefineTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szArtDefineTag$[ebp], eax

; 5255 : 	setArtDefineTag(szArtDefineTag);

	mov	eax, DWORD PTR _szArtDefineTag$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setArtDefineTag@CvFeatureInfo@@QAEXPBD@Z ; CvFeatureInfo::setArtDefineTag

; 5256 : 
; 5257 : 	// Basic properties
; 5258 : 	m_iStartingLocationWeight = kResults.GetInt("StartingLocationWeight");

	push	OFFSET ??_C@_0BH@DIFJENAF@StartingLocationWeight?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 5259 : 	m_iMovementCost = kResults.GetInt("Movement");

	push	OFFSET ??_C@_08IMCBCIPL@Movement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 5260 : 	m_iSeeThroughChange = kResults.GetInt("SeeThrough");

	push	OFFSET ??_C@_0L@NMPOCBKF@SeeThrough?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 5261 : 	m_iDefenseModifier = kResults.GetInt("Defense");

	push	OFFSET ??_C@_07PEDPFCGC@Defense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], eax

; 5262 : 	m_iInfluenceCost = kResults.GetInt("InfluenceCost");

	push	OFFSET ??_C@_0O@OIHPMKGI@InfluenceCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], eax

; 5263 : 	m_iAdvancedStartRemoveCost = kResults.GetInt("AdvancedStartRemoveCost");

	push	OFFSET ??_C@_0BI@OAGFFPCF@AdvancedStartRemoveCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], eax

; 5264 : 	m_iTurnDamage = kResults.GetInt("TurnDamage");

	push	OFFSET ??_C@_0L@JDINBLPL@TurnDamage?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax

; 5265 : 	m_iAppearanceProbability = kResults.GetInt("AppearanceProbability");

	push	OFFSET ??_C@_0BG@LJKFJDF@AppearanceProbability?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 5266 : 	m_iDisappearanceProbability = kResults.GetInt("DisappearanceProbability");

	push	OFFSET ??_C@_0BJ@HJOJFCBE@DisappearanceProbability?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 5267 : 	m_iGrowthProbability = kResults.GetInt("Growth");

	push	OFFSET ??_C@_06LGIDJOCG@Growth?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 5268 : 	m_iFirstFinderGold = kResults.GetInt("FirstFinderGold");

	push	OFFSET ??_C@_0BA@PEDFJMBD@FirstFinderGold?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+304], eax

; 5269 : 	m_iInBorderHappiness = kResults.GetInt("InBorderHappiness");

	push	OFFSET ??_C@_0BC@FFNOGKPB@InBorderHappiness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+308], eax

; 5270 : 	m_iOccurrenceFrequency = kResults.GetInt("OccurrenceFrequency");

	push	OFFSET ??_C@_0BE@GCLFGLDP@OccurrenceFrequency?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], eax

; 5271 : 
; 5272 : 	const char* szTextVal;
; 5273 : 	szTextVal = kResults.GetText("AdjacentUnitFreePromotion");

	push	OFFSET ??_C@_0BK@KJJNABCM@AdjacentUnitFreePromotion?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 5274 : 	m_iAdjacentUnitFreePromotion = GC.getInfoTypeForString(szTextVal, true);

	push	1
	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 5275 : 
; 5276 : 	const char* szTerrainType = kResults.GetText("GrowthTerrainType");

	push	OFFSET ??_C@_0BC@GLFDENAN@GrowthTerrainType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTerrainType$[ebp], eax

; 5277 : 	if(szTerrainType != NULL)

	cmp	DWORD PTR _szTerrainType$[ebp], 0
	je	SHORT $LN3@CacheResul@24

; 5278 : 	{
; 5279 : 		m_iGrowthTerrainType = GC.getInfoTypeForString(szTerrainType, true);

	push	1
	mov	edx, DWORD PTR _szTerrainType$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax
$LN3@CacheResul@24:

; 5280 : 	}
; 5281 : 
; 5282 : 	m_iEffectProbability = kResults.GetInt("EffectProbability");

	push	OFFSET ??_C@_0BC@NDOMKGLE@EffectProbability?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+368], eax

; 5283 : 	m_bYieldNotAdditive = kResults.GetBool("YieldNotAdditive");

	push	OFFSET ??_C@_0BB@MKEMHJPO@YieldNotAdditive?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+320], al

; 5284 : 	m_bNoCoast = kResults.GetBool("NoCoast");

	push	OFFSET ??_C@_07NHOEKOIG@NoCoast?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+321], al

; 5285 : 	m_bNoRiver = kResults.GetBool("NoRiver");

	push	OFFSET ??_C@_07BDBBJNHK@NoRiver?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+322], al

; 5286 : 	m_bNoAdjacent = kResults.GetBool("NoAdjacent");

	push	OFFSET ??_C@_0L@JKPMAFCC@NoAdjacent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+323], al

; 5287 : 	m_bRequiresFlatlands = kResults.GetBool("RequiresFlatlands");

	push	OFFSET ??_C@_0BC@IDFGBFEH@RequiresFlatlands?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+324], al

; 5288 : 	m_bRequiresRiver = kResults.GetBool("RequiresRiver");

	push	OFFSET ??_C@_0O@LFGOCCNA@RequiresRiver?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+325], al

; 5289 : 	m_bAddsFreshWater = kResults.GetBool("AddsFreshWater");

	push	OFFSET ??_C@_0P@BBGBCKKG@AddsFreshWater?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+326], al

; 5290 : 	m_bImpassable = kResults.GetBool("Impassable");

	push	OFFSET ??_C@_0L@MNIKPMED@Impassable?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+327], al

; 5291 : 	m_bNoCity = kResults.GetBool("NoCity");

	push	OFFSET ??_C@_06HLHNALAJ@NoCity?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+328], al

; 5292 : 	m_bNoImprovement = kResults.GetBool("NoImprovement");

	push	OFFSET ??_C@_0O@CJHJDEEN@NoImprovement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+329], al

; 5293 : 	m_bVisibleAlways = kResults.GetBool("VisibleAlways");

	push	OFFSET ??_C@_0O@PNPIEBIB@VisibleAlways?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+330], al

; 5294 : 	m_bNukeImmune = kResults.GetBool("NukeImmune");

	push	OFFSET ??_C@_0L@EEGCDFDE@NukeImmune?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+331], al

; 5295 : 	m_bRough = kResults.GetBool("Rough");

	push	OFFSET ??_C@_05KIEEHLJI@Rough?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+332], al

; 5296 : 	m_bNaturalWonder = kResults.GetBool("NaturalWonder");

	push	OFFSET ??_C@_0O@DPFJMHGP@NaturalWonder?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+333], al

; 5297 : 
; 5298 : 	m_strEffectType = kResults.GetText("EffectType");

	push	OFFSET ??_C@_0L@OFNOLBHI@EffectType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T235356[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 340				; 00000154H
	mov	DWORD PTR $T235355[ebp], eax
	cmp	DWORD PTR $T235356[ebp], 0
	je	SHORT $LN8@CacheResul@24
	mov	ecx, DWORD PTR $T235356[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T235355[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN9@CacheResul@24
$LN8@CacheResul@24:
	mov	ecx, DWORD PTR $T235355[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN9@CacheResul@24:

; 5299 : 	m_strEffectTypeTag = kResults.GetText("EffectTypeTag");

	push	OFFSET ??_C@_0O@OBJBJNKF@EffectTypeTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T235363[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 372				; 00000174H
	mov	DWORD PTR $T235362[ebp], edx
	cmp	DWORD PTR $T235363[ebp], 0
	je	SHORT $LN12@CacheResul@24
	mov	eax, DWORD PTR $T235363[ebp]
	push	eax
	mov	ecx, DWORD PTR $T235362[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN13@CacheResul@24
$LN12@CacheResul@24:
	mov	ecx, DWORD PTR $T235362[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN13@CacheResul@24:

; 5300 : 
; 5301 : 	const char* szWorldsoundscapeAudioScript = kResults.GetText("WorldSoundscapeAudioScript");

	push	OFFSET ??_C@_0BL@EOODAKIM@WorldSoundscapeAudioScript?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szWorldsoundscapeAudioScript$[ebp], eax

; 5302 : 	if(szWorldsoundscapeAudioScript != NULL)

	cmp	DWORD PTR _szWorldsoundscapeAudioScript$[ebp], 0
	je	SHORT $LN2@CacheResul@24

; 5303 : 	{
; 5304 : 		m_iWorldSoundscapeScriptId = gDLL->GetAudioTagIndex(szWorldsoundscapeAudioScript, AUDIOTAG_SOUNDSCAPE);

	mov	ecx, DWORD PTR $T235367[ebp]
	mov	DWORD PTR tv296[ebp], ecx
	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv296[ebp], edx
	push	5
	mov	eax, DWORD PTR _szWorldsoundscapeAudioScript$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv296[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv296[ebp]
	mov	eax, DWORD PTR [edx+508]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+336], eax

; 5305 : 	}
; 5306 : 	else

	jmp	SHORT $LN19@CacheResul@24
$LN2@CacheResul@24:

; 5307 : 	{
; 5308 : 		m_iWorldSoundscapeScriptId = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], -1

; 5309 : 		Remark(1, "Warning: Missing soundscape definition in XML for feature: '%s'", GetType());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET ??_C@_0EA@OMPGKABL@Warning?3?5Missing?5soundscape?5defi@
	push	1
	call	?Remark@@YA_NHPBDZZ			; Remark
	add	esp, 12					; 0000000cH

; 5310 : 	}
; 5311 : 
; 5312 : 	// Array properties
; 5313 : 	const char* szFeatureType = GetType();

$LN19@CacheResul@24:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szFeatureType$[ebp], eax

; 5314 : 	kUtility.SetYields(m_piYieldChange, "Feature_YieldChanges", "FeatureType", szFeatureType);

	mov	eax, DWORD PTR _szFeatureType$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@LJDMFNNN@FeatureType?$AA@
	push	OFFSET ??_C@_0BF@MINAGANK@Feature_YieldChanges?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 400				; 00000190H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 5315 : 	kUtility.SetYields(m_piRiverYieldChange, "Feature_RiverYieldChanges", "FeatureType", szFeatureType);

	mov	edx, DWORD PTR _szFeatureType$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@LJDMFNNN@FeatureType?$AA@
	push	OFFSET ??_C@_0BK@GHDKCIKB@Feature_RiverYieldChanges?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 404				; 00000194H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 5316 : 	kUtility.SetYields(m_piHillsYieldChange, "Feature_HillsYieldChanges", "FeatureType", szFeatureType);

	mov	ecx, DWORD PTR _szFeatureType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@LJDMFNNN@FeatureType?$AA@
	push	OFFSET ??_C@_0BK@KCPFMDJN@Feature_HillsYieldChanges?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 408				; 00000198H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 5317 : 
; 5318 : 	kUtility.PopulateArrayByExistence(m_pbTerrain, "Terrains", "Feature_TerrainBooleans", "TerrainType", "FeatureType", szFeatureType);

	mov	eax, DWORD PTR _szFeatureType$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@LJDMFNNN@FeatureType?$AA@
	push	OFFSET ??_C@_0M@BBHDGKPJ@TerrainType?$AA@
	push	OFFSET ??_C@_0BI@NKMIJBCO@Feature_TerrainBooleans?$AA@
	push	OFFSET ??_C@_08DHHJBCFH@Terrains?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 5319 : 
; 5320 : 	// Determine of this feature is clearable - set each time the game is started
; 5321 : 	m_bClearable = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+334], 0

; 5322 : 
; 5323 : 	return true;

	mov	al, 1
$LN5@CacheResul@24:

; 5324 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvFeatureInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvFeatureInfo::CacheResults
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?Remark@@YA_NHPBDZZ
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?Remark@@YA_NHPBDZZ PROC				; Remark, COMDAT

; 32   : REMARK_GROUP("CvInfos");

	push	ebp
	mov	ebp, esp
	xor	al, al
	pop	ebp
	ret	0
?Remark@@YA_NHPBDZZ ENDP				; Remark
_TEXT	ENDS
PUBLIC	??_7CvYieldInfo@@6B@				; CvYieldInfo::`vftable'
PUBLIC	??0CvYieldInfo@@QAE@XZ				; CvYieldInfo::CvYieldInfo
PUBLIC	?CacheResults@CvYieldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvYieldInfo::CacheResults
;	COMDAT ??_7CvYieldInfo@@6B@
CONST	SEGMENT
??_7CvYieldInfo@@6B@ DD FLAT:?CacheResults@CvYieldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvYieldInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvYieldInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvYieldInfo@@QAE@XZ PROC				; CvYieldInfo::CvYieldInfo, COMDAT
; _this$ = ecx

; 5344 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvYieldInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0

; 5345 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvYieldInfo@@QAE@XZ ENDP				; CvYieldInfo::CvYieldInfo
_TEXT	ENDS
PUBLIC	?getHillsChange@CvYieldInfo@@QBEHXZ		; CvYieldInfo::getHillsChange
; Function compile flags: /Odtp
;	COMDAT ?getHillsChange@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHillsChange@CvYieldInfo@@QBEHXZ PROC		; CvYieldInfo::getHillsChange, COMDAT
; _this$ = ecx

; 5348 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5349 : 	return m_iHillsChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 5350 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHillsChange@CvYieldInfo@@QBEHXZ ENDP		; CvYieldInfo::getHillsChange
_TEXT	ENDS
PUBLIC	?getMountainChange@CvYieldInfo@@QBEHXZ		; CvYieldInfo::getMountainChange
; Function compile flags: /Odtp
;	COMDAT ?getMountainChange@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMountainChange@CvYieldInfo@@QBEHXZ PROC		; CvYieldInfo::getMountainChange, COMDAT
; _this$ = ecx

; 5353 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5354 : 	return m_iMountainChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 5355 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMountainChange@CvYieldInfo@@QBEHXZ ENDP		; CvYieldInfo::getMountainChange
_TEXT	ENDS
PUBLIC	?getLakeChange@CvYieldInfo@@QBEHXZ		; CvYieldInfo::getLakeChange
; Function compile flags: /Odtp
;	COMDAT ?getLakeChange@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLakeChange@CvYieldInfo@@QBEHXZ PROC			; CvYieldInfo::getLakeChange, COMDAT
; _this$ = ecx

; 5358 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5359 : 	return m_iLakeChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 5360 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLakeChange@CvYieldInfo@@QBEHXZ ENDP			; CvYieldInfo::getLakeChange
_TEXT	ENDS
PUBLIC	?getCityChange@CvYieldInfo@@QBEHXZ		; CvYieldInfo::getCityChange
; Function compile flags: /Odtp
;	COMDAT ?getCityChange@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCityChange@CvYieldInfo@@QBEHXZ PROC			; CvYieldInfo::getCityChange, COMDAT
; _this$ = ecx

; 5363 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5364 : 	return m_iCityChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 5365 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCityChange@CvYieldInfo@@QBEHXZ ENDP			; CvYieldInfo::getCityChange
_TEXT	ENDS
PUBLIC	?getPopulationChangeOffset@CvYieldInfo@@QBEHXZ	; CvYieldInfo::getPopulationChangeOffset
; Function compile flags: /Odtp
;	COMDAT ?getPopulationChangeOffset@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPopulationChangeOffset@CvYieldInfo@@QBEHXZ PROC	; CvYieldInfo::getPopulationChangeOffset, COMDAT
; _this$ = ecx

; 5368 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5369 : 	return m_iPopulationChangeOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 5370 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPopulationChangeOffset@CvYieldInfo@@QBEHXZ ENDP	; CvYieldInfo::getPopulationChangeOffset
_TEXT	ENDS
PUBLIC	?getPopulationChangeDivisor@CvYieldInfo@@QBEHXZ	; CvYieldInfo::getPopulationChangeDivisor
; Function compile flags: /Odtp
;	COMDAT ?getPopulationChangeDivisor@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPopulationChangeDivisor@CvYieldInfo@@QBEHXZ PROC	; CvYieldInfo::getPopulationChangeDivisor, COMDAT
; _this$ = ecx

; 5373 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5374 : 	return m_iPopulationChangeDivisor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 5375 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPopulationChangeDivisor@CvYieldInfo@@QBEHXZ ENDP	; CvYieldInfo::getPopulationChangeDivisor
_TEXT	ENDS
PUBLIC	?getMinCity@CvYieldInfo@@QBEHXZ			; CvYieldInfo::getMinCity
; Function compile flags: /Odtp
;	COMDAT ?getMinCity@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinCity@CvYieldInfo@@QBEHXZ PROC			; CvYieldInfo::getMinCity, COMDAT
; _this$ = ecx

; 5378 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5379 : 	return m_iMinCity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 5380 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinCity@CvYieldInfo@@QBEHXZ ENDP			; CvYieldInfo::getMinCity
_TEXT	ENDS
PUBLIC	?getMinCityOnHillsAdjust@CvYieldInfo@@QBEHXZ	; CvYieldInfo::getMinCityOnHillsAdjust
; Function compile flags: /Odtp
;	COMDAT ?getMinCityOnHillsAdjust@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinCityOnHillsAdjust@CvYieldInfo@@QBEHXZ PROC	; CvYieldInfo::getMinCityOnHillsAdjust, COMDAT
; _this$ = ecx

; 5383 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5384 : 	return m_iMinCityOnHillsAdjust;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 5385 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinCityOnHillsAdjust@CvYieldInfo@@QBEHXZ ENDP	; CvYieldInfo::getMinCityOnHillsAdjust
_TEXT	ENDS
PUBLIC	?getGoldenAgeYield@CvYieldInfo@@QBEHXZ		; CvYieldInfo::getGoldenAgeYield
; Function compile flags: /Odtp
;	COMDAT ?getGoldenAgeYield@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldenAgeYield@CvYieldInfo@@QBEHXZ PROC		; CvYieldInfo::getGoldenAgeYield, COMDAT
; _this$ = ecx

; 5389 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5390 : 	return m_iGoldenAgeYield;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 5391 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldenAgeYield@CvYieldInfo@@QBEHXZ ENDP		; CvYieldInfo::getGoldenAgeYield
_TEXT	ENDS
PUBLIC	?getGoldenAgeYieldThreshold@CvYieldInfo@@QBEHXZ	; CvYieldInfo::getGoldenAgeYieldThreshold
; Function compile flags: /Odtp
;	COMDAT ?getGoldenAgeYieldThreshold@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldenAgeYieldThreshold@CvYieldInfo@@QBEHXZ PROC	; CvYieldInfo::getGoldenAgeYieldThreshold, COMDAT
; _this$ = ecx

; 5394 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5395 : 	return m_iGoldenAgeYieldThreshold;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 5396 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldenAgeYieldThreshold@CvYieldInfo@@QBEHXZ ENDP	; CvYieldInfo::getGoldenAgeYieldThreshold
_TEXT	ENDS
PUBLIC	?getGoldenAgeYieldMod@CvYieldInfo@@QBEHXZ	; CvYieldInfo::getGoldenAgeYieldMod
; Function compile flags: /Odtp
;	COMDAT ?getGoldenAgeYieldMod@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGoldenAgeYieldMod@CvYieldInfo@@QBEHXZ PROC		; CvYieldInfo::getGoldenAgeYieldMod, COMDAT
; _this$ = ecx

; 5399 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5400 : 	return m_iGoldenAgeYieldMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 5401 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGoldenAgeYieldMod@CvYieldInfo@@QBEHXZ ENDP		; CvYieldInfo::getGoldenAgeYieldMod
_TEXT	ENDS
PUBLIC	?getAIWeightPercent@CvYieldInfo@@QBEHXZ		; CvYieldInfo::getAIWeightPercent
; Function compile flags: /Odtp
;	COMDAT ?getAIWeightPercent@CvYieldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAIWeightPercent@CvYieldInfo@@QBEHXZ PROC		; CvYieldInfo::getAIWeightPercent, COMDAT
; _this$ = ecx

; 5404 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5405 : 	return m_iAIWeightPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 5406 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAIWeightPercent@CvYieldInfo@@QBEHXZ ENDP		; CvYieldInfo::getAIWeightPercent
_TEXT	ENDS
PUBLIC	??_C@_0BA@MMJINIIG@AIWeightPercent?$AA@		; `string'
PUBLIC	??_C@_0BC@MJLGEDBF@GoldenAgeYieldMod?$AA@	; `string'
PUBLIC	??_C@_0BI@DBECKJGM@GoldenAgeYieldThreshold?$AA@	; `string'
PUBLIC	??_C@_0P@MLGBIDLK@GoldenAgeYield?$AA@		; `string'
PUBLIC	??_C@_0BF@LNKALOEG@MinCityOnHillsAdjust?$AA@	; `string'
PUBLIC	??_C@_07PAONAIJF@MinCity?$AA@			; `string'
PUBLIC	??_C@_0BI@JCFNLDIO@PopulationChangeDivisor?$AA@	; `string'
PUBLIC	??_C@_0BH@CMLONHNC@PopulationChangeOffset?$AA@	; `string'
PUBLIC	??_C@_0L@FDINHIHM@CityChange?$AA@		; `string'
PUBLIC	??_C@_0L@ILMPGFIK@LakeChange?$AA@		; `string'
PUBLIC	??_C@_0P@FMKKALCH@MountainChange?$AA@		; `string'
PUBLIC	??_C@_0M@HBHCCOEH@HillsChange?$AA@		; `string'
;	COMDAT ??_C@_0BA@MMJINIIG@AIWeightPercent?$AA@
CONST	SEGMENT
??_C@_0BA@MMJINIIG@AIWeightPercent?$AA@ DB 'AIWeightPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MJLGEDBF@GoldenAgeYieldMod?$AA@
CONST	SEGMENT
??_C@_0BC@MJLGEDBF@GoldenAgeYieldMod?$AA@ DB 'GoldenAgeYieldMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DBECKJGM@GoldenAgeYieldThreshold?$AA@
CONST	SEGMENT
??_C@_0BI@DBECKJGM@GoldenAgeYieldThreshold?$AA@ DB 'GoldenAgeYieldThresho'
	DB	'ld', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLGBIDLK@GoldenAgeYield?$AA@
CONST	SEGMENT
??_C@_0P@MLGBIDLK@GoldenAgeYield?$AA@ DB 'GoldenAgeYield', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LNKALOEG@MinCityOnHillsAdjust?$AA@
CONST	SEGMENT
??_C@_0BF@LNKALOEG@MinCityOnHillsAdjust?$AA@ DB 'MinCityOnHillsAdjust', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PAONAIJF@MinCity?$AA@
CONST	SEGMENT
??_C@_07PAONAIJF@MinCity?$AA@ DB 'MinCity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JCFNLDIO@PopulationChangeDivisor?$AA@
CONST	SEGMENT
??_C@_0BI@JCFNLDIO@PopulationChangeDivisor?$AA@ DB 'PopulationChangeDivis'
	DB	'or', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CMLONHNC@PopulationChangeOffset?$AA@
CONST	SEGMENT
??_C@_0BH@CMLONHNC@PopulationChangeOffset?$AA@ DB 'PopulationChangeOffset'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FDINHIHM@CityChange?$AA@
CONST	SEGMENT
??_C@_0L@FDINHIHM@CityChange?$AA@ DB 'CityChange', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ILMPGFIK@LakeChange?$AA@
CONST	SEGMENT
??_C@_0L@ILMPGFIK@LakeChange?$AA@ DB 'LakeChange', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FMKKALCH@MountainChange?$AA@
CONST	SEGMENT
??_C@_0P@FMKKALCH@MountainChange?$AA@ DB 'MountainChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HBHCCOEH@HillsChange?$AA@
CONST	SEGMENT
??_C@_0M@HBHCCOEH@HillsChange?$AA@ DB 'HillsChange', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvYieldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvYieldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvYieldInfo::CacheResults, COMDAT
; _this$ = ecx

; 5409 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5410 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@25

; 5411 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@25
$LN1@CacheResul@25:

; 5412 : 
; 5413 : 	kResults.GetValue("HillsChange", m_iHillsChange);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	push	eax
	push	OFFSET ??_C@_0M@HBHCCOEH@HillsChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5414 : 	kResults.GetValue("MountainChange", m_iMountainChange);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	push	ecx
	push	OFFSET ??_C@_0P@FMKKALCH@MountainChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5415 : 	kResults.GetValue("LakeChange", m_iLakeChange);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	push	OFFSET ??_C@_0L@ILMPGFIK@LakeChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5416 : 	kResults.GetValue("CityChange", m_iCityChange);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 272				; 00000110H
	push	eax
	push	OFFSET ??_C@_0L@FDINHIHM@CityChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5417 : 	kResults.GetValue("PopulationChangeOffset", m_iPopulationChangeOffset);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 276				; 00000114H
	push	ecx
	push	OFFSET ??_C@_0BH@CMLONHNC@PopulationChangeOffset?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5418 : 	kResults.GetValue("PopulationChangeDivisor", m_iPopulationChangeDivisor);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 280				; 00000118H
	push	edx
	push	OFFSET ??_C@_0BI@JCFNLDIO@PopulationChangeDivisor?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5419 : 	kResults.GetValue("MinCity", m_iMinCity);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 284				; 0000011cH
	push	eax
	push	OFFSET ??_C@_07PAONAIJF@MinCity?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5420 : #ifdef NQM_YIELD_MIN_CITY_ON_HILLS_ADJUST
; 5421 : 	kResults.GetValue("MinCityOnHillsAdjust", m_iMinCityOnHillsAdjust);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	push	ecx
	push	OFFSET ??_C@_0BF@LNKALOEG@MinCityOnHillsAdjust?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5422 : #endif
; 5423 : 	kResults.GetValue("GoldenAgeYield", m_iGoldenAgeYield);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 292				; 00000124H
	push	edx
	push	OFFSET ??_C@_0P@MLGBIDLK@GoldenAgeYield?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5424 : 	kResults.GetValue("GoldenAgeYieldThreshold", m_iGoldenAgeYieldThreshold);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	push	eax
	push	OFFSET ??_C@_0BI@DBECKJGM@GoldenAgeYieldThreshold?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5425 : 	kResults.GetValue("GoldenAgeYieldMod", m_iGoldenAgeYieldMod);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	push	ecx
	push	OFFSET ??_C@_0BC@MJLGEDBF@GoldenAgeYieldMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5426 : 	kResults.GetValue("AIWeightPercent", m_iAIWeightPercent);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 304				; 00000130H
	push	edx
	push	OFFSET ??_C@_0BA@MMJINIIG@AIWeightPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetValue@Results@Database@@QAEXPBDAAH@Z

; 5427 : 
; 5428 : 	return true;

	mov	al, 1
$LN2@CacheResul@25:

; 5429 : 
; 5430 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvYieldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvYieldInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvTerrainInfo@@6B@				; CvTerrainInfo::`vftable'
PUBLIC	??0CvTerrainInfo@@QAE@XZ			; CvTerrainInfo::CvTerrainInfo
PUBLIC	?CacheResults@CvTerrainInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvTerrainInfo::CacheResults
EXTRN	??_ECvTerrainInfo@@UAEPAXI@Z:PROC		; CvTerrainInfo::`vector deleting destructor'
;	COMDAT ??_7CvTerrainInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvTerrainInfo@@6B@ DD FLAT:?CacheResults@CvTerrainInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvTerrainInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvTerrainInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvTerrainInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvTerrainInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvTerrainInfo@@QAE@XZ$1
__ehfuncinfo$??0CvTerrainInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvTerrainInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvTerrainInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T235419 = -20						; size = 4
$T235414 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvTerrainInfo@@QAE@XZ PROC				; CvTerrainInfo::CvTerrainInfo, COMDAT
; _this$ = ecx

; 5452 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvTerrainInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvTerrainInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+285], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+286], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+287], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 312				; 00000138H
	mov	DWORD PTR $T235414[ebp], edx
	mov	ecx, DWORD PTR $T235414[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 340				; 00000154H
	mov	DWORD PTR $T235419[ebp], eax
	mov	ecx, DWORD PTR $T235419[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 5453 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvTerrainInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvTerrainInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvTerrainInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvTerrainInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvTerrainInfo@@QAE@XZ ENDP				; CvTerrainInfo::CvTerrainInfo
PUBLIC	??1CvTerrainInfo@@UAE@XZ			; CvTerrainInfo::~CvTerrainInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvTerrainInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvTerrainInfo@@UAEPAXI@Z PROC			; CvTerrainInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvTerrainInfo@@UAE@XZ		; CvTerrainInfo::~CvTerrainInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@14
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@14:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvTerrainInfo@@UAEPAXI@Z ENDP			; CvTerrainInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvTerrainInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvTerrainInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvTerrainInfo@@UAE@XZ$1
__ehfuncinfo$??1CvTerrainInfo@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvTerrainInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvTerrainInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -92						; size = 4
$T235466 = -52						; size = 4
$T235461 = -48						; size = 4
$T235456 = -44						; size = 4
$T235455 = -40						; size = 4
$T235450 = -36						; size = 4
$T235449 = -32						; size = 4
$T235444 = -28						; size = 4
$T235443 = -24						; size = 4
$T235438 = -20						; size = 4
$T235437 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvTerrainInfo@@UAE@XZ PROC				; CvTerrainInfo::~CvTerrainInfo, COMDAT
; _this$ = ecx

; 5456 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvTerrainInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvTerrainInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5457 : 	SAFE_DELETE_ARRAY(m_piYields);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	mov	DWORD PTR $T235438[ebp], ecx
	mov	edx, DWORD PTR $T235438[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235437[ebp], eax
	mov	ecx, DWORD PTR $T235437[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T235438[ebp]
	mov	DWORD PTR [edx], 0

; 5458 : 	SAFE_DELETE_ARRAY(m_piRiverYieldChange);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 300				; 0000012cH
	mov	DWORD PTR $T235444[ebp], eax
	mov	ecx, DWORD PTR $T235444[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T235443[ebp], edx
	mov	eax, DWORD PTR $T235443[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T235444[ebp]
	mov	DWORD PTR [ecx], 0

; 5459 : 	SAFE_DELETE_ARRAY(m_piHillsYieldChange);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 304				; 00000130H
	mov	DWORD PTR $T235450[ebp], edx
	mov	eax, DWORD PTR $T235450[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T235449[ebp], ecx
	mov	edx, DWORD PTR $T235449[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T235450[ebp]
	mov	DWORD PTR [eax], 0

; 5460 : 	SAFE_DELETE_ARRAY(m_pi3DAudioScriptFootstepIndex);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 308				; 00000134H
	mov	DWORD PTR $T235456[ebp], ecx
	mov	edx, DWORD PTR $T235456[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235455[ebp], eax
	mov	ecx, DWORD PTR $T235455[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T235456[ebp]
	mov	DWORD PTR [edx], 0

; 5461 : }

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 340				; 00000154H
	mov	DWORD PTR $T235461[ebp], eax
	mov	ecx, DWORD PTR $T235461[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	mov	DWORD PTR $T235466[ebp], ecx
	mov	ecx, DWORD PTR $T235466[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvTerrainInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvTerrainInfo@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvTerrainInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvTerrainInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvTerrainInfo@@UAE@XZ ENDP				; CvTerrainInfo::~CvTerrainInfo
PUBLIC	?getMovementCost@CvTerrainInfo@@QBEHXZ		; CvTerrainInfo::getMovementCost
; Function compile flags: /Odtp
;	COMDAT ?getMovementCost@CvTerrainInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMovementCost@CvTerrainInfo@@QBEHXZ PROC		; CvTerrainInfo::getMovementCost, COMDAT
; _this$ = ecx

; 5464 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5465 : 	return m_iMovementCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 5466 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMovementCost@CvTerrainInfo@@QBEHXZ ENDP		; CvTerrainInfo::getMovementCost
_TEXT	ENDS
PUBLIC	?getSeeFromLevel@CvTerrainInfo@@QBEHXZ		; CvTerrainInfo::getSeeFromLevel
; Function compile flags: /Odtp
;	COMDAT ?getSeeFromLevel@CvTerrainInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSeeFromLevel@CvTerrainInfo@@QBEHXZ PROC		; CvTerrainInfo::getSeeFromLevel, COMDAT
; _this$ = ecx

; 5469 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5470 : 	return m_iSeeFromLevel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 5471 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSeeFromLevel@CvTerrainInfo@@QBEHXZ ENDP		; CvTerrainInfo::getSeeFromLevel
_TEXT	ENDS
PUBLIC	?getSeeThroughLevel@CvTerrainInfo@@QBEHXZ	; CvTerrainInfo::getSeeThroughLevel
; Function compile flags: /Odtp
;	COMDAT ?getSeeThroughLevel@CvTerrainInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSeeThroughLevel@CvTerrainInfo@@QBEHXZ PROC		; CvTerrainInfo::getSeeThroughLevel, COMDAT
; _this$ = ecx

; 5474 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5475 : 	return m_iSeeThroughLevel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 5476 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSeeThroughLevel@CvTerrainInfo@@QBEHXZ ENDP		; CvTerrainInfo::getSeeThroughLevel
_TEXT	ENDS
PUBLIC	?getBuildModifier@CvTerrainInfo@@QBEHXZ		; CvTerrainInfo::getBuildModifier
; Function compile flags: /Odtp
;	COMDAT ?getBuildModifier@CvTerrainInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildModifier@CvTerrainInfo@@QBEHXZ PROC		; CvTerrainInfo::getBuildModifier, COMDAT
; _this$ = ecx

; 5479 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5480 : 	return m_iBuildModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 5481 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildModifier@CvTerrainInfo@@QBEHXZ ENDP		; CvTerrainInfo::getBuildModifier
_TEXT	ENDS
PUBLIC	?getDefenseModifier@CvTerrainInfo@@QBEHXZ	; CvTerrainInfo::getDefenseModifier
; Function compile flags: /Odtp
;	COMDAT ?getDefenseModifier@CvTerrainInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefenseModifier@CvTerrainInfo@@QBEHXZ PROC		; CvTerrainInfo::getDefenseModifier, COMDAT
; _this$ = ecx

; 5484 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5485 : 	return m_iDefenseModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 5486 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefenseModifier@CvTerrainInfo@@QBEHXZ ENDP		; CvTerrainInfo::getDefenseModifier
_TEXT	ENDS
PUBLIC	?getInfluenceCost@CvTerrainInfo@@QBEHXZ		; CvTerrainInfo::getInfluenceCost
; Function compile flags: /Odtp
;	COMDAT ?getInfluenceCost@CvTerrainInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInfluenceCost@CvTerrainInfo@@QBEHXZ PROC		; CvTerrainInfo::getInfluenceCost, COMDAT
; _this$ = ecx

; 5489 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5490 : 	return m_iInfluenceCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 5491 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getInfluenceCost@CvTerrainInfo@@QBEHXZ ENDP		; CvTerrainInfo::getInfluenceCost
_TEXT	ENDS
PUBLIC	?isWater@CvTerrainInfo@@QBE_NXZ			; CvTerrainInfo::isWater
; Function compile flags: /Odtp
;	COMDAT ?isWater@CvTerrainInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isWater@CvTerrainInfo@@QBE_NXZ PROC			; CvTerrainInfo::isWater, COMDAT
; _this$ = ecx

; 5494 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5495 : 	return m_bWater;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+284]

; 5496 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isWater@CvTerrainInfo@@QBE_NXZ ENDP			; CvTerrainInfo::isWater
_TEXT	ENDS
PUBLIC	?isImpassable@CvTerrainInfo@@QBE_NXZ		; CvTerrainInfo::isImpassable
; Function compile flags: /Odtp
;	COMDAT ?isImpassable@CvTerrainInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isImpassable@CvTerrainInfo@@QBE_NXZ PROC		; CvTerrainInfo::isImpassable, COMDAT
; _this$ = ecx

; 5499 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5500 : 	return m_bImpassable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+285]

; 5501 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isImpassable@CvTerrainInfo@@QBE_NXZ ENDP		; CvTerrainInfo::isImpassable
_TEXT	ENDS
PUBLIC	?isFound@CvTerrainInfo@@QBE_NXZ			; CvTerrainInfo::isFound
; Function compile flags: /Odtp
;	COMDAT ?isFound@CvTerrainInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isFound@CvTerrainInfo@@QBE_NXZ PROC			; CvTerrainInfo::isFound, COMDAT
; _this$ = ecx

; 5504 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5505 : 	return m_bFound;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+286]

; 5506 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isFound@CvTerrainInfo@@QBE_NXZ ENDP			; CvTerrainInfo::isFound
_TEXT	ENDS
PUBLIC	?isFoundCoast@CvTerrainInfo@@QBE_NXZ		; CvTerrainInfo::isFoundCoast
; Function compile flags: /Odtp
;	COMDAT ?isFoundCoast@CvTerrainInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isFoundCoast@CvTerrainInfo@@QBE_NXZ PROC		; CvTerrainInfo::isFoundCoast, COMDAT
; _this$ = ecx

; 5509 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5510 : 	return m_bFoundCoast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+287]

; 5511 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isFoundCoast@CvTerrainInfo@@QBE_NXZ ENDP		; CvTerrainInfo::isFoundCoast
_TEXT	ENDS
PUBLIC	?isFoundFreshWater@CvTerrainInfo@@QBE_NXZ	; CvTerrainInfo::isFoundFreshWater
; Function compile flags: /Odtp
;	COMDAT ?isFoundFreshWater@CvTerrainInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isFoundFreshWater@CvTerrainInfo@@QBE_NXZ PROC		; CvTerrainInfo::isFoundFreshWater, COMDAT
; _this$ = ecx

; 5514 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5515 : 	return m_bFoundFreshWater;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+288]

; 5516 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isFoundFreshWater@CvTerrainInfo@@QBE_NXZ ENDP		; CvTerrainInfo::isFoundFreshWater
_TEXT	ENDS
PUBLIC	?getArtDefineTag@CvTerrainInfo@@QBEPBDXZ	; CvTerrainInfo::getArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?getArtDefineTag@CvTerrainInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtDefineTag@CvTerrainInfo@@QBEPBDXZ PROC		; CvTerrainInfo::getArtDefineTag, COMDAT
; _this$ = ecx

; 5519 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5520 : 	return m_strArtDefineTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 340				; 00000154H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 5521 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtDefineTag@CvTerrainInfo@@QBEPBDXZ ENDP		; CvTerrainInfo::getArtDefineTag
_TEXT	ENDS
PUBLIC	?setArtDefineTag@CvTerrainInfo@@QAEXPBD@Z	; CvTerrainInfo::setArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?setArtDefineTag@CvTerrainInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T235562 = -4						; size = 4
_szTag$ = 8						; size = 4
?setArtDefineTag@CvTerrainInfo@@QAEXPBD@Z PROC		; CvTerrainInfo::setArtDefineTag, COMDAT
; _this$ = ecx

; 5524 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5525 : 	m_strArtDefineTag = szTag;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 340				; 00000154H
	mov	DWORD PTR $T235562[ebp], eax
	cmp	DWORD PTR _szTag$[ebp], 0
	je	SHORT $LN4@setArtDefi@5
	mov	ecx, DWORD PTR _szTag$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T235562[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setArtDefi@5
$LN4@setArtDefi@5:
	mov	ecx, DWORD PTR $T235562[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setArtDefi@5:

; 5526 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setArtDefineTag@CvTerrainInfo@@QAEXPBD@Z ENDP		; CvTerrainInfo::setArtDefineTag
_TEXT	ENDS
PUBLIC	?getWorldSoundscapeScriptId@CvTerrainInfo@@QBEHXZ ; CvTerrainInfo::getWorldSoundscapeScriptId
; Function compile flags: /Odtp
;	COMDAT ?getWorldSoundscapeScriptId@CvTerrainInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldSoundscapeScriptId@CvTerrainInfo@@QBEHXZ PROC	; CvTerrainInfo::getWorldSoundscapeScriptId, COMDAT
; _this$ = ecx

; 5529 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5530 : 	return m_iWorldSoundscapeScriptId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 5531 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldSoundscapeScriptId@CvTerrainInfo@@QBEHXZ ENDP	; CvTerrainInfo::getWorldSoundscapeScriptId
_TEXT	ENDS
PUBLIC	?getEffectTypeTag@CvTerrainInfo@@QBEPBDXZ	; CvTerrainInfo::getEffectTypeTag
; Function compile flags: /Odtp
;	COMDAT ?getEffectTypeTag@CvTerrainInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEffectTypeTag@CvTerrainInfo@@QBEPBDXZ PROC		; CvTerrainInfo::getEffectTypeTag, COMDAT
; _this$ = ecx

; 5534 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5535 : 	return m_strEffectTypeTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 5536 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEffectTypeTag@CvTerrainInfo@@QBEPBDXZ ENDP		; CvTerrainInfo::getEffectTypeTag
_TEXT	ENDS
PUBLIC	?getYield@CvTerrainInfo@@QBEHH@Z		; CvTerrainInfo::getYield
; Function compile flags: /Odtp
;	COMDAT ?getYield@CvTerrainInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getYield@CvTerrainInfo@@QBEHH@Z PROC			; CvTerrainInfo::getYield, COMDAT
; _this$ = ecx

; 5539 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5540 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 5541 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5542 : 	return m_piYields ? m_piYields[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+296], 0
	je	SHORT $LN3@getYield
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getYield
$LN3@getYield:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getYield:
	mov	eax, DWORD PTR tv69[ebp]

; 5543 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getYield@CvTerrainInfo@@QBEHH@Z ENDP			; CvTerrainInfo::getYield
_TEXT	ENDS
PUBLIC	?getRiverYieldChange@CvTerrainInfo@@QBEHH@Z	; CvTerrainInfo::getRiverYieldChange
; Function compile flags: /Odtp
;	COMDAT ?getRiverYieldChange@CvTerrainInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getRiverYieldChange@CvTerrainInfo@@QBEHH@Z PROC	; CvTerrainInfo::getRiverYieldChange, COMDAT
; _this$ = ecx

; 5546 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5547 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 5548 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5549 : 	return m_piRiverYieldChange ? m_piRiverYieldChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+300], 0
	je	SHORT $LN3@getRiverYi@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getRiverYi@2
$LN3@getRiverYi@2:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getRiverYi@2:
	mov	eax, DWORD PTR tv69[ebp]

; 5550 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getRiverYieldChange@CvTerrainInfo@@QBEHH@Z ENDP	; CvTerrainInfo::getRiverYieldChange
_TEXT	ENDS
PUBLIC	?getHillsYieldChange@CvTerrainInfo@@QBEHH@Z	; CvTerrainInfo::getHillsYieldChange
; Function compile flags: /Odtp
;	COMDAT ?getHillsYieldChange@CvTerrainInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getHillsYieldChange@CvTerrainInfo@@QBEHH@Z PROC	; CvTerrainInfo::getHillsYieldChange, COMDAT
; _this$ = ecx

; 5553 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5554 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 5555 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5556 : 	return m_piHillsYieldChange ? m_piHillsYieldChange[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+304], 0
	je	SHORT $LN3@getHillsYi@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+304]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getHillsYi@2
$LN3@getHillsYi@2:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getHillsYi@2:
	mov	eax, DWORD PTR tv69[ebp]

; 5557 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getHillsYieldChange@CvTerrainInfo@@QBEHH@Z ENDP	; CvTerrainInfo::getHillsYieldChange
_TEXT	ENDS
PUBLIC	?get3DAudioScriptFootstepIndex@CvTerrainInfo@@QBEHH@Z ; CvTerrainInfo::get3DAudioScriptFootstepIndex
; Function compile flags: /Odtp
;	COMDAT ?get3DAudioScriptFootstepIndex@CvTerrainInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?get3DAudioScriptFootstepIndex@CvTerrainInfo@@QBEHH@Z PROC ; CvTerrainInfo::get3DAudioScriptFootstepIndex, COMDAT
; _this$ = ecx

; 5560 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5561 : //	CvAssertMsg(i < ?, "Index out of bounds");
; 5562 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5563 : 	return m_pi3DAudioScriptFootstepIndex ? m_pi3DAudioScriptFootstepIndex[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+308], 0
	je	SHORT $LN3@get3DAudio@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+308]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@get3DAudio@2
$LN3@get3DAudio@2:
	mov	DWORD PTR tv69[ebp], -1
$LN4@get3DAudio@2:
	mov	eax, DWORD PTR tv69[ebp]

; 5564 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?get3DAudioScriptFootstepIndex@CvTerrainInfo@@QBEHH@Z ENDP ; CvTerrainInfo::get3DAudioScriptFootstepIndex
_TEXT	ENDS
PUBLIC	??_C@_0BK@FHOKMKF@Terrain_HillsYieldChanges?$AA@ ; `string'
PUBLIC	??_C@_0BK@MALBEHJJ@Terrain_RiverYieldChanges?$AA@ ; `string'
PUBLIC	??_C@_0P@GADJJMAO@Terrain_Yields?$AA@		; `string'
PUBLIC	??_C@_0O@GLCMMEGH@BuildModifier?$AA@		; `string'
PUBLIC	??_C@_07EFJOHFBB@SeeFrom?$AA@			; `string'
PUBLIC	??_C@_0BA@ILDCGEKO@FoundFreshWater?$AA@		; `string'
PUBLIC	??_C@_0L@IGBFPMGE@FoundCoast?$AA@		; `string'
PUBLIC	??_C@_05JDGHEPJG@Found?$AA@			; `string'
;	COMDAT ??_C@_0BK@FHOKMKF@Terrain_HillsYieldChanges?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0BK@FHOKMKF@Terrain_HillsYieldChanges?$AA@ DB 'Terrain_HillsYieldCh'
	DB	'anges', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MALBEHJJ@Terrain_RiverYieldChanges?$AA@
CONST	SEGMENT
??_C@_0BK@MALBEHJJ@Terrain_RiverYieldChanges?$AA@ DB 'Terrain_RiverYieldC'
	DB	'hanges', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GADJJMAO@Terrain_Yields?$AA@
CONST	SEGMENT
??_C@_0P@GADJJMAO@Terrain_Yields?$AA@ DB 'Terrain_Yields', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLCMMEGH@BuildModifier?$AA@
CONST	SEGMENT
??_C@_0O@GLCMMEGH@BuildModifier?$AA@ DB 'BuildModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EFJOHFBB@SeeFrom?$AA@
CONST	SEGMENT
??_C@_07EFJOHFBB@SeeFrom?$AA@ DB 'SeeFrom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ILDCGEKO@FoundFreshWater?$AA@
CONST	SEGMENT
??_C@_0BA@ILDCGEKO@FoundFreshWater?$AA@ DB 'FoundFreshWater', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGBFPMGE@FoundCoast?$AA@
CONST	SEGMENT
??_C@_0L@IGBFPMGE@FoundCoast?$AA@ DB 'FoundCoast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JDGHEPJG@Found?$AA@
CONST	SEGMENT
??_C@_05JDGHEPJG@Found?$AA@ DB 'Found', 00H		; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvTerrainInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv167 = -28						; size = 4
_this$ = -24						; size = 4
$T235604 = -20						; size = 4
$T235603 = -16						; size = 4
$T235591 = -12						; size = 4
_szTerrainType$ = -8					; size = 4
_szTextVal$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvTerrainInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvTerrainInfo::CacheResults, COMDAT
; _this$ = ecx

; 5567 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 5568 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@CacheResul@26

; 5569 : 		return false;

	xor	al, al
	jmp	$LN4@CacheResul@26
$LN3@CacheResul@26:

; 5570 : 
; 5571 : 	setArtDefineTag(kResults.GetText("ArtDefineTag"));

	push	OFFSET ??_C@_0N@NLPPFOOH@ArtDefineTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setArtDefineTag@CvTerrainInfo@@QAEXPBD@Z ; CvTerrainInfo::setArtDefineTag

; 5572 : 
; 5573 : 	m_bWater = kResults.GetBool("Water");

	push	OFFSET ??_C@_05EMKMBNJK@Water?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+284], al

; 5574 : 	m_bImpassable = kResults.GetBool("Impassable");

	push	OFFSET ??_C@_0L@MNIKPMED@Impassable?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+285], al

; 5575 : 	m_bFound = kResults.GetBool("Found");

	push	OFFSET ??_C@_05JDGHEPJG@Found?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+286], al

; 5576 : 	m_bFoundCoast = kResults.GetBool("FoundCoast");

	push	OFFSET ??_C@_0L@IGBFPMGE@FoundCoast?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+287], al

; 5577 : 	m_bFoundFreshWater = kResults.GetBool("FoundFreshWater");

	push	OFFSET ??_C@_0BA@ILDCGEKO@FoundFreshWater?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+288], al

; 5578 : 
; 5579 : 	m_iMovementCost = kResults.GetInt("Movement");

	push	OFFSET ??_C@_08IMCBCIPL@Movement?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+260], eax

; 5580 : 	m_iSeeFromLevel = kResults.GetInt("SeeFrom");

	push	OFFSET ??_C@_07EFJOHFBB@SeeFrom?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], eax

; 5581 : 	m_iSeeThroughLevel = kResults.GetInt("SeeThrough");

	push	OFFSET ??_C@_0L@NMPOCBKF@SeeThrough?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], eax

; 5582 : 	m_iBuildModifier = kResults.GetInt("BuildModifier");

	push	OFFSET ??_C@_0O@GLCMMEGH@BuildModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], eax

; 5583 : 	m_iDefenseModifier = kResults.GetInt("Defense");

	push	OFFSET ??_C@_07PEDPFCGC@Defense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], eax

; 5584 : 	m_iInfluenceCost = kResults.GetInt("InfluenceCost");

	push	OFFSET ??_C@_0O@OIHPMKGI@InfluenceCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+280], eax

; 5585 : 
; 5586 : 	const char* szTextVal = kResults.GetText("WorldSoundscapeAudioScript");

	push	OFFSET ??_C@_0BL@EOODAKIM@WorldSoundscapeAudioScript?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 5587 : 	if(szTextVal != NULL)

	cmp	DWORD PTR _szTextVal$[ebp], 0
	je	SHORT $LN2@CacheResul@26

; 5588 : 	{
; 5589 : 		m_iWorldSoundscapeScriptId = gDLL->GetAudioTagIndex(szTextVal, AUDIOTAG_SOUNDSCAPE);

	mov	edx, DWORD PTR $T235591[ebp]
	mov	DWORD PTR tv167[ebp], edx
	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+8564
	mov	DWORD PTR tv167[ebp], eax
	push	5
	mov	ecx, DWORD PTR _szTextVal$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv167[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv167[ebp]
	mov	edx, DWORD PTR [eax+508]
	call	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], eax

; 5590 : 	}
; 5591 : 	else

	jmp	SHORT $LN10@CacheResul@26
$LN2@CacheResul@26:

; 5592 : 	{
; 5593 : 		m_iWorldSoundscapeScriptId = -1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], -1

; 5594 : 		Remark(1, "Warning: Missing soundscape definition in XML for feature: '%s'", GetType());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	OFFSET ??_C@_0EA@OMPGKABL@Warning?3?5Missing?5soundscape?5defi@
	push	1
	call	?Remark@@YA_NHPBDZZ			; Remark
	add	esp, 12					; 0000000cH

; 5595 : 	}
; 5596 : 
; 5597 : 	//Arrays
; 5598 : 	const char* szTerrainType = GetType();

$LN10@CacheResul@26:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szTerrainType$[ebp], eax

; 5599 : 	kUtility.SetYields(m_piYields, "Terrain_Yields", "TerrainType", szTerrainType);

	mov	eax, DWORD PTR _szTerrainType$[ebp]
	push	eax
	push	OFFSET ??_C@_0M@BBHDGKPJ@TerrainType?$AA@
	push	OFFSET ??_C@_0P@GADJJMAO@Terrain_Yields?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 5600 : 	kUtility.SetYields(m_piRiverYieldChange, "Terrain_RiverYieldChanges", "TerrainType", szTerrainType);

	mov	edx, DWORD PTR _szTerrainType$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@BBHDGKPJ@TerrainType?$AA@
	push	OFFSET ??_C@_0BK@MALBEHJJ@Terrain_RiverYieldChanges?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 300				; 0000012cH
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 5601 : 	kUtility.SetYields(m_piHillsYieldChange, "Terrain_HillsYieldChanges", "TerrainType", szTerrainType);

	mov	ecx, DWORD PTR _szTerrainType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@BBHDGKPJ@TerrainType?$AA@
	push	OFFSET ??_C@_0BK@FHOKMKF@Terrain_HillsYieldChanges?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 304				; 00000130H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 5602 : 
; 5603 : 	m_strEffectTypeTag = kResults.GetText("EffectTypeTag");

	push	OFFSET ??_C@_0O@OBJBJNKF@EffectTypeTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T235604[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 312				; 00000138H
	mov	DWORD PTR $T235603[ebp], eax
	cmp	DWORD PTR $T235604[ebp], 0
	je	SHORT $LN13@CacheResul@26
	mov	ecx, DWORD PTR $T235604[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T235603[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN14@CacheResul@26
$LN13@CacheResul@26:
	mov	ecx, DWORD PTR $T235603[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN14@CacheResul@26:

; 5604 : 
; 5605 : 	return true;

	mov	al, 1
$LN4@CacheResul@26:

; 5606 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvTerrainInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvTerrainInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvInterfaceModeInfo@@6B@			; CvInterfaceModeInfo::`vftable'
PUBLIC	??0CvInterfaceModeInfo@@QAE@XZ			; CvInterfaceModeInfo::CvInterfaceModeInfo
PUBLIC	?CacheResults@CvInterfaceModeInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvInterfaceModeInfo::CacheResults
;	COMDAT ??_7CvInterfaceModeInfo@@6B@
CONST	SEGMENT
??_7CvInterfaceModeInfo@@6B@ DD FLAT:?CacheResults@CvInterfaceModeInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvInterfaceModeInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvInterfaceModeInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvInterfaceModeInfo@@QAE@XZ PROC			; CvInterfaceModeInfo::CvInterfaceModeInfo, COMDAT
; _this$ = ecx

; 5618 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvHotKeyInfo@@QAE@XZ			; CvHotKeyInfo::CvHotKeyInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvInterfaceModeInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+468], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+469], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+470], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+471], 0

; 5619 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvInterfaceModeInfo@@QAE@XZ ENDP			; CvInterfaceModeInfo::CvInterfaceModeInfo
_TEXT	ENDS
PUBLIC	?getCursorIndex@CvInterfaceModeInfo@@QBEHXZ	; CvInterfaceModeInfo::getCursorIndex
; Function compile flags: /Odtp
;	COMDAT ?getCursorIndex@CvInterfaceModeInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCursorIndex@CvInterfaceModeInfo@@QBEHXZ PROC	; CvInterfaceModeInfo::getCursorIndex, COMDAT
; _this$ = ecx

; 5622 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5623 : 	return m_iCursorIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+460]

; 5624 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCursorIndex@CvInterfaceModeInfo@@QBEHXZ ENDP	; CvInterfaceModeInfo::getCursorIndex
_TEXT	ENDS
PUBLIC	?getMissionType@CvInterfaceModeInfo@@QBEHXZ	; CvInterfaceModeInfo::getMissionType
; Function compile flags: /Odtp
;	COMDAT ?getMissionType@CvInterfaceModeInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMissionType@CvInterfaceModeInfo@@QBEHXZ PROC	; CvInterfaceModeInfo::getMissionType, COMDAT
; _this$ = ecx

; 5627 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5628 : 	return m_iMissionType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+464]

; 5629 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMissionType@CvInterfaceModeInfo@@QBEHXZ ENDP	; CvInterfaceModeInfo::getMissionType
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?getVisible@CvInterfaceModeInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVisible@CvInterfaceModeInfo@@QBE_NXZ PROC		; CvInterfaceModeInfo::getVisible, COMDAT
; _this$ = ecx

; 5632 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5633 : 	return m_bVisible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+468]

; 5634 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVisible@CvInterfaceModeInfo@@QBE_NXZ ENDP		; CvInterfaceModeInfo::getVisible
_TEXT	ENDS
PUBLIC	?getHighlightPlot@CvInterfaceModeInfo@@QBE_NXZ	; CvInterfaceModeInfo::getHighlightPlot
; Function compile flags: /Odtp
;	COMDAT ?getHighlightPlot@CvInterfaceModeInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHighlightPlot@CvInterfaceModeInfo@@QBE_NXZ PROC	; CvInterfaceModeInfo::getHighlightPlot, COMDAT
; _this$ = ecx

; 5637 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5638 : 	return m_bHighlightPlot;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+469]

; 5639 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getHighlightPlot@CvInterfaceModeInfo@@QBE_NXZ ENDP	; CvInterfaceModeInfo::getHighlightPlot
_TEXT	ENDS
PUBLIC	?getSelectType@CvInterfaceModeInfo@@QBE_NXZ	; CvInterfaceModeInfo::getSelectType
; Function compile flags: /Odtp
;	COMDAT ?getSelectType@CvInterfaceModeInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSelectType@CvInterfaceModeInfo@@QBE_NXZ PROC	; CvInterfaceModeInfo::getSelectType, COMDAT
; _this$ = ecx

; 5642 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5643 : 	return m_bSelectType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+470]

; 5644 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSelectType@CvInterfaceModeInfo@@QBE_NXZ ENDP	; CvInterfaceModeInfo::getSelectType
_TEXT	ENDS
PUBLIC	?getSelectAll@CvInterfaceModeInfo@@QBE_NXZ	; CvInterfaceModeInfo::getSelectAll
; Function compile flags: /Odtp
;	COMDAT ?getSelectAll@CvInterfaceModeInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSelectAll@CvInterfaceModeInfo@@QBE_NXZ PROC		; CvInterfaceModeInfo::getSelectAll, COMDAT
; _this$ = ecx

; 5647 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5648 : 	return m_bSelectAll;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+471]

; 5649 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSelectAll@CvInterfaceModeInfo@@QBE_NXZ ENDP		; CvInterfaceModeInfo::getSelectAll
_TEXT	ENDS
PUBLIC	??_C@_09CPHHKKND@SelectAll?$AA@			; `string'
PUBLIC	??_C@_0L@NNIEIOGN@SelectType?$AA@		; `string'
PUBLIC	??_C@_0O@OLPLMNNK@HighlightPlot?$AA@		; `string'
PUBLIC	??_C@_07PLHEGJFB@Mission?$AA@			; `string'
PUBLIC	??_C@_0L@JLPDODGI@CursorType?$AA@		; `string'
;	COMDAT ??_C@_09CPHHKKND@SelectAll?$AA@
CONST	SEGMENT
??_C@_09CPHHKKND@SelectAll?$AA@ DB 'SelectAll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNIEIOGN@SelectType?$AA@
CONST	SEGMENT
??_C@_0L@NNIEIOGN@SelectType?$AA@ DB 'SelectType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLPLMNNK@HighlightPlot?$AA@
CONST	SEGMENT
??_C@_0O@OLPLMNNK@HighlightPlot?$AA@ DB 'HighlightPlot', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PLHEGJFB@Mission?$AA@
CONST	SEGMENT
??_C@_07PLHEGJFB@Mission?$AA@ DB 'Mission', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JLPDODGI@CursorType?$AA@
CONST	SEGMENT
??_C@_0L@JLPDODGI@CursorType?$AA@ DB 'CursorType', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvInterfaceModeInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_szMission$ = -8					; size = 4
_szCursorType$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvInterfaceModeInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvInterfaceModeInfo::CacheResults, COMDAT
; _this$ = ecx

; 5652 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 5653 : 	if(!CvHotKeyInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvHotKeyInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvHotKeyInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@27

; 5654 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@27
$LN1@CacheResul@27:

; 5655 : 
; 5656 : 	const char* szCursorType = kResults.GetText("CursorType");

	push	OFFSET ??_C@_0L@JLPDODGI@CursorType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szCursorType$[ebp], eax

; 5657 : 	m_iCursorIndex = GC.getInfoTypeForString(szCursorType, true);

	push	1
	mov	eax, DWORD PTR _szCursorType$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+460], eax

; 5658 : 
; 5659 : 	const char* szMission = kResults.GetText("Mission");

	push	OFFSET ??_C@_07PLHEGJFB@Mission?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szMission$[ebp], eax

; 5660 : 	m_iMissionType = GC.getInfoTypeForString(szMission, true);

	push	1
	mov	edx, DWORD PTR _szMission$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], eax

; 5661 : 
; 5662 : 	m_bVisible			= kResults.GetBool("Visible");

	push	OFFSET ??_C@_07MGEGCLJM@Visible?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+468], al

; 5663 : 	m_bHighlightPlot	= kResults.GetBool("HighlightPlot");

	push	OFFSET ??_C@_0O@OLPLMNNK@HighlightPlot?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+469], al

; 5664 : 	m_bSelectType		= kResults.GetBool("SelectType");

	push	OFFSET ??_C@_0L@NNIEIOGN@SelectType?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+470], al

; 5665 : 	m_bSelectAll		= kResults.GetBool("SelectAll");

	push	OFFSET ??_C@_09CPHHKKND@SelectAll?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+471], al

; 5666 : 
; 5667 : 	return true;

	mov	al, 1
$LN2@CacheResul@27:

; 5668 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvInterfaceModeInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvInterfaceModeInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvLeaderHeadInfo@@6B@			; CvLeaderHeadInfo::`vftable'
PUBLIC	??0CvLeaderHeadInfo@@QAE@XZ			; CvLeaderHeadInfo::CvLeaderHeadInfo
PUBLIC	?CacheResults@CvLeaderHeadInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvLeaderHeadInfo::CacheResults
EXTRN	??_ECvLeaderHeadInfo@@UAEPAXI@Z:PROC		; CvLeaderHeadInfo::`vector deleting destructor'
;	COMDAT ??_7CvLeaderHeadInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvLeaderHeadInfo@@6B@ DD FLAT:?CacheResults@CvLeaderHeadInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvLeaderHeadInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvLeaderHeadInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvLeaderHeadInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvLeaderHeadInfo@@QAE@XZ$0
__ehfuncinfo$??0CvLeaderHeadInfo@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CvLeaderHeadInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvLeaderHeadInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T235630 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvLeaderHeadInfo@@QAE@XZ PROC			; CvLeaderHeadInfo::CvLeaderHeadInfo, COMDAT
; _this$ = ecx

; 5691 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvLeaderHeadInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvLeaderHeadInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	mov	DWORD PTR $T235630[ebp], ecx
	mov	ecx, DWORD PTR $T235630[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+352], 0

; 5692 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvLeaderHeadInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??0CvLeaderHeadInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvLeaderHeadInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvLeaderHeadInfo@@QAE@XZ ENDP			; CvLeaderHeadInfo::CvLeaderHeadInfo
PUBLIC	??1CvLeaderHeadInfo@@UAE@XZ			; CvLeaderHeadInfo::~CvLeaderHeadInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvLeaderHeadInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvLeaderHeadInfo@@UAEPAXI@Z PROC			; CvLeaderHeadInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvLeaderHeadInfo@@UAE@XZ		; CvLeaderHeadInfo::~CvLeaderHeadInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@15
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@15:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvLeaderHeadInfo@@UAEPAXI@Z ENDP			; CvLeaderHeadInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvLeaderHeadInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvLeaderHeadInfo@@UAE@XZ$0
__ehfuncinfo$??1CvLeaderHeadInfo@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CvLeaderHeadInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvLeaderHeadInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -88						; size = 4
$T235671 = -48						; size = 4
$T235666 = -44						; size = 4
$T235664 = -40						; size = 4
$T235660 = -36						; size = 4
$T235658 = -32						; size = 4
$T235654 = -28						; size = 4
$T235652 = -24						; size = 4
$T235648 = -20						; size = 4
$T235646 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvLeaderHeadInfo@@UAE@XZ PROC			; CvLeaderHeadInfo::~CvLeaderHeadInfo, COMDAT
; _this$ = ecx

; 5695 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvLeaderHeadInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvLeaderHeadInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 5696 : 	SAFE_DELETE_ARRAY(m_piMajorCivApproachBiases);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	mov	DWORD PTR $T235648[ebp], ecx
	mov	edx, DWORD PTR $T235648[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235646[ebp], eax
	mov	ecx, DWORD PTR $T235646[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T235648[ebp]
	mov	DWORD PTR [edx], 0

; 5697 : 	SAFE_DELETE_ARRAY(m_piMinorCivApproachBiases);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 316				; 0000013cH
	mov	DWORD PTR $T235654[ebp], eax
	mov	ecx, DWORD PTR $T235654[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T235652[ebp], edx
	mov	eax, DWORD PTR $T235652[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T235654[ebp]
	mov	DWORD PTR [ecx], 0

; 5698 : 	SAFE_DELETE_ARRAY(m_pbTraits);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 348				; 0000015cH
	mov	DWORD PTR $T235660[ebp], edx
	mov	eax, DWORD PTR $T235660[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T235658[ebp], ecx
	mov	edx, DWORD PTR $T235658[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR $T235660[ebp]
	mov	DWORD PTR [eax], 0

; 5699 : 	SAFE_DELETE_ARRAY(m_piFlavorValue);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	mov	DWORD PTR $T235666[ebp], ecx
	mov	edx, DWORD PTR $T235666[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T235664[ebp], eax
	mov	ecx, DWORD PTR $T235664[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T235666[ebp]
	mov	DWORD PTR [edx], 0

; 5700 : }

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 320				; 00000140H
	mov	DWORD PTR $T235671[ebp], eax
	mov	ecx, DWORD PTR $T235671[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvLeaderHeadInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__ehhandler$??1CvLeaderHeadInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-80]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvLeaderHeadInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvLeaderHeadInfo@@UAE@XZ ENDP			; CvLeaderHeadInfo::~CvLeaderHeadInfo
PUBLIC	?GetVictoryCompetitiveness@CvLeaderHeadInfo@@QBEHXZ ; CvLeaderHeadInfo::GetVictoryCompetitiveness
; Function compile flags: /Odtp
;	COMDAT ?GetVictoryCompetitiveness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVictoryCompetitiveness@CvLeaderHeadInfo@@QBEHXZ PROC ; CvLeaderHeadInfo::GetVictoryCompetitiveness, COMDAT
; _this$ = ecx

; 5703 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5704 : 	return m_iVictoryCompetitiveness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 5705 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetVictoryCompetitiveness@CvLeaderHeadInfo@@QBEHXZ ENDP ; CvLeaderHeadInfo::GetVictoryCompetitiveness
_TEXT	ENDS
PUBLIC	?GetWonderCompetitiveness@CvLeaderHeadInfo@@QBEHXZ ; CvLeaderHeadInfo::GetWonderCompetitiveness
; Function compile flags: /Odtp
;	COMDAT ?GetWonderCompetitiveness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWonderCompetitiveness@CvLeaderHeadInfo@@QBEHXZ PROC	; CvLeaderHeadInfo::GetWonderCompetitiveness, COMDAT
; _this$ = ecx

; 5708 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5709 : 	return m_iWonderCompetitiveness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 5710 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWonderCompetitiveness@CvLeaderHeadInfo@@QBEHXZ ENDP	; CvLeaderHeadInfo::GetWonderCompetitiveness
_TEXT	ENDS
PUBLIC	?GetMinorCivCompetitiveness@CvLeaderHeadInfo@@QBEHXZ ; CvLeaderHeadInfo::GetMinorCivCompetitiveness
; Function compile flags: /Odtp
;	COMDAT ?GetMinorCivCompetitiveness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMinorCivCompetitiveness@CvLeaderHeadInfo@@QBEHXZ PROC ; CvLeaderHeadInfo::GetMinorCivCompetitiveness, COMDAT
; _this$ = ecx

; 5713 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5714 : 	return m_iMinorCivCompetitiveness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 5715 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMinorCivCompetitiveness@CvLeaderHeadInfo@@QBEHXZ ENDP ; CvLeaderHeadInfo::GetMinorCivCompetitiveness
_TEXT	ENDS
PUBLIC	?GetBoldness@CvLeaderHeadInfo@@QBEHXZ		; CvLeaderHeadInfo::GetBoldness
; Function compile flags: /Odtp
;	COMDAT ?GetBoldness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBoldness@CvLeaderHeadInfo@@QBEHXZ PROC		; CvLeaderHeadInfo::GetBoldness, COMDAT
; _this$ = ecx

; 5718 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5719 : 	return m_iBoldness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 5720 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBoldness@CvLeaderHeadInfo@@QBEHXZ ENDP		; CvLeaderHeadInfo::GetBoldness
_TEXT	ENDS
PUBLIC	?GetDiploBalance@CvLeaderHeadInfo@@QBEHXZ	; CvLeaderHeadInfo::GetDiploBalance
; Function compile flags: /Odtp
;	COMDAT ?GetDiploBalance@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDiploBalance@CvLeaderHeadInfo@@QBEHXZ PROC		; CvLeaderHeadInfo::GetDiploBalance, COMDAT
; _this$ = ecx

; 5723 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5724 : 	return m_iDiploBalance;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 5725 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDiploBalance@CvLeaderHeadInfo@@QBEHXZ ENDP		; CvLeaderHeadInfo::GetDiploBalance
_TEXT	ENDS
PUBLIC	?GetWarmongerHate@CvLeaderHeadInfo@@QBEHXZ	; CvLeaderHeadInfo::GetWarmongerHate
; Function compile flags: /Odtp
;	COMDAT ?GetWarmongerHate@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetWarmongerHate@CvLeaderHeadInfo@@QBEHXZ PROC		; CvLeaderHeadInfo::GetWarmongerHate, COMDAT
; _this$ = ecx

; 5728 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5729 : 	return m_iWarmongerHate;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 5730 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetWarmongerHate@CvLeaderHeadInfo@@QBEHXZ ENDP		; CvLeaderHeadInfo::GetWarmongerHate
_TEXT	ENDS
PUBLIC	?GetDenounceWillingness@CvLeaderHeadInfo@@QBEHXZ ; CvLeaderHeadInfo::GetDenounceWillingness
; Function compile flags: /Odtp
;	COMDAT ?GetDenounceWillingness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDenounceWillingness@CvLeaderHeadInfo@@QBEHXZ PROC	; CvLeaderHeadInfo::GetDenounceWillingness, COMDAT
; _this$ = ecx

; 5733 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5734 : 	return m_iDenounceWillingness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 5735 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDenounceWillingness@CvLeaderHeadInfo@@QBEHXZ ENDP	; CvLeaderHeadInfo::GetDenounceWillingness
_TEXT	ENDS
PUBLIC	?GetDoFWillingness@CvLeaderHeadInfo@@QBEHXZ	; CvLeaderHeadInfo::GetDoFWillingness
; Function compile flags: /Odtp
;	COMDAT ?GetDoFWillingness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDoFWillingness@CvLeaderHeadInfo@@QBEHXZ PROC	; CvLeaderHeadInfo::GetDoFWillingness, COMDAT
; _this$ = ecx

; 5738 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5739 : 	return m_iDoFWillingness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 5740 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetDoFWillingness@CvLeaderHeadInfo@@QBEHXZ ENDP	; CvLeaderHeadInfo::GetDoFWillingness
_TEXT	ENDS
PUBLIC	?GetLoyalty@CvLeaderHeadInfo@@QBEHXZ		; CvLeaderHeadInfo::GetLoyalty
; Function compile flags: /Odtp
;	COMDAT ?GetLoyalty@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLoyalty@CvLeaderHeadInfo@@QBEHXZ PROC		; CvLeaderHeadInfo::GetLoyalty, COMDAT
; _this$ = ecx

; 5743 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5744 : 	return m_iLoyalty;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 5745 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetLoyalty@CvLeaderHeadInfo@@QBEHXZ ENDP		; CvLeaderHeadInfo::GetLoyalty
_TEXT	ENDS
PUBLIC	?GetNeediness@CvLeaderHeadInfo@@QBEHXZ		; CvLeaderHeadInfo::GetNeediness
; Function compile flags: /Odtp
;	COMDAT ?GetNeediness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNeediness@CvLeaderHeadInfo@@QBEHXZ PROC		; CvLeaderHeadInfo::GetNeediness, COMDAT
; _this$ = ecx

; 5748 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5749 : 	return m_iNeediness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 5750 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNeediness@CvLeaderHeadInfo@@QBEHXZ ENDP		; CvLeaderHeadInfo::GetNeediness
_TEXT	ENDS
PUBLIC	?GetForgiveness@CvLeaderHeadInfo@@QBEHXZ	; CvLeaderHeadInfo::GetForgiveness
; Function compile flags: /Odtp
;	COMDAT ?GetForgiveness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetForgiveness@CvLeaderHeadInfo@@QBEHXZ PROC		; CvLeaderHeadInfo::GetForgiveness, COMDAT
; _this$ = ecx

; 5753 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5754 : 	return m_iForgiveness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 5755 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetForgiveness@CvLeaderHeadInfo@@QBEHXZ ENDP		; CvLeaderHeadInfo::GetForgiveness
_TEXT	ENDS
PUBLIC	?GetChattiness@CvLeaderHeadInfo@@QBEHXZ		; CvLeaderHeadInfo::GetChattiness
; Function compile flags: /Odtp
;	COMDAT ?GetChattiness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetChattiness@CvLeaderHeadInfo@@QBEHXZ PROC		; CvLeaderHeadInfo::GetChattiness, COMDAT
; _this$ = ecx

; 5758 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5759 : 	return m_iChattiness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 5760 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetChattiness@CvLeaderHeadInfo@@QBEHXZ ENDP		; CvLeaderHeadInfo::GetChattiness
_TEXT	ENDS
PUBLIC	?GetMeanness@CvLeaderHeadInfo@@QBEHXZ		; CvLeaderHeadInfo::GetMeanness
; Function compile flags: /Odtp
;	COMDAT ?GetMeanness@CvLeaderHeadInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMeanness@CvLeaderHeadInfo@@QBEHXZ PROC		; CvLeaderHeadInfo::GetMeanness, COMDAT
; _this$ = ecx

; 5763 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5764 : 	return m_iMeanness;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 5765 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMeanness@CvLeaderHeadInfo@@QBEHXZ ENDP		; CvLeaderHeadInfo::GetMeanness
_TEXT	ENDS
PUBLIC	?GetMajorCivApproachBias@CvLeaderHeadInfo@@QBEHH@Z ; CvLeaderHeadInfo::GetMajorCivApproachBias
; Function compile flags: /Odtp
;	COMDAT ?GetMajorCivApproachBias@CvLeaderHeadInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetMajorCivApproachBias@CvLeaderHeadInfo@@QBEHH@Z PROC	; CvLeaderHeadInfo::GetMajorCivApproachBias, COMDAT
; _this$ = ecx

; 5768 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5769 : 	CvAssertMsg(i < NUM_MAJOR_CIV_APPROACHES, "Index out of bounds");
; 5770 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5771 : 	return m_piMajorCivApproachBiases? m_piMajorCivApproachBiases[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+312], 0
	je	SHORT $LN3@GetMajorCi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+312]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetMajorCi
$LN3@GetMajorCi:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetMajorCi:
	mov	eax, DWORD PTR tv69[ebp]

; 5772 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMajorCivApproachBias@CvLeaderHeadInfo@@QBEHH@Z ENDP	; CvLeaderHeadInfo::GetMajorCivApproachBias
_TEXT	ENDS
PUBLIC	?GetMinorCivApproachBias@CvLeaderHeadInfo@@QBEHH@Z ; CvLeaderHeadInfo::GetMinorCivApproachBias
; Function compile flags: /Odtp
;	COMDAT ?GetMinorCivApproachBias@CvLeaderHeadInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetMinorCivApproachBias@CvLeaderHeadInfo@@QBEHH@Z PROC	; CvLeaderHeadInfo::GetMinorCivApproachBias, COMDAT
; _this$ = ecx

; 5775 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5776 : 	CvAssertMsg(i < NUM_MINOR_CIV_APPROACHES, "Index out of bounds");
; 5777 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5778 : 	return m_piMinorCivApproachBiases? m_piMinorCivApproachBiases[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+316], 0
	je	SHORT $LN3@GetMinorCi
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetMinorCi
$LN3@GetMinorCi:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetMinorCi:
	mov	eax, DWORD PTR tv69[ebp]

; 5779 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMinorCivApproachBias@CvLeaderHeadInfo@@QBEHH@Z ENDP	; CvLeaderHeadInfo::GetMinorCivApproachBias
_TEXT	ENDS
PUBLIC	?getArtDefineTag@CvLeaderHeadInfo@@QBEPBDXZ	; CvLeaderHeadInfo::getArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?getArtDefineTag@CvLeaderHeadInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtDefineTag@CvLeaderHeadInfo@@QBEPBDXZ PROC	; CvLeaderHeadInfo::getArtDefineTag, COMDAT
; _this$ = ecx

; 5782 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5783 : 	return m_strArtDefineTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 5784 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtDefineTag@CvLeaderHeadInfo@@QBEPBDXZ ENDP	; CvLeaderHeadInfo::getArtDefineTag
_TEXT	ENDS
PUBLIC	?setArtDefineTag@CvLeaderHeadInfo@@QAEXPBD@Z	; CvLeaderHeadInfo::setArtDefineTag
; Function compile flags: /Odtp
;	COMDAT ?setArtDefineTag@CvLeaderHeadInfo@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T235779 = -4						; size = 4
_szVal$ = 8						; size = 4
?setArtDefineTag@CvLeaderHeadInfo@@QAEXPBD@Z PROC	; CvLeaderHeadInfo::setArtDefineTag, COMDAT
; _this$ = ecx

; 5787 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5788 : 	m_strArtDefineTag = szVal;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 320				; 00000140H
	mov	DWORD PTR $T235779[ebp], eax
	cmp	DWORD PTR _szVal$[ebp], 0
	je	SHORT $LN4@setArtDefi@6
	mov	ecx, DWORD PTR _szVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T235779[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN1@setArtDefi@6
$LN4@setArtDefi@6:
	mov	ecx, DWORD PTR $T235779[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN1@setArtDefi@6:

; 5789 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?setArtDefineTag@CvLeaderHeadInfo@@QAEXPBD@Z ENDP	; CvLeaderHeadInfo::setArtDefineTag
_TEXT	ENDS
PUBLIC	?hasTrait@CvLeaderHeadInfo@@QBE_NH@Z		; CvLeaderHeadInfo::hasTrait
; Function compile flags: /Odtp
;	COMDAT ?hasTrait@CvLeaderHeadInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?hasTrait@CvLeaderHeadInfo@@QBE_NH@Z PROC		; CvLeaderHeadInfo::hasTrait, COMDAT
; _this$ = ecx

; 5792 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5793 : 	CvAssertMsg(i < GC.getNumTraitInfos(), "Index out of bounds");
; 5794 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5795 : 	return m_pbTraits ? m_pbTraits[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+348], 0
	je	SHORT $LN3@hasTrait
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+348]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@hasTrait
$LN3@hasTrait:
	mov	BYTE PTR tv68[ebp], 0
$LN4@hasTrait:
	mov	al, BYTE PTR tv68[ebp]

; 5796 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?hasTrait@CvLeaderHeadInfo@@QBE_NH@Z ENDP		; CvLeaderHeadInfo::hasTrait
_TEXT	ENDS
PUBLIC	?getFlavorValue@CvLeaderHeadInfo@@QBEHH@Z	; CvLeaderHeadInfo::getFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?getFlavorValue@CvLeaderHeadInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getFlavorValue@CvLeaderHeadInfo@@QBEHH@Z PROC		; CvLeaderHeadInfo::getFlavorValue, COMDAT
; _this$ = ecx

; 5799 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 5800 : 	CvAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 5801 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 5802 : 	return m_piFlavorValue ? m_piFlavorValue[i] : 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+352], 0
	je	SHORT $LN3@getFlavorV@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+352]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getFlavorV@2
$LN3@getFlavorV@2:
	mov	DWORD PTR tv69[ebp], 0
$LN4@getFlavorV@2:
	mov	eax, DWORD PTR tv69[ebp]

; 5803 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getFlavorValue@CvLeaderHeadInfo@@QBEHH@Z ENDP		; CvLeaderHeadInfo::getFlavorValue
_TEXT	ENDS
PUBLIC	?getLeaderHead@CvLeaderHeadInfo@@QBEPBDXZ	; CvLeaderHeadInfo::getLeaderHead
; Function compile flags: /Odtp
;	COMDAT ?getLeaderHead@CvLeaderHeadInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLeaderHead@CvLeaderHeadInfo@@QBEPBDXZ PROC		; CvLeaderHeadInfo::getLeaderHead, COMDAT
; _this$ = ecx

; 5806 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5807 : 	return NULL;

	xor	eax, eax

; 5808 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLeaderHead@CvLeaderHeadInfo@@QBEPBDXZ ENDP		; CvLeaderHeadInfo::getLeaderHead
_TEXT	ENDS
PUBLIC	??_C@_0O@EEFFOENK@Leader_Traits?$AA@		; `string'
PUBLIC	??_C@_0BG@IBCDIBNF@MinorCivApproachTypes?$AA@	; `string'
PUBLIC	??_C@_0BO@CICLDIEI@Leader_MinorCivApproachBiases?$AA@ ; `string'
PUBLIC	??_C@_0BF@FEJLDIFC@MinorCivApproachType?$AA@	; `string'
PUBLIC	??_C@_0BG@OKDMGDPK@MajorCivApproachTypes?$AA@	; `string'
PUBLIC	??_C@_0BO@IDJBBKPD@Leader_MajorCivApproachBiases?$AA@ ; `string'
PUBLIC	??_C@_0BF@CACIODAC@MajorCivApproachType?$AA@	; `string'
PUBLIC	??_C@_04BAMHDAGA@Bias?$AA@			; `string'
PUBLIC	??_C@_0P@PEFCPCE@Leader_Flavors?$AA@		; `string'
PUBLIC	??_C@_0L@GIOGIPIO@LeaderType?$AA@		; `string'
PUBLIC	??_C@_08MJEALKIE@Meanness?$AA@			; `string'
PUBLIC	??_C@_0L@DFGDOHHP@Chattiness?$AA@		; `string'
PUBLIC	??_C@_0M@DCJMACPP@Forgiveness?$AA@		; `string'
PUBLIC	??_C@_09DKKEMOOL@Neediness?$AA@			; `string'
PUBLIC	??_C@_07MNJLIDEE@Loyalty?$AA@			; `string'
PUBLIC	??_C@_0P@MEPPJLDE@DoFWillingness?$AA@		; `string'
PUBLIC	??_C@_0BE@BHNPHKAE@DenounceWillingness?$AA@	; `string'
PUBLIC	??_C@_0O@LNLKJPIL@WarmongerHate?$AA@		; `string'
PUBLIC	??_C@_0N@JKJIJFBH@DiploBalance?$AA@		; `string'
PUBLIC	??_C@_08EHHFCLDL@Boldness?$AA@			; `string'
PUBLIC	??_C@_0BI@MDHCECEF@MinorCivCompetitiveness?$AA@	; `string'
PUBLIC	??_C@_0BG@PHDFBHLK@WonderCompetitiveness?$AA@	; `string'
PUBLIC	??_C@_0BH@HODMBEIG@VictoryCompetitiveness?$AA@	; `string'
;	COMDAT ??_C@_0O@EEFFOENK@Leader_Traits?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0O@EEFFOENK@Leader_Traits?$AA@ DB 'Leader_Traits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IBCDIBNF@MinorCivApproachTypes?$AA@
CONST	SEGMENT
??_C@_0BG@IBCDIBNF@MinorCivApproachTypes?$AA@ DB 'MinorCivApproachTypes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CICLDIEI@Leader_MinorCivApproachBiases?$AA@
CONST	SEGMENT
??_C@_0BO@CICLDIEI@Leader_MinorCivApproachBiases?$AA@ DB 'Leader_MinorCiv'
	DB	'ApproachBiases', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FEJLDIFC@MinorCivApproachType?$AA@
CONST	SEGMENT
??_C@_0BF@FEJLDIFC@MinorCivApproachType?$AA@ DB 'MinorCivApproachType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OKDMGDPK@MajorCivApproachTypes?$AA@
CONST	SEGMENT
??_C@_0BG@OKDMGDPK@MajorCivApproachTypes?$AA@ DB 'MajorCivApproachTypes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IDJBBKPD@Leader_MajorCivApproachBiases?$AA@
CONST	SEGMENT
??_C@_0BO@IDJBBKPD@Leader_MajorCivApproachBiases?$AA@ DB 'Leader_MajorCiv'
	DB	'ApproachBiases', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CACIODAC@MajorCivApproachType?$AA@
CONST	SEGMENT
??_C@_0BF@CACIODAC@MajorCivApproachType?$AA@ DB 'MajorCivApproachType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BAMHDAGA@Bias?$AA@
CONST	SEGMENT
??_C@_04BAMHDAGA@Bias?$AA@ DB 'Bias', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEFCPCE@Leader_Flavors?$AA@
CONST	SEGMENT
??_C@_0P@PEFCPCE@Leader_Flavors?$AA@ DB 'Leader_Flavors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GIOGIPIO@LeaderType?$AA@
CONST	SEGMENT
??_C@_0L@GIOGIPIO@LeaderType?$AA@ DB 'LeaderType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MJEALKIE@Meanness?$AA@
CONST	SEGMENT
??_C@_08MJEALKIE@Meanness?$AA@ DB 'Meanness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DFGDOHHP@Chattiness?$AA@
CONST	SEGMENT
??_C@_0L@DFGDOHHP@Chattiness?$AA@ DB 'Chattiness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DCJMACPP@Forgiveness?$AA@
CONST	SEGMENT
??_C@_0M@DCJMACPP@Forgiveness?$AA@ DB 'Forgiveness', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKKEMOOL@Neediness?$AA@
CONST	SEGMENT
??_C@_09DKKEMOOL@Neediness?$AA@ DB 'Neediness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MNJLIDEE@Loyalty?$AA@
CONST	SEGMENT
??_C@_07MNJLIDEE@Loyalty?$AA@ DB 'Loyalty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MEPPJLDE@DoFWillingness?$AA@
CONST	SEGMENT
??_C@_0P@MEPPJLDE@DoFWillingness?$AA@ DB 'DoFWillingness', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHNPHKAE@DenounceWillingness?$AA@
CONST	SEGMENT
??_C@_0BE@BHNPHKAE@DenounceWillingness?$AA@ DB 'DenounceWillingness', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LNLKJPIL@WarmongerHate?$AA@
CONST	SEGMENT
??_C@_0O@LNLKJPIL@WarmongerHate?$AA@ DB 'WarmongerHate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKJIJFBH@DiploBalance?$AA@
CONST	SEGMENT
??_C@_0N@JKJIJFBH@DiploBalance?$AA@ DB 'DiploBalance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHHFCLDL@Boldness?$AA@
CONST	SEGMENT
??_C@_08EHHFCLDL@Boldness?$AA@ DB 'Boldness', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MDHCECEF@MinorCivCompetitiveness?$AA@
CONST	SEGMENT
??_C@_0BI@MDHCECEF@MinorCivCompetitiveness?$AA@ DB 'MinorCivCompetitivene'
	DB	'ss', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PHDFBHLK@WonderCompetitiveness?$AA@
CONST	SEGMENT
??_C@_0BG@PHDFBHLK@WonderCompetitiveness?$AA@ DB 'WonderCompetitiveness', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HODMBEIG@VictoryCompetitiveness?$AA@
CONST	SEGMENT
??_C@_0BH@HODMBEIG@VictoryCompetitiveness?$AA@ DB 'VictoryCompetitiveness'
	DB	00H						; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvLeaderHeadInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_szType$ = -8						; size = 4
_szTextVal$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvLeaderHeadInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvLeaderHeadInfo::CacheResults, COMDAT
; _this$ = ecx

; 5811 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 5812 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@28

; 5813 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@28
$LN1@CacheResul@28:

; 5814 : 
; 5815 : 	//Basic Properties
; 5816 : 
; 5817 : 	const char* szTextVal = NULL;	//Temp storage

	mov	DWORD PTR _szTextVal$[ebp], 0

; 5818 : 	szTextVal = kResults.GetText("ArtDefineTag");

	push	OFFSET ??_C@_0N@NLPPFOOH@ArtDefineTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 5819 : 	setArtDefineTag(szTextVal);

	mov	eax, DWORD PTR _szTextVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setArtDefineTag@CvLeaderHeadInfo@@QAEXPBD@Z ; CvLeaderHeadInfo::setArtDefineTag

; 5820 : 
; 5821 : 	m_iVictoryCompetitiveness					= kResults.GetInt("VictoryCompetitiveness");

	push	OFFSET ??_C@_0BH@HODMBEIG@VictoryCompetitiveness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 5822 : 	m_iWonderCompetitiveness					= kResults.GetInt("WonderCompetitiveness");

	push	OFFSET ??_C@_0BG@PHDFBHLK@WonderCompetitiveness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 5823 : 	m_iMinorCivCompetitiveness					= kResults.GetInt("MinorCivCompetitiveness");

	push	OFFSET ??_C@_0BI@MDHCECEF@MinorCivCompetitiveness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 5824 : 	m_iBoldness									= kResults.GetInt("Boldness");

	push	OFFSET ??_C@_08EHHFCLDL@Boldness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 5825 : 	m_iDiploBalance									= kResults.GetInt("DiploBalance");

	push	OFFSET ??_C@_0N@JKJIJFBH@DiploBalance?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 5826 : 	m_iWarmongerHate									= kResults.GetInt("WarmongerHate");

	push	OFFSET ??_C@_0O@LNLKJPIL@WarmongerHate?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 5827 : 	m_iDenounceWillingness									= kResults.GetInt("DenounceWillingness");

	push	OFFSET ??_C@_0BE@BHNPHKAE@DenounceWillingness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 5828 : 	m_iDoFWillingness									= kResults.GetInt("DoFWillingness");

	push	OFFSET ??_C@_0P@MEPPJLDE@DoFWillingness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], eax

; 5829 : 	m_iLoyalty									= kResults.GetInt("Loyalty");

	push	OFFSET ??_C@_07MNJLIDEE@Loyalty?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], eax

; 5830 : 	m_iNeediness									= kResults.GetInt("Neediness");

	push	OFFSET ??_C@_09DKKEMOOL@Neediness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], eax

; 5831 : 	m_iForgiveness									= kResults.GetInt("Forgiveness");

	push	OFFSET ??_C@_0M@DCJMACPP@Forgiveness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax

; 5832 : 	m_iChattiness									= kResults.GetInt("Chattiness");

	push	OFFSET ??_C@_0L@DFGDOHHP@Chattiness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+304], eax

; 5833 : 	m_iMeanness									= kResults.GetInt("Meanness");

	push	OFFSET ??_C@_08MJEALKIE@Meanness?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], eax

; 5834 : 
; 5835 : 	//Arrays
; 5836 : 	const char* szType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szType$[ebp], eax

; 5837 : 
; 5838 : 	kUtility.SetFlavors(m_piFlavorValue, "Leader_Flavors", "LeaderType", szType);

	push	0
	mov	edx, DWORD PTR _szType$[ebp]
	push	edx
	push	OFFSET ??_C@_0L@GIOGIPIO@LeaderType?$AA@
	push	OFFSET ??_C@_0P@PEFCPCE@Leader_Flavors?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 352				; 00000160H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 5839 : 
; 5840 : 	kUtility.PopulateArrayByValue(m_piMajorCivApproachBiases, "MajorCivApproachTypes", "Leader_MajorCivApproachBiases", "MajorCivApproachType", "LeaderType", szType, "Bias");

	push	0
	push	0
	push	OFFSET ??_C@_04BAMHDAGA@Bias?$AA@
	mov	ecx, DWORD PTR _szType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@GIOGIPIO@LeaderType?$AA@
	push	OFFSET ??_C@_0BF@CACIODAC@MajorCivApproachType?$AA@
	push	OFFSET ??_C@_0BO@IDJBBKPD@Leader_MajorCivApproachBiases?$AA@
	push	OFFSET ??_C@_0BG@OKDMGDPK@MajorCivApproachTypes?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 312				; 00000138H
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 5841 : 
; 5842 : 	kUtility.PopulateArrayByValue(m_piMinorCivApproachBiases, "MinorCivApproachTypes", "Leader_MinorCivApproachBiases", "MinorCivApproachType", "LeaderType", szType, "Bias");

	push	0
	push	0
	push	OFFSET ??_C@_04BAMHDAGA@Bias?$AA@
	mov	eax, DWORD PTR _szType$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@GIOGIPIO@LeaderType?$AA@
	push	OFFSET ??_C@_0BF@FEJLDIFC@MinorCivApproachType?$AA@
	push	OFFSET ??_C@_0BO@CICLDIEI@Leader_MinorCivApproachBiases?$AA@
	push	OFFSET ??_C@_0BG@IBCDIBNF@MinorCivApproachTypes?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByValue@CvDatabaseUtility@@QAE_NAAPAHPBD11111HH@Z ; CvDatabaseUtility::PopulateArrayByValue

; 5843 : 
; 5844 : 	kUtility.PopulateArrayByExistence(m_pbTraits, "Traits", "Leader_Traits", "TraitType", "LeaderType", szType);

	mov	edx, DWORD PTR _szType$[ebp]
	push	edx
	push	OFFSET ??_C@_0L@GIOGIPIO@LeaderType?$AA@
	push	OFFSET ??_C@_09HHNMMNID@TraitType?$AA@
	push	OFFSET ??_C@_0O@EEFFOENK@Leader_Traits?$AA@
	push	OFFSET ??_C@_06EGHFENCC@Traits?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 5845 : 
; 5846 : 	return true;

	mov	al, 1
$LN2@CacheResul@28:

; 5847 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvLeaderHeadInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvLeaderHeadInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvWorldInfo@@6B@				; CvWorldInfo::`vftable'
PUBLIC	??0CvWorldInfo@@QAE@XZ				; CvWorldInfo::CvWorldInfo
PUBLIC	?CacheResults@CvWorldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvWorldInfo::CacheResults
PUBLIC	?readFrom@CvWorldInfo@@UAEXAAVFDataStream@@@Z	; CvWorldInfo::readFrom
PUBLIC	?writeTo@CvWorldInfo@@UBEXAAVFDataStream@@@Z	; CvWorldInfo::writeTo
PUBLIC	??8CvWorldInfo@@UBE_NABV0@@Z			; CvWorldInfo::operator==
;	COMDAT ??_7CvWorldInfo@@6B@
CONST	SEGMENT
??_7CvWorldInfo@@6B@ DD FLAT:?CacheResults@CvWorldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvWorldInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvWorldInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvWorldInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??8CvWorldInfo@@UBE_NABV0@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvWorldInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvWorldInfo@@QAE@XZ PROC				; CvWorldInfo::CvWorldInfo, COMDAT
; _this$ = ecx

; 5873 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvWorldInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], 100		; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 10			; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], 0

; 5874 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvWorldInfo@@QAE@XZ ENDP				; CvWorldInfo::CvWorldInfo
_TEXT	ENDS
PUBLIC	?getDefaultPlayers@CvWorldInfo@@QBEHXZ		; CvWorldInfo::getDefaultPlayers
; Function compile flags: /Odtp
;	COMDAT ?getDefaultPlayers@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefaultPlayers@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getDefaultPlayers, COMDAT
; _this$ = ecx

; 5877 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5878 : 	return m_iDefaultPlayers;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 5879 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefaultPlayers@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getDefaultPlayers
_TEXT	ENDS
PUBLIC	?getDefaultMinorCivs@CvWorldInfo@@QBEHXZ	; CvWorldInfo::getDefaultMinorCivs
; Function compile flags: /Odtp
;	COMDAT ?getDefaultMinorCivs@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefaultMinorCivs@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getDefaultMinorCivs, COMDAT
; _this$ = ecx

; 5882 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5883 : 	return m_iDefaultMinorCivs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 5884 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefaultMinorCivs@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getDefaultMinorCivs
_TEXT	ENDS
PUBLIC	?getFogTilesPerBarbarianCamp@CvWorldInfo@@QBEHXZ ; CvWorldInfo::getFogTilesPerBarbarianCamp
; Function compile flags: /Odtp
;	COMDAT ?getFogTilesPerBarbarianCamp@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFogTilesPerBarbarianCamp@CvWorldInfo@@QBEHXZ PROC	; CvWorldInfo::getFogTilesPerBarbarianCamp, COMDAT
; _this$ = ecx

; 5887 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5888 : 	return m_iFogTilesPerBarbarianCamp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 5889 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFogTilesPerBarbarianCamp@CvWorldInfo@@QBEHXZ ENDP	; CvWorldInfo::getFogTilesPerBarbarianCamp
_TEXT	ENDS
PUBLIC	?getNumNaturalWonders@CvWorldInfo@@QBEHXZ	; CvWorldInfo::getNumNaturalWonders
; Function compile flags: /Odtp
;	COMDAT ?getNumNaturalWonders@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumNaturalWonders@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getNumNaturalWonders, COMDAT
; _this$ = ecx

; 5892 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5893 : 	return m_iNumNaturalWonders;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 5894 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumNaturalWonders@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getNumNaturalWonders
_TEXT	ENDS
PUBLIC	?getUnitNameModifier@CvWorldInfo@@QBEHXZ	; CvWorldInfo::getUnitNameModifier
; Function compile flags: /Odtp
;	COMDAT ?getUnitNameModifier@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUnitNameModifier@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getUnitNameModifier, COMDAT
; _this$ = ecx

; 5897 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5898 : 	return m_iUnitNameModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 5899 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUnitNameModifier@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getUnitNameModifier
_TEXT	ENDS
PUBLIC	?getTargetNumCities@CvWorldInfo@@QBEHXZ		; CvWorldInfo::getTargetNumCities
; Function compile flags: /Odtp
;	COMDAT ?getTargetNumCities@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTargetNumCities@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getTargetNumCities, COMDAT
; _this$ = ecx

; 5902 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5903 : 	return m_iTargetNumCities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 5904 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTargetNumCities@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getTargetNumCities
_TEXT	ENDS
PUBLIC	?getNumFreeBuildingResources@CvWorldInfo@@QBEHXZ ; CvWorldInfo::getNumFreeBuildingResources
; Function compile flags: /Odtp
;	COMDAT ?getNumFreeBuildingResources@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumFreeBuildingResources@CvWorldInfo@@QBEHXZ PROC	; CvWorldInfo::getNumFreeBuildingResources, COMDAT
; _this$ = ecx

; 5907 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5908 : 	return m_iNumFreeBuildingResources;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 5909 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumFreeBuildingResources@CvWorldInfo@@QBEHXZ ENDP	; CvWorldInfo::getNumFreeBuildingResources
_TEXT	ENDS
PUBLIC	?getBuildingClassPrereqModifier@CvWorldInfo@@QBEHXZ ; CvWorldInfo::getBuildingClassPrereqModifier
; Function compile flags: /Odtp
;	COMDAT ?getBuildingClassPrereqModifier@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildingClassPrereqModifier@CvWorldInfo@@QBEHXZ PROC ; CvWorldInfo::getBuildingClassPrereqModifier, COMDAT
; _this$ = ecx

; 5912 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5913 : 	return m_iBuildingClassPrereqModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 5914 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildingClassPrereqModifier@CvWorldInfo@@QBEHXZ ENDP ; CvWorldInfo::getBuildingClassPrereqModifier
_TEXT	ENDS
PUBLIC	?getMaxConscriptModifier@CvWorldInfo@@QBEHXZ	; CvWorldInfo::getMaxConscriptModifier
; Function compile flags: /Odtp
;	COMDAT ?getMaxConscriptModifier@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMaxConscriptModifier@CvWorldInfo@@QBEHXZ PROC	; CvWorldInfo::getMaxConscriptModifier, COMDAT
; _this$ = ecx

; 5917 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5918 : 	return m_iMaxConscriptModifier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 5919 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxConscriptModifier@CvWorldInfo@@QBEHXZ ENDP	; CvWorldInfo::getMaxConscriptModifier
_TEXT	ENDS
PUBLIC	?getGridWidth@CvWorldInfo@@QBEHXZ		; CvWorldInfo::getGridWidth
; Function compile flags: /Odtp
;	COMDAT ?getGridWidth@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGridWidth@CvWorldInfo@@QBEHXZ PROC			; CvWorldInfo::getGridWidth, COMDAT
; _this$ = ecx

; 5922 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5923 : 	return m_iGridWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 5924 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGridWidth@CvWorldInfo@@QBEHXZ ENDP			; CvWorldInfo::getGridWidth
_TEXT	ENDS
PUBLIC	?getGridHeight@CvWorldInfo@@QBEHXZ		; CvWorldInfo::getGridHeight
; Function compile flags: /Odtp
;	COMDAT ?getGridHeight@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGridHeight@CvWorldInfo@@QBEHXZ PROC			; CvWorldInfo::getGridHeight, COMDAT
; _this$ = ecx

; 5927 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5928 : 	return m_iGridHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 5929 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGridHeight@CvWorldInfo@@QBEHXZ ENDP			; CvWorldInfo::getGridHeight
_TEXT	ENDS
PUBLIC	??_C@_0CB@PELLOPFK@GAMEOPTION_ALLOW_EXTRA_RELIGIONS@ ; `string'
PUBLIC	?getMaxActiveReligions@CvWorldInfo@@QBEHXZ	; CvWorldInfo::getMaxActiveReligions
EXTRN	?countMajorCivsEverAlive@CvGame@@QBEHXZ:PROC	; CvGame::countMajorCivsEverAlive
EXTRN	?isOption@CvGame@@QBE_NPBD@Z:PROC		; CvGame::isOption
;	COMDAT ??_C@_0CB@PELLOPFK@GAMEOPTION_ALLOW_EXTRA_RELIGIONS@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvglobals.h
CONST	SEGMENT
??_C@_0CB@PELLOPFK@GAMEOPTION_ALLOW_EXTRA_RELIGIONS@ DB 'GAMEOPTION_ALLOW'
	DB	'_EXTRA_RELIGIONS', 00H			; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?getMaxActiveReligions@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T235829 = -8						; size = 4
$T235825 = -4						; size = 4
?getMaxActiveReligions@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getMaxActiveReligions, COMDAT
; _this$ = ecx

; 5932 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 5933 : #ifdef NQ_ALLOW_EXTRA_RELIGIONS
; 5934 : 	if (GC.getGame().isOption("GAMEOPTION_ALLOW_EXTRA_RELIGIONS"))

	mov	eax, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T235825[ebp], eax
	push	OFFSET ??_C@_0CB@PELLOPFK@GAMEOPTION_ALLOW_EXTRA_RELIGIONS@
	mov	ecx, DWORD PTR $T235825[ebp]
	call	?isOption@CvGame@@QBE_NPBD@Z		; CvGame::isOption
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@getMaxActi

; 5935 : 	{
; 5936 : 		return GC.getGame().countMajorCivsEverAlive();

	mov	edx, DWORD PTR ?gGlobals@@3VCvGlobals@@A+48
	mov	DWORD PTR $T235829[ebp], edx
	mov	ecx, DWORD PTR $T235829[ebp]
	call	?countMajorCivsEverAlive@CvGame@@QBEHXZ	; CvGame::countMajorCivsEverAlive
	jmp	SHORT $LN2@getMaxActi
$LN1@getMaxActi:

; 5937 : 	}
; 5938 : #endif
; 5939 : 
; 5940 : 	return m_iMaxActiveReligions;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]
$LN2@getMaxActi:

; 5941 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMaxActiveReligions@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getMaxActiveReligions
_TEXT	ENDS
PUBLIC	?getTerrainGrainChange@CvWorldInfo@@QBEHXZ	; CvWorldInfo::getTerrainGrainChange
; Function compile flags: /Odtp
;	COMDAT ?getTerrainGrainChange@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTerrainGrainChange@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getTerrainGrainChange, COMDAT
; _this$ = ecx

; 5944 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5945 : 	return m_iTerrainGrainChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 5946 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTerrainGrainChange@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getTerrainGrainChange
_TEXT	ENDS
PUBLIC	?getFeatureGrainChange@CvWorldInfo@@QBEHXZ	; CvWorldInfo::getFeatureGrainChange
; Function compile flags: /Odtp
;	COMDAT ?getFeatureGrainChange@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFeatureGrainChange@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getFeatureGrainChange, COMDAT
; _this$ = ecx

; 5949 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5950 : 	return m_iFeatureGrainChange;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+312]

; 5951 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFeatureGrainChange@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getFeatureGrainChange
_TEXT	ENDS
PUBLIC	?getResearchPercent@CvWorldInfo@@QBEHXZ		; CvWorldInfo::getResearchPercent
; Function compile flags: /Odtp
;	COMDAT ?getResearchPercent@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResearchPercent@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::getResearchPercent, COMDAT
; _this$ = ecx

; 5954 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5955 : 	return m_iResearchPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 5956 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResearchPercent@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::getResearchPercent
_TEXT	ENDS
PUBLIC	?getAdvancedStartPointsMod@CvWorldInfo@@QBEHXZ	; CvWorldInfo::getAdvancedStartPointsMod
; Function compile flags: /Odtp
;	COMDAT ?getAdvancedStartPointsMod@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAdvancedStartPointsMod@CvWorldInfo@@QBEHXZ PROC	; CvWorldInfo::getAdvancedStartPointsMod, COMDAT
; _this$ = ecx

; 5959 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5960 : 	return m_iAdvancedStartPointsMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]

; 5961 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAdvancedStartPointsMod@CvWorldInfo@@QBEHXZ ENDP	; CvWorldInfo::getAdvancedStartPointsMod
_TEXT	ENDS
PUBLIC	?getNumCitiesUnhappinessPercent@CvWorldInfo@@QBEHXZ ; CvWorldInfo::getNumCitiesUnhappinessPercent
; Function compile flags: /Odtp
;	COMDAT ?getNumCitiesUnhappinessPercent@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumCitiesUnhappinessPercent@CvWorldInfo@@QBEHXZ PROC ; CvWorldInfo::getNumCitiesUnhappinessPercent, COMDAT
; _this$ = ecx

; 5964 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5965 : 	return m_iNumCitiesUnhappinessPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+324]

; 5966 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getNumCitiesUnhappinessPercent@CvWorldInfo@@QBEHXZ ENDP ; CvWorldInfo::getNumCitiesUnhappinessPercent
_TEXT	ENDS
PUBLIC	?GetNumCitiesPolicyCostMod@CvWorldInfo@@QBEHXZ	; CvWorldInfo::GetNumCitiesPolicyCostMod
; Function compile flags: /Odtp
;	COMDAT ?GetNumCitiesPolicyCostMod@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumCitiesPolicyCostMod@CvWorldInfo@@QBEHXZ PROC	; CvWorldInfo::GetNumCitiesPolicyCostMod, COMDAT
; _this$ = ecx

; 5969 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5970 : 	return m_iNumCitiesPolicyCostMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]

; 5971 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumCitiesPolicyCostMod@CvWorldInfo@@QBEHXZ ENDP	; CvWorldInfo::GetNumCitiesPolicyCostMod
_TEXT	ENDS
PUBLIC	?GetNumCitiesTechCostMod@CvWorldInfo@@QBEHXZ	; CvWorldInfo::GetNumCitiesTechCostMod
; Function compile flags: /Odtp
;	COMDAT ?GetNumCitiesTechCostMod@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumCitiesTechCostMod@CvWorldInfo@@QBEHXZ PROC	; CvWorldInfo::GetNumCitiesTechCostMod, COMDAT
; _this$ = ecx

; 5974 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5975 : 	return m_iNumCitiesTechCostMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+332]

; 5976 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumCitiesTechCostMod@CvWorldInfo@@QBEHXZ ENDP	; CvWorldInfo::GetNumCitiesTechCostMod
_TEXT	ENDS
PUBLIC	?GetEstimatedNumCities@CvWorldInfo@@QBEHXZ	; CvWorldInfo::GetEstimatedNumCities
; Function compile flags: /Odtp
;	COMDAT ?GetEstimatedNumCities@CvWorldInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEstimatedNumCities@CvWorldInfo@@QBEHXZ PROC		; CvWorldInfo::GetEstimatedNumCities, COMDAT
; _this$ = ecx

; 5979 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 5980 : 	return m_iEstimatedNumCities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+336]

; 5981 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEstimatedNumCities@CvWorldInfo@@QBEHXZ ENDP		; CvWorldInfo::GetEstimatedNumCities
_TEXT	ENDS
PUBLIC	??1CvWorldInfo@@QAE@XZ				; CvWorldInfo::~CvWorldInfo
PUBLIC	??0CvWorldInfo@@QAE@ABV0@@Z			; CvWorldInfo::CvWorldInfo
PUBLIC	__$ArrayPad$
PUBLIC	?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z ; CvWorldInfo::CreateCustomWorldSize
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z$0
__ehfuncinfo$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z
_TEXT	SEGMENT
$T235851 = -368						; size = 4
_kWorldInfo$ = -364					; size = 340
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_kTemplate$ = 12					; size = 4
_iWidth$ = 16						; size = 4
_iHeight$ = 20						; size = 4
?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z PROC ; CvWorldInfo::CreateCustomWorldSize, COMDAT

; 5984 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 392				; 00000188H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T235851[ebp], 0

; 5985 : 	CvWorldInfo kWorldInfo(kTemplate);

	mov	eax, DWORD PTR _kTemplate$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kWorldInfo$[ebp]
	call	??0CvWorldInfo@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5986 : 	kWorldInfo.m_iGridWidth = iWidth;

	mov	ecx, DWORD PTR _iWidth$[ebp]
	mov	DWORD PTR _kWorldInfo$[ebp+296], ecx

; 5987 : 	kWorldInfo.m_iGridHeight = iHeight;

	mov	edx, DWORD PTR _iHeight$[ebp]
	mov	DWORD PTR _kWorldInfo$[ebp+300], edx

; 5988 : 
; 5989 : 	return kWorldInfo;

	lea	eax, DWORD PTR _kWorldInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CvWorldInfo@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR $T235851[ebp]
	or	ecx, 1
	mov	DWORD PTR $T235851[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _kWorldInfo$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5990 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z$0:
	lea	ecx, DWORD PTR _kWorldInfo$[ebp]
	jmp	??1CvWorldInfo@@QAE@XZ
__unwindfunclet$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z$1:
	mov	eax, DWORD PTR $T235851[ebp]
	and	eax, 1
	je	$LN5@CreateCust
	and	DWORD PTR $T235851[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvWorldInfo@@QAE@XZ
$LN5@CreateCust:
	ret	0
__ehhandler$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-396]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HH@Z ENDP ; CvWorldInfo::CreateCustomWorldSize
PUBLIC	??0CvBaseInfo@@QAE@ABV0@@Z			; CvBaseInfo::CvBaseInfo
; Function compile flags: /Odtp
;	COMDAT ??0CvWorldInfo@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -40						; size = 4
___that$ = 8						; size = 4
??0CvWorldInfo@@QAE@ABV0@@Z PROC			; CvWorldInfo::CvWorldInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7CvWorldInfo@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	DWORD PTR [edx+260], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	mov	DWORD PTR [edx+264], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+268]
	mov	DWORD PTR [edx+268], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+272]
	mov	DWORD PTR [edx+272], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	mov	DWORD PTR [edx+276], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+280]
	mov	DWORD PTR [edx+280], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+284]
	mov	DWORD PTR [edx+284], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	mov	DWORD PTR [edx+288], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	mov	DWORD PTR [edx+292], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR [edx+296], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	mov	DWORD PTR [edx+300], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	mov	DWORD PTR [edx+304], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	mov	DWORD PTR [edx+308], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+312]
	mov	DWORD PTR [edx+312], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+316]
	mov	DWORD PTR [edx+316], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+320]
	mov	DWORD PTR [edx+320], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+324]
	mov	DWORD PTR [edx+324], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+328]
	mov	DWORD PTR [edx+328], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+332]
	mov	DWORD PTR [edx+332], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+336]
	mov	DWORD PTR [edx+336], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CvWorldInfo@@QAE@ABV0@@Z ENDP			; CvWorldInfo::CvWorldInfo
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvWorldInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
??1CvWorldInfo@@QAE@XZ PROC				; CvWorldInfo::~CvWorldInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvWorldInfo@@QAE@XZ ENDP				; CvWorldInfo::~CvWorldInfo
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CvBaseInfo@@QAE@ABV0@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0CvBaseInfo@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvBaseInfo@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$7
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0CvBaseInfo@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T236103 = -48						; size = 4
$T236098 = -44						; size = 4
$T236093 = -40						; size = 4
$T236088 = -36						; size = 4
$T236083 = -32						; size = 4
$T236078 = -28						; size = 4
$T236073 = -24						; size = 4
$T236068 = -20						; size = 4
$T236063 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CvBaseInfo@@QAE@ABV0@@Z PROC				; CvBaseInfo::CvBaseInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvBaseInfo@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvBaseInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T236063[ebp], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR $T236063[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR $T236068[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR $T236068[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR $T236073[ebp], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR $T236073[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR $T236078[ebp], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 92					; 0000005cH
	push	edx
	mov	ecx, DWORD PTR $T236078[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR $T236083[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 120				; 00000078H
	push	ecx
	mov	ecx, DWORD PTR $T236083[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 148				; 00000094H
	mov	DWORD PTR $T236088[ebp], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 148				; 00000094H
	push	eax
	mov	ecx, DWORD PTR $T236088[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	mov	DWORD PTR $T236093[ebp], ecx
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 176				; 000000b0H
	push	edx
	mov	ecx, DWORD PTR $T236093[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 204				; 000000ccH
	mov	DWORD PTR $T236098[ebp], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 204				; 000000ccH
	push	ecx
	mov	ecx, DWORD PTR $T236098[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 232				; 000000e8H
	mov	DWORD PTR $T236103[ebp], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 232				; 000000e8H
	push	eax
	mov	ecx, DWORD PTR $T236103[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvBaseInfo@@QAE@ABV0@@Z$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvBaseInfo@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvBaseInfo@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvBaseInfo@@QAE@ABV0@@Z ENDP				; CvBaseInfo::CvBaseInfo
PUBLIC	__$ArrayPad$
PUBLIC	?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z ; CvWorldInfo::CreateCustomWorldSize
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z$0
__ehfuncinfo$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z
_TEXT	SEGMENT
$T236115 = -368						; size = 4
_kWorldInfo$ = -364					; size = 340
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_kTemplate$ = 12					; size = 4
_iWidth$ = 16						; size = 4
_iHeight$ = 20						; size = 4
_iPlayers$ = 24						; size = 4
_iMinorCivs$ = 28					; size = 4
?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z PROC ; CvWorldInfo::CreateCustomWorldSize, COMDAT

; 5993 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 392				; 00000188H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T236115[ebp], 0

; 5994 : 	CvWorldInfo kWorldInfo(kTemplate);

	mov	eax, DWORD PTR _kTemplate$[ebp]
	push	eax
	lea	ecx, DWORD PTR _kWorldInfo$[ebp]
	call	??0CvWorldInfo@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 5995 : 	kWorldInfo.m_iGridWidth = iWidth;

	mov	ecx, DWORD PTR _iWidth$[ebp]
	mov	DWORD PTR _kWorldInfo$[ebp+296], ecx

; 5996 : 	kWorldInfo.m_iGridHeight = iHeight;

	mov	edx, DWORD PTR _iHeight$[ebp]
	mov	DWORD PTR _kWorldInfo$[ebp+300], edx

; 5997 : 	kWorldInfo.m_iDefaultPlayers = iPlayers;

	mov	eax, DWORD PTR _iPlayers$[ebp]
	mov	DWORD PTR _kWorldInfo$[ebp+260], eax

; 5998 : 	kWorldInfo.m_iDefaultMinorCivs = iMinorCivs;

	mov	ecx, DWORD PTR _iMinorCivs$[ebp]
	mov	DWORD PTR _kWorldInfo$[ebp+264], ecx

; 5999 : 
; 6000 : 	return kWorldInfo;

	lea	edx, DWORD PTR _kWorldInfo$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CvWorldInfo@@QAE@ABV0@@Z
	mov	eax, DWORD PTR $T236115[ebp]
	or	eax, 1
	mov	DWORD PTR $T236115[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _kWorldInfo$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 6001 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z$0:
	lea	ecx, DWORD PTR _kWorldInfo$[ebp]
	jmp	??1CvWorldInfo@@QAE@XZ
__unwindfunclet$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z$1:
	mov	eax, DWORD PTR $T236115[ebp]
	and	eax, 1
	je	$LN5@CreateCust@2
	and	DWORD PTR $T236115[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1CvWorldInfo@@QAE@XZ
$LN5@CreateCust@2:
	ret	0
__ehhandler$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-396]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateCustomWorldSize@CvWorldInfo@@SA?AV1@ABV1@HHHH@Z ENDP ; CvWorldInfo::CreateCustomWorldSize
PUBLIC	??_C@_0BD@CIINCNCA@EstimatedNumCities?$AA@	; `string'
PUBLIC	??_C@_0BF@OAMAHNCG@NumCitiesTechCostMod?$AA@	; `string'
PUBLIC	??_C@_0BH@LLHAGGMP@NumCitiesPolicyCostMod?$AA@	; `string'
PUBLIC	??_C@_0BM@DLKKJIIN@NumCitiesUnhappinessPercent?$AA@ ; `string'
PUBLIC	??_C@_0BD@HGMMEAGB@FeatureGrainChange?$AA@	; `string'
PUBLIC	??_C@_0BD@GDNJEIJ@TerrainGrainChange?$AA@	; `string'
PUBLIC	??_C@_0BD@FPCAGE@MaxActiveReligions?$AA@	; `string'
PUBLIC	??_C@_0L@CNEPNHHP@GridHeight?$AA@		; `string'
PUBLIC	??_C@_09MBCKNPGB@GridWidth?$AA@			; `string'
PUBLIC	??_C@_0BF@NJHLIGFD@MaxConscriptModifier?$AA@	; `string'
PUBLIC	??_C@_0BM@BOMPLEJP@BuildingClassPrereqModifier?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DLHFOLOE@NumFreeBuildingResources?$AA@ ; `string'
PUBLIC	??_C@_0BA@FJKBNHCI@TargetNumCities?$AA@		; `string'
PUBLIC	??_C@_0BB@HLKKOKDG@UnitNameModifier?$AA@	; `string'
PUBLIC	??_C@_0BC@GKFJEMFJ@NumNaturalWonders?$AA@	; `string'
PUBLIC	??_C@_0BJ@DHDAENIO@FogTilesPerBarbarianCamp?$AA@ ; `string'
PUBLIC	??_C@_0BB@IGMKBBKO@DefaultMinorCivs?$AA@	; `string'
PUBLIC	??_C@_0P@OFBALEBM@DefaultPlayers?$AA@		; `string'
;	COMDAT ??_C@_0BD@CIINCNCA@EstimatedNumCities?$AA@
CONST	SEGMENT
??_C@_0BD@CIINCNCA@EstimatedNumCities?$AA@ DB 'EstimatedNumCities', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OAMAHNCG@NumCitiesTechCostMod?$AA@
CONST	SEGMENT
??_C@_0BF@OAMAHNCG@NumCitiesTechCostMod?$AA@ DB 'NumCitiesTechCostMod', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLHAGGMP@NumCitiesPolicyCostMod?$AA@
CONST	SEGMENT
??_C@_0BH@LLHAGGMP@NumCitiesPolicyCostMod?$AA@ DB 'NumCitiesPolicyCostMod'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DLKKJIIN@NumCitiesUnhappinessPercent?$AA@
CONST	SEGMENT
??_C@_0BM@DLKKJIIN@NumCitiesUnhappinessPercent?$AA@ DB 'NumCitiesUnhappin'
	DB	'essPercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HGMMEAGB@FeatureGrainChange?$AA@
CONST	SEGMENT
??_C@_0BD@HGMMEAGB@FeatureGrainChange?$AA@ DB 'FeatureGrainChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GDNJEIJ@TerrainGrainChange?$AA@
CONST	SEGMENT
??_C@_0BD@GDNJEIJ@TerrainGrainChange?$AA@ DB 'TerrainGrainChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FPCAGE@MaxActiveReligions?$AA@
CONST	SEGMENT
??_C@_0BD@FPCAGE@MaxActiveReligions?$AA@ DB 'MaxActiveReligions', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CNEPNHHP@GridHeight?$AA@
CONST	SEGMENT
??_C@_0L@CNEPNHHP@GridHeight?$AA@ DB 'GridHeight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MBCKNPGB@GridWidth?$AA@
CONST	SEGMENT
??_C@_09MBCKNPGB@GridWidth?$AA@ DB 'GridWidth', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NJHLIGFD@MaxConscriptModifier?$AA@
CONST	SEGMENT
??_C@_0BF@NJHLIGFD@MaxConscriptModifier?$AA@ DB 'MaxConscriptModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BOMPLEJP@BuildingClassPrereqModifier?$AA@
CONST	SEGMENT
??_C@_0BM@BOMPLEJP@BuildingClassPrereqModifier?$AA@ DB 'BuildingClassPrer'
	DB	'eqModifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DLHFOLOE@NumFreeBuildingResources?$AA@
CONST	SEGMENT
??_C@_0BJ@DLHFOLOE@NumFreeBuildingResources?$AA@ DB 'NumFreeBuildingResou'
	DB	'rces', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FJKBNHCI@TargetNumCities?$AA@
CONST	SEGMENT
??_C@_0BA@FJKBNHCI@TargetNumCities?$AA@ DB 'TargetNumCities', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HLKKOKDG@UnitNameModifier?$AA@
CONST	SEGMENT
??_C@_0BB@HLKKOKDG@UnitNameModifier?$AA@ DB 'UnitNameModifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GKFJEMFJ@NumNaturalWonders?$AA@
CONST	SEGMENT
??_C@_0BC@GKFJEMFJ@NumNaturalWonders?$AA@ DB 'NumNaturalWonders', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHDAENIO@FogTilesPerBarbarianCamp?$AA@
CONST	SEGMENT
??_C@_0BJ@DHDAENIO@FogTilesPerBarbarianCamp?$AA@ DB 'FogTilesPerBarbarian'
	DB	'Camp', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IGMKBBKO@DefaultMinorCivs?$AA@
CONST	SEGMENT
??_C@_0BB@IGMKBBKO@DefaultMinorCivs?$AA@ DB 'DefaultMinorCivs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OFBALEBM@DefaultPlayers?$AA@
CONST	SEGMENT
??_C@_0P@OFBALEBM@DefaultPlayers?$AA@ DB 'DefaultPlayers', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvWorldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvWorldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvWorldInfo::CacheResults, COMDAT
; _this$ = ecx

; 6004 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6005 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@29

; 6006 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@29
$LN1@CacheResul@29:

; 6007 : 
; 6008 : 	m_iDefaultPlayers				= kResults.GetInt("DefaultPlayers");

	push	OFFSET ??_C@_0P@OFBALEBM@DefaultPlayers?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 6009 : 	m_iDefaultMinorCivs				= kResults.GetInt("DefaultMinorCivs");

	push	OFFSET ??_C@_0BB@IGMKBBKO@DefaultMinorCivs?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 6010 : 	m_iFogTilesPerBarbarianCamp		= kResults.GetInt("FogTilesPerBarbarianCamp");

	push	OFFSET ??_C@_0BJ@DHDAENIO@FogTilesPerBarbarianCamp?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 6011 : 	m_iNumNaturalWonders			= kResults.GetInt("NumNaturalWonders");

	push	OFFSET ??_C@_0BC@GKFJEMFJ@NumNaturalWonders?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 6012 : 	m_iUnitNameModifier				= kResults.GetInt("UnitNameModifier");

	push	OFFSET ??_C@_0BB@HLKKOKDG@UnitNameModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 6013 : 	m_iTargetNumCities				= kResults.GetInt("TargetNumCities");

	push	OFFSET ??_C@_0BA@FJKBNHCI@TargetNumCities?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], eax

; 6014 : 	m_iNumFreeBuildingResources		= kResults.GetInt("NumFreeBuildingResources");

	push	OFFSET ??_C@_0BJ@DLHFOLOE@NumFreeBuildingResources?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], eax

; 6015 : 	m_iBuildingClassPrereqModifier	= kResults.GetInt("BuildingClassPrereqModifier");

	push	OFFSET ??_C@_0BM@BOMPLEJP@BuildingClassPrereqModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], eax

; 6016 : 	m_iMaxConscriptModifier			= kResults.GetInt("MaxConscriptModifier");

	push	OFFSET ??_C@_0BF@NJHLIGFD@MaxConscriptModifier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+292], eax

; 6017 : 	m_iGridWidth					= kResults.GetInt("GridWidth");

	push	OFFSET ??_C@_09MBCKNPGB@GridWidth?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], eax

; 6018 : 	m_iGridHeight					= kResults.GetInt("GridHeight");

	push	OFFSET ??_C@_0L@CNEPNHHP@GridHeight?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+300], eax

; 6019 : 	m_iMaxActiveReligions			= kResults.GetInt("MaxActiveReligions");

	push	OFFSET ??_C@_0BD@FPCAGE@MaxActiveReligions?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+304], eax

; 6020 : 	m_iTerrainGrainChange			= kResults.GetInt("TerrainGrainChange");

	push	OFFSET ??_C@_0BD@GDNJEIJ@TerrainGrainChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], eax

; 6021 : 	m_iFeatureGrainChange			= kResults.GetInt("FeatureGrainChange");

	push	OFFSET ??_C@_0BD@HGMMEAGB@FeatureGrainChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], eax

; 6022 : 	m_iResearchPercent				= kResults.GetInt("ResearchPercent");

	push	OFFSET ??_C@_0BA@HBDGGGLG@ResearchPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+316], eax

; 6023 : 	m_iAdvancedStartPointsMod		= kResults.GetInt("AdvancedStartPointsMod");

	push	OFFSET ??_C@_0BH@BDAMOBEO@AdvancedStartPointsMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+320], eax

; 6024 : 	m_iNumCitiesUnhappinessPercent	= kResults.GetInt("NumCitiesUnhappinessPercent");

	push	OFFSET ??_C@_0BM@DLKKJIIN@NumCitiesUnhappinessPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+324], eax

; 6025 : 	m_iNumCitiesPolicyCostMod		= kResults.GetInt("NumCitiesPolicyCostMod");

	push	OFFSET ??_C@_0BH@LLHAGGMP@NumCitiesPolicyCostMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+328], eax

; 6026 : 	m_iNumCitiesTechCostMod			= kResults.GetInt("NumCitiesTechCostMod");

	push	OFFSET ??_C@_0BF@OAMAHNCG@NumCitiesTechCostMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], eax

; 6027 : 	m_iEstimatedNumCities			= kResults.GetInt("EstimatedNumCities");

	push	OFFSET ??_C@_0BD@CIINCNCA@EstimatedNumCities?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], eax

; 6028 : 
; 6029 : 	return true;

	mov	al, 1
$LN2@CacheResul@29:

; 6030 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvWorldInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvWorldInfo::CacheResults
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??8CvWorldInfo@@UBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??8CvWorldInfo@@UBE_NABV0@@Z PROC			; CvWorldInfo::operator==, COMDAT
; _this$ = ecx

; 6033 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6034 : 	if(this == &rhs) return true;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _rhs$[ebp]
	jne	SHORT $LN21@operator@3
	mov	al, 1
	jmp	$LN22@operator@3
$LN21@operator@3:

; 6035 : 	if(!CvBaseInfo::operator==(rhs)) return false;

	mov	ecx, DWORD PTR _rhs$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8CvBaseInfo@@UBE_NABV0@@Z		; CvBaseInfo::operator==
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN20@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN20@operator@3:

; 6036 : 	if(m_iDefaultPlayers != rhs.m_iDefaultPlayers) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+260]
	cmp	edx, DWORD PTR [ecx+260]
	je	SHORT $LN19@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN19@operator@3:

; 6037 : 	if(m_iDefaultMinorCivs != rhs.m_iDefaultMinorCivs) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+264]
	cmp	edx, DWORD PTR [ecx+264]
	je	SHORT $LN18@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN18@operator@3:

; 6038 : 	if(m_iFogTilesPerBarbarianCamp != rhs.m_iFogTilesPerBarbarianCamp) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+268]
	cmp	edx, DWORD PTR [ecx+268]
	je	SHORT $LN17@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN17@operator@3:

; 6039 : 	if(m_iNumNaturalWonders != rhs.m_iNumNaturalWonders) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+272]
	cmp	edx, DWORD PTR [ecx+272]
	je	SHORT $LN16@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN16@operator@3:

; 6040 : 	if(m_iUnitNameModifier != rhs.m_iUnitNameModifier) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+276]
	cmp	edx, DWORD PTR [ecx+276]
	je	SHORT $LN15@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN15@operator@3:

; 6041 : 	if(m_iTargetNumCities != rhs.m_iTargetNumCities) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+280]
	cmp	edx, DWORD PTR [ecx+280]
	je	SHORT $LN14@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN14@operator@3:

; 6042 : 	if(m_iNumFreeBuildingResources != rhs.m_iNumFreeBuildingResources) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+284]
	cmp	edx, DWORD PTR [ecx+284]
	je	SHORT $LN13@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN13@operator@3:

; 6043 : 	if(m_iBuildingClassPrereqModifier != rhs.m_iBuildingClassPrereqModifier) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+288]
	cmp	edx, DWORD PTR [ecx+288]
	je	SHORT $LN12@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN12@operator@3:

; 6044 : 	if(m_iMaxConscriptModifier != rhs.m_iMaxConscriptModifier) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+292]
	cmp	edx, DWORD PTR [ecx+292]
	je	SHORT $LN11@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN11@operator@3:

; 6045 : 	if(m_iGridWidth != rhs.m_iGridWidth) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+296]
	cmp	edx, DWORD PTR [ecx+296]
	je	SHORT $LN10@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN10@operator@3:

; 6046 : 	if(m_iGridHeight != rhs.m_iGridHeight) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+300]
	cmp	edx, DWORD PTR [ecx+300]
	je	SHORT $LN9@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN9@operator@3:

; 6047 : 	if(m_iMaxActiveReligions != rhs.m_iMaxActiveReligions) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+304]
	cmp	edx, DWORD PTR [ecx+304]
	je	SHORT $LN8@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN8@operator@3:

; 6048 : 	if(m_iTerrainGrainChange != rhs.m_iTerrainGrainChange) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+308]
	cmp	edx, DWORD PTR [ecx+308]
	je	SHORT $LN7@operator@3
	xor	al, al
	jmp	$LN22@operator@3
$LN7@operator@3:

; 6049 : 	if(m_iFeatureGrainChange != rhs.m_iFeatureGrainChange) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+312]
	cmp	edx, DWORD PTR [ecx+312]
	je	SHORT $LN6@operator@3
	xor	al, al
	jmp	SHORT $LN22@operator@3
$LN6@operator@3:

; 6050 : 	if(m_iResearchPercent != rhs.m_iResearchPercent) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+316]
	cmp	edx, DWORD PTR [ecx+316]
	je	SHORT $LN5@operator@3
	xor	al, al
	jmp	SHORT $LN22@operator@3
$LN5@operator@3:

; 6051 : 	if(m_iAdvancedStartPointsMod != rhs.m_iAdvancedStartPointsMod) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+320]
	cmp	edx, DWORD PTR [ecx+320]
	je	SHORT $LN4@operator@3
	xor	al, al
	jmp	SHORT $LN22@operator@3
$LN4@operator@3:

; 6052 : 	if(m_iNumCitiesUnhappinessPercent != rhs.m_iNumCitiesUnhappinessPercent) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+324]
	cmp	edx, DWORD PTR [ecx+324]
	je	SHORT $LN3@operator@3
	xor	al, al
	jmp	SHORT $LN22@operator@3
$LN3@operator@3:

; 6053 : 	if(m_iNumCitiesPolicyCostMod != rhs.m_iNumCitiesPolicyCostMod) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+328]
	cmp	edx, DWORD PTR [ecx+328]
	je	SHORT $LN2@operator@3
	xor	al, al
	jmp	SHORT $LN22@operator@3
$LN2@operator@3:

; 6054 : 	if(m_iNumCitiesTechCostMod != rhs.m_iNumCitiesTechCostMod) return false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rhs$[ebp]
	mov	edx, DWORD PTR [eax+332]
	cmp	edx, DWORD PTR [ecx+332]
	je	SHORT $LN1@operator@3
	xor	al, al
	jmp	SHORT $LN22@operator@3
$LN1@operator@3:

; 6055 : 	return true;

	mov	al, 1
$LN22@operator@3:

; 6056 : }

	mov	esp, ebp
	pop	ebp
	ret	4
??8CvWorldInfo@@UBE_NABV0@@Z ENDP			; CvWorldInfo::operator==
_TEXT	ENDS
PUBLIC	??9CvWorldInfo@@QBE_NABV0@@Z			; CvWorldInfo::operator!=
; Function compile flags: /Odtp
;	COMDAT ??9CvWorldInfo@@QBE_NABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??9CvWorldInfo@@QBE_NABV0@@Z PROC			; CvWorldInfo::operator!=, COMDAT
; _this$ = ecx

; 6059 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6060 : 	return !(*this == rhs);

	mov	eax, DWORD PTR _rhs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 6061 : }

	mov	esp, ebp
	pop	ebp
	ret	4
??9CvWorldInfo@@QBE_NABV0@@Z ENDP			; CvWorldInfo::operator!=
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readFrom@CvWorldInfo@@UAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iVersion$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
?readFrom@CvWorldInfo@@UAEXAAVFDataStream@@@Z PROC	; CvWorldInfo::readFrom, COMDAT
; _this$ = ecx

; 6064 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6065 : 	int iVersion;
; 6066 : 	loadFrom >> iVersion;				// Make sure to update versioning if the members change!

	lea	eax, DWORD PTR _iVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6067 : 
; 6068 : 	CvBaseInfo::readFrom(loadFrom);

	mov	ecx, DWORD PTR _loadFrom$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z ; CvBaseInfo::readFrom

; 6069 : 
; 6070 : 	loadFrom >> m_iDefaultPlayers;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6071 : 	loadFrom >> m_iDefaultMinorCivs;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 264				; 00000108H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6072 : 	loadFrom >> m_iFogTilesPerBarbarianCamp;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6073 : 	loadFrom >> m_iNumNaturalWonders;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 272				; 00000110H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6074 : 	loadFrom >> m_iUnitNameModifier;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 276				; 00000114H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6075 : 	loadFrom >> m_iTargetNumCities;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6076 : 	loadFrom >> m_iNumFreeBuildingResources;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 284				; 0000011cH
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6077 : 	loadFrom >> m_iBuildingClassPrereqModifier;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6078 : 	loadFrom >> m_iMaxConscriptModifier;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6079 : 	loadFrom >> m_iGridWidth;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 296				; 00000128H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6080 : 	loadFrom >> m_iGridHeight;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 300				; 0000012cH
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6081 : 	loadFrom >> m_iMaxActiveReligions;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6082 : 	loadFrom >> m_iTerrainGrainChange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 308				; 00000134H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6083 : 	loadFrom >> m_iFeatureGrainChange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 312				; 00000138H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6084 : 	loadFrom >> m_iResearchPercent;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6085 : 	loadFrom >> m_iAdvancedStartPointsMod;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 320				; 00000140H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6086 : 	loadFrom >> m_iNumCitiesUnhappinessPercent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 324				; 00000144H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6087 : 	loadFrom >> m_iNumCitiesPolicyCostMod;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 328				; 00000148H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6088 : 
; 6089 : 	if (iVersion >= 2)

	cmp	DWORD PTR _iVersion$[ebp], 2
	jl	SHORT $LN2@readFrom

; 6090 : 	{
; 6091 : 		loadFrom >> m_iNumCitiesTechCostMod;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 332				; 0000014cH
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6092 : 	}
; 6093 : 	else

	jmp	SHORT $LN3@readFrom
$LN2@readFrom:

; 6094 : 	{
; 6095 : 		m_iNumCitiesTechCostMod = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+332], 0
$LN3@readFrom:

; 6096 : 	}
; 6097 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?readFrom@CvWorldInfo@@UAEXAAVFDataStream@@@Z ENDP	; CvWorldInfo::readFrom
_TEXT	ENDS
PUBLIC	?readFromVersion0@CvWorldInfo@@QAEXAAVFDataStream@@@Z ; CvWorldInfo::readFromVersion0
; Function compile flags: /Odtp
;	COMDAT ?readFromVersion0@CvWorldInfo@@QAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
?readFromVersion0@CvWorldInfo@@QAEXAAVFDataStream@@@Z PROC ; CvWorldInfo::readFromVersion0, COMDAT
; _this$ = ecx

; 6101 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6102 : 	CvBaseInfo::readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z ; CvBaseInfo::readFrom

; 6103 : 	loadFrom >> m_iDefaultPlayers;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6104 : 	loadFrom >> m_iDefaultMinorCivs;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6105 : 	loadFrom >> m_iFogTilesPerBarbarianCamp;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6106 : 	loadFrom >> m_iNumNaturalWonders;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6107 : 	loadFrom >> m_iUnitNameModifier;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 276				; 00000114H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6108 : 	loadFrom >> m_iTargetNumCities;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 280				; 00000118H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6109 : 	loadFrom >> m_iNumFreeBuildingResources;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6110 : 	loadFrom >> m_iBuildingClassPrereqModifier;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6111 : 	loadFrom >> m_iMaxConscriptModifier;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 292				; 00000124H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6112 : 	loadFrom >> m_iGridWidth;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6113 : 	loadFrom >> m_iGridHeight;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 300				; 0000012cH
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6114 : 	loadFrom >> m_iTerrainGrainChange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 308				; 00000134H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6115 : 	loadFrom >> m_iFeatureGrainChange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6116 : 	loadFrom >> m_iResearchPercent;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 316				; 0000013cH
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6117 : 	loadFrom >> m_iAdvancedStartPointsMod;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 320				; 00000140H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6118 : 	loadFrom >> m_iNumCitiesUnhappinessPercent;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 324				; 00000144H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6119 : 	loadFrom >> m_iNumCitiesPolicyCostMod;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 328				; 00000148H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6120 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?readFromVersion0@CvWorldInfo@@QAEXAAVFDataStream@@@Z ENDP ; CvWorldInfo::readFromVersion0
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?writeTo@CvWorldInfo@@UBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iVersion$ = -4						; size = 4
_saveTo$ = 8						; size = 4
?writeTo@CvWorldInfo@@UBEXAAVFDataStream@@@Z PROC	; CvWorldInfo::writeTo, COMDAT
; _this$ = ecx

; 6123 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6124 : 	int iVersion = 2;		// Make sure to update the versioning if the members change!

	mov	DWORD PTR _iVersion$[ebp], 2

; 6125 : 	saveTo << iVersion;

	lea	eax, DWORD PTR _iVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6126 : 
; 6127 : 	CvBaseInfo::writeTo(saveTo);

	mov	ecx, DWORD PTR _saveTo$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z ; CvBaseInfo::writeTo

; 6128 : 
; 6129 : 	saveTo << m_iDefaultPlayers;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 260				; 00000104H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6130 : 	saveTo << m_iDefaultMinorCivs;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 264				; 00000108H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6131 : 	saveTo << m_iFogTilesPerBarbarianCamp;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6132 : 	saveTo << m_iNumNaturalWonders;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 272				; 00000110H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6133 : 	saveTo << m_iUnitNameModifier;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 276				; 00000114H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6134 : 	saveTo << m_iTargetNumCities;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6135 : 	saveTo << m_iNumFreeBuildingResources;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 284				; 0000011cH
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6136 : 	saveTo << m_iBuildingClassPrereqModifier;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6137 : 	saveTo << m_iMaxConscriptModifier;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 292				; 00000124H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6138 : 	saveTo << m_iGridWidth;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 296				; 00000128H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6139 : 	saveTo << m_iGridHeight;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 300				; 0000012cH
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6140 : 	saveTo << m_iMaxActiveReligions;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6141 : 	saveTo << m_iTerrainGrainChange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 308				; 00000134H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6142 : 	saveTo << m_iFeatureGrainChange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 312				; 00000138H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6143 : 	saveTo << m_iResearchPercent;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 316				; 0000013cH
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6144 : 	saveTo << m_iAdvancedStartPointsMod;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 320				; 00000140H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6145 : 	saveTo << m_iNumCitiesUnhappinessPercent;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 324				; 00000144H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6146 : 	saveTo << m_iNumCitiesPolicyCostMod;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 328				; 00000148H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6147 : 	saveTo << m_iNumCitiesTechCostMod;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 332				; 0000014cH
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6148 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?writeTo@CvWorldInfo@@UBEXAAVFDataStream@@@Z ENDP	; CvWorldInfo::writeTo
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvWorldInfo@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvWorldInfo@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvWorldInfo@@@Z PROC	; operator<<, COMDAT

; 6151 : {

	push	ebp
	mov	ebp, esp

; 6152 : 	readFrom.writeTo(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 6153 : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 6154 : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvWorldInfo@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvWorldInfo@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvWorldInfo@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvWorldInfo@@@Z PROC	; operator>>, COMDAT

; 6157 : {

	push	ebp
	mov	ebp, esp

; 6158 : 	writeTo.readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 6159 : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 6160 : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvWorldInfo@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	??_7CvClimateInfo@@6B@				; CvClimateInfo::`vftable'
PUBLIC	??0CvClimateInfo@@QAE@XZ			; CvClimateInfo::CvClimateInfo
PUBLIC	?CacheResults@CvClimateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvClimateInfo::CacheResults
PUBLIC	?readFrom@CvClimateInfo@@UAEXAAVFDataStream@@@Z	; CvClimateInfo::readFrom
PUBLIC	?writeTo@CvClimateInfo@@UBEXAAVFDataStream@@@Z	; CvClimateInfo::writeTo
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_7CvClimateInfo@@6B@
CONST	SEGMENT
??_7CvClimateInfo@@6B@ DD FLAT:?CacheResults@CvClimateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvClimateInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvClimateInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvClimateInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvClimateInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvClimateInfo@@QAE@XZ PROC				; CvClimateInfo::CvClimateInfo, COMDAT
; _this$ = ecx

; 6177 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvClimateInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+276], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+280], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+284], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+288], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+292], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+296], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+300], xmm0

; 6178 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvClimateInfo@@QAE@XZ ENDP				; CvClimateInfo::CvClimateInfo
_TEXT	ENDS
PUBLIC	??_C@_0BA@GJJKAPII@RandIceLatitude?$AA@		; `string'
PUBLIC	??_C@_0M@MDMEJLNP@IceLatitude?$AA@		; `string'
PUBLIC	??_C@_0BI@PPBFIIMB@DesertTopLatitudeChange?$AA@	; `string'
PUBLIC	??_C@_0BL@BCEBACMB@DesertBottomLatitudeChange?$AA@ ; `string'
PUBLIC	??_C@_0BE@MMHNLKFD@GrassLatitudeChange?$AA@	; `string'
PUBLIC	??_C@_0BF@OOPEKIGF@TundraLatitudeChange?$AA@	; `string'
PUBLIC	??_C@_0BD@JMHNABLL@SnowLatitudeChange?$AA@	; `string'
PUBLIC	??_C@_0BA@KGGIGHHE@MountainPercent?$AA@		; `string'
PUBLIC	??_C@_09MBHFEBDB@HillRange?$AA@			; `string'
PUBLIC	??_C@_0P@DKBHKPNK@JungleLatitude?$AA@		; `string'
PUBLIC	??_C@_0BE@KLGCNKBF@DesertPercentChange?$AA@	; `string'
EXTRN	__imp_?GetFloat@Results@Database@@QAEMPBD@Z:PROC
;	COMDAT ??_C@_0BA@GJJKAPII@RandIceLatitude?$AA@
CONST	SEGMENT
??_C@_0BA@GJJKAPII@RandIceLatitude?$AA@ DB 'RandIceLatitude', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MDMEJLNP@IceLatitude?$AA@
CONST	SEGMENT
??_C@_0M@MDMEJLNP@IceLatitude?$AA@ DB 'IceLatitude', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PPBFIIMB@DesertTopLatitudeChange?$AA@
CONST	SEGMENT
??_C@_0BI@PPBFIIMB@DesertTopLatitudeChange?$AA@ DB 'DesertTopLatitudeChan'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BCEBACMB@DesertBottomLatitudeChange?$AA@
CONST	SEGMENT
??_C@_0BL@BCEBACMB@DesertBottomLatitudeChange?$AA@ DB 'DesertBottomLatitu'
	DB	'deChange', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MMHNLKFD@GrassLatitudeChange?$AA@
CONST	SEGMENT
??_C@_0BE@MMHNLKFD@GrassLatitudeChange?$AA@ DB 'GrassLatitudeChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OOPEKIGF@TundraLatitudeChange?$AA@
CONST	SEGMENT
??_C@_0BF@OOPEKIGF@TundraLatitudeChange?$AA@ DB 'TundraLatitudeChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JMHNABLL@SnowLatitudeChange?$AA@
CONST	SEGMENT
??_C@_0BD@JMHNABLL@SnowLatitudeChange?$AA@ DB 'SnowLatitudeChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KGGIGHHE@MountainPercent?$AA@
CONST	SEGMENT
??_C@_0BA@KGGIGHHE@MountainPercent?$AA@ DB 'MountainPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MBHFEBDB@HillRange?$AA@
CONST	SEGMENT
??_C@_09MBHFEBDB@HillRange?$AA@ DB 'HillRange', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DKBHKPNK@JungleLatitude?$AA@
CONST	SEGMENT
??_C@_0P@DKBHKPNK@JungleLatitude?$AA@ DB 'JungleLatitude', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KLGCNKBF@DesertPercentChange?$AA@
CONST	SEGMENT
??_C@_0BE@KLGCNKBF@DesertPercentChange?$AA@ DB 'DesertPercentChange', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvClimateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvClimateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvClimateInfo::CacheResults, COMDAT
; _this$ = ecx

; 6181 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6182 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@30

; 6183 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@30
$LN1@CacheResul@30:

; 6184 : 
; 6185 : 	m_iDesertPercentChange			= kResults.GetInt("DesertPercentChange");

	push	OFFSET ??_C@_0BE@KLGCNKBF@DesertPercentChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 6186 : 	m_iJungleLatitude				= kResults.GetInt("JungleLatitude");

	push	OFFSET ??_C@_0P@DKBHKPNK@JungleLatitude?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 6187 : 	m_iHillRange					= kResults.GetInt("HillRange");

	push	OFFSET ??_C@_09MBHFEBDB@HillRange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 6188 : 	m_iMountainPercent					= kResults.GetInt("MountainPercent");

	push	OFFSET ??_C@_0BA@KGGIGHHE@MountainPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+272], eax

; 6189 : 
; 6190 : 	m_fSnowLatitudeChange			= kResults.GetFloat("SnowLatitudeChange");

	push	OFFSET ??_C@_0BD@JMHNABLL@SnowLatitudeChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+276]

; 6191 : 	m_fTundraLatitudeChange			= kResults.GetFloat("TundraLatitudeChange");

	push	OFFSET ??_C@_0BF@OOPEKIGF@TundraLatitudeChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+280]

; 6192 : 	m_fGrassLatitudeChange			= kResults.GetFloat("GrassLatitudeChange");

	push	OFFSET ??_C@_0BE@MMHNLKFD@GrassLatitudeChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+284]

; 6193 : 	m_fDesertBottomLatitudeChange	= kResults.GetFloat("DesertBottomLatitudeChange");

	push	OFFSET ??_C@_0BL@BCEBACMB@DesertBottomLatitudeChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+288]

; 6194 : 	m_fDesertTopLatitudeChange		= kResults.GetFloat("DesertTopLatitudeChange");

	push	OFFSET ??_C@_0BI@PPBFIIMB@DesertTopLatitudeChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+292]

; 6195 : 	m_fIceLatitude					= kResults.GetFloat("IceLatitude");

	push	OFFSET ??_C@_0M@MDMEJLNP@IceLatitude?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+296]

; 6196 : 	m_fRandIceLatitude				= kResults.GetFloat("RandIceLatitude");

	push	OFFSET ??_C@_0BA@GJJKAPII@RandIceLatitude?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+300]

; 6197 : 
; 6198 : 	return true;

	mov	al, 1
$LN2@CacheResul@30:

; 6199 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvClimateInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvClimateInfo::CacheResults
_TEXT	ENDS
EXTRN	?Read@FDataStream@@IAEXAAM@Z:PROC		; FDataStream::Read
; Function compile flags: /Odtp
;	COMDAT ?readFrom@CvClimateInfo@@UAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
?readFrom@CvClimateInfo@@UAEXAAVFDataStream@@@Z PROC	; CvClimateInfo::readFrom, COMDAT
; _this$ = ecx

; 6202 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6203 : 	CvBaseInfo::readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z ; CvBaseInfo::readFrom

; 6204 : 
; 6205 : 	loadFrom >> m_iDesertPercentChange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6206 : 	loadFrom >> m_iJungleLatitude;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6207 : 	loadFrom >> m_iHillRange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6208 : 	loadFrom >> m_iMountainPercent;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6209 : 	loadFrom >> m_fSnowLatitudeChange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 276				; 00000114H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAM@Z		; FDataStream::Read

; 6210 : 	loadFrom >> m_fTundraLatitudeChange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 280				; 00000118H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAM@Z		; FDataStream::Read

; 6211 : 	loadFrom >> m_fGrassLatitudeChange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAM@Z		; FDataStream::Read

; 6212 : 	loadFrom >> m_fDesertBottomLatitudeChange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAM@Z		; FDataStream::Read

; 6213 : 	loadFrom >> m_fDesertTopLatitudeChange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 292				; 00000124H
	push	eax
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAM@Z		; FDataStream::Read

; 6214 : 	loadFrom >> m_fIceLatitude;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAM@Z		; FDataStream::Read

; 6215 : 	loadFrom >> m_fRandIceLatitude;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 300				; 0000012cH
	push	edx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAM@Z		; FDataStream::Read

; 6216 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?readFrom@CvClimateInfo@@UAEXAAVFDataStream@@@Z ENDP	; CvClimateInfo::readFrom
_TEXT	ENDS
EXTRN	?Write@FDataStream@@IAEXABM@Z:PROC		; FDataStream::Write
; Function compile flags: /Odtp
;	COMDAT ?writeTo@CvClimateInfo@@UBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_saveTo$ = 8						; size = 4
?writeTo@CvClimateInfo@@UBEXAAVFDataStream@@@Z PROC	; CvClimateInfo::writeTo, COMDAT
; _this$ = ecx

; 6219 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6220 : 	CvBaseInfo::writeTo(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z ; CvBaseInfo::writeTo

; 6221 : 
; 6222 : 	saveTo << m_iDesertPercentChange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6223 : 	saveTo << m_iJungleLatitude;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 264				; 00000108H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6224 : 	saveTo << m_iHillRange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6225 : 	saveTo << m_iMountainPercent;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6226 : 	saveTo << m_fSnowLatitudeChange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 276				; 00000114H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABM@Z		; FDataStream::Write

; 6227 : 	saveTo << m_fTundraLatitudeChange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 280				; 00000118H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABM@Z		; FDataStream::Write

; 6228 : 	saveTo << m_fGrassLatitudeChange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABM@Z		; FDataStream::Write

; 6229 : 	saveTo << m_fDesertBottomLatitudeChange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABM@Z		; FDataStream::Write

; 6230 : 	saveTo << m_fDesertTopLatitudeChange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 292				; 00000124H
	push	eax
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABM@Z		; FDataStream::Write

; 6231 : 	saveTo << m_fIceLatitude;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABM@Z		; FDataStream::Write

; 6232 : 	saveTo << m_fRandIceLatitude;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 300				; 0000012cH
	push	edx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABM@Z		; FDataStream::Write

; 6233 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?writeTo@CvClimateInfo@@UBEXAAVFDataStream@@@Z ENDP	; CvClimateInfo::writeTo
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvClimateInfo@@@Z	; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvClimateInfo@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvClimateInfo@@@Z PROC	; operator<<, COMDAT

; 6236 : {

	push	ebp
	mov	ebp, esp

; 6237 : 	readFrom.writeTo(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 6238 : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 6239 : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvClimateInfo@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvClimateInfo@@@Z	; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvClimateInfo@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvClimateInfo@@@Z PROC	; operator>>, COMDAT

; 6242 : {

	push	ebp
	mov	ebp, esp

; 6243 : 	writeTo.readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 6244 : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 6245 : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvClimateInfo@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??_7CvSeaLevelInfo@@6B@				; CvSeaLevelInfo::`vftable'
PUBLIC	??0CvSeaLevelInfo@@QAE@XZ			; CvSeaLevelInfo::CvSeaLevelInfo
PUBLIC	?CacheResults@CvSeaLevelInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvSeaLevelInfo::CacheResults
PUBLIC	?readFrom@CvSeaLevelInfo@@UAEXAAVFDataStream@@@Z ; CvSeaLevelInfo::readFrom
PUBLIC	?writeTo@CvSeaLevelInfo@@UBEXAAVFDataStream@@@Z	; CvSeaLevelInfo::writeTo
;	COMDAT ??_7CvSeaLevelInfo@@6B@
CONST	SEGMENT
??_7CvSeaLevelInfo@@6B@ DD FLAT:?CacheResults@CvSeaLevelInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvSeaLevelInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvSeaLevelInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvSeaLevelInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvSeaLevelInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvSeaLevelInfo@@QAE@XZ PROC				; CvSeaLevelInfo::CvSeaLevelInfo, COMDAT
; _this$ = ecx

; 6252 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvSeaLevelInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0

; 6253 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvSeaLevelInfo@@QAE@XZ ENDP				; CvSeaLevelInfo::CvSeaLevelInfo
_TEXT	ENDS
PUBLIC	??_C@_0P@KJCDKKFO@SeaLevelChange?$AA@		; `string'
;	COMDAT ??_C@_0P@KJCDKKFO@SeaLevelChange?$AA@
CONST	SEGMENT
??_C@_0P@KJCDKKFO@SeaLevelChange?$AA@ DB 'SeaLevelChange', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvSeaLevelInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvSeaLevelInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvSeaLevelInfo::CacheResults, COMDAT
; _this$ = ecx

; 6256 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6257 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@31

; 6258 : 		return false;

	xor	al, al
	jmp	SHORT $LN2@CacheResul@31
$LN1@CacheResul@31:

; 6259 : 
; 6260 : 	m_iSeaLevelChange = kResults.GetInt("SeaLevelChange");

	push	OFFSET ??_C@_0P@KJCDKKFO@SeaLevelChange?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 6261 : 	return true;

	mov	al, 1
$LN2@CacheResul@31:

; 6262 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvSeaLevelInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvSeaLevelInfo::CacheResults
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?readFrom@CvSeaLevelInfo@@UAEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_loadFrom$ = 8						; size = 4
?readFrom@CvSeaLevelInfo@@UAEXAAVFDataStream@@@Z PROC	; CvSeaLevelInfo::readFrom, COMDAT
; _this$ = ecx

; 6265 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6266 : 	CvBaseInfo::readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z ; CvBaseInfo::readFrom

; 6267 : 	loadFrom >> m_iSeaLevelChange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _loadFrom$[ebp]
	call	?Read@FDataStream@@IAEXAAH@Z		; FDataStream::Read

; 6268 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?readFrom@CvSeaLevelInfo@@UAEXAAVFDataStream@@@Z ENDP	; CvSeaLevelInfo::readFrom
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?writeTo@CvSeaLevelInfo@@UBEXAAVFDataStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_saveTo$ = 8						; size = 4
?writeTo@CvSeaLevelInfo@@UBEXAAVFDataStream@@@Z PROC	; CvSeaLevelInfo::writeTo, COMDAT
; _this$ = ecx

; 6271 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6272 : 	CvBaseInfo::writeTo(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z ; CvBaseInfo::writeTo

; 6273 : 	saveTo << m_iSeaLevelChange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	mov	ecx, DWORD PTR _saveTo$[ebp]
	call	?Write@FDataStream@@IAEXABH@Z		; FDataStream::Write

; 6274 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?writeTo@CvSeaLevelInfo@@UBEXAAVFDataStream@@@Z ENDP	; CvSeaLevelInfo::writeTo
_TEXT	ENDS
PUBLIC	??6@YAAAVFDataStream@@AAV0@ABVCvSeaLevelInfo@@@Z ; operator<<
; Function compile flags: /Odtp
;	COMDAT ??6@YAAAVFDataStream@@AAV0@ABVCvSeaLevelInfo@@@Z
_TEXT	SEGMENT
_saveTo$ = 8						; size = 4
_readFrom$ = 12						; size = 4
??6@YAAAVFDataStream@@AAV0@ABVCvSeaLevelInfo@@@Z PROC	; operator<<, COMDAT

; 6277 : {

	push	ebp
	mov	ebp, esp

; 6278 : 	readFrom.writeTo(saveTo);

	mov	eax, DWORD PTR _saveTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _readFrom$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 6279 : 	return saveTo;

	mov	eax, DWORD PTR _saveTo$[ebp]

; 6280 : }

	pop	ebp
	ret	0
??6@YAAAVFDataStream@@AAV0@ABVCvSeaLevelInfo@@@Z ENDP	; operator<<
_TEXT	ENDS
PUBLIC	??5@YAAAVFDataStream@@AAV0@AAVCvSeaLevelInfo@@@Z ; operator>>
; Function compile flags: /Odtp
;	COMDAT ??5@YAAAVFDataStream@@AAV0@AAVCvSeaLevelInfo@@@Z
_TEXT	SEGMENT
_loadFrom$ = 8						; size = 4
_writeTo$ = 12						; size = 4
??5@YAAAVFDataStream@@AAV0@AAVCvSeaLevelInfo@@@Z PROC	; operator>>, COMDAT

; 6283 : {

	push	ebp
	mov	ebp, esp

; 6284 : 	writeTo.readFrom(loadFrom);

	mov	eax, DWORD PTR _loadFrom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _writeTo$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 6285 : 	return loadFrom;

	mov	eax, DWORD PTR _loadFrom$[ebp]

; 6286 : }

	pop	ebp
	ret	0
??5@YAAAVFDataStream@@AAV0@AAVCvSeaLevelInfo@@@Z ENDP	; operator>>
_TEXT	ENDS
PUBLIC	??_7CvProcessInfo@@6B@				; CvProcessInfo::`vftable'
PUBLIC	??0CvProcessInfo@@QAE@XZ			; CvProcessInfo::CvProcessInfo
PUBLIC	?CacheResults@CvProcessInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvProcessInfo::CacheResults
EXTRN	??_ECvProcessInfo@@UAEPAXI@Z:PROC		; CvProcessInfo::`vector deleting destructor'
;	COMDAT ??_7CvProcessInfo@@6B@
CONST	SEGMENT
??_7CvProcessInfo@@6B@ DD FLAT:?CacheResults@CvProcessInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvProcessInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvProcessInfo@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvProcessInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvProcessInfo@@QAE@XZ PROC				; CvProcessInfo::CvProcessInfo, COMDAT
; _this$ = ecx

; 6295 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvProcessInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0

; 6296 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvProcessInfo@@QAE@XZ ENDP				; CvProcessInfo::CvProcessInfo
_TEXT	ENDS
PUBLIC	??1CvProcessInfo@@UAE@XZ			; CvProcessInfo::~CvProcessInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvProcessInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvProcessInfo@@UAEPAXI@Z PROC			; CvProcessInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvProcessInfo@@UAE@XZ		; CvProcessInfo::~CvProcessInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@16
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@16:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvProcessInfo@@UAEPAXI@Z ENDP			; CvProcessInfo::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvProcessInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T236502 = -16						; size = 4
$T236501 = -12						; size = 4
$T236496 = -8						; size = 4
$T236495 = -4						; size = 4
??1CvProcessInfo@@UAE@XZ PROC				; CvProcessInfo::~CvProcessInfo, COMDAT
; _this$ = ecx

; 6299 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvProcessInfo@@6B@

; 6300 : 	SAFE_DELETE_ARRAY(m_paiProductionToYieldModifier);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 264				; 00000108H
	mov	DWORD PTR $T236496[ebp], ecx
	mov	edx, DWORD PTR $T236496[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T236495[ebp], eax
	mov	ecx, DWORD PTR $T236495[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T236496[ebp]
	mov	DWORD PTR [edx], 0

; 6301 : 	SAFE_DELETE_ARRAY(m_paiFlavorValue);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 268				; 0000010cH
	mov	DWORD PTR $T236502[ebp], eax
	mov	ecx, DWORD PTR $T236502[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T236501[ebp], edx
	mov	eax, DWORD PTR $T236501[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR $T236502[ebp]
	mov	DWORD PTR [ecx], 0

; 6302 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvProcessInfo@@UAE@XZ ENDP				; CvProcessInfo::~CvProcessInfo
_TEXT	ENDS
PUBLIC	?getTechPrereq@CvProcessInfo@@QBEHXZ		; CvProcessInfo::getTechPrereq
; Function compile flags: /Odtp
;	COMDAT ?getTechPrereq@CvProcessInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTechPrereq@CvProcessInfo@@QBEHXZ PROC		; CvProcessInfo::getTechPrereq, COMDAT
; _this$ = ecx

; 6305 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6306 : 	return m_iTechPrereq;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 6307 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTechPrereq@CvProcessInfo@@QBEHXZ ENDP		; CvProcessInfo::getTechPrereq
_TEXT	ENDS
PUBLIC	?getProductionToYieldModifier@CvProcessInfo@@QBEHH@Z ; CvProcessInfo::getProductionToYieldModifier
; Function compile flags: /Odtp
;	COMDAT ?getProductionToYieldModifier@CvProcessInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?getProductionToYieldModifier@CvProcessInfo@@QBEHH@Z PROC ; CvProcessInfo::getProductionToYieldModifier, COMDAT
; _this$ = ecx

; 6311 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6312 : 	CvAssertMsg(i < NUM_YIELD_TYPES, "Index out of bounds");
; 6313 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 6314 : 	return m_paiProductionToYieldModifier ? m_paiProductionToYieldModifier[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	SHORT $LN3@getProduct@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@getProduct@2
$LN3@getProduct@2:
	mov	DWORD PTR tv69[ebp], -1
$LN4@getProduct@2:
	mov	eax, DWORD PTR tv69[ebp]

; 6315 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getProductionToYieldModifier@CvProcessInfo@@QBEHH@Z ENDP ; CvProcessInfo::getProductionToYieldModifier
_TEXT	ENDS
PUBLIC	?GetFlavorValue@CvProcessInfo@@QBEHH@Z		; CvProcessInfo::GetFlavorValue
; Function compile flags: /Odtp
;	COMDAT ?GetFlavorValue@CvProcessInfo@@QBEHH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?GetFlavorValue@CvProcessInfo@@QBEHH@Z PROC		; CvProcessInfo::GetFlavorValue, COMDAT
; _this$ = ecx

; 6319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6320 : 	CvAssertMsg(i < GC.getNumFlavorTypes(), "Index out of bounds");
; 6321 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 6322 : 	return m_paiFlavorValue ? m_paiFlavorValue[i] : -1;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	SHORT $LN3@GetFlavorV
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@GetFlavorV
$LN3@GetFlavorV:
	mov	DWORD PTR tv69[ebp], -1
$LN4@GetFlavorV:
	mov	eax, DWORD PTR tv69[ebp]

; 6323 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFlavorValue@CvProcessInfo@@QBEHH@Z ENDP		; CvProcessInfo::GetFlavorValue
_TEXT	ENDS
PUBLIC	??_C@_0BA@FNOPFAFP@Process_Flavors?$AA@		; `string'
PUBLIC	??_C@_0BJ@IJFBKFB@Process_ProductionYields?$AA@	; `string'
PUBLIC	??_C@_0M@EPPAAJL@ProcessType?$AA@		; `string'
PUBLIC	??_C@_0L@IANCLNMF@TechPrereq?$AA@		; `string'
;	COMDAT ??_C@_0BA@FNOPFAFP@Process_Flavors?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0BA@FNOPFAFP@Process_Flavors?$AA@ DB 'Process_Flavors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IJFBKFB@Process_ProductionYields?$AA@
CONST	SEGMENT
??_C@_0BJ@IJFBKFB@Process_ProductionYields?$AA@ DB 'Process_ProductionYie'
	DB	'lds', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EPPAAJL@ProcessType?$AA@
CONST	SEGMENT
??_C@_0M@EPPAAJL@ProcessType?$AA@ DB 'ProcessType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IANCLNMF@TechPrereq?$AA@
CONST	SEGMENT
??_C@_0L@IANCLNMF@TechPrereq?$AA@ DB 'TechPrereq', 00H	; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvProcessInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_szTechPrereq$ = -8					; size = 4
_szProcessType$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvProcessInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvProcessInfo::CacheResults, COMDAT
; _this$ = ecx

; 6328 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 6329 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@32

; 6330 : 		return false;

	xor	al, al
	jmp	SHORT $LN2@CacheResul@32
$LN1@CacheResul@32:

; 6331 : 
; 6332 : 	const char* szTechPrereq = kResults.GetText("TechPrereq");

	push	OFFSET ??_C@_0L@IANCLNMF@TechPrereq?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTechPrereq$[ebp], eax

; 6333 : 	m_iTechPrereq = GC.getInfoTypeForString(szTechPrereq, true);

	push	1
	mov	eax, DWORD PTR _szTechPrereq$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 6334 : 
; 6335 : 	const char* szProcessType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szProcessType$[ebp], eax

; 6336 : 
; 6337 : 	kUtility.SetYields(m_paiProductionToYieldModifier, "Process_ProductionYields", "ProcessType", szProcessType);

	mov	edx, DWORD PTR _szProcessType$[ebp]
	push	edx
	push	OFFSET ??_C@_0M@EPPAAJL@ProcessType?$AA@
	push	OFFSET ??_C@_0BJ@IJFBKFB@Process_ProductionYields?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 264				; 00000108H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetYields@CvDatabaseUtility@@QAE_NAAPAHPBD11@Z ; CvDatabaseUtility::SetYields

; 6338 : 	kUtility.SetFlavors(m_paiFlavorValue, "Process_Flavors", "ProcessType", szProcessType);

	push	0
	mov	ecx, DWORD PTR _szProcessType$[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@EPPAAJL@ProcessType?$AA@
	push	OFFSET ??_C@_0BA@FNOPFAFP@Process_Flavors?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 268				; 0000010cH
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?SetFlavors@CvDatabaseUtility@@QAE_NAAPAHPBD11H@Z ; CvDatabaseUtility::SetFlavors

; 6339 : 
; 6340 : 	return true;

	mov	al, 1
$LN2@CacheResul@32:

; 6341 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvProcessInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvProcessInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvVoteInfo@@6B@				; CvVoteInfo::`vftable'
PUBLIC	??0CvVoteInfo@@QAE@XZ				; CvVoteInfo::CvVoteInfo
PUBLIC	?CacheResults@CvVoteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvVoteInfo::CacheResults
EXTRN	??_ECvVoteInfo@@UAEPAXI@Z:PROC			; CvVoteInfo::`vector deleting destructor'
;	COMDAT ??_7CvVoteInfo@@6B@
CONST	SEGMENT
??_7CvVoteInfo@@6B@ DD FLAT:?CacheResults@CvVoteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvVoteInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvVoteInfo@@UAEPAXI@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvVoteInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvVoteInfo@@QAE@XZ PROC				; CvVoteInfo::CvVoteInfo, COMDAT
; _this$ = ecx

; 6362 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvVoteInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+269], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+270], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+271], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+273], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+274], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+275], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+277], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+278], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+280], 0

; 6363 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvVoteInfo@@QAE@XZ ENDP				; CvVoteInfo::CvVoteInfo
_TEXT	ENDS
PUBLIC	??1CvVoteInfo@@UAE@XZ				; CvVoteInfo::~CvVoteInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvVoteInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvVoteInfo@@UAEPAXI@Z PROC				; CvVoteInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvVoteInfo@@UAE@XZ			; CvVoteInfo::~CvVoteInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@17
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@17:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvVoteInfo@@UAEPAXI@Z ENDP				; CvVoteInfo::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1CvVoteInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T236586 = -8						; size = 4
$T236584 = -4						; size = 4
??1CvVoteInfo@@UAE@XZ PROC				; CvVoteInfo::~CvVoteInfo, COMDAT
; _this$ = ecx

; 6366 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvVoteInfo@@6B@

; 6367 : 	SAFE_DELETE_ARRAY(m_abVoteSourceTypes);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	mov	DWORD PTR $T236586[ebp], ecx
	mov	edx, DWORD PTR $T236586[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T236584[ebp], eax
	mov	ecx, DWORD PTR $T236584[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR $T236586[ebp]
	mov	DWORD PTR [edx], 0

; 6368 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvVoteInfo@@UAE@XZ ENDP				; CvVoteInfo::~CvVoteInfo
_TEXT	ENDS
PUBLIC	?getPopulationThreshold@CvVoteInfo@@QBEHXZ	; CvVoteInfo::getPopulationThreshold
; Function compile flags: /Odtp
;	COMDAT ?getPopulationThreshold@CvVoteInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPopulationThreshold@CvVoteInfo@@QBEHXZ PROC		; CvVoteInfo::getPopulationThreshold, COMDAT
; _this$ = ecx

; 6371 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6372 : 	return m_iPopulationThreshold;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 6373 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPopulationThreshold@CvVoteInfo@@QBEHXZ ENDP		; CvVoteInfo::getPopulationThreshold
_TEXT	ENDS
PUBLIC	?getMinVoters@CvVoteInfo@@QBEHXZ		; CvVoteInfo::getMinVoters
; Function compile flags: /Odtp
;	COMDAT ?getMinVoters@CvVoteInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMinVoters@CvVoteInfo@@QBEHXZ PROC			; CvVoteInfo::getMinVoters, COMDAT
; _this$ = ecx

; 6376 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6377 : 	return m_iMinVoters;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 6378 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getMinVoters@CvVoteInfo@@QBEHXZ ENDP			; CvVoteInfo::getMinVoters
_TEXT	ENDS
PUBLIC	?isSecretaryGeneral@CvVoteInfo@@QBE_NXZ		; CvVoteInfo::isSecretaryGeneral
; Function compile flags: /Odtp
;	COMDAT ?isSecretaryGeneral@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isSecretaryGeneral@CvVoteInfo@@QBE_NXZ PROC		; CvVoteInfo::isSecretaryGeneral, COMDAT
; _this$ = ecx

; 6381 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6382 : 	return m_bSecretaryGeneral;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+268]

; 6383 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isSecretaryGeneral@CvVoteInfo@@QBE_NXZ ENDP		; CvVoteInfo::isSecretaryGeneral
_TEXT	ENDS
PUBLIC	?isVictory@CvVoteInfo@@QBE_NXZ			; CvVoteInfo::isVictory
; Function compile flags: /Odtp
;	COMDAT ?isVictory@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isVictory@CvVoteInfo@@QBE_NXZ PROC			; CvVoteInfo::isVictory, COMDAT
; _this$ = ecx

; 6386 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6387 : 	return m_bVictory;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+269]

; 6388 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isVictory@CvVoteInfo@@QBE_NXZ ENDP			; CvVoteInfo::isVictory
_TEXT	ENDS
PUBLIC	?isNoNukes@CvVoteInfo@@QBE_NXZ			; CvVoteInfo::isNoNukes
; Function compile flags: /Odtp
;	COMDAT ?isNoNukes@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoNukes@CvVoteInfo@@QBE_NXZ PROC			; CvVoteInfo::isNoNukes, COMDAT
; _this$ = ecx

; 6391 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6392 : 	return m_bNoNukes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+270]

; 6393 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoNukes@CvVoteInfo@@QBE_NXZ ENDP			; CvVoteInfo::isNoNukes
_TEXT	ENDS
PUBLIC	?isCityVoting@CvVoteInfo@@QBE_NXZ		; CvVoteInfo::isCityVoting
; Function compile flags: /Odtp
;	COMDAT ?isCityVoting@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isCityVoting@CvVoteInfo@@QBE_NXZ PROC			; CvVoteInfo::isCityVoting, COMDAT
; _this$ = ecx

; 6396 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6397 : 	return m_bCityVoting;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+271]

; 6398 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isCityVoting@CvVoteInfo@@QBE_NXZ ENDP			; CvVoteInfo::isCityVoting
_TEXT	ENDS
PUBLIC	?isCivVoting@CvVoteInfo@@QBE_NXZ		; CvVoteInfo::isCivVoting
; Function compile flags: /Odtp
;	COMDAT ?isCivVoting@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isCivVoting@CvVoteInfo@@QBE_NXZ PROC			; CvVoteInfo::isCivVoting, COMDAT
; _this$ = ecx

; 6401 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6402 : 	return m_bCivVoting;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+272]

; 6403 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isCivVoting@CvVoteInfo@@QBE_NXZ ENDP			; CvVoteInfo::isCivVoting
_TEXT	ENDS
PUBLIC	?isDefensivePact@CvVoteInfo@@QBE_NXZ		; CvVoteInfo::isDefensivePact
; Function compile flags: /Odtp
;	COMDAT ?isDefensivePact@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isDefensivePact@CvVoteInfo@@QBE_NXZ PROC		; CvVoteInfo::isDefensivePact, COMDAT
; _this$ = ecx

; 6406 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6407 : 	return m_bDefensivePact;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+273]

; 6408 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isDefensivePact@CvVoteInfo@@QBE_NXZ ENDP		; CvVoteInfo::isDefensivePact
_TEXT	ENDS
PUBLIC	?isOpenBorders@CvVoteInfo@@QBE_NXZ		; CvVoteInfo::isOpenBorders
; Function compile flags: /Odtp
;	COMDAT ?isOpenBorders@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isOpenBorders@CvVoteInfo@@QBE_NXZ PROC			; CvVoteInfo::isOpenBorders, COMDAT
; _this$ = ecx

; 6411 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6412 : 	return m_bOpenBorders;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+274]

; 6413 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isOpenBorders@CvVoteInfo@@QBE_NXZ ENDP			; CvVoteInfo::isOpenBorders
_TEXT	ENDS
PUBLIC	?isForcePeace@CvVoteInfo@@QBE_NXZ		; CvVoteInfo::isForcePeace
; Function compile flags: /Odtp
;	COMDAT ?isForcePeace@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isForcePeace@CvVoteInfo@@QBE_NXZ PROC			; CvVoteInfo::isForcePeace, COMDAT
; _this$ = ecx

; 6416 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6417 : 	return m_bForcePeace;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+275]

; 6418 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isForcePeace@CvVoteInfo@@QBE_NXZ ENDP			; CvVoteInfo::isForcePeace
_TEXT	ENDS
PUBLIC	?isForceNoTrade@CvVoteInfo@@QBE_NXZ		; CvVoteInfo::isForceNoTrade
; Function compile flags: /Odtp
;	COMDAT ?isForceNoTrade@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isForceNoTrade@CvVoteInfo@@QBE_NXZ PROC		; CvVoteInfo::isForceNoTrade, COMDAT
; _this$ = ecx

; 6421 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6422 : 	return m_bForceNoTrade;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+276]

; 6423 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isForceNoTrade@CvVoteInfo@@QBE_NXZ ENDP		; CvVoteInfo::isForceNoTrade
_TEXT	ENDS
PUBLIC	?isForceWar@CvVoteInfo@@QBE_NXZ			; CvVoteInfo::isForceWar
; Function compile flags: /Odtp
;	COMDAT ?isForceWar@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isForceWar@CvVoteInfo@@QBE_NXZ PROC			; CvVoteInfo::isForceWar, COMDAT
; _this$ = ecx

; 6426 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6427 : 	return m_bForceWar;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+277]

; 6428 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isForceWar@CvVoteInfo@@QBE_NXZ ENDP			; CvVoteInfo::isForceWar
_TEXT	ENDS
PUBLIC	?isAssignCity@CvVoteInfo@@QBE_NXZ		; CvVoteInfo::isAssignCity
; Function compile flags: /Odtp
;	COMDAT ?isAssignCity@CvVoteInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isAssignCity@CvVoteInfo@@QBE_NXZ PROC			; CvVoteInfo::isAssignCity, COMDAT
; _this$ = ecx

; 6431 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6432 : 	return m_bAssignCity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+278]

; 6433 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isAssignCity@CvVoteInfo@@QBE_NXZ ENDP			; CvVoteInfo::isAssignCity
_TEXT	ENDS
PUBLIC	?isVoteSourceType@CvVoteInfo@@QBE_NH@Z		; CvVoteInfo::isVoteSourceType
; Function compile flags: /Odtp
;	COMDAT ?isVoteSourceType@CvVoteInfo@@QBE_NH@Z
_TEXT	SEGMENT
tv68 = -5						; size = 1
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?isVoteSourceType@CvVoteInfo@@QBE_NH@Z PROC		; CvVoteInfo::isVoteSourceType, COMDAT
; _this$ = ecx

; 6436 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6437 : 	CvAssertMsg(i < GC.getNumVoteSourceInfos(), "Index out of bounds");
; 6438 : 	CvAssertMsg(i > -1, "Index out of bounds");
; 6439 : 	return m_abVoteSourceTypes ? m_abVoteSourceTypes[i] : false;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	SHORT $LN3@isVoteSour
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	mov	eax, DWORD PTR _i$[ebp]
	mov	cl, BYTE PTR [edx+eax]
	mov	BYTE PTR tv68[ebp], cl
	jmp	SHORT $LN4@isVoteSour
$LN3@isVoteSour:
	mov	BYTE PTR tv68[ebp], 0
$LN4@isVoteSour:
	mov	al, BYTE PTR tv68[ebp]

; 6440 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?isVoteSourceType@CvVoteInfo@@QBE_NH@Z ENDP		; CvVoteInfo::isVoteSourceType
_TEXT	ENDS
PUBLIC	??_C@_0M@GACBNJGM@VoteSources?$AA@		; `string'
PUBLIC	??_C@_0BA@BOFGBDID@Vote_DiploVotes?$AA@		; `string'
PUBLIC	??_C@_0O@HOBNGFAH@DiploVoteType?$AA@		; `string'
PUBLIC	??_C@_08MGLEHKME@VoteType?$AA@			; `string'
PUBLIC	??_C@_0L@BANNHGEF@AssignCity?$AA@		; `string'
PUBLIC	??_C@_08BLDGOKHI@ForceWar?$AA@			; `string'
PUBLIC	??_C@_0N@LMGFONDN@ForceNoTrade?$AA@		; `string'
PUBLIC	??_C@_0L@FPALGHDM@ForcePeace?$AA@		; `string'
PUBLIC	??_C@_0M@PIBBMDAB@OpenBorders?$AA@		; `string'
PUBLIC	??_C@_0O@CHAPPJJA@DefensivePact?$AA@		; `string'
PUBLIC	??_C@_09GICJAAAM@CivVoting?$AA@			; `string'
PUBLIC	??_C@_0L@HDFOICOL@CityVoting?$AA@		; `string'
PUBLIC	??_C@_07HJHNJLBK@NoNukes?$AA@			; `string'
PUBLIC	??_C@_07FPEFHBMO@Victory?$AA@			; `string'
PUBLIC	??_C@_0BB@OHCAMILD@SecretaryGeneral?$AA@	; `string'
PUBLIC	??_C@_09KIPKCINI@MinVoters?$AA@			; `string'
PUBLIC	??_C@_0BE@HEEAHPJP@PopulationThreshold?$AA@	; `string'
;	COMDAT ??_C@_0M@GACBNJGM@VoteSources?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0M@GACBNJGM@VoteSources?$AA@ DB 'VoteSources', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BOFGBDID@Vote_DiploVotes?$AA@
CONST	SEGMENT
??_C@_0BA@BOFGBDID@Vote_DiploVotes?$AA@ DB 'Vote_DiploVotes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HOBNGFAH@DiploVoteType?$AA@
CONST	SEGMENT
??_C@_0O@HOBNGFAH@DiploVoteType?$AA@ DB 'DiploVoteType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGLEHKME@VoteType?$AA@
CONST	SEGMENT
??_C@_08MGLEHKME@VoteType?$AA@ DB 'VoteType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BANNHGEF@AssignCity?$AA@
CONST	SEGMENT
??_C@_0L@BANNHGEF@AssignCity?$AA@ DB 'AssignCity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BLDGOKHI@ForceWar?$AA@
CONST	SEGMENT
??_C@_08BLDGOKHI@ForceWar?$AA@ DB 'ForceWar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LMGFONDN@ForceNoTrade?$AA@
CONST	SEGMENT
??_C@_0N@LMGFONDN@ForceNoTrade?$AA@ DB 'ForceNoTrade', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FPALGHDM@ForcePeace?$AA@
CONST	SEGMENT
??_C@_0L@FPALGHDM@ForcePeace?$AA@ DB 'ForcePeace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PIBBMDAB@OpenBorders?$AA@
CONST	SEGMENT
??_C@_0M@PIBBMDAB@OpenBorders?$AA@ DB 'OpenBorders', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CHAPPJJA@DefensivePact?$AA@
CONST	SEGMENT
??_C@_0O@CHAPPJJA@DefensivePact?$AA@ DB 'DefensivePact', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GICJAAAM@CivVoting?$AA@
CONST	SEGMENT
??_C@_09GICJAAAM@CivVoting?$AA@ DB 'CivVoting', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HDFOICOL@CityVoting?$AA@
CONST	SEGMENT
??_C@_0L@HDFOICOL@CityVoting?$AA@ DB 'CityVoting', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HJHNJLBK@NoNukes?$AA@
CONST	SEGMENT
??_C@_07HJHNJLBK@NoNukes?$AA@ DB 'NoNukes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPEFHBMO@Victory?$AA@
CONST	SEGMENT
??_C@_07FPEFHBMO@Victory?$AA@ DB 'Victory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OHCAMILD@SecretaryGeneral?$AA@
CONST	SEGMENT
??_C@_0BB@OHCAMILD@SecretaryGeneral?$AA@ DB 'SecretaryGeneral', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KIPKCINI@MinVoters?$AA@
CONST	SEGMENT
??_C@_09KIPKCINI@MinVoters?$AA@ DB 'MinVoters', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HEEAHPJP@PopulationThreshold?$AA@
CONST	SEGMENT
??_C@_0BE@HEEAHPJP@PopulationThreshold?$AA@ DB 'PopulationThreshold', 00H ; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvVoteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szVoteType$ = -4					; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvVoteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvVoteInfo::CacheResults, COMDAT
; _this$ = ecx

; 6443 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6444 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@33

; 6445 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@33
$LN1@CacheResul@33:

; 6446 : 
; 6447 : 	m_iPopulationThreshold = kResults.GetInt("PopulationThreshold");

	push	OFFSET ??_C@_0BE@HEEAHPJP@PopulationThreshold?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 6448 : 	m_iMinVoters = kResults.GetInt("MinVoters");

	push	OFFSET ??_C@_09KIPKCINI@MinVoters?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 6449 : 
; 6450 : 	m_bSecretaryGeneral = kResults.GetBool("SecretaryGeneral");

	push	OFFSET ??_C@_0BB@OHCAMILD@SecretaryGeneral?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+268], al

; 6451 : 	m_bVictory = kResults.GetBool("Victory");

	push	OFFSET ??_C@_07FPEFHBMO@Victory?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+269], al

; 6452 : 	m_bNoNukes = kResults.GetBool("NoNukes");

	push	OFFSET ??_C@_07HJHNJLBK@NoNukes?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+270], al

; 6453 : 	m_bCityVoting = kResults.GetBool("CityVoting");

	push	OFFSET ??_C@_0L@HDFOICOL@CityVoting?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+271], al

; 6454 : 	m_bCivVoting = kResults.GetBool("CivVoting");

	push	OFFSET ??_C@_09GICJAAAM@CivVoting?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+272], al

; 6455 : 	m_bDefensivePact = kResults.GetBool("DefensivePact");

	push	OFFSET ??_C@_0O@CHAPPJJA@DefensivePact?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+273], al

; 6456 : 	m_bOpenBorders = kResults.GetBool("OpenBorders");

	push	OFFSET ??_C@_0M@PIBBMDAB@OpenBorders?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+274], al

; 6457 : 	m_bForcePeace = kResults.GetBool("ForcePeace");

	push	OFFSET ??_C@_0L@FPALGHDM@ForcePeace?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+275], al

; 6458 : 	m_bForceNoTrade = kResults.GetBool("ForceNoTrade");

	push	OFFSET ??_C@_0N@LMGFONDN@ForceNoTrade?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+276], al

; 6459 : 	m_bForceWar = kResults.GetBool("ForceWar");

	push	OFFSET ??_C@_08BLDGOKHI@ForceWar?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+277], al

; 6460 : 	m_bAssignCity = kResults.GetBool("AssignCity");

	push	OFFSET ??_C@_0L@BANNHGEF@AssignCity?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+278], al

; 6461 : 
; 6462 : 	const char* szVoteType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szVoteType$[ebp], eax

; 6463 : 	kUtility.PopulateArrayByExistence(m_abVoteSourceTypes, "VoteSources", "Vote_DiploVotes", "DiploVoteType", "VoteType", szVoteType);

	mov	edx, DWORD PTR _szVoteType$[ebp]
	push	edx
	push	OFFSET ??_C@_08MGLEHKME@VoteType?$AA@
	push	OFFSET ??_C@_0O@HOBNGFAH@DiploVoteType?$AA@
	push	OFFSET ??_C@_0BA@BOFGBDID@Vote_DiploVotes?$AA@
	push	OFFSET ??_C@_0M@GACBNJGM@VoteSources?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 280				; 00000118H
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PopulateArrayByExistence@CvDatabaseUtility@@QAE_NAAPA_NPBD1111@Z ; CvDatabaseUtility::PopulateArrayByExistence

; 6464 : 
; 6465 : 	return true;

	mov	al, 1
$LN2@CacheResul@33:

; 6466 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvVoteInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvVoteInfo::CacheResults
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ ; std::_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::~_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
PUBLIC	?_Buy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAE_NI@Z ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Buy
PUBLIC	??_7CvEntityEventInfo@@6B@			; CvEntityEventInfo::`vftable'
PUBLIC	??0CvEntityEventInfo@@QAE@XZ			; CvEntityEventInfo::CvEntityEventInfo
PUBLIC	?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvEntityEventInfo::CacheResults
;	COMDAT ??_7CvEntityEventInfo@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
CONST	SEGMENT
??_7CvEntityEventInfo@@6B@ DD FLAT:?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvEntityEventInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvEntityEventInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvEntityEventInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvEntityEventInfo@@QAE@XZ$2
__ehfuncinfo$??0CvEntityEventInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvEntityEventInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvEntityEventInfo@@QAE@XZ
_TEXT	SEGMENT
tv145 = -136						; size = 4
tv170 = -132						; size = 4
_this$ = -128						; size = 4
$T236767 = -124						; size = 4
$T236711 = -30						; size = 1
$T236698 = -29						; size = 1
$T236694 = -28						; size = 4
$T236687 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CvEntityEventInfo@@QAE@XZ PROC			; CvEntityEventInfo::CvEntityEventInfo, COMDAT
; _this$ = ecx

; 6473 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvEntityEventInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvEntityEventInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	mov	DWORD PTR $T236767[ebp], ecx
	lea	edx, DWORD PTR $T236711[ebp]
	mov	DWORD PTR $T236687[ebp], edx
	lea	eax, DWORD PTR $T236698[ebp]
	mov	DWORD PTR $T236694[ebp], eax
	mov	ecx, DWORD PTR $T236767[ebp]
	mov	DWORD PTR tv170[ebp], ecx
	mov	edx, DWORD PTR $T236767[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	0
	mov	ecx, DWORD PTR $T236767[ebp]
	call	?_Buy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAE_NI@Z ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+276], 1

; 6474 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvEntityEventInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvEntityEventInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR $T236767[ebp]
	jmp	??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ
__ehhandler$??0CvEntityEventInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvEntityEventInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvEntityEventInfo@@QAE@XZ ENDP			; CvEntityEventInfo::CvEntityEventInfo
PUBLIC	?push_back@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAEXABW4AnimationPathTypes@@@Z ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::push_back
PUBLIC	??_C@_0JI@KIKOMJFA@select?5AnimationPaths?4ID?5from?5En@ ; `string'
PUBLIC	??_C@_0CB@LDHBOGKD@EntityEventInfo?5?9?5AnimationPaths@ ; `string'
PUBLIC	??_C@_0BA@MCIIJCHL@UpdateFormation?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0JI@KIKOMJFA@select?5AnimationPaths?4ID?5from?5En@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
CONST	SEGMENT
??_C@_0JI@KIKOMJFA@select?5AnimationPaths?4ID?5from?5En@ DB 'select Anima'
	DB	'tionPaths.ID from EntityEvent_AnimationPaths inner join Anima'
	DB	'tionPaths on AnimationPathType = AnimationPaths.Type where En'
	DB	'tityEventType = ?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LDHBOGKD@EntityEventInfo?5?9?5AnimationPaths@
CONST	SEGMENT
??_C@_0CB@LDHBOGKD@EntityEventInfo?5?9?5AnimationPaths@ DB 'EntityEventIn'
	DB	'fo - AnimationPaths', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCIIJCHL@UpdateFormation?$AA@
CONST	SEGMENT
??_C@_0BA@MCIIJCHL@UpdateFormation?$AA@ DB 'UpdateFormation', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
__ehfuncinfo$?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -116						; size = 4
_eAnimationPath$221592 = -56				; size = 4
_pResults$221586 = -52					; size = 4
_strKey$221584 = -48					; size = 28
__$ArrayPad$ = -20					; size = 4
_szEntityEventType$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvEntityEventInfo::CacheResults, COMDAT
; _this$ = ecx

; 6477 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 6478 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CacheResul@34

; 6479 : 		return false;

	xor	al, al
	jmp	$LN5@CacheResul@34
$LN4@CacheResul@34:

; 6480 : 
; 6481 : 	m_bUpdateFormation = kResults.GetBool("UpdateFormation");

	push	OFFSET ??_C@_0BA@MCIIJCHL@UpdateFormation?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+276], al

; 6482 : 
; 6483 : 	const char* szEntityEventType = GetType();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR _szEntityEventType$[ebp], eax

; 6484 : 
; 6485 : 	//EntityEvent_AnimationPaths
; 6486 : 	{
; 6487 : 		std::string strKey = "EntityEventInfo - AnimationPaths";

	push	OFFSET ??_C@_0CB@LDHBOGKD@EntityEventInfo?5?9?5AnimationPaths@
	lea	ecx, DWORD PTR _strKey$221584[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 6488 : 		Database::Results* pResults = kUtility.GetResults(strKey);

	lea	edx, DWORD PTR _strKey$221584[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$221586[ebp], eax

; 6489 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$221586[ebp], 0
	jne	SHORT $LN3@CacheResul@34

; 6490 : 		{
; 6491 : 			pResults = kUtility.PrepareResults(strKey, "select AnimationPaths.ID from EntityEvent_AnimationPaths inner join AnimationPaths on AnimationPathType = AnimationPaths.Type where EntityEventType = ?");

	push	OFFSET ??_C@_0JI@KIKOMJFA@select?5AnimationPaths?4ID?5from?5En@
	lea	eax, DWORD PTR _strKey$221584[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$221586[ebp], eax
$LN3@CacheResul@34:

; 6492 : 		}
; 6493 : 
; 6494 : 		pResults->Bind(1, szEntityEventType, -1, false);

	push	0
	push	-1
	mov	ecx, DWORD PTR _szEntityEventType$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pResults$221586[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z
$LN2@CacheResul@34:

; 6495 : 
; 6496 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$221586[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@CacheResul@34

; 6497 : 		{
; 6498 : 			const AnimationPathTypes eAnimationPath = (AnimationPathTypes)pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$221586[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	DWORD PTR _eAnimationPath$221592[ebp], eax

; 6499 : 			m_vctAnimationPathType.push_back(eAnimationPath);

	lea	eax, DWORD PTR _eAnimationPath$221592[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	call	?push_back@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAEXABW4AnimationPathTypes@@@Z ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::push_back

; 6500 : 		}

	jmp	SHORT $LN2@CacheResul@34
$LN1@CacheResul@34:

; 6501 : 
; 6502 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$221586[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 6503 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$221584[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 6504 : 
; 6505 : 	return true;

	mov	al, 1
$LN5@CacheResul@34:

; 6506 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _strKey$221584[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvEntityEventInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvEntityEventInfo::CacheResults
PUBLIC	?getAnimationPathType@CvEntityEventInfo@@QBE?AW4AnimationPathTypes@@H@Z ; CvEntityEventInfo::getAnimationPathType
; Function compile flags: /Odtp
;	COMDAT ?getAnimationPathType@CvEntityEventInfo@@QBE?AW4AnimationPathTypes@@H@Z
_TEXT	SEGMENT
tv72 = -12						; size = 4
_this$ = -8						; size = 4
$T236910 = -4						; size = 4
_iIndex$ = 8						; size = 4
?getAnimationPathType@CvEntityEventInfo@@QBE?AW4AnimationPathTypes@@H@Z PROC ; CvEntityEventInfo::getAnimationPathType, COMDAT
; _this$ = ecx

; 6509 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 6510 : 	return iIndex >= (int)m_vctAnimationPathType.size() ? ANIMATIONPATH_NONE : m_vctAnimationPathType[iIndex];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR $T236910[ebp], eax
	mov	ecx, DWORD PTR $T236910[ebp]
	mov	edx, DWORD PTR $T236910[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR _iIndex$[ebp], eax
	jl	SHORT $LN7@getAnimati
	mov	DWORD PTR tv72[ebp], -1
	jmp	SHORT $LN4@getAnimati
$LN7@getAnimati:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	mov	eax, DWORD PTR _iIndex$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv72[ebp], ecx
$LN4@getAnimati:
	mov	eax, DWORD PTR tv72[ebp]

; 6511 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?getAnimationPathType@CvEntityEventInfo@@QBE?AW4AnimationPathTypes@@H@Z ENDP ; CvEntityEventInfo::getAnimationPathType
_TEXT	ENDS
PUBLIC	?getAnimationPathCount@CvEntityEventInfo@@QBEHXZ ; CvEntityEventInfo::getAnimationPathCount
; Function compile flags: /Odtp
;	COMDAT ?getAnimationPathCount@CvEntityEventInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T236919 = -4						; size = 4
?getAnimationPathCount@CvEntityEventInfo@@QBEHXZ PROC	; CvEntityEventInfo::getAnimationPathCount, COMDAT
; _this$ = ecx

; 6514 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6515 : 	return m_vctAnimationPathType.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	mov	DWORD PTR $T236919[ebp], eax
	mov	ecx, DWORD PTR $T236919[ebp]
	mov	edx, DWORD PTR $T236919[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2

; 6516 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAnimationPathCount@CvEntityEventInfo@@QBEHXZ ENDP	; CvEntityEventInfo::getAnimationPathCount
_TEXT	ENDS
PUBLIC	?getUpdateFormation@CvEntityEventInfo@@QBE_NXZ	; CvEntityEventInfo::getUpdateFormation
; Function compile flags: /Odtp
;	COMDAT ?getUpdateFormation@CvEntityEventInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUpdateFormation@CvEntityEventInfo@@QBE_NXZ PROC	; CvEntityEventInfo::getUpdateFormation, COMDAT
; _this$ = ecx

; 6519 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6520 : 	return m_bUpdateFormation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+276]

; 6521 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getUpdateFormation@CvEntityEventInfo@@QBE_NXZ ENDP	; CvEntityEventInfo::getUpdateFormation
_TEXT	ENDS
PUBLIC	??_7CvEraInfo@@6B@				; CvEraInfo::`vftable'
PUBLIC	??0CvEraInfo@@QAE@XZ				; CvEraInfo::CvEraInfo
PUBLIC	?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvEraInfo::CacheResults
EXTRN	??_ECvEraInfo@@UAEPAXI@Z:PROC			; CvEraInfo::`vector deleting destructor'
;	COMDAT ??_7CvEraInfo@@6B@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
CONST	SEGMENT
??_7CvEraInfo@@6B@ DD FLAT:?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvEraInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvEraInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CvEraInfo@@QAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??0CvEraInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CvEraInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvEraInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvEraInfo@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CvEraInfo@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CvEraInfo@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CvEraInfo@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CvEraInfo@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CvEraInfo@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CvEraInfo@@QAE@XZ$14
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvEraInfo@@QAE@XZ
_TEXT	SEGMENT
tv286 = -160						; size = 4
tv311 = -156						; size = 4
_this$ = -152						; size = 4
$T237041 = -148						; size = 4
$T236992 = -54						; size = 1
$T236979 = -53						; size = 1
$T236975 = -52						; size = 4
$T236968 = -44						; size = 4
$T236961 = -36						; size = 4
$T236956 = -32						; size = 4
$T236951 = -28						; size = 4
$T236946 = -24						; size = 4
$T236941 = -20						; size = 4
$T236936 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvEraInfo@@QAE@XZ PROC				; CvEraInfo::CvEraInfo, COMDAT
; _this$ = ecx

; 6562 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvEraInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 148				; 00000094H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvEraInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+284], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+288], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+292], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+312], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+316], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+328], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+332], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+336], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+340], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+344], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+352], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+356], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+360], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+364], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+368], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+372], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+376], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	mov	DWORD PTR $T236936[ebp], ecx
	mov	ecx, DWORD PTR $T236936[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 408				; 00000198H
	mov	DWORD PTR $T236941[ebp], edx
	mov	ecx, DWORD PTR $T236941[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 436				; 000001b4H
	mov	DWORD PTR $T236946[ebp], eax
	mov	ecx, DWORD PTR $T236946[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	mov	DWORD PTR $T236951[ebp], ecx
	mov	ecx, DWORD PTR $T236951[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 492				; 000001ecH
	mov	DWORD PTR $T236956[ebp], edx
	mov	ecx, DWORD PTR $T236956[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 520				; 00000208H
	mov	DWORD PTR $T236961[ebp], eax
	mov	ecx, DWORD PTR $T236961[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+548], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+552], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+553], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+554], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 556				; 0000022cH
	mov	DWORD PTR $T237041[ebp], edx
	lea	eax, DWORD PTR $T236992[ebp]
	mov	DWORD PTR $T236968[ebp], eax
	lea	ecx, DWORD PTR $T236979[ebp]
	mov	DWORD PTR $T236975[ebp], ecx
	mov	edx, DWORD PTR $T237041[ebp]
	mov	DWORD PTR tv311[ebp], edx
	mov	eax, DWORD PTR $T237041[ebp]
	mov	DWORD PTR tv286[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	push	0
	mov	ecx, DWORD PTR $T237041[ebp]
	call	?_Buy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAE_NI@Z ; std::vector<CvString,std::allocator<CvString> >::_Buy
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 6563 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvEraInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvEraInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvEraInfo@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 408				; 00000198H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvEraInfo@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvEraInfo@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvEraInfo@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 492				; 000001ecH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvEraInfo@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??0CvEraInfo@@QAE@XZ$14:
	mov	ecx, DWORD PTR $T237041[ebp]
	jmp	??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
__ehhandler$??0CvEraInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-152]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvEraInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvEraInfo@@QAE@XZ ENDP				; CvEraInfo::CvEraInfo
PUBLIC	??1CvEraInfo@@UAE@XZ				; CvEraInfo::~CvEraInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvEraInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvEraInfo@@UAEPAXI@Z PROC				; CvEraInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvEraInfo@@UAE@XZ			; CvEraInfo::~CvEraInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@18
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@18:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvEraInfo@@UAEPAXI@Z ENDP				; CvEraInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__ehfuncinfo$??1CvEraInfo@@UAE@XZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??1CvEraInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CvEraInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvEraInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvEraInfo@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CvEraInfo@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CvEraInfo@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CvEraInfo@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CvEraInfo@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CvEraInfo@@UAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CvEraInfo@@UAE@XZ$8
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvEraInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -116						; size = 4
$T237211 = -76						; size = 4
$T237206 = -72						; size = 4
$T237201 = -68						; size = 4
$T237196 = -64						; size = 4
$T237191 = -60						; size = 4
$T237186 = -56						; size = 4
$T237181 = -52						; size = 4
__$EHRec$ = -12						; size = 12
??1CvEraInfo@@UAE@XZ PROC				; CvEraInfo::~CvEraInfo, COMDAT
; _this$ = ecx

; 6566 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvEraInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvEraInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 6

; 6567 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	mov	DWORD PTR $T237181[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR $T237181[ebp]
	call	?_Tidy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXXZ ; std::vector<CvString,std::allocator<CvString> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 520				; 00000208H
	mov	DWORD PTR $T237186[ebp], edx
	mov	ecx, DWORD PTR $T237186[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 492				; 000001ecH
	mov	DWORD PTR $T237191[ebp], eax
	mov	ecx, DWORD PTR $T237191[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	mov	DWORD PTR $T237196[ebp], ecx
	mov	ecx, DWORD PTR $T237196[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 436				; 000001b4H
	mov	DWORD PTR $T237201[ebp], edx
	mov	ecx, DWORD PTR $T237201[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 408				; 00000198H
	mov	DWORD PTR $T237206[ebp], eax
	mov	ecx, DWORD PTR $T237206[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	mov	DWORD PTR $T237211[ebp], ecx
	mov	ecx, DWORD PTR $T237211[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvEraInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvEraInfo@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvEraInfo@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 408				; 00000198H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvEraInfo@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvEraInfo@@UAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvEraInfo@@UAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 492				; 000001ecH
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvEraInfo@@UAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$??1CvEraInfo@@UAE@XZ$8:
	mov	ecx, DWORD PTR $T237181[ebp]
	jmp	??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
__ehhandler$??1CvEraInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-108]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvEraInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvEraInfo@@UAE@XZ ENDP				; CvEraInfo::~CvEraInfo
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
;	COMDAT ??1CvString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CvString@@QAE@XZ PROC				; CvString::~CvString, COMDAT
; _this$ = ecx

; 28   : 	~CvString() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CvString@@QAE@XZ ENDP				; CvString::~CvString
_TEXT	ENDS
PUBLIC	?getStartingUnitMultiplier@CvEraInfo@@QBEHXZ	; CvEraInfo::getStartingUnitMultiplier
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
;	COMDAT ?getStartingUnitMultiplier@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingUnitMultiplier@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getStartingUnitMultiplier, COMDAT
; _this$ = ecx

; 6570 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6571 : 	return m_iStartingUnitMultiplier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 6572 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingUnitMultiplier@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getStartingUnitMultiplier
_TEXT	ENDS
PUBLIC	?getStartingDefenseUnits@CvEraInfo@@QBEHXZ	; CvEraInfo::getStartingDefenseUnits
; Function compile flags: /Odtp
;	COMDAT ?getStartingDefenseUnits@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingDefenseUnits@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getStartingDefenseUnits, COMDAT
; _this$ = ecx

; 6575 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6576 : 	return m_iStartingDefenseUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 6577 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingDefenseUnits@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getStartingDefenseUnits
_TEXT	ENDS
PUBLIC	?getStartingWorkerUnits@CvEraInfo@@QBEHXZ	; CvEraInfo::getStartingWorkerUnits
; Function compile flags: /Odtp
;	COMDAT ?getStartingWorkerUnits@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingWorkerUnits@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getStartingWorkerUnits, COMDAT
; _this$ = ecx

; 6580 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6581 : 	return m_iStartingWorkerUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 6582 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingWorkerUnits@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getStartingWorkerUnits
_TEXT	ENDS
PUBLIC	?getStartingExploreUnits@CvEraInfo@@QBEHXZ	; CvEraInfo::getStartingExploreUnits
; Function compile flags: /Odtp
;	COMDAT ?getStartingExploreUnits@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingExploreUnits@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getStartingExploreUnits, COMDAT
; _this$ = ecx

; 6585 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6586 : 	return m_iStartingExploreUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+272]

; 6587 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingExploreUnits@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getStartingExploreUnits
_TEXT	ENDS
PUBLIC	?getResearchAgreementCost@CvEraInfo@@QBEHXZ	; CvEraInfo::getResearchAgreementCost
; Function compile flags: /Odtp
;	COMDAT ?getResearchAgreementCost@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResearchAgreementCost@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getResearchAgreementCost, COMDAT
; _this$ = ecx

; 6590 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6591 : 	return m_iResearchAgreementCost;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+276]

; 6592 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResearchAgreementCost@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getResearchAgreementCost
_TEXT	ENDS
PUBLIC	?getEmbarkedUnitDefense@CvEraInfo@@QBEHXZ	; CvEraInfo::getEmbarkedUnitDefense
; Function compile flags: /Odtp
;	COMDAT ?getEmbarkedUnitDefense@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEmbarkedUnitDefense@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getEmbarkedUnitDefense, COMDAT
; _this$ = ecx

; 6595 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6596 : 	return m_iEmbarkedUnitDefense;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+280]

; 6597 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEmbarkedUnitDefense@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getEmbarkedUnitDefense
_TEXT	ENDS
PUBLIC	?getStartingGold@CvEraInfo@@QBEHXZ		; CvEraInfo::getStartingGold
; Function compile flags: /Odtp
;	COMDAT ?getStartingGold@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingGold@CvEraInfo@@QBEHXZ PROC			; CvEraInfo::getStartingGold, COMDAT
; _this$ = ecx

; 6600 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6601 : 	return m_iStartingGold;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+284]

; 6602 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingGold@CvEraInfo@@QBEHXZ ENDP			; CvEraInfo::getStartingGold
_TEXT	ENDS
PUBLIC	?getStartingCulture@CvEraInfo@@QBEHXZ		; CvEraInfo::getStartingCulture
; Function compile flags: /Odtp
;	COMDAT ?getStartingCulture@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartingCulture@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getStartingCulture, COMDAT
; _this$ = ecx

; 6605 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6606 : 	return m_iStartingCulture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+288]

; 6607 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartingCulture@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getStartingCulture
_TEXT	ENDS
PUBLIC	?getFreePopulation@CvEraInfo@@QBEHXZ		; CvEraInfo::getFreePopulation
; Function compile flags: /Odtp
;	COMDAT ?getFreePopulation@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFreePopulation@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getFreePopulation, COMDAT
; _this$ = ecx

; 6610 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6611 : 	return m_iFreePopulation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+292]

; 6612 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFreePopulation@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getFreePopulation
_TEXT	ENDS
PUBLIC	?getLaterEraBuildingConstructMod@CvEraInfo@@QBEHXZ ; CvEraInfo::getLaterEraBuildingConstructMod
; Function compile flags: /Odtp
;	COMDAT ?getLaterEraBuildingConstructMod@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLaterEraBuildingConstructMod@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getLaterEraBuildingConstructMod, COMDAT
; _this$ = ecx

; 6615 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6616 : 	return m_iLaterEraBuildingConstructMod;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+296]

; 6617 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLaterEraBuildingConstructMod@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getLaterEraBuildingConstructMod
_TEXT	ENDS
PUBLIC	?getStartPercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getStartPercent
; Function compile flags: /Odtp
;	COMDAT ?getStartPercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getStartPercent@CvEraInfo@@QBEHXZ PROC			; CvEraInfo::getStartPercent, COMDAT
; _this$ = ecx

; 6620 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6621 : 	return m_iStartPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+300]

; 6622 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getStartPercent@CvEraInfo@@QBEHXZ ENDP			; CvEraInfo::getStartPercent
_TEXT	ENDS
PUBLIC	?getBuildingMaintenancePercent@CvEraInfo@@QBEHXZ ; CvEraInfo::getBuildingMaintenancePercent
; Function compile flags: /Odtp
;	COMDAT ?getBuildingMaintenancePercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildingMaintenancePercent@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getBuildingMaintenancePercent, COMDAT
; _this$ = ecx

; 6625 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6626 : 	return m_iBuildingMaintenancePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+304]

; 6627 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildingMaintenancePercent@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getBuildingMaintenancePercent
_TEXT	ENDS
PUBLIC	?getGrowthPercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getGrowthPercent
; Function compile flags: /Odtp
;	COMDAT ?getGrowthPercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGrowthPercent@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getGrowthPercent, COMDAT
; _this$ = ecx

; 6630 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6631 : 	return m_iGrowthPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+308]

; 6632 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGrowthPercent@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getGrowthPercent
_TEXT	ENDS
PUBLIC	?getTrainPercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getTrainPercent
; Function compile flags: /Odtp
;	COMDAT ?getTrainPercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTrainPercent@CvEraInfo@@QBEHXZ PROC			; CvEraInfo::getTrainPercent, COMDAT
; _this$ = ecx

; 6635 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6636 : 	return m_iTrainPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+312]

; 6637 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTrainPercent@CvEraInfo@@QBEHXZ ENDP			; CvEraInfo::getTrainPercent
_TEXT	ENDS
PUBLIC	?getConstructPercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getConstructPercent
; Function compile flags: /Odtp
;	COMDAT ?getConstructPercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getConstructPercent@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getConstructPercent, COMDAT
; _this$ = ecx

; 6640 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6641 : 	return m_iConstructPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+316]

; 6642 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getConstructPercent@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getConstructPercent
_TEXT	ENDS
PUBLIC	?getCreatePercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getCreatePercent
; Function compile flags: /Odtp
;	COMDAT ?getCreatePercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCreatePercent@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getCreatePercent, COMDAT
; _this$ = ecx

; 6645 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6646 : 	return m_iCreatePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+320]

; 6647 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getCreatePercent@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getCreatePercent
_TEXT	ENDS
PUBLIC	?getResearchPercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getResearchPercent
; Function compile flags: /Odtp
;	COMDAT ?getResearchPercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getResearchPercent@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getResearchPercent, COMDAT
; _this$ = ecx

; 6650 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6651 : 	return m_iResearchPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+324]

; 6652 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getResearchPercent@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getResearchPercent
_TEXT	ENDS
PUBLIC	?getBuildPercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getBuildPercent
; Function compile flags: /Odtp
;	COMDAT ?getBuildPercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBuildPercent@CvEraInfo@@QBEHXZ PROC			; CvEraInfo::getBuildPercent, COMDAT
; _this$ = ecx

; 6655 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6656 : 	return m_iBuildPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+328]

; 6657 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getBuildPercent@CvEraInfo@@QBEHXZ ENDP			; CvEraInfo::getBuildPercent
_TEXT	ENDS
PUBLIC	?getImprovementPercent@CvEraInfo@@QBEHXZ	; CvEraInfo::getImprovementPercent
; Function compile flags: /Odtp
;	COMDAT ?getImprovementPercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getImprovementPercent@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getImprovementPercent, COMDAT
; _this$ = ecx

; 6660 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6661 : 	return m_iImprovementPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+332]

; 6662 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getImprovementPercent@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getImprovementPercent
_TEXT	ENDS
PUBLIC	?getGreatPeoplePercent@CvEraInfo@@QBEHXZ	; CvEraInfo::getGreatPeoplePercent
; Function compile flags: /Odtp
;	COMDAT ?getGreatPeoplePercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getGreatPeoplePercent@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getGreatPeoplePercent, COMDAT
; _this$ = ecx

; 6665 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6666 : 	return m_iGreatPeoplePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+336]

; 6667 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getGreatPeoplePercent@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getGreatPeoplePercent
_TEXT	ENDS
PUBLIC	?getEventChancePerTurn@CvEraInfo@@QBEHXZ	; CvEraInfo::getEventChancePerTurn
; Function compile flags: /Odtp
;	COMDAT ?getEventChancePerTurn@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getEventChancePerTurn@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getEventChancePerTurn, COMDAT
; _this$ = ecx

; 6670 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6671 : 	return m_iEventChancePerTurn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+340]

; 6672 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getEventChancePerTurn@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getEventChancePerTurn
_TEXT	ENDS
PUBLIC	?getSpiesGrantedForPlayer@CvEraInfo@@QBEHXZ	; CvEraInfo::getSpiesGrantedForPlayer
; Function compile flags: /Odtp
;	COMDAT ?getSpiesGrantedForPlayer@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSpiesGrantedForPlayer@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getSpiesGrantedForPlayer, COMDAT
; _this$ = ecx

; 6676 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6677 : 	return m_iSpiesGrantedForPlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+344]

; 6678 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSpiesGrantedForPlayer@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getSpiesGrantedForPlayer
_TEXT	ENDS
PUBLIC	?getSpiesGrantedForEveryone@CvEraInfo@@QBEHXZ	; CvEraInfo::getSpiesGrantedForEveryone
; Function compile flags: /Odtp
;	COMDAT ?getSpiesGrantedForEveryone@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSpiesGrantedForEveryone@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getSpiesGrantedForEveryone, COMDAT
; _this$ = ecx

; 6682 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6683 : 	return m_iSpiesGrantedForEveryone;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+348]

; 6684 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSpiesGrantedForEveryone@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getSpiesGrantedForEveryone
_TEXT	ENDS
PUBLIC	?getFaithCostMultiplier@CvEraInfo@@QBEHXZ	; CvEraInfo::getFaithCostMultiplier
; Function compile flags: /Odtp
;	COMDAT ?getFaithCostMultiplier@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFaithCostMultiplier@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getFaithCostMultiplier, COMDAT
; _this$ = ecx

; 6688 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6689 : 	return m_iFaithCostMultiplier;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+352]

; 6690 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFaithCostMultiplier@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getFaithCostMultiplier
_TEXT	ENDS
PUBLIC	?getDiploEmphasisReligion@CvEraInfo@@QBEHXZ	; CvEraInfo::getDiploEmphasisReligion
; Function compile flags: /Odtp
;	COMDAT ?getDiploEmphasisReligion@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDiploEmphasisReligion@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getDiploEmphasisReligion, COMDAT
; _this$ = ecx

; 6694 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6695 : 	return m_iDiploEmphasisReligion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+356]

; 6696 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDiploEmphasisReligion@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getDiploEmphasisReligion
_TEXT	ENDS
PUBLIC	?getDiplpEmphasisLatePolicies@CvEraInfo@@QBEHXZ	; CvEraInfo::getDiplpEmphasisLatePolicies
; Function compile flags: /Odtp
;	COMDAT ?getDiplpEmphasisLatePolicies@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDiplpEmphasisLatePolicies@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getDiplpEmphasisLatePolicies, COMDAT
; _this$ = ecx

; 6700 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6701 : 	return m_iDiplpEmphasisLatePolicies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+360]

; 6702 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDiplpEmphasisLatePolicies@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getDiplpEmphasisLatePolicies
_TEXT	ENDS
PUBLIC	?getTradeRouteFoodBonusTimes100@CvEraInfo@@QBEHXZ ; CvEraInfo::getTradeRouteFoodBonusTimes100
; Function compile flags: /Odtp
;	COMDAT ?getTradeRouteFoodBonusTimes100@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTradeRouteFoodBonusTimes100@CvEraInfo@@QBEHXZ PROC	; CvEraInfo::getTradeRouteFoodBonusTimes100, COMDAT
; _this$ = ecx

; 6706 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6707 : 	return m_iTradeRouteFoodBonusTimes100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+364]

; 6708 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTradeRouteFoodBonusTimes100@CvEraInfo@@QBEHXZ ENDP	; CvEraInfo::getTradeRouteFoodBonusTimes100
_TEXT	ENDS
PUBLIC	?getTradeRouteProductionBonusTimes100@CvEraInfo@@QBEHXZ ; CvEraInfo::getTradeRouteProductionBonusTimes100
; Function compile flags: /Odtp
;	COMDAT ?getTradeRouteProductionBonusTimes100@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTradeRouteProductionBonusTimes100@CvEraInfo@@QBEHXZ PROC ; CvEraInfo::getTradeRouteProductionBonusTimes100, COMDAT
; _this$ = ecx

; 6712 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6713 : 	return m_iTradeRouteProductionBonusTimes100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+368]

; 6714 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getTradeRouteProductionBonusTimes100@CvEraInfo@@QBEHXZ ENDP ; CvEraInfo::getTradeRouteProductionBonusTimes100
_TEXT	ENDS
PUBLIC	?getLeaguePercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getLeaguePercent
; Function compile flags: /Odtp
;	COMDAT ?getLeaguePercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLeaguePercent@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getLeaguePercent, COMDAT
; _this$ = ecx

; 6718 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6719 : 	return m_iLeaguePercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+372]

; 6720 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getLeaguePercent@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getLeaguePercent
_TEXT	ENDS
PUBLIC	?getWarmongerPercent@CvEraInfo@@QBEHXZ		; CvEraInfo::getWarmongerPercent
; Function compile flags: /Odtp
;	COMDAT ?getWarmongerPercent@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWarmongerPercent@CvEraInfo@@QBEHXZ PROC		; CvEraInfo::getWarmongerPercent, COMDAT
; _this$ = ecx

; 6724 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6725 : 	return m_iWarmongerPercent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+376]

; 6726 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getWarmongerPercent@CvEraInfo@@QBEHXZ ENDP		; CvEraInfo::getWarmongerPercent
_TEXT	ENDS
PUBLIC	?getArtPrefix@CvEraInfo@@QBEPBDXZ		; CvEraInfo::getArtPrefix
; Function compile flags: /Odtp
;	COMDAT ?getArtPrefix@CvEraInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getArtPrefix@CvEraInfo@@QBEPBDXZ PROC			; CvEraInfo::getArtPrefix, COMDAT
; _this$ = ecx

; 6730 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6731 : 	return m_strArtPrefix.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 464				; 000001d0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 6732 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getArtPrefix@CvEraInfo@@QBEPBDXZ ENDP			; CvEraInfo::getArtPrefix
_TEXT	ENDS
PUBLIC	?GetCityBombardEffectTag@CvEraInfo@@QBEPBDXZ	; CvEraInfo::GetCityBombardEffectTag
; Function compile flags: /Odtp
;	COMDAT ?GetCityBombardEffectTag@CvEraInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCityBombardEffectTag@CvEraInfo@@QBEPBDXZ PROC	; CvEraInfo::GetCityBombardEffectTag, COMDAT
; _this$ = ecx

; 6735 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6736 : 	return m_strCityBombardEffectTag;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 6737 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCityBombardEffectTag@CvEraInfo@@QBEPBDXZ ENDP	; CvEraInfo::GetCityBombardEffectTag
_TEXT	ENDS
PUBLIC	?GetCityBombardEffectTagHash@CvEraInfo@@QBEIXZ	; CvEraInfo::GetCityBombardEffectTagHash
; Function compile flags: /Odtp
;	COMDAT ?GetCityBombardEffectTagHash@CvEraInfo@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCityBombardEffectTagHash@CvEraInfo@@QBEIXZ PROC	; CvEraInfo::GetCityBombardEffectTagHash, COMDAT
; _this$ = ecx

; 6740 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6741 : 	return m_uiCityBombardEffectTagHash;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+548]

; 6742 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCityBombardEffectTagHash@CvEraInfo@@QBEIXZ ENDP	; CvEraInfo::GetCityBombardEffectTagHash
_TEXT	ENDS
PUBLIC	?getAudioUnitVictoryScript@CvEraInfo@@QBEPBDXZ	; CvEraInfo::getAudioUnitVictoryScript
; Function compile flags: /Odtp
;	COMDAT ?getAudioUnitVictoryScript@CvEraInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAudioUnitVictoryScript@CvEraInfo@@QBEPBDXZ PROC	; CvEraInfo::getAudioUnitVictoryScript, COMDAT
; _this$ = ecx

; 6745 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6746 : 	return m_strAudioUnitVictoryScript;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 408				; 00000198H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 6747 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAudioUnitVictoryScript@CvEraInfo@@QBEPBDXZ ENDP	; CvEraInfo::getAudioUnitVictoryScript
_TEXT	ENDS
PUBLIC	?getAudioUnitDefeatScript@CvEraInfo@@QBEPBDXZ	; CvEraInfo::getAudioUnitDefeatScript
; Function compile flags: /Odtp
;	COMDAT ?getAudioUnitDefeatScript@CvEraInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAudioUnitDefeatScript@CvEraInfo@@QBEPBDXZ PROC	; CvEraInfo::getAudioUnitDefeatScript, COMDAT
; _this$ = ecx

; 6750 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6751 : 	return m_strAudioUnitDefeatScript;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 6752 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAudioUnitDefeatScript@CvEraInfo@@QBEPBDXZ ENDP	; CvEraInfo::getAudioUnitDefeatScript
_TEXT	ENDS
PUBLIC	?isNoGoodies@CvEraInfo@@QBE_NXZ			; CvEraInfo::isNoGoodies
; Function compile flags: /Odtp
;	COMDAT ?isNoGoodies@CvEraInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoGoodies@CvEraInfo@@QBE_NXZ PROC			; CvEraInfo::isNoGoodies, COMDAT
; _this$ = ecx

; 6755 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6756 : 	return m_bNoGoodies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+552]

; 6757 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoGoodies@CvEraInfo@@QBE_NXZ ENDP			; CvEraInfo::isNoGoodies
_TEXT	ENDS
PUBLIC	?isNoBarbUnits@CvEraInfo@@QBE_NXZ		; CvEraInfo::isNoBarbUnits
; Function compile flags: /Odtp
;	COMDAT ?isNoBarbUnits@CvEraInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoBarbUnits@CvEraInfo@@QBE_NXZ PROC			; CvEraInfo::isNoBarbUnits, COMDAT
; _this$ = ecx

; 6760 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6761 : 	return m_bNoBarbUnits;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+553]

; 6762 : }//------------------------------------------------------------------------------

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoBarbUnits@CvEraInfo@@QBE_NXZ ENDP			; CvEraInfo::isNoBarbUnits
_TEXT	ENDS
PUBLIC	?isNoReligion@CvEraInfo@@QBE_NXZ		; CvEraInfo::isNoReligion
; Function compile flags: /Odtp
;	COMDAT ?isNoReligion@CvEraInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isNoReligion@CvEraInfo@@QBE_NXZ PROC			; CvEraInfo::isNoReligion, COMDAT
; _this$ = ecx

; 6764 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6765 : 	return m_bNoReligion;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+554]

; 6766 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?isNoReligion@CvEraInfo@@QBE_NXZ ENDP			; CvEraInfo::isNoReligion
_TEXT	ENDS
PUBLIC	?GetNumEraVOs@CvEraInfo@@QBEHXZ			; CvEraInfo::GetNumEraVOs
; Function compile flags: /Odtp
;	COMDAT ?GetNumEraVOs@CvEraInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T237366 = -4						; size = 4
?GetNumEraVOs@CvEraInfo@@QBEHXZ PROC			; CvEraInfo::GetNumEraVOs, COMDAT
; _this$ = ecx

; 6769 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6770 : 	return m_vEraVOs.size();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 556				; 0000022cH
	mov	DWORD PTR $T237366[ebp], eax
	mov	ecx, DWORD PTR $T237366[ebp]
	mov	edx, DWORD PTR $T237366[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx

; 6771 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumEraVOs@CvEraInfo@@QBEHXZ ENDP			; CvEraInfo::GetNumEraVOs
_TEXT	ENDS
PUBLIC	?GetEraVO@CvEraInfo@@QAEPBDH@Z			; CvEraInfo::GetEraVO
; Function compile flags: /Odtp
;	COMDAT ?GetEraVO@CvEraInfo@@QAEPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T237372 = -4						; size = 4
_iIndex$ = 8						; size = 4
?GetEraVO@CvEraInfo@@QAEPBDH@Z PROC			; CvEraInfo::GetEraVO, COMDAT
; _this$ = ecx

; 6774 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 6775 : 	return m_vEraVOs[iIndex].c_str();

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+560]
	mov	DWORD PTR $T237372[ebp], eax
	mov	ecx, DWORD PTR $T237372[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 6776 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetEraVO@CvEraInfo@@QAEPBDH@Z ENDP			; CvEraInfo::GetEraVO
_TEXT	ENDS
PUBLIC	?getShortDesc@CvEraInfo@@QBEPBDXZ		; CvEraInfo::getShortDesc
; Function compile flags: /Odtp
;	COMDAT ?getShortDesc@CvEraInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getShortDesc@CvEraInfo@@QBEPBDXZ PROC			; CvEraInfo::getShortDesc, COMDAT
; _this$ = ecx

; 6780 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6781 : 	return m_strShortDesc.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 492				; 000001ecH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 6782 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getShortDesc@CvEraInfo@@QBEPBDXZ ENDP			; CvEraInfo::getShortDesc
_TEXT	ENDS
PUBLIC	?getAbbreviation@CvEraInfo@@QBEPBDXZ		; CvEraInfo::getAbbreviation
; Function compile flags: /Odtp
;	COMDAT ?getAbbreviation@CvEraInfo@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAbbreviation@CvEraInfo@@QBEPBDXZ PROC		; CvEraInfo::getAbbreviation, COMDAT
; _this$ = ecx

; 6786 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6787 : 	return m_strAbbreviation.c_str();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 6788 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getAbbreviation@CvEraInfo@@QBEPBDXZ ENDP		; CvEraInfo::getAbbreviation
_TEXT	ENDS
PUBLIC	??_C@_0DF@BDAKANMP@select?5VOScript?5from?5Era_NewEraV@ ; `string'
PUBLIC	??_C@_0BA@BODMPHDO@Era?5?9?5NewEraVOs?$AA@	; `string'
PUBLIC	??_C@_0N@PNDJMEBP@Abbreviation?$AA@		; `string'
PUBLIC	??_C@_09BBACJJOA@ArtPrefix?$AA@			; `string'
PUBLIC	??_C@_0BG@ONJCKJCD@AudioUnitDefeatScript?$AA@	; `string'
PUBLIC	??_C@_0BH@FLMACHJJ@AudioUnitVictoryScript?$AA@	; `string'
PUBLIC	??_C@_0BF@GNCOFDNM@CityBombardEffectTag?$AA@	; `string'
PUBLIC	??_C@_0BB@DHOHHNEC@WarmongerPercent?$AA@	; `string'
PUBLIC	??_C@_0CC@KCLLHMEO@TradeRouteProductionBonusTimes10@ ; `string'
PUBLIC	??_C@_0BM@DLAMLLG@TradeRouteFoodBonusTimes100?$AA@ ; `string'
PUBLIC	??_C@_0BK@ONGBBMEH@DiploEmphasisLatePolicies?$AA@ ; `string'
PUBLIC	??_C@_0BG@KJONAMGC@DiploEmphasisReligion?$AA@	; `string'
PUBLIC	??_C@_0BE@FNAACLGF@FaithCostMultiplier?$AA@	; `string'
PUBLIC	??_C@_0BI@BHNLDJJE@SpiesGrantedForEveryone?$AA@	; `string'
PUBLIC	??_C@_0BG@HEDCLKDD@SpiesGrantedForPlayer?$AA@	; `string'
PUBLIC	??_C@_0BD@IAKLMCIK@EventChancePerTurn?$AA@	; `string'
PUBLIC	??_C@_0BL@EHCFCBOF@BuildingMaintenancePercent?$AA@ ; `string'
PUBLIC	??_C@_0N@LMBMLKPH@StartPercent?$AA@		; `string'
PUBLIC	??_C@_0BN@DMOADFLF@LaterEraBuildingConstructMod?$AA@ ; `string'
PUBLIC	??_C@_0P@FJHHEGAO@FreePopulation?$AA@		; `string'
PUBLIC	??_C@_0BA@DHEONKCF@StartingCulture?$AA@		; `string'
PUBLIC	??_C@_0N@GFDIJKOM@StartingGold?$AA@		; `string'
PUBLIC	??_C@_0BE@OOLOFKLI@EmbarkedUnitDefense?$AA@	; `string'
PUBLIC	??_C@_0BG@IKJCKPKF@ResearchAgreementCost?$AA@	; `string'
PUBLIC	??_C@_0BH@FOBLFMPB@StartingUnitMultiplier?$AA@	; `string'
PUBLIC	??_C@_0L@ECCBEFML@NoReligion?$AA@		; `string'
PUBLIC	??_C@_0M@NGNKLEID@NoBarbUnits?$AA@		; `string'
PUBLIC	??_C@_09NIEKOOGC@NoGoodies?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	?Calc@FCRC@@QBEKPBXHK@Z:PROC			; FCRC::Calc
EXTRN	?g_CRC32@@3VFCRC@@A:BYTE			; g_CRC32
;	COMDAT ??_C@_0DF@BDAKANMP@select?5VOScript?5from?5Era_NewEraV@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_0DF@BDAKANMP@select?5VOScript?5from?5Era_NewEraV@ DB 'select VOScri'
	DB	'pt from Era_NewEraVOs where EraType = ?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BODMPHDO@Era?5?9?5NewEraVOs?$AA@
CONST	SEGMENT
??_C@_0BA@BODMPHDO@Era?5?9?5NewEraVOs?$AA@ DB 'Era - NewEraVOs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PNDJMEBP@Abbreviation?$AA@
CONST	SEGMENT
??_C@_0N@PNDJMEBP@Abbreviation?$AA@ DB 'Abbreviation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BBACJJOA@ArtPrefix?$AA@
CONST	SEGMENT
??_C@_09BBACJJOA@ArtPrefix?$AA@ DB 'ArtPrefix', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ONJCKJCD@AudioUnitDefeatScript?$AA@
CONST	SEGMENT
??_C@_0BG@ONJCKJCD@AudioUnitDefeatScript?$AA@ DB 'AudioUnitDefeatScript', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FLMACHJJ@AudioUnitVictoryScript?$AA@
CONST	SEGMENT
??_C@_0BH@FLMACHJJ@AudioUnitVictoryScript?$AA@ DB 'AudioUnitVictoryScript'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GNCOFDNM@CityBombardEffectTag?$AA@
CONST	SEGMENT
??_C@_0BF@GNCOFDNM@CityBombardEffectTag?$AA@ DB 'CityBombardEffectTag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DHOHHNEC@WarmongerPercent?$AA@
CONST	SEGMENT
??_C@_0BB@DHOHHNEC@WarmongerPercent?$AA@ DB 'WarmongerPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KCLLHMEO@TradeRouteProductionBonusTimes10@
CONST	SEGMENT
??_C@_0CC@KCLLHMEO@TradeRouteProductionBonusTimes10@ DB 'TradeRouteProduc'
	DB	'tionBonusTimes100', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DLAMLLG@TradeRouteFoodBonusTimes100?$AA@
CONST	SEGMENT
??_C@_0BM@DLAMLLG@TradeRouteFoodBonusTimes100?$AA@ DB 'TradeRouteFoodBonu'
	DB	'sTimes100', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ONGBBMEH@DiploEmphasisLatePolicies?$AA@
CONST	SEGMENT
??_C@_0BK@ONGBBMEH@DiploEmphasisLatePolicies?$AA@ DB 'DiploEmphasisLatePo'
	DB	'licies', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KJONAMGC@DiploEmphasisReligion?$AA@
CONST	SEGMENT
??_C@_0BG@KJONAMGC@DiploEmphasisReligion?$AA@ DB 'DiploEmphasisReligion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FNAACLGF@FaithCostMultiplier?$AA@
CONST	SEGMENT
??_C@_0BE@FNAACLGF@FaithCostMultiplier?$AA@ DB 'FaithCostMultiplier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BHNLDJJE@SpiesGrantedForEveryone?$AA@
CONST	SEGMENT
??_C@_0BI@BHNLDJJE@SpiesGrantedForEveryone?$AA@ DB 'SpiesGrantedForEveryo'
	DB	'ne', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HEDCLKDD@SpiesGrantedForPlayer?$AA@
CONST	SEGMENT
??_C@_0BG@HEDCLKDD@SpiesGrantedForPlayer?$AA@ DB 'SpiesGrantedForPlayer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IAKLMCIK@EventChancePerTurn?$AA@
CONST	SEGMENT
??_C@_0BD@IAKLMCIK@EventChancePerTurn?$AA@ DB 'EventChancePerTurn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EHCFCBOF@BuildingMaintenancePercent?$AA@
CONST	SEGMENT
??_C@_0BL@EHCFCBOF@BuildingMaintenancePercent?$AA@ DB 'BuildingMaintenanc'
	DB	'ePercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LMBMLKPH@StartPercent?$AA@
CONST	SEGMENT
??_C@_0N@LMBMLKPH@StartPercent?$AA@ DB 'StartPercent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DMOADFLF@LaterEraBuildingConstructMod?$AA@
CONST	SEGMENT
??_C@_0BN@DMOADFLF@LaterEraBuildingConstructMod?$AA@ DB 'LaterEraBuilding'
	DB	'ConstructMod', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FJHHEGAO@FreePopulation?$AA@
CONST	SEGMENT
??_C@_0P@FJHHEGAO@FreePopulation?$AA@ DB 'FreePopulation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DHEONKCF@StartingCulture?$AA@
CONST	SEGMENT
??_C@_0BA@DHEONKCF@StartingCulture?$AA@ DB 'StartingCulture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GFDIJKOM@StartingGold?$AA@
CONST	SEGMENT
??_C@_0N@GFDIJKOM@StartingGold?$AA@ DB 'StartingGold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OOLOFKLI@EmbarkedUnitDefense?$AA@
CONST	SEGMENT
??_C@_0BE@OOLOFKLI@EmbarkedUnitDefense?$AA@ DB 'EmbarkedUnitDefense', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IKJCKPKF@ResearchAgreementCost?$AA@
CONST	SEGMENT
??_C@_0BG@IKJCKPKF@ResearchAgreementCost?$AA@ DB 'ResearchAgreementCost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FOBLFMPB@StartingUnitMultiplier?$AA@
CONST	SEGMENT
??_C@_0BH@FOBLFMPB@StartingUnitMultiplier?$AA@ DB 'StartingUnitMultiplier'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ECCBEFML@NoReligion?$AA@
CONST	SEGMENT
??_C@_0L@ECCBEFML@NoReligion?$AA@ DB 'NoReligion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NGNKLEID@NoBarbUnits?$AA@
CONST	SEGMENT
??_C@_0M@NGNKLEID@NoBarbUnits?$AA@ DB 'NoBarbUnits', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NIEKOOGC@NoGoodies?$AA@
CONST	SEGMENT
??_C@_09NIEKOOGC@NoGoodies?$AA@ DB 'NoGoodies', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
__ehfuncinfo$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv512 = -284						; size = 4
tv380 = -280						; size = 4
tv378 = -276						; size = 4
tv668 = -269						; size = 1
tv665 = -268						; size = 4
tv662 = -264						; size = 4
_this$ = -260						; size = 4
$T237648 = -200						; size = 4
$T237636 = -196						; size = 4
$T237474 = -156						; size = 4
$T237458 = -152						; size = 4
$T237623 = -148						; size = 4
$T237622 = -144						; size = 4
$T237621 = -140						; size = 4
$T237620 = -136						; size = 4
$T237619 = -132						; size = 4
$T237442 = -128						; size = 4
$T237441 = -124						; size = 4
$T237435 = -120						; size = 4
$T237434 = -116						; size = 4
$T237428 = -112						; size = 4
$T237427 = -108						; size = 4
$T237421 = -104						; size = 4
$T237420 = -100						; size = 4
$T237414 = -96						; size = 4
$T237413 = -92						; size = 4
$T237393 = -88						; size = 4
$T237389 = -84						; size = 4
$T237388 = -80						; size = 4
$T237380 = -76						; size = 28
_pResults$221776 = -48					; size = 4
_strKey$221774 = -44					; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvEraInfo::CacheResults, COMDAT
; _this$ = ecx

; 6792 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 272				; 00000110H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 6793 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CacheResul@35

; 6794 : 		return false;

	xor	al, al
	jmp	$LN5@CacheResul@35
$LN4@CacheResul@35:

; 6795 : 
; 6796 : 	m_bNoGoodies				= kResults.GetBool("NoGoodies");

	push	OFFSET ??_C@_09NIEKOOGC@NoGoodies?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+552], al

; 6797 : 	m_bNoBarbUnits				= kResults.GetBool("NoBarbUnits");

	push	OFFSET ??_C@_0M@NGNKLEID@NoBarbUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+553], al

; 6798 : 	m_bNoReligion				= kResults.GetBool("NoReligion");

	push	OFFSET ??_C@_0L@ECCBEFML@NoReligion?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+554], al

; 6799 : 	m_iStartingUnitMultiplier	= kResults.GetInt("StartingUnitMultiplier");

	push	OFFSET ??_C@_0BH@FOBLFMPB@StartingUnitMultiplier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+260], eax

; 6800 : 	m_iStartingDefenseUnits		= kResults.GetInt("StartingDefenseUnits");

	push	OFFSET ??_C@_0BF@HINJHOOL@StartingDefenseUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], eax

; 6801 : 	m_iStartingWorkerUnits		= kResults.GetInt("StartingWorkerUnits");

	push	OFFSET ??_C@_0BE@IHOLPDMD@StartingWorkerUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+268], eax

; 6802 : 	m_iStartingExploreUnits		= kResults.GetInt("StartingExploreUnits");

	push	OFFSET ??_C@_0BF@FGHPHKOD@StartingExploreUnits?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+272], eax

; 6803 : 	m_iResearchAgreementCost	= kResults.GetInt("ResearchAgreementCost");

	push	OFFSET ??_C@_0BG@IKJCKPKF@ResearchAgreementCost?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+276], eax

; 6804 : 	m_iEmbarkedUnitDefense		= kResults.GetInt("EmbarkedUnitDefense");

	push	OFFSET ??_C@_0BE@OOLOFKLI@EmbarkedUnitDefense?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+280], eax

; 6805 : 	m_iStartingGold				= kResults.GetInt("StartingGold");

	push	OFFSET ??_C@_0N@GFDIJKOM@StartingGold?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+284], eax

; 6806 : 	m_iStartingCulture			= kResults.GetInt("StartingCulture");

	push	OFFSET ??_C@_0BA@DHEONKCF@StartingCulture?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+288], eax

; 6807 : 	m_iFreePopulation			= kResults.GetInt("FreePopulation");

	push	OFFSET ??_C@_0P@FJHHEGAO@FreePopulation?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+292], eax

; 6808 : 	m_iLaterEraBuildingConstructMod = kResults.GetInt("LaterEraBuildingConstructMod");

	push	OFFSET ??_C@_0BN@DMOADFLF@LaterEraBuildingConstructMod?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+296], eax

; 6809 : 	m_iStartPercent				= kResults.GetInt("StartPercent");

	push	OFFSET ??_C@_0N@LMBMLKPH@StartPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+300], eax

; 6810 : 	m_iBuildingMaintenancePercent			= kResults.GetInt("BuildingMaintenancePercent");

	push	OFFSET ??_C@_0BL@EHCFCBOF@BuildingMaintenancePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+304], eax

; 6811 : 	m_iGrowthPercent			= kResults.GetInt("GrowthPercent");

	push	OFFSET ??_C@_0O@FEGMMMKL@GrowthPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+308], eax

; 6812 : 	m_iTrainPercent				= kResults.GetInt("TrainPercent");

	push	OFFSET ??_C@_0N@MIPCKLLP@TrainPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], eax

; 6813 : 	m_iConstructPercent			= kResults.GetInt("ConstructPercent");

	push	OFFSET ??_C@_0BB@NMAKHNP@ConstructPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+316], eax

; 6814 : 	m_iCreatePercent			= kResults.GetInt("CreatePercent");

	push	OFFSET ??_C@_0O@BAPLECAO@CreatePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+320], eax

; 6815 : 	m_iResearchPercent			= kResults.GetInt("ResearchPercent");

	push	OFFSET ??_C@_0BA@HBDGGGLG@ResearchPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+324], eax

; 6816 : 	m_iBuildPercent				= kResults.GetInt("BuildPercent");

	push	OFFSET ??_C@_0N@GBEMJLKI@BuildPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+328], eax

; 6817 : 	m_iImprovementPercent		= kResults.GetInt("ImprovementPercent");

	push	OFFSET ??_C@_0BD@GNEEJCKL@ImprovementPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+332], eax

; 6818 : 	m_iGreatPeoplePercent		= kResults.GetInt("GreatPeoplePercent");

	push	OFFSET ??_C@_0BD@COBBPJBG@GreatPeoplePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+336], eax

; 6819 : 	m_iEventChancePerTurn		= kResults.GetInt("EventChancePerTurn");

	push	OFFSET ??_C@_0BD@IAKLMCIK@EventChancePerTurn?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+340], eax

; 6820 : 	m_iSpiesGrantedForPlayer    = kResults.GetInt("SpiesGrantedForPlayer");

	push	OFFSET ??_C@_0BG@HEDCLKDD@SpiesGrantedForPlayer?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+344], eax

; 6821 : 	m_iSpiesGrantedForEveryone  = kResults.GetInt("SpiesGrantedForEveryone");

	push	OFFSET ??_C@_0BI@BHNLDJJE@SpiesGrantedForEveryone?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+348], eax

; 6822 : 	m_iFaithCostMultiplier      = kResults.GetInt("FaithCostMultiplier");

	push	OFFSET ??_C@_0BE@FNAACLGF@FaithCostMultiplier?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+352], eax

; 6823 : 	m_iDiploEmphasisReligion    = kResults.GetInt("DiploEmphasisReligion");

	push	OFFSET ??_C@_0BG@KJONAMGC@DiploEmphasisReligion?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+356], eax

; 6824 : 	m_iDiplpEmphasisLatePolicies= kResults.GetInt("DiploEmphasisLatePolicies");

	push	OFFSET ??_C@_0BK@ONGBBMEH@DiploEmphasisLatePolicies?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+360], eax

; 6825 : 	m_iTradeRouteFoodBonusTimes100 = kResults.GetInt("TradeRouteFoodBonusTimes100");

	push	OFFSET ??_C@_0BM@DLAMLLG@TradeRouteFoodBonusTimes100?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+364], eax

; 6826 : 	m_iTradeRouteProductionBonusTimes100 = kResults.GetInt("TradeRouteProductionBonusTimes100");

	push	OFFSET ??_C@_0CC@KCLLHMEO@TradeRouteProductionBonusTimes10@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+368], eax

; 6827 : 	m_iLeaguePercent			= kResults.GetInt("LeaguePercent");

	push	OFFSET ??_C@_0O@ILGKMMHI@LeaguePercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+372], eax

; 6828 : 	m_iWarmongerPercent			= kResults.GetInt("WarmongerPercent");

	push	OFFSET ??_C@_0BB@DHOHHNEC@WarmongerPercent?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+376], eax

; 6829 : 
; 6830 : 	m_strCityBombardEffectTag	= kResults.GetText("CityBombardEffectTag");

	push	OFFSET ??_C@_0BF@GNCOFDNM@CityBombardEffectTag?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T237389[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 380				; 0000017cH
	mov	DWORD PTR $T237388[ebp], edx
	cmp	DWORD PTR $T237389[ebp], 0
	je	SHORT $LN10@CacheResul@35
	mov	eax, DWORD PTR $T237389[ebp]
	push	eax
	mov	ecx, DWORD PTR $T237388[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN11@CacheResul@35
$LN10@CacheResul@35:
	mov	ecx, DWORD PTR $T237388[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN11@CacheResul@35:

; 6831 : 	m_uiCityBombardEffectTagHash = FString::Hash(m_strCityBombardEffectTag);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	DWORD PTR $T237393[ebp], eax
	cmp	DWORD PTR $T237393[ebp], 0
	je	SHORT $LN19@CacheResul@35
	mov	ecx, DWORD PTR $T237393[ebp]
	mov	DWORD PTR tv662[ebp], ecx
	mov	edx, DWORD PTR tv662[ebp]
	add	edx, 1
	mov	DWORD PTR tv665[ebp], edx
$LL153@CacheResul@35:
	mov	eax, DWORD PTR tv662[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv668[ebp], cl
	add	DWORD PTR tv662[ebp], 1
	cmp	BYTE PTR tv668[ebp], 0
	jne	SHORT $LL153@CacheResul@35
	mov	edx, DWORD PTR tv662[ebp]
	sub	edx, DWORD PTR tv665[ebp]
	mov	DWORD PTR tv378[ebp], edx
	mov	eax, DWORD PTR tv378[ebp]
	mov	DWORD PTR tv380[ebp], eax
	jmp	SHORT $LN15@CacheResul@35
$LN19@CacheResul@35:
	mov	DWORD PTR tv380[ebp], 0
$LN15@CacheResul@35:
	push	-1
	mov	ecx, DWORD PTR tv380[ebp]
	push	ecx
	mov	edx, DWORD PTR $T237393[ebp]
	push	edx
	mov	ecx, OFFSET ?g_CRC32@@3VFCRC@@A		; g_CRC32
	call	?Calc@FCRC@@QBEKPBXHK@Z			; FCRC::Calc
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+548], eax

; 6832 : 
; 6833 : 	m_strAudioUnitVictoryScript	= kResults.GetText("AudioUnitVictoryScript");

	push	OFFSET ??_C@_0BH@FLMACHJJ@AudioUnitVictoryScript?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T237414[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 408				; 00000198H
	mov	DWORD PTR $T237413[ebp], edx
	cmp	DWORD PTR $T237414[ebp], 0
	je	SHORT $LN22@CacheResul@35
	mov	eax, DWORD PTR $T237414[ebp]
	push	eax
	mov	ecx, DWORD PTR $T237413[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN23@CacheResul@35
$LN22@CacheResul@35:
	mov	ecx, DWORD PTR $T237413[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN23@CacheResul@35:

; 6834 : 	m_strAudioUnitDefeatScript	= kResults.GetText("AudioUnitDefeatScript");

	push	OFFSET ??_C@_0BG@ONJCKJCD@AudioUnitDefeatScript?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T237421[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	mov	DWORD PTR $T237420[ebp], ecx
	cmp	DWORD PTR $T237421[ebp], 0
	je	SHORT $LN26@CacheResul@35
	mov	edx, DWORD PTR $T237421[ebp]
	push	edx
	mov	ecx, DWORD PTR $T237420[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN27@CacheResul@35
$LN26@CacheResul@35:
	mov	ecx, DWORD PTR $T237420[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN27@CacheResul@35:

; 6835 : 
; 6836 : 	m_strArtPrefix	= kResults.GetText("ArtPrefix");

	push	OFFSET ??_C@_09BBACJJOA@ArtPrefix?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T237428[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 464				; 000001d0H
	mov	DWORD PTR $T237427[ebp], eax
	cmp	DWORD PTR $T237428[ebp], 0
	je	SHORT $LN30@CacheResul@35
	mov	ecx, DWORD PTR $T237428[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T237427[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN31@CacheResul@35
$LN30@CacheResul@35:
	mov	ecx, DWORD PTR $T237427[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN31@CacheResul@35:

; 6837 : 
; 6838 : 	m_strShortDesc = kResults.GetText("ShortDescription");

	push	OFFSET ??_C@_0BB@GBLDMPKE@ShortDescription?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T237435[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 492				; 000001ecH
	mov	DWORD PTR $T237434[ebp], edx
	cmp	DWORD PTR $T237435[ebp], 0
	je	SHORT $LN34@CacheResul@35
	mov	eax, DWORD PTR $T237435[ebp]
	push	eax
	mov	ecx, DWORD PTR $T237434[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN35@CacheResul@35
$LN34@CacheResul@35:
	mov	ecx, DWORD PTR $T237434[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN35@CacheResul@35:

; 6839 : 	m_strAbbreviation = kResults.GetText("Abbreviation");

	push	OFFSET ??_C@_0N@PNDJMEBP@Abbreviation?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR $T237442[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	mov	DWORD PTR $T237441[ebp], ecx
	cmp	DWORD PTR $T237442[ebp], 0
	je	SHORT $LN38@CacheResul@35
	mov	edx, DWORD PTR $T237442[ebp]
	push	edx
	mov	ecx, DWORD PTR $T237441[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
	jmp	SHORT $LN39@CacheResul@35
$LN38@CacheResul@35:
	mov	ecx, DWORD PTR $T237441[ebp]
	call	DWORD PTR __imp_?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
$LN39@CacheResul@35:

; 6840 : 
; 6841 : 	//City Names
; 6842 : 	{
; 6843 : 		m_vEraVOs.clear();

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 556				; 0000022cH
	mov	DWORD PTR $T237636[ebp], eax
	mov	ecx, DWORD PTR $T237636[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T237458[ebp], edx
	mov	eax, DWORD PTR $T237458[ebp]
	mov	DWORD PTR $T237620[ebp], eax
	mov	ecx, DWORD PTR $T237620[ebp]
	mov	DWORD PTR $T237619[ebp], ecx
	mov	edx, DWORD PTR $T237636[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T237474[ebp], eax
	mov	ecx, DWORD PTR $T237474[ebp]
	mov	DWORD PTR $T237622[ebp], ecx
	mov	edx, DWORD PTR $T237622[ebp]
	mov	DWORD PTR $T237621[ebp], edx
	mov	eax, DWORD PTR $T237619[ebp]
	push	eax
	mov	ecx, DWORD PTR $T237621[ebp]
	push	ecx
	lea	edx, DWORD PTR $T237623[ebp]
	push	edx
	mov	ecx, DWORD PTR $T237636[ebp]
	call	?erase@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@0@Z ; std::vector<CvString,std::allocator<CvString> >::erase

; 6844 : 
; 6845 : 		std::string strKey = "Era - NewEraVOs";

	push	OFFSET ??_C@_0BA@BODMPHDO@Era?5?9?5NewEraVOs?$AA@
	lea	ecx, DWORD PTR _strKey$221774[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 6846 : 		Database::Results* pResults = kUtility.GetResults(strKey);

	lea	eax, DWORD PTR _strKey$221774[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$221776[ebp], eax

; 6847 : 		if(pResults == NULL)

	cmp	DWORD PTR _pResults$221776[ebp], 0
	jne	SHORT $LN95@CacheResul@35

; 6848 : 		{
; 6849 : 			pResults = kUtility.PrepareResults(strKey, "select VOScript from Era_NewEraVOs where EraType = ?");

	push	OFFSET ??_C@_0DF@BDAKANMP@select?5VOScript?5from?5Era_NewEraV@
	lea	ecx, DWORD PTR _strKey$221774[ebp]
	push	ecx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$221776[ebp], eax

; 6850 : 		}
; 6851 : 
; 6852 : 		pResults->Bind(1, GetType(), -1, false);

$LN95@CacheResul@35:
	push	0
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	push	1
	mov	ecx, DWORD PTR _pResults$221776[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHPBDH_N@Z
$LN2@CacheResul@35:

; 6853 : 
; 6854 : 		while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$221776[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@CacheResul@35

; 6855 : 		{
; 6856 : 			m_vEraVOs.push_back(pResults->GetText(0));

	push	0
	mov	ecx, DWORD PTR _pResults$221776[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDH@Z
	mov	DWORD PTR $T237648[ebp], eax
	cmp	DWORD PTR $T237648[ebp], 0
	je	SHORT $LN99@CacheResul@35
	mov	eax, DWORD PTR $T237648[ebp]
	mov	DWORD PTR tv512[ebp], eax
	jmp	SHORT $LN100@CacheResul@35
$LN99@CacheResul@35:
	mov	DWORD PTR tv512[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN100@CacheResul@35:
	mov	ecx, DWORD PTR tv512[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T237380[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	edx, DWORD PTR $T237380[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	?push_back@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAEXABVCvString@@@Z ; std::vector<CvString,std::allocator<CvString> >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T237380[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 6857 : 		}

	jmp	SHORT $LN2@CacheResul@35
$LN1@CacheResul@35:

; 6858 : 
; 6859 : 		pResults->Reset();

	mov	ecx, DWORD PTR _pResults$221776[ebp]
	call	DWORD PTR __imp_?Reset@Results@Database@@QAE_NXZ

; 6860 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$221774[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 6861 : 
; 6862 : 	return true;

	mov	al, 1
$LN5@CacheResul@35:

; 6863 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _strKey$221774[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR $T237380[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-276]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvEraInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvEraInfo::CacheResults
PUBLIC	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$?Format@CvString@@QAAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0
__ehfuncinfo$?Format@CvString@@QAAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Format@CvString@@QAAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?Format@CvString@@QAAXPBDZZ
_TEXT	SEGMENT
_result$ = -48						; size = 28
__$ArrayPad$ = -20					; size = 4
_args$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_lpszFormat$ = 12					; size = 4
?Format@CvString@@QAAXPBDZZ PROC			; CvString::Format, COMDAT

; 269  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Format@CvString@@QAAXPBDZZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2124				; 0000084cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 270  : 	std::string result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 271  : 	va_list args;
; 272  : 	va_start(args,lpszFormat);

	lea	eax, DWORD PTR _lpszFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 273  : 	formatv(result,lpszFormat,args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpszFormat$[ebp]
	push	edx
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ; CvString::formatv
	add	esp, 12					; 0000000cH

; 274  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 275  : 	*this = result;

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z

; 276  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@CvString@@QAAXPBDZZ$0:
	lea	ecx, DWORD PTR _result$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?Format@CvString@@QAAXPBDZZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Format@CvString@@QAAXPBDZZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Format@CvString@@QAAXPBDZZ ENDP			; CvString::Format
PUBLIC	__$ArrayPad$
EXTRN	__imp___vsnprintf:PROC
; Function compile flags: /Odtp
;	COMDAT ?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z
_TEXT	SEGMENT
tv74 = -2096						; size = 4
$T237803 = -2092					; size = 4
$T237802 = -2088					; size = 4
$T237801 = -2084					; size = 4
_maxlen$95294 = -2080					; size = 4
_kMaxAttempts$ = -2076					; size = 4
_buf$ = -2072						; size = 2048
__$ArrayPad$ = -20					; size = 4
_len$ = -16						; size = 4
_attempts$ = -12					; size = 4
_success$ = -5						; size = 1
_pbuf$ = -4						; size = 4
_out$ = 8						; size = 4
_fmt$ = 12						; size = 4
_args$ = 16						; size = 4
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z PROC ; CvString::formatv, COMDAT

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2096				; 00000830H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 192  : 	char buf[2048];
; 193  : 	char * pbuf = buf;

	lea	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax

; 194  : 	int len = 0;

	mov	DWORD PTR _len$[ebp], 0

; 195  : 	int attempts = 0;

	mov	DWORD PTR _attempts$[ebp], 0

; 196  : 	bool success = false;

	mov	BYTE PTR _success$[ebp], 0

; 197  : 	const int kMaxAttempts = 40;

	mov	DWORD PTR _kMaxAttempts$[ebp], 40	; 00000028H
$LN10@formatv:

; 198  : 
; 199  : 	do
; 200  : 	{
; 201  : 		int maxlen = 2047+2048*attempts;

	mov	ecx, DWORD PTR _attempts$[ebp]
	shl	ecx, 11					; 0000000bH
	add	ecx, 2047				; 000007ffH
	mov	DWORD PTR _maxlen$95294[ebp], ecx

; 202  : 		len = _vsnprintf(pbuf,maxlen,fmt,args);

	mov	edx, DWORD PTR _args$[ebp]
	push	edx
	mov	eax, DWORD PTR _fmt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxlen$95294[ebp]
	push	ecx
	mov	edx, DWORD PTR _pbuf$[ebp]
	push	edx
	call	DWORD PTR __imp___vsnprintf
	add	esp, 16					; 00000010H
	mov	DWORD PTR _len$[ebp], eax

; 203  : 		attempts++;

	mov	eax, DWORD PTR _attempts$[ebp]
	add	eax, 1
	mov	DWORD PTR _attempts$[ebp], eax

; 204  : 		success = (len>=0 && len<=maxlen);

	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN13@formatv
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR _maxlen$95294[ebp]
	jg	SHORT $LN13@formatv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN14@formatv
$LN13@formatv:
	mov	DWORD PTR tv74[ebp], 0
$LN14@formatv:
	mov	dl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _success$[ebp], dl

; 205  : 		if (!success)

	movzx	eax, BYTE PTR _success$[ebp]
	test	eax, eax
	jne	SHORT $LN9@formatv

; 206  : 		{
; 207  : 			if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN6@formatv

; 208  : 				delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T237801[ebp], eax
	mov	ecx, DWORD PTR $T237801[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN6@formatv:

; 209  : 			pbuf = new char[2048+2048*attempts];

	mov	edx, DWORD PTR _attempts$[ebp]
	shl	edx, 11					; 0000000bH
	add	edx, 2048				; 00000800H
	push	edx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T237802[ebp], eax
	mov	eax, DWORD PTR $T237802[ebp]
	mov	DWORD PTR _pbuf$[ebp], eax
$LN9@formatv:

; 210  : 		}
; 211  : 	}
; 212  : 	while (!success && attempts<kMaxAttempts);

	movzx	ecx, BYTE PTR _success$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@formatv
	cmp	DWORD PTR _attempts$[ebp], 40		; 00000028H
	jl	$LN10@formatv
$LN4@formatv:

; 213  : 
; 214  : 	if ( attempts==kMaxAttempts )
; 215  : 	{
; 216  : 		// dxPrintNL( "CvString::formatv - Max reallocs occurred while formatting string. Result is likely truncated!", 0 );
; 217  : 	}
; 218  : 
; 219  : 	if (success)

	movzx	edx, BYTE PTR _success$[ebp]
	test	edx, edx
	je	SHORT $LN3@formatv

; 220  : 		out = pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z

; 221  : 	else

	jmp	SHORT $LN2@formatv
$LN3@formatv:

; 222  : 		out = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _out$[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
$LN2@formatv:

; 223  : 
; 224  : 	if (pbuf!=buf)

	mov	ecx, DWORD PTR _pbuf$[ebp]
	lea	edx, DWORD PTR _buf$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@formatv

; 225  : 		delete [] pbuf;

	mov	eax, DWORD PTR _pbuf$[ebp]
	mov	DWORD PTR $T237803[ebp], eax
	mov	ecx, DWORD PTR $T237803[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@formatv:

; 226  : 
; 227  : 	return success;

	mov	al, BYTE PTR _success$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?formatv@CvString@@SA_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDPAD@Z ENDP ; CvString::formatv
_TEXT	ENDS
PUBLIC	?GetColor@CvColorInfo@@QBEABUCvColorA@@XZ	; CvColorInfo::GetColor
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
;	COMDAT ?GetColor@CvColorInfo@@QBEABUCvColorA@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetColor@CvColorInfo@@QBEABUCvColorA@@XZ PROC		; CvColorInfo::GetColor, COMDAT
; _this$ = ecx

; 6870 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6871 : 	return m_Color;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H

; 6872 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetColor@CvColorInfo@@QBEABUCvColorA@@XZ ENDP		; CvColorInfo::GetColor
_TEXT	ENDS
PUBLIC	??_C@_05IHOGHNDL@Alpha?$AA@			; `string'
PUBLIC	??_C@_04CAKOHOCJ@Blue?$AA@			; `string'
PUBLIC	??_C@_05GGOIJPPE@Green?$AA@			; `string'
PUBLIC	??_C@_03PADCEAKC@Red?$AA@			; `string'
PUBLIC	?CacheResults@CvColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvColorInfo::CacheResults
;	COMDAT ??_C@_05IHOGHNDL@Alpha?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstructs.h
CONST	SEGMENT
??_C@_05IHOGHNDL@Alpha?$AA@ DB 'Alpha', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CAKOHOCJ@Blue?$AA@
CONST	SEGMENT
??_C@_04CAKOHOCJ@Blue?$AA@ DB 'Blue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGOIJPPE@Green?$AA@
CONST	SEGMENT
??_C@_05GGOIJPPE@Green?$AA@ DB 'Green', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PADCEAKC@Red?$AA@
CONST	SEGMENT
??_C@_03PADCEAKC@Red?$AA@ DB 'Red', 00H			; `string'
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
CONST	ENDS
;	COMDAT ?CacheResults@CvColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T237815 = -32						; size = 4
$T237814 = -28						; size = 4
$T237813 = -24						; size = 4
$T237812 = -20						; size = 4
$T237808 = -16						; size = 16
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvColorInfo::CacheResults, COMDAT
; _this$ = ecx

; 6875 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 6876 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@36

; 6877 : 	{
; 6878 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@36
$LN1@CacheResul@36:

; 6879 : 	}
; 6880 : 
; 6881 : 	m_Color = CvColorA(kResults.GetFloat("Red"),
; 6882 : 	                   kResults.GetFloat("Green"),
; 6883 : 	                   kResults.GetFloat("Blue"),
; 6884 : 	                   kResults.GetFloat("Alpha"));

	push	OFFSET ??_C@_03PADCEAKC@Red?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR $T237815[ebp]
	push	OFFSET ??_C@_05GGOIJPPE@Green?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR $T237814[ebp]
	push	OFFSET ??_C@_04CAKOHOCJ@Blue?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR $T237813[ebp]
	push	OFFSET ??_C@_05IHOGHNDL@Alpha?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetFloat@Results@Database@@QAEMPBD@Z
	fstp	DWORD PTR $T237812[ebp]
	movss	xmm0, DWORD PTR $T237815[ebp]
	movss	DWORD PTR $T237808[ebp], xmm0
	movss	xmm0, DWORD PTR $T237814[ebp]
	movss	DWORD PTR $T237808[ebp+4], xmm0
	movss	xmm0, DWORD PTR $T237813[ebp]
	movss	DWORD PTR $T237808[ebp+8], xmm0
	movss	xmm0, DWORD PTR $T237812[ebp]
	movss	DWORD PTR $T237808[ebp+12], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 260				; 00000104H
	mov	ecx, DWORD PTR $T237808[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T237808[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T237808[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T237808[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 6885 : 
; 6886 : 	return true;

	mov	al, 1
$LN2@CacheResul@36:

; 6887 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvColorInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvPlayerColorInfo@@6B@			; CvPlayerColorInfo::`vftable'
PUBLIC	??0CvPlayerColorInfo@@QAE@XZ			; CvPlayerColorInfo::CvPlayerColorInfo
PUBLIC	?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvPlayerColorInfo::CacheResults
;	COMDAT ??_7CvPlayerColorInfo@@6B@
CONST	SEGMENT
??_7CvPlayerColorInfo@@6B@ DD FLAT:?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvPlayerColorInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvPlayerColorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvPlayerColorInfo@@QAE@XZ PROC			; CvPlayerColorInfo::CvPlayerColorInfo, COMDAT
; _this$ = ecx

; 6893 : {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvPlayerColorInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvPlayerColorInfo@@QAE@XZ ENDP			; CvPlayerColorInfo::CvPlayerColorInfo
_TEXT	ENDS
PUBLIC	?GetColorTypePrimary@CvPlayerColorInfo@@QBEHXZ	; CvPlayerColorInfo::GetColorTypePrimary
; Function compile flags: /Odtp
;	COMDAT ?GetColorTypePrimary@CvPlayerColorInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetColorTypePrimary@CvPlayerColorInfo@@QBEHXZ PROC	; CvPlayerColorInfo::GetColorTypePrimary, COMDAT
; _this$ = ecx

; 6896 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6897 : 	return m_iColorTypePrimary;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 6898 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetColorTypePrimary@CvPlayerColorInfo@@QBEHXZ ENDP	; CvPlayerColorInfo::GetColorTypePrimary
_TEXT	ENDS
PUBLIC	?GetColorTypeSecondary@CvPlayerColorInfo@@QBEHXZ ; CvPlayerColorInfo::GetColorTypeSecondary
; Function compile flags: /Odtp
;	COMDAT ?GetColorTypeSecondary@CvPlayerColorInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetColorTypeSecondary@CvPlayerColorInfo@@QBEHXZ PROC	; CvPlayerColorInfo::GetColorTypeSecondary, COMDAT
; _this$ = ecx

; 6901 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6902 : 	return m_iColorTypeSecondary;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 6903 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetColorTypeSecondary@CvPlayerColorInfo@@QBEHXZ ENDP	; CvPlayerColorInfo::GetColorTypeSecondary
_TEXT	ENDS
PUBLIC	?GetColorTypeText@CvPlayerColorInfo@@QBEHXZ	; CvPlayerColorInfo::GetColorTypeText
; Function compile flags: /Odtp
;	COMDAT ?GetColorTypeText@CvPlayerColorInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetColorTypeText@CvPlayerColorInfo@@QBEHXZ PROC	; CvPlayerColorInfo::GetColorTypeText, COMDAT
; _this$ = ecx

; 6906 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6907 : 	return m_iColorTypeText;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 6908 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetColorTypeText@CvPlayerColorInfo@@QBEHXZ ENDP	; CvPlayerColorInfo::GetColorTypeText
_TEXT	ENDS
PUBLIC	??_C@_0N@NMOLHABC@ColorsLookup?$AA@		; `string'
PUBLIC	??_C@_0BFA@PCBOBHLD@select?5PrimaryColor?4ID?0?5Secondar@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp_?Bind@Results@Database@@QAE_NHH@Z:PROC
;	COMDAT ??_C@_0N@NMOLHABC@ColorsLookup?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.h
CONST	SEGMENT
??_C@_0N@NMOLHABC@ColorsLookup?$AA@ DB 'ColorsLookup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFA@PCBOBHLD@select?5PrimaryColor?4ID?0?5Secondar@
CONST	SEGMENT
??_C@_0BFA@PCBOBHLD@select?5PrimaryColor?4ID?0?5Secondar@ DB 'select Prim'
	DB	'aryColor.ID, SecondaryColor.ID, TextColor.ID FROM PlayerColor'
	DB	's INNER JOIN Colors As PrimaryColor ON PlayerColors.PrimaryCo'
	DB	'lor = PrimaryColor.Type, Colors AS SecondaryColor ON PlayerCo'
	DB	'lors.SecondaryColor = SecondaryColor.Type, Colors AS TextColo'
	DB	'r ON PlayerColors.TextColor = TextColor.Type where PlayerColo'
	DB	'rs.ID = ? LIMIT 1; ', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
__ehfuncinfo$?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -64						; size = 4
$T237833 = -60						; size = 4
$T237828 = -53						; size = 1
_pResults$ = -52					; size = 4
_szSQL$ = -48						; size = 4
_strKey$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvPlayerColorInfo::CacheResults, COMDAT
; _this$ = ecx

; 6911 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 6912 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@CacheResul@37

; 6913 : 		return false;

	xor	al, al
	jmp	$LN5@CacheResul@37
$LN4@CacheResul@37:

; 6914 : 
; 6915 : 	//Perform an inner join
; 6916 : 	const char* szSQL =	"select PrimaryColor.ID, SecondaryColor.ID, TextColor.ID FROM PlayerColors INNER JOIN "
; 6917 : 	                    "Colors As PrimaryColor ON PlayerColors.PrimaryColor = PrimaryColor.Type, "
; 6918 : 	                    "Colors AS SecondaryColor ON PlayerColors.SecondaryColor = SecondaryColor.Type, "
; 6919 : 	                    "Colors AS TextColor ON PlayerColors.TextColor = TextColor.Type where PlayerColors.ID = ? LIMIT 1; ";

	mov	DWORD PTR _szSQL$[ebp], OFFSET ??_C@_0BFA@PCBOBHLD@select?5PrimaryColor?4ID?0?5Secondar@

; 6920 : 
; 6921 : 	std::string strKey("ColorsLookup");

	push	OFFSET ??_C@_0N@NMOLHABC@ColorsLookup?$AA@
	lea	ecx, DWORD PTR _strKey$[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 6922 : 	Database::Results* pResults = kUtility.GetResults(strKey);

	lea	eax, DWORD PTR _strKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?GetResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CvDatabaseUtility::GetResults
	mov	DWORD PTR _pResults$[ebp], eax

; 6923 : 	if(pResults == NULL)

	cmp	DWORD PTR _pResults$[ebp], 0
	jne	SHORT $LN3@CacheResul@37

; 6924 : 	{
; 6925 : 		pResults = kUtility.PrepareResults(strKey, szSQL);

	mov	ecx, DWORD PTR _szSQL$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strKey$[ebp]
	push	edx
	mov	ecx, DWORD PTR _kUtility$[ebp]
	call	?PrepareResults@CvDatabaseUtility@@QAEPAVResults@Database@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CvDatabaseUtility::PrepareResults
	mov	DWORD PTR _pResults$[ebp], eax
$LN3@CacheResul@37:

; 6926 : 	}
; 6927 : 
; 6928 : 	pResults->Bind(1, GetID());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T237833[ebp], ecx
	mov	edx, DWORD PTR $T237833[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?Bind@Results@Database@@QAE_NHH@Z
$LN2@CacheResul@37:

; 6929 : 
; 6930 : 	while(pResults->Step())

	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?Step@Results@Database@@QAE_NXZ
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@CacheResul@37

; 6931 : 	{
; 6932 : 		m_iColorTypePrimary		= pResults->GetInt(0);

	push	0
	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 6933 : 		m_iColorTypeSecondary	= pResults->GetInt(1);

	push	1
	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], eax

; 6934 : 		m_iColorTypeText		= pResults->GetInt(2);

	push	2
	mov	ecx, DWORD PTR _pResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 6935 : 	}

	jmp	SHORT $LN2@CacheResul@37
$LN1@CacheResul@37:

; 6936 : 
; 6937 : 
; 6938 : 	return true;

	mov	BYTE PTR $T237828[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strKey$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	al, BYTE PTR $T237828[ebp]
$LN5@CacheResul@37:

; 6939 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR _strKey$[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvPlayerColorInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvPlayerColorInfo::CacheResults
PUBLIC	??_7CvGameOptionInfo@@6B@			; CvGameOptionInfo::`vftable'
PUBLIC	??0CvGameOptionInfo@@QAE@XZ			; CvGameOptionInfo::CvGameOptionInfo
PUBLIC	?CacheResults@CvGameOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvGameOptionInfo::CacheResults
;	COMDAT ??_7CvGameOptionInfo@@6B@
CONST	SEGMENT
??_7CvGameOptionInfo@@6B@ DD FLAT:?CacheResults@CvGameOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvGameOptionInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvGameOptionInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvGameOptionInfo@@QAE@XZ PROC			; CvGameOptionInfo::CvGameOptionInfo, COMDAT
; _this$ = ecx

; 6948 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvGameOptionInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+261], 1

; 6949 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvGameOptionInfo@@QAE@XZ ENDP			; CvGameOptionInfo::CvGameOptionInfo
_TEXT	ENDS
PUBLIC	?getDefault@CvGameOptionInfo@@QBE_NXZ		; CvGameOptionInfo::getDefault
; Function compile flags: /Odtp
;	COMDAT ?getDefault@CvGameOptionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefault@CvGameOptionInfo@@QBE_NXZ PROC		; CvGameOptionInfo::getDefault, COMDAT
; _this$ = ecx

; 6952 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6953 : 	return m_bDefault;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+260]

; 6954 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefault@CvGameOptionInfo@@QBE_NXZ ENDP		; CvGameOptionInfo::getDefault
_TEXT	ENDS
PUBLIC	?getVisible@CvGameOptionInfo@@QBE_NXZ		; CvGameOptionInfo::getVisible
; Function compile flags: /Odtp
;	COMDAT ?getVisible@CvGameOptionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVisible@CvGameOptionInfo@@QBE_NXZ PROC		; CvGameOptionInfo::getVisible, COMDAT
; _this$ = ecx

; 6957 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6958 : 	return m_bVisible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+261]

; 6959 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVisible@CvGameOptionInfo@@QBE_NXZ ENDP		; CvGameOptionInfo::getVisible
_TEXT	ENDS
PUBLIC	??_C@_07MCAEODGB@Default?$AA@			; `string'
;	COMDAT ??_C@_07MCAEODGB@Default?$AA@
CONST	SEGMENT
??_C@_07MCAEODGB@Default?$AA@ DB 'Default', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?CacheResults@CvGameOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvGameOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvGameOptionInfo::CacheResults, COMDAT
; _this$ = ecx

; 6962 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6963 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@38

; 6964 : 		return false;

	xor	al, al
	jmp	SHORT $LN2@CacheResul@38
$LN1@CacheResul@38:

; 6965 : 
; 6966 : 	m_bDefault = kResults.GetBool("Default");

	push	OFFSET ??_C@_07MCAEODGB@Default?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], al

; 6967 : 	m_bVisible = kResults.GetBool("Visible");

	push	OFFSET ??_C@_07MGEGCLJM@Visible?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+261], al

; 6968 : 
; 6969 : 	return true;

	mov	al, 1
$LN2@CacheResul@38:

; 6970 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvGameOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvGameOptionInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvMPOptionInfo@@6B@				; CvMPOptionInfo::`vftable'
PUBLIC	??0CvMPOptionInfo@@QAE@XZ			; CvMPOptionInfo::CvMPOptionInfo
PUBLIC	?CacheResults@CvMPOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvMPOptionInfo::CacheResults
;	COMDAT ??_7CvMPOptionInfo@@6B@
CONST	SEGMENT
??_7CvMPOptionInfo@@6B@ DD FLAT:?CacheResults@CvMPOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvMPOptionInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvMPOptionInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvMPOptionInfo@@QAE@XZ PROC				; CvMPOptionInfo::CvMPOptionInfo, COMDAT
; _this$ = ecx

; 6978 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvMPOptionInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], 0

; 6979 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvMPOptionInfo@@QAE@XZ ENDP				; CvMPOptionInfo::CvMPOptionInfo
_TEXT	ENDS
PUBLIC	?getDefault@CvMPOptionInfo@@QBE_NXZ		; CvMPOptionInfo::getDefault
; Function compile flags: /Odtp
;	COMDAT ?getDefault@CvMPOptionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefault@CvMPOptionInfo@@QBE_NXZ PROC		; CvMPOptionInfo::getDefault, COMDAT
; _this$ = ecx

; 6982 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6983 : 	return m_bDefault;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+260]

; 6984 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefault@CvMPOptionInfo@@QBE_NXZ ENDP		; CvMPOptionInfo::getDefault
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?CacheResults@CvMPOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvMPOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvMPOptionInfo::CacheResults, COMDAT
; _this$ = ecx

; 6987 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 6988 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@39

; 6989 : 		return false;

	xor	al, al
	jmp	SHORT $LN2@CacheResul@39
$LN1@CacheResul@39:

; 6990 : 
; 6991 : 	m_bDefault = kResults.GetBool("Default");

	push	OFFSET ??_C@_07MCAEODGB@Default?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], al

; 6992 : 
; 6993 : 	return true;

	mov	al, 1
$LN2@CacheResul@39:

; 6994 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvMPOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvMPOptionInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvPlayerOptionInfo@@6B@			; CvPlayerOptionInfo::`vftable'
PUBLIC	??0CvPlayerOptionInfo@@QAE@XZ			; CvPlayerOptionInfo::CvPlayerOptionInfo
PUBLIC	?CacheResults@CvPlayerOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvPlayerOptionInfo::CacheResults
;	COMDAT ??_7CvPlayerOptionInfo@@6B@
CONST	SEGMENT
??_7CvPlayerOptionInfo@@6B@ DD FLAT:?CacheResults@CvPlayerOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvPlayerOptionInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ??0CvPlayerOptionInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CvPlayerOptionInfo@@QAE@XZ PROC			; CvPlayerOptionInfo::CvPlayerOptionInfo, COMDAT
; _this$ = ecx

; 7002 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvPlayerOptionInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], 0

; 7003 : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CvPlayerOptionInfo@@QAE@XZ ENDP			; CvPlayerOptionInfo::CvPlayerOptionInfo
_TEXT	ENDS
PUBLIC	?getDefault@CvPlayerOptionInfo@@QBE_NXZ		; CvPlayerOptionInfo::getDefault
; Function compile flags: /Odtp
;	COMDAT ?getDefault@CvPlayerOptionInfo@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDefault@CvPlayerOptionInfo@@QBE_NXZ PROC		; CvPlayerOptionInfo::getDefault, COMDAT
; _this$ = ecx

; 7006 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7007 : 	return m_bDefault;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+260]

; 7008 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getDefault@CvPlayerOptionInfo@@QBE_NXZ ENDP		; CvPlayerOptionInfo::getDefault
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?CacheResults@CvPlayerOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvPlayerOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvPlayerOptionInfo::CacheResults, COMDAT
; _this$ = ecx

; 7011 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7012 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@40

; 7013 : 		return false;

	xor	al, al
	jmp	SHORT $LN2@CacheResul@40
$LN1@CacheResul@40:

; 7014 : 
; 7015 : 	m_bDefault = kResults.GetBool("Default");

	push	OFFSET ??_C@_07MCAEODGB@Default?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetBool@Results@Database@@QAE_NPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+260], al

; 7016 : 
; 7017 : 	return true;

	mov	al, 1
$LN2@CacheResul@40:

; 7018 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?CacheResults@CvPlayerOptionInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvPlayerOptionInfo::CacheResults
_TEXT	ENDS
PUBLIC	??_7CvVoteSourceInfo@@6B@			; CvVoteSourceInfo::`vftable'
PUBLIC	??0CvVoteSourceInfo@@QAE@XZ			; CvVoteSourceInfo::CvVoteSourceInfo
PUBLIC	?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvVoteSourceInfo::CacheResults
EXTRN	??_ECvVoteSourceInfo@@UAEPAXI@Z:PROC		; CvVoteSourceInfo::`vector deleting destructor'
;	COMDAT ??_7CvVoteSourceInfo@@6B@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_7CvVoteSourceInfo@@6B@ DD FLAT:?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvVoteSourceInfo::`vftable'
	DD	FLAT:??8CvBaseInfo@@UBE_NABV0@@Z
	DD	FLAT:?readFrom@CvBaseInfo@@UAEXAAVFDataStream@@@Z
	DD	FLAT:?writeTo@CvBaseInfo@@UBEXAAVFDataStream@@@Z
	DD	FLAT:??_ECvVoteSourceInfo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CvVoteSourceInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CvVoteSourceInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CvVoteSourceInfo@@QAE@XZ$1
__ehfuncinfo$??0CvVoteSourceInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CvVoteSourceInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??0CvVoteSourceInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T237877 = -20						; size = 4
$T237872 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CvVoteSourceInfo@@QAE@XZ PROC			; CvVoteSourceInfo::CvVoteSourceInfo, COMDAT
; _this$ = ecx

; 7027 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CvVoteSourceInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CvBaseInfo@@QAE@XZ			; CvBaseInfo::CvBaseInfo
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvVoteSourceInfo@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+264], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+268], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	mov	DWORD PTR $T237872[ebp], ecx
	mov	ecx, DWORD PTR $T237872[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 300				; 0000012cH
	mov	DWORD PTR $T237877[ebp], edx
	mov	ecx, DWORD PTR $T237877[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 7028 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CvVoteSourceInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??0CvVoteSourceInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??0CvVoteSourceInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CvVoteSourceInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CvVoteSourceInfo@@QAE@XZ ENDP			; CvVoteSourceInfo::CvVoteSourceInfo
PUBLIC	??1CvVoteSourceInfo@@UAE@XZ			; CvVoteSourceInfo::~CvVoteSourceInfo
; Function compile flags: /Odtp
;	COMDAT ??_GCvVoteSourceInfo@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCvVoteSourceInfo@@UAEPAXI@Z PROC			; CvVoteSourceInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvVoteSourceInfo@@UAE@XZ		; CvVoteSourceInfo::~CvVoteSourceInfo
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@19
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@19:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCvVoteSourceInfo@@UAEPAXI@Z ENDP			; CvVoteSourceInfo::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__unwindtable$??1CvVoteSourceInfo@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CvVoteSourceInfo@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CvVoteSourceInfo@@UAE@XZ$1
__ehfuncinfo$??1CvVoteSourceInfo@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CvVoteSourceInfo@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ??1CvVoteSourceInfo@@UAE@XZ
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T237900 = -20						; size = 4
$T237895 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CvVoteSourceInfo@@UAE@XZ PROC			; CvVoteSourceInfo::~CvVoteSourceInfo, COMDAT
; _this$ = ecx

; 7031 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CvVoteSourceInfo@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CvVoteSourceInfo@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 7032 : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	mov	DWORD PTR $T237895[ebp], ecx
	mov	ecx, DWORD PTR $T237895[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 272				; 00000110H
	mov	DWORD PTR $T237900[ebp], edx
	mov	ecx, DWORD PTR $T237900[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CvBaseInfo@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CvVoteSourceInfo@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CvBaseInfo@@QAE@XZ
__unwindfunclet$??1CvVoteSourceInfo@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$??1CvVoteSourceInfo@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CvVoteSourceInfo@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CvVoteSourceInfo@@UAE@XZ ENDP			; CvVoteSourceInfo::~CvVoteSourceInfo
PUBLIC	?getVoteInterval@CvVoteSourceInfo@@QBEHXZ	; CvVoteSourceInfo::getVoteInterval
; Function compile flags: /Odtp
;	COMDAT ?getVoteInterval@CvVoteSourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getVoteInterval@CvVoteSourceInfo@@QBEHXZ PROC		; CvVoteSourceInfo::getVoteInterval, COMDAT
; _this$ = ecx

; 7035 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7036 : 	return m_iVoteInterval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+260]

; 7037 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getVoteInterval@CvVoteSourceInfo@@QBEHXZ ENDP		; CvVoteSourceInfo::getVoteInterval
_TEXT	ENDS
PUBLIC	?getFreeSpecialist@CvVoteSourceInfo@@QBEHXZ	; CvVoteSourceInfo::getFreeSpecialist
; Function compile flags: /Odtp
;	COMDAT ?getFreeSpecialist@CvVoteSourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFreeSpecialist@CvVoteSourceInfo@@QBEHXZ PROC	; CvVoteSourceInfo::getFreeSpecialist, COMDAT
; _this$ = ecx

; 7040 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7041 : 	return m_iFreeSpecialist;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+264]

; 7042 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getFreeSpecialist@CvVoteSourceInfo@@QBEHXZ ENDP	; CvVoteSourceInfo::getFreeSpecialist
_TEXT	ENDS
PUBLIC	?getPolicy@CvVoteSourceInfo@@QBEHXZ		; CvVoteSourceInfo::getPolicy
; Function compile flags: /Odtp
;	COMDAT ?getPolicy@CvVoteSourceInfo@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPolicy@CvVoteSourceInfo@@QBEHXZ PROC		; CvVoteSourceInfo::getPolicy, COMDAT
; _this$ = ecx

; 7045 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7046 : 	return m_iPolicy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+268]

; 7047 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPolicy@CvVoteSourceInfo@@QBEHXZ ENDP		; CvVoteSourceInfo::getPolicy
_TEXT	ENDS
PUBLIC	?getPopupText@CvVoteSourceInfo@@QBEABVCvString@@XZ ; CvVoteSourceInfo::getPopupText
; Function compile flags: /Odtp
;	COMDAT ?getPopupText@CvVoteSourceInfo@@QBEABVCvString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPopupText@CvVoteSourceInfo@@QBEABVCvString@@XZ PROC	; CvVoteSourceInfo::getPopupText, COMDAT
; _this$ = ecx

; 7050 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7051 : 	return m_strPopupText;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 272				; 00000110H

; 7052 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getPopupText@CvVoteSourceInfo@@QBEABVCvString@@XZ ENDP	; CvVoteSourceInfo::getPopupText
_TEXT	ENDS
PUBLIC	?getSecretaryGeneralText@CvVoteSourceInfo@@QBEABVCvString@@XZ ; CvVoteSourceInfo::getSecretaryGeneralText
; Function compile flags: /Odtp
;	COMDAT ?getSecretaryGeneralText@CvVoteSourceInfo@@QBEABVCvString@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSecretaryGeneralText@CvVoteSourceInfo@@QBEABVCvString@@XZ PROC ; CvVoteSourceInfo::getSecretaryGeneralText, COMDAT
; _this$ = ecx

; 7055 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 7056 : 	return m_strSecretaryGeneralText;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 300				; 0000012cH

; 7057 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?getSecretaryGeneralText@CvVoteSourceInfo@@QBEABVCvString@@XZ ENDP ; CvVoteSourceInfo::getSecretaryGeneralText
_TEXT	ENDS
PUBLIC	??_C@_06BGGEOBLK@Policy?$AA@			; `string'
PUBLIC	??_C@_0P@ONAKJGND@FreeSpecialist?$AA@		; `string'
PUBLIC	??_C@_0BF@OLELJONF@SecretaryGeneralText?$AA@	; `string'
PUBLIC	??_C@_09OPEDNHEJ@PopupText?$AA@			; `string'
PUBLIC	??_C@_0N@MAECOILK@VoteInterval?$AA@		; `string'
;	COMDAT ??_C@_06BGGEOBLK@Policy?$AA@
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
CONST	SEGMENT
??_C@_06BGGEOBLK@Policy?$AA@ DB 'Policy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ONAKJGND@FreeSpecialist?$AA@
CONST	SEGMENT
??_C@_0P@ONAKJGND@FreeSpecialist?$AA@ DB 'FreeSpecialist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OLELJONF@SecretaryGeneralText?$AA@
CONST	SEGMENT
??_C@_0BF@OLELJONF@SecretaryGeneralText?$AA@ DB 'SecretaryGeneralText', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPEDNHEJ@PopupText?$AA@
CONST	SEGMENT
??_C@_09OPEDNHEJ@PopupText?$AA@ DB 'PopupText', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MAECOILK@VoteInterval?$AA@
CONST	SEGMENT
??_C@_0N@MAECOILK@VoteInterval?$AA@ DB 'VoteInterval', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1
__ehfuncinfo$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvinfos.cpp
xdata$x	ENDS
;	COMDAT ?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
_TEXT	SEGMENT
tv179 = -108						; size = 4
tv130 = -104						; size = 4
_this$ = -100						; size = 4
$T237991 = -96						; size = 4
$T237990 = -92						; size = 4
$T237982 = -88						; size = 4
$T237981 = -84						; size = 4
$T237975 = -80						; size = 28
$T237974 = -52						; size = 28
_szFreeSpecialist$ = -24				; size = 4
_szTextVal$ = -20					; size = 4
_szPolicy$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_kResults$ = 8						; size = 4
_kUtility$ = 12						; size = 4
?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z PROC ; CvVoteSourceInfo::CacheResults, COMDAT
; _this$ = ecx

; 7060 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 7061 : 	if(!CvBaseInfo::CacheResults(kResults, kUtility))

	mov	eax, DWORD PTR _kUtility$[ebp]
	push	eax
	mov	ecx, DWORD PTR _kResults$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CacheResults@CvBaseInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ; CvBaseInfo::CacheResults
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@CacheResul@41

; 7062 : 		return false;

	xor	al, al
	jmp	$LN2@CacheResul@41
$LN1@CacheResul@41:

; 7063 : 
; 7064 : 	m_iVoteInterval = kResults.GetInt("VoteInterval");

	push	OFFSET ??_C@_0N@MAECOILK@VoteInterval?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetInt@Results@Database@@QAEHPBD@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 7065 : 
; 7066 : 	const char* szTextVal;
; 7067 : 	szTextVal = kResults.GetText("PopupText");

	push	OFFSET ??_C@_09OPEDNHEJ@PopupText?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 7068 : 	m_strPopupText = GetLocalizedText(szTextVal);

	mov	edx, DWORD PTR _szTextVal$[ebp]
	push	edx
	lea	eax, DWORD PTR $T237974[ebp]
	push	eax
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR tv130[ebp]
	mov	DWORD PTR $T237982[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 272				; 00000110H
	mov	DWORD PTR $T237981[ebp], edx
	mov	eax, DWORD PTR $T237982[ebp]
	push	eax
	mov	ecx, DWORD PTR $T237981[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T237974[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 7069 : 
; 7070 : 	szTextVal = kResults.GetText("SecretaryGeneralText");

	push	OFFSET ??_C@_0BF@OLELJONF@SecretaryGeneralText?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szTextVal$[ebp], eax

; 7071 : 	m_strSecretaryGeneralText = GetLocalizedText(szTextVal);

	mov	ecx, DWORD PTR _szTextVal$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T237975[ebp]
	push	edx
	call	?GetLocalizedText@@YA?AVCvString@@PBD@Z	; GetLocalizedText
	add	esp, 8
	mov	DWORD PTR tv179[ebp], eax
	mov	eax, DWORD PTR tv179[ebp]
	mov	DWORD PTR $T237991[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 300				; 0000012cH
	mov	DWORD PTR $T237990[ebp], ecx
	mov	edx, DWORD PTR $T237991[ebp]
	push	edx
	mov	ecx, DWORD PTR $T237990[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T237975[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 7072 : 
; 7073 : 	const char* szFreeSpecialist = kResults.GetText("FreeSpecialist");

	push	OFFSET ??_C@_0P@ONAKJGND@FreeSpecialist?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szFreeSpecialist$[ebp], eax

; 7074 : 	m_iFreeSpecialist = GC.getInfoTypeForString(szFreeSpecialist, true);

	push	1
	mov	eax, DWORD PTR _szFreeSpecialist$[ebp]
	push	eax
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+264], eax

; 7075 : 
; 7076 : 	const char* szPolicy = kResults.GetText("Policy");

	push	OFFSET ??_C@_06BGGEOBLK@Policy?$AA@
	mov	ecx, DWORD PTR _kResults$[ebp]
	call	DWORD PTR __imp_?GetText@Results@Database@@QAEPBDPBD@Z
	mov	DWORD PTR _szPolicy$[ebp], eax

; 7077 : 	m_iPolicy = GC.getInfoTypeForString(szPolicy, true);

	push	1
	mov	edx, DWORD PTR _szPolicy$[ebp]
	push	edx
	mov	ecx, OFFSET ?gGlobals@@3VCvGlobals@@A	; gGlobals
	call	?getInfoTypeForString@CvGlobals@@QBEHPBD_N@Z ; CvGlobals::getInfoTypeForString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+268], eax

; 7078 : 
; 7079 : 	return true;

	mov	al, 1
$LN2@CacheResul@41:

; 7080 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$0:
	lea	ecx, DWORD PTR $T237974[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z$1:
	lea	ecx, DWORD PTR $T237975[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CacheResults@CvVoteSourceInfo@@UAE_NAAVResults@Database@@AAVCvDatabaseUtility@@@Z ENDP ; CvVoteSourceInfo::CacheResults
PUBLIC	?insert@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@V?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@ABVCvFormationSlotEntry@@@Z ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::insert
PUBLIC	??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvFormationSlotEntry *,unsigned int,CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAEXABVCvFormationSlotEntry@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T238053 = -32						; size = 4
$T238043 = -28						; size = 4
$T238033 = -24						; size = 4
__Cat$238041 = -19					; size = 1
$T238038 = -18						; size = 1
$T238037 = -17						; size = 1
$T238010 = -16						; size = 4
$T238006 = -12						; size = 4
$T238005 = -8						; size = 4
$T238004 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAEXABVCvFormationSlotEntry@@@Z PROC ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	mov	DWORD PTR $T238010[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back
$LN9@push_back:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 4
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back:
	mov	ecx, DWORD PTR $T238010[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T238043[ebp], eax
	mov	ecx, DWORD PTR $T238043[ebp]
	mov	DWORD PTR $T238033[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T238037[ebp], dl
	mov	al, BYTE PTR __Cat$238041[ebp]
	mov	BYTE PTR $T238038[ebp], al
	movzx	ecx, BYTE PTR $T238037[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T238038[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T238033[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvFormationSlotEntry *,unsigned int,CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 4
	add	eax, DWORD PTR $T238043[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back
$LN2@push_back:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T238053[ebp], eax
	mov	ecx, DWORD PTR $T238053[ebp]
	mov	DWORD PTR $T238005[ebp], ecx
	mov	edx, DWORD PTR $T238005[ebp]
	mov	DWORD PTR $T238004[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T238004[ebp]
	push	ecx
	lea	edx, DWORD PTR $T238006[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@V?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@ABVCvFormationSlotEntry@@@Z ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::insert
$LN3@push_back:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAEXABVCvFormationSlotEntry@@@Z ENDP ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::push_back
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ PROC ; std::vector<CvString,std::allocator<CvString> >::~vector<CvString,std::allocator<CvString> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXXZ ; std::vector<CvString,std::allocator<CvString> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ ENDP ; std::vector<CvString,std::allocator<CvString> >::~vector<CvString,std::allocator<CvString> >
PUBLIC	?insert@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@ABVCvString@@@Z ; std::vector<CvString,std::allocator<CvString> >::insert
PUBLIC	??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvString *,unsigned int,CvString,std::allocator<CvString> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAEXABVCvString@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T238292 = -32						; size = 4
$T238282 = -28						; size = 4
$T238272 = -24						; size = 4
__Cat$238279 = -19					; size = 1
$T238277 = -18						; size = 1
$T238276 = -17						; size = 1
$T238249 = -16						; size = 4
$T238245 = -12						; size = 4
$T238244 = -8						; size = 4
$T238243 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAEXABVCvString@@@Z PROC ; std::vector<CvString,std::allocator<CvString> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR $T238249[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@push_back@2
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@2
$LN9@push_back@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@2:
	mov	edx, DWORD PTR $T238249[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@2

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T238282[ebp], ecx
	mov	edx, DWORD PTR $T238282[ebp]
	mov	DWORD PTR $T238272[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T238276[ebp], al
	mov	cl, BYTE PTR __Cat$238279[ebp]
	mov	BYTE PTR $T238277[ebp], cl
	movzx	edx, BYTE PTR $T238276[ebp]
	push	edx
	movzx	eax, BYTE PTR $T238277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T238272[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvString *,unsigned int,CvString,std::allocator<CvString> >
	add	esp, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR $T238282[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@2
$LN2@push_back@2:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T238292[ebp], ecx
	mov	edx, DWORD PTR $T238292[ebp]
	mov	DWORD PTR $T238244[ebp], edx
	mov	eax, DWORD PTR $T238244[ebp]
	mov	DWORD PTR $T238243[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T238243[ebp]
	push	edx
	lea	eax, DWORD PTR $T238245[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@ABVCvString@@@Z ; std::vector<CvString,std::allocator<CvString> >::insert
$LN3@push_back@2:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAEXABVCvString@@@Z ENDP ; std::vector<CvString,std::allocator<CvString> >::push_back
_TEXT	ENDS
PUBLIC	?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@0@Z ; std::vector<bool,std::allocator<bool> >::erase
PUBLIC	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
PUBLIC	?_Insert_n@?$vector@_NV?$allocator@_N@std@@@std@@IAEXV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I_N@Z ; std::vector<bool,std::allocator<bool> >::_Insert_n
PUBLIC	?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ ; std::vector<bool,std::allocator<bool> >::end
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z
_TEXT	SEGMENT
_this$ = -428						; size = 4
__Tmp$238672 = -236					; size = 8
$T238647 = -228						; size = 4
$T238625 = -224						; size = 4
$T238649 = -220						; size = 4
$T238559 = -192						; size = 4
$T238429 = -96						; size = 4
$T238371 = -68						; size = 4
$T238367 = -64						; size = 8
$T238366 = -56						; size = 8
$T238365 = -48						; size = 8
$T238364 = -40						; size = 8
$T238363 = -32						; size = 8
$T238362 = -24						; size = 8
$T238361 = -16						; size = 8
$T238360 = -8						; size = 8
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 1
?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z PROC ; std::vector<bool,std::allocator<bool> >::resize, COMDAT
; _this$ = ecx

; 2039 : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 428				; 000001acH
	mov	DWORD PTR _this$[ebp], ecx

; 2040 : 		if (size() < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T238371[ebp], ecx
	mov	edx, DWORD PTR $T238371[ebp]
	cmp	edx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@resize

; 2041 : 			_Insert_n(end(), _Newsize - size(), _Val);

	lea	eax, DWORD PTR $T238361[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ ; std::vector<bool,std::allocator<bool> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238360[ebp], ecx
	mov	DWORD PTR $T238360[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T238429[ebp], ecx
	movzx	edx, BYTE PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	sub	eax, DWORD PTR $T238429[ebp]
	push	eax
	mov	ecx, DWORD PTR $T238360[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T238360[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@_NV?$allocator@_N@std@@@std@@IAEXV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I_N@Z ; std::vector<bool,std::allocator<bool> >::_Insert_n
	jmp	$LN4@resize
$LN3@resize:

; 2042 : 		else if (_Newsize < size())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T238559[ebp], ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	cmp	edx, DWORD PTR $T238559[ebp]
	jae	$LN4@resize

; 2043 : 			erase(begin() + _Newsize, end());

	lea	eax, DWORD PTR $T238363[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ ; std::vector<bool,std::allocator<bool> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T238362[ebp], ecx
	mov	DWORD PTR $T238362[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T238625[ebp], ecx
	mov	edx, DWORD PTR $T238625[ebp]
	mov	DWORD PTR $T238649[ebp], edx
	mov	eax, DWORD PTR $T238649[ebp]
	mov	DWORD PTR $T238647[ebp], eax
	mov	ecx, DWORD PTR $T238647[ebp]
	mov	DWORD PTR $T238365[ebp], ecx
	mov	DWORD PTR $T238365[ebp+4], 0
	mov	edx, DWORD PTR $T238365[ebp]
	mov	eax, DWORD PTR $T238365[ebp+4]
	mov	DWORD PTR __Tmp$238672[ebp], edx
	mov	DWORD PTR __Tmp$238672[ebp+4], eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$238672[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
	mov	edx, DWORD PTR __Tmp$238672[ebp]
	mov	eax, DWORD PTR __Tmp$238672[ebp+4]
	mov	DWORD PTR $T238366[ebp], edx
	mov	DWORD PTR $T238366[ebp+4], eax
	mov	ecx, DWORD PTR $T238366[ebp]
	mov	edx, DWORD PTR $T238366[ebp+4]
	mov	DWORD PTR $T238364[ebp], ecx
	mov	DWORD PTR $T238364[ebp+4], edx
	mov	eax, DWORD PTR $T238362[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T238362[ebp]
	push	ecx
	mov	edx, DWORD PTR $T238364[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T238364[ebp]
	push	eax
	lea	ecx, DWORD PTR $T238367[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@0@Z ; std::vector<bool,std::allocator<bool> >::erase
$LN4@resize:

; 2044 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$vector@_NV?$allocator@_N@std@@@std@@QAEXI_N@Z ENDP ; std::vector<bool,std::allocator<bool> >::resize
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@_NV?$allocator@_N@std@@@std@@QBE_NI@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T238945 = -56						; size = 4
$T238936 = -52						; size = 4
$T238935 = -48						; size = 4
$T238957 = -44						; size = 8
__Tmp$238928 = -36					; size = 8
$T238912 = -28						; size = 4
$T238899 = -24						; size = 4
$T238915 = -20						; size = 4
$T238892 = -16						; size = 8
$T238891 = -8						; size = 8
__Off$ = 8						; size = 4
??A?$vector@_NV?$allocator@_N@std@@@std@@QBE_NI@Z PROC	; std::vector<bool,std::allocator<bool> >::operator[], COMDAT
; _this$ = ecx

; 2085 : 		{	// subscript nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 2086 : 		return (*(begin() + _Off));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T238899[ebp], ecx
	mov	edx, DWORD PTR $T238899[ebp]
	mov	DWORD PTR $T238915[ebp], edx
	mov	eax, DWORD PTR $T238915[ebp]
	mov	DWORD PTR $T238912[ebp], eax
	mov	ecx, DWORD PTR $T238912[ebp]
	mov	DWORD PTR $T238891[ebp], ecx
	mov	DWORD PTR $T238891[ebp+4], 0
	mov	edx, DWORD PTR $T238891[ebp]
	mov	eax, DWORD PTR $T238891[ebp+4]
	mov	DWORD PTR __Tmp$238928[ebp], edx
	mov	DWORD PTR __Tmp$238928[ebp+4], eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$238928[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T238892[ebp], edx
	mov	DWORD PTR $T238892[ebp+4], eax
	mov	ecx, DWORD PTR $T238892[ebp+4]
	mov	DWORD PTR $T238936[ebp], ecx
	mov	edx, DWORD PTR $T238892[ebp]
	mov	DWORD PTR $T238935[ebp], edx
	mov	eax, DWORD PTR $T238935[ebp]
	mov	DWORD PTR $T238957[ebp], eax
	mov	ecx, DWORD PTR $T238936[ebp]
	mov	DWORD PTR $T238957[ebp+4], ecx
	mov	edx, DWORD PTR $T238957[ebp]
	mov	DWORD PTR $T238945[ebp], edx
	mov	eax, 1
	mov	ecx, DWORD PTR $T238957[ebp+4]
	shl	eax, cl
	mov	ecx, DWORD PTR $T238945[ebp]
	and	eax, DWORD PTR [ecx]
	neg	eax
	sbb	eax, eax
	neg	eax

; 2087 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@_NV?$allocator@_N@std@@@std@@QBE_NI@Z ENDP	; std::vector<bool,std::allocator<bool> >::operator[]
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??A?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@1@I@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T239037 = -44						; size = 4
$T239036 = -40						; size = 4
__Tmp$239027 = -36					; size = 8
$T239005 = -28						; size = 4
$T238983 = -24						; size = 4
$T239008 = -20						; size = 4
$T238971 = -16						; size = 8
$T238970 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??A?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@1@I@Z PROC ; std::vector<bool,std::allocator<bool> >::operator[], COMDAT
; _this$ = ecx

; 2090 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 2091 : 		return (*(begin() + _Off));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T238983[ebp], ecx
	mov	edx, DWORD PTR $T238983[ebp]
	mov	DWORD PTR $T239008[ebp], edx
	mov	eax, DWORD PTR $T239008[ebp]
	mov	DWORD PTR $T239005[ebp], eax
	mov	ecx, DWORD PTR $T239005[ebp]
	mov	DWORD PTR $T238970[ebp], ecx
	mov	DWORD PTR $T238970[ebp+4], 0
	mov	edx, DWORD PTR $T238970[ebp]
	mov	eax, DWORD PTR $T238970[ebp+4]
	mov	DWORD PTR __Tmp$239027[ebp], edx
	mov	DWORD PTR __Tmp$239027[ebp+4], eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$239027[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
	mov	edx, DWORD PTR __Tmp$239027[ebp]
	mov	eax, DWORD PTR __Tmp$239027[ebp+4]
	mov	DWORD PTR $T238971[ebp], edx
	mov	DWORD PTR $T238971[ebp+4], eax
	mov	ecx, DWORD PTR $T238971[ebp+4]
	mov	DWORD PTR $T239037[ebp], ecx
	mov	edx, DWORD PTR $T238971[ebp]
	mov	DWORD PTR $T239036[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T239036[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR $T239037[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2092 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??A?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@1@I@Z ENDP ; std::vector<bool,std::allocator<bool> >::operator[]
_TEXT	ENDS
PUBLIC	??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ ; std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > >::~pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > >
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::insert
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lbound
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__ehfuncinfo$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$8
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
xdata$x	ENDS
;	COMDAT ??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z
_TEXT	SEGMENT
tv172 = -184						; size = 4
tv206 = -180						; size = 4
tv231 = -176						; size = 4
_this$ = -172						; size = 4
$T239249 = -136						; size = 4
$T239161 = -100						; size = 4
$T239142 = -94						; size = 1
$T239129 = -93						; size = 1
$T239125 = -92						; size = 4
$T239118 = -84						; size = 4
$T239095 = -76						; size = 4
$T239082 = -72						; size = 4
$T239066 = -68						; size = 4
$T239054 = -64						; size = 4
$T239053 = -60						; size = 4
$T239052 = -56						; size = 16
$T239051 = -40						; size = 20
$T239050 = -20						; size = 4
__Where$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z PROC ; std::map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >::operator[], COMDAT
; _this$ = ecx

; 168  : 		{	// find element matching _Keyval or insert with default mapped

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 172				; 000000acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		iterator _Where = this->lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lbound
	mov	DWORD PTR $T239066[ebp], eax
	mov	ecx, DWORD PTR $T239066[ebp]
	mov	DWORD PTR __Where$[ebp], ecx

; 170  : 		if (_Where == this->end()
; 171  : 			|| this->comp(_Keyval, this->_Key(_Where._Mynode())))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T239082[ebp], eax
	mov	ecx, DWORD PTR $T239082[ebp]
	mov	DWORD PTR $T239050[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T239050[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@operator@4
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T239095[ebp], edx
	mov	eax, DWORD PTR __Keyval$[ebp]
	mov	ecx, DWORD PTR $T239095[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	$LN107@operator@4
$LN1@operator@4:

; 172  : 			_Where = this->insert(_Where,
; 173  : 				value_type(_Keyval, mapped_type()));

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T239053[ebp], edx
	lea	eax, DWORD PTR $T239142[ebp]
	mov	DWORD PTR $T239118[ebp], eax
	lea	ecx, DWORD PTR $T239129[ebp]
	mov	DWORD PTR $T239125[ebp], ecx
	lea	edx, DWORD PTR $T239052[ebp]
	mov	DWORD PTR tv231[ebp], edx
	lea	eax, DWORD PTR $T239052[ebp]
	mov	DWORD PTR tv206[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	0
	lea	ecx, DWORD PTR $T239052[ebp]
	call	?_Buy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAE_NI@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Buy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T239052[ebp]
	mov	DWORD PTR $T239161[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR __Keyval$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T239051[ebp], eax
	mov	ecx, DWORD PTR $T239161[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T239051[ebp+4]
	call	??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
	lea	edx, DWORD PTR $T239051[ebp]
	mov	DWORD PTR tv172[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv172[ebp]
	push	eax
	mov	ecx, DWORD PTR $T239053[ebp]
	push	ecx
	lea	edx, DWORD PTR $T239054[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::insert
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR __Where$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T239051[ebp+4]
	mov	DWORD PTR $T239249[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T239249[ebp]
	call	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T239052[ebp]
	call	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 174  : 		return ((*_Where).second);

$LN107@operator@4:
	mov	eax, DWORD PTR __Where$[ebp]
	add	eax, 16					; 00000010H

; 175  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$2:
	lea	ecx, DWORD PTR $T239052[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$0:
	lea	ecx, DWORD PTR $T239052[ebp]
	jmp	??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::~vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$1:
	lea	ecx, DWORD PTR $T239051[ebp]
	jmp	??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$6:
	mov	ecx, DWORD PTR $T239249[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__unwindfunclet$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z$8:
	lea	ecx, DWORD PTR $T239052[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__ehhandler$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??A?$map@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@1@ABH@Z ENDP ; std::map<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > > >::operator[]
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Init
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv137 = -192						; size = 4
tv163 = -188						; size = 4
tv189 = -184						; size = 4
_this$ = -180						; size = 4
$T239427 = -46						; size = 1
$T239409 = -45						; size = 1
$T239398 = -44						; size = 4
$T239420 = -40						; size = 4
$T239391 = -36						; size = 4
$T239381 = -28						; size = 4
$T239367 = -21						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >, COMDAT
; _this$ = ecx

; 528  : 		{	// construct tree by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 176				; 000000b0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T239427[ebp]
	mov	DWORD PTR $T239381[ebp], eax
	lea	ecx, DWORD PTR $T239409[ebp]
	mov	DWORD PTR $T239391[ebp], ecx
	push	ecx
	mov	edx, esp
	mov	DWORD PTR $T239420[ebp], esp
	mov	DWORD PTR $T239398[ebp], edx
	lea	eax, DWORD PTR $T239367[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
	mov	DWORD PTR tv189[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv163[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv137[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 529  : 		_Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Init

; 530  : 		_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 531  : 		_Copy(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
	jmp	SHORT $LN4@Tree
__catch$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z$0:

; 532  : 		_CATCH_ALL
; 533  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy

; 534  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 535  : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN2@Tree
	ret	0
$LN4@Tree:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN2@Tree:

; 536  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN3@Tree:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Erase
; Function compile flags: /Odtp
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T239995 = -48						; size = 4
?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::clear, COMDAT
; _this$ = ecx

; 965  : 		{	// erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 966  : 
; 967  :  #if _HAS_ITERATOR_DEBUGGING
; 968  : 		this->_Orphan_ptr(*this, 0);
; 969  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 970  : 
; 971  : 		_Erase(_Root());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Erase

; 972  : 		_Root() = _Myhead, _Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 973  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T239995[ebp], eax
	mov	ecx, DWORD PTR $T239995[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 974  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABH@Z
_TEXT	SEGMENT
tv93 = -48						; size = 4
_this$ = -44						; size = 4
$T240094 = -40						; size = 4
$T240073 = -36						; size = 4
$T240062 = -32						; size = 4
$T240053 = -28						; size = 4
$T240013 = -16						; size = 4
$T240011 = -12						; size = 4
$T240010 = -8						; size = 4
__Where$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::find, COMDAT
; _this$ = ecx

; 986  : 		{	// find an element in nonmutable sequence that matches _Keyval

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		const_iterator _Where = lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lbound
	mov	DWORD PTR $T240053[ebp], eax
	mov	ecx, DWORD PTR $T240053[ebp]
	mov	DWORD PTR __Where$[ebp], ecx

; 988  : 		return (_Where == end()
; 989  : 			|| _DEBUG_LT_PRED(this->comp,
; 990  : 				_Keyval, _Key(_Where._Mynode()))
; 991  : 					? end() : _Where);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T240062[ebp], eax
	mov	ecx, DWORD PTR $T240062[ebp]
	mov	DWORD PTR $T240011[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T240011[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@find
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T240073[ebp], edx
	mov	eax, DWORD PTR __Keyval$[ebp]
	mov	ecx, DWORD PTR $T240073[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@find
	lea	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN4@find
$LN3@find:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T240094[ebp], ecx
	mov	edx, DWORD PTR $T240094[ebp]
	mov	DWORD PTR $T240013[ebp], edx
	lea	eax, DWORD PTR $T240013[ebp]
	mov	DWORD PTR tv93[ebp], eax
$LN4@find:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR $T240010[ebp], ecx
	mov	edx, DWORD PTR $T240010[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 992  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?find@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AVconst_iterator@12@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::find
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
PUBLIC	??4?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::operator=
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z$1
__ehfuncinfo$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -376						; size = 4
$T240151 = -52						; size = 4
$T240150 = -48						; size = 4
__Tmp$240149 = -44					; size = 4
$T240144 = -40						; size = 4
$T240143 = -36						; size = 4
__Tmp$240142 = -32					; size = 4
__Tmp$222362 = -24					; size = 12
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::swap, COMDAT
; _this$ = ecx

; 1033 : 		{	// exchange contents with _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 364				; 0000016cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1034 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN16@swap
	jmp	$LN5@swap

; 1035 : 			;	// same object, do nothing
; 1036 : 		else if (get_allocator() == _Right.get_allocator())

$LN16@swap:
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN31@swap

; 1037 : 			{	// same allocator, swap control information
; 1038 : 
; 1039 :  #if _HAS_ITERATOR_DEBUGGING
; 1040 : 			this->_Swap_all(_Right);
; 1041 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1042 : 
; 1043 : 			this->_Swap_aux(_Right);
; 1044 : 
; 1045 : 			_STD _Swap_adl(this->comp, _Right.comp);
; 1046 : 			_STD swap(_Myhead, _Right._Myhead);

	mov	eax, DWORD PTR __Right$[ebp]
	add	eax, 4
	mov	DWORD PTR $T240144[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T240143[ebp], ecx
	mov	edx, DWORD PTR $T240143[ebp]
	cmp	edx, DWORD PTR $T240144[ebp]
	je	SHORT $LN26@swap
	mov	eax, DWORD PTR $T240143[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$240142[ebp], ecx
	mov	edx, DWORD PTR $T240143[ebp]
	mov	eax, DWORD PTR $T240144[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T240144[ebp]
	mov	eax, DWORD PTR __Tmp$240142[ebp]
	mov	DWORD PTR [edx], eax
$LN26@swap:

; 1047 : 			_STD swap(_Mysize, _Right._Mysize);

	mov	ecx, DWORD PTR __Right$[ebp]
	add	ecx, 8
	mov	DWORD PTR $T240151[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	mov	DWORD PTR $T240150[ebp], edx
	mov	eax, DWORD PTR $T240150[ebp]
	cmp	eax, DWORD PTR $T240151[ebp]
	je	SHORT $LN29@swap
	mov	ecx, DWORD PTR $T240150[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$240149[ebp], edx
	mov	eax, DWORD PTR $T240150[ebp]
	mov	ecx, DWORD PTR $T240151[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T240151[ebp]
	mov	ecx, DWORD PTR __Tmp$240149[ebp]
	mov	DWORD PTR [eax], ecx
$LN29@swap:

; 1048 : 			}
; 1049 : 		else

	jmp	SHORT $LN5@swap

; 1050 : 			{	// different allocator, do multiple assigns
; 1051 : 			this->_Swap_aux(_Right);

$LN31@swap:

; 1052 : 
; 1053 : 			_Myt _Tmp = *this;

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$222362[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1054 : 
; 1055 : 			*this = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::operator=

; 1056 : 			_Right = _Tmp;

	lea	ecx, DWORD PTR __Tmp$222362[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	??4?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::operator=

; 1057 : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __Tmp$222362[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN5@swap:

; 1058 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z$0:
	lea	ecx, DWORD PTR __Tmp$222362[ebp]
	jmp	??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
__unwindfunclet$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z$1:
	lea	ecx, DWORD PTR __Tmp$222362[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
__ehhandler$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-368]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?swap@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::swap
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -100						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >, COMDAT
; _this$ = ecx

; 539  : 		{	// destroy tree

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 540  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy

; 541  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
__ehhandler$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-92]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::~_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
PUBLIC	??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z$5
__unwindtable$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv215 = -212						; size = 4
tv148 = -208						; size = 4
tv172 = -204						; size = 4
_this$ = -200						; size = 4
$T241417 = -164						; size = 4
$T241416 = -160						; size = 4
$T241415 = -156						; size = 4
$T241405 = -152						; size = 4
$T241404 = -148						; size = 4
__Cat$241414 = -143					; size = 1
$T241411 = -142						; size = 1
$T241410 = -141						; size = 1
$T241384 = -140						; size = 4
$T241375 = -136						; size = 4
$T241344 = -48						; size = 4
$T241340 = -42						; size = 1
$T241327 = -41						; size = 1
$T241323 = -40						; size = 4
$T241316 = -32						; size = 4
$T241307 = -28						; size = 4
$T241306 = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >, COMDAT
; _this$ = ecx

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T241340[ebp]
	mov	DWORD PTR $T241316[ebp], eax
	lea	ecx, DWORD PTR $T241327[ebp]
	mov	DWORD PTR $T241323[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv172[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv148[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 501  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T241344[ebp], eax
	mov	edx, DWORD PTR $T241344[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAE_NI@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Buy
	movzx	eax, al
	test	eax, eax
	je	$LN3@vector

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T241375[ebp], edx
	mov	eax, DWORD PTR $T241375[ebp]
	mov	DWORD PTR $T241306[ebp], eax
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T241384[ebp], edx
	mov	eax, DWORD PTR $T241384[ebp]
	mov	DWORD PTR $T241307[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T241417[ebp], edx
	mov	eax, DWORD PTR $T241306[ebp]
	mov	DWORD PTR $T241416[ebp], eax
	mov	ecx, DWORD PTR $T241307[ebp]
	mov	DWORD PTR $T241415[ebp], ecx
	mov	edx, DWORD PTR $T241417[ebp]
	mov	DWORD PTR $T241405[ebp], edx
	mov	eax, DWORD PTR $T241415[ebp]
	mov	DWORD PTR $T241404[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T241410[ebp], cl
	mov	dl, BYTE PTR __Cat$241414[ebp]
	mov	BYTE PTR $T241411[ebp], dl
	movzx	eax, BYTE PTR $T241410[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T241411[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T241405[ebp]
	push	eax
	mov	ecx, DWORD PTR $T241416[ebp]
	push	ecx
	mov	edx, DWORD PTR $T241404[ebp]
	push	edx
	call	??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_const_iterator<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv215[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv215[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 507  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN3@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN3@vector:

; 508  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-216]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::~vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 559  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy

; 560  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::~vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
PUBLIC	?insert@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@ABUProductionCostModifiers@@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::insert
PUBLIC	??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ProductionCostModifiers *,unsigned int,ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAEXABUProductionCostModifiers@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T241632 = -32						; size = 4
$T241622 = -28						; size = 4
$T241612 = -24						; size = 4
__Cat$241620 = -19					; size = 1
$T241618 = -18						; size = 1
$T241617 = -17						; size = 1
$T241589 = -16						; size = 4
$T241585 = -12						; size = 4
$T241584 = -8						; size = 4
$T241583 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAEXABUProductionCostModifiers@@@Z PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T241589[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@push_back@3
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@3
$LN9@push_back@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@3:
	mov	edx, DWORD PTR $T241589[ebp]
	cmp	edx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@3

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T241622[ebp], ecx
	mov	edx, DWORD PTR $T241622[ebp]
	mov	DWORD PTR $T241612[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T241617[ebp], al
	mov	cl, BYTE PTR __Cat$241620[ebp]
	mov	BYTE PTR $T241618[ebp], cl
	movzx	edx, BYTE PTR $T241617[ebp]
	push	edx
	movzx	eax, BYTE PTR $T241618[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR $T241612[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ProductionCostModifiers *,unsigned int,ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
	add	esp, 24					; 00000018H
	mov	ecx, 1
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR $T241622[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@3
$LN2@push_back@3:

; 823  : 			insert(end(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T241632[ebp], ecx
	mov	edx, DWORD PTR $T241632[ebp]
	mov	DWORD PTR $T241584[ebp], edx
	mov	eax, DWORD PTR $T241584[ebp]
	mov	DWORD PTR $T241583[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T241583[ebp]
	push	edx
	lea	eax, DWORD PTR $T241585[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@ABUProductionCostModifiers@@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::insert
$LN3@push_back@3:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAEXABUProductionCostModifiers@@@Z ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::push_back
_TEXT	ENDS
PUBLIC	?insert@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@V?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@ABW4AnimationPathTypes@@@Z ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::insert
PUBLIC	??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum AnimationPathTypes *,unsigned int,enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
; Function compile flags: /Odtp
;	COMDAT ?push_back@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAEXABW4AnimationPathTypes@@@Z
_TEXT	SEGMENT
tv129 = -64						; size = 4
_this$ = -60						; size = 4
$T241749 = -32						; size = 4
$T241739 = -28						; size = 4
$T241729 = -24						; size = 4
__Cat$241736 = -19					; size = 1
$T241733 = -18						; size = 1
$T241732 = -17						; size = 1
$T241706 = -16						; size = 4
$T241702 = -12						; size = 4
$T241701 = -8						; size = 4
$T241700 = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAEXABW4AnimationPathTypes@@@Z PROC ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx

; 810  : 		if (size() < capacity())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T241706[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@push_back@4
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN7@push_back@4
$LN9@push_back@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv129[ebp], eax
$LN7@push_back@4:
	mov	ecx, DWORD PTR $T241706[ebp]
	cmp	ecx, DWORD PTR tv129[ebp]
	jae	SHORT $LN2@push_back@4

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T241739[ebp], eax
	mov	ecx, DWORD PTR $T241739[ebp]
	mov	DWORD PTR $T241729[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T241732[ebp], dl
	mov	al, BYTE PTR __Cat$241736[ebp]
	mov	BYTE PTR $T241733[ebp], al
	movzx	ecx, BYTE PTR $T241732[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T241733[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR $T241729[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum AnimationPathTypes *,unsigned int,enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
	add	esp, 24					; 00000018H
	mov	eax, 1
	shl	eax, 2
	add	eax, DWORD PTR $T241739[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else

	jmp	SHORT $LN3@push_back@4
$LN2@push_back@4:

; 823  : 			insert(end(), _Val);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T241749[ebp], eax
	mov	ecx, DWORD PTR $T241749[ebp]
	mov	DWORD PTR $T241701[ebp], ecx
	mov	edx, DWORD PTR $T241701[ebp]
	mov	DWORD PTR $T241700[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T241700[ebp]
	push	ecx
	lea	edx, DWORD PTR $T241702[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@V?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@ABW4AnimationPathTypes@@@Z ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::insert
$LN3@push_back@4:

; 824  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAEXABW4AnimationPathTypes@@@Z ENDP ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::push_back
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<CvString,std::allocator<CvString> >::~_Vector_val<CvString,std::allocator<CvString> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<CvString,std::allocator<CvString> >::~_Vector_val<CvString,std::allocator<CvString> >
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ$1
__ehfuncinfo$??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T241909 = -48						; size = 4
__$EHRec$ = -12						; size = 12
??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ PROC ; std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > >::~pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR $T241909[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T241909[ebp]
	call	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ$1:
	mov	ecx, DWORD PTR $T241909[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__ehhandler$??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-44]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@QAE@XZ ENDP ; std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > >::~pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::~_Tree_val<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::~_Vector_val<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::~_Vector_val<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::~_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::~_Vector_val<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@V?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@ABVCvFormationSlotEntry@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$242012 = -24					; size = 4
$T241995 = -20						; size = 4
$T241976 = -16						; size = 4
$T241963 = -12						; size = 4
$T241960 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@V?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@ABVCvFormationSlotEntry@@@Z PROC ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	test	edx, edx
	jne	SHORT $LN3@insert
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert
$LN3@insert:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T241976[ebp], ecx
	mov	edx, DWORD PTR $T241976[ebp]
	mov	DWORD PTR $T241960[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T241960[ebp]
	sar	eax, 4
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T241995[ebp], edx
	mov	eax, DWORD PTR $T241995[ebp]
	mov	DWORD PTR $T241963[ebp], eax
	mov	ecx, DWORD PTR $T241963[ebp]
	mov	DWORD PTR __Tmp$242012[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __Tmp$242012[ebp]
	mov	DWORD PTR __Tmp$242012[ebp], edx
	mov	eax, DWORD PTR __Tmp$242012[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@V?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@ABVCvFormationSlotEntry@@@Z ENDP ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::insert
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z ; std::vector<CvString,std::allocator<CvString> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@ABVCvString@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$242072 = -24					; size = 4
$T242055 = -20						; size = 4
$T242036 = -16						; size = 4
$T242023 = -12						; size = 4
$T242020 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@ABVCvString@@@Z PROC ; std::vector<CvString,std::allocator<CvString> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN3@insert@2
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242036[ebp], eax
	mov	ecx, DWORD PTR $T242036[ebp]
	mov	DWORD PTR $T242020[ebp], ecx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T242020[ebp]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@2:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z ; std::vector<CvString,std::allocator<CvString> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242055[ebp], eax
	mov	ecx, DWORD PTR $T242055[ebp]
	mov	DWORD PTR $T242023[ebp], ecx
	mov	edx, DWORD PTR $T242023[ebp]
	mov	DWORD PTR __Tmp$242072[ebp], edx
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR __Tmp$242072[ebp]
	mov	DWORD PTR __Tmp$242072[ebp], eax
	mov	ecx, DWORD PTR __Tmp$242072[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@ABVCvString@@@Z ENDP ; std::vector<CvString,std::allocator<CvString> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -72						; size = 4
$T242262 = -68						; size = 4
$T242239 = -64						; size = 4
$T242238 = -60						; size = 4
$T242217 = -56						; size = 4
$T242216 = -52						; size = 4
__Cat$242246 = -46					; size = 1
$T242243 = -45						; size = 1
$T242165 = -44						; size = 4
$T242164 = -40						; size = 4
$T242163 = -36						; size = 4
$T242144 = -30						; size = 1
$T242143 = -29						; size = 1
$T242142 = -28						; size = 4
$T242141 = -24						; size = 4
__Cat$242151 = -16					; size = 1
$T242148 = -15						; size = 1
$T242147 = -14						; size = 1
$T242146 = -13						; size = 1
__Ptr$222702 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@0@Z PROC ; std::vector<CvString,std::allocator<CvString> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T242165[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T242164[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T242163[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T242146[ebp], cl
	mov	dl, BYTE PTR __Cat$242151[ebp]
	mov	BYTE PTR $T242147[ebp], dl
	mov	al, BYTE PTR $T242146[ebp]
	mov	BYTE PTR $T242144[ebp], al
	mov	cl, BYTE PTR $T242148[ebp]
	mov	BYTE PTR $T242143[ebp], cl
	mov	edx, DWORD PTR $T242165[ebp]
	mov	DWORD PTR $T242142[ebp], edx
	mov	eax, DWORD PTR $T242163[ebp]
	mov	DWORD PTR $T242141[ebp], eax
	jmp	SHORT $LN28@erase
$LN27@erase:
	mov	ecx, DWORD PTR $T242142[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR $T242142[ebp], ecx
	mov	edx, DWORD PTR $T242141[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR $T242141[ebp], edx
$LN28@erase:
	mov	eax, DWORD PTR $T242141[ebp]
	cmp	eax, DWORD PTR $T242164[ebp]
	je	SHORT $LN20@erase
	mov	ecx, DWORD PTR $T242141[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T242142[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	jmp	SHORT $LN27@erase
$LN20@erase:
	mov	edx, DWORD PTR $T242142[ebp]
	mov	DWORD PTR __Ptr$222702[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T242262[ebp], ecx
	mov	edx, DWORD PTR $T242262[ebp]
	mov	DWORD PTR $T242239[ebp], edx
	mov	eax, DWORD PTR __Ptr$222702[ebp]
	mov	DWORD PTR $T242238[ebp], eax
	mov	cl, BYTE PTR __Cat$242246[ebp]
	mov	BYTE PTR $T242243[ebp], cl
	mov	edx, DWORD PTR $T242239[ebp]
	mov	DWORD PTR $T242217[ebp], edx
	mov	eax, DWORD PTR $T242238[ebp]
	mov	DWORD PTR $T242216[ebp], eax
	jmp	SHORT $LN41@erase
$LN40@erase:
	mov	ecx, DWORD PTR $T242216[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR $T242216[ebp], ecx
$LN41@erase:
	mov	edx, DWORD PTR $T242216[ebp]
	cmp	edx, DWORD PTR $T242217[ebp]
	je	SHORT $LN33@erase
	mov	ecx, DWORD PTR $T242216[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	eax, eax
	and	eax, 1
	je	SHORT $LN44@erase
	mov	ecx, DWORD PTR $T242216[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN44@erase:
	jmp	SHORT $LN40@erase
$LN33@erase:

; 1049 : 			_Mylast = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$222702[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@erase:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@QAE?AV?$_Vector_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@V?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@0@Z ENDP ; std::vector<CvString,std::allocator<CvString> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@VCvString@@@std@@YAPAVCvString@@IPAV1@@Z ; std::_Allocate<CvString>
PUBLIC	?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ ; std::vector<CvString,std::allocator<CvString> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$242276 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAE_NI@Z PROC ; std::vector<CvString,std::allocator<CvString> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$242276[ebp], 153391689 ; 09249249H
	cmp	DWORD PTR __Count$242276[ebp], 0
	jbe	SHORT $LN11@Buy
	mov	eax, DWORD PTR __Count$242276[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy
$LN11@Buy:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ ; std::vector<CvString,std::allocator<CvString> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@VCvString@@@std@@YAPAVCvString@@IPAV1@@Z ; std::_Allocate<CvString>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CvString,std::allocator<CvString> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -40						; size = 4
$T242409 = -36						; size = 4
$T242408 = -32						; size = 4
$T242404 = -28						; size = 4
$T242403 = -24						; size = 4
$T242380 = -20						; size = 4
$T242379 = -16						; size = 4
$T242358 = -12						; size = 4
$T242357 = -8						; size = 4
__Cat$242386 = -2					; size = 1
$T242384 = -1						; size = 1
?_Tidy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXXZ PROC ; std::vector<CvString,std::allocator<CvString> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN1@Tidy

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T242404[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T242403[ebp], ecx
	mov	edx, DWORD PTR $T242404[ebp]
	mov	DWORD PTR $T242380[ebp], edx
	mov	eax, DWORD PTR $T242403[ebp]
	mov	DWORD PTR $T242379[ebp], eax
	mov	cl, BYTE PTR __Cat$242386[ebp]
	mov	BYTE PTR $T242384[ebp], cl
	mov	edx, DWORD PTR $T242380[ebp]
	mov	DWORD PTR $T242358[ebp], edx
	mov	eax, DWORD PTR $T242379[ebp]
	mov	DWORD PTR $T242357[ebp], eax
	jmp	SHORT $LN12@Tidy
$LN11@Tidy:
	mov	ecx, DWORD PTR $T242357[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR $T242357[ebp], ecx
$LN12@Tidy:
	mov	edx, DWORD PTR $T242357[ebp]
	cmp	edx, DWORD PTR $T242358[ebp]
	je	SHORT $LN4@Tidy
	mov	ecx, DWORD PTR $T242357[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	eax, eax
	and	eax, 1
	je	SHORT $LN15@Tidy
	mov	ecx, DWORD PTR $T242357[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN15@Tidy:
	jmp	SHORT $LN11@Tidy
$LN4@Tidy:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR $T242409[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242408[ebp], eax
	mov	ecx, DWORD PTR $T242408[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXXZ ENDP ; std::vector<CvString,std::allocator<CvString> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *,std::allocator<unsigned int> >
PUBLIC	??$_Allocate@I@std@@YAPAIIPAI@Z			; std::_Allocate<unsigned int>
PUBLIC	?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z$4
__ehfuncinfo$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
tv170 = -200						; size = 4
tv168 = -196						; size = 4
_this$ = -192						; size = 4
$T242601 = -188						; size = 4
$T242600 = -184						; size = 4
$T242596 = -180						; size = 4
$T242595 = -176						; size = 4
$T242584 = -172						; size = 4
$T242583 = -168						; size = 4
__Cat$242591 = -162					; size = 1
$T242589 = -161						; size = 1
$T242558 = -160						; size = 4
$T242557 = -156						; size = 4
$T242538 = -152						; size = 4
$T242521 = -145						; size = 1
$T242520 = -144						; size = 4
$T242510 = -140						; size = 4
$T242509 = -136						; size = 4
__Cat$242554 = -130					; size = 1
$T242552 = -129						; size = 1
$T242551 = -128						; size = 1
__Cat$242546 = -127					; size = 1
$T242544 = -126						; size = 1
$T242543 = -125						; size = 1
$T242479 = -124						; size = 4
$T242463 = -120						; size = 4
__Count$242430 = -36					; size = 4
$T242413 = -32						; size = 4
$T242412 = -28						; size = 4
__Size$222753 = -24					; size = 4
__Ptr$222744 = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::reserve, COMDAT
; _this$ = ecx

; 602  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 184				; 000000b8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 603  : 		if (max_size() < _Count)

	mov	DWORD PTR __Count$242430[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$242430[ebp], 0
	jbe	SHORT $LN16@reserve
	mov	eax, DWORD PTR __Count$242430[ebp]
	mov	DWORD PTR tv168[ebp], eax
	jmp	SHORT $LN12@reserve
$LN16@reserve:
	mov	DWORD PTR tv168[ebp], 1
$LN12@reserve:
	mov	ecx, DWORD PTR tv168[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve

; 604  : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
	jmp	$LN7@reserve
$LN5@reserve:

; 605  : 		else if (capacity() < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN26@reserve
	mov	DWORD PTR tv170[ebp], 0
	jmp	SHORT $LN24@reserve
$LN26@reserve:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR tv170[ebp], edx
$LN24@reserve:
	mov	eax, DWORD PTR tv170[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve

; 606  : 			{	// not enough room, reallocate
; 607  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	push	0
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	??$_Allocate@I@std@@YAPAIIPAI@Z		; std::_Allocate<unsigned int>
	add	esp, 8
	mov	DWORD PTR __Ptr$222744[ebp], eax

; 608  : 
; 609  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 610  : 			_Umove(begin(), end(), _Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T242463[ebp], eax
	mov	ecx, DWORD PTR $T242463[ebp]
	mov	DWORD PTR $T242412[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242479[ebp], eax
	mov	ecx, DWORD PTR $T242479[ebp]
	mov	DWORD PTR $T242413[ebp], ecx
	mov	edx, DWORD PTR $T242412[ebp]
	mov	DWORD PTR $T242558[ebp], edx
	mov	eax, DWORD PTR $T242413[ebp]
	mov	DWORD PTR $T242557[ebp], eax
	mov	ecx, DWORD PTR __Ptr$222744[ebp]
	mov	DWORD PTR $T242538[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T242543[ebp], dl
	mov	al, BYTE PTR __Cat$242546[ebp]
	mov	BYTE PTR $T242544[ebp], al
	mov	cl, BYTE PTR $T242543[ebp]
	mov	BYTE PTR $T242521[ebp], cl
	mov	edx, DWORD PTR $T242538[ebp]
	mov	DWORD PTR $T242520[ebp], edx
	mov	eax, DWORD PTR $T242520[ebp]
	mov	DWORD PTR $T242510[ebp], eax
	mov	ecx, DWORD PTR $T242557[ebp]
	mov	DWORD PTR $T242509[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T242551[ebp], dl
	mov	al, BYTE PTR __Cat$242554[ebp]
	mov	BYTE PTR $T242552[ebp], al
	movzx	ecx, BYTE PTR $T242551[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T242552[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T242510[ebp]
	push	ecx
	mov	edx, DWORD PTR $T242558[ebp]
	push	edx
	mov	eax, DWORD PTR $T242509[ebp]
	push	eax
	call	??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *,std::allocator<unsigned int> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN8@reserve
__catch$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z$0:

; 611  : 			_CATCH_ALL
; 612  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	ecx, DWORD PTR __Ptr$222744[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 613  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 614  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN61@reserve
	ret	0
$LN8@reserve:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 615  : 
; 616  : 			size_type _Size = size();

$LN61@reserve:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR __Size$222753[ebp], ecx

; 617  : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@reserve

; 618  : 				{	// destroy and deallocate old array
; 619  : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T242596[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242595[ebp], eax
	mov	ecx, DWORD PTR $T242596[ebp]
	mov	DWORD PTR $T242584[ebp], ecx
	mov	edx, DWORD PTR $T242595[ebp]
	mov	DWORD PTR $T242583[ebp], edx
	mov	al, BYTE PTR __Cat$242591[ebp]
	mov	BYTE PTR $T242589[ebp], al

; 620  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T242601[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T242600[ebp], edx
	mov	eax, DWORD PTR $T242600[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@reserve:

; 621  : 				}
; 622  : 
; 623  :  #if _HAS_ITERATOR_DEBUGGING
; 624  : 			this->_Orphan_all();
; 625  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 626  : 
; 627  : 			_Myend = _Ptr + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Ptr$222744[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 628  : 			_Mylast = _Ptr + _Size;

	mov	edx, DWORD PTR __Size$222753[ebp]
	mov	eax, DWORD PTR __Ptr$222744[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 629  : 			_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$222744[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve:

; 630  : 			}
; 631  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-204]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@IV?$allocator@I@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::reserve
PUBLIC	??0?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ; std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0>::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	SEGMENT
__unwindtable$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
tv89 = -72						; size = 4
tv147 = -68						; size = 4
tv173 = -64						; size = 4
tv199 = -60						; size = 4
_this$ = -56						; size = 4
$T242693 = -47						; size = 1
$T242668 = -46						; size = 1
$T242650 = -45						; size = 1
$T242639 = -44						; size = 4
$T242684 = -40						; size = 4
$T242632 = -36						; size = 4
$T242625 = -28						; size = 4
$T242618 = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >, COMDAT
; _this$ = ecx

; 509  : 		{	// construct empty tree

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T242693[ebp]
	mov	DWORD PTR $T242618[ebp], eax
	lea	ecx, DWORD PTR $T242668[ebp]
	mov	DWORD PTR $T242625[ebp], ecx
	lea	edx, DWORD PTR $T242650[ebp]
	mov	DWORD PTR $T242632[ebp], edx
	push	ecx
	mov	eax, esp
	mov	DWORD PTR $T242684[ebp], esp
	mov	DWORD PTR $T242639[ebp], eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ; std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0>::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0>
	mov	DWORD PTR tv199[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv173[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv147[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv89[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 510  : 		_Init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Init

; 511  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_val@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
__ehhandler$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase
; Function compile flags: /Odtp
;	COMDAT ??4?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -124						; size = 4
$T242770 = -32						; size = 4
$T242757 = -28						; size = 4
$T242745 = -24						; size = 4
$T242735 = -20						; size = 4
$T242734 = -16						; size = 4
$T242733 = -12						; size = 4
$T242732 = -8						; size = 4
$T242731 = -4						; size = 4
__Right$ = 8						; size = 4
??4?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::operator=, COMDAT
; _this$ = ecx

; 544  : 		{	// replace contents from _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	SHORT $LN1@operator@5

; 546  : 			{	// worth doing
; 547  : 			erase(begin(), end());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T242745[ebp], edx
	mov	eax, DWORD PTR $T242745[ebp]
	mov	DWORD PTR $T242732[ebp], eax
	mov	ecx, DWORD PTR $T242732[ebp]
	mov	DWORD PTR $T242731[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T242757[ebp], eax
	mov	ecx, DWORD PTR $T242757[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T242770[ebp], edx
	mov	eax, DWORD PTR $T242770[ebp]
	mov	DWORD PTR $T242734[ebp], eax
	mov	ecx, DWORD PTR $T242734[ebp]
	mov	DWORD PTR $T242733[ebp], ecx
	mov	edx, DWORD PTR $T242731[ebp]
	push	edx
	mov	eax, DWORD PTR $T242733[ebp]
	push	eax
	lea	ecx, DWORD PTR $T242735[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase

; 548  : 			this->comp = _Right.comp;
; 549  : 			_Copy(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV12@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
$LN1@operator@5:

; 550  : 			}
; 551  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 552  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::operator=
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::insert
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Inc
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Dec
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
; Function compile flags: /Odtp
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -376						; size = 4
$T243604 = -372						; size = 4
$T243581 = -368						; size = 4
$T243565 = -364						; size = 4
$T243539 = -360						; size = 4
$T243520 = -356						; size = 4
$T243500 = -352						; size = 4
$T243471 = -348						; size = 4
$T243456 = -344						; size = 4
$T243442 = -340						; size = 4
$T243421 = -336						; size = 4
$T243389 = -332						; size = 4
$T243372 = -328						; size = 4
$T243359 = -324						; size = 4
$T243341 = -320						; size = 4
$T243321 = -316						; size = 4
$T243302 = -312						; size = 4
$T243273 = -308						; size = 4
$T243257 = -304						; size = 4
$T243234 = -300						; size = 4
$T243211 = -296						; size = 4
$T243186 = -216						; size = 4
$T243172 = -212						; size = 4
$T243154 = -208						; size = 4
$T243121 = -128						; size = 4
$T243101 = -124						; size = 4
$T243088 = -120						; size = 4
$T243078 = -40						; size = 4
$T243071 = -36						; size = 8
$T243070 = -28						; size = 4
$T243069 = -24						; size = 4
$T243068 = -20						; size = 4
$T243067 = -16						; size = 4
$T243066 = -12						; size = 4
$T243065 = -8						; size = 4
__Next$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::insert, COMDAT
; _this$ = ecx

; 664  : 		{	// try to insert node with value _Val using _Where as a hint

	push	ebp
	mov	ebp, esp
	sub	esp, 376				; 00000178H
	mov	DWORD PTR _this$[ebp], ecx

; 665  : 
; 666  :  #if _HAS_ITERATOR_DEBUGGING
; 667  : 		if (_Where._Mycont != this)
; 668  : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 669  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 670  : 
; 671  : 		const_iterator _Next;

	mov	DWORD PTR __Next$[ebp], 0

; 672  : 
; 673  : 		if (size() == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T243078[ebp], ecx
	cmp	DWORD PTR $T243078[ebp], 0
	jne	SHORT $LN32@insert@3

; 674  : 			return (_Insert(true, _Myhead, _Val));	// insert into empty tree

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3
	jmp	$LN31@insert@3
$LN32@insert@3:

; 675  : 		else if (this->_Multi)

	xor	eax, eax
	je	$LN30@insert@3

; 676  : 			{	// insert even if duplicate
; 677  : 			if (_Where == begin())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T243088[ebp], edx
	mov	eax, DWORD PTR $T243088[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T243101[ebp], ecx
	mov	edx, DWORD PTR $T243101[ebp]
	mov	DWORD PTR $T243065[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T243065[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN29@insert@3

; 678  : 				{	// insert at beginning if before first element
; 679  : 				if (!_DEBUG_LT_PRED(this->comp,

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T243121[ebp], eax
	mov	ecx, DWORD PTR $T243121[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setl	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN28@insert@3

; 680  : 					_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 681  : 					return (_Insert(true, _Where._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3
$LN28@insert@3:

; 682  : 				}

	jmp	$LN27@insert@3
$LN29@insert@3:

; 683  : 			else if (_Where == end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T243154[ebp], ecx
	mov	edx, DWORD PTR $T243154[ebp]
	mov	DWORD PTR $T243066[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR $T243066[ebp]
	sete	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN151@insert@3

; 684  : 				{	// insert at end if after last element
; 685  : 				if (!_DEBUG_LT_PRED(this->comp,

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	mov	DWORD PTR $T243172[ebp], ecx
	mov	edx, DWORD PTR $T243172[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T243186[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR $T243186[ebp]
	mov	eax, DWORD PTR [ecx]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setl	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN25@insert@3

; 686  : 					this->_Kfn(_Val), _Key(_Rmost())))
; 687  : 					return (_Insert(false, _Rmost(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3
$LN25@insert@3:

; 688  : 				}
; 689  : 			else if (!_DEBUG_LT_PRED(this->comp,

	jmp	$LN27@insert@3

; 690  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 691  : 				&& !_DEBUG_LT_PRED(this->comp,

$LN151@insert@3:
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T243211[ebp], edx
	mov	eax, DWORD PTR $T243211[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN23@insert@3
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], edx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Dec
	mov	eax, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T243234[ebp], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR $T243234[ebp]
	mov	eax, DWORD PTR [ecx]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+12]
	setl	cl
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN23@insert@3

; 692  : 					this->_Kfn(_Val), _Key((--(_Next = _Where))._Mynode())))
; 693  : 				{	// insert before _Where
; 694  : 				if (_Isnil(_Right(_Next._Mynode())))

	mov	eax, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T243257[ebp], eax
	mov	ecx, DWORD PTR $T243257[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	je	SHORT $LN185@insert@3

; 695  : 					return (_Insert(false, _Next._Mynode(), _Val));

	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3

; 696  : 				else

	jmp	SHORT $LN21@insert@3

; 697  : 					return (_Insert(true, _Where._Mynode(), _Val));

$LN185@insert@3:
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3
$LN21@insert@3:

; 698  : 				}
; 699  : 			else if (!_DEBUG_LT_PRED(this->comp,

	jmp	$LN27@insert@3
$LN23@insert@3:

; 700  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 701  : 				&& (++(_Next = _Where) == end()
; 702  : 					|| !_DEBUG_LT_PRED(this->comp,

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T243273[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T243273[ebp]
	mov	ecx, DWORD PTR [edx]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setl	dl
	movzx	eax, dl
	test	eax, eax
	jne	$LN27@insert@3
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T243302[ebp], eax
	mov	ecx, DWORD PTR $T243302[ebp]
	mov	DWORD PTR $T243067[ebp], ecx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Inc
	mov	edx, DWORD PTR __Next$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T243067[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN18@insert@3
	mov	edx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T243321[ebp], edx
	mov	eax, DWORD PTR $T243321[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN27@insert@3
$LN18@insert@3:

; 703  : 						_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 704  : 				{	// insert after _Where
; 705  : 				if (_Isnil(_Right(_Where._Mynode())))

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T243341[ebp], edx
	mov	eax, DWORD PTR $T243341[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN229@insert@3

; 706  : 					return (_Insert(false, _Where._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3

; 707  : 				else

	jmp	SHORT $LN27@insert@3

; 708  : 					return (_Insert(true, _Next._Mynode(), _Val));

$LN229@insert@3:
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3
$LN27@insert@3:

; 709  : 				}
; 710  : 			}
; 711  : 		else

	jmp	$LN31@insert@3
$LN30@insert@3:

; 712  : 			{	// insert only if unique
; 713  : 			if (_Where == begin())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T243359[ebp], ecx
	mov	edx, DWORD PTR $T243359[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T243372[ebp], eax
	mov	ecx, DWORD PTR $T243372[ebp]
	mov	DWORD PTR $T243068[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T243068[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN14@insert@3

; 714  : 				{	// insert at beginning if before first element
; 715  : 				if (_DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T243389[ebp], edx
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR $T243389[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+12]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@insert@3

; 716  : 					this->_Kfn(_Val), _Key(_Where._Mynode())))
; 717  : 					return (_Insert(true, _Where._Mynode(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3
$LN13@insert@3:

; 718  : 				}

	jmp	$LN31@insert@3
$LN14@insert@3:

; 719  : 			else if (_Where == end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T243421[ebp], eax
	mov	ecx, DWORD PTR $T243421[ebp]
	mov	DWORD PTR $T243069[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T243069[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@insert@3

; 720  : 				{	// insert at end if after last element
; 721  : 				if (_DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 8
	mov	DWORD PTR $T243442[ebp], eax
	mov	ecx, DWORD PTR $T243442[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T243456[ebp], edx
	mov	eax, DWORD PTR $T243456[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN10@insert@3

; 722  : 					_Key(_Rmost()), this->_Kfn(_Val)))
; 723  : 					return (_Insert(false, _Rmost(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3
$LN10@insert@3:

; 724  : 				}
; 725  : 			else if (_DEBUG_LT_PRED(this->comp,

	jmp	$LN31@insert@3
$LN11@insert@3:

; 726  : 				this->_Kfn(_Val), _Key(_Where._Mynode()))
; 727  : 				&& _DEBUG_LT_PRED(this->comp,

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T243471[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T243471[ebp]
	mov	ecx, DWORD PTR [edx]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setl	dl
	movzx	eax, dl
	test	eax, eax
	je	$LN319@insert@3
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], ecx
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Dec
	mov	edx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T243500[ebp], edx
	mov	eax, DWORD PTR $T243500[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	setl	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN319@insert@3

; 728  : 					_Key((--(_Next = _Where))._Mynode()), this->_Kfn(_Val)))
; 729  : 				{	// insert before _Where
; 730  : 				if (_Isnil(_Right(_Next._Mynode())))

	mov	edx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T243520[ebp], edx
	mov	eax, DWORD PTR $T243520[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN317@insert@3

; 731  : 					return (_Insert(false, _Next._Mynode(), _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3

; 732  : 				else

	jmp	SHORT $LN6@insert@3

; 733  : 					return (_Insert(true, _Where._Mynode(), _Val));

$LN317@insert@3:
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN33@insert@3
$LN6@insert@3:

; 734  : 				}
; 735  : 			else if (_DEBUG_LT_PRED(this->comp,

	jmp	$LN31@insert@3

; 736  : 				_Key(_Where._Mynode()), this->_Kfn(_Val))
; 737  : 				&& (++(_Next = _Where) == end()
; 738  : 					|| _DEBUG_LT_PRED(this->comp,

$LN319@insert@3:
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T243539[ebp], eax
	mov	ecx, DWORD PTR $T243539[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setl	cl
	movzx	edx, cl
	test	edx, edx
	je	$LN31@insert@3
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Next$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T243565[ebp], edx
	mov	eax, DWORD PTR $T243565[ebp]
	mov	DWORD PTR $T243070[ebp], eax
	lea	ecx, DWORD PTR __Next$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Inc
	mov	ecx, DWORD PTR __Next$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR $T243070[ebp]
	sete	dl
	movzx	eax, dl
	test	eax, eax
	jne	SHORT $LN3@insert@3
	mov	ecx, DWORD PTR __Next$[ebp]
	mov	DWORD PTR $T243581[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T243581[ebp]
	mov	ecx, DWORD PTR [edx]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setl	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN31@insert@3
$LN3@insert@3:

; 739  : 						this->_Kfn(_Val), _Key(_Next._Mynode()))))
; 740  : 				{	// insert after _Where
; 741  : 				if (_Isnil(_Right(_Where._Mynode())))

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T243604[ebp], ecx
	mov	edx, DWORD PTR $T243604[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	je	SHORT $LN361@insert@3

; 742  : 					return (_Insert(false, _Where._Mynode(), _Val));

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN33@insert@3

; 743  : 				else

	jmp	SHORT $LN31@insert@3

; 744  : 					return (_Insert(true, _Next._Mynode(), _Val));

$LN361@insert@3:
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN33@insert@3
$LN31@insert@3:

; 745  : 				}
; 746  : 			}
; 747  : 
; 748  : 		return (insert(_Val).first);	// try usual insert if all else fails

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	eax, DWORD PTR $T243071[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::insert
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN33@insert@3:

; 749  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::insert
_TEXT	ENDS
PUBLIC	?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
; Function compile flags: /Odtp
;	COMDAT ?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV12@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T243734 = -40						; size = 4
$T243721 = -36						; size = 4
$T243700 = -32						; size = 4
$T243687 = -28						; size = 4
$T243682 = -24						; size = 4
$T243661 = -20						; size = 4
$T243649 = -16						; size = 4
$T243640 = -12						; size = 4
$T243636 = -8						; size = 4
$T243627 = -4						; size = 4
__Right$ = 8						; size = 4
?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV12@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy, COMDAT
; _this$ = ecx

; 1062 : 		{	// copy entire tree from _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1063 : 		_Root() = _Copy(_Right._Root(), _Myhead);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T243627[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	DWORD PTR $T243636[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR $T243627[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
	mov	edx, DWORD PTR $T243636[ebp]
	mov	DWORD PTR [edx], eax

; 1064 : 		_Mysize = _Right.size();

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T243640[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T243640[ebp]
	mov	DWORD PTR [edx+8], eax

; 1065 : 		if (!_Isnil(_Root()))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T243649[ebp], edx
	mov	eax, DWORD PTR $T243649[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	jne	SHORT $LN2@Copy

; 1066 : 			{	// nonempty tree, look for new smallest and largest
; 1067 : 			_Lmost() = _Min(_Root());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T243661[ebp], ecx
	mov	edx, DWORD PTR $T243661[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T243682[ebp], eax
$LN31@Copy:
	mov	ecx, DWORD PTR $T243682[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN27@Copy
	mov	ecx, DWORD PTR $T243682[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T243682[ebp], edx
	jmp	SHORT $LN31@Copy
$LN27@Copy:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T243687[ebp], ecx
	mov	edx, DWORD PTR $T243687[ebp]
	mov	eax, DWORD PTR $T243682[ebp]
	mov	DWORD PTR [edx], eax

; 1068 : 			_Rmost() = _Max(_Root());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T243700[ebp], edx
	mov	eax, DWORD PTR $T243700[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T243721[ebp], ecx
$LN49@Copy:
	mov	edx, DWORD PTR $T243721[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN53@Copy
	mov	edx, DWORD PTR $T243721[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T243721[ebp], eax
	jmp	SHORT $LN49@Copy
$LN53@Copy:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR $T243721[ebp]
	mov	DWORD PTR [edx+8], eax

; 1069 : 			}
; 1070 : 		else

	jmp	SHORT $LN3@Copy
$LN2@Copy:

; 1071 : 			_Lmost() = _Myhead, _Rmost() = _Myhead;	// empty tree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T243734[ebp], edx
	mov	eax, DWORD PTR $T243734[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+8], eax
$LN3@Copy:

; 1072 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV12@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z$2
__ehfuncinfo$?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T243859 = -56						; size = 4
$T243850 = -52						; size = 4
__Pnode$222873 = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Erase, COMDAT
; _this$ = ecx

; 1166 : 		{	// free entire subtree, recursively

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1167 : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	DWORD PTR __Pnode$222873[ebp], eax
	jmp	SHORT $LN6@Erase
$LN2@Erase:
	mov	ecx, DWORD PTR __Pnode$222873[ebp]
	mov	DWORD PTR __Rootnode$[ebp], ecx
$LN6@Erase:
	mov	edx, DWORD PTR __Pnode$222873[ebp]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN4@Erase

; 1168 : 			{	// free subtrees, then node
; 1169 : 			_Erase(_Right(_Pnode));

	mov	ecx, DWORD PTR __Pnode$222873[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Erase

; 1170 : 			_Pnode = _Left(_Pnode);

	mov	eax, DWORD PTR __Pnode$222873[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$222873[ebp], ecx

; 1171 : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node

	mov	edx, DWORD PTR __Rootnode$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T243859[ebp], edx
	mov	eax, DWORD PTR $T243859[ebp]
	add	eax, 4
	mov	DWORD PTR $T243850[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T243850[ebp]
	call	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	xor	ecx, ecx
	and	ecx, 1
	je	SHORT $LN12@Erase
	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN12@Erase:

; 1172 : 			this->_Alnod.deallocate(_Rootnode, 1);

	mov	eax, DWORD PTR __Rootnode$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1173 : 			}

	jmp	SHORT $LN2@Erase
$LN4@Erase:

; 1174 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z$2:
	mov	ecx, DWORD PTR $T243850[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__ehhandler$?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Erase
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode
; Function compile flags: /Odtp
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T243941 = -4						; size = 4
?_Init@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Init, COMDAT
; _this$ = ecx

; 1177 : 		{	// create head/nil node and make tree empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1178 : 		_Myhead = _Buynode();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1179 : 		_Isnil(_Myhead) = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+33], 1

; 1180 : 		_Root() = _Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1181 : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T243941[ebp], eax
	mov	ecx, DWORD PTR $T243941[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1182 : 		_Mysize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1183 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Init@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Init
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -92						; size = 4
$T244196 = -88						; size = 4
$T244162 = -84						; size = 4
$T243995 = -32						; size = 4
$T243982 = -28						; size = 4
$T243970 = -24						; size = 4
$T243960 = -20						; size = 4
$T243959 = -16						; size = 4
$T243958 = -12						; size = 4
$T243957 = -8						; size = 4
$T243956 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1420 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 1421 : 		erase(begin(), end());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T243970[ebp], ecx
	mov	edx, DWORD PTR $T243970[ebp]
	mov	DWORD PTR $T243957[ebp], edx
	mov	eax, DWORD PTR $T243957[ebp]
	mov	DWORD PTR $T243956[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T243982[ebp], edx
	mov	eax, DWORD PTR $T243982[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T243995[ebp], ecx
	mov	edx, DWORD PTR $T243995[ebp]
	mov	DWORD PTR $T243959[ebp], edx
	mov	eax, DWORD PTR $T243959[ebp]
	mov	DWORD PTR $T243958[ebp], eax
	mov	ecx, DWORD PTR $T243956[ebp]
	push	ecx
	mov	edx, DWORD PTR $T243958[ebp]
	push	edx
	lea	eax, DWORD PTR $T243960[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase

; 1422 : 		this->_Alptr.destroy(&_Left(_Myhead));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T244162[ebp], edx

; 1423 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1424 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1425 : 		this->_Alnod.deallocate(_Myhead, 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T244196[ebp], ecx
	mov	edx, DWORD PTR $T244196[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1426 : 		_Myhead = 0, _Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 1427 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Insert_n
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
;	COMDAT ?insert@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@ABUProductionCostModifiers@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$244251 = -24					; size = 4
$T244234 = -20						; size = 4
$T244215 = -16						; size = 4
$T244202 = -12						; size = 4
$T244199 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@ABUProductionCostModifiers@@@Z PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	test	eax, eax
	jne	SHORT $LN3@insert@4
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@4
$LN3@insert@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T244215[ebp], eax
	mov	ecx, DWORD PTR $T244215[ebp]
	mov	DWORD PTR $T244199[ebp], ecx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T244199[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@4:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T244234[ebp], eax
	mov	ecx, DWORD PTR $T244234[ebp]
	mov	DWORD PTR $T244202[ebp], ecx
	mov	edx, DWORD PTR $T244202[ebp]
	mov	DWORD PTR __Tmp$244251[ebp], edx
	mov	eax, DWORD PTR __Off$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Tmp$244251[ebp]
	mov	DWORD PTR __Tmp$244251[ebp], eax
	mov	ecx, DWORD PTR __Tmp$244251[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@ABUProductionCostModifiers@@@Z ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::insert
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?erase@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -68						; size = 4
$T244398 = -64						; size = 4
$T244380 = -60						; size = 4
$T244379 = -56						; size = 4
$T244363 = -52						; size = 4
__Cat$244387 = -46					; size = 1
$T244385 = -45						; size = 1
$T244337 = -44						; size = 4
$T244336 = -40						; size = 4
$T244335 = -36						; size = 4
$T244318 = -30						; size = 1
$T244317 = -29						; size = 1
$T244316 = -28						; size = 4
$T244315 = -24						; size = 4
__Cat$244324 = -16					; size = 1
$T244322 = -15						; size = 1
$T244321 = -14						; size = 1
$T244320 = -13						; size = 1
__Ptr$222928 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@0@Z PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	$LN1@erase@2

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T244337[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T244336[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T244335[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T244320[ebp], cl
	mov	dl, BYTE PTR __Cat$244324[ebp]
	mov	BYTE PTR $T244321[ebp], dl
	mov	al, BYTE PTR $T244320[ebp]
	mov	BYTE PTR $T244318[ebp], al
	mov	cl, BYTE PTR $T244322[ebp]
	mov	BYTE PTR $T244317[ebp], cl
	mov	edx, DWORD PTR $T244337[ebp]
	mov	DWORD PTR $T244316[ebp], edx
	mov	eax, DWORD PTR $T244335[ebp]
	mov	DWORD PTR $T244315[ebp], eax
	jmp	SHORT $LN28@erase@2
$LN27@erase@2:
	mov	ecx, DWORD PTR $T244316[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T244316[ebp], ecx
	mov	edx, DWORD PTR $T244315[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T244315[ebp], edx
$LN28@erase@2:
	mov	eax, DWORD PTR $T244315[ebp]
	cmp	eax, DWORD PTR $T244336[ebp]
	je	SHORT $LN20@erase@2
	mov	ecx, DWORD PTR $T244315[ebp]
	mov	edx, DWORD PTR $T244316[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	jmp	SHORT $LN27@erase@2
$LN20@erase@2:
	mov	edx, DWORD PTR $T244316[ebp]
	mov	DWORD PTR __Ptr$222928[ebp], edx

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T244398[ebp], ecx
	mov	edx, DWORD PTR $T244398[ebp]
	mov	DWORD PTR $T244380[ebp], edx
	mov	eax, DWORD PTR __Ptr$222928[ebp]
	mov	DWORD PTR $T244379[ebp], eax
	mov	cl, BYTE PTR __Cat$244387[ebp]
	mov	BYTE PTR $T244385[ebp], cl
	mov	edx, DWORD PTR $T244379[ebp]
	mov	DWORD PTR $T244363[ebp], edx
	jmp	SHORT $LN39@erase@2
$LN38@erase@2:
	mov	eax, DWORD PTR $T244363[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T244363[ebp], eax
$LN39@erase@2:
	mov	ecx, DWORD PTR $T244363[ebp]
	cmp	ecx, DWORD PTR $T244380[ebp]
	je	SHORT $LN31@erase@2
	jmp	SHORT $LN38@erase@2
$LN31@erase@2:

; 1049 : 			_Mylast = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$222928[ebp]
	mov	DWORD PTR [edx+8], eax
$LN1@erase@2:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE?AV?$_Vector_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@0@Z ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::erase
_TEXT	ENDS
PUBLIC	??$_Allocate@UProductionCostModifiers@@@std@@YAPAUProductionCostModifiers@@IPAU1@@Z ; std::_Allocate<ProductionCostModifiers>
PUBLIC	?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$244413 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAE_NI@Z PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@2

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@2
	jmp	SHORT $LN3@Buy@2
$LN4@Buy@2:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$244413[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$244413[ebp], 0
	jbe	SHORT $LN11@Buy@2
	mov	eax, DWORD PTR __Count$244413[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@2
$LN11@Buy@2:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@2:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@2

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@2

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@2:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UProductionCostModifiers@@@std@@YAPAUProductionCostModifiers@@IPAU1@@Z ; std::_Allocate<ProductionCostModifiers>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@Buy@2:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@2:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -36						; size = 4
$T244509 = -32						; size = 4
$T244508 = -28						; size = 4
$T244504 = -24						; size = 4
$T244503 = -20						; size = 4
$T244485 = -16						; size = 4
$T244484 = -12						; size = 4
$T244468 = -8						; size = 4
__Cat$244492 = -2					; size = 1
$T244490 = -1						; size = 1
?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T244504[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T244503[ebp], ecx
	mov	edx, DWORD PTR $T244504[ebp]
	mov	DWORD PTR $T244485[ebp], edx
	mov	eax, DWORD PTR $T244503[ebp]
	mov	DWORD PTR $T244484[ebp], eax
	mov	cl, BYTE PTR __Cat$244492[ebp]
	mov	BYTE PTR $T244490[ebp], cl
	mov	edx, DWORD PTR $T244484[ebp]
	mov	DWORD PTR $T244468[ebp], edx
	jmp	SHORT $LN12@Tidy@2
$LN11@Tidy@2:
	mov	eax, DWORD PTR $T244468[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T244468[ebp], eax
$LN12@Tidy@2:
	mov	ecx, DWORD PTR $T244468[ebp]
	cmp	ecx, DWORD PTR $T244485[ebp]
	je	SHORT $LN4@Tidy@2
	jmp	SHORT $LN11@Tidy@2
$LN4@Tidy@2:

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T244509[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T244508[ebp], eax
	mov	ecx, DWORD PTR $T244508[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@2:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?insert@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@V?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@ABW4AnimationPathTypes@@@Z
_TEXT	SEGMENT
tv77 = -32						; size = 4
_this$ = -28						; size = 4
__Tmp$244564 = -24					; size = 4
$T244547 = -20						; size = 4
$T244528 = -16						; size = 4
$T244515 = -12						; size = 4
$T244512 = -8						; size = 4
__Off$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@V?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@ABW4AnimationPathTypes@@@Z PROC ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	test	edx, edx
	jne	SHORT $LN3@insert@5
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@insert@5
$LN3@insert@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T244528[ebp], ecx
	mov	edx, DWORD PTR $T244528[ebp]
	mov	DWORD PTR $T244512[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	sub	eax, DWORD PTR $T244512[ebp]
	sar	eax, 2
	mov	DWORD PTR tv77[ebp], eax
$LN4@insert@5:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR __Off$[ebp], ecx

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T244547[ebp], edx
	mov	eax, DWORD PTR $T244547[ebp]
	mov	DWORD PTR $T244515[ebp], eax
	mov	ecx, DWORD PTR $T244515[ebp]
	mov	DWORD PTR __Tmp$244564[ebp], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR __Tmp$244564[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$244564[ebp], ecx
	mov	edx, DWORD PTR __Tmp$244564[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 879  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@QAE?AV?$_Vector_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@V?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@ABW4AnimationPathTypes@@@Z ENDP ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::insert
_TEXT	ENDS
PUBLIC	??$_Allocate@W4AnimationPathTypes@@@std@@YAPAW4AnimationPathTypes@@IPAW41@@Z ; std::_Allocate<enum AnimationPathTypes>
PUBLIC	?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Buy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$244584 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAE_NI@Z PROC ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@3

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@3
	jmp	SHORT $LN3@Buy@3
$LN4@Buy@3:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$244584[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$244584[ebp], 0
	jbe	SHORT $LN11@Buy@3
	mov	eax, DWORD PTR __Count$244584[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@3
$LN11@Buy@3:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@3:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@3

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@3

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@3:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@W4AnimationPathTypes@@@std@@YAPAW4AnimationPathTypes@@IPAW41@@Z ; std::_Allocate<enum AnimationPathTypes>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@3:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@3:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
PUBLIC	??$unchecked_uninitialized_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@stdext@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
PUBLIC	??$_Allocate@VCvFormationSlotEntry@@@std@@YAPAVCvFormationSlotEntry@@IPAV1@@Z ; std::_Allocate<CvFormationSlotEntry>
PUBLIC	?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$2
__catchsym$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$0
__unwindtable$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z
_TEXT	SEGMENT
tv84 = -448						; size = 4
tv304 = -444						; size = 4
tv290 = -440						; size = 4
tv282 = -436						; size = 4
_this$ = -432						; size = 4
$T245295 = -428						; size = 4
$T245287 = -424						; size = 4
$T245286 = -420						; size = 4
$T245263 = -414						; size = 1
$T245262 = -413						; size = 1
$T245261 = -412						; size = 4
$T245260 = -408						; size = 4
$T245248 = -401						; size = 1
$T245247 = -400						; size = 4
$T245246 = -396						; size = 4
$T245245 = -392						; size = 4
__Cat$245280 = -388					; size = 1
$T245277 = -387						; size = 1
$T245276 = -386						; size = 1
__Cat$245271 = -384					; size = 1
$T245268 = -383						; size = 1
$T245267 = -382						; size = 1
$T245266 = -381						; size = 1
$T245220 = -380						; size = 4
$T245201 = -376						; size = 4
$T245184 = -369						; size = 1
$T245183 = -368						; size = 4
$T245173 = -364						; size = 4
$T245172 = -360						; size = 4
__Cat$245217 = -354					; size = 1
$T245214 = -353						; size = 1
$T245213 = -352						; size = 1
__Cat$245209 = -351					; size = 1
$T245206 = -350						; size = 1
$T245205 = -349						; size = 1
$T245148 = -348						; size = 4
$T245140 = -344						; size = 4
$T245132 = -340						; size = 4
$T245114 = -336						; size = 4
$T245113 = -332						; size = 4
$T245097 = -328						; size = 4
__Cat$245121 = -322					; size = 1
$T245118 = -321						; size = 1
$T245071 = -320						; size = 4
$T245070 = -316						; size = 4
$T245060 = -312						; size = 4
__Cat$245067 = -307					; size = 1
$T245064 = -306						; size = 1
$T245063 = -305						; size = 1
$T245044 = -304						; size = 4
$T245025 = -300						; size = 4
$T245008 = -293						; size = 1
$T245007 = -292						; size = 4
$T244997 = -288						; size = 4
$T244996 = -284						; size = 4
__Cat$245041 = -278					; size = 1
$T245038 = -277						; size = 1
$T245037 = -276						; size = 1
__Cat$245033 = -275					; size = 1
$T245030 = -274						; size = 1
$T245029 = -273						; size = 1
$T244972 = -272						; size = 4
$T244971 = -268						; size = 4
$T244967 = -264						; size = 4
$T244966 = -260						; size = 4
$T244948 = -256						; size = 4
$T244947 = -252						; size = 4
$T244931 = -248						; size = 4
__Cat$244954 = -242					; size = 1
$T244951 = -241						; size = 1
$T244882 = -240						; size = 4
$T244881 = -236						; size = 4
$T244865 = -232						; size = 4
__Cat$244888 = -226					; size = 1
$T244885 = -225						; size = 1
$T244822 = -224						; size = 4
$T244821 = -220						; size = 4
$T244805 = -216						; size = 4
__Cat$244828 = -210					; size = 1
$T244825 = -209						; size = 1
$T244779 = -208						; size = 4
$T244767 = -204						; size = 4
$T244757 = -197						; size = 1
$T244756 = -196						; size = 4
__Cat$244775 = -191					; size = 1
$T244772 = -190						; size = 1
$T244771 = -189						; size = 1
$T244744 = -188						; size = 4
$T244732 = -184						; size = 4
$T244722 = -177						; size = 1
$T244721 = -176						; size = 4
__Cat$244740 = -171					; size = 1
$T244738 = -170						; size = 1
$T244737 = -169						; size = 1
$T244709 = -168						; size = 4
$T244699 = -164						; size = 4
__Cat$244707 = -159					; size = 1
$T244705 = -158						; size = 1
$T244704 = -157						; size = 1
__Count$244669 = -144					; size = 4
__Count$244643 = -72					; size = 4
__Tmp$223072 = -68					; size = 16
__Oldend$223073 = -52					; size = 4
__Tmp$223062 = -48					; size = 16
__Ncopied$223049 = -32					; size = 4
__Newvec$223047 = -28					; size = 4
__Whereoff$223048 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z PROC ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 432				; 000001b0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n
$LN29@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 4
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n:
	mov	ecx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n
	jmp	$LN16@Insert_n
$LN14@Insert_n:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$244643[ebp], 268435455 ; 0fffffffH
	cmp	DWORD PTR __Count$244643[ebp], 0
	jbe	SHORT $LN35@Insert_n
	mov	edx, DWORD PTR __Count$244643[ebp]
	mov	DWORD PTR tv290[ebp], edx
	jmp	SHORT $LN37@Insert_n
$LN35@Insert_n:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	mov	eax, DWORD PTR tv290[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::_Xlen
	jmp	$LN16@Insert_n

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 4
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$244669[ebp], 268435455 ; 0fffffffH
	cmp	DWORD PTR __Count$244669[ebp], 0
	jbe	SHORT $LN48@Insert_n
	mov	ecx, DWORD PTR __Count$244669[ebp]
	mov	DWORD PTR tv304[ebp], ecx
	jmp	SHORT $LN44@Insert_n
$LN48@Insert_n:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv304[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n
$LN17@Insert_n:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@VCvFormationSlotEntry@@@std@@YAPAVCvFormationSlotEntry@@IPAV1@@Z ; std::_Allocate<CvFormationSlotEntry>
	add	esp, 8
	mov	DWORD PTR __Newvec$223047[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	mov	DWORD PTR __Whereoff$223048[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$223049[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$223048[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$223047[ebp]
	mov	DWORD PTR $T244709[ebp], eax
	mov	ecx, DWORD PTR $T244709[ebp]
	mov	DWORD PTR $T244699[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T244704[ebp], dl
	mov	al, BYTE PTR __Cat$244707[ebp]
	mov	BYTE PTR $T244705[ebp], al
	movzx	ecx, BYTE PTR $T244704[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T244705[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR $T244699[ebp]
	push	eax
	call	??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvFormationSlotEntry *,unsigned int,CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	ecx, DWORD PTR __Ncopied$223049[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ncopied$223049[ebp], ecx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T244744[ebp], eax
	mov	ecx, DWORD PTR __Newvec$223047[ebp]
	mov	DWORD PTR $T244732[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T244737[ebp], dl
	mov	al, BYTE PTR __Cat$244740[ebp]
	mov	BYTE PTR $T244738[ebp], al
	mov	cl, BYTE PTR $T244737[ebp]
	mov	BYTE PTR $T244722[ebp], cl
	mov	edx, DWORD PTR $T244732[ebp]
	mov	DWORD PTR $T244721[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244721[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	mov	eax, DWORD PTR $T244744[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@stdext@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	ecx, DWORD PTR __Ncopied$223049[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ncopied$223049[ebp], ecx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T244779[ebp], eax
	mov	ecx, DWORD PTR __Whereoff$223048[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$223047[ebp]
	mov	DWORD PTR $T244767[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T244771[ebp], dl
	mov	al, BYTE PTR __Cat$244775[ebp]
	mov	BYTE PTR $T244772[ebp], al
	mov	cl, BYTE PTR $T244771[ebp]
	mov	BYTE PTR $T244757[ebp], cl
	mov	edx, DWORD PTR $T244767[ebp]
	mov	DWORD PTR $T244756[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T244756[ebp]
	push	ecx
	mov	edx, DWORD PTR $T244779[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@stdext@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n
__catch$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223049[ebp], 1
	jle	SHORT $LN7@Insert_n

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	ecx, DWORD PTR __Whereoff$223048[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$223047[ebp]
	mov	DWORD PTR $T244822[ebp], ecx
	mov	edx, DWORD PTR __Newvec$223047[ebp]
	mov	DWORD PTR $T244821[ebp], edx
	mov	al, BYTE PTR __Cat$244828[ebp]
	mov	BYTE PTR $T244825[ebp], al
	mov	ecx, DWORD PTR $T244821[ebp]
	mov	DWORD PTR $T244805[ebp], ecx
	jmp	SHORT $LN91@Insert_n
$LN90@Insert_n:
	mov	edx, DWORD PTR $T244805[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR $T244805[ebp], edx
$LN91@Insert_n:
	mov	eax, DWORD PTR $T244805[ebp]
	cmp	eax, DWORD PTR $T244822[ebp]
	je	SHORT $LN7@Insert_n
	jmp	SHORT $LN90@Insert_n
$LN7@Insert_n:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223049[ebp], 0
	jle	SHORT $LN6@Insert_n

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR __Whereoff$223048[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __Newvec$223047[ebp]
	add	edx, ecx
	mov	DWORD PTR $T244882[ebp], edx
	mov	eax, DWORD PTR __Whereoff$223048[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$223047[ebp]
	mov	DWORD PTR $T244881[ebp], eax
	mov	cl, BYTE PTR __Cat$244888[ebp]
	mov	BYTE PTR $T244885[ebp], cl
	mov	edx, DWORD PTR $T244881[ebp]
	mov	DWORD PTR $T244865[ebp], edx
	jmp	SHORT $LN106@Insert_n
$LN105@Insert_n:
	mov	eax, DWORD PTR $T244865[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR $T244865[ebp], eax
$LN106@Insert_n:
	mov	ecx, DWORD PTR $T244865[ebp]
	cmp	ecx, DWORD PTR $T244882[ebp]
	je	SHORT $LN6@Insert_n
	jmp	SHORT $LN105@Insert_n
$LN6@Insert_n:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	edx, DWORD PTR __Newvec$223047[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n
	ret	0
$LN19@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 4
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], edx

; 1195 : 			if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN5@Insert_n

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T244967[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T244966[ebp], ecx
	mov	edx, DWORD PTR $T244967[ebp]
	mov	DWORD PTR $T244948[ebp], edx
	mov	eax, DWORD PTR $T244966[ebp]
	mov	DWORD PTR $T244947[ebp], eax
	mov	cl, BYTE PTR __Cat$244954[ebp]
	mov	BYTE PTR $T244951[ebp], cl
	mov	edx, DWORD PTR $T244947[ebp]
	mov	DWORD PTR $T244931[ebp], edx
	jmp	SHORT $LN125@Insert_n
$LN124@Insert_n:
	mov	eax, DWORD PTR $T244931[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR $T244931[ebp], eax
$LN125@Insert_n:
	mov	ecx, DWORD PTR $T244931[ebp]
	cmp	ecx, DWORD PTR $T244948[ebp]
	je	SHORT $LN117@Insert_n
	jmp	SHORT $LN124@Insert_n
$LN117@Insert_n:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 4
	mov	DWORD PTR $T244972[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T244971[ebp], eax
	mov	ecx, DWORD PTR $T244971[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __Newvec$223047[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$223047[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$223047[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n
$LN10@Insert_n:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 4
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223062[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223062[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$223062[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$223062[ebp+12], eax

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T245044[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T245025[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T245029[ebp], cl
	mov	dl, BYTE PTR __Cat$245033[ebp]
	mov	BYTE PTR $T245030[ebp], dl
	mov	al, BYTE PTR $T245029[ebp]
	mov	BYTE PTR $T245008[ebp], al
	mov	ecx, DWORD PTR $T245025[ebp]
	mov	DWORD PTR $T245007[ebp], ecx
	mov	edx, DWORD PTR $T245007[ebp]
	mov	DWORD PTR $T244997[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T244996[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T245037[ebp], cl
	mov	dl, BYTE PTR __Cat$245041[ebp]
	mov	BYTE PTR $T245038[ebp], dl
	movzx	eax, BYTE PTR $T245037[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T245038[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T244997[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245044[ebp]
	push	ecx
	mov	edx, DWORD PTR $T244996[ebp]
	push	edx
	call	??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR __Where$[ebp]
	sar	ecx, 4
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T245071[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T245070[ebp], ecx
	mov	edx, DWORD PTR $T245070[ebp]
	mov	DWORD PTR $T245060[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T245063[ebp], al
	mov	cl, BYTE PTR __Cat$245067[ebp]
	mov	BYTE PTR $T245064[ebp], cl
	movzx	edx, BYTE PTR $T245063[ebp]
	push	edx
	movzx	eax, BYTE PTR $T245064[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$223062[ebp]
	push	edx
	mov	eax, DWORD PTR $T245071[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245060[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvFormationSlotEntry *,unsigned int,CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n
__catch$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T245132[ebp], edx
	mov	ecx, DWORD PTR $T245132[ebp]
	mov	DWORD PTR $T245114[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T245113[ebp], edx
	mov	al, BYTE PTR __Cat$245121[ebp]
	mov	BYTE PTR $T245118[ebp], al
	mov	ecx, DWORD PTR $T245113[ebp]
	mov	DWORD PTR $T245097[ebp], ecx
	jmp	SHORT $LN160@Insert_n
$LN159@Insert_n:
	mov	edx, DWORD PTR $T245097[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR $T245097[ebp], edx
$LN160@Insert_n:
	mov	eax, DWORD PTR $T245097[ebp]
	cmp	eax, DWORD PTR $T245114[ebp]
	je	SHORT $LN152@Insert_n
	jmp	SHORT $LN159@Insert_n
$LN152@Insert_n:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$3
	ret	0
$LN21@Insert_n:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, ecx
	mov	DWORD PTR $T245148[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T245140[ebp], ecx
	jmp	SHORT $LN171@Insert_n
$LN170@Insert_n:
	mov	edx, DWORD PTR $T245140[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR $T245140[ebp], edx
$LN171@Insert_n:
	mov	eax, DWORD PTR $T245140[ebp]
	cmp	eax, DWORD PTR $T245148[ebp]
	je	SHORT $LN167@Insert_n
	mov	ecx, DWORD PTR $T245140[ebp]
	mov	edx, DWORD PTR __Tmp$223062[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223062[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$223062[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR __Tmp$223062[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN170@Insert_n
$LN167@Insert_n:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n
$LN3@Insert_n:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223072[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR __Tmp$223072[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Tmp$223072[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR __Tmp$223072[ebp+12], eax

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Oldend$223073[ebp], edx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T245220[ebp], ecx
	mov	edx, DWORD PTR $T245220[ebp]
	mov	DWORD PTR $T245201[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T245205[ebp], al
	mov	cl, BYTE PTR __Cat$245209[ebp]
	mov	BYTE PTR $T245206[ebp], cl
	mov	dl, BYTE PTR $T245205[ebp]
	mov	BYTE PTR $T245184[ebp], dl
	mov	eax, DWORD PTR $T245201[ebp]
	mov	DWORD PTR $T245183[ebp], eax
	mov	ecx, DWORD PTR $T245183[ebp]
	mov	DWORD PTR $T245173[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR __Oldend$223073[ebp]
	sub	eax, edx
	mov	DWORD PTR $T245172[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T245213[ebp], cl
	mov	dl, BYTE PTR __Cat$245217[ebp]
	mov	BYTE PTR $T245214[ebp], dl
	movzx	eax, BYTE PTR $T245213[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T245214[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T245173[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldend$223073[ebp]
	push	ecx
	mov	edx, DWORD PTR $T245172[ebp]
	push	edx
	call	??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$223073[ebp]
	mov	DWORD PTR $T245287[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T245286[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T245266[ebp], cl
	mov	dl, BYTE PTR __Cat$245271[ebp]
	mov	BYTE PTR $T245267[ebp], dl
	mov	al, BYTE PTR $T245266[ebp]
	mov	BYTE PTR $T245263[ebp], al
	mov	cl, BYTE PTR $T245268[ebp]
	mov	BYTE PTR $T245262[ebp], cl
	mov	edx, DWORD PTR $T245287[ebp]
	mov	DWORD PTR $T245261[ebp], edx
	mov	eax, DWORD PTR $T245286[ebp]
	mov	DWORD PTR $T245260[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T245276[ebp], cl
	mov	dl, BYTE PTR __Cat$245280[ebp]
	mov	BYTE PTR $T245277[ebp], dl
	mov	al, BYTE PTR $T245276[ebp]
	mov	BYTE PTR $T245248[ebp], al
	mov	ecx, DWORD PTR $T245261[ebp]
	mov	DWORD PTR $T245247[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR __Oldend$223073[ebp]
	sub	eax, edx
	mov	DWORD PTR $T245246[ebp], eax
	mov	ecx, DWORD PTR $T245260[ebp]
	mov	DWORD PTR $T245245[ebp], ecx
$LN197@Insert_n:
	mov	edx, DWORD PTR $T245245[ebp]
	cmp	edx, DWORD PTR $T245246[ebp]
	je	SHORT $LN186@Insert_n
	mov	eax, DWORD PTR $T245246[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR $T245246[ebp], eax
	mov	ecx, DWORD PTR $T245247[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR $T245247[ebp], ecx
	mov	edx, DWORD PTR $T245246[ebp]
	mov	eax, DWORD PTR $T245247[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	jmp	SHORT $LN197@Insert_n
$LN186@Insert_n:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T245295[ebp], eax
	jmp	SHORT $LN204@Insert_n
$LN203@Insert_n:
	mov	ecx, DWORD PTR $T245295[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR $T245295[ebp], ecx
$LN204@Insert_n:
	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T245295[ebp], edx
	je	SHORT $LN16@Insert_n
	mov	eax, DWORD PTR $T245295[ebp]
	mov	ecx, DWORD PTR __Tmp$223072[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223072[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$223072[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR __Tmp$223072[ebp+12]
	mov	DWORD PTR [eax+12], edx
	jmp	SHORT $LN203@Insert_n
$LN16@Insert_n:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-452]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@2@IABVCvFormationSlotEntry@@@Z ENDP ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::_Insert_n
PUBLIC	??$_Unchecked_move_backward@PAVCvString@@PAV1@@stdext@@YAPAVCvString@@PAV1@00@Z ; stdext::_Unchecked_move_backward<CvString *,CvString *>
PUBLIC	??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvString *,CvString *,std::allocator<CvString> >
PUBLIC	??$unchecked_uninitialized_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@stdext@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvString *,CvString *,std::allocator<CvString> >
PUBLIC	__$ArrayPad$
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$16 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$2
__catchsym$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$15 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$0
__ehfuncinfo$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$15
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$16
__unwindtable$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$4
	DD	02H
	DD	00H
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$5
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z
_TEXT	SEGMENT
tv84 = -460						; size = 4
tv312 = -456						; size = 4
tv298 = -452						; size = 4
tv290 = -448						; size = 4
_this$ = -444						; size = 4
$T246112 = -440						; size = 4
$T246049 = -400						; size = 4
$T246030 = -396						; size = 4
$T246013 = -389						; size = 1
$T246012 = -388						; size = 4
$T246002 = -384						; size = 4
$T246001 = -380						; size = 4
__Cat$246046 = -374					; size = 1
$T246043 = -373						; size = 1
$T246042 = -372						; size = 1
__Cat$246038 = -371					; size = 1
$T246035 = -370						; size = 1
$T246034 = -369						; size = 1
$T245969 = -368						; size = 4
$T245959 = -364						; size = 4
$T245946 = -360						; size = 4
$T245923 = -356						; size = 4
$T245922 = -352						; size = 4
$T245901 = -348						; size = 4
$T245900 = -344						; size = 4
__Cat$245930 = -338					; size = 1
$T245927 = -337						; size = 1
$T245849 = -336						; size = 4
$T245848 = -332						; size = 4
$T245838 = -328						; size = 4
__Cat$245845 = -323					; size = 1
$T245842 = -322						; size = 1
$T245841 = -321						; size = 1
$T245822 = -320						; size = 4
$T245810 = -316						; size = 4
$T245800 = -309						; size = 1
$T245799 = -308						; size = 4
__Cat$245817 = -303					; size = 1
$T245814 = -302						; size = 1
$T245813 = -301						; size = 1
$T245783 = -300						; size = 4
$T245782 = -296						; size = 4
$T245778 = -292						; size = 4
$T245777 = -288						; size = 4
$T245754 = -284						; size = 4
$T245753 = -280						; size = 4
$T245732 = -276						; size = 4
$T245731 = -272						; size = 4
__Cat$245761 = -266					; size = 1
$T245759 = -265						; size = 1
$T245652 = -264						; size = 4
$T245651 = -260						; size = 4
$T245630 = -256						; size = 4
$T245629 = -252						; size = 4
__Cat$245659 = -246					; size = 1
$T245657 = -245						; size = 1
$T245556 = -244						; size = 4
$T245555 = -240						; size = 4
$T245534 = -236						; size = 4
$T245533 = -232						; size = 4
__Cat$245562 = -226					; size = 1
$T245560 = -225						; size = 1
$T245482 = -224						; size = 4
$T245470 = -220						; size = 4
$T245460 = -213						; size = 1
$T245459 = -212						; size = 4
__Cat$245478 = -207					; size = 1
$T245476 = -206						; size = 1
$T245475 = -205						; size = 1
$T245447 = -204						; size = 4
$T245435 = -200						; size = 4
$T245425 = -193						; size = 1
$T245424 = -192						; size = 4
__Cat$245444 = -187					; size = 1
$T245440 = -186						; size = 1
$T245439 = -185						; size = 1
$T245412 = -184						; size = 4
$T245402 = -180						; size = 4
__Cat$245409 = -175					; size = 1
$T245407 = -174						; size = 1
$T245406 = -173						; size = 1
__Count$245373 = -172					; size = 4
__Count$245347 = -100					; size = 4
__Tmp$223129 = -96					; size = 28
__Oldend$223130 = -68					; size = 4
__Tmp$223119 = -64					; size = 28
__$ArrayPad$ = -36					; size = 4
__Ncopied$223106 = -32					; size = 4
__Newvec$223104 = -28					; size = 4
__Whereoff$223105 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z PROC ; std::vector<CvString,std::allocator<CvString> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 444				; 000001bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN31@Insert_n@2
	mov	DWORD PTR tv290[ebp], 0
	jmp	SHORT $LN29@Insert_n@2
$LN31@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR tv290[ebp], eax
$LN29@Insert_n@2:
	mov	edx, DWORD PTR tv290[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@2
	jmp	$LN16@Insert_n@2
$LN14@Insert_n@2:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$245347[ebp], 153391689 ; 09249249H
	cmp	DWORD PTR __Count$245347[ebp], 0
	jbe	SHORT $LN37@Insert_n@2
	mov	eax, DWORD PTR __Count$245347[ebp]
	mov	DWORD PTR tv298[ebp], eax
	jmp	SHORT $LN39@Insert_n@2
$LN37@Insert_n@2:
	mov	DWORD PTR tv298[ebp], 1
$LN39@Insert_n@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	edx, DWORD PTR tv298[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN44@Insert_n@2

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ ; std::vector<CvString,std::allocator<CvString> >::_Xlen
	jmp	$LN16@Insert_n@2

; 1167 : 		else if (_Capacity < size() + _Count)

$LN44@Insert_n@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@2

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$245373[ebp], 153391689 ; 09249249H
	cmp	DWORD PTR __Count$245373[ebp], 0
	jbe	SHORT $LN50@Insert_n@2
	mov	edx, DWORD PTR __Count$245373[ebp]
	mov	DWORD PTR tv312[ebp], edx
	jmp	SHORT $LN46@Insert_n@2
$LN50@Insert_n@2:
	mov	DWORD PTR tv312[ebp], 1
$LN46@Insert_n@2:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv312[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@2
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@2
$LN17@Insert_n@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@2:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN56@Insert_n@2

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN56@Insert_n@2:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@VCvString@@@std@@YAPAVCvString@@IPAV1@@Z ; std::_Allocate<CvString>
	add	esp, 8
	mov	DWORD PTR __Newvec$223104[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$223105[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$223106[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$223105[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR __Newvec$223104[ebp]
	mov	DWORD PTR $T245412[ebp], edx
	mov	eax, DWORD PTR $T245412[ebp]
	mov	DWORD PTR $T245402[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T245406[ebp], cl
	mov	dl, BYTE PTR __Cat$245409[ebp]
	mov	BYTE PTR $T245407[ebp], dl
	movzx	eax, BYTE PTR $T245406[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T245407[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T245402[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvString *,unsigned int,CvString,std::allocator<CvString> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$223106[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$223106[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T245447[ebp], edx
	mov	eax, DWORD PTR __Newvec$223104[ebp]
	mov	DWORD PTR $T245435[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T245439[ebp], cl
	mov	dl, BYTE PTR __Cat$245444[ebp]
	mov	BYTE PTR $T245440[ebp], dl
	mov	al, BYTE PTR $T245439[ebp]
	mov	BYTE PTR $T245425[ebp], al
	mov	ecx, DWORD PTR $T245435[ebp]
	mov	DWORD PTR $T245424[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T245424[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T245447[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@stdext@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvString *,CvString *,std::allocator<CvString> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$223106[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$223106[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T245482[ebp], edx
	mov	eax, DWORD PTR __Whereoff$223105[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR __Newvec$223104[ebp]
	mov	DWORD PTR $T245470[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T245475[ebp], cl
	mov	dl, BYTE PTR __Cat$245478[ebp]
	mov	BYTE PTR $T245476[ebp], dl
	mov	al, BYTE PTR $T245475[ebp]
	mov	BYTE PTR $T245460[ebp], al
	mov	ecx, DWORD PTR $T245470[ebp]
	mov	DWORD PTR $T245459[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T245459[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245482[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@stdext@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvString *,CvString *,std::allocator<CvString> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@2
__catch$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223106[ebp], 1
	jle	SHORT $LN7@Insert_n@2

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$223105[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR __Newvec$223104[ebp]
	mov	DWORD PTR $T245556[ebp], eax
	mov	ecx, DWORD PTR __Newvec$223104[ebp]
	mov	DWORD PTR $T245555[ebp], ecx
	mov	dl, BYTE PTR __Cat$245562[ebp]
	mov	BYTE PTR $T245560[ebp], dl
	mov	eax, DWORD PTR $T245556[ebp]
	mov	DWORD PTR $T245534[ebp], eax
	mov	ecx, DWORD PTR $T245555[ebp]
	mov	DWORD PTR $T245533[ebp], ecx
	jmp	SHORT $LN88@Insert_n@2
$LN87@Insert_n@2:
	mov	edx, DWORD PTR $T245533[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR $T245533[ebp], edx
$LN88@Insert_n@2:
	mov	eax, DWORD PTR $T245533[ebp]
	cmp	eax, DWORD PTR $T245534[ebp]
	je	SHORT $LN7@Insert_n@2
	mov	ecx, DWORD PTR $T245533[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	ecx, ecx
	and	ecx, 1
	je	SHORT $LN91@Insert_n@2
	mov	edx, DWORD PTR $T245533[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN91@Insert_n@2:
	jmp	SHORT $LN87@Insert_n@2
$LN7@Insert_n@2:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223106[ebp], 0
	jle	$LN6@Insert_n@2

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR __Whereoff$223105[ebp]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR __Newvec$223104[ebp]
	add	ecx, eax
	mov	DWORD PTR $T245652[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$223105[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR __Newvec$223104[ebp]
	mov	DWORD PTR $T245651[ebp], edx
	mov	al, BYTE PTR __Cat$245659[ebp]
	mov	BYTE PTR $T245657[ebp], al
	mov	ecx, DWORD PTR $T245652[ebp]
	mov	DWORD PTR $T245630[ebp], ecx
	mov	edx, DWORD PTR $T245651[ebp]
	mov	DWORD PTR $T245629[ebp], edx
	jmp	SHORT $LN109@Insert_n@2
$LN108@Insert_n@2:
	mov	eax, DWORD PTR $T245629[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR $T245629[ebp], eax
$LN109@Insert_n@2:
	mov	ecx, DWORD PTR $T245629[ebp]
	cmp	ecx, DWORD PTR $T245630[ebp]
	je	SHORT $LN6@Insert_n@2
	mov	ecx, DWORD PTR $T245629[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN112@Insert_n@2
	mov	eax, DWORD PTR $T245629[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN112@Insert_n@2:
	jmp	SHORT $LN108@Insert_n@2
$LN6@Insert_n@2:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$223104[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN124@Insert_n@2
	ret	0
$LN19@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN124@Insert_n@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@2

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T245778[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T245777[ebp], eax
	mov	ecx, DWORD PTR $T245778[ebp]
	mov	DWORD PTR $T245754[ebp], ecx
	mov	edx, DWORD PTR $T245777[ebp]
	mov	DWORD PTR $T245753[ebp], edx
	mov	al, BYTE PTR __Cat$245761[ebp]
	mov	BYTE PTR $T245759[ebp], al
	mov	ecx, DWORD PTR $T245754[ebp]
	mov	DWORD PTR $T245732[ebp], ecx
	mov	edx, DWORD PTR $T245753[ebp]
	mov	DWORD PTR $T245731[ebp], edx
	jmp	SHORT $LN134@Insert_n@2
$LN133@Insert_n@2:
	mov	eax, DWORD PTR $T245731[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR $T245731[ebp], eax
$LN134@Insert_n@2:
	mov	ecx, DWORD PTR $T245731[ebp]
	cmp	ecx, DWORD PTR $T245732[ebp]
	je	SHORT $LN126@Insert_n@2
	mov	ecx, DWORD PTR $T245731[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN137@Insert_n@2
	mov	eax, DWORD PTR $T245731[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN137@Insert_n@2:
	jmp	SHORT $LN133@Insert_n@2
$LN126@Insert_n@2:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	DWORD PTR $T245783[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T245782[ebp], eax
	mov	ecx, DWORD PTR $T245782[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@2:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR __Newvec$223104[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 28					; 0000001cH
	add	ecx, DWORD PTR __Newvec$223104[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$223104[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@2
$LN10@Insert_n@2:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@2

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$223119[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T245822[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T245810[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T245813[ebp], al
	mov	cl, BYTE PTR __Cat$245817[ebp]
	mov	BYTE PTR $T245814[ebp], cl
	mov	dl, BYTE PTR $T245813[ebp]
	mov	BYTE PTR $T245800[ebp], dl
	mov	eax, DWORD PTR $T245810[ebp]
	mov	DWORD PTR $T245799[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T245799[ebp]
	push	edx
	mov	eax, DWORD PTR $T245822[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@stdext@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@std@@@Z ; stdext::unchecked_uninitialized_copy<CvString *,CvString *,std::allocator<CvString> >
	add	esp, 16					; 00000010H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T245849[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T245848[ebp], ecx
	mov	edx, DWORD PTR $T245848[ebp]
	mov	DWORD PTR $T245838[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T245841[ebp], al
	mov	cl, BYTE PTR __Cat$245845[ebp]
	mov	BYTE PTR $T245842[ebp], cl
	movzx	edx, BYTE PTR $T245841[ebp]
	push	edx
	movzx	eax, BYTE PTR $T245842[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$223119[ebp]
	push	edx
	mov	eax, DWORD PTR $T245849[ebp]
	push	eax
	mov	ecx, DWORD PTR $T245838[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<CvString *,unsigned int,CvString,std::allocator<CvString> >
	add	esp, 24					; 00000018H
	jmp	$LN21@Insert_n@2
__catch$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T245946[ebp], edx
	mov	ecx, DWORD PTR $T245946[ebp]
	mov	DWORD PTR $T245923[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 28					; 0000001cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T245922[ebp], edx
	mov	al, BYTE PTR __Cat$245930[ebp]
	mov	BYTE PTR $T245927[ebp], al
	mov	ecx, DWORD PTR $T245923[ebp]
	mov	DWORD PTR $T245901[ebp], ecx
	mov	edx, DWORD PTR $T245922[ebp]
	mov	DWORD PTR $T245900[ebp], edx
	jmp	SHORT $LN174@Insert_n@2
$LN173@Insert_n@2:
	mov	eax, DWORD PTR $T245900[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR $T245900[ebp], eax
$LN174@Insert_n@2:
	mov	ecx, DWORD PTR $T245900[ebp]
	cmp	ecx, DWORD PTR $T245901[ebp]
	je	SHORT $LN166@Insert_n@2
	mov	ecx, DWORD PTR $T245900[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN177@Insert_n@2
	mov	eax, DWORD PTR $T245900[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN177@Insert_n@2:
	jmp	SHORT $LN173@Insert_n@2
$LN166@Insert_n@2:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], 2
	mov	eax, __tryend$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$3
	ret	0
$LN21@Insert_n@2:
	mov	DWORD PTR __$EHRec$[ebp+12], 2
__tryend$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, ecx
	mov	DWORD PTR $T245969[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T245959[ebp], ecx
	jmp	SHORT $LN191@Insert_n@2
$LN190@Insert_n@2:
	mov	edx, DWORD PTR $T245959[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR $T245959[ebp], edx
$LN191@Insert_n@2:
	mov	eax, DWORD PTR $T245959[ebp]
	cmp	eax, DWORD PTR $T245969[ebp]
	je	SHORT $LN187@Insert_n@2
	lea	ecx, DWORD PTR __Tmp$223119[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T245959[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	jmp	SHORT $LN190@Insert_n@2
$LN187@Insert_n@2:

; 1232 : 			}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Tmp$223119[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 1233 : 		else

	jmp	$LN16@Insert_n@2
$LN3@Insert_n@2:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$223129[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+12], 5

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$223130[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T246049[ebp], eax
	mov	ecx, DWORD PTR $T246049[ebp]
	mov	DWORD PTR $T246030[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T246034[ebp], dl
	mov	al, BYTE PTR __Cat$246038[ebp]
	mov	BYTE PTR $T246035[ebp], al
	mov	cl, BYTE PTR $T246034[ebp]
	mov	BYTE PTR $T246013[ebp], cl
	mov	edx, DWORD PTR $T246030[ebp]
	mov	DWORD PTR $T246012[ebp], edx
	mov	eax, DWORD PTR $T246012[ebp]
	mov	DWORD PTR $T246002[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR __Oldend$223130[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T246001[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T246042[ebp], al
	mov	cl, BYTE PTR __Cat$246046[ebp]
	mov	BYTE PTR $T246043[ebp], cl
	movzx	edx, BYTE PTR $T246042[ebp]
	push	edx
	movzx	eax, BYTE PTR $T246043[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T246002[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$223130[ebp]
	push	eax
	mov	ecx, DWORD PTR $T246001[ebp]
	push	ecx
	call	??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvString *,CvString *,std::allocator<CvString> >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$223130[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR __Oldend$223130[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Unchecked_move_backward@PAVCvString@@PAV1@@stdext@@YAPAVCvString@@PAV1@00@Z ; stdext::_Unchecked_move_backward<CvString *,CvString *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T246112[ebp], ecx
	jmp	SHORT $LN234@Insert_n@2
$LN233@Insert_n@2:
	mov	edx, DWORD PTR $T246112[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR $T246112[ebp], edx
$LN234@Insert_n@2:
	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 28					; 0000001cH
	add	eax, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T246112[ebp], eax
	je	SHORT $LN230@Insert_n@2
	lea	ecx, DWORD PTR __Tmp$223129[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T246112[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	jmp	SHORT $LN233@Insert_n@2
$LN230@Insert_n@2:

; 1249 : 			}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Tmp$223129[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN16@Insert_n@2:

; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$4:
	lea	ecx, DWORD PTR __Tmp$223119[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__unwindfunclet$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z$5:
	lea	ecx, DWORD PTR __Tmp$223129[ebp]
	jmp	??1CvString@@QAE@XZ			; CvString::~CvString
__ehhandler$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-464]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@IAEXV?$_Vector_const_iterator@VCvString@@V?$allocator@VCvString@@@std@@@2@IABVCvString@@@Z ENDP ; std::vector<CvString,std::allocator<CvString> >::_Insert_n
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
EXTRN	__imp_??0exception@std@@QAE@XZ:PROC
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T246140 = -80						; size = 28
$T246139 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ PROC ; std::vector<CvString,std::allocator<CvString> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T246140[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T246139[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T246139[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T246140[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246139[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T246139[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T246139[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T246140[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T246140[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T246139[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@VCvString@@V?$allocator@VCvString@@@std@@@std@@KAXXZ ENDP ; std::vector<CvString,std::allocator<CvString> >::_Xlen
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?what@logic_error@std@@UBEPBDXZ PROC			; std::logic_error::what, COMDAT
; _this$ = ecx

; 34   : 		{	// return pointer to message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 		return (_Str.c_str());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ

; 36   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@20
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@20:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@

; 110  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@21
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@21:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv90 = -156						; size = 4
_this$ = -152						; size = 4
$T246325 = -148						; size = 4
$T246305 = -144						; size = 4
$T246290 = -140						; size = 4
$T246273 = -136						; size = 4
$T246260 = -132						; size = 4
$T246246 = -128						; size = 4
$T246202 = -45						; size = 1
$T246201 = -44						; size = 4
$T246200 = -37						; size = 1
$T246199 = -36						; size = 4
$T246198 = -29						; size = 1
$T246197 = -28						; size = 4
$T246196 = -24						; size = 4
$T246195 = -17						; size = 1
__Where$223211 = -16					; size = 4
__Trynode$ = -12					; size = 4
__Wherenode$ = -8					; size = 4
__Addleft$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::insert, COMDAT
; _this$ = ecx

; 630  : 		{	// try to insert node with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	DWORD PTR _this$[ebp], ecx

; 631  : 		_Nodeptr _Trynode = _Root();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Trynode$[ebp], edx

; 632  : 		_Nodeptr _Wherenode = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 633  : 		bool _Addleft = true;	// add to left of head if tree empty

	mov	BYTE PTR __Addleft$[ebp], 1

; 634  : 		while (!_Isnil(_Trynode))

$LN19@insert@6:
	mov	edx, DWORD PTR __Trynode$[ebp]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN9@insert@6

; 635  : 			{	// look for leaf to insert before (_Addleft) or after
; 636  : 			_Wherenode = _Trynode;

	mov	ecx, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 637  : 			_Addleft = _DEBUG_LT_PRED(this->comp,

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [edx]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+12]
	setl	dl
	mov	BYTE PTR __Addleft$[ebp], dl

; 638  : 				this->_Kfn(_Val), _Key(_Trynode));
; 639  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

	movzx	eax, BYTE PTR __Addleft$[ebp]
	test	eax, eax
	je	SHORT $LN33@insert@6
	mov	ecx, DWORD PTR __Trynode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN14@insert@6
$LN33@insert@6:
	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv90[ebp], ecx
$LN14@insert@6:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR __Trynode$[ebp], edx

; 640  : 			}

	jmp	SHORT $LN19@insert@6
$LN9@insert@6:

; 641  : 
; 642  : 		if (this->_Multi)

	xor	eax, eax
	je	SHORT $LN8@insert@6

; 643  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	BYTE PTR $T246195[ebp], 1
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246196[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	DWORD PTR $T246246[ebp], eax
	mov	edx, DWORD PTR $T246246[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T246195[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@insert@6

; 644  : 		else

	jmp	$LN11@insert@6
$LN8@insert@6:

; 645  : 			{	// insert only if unique
; 646  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR __Where$223211[ebp], ecx

; 647  : 			if (!_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	jne	SHORT $LN6@insert@6
	jmp	$LN79@insert@6
$LN6@insert@6:

; 648  : 				;	// need to test if insert after is okay
; 649  : 			else if (_Where == begin())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T246260[ebp], ecx
	mov	edx, DWORD PTR $T246260[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T246273[ebp], eax
	mov	ecx, DWORD PTR $T246273[ebp]
	mov	DWORD PTR $T246197[ebp], ecx
	mov	edx, DWORD PTR __Where$223211[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T246197[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@insert@6

; 650  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

	mov	BYTE PTR $T246198[ebp], 1
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR $T246199[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	DWORD PTR $T246290[ebp], eax
	mov	edx, DWORD PTR $T246290[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T246198[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN11@insert@6

; 651  : 			else

	jmp	SHORT $LN79@insert@6
$LN4@insert@6:

; 652  : 				--_Where;	// need to test if insert before is okay

	lea	ecx, DWORD PTR __Where$223211[ebp]
	call	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Dec

; 653  : 
; 654  : 			if (_DEBUG_LT_PRED(this->comp,

$LN79@insert@6:
	mov	ecx, DWORD PTR __Where$223211[ebp]
	mov	DWORD PTR $T246305[ebp], ecx
	mov	edx, DWORD PTR $T246305[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax]
	setl	dl
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN2@insert@6

; 655  : 				_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 656  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

	mov	BYTE PTR $T246200[ebp], 1
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Addleft$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246201[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
	mov	DWORD PTR $T246325[ebp], eax
	mov	edx, DWORD PTR $T246325[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	al, BYTE PTR $T246200[ebp]
	mov	BYTE PTR [edx+4], al
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN11@insert@6

; 657  : 			else

	jmp	SHORT $LN11@insert@6
$LN2@insert@6:

; 658  : 				return (_Pairib(_Where, false));

	mov	BYTE PTR $T246202[ebp], 0
	mov	ecx, DWORD PTR __Where$223211[ebp]
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR $T246202[ebp]
	mov	BYTE PTR [eax+4], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN11@insert@6:

; 659  : 			}
; 660  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::insert
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase
; Function compile flags: /Odtp
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T246630 = -80						; size = 4
$T246625 = -76						; size = 4
__Tmp$246609 = -56					; size = 4
$T246540 = -52						; size = 4
$T246527 = -48						; size = 4
$T246376 = -28						; size = 4
$T246353 = -24						; size = 4
$T246340 = -20						; size = 4
$T246334 = -16						; size = 4
$T246333 = -12						; size = 4
$T246332 = -8						; size = 4
$T246331 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 934  : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 935  : 		if (_First == begin() && _Last == end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T246340[ebp], ecx
	mov	edx, DWORD PTR $T246340[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T246353[ebp], eax
	mov	ecx, DWORD PTR $T246353[ebp]
	mov	DWORD PTR $T246331[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T246331[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN89@erase@3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T246376[ebp], eax
	mov	ecx, DWORD PTR $T246376[ebp]
	mov	DWORD PTR $T246332[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR $T246332[ebp]
	sete	al
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN89@erase@3

; 936  : 			{	// erase all
; 937  : 			clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::clear

; 938  : 			return (begin());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T246527[ebp], eax
	mov	ecx, DWORD PTR $T246527[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T246540[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T246540[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN5@erase@3

; 939  : 			}
; 940  : 		else

	jmp	SHORT $LN5@erase@3

; 941  : 			{	// partial erase, one at a time
; 942  : 			while (_First != _Last)

$LN89@erase@3:
	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@3

; 943  : 				erase(_First++);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Tmp$246609[ebp], eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Inc
	mov	ecx, DWORD PTR __Tmp$246609[ebp]
	mov	DWORD PTR $T246333[ebp], ecx
	mov	edx, DWORD PTR $T246333[ebp]
	push	edx
	lea	eax, DWORD PTR $T246334[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase
	jmp	SHORT $LN89@erase@3
$LN1@erase@3:

; 944  : 			return (_Make_iter(_First));

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T246630[ebp], ecx
	mov	edx, DWORD PTR $T246630[ebp]
	mov	DWORD PTR $T246625[ebp], edx
	mov	eax, DWORD PTR $T246625[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN5@erase@3:

; 945  : 			}
; 946  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z$0
__unwindtable$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z$6
__ehfuncinfo$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z
_TEXT	SEGMENT
tv167 = -80						; size = 4
tv153 = -76						; size = 4
_this$ = -72						; size = 4
__Pnode$223246 = -24					; size = 4
__Newroot$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Rootnode$ = 8						; size = 4
__Wherenode$ = 12					; size = 4
?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy, COMDAT
; _this$ = ecx

; 1075 : 		{	// copy entire subtree, recursively

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1076 : 		_Nodeptr _Newroot = _Myhead;	// point at nil node

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Newroot$[ebp], ecx

; 1077 : 
; 1078 : 		if (!_Isnil(_Rootnode))

	mov	edx, DWORD PTR __Rootnode$[ebp]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	$LN3@Copy@2

; 1079 : 			{	// copy a node, then any subtrees
; 1080 : 			_Nodeptr _Pnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1081 : 				_Myval(_Rootnode), _Color(_Rootnode));

	mov	ecx, DWORD PTR __Rootnode$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR __Rootnode$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode
	mov	DWORD PTR __Pnode$223246[ebp], eax

; 1082 : 			if (_Isnil(_Newroot))

	mov	eax, DWORD PTR __Newroot$[ebp]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	je	SHORT $LN2@Copy@2

; 1083 : 				_Newroot = _Pnode;	// memorize new root

	mov	edx, DWORD PTR __Pnode$223246[ebp]
	mov	DWORD PTR __Newroot$[ebp], edx
$LN2@Copy@2:

; 1084 : 
; 1085 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1086 : 			_Left(_Pnode) = _Copy(_Left(_Rootnode), _Pnode);

	mov	eax, DWORD PTR __Pnode$223246[ebp]
	push	eax
	mov	ecx, DWORD PTR __Rootnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
	mov	DWORD PTR tv153[ebp], eax
	mov	eax, DWORD PTR __Pnode$223246[ebp]
	mov	ecx, DWORD PTR tv153[ebp]
	mov	DWORD PTR [eax], ecx

; 1087 : 			_Right(_Pnode) = _Copy(_Right(_Rootnode), _Pnode);

	mov	edx, DWORD PTR __Pnode$223246[ebp]
	push	edx
	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
	mov	DWORD PTR tv167[ebp], eax
	mov	edx, DWORD PTR __Pnode$223246[ebp]
	mov	eax, DWORD PTR tv167[ebp]
	mov	DWORD PTR [edx+8], eax
	jmp	SHORT $LN6@Copy@2
__catch$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z$0:

; 1088 : 			_CATCH_ALL
; 1089 : 			_Erase(_Newroot);	// subtree copy failed, bail out

	mov	ecx, DWORD PTR __Newroot$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Erase

; 1090 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1091 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN3@Copy@2
	ret	0
$LN6@Copy@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN3@Copy@2:

; 1092 : 			}
; 1093 : 
; 1094 : 		return (_Newroot);	// return newly constructed tree

	mov	eax, DWORD PTR __Newroot$[ebp]
$LN5@Copy@2:

; 1095 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Copy
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Rrotate
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lrotate
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z$0
__ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv277 = -196						; size = 4
_this$ = -192						; size = 4
$T247376 = -188						; size = 4
$T247288 = -172						; size = 4
$T247203 = -160						; size = 4
$T247187 = -156						; size = 4
$T247168 = -152						; size = 4
$T247164 = -148						; size = 4
$T247079 = -136						; size = 4
$T246978 = -120						; size = 4
$T246956 = -116						; size = 4
$T246949 = -112						; size = 4
$T246945 = -108						; size = 4
$T246906 = -104						; size = 4
$T246897 = -100						; size = 4
$T246877 = -96						; size = 4
__Count$246859 = -92					; size = 4
$T246843 = -88						; size = 28
$T246842 = -60						; size = 40
__Pnode$223263 = -20					; size = 4
__Newnode$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert, COMDAT
; _this$ = ecx

; 1187 : 		{	// add node with value next to _Wherenode, to left if _Addnode

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 184				; 000000b8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1188 : 		if (max_size() - 1 <= _Mysize)

	mov	DWORD PTR __Count$246859[ebp], 214748364 ; 0cccccccH
	cmp	DWORD PTR __Count$246859[ebp], 0
	jbe	SHORT $LN25@Insert
	mov	eax, DWORD PTR __Count$246859[ebp]
	mov	DWORD PTR tv277[ebp], eax
	jmp	SHORT $LN21@Insert
$LN25@Insert:
	mov	DWORD PTR tv277[ebp], 1
$LN21@Insert:
	mov	ecx, DWORD PTR tv277[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+8]
	ja	SHORT $LN17@Insert

; 1189 : 			_THROW(length_error, "map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T246843[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T246843[ebp]
	push	eax
	lea	ecx, DWORD PTR $T246842[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR $T246842[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T246842[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T246843[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN17@Insert:

; 1190 : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 1191 : 			_Val, _Red);

	push	0
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode
	mov	DWORD PTR __Newnode$[ebp], eax

; 1192 : 
; 1193 : 		++_Mysize;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1194 : 		if (_Wherenode == _Myhead)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN16@Insert

; 1195 : 			{	// first node in tree, just set head values
; 1196 : 			_Root() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1197 : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T246877[ebp], edx
	mov	eax, DWORD PTR $T246877[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN15@Insert
$LN16@Insert:

; 1198 : 			}
; 1199 : 		else if (_Addleft)

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	je	SHORT $LN52@Insert

; 1200 : 			{	// add to left of _Wherenode
; 1201 : 			_Left(_Wherenode) = _Newnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1202 : 			if (_Wherenode == _Lmost())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T246897[ebp], eax
	mov	ecx, DWORD PTR $T246897[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN13@Insert

; 1203 : 				_Lmost() = _Newnode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T246906[ebp], ecx
	mov	edx, DWORD PTR $T246906[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx], eax
$LN13@Insert:

; 1204 : 			}
; 1205 : 		else

	jmp	SHORT $LN15@Insert

; 1206 : 			{	// add to right of _Wherenode
; 1207 : 			_Right(_Wherenode) = _Newnode;

$LN52@Insert:
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1208 : 			if (_Wherenode == _Rmost())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN15@Insert

; 1209 : 				_Rmost() = _Newnode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN15@Insert:

; 1210 : 			}
; 1211 : 
; 1212 : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$223263[ebp], eax
$LN64@Insert:
	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+32]
	test	eax, eax
	jne	$LN360@Insert

; 1213 : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T246945[ebp], edx
	mov	eax, DWORD PTR $T246945[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T246949[ebp], ecx
	mov	edx, DWORD PTR __Pnode$223263[ebp]
	mov	eax, DWORD PTR $T246949[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN216@Insert

; 1214 : 				{	// fixup red-red in left subtree
; 1215 : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$223263[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	DWORD PTR $T246956[ebp], eax
	mov	ecx, DWORD PTR $T246956[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1216 : 				if (_Color(_Wherenode) == _Red)

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	jne	SHORT $LN100@Insert

; 1217 : 					{	// parent has two red children, blacken both
; 1218 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	eax, DWORD PTR __Pnode$223263[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+32], 1

; 1219 : 					_Color(_Wherenode) = _Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [edx+32], 1

; 1220 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$223263[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T246978[ebp], ecx
	mov	edx, DWORD PTR $T246978[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+32], 0

; 1221 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$223263[ebp], eax

; 1222 : 					}
; 1223 : 				else

	jmp	SHORT $LN6@Insert

; 1224 : 					{	// parent has red and black children
; 1225 : 					if (_Pnode == _Right(_Parent(_Pnode)))

$LN100@Insert:
	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pnode$223263[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN155@Insert

; 1226 : 						{	// rotate right child to left
; 1227 : 						_Pnode = _Parent(_Pnode);

	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$223263[ebp], edx

; 1228 : 						_Lrotate(_Pnode);

	mov	eax, DWORD PTR __Pnode$223263[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lrotate

; 1229 : 						}
; 1230 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

$LN155@Insert:
	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+32], 1

; 1231 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$223263[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T247079[ebp], ecx
	mov	edx, DWORD PTR $T247079[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+32], 0

; 1232 : 					_Rrotate(_Parent(_Parent(_Pnode)));

	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Rrotate
$LN6@Insert:

; 1233 : 					}
; 1234 : 				}
; 1235 : 			else

	jmp	$LN4@Insert

; 1236 : 				{	// fixup red-red in right subtree
; 1237 : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));

$LN216@Insert:
	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T247164[ebp], edx
	mov	eax, DWORD PTR $T247164[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T247168[ebp], ecx
	mov	edx, DWORD PTR $T247168[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1238 : 				if (_Color(_Wherenode) == _Red)

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	jne	SHORT $LN240@Insert

; 1239 : 					{	// parent has two red children, blacken both
; 1240 : 					_Color(_Parent(_Pnode)) = _Black;

	mov	eax, DWORD PTR __Pnode$223263[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+32], 1

; 1241 : 					_Color(_Wherenode) = _Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [edx+32], 1

; 1242 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	eax, DWORD PTR __Pnode$223263[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	DWORD PTR $T247187[ebp], ecx
	mov	edx, DWORD PTR $T247187[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+32], 0

; 1243 : 					_Pnode = _Parent(_Parent(_Pnode));

	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$223263[ebp], eax

; 1244 : 					}
; 1245 : 				else

	jmp	SHORT $LN4@Insert

; 1246 : 					{	// parent has red and black children
; 1247 : 					if (_Pnode == _Left(_Parent(_Pnode)))

$LN240@Insert:
	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T247203[ebp], edx
	mov	eax, DWORD PTR $T247203[ebp]
	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN297@Insert

; 1248 : 						{	// rotate left child to right
; 1249 : 						_Pnode = _Parent(_Pnode);

	mov	edx, DWORD PTR __Pnode$223263[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$223263[ebp], eax

; 1250 : 						_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Rrotate

; 1251 : 						}
; 1252 : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

$LN297@Insert:
	mov	edx, DWORD PTR __Pnode$223263[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+32], 1

; 1253 : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

	mov	ecx, DWORD PTR __Pnode$223263[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	DWORD PTR $T247288[ebp], edx
	mov	eax, DWORD PTR $T247288[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+32], 0

; 1254 : 					_Lrotate(_Parent(_Parent(_Pnode)));

	mov	edx, DWORD PTR __Pnode$223263[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lrotate
$LN4@Insert:

; 1255 : 					}
; 1256 : 				}

	jmp	$LN64@Insert

; 1257 : 
; 1258 : 		_Color(_Root()) = _Black;	// root is always black

$LN360@Insert:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	DWORD PTR $T247376[ebp], eax
	mov	ecx, DWORD PTR $T247376[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+32], 1

; 1259 : 		return (_TREE_ITERATOR(_Newnode));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN19@Insert:

; 1260 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR $T246843[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Insert
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z

; 27   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Pnode$ = -8						; size = 4
__Wherenode$ = -4					; size = 4
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 1263 : 		{	// find leftmost node not less than _Keyval

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1264 : 		_Nodeptr _Pnode = _Root();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$[ebp], edx

; 1265 : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Wherenode$[ebp], ecx

; 1266 : 
; 1267 : 		while (!_Isnil(_Pnode))

$LN11@Lbound:
	mov	edx, DWORD PTR __Pnode$[ebp]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN3@Lbound

; 1268 : 			if (_DEBUG_LT_PRED(this->comp, _Key(_Pnode), _Keyval))

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Keyval$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx]
	setl	cl
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@Lbound

; 1269 : 				_Pnode = _Right(_Pnode);	// descend right subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1270 : 			else

	jmp	SHORT $LN1@Lbound
$LN2@Lbound:

; 1271 : 				{	// _Pnode not less than _Keyval, remember it
; 1272 : 				_Wherenode = _Pnode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Wherenode$[ebp], edx

; 1273 : 				_Pnode = _Left(_Pnode);	// descend left subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN1@Lbound:

; 1274 : 				}

	jmp	SHORT $LN11@Lbound
$LN3@Lbound:

; 1275 : 
; 1276 : 		return (_Wherenode);	// return best remembered candidate

	mov	eax, DWORD PTR __Wherenode$[ebp]

; 1277 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lbound@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ$0
__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ$2
__ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
tv72 = -96						; size = 4
tv182 = -92						; size = 4
tv177 = -88						; size = 4
_this$ = -84						; size = 4
$T247541 = -80						; size = 4
__Vptr$247539 = -76					; size = 4
$T247512 = -72						; size = 4
__Vptr$247510 = -68					; size = 4
$T247483 = -64						; size = 4
__Vptr$247481 = -60					; size = 4
$T247443 = -36						; size = 4
$T247442 = -32						; size = 4
$T247441 = -28						; size = 4
__Wherenode$ = -24					; size = 4
__Linkcnt$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1383 : 		{	// allocate a head/nil node

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1384 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1
	call	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>::allocate
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1385 : 		int _Linkcnt = 0;

	mov	DWORD PTR __Linkcnt$[ebp], 0

; 1386 : 
; 1387 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1388 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

	mov	DWORD PTR $T247441[ebp], 0
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR __Vptr$247481[ebp], eax
	mov	ecx, DWORD PTR __Vptr$247481[ebp]
	mov	DWORD PTR $T247483[ebp], ecx
	cmp	DWORD PTR $T247483[ebp], 0
	je	SHORT $LN23@Buynode
	mov	edx, DWORD PTR $T247483[ebp]
	mov	eax, DWORD PTR $T247441[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T247483[ebp]
	mov	DWORD PTR tv177[ebp], ecx
	jmp	SHORT $LN19@Buynode
$LN23@Buynode:
	mov	DWORD PTR tv177[ebp], 0
$LN19@Buynode:

; 1389 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1390 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

	mov	DWORD PTR $T247442[ebp], 0
	mov	eax, DWORD PTR __Wherenode$[ebp]
	add	eax, 4
	mov	DWORD PTR __Vptr$247510[ebp], eax
	mov	ecx, DWORD PTR __Vptr$247510[ebp]
	mov	DWORD PTR $T247512[ebp], ecx
	cmp	DWORD PTR $T247512[ebp], 0
	je	SHORT $LN33@Buynode
	mov	edx, DWORD PTR $T247512[ebp]
	mov	eax, DWORD PTR $T247442[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T247512[ebp]
	mov	DWORD PTR tv182[ebp], ecx
	jmp	SHORT $LN29@Buynode
$LN33@Buynode:
	mov	DWORD PTR tv182[ebp], 0
$LN29@Buynode:

; 1391 : 		++_Linkcnt;

	mov	edx, DWORD PTR __Linkcnt$[ebp]
	add	edx, 1
	mov	DWORD PTR __Linkcnt$[ebp], edx

; 1392 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

	mov	DWORD PTR $T247443[ebp], 0
	mov	eax, DWORD PTR __Wherenode$[ebp]
	add	eax, 8
	mov	DWORD PTR __Vptr$247539[ebp], eax
	mov	ecx, DWORD PTR __Vptr$247539[ebp]
	mov	DWORD PTR $T247541[ebp], ecx
	cmp	DWORD PTR $T247541[ebp], 0
	je	SHORT $LN43@Buynode
	mov	edx, DWORD PTR $T247541[ebp]
	mov	eax, DWORD PTR $T247443[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T247541[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	jmp	SHORT $LN39@Buynode
$LN43@Buynode:
	mov	DWORD PTR tv72[ebp], 0
$LN39@Buynode:
	jmp	SHORT $LN6@Buynode
__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ$0:

; 1393 : 		_CATCH_ALL
; 1394 : 		if (1 < _Linkcnt)
; 1395 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1396 : 		if (0 < _Linkcnt)
; 1397 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1398 : 		this->_Alnod.deallocate(_Wherenode, 1);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1399 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1400 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN61@Buynode
	ret	0
$LN6@Buynode:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1401 : 		_Color(_Wherenode) = _Black;

$LN61@Buynode:
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [eax+32], 1

; 1402 : 		_Isnil(_Wherenode) = false;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [ecx+33], 0

; 1403 : 		return (_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
$LN5@Buynode:

; 1404 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode
PUBLIC	??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
PUBLIC	??$unchecked_uninitialized_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@stdext@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@std@@@Z ; stdext::unchecked_uninitialized_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$2
__catchsym$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$0
__unwindtable$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z
_TEXT	SEGMENT
tv84 = -440						; size = 4
tv304 = -436						; size = 4
tv290 = -432						; size = 4
tv282 = -428						; size = 4
_this$ = -424						; size = 4
$T248269 = -420						; size = 4
$T248261 = -416						; size = 4
$T248260 = -412						; size = 4
$T248237 = -406						; size = 1
$T248236 = -405						; size = 1
$T248235 = -404						; size = 4
$T248234 = -400						; size = 4
$T248222 = -393						; size = 1
$T248221 = -392						; size = 4
$T248220 = -388						; size = 4
$T248219 = -384						; size = 4
__Cat$248254 = -380					; size = 1
$T248251 = -379						; size = 1
$T248250 = -378						; size = 1
__Cat$248245 = -376					; size = 1
$T248242 = -375						; size = 1
$T248241 = -374						; size = 1
$T248240 = -373						; size = 1
$T248194 = -372						; size = 4
$T248175 = -368						; size = 4
$T248158 = -361						; size = 1
$T248157 = -360						; size = 4
$T248147 = -356						; size = 4
$T248146 = -352						; size = 4
__Cat$248191 = -346					; size = 1
$T248188 = -345						; size = 1
$T248187 = -344						; size = 1
__Cat$248183 = -343					; size = 1
$T248180 = -342						; size = 1
$T248179 = -341						; size = 1
$T248122 = -340						; size = 4
$T248114 = -336						; size = 4
$T248106 = -332						; size = 4
$T248088 = -328						; size = 4
$T248087 = -324						; size = 4
$T248071 = -320						; size = 4
__Cat$248096 = -314					; size = 1
$T248093 = -313						; size = 1
$T248045 = -312						; size = 4
$T248044 = -308						; size = 4
$T248034 = -304						; size = 4
__Cat$248041 = -299					; size = 1
$T248038 = -298						; size = 1
$T248037 = -297						; size = 1
$T248018 = -296						; size = 4
$T247999 = -292						; size = 4
$T247982 = -285						; size = 1
$T247981 = -284						; size = 4
$T247971 = -280						; size = 4
$T247970 = -276						; size = 4
__Cat$248013 = -270					; size = 1
$T248010 = -269						; size = 1
$T248009 = -268						; size = 1
__Cat$248006 = -267					; size = 1
$T248003 = -266						; size = 1
$T248002 = -265						; size = 1
$T247946 = -264						; size = 4
$T247945 = -260						; size = 4
$T247941 = -256						; size = 4
$T247940 = -252						; size = 4
$T247922 = -248						; size = 4
$T247921 = -244						; size = 4
$T247905 = -240						; size = 4
__Cat$247928 = -234					; size = 1
$T247925 = -233						; size = 1
$T247856 = -232						; size = 4
$T247855 = -228						; size = 4
$T247839 = -224						; size = 4
__Cat$247862 = -218					; size = 1
$T247859 = -217						; size = 1
$T247796 = -216						; size = 4
$T247795 = -212						; size = 4
$T247779 = -208						; size = 4
__Cat$247803 = -202					; size = 1
$T247801 = -201						; size = 1
$T247753 = -200						; size = 4
$T247741 = -196						; size = 4
$T247731 = -189						; size = 1
$T247730 = -188						; size = 4
__Cat$247749 = -183					; size = 1
$T247747 = -182						; size = 1
$T247746 = -181						; size = 1
$T247718 = -180						; size = 4
$T247706 = -176						; size = 4
$T247696 = -169						; size = 1
$T247695 = -168						; size = 4
__Cat$247714 = -163					; size = 1
$T247712 = -162						; size = 1
$T247711 = -161						; size = 1
$T247683 = -160						; size = 4
$T247673 = -156						; size = 4
__Cat$247680 = -151					; size = 1
$T247678 = -150						; size = 1
$T247677 = -149						; size = 1
__Count$247643 = -136					; size = 4
__Count$247617 = -64					; size = 4
__Tmp$223377 = -60					; size = 12
__Oldend$223378 = -48					; size = 4
__Tmp$223367 = -44					; size = 12
__Ncopied$223354 = -32					; size = 4
__Newvec$223352 = -28					; size = 4
__Whereoff$223353 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@3
	mov	DWORD PTR tv282[ebp], 0
	jmp	SHORT $LN27@Insert_n@3
$LN29@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR tv282[ebp], eax
$LN27@Insert_n@3:
	mov	edx, DWORD PTR tv282[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@3
	jmp	$LN16@Insert_n@3
$LN14@Insert_n@3:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$247617[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$247617[ebp], 0
	jbe	SHORT $LN35@Insert_n@3
	mov	eax, DWORD PTR __Count$247617[ebp]
	mov	DWORD PTR tv290[ebp], eax
	jmp	SHORT $LN37@Insert_n@3
$LN35@Insert_n@3:
	mov	DWORD PTR tv290[ebp], 1
$LN37@Insert_n@3:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR tv290[ebp]
	sub	edx, eax
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@3

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Xlen
	jmp	$LN16@Insert_n@3

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@3:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@3

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$247643[ebp], 357913941 ; 15555555H
	cmp	DWORD PTR __Count$247643[ebp], 0
	jbe	SHORT $LN48@Insert_n@3
	mov	edx, DWORD PTR __Count$247643[ebp]
	mov	DWORD PTR tv304[ebp], edx
	jmp	SHORT $LN44@Insert_n@3
$LN48@Insert_n@3:
	mov	DWORD PTR tv304[ebp], 1
$LN44@Insert_n@3:
	mov	eax, DWORD PTR __Capacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR tv304[ebp]
	sub	ecx, eax
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@3
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@3
$LN17@Insert_n@3:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN18@Insert_n@3:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1171 : 			if (_Capacity < size() + _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	SHORT $LN54@Insert_n@3

; 1172 : 				_Capacity = size() + _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@3:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@UProductionCostModifiers@@@std@@YAPAUProductionCostModifiers@@IPAU1@@Z ; std::_Allocate<ProductionCostModifiers>
	add	esp, 8
	mov	DWORD PTR __Newvec$223352[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$223353[ebp], eax

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$223354[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Whereoff$223353[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$223352[ebp]
	mov	DWORD PTR $T247683[ebp], edx
	mov	eax, DWORD PTR $T247683[ebp]
	mov	DWORD PTR $T247673[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T247677[ebp], cl
	mov	dl, BYTE PTR __Cat$247680[ebp]
	mov	BYTE PTR $T247678[ebp], dl
	movzx	eax, BYTE PTR $T247677[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T247678[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T247673[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ProductionCostModifiers *,unsigned int,ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$223354[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$223354[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T247718[ebp], edx
	mov	eax, DWORD PTR __Newvec$223352[ebp]
	mov	DWORD PTR $T247706[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T247711[ebp], cl
	mov	dl, BYTE PTR __Cat$247714[ebp]
	mov	BYTE PTR $T247712[ebp], dl
	mov	al, BYTE PTR $T247711[ebp]
	mov	BYTE PTR $T247696[ebp], al
	mov	ecx, DWORD PTR $T247706[ebp]
	mov	DWORD PTR $T247695[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T247695[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T247718[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@stdext@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@std@@@Z ; stdext::unchecked_uninitialized_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$223354[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$223354[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T247753[ebp], edx
	mov	eax, DWORD PTR __Whereoff$223353[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Newvec$223352[ebp]
	mov	DWORD PTR $T247741[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T247746[ebp], cl
	mov	dl, BYTE PTR __Cat$247749[ebp]
	mov	BYTE PTR $T247747[ebp], dl
	mov	al, BYTE PTR $T247746[ebp]
	mov	BYTE PTR $T247731[ebp], al
	mov	ecx, DWORD PTR $T247741[ebp]
	mov	DWORD PTR $T247730[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T247730[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247753[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@stdext@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@std@@@Z ; stdext::unchecked_uninitialized_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@3
__catch$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223354[ebp], 1
	jle	SHORT $LN7@Insert_n@3

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	eax, DWORD PTR __Whereoff$223353[ebp]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Newvec$223352[ebp]
	mov	DWORD PTR $T247796[ebp], eax
	mov	ecx, DWORD PTR __Newvec$223352[ebp]
	mov	DWORD PTR $T247795[ebp], ecx
	mov	dl, BYTE PTR __Cat$247803[ebp]
	mov	BYTE PTR $T247801[ebp], dl
	mov	eax, DWORD PTR $T247795[ebp]
	mov	DWORD PTR $T247779[ebp], eax
	jmp	SHORT $LN91@Insert_n@3
$LN90@Insert_n@3:
	mov	ecx, DWORD PTR $T247779[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T247779[ebp], ecx
$LN91@Insert_n@3:
	mov	edx, DWORD PTR $T247779[ebp]
	cmp	edx, DWORD PTR $T247796[ebp]
	je	SHORT $LN7@Insert_n@3
	jmp	SHORT $LN90@Insert_n@3
$LN7@Insert_n@3:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223354[ebp], 0
	jle	SHORT $LN6@Insert_n@3

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR __Whereoff$223353[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Newvec$223352[ebp]
	add	ecx, eax
	mov	DWORD PTR $T247856[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$223353[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$223352[ebp]
	mov	DWORD PTR $T247855[ebp], edx
	mov	al, BYTE PTR __Cat$247862[ebp]
	mov	BYTE PTR $T247859[ebp], al
	mov	ecx, DWORD PTR $T247855[ebp]
	mov	DWORD PTR $T247839[ebp], ecx
	jmp	SHORT $LN106@Insert_n@3
$LN105@Insert_n@3:
	mov	edx, DWORD PTR $T247839[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T247839[ebp], edx
$LN106@Insert_n@3:
	mov	eax, DWORD PTR $T247839[ebp]
	cmp	eax, DWORD PTR $T247856[ebp]
	je	SHORT $LN6@Insert_n@3
	jmp	SHORT $LN105@Insert_n@3
$LN6@Insert_n@3:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$223352[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@3
	ret	0
$LN19@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@3

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T247941[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T247940[ebp], eax
	mov	ecx, DWORD PTR $T247941[ebp]
	mov	DWORD PTR $T247922[ebp], ecx
	mov	edx, DWORD PTR $T247940[ebp]
	mov	DWORD PTR $T247921[ebp], edx
	mov	al, BYTE PTR __Cat$247928[ebp]
	mov	BYTE PTR $T247925[ebp], al
	mov	ecx, DWORD PTR $T247921[ebp]
	mov	DWORD PTR $T247905[ebp], ecx
	jmp	SHORT $LN125@Insert_n@3
$LN124@Insert_n@3:
	mov	edx, DWORD PTR $T247905[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T247905[ebp], edx
$LN125@Insert_n@3:
	mov	eax, DWORD PTR $T247905[ebp]
	cmp	eax, DWORD PTR $T247922[ebp]
	je	SHORT $LN117@Insert_n@3
	jmp	SHORT $LN124@Insert_n@3
$LN117@Insert_n@3:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR $T247946[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T247945[ebp], eax
	mov	ecx, DWORD PTR $T247945[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@3:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	edx, DWORD PTR __Capacity$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Newvec$223352[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR __Newvec$223352[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$223352[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@3
$LN10@Insert_n@3:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@3

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Tmp$223367[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR __Tmp$223367[ebp+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR __Tmp$223367[ebp+8], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T248018[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T247999[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T248002[ebp], al
	mov	cl, BYTE PTR __Cat$248006[ebp]
	mov	BYTE PTR $T248003[ebp], cl
	mov	dl, BYTE PTR $T248002[ebp]
	mov	BYTE PTR $T247982[ebp], dl
	mov	eax, DWORD PTR $T247999[ebp]
	mov	DWORD PTR $T247981[ebp], eax
	mov	ecx, DWORD PTR $T247981[ebp]
	mov	DWORD PTR $T247971[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T247970[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T248009[ebp], al
	mov	cl, BYTE PTR __Cat$248013[ebp]
	mov	BYTE PTR $T248010[ebp], cl
	movzx	edx, BYTE PTR $T248009[ebp]
	push	edx
	movzx	eax, BYTE PTR $T248010[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T247971[ebp]
	push	edx
	mov	eax, DWORD PTR $T248018[ebp]
	push	eax
	mov	ecx, DWORD PTR $T247970[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, eax
	mov	DWORD PTR $T248045[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T248044[ebp], ecx
	mov	edx, DWORD PTR $T248044[ebp]
	mov	DWORD PTR $T248034[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T248037[ebp], al
	mov	cl, BYTE PTR __Cat$248041[ebp]
	mov	BYTE PTR $T248038[ebp], cl
	movzx	edx, BYTE PTR $T248037[ebp]
	push	edx
	movzx	eax, BYTE PTR $T248038[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Tmp$223367[ebp]
	push	edx
	mov	eax, DWORD PTR $T248045[ebp]
	push	eax
	mov	ecx, DWORD PTR $T248034[ebp]
	push	ecx
	call	??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<ProductionCostModifiers *,unsigned int,ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@3
__catch$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T248106[ebp], edx
	mov	ecx, DWORD PTR $T248106[ebp]
	mov	DWORD PTR $T248088[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T248087[ebp], edx
	mov	al, BYTE PTR __Cat$248096[ebp]
	mov	BYTE PTR $T248093[ebp], al
	mov	ecx, DWORD PTR $T248087[ebp]
	mov	DWORD PTR $T248071[ebp], ecx
	jmp	SHORT $LN160@Insert_n@3
$LN159@Insert_n@3:
	mov	edx, DWORD PTR $T248071[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T248071[ebp], edx
$LN160@Insert_n@3:
	mov	eax, DWORD PTR $T248071[ebp]
	cmp	eax, DWORD PTR $T248088[ebp]
	je	SHORT $LN152@Insert_n@3
	jmp	SHORT $LN159@Insert_n@3
$LN152@Insert_n@3:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$3
	ret	0
$LN21@Insert_n@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	ecx, DWORD PTR __Count$[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, ecx
	mov	DWORD PTR $T248122[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T248114[ebp], ecx
	jmp	SHORT $LN171@Insert_n@3
$LN170@Insert_n@3:
	mov	edx, DWORD PTR $T248114[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR $T248114[ebp], edx
$LN171@Insert_n@3:
	mov	eax, DWORD PTR $T248114[ebp]
	cmp	eax, DWORD PTR $T248122[ebp]
	je	SHORT $LN167@Insert_n@3
	mov	ecx, DWORD PTR $T248114[ebp]
	mov	edx, DWORD PTR __Tmp$223367[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$223367[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR __Tmp$223367[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN170@Insert_n@3
$LN167@Insert_n@3:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@3
$LN3@Insert_n@3:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$223377[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$223377[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$223377[ebp+8], eax

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Oldend$223378[ebp], edx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T248194[ebp], ecx
	mov	edx, DWORD PTR $T248194[ebp]
	mov	DWORD PTR $T248175[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T248179[ebp], al
	mov	cl, BYTE PTR __Cat$248183[ebp]
	mov	BYTE PTR $T248180[ebp], cl
	mov	dl, BYTE PTR $T248179[ebp]
	mov	BYTE PTR $T248158[ebp], dl
	mov	eax, DWORD PTR $T248175[ebp]
	mov	DWORD PTR $T248157[ebp], eax
	mov	ecx, DWORD PTR $T248157[ebp]
	mov	DWORD PTR $T248147[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR __Oldend$223378[ebp]
	sub	eax, edx
	mov	DWORD PTR $T248146[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T248187[ebp], cl
	mov	dl, BYTE PTR __Cat$248191[ebp]
	mov	BYTE PTR $T248188[ebp], dl
	movzx	eax, BYTE PTR $T248187[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T248188[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T248147[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldend$223378[ebp]
	push	ecx
	mov	edx, DWORD PTR $T248146[ebp]
	push	edx
	call	??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	edx, DWORD PTR __Oldend$223378[ebp]
	mov	DWORD PTR $T248261[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T248260[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T248240[ebp], cl
	mov	dl, BYTE PTR __Cat$248245[ebp]
	mov	BYTE PTR $T248241[ebp], dl
	mov	al, BYTE PTR $T248240[ebp]
	mov	BYTE PTR $T248237[ebp], al
	mov	cl, BYTE PTR $T248242[ebp]
	mov	BYTE PTR $T248236[ebp], cl
	mov	edx, DWORD PTR $T248261[ebp]
	mov	DWORD PTR $T248235[ebp], edx
	mov	eax, DWORD PTR $T248260[ebp]
	mov	DWORD PTR $T248234[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T248250[ebp], cl
	mov	dl, BYTE PTR __Cat$248254[ebp]
	mov	BYTE PTR $T248251[ebp], dl
	mov	al, BYTE PTR $T248250[ebp]
	mov	BYTE PTR $T248222[ebp], al
	mov	ecx, DWORD PTR $T248235[ebp]
	mov	DWORD PTR $T248221[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR __Oldend$223378[ebp]
	sub	eax, edx
	mov	DWORD PTR $T248220[ebp], eax
	mov	ecx, DWORD PTR $T248234[ebp]
	mov	DWORD PTR $T248219[ebp], ecx
$LN197@Insert_n@3:
	mov	edx, DWORD PTR $T248219[ebp]
	cmp	edx, DWORD PTR $T248220[ebp]
	je	SHORT $LN186@Insert_n@3
	mov	eax, DWORD PTR $T248220[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR $T248220[ebp], eax
	mov	ecx, DWORD PTR $T248221[ebp]
	sub	ecx, 12					; 0000000cH
	mov	DWORD PTR $T248221[ebp], ecx
	mov	edx, DWORD PTR $T248220[ebp]
	mov	eax, DWORD PTR $T248221[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	jmp	SHORT $LN197@Insert_n@3
$LN186@Insert_n@3:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T248269[ebp], eax
	jmp	SHORT $LN204@Insert_n@3
$LN203@Insert_n@3:
	mov	ecx, DWORD PTR $T248269[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T248269[ebp], ecx
$LN204@Insert_n@3:
	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	add	edx, DWORD PTR __Where$[ebp]
	cmp	DWORD PTR $T248269[ebp], edx
	je	SHORT $LN16@Insert_n@3
	mov	eax, DWORD PTR $T248269[ebp]
	mov	ecx, DWORD PTR __Tmp$223377[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$223377[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Tmp$223377[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN203@Insert_n@3
$LN16@Insert_n@3:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-444]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXV?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@2@IABUProductionCostModifiers@@@Z ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T248291 = -80						; size = 28
$T248290 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ PROC ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T248291[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T248290[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T248290[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T248291[ebp]
	push	eax
	lea	ecx, DWORD PTR $T248290[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T248290[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T248290[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T248291[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@2:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T248291[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T248290[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@KAXXZ ENDP ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Xlen
PUBLIC	??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
PUBLIC	??$unchecked_uninitialized_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@stdext@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$2
__catchsym$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$0
__unwindtable$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z
_TEXT	SEGMENT
tv84 = -424						; size = 4
tv302 = -420						; size = 4
tv288 = -416						; size = 4
tv280 = -412						; size = 4
_this$ = -408						; size = 4
$T248993 = -404						; size = 4
$T248985 = -400						; size = 4
$T248984 = -396						; size = 4
$T248961 = -390						; size = 1
$T248960 = -389						; size = 1
$T248959 = -388						; size = 4
$T248958 = -384						; size = 4
$T248946 = -377						; size = 1
$T248945 = -376						; size = 4
$T248944 = -372						; size = 4
$T248943 = -368						; size = 4
__Cat$248977 = -364					; size = 1
$T248974 = -363						; size = 1
$T248973 = -362						; size = 1
__Cat$248968 = -360					; size = 1
$T248965 = -359						; size = 1
$T248964 = -358						; size = 1
$T248963 = -357						; size = 1
$T248918 = -356						; size = 4
$T248899 = -352						; size = 4
$T248882 = -345						; size = 1
$T248881 = -344						; size = 4
$T248871 = -340						; size = 4
$T248870 = -336						; size = 4
__Cat$248913 = -330					; size = 1
$T248910 = -329						; size = 1
$T248909 = -328						; size = 1
__Cat$248906 = -327					; size = 1
$T248903 = -326						; size = 1
$T248902 = -325						; size = 1
$T248846 = -324						; size = 4
$T248838 = -320						; size = 4
$T248830 = -316						; size = 4
$T248812 = -312						; size = 4
$T248811 = -308						; size = 4
$T248795 = -304						; size = 4
__Cat$248819 = -298					; size = 1
$T248817 = -297						; size = 1
$T248769 = -296						; size = 4
$T248768 = -292						; size = 4
$T248758 = -288						; size = 4
__Cat$248765 = -283					; size = 1
$T248763 = -282						; size = 1
$T248762 = -281						; size = 1
$T248742 = -280						; size = 4
$T248723 = -276						; size = 4
$T248706 = -269						; size = 1
$T248705 = -268						; size = 4
$T248695 = -264						; size = 4
$T248694 = -260						; size = 4
__Cat$248739 = -254					; size = 1
$T248737 = -253						; size = 1
$T248736 = -252						; size = 1
__Cat$248731 = -251					; size = 1
$T248729 = -250						; size = 1
$T248728 = -249						; size = 1
$T248670 = -248						; size = 4
$T248669 = -244						; size = 4
$T248665 = -240						; size = 4
$T248664 = -236						; size = 4
$T248646 = -232						; size = 4
$T248645 = -228						; size = 4
$T248629 = -224						; size = 4
__Cat$248653 = -218					; size = 1
$T248651 = -217						; size = 1
$T248580 = -216						; size = 4
$T248579 = -212						; size = 4
$T248563 = -208						; size = 4
__Cat$248587 = -202					; size = 1
$T248585 = -201						; size = 1
$T248520 = -200						; size = 4
$T248519 = -196						; size = 4
$T248503 = -192						; size = 4
__Cat$248527 = -186					; size = 1
$T248525 = -185						; size = 1
$T248477 = -184						; size = 4
$T248465 = -180						; size = 4
$T248455 = -173						; size = 1
$T248454 = -172						; size = 4
__Cat$248473 = -167					; size = 1
$T248470 = -166						; size = 1
$T248469 = -165						; size = 1
$T248442 = -164						; size = 4
$T248430 = -160						; size = 4
$T248420 = -153						; size = 1
$T248419 = -152						; size = 4
__Cat$248438 = -147					; size = 1
$T248435 = -146						; size = 1
$T248434 = -145						; size = 1
$T248407 = -144						; size = 4
$T248397 = -140						; size = 4
__Cat$248404 = -135					; size = 1
$T248401 = -134						; size = 1
$T248400 = -133						; size = 1
__Count$248367 = -120					; size = 4
__Count$248341 = -48					; size = 4
__Tmp$223450 = -44					; size = 4
__Oldend$223451 = -40					; size = 4
__Tmp$223440 = -36					; size = 4
__Ncopied$223427 = -32					; size = 4
__Newvec$223425 = -28					; size = 4
__Whereoff$223426 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z PROC ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 408				; 00000198H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@4
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@4
$LN29@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@4:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@4
	jmp	$LN16@Insert_n@4
$LN14@Insert_n@4:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$248341[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$248341[ebp], 0
	jbe	SHORT $LN35@Insert_n@4
	mov	edx, DWORD PTR __Count$248341[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@4
$LN35@Insert_n@4:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@4

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Xlen
	jmp	$LN16@Insert_n@4

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@4

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$248367[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$248367[ebp], 0
	jbe	SHORT $LN48@Insert_n@4
	mov	ecx, DWORD PTR __Count$248367[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@4
$LN48@Insert_n@4:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@4:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@4
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@4
$LN17@Insert_n@4:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@4:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@4

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@4:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@W4AnimationPathTypes@@@std@@YAPAW4AnimationPathTypes@@IPAW41@@Z ; std::_Allocate<enum AnimationPathTypes>
	add	esp, 8
	mov	DWORD PTR __Newvec$223425[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$223426[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$223427[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$223426[ebp]
	mov	ecx, DWORD PTR __Newvec$223425[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T248407[ebp], edx
	mov	eax, DWORD PTR $T248407[ebp]
	mov	DWORD PTR $T248397[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T248400[ebp], cl
	mov	dl, BYTE PTR __Cat$248404[ebp]
	mov	BYTE PTR $T248401[ebp], dl
	movzx	eax, BYTE PTR $T248400[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T248401[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T248397[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum AnimationPathTypes *,unsigned int,enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
	add	esp, 24					; 00000018H

; 1179 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$223427[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$223427[ebp], eax

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T248442[ebp], edx
	mov	eax, DWORD PTR __Newvec$223425[ebp]
	mov	DWORD PTR $T248430[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T248434[ebp], cl
	mov	dl, BYTE PTR __Cat$248438[ebp]
	mov	BYTE PTR $T248435[ebp], dl
	mov	al, BYTE PTR $T248434[ebp]
	mov	BYTE PTR $T248420[ebp], al
	mov	ecx, DWORD PTR $T248430[ebp]
	mov	DWORD PTR $T248419[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T248419[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T248442[ebp]
	push	edx
	call	??$unchecked_uninitialized_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@stdext@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	eax, DWORD PTR __Ncopied$223427[ebp]
	add	eax, 1
	mov	DWORD PTR __Ncopied$223427[ebp], eax

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T248477[ebp], edx
	mov	eax, DWORD PTR __Whereoff$223426[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Newvec$223425[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T248465[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T248469[ebp], al
	mov	cl, BYTE PTR __Cat$248473[ebp]
	mov	BYTE PTR $T248470[ebp], cl
	mov	dl, BYTE PTR $T248469[ebp]
	mov	BYTE PTR $T248455[ebp], dl
	mov	eax, DWORD PTR $T248465[ebp]
	mov	DWORD PTR $T248454[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T248454[ebp]
	push	edx
	mov	eax, DWORD PTR $T248477[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@stdext@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@std@@@Z ; stdext::unchecked_uninitialized_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@4
__catch$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223427[ebp], 1
	jle	SHORT $LN7@Insert_n@4

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	edx, DWORD PTR __Whereoff$223426[ebp]
	mov	eax, DWORD PTR __Newvec$223425[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T248520[ebp], ecx
	mov	edx, DWORD PTR __Newvec$223425[ebp]
	mov	DWORD PTR $T248519[ebp], edx
	mov	al, BYTE PTR __Cat$248527[ebp]
	mov	BYTE PTR $T248525[ebp], al
	mov	ecx, DWORD PTR $T248519[ebp]
	mov	DWORD PTR $T248503[ebp], ecx
	jmp	SHORT $LN91@Insert_n@4
$LN90@Insert_n@4:
	mov	edx, DWORD PTR $T248503[ebp]
	add	edx, 4
	mov	DWORD PTR $T248503[ebp], edx
$LN91@Insert_n@4:
	mov	eax, DWORD PTR $T248503[ebp]
	cmp	eax, DWORD PTR $T248520[ebp]
	je	SHORT $LN7@Insert_n@4
	jmp	SHORT $LN90@Insert_n@4
$LN7@Insert_n@4:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$223427[ebp], 0
	jle	SHORT $LN6@Insert_n@4

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	ecx, DWORD PTR __Whereoff$223426[ebp]
	mov	edx, DWORD PTR __Newvec$223425[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR $T248580[ebp], edx
	mov	eax, DWORD PTR __Whereoff$223426[ebp]
	mov	ecx, DWORD PTR __Newvec$223425[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T248579[ebp], edx
	mov	al, BYTE PTR __Cat$248587[ebp]
	mov	BYTE PTR $T248585[ebp], al
	mov	ecx, DWORD PTR $T248579[ebp]
	mov	DWORD PTR $T248563[ebp], ecx
	jmp	SHORT $LN106@Insert_n@4
$LN105@Insert_n@4:
	mov	edx, DWORD PTR $T248563[ebp]
	add	edx, 4
	mov	DWORD PTR $T248563[ebp], edx
$LN106@Insert_n@4:
	mov	eax, DWORD PTR $T248563[ebp]
	cmp	eax, DWORD PTR $T248580[ebp]
	je	SHORT $LN6@Insert_n@4
	jmp	SHORT $LN105@Insert_n@4
$LN6@Insert_n@4:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$223425[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN115@Insert_n@4
	ret	0
$LN19@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN115@Insert_n@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	add	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], ecx

; 1195 : 			if (_Myfirst != 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN5@Insert_n@4

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T248665[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T248664[ebp], eax
	mov	ecx, DWORD PTR $T248665[ebp]
	mov	DWORD PTR $T248646[ebp], ecx
	mov	edx, DWORD PTR $T248664[ebp]
	mov	DWORD PTR $T248645[ebp], edx
	mov	al, BYTE PTR __Cat$248653[ebp]
	mov	BYTE PTR $T248651[ebp], al
	mov	ecx, DWORD PTR $T248645[ebp]
	mov	DWORD PTR $T248629[ebp], ecx
	jmp	SHORT $LN125@Insert_n@4
$LN124@Insert_n@4:
	mov	edx, DWORD PTR $T248629[ebp]
	add	edx, 4
	mov	DWORD PTR $T248629[ebp], edx
$LN125@Insert_n@4:
	mov	eax, DWORD PTR $T248629[ebp]
	cmp	eax, DWORD PTR $T248646[ebp]
	je	SHORT $LN117@Insert_n@4
	jmp	SHORT $LN124@Insert_n@4
$LN117@Insert_n@4:

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR $T248670[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T248669[ebp], edx
	mov	eax, DWORD PTR $T248669[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@4:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR __Newvec$223425[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$223425[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 1207 : 			_Myfirst = _Newvec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newvec$223425[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	$LN16@Insert_n@4
$LN10@Insert_n@4:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR __Where$[ebp]
	sar	eax, 2
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@4

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223440[ebp], edx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T248742[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T248723[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T248728[ebp], dl
	mov	al, BYTE PTR __Cat$248731[ebp]
	mov	BYTE PTR $T248729[ebp], al
	mov	cl, BYTE PTR $T248728[ebp]
	mov	BYTE PTR $T248706[ebp], cl
	mov	edx, DWORD PTR $T248723[ebp]
	mov	DWORD PTR $T248705[ebp], edx
	mov	eax, DWORD PTR $T248705[ebp]
	mov	DWORD PTR $T248695[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T248694[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T248736[ebp], dl
	mov	al, BYTE PTR __Cat$248739[ebp]
	mov	BYTE PTR $T248737[ebp], al
	movzx	ecx, BYTE PTR $T248736[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T248737[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T248695[ebp]
	push	ecx
	mov	edx, DWORD PTR $T248742[ebp]
	push	edx
	mov	eax, DWORD PTR $T248694[ebp]
	push	eax
	call	??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	mov	DWORD PTR $T248769[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T248768[ebp], edx
	mov	eax, DWORD PTR $T248768[ebp]
	mov	DWORD PTR $T248758[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T248762[ebp], cl
	mov	dl, BYTE PTR __Cat$248765[ebp]
	mov	BYTE PTR $T248763[ebp], dl
	movzx	eax, BYTE PTR $T248762[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T248763[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR __Tmp$223440[ebp]
	push	eax
	mov	ecx, DWORD PTR $T248769[ebp]
	push	ecx
	mov	edx, DWORD PTR $T248758[ebp]
	push	edx
	call	??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<enum AnimationPathTypes *,unsigned int,enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
	add	esp, 24					; 00000018H
	jmp	SHORT $LN21@Insert_n@4
__catch$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T248830[ebp], eax
	mov	ecx, DWORD PTR $T248830[ebp]
	mov	DWORD PTR $T248812[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T248811[ebp], ecx
	mov	dl, BYTE PTR __Cat$248819[ebp]
	mov	BYTE PTR $T248817[ebp], dl
	mov	eax, DWORD PTR $T248811[ebp]
	mov	DWORD PTR $T248795[ebp], eax
	jmp	SHORT $LN160@Insert_n@4
$LN159@Insert_n@4:
	mov	ecx, DWORD PTR $T248795[ebp]
	add	ecx, 4
	mov	DWORD PTR $T248795[ebp], ecx
$LN160@Insert_n@4:
	mov	edx, DWORD PTR $T248795[ebp]
	cmp	edx, DWORD PTR $T248812[ebp]
	je	SHORT $LN152@Insert_n@4
	jmp	SHORT $LN159@Insert_n@4
$LN152@Insert_n@4:

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$3
	ret	0
$LN21@Insert_n@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T248846[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T248838[ebp], edx
	jmp	SHORT $LN171@Insert_n@4
$LN170@Insert_n@4:
	mov	eax, DWORD PTR $T248838[ebp]
	add	eax, 4
	mov	DWORD PTR $T248838[ebp], eax
$LN171@Insert_n@4:
	mov	ecx, DWORD PTR $T248838[ebp]
	cmp	ecx, DWORD PTR $T248846[ebp]
	je	SHORT $LN167@Insert_n@4
	mov	edx, DWORD PTR $T248838[ebp]
	mov	eax, DWORD PTR __Tmp$223440[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN170@Insert_n@4
$LN167@Insert_n@4:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@4
$LN3@Insert_n@4:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$223450[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$223451[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T248918[ebp], eax
	mov	ecx, DWORD PTR $T248918[ebp]
	mov	DWORD PTR $T248899[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T248902[ebp], dl
	mov	al, BYTE PTR __Cat$248906[ebp]
	mov	BYTE PTR $T248903[ebp], al
	mov	cl, BYTE PTR $T248902[ebp]
	mov	BYTE PTR $T248882[ebp], cl
	mov	edx, DWORD PTR $T248899[ebp]
	mov	DWORD PTR $T248881[ebp], edx
	mov	eax, DWORD PTR $T248881[ebp]
	mov	DWORD PTR $T248871[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$223451[ebp]
	sub	edx, ecx
	mov	DWORD PTR $T248870[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T248909[ebp], al
	mov	cl, BYTE PTR __Cat$248913[ebp]
	mov	BYTE PTR $T248910[ebp], cl
	movzx	edx, BYTE PTR $T248909[ebp]
	push	edx
	movzx	eax, BYTE PTR $T248910[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T248871[ebp]
	push	edx
	mov	eax, DWORD PTR __Oldend$223451[ebp]
	push	eax
	mov	ecx, DWORD PTR $T248870[ebp]
	push	ecx
	call	??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$223451[ebp]
	mov	DWORD PTR $T248985[ebp], eax
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T248984[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T248963[ebp], dl
	mov	al, BYTE PTR __Cat$248968[ebp]
	mov	BYTE PTR $T248964[ebp], al
	mov	cl, BYTE PTR $T248963[ebp]
	mov	BYTE PTR $T248961[ebp], cl
	mov	dl, BYTE PTR $T248965[ebp]
	mov	BYTE PTR $T248960[ebp], dl
	mov	eax, DWORD PTR $T248985[ebp]
	mov	DWORD PTR $T248959[ebp], eax
	mov	ecx, DWORD PTR $T248984[ebp]
	mov	DWORD PTR $T248958[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T248973[ebp], dl
	mov	al, BYTE PTR __Cat$248977[ebp]
	mov	BYTE PTR $T248974[ebp], al
	mov	cl, BYTE PTR $T248973[ebp]
	mov	BYTE PTR $T248946[ebp], cl
	mov	edx, DWORD PTR $T248959[ebp]
	mov	DWORD PTR $T248945[ebp], edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$223451[ebp]
	sub	ecx, eax
	mov	DWORD PTR $T248944[ebp], ecx
	mov	edx, DWORD PTR $T248958[ebp]
	mov	DWORD PTR $T248943[ebp], edx
$LN197@Insert_n@4:
	mov	eax, DWORD PTR $T248943[ebp]
	cmp	eax, DWORD PTR $T248944[ebp]
	je	SHORT $LN186@Insert_n@4
	mov	ecx, DWORD PTR $T248944[ebp]
	sub	ecx, 4
	mov	DWORD PTR $T248944[ebp], ecx
	mov	edx, DWORD PTR $T248945[ebp]
	sub	edx, 4
	mov	DWORD PTR $T248945[ebp], edx
	mov	eax, DWORD PTR $T248945[ebp]
	mov	ecx, DWORD PTR $T248944[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN197@Insert_n@4
$LN186@Insert_n@4:

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T248993[ebp], eax
	jmp	SHORT $LN204@Insert_n@4
$LN203@Insert_n@4:
	mov	ecx, DWORD PTR $T248993[ebp]
	add	ecx, 4
	mov	DWORD PTR $T248993[ebp], ecx
$LN204@Insert_n@4:
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	cmp	DWORD PTR $T248993[ebp], ecx
	je	SHORT $LN16@Insert_n@4
	mov	edx, DWORD PTR $T248993[ebp]
	mov	eax, DWORD PTR __Tmp$223450[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN203@Insert_n@4
$LN16@Insert_n@4:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-428]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@IAEXV?$_Vector_const_iterator@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@2@IABW4AnimationPathTypes@@@Z ENDP ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T249015 = -80						; size = 28
$T249014 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ PROC ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T249015[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T249014[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T249014[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T249015[ebp]
	push	eax
	lea	ecx, DWORD PTR $T249014[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T249014[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T249014[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T249015[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@3:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T249015[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T249014[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@W4AnimationPathTypes@@V?$allocator@W4AnimationPathTypes@@@std@@@std@@KAXXZ ENDP ; std::vector<enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T249037 = -80						; size = 28
$T249036 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ PROC ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T249037[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T249036[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T249036[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T249037[ebp]
	push	eax
	lea	ecx, DWORD PTR $T249036[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T249036[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T249036[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T249037[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@4:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T249037[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T249036[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@VCvFormationSlotEntry@@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@KAXXZ ENDP ; std::vector<CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >::_Xlen
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:PROC		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_R0?AVout_of_range@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_Eout_of_range@std@@UAEPAXI@Z ; std::out_of_range::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$4
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
_TEXT	SEGMENT
tv177 = -256						; size = 4
tv165 = -252						; size = 4
_this$ = -248						; size = 4
$T250065 = -244						; size = 4
$T250059 = -240						; size = 4
$T249989 = -236						; size = 4
$T249980 = -232						; size = 4
$T249315 = -136						; size = 4
$T249314 = -132						; size = 4
__Tmp$249313 = -125					; size = 1
$T249290 = -124						; size = 4
$T249283 = -120						; size = 4
$T249213 = -116						; size = 4
$T249177 = -112						; size = 4
$T249172 = -108						; size = 4
$T249144 = -104						; size = 4
$T249068 = -100						; size = 4
$T249059 = -96						; size = 28
$T249058 = -68						; size = 40
__Fixnodeparent$ = -28					; size = 4
__Pnode$ = -24						; size = 4
__Fixnode$ = -20					; size = 4
__Erasednode$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 764  : 		{	// erase element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 765  : 
; 766  :  #if _HAS_ITERATOR_DEBUGGING
; 767  : 		if (_Where._Mycont != this || _Isnil(_Where._Mynode()))
; 768  : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 769  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 770  : 		++_Where;	// save successor iterator for return
; 771  : 		_Orphan_ptr(*this, _Erasednode);
; 772  : 
; 773  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 774  : 		if (_Isnil(_Where._Mynode()))

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T249068[ebp], eax
	mov	ecx, DWORD PTR $T249068[ebp]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN55@erase@4

; 775  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

	push	OFFSET ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
	lea	ecx, DWORD PTR $T249059[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR $T249059[ebp]
	push	eax
	lea	ecx, DWORD PTR $T249058[ebp]
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR $T249058[ebp], OFFSET ??_7out_of_range@std@@6B@
	push	OFFSET __TI3?AVout_of_range@std@@
	lea	ecx, DWORD PTR $T249058[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T249059[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ

; 776  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

$LN55@erase@4:
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Erasednode$[ebp], edx

; 777  : 		++_Where;	// save successor iterator for return

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Inc

; 778  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 779  : 
; 780  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 781  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 782  : 		_Nodeptr _Pnode = _Erasednode;

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 783  : 
; 784  : 		if (_Isnil(_Left(_Pnode)))

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	je	SHORT $LN67@erase@4

; 785  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Fixnode$[ebp], edx
	jmp	SHORT $LN38@erase@4

; 786  : 		else if (_Isnil(_Right(_Pnode)))

$LN67@erase@4:
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN71@erase@4

; 787  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 788  : 		else

	jmp	SHORT $LN38@erase@4

; 789  : 			{	// two subtrees, must lift successor node to replace erased
; 790  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node

$LN71@erase@4:
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Pnode$[ebp], edx

; 791  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Fixnode$[ebp], ecx
$LN38@erase@4:

; 792  : 			}
; 793  : 
; 794  : 		if (_Pnode == _Erasednode)

	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	$LN137@erase@4

; 795  : 			{	// at most one subtree, relink it
; 796  : 			_Fixnodeparent = _Parent(_Erasednode);

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 797  : 			if (!_Isnil(_Fixnode))

	mov	edx, DWORD PTR __Fixnode$[ebp]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN81@erase@4

; 798  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 799  : 
; 800  : 			if (_Root() == _Erasednode)

$LN81@erase@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN89@erase@4

; 801  : 				_Root() = _Fixnode;	// link down from root

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN32@erase@4

; 802  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

$LN89@erase@4:
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN93@erase@4

; 803  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [edx], eax

; 804  : 			else

	jmp	SHORT $LN32@erase@4

; 805  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

$LN93@erase@4:
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN32@erase@4:

; 806  : 
; 807  : 			if (_Lmost() == _Erasednode)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T249144[ebp], ecx
	mov	edx, DWORD PTR $T249144[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN115@erase@4

; 808  : 				_Lmost() = _Isnil(_Fixnode)
; 809  : 					? _Fixnodeparent	// smallest is parent of erased node
; 810  : 					: _Min(_Fixnode);	// smallest in relinked subtree

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN43@erase@4
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN44@erase@4
$LN43@erase@4:
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR $T249172[ebp], ecx
$LN107@erase@4:
	mov	edx, DWORD PTR $T249172[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN103@erase@4
	mov	edx, DWORD PTR $T249172[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T249172[ebp], eax
	jmp	SHORT $LN107@erase@4
$LN103@erase@4:
	mov	ecx, DWORD PTR $T249172[ebp]
	mov	DWORD PTR tv165[ebp], ecx
$LN44@erase@4:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T249177[ebp], eax
	mov	ecx, DWORD PTR $T249177[ebp]
	mov	edx, DWORD PTR tv165[ebp]
	mov	DWORD PTR [ecx], edx

; 811  : 
; 812  : 			if (_Rmost() == _Erasednode)

$LN115@erase@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN28@erase@4

; 813  : 				_Rmost() = _Isnil(_Fixnode)
; 814  : 					? _Fixnodeparent	// largest is parent of erased node
; 815  : 					: _Max(_Fixnode);	// largest in relinked subtree

	mov	eax, DWORD PTR __Fixnode$[ebp]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	je	SHORT $LN45@erase@4
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv177[ebp], edx
	jmp	SHORT $LN131@erase@4
$LN45@erase@4:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR $T249213[ebp], eax
$LN127@erase@4:
	mov	ecx, DWORD PTR $T249213[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN123@erase@4
	mov	ecx, DWORD PTR $T249213[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T249213[ebp], edx
	jmp	SHORT $LN127@erase@4
$LN123@erase@4:
	mov	eax, DWORD PTR $T249213[ebp]
	mov	DWORD PTR tv177[ebp], eax
$LN131@erase@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR tv177[ebp]
	mov	DWORD PTR [edx+8], eax
$LN28@erase@4:

; 816  : 			}
; 817  : 		else

	jmp	$LN192@erase@4

; 818  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 819  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

$LN137@erase@4:
	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 820  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 821  : 
; 822  : 			if (_Pnode == _Right(_Erasednode))

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN145@erase@4

; 823  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Fixnodeparent$[ebp], eax

; 824  : 			else

	jmp	SHORT $LN161@erase@4

; 825  : 				{	// successor further down, link in place of erased
; 826  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's

$LN145@erase@4:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], edx

; 827  : 				if (!_Isnil(_Fixnode))

	mov	eax, DWORD PTR __Fixnode$[ebp]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN151@erase@4

; 828  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [edx+4], eax

; 829  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

$LN151@erase@4:
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [ecx], edx

; 830  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 831  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 832  : 				}
; 833  : 
; 834  : 			if (_Root() == _Erasednode)

$LN161@erase@4:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN169@erase@4

; 835  : 				_Root() = _Pnode;	// link down from root

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN183@erase@4

; 836  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

$LN169@erase@4:
	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T249283[ebp], ecx
	mov	edx, DWORD PTR $T249283[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN179@erase@4

; 837  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T249290[ebp], edx
	mov	eax, DWORD PTR $T249290[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 838  : 			else

	jmp	SHORT $LN183@erase@4

; 839  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

$LN179@erase@4:
	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 840  : 
; 841  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

$LN183@erase@4:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 842  : 			_STD swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

	mov	edx, DWORD PTR __Erasednode$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR $T249315[ebp], edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR $T249314[ebp], eax
	mov	ecx, DWORD PTR $T249314[ebp]
	cmp	ecx, DWORD PTR $T249315[ebp]
	je	SHORT $LN192@erase@4
	mov	edx, DWORD PTR $T249314[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR __Tmp$249313[ebp], al
	mov	ecx, DWORD PTR $T249314[ebp]
	mov	edx, DWORD PTR $T249315[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR $T249315[ebp]
	mov	dl, BYTE PTR __Tmp$249313[ebp]
	mov	BYTE PTR [ecx], dl

; 843  : 			}
; 844  : 
; 845  : 		if (_Color(_Erasednode) == _Black)

$LN192@erase@4:
	mov	eax, DWORD PTR __Erasednode$[ebp]
	movsx	ecx, BYTE PTR [eax+32]
	cmp	ecx, 1
	jne	$LN595@erase@4

; 846  : 			{	// erasing black link, must recolor/rebalance tree
; 847  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 848  : 				_Fixnodeparent = _Parent(_Fixnode))

	jmp	SHORT $LN196@erase@4
$LN194@erase@4:
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], eax
$LN196@erase@4:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Fixnode$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	je	$LN586@erase@4
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	cmp	edx, 1
	jne	$LN586@erase@4

; 849  : 				if (_Fixnode == _Left(_Fixnodeparent))

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	$LN395@erase@4

; 850  : 					{	// fixup left subtree
; 851  : 					_Pnode = _Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Pnode$[ebp], eax

; 852  : 					if (_Color(_Pnode) == _Red)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	jne	SHORT $LN263@erase@4

; 853  : 						{	// rotate red up from right subtree
; 854  : 						_Color(_Pnode) = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+32], 1

; 855  : 						_Color(_Fixnodeparent) = _Red;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [ecx+32], 0

; 856  : 						_Lrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lrotate

; 857  : 						_Pnode = _Right(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 858  : 						}
; 859  : 
; 860  : 					if (_Isnil(_Pnode))

$LN263@erase@4:
	mov	edx, DWORD PTR __Pnode$[ebp]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	je	SHORT $LN267@erase@4

; 861  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 862  : 					else if (_Color(_Left(_Pnode)) == _Black

	jmp	$LN12@erase@4

; 863  : 						&& _Color(_Right(_Pnode)) == _Black)

$LN267@erase@4:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+32]
	cmp	ecx, 1
	jne	SHORT $LN277@erase@4
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+32]
	cmp	ecx, 1
	jne	SHORT $LN277@erase@4

; 864  : 						{	// redden right subtree with black children
; 865  : 						_Color(_Pnode) = _Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+32], 0

; 866  : 						_Fixnode = _Fixnodeparent;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 867  : 						}
; 868  : 					else

	jmp	SHORT $LN12@erase@4

; 869  : 						{	// must rearrange right subtree
; 870  : 						if (_Color(_Right(_Pnode)) == _Black)

$LN277@erase@4:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+32]
	cmp	eax, 1
	jne	SHORT $LN338@erase@4

; 871  : 							{	// rotate red up from left sub-subtree
; 872  : 							_Color(_Left(_Pnode)) = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+32], 1

; 873  : 							_Color(_Pnode) = _Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+32], 0

; 874  : 							_Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Rrotate

; 875  : 							_Pnode = _Right(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Pnode$[ebp], eax

; 876  : 							}
; 877  : 
; 878  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

$LN338@erase@4:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	al, BYTE PTR [edx+32]
	mov	BYTE PTR [ecx+32], al

; 879  : 						_Color(_Fixnodeparent) = _Black;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [ecx+32], 1

; 880  : 						_Color(_Right(_Pnode)) = _Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	BYTE PTR [eax+32], 1

; 881  : 						_Lrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lrotate

; 882  : 						break;	// tree now recolored/rebalanced

	jmp	$LN586@erase@4
$LN12@erase@4:

; 883  : 						}
; 884  : 					}
; 885  : 				else

	jmp	$LN8@erase@4

; 886  : 					{	// fixup right subtree
; 887  : 					_Pnode = _Left(_Fixnodeparent);

$LN395@erase@4:
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax

; 888  : 					if (_Color(_Pnode) == _Red)

	mov	ecx, DWORD PTR __Pnode$[ebp]
	movsx	edx, BYTE PTR [ecx+32]
	test	edx, edx
	jne	SHORT $LN454@erase@4

; 889  : 						{	// rotate red up from left subtree
; 890  : 						_Color(_Pnode) = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+32], 1

; 891  : 						_Color(_Fixnodeparent) = _Red;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [ecx+32], 0

; 892  : 						_Rrotate(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Rrotate

; 893  : 						_Pnode = _Left(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 894  : 						}
; 895  : 					if (_Isnil(_Pnode))

$LN454@erase@4:
	mov	edx, DWORD PTR __Pnode$[ebp]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	je	SHORT $LN458@erase@4

; 896  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], ecx

; 897  : 					else if (_Color(_Right(_Pnode)) == _Black

	jmp	$LN8@erase@4

; 898  : 						&& _Color(_Left(_Pnode)) == _Black)

$LN458@erase@4:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+32]
	cmp	ecx, 1
	jne	SHORT $LN468@erase@4
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+32]
	cmp	ecx, 1
	jne	SHORT $LN468@erase@4

; 899  : 						{	// redden left subtree with black children
; 900  : 						_Color(_Pnode) = _Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+32], 0

; 901  : 						_Fixnode = _Fixnodeparent;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 902  : 						}
; 903  : 					else

	jmp	SHORT $LN8@erase@4

; 904  : 						{	// must rearrange left subtree
; 905  : 						if (_Color(_Left(_Pnode)) == _Black)

$LN468@erase@4:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+32]
	cmp	eax, 1
	jne	SHORT $LN529@erase@4

; 906  : 							{	// rotate red up from right sub-subtree
; 907  : 							_Color(_Right(_Pnode)) = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+32], 1

; 908  : 							_Color(_Pnode) = _Red;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+32], 0

; 909  : 							_Lrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lrotate

; 910  : 							_Pnode = _Left(_Fixnodeparent);

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax

; 911  : 							}
; 912  : 
; 913  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

$LN529@erase@4:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	al, BYTE PTR [edx+32]
	mov	BYTE PTR [ecx+32], al

; 914  : 						_Color(_Fixnodeparent) = _Black;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [ecx+32], 1

; 915  : 						_Color(_Left(_Pnode)) = _Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+32], 1

; 916  : 						_Rrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Rrotate

; 917  : 						break;	// tree now recolored/rebalanced

	jmp	SHORT $LN586@erase@4
$LN8@erase@4:

; 918  : 						}
; 919  : 					}

	jmp	$LN194@erase@4

; 920  : 
; 921  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

$LN586@erase@4:
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	BYTE PTR [edx+32], 1

; 922  : 			}
; 923  : 
; 924  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node

$LN595@erase@4:
	mov	eax, DWORD PTR __Erasednode$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR $T249989[ebp], eax
	mov	ecx, DWORD PTR $T249989[ebp]
	add	ecx, 4
	mov	DWORD PTR $T249980[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T249980[ebp]
	call	?_Tidy@?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@IAEXXZ ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::_Tidy
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN588@erase@4
	mov	eax, DWORD PTR __Erasednode$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN588@erase@4:

; 925  : 		this->_Alnod.deallocate(_Erasednode, 1);

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 926  : 
; 927  : 		if (0 < _Mysize)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jbe	SHORT $LN1@erase@4

; 928  : 			--_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN1@erase@4:

; 929  : 
; 930  : 		return (_Make_iter(_Where));	// return successor iterator

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T250065[ebp], eax
	mov	ecx, DWORD PTR $T250065[ebp]
	mov	DWORD PTR $T250059[ebp], ecx
	mov	edx, DWORD PTR $T250059[ebp]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN42@erase@4:

; 931  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$0:
	lea	ecx, DWORD PTR $T249059[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z$4:
	mov	ecx, DWORD PTR $T249980[ebp]
	jmp	??1?$_Vector_val@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@XZ
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@Vconst_iterator@12@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::erase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1out_of_range@std@@UAE@XZ PROC			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 133  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@

; 134  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC			; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	edx, DWORD PTR ___flags$[ebp]
	and	edx, 1
	je	SHORT $LN1@scalar@22
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@22:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0out_of_range@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0out_of_range@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0out_of_range@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0out_of_range@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC			; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0out_of_range@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7out_of_range@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0out_of_range@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0out_of_range@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0out_of_range@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T250159 = -12						; size = 4
$T250152 = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1285 : 		{	// promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		_Nodeptr _Pnode = _Right(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1287 : 		_Right(_Wherenode) = _Left(_Pnode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 1288 : 
; 1289 : 		if (!_Isnil(_Left(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN24@Lrotate

; 1290 : 			_Parent(_Left(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1291 : 		_Parent(_Pnode) = _Parent(_Wherenode);

$LN24@Lrotate:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1292 : 
; 1293 : 		if (_Wherenode == _Root())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN34@Lrotate

; 1294 : 			_Root() = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN46@Lrotate

; 1295 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

$LN34@Lrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T250152[ebp], eax
	mov	ecx, DWORD PTR $T250152[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN44@Lrotate

; 1296 : 			_Left(_Parent(_Wherenode)) = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T250159[ebp], ecx
	mov	edx, DWORD PTR $T250159[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx], eax

; 1297 : 		else

	jmp	SHORT $LN46@Lrotate

; 1298 : 			_Right(_Parent(_Wherenode)) = _Pnode;

$LN44@Lrotate:
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1299 : 
; 1300 : 		_Left(_Pnode) = _Wherenode;

$LN46@Lrotate:
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [ecx], edx

; 1301 : 		_Parent(_Wherenode) = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1302 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Lrotate
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T250235 = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1329 : 		{	// promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1330 : 		_Nodeptr _Pnode = _Left(_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 1331 : 		_Left(_Wherenode) = _Right(_Pnode);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 1332 : 
; 1333 : 		if (!_Isnil(_Right(_Pnode)))

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN24@Rrotate

; 1334 : 			_Parent(_Right(_Pnode)) = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1335 : 		_Parent(_Pnode) = _Parent(_Wherenode);

$LN24@Rrotate:
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 1336 : 
; 1337 : 		if (_Wherenode == _Root())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN36@Rrotate

; 1338 : 			_Root() = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN46@Rrotate

; 1339 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

$LN36@Rrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN42@Rrotate

; 1340 : 			_Right(_Parent(_Wherenode)) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1341 : 		else

	jmp	SHORT $LN46@Rrotate

; 1342 : 			_Left(_Parent(_Wherenode)) = _Pnode;

$LN42@Rrotate:
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T250235[ebp], eax
	mov	ecx, DWORD PTR $T250235[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx

; 1343 : 
; 1344 : 		_Right(_Pnode) = _Wherenode;

$LN46@Rrotate:
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1345 : 		_Parent(_Wherenode) = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1346 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z$0
__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z$5
__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z
_TEXT	SEGMENT
tv86 = -56						; size = 4
_this$ = -52						; size = 4
$T250271 = -48						; size = 4
$T250245 = -28						; size = 4
$T250244 = -24						; size = 4
__Wherenode$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1408 : 		{	// allocate a node with pointers, value, and color

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1409 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

	push	0
	push	1
	call	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>
	add	esp, 8
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1410 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1411 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR $T250245[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T250245[ebp], 0
	je	SHORT $LN4@Buynode@2
	mov	ecx, DWORD PTR $T250245[ebp]
	mov	edx, DWORD PTR __Larg$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR $T250245[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR $T250245[ebp]
	mov	eax, DWORD PTR __Rarg$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T250245[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR $T250271[ebp], ecx
	mov	edx, DWORD PTR $T250271[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	add	edx, 4
	push	edx
	mov	ecx, DWORD PTR $T250271[ebp]
	add	ecx, 4
	call	??0?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@QAE@ABV01@@Z ; std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
	mov	eax, DWORD PTR $T250245[ebp]
	mov	cl, BYTE PTR __Carg$[ebp]
	mov	BYTE PTR [eax+32], cl
	mov	edx, DWORD PTR $T250245[ebp]
	mov	BYTE PTR [edx+33], 0
	mov	eax, DWORD PTR $T250245[ebp]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN5@Buynode@2
$LN4@Buynode@2:
	mov	DWORD PTR tv86[ebp], 0
$LN5@Buynode@2:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T250244[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN6@Buynode@2
__catch$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z$0:

; 1412 : 		_CATCH_ALL
; 1413 : 		this->_Alnod.deallocate(_Wherenode, 1);

	mov	edx, DWORD PTR __Wherenode$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1414 : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1415 : 		_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z$1
	ret	0
$LN6@Buynode@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z$1:

; 1416 : 		return (_Wherenode);

	mov	eax, DWORD PTR __Wherenode$[ebp]
$LN3@Buynode@2:

; 1417 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z$2:
	mov	eax, DWORD PTR __Wherenode$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250245[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Buynode
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 63   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp

; 64   : 	}

	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
tv91 = -32						; size = 4
tv145 = -28						; size = 4
_this$ = -24						; size = 4
$T250317 = -19						; size = 1
$T250316 = -18						; size = 1
$T250308 = -17						; size = 1
$T250304 = -16						; size = 4
$T250297 = -8						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >, COMDAT
; _this$ = ecx

; 52   : 		{	// construct traits from _Parg and allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T250316[ebp]
	mov	DWORD PTR $T250297[ebp], eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR $T250317[ebp], dl
	lea	eax, DWORD PTR $T250308[ebp]
	mov	DWORD PTR $T250304[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv91[ebp], edx

; 53   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z PROC ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 144  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>
	add	esp, 8

; 146  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>::allocate
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xtree
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T250371 = -16						; size = 4
$T250350 = -12						; size = 4
$T250343 = -8						; size = 4
__Pnode$223678 = -4					; size = 4
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 320  : 			{	// move to node with next smaller value

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 
; 322  :  #if _HAS_ITERATOR_DEBUGGING
; 323  : 			if (this->_Mycont == 0
; 324  : 				|| _Ptr == 0)
; 325  : 				{
; 326  : 				_DEBUG_ERROR("map/set iterator not decrementable");
; 327  : 				_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 				}
; 329  :  #else
; 330  : 			_SCL_SECURE_VALIDATE(this->_Has_container());
; 331  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 332  : 
; 333  : 			if (_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN9@Dec

; 334  : 			{
; 335  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax

; 336  :    				if (_Isnil(_Ptr))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	je	SHORT $LN8@Dec

; 337  : #if _HAS_ITERATOR_DEBUGGING
; 338  : 				{
; 339  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 340  : 					_SCL_SECURE_OUT_OF_RANGE;
; 341  : 				}
; 342  : #elif _SECURE_SCL
; 343  : 				{
; 344  :     				_SCL_SECURE_OUT_OF_RANGE;
; 345  : 				}
; 346  : #else
; 347  : 				return;	// begin() shouldn't be incremented, don't move

	jmp	$LN10@Dec
$LN8@Dec:

; 348  : #endif
; 349  : 			}

	jmp	$LN10@Dec
$LN9@Dec:

; 350  : 			else if (!_Isnil(_Left(_Ptr)))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T250343[ebp], edx
	mov	eax, DWORD PTR $T250343[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	jne	SHORT $LN34@Dec

; 351  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T250350[ebp], ecx
	mov	edx, DWORD PTR $T250350[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T250371[ebp], eax
$LN30@Dec:
	mov	ecx, DWORD PTR $T250371[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN26@Dec
	mov	ecx, DWORD PTR $T250371[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T250371[ebp], edx
	jmp	SHORT $LN30@Dec
$LN26@Dec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T250371[ebp]
	mov	DWORD PTR [eax], ecx

; 352  : 			else

	jmp	SHORT $LN10@Dec

; 353  : 				{	// climb looking for left subtree
; 354  : 				_Nodeptr _Pnode;
; 355  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 356  : 					&& _Ptr == _Left(_Pnode))

$LN34@Dec:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$223678[ebp], ecx
	mov	edx, DWORD PTR __Pnode$223678[ebp]
	movsx	eax, BYTE PTR [edx+33]
	test	eax, eax
	jne	SHORT $LN40@Dec
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$223678[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN40@Dec

; 357  : 					_Ptr = _Pnode;	// ==> parent while left subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$223678[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN34@Dec

; 358  : 				if (_Isnil(_Ptr))

$LN40@Dec:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN2@Dec

; 359  :  #if _HAS_ITERATOR_DEBUGGING
; 360  :  					{
; 361  : 					_DEBUG_ERROR("map/set iterator not decrementable");
; 362  : 					_SCL_SECURE_OUT_OF_RANGE;
; 363  : 					}
; 364  :  #elif _SECURE_SCL
; 365  : 					{
; 366  : 					_SCL_SECURE_OUT_OF_RANGE;
; 367  : 					}
; 368  :  #else
; 369  : 					return;	// begin() shouldn't be incremented, don't move

	jmp	SHORT $LN10@Dec

; 370  :  #endif
; 371  : 				else

	jmp	SHORT $LN10@Dec
$LN2@Dec:

; 372  : 					_Ptr = _Pnode;	// ==> parent if not head

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$223678[ebp]
	mov	DWORD PTR [eax], ecx
$LN10@Dec:

; 373  : 				}
; 374  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Dec
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T250420 = -16						; size = 4
$T250399 = -12						; size = 4
$T250392 = -8						; size = 4
__Pnode$223690 = -4					; size = 4
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 377  : 			{	// move to node with next larger value

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 378  : 
; 379  :  #if _HAS_ITERATOR_DEBUGGING
; 380  : 			if (this->_Mycont == 0
; 381  : 				|| _Ptr == 0
; 382  : 				|| _Isnil(_Ptr))
; 383  : 				{
; 384  : 				_DEBUG_ERROR("map/set iterator not incrementable");
; 385  : 				_SCL_SECURE_OUT_OF_RANGE;
; 386  : 				}
; 387  :  #else
; 388  : 			_SCL_SECURE_VALIDATE(this->_Has_container());
; 389  : 			if (_Isnil(_Ptr))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	je	SHORT $LN6@Inc
	jmp	$LN7@Inc
$LN6@Inc:

; 390  : 				{
; 391  : 				_SCL_SECURE_OUT_OF_RANGE;
; 392  : 				// end() shouldn't be incremented, don't move if _SCL_SECURE is not turned on
; 393  : 				}
; 394  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 395  : 
; 396  : 			else if (!_Isnil(_Right(_Ptr)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 8
	mov	DWORD PTR $T250392[ebp], ecx
	mov	edx, DWORD PTR $T250392[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN27@Inc

; 397  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	DWORD PTR $T250399[ebp], eax
	mov	ecx, DWORD PTR $T250399[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T250420[ebp], edx
$LN23@Inc:
	mov	eax, DWORD PTR $T250420[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	jne	SHORT $LN19@Inc
	mov	eax, DWORD PTR $T250420[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T250420[ebp], ecx
	jmp	SHORT $LN23@Inc
$LN19@Inc:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T250420[ebp]
	mov	DWORD PTR [edx], eax

; 398  : 			else

	jmp	SHORT $LN7@Inc

; 399  : 				{	// climb looking for right subtree
; 400  : 				_Nodeptr _Pnode;
; 401  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 402  : 					&& _Ptr == _Right(_Pnode))

$LN27@Inc:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$223690[ebp], eax
	mov	ecx, DWORD PTR __Pnode$223690[ebp]
	movsx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	jne	SHORT $LN1@Inc
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$223690[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN1@Inc

; 403  : 					_Ptr = _Pnode;	// ==> parent while right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$223690[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN27@Inc
$LN1@Inc:

; 404  : 				_Ptr = _Pnode;	// ==> parent (head if end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$223690[ebp]
	mov	DWORD PTR [edx], eax
$LN7@Inc:

; 405  : 				}
; 406  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::const_iterator::_Inc
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\map
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
tv87 = -20						; size = 4
_this$ = -16						; size = 4
$T250441 = -9						; size = 1
$T250437 = -8						; size = 4
__Parg$ = 8						; size = 1
__Al$ = 12						; size = 1
??0?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0>::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0>, COMDAT
; _this$ = ecx

; 39   : 		{	// construct with specified comparator

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T250441[ebp]
	mov	DWORD PTR $T250437[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv87[ebp], ecx

; 40   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@QAE@U?$less@H@1@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0>::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0>
_TEXT	ENDS
EXTRN	__imp_?PushArgument@String@Localization@@QAE_NPBD@Z:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvlocalization\include\cvlocalization.h
;	COMDAT ??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_val$ = 12						; size = 4
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z PROC	; operator<<<char const *>, COMDAT

; 490  : {

	push	ebp
	mov	ebp, esp

; 491  : 	s.PushArgument(val);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _s$[ebp]
	call	DWORD PTR __imp_?PushArgument@String@Localization@@QAE_NPBD@Z

; 492  : 	return s;

	mov	eax, DWORD PTR _s$[ebp]

; 493  : }

	pop	ebp
	ret	0
??$?6PBD@@YAAAVString@Localization@@AAV01@ABQBD@Z ENDP	; operator<<<char const *>
_TEXT	ENDS
EXTRN	__imp__vsprintf_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdio.h
;	COMDAT ??$sprintf_s@$0CAA@@@YAHAAY0CAA@DPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0CAA@@@YAHAAY0CAA@DPBDZZ PROC		; sprintf_s<512>, COMDAT

; 322  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(int, sprintf_s, vsprintf_s, char, _Dest, _In_z_ _Printf_format_string_ const char *, _Format)

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	512					; 00000200H
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__vsprintf_s
	add	esp, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
??$sprintf_s@$0CAA@@@YAHAAY0CAA@DPBDZZ ENDP		; sprintf_s<512>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ
_TEXT	SEGMENT
__ArgList$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ PROC		; sprintf_s<256>, COMDAT

; 322  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(int, sprintf_s, vsprintf_s, char, _Dest, _In_z_ _Printf_format_string_ const char *, _Format)

	push	ebp
	mov	ebp, esp
	push	ecx
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	256					; 00000100H
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	DWORD PTR __imp__vsprintf_s
	add	esp, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
??$sprintf_s@$0BAA@@@YAHAAY0BAA@DPBDZZ ENDP		; sprintf_s<256>
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdatabaseutility.h
;	COMDAT ??$InitializeArray@_N@CvDatabaseUtility@@QAEXAAPA_NPBD_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T250460 = -12						; size = 4
_i$250455 = -8						; size = 4
_count$ = -4						; size = 4
_pArray$ = 8						; size = 4
_szTableName$ = 12					; size = 4
_default$ = 16						; size = 1
??$InitializeArray@_N@CvDatabaseUtility@@QAEXAAPA_NPBD_N@Z PROC ; CvDatabaseUtility::InitializeArray<bool>, COMDAT
; _this$ = ecx

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 	size_t count = MaxRows(szTableName);

	mov	eax, DWORD PTR _szTableName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MaxRows@CvDatabaseUtility@@QAEHPBD@Z	; CvDatabaseUtility::MaxRows
	mov	DWORD PTR _count$[ebp], eax

; 181  : 
; 182  : 	//This is a bit of a hack to support empty tables.
; 183  : 	//For example, the "Automates" table will be empty during a tutorial.
; 184  : 	//We cannot simply NULL out the array because WAY too much code blindly assumes SOMETHING will be there..
; 185  : 	//Instead we allocate room for 1 element and just roll with it.
; 186  : 
; 187  : 	//CvAssertMsg(count > 0, DB.ErrorMessage());
; 188  : 	if(count == 0)

	cmp	DWORD PTR _count$[ebp], 0
	jne	SHORT $LN1@Initialize

; 189  : 		count = 1;

	mov	DWORD PTR _count$[ebp], 1
$LN1@Initialize:

; 190  : 
; 191  : 	InitializeArray(pArray, count, default);

	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T250460[ebp], eax
	mov	edx, DWORD PTR _pArray$[ebp]
	mov	eax, DWORD PTR $T250460[ebp]
	mov	DWORD PTR [edx], eax
	movzx	ecx, BYTE PTR _default$[ebp]
	cvtsi2ss xmm0, ecx
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@Initialize
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pArray$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@Initialize
$LN8@Initialize:
	mov	DWORD PTR _i$250455[ebp], 0
	jmp	SHORT $LN6@Initialize
$LN5@Initialize:
	mov	edx, DWORD PTR _i$250455[ebp]
	add	edx, 1
	mov	DWORD PTR _i$250455[ebp], edx
$LN6@Initialize:
	mov	eax, DWORD PTR _i$250455[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN4@Initialize
	mov	ecx, DWORD PTR _pArray$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$250455[ebp]
	mov	cl, BYTE PTR _default$[ebp]
	mov	BYTE PTR [edx+eax], cl
	jmp	SHORT $LN5@Initialize
$LN4@Initialize:

; 192  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$InitializeArray@_N@CvDatabaseUtility@@QAEXAAPA_NPBD_N@Z ENDP ; CvDatabaseUtility::InitializeArray<bool>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAVCvString@@PAV1@@stdext@@YAPAVCvString@@PAV1@00@Z
_TEXT	SEGMENT
$T250512 = -34						; size = 1
$T250511 = -33						; size = 1
$T250510 = -32						; size = 4
$T250509 = -28						; size = 4
$T250495 = -21						; size = 1
$T250494 = -20						; size = 4
$T250493 = -16						; size = 4
$T250492 = -12						; size = 4
__Cat$250500 = -8					; size = 1
$T250498 = -7						; size = 1
$T250497 = -6						; size = 1
__Cat$250470 = -4					; size = 1
$T250466 = -3						; size = 1
$T250465 = -2						; size = 1
$T250464 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAVCvString@@PAV1@@stdext@@YAPAVCvString@@PAV1@00@Z PROC ; stdext::_Unchecked_move_backward<CvString *,CvString *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T250464[ebp], al
	mov	cl, BYTE PTR __Cat$250470[ebp]
	mov	BYTE PTR $T250465[ebp], cl
	mov	dl, BYTE PTR $T250464[ebp]
	mov	BYTE PTR $T250512[ebp], dl
	mov	al, BYTE PTR $T250466[ebp]
	mov	BYTE PTR $T250511[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T250510[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T250509[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T250497[ebp], al
	mov	cl, BYTE PTR __Cat$250500[ebp]
	mov	BYTE PTR $T250498[ebp], cl
	mov	dl, BYTE PTR $T250497[ebp]
	mov	BYTE PTR $T250495[ebp], dl
	mov	eax, DWORD PTR $T250510[ebp]
	mov	DWORD PTR $T250494[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T250493[ebp], ecx
	mov	edx, DWORD PTR $T250509[ebp]
	mov	DWORD PTR $T250492[ebp], edx
$LN12@Unchecked_:
	mov	eax, DWORD PTR $T250492[ebp]
	cmp	eax, DWORD PTR $T250493[ebp]
	je	SHORT $LN7@Unchecked_
	mov	ecx, DWORD PTR $T250493[ebp]
	sub	ecx, 28					; 0000001cH
	mov	DWORD PTR $T250493[ebp], ecx
	mov	edx, DWORD PTR $T250494[ebp]
	sub	edx, 28					; 0000001cH
	mov	DWORD PTR $T250494[ebp], edx
	mov	eax, DWORD PTR $T250493[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250494[ebp]
	call	DWORD PTR __imp_??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
	jmp	SHORT $LN12@Unchecked_
$LN7@Unchecked_:
	mov	eax, DWORD PTR $T250494[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAVCvString@@PAV1@@stdext@@YAPAVCvString@@PAV1@00@Z ENDP ; stdext::_Unchecked_move_backward<CvString *,CvString *>
_TEXT	ENDS
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R0?AVbad_alloc@std@@@8
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
xdata$x	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_Ebad_alloc@std@@UAEPAXI@Z ; std::bad_alloc::`vftable'
	DD	FLAT:?what@exception@std@@UBEPBDXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
CONST	ENDS
;	COMDAT ??$_Allocate@VCvString@@@std@@YAPAVCvString@@IPAV1@@Z
_TEXT	SEGMENT
$T250519 = -16						; size = 4
$T250515 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VCvString@@@std@@YAPAVCvString@@IPAV1@@Z PROC ; std::_Allocate<CvString>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 28					; 0000001cH
	jae	SHORT $LN2@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T250519[ebp], 0
	lea	eax, DWORD PTR $T250519[ebp]
	push	eax
	lea	ecx, DWORD PTR $T250515[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T250515[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T250515[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 28					; 0000001cH
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VCvString@@@std@@YAPAVCvString@@IPAV1@@Z ENDP ; std::_Allocate<CvString>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
_TEXT	ENDS
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 380  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 381  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN1@scalar@23
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@23:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@UProductionCostModifiers@@@std@@YAPAUProductionCostModifiers@@IPAU1@@Z
_TEXT	SEGMENT
$T250533 = -16						; size = 4
$T250529 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UProductionCostModifiers@@@std@@YAPAUProductionCostModifiers@@IPAU1@@Z PROC ; std::_Allocate<ProductionCostModifiers>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@2

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@2
$LN3@Allocate@2:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 12					; 0000000cH
	jae	SHORT $LN2@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T250533[ebp], 0
	lea	eax, DWORD PTR $T250533[ebp]
	push	eax
	lea	ecx, DWORD PTR $T250529[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T250529[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T250529[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 12					; 0000000cH
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@2:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UProductionCostModifiers@@@std@@YAPAUProductionCostModifiers@@IPAU1@@Z ENDP ; std::_Allocate<ProductionCostModifiers>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@W4AnimationPathTypes@@@std@@YAPAW4AnimationPathTypes@@IPAW41@@Z
_TEXT	SEGMENT
$T250540 = -16						; size = 4
$T250536 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@W4AnimationPathTypes@@@std@@YAPAW4AnimationPathTypes@@IPAW41@@Z PROC ; std::_Allocate<enum AnimationPathTypes>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@3

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@3
$LN3@Allocate@3:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@3

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T250540[ebp], 0
	lea	eax, DWORD PTR $T250540[ebp]
	push	eax
	lea	ecx, DWORD PTR $T250536[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T250536[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T250536[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@3:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@3:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@W4AnimationPathTypes@@@std@@YAPAW4AnimationPathTypes@@IPAW41@@Z ENDP ; std::_Allocate<enum AnimationPathTypes>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@VCvFormationSlotEntry@@@std@@YAPAVCvFormationSlotEntry@@IPAV1@@Z
_TEXT	SEGMENT
$T250547 = -16						; size = 4
$T250543 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@VCvFormationSlotEntry@@@std@@YAPAVCvFormationSlotEntry@@IPAV1@@Z PROC ; std::_Allocate<CvFormationSlotEntry>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@4

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@4
$LN3@Allocate@4:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 16					; 00000010H
	jae	SHORT $LN2@Allocate@4

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T250547[ebp], 0
	lea	eax, DWORD PTR $T250547[ebp]
	push	eax
	lea	ecx, DWORD PTR $T250543[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T250543[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T250543[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@4:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 4
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@4:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@VCvFormationSlotEntry@@@std@@YAPAVCvFormationSlotEntry@@IPAV1@@Z ENDP ; std::_Allocate<CvFormationSlotEntry>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
$T250554 = -16						; size = 4
$T250550 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@5

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@5
$LN3@Allocate@5:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 36					; 00000024H
	jae	SHORT $LN2@Allocate@5

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T250554[ebp], 0
	lea	eax, DWORD PTR $T250554[ebp]
	push	eax
	lea	ecx, DWORD PTR $T250550[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T250550[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T250550[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@5:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	imul	edx, 36					; 00000024H
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@5:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@HV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@U?$less@H@2@V?$allocator@U?$pair@$$CBHV?$vector@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<int,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,std::less<int>,std::allocator<std::pair<int const ,std::vector<ProductionCostModifiers,std::allocator<ProductionCostModifiers> > > >,0> >::_Node>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T250579 = -28						; size = 4
__Vptr$250585 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CvFormationSlotEntry *,unsigned int,CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil
$LN5@Uninit_fil:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$250585[ebp], eax
	mov	ecx, DWORD PTR __Vptr$250585[ebp]
	mov	DWORD PTR $T250579[ebp], ecx
	cmp	DWORD PTR $T250579[ebp], 0
	je	SHORT $LN18@Uninit_fil
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T250579[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR $T250579[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil
$LN18@Uninit_fil:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil:
	jmp	SHORT $LN5@Uninit_fil
$LN4@Uninit_fil:
	jmp	SHORT $LN10@Uninit_fil
__catch$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil
$LN2@Uninit_fil:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil
$LN1@Uninit_fil:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil
	ret	0
$LN10@Uninit_fil:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAVCvFormationSlotEntry@@IV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAXPAVCvFormationSlotEntry@@IABV1@AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CvFormationSlotEntry *,unsigned int,CvFormationSlotEntry,std::allocator<CvFormationSlotEntry> >
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$5
__unwindtable$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv89 = -36						; size = 4
$T250638 = -32						; size = 4
$T250637 = -28						; size = 4
__Vptr$250646 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<CvString *,unsigned int,CvString,std::allocator<CvString> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@2
$LN5@Uninit_fil@2:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@2:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@2

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$250646[ebp], eax
	mov	ecx, DWORD PTR __Vptr$250646[ebp]
	mov	DWORD PTR $T250638[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T250638[ebp], 0
	je	SHORT $LN18@Uninit_fil@2
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T250638[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR $T250638[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN19@Uninit_fil@2
$LN18@Uninit_fil@2:
	mov	DWORD PTR tv89[ebp], 0
$LN19@Uninit_fil@2:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T250637[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN5@Uninit_fil@2
$LN4@Uninit_fil@2:
	jmp	SHORT $LN10@Uninit_fil@2
__catch$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@2
$LN2@Uninit_fil@2:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_fil@2:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@2

; 407  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	ecx, ecx
	and	ecx, 1
	je	SHORT $LN26@Uninit_fil@2
	mov	edx, DWORD PTR __Next$[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN26@Uninit_fil@2:
	jmp	SHORT $LN2@Uninit_fil@2
$LN1@Uninit_fil@2:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@2
	ret	0
$LN10@Uninit_fil@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@2:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$250646[ebp]
	push	eax
	mov	ecx, DWORD PTR $T250638[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAVCvString@@IV1@V?$allocator@VCvString@@@std@@@std@@YAXPAVCvString@@IABV1@AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CvString *,unsigned int,CvString,std::allocator<CvString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T250711 = -28						; size = 4
__Vptr$250709 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<ProductionCostModifiers *,unsigned int,ProductionCostModifiers,std::allocator<ProductionCostModifiers> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@3
$LN5@Uninit_fil@3:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@3:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@3

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$250709[ebp], eax
	mov	ecx, DWORD PTR __Vptr$250709[ebp]
	mov	DWORD PTR $T250711[ebp], ecx
	cmp	DWORD PTR $T250711[ebp], 0
	je	SHORT $LN18@Uninit_fil@3
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR $T250711[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T250711[ebp]
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN14@Uninit_fil@3
$LN18@Uninit_fil@3:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_fil@3:
	jmp	SHORT $LN5@Uninit_fil@3
$LN4@Uninit_fil@3:
	jmp	SHORT $LN10@Uninit_fil@3
__catch$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@3
$LN2@Uninit_fil@3:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_fil@3:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@3

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@3
$LN1@Uninit_fil@3:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@3
	ret	0
$LN10@Uninit_fil@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@3:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAUProductionCostModifiers@@IU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAXPAUProductionCostModifiers@@IABU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<ProductionCostModifiers *,unsigned int,ProductionCostModifiers,std::allocator<ProductionCostModifiers> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv83 = -32						; size = 4
$T250760 = -28						; size = 4
__Vptr$250758 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<enum AnimationPathTypes *,unsigned int,enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >, COMDAT

; 393  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 394  : 
; 395  :  #if _HAS_ITERATOR_DEBUGGING
; 396  : //	if (_Count < 0)
; 397  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 398  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 399  : 
; 400  : 	_FwdIt _Next = _First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 401  : 
; 402  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 403  : 	for (; 0 < _Count; --_Count, ++_First)

	jmp	SHORT $LN6@Uninit_fil@4
$LN5@Uninit_fil@4:
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_fil@4:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN4@Uninit_fil@4

; 404  : 		_Al.construct(_First, _Val);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Vptr$250758[ebp], eax
	mov	ecx, DWORD PTR __Vptr$250758[ebp]
	mov	DWORD PTR $T250760[ebp], ecx
	cmp	DWORD PTR $T250760[ebp], 0
	je	SHORT $LN18@Uninit_fil@4
	mov	edx, DWORD PTR $T250760[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T250760[ebp]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN14@Uninit_fil@4
$LN18@Uninit_fil@4:
	mov	DWORD PTR tv83[ebp], 0
$LN14@Uninit_fil@4:
	jmp	SHORT $LN5@Uninit_fil@4
$LN4@Uninit_fil@4:
	jmp	SHORT $LN10@Uninit_fil@4
__catch$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 405  : 	_CATCH_ALL
; 406  : 	for (; _Next != _First; ++_Next)

	jmp	SHORT $LN3@Uninit_fil@4
$LN2@Uninit_fil@4:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 4
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_fil@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	je	SHORT $LN1@Uninit_fil@4

; 407  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_fil@4
$LN1@Uninit_fil@4:

; 408  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 409  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Uninit_fil@4
	ret	0
$LN10@Uninit_fil@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Uninit_fil@4:

; 410  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_fill_n@PAW4AnimationPathTypes@@IW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAXPAW4AnimationPathTypes@@IABW41@AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<enum AnimationPathTypes *,unsigned int,enum AnimationPathTypes,std::allocator<enum AnimationPathTypes> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv95 = -36						; size = 4
$T250829 = -32						; size = 4
$T250824 = -28						; size = 4
__Vptr$250822 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_const_iterator<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN16@Uninit_cop
$LN5@Uninit_cop:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN16@Uninit_cop:
	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@Uninit_cop

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T250829[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$250822[ebp], edx
	mov	eax, DWORD PTR __Vptr$250822[ebp]
	mov	DWORD PTR $T250824[ebp], eax
	cmp	DWORD PTR $T250824[ebp], 0
	je	SHORT $LN26@Uninit_cop
	mov	ecx, DWORD PTR $T250829[ebp]
	mov	edx, DWORD PTR $T250824[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T250824[ebp]
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN22@Uninit_cop
$LN26@Uninit_cop:
	mov	DWORD PTR tv95[ebp], 0
$LN22@Uninit_cop:
	jmp	SHORT $LN5@Uninit_cop
$LN4@Uninit_cop:
	jmp	SHORT $LN10@Uninit_cop
__catch$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop
$LN2@Uninit_cop:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop
$LN1@Uninit_cop:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@std@@PAUProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@2@@std@@YAPAUProductionCostModifiers@@V?$_Vector_const_iterator@UProductionCostModifiers@@V?$allocator@UProductionCostModifiers@@@std@@@0@0PAU1@AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_const_iterator<ProductionCostModifiers,std::allocator<ProductionCostModifiers> >,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
; Function compile flags: /Odtp
;	COMDAT ??$unchecked_uninitialized_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@stdext@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@std@@@Z
_TEXT	SEGMENT
__Cat$250853 = -3					; size = 1
$T250850 = -2						; size = 1
$T250849 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@stdext@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T250849[ebp], al
	mov	cl, BYTE PTR __Cat$250853[ebp]
	mov	BYTE PTR $T250850[ebp], cl
	movzx	edx, BYTE PTR $T250849[ebp]
	push	edx
	movzx	eax, BYTE PTR $T250850[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@stdext@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@stdext@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@std@@@Z
_TEXT	SEGMENT
__Cat$250861 = -3					; size = 1
$T250858 = -2						; size = 1
$T250857 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@stdext@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<CvString *,CvString *,std::allocator<CvString> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T250857[ebp], al
	mov	cl, BYTE PTR __Cat$250861[ebp]
	mov	BYTE PTR $T250858[ebp], cl
	movzx	edx, BYTE PTR $T250857[ebp]
	push	edx
	movzx	eax, BYTE PTR $T250858[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<CvString *,CvString *,std::allocator<CvString> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@stdext@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<CvString *,CvString *,std::allocator<CvString> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@stdext@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@std@@@Z
_TEXT	SEGMENT
__Cat$250869 = -3					; size = 1
$T250866 = -2						; size = 1
$T250865 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@stdext@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T250865[ebp], al
	mov	cl, BYTE PTR __Cat$250869[ebp]
	mov	BYTE PTR $T250866[ebp], cl
	movzx	edx, BYTE PTR $T250865[ebp]
	push	edx
	movzx	eax, BYTE PTR $T250866[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@stdext@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@stdext@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@std@@@Z
_TEXT	SEGMENT
__Cat$250877 = -3					; size = 1
$T250874 = -2						; size = 1
$T250873 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@stdext@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T250873[ebp], al
	mov	cl, BYTE PTR __Cat$250877[ebp]
	mov	BYTE PTR $T250874[ebp], cl
	movzx	edx, BYTE PTR $T250873[ebp]
	push	edx
	movzx	eax, BYTE PTR $T250874[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
	add	esp, 24					; 00000018H

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@stdext@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv143 = -36						; size = 4
$T250935 = -32						; size = 4
$T250927 = -28						; size = 4
__Vptr$250933 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *,std::allocator<unsigned int> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN18@Uninit_cop@2
$LN5@Uninit_cop@2:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN18@Uninit_cop@2:
	mov	eax, DWORD PTR __First$[ebp]
	xor	ecx, ecx
	cmp	eax, DWORD PTR __Last$[ebp]
	sete	cl
	movzx	edx, cl
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN4@Uninit_cop@2

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T250935[ebp], ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$250933[ebp], edx
	mov	eax, DWORD PTR __Vptr$250933[ebp]
	mov	DWORD PTR $T250927[ebp], eax
	cmp	DWORD PTR $T250927[ebp], 0
	je	SHORT $LN30@Uninit_cop@2
	mov	ecx, DWORD PTR $T250927[ebp]
	mov	edx, DWORD PTR $T250935[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR $T250927[ebp]
	mov	DWORD PTR tv143[ebp], ecx
	jmp	SHORT $LN26@Uninit_cop@2
$LN30@Uninit_cop@2:
	mov	DWORD PTR tv143[ebp], 0
$LN26@Uninit_cop@2:
	jmp	SHORT $LN5@Uninit_cop@2
$LN4@Uninit_cop@2:
	jmp	SHORT $LN10@Uninit_cop@2
__catch$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@2
$LN2@Uninit_cop@2:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 4
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@2:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@2

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@2
$LN1@Uninit_cop@2:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@2:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@V?$_Vector_iterator@IV?$allocator@I@std@@@std@@PAIV?$allocator@I@2@@std@@YAPAIV?$_Vector_iterator@IV?$allocator@I@std@@@0@0PAIAAV?$allocator@I@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::_Vector_iterator<unsigned int,std::allocator<unsigned int> >,unsigned int *,std::allocator<unsigned int> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T250977 = -28						; size = 4
__Vptr$250983 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@3
$LN5@Uninit_cop@3:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@3:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@3

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$250983[ebp], ecx
	mov	edx, DWORD PTR __Vptr$250983[ebp]
	mov	DWORD PTR $T250977[ebp], edx
	cmp	DWORD PTR $T250977[ebp], 0
	je	SHORT $LN18@Uninit_cop@3
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T250977[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T250977[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@3
$LN18@Uninit_cop@3:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@3:
	jmp	SHORT $LN5@Uninit_cop@3
$LN4@Uninit_cop@3:
	jmp	SHORT $LN10@Uninit_cop@3
__catch$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@3
$LN2@Uninit_cop@3:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@3:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@3

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@3
$LN1@Uninit_cop@3:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@3:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAVCvFormationSlotEntry@@PAV1@V?$allocator@VCvFormationSlotEntry@@@std@@@std@@YAPAVCvFormationSlotEntry@@PAV1@00AAV?$allocator@VCvFormationSlotEntry@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvFormationSlotEntry *,CvFormationSlotEntry *,std::allocator<CvFormationSlotEntry> >
;	COMDAT xdata$x
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredllutil\include\cvstring.h
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__tryblocktable$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$5
__unwindtable$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv89 = -36						; size = 4
$T251036 = -32						; size = 4
$T251035 = -28						; size = 4
__Vptr$251044 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<CvString *,CvString *,std::allocator<CvString> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@4
$LN5@Uninit_cop@4:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@4:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@4

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$251044[ebp], ecx
	mov	edx, DWORD PTR __Vptr$251044[ebp]
	mov	DWORD PTR $T251036[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T251036[ebp], 0
	je	SHORT $LN18@Uninit_cop@4
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251036[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR $T251036[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN19@Uninit_cop@4
$LN18@Uninit_cop@4:
	mov	DWORD PTR tv89[ebp], 0
$LN19@Uninit_cop@4:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T251035[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN5@Uninit_cop@4
$LN4@Uninit_cop@4:
	jmp	SHORT $LN10@Uninit_cop@4
__catch$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@4
$LN2@Uninit_cop@4:
	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_cop@4:
	mov	ecx, DWORD PTR __Next$[ebp]
	cmp	ecx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@4

; 134  : 		_Al.destroy(_Next);

	mov	ecx, DWORD PTR __Next$[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	xor	edx, edx
	and	edx, 1
	je	SHORT $LN26@Uninit_cop@4
	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN26@Uninit_cop@4:
	jmp	SHORT $LN2@Uninit_cop@4
$LN1@Uninit_cop@4:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@4:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2:
	mov	eax, DWORD PTR __Vptr$251044[ebp]
	push	eax
	mov	ecx, DWORD PTR $T251036[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAVCvString@@PAV1@V?$allocator@VCvString@@@std@@@std@@YAPAVCvString@@PAV1@00AAV?$allocator@VCvString@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CvString *,CvString *,std::allocator<CvString> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv84 = -32						; size = 4
$T251109 = -28						; size = 4
__Vptr$251107 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@5
$LN5@Uninit_cop@5:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@5:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@5

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$251107[ebp], ecx
	mov	edx, DWORD PTR __Vptr$251107[ebp]
	mov	DWORD PTR $T251109[ebp], edx
	cmp	DWORD PTR $T251109[ebp], 0
	je	SHORT $LN18@Uninit_cop@5
	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR $T251109[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR $T251109[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN14@Uninit_cop@5
$LN18@Uninit_cop@5:
	mov	DWORD PTR tv84[ebp], 0
$LN14@Uninit_cop@5:
	jmp	SHORT $LN5@Uninit_cop@5
$LN4@Uninit_cop@5:
	jmp	SHORT $LN10@Uninit_cop@5
__catch$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@5
$LN2@Uninit_cop@5:
	mov	edx, DWORD PTR __Next$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Next$[ebp], edx
$LN3@Uninit_cop@5:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@5

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@5
$LN1@Uninit_cop@5:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@5:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAUProductionCostModifiers@@PAU1@V?$allocator@UProductionCostModifiers@@@std@@@std@@YAPAUProductionCostModifiers@@PAU1@00AAV?$allocator@UProductionCostModifiers@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<ProductionCostModifiers *,ProductionCostModifiers *,std::allocator<ProductionCostModifiers> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__catchsym$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv83 = -32						; size = 4
$T251158 = -28						; size = 4
__Vptr$251156 = -24					; size = 4
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >, COMDAT

; 124  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 125  : 	_DEBUG_RANGE(_First, _Last);
; 126  : 	_DEBUG_POINTER(_Dest);
; 127  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 128  : 
; 129  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 130  : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN6@Uninit_cop@6
$LN5@Uninit_cop@6:
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 4
	mov	DWORD PTR __First$[ebp], edx
$LN6@Uninit_cop@6:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_cop@6

; 131  : 		_Al.construct(_Dest, *_First);

	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Vptr$251156[ebp], ecx
	mov	edx, DWORD PTR __Vptr$251156[ebp]
	mov	DWORD PTR $T251158[ebp], edx
	cmp	DWORD PTR $T251158[ebp], 0
	je	SHORT $LN18@Uninit_cop@6
	mov	eax, DWORD PTR $T251158[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T251158[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN14@Uninit_cop@6
$LN18@Uninit_cop@6:
	mov	DWORD PTR tv83[ebp], 0
$LN14@Uninit_cop@6:
	jmp	SHORT $LN5@Uninit_cop@6
$LN4@Uninit_cop@6:
	jmp	SHORT $LN10@Uninit_cop@6
__catch$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$0:

; 132  : 	_CATCH_ALL
; 133  : 	for (; _Next != _Dest; ++_Next)

	jmp	SHORT $LN3@Uninit_cop@6
$LN2@Uninit_cop@6:
	mov	ecx, DWORD PTR __Next$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Next$[ebp], ecx
$LN3@Uninit_cop@6:
	mov	edx, DWORD PTR __Next$[ebp]
	cmp	edx, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_cop@6

; 134  : 		_Al.destroy(_Next);

	jmp	SHORT $LN2@Uninit_cop@6
$LN1@Uninit_cop@6:

; 135  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 136  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_cop@6:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z$1:

; 137  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_cop@6:

; 138  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_copy@PAW4AnimationPathTypes@@PAW41@V?$allocator@W4AnimationPathTypes@@@std@@@std@@YAPAW4AnimationPathTypes@@PAW41@00AAV?$allocator@W4AnimationPathTypes@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<enum AnimationPathTypes *,enum AnimationPathTypes *,std::allocator<enum AnimationPathTypes> >
; Function compile flags: /Odtp
; File d:\sources\lekmod_git\checkout\lekmod_dll\cvgamecoredll_expansion2\cvdatabaseutility.h
;	COMDAT ?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T251183 = -8						; size = 4
_i$172577 = -4						; size = 4
_pArray$ = 8						; size = 4
_count$ = 12						; size = 4
_iDefault$ = 16						; size = 4
?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z PROC	; CvDatabaseUtility::InitializeArray, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 	CvAssertMsg(count > 0, "Initializing array to 0 or less items.");
; 122  : #ifdef AUI_WARNING_FIXES
; 123  : 	delete[] pArray;
; 124  : #endif
; 125  : 	pArray = FNEW(int[count], c_eCiv5GameplayDLL, 0);

	xor	ecx, ecx
	mov	eax, DWORD PTR _count$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T251183[ebp], eax
	mov	eax, DWORD PTR _pArray$[ebp]
	mov	ecx, DWORD PTR $T251183[ebp]
	mov	DWORD PTR [eax], ecx

; 126  : 	if(iDefault == 0)

	cmp	DWORD PTR _iDefault$[ebp], 0
	jne	SHORT $LN5@Initialize@2

; 127  : 	{
; 128  : 		ZeroMemory(pArray, sizeof(int) * count);

	mov	edx, DWORD PTR _count$[ebp]
	shl	edx, 2
	push	edx
	push	0
	mov	eax, DWORD PTR _pArray$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 129  : 	}
; 130  : 	else

	jmp	SHORT $LN6@Initialize@2
$LN5@Initialize@2:

; 131  : 	{
; 132  : 		for(size_t i = 0; i < count; ++i)

	mov	DWORD PTR _i$172577[ebp], 0
	jmp	SHORT $LN3@Initialize@2
$LN2@Initialize@2:
	mov	edx, DWORD PTR _i$172577[ebp]
	add	edx, 1
	mov	DWORD PTR _i$172577[ebp], edx
$LN3@Initialize@2:
	mov	eax, DWORD PTR _i$172577[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN6@Initialize@2

; 133  : 			pArray[i] = iDefault;

	mov	ecx, DWORD PTR _pArray$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$172577[ebp]
	mov	ecx, DWORD PTR _iDefault$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	jmp	SHORT $LN2@Initialize@2
$LN6@Initialize@2:

; 134  : 	}
; 135  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?InitializeArray@CvDatabaseUtility@@QAEXAAPAHIH@Z ENDP	; CvDatabaseUtility::InitializeArray
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0length_error@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0length_error@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0length_error@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7logic_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7length_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0length_error@std@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$??0length_error@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0length_error@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ$2
__ehfuncinfo$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T251260 = -44						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ PROC	; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >, COMDAT
; _this$ = ecx

; 1957 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1958 : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1959 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR $T251260[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T251260[ebp]
	call	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_empty<std::allocator<bool> >::~_Container_base_aux_alloc_empty<std::allocator<bool> >
__unwindfunclet$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ$2:
	mov	ecx, DWORD PTR $T251260[ebp]
	jmp	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@_NV?$allocator@_N@std@@@std@@QAE@XZ ENDP	; std::vector<bool,std::allocator<bool> >::~vector<bool,std::allocator<bool> >
; Function compile flags: /Odtp
;	COMDAT ?clear@?$vector@_NV?$allocator@_N@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -356						; size = 4
$T251365 = -76						; size = 4
$T251343 = -72						; size = 4
$T251368 = -68						; size = 4
$T251276 = -40						; size = 8
$T251275 = -32						; size = 8
$T251274 = -24						; size = 8
$T251273 = -16						; size = 8
$T251272 = -8						; size = 8
?clear@?$vector@_NV?$allocator@_N@std@@@std@@QAEXXZ PROC ; std::vector<bool,std::allocator<bool> >::clear, COMDAT
; _this$ = ecx

; 2243 : 		{	// erase all elements

	push	ebp
	mov	ebp, esp
	sub	esp, 356				; 00000164H
	mov	DWORD PTR _this$[ebp], ecx

; 2244 : 		erase(begin(), end());

	lea	eax, DWORD PTR $T251273[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ ; std::vector<bool,std::allocator<bool> >::end
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T251272[ebp], ecx
	mov	DWORD PTR $T251272[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251343[ebp], ecx
	mov	edx, DWORD PTR $T251343[ebp]
	mov	DWORD PTR $T251368[ebp], edx
	mov	eax, DWORD PTR $T251368[ebp]
	mov	DWORD PTR $T251365[ebp], eax
	mov	ecx, DWORD PTR $T251365[ebp]
	mov	DWORD PTR $T251275[ebp], ecx
	mov	DWORD PTR $T251275[ebp+4], 0
	mov	edx, DWORD PTR $T251275[ebp]
	mov	eax, DWORD PTR $T251275[ebp+4]
	mov	DWORD PTR $T251274[ebp], edx
	mov	DWORD PTR $T251274[ebp+4], eax
	mov	ecx, DWORD PTR $T251272[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T251272[ebp]
	push	edx
	mov	eax, DWORD PTR $T251274[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T251274[ebp]
	push	ecx
	lea	edx, DWORD PTR $T251276[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@0@Z ; std::vector<bool,std::allocator<bool> >::erase

; 2245 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@_NV?$allocator@_N@std@@@std@@QAEXXZ ENDP ; std::vector<bool,std::allocator<bool> >::clear
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
$T251894 = -24						; size = 4
$T251874 = -20						; size = 4
$T251852 = -16						; size = 4
$T251877 = -12						; size = 4
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ PROC ; std::vector<bool,std::allocator<bool> >::end, COMDAT
; _this$ = ecx

; 1995 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1996 : 		iterator _Tmp = begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T251852[ebp], ecx
	mov	edx, DWORD PTR $T251852[ebp]
	mov	DWORD PTR $T251877[ebp], edx
	mov	eax, DWORD PTR $T251877[ebp]
	mov	DWORD PTR $T251874[ebp], eax
	mov	ecx, DWORD PTR $T251874[ebp]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], 0

; 1997 : 		if (0 < _Mysize)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN1@end

; 1998 : 			_Tmp += _Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T251894[ebp], ecx
	mov	edx, DWORD PTR $T251894[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
$LN1@end:

; 1999 : 		return (_Tmp);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Tmp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2000 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ ENDP ; std::vector<bool,std::allocator<bool> >::end
_TEXT	ENDS
PUBLIC	?_Trim@?$vector@_NV?$allocator@_N@std@@@std@@IAEXI@Z ; std::vector<bool,std::allocator<bool> >::_Trim
PUBLIC	??$_Copy_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::random_access_iterator_tag>
PUBLIC	?_Make_iter@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@@Z ; std::vector<bool,std::allocator<bool> >::_Make_iter
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -372						; size = 4
__Tmp$252411 = -368					; size = 8
$T252390 = -360						; size = 4
$T252368 = -356						; size = 4
$T252393 = -352						; size = 4
$T252233 = -228						; size = 4
$T252211 = -224						; size = 4
$T252235 = -220						; size = 4
$T252199 = -216						; size = 8
$T252198 = -208						; size = 8
$T252197 = -200						; size = 8
__Cat$252192 = -164					; size = 1
$T252190 = -163						; size = 1
$T252189 = -162						; size = 1
$T252188 = -161						; size = 1
$T252044 = -136						; size = 4
$T252022 = -132						; size = 4
$T252046 = -128						; size = 4
$T251900 = -60						; size = 8
$T251899 = -52						; size = 8
$T251898 = -44						; size = 8
$T251897 = -36						; size = 8
__Off$ = -28						; size = 4
__Last$ = -24						; size = 8
__First$ = -16						; size = 8
__Next$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@0@Z PROC ; std::vector<bool,std::allocator<bool> >::erase, COMDAT
; _this$ = ecx

; 2221 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	mov	DWORD PTR _this$[ebp], ecx

; 2222 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@@Z ; std::vector<bool,std::allocator<bool> >::_Make_iter

; 2223 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	eax, DWORD PTR __Last_arg$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Last_arg$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@@Z ; std::vector<bool,std::allocator<bool> >::_Make_iter

; 2224 : 		size_type _Off = _First - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252022[ebp], ecx
	mov	edx, DWORD PTR $T252022[ebp]
	mov	DWORD PTR $T252046[ebp], edx
	mov	eax, DWORD PTR $T252046[ebp]
	mov	DWORD PTR $T252044[ebp], eax
	mov	ecx, DWORD PTR $T252044[ebp]
	mov	DWORD PTR $T251897[ebp], ecx
	mov	DWORD PTR $T251897[ebp+4], 0
	mov	edx, DWORD PTR __First$[ebp]
	sub	edx, DWORD PTR $T251897[ebp]
	sar	edx, 2
	shl	edx, 5
	add	edx, DWORD PTR __First$[ebp+4]
	sub	edx, DWORD PTR $T251897[ebp+4]
	mov	DWORD PTR __Off$[ebp], edx

; 2225 : 
; 2226 :  #if _HAS_ITERATOR_DEBUGGING
; 2227 : 		if (_Last < _First || end() < _Last)
; 2228 : 			_DEBUG_ERROR("vector<bool> erase iterator outside range");
; 2229 : 		iterator _Next = std::copy(_Last, end(), _First);
; 2230 : 		size_type _Newsize = _Next - begin();
; 2231 : 		_Orphan_range(_Newsize, _Mysize);
; 2232 : 		_Trim(_Newsize);
; 2233 : 
; 2234 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 2235 : 		iterator _Next = std::copy(_Last, end(), _First);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T252199[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR $T252199[ebp+4], ecx
	lea	edx, DWORD PTR $T251898[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ ; std::vector<bool,std::allocator<bool> >::end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T252198[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T252198[ebp+4], edx
	mov	eax, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T252197[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp+4]
	mov	DWORD PTR $T252197[ebp+4], ecx
	xor	edx, edx
	mov	BYTE PTR $T252188[ebp], dl
	mov	al, BYTE PTR __Cat$252192[ebp]
	mov	BYTE PTR $T252189[ebp], al
	movzx	ecx, BYTE PTR $T252188[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T252189[ebp]
	push	edx
	movzx	eax, BYTE PTR $T252190[ebp]
	push	eax
	mov	ecx, DWORD PTR $T252199[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T252199[ebp]
	push	edx
	mov	eax, DWORD PTR $T252198[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T252198[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252197[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T252197[ebp]
	push	eax
	lea	ecx, DWORD PTR __Next$[ebp]
	push	ecx
	call	??$_Copy_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::random_access_iterator_tag>
	add	esp, 40					; 00000028H

; 2236 : 		_Trim(_Next - begin());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252211[ebp], eax
	mov	ecx, DWORD PTR $T252211[ebp]
	mov	DWORD PTR $T252235[ebp], ecx
	mov	edx, DWORD PTR $T252235[ebp]
	mov	DWORD PTR $T252233[ebp], edx
	mov	eax, DWORD PTR $T252233[ebp]
	mov	DWORD PTR $T251899[ebp], eax
	mov	DWORD PTR $T251899[ebp+4], 0
	mov	ecx, DWORD PTR __Next$[ebp]
	sub	ecx, DWORD PTR $T251899[ebp]
	sar	ecx, 2
	shl	ecx, 5
	add	ecx, DWORD PTR __Next$[ebp+4]
	sub	ecx, DWORD PTR $T251899[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Trim@?$vector@_NV?$allocator@_N@std@@@std@@IAEXI@Z ; std::vector<bool,std::allocator<bool> >::_Trim

; 2237 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2238 : 
; 2239 : 		return (begin() + _Off);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T252368[ebp], eax
	mov	ecx, DWORD PTR $T252368[ebp]
	mov	DWORD PTR $T252393[ebp], ecx
	mov	edx, DWORD PTR $T252393[ebp]
	mov	DWORD PTR $T252390[ebp], edx
	mov	eax, DWORD PTR $T252390[ebp]
	mov	DWORD PTR $T251900[ebp], eax
	mov	DWORD PTR $T251900[ebp+4], 0
	mov	ecx, DWORD PTR $T251900[ebp]
	mov	edx, DWORD PTR $T251900[ebp+4]
	mov	DWORD PTR __Tmp$252411[ebp], ecx
	mov	DWORD PTR __Tmp$252411[ebp+4], edx
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$252411[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
	mov	ecx, DWORD PTR __Tmp$252411[ebp]
	mov	edx, DWORD PTR __Tmp$252411[ebp+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2240 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@0@Z ENDP ; std::vector<bool,std::allocator<bool> >::erase
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_empty<std::allocator<bool> >::~_Container_base_aux_alloc_empty<std::allocator<bool> >, COMDAT
; _this$ = ecx

; 627  : 	~_Container_base_aux_alloc_empty() { }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_base_aux_alloc_empty@V?$allocator@_N@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_empty<std::allocator<bool> >::~_Container_base_aux_alloc_empty<std::allocator<bool> >
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv88 = -132						; size = 4
tv145 = -128						; size = 4
_this$ = -124						; size = 4
$T252448 = -30						; size = 1
$T252435 = -29						; size = 1
$T252431 = -28						; size = 4
$T252424 = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T252448[ebp]
	mov	DWORD PTR $T252424[ebp], eax
	lea	ecx, DWORD PTR $T252435[ebp]
	mov	DWORD PTR $T252431[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv145[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 471  : 		_Buy(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy

; 472  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-124]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@IV?$allocator@I@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ PROC	; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::~_Vector_val<unsigned int,std::allocator<unsigned int> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@IV?$allocator@I@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<unsigned int,std::allocator<unsigned int> >::~_Vector_val<unsigned int,std::allocator<unsigned int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T252610 = -44						; size = 4
$T252587 = -40						; size = 4
$T252565 = -36						; size = 4
$T252590 = -32						; size = 4
$T252538 = -28						; size = 4
$T252516 = -24						; size = 4
$T252541 = -20						; size = 4
$T252504 = -16						; size = 8
__Tmp$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@@Z PROC ; std::vector<bool,std::allocator<bool> >::_Make_iter, COMDAT
; _this$ = ecx

; 2011 : 		{	// make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	DWORD PTR _this$[ebp], ecx

; 2012 : 		iterator _Tmp = begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252516[ebp], ecx
	mov	edx, DWORD PTR $T252516[ebp]
	mov	DWORD PTR $T252541[ebp], edx
	mov	eax, DWORD PTR $T252541[ebp]
	mov	DWORD PTR $T252538[ebp], eax
	mov	ecx, DWORD PTR $T252538[ebp]
	mov	DWORD PTR __Tmp$[ebp], ecx
	mov	DWORD PTR __Tmp$[ebp+4], 0

; 2013 : 		if (0 < _Mysize)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jbe	SHORT $LN1@Make_iter

; 2014 : 			_Tmp += _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T252565[ebp], ecx
	mov	edx, DWORD PTR $T252565[ebp]
	mov	DWORD PTR $T252590[ebp], edx
	mov	eax, DWORD PTR $T252590[ebp]
	mov	DWORD PTR $T252587[ebp], eax
	mov	ecx, DWORD PTR $T252587[ebp]
	mov	DWORD PTR $T252504[ebp], ecx
	mov	DWORD PTR $T252504[ebp+4], 0
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR $T252504[ebp]
	sar	edx, 2
	shl	edx, 5
	add	edx, DWORD PTR __Where$[ebp+4]
	sub	edx, DWORD PTR $T252504[ebp+4]
	mov	DWORD PTR $T252610[ebp], edx
	mov	eax, DWORD PTR $T252610[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
$LN1@Make_iter:

; 2015 : 		return (_Tmp);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Tmp$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Tmp$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2016 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Make_iter@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@V?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@@Z ENDP ; std::vector<bool,std::allocator<bool> >::_Make_iter
_TEXT	ENDS
PUBLIC	?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::erase
PUBLIC	?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ ; std::vector<bool,std::allocator<bool> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ?_Trim@?$vector@_NV?$allocator@_N@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv142 = -188						; size = 4
tv149 = -184						; size = 4
tv158 = -180						; size = 4
_this$ = -176						; size = 4
__Tmp$252707 = -120					; size = 4
$T252690 = -116						; size = 4
$T252674 = -112						; size = 4
$T252664 = -108						; size = 4
__Count$252646 = -36					; size = 4
__Maxsize$252639 = -32					; size = 4
$T252618 = -28						; size = 4
$T252617 = -24						; size = 4
$T252616 = -20						; size = 4
$T252615 = -16						; size = 4
$T252614 = -12						; size = 4
$T252613 = -8						; size = 4
__Words$ = -4						; size = 4
__Size$ = 8						; size = 4
?_Trim@?$vector@_NV?$allocator@_N@std@@@std@@IAEXI@Z PROC ; std::vector<bool,std::allocator<bool> >::_Trim, COMDAT
; _this$ = ecx

; 2360 : 		{	// trim base vector to exact length in bits

	push	ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	mov	DWORD PTR _this$[ebp], ecx

; 2361 : 		if (max_size() < _Size)

	mov	DWORD PTR __Count$252646[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$252646[ebp], 0
	jbe	SHORT $LN14@Trim
	mov	eax, DWORD PTR __Count$252646[ebp]
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN10@Trim
$LN14@Trim:
	mov	DWORD PTR tv158[ebp], 1
$LN10@Trim:
	mov	ecx, DWORD PTR tv158[ebp]
	mov	DWORD PTR __Maxsize$252639[ebp], ecx
	cmp	DWORD PTR __Maxsize$252639[ebp], 134217727 ; 07ffffffH
	jae	SHORT $LN8@Trim
	mov	edx, DWORD PTR __Maxsize$252639[ebp]
	shl	edx, 5
	mov	DWORD PTR tv149[ebp], edx
	jmp	SHORT $LN6@Trim
$LN8@Trim:
	mov	DWORD PTR tv149[ebp], -1
$LN6@Trim:
	mov	eax, DWORD PTR tv149[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN22@Trim

; 2362 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ ; std::vector<bool,std::allocator<bool> >::_Xlen

; 2363 : 		size_type _Words = _Nw(_Size);

$LN22@Trim:
	mov	ecx, DWORD PTR __Size$[ebp]
	add	ecx, 31					; 0000001fH
	shr	ecx, 5
	mov	DWORD PTR __Words$[ebp], ecx

; 2364 : 
; 2365 : 		if (_Words < _Myvec.size())

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR $T252664[ebp], edx
	mov	eax, DWORD PTR $T252664[ebp]
	mov	ecx, DWORD PTR $T252664[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	cmp	DWORD PTR __Words$[ebp], edx
	jae	SHORT $LN2@Trim

; 2366 : 			_Myvec.erase(_Myvec.begin() + _Words, _Myvec.end());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T252674[ebp], ecx
	mov	edx, DWORD PTR $T252674[ebp]
	mov	DWORD PTR $T252614[ebp], edx
	mov	eax, DWORD PTR $T252614[ebp]
	mov	DWORD PTR $T252613[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T252690[ebp], edx
	mov	eax, DWORD PTR $T252690[ebp]
	mov	DWORD PTR $T252616[ebp], eax
	mov	ecx, DWORD PTR $T252616[ebp]
	mov	DWORD PTR __Tmp$252707[ebp], ecx
	mov	edx, DWORD PTR __Words$[ebp]
	mov	eax, DWORD PTR __Tmp$252707[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR __Tmp$252707[ebp], ecx
	mov	edx, DWORD PTR __Tmp$252707[ebp]
	mov	DWORD PTR $T252617[ebp], edx
	mov	eax, DWORD PTR $T252617[ebp]
	mov	DWORD PTR $T252615[ebp], eax
	mov	ecx, DWORD PTR $T252613[ebp]
	push	ecx
	mov	edx, DWORD PTR $T252615[ebp]
	push	edx
	lea	eax, DWORD PTR $T252618[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::erase
$LN2@Trim:

; 2367 : 		_Mysize = _Size;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Size$[ebp]
	mov	DWORD PTR [ecx], edx

; 2368 : 		_Size %= _VBITS;

	mov	eax, DWORD PTR __Size$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR __Size$[ebp], edx

; 2369 : 		if (0 < _Size)

	cmp	DWORD PTR __Size$[ebp], 0
	jbe	SHORT $LN4@Trim

; 2370 : 			_Myvec[_Words - 1] &= (_Vbase)((1 << _Size) - 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Words$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR tv142[ebp], edx
	mov	eax, 1
	mov	ecx, DWORD PTR __Size$[ebp]
	shl	eax, cl
	sub	eax, 1
	mov	ecx, DWORD PTR tv142[ebp]
	and	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [edx], eax
$LN4@Trim:

; 2371 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Trim@?$vector@_NV?$allocator@_N@std@@@std@@IAEXI@Z ENDP ; std::vector<bool,std::allocator<bool> >::_Trim
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
tv94 = -96						; size = 4
_this$ = -92						; size = 4
__Count$252822 = -4					; size = 4
__Capacity$ = 8						; size = 4
?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy, COMDAT
; _this$ = ecx

; 1102 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	DWORD PTR _this$[ebp], ecx

; 1103 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 1104 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy@4

; 1105 : 			return (false);

	xor	al, al
	jmp	SHORT $LN5@Buy@4
	jmp	SHORT $LN3@Buy@4
$LN4@Buy@4:

; 1106 : 		else if (max_size() < _Capacity)

	mov	DWORD PTR __Count$252822[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$252822[ebp], 0
	jbe	SHORT $LN11@Buy@4
	mov	eax, DWORD PTR __Count$252822[ebp]
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN7@Buy@4
$LN11@Buy@4:
	mov	DWORD PTR tv94[ebp], 1
$LN7@Buy@4:
	mov	ecx, DWORD PTR tv94[ebp]
	cmp	ecx, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN23@Buy@4

; 1107 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen

; 1108 : 		else

	jmp	SHORT $LN3@Buy@4

; 1109 : 			{	// nonempty array, allocate storage
; 1110 : 			_Myfirst = this->_Alval.allocate(_Capacity);

$LN23@Buy@4:
	push	0
	mov	edx, DWORD PTR __Capacity$[ebp]
	push	edx
	call	??$_Allocate@I@std@@YAPAIIPAI@Z		; std::_Allocate<unsigned int>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1111 : 			_Mylast = _Myfirst;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx

; 1112 : 			_Myend = _Myfirst + _Capacity;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Capacity$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN3@Buy@4:

; 1113 : 			}
; 1114 : 		return (true);

	mov	al, 1
$LN5@Buy@4:

; 1115 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@IV?$allocator@I@std@@@std@@IAE_NI@Z ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Buy
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
$T252888 = -28						; size = 4
$T252887 = -24						; size = 4
$T252883 = -20						; size = 4
$T252882 = -16						; size = 4
$T252871 = -12						; size = 4
$T252870 = -8						; size = 4
__Cat$252878 = -2					; size = 1
$T252876 = -1						; size = 1
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy, COMDAT
; _this$ = ecx

; 1123 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 1124 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@3

; 1125 : 			{	// something to free, destroy and deallocate it
; 1126 : 
; 1127 :  #if _HAS_ITERATOR_DEBUGGING
; 1128 : 			this->_Orphan_all();
; 1129 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1130 : 
; 1131 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T252883[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T252882[ebp], ecx
	mov	edx, DWORD PTR $T252883[ebp]
	mov	DWORD PTR $T252871[ebp], edx
	mov	eax, DWORD PTR $T252882[ebp]
	mov	DWORD PTR $T252870[ebp], eax
	mov	cl, BYTE PTR __Cat$252878[ebp]
	mov	BYTE PTR $T252876[ebp], cl

; 1132 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	DWORD PTR $T252888[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T252887[ebp], eax
	mov	ecx, DWORD PTR $T252887[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@Tidy@3:

; 1133 : 			}
; 1134 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 1135 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
_TEXT	ENDS
PUBLIC	??_C@_0BG@EOMJEIFA@vector?$DMbool?$DO?5too?5long?$AA@ ; `string'
;	COMDAT ??_C@_0BG@EOMJEIFA@vector?$DMbool?$DO?5too?5long?$AA@
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
CONST	SEGMENT
??_C@_0BG@EOMJEIFA@vector?$DMbool?$DO?5too?5long?$AA@ DB 'vector<bool> to'
	DB	'o long', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ$2
__ehfuncinfo$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T252892 = -80						; size = 28
$T252891 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ PROC ; std::vector<bool,std::allocator<bool> >::_Xlen, COMDAT
; _this$ = ecx

; 2374 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2375 : 		_THROW(length_error, "vector<bool> too long");

	push	OFFSET ??_C@_0BG@EOMJEIFA@vector?$DMbool?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T252892[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T252891[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T252891[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T252892[ebp]
	push	eax
	lea	ecx, DWORD PTR $T252891[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T252891[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T252891[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T252892[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@5:

; 2376 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ$0:
	lea	ecx, DWORD PTR $T252892[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ$2:
	lea	ecx, DWORD PTR $T252891[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ ENDP ; std::vector<bool,std::allocator<bool> >::_Xlen
PUBLIC	??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z	; stdext::unchecked_copy<unsigned int *,unsigned int *>
; Function compile flags: /Odtp
;	COMDAT ?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -56						; size = 4
$T253003 = -52						; size = 4
$T252992 = -48						; size = 4
$T252991 = -44						; size = 4
__Cat$252998 = -40					; size = 1
$T252995 = -39						; size = 1
__Ptr$211089 = -12					; size = 4
__Last$ = -8						; size = 4
__First$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 4
__Last_arg$ = 16					; size = 4
?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::erase, COMDAT
; _this$ = ecx

; 1028 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	mov	DWORD PTR _this$[ebp], ecx

; 1029 : 		iterator _First = _Make_iter(_First_arg);

	mov	eax, DWORD PTR __First_arg$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1030 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	ecx, DWORD PTR __Last_arg$[ebp]
	mov	DWORD PTR __Last$[ebp], ecx

; 1031 : 
; 1032 : 		if (_First != _Last)

	mov	edx, DWORD PTR __First$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR __Last$[ebp]
	sete	al
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN1@erase@5

; 1033 : 			{	// worth doing, copy down over hole
; 1034 : 
; 1035 :  #if _HAS_ITERATOR_DEBUGGING
; 1036 : 			if (_Last < _First || _First._Mycont != this
; 1037 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1038 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1039 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1040 : 				_VEC_ITER_BASE(_First));
; 1041 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1042 : 
; 1043 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z ; stdext::unchecked_copy<unsigned int *,unsigned int *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$211089[ebp], eax

; 1046 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1047 : 
; 1048 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T253003[ebp], edx
	mov	eax, DWORD PTR $T253003[ebp]
	mov	DWORD PTR $T252992[ebp], eax
	mov	ecx, DWORD PTR __Ptr$211089[ebp]
	mov	DWORD PTR $T252991[ebp], ecx
	mov	dl, BYTE PTR __Cat$252998[ebp]
	mov	BYTE PTR $T252995[ebp], dl

; 1049 : 			_Mylast = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$211089[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@erase@5:

; 1050 : 			}
; 1051 : #if _HAS_ITERATOR_DEBUGGING
; 1052 :         return (iterator(_First._Myptr, this));
; 1053 : #else
; 1054 : 		return (_First);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1055 : #endif
; 1056 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::erase
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ$2
__ehfuncinfo$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T253007 = -80						; size = 28
$T253006 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen, COMDAT

; 1259 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1260 : 		_THROW(length_error, "vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T253007[ebp]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T253006[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	DWORD PTR $T253006[ebp], OFFSET ??_7logic_error@std@@6B@
	lea	eax, DWORD PTR $T253007[ebp]
	push	eax
	lea	ecx, DWORD PTR $T253006[ebp+12]
	call	DWORD PTR __imp_??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	DWORD PTR $T253006[ebp], OFFSET ??_7length_error@std@@6B@
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T253006[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T253007[ebp]
	call	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
$LN2@Xlen@6:

; 1261 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T253007[ebp]
	jmp	DWORD PTR __imp_??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__unwindfunclet$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ$2:
	lea	ecx, DWORD PTR $T253006[ebp]
	jmp	DWORD PTR __imp_??1exception@std@@UAE@XZ
__ehhandler$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
; Function compile flags: /Odtp
;	COMDAT ??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=, COMDAT
; _this$ = ecx

; 1602 : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1603 : 		if (_Off == 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jne	SHORT $LN3@operator@6

; 1604 : 			return (*this); // early out

	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN6@operator@6
$LN3@operator@6:

; 1605 : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Myptr != NULL);
; 1606 : 		if (_Off < 0)
; 1607 : 			{
; 1608 : 			_SCL_SECURE_VALIDATE_RANGE(this->_My_actual_offset() >= ((size_type)-_Off));
; 1609 : 			}
; 1610 : 		else
; 1611 : 			{
; 1612 : 			_SCL_SECURE_VALIDATE_RANGE((this->_My_actual_offset() + _Off) <= ((_MycontTy *)this->_Getmycont())->_Mysize);
; 1613 : 			}
; 1614 : 		if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)

	cmp	DWORD PTR __Off$[ebp], 0
	jge	SHORT $LN2@operator@6
	xor	eax, eax
	sub	eax, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], eax
	jae	SHORT $LN2@operator@6

; 1615 : 			{	/* add negative increment */
; 1616 : 			this->_Myoff += _Off;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1617 : 			this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;

	mov	edx, DWORD PTR _this$[ebp]
	or	eax, -1
	sub	eax, DWORD PTR [edx+4]
	shr	eax, 5
	lea	ecx, DWORD PTR [eax*4+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 1618 : 			this->_Myoff %= _VBITS;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1619 : 			}
; 1620 : 		else

	jmp	SHORT $LN1@operator@6
$LN2@operator@6:

; 1621 : 			{	/* add non-negative increment */
; 1622 : 			this->_Myoff += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR __Off$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1623 : 			this->_Myptr += this->_Myoff / _VBITS;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shr	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 1624 : 			this->_Myoff %= _VBITS;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@operator@6:

; 1625 : 			}
; 1626 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@operator@6:

; 1627 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
_TEXT	ENDS
EXTRN	__imp__memmove_s:PROC
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z
_TEXT	SEGMENT
$T253050 = -26						; size = 1
$T253049 = -25						; size = 1
$T253048 = -24						; size = 4
$T253047 = -20						; size = 4
__Off$253044 = -16					; size = 4
__Result$253045 = -12					; size = 4
__Cat$253036 = -4					; size = 1
$T253032 = -3						; size = 1
$T253031 = -2						; size = 1
$T253030 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z PROC	; stdext::unchecked_copy<unsigned int *,unsigned int *>, COMDAT

; 3604 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 3605 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3606 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T253030[ebp], al
	mov	cl, BYTE PTR __Cat$253036[ebp]
	mov	BYTE PTR $T253031[ebp], cl
	mov	dl, BYTE PTR $T253030[ebp]
	mov	BYTE PTR $T253050[ebp], dl
	mov	al, BYTE PTR $T253032[ebp]
	mov	BYTE PTR $T253049[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T253048[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T253047[ebp], edx
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR $T253047[ebp]
	sar	eax, 2
	mov	DWORD PTR __Off$253044[ebp], eax
	mov	ecx, DWORD PTR __Off$253044[ebp]
	mov	edx, DWORD PTR $T253048[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$253045[ebp], eax
	cmp	DWORD PTR __Off$253044[ebp], 0
	jle	SHORT $LN8@unchecked_
	mov	ecx, DWORD PTR __Off$253044[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR $T253047[ebp]
	push	edx
	mov	eax, DWORD PTR __Off$253044[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T253048[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN8@unchecked_:
	mov	eax, DWORD PTR __Result$253045[ebp]

; 3607 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAIPAI@stdext@@YAPAIPAI00@Z ENDP	; stdext::unchecked_copy<unsigned int *,unsigned int *>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@I@std@@YAPAIIPAI@Z
_TEXT	SEGMENT
$T253057 = -16						; size = 4
$T253053 = -12						; size = 12
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@I@std@@YAPAIIPAI@Z PROC			; std::_Allocate<unsigned int>, COMDAT

; 36   : 	{	// check for integer overflow

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 37   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN3@Allocate@6

; 38   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0
	jmp	SHORT $LN2@Allocate@6
$LN3@Allocate@6:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Count$[ebp]
	cmp	eax, 4
	jae	SHORT $LN2@Allocate@6

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	mov	DWORD PTR $T253057[ebp], 0
	lea	eax, DWORD PTR $T253057[ebp]
	push	eax
	lea	ecx, DWORD PTR $T253053[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	mov	DWORD PTR $T253053[ebp], OFFSET ??_7bad_alloc@std@@6B@
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T253053[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Allocate@6:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
$LN5@Allocate@6:

; 44   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@I@std@@YAPAIIPAI@Z ENDP			; std::_Allocate<unsigned int>
_TEXT	ENDS
PUBLIC	??4?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vb_reference<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator=
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$_Copy_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv202 = -44						; size = 4
$T253141 = -32						; size = 4
$T253140 = -28						; size = 4
$T253124 = -24						; size = 4
$T253123 = -20						; size = 4
$T253061 = -16						; size = 8
$T253060 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
??$_Copy_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::random_access_iterator_tag>, COMDAT

; 2469 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 2470 : 	_DEBUG_RANGE(_First, _Last);
; 2471 : 	for (; _First != _Last; ++_Dest, ++_First)

	jmp	SHORT $LN3@Copy_opt
$LN2@Copy_opt:
	cmp	DWORD PTR __Dest$[ebp+4], 31		; 0000001fH
	jae	SHORT $LN11@Copy_opt
	mov	eax, DWORD PTR __Dest$[ebp+4]
	add	eax, 1
	mov	DWORD PTR __Dest$[ebp+4], eax
	jmp	SHORT $LN6@Copy_opt
$LN11@Copy_opt:
	mov	DWORD PTR __Dest$[ebp+4], 0
	mov	ecx, DWORD PTR __Dest$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Dest$[ebp], ecx
$LN6@Copy_opt:
	cmp	DWORD PTR __First$[ebp+4], 31		; 0000001fH
	jae	SHORT $LN19@Copy_opt
	mov	edx, DWORD PTR __First$[ebp+4]
	add	edx, 1
	mov	DWORD PTR __First$[ebp+4], edx
	jmp	SHORT $LN3@Copy_opt
$LN19@Copy_opt:
	mov	DWORD PTR __First$[ebp+4], 0
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 4
	mov	DWORD PTR __First$[ebp], eax
$LN3@Copy_opt:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN26@Copy_opt
	mov	edx, DWORD PTR __First$[ebp+4]
	cmp	edx, DWORD PTR __Last$[ebp+4]
	jne	SHORT $LN26@Copy_opt
	mov	DWORD PTR tv202[ebp], 1
	jmp	SHORT $LN22@Copy_opt
$LN26@Copy_opt:
	mov	DWORD PTR tv202[ebp], 0
$LN22@Copy_opt:
	movzx	eax, BYTE PTR tv202[ebp]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@Copy_opt

; 2472 : 		*_Dest = *_First;

	mov	edx, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR $T253124[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T253123[ebp], eax
	mov	ecx, DWORD PTR $T253123[ebp]
	mov	DWORD PTR $T253061[ebp], ecx
	mov	edx, DWORD PTR $T253124[ebp]
	mov	DWORD PTR $T253061[ebp+4], edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	mov	DWORD PTR $T253141[ebp], eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T253140[ebp], ecx
	mov	edx, DWORD PTR $T253140[ebp]
	mov	DWORD PTR $T253060[ebp], edx
	mov	eax, DWORD PTR $T253141[ebp]
	mov	DWORD PTR $T253060[ebp+4], eax
	lea	ecx, DWORD PTR $T253061[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T253060[ebp]
	call	??4?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vb_reference<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator=
	jmp	$LN2@Copy_opt
$LN1@Copy_opt:

; 2473 : 	return (_Dest);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2474 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::random_access_iterator_tag>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??4?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv130 = -28						; size = 4
tv91 = -24						; size = 4
_this$ = -20						; size = 4
$T253221 = -16						; size = 4
$T253214 = -12						; size = 4
$T253209 = -5						; size = 1
$T253199 = -4						; size = 4
__Right$ = 8						; size = 4
??4?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Vb_reference<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator=, COMDAT
; _this$ = ecx

; 1470 : 		{	// assign _Vb_reference _Right to bit

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1471 : 		return (*this = bool(_Right));

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T253199[ebp], ecx
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+4]
	shl	eax, cl
	mov	ecx, DWORD PTR $T253199[ebp]
	and	eax, DWORD PTR [ecx]
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	BYTE PTR $T253209[ebp], al
	movzx	edx, BYTE PTR $T253209[ebp]
	test	edx, edx
	je	SHORT $LN10@operator@7
	mov	eax, DWORD PTR $T253214[ebp]
	mov	DWORD PTR tv91[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv91[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [eax+4]
	shl	edx, cl
	mov	eax, DWORD PTR tv91[ebp]
	or	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv91[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN11@operator@7
$LN10@operator@7:
	mov	edx, DWORD PTR $T253221[ebp]
	mov	DWORD PTR tv130[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv130[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, 1
	mov	ecx, DWORD PTR [edx+4]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR tv130[ebp]
	and	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv130[ebp]
	mov	DWORD PTR [edx], eax
$LN11@operator@7:
	mov	eax, DWORD PTR _this$[ebp]

; 1472 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Vb_reference<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator=
_TEXT	ENDS
PUBLIC	??$_Fill@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@_N@std@@YAXV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@0AB_N@Z ; std::_Fill<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,bool>
PUBLIC	?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@IAEIV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I@Z ; std::vector<bool,std::allocator<bool> >::_Insert_x
; Function compile flags: /Odtp
;	COMDAT ?_Insert_n@?$vector@_NV?$allocator@_N@std@@@std@@IAEXV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I_N@Z
_TEXT	SEGMENT
_this$ = -212						; size = 4
$T253558 = -208						; size = 8
$T253557 = -200						; size = 8
__Tmp$253470 = -172					; size = 8
$T253448 = -164						; size = 4
$T253426 = -160						; size = 4
$T253451 = -156						; size = 4
__Tmp$253411 = -152					; size = 8
$T253390 = -144						; size = 4
$T253368 = -140						; size = 4
$T253393 = -136						; size = 4
$T253242 = -36						; size = 8
$T253241 = -28						; size = 8
$T253240 = -20						; size = 8
$T253239 = -12						; size = 8
__Off$ = -4						; size = 4
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Val$ = 20						; size = 1
?_Insert_n@?$vector@_NV?$allocator@_N@std@@@std@@IAEXV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I_N@Z PROC ; std::vector<bool,std::allocator<bool> >::_Insert_n, COMDAT
; _this$ = ecx

; 2290 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	mov	DWORD PTR _this$[ebp], ecx

; 2291 : 		size_type _Off = _Insert_x(_Where, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@IAEIV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I@Z ; std::vector<bool,std::allocator<bool> >::_Insert_x
	mov	DWORD PTR __Off$[ebp], eax

; 2292 : 		std::fill(begin() + _Off, begin() + (_Off + _Count), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T253368[ebp], ecx
	mov	edx, DWORD PTR $T253368[ebp]
	mov	DWORD PTR $T253393[ebp], edx
	mov	eax, DWORD PTR $T253393[ebp]
	mov	DWORD PTR $T253390[ebp], eax
	mov	ecx, DWORD PTR $T253390[ebp]
	mov	DWORD PTR $T253239[ebp], ecx
	mov	DWORD PTR $T253239[ebp+4], 0
	mov	edx, DWORD PTR $T253239[ebp]
	mov	eax, DWORD PTR $T253239[ebp+4]
	mov	DWORD PTR __Tmp$253411[ebp], edx
	mov	DWORD PTR __Tmp$253411[ebp+4], eax
	mov	ecx, DWORD PTR __Off$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$253411[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
	mov	edx, DWORD PTR __Tmp$253411[ebp]
	mov	eax, DWORD PTR __Tmp$253411[ebp+4]
	mov	DWORD PTR $T253240[ebp], edx
	mov	DWORD PTR $T253240[ebp+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T253426[ebp], edx
	mov	eax, DWORD PTR $T253426[ebp]
	mov	DWORD PTR $T253451[ebp], eax
	mov	ecx, DWORD PTR $T253451[ebp]
	mov	DWORD PTR $T253448[ebp], ecx
	mov	edx, DWORD PTR $T253448[ebp]
	mov	DWORD PTR $T253241[ebp], edx
	mov	DWORD PTR $T253241[ebp+4], 0
	mov	eax, DWORD PTR $T253241[ebp]
	mov	ecx, DWORD PTR $T253241[ebp+4]
	mov	DWORD PTR __Tmp$253470[ebp], eax
	mov	DWORD PTR __Tmp$253470[ebp+4], ecx
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Tmp$253470[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
	mov	eax, DWORD PTR __Tmp$253470[ebp]
	mov	ecx, DWORD PTR __Tmp$253470[ebp+4]
	mov	DWORD PTR $T253242[ebp], eax
	mov	DWORD PTR $T253242[ebp+4], ecx
	mov	edx, DWORD PTR $T253240[ebp]
	mov	DWORD PTR $T253558[ebp], edx
	mov	eax, DWORD PTR $T253240[ebp+4]
	mov	DWORD PTR $T253558[ebp+4], eax
	mov	ecx, DWORD PTR $T253242[ebp]
	mov	DWORD PTR $T253557[ebp], ecx
	mov	edx, DWORD PTR $T253242[ebp+4]
	mov	DWORD PTR $T253557[ebp+4], edx
	lea	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T253558[ebp+4]
	push	ecx
	mov	edx, DWORD PTR $T253558[ebp]
	push	edx
	mov	eax, DWORD PTR $T253557[ebp+4]
	push	eax
	mov	ecx, DWORD PTR $T253557[ebp]
	push	ecx
	call	??$_Fill@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@_N@std@@YAXV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@0AB_N@Z ; std::_Fill<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,bool>
	add	esp, 20					; 00000014H

; 2293 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Insert_n@?$vector@_NV?$allocator@_N@std@@@std@@IAEXV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I_N@Z ENDP ; std::vector<bool,std::allocator<bool> >::_Insert_n
_TEXT	ENDS
PUBLIC	??$copy_backward@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00@Z ; std::copy_backward<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > > >
PUBLIC	?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
; Function compile flags: /Odtp
;	COMDAT ?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@IAEIV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I@Z
_TEXT	SEGMENT
tv191 = -348						; size = 4
tv200 = -344						; size = 4
_this$ = -340						; size = 4
__Tmp$253917 = -268					; size = 8
$T253895 = -260						; size = 4
$T253873 = -256						; size = 4
$T253898 = -252						; size = 4
$T253753 = -200						; size = 4
$T253664 = -148						; size = 4
$T253652 = -76						; size = 4
__Count$253645 = -72					; size = 4
__Maxsize$253638 = -68					; size = 4
$T253599 = -64						; size = 4
$T253577 = -60						; size = 4
$T253602 = -56						; size = 4
$T253565 = -52						; size = 8
$T253564 = -44						; size = 8
$T253563 = -36						; size = 8
$T253562 = -28						; size = 8
$T253561 = -20						; size = 8
__Oldend$214955 = -12					; size = 8
__Off$ = -4						; size = 4
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@IAEIV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I@Z PROC ; std::vector<bool,std::allocator<bool> >::_Insert_x, COMDAT
; _this$ = ecx

; 2296 : 		{	// make room to insert _Count elements at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	mov	DWORD PTR _this$[ebp], ecx

; 2297 : 		size_type _Off = _Where - begin();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T253577[ebp], ecx
	mov	edx, DWORD PTR $T253577[ebp]
	mov	DWORD PTR $T253602[ebp], edx
	mov	eax, DWORD PTR $T253602[ebp]
	mov	DWORD PTR $T253599[ebp], eax
	mov	ecx, DWORD PTR $T253599[ebp]
	mov	DWORD PTR $T253561[ebp], ecx
	mov	DWORD PTR $T253561[ebp+4], 0
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR $T253561[ebp]
	sar	edx, 2
	shl	edx, 5
	add	edx, DWORD PTR __Where$[ebp+4]
	sub	edx, DWORD PTR $T253561[ebp+4]
	mov	DWORD PTR __Off$[ebp], edx

; 2298 : 
; 2299 :  #if _HAS_ITERATOR_DEBUGGING
; 2300 : 		if (end() < _Where)
; 2301 : 			_DEBUG_ERROR("vector<bool> insert iterator outside range");
; 2302 : 		bool _Realloc = capacity() - size() < _Count;
; 2303 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2304 : 
; 2305 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN6@Insert_x
	jmp	$LN5@Insert_x
$LN6@Insert_x:

; 2306 : 			;
; 2307 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$253645[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$253645[ebp], 0
	jbe	SHORT $LN33@Insert_x
	mov	eax, DWORD PTR __Count$253645[ebp]
	mov	DWORD PTR tv200[ebp], eax
	jmp	SHORT $LN29@Insert_x
$LN33@Insert_x:
	mov	DWORD PTR tv200[ebp], 1
$LN29@Insert_x:
	mov	ecx, DWORD PTR tv200[ebp]
	mov	DWORD PTR __Maxsize$253638[ebp], ecx
	cmp	DWORD PTR __Maxsize$253638[ebp], 134217727 ; 07ffffffH
	jae	SHORT $LN27@Insert_x
	mov	edx, DWORD PTR __Maxsize$253638[ebp]
	shl	edx, 5
	mov	DWORD PTR tv191[ebp], edx
	jmp	SHORT $LN25@Insert_x
$LN27@Insert_x:
	mov	DWORD PTR tv191[ebp], -1
$LN25@Insert_x:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T253652[ebp], ecx
	mov	edx, DWORD PTR tv191[ebp]
	sub	edx, DWORD PTR $T253652[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN4@Insert_x

; 2308 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@_NV?$allocator@_N@std@@@std@@IBEXXZ ; std::vector<bool,std::allocator<bool> >::_Xlen

; 2309 : 		else

	jmp	$LN5@Insert_x
$LN4@Insert_x:

; 2310 : 			{	// worth doing
; 2311 : 			_Myvec.resize(_Nw(size() + _Count), 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T253664[ebp], ecx
	push	0
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR $T253664[ebp]
	lea	ecx, DWORD PTR [eax+edx+31]
	shr	ecx, 5
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize

; 2312 : 			if (size() == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T253753[ebp], eax
	cmp	DWORD PTR $T253753[ebp], 0
	jne	SHORT $LN2@Insert_x

; 2313 : 				_Mysize += _Count;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx

; 2314 : 			else

	jmp	$LN5@Insert_x
$LN2@Insert_x:

; 2315 : 				{	// make room and copy down suffix
; 2316 : 				iterator _Oldend = end();

	lea	ecx, DWORD PTR __Oldend$214955[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ ; std::vector<bool,std::allocator<bool> >::end

; 2317 : 				_Mysize += _Count;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 2318 : 				std::copy_backward(begin() + _Off, _Oldend, end());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T253873[ebp], eax
	mov	ecx, DWORD PTR $T253873[ebp]
	mov	DWORD PTR $T253898[ebp], ecx
	mov	edx, DWORD PTR $T253898[ebp]
	mov	DWORD PTR $T253895[ebp], edx
	mov	eax, DWORD PTR $T253895[ebp]
	mov	DWORD PTR $T253563[ebp], eax
	mov	DWORD PTR $T253563[ebp+4], 0
	mov	ecx, DWORD PTR $T253563[ebp]
	mov	edx, DWORD PTR $T253563[ebp+4]
	mov	DWORD PTR __Tmp$253917[ebp], ecx
	mov	DWORD PTR __Tmp$253917[ebp+4], edx
	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$253917[ebp]
	call	??Y?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vb_const_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator+=
	mov	ecx, DWORD PTR __Tmp$253917[ebp]
	mov	edx, DWORD PTR __Tmp$253917[ebp+4]
	mov	DWORD PTR $T253564[ebp], ecx
	mov	DWORD PTR $T253564[ebp+4], edx
	lea	eax, DWORD PTR $T253562[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@_NV?$allocator@_N@std@@@std@@QAE?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@XZ ; std::vector<bool,std::allocator<bool> >::end
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Oldend$214955[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Oldend$214955[ebp]
	push	ecx
	mov	edx, DWORD PTR $T253564[ebp+4]
	push	edx
	mov	eax, DWORD PTR $T253564[ebp]
	push	eax
	lea	ecx, DWORD PTR $T253565[ebp]
	push	ecx
	call	??$copy_backward@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00@Z ; std::copy_backward<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > > >
	add	esp, 28					; 0000001cH
$LN5@Insert_x:

; 2319 : 				}
; 2320 : 
; 2321 :  #if _HAS_ITERATOR_DEBUGGING
; 2322 : 			_Orphan_range(_Realloc ? 0 : _Off, _Mysize);
; 2323 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2324 : 
; 2325 : 			}
; 2326 : 		return (_Off);

	mov	eax, DWORD PTR __Off$[ebp]

; 2327 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert_x@?$vector@_NV?$allocator@_N@std@@@std@@IAEIV?$_Vb_const_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@2@I@Z ENDP ; std::vector<bool,std::allocator<bool> >::_Insert_x
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -104						; size = 4
__Tmp$254127 = -48					; size = 4
$T254105 = -44						; size = 4
$T254089 = -40						; size = 4
$T254067 = -36						; size = 4
$T254054 = -32						; size = 4
$T254053 = -28						; size = 4
$T254052 = -24						; size = 4
$T254051 = -20						; size = 4
$T254050 = -16						; size = 4
$T254049 = -12						; size = 4
$T254048 = -8						; size = 4
$T254047 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::resize, COMDAT
; _this$ = ecx

; 717  : 		{	// determine new length, padding with _Val elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 		if (size() < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	cmp	edx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN16@resize@2

; 719  : 			_Insert_n(end(), _Newsize - size(), _Val);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T254067[ebp], ecx
	mov	edx, DWORD PTR $T254067[ebp]
	mov	DWORD PTR $T254048[ebp], edx
	mov	eax, DWORD PTR $T254048[ebp]
	mov	DWORD PTR $T254047[ebp], eax
	lea	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	mov	edx, DWORD PTR __Newsize$[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR $T254047[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Insert_n
	jmp	SHORT $LN4@resize@2

; 720  : 		else if (_Newsize < size())

$LN16@resize@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	cmp	DWORD PTR __Newsize$[ebp], eax
	jae	SHORT $LN4@resize@2

; 721  : 			erase(begin() + _Newsize, end());

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR $T254089[ebp], edx
	mov	eax, DWORD PTR $T254089[ebp]
	mov	DWORD PTR $T254050[ebp], eax
	mov	ecx, DWORD PTR $T254050[ebp]
	mov	DWORD PTR $T254049[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR $T254105[ebp], eax
	mov	ecx, DWORD PTR $T254105[ebp]
	mov	DWORD PTR $T254052[ebp], ecx
	mov	edx, DWORD PTR $T254052[ebp]
	mov	DWORD PTR __Tmp$254127[ebp], edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	ecx, DWORD PTR __Tmp$254127[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Tmp$254127[ebp], edx
	mov	eax, DWORD PTR __Tmp$254127[ebp]
	mov	DWORD PTR $T254053[ebp], eax
	mov	ecx, DWORD PTR $T254053[ebp]
	mov	DWORD PTR $T254051[ebp], ecx
	mov	edx, DWORD PTR $T254049[ebp]
	push	edx
	mov	eax, DWORD PTR $T254051[ebp]
	push	eax
	lea	ecx, DWORD PTR $T254054[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@IV?$allocator@I@std@@@std@@QAE?AV?$_Vector_iterator@IV?$allocator@I@std@@@2@V?$_Vector_const_iterator@IV?$allocator@I@std@@@2@0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::erase
$LN4@resize@2:

; 722  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$vector@IV?$allocator@I@std@@@std@@QAEXII@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
_TEXT	ENDS
PUBLIC	??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z ; stdext::_Unchecked_move_backward<unsigned int *,unsigned int *>
PUBLIC	?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
PUBLIC	??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
PUBLIC	??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
PUBLIC	??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z	; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__catchsym$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$2
__catchsym$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$0
__unwindtable$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$5
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$6
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
_TEXT	SEGMENT
tv84 = -432						; size = 4
tv302 = -428						; size = 4
tv288 = -424						; size = 4
tv280 = -420						; size = 4
_this$ = -416						; size = 4
$T254773 = -412						; size = 4
$T254721 = -368						; size = 4
$T254709 = -364						; size = 4
$T254699 = -357						; size = 1
$T254698 = -356						; size = 4
__Cat$254717 = -327					; size = 1
$T254715 = -326						; size = 1
$T254714 = -325						; size = 1
$T254670 = -324						; size = 4
$T254662 = -320						; size = 4
$T254654 = -316						; size = 4
$T254643 = -312						; size = 4
$T254642 = -308						; size = 4
__Cat$254650 = -302					; size = 1
$T254648 = -301						; size = 1
$T254571 = -276						; size = 4
$T254552 = -272						; size = 4
$T254535 = -265						; size = 1
$T254534 = -264						; size = 4
$T254524 = -260						; size = 4
$T254523 = -256						; size = 4
__Cat$254568 = -250					; size = 1
$T254566 = -249						; size = 1
$T254565 = -248						; size = 1
__Cat$254559 = -247					; size = 1
$T254557 = -246						; size = 1
$T254556 = -245						; size = 1
$T254499 = -244						; size = 4
$T254498 = -240						; size = 4
$T254494 = -236						; size = 4
$T254493 = -232						; size = 4
$T254482 = -228						; size = 4
$T254481 = -224						; size = 4
__Cat$254489 = -218					; size = 1
$T254487 = -217						; size = 1
$T254446 = -216						; size = 4
$T254445 = -212						; size = 4
__Cat$254453 = -206					; size = 1
$T254451 = -205						; size = 1
$T254416 = -204						; size = 4
$T254415 = -200						; size = 4
__Cat$254423 = -194					; size = 1
$T254421 = -193						; size = 1
$T254396 = -192						; size = 4
$T254384 = -188						; size = 4
$T254374 = -181						; size = 1
$T254373 = -180						; size = 4
__Cat$254391 = -175					; size = 1
$T254389 = -174						; size = 1
$T254388 = -173						; size = 1
$T254361 = -172						; size = 4
$T254349 = -168						; size = 4
$T254339 = -161						; size = 1
$T254338 = -160						; size = 4
__Cat$254356 = -155					; size = 1
$T254354 = -154						; size = 1
$T254353 = -153						; size = 1
$T254326 = -152						; size = 4
$T254314 = -148						; size = 4
$T254304 = -141						; size = 1
$T254303 = -140						; size = 4
__Cat$254321 = -135					; size = 1
$T254319 = -134						; size = 1
$T254318 = -133						; size = 1
__Count$254280 = -120					; size = 4
__Count$254254 = -48					; size = 4
__Tmp$215030 = -44					; size = 4
__Oldend$215031 = -40					; size = 4
__Tmp$215020 = -36					; size = 4
__Ncopied$215007 = -32					; size = 4
__Newvec$215005 = -28					; size = 4
__Whereoff$215006 = -24					; size = 4
__Capacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Where$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1153 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1154 : 
; 1155 :  #if _HAS_ITERATOR_DEBUGGING
; 1156 : 		if (_Where._Mycont != this
; 1157 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1158 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1159 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1160 : 
; 1161 : 		size_type _Capacity = capacity();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN29@Insert_n@5
	mov	DWORD PTR tv280[ebp], 0
	jmp	SHORT $LN27@Insert_n@5
$LN29@Insert_n@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	mov	DWORD PTR tv280[ebp], eax
$LN27@Insert_n@5:
	mov	ecx, DWORD PTR tv280[ebp]
	mov	DWORD PTR __Capacity$[ebp], ecx

; 1162 : 
; 1163 : 		if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN14@Insert_n@5
	jmp	$LN16@Insert_n@5
$LN14@Insert_n@5:

; 1164 : 			;
; 1165 : 		else if (max_size() - size() < _Count)

	mov	DWORD PTR __Count$254254[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$254254[ebp], 0
	jbe	SHORT $LN35@Insert_n@5
	mov	edx, DWORD PTR __Count$254254[ebp]
	mov	DWORD PTR tv288[ebp], edx
	jmp	SHORT $LN37@Insert_n@5
$LN35@Insert_n@5:
	mov	DWORD PTR tv288[ebp], 1
$LN37@Insert_n@5:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	eax, DWORD PTR tv288[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN42@Insert_n@5

; 1166 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@IV?$allocator@I@std@@@std@@KAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
	jmp	$LN16@Insert_n@5

; 1167 : 		else if (_Capacity < size() + _Count)

$LN42@Insert_n@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], eax
	jae	$LN10@Insert_n@5

; 1168 : 			{	// not enough room, reallocate
; 1169 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1170 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	DWORD PTR __Count$254280[ebp], 1073741823 ; 3fffffffH
	cmp	DWORD PTR __Count$254280[ebp], 0
	jbe	SHORT $LN48@Insert_n@5
	mov	ecx, DWORD PTR __Count$254280[ebp]
	mov	DWORD PTR tv302[ebp], ecx
	jmp	SHORT $LN44@Insert_n@5
$LN48@Insert_n@5:
	mov	DWORD PTR tv302[ebp], 1
$LN44@Insert_n@5:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	mov	eax, DWORD PTR tv302[ebp]
	sub	eax, edx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN17@Insert_n@5
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN18@Insert_n@5
$LN17@Insert_n@5:
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv84[ebp], ecx
$LN18@Insert_n@5:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1171 : 			if (_Capacity < size() + _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	cmp	DWORD PTR __Capacity$[ebp], edx
	jae	SHORT $LN54@Insert_n@5

; 1172 : 				_Capacity = size() + _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	add	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx

; 1173 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

$LN54@Insert_n@5:
	push	0
	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	call	??$_Allocate@I@std@@YAPAIIPAI@Z		; std::_Allocate<unsigned int>
	add	esp, 8
	mov	DWORD PTR __Newvec$215005[ebp], eax

; 1174 : 			size_type _Whereoff = _VEC_ITER_BASE(_Where) - _Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR __Whereoff$215006[ebp], edx

; 1175 : 			int _Ncopied = 0;

	mov	DWORD PTR __Ncopied$215007[ebp], 0

; 1176 : 
; 1177 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1178 : 			_Ufill(_Newvec + _Whereoff, _Count, _Val);	// add new stuff

	mov	eax, DWORD PTR __Whereoff$215006[ebp]
	mov	ecx, DWORD PTR __Newvec$215005[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T254326[ebp], edx
	mov	eax, DWORD PTR $T254326[ebp]
	mov	DWORD PTR $T254314[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T254318[ebp], cl
	mov	dl, BYTE PTR __Cat$254321[ebp]
	mov	BYTE PTR $T254319[ebp], dl
	mov	al, BYTE PTR $T254318[ebp]
	mov	BYTE PTR $T254304[ebp], al
	mov	ecx, DWORD PTR $T254314[ebp]
	mov	DWORD PTR $T254303[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T254303[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z ; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>
	add	esp, 12					; 0000000cH

; 1179 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$215007[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$215007[ebp], edx

; 1180 : 			_Umove(this->_Myfirst, _VEC_ITER_BASE(_Where),
; 1181 : 				_Newvec);	// move prefix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T254361[ebp], ecx
	mov	edx, DWORD PTR __Newvec$215005[ebp]
	mov	DWORD PTR $T254349[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T254353[ebp], al
	mov	cl, BYTE PTR __Cat$254356[ebp]
	mov	BYTE PTR $T254354[ebp], cl
	mov	dl, BYTE PTR $T254353[ebp]
	mov	BYTE PTR $T254339[ebp], dl
	mov	eax, DWORD PTR $T254349[ebp]
	mov	DWORD PTR $T254338[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR $T254338[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T254361[ebp]
	push	ecx
	call	??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 16					; 00000010H

; 1182 : 			++_Ncopied;

	mov	edx, DWORD PTR __Ncopied$215007[ebp]
	add	edx, 1
	mov	DWORD PTR __Ncopied$215007[ebp], edx

; 1183 : 			_Umove(_VEC_ITER_BASE(_Where), this->_Mylast,
; 1184 : 				_Newvec + (_Whereoff + _Count));	// move suffix

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T254396[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$215006[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Newvec$215005[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T254384[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T254388[ebp], dl
	mov	al, BYTE PTR __Cat$254391[ebp]
	mov	BYTE PTR $T254389[ebp], al
	mov	cl, BYTE PTR $T254388[ebp]
	mov	BYTE PTR $T254374[ebp], cl
	mov	edx, DWORD PTR $T254384[ebp]
	mov	DWORD PTR $T254373[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T254373[ebp]
	push	ecx
	mov	edx, DWORD PTR $T254396[ebp]
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 16					; 00000010H
	jmp	$LN19@Insert_n@5
__catch$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$0:

; 1185 : 			_CATCH_ALL
; 1186 : 			if (1 < _Ncopied)

	cmp	DWORD PTR __Ncopied$215007[ebp], 1
	jle	SHORT $LN7@Insert_n@5

; 1187 : 				_Destroy(_Newvec, _Newvec + _Whereoff);

	mov	ecx, DWORD PTR __Whereoff$215006[ebp]
	mov	edx, DWORD PTR __Newvec$215005[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T254416[ebp], eax
	mov	ecx, DWORD PTR __Newvec$215005[ebp]
	mov	DWORD PTR $T254415[ebp], ecx
	mov	dl, BYTE PTR __Cat$254423[ebp]
	mov	BYTE PTR $T254421[ebp], dl
$LN7@Insert_n@5:

; 1188 : 			if (0 < _Ncopied)

	cmp	DWORD PTR __Ncopied$215007[ebp], 0
	jle	SHORT $LN6@Insert_n@5

; 1189 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);

	mov	eax, DWORD PTR __Whereoff$215006[ebp]
	mov	ecx, DWORD PTR __Newvec$215005[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Count$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR $T254446[ebp], ecx
	mov	edx, DWORD PTR __Whereoff$215006[ebp]
	mov	eax, DWORD PTR __Newvec$215005[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T254445[ebp], ecx
	mov	dl, BYTE PTR __Cat$254453[ebp]
	mov	BYTE PTR $T254451[ebp], dl
$LN6@Insert_n@5:

; 1190 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	eax, DWORD PTR __Newvec$215005[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 1191 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1192 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN103@Insert_n@5
	ret	0
$LN19@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1193 : 
; 1194 : 			_Count += size();

$LN103@Insert_n@5:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 2
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 1195 : 			if (_Myfirst != 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@Insert_n@5

; 1196 : 				{	// destroy and deallocate old array
; 1197 : 				_Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T254494[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T254493[ebp], edx
	mov	eax, DWORD PTR $T254494[ebp]
	mov	DWORD PTR $T254482[ebp], eax
	mov	ecx, DWORD PTR $T254493[ebp]
	mov	DWORD PTR $T254481[ebp], ecx
	mov	dl, BYTE PTR __Cat$254489[ebp]
	mov	BYTE PTR $T254487[ebp], dl

; 1198 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	mov	DWORD PTR $T254499[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T254498[ebp], ecx
	mov	edx, DWORD PTR $T254498[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN5@Insert_n@5:

; 1199 : 				}
; 1200 : 
; 1201 :  #if _HAS_ITERATOR_DEBUGGING
; 1202 : 			this->_Orphan_all();
; 1203 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1204 : 
; 1205 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$215005[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1206 : 			_Mylast = _Newvec + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Newvec$215005[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1207 : 			_Myfirst = _Newvec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Newvec$215005[ebp]
	mov	DWORD PTR [edx+4], eax
	jmp	$LN16@Insert_n@5
$LN10@Insert_n@5:

; 1208 : 			}
; 1209 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	jae	$LN3@Insert_n@5

; 1210 : 			{	// new stuff spills off end
; 1211 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$215020[ebp], ecx

; 1212 : 
; 1213 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1214 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T254571[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Where$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR $T254552[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T254556[ebp], cl
	mov	dl, BYTE PTR __Cat$254559[ebp]
	mov	BYTE PTR $T254557[ebp], dl
	mov	al, BYTE PTR $T254556[ebp]
	mov	BYTE PTR $T254535[ebp], al
	mov	ecx, DWORD PTR $T254552[ebp]
	mov	DWORD PTR $T254534[ebp], ecx
	mov	edx, DWORD PTR $T254534[ebp]
	mov	DWORD PTR $T254524[ebp], edx
	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T254523[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T254565[ebp], cl
	mov	dl, BYTE PTR __Cat$254568[ebp]
	mov	BYTE PTR $T254566[ebp], dl
	movzx	eax, BYTE PTR $T254565[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T254566[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR $T254524[ebp]
	push	eax
	mov	ecx, DWORD PTR $T254571[ebp]
	push	ecx
	mov	edx, DWORD PTR $T254523[ebp]
	push	edx
	call	??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 24					; 00000018H

; 1215 : 
; 1216 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1217 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1218 : 				_Tmp);	// insert new stuff off end

	lea	eax, DWORD PTR __Tmp$215020[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR __Where$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
	jmp	SHORT $LN21@Insert_n@5
__catch$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$2:

; 1219 : 			_CATCH_ALL
; 1220 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR $T254654[ebp], eax
	mov	ecx, DWORD PTR $T254654[ebp]
	mov	DWORD PTR $T254643[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Where$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR $T254642[ebp], ecx
	mov	dl, BYTE PTR __Cat$254650[ebp]
	mov	BYTE PTR $T254648[ebp], dl

; 1221 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1222 : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$3
	ret	0
$LN21@Insert_n@5:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z$3:

; 1223 : 
; 1224 : 			_Mylast += _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1225 : 
; 1226 :  #if _HAS_ITERATOR_DEBUGGING
; 1227 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1228 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1229 : 
; 1230 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1231 : 				_Tmp);	// insert up to old end

	mov	edx, DWORD PTR __Count$[ebp]
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, edx
	mov	DWORD PTR $T254670[ebp], ecx
	mov	edx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T254662[ebp], edx
	jmp	SHORT $LN151@Insert_n@5
$LN150@Insert_n@5:
	mov	eax, DWORD PTR $T254662[ebp]
	add	eax, 4
	mov	DWORD PTR $T254662[ebp], eax
$LN151@Insert_n@5:
	mov	ecx, DWORD PTR $T254662[ebp]
	cmp	ecx, DWORD PTR $T254670[ebp]
	je	SHORT $LN147@Insert_n@5
	mov	edx, DWORD PTR $T254662[ebp]
	mov	eax, DWORD PTR __Tmp$215020[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN150@Insert_n@5
$LN147@Insert_n@5:

; 1232 : 			}
; 1233 : 		else

	jmp	$LN16@Insert_n@5
$LN3@Insert_n@5:

; 1234 : 			{	// new stuff can all be assigned
; 1235 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Tmp$215030[ebp], edx

; 1236 : 
; 1237 : 			pointer _Oldend = _Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Oldend$215031[ebp], ecx

; 1238 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1239 : 				_Mylast);	// copy suffix

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR $T254721[ebp], eax
	mov	ecx, DWORD PTR $T254721[ebp]
	mov	DWORD PTR $T254709[ebp], ecx
	xor	edx, edx
	mov	BYTE PTR $T254714[ebp], dl
	mov	al, BYTE PTR __Cat$254717[ebp]
	mov	BYTE PTR $T254715[ebp], al
	mov	cl, BYTE PTR $T254714[ebp]
	mov	BYTE PTR $T254699[ebp], cl
	mov	edx, DWORD PTR $T254709[ebp]
	mov	DWORD PTR $T254698[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T254698[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldend$215031[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR __Oldend$215031[ebp]
	sub	ecx, eax
	push	ecx
	call	??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1240 : 
; 1241 :  #if _HAS_ITERATOR_DEBUGGING
; 1242 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1243 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1244 : 
; 1245 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1246 : 				_Oldend);	// copy hole

	mov	eax, DWORD PTR __Oldend$215031[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR __Oldend$215031[ebp]
	sub	edx, ecx
	push	edx
	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	call	??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z ; stdext::_Unchecked_move_backward<unsigned int *,unsigned int *>
	add	esp, 12					; 0000000cH

; 1247 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1248 : 				_Tmp);	// insert into hole

	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR $T254773[ebp], ecx
	jmp	SHORT $LN186@Insert_n@5
$LN185@Insert_n@5:
	mov	edx, DWORD PTR $T254773[ebp]
	add	edx, 4
	mov	DWORD PTR $T254773[ebp], edx
$LN186@Insert_n@5:
	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Where$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	cmp	DWORD PTR $T254773[ebp], edx
	je	SHORT $LN16@Insert_n@5
	mov	eax, DWORD PTR $T254773[ebp]
	mov	ecx, DWORD PTR __Tmp$215030[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN185@Insert_n@5
$LN16@Insert_n@5:

; 1249 : 			}
; 1250 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-436]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@IV?$allocator@I@std@@@std@@IAEXV?$_Vector_const_iterator@IV?$allocator@I@std@@@2@IABI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Insert_n
; Function compile flags: /Odtp
;	COMDAT ?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T254844 = -40						; size = 4
$T254834 = -33						; size = 1
$T254833 = -32						; size = 4
__Cat$254840 = -3					; size = 1
$T254838 = -2						; size = 1
$T254837 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill, COMDAT
; _this$ = ecx

; 1253 : 		{	// copy initializing _Count * _Val, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T254844[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T254837[ebp], cl
	mov	dl, BYTE PTR __Cat$254840[ebp]
	mov	BYTE PTR $T254838[ebp], dl
	mov	al, BYTE PTR $T254837[ebp]
	mov	BYTE PTR $T254834[ebp], al
	mov	ecx, DWORD PTR $T254844[ebp]
	mov	DWORD PTR $T254833[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T254833[ebp]
	push	ecx
	call	??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z ; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>
	add	esp, 12					; 0000000cH

; 1255 : 		return (_Ptr + _Count);

	mov	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]

; 1256 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Ufill@?$vector@IV?$allocator@I@std@@@std@@IAEPAIPAIIABI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Ufill
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::random_access_iterator_tag>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??$copy_backward@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00@Z
_TEXT	SEGMENT
__Cat$254852 = -4					; size = 1
$T254849 = -3						; size = 1
$T254848 = -2						; size = 1
$T254847 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
??$copy_backward@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00@Z PROC ; std::copy_backward<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > > >, COMDAT

; 2740 : 	{	// copy [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H

; 2741 : 	return _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 2742 : 		_Iter_random(_First, _Dest), _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T254847[ebp], al
	mov	cl, BYTE PTR __Cat$254852[ebp]
	mov	BYTE PTR $T254848[ebp], cl
	movzx	edx, BYTE PTR $T254847[ebp]
	push	edx
	movzx	eax, BYTE PTR $T254848[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T254849[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$_Copy_backward_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::random_access_iterator_tag>
	add	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2743 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_backward@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00@Z ENDP ; std::copy_backward<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > > >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z
_TEXT	SEGMENT
$T255036 = -38						; size = 1
$T255035 = -37						; size = 1
$T255034 = -36						; size = 4
$T255033 = -32						; size = 4
$T255020 = -25						; size = 1
$T255019 = -24						; size = 4
$T255018 = -20						; size = 4
__Off$255029 = -16					; size = 4
__Result$255030 = -12					; size = 4
__Cat$255026 = -8					; size = 1
$T255023 = -7						; size = 1
$T255022 = -6						; size = 1
__Cat$255000 = -4					; size = 1
$T254996 = -3						; size = 1
$T254995 = -2						; size = 1
$T254994 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z PROC ; stdext::_Unchecked_move_backward<unsigned int *,unsigned int *>, COMDAT

; 3694 : 	{	// move [_First, _Last) backwards to [..., _Dest)

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 3695 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3696 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T254994[ebp], al
	mov	cl, BYTE PTR __Cat$255000[ebp]
	mov	BYTE PTR $T254995[ebp], cl
	mov	dl, BYTE PTR $T254994[ebp]
	mov	BYTE PTR $T255036[ebp], dl
	mov	al, BYTE PTR $T254996[ebp]
	mov	BYTE PTR $T255035[ebp], al
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T255034[ebp], ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255033[ebp], edx
	xor	eax, eax
	mov	BYTE PTR $T255022[ebp], al
	mov	cl, BYTE PTR __Cat$255026[ebp]
	mov	BYTE PTR $T255023[ebp], cl
	mov	dl, BYTE PTR $T255022[ebp]
	mov	BYTE PTR $T255020[ebp], dl
	mov	eax, DWORD PTR $T255034[ebp]
	mov	DWORD PTR $T255019[ebp], eax
	mov	ecx, DWORD PTR $T255033[ebp]
	mov	DWORD PTR $T255018[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T255018[ebp]
	sar	edx, 2
	mov	DWORD PTR __Off$255029[ebp], edx
	mov	eax, DWORD PTR __Off$255029[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR $T255019[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Result$255030[ebp], ecx
	cmp	DWORD PTR __Off$255029[ebp], 0
	jle	SHORT $LN7@Unchecked_@2
	mov	edx, DWORD PTR __Off$255029[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T255018[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$255029[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __Result$255030[ebp]
	push	edx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN7@Unchecked_@2:
	mov	eax, DWORD PTR __Result$255030[ebp]

; 3697 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unchecked_move_backward@PAIPAI@stdext@@YAPAIPAI00@Z ENDP ; stdext::_Unchecked_move_backward<unsigned int *,unsigned int *>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Fill@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@_N@std@@YAXV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@0AB_N@Z
_TEXT	SEGMENT
tv190 = -32						; size = 4
tv179 = -28						; size = 4
tv171 = -24						; size = 4
$T255117 = -17						; size = 1
$T255081 = -16						; size = 4
$T255080 = -12						; size = 4
$T255039 = -8						; size = 8
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Val$ = 24						; size = 4
??$_Fill@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@_N@std@@YAXV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@0AB_N@Z PROC ; std::_Fill<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,bool>, COMDAT

; 3156 : 	{	// copy _Val through [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 3157 : 	_DEBUG_RANGE(_First, _Last);
; 3158 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Fill
$LN2@Fill:
	cmp	DWORD PTR __First$[ebp+4], 31		; 0000001fH
	jae	SHORT $LN11@Fill
	mov	eax, DWORD PTR __First$[ebp+4]
	add	eax, 1
	mov	DWORD PTR __First$[ebp+4], eax
	jmp	SHORT $LN3@Fill
$LN11@Fill:
	mov	DWORD PTR __First$[ebp+4], 0
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN3@Fill:
	mov	edx, DWORD PTR __First$[ebp]
	cmp	edx, DWORD PTR __Last$[ebp]
	jne	SHORT $LN18@Fill
	mov	eax, DWORD PTR __First$[ebp+4]
	cmp	eax, DWORD PTR __Last$[ebp+4]
	jne	SHORT $LN18@Fill
	mov	DWORD PTR tv171[ebp], 1
	jmp	SHORT $LN14@Fill
$LN18@Fill:
	mov	DWORD PTR tv171[ebp], 0
$LN14@Fill:
	movzx	ecx, BYTE PTR tv171[ebp]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN4@Fill

; 3159 : 		*_First = _Val;

	mov	eax, DWORD PTR __First$[ebp+4]
	mov	DWORD PTR $T255081[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255080[ebp], ecx
	mov	edx, DWORD PTR $T255080[ebp]
	mov	DWORD PTR $T255039[ebp], edx
	mov	eax, DWORD PTR $T255081[ebp]
	mov	DWORD PTR $T255039[ebp+4], eax
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR $T255117[ebp], dl
	movzx	eax, BYTE PTR $T255117[ebp]
	test	eax, eax
	je	SHORT $LN34@Fill
	mov	ecx, DWORD PTR $T255039[ebp]
	mov	DWORD PTR tv179[ebp], ecx
	mov	edx, 1
	mov	ecx, DWORD PTR $T255039[ebp+4]
	shl	edx, cl
	mov	eax, DWORD PTR tv179[ebp]
	or	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv179[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN28@Fill
$LN34@Fill:
	mov	edx, DWORD PTR $T255039[ebp]
	mov	DWORD PTR tv190[ebp], edx
	mov	eax, 1
	mov	ecx, DWORD PTR $T255039[ebp+4]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR tv190[ebp]
	and	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR tv190[ebp]
	mov	DWORD PTR [edx], eax
$LN28@Fill:
	jmp	$LN2@Fill
$LN4@Fill:

; 3160 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Fill@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@_N@std@@YAXV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@0AB_N@Z ENDP ; std::_Fill<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,bool>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
tv150 = -44						; size = 4
$T255201 = -32						; size = 4
$T255200 = -28						; size = 4
$T255163 = -24						; size = 4
$T255162 = -20						; size = 4
$T255121 = -16						; size = 8
$T255120 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
__Dest$ = 28						; size = 8
___formal$ = 36						; size = 1
___formal$ = 40						; size = 1
___formal$ = 44						; size = 1
??$_Copy_backward_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::random_access_iterator_tag>, COMDAT

; 2673 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
$LN2@Copy_backw:

; 2674 : 	_DEBUG_RANGE(_First, _Last);
; 2675 : 	while (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	SHORT $LN9@Copy_backw
	mov	ecx, DWORD PTR __First$[ebp+4]
	cmp	ecx, DWORD PTR __Last$[ebp+4]
	jne	SHORT $LN9@Copy_backw
	mov	DWORD PTR tv150[ebp], 1
	jmp	SHORT $LN5@Copy_backw
$LN9@Copy_backw:
	mov	DWORD PTR tv150[ebp], 0
$LN5@Copy_backw:
	movzx	edx, BYTE PTR tv150[ebp]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	movzx	eax, dl
	test	eax, eax
	je	$LN1@Copy_backw

; 2676 : 		*--_Dest = *--_Last;

	cmp	DWORD PTR __Last$[ebp+4], 0
	je	SHORT $LN16@Copy_backw
	mov	ecx, DWORD PTR __Last$[ebp+4]
	sub	ecx, 1
	mov	DWORD PTR __Last$[ebp+4], ecx
	jmp	SHORT $LN11@Copy_backw
$LN16@Copy_backw:
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, 4
	mov	DWORD PTR __Last$[ebp], edx
	mov	DWORD PTR __Last$[ebp+4], 31		; 0000001fH
$LN11@Copy_backw:
	mov	eax, DWORD PTR __Last$[ebp+4]
	mov	DWORD PTR $T255163[ebp], eax
	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR $T255162[ebp], ecx
	mov	edx, DWORD PTR $T255162[ebp]
	mov	DWORD PTR $T255121[ebp], edx
	mov	eax, DWORD PTR $T255163[ebp]
	mov	DWORD PTR $T255121[ebp+4], eax
	cmp	DWORD PTR __Dest$[ebp+4], 0
	je	SHORT $LN30@Copy_backw
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	sub	ecx, 1
	mov	DWORD PTR __Dest$[ebp+4], ecx
	jmp	SHORT $LN25@Copy_backw
$LN30@Copy_backw:
	mov	edx, DWORD PTR __Dest$[ebp]
	sub	edx, 4
	mov	DWORD PTR __Dest$[ebp], edx
	mov	DWORD PTR __Dest$[ebp+4], 31		; 0000001fH
$LN25@Copy_backw:
	mov	eax, DWORD PTR __Dest$[ebp+4]
	mov	DWORD PTR $T255201[ebp], eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T255200[ebp], ecx
	mov	edx, DWORD PTR $T255200[ebp]
	mov	DWORD PTR $T255120[ebp], edx
	mov	eax, DWORD PTR $T255201[ebp]
	mov	DWORD PTR $T255120[ebp+4], eax
	lea	ecx, DWORD PTR $T255121[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T255120[ebp]
	call	??4?$_Vb_reference@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Vb_reference<unsigned int,int,std::vector<bool,std::allocator<bool> > >::operator=
	jmp	$LN2@Copy_backw
$LN1@Copy_backw:

; 2677 : 	return (_Dest);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2678 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_backward_opt@V?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@std@@V12@Urandom_access_iterator_tag@2@@std@@YA?AV?$_Vb_iterator@IHV?$vector@_NV?$allocator@_N@std@@@std@@@0@V10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::_Vb_iterator<unsigned int,int,std::vector<bool,std::allocator<bool> > >,std::random_access_iterator_tag>
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z
_TEXT	SEGMENT
$T255282 = -22						; size = 1
$T255281 = -21						; size = 1
$T255280 = -20						; size = 4
$T255271 = -13						; size = 1
$T255270 = -12						; size = 4
$T255269 = -8						; size = 4
$T255273 = -4						; size = 1
$T255256 = -2						; size = 1
$T255255 = -1						; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z PROC	; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>, COMDAT

; 3720 : 	{	// copy _Val _Count times through [_First, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 3721 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T255255[ebp], al
	mov	cl, BYTE PTR $T255255[ebp]
	mov	BYTE PTR $T255282[ebp], cl
	mov	dl, BYTE PTR $T255256[ebp]
	mov	BYTE PTR $T255281[ebp], dl
	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255280[ebp], eax
	xor	ecx, ecx
	mov	BYTE PTR $T255273[ebp], cl
	mov	dl, BYTE PTR $T255273[ebp]
	mov	BYTE PTR $T255271[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR $T255270[ebp], eax
	mov	ecx, DWORD PTR $T255280[ebp]
	mov	DWORD PTR $T255269[ebp], ecx
	jmp	SHORT $LN9@unchecked_@2
$LN8@unchecked_@2:
	mov	edx, DWORD PTR $T255270[ebp]
	sub	edx, 1
	mov	DWORD PTR $T255270[ebp], edx
	mov	eax, DWORD PTR $T255269[ebp]
	add	eax, 4
	mov	DWORD PTR $T255269[ebp], eax
$LN9@unchecked_@2:
	cmp	DWORD PTR $T255270[ebp], 0
	jbe	SHORT $LN1@unchecked_@2
	mov	ecx, DWORD PTR $T255269[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN8@unchecked_@2
$LN1@unchecked_@2:

; 3722 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_fill_n@PAIII@stdext@@YAXPAIIABI@Z ENDP	; stdext::unchecked_fill_n<unsigned int *,unsigned int,unsigned int>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z
_TEXT	SEGMENT
$T255299 = -21						; size = 1
$T255298 = -20						; size = 4
$T255297 = -16						; size = 4
__Result$255295 = -12					; size = 4
__Count$255294 = -8					; size = 4
__Cat$255289 = -3					; size = 1
$T255286 = -2						; size = 1
$T255285 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >, COMDAT

; 819  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 820  : 	return (_STD _Uninit_copy(_CHECKED_BASE(_First),
; 821  : 		_CHECKED_BASE(_Last), _Dest, _Al,
; 822  : 		_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T255285[ebp], al
	mov	cl, BYTE PTR __Cat$255289[ebp]
	mov	BYTE PTR $T255286[ebp], cl
	mov	dl, BYTE PTR $T255285[ebp]
	mov	BYTE PTR $T255299[ebp], dl
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR $T255298[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T255297[ebp], ecx
	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR $T255297[ebp]
	sar	edx, 2
	mov	DWORD PTR __Count$255294[ebp], edx
	mov	eax, DWORD PTR __Count$255294[ebp]
	mov	ecx, DWORD PTR $T255298[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Result$255295[ebp], edx
	cmp	DWORD PTR __Count$255294[ebp], 0
	jbe	SHORT $LN6@unchecked_@3
	mov	eax, DWORD PTR __Count$255294[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR $T255297[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$255294[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR $T255298[ebp]
	push	eax
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN6@unchecked_@3:
	mov	eax, DWORD PTR __Result$255295[ebp]

; 823  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_uninitialized_copy@PAIPAIV?$allocator@I@std@@@stdext@@YAPAIPAI00AAV?$allocator@I@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >, COMDAT

; 145  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 146  : 	_DEBUG_RANGE(_First, _Last);
; 147  : 	_DEBUG_POINTER(_Dest);
; 148  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 149  : 	_FwdIt _Result = _Dest + _Count;

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR __Result$[ebp], eax

; 150  : 	if (_Count > 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN1@Uninit_cop@7

; 151  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	DWORD PTR __imp__memmove_s
	add	esp, 16					; 00000010H
$LN1@Uninit_cop@7:

; 152  : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 153  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PAIPAIV?$allocator@I@std@@@std@@YAPAIPAI00AAV?$allocator@I@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned int *,unsigned int *,std::allocator<unsigned int> >
_TEXT	ENDS
END
